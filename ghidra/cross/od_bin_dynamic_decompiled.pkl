(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060d178)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060d178]\n'
p4
S'ff 25 12 b9 20 00\n'
p5
S'.plt:0000000000401860\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040a61b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4069d7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x406a58;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x406aec;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00406868\nMOV EDX,0x40a608\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401970\nJMP 0x0040687d\nMOV EDX,0x40a614\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40a61b\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a8f0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40a61f\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004017b0\nCMP R12,0x9\nJA 0x00406906\nJMP qword ptr [0x40a5b8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40a6ea\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40a829\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x38\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a6fa\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40a711\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401970\nXOR EDI,EDI\nMOV ESI,0x40a72d\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x18\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a74d\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x18\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a771\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x28\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a799\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x28\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a7c5\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x38\nJMP 0x00406b77\nXOR EDI,EDI\nMOV ESI,0x40a7f5\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401970\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004015e0\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 08 a6 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 0a b1 ff ff\neb 15\nba 14 a6 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 f3 b0 ff ff\n31 ff\nbe 1b a6 40 00\nba 05 00 00 00\ne8 32 ae ff ff\n48 89 c1\nbe 01 00 00 00\nba f0 a8 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 c5 b0 ff ff\n31 ff\nbe 1f a6 40 00\nba 05 00 00 00\ne8 04 ae ff ff\n48 89 c7\n4c 89 f6\ne8 e9 ae ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b8 a5 40 00\n31 ff\nbe ea a6 40 00\nba 05 00 00 00\ne8 da ad ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a b0 ff ff\n31 ff\nbe 29 a8 40 00\nba 05 00 00 00\ne8 a9 ad ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 21 b0 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe fa a6 40 00\nba 05 00 00 00\ne8 57 ad ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 e3 af ff ff\n31 ff\nbe 11 a7 40 00\nba 05 00 00 00\ne8 22 ad ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa af ff ff\n31 ff\nbe 2d a7 40 00\nba 05 00 00 00\ne8 e9 ac ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 74 af ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 4d a7 40 00\nba 05 00 00 00\ne8 aa ac ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 32 af ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 71 a7 40 00\nba 05 00 00 00\ne8 68 ac ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e8 ae ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 99 a7 40 00\nba 05 00 00 00\ne8 1e ac ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9e ae ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe c5 a7 40 00\nba 05 00 00 00\ne8 d4 ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4c ae ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe f5 a7 40 00\nba 05 00 00 00\ne8 85 ab ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fd ad ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c aa ff ff\n'
p12
S'.text:0000000000406830\n.text:0000000000406832\n.text:0000000000406834\n.text:0000000000406836\n.text:0000000000406837\n.text:0000000000406838\n.text:000000000040683b\n.text:000000000040683e\n.text:0000000000406841\n.text:0000000000406844\n.text:0000000000406847\n.text:000000000040684a\n.text:000000000040684f\n.text:0000000000406852\n.text:0000000000406854\n.text:0000000000406859\n.text:000000000040685b\n.text:000000000040685e\n.text:0000000000406861\n.text:0000000000406866\n.text:0000000000406868\n.text:000000000040686d\n.text:000000000040686f\n.text:0000000000406872\n.text:0000000000406875\n.text:0000000000406878\n.text:000000000040687d\n.text:000000000040687f\n.text:0000000000406884\n.text:0000000000406889\n.text:000000000040688e\n.text:0000000000406891\n.text:0000000000406896\n.text:000000000040689b\n.text:00000000004068a1\n.text:00000000004068a3\n.text:00000000004068a6\n.text:00000000004068ab\n.text:00000000004068ad\n.text:00000000004068b2\n.text:00000000004068b7\n.text:00000000004068bc\n.text:00000000004068bf\n.text:00000000004068c2\n.text:00000000004068c7\n.text:00000000004068cb\n.text:00000000004068cd\n.text:00000000004068d5\n.text:00000000004068d7\n.text:00000000004068dc\n.text:00000000004068e1\n.text:00000000004068e6\n.text:00000000004068e9\n.text:00000000004068ec\n.text:00000000004068f1\n.text:00000000004068f3\n.text:00000000004068f6\n.text:00000000004068fa\n.text:00000000004068fb\n.text:00000000004068fd\n.text:00000000004068ff\n.text:0000000000406901\n.text:0000000000406906\n.text:0000000000406908\n.text:000000000040690d\n.text:0000000000406912\n.text:0000000000406917\n.text:000000000040691a\n.text:000000000040691d\n.text:0000000000406921\n.text:0000000000406925\n.text:000000000040692a\n.text:000000000040692f\n.text:0000000000406932\n.text:0000000000406936\n.text:000000000040693a\n.text:000000000040693e\n.text:0000000000406942\n.text:0000000000406946\n.text:000000000040694a\n.text:000000000040694f\n.text:0000000000406953\n.text:0000000000406958\n.text:000000000040695a\n.text:000000000040695f\n.text:0000000000406964\n.text:0000000000406969\n.text:000000000040696c\n.text:000000000040696f\n.text:0000000000406973\n.text:0000000000406978\n.text:000000000040697a\n.text:000000000040697d\n.text:0000000000406981\n.text:0000000000406982\n.text:0000000000406984\n.text:0000000000406986\n.text:0000000000406988\n.text:000000000040698d\n.text:000000000040698f\n.text:0000000000406994\n.text:0000000000406999\n.text:000000000040699e\n.text:00000000004069a1\n.text:00000000004069a4\n.text:00000000004069a8\n.text:00000000004069ac\n.text:00000000004069b1\n.text:00000000004069b3\n.text:00000000004069b6\n.text:00000000004069ba\n.text:00000000004069bb\n.text:00000000004069bd\n.text:00000000004069bf\n.text:00000000004069c1\n.text:00000000004069c6\n.text:00000000004069c8\n.text:00000000004069cd\n.text:00000000004069d2\n.text:00000000004069d7\n.text:00000000004069da\n.text:00000000004069dd\n.text:00000000004069e1\n.text:00000000004069e5\n.text:00000000004069e9\n.text:00000000004069ee\n.text:00000000004069f0\n.text:00000000004069f3\n.text:00000000004069f7\n.text:00000000004069fc\n.text:0000000000406a00\n.text:0000000000406a05\n.text:0000000000406a07\n.text:0000000000406a0c\n.text:0000000000406a11\n.text:0000000000406a16\n.text:0000000000406a19\n.text:0000000000406a1c\n.text:0000000000406a20\n.text:0000000000406a24\n.text:0000000000406a29\n.text:0000000000406a2e\n.text:0000000000406a31\n.text:0000000000406a35\n.text:0000000000406a39\n.text:0000000000406a3e\n.text:0000000000406a42\n.text:0000000000406a47\n.text:0000000000406a49\n.text:0000000000406a4e\n.text:0000000000406a53\n.text:0000000000406a58\n.text:0000000000406a5b\n.text:0000000000406a5e\n.text:0000000000406a62\n.text:0000000000406a66\n.text:0000000000406a6a\n.text:0000000000406a6f\n.text:0000000000406a74\n.text:0000000000406a77\n.text:0000000000406a7b\n.text:0000000000406a7f\n.text:0000000000406a83\n.text:0000000000406a88\n.text:0000000000406a8c\n.text:0000000000406a91\n.text:0000000000406a93\n.text:0000000000406a98\n.text:0000000000406a9d\n.text:0000000000406aa2\n.text:0000000000406aa5\n.text:0000000000406aa8\n.text:0000000000406aac\n.text:0000000000406ab0\n.text:0000000000406ab5\n.text:0000000000406aba\n.text:0000000000406abd\n.text:0000000000406ac1\n.text:0000000000406ac5\n.text:0000000000406ac9\n.text:0000000000406acd\n.text:0000000000406ad2\n.text:0000000000406ad6\n.text:0000000000406adb\n.text:0000000000406add\n.text:0000000000406ae2\n.text:0000000000406ae7\n.text:0000000000406aec\n.text:0000000000406aef\n.text:0000000000406af2\n.text:0000000000406af6\n.text:0000000000406afa\n.text:0000000000406afe\n.text:0000000000406b03\n.text:0000000000406b08\n.text:0000000000406b0b\n.text:0000000000406b0f\n.text:0000000000406b13\n.text:0000000000406b17\n.text:0000000000406b1b\n.text:0000000000406b1f\n.text:0000000000406b24\n.text:0000000000406b28\n.text:0000000000406b2a\n.text:0000000000406b2c\n.text:0000000000406b31\n.text:0000000000406b36\n.text:0000000000406b3b\n.text:0000000000406b3e\n.text:0000000000406b41\n.text:0000000000406b45\n.text:0000000000406b49\n.text:0000000000406b4e\n.text:0000000000406b53\n.text:0000000000406b56\n.text:0000000000406b5a\n.text:0000000000406b5e\n.text:0000000000406b62\n.text:0000000000406b66\n.text:0000000000406b6a\n.text:0000000000406b6e\n.text:0000000000406b73\n.text:0000000000406b77\n.text:0000000000406b78\n.text:0000000000406b7a\n.text:0000000000406b7c\n.text:0000000000406b7e\n.text:0000000000406b7f\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060d0d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060d0d0]\n'
p18
S'ff 25 ba b9 20 00\n'
p19
S'.plt:0000000000401710\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00407569;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00407569:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401810\nTEST EAX,EAX\nJS 0x00407569\nMOV RDI,RBX\nCALL 0x00401880\nTEST EAX,EAX\nJZ 0x00407537\nMOV RDI,RBX\nCALL 0x00401810\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401730\nCMP RAX,-0x1\nJZ 0x00407569\nMOV RDI,RBX\nCALL 0x00407580\nTEST EAX,EAX\nJZ 0x00407569\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004016a0\nTEST EBP,EBP\nJZ 0x00407562\nCALL 0x004015f0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004016a0\n'
p25
S'55\n53\n50\n48 89 fb\ne8 05 a3 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 a3 ff ff\n85 c0\n74 1c\n48 89 df\ne8 ed a2 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 ff a1 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 a8 a0 ff ff\n8b 28\n48 89 df\ne8 4e a1 ff ff\n85 ed\n74 0c\ne8 95 a0 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 29 a1 ff ff\n'
p26
S'.text:0000000000407500\n.text:0000000000407501\n.text:0000000000407502\n.text:0000000000407503\n.text:0000000000407506\n.text:000000000040750b\n.text:000000000040750d\n.text:000000000040750f\n.text:0000000000407512\n.text:0000000000407517\n.text:0000000000407519\n.text:000000000040751b\n.text:000000000040751e\n.text:0000000000407523\n.text:0000000000407525\n.text:000000000040752a\n.text:000000000040752c\n.text:0000000000407531\n.text:0000000000407535\n.text:0000000000407537\n.text:000000000040753a\n.text:000000000040753f\n.text:0000000000407541\n.text:0000000000407543\n.text:0000000000407548\n.text:000000000040754a\n.text:000000000040754d\n.text:0000000000407552\n.text:0000000000407554\n.text:0000000000407556\n.text:000000000040755b\n.text:000000000040755d\n.text:0000000000407562\n.text:0000000000407566\n.text:0000000000407567\n.text:0000000000407568\n.text:0000000000407569\n.text:000000000040756c\n.text:0000000000407570\n.text:0000000000407571\n.text:0000000000407572\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060d048)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060d048]\n'
p32
S'ff 25 42 ba 20 00\n'
p33
S'.plt:0000000000401600\n'
p34
tp35
sS'xnrealloc'
p36
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p37
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p38
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00406d84\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00406d90\nPUSH RAX\nCALL 0x00406ee0\n'
p39
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p40
S'.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d76\n.text:0000000000406d79\n.text:0000000000406d7b\n.text:0000000000406d7f\n.text:0000000000406d82\n.text:0000000000406d84\n.text:0000000000406d85\n'
p41
tp42
sS'quote'
p43
(S'\n__stdcall quote(char * arg)\n'
p44
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00406410\n'
p46
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p47
S'.text:0000000000406420\n.text:0000000000406423\n.text:0000000000406425\n.text:0000000000406428\n'
p48
tp49
sS'emit_bug_reporting_address'
p50
(S'\n__stdcall emit_bug_reporting_address()\n'
p51
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40a865\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a87a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004018c0\nXOR EDI,EDI\nMOV ESI,0x40a890\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409957\nMOV ECX,0x409b62\nXOR EAX,EAX\nCALL 0x004018c0\nXOR EDI,EDI\nMOV ESI,0x40a8a4\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004017b0\n'
p53
S'50\n31 ff\nbe 65 a8 40 00\nba 05 00 00 00\ne8 fe a9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 7a a8 40 00\n31 c0\n48 89 ce\ne8 e7 ab ff ff\n31 ff\nbe 90 a8 40 00\nba 05 00 00 00\ne8 d6 a9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 57 99 40 00\nb9 62 9b 40 00\n31 c0\ne8 bd ab ff ff\n31 ff\nbe a4 a8 40 00\nba 05 00 00 00\ne8 ac a9 ff ff\n48 8b 35 ad 65 20 00\n48 89 c7\n58\ne9 8c aa ff ff\n'
p54
S'.text:0000000000406cb0\n.text:0000000000406cb1\n.text:0000000000406cb3\n.text:0000000000406cb8\n.text:0000000000406cbd\n.text:0000000000406cc2\n.text:0000000000406cc5\n.text:0000000000406cca\n.text:0000000000406ccf\n.text:0000000000406cd1\n.text:0000000000406cd4\n.text:0000000000406cd9\n.text:0000000000406cdb\n.text:0000000000406ce0\n.text:0000000000406ce5\n.text:0000000000406cea\n.text:0000000000406ced\n.text:0000000000406cf2\n.text:0000000000406cf7\n.text:0000000000406cfc\n.text:0000000000406cfe\n.text:0000000000406d03\n.text:0000000000406d05\n.text:0000000000406d0a\n.text:0000000000406d0f\n.text:0000000000406d14\n.text:0000000000406d1b\n.text:0000000000406d1e\n.text:0000000000406d1f\n'
p55
tp56
sS'clone_quoting_options'
p57
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p58
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004015f0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60d440\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00406e90\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p60
S'55\n41 56\n53\n48 89 fb\ne8 04 c6 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 40 d4 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p61
S'.text:0000000000404fe0\n.text:0000000000404fe1\n.text:0000000000404fe3\n.text:0000000000404fe4\n.text:0000000000404fe7\n.text:0000000000404fec\n.text:0000000000404fef\n.text:0000000000404ff2\n.text:0000000000404ff5\n.text:0000000000404ffa\n.text:0000000000404ffe\n.text:0000000000405003\n.text:0000000000405006\n.text:000000000040500b\n.text:000000000040500e\n.text:000000000040500f\n.text:0000000000405011\n.text:0000000000405012\n'
p62
tp63
sS'xmalloc'
p64
(S'\n__stdcall xmalloc(size_t n)\n'
p65
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401830\nTEST RBX,RBX\nJZ 0x00406d63\nTEST RAX,RAX\nJZ 0x00406d65\nPOP RBX\nRET\nCALL 0x00406ee0\n'
p67
S'53\n48 89 fb\ne8 d7 aa ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p68
S'.text:0000000000406d50\n.text:0000000000406d51\n.text:0000000000406d54\n.text:0000000000406d59\n.text:0000000000406d5c\n.text:0000000000406d5e\n.text:0000000000406d61\n.text:0000000000406d63\n.text:0000000000406d64\n.text:0000000000406d65\n'
p69
tp70
sS'quotearg_char_mem'
p71
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p72
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060d470]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060d460]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d450]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d440]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00405040\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405f30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p74
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 18 72 20 00\n48 89 4c 24 30\n0f 10 05 fc 71 20 00\n0f 29 44 24 20\n0f 10 05 e0 71 20 00\n0f 29 44 24 10\n0f 10 05 c4 71 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p75
S'.text:0000000000406240\n.text:0000000000406242\n.text:0000000000406244\n.text:0000000000406245\n.text:0000000000406249\n.text:000000000040624b\n.text:000000000040624e\n.text:0000000000406251\n.text:0000000000406258\n.text:000000000040625d\n.text:0000000000406264\n.text:0000000000406269\n.text:0000000000406270\n.text:0000000000406275\n.text:000000000040627c\n.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406288\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406292\n.text:0000000000406294\n.text:0000000000406297\n.text:000000000040629a\n.text:000000000040629d\n.text:00000000004062a2\n.text:00000000004062a6\n.text:00000000004062a7\n.text:00000000004062a9\n.text:00000000004062ab\n'
p76
tp77
sS'print_long_long'
p78
(S'\n__stdcall print_long_long(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p79
V\u000avoid print_long_long(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ulong uVar3;\u000a  undefined8 *puVar4;\u000a  long lVar5;\u000a  undefined8 uVar6;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar7;\u000a  undefined8 local_38;\u000a  \u000a  uVar3 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar7 = fields;\u000a    do {\u000a      iVar2 = (int)uVar3;\u000a      sVar7 = sVar7 - 1;\u000a      auVar1 = ZEXT816(sVar7 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar3 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        uVar6 = *(undefined8 *)block;\u000a      }\u000a      else {\u000a        puVar4 = &local_38;\u000a        lVar5 = 8;\u000a        do {\u000a          *(undefined *)puVar4 = *(undefined *)((long)block + lVar5 + -1);\u000a          puVar4 = (undefined8 *)((long)puVar4 + 1);\u000a          lVar5 = lVar5 + -1;\u000a          uVar6 = local_38;\u000a        } while (lVar5 != 0);\u000a      }\u000a      block = (undefined8 *)block + 1;\u000a      xprintf(fmt_string,(ulong)(uint)((iVar2 + in_R8D) - SUB164(auVar1,0)),uVar6);\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV dword ptr [RSP + 0x4],R8D\nMOV qword ptr [RSP + 0x8],RCX\nMOV RBP,RDX\nMOV R12,RSI\nMOV R13,RDI\nCMP R13,R12\nJBE 0x00403da9\nMOVSXD R14,EBX\nMOV R15,R13\nNOP\nMOV ESI,EBX\nDEC R15\nMOV RAX,R15\nIMUL RAX,R14\nXOR EDX,EDX\nDIV R13\nADD ESI,dword ptr [RSP + 0x4]\nMOV RBX,RAX\nSUB ESI,EBX\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403d90\nLEA RAX,[RSP + 0x10]\nMOV ECX,0x8\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RBP + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403d70\nMOV RDX,qword ptr [RSP + 0x10]\nJMP 0x00403d94\nMOV RDX,qword ptr [RBP]\nADD RBP,0x8\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00406f10\nCMP R15,R12\nJA 0x00403d40\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p81
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n44 89 44 24 04\n48 89 4c 24 08\n48 89 d5\n49 89 f4\n49 89 fd\n4d 39 e5\n76 70\n4c 63 f3\n4d 89 ef\n90\n89 de\n49 ff cf\n4c 89 f8\n49 0f af c6\n31 d2\n49 f7 f5\n03 74 24 04\n48 89 c3\n29 de\n80 3d 79 96 20 00 00\n74 2d\n48 8d 44 24 10\nb9 08 00 00 00\n0f 1f 00\n0f b6 54 0d ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\n48 8b 54 24 10\neb 0e\n48 8b 55 00\n48 83 c5 08\n31 c0\n48 8b 7c 24 08\ne8 6c 31 00 00\n4d 39 e7\n77 97\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p82
S'.text:0000000000403d10\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d17\n.text:0000000000403d19\n.text:0000000000403d1a\n.text:0000000000403d1e\n.text:0000000000403d21\n.text:0000000000403d26\n.text:0000000000403d2b\n.text:0000000000403d2e\n.text:0000000000403d31\n.text:0000000000403d34\n.text:0000000000403d37\n.text:0000000000403d39\n.text:0000000000403d3c\n.text:0000000000403d3f\n.text:0000000000403d40\n.text:0000000000403d42\n.text:0000000000403d45\n.text:0000000000403d48\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d51\n.text:0000000000403d55\n.text:0000000000403d58\n.text:0000000000403d5a\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d68\n.text:0000000000403d6d\n.text:0000000000403d70\n.text:0000000000403d75\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d7d\n.text:0000000000403d7f\n.text:0000000000403d84\n.text:0000000000403d90\n.text:0000000000403d94\n.text:0000000000403d98\n.text:0000000000403d9a\n.text:0000000000403d9f\n.text:0000000000403da4\n.text:0000000000403da7\n.text:0000000000403da9\n.text:0000000000403dad\n.text:0000000000403dae\n.text:0000000000403db0\n.text:0000000000403db2\n.text:0000000000403db4\n.text:0000000000403db6\n.text:0000000000403db7\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x00401aba) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x60ce18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401ab0\nJMP 0x00401a40\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401aab\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401a40\n'
p88
S'bf 18 ce 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000401aa0\n.text:0000000000401aa5\n.text:0000000000401aa9\n.text:0000000000401aab\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401ab8\n.text:0000000000401aba\n.text:0000000000401abb\n.text:0000000000401abe\n.text:0000000000401ac0\n.text:0000000000401ac1\n'
p90
tp91
sS'dump_hexl_mode_trailer'
p92
(S'\n__stdcall dump_hexl_mode_trailer(size_t n_bytes, char * block)\n'
p93
V\u000avoid dump_hexl_mode_trailer(size_t n_bytes,char *block)\u000a\u000a{\u000a  byte bVar1;\u000a  ushort **ppuVar2;\u000a  uint __c;\u000a  \u000a  fputs_unlocked("  >",stdout);\u000a  if (n_bytes != 0) {\u000a    do {\u000a      bVar1 = *block;\u000a      __c = (uint)bVar1;\u000a      block = (char *)((byte *)block + 1);\u000a      ppuVar2 = __ctype_b_loc();\u000a      if (((*ppuVar2)[(ulong)bVar1] & 0x4000) == 0) {\u000a        __c = 0x2e;\u000a      }\u000a      putchar_unlocked(__c);\u000a      n_bytes = n_bytes - 1;\u000a    } while (n_bytes != 0);\u000a  }\u000a  putchar_unlocked(0x3c);\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409f59\nCALL 0x004017b0\nTEST R14,R14\nJZ 0x00404705\nMOV EBP,0x2e\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EBX,byte ptr [R15]\nINC R15\nCALL 0x004019b0\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RBX*0x2]\nTEST AH,0x40\nCMOVZ EBX,EBP\nMOV EDI,EBX\nCALL 0x00401800\nDEC R14\nJNZ 0x004046e0\nMOV EDI,0x3c\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401800\n'
p95
S'55\n41 57\n41 56\n53\n50\n49 89 f7\n49 89 fe\n48 8b 35 04 8c 20 00\nbf 59 9f 40 00\ne8 e2 d0 ff ff\n4d 85 f6\n74 32\nbd 2e 00 00 00\n0f 1f 84 00 00 00 00 00\n41 0f b6 1f\n49 ff c7\ne8 c4 d2 ff ff\n48 8b 00\n0f b7 04 58\nf6 c4 40\n0f 44 dd\n89 df\ne8 00 d1 ff ff\n49 ff ce\n75 db\nbf 3c 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 e7 d0 ff ff\n'
p96
S'.text:00000000004046b0\n.text:00000000004046b1\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046b6\n.text:00000000004046b7\n.text:00000000004046ba\n.text:00000000004046bd\n.text:00000000004046c4\n.text:00000000004046c9\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046d3\n.text:00000000004046d8\n.text:00000000004046e0\n.text:00000000004046e4\n.text:00000000004046e7\n.text:00000000004046ec\n.text:00000000004046ef\n.text:00000000004046f3\n.text:00000000004046f6\n.text:00000000004046f9\n.text:00000000004046fb\n.text:0000000000404700\n.text:0000000000404703\n.text:0000000000404705\n.text:000000000040470a\n.text:000000000040470e\n.text:000000000040470f\n.text:0000000000404711\n.text:0000000000404713\n.text:0000000000404714\n'
p97
tp98
sS'print_double'
p99
(S'\n__stdcall print_double(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p100
V\u000avoid print_double(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ulong uVar3;\u000a  double *pdVar4;\u000a  long lVar5;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar6;\u000a  double x;\u000a  char buf [40];\u000a  double local_58 [5];\u000a  \u000a  uVar3 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar6 = fields;\u000a    do {\u000a      iVar2 = (int)uVar3;\u000a      sVar6 = sVar6 - 1;\u000a      auVar1 = ZEXT816(sVar6 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar3 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        x = *(double *)block;\u000a      }\u000a      else {\u000a        lVar5 = 8;\u000a        pdVar4 = local_58;\u000a        do {\u000a          *(char *)pdVar4 = *(char *)((long)block + lVar5 + -1);\u000a          pdVar4 = (double *)((long)pdVar4 + 1);\u000a          lVar5 = lVar5 + -1;\u000a          x = local_58[0];\u000a        } while (lVar5 != 0);\u000a      }\u000a      block = (double *)block + 1;\u000a      dtoastr((char *)local_58,0x28,x);\u000a      xprintf("%*s",(ulong)(uint)((iVar2 + in_R8D) - SUB164(auVar1,0)),local_58);\u000a    } while (blank < sVar6);\u000a  }\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV EBP,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV RBX,RDX\nMOV R12,RDI\nMOV qword ptr [RSP + 0x18],RSI\nCMP R12,RSI\nJBE 0x00403f66\nMOVSXD RAX,EBP\nMOV qword ptr [RSP + 0x10],RAX\nLEA R13,[RSP + 0x20]\nMOV R15,R12\nNOP word ptr [RAX + RAX*0x1]\nMOV R14D,EBP\nDEC R15\nMOV RAX,R15\nIMUL RAX,qword ptr [RSP + 0x10]\nXOR EDX,EDX\nDIV R12\nADD R14D,dword ptr [RSP + 0xc]\nMOV RBP,RAX\nSUB R14D,EBP\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403f30\nMOV RAX,R13\nMOV ECX,0x8\nMOVZX EDX,byte ptr [RBX + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403f10\nMOVSD XMM0,qword ptr [RSP + 0x20]\nJMP 0x00403f34\nMOVSD XMM0,qword ptr [RBX]\nADD RBX,0x8\nMOV ESI,0x28\nXOR EDX,EDX\nXOR ECX,ECX\nMOV RDI,R13\nCALL 0x00404b50\nMOV EDI,0x409e64\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R13\nCALL 0x00406f10\nCMP R15,qword ptr [RSP + 0x18]\nJA 0x00403ee0\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p102
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n44 89 cd\n44 89 44 24 0c\n48 89 d3\n49 89 fc\n48 89 74 24 18\n49 39 f4\n0f 86 9c 00 00 00\n48 63 c5\n48 89 44 24 10\n4c 8d 6c 24 20\n4d 89 e7\n66 0f 1f 44 00 00\n41 89 ee\n49 ff cf\n4c 89 f8\n48 0f af 44 24 10\n31 d2\n49 f7 f4\n44 03 74 24 0c\n48 89 c5\n41 29 ee\n80 3d d4 94 20 00 00\n74 28\n4c 89 e8\nb9 08 00 00 00\n0f b6 54 0b ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\nf2 0f 10 44 24 20\neb 0d\nf2 0f 10 03\n48 83 c3 08\nbe 28 00 00 00\n31 d2\n31 c9\n4c 89 ef\ne8 07 0c 00 00\nbf 64 9e 40 00\n31 c0\n44 89 f6\n4c 89 ea\ne8 b5 2f 00 00\n4c 3b 7c 24 18\n0f 87 7a ff ff ff\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p103
S'.text:0000000000403ea0\n.text:0000000000403ea1\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea7\n.text:0000000000403ea9\n.text:0000000000403eaa\n.text:0000000000403eae\n.text:0000000000403eb1\n.text:0000000000403eb6\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ec1\n.text:0000000000403ec4\n.text:0000000000403eca\n.text:0000000000403ecd\n.text:0000000000403ed2\n.text:0000000000403ed7\n.text:0000000000403eda\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee6\n.text:0000000000403ee9\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef4\n.text:0000000000403ef9\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f10\n.text:0000000000403f15\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f1f\n.text:0000000000403f25\n.text:0000000000403f30\n.text:0000000000403f34\n.text:0000000000403f38\n.text:0000000000403f3d\n.text:0000000000403f3f\n.text:0000000000403f41\n.text:0000000000403f44\n.text:0000000000403f49\n.text:0000000000403f4e\n.text:0000000000403f50\n.text:0000000000403f53\n.text:0000000000403f56\n.text:0000000000403f5b\n.text:0000000000403f60\n.text:0000000000403f66\n.text:0000000000403f6a\n.text:0000000000403f6b\n.text:0000000000403f6d\n.text:0000000000403f6f\n.text:0000000000403f71\n.text:0000000000403f73\n.text:0000000000403f74\n'
p104
tp105
sS'decode_format_string'
p106
(S'\n__stdcall decode_format_string(char * s)\n'
p107
V\u000a_Bool decode_format_string(char *s)\u000a\u000a{\u000a  char cVar1;\u000a  char *s_00;\u000a  _Bool _Var2;\u000a  char *in_RAX;\u000a  char *local_28;\u000a  \u000a  if (s == (char *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("s != NULL","src/od.c",0x3d8,"_Bool decode_format_string(const char *)");\u000a  }\u000a  cVar1 = *s;\u000a  s_00 = s;\u000a  local_28 = in_RAX;\u000a  while( true ) {\u000a    if (cVar1 == 0) {\u000a      return true;\u000a    }\u000a    if (n_specs_allocated <= n_specs) {\u000a      spec = (tspec *)x2nrealloc(spec,&n_specs_allocated,0x28);\u000a    }\u000a    _Var2 = decode_one_format(s,s_00,&local_28,spec + n_specs);\u000a    if (_Var2 == false) break;\u000a    if (s_00 == local_28) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("s != next","src/od.c",0x3e4,"_Bool decode_format_string(const char *)");\u000a    }\u000a    n_specs = n_specs + 1;\u000a    cVar1 = *local_28;\u000a    s_00 = local_28;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402a29\nMOV R14B,0x1\nCMP byte ptr [RBX],0x0\nJZ 0x00402a02\nMOV R15,RSP\nMOV RBP,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060d390]\nCMP RAX,qword ptr [0x0060d388]\nJA 0x004029bd\nMOV RDI,qword ptr [0x0060d398]\nMOV ESI,0x60d390\nMOV EDX,0x28\nCALL 0x00406dc0\nMOV qword ptr [0x0060d398],RAX\nMOV RAX,qword ptr [0x0060d398]\nMOV RCX,qword ptr [0x0060d388]\nLEA RCX,[RCX + RCX*0x4]\nLEA RCX,[RAX + RCX*0x8]\nMOV RDI,RBX\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x004033f0\nTEST AL,AL\nJZ 0x004029ff\nMOV RAX,qword ptr [RSP]\nCMP RBP,RAX\nJZ 0x00402a10\nINC qword ptr [0x0060d388]\nCMP byte ptr [RAX],0x0\nMOV RBP,RAX\nJNZ 0x00402990\nJMP 0x00402a02\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x409ccd\nMOV ESI,0x409c9b\nMOV EDX,0x3e4\nMOV ECX,0x409ca4\nCALL 0x00401740\nMOV EDI,0x409c91\nMOV ESI,0x409c9b\nMOV EDX,0x3d8\nMOV ECX,0x409ca4\nCALL 0x00401740\n'
p109
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 85 db\n0f 84 b6 00 00 00\n41 b6 01\n80 3b 00\n0f 84 83 00 00 00\n49 89 e7\n48 89 dd\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 f9 a9 20 00\n48 3b 05 ea a9 20 00\n77 1d\n48 8b 3d f1 a9 20 00\nbe 90 d3 60 00\nba 28 00 00 00\ne8 0a 44 00 00\n48 89 05 db a9 20 00\n48 8b 05 d4 a9 20 00\n48 8b 0d bd a9 20 00\n48 8d 0c 89\n48 8d 0c c8\n48 89 df\n48 89 ee\n4c 89 fa\ne8 0f 0a 00 00\n84 c0\n74 1a\n48 8b 04 24\n48 39 c5\n74 22\n48 ff 05 93 a9 20 00\n80 38 00\n48 89 c5\n75 93\neb 03\n45 31 f6\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\nbf cd 9c 40 00\nbe 9b 9c 40 00\nba e4 03 00 00\nb9 a4 9c 40 00\ne8 17 ed ff ff\nbf 91 9c 40 00\nbe 9b 9c 40 00\nba d8 03 00 00\nb9 a4 9c 40 00\ne8 fe ec ff ff\n'
p110
S'.text:0000000000402960\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402965\n.text:0000000000402966\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296d\n.text:0000000000402973\n.text:0000000000402976\n.text:0000000000402979\n.text:000000000040297f\n.text:0000000000402982\n.text:0000000000402985\n.text:0000000000402990\n.text:0000000000402997\n.text:000000000040299e\n.text:00000000004029a0\n.text:00000000004029a7\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b6\n.text:00000000004029bd\n.text:00000000004029c4\n.text:00000000004029cb\n.text:00000000004029cf\n.text:00000000004029d3\n.text:00000000004029d6\n.text:00000000004029d9\n.text:00000000004029dc\n.text:00000000004029e1\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029e9\n.text:00000000004029ec\n.text:00000000004029ee\n.text:00000000004029f5\n.text:00000000004029f8\n.text:00000000004029fb\n.text:00000000004029fd\n.text:00000000004029ff\n.text:0000000000402a02\n.text:0000000000402a05\n.text:0000000000402a09\n.text:0000000000402a0a\n.text:0000000000402a0c\n.text:0000000000402a0e\n.text:0000000000402a0f\n.text:0000000000402a10\n.text:0000000000402a15\n.text:0000000000402a1a\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2e\n.text:0000000000402a33\n.text:0000000000402a38\n.text:0000000000402a3d\n'
p111
tp112
sS'quotearg_n_style_colon'
p113
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p114
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00406160\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00405040\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00405f30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p116
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p117
S'.text:00000000004062e0\n.text:00000000004062e1\n.text:00000000004062e3\n.text:00000000004062e4\n.text:00000000004062e8\n.text:00000000004062eb\n.text:00000000004062ed\n.text:00000000004062f2\n.text:00000000004062f5\n.text:00000000004062fa\n.text:00000000004062ff\n.text:0000000000406304\n.text:0000000000406307\n.text:000000000040630c\n.text:0000000000406313\n.text:0000000000406315\n.text:0000000000406318\n.text:000000000040631b\n.text:0000000000406320\n.text:0000000000406324\n.text:0000000000406325\n.text:0000000000406327\n.text:0000000000406328\n'
p118
tp119
sS'quote_mem'
p120
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004063f0\n'
p123
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p124
S'.text:0000000000406400\n.text:0000000000406403\n.text:0000000000406406\n.text:0000000000406408\n.text:000000000040640b\n.text:000000000040640e\n'
p125
tp126
sS'open_next_file'
p127
(S'\n__stdcall open_next_file()\n'
p128
V\u000a_Bool open_next_file(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined uVar2;\u000a  uint *puVar3;\u000a  undefined uVar4;\u000a  \u000a  uVar2 = 1;\u000a  do {\u000a    while( true ) {\u000a      uVar4 = uVar2;\u000a      input_filename = *file_list;\u000a      if (input_filename == (char *)0x0) {\u000a        return (_Bool)uVar4;\u000a      }\u000a      file_list = file_list + 1;\u000a      if ((*input_filename != '-') || (input_filename[1] != 0)) break;\u000a      input_filename = (char *)dcgettext(0,"standard input",5);\u000a      in_stream = stdin;\u000a      have_read_stdin = 1;\u000a      uVar2 = uVar4;\u000a      if (stdin != (FILE *)0x0) goto LAB_00402c0b;\u000a    }\u000a    in_stream = (FILE *)fopen(input_filename,"r");\u000a    if (in_stream != (FILE *)0x0) break;\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = 0;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)uVar1,&DAT_00409fb9);\u000a    uVar2 = 0;\u000a  } while (in_stream == (FILE *)0x0);\u000aLAB_00402c0b:\u000a  if ((limit_bytes_to_format == 1) && (flag_dump_strings == 0)) {\u000a    setvbuf((FILE *)in_stream,(char *)0x0,2,0);\u000a  }\u000a  return (_Bool)uVar4;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV BL,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RCX,qword ptr [RAX]\nMOV qword ptr [0x0060d410],RCX\nTEST RCX,RCX\nJZ 0x00402c2f\nADD RAX,0x8\nMOV qword ptr [0x0060d3e8],RAX\nMOV RAX,qword ptr [0x0060d410]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402b77\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402bd5\nMOV RDI,qword ptr [0x0060d410]\nMOV ESI,0x409e7c\nCALL 0x00401920\nMOV qword ptr [0x0060d3f0],RAX\nTEST RAX,RAX\nJNZ 0x00402c0b\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060d410]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004062e0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004018f0\nMOV RAX,qword ptr [0x0060d3f0]\nTEST RAX,RAX\nJZ 0x00402b40\nJMP 0x00402c0b\nXOR EDI,EDI\nMOV ESI,0x409a33\nMOV EDX,0x5\nCALL 0x004016c0\nMOV qword ptr [0x0060d410],RAX\nMOV RAX,qword ptr [0x0060d2d0]\nMOV qword ptr [0x0060d3f0],RAX\nMOV byte ptr [0x0060d408],0x1\nTEST RAX,RAX\nJZ 0x00402b40\nCMP byte ptr [0x0060d3c0],0x1\nJNZ 0x00402c2f\nMOV CL,byte ptr [0x0060d3b0]\nTEST CL,CL\nJNZ 0x00402c2f\nXOR ESI,ESI\nMOV EDX,0x2\nXOR ECX,ECX\nMOV RDI,RAX\nCALL 0x004018d0\nAND BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p130
S'55\n53\n50\nb3 01\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 a1 a8 20 00\n48 8b 08\n48 89 0d bf a8 20 00\n48 85 c9\n0f 84 d5 00 00 00\n48 83 c0 08\n48 89 05 83 a8 20 00\n48 8b 05 a4 a8 20 00\n80 38 2d\n75 06\n80 78 01 00\n74 5e\n48 8b 3d 92 a8 20 00\nbe 7c 9e 40 00\ne8 98 ed ff ff\n48 89 05 61 a8 20 00\n48 85 c0\n75 77\ne8 57 ea ff ff\n8b 28\n48 8b 15 6e a8 20 00\n31 db\n31 ff\nbe 03 00 00 00\ne8 30 37 00 00\n48 89 c1\n31 ff\nba b9 9f 40 00\n31 c0\n89 ee\ne8 2d ed ff ff\n48 8b 05 26 a8 20 00\n48 85 c0\n0f 84 6d ff ff ff\neb 36\n31 ff\nbe 33 9a 40 00\nba 05 00 00 00\ne8 da ea ff ff\n48 89 05 23 a8 20 00\n48 8b 05 dc a6 20 00\n48 89 05 f5 a7 20 00\nc6 05 06 a8 20 00 01\n48 85 c0\n0f 84 35 ff ff ff\n80 3d ae a7 20 00 01\n75 1b\n8a 0d 96 a7 20 00\n84 c9\n75 11\n31 f6\nba 02 00 00 00\n31 c9\n48 89 c7\ne8 a1 ec ff ff\n80 e3 01\n89 d8\n48 83 c4 08\n5b\n5d\nc3\n'
p131
S'.text:0000000000402b30\n.text:0000000000402b31\n.text:0000000000402b32\n.text:0000000000402b33\n.text:0000000000402b35\n.text:0000000000402b40\n.text:0000000000402b47\n.text:0000000000402b4a\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b5a\n.text:0000000000402b5e\n.text:0000000000402b65\n.text:0000000000402b6c\n.text:0000000000402b6f\n.text:0000000000402b71\n.text:0000000000402b75\n.text:0000000000402b77\n.text:0000000000402b7e\n.text:0000000000402b83\n.text:0000000000402b88\n.text:0000000000402b8f\n.text:0000000000402b92\n.text:0000000000402b94\n.text:0000000000402b99\n.text:0000000000402b9b\n.text:0000000000402ba2\n.text:0000000000402ba4\n.text:0000000000402ba6\n.text:0000000000402bab\n.text:0000000000402bb0\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bba\n.text:0000000000402bbc\n.text:0000000000402bbe\n.text:0000000000402bc3\n.text:0000000000402bca\n.text:0000000000402bcd\n.text:0000000000402bd3\n.text:0000000000402bd5\n.text:0000000000402bd7\n.text:0000000000402bdc\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402bed\n.text:0000000000402bf4\n.text:0000000000402bfb\n.text:0000000000402c02\n.text:0000000000402c05\n.text:0000000000402c0b\n.text:0000000000402c12\n.text:0000000000402c14\n.text:0000000000402c1a\n.text:0000000000402c1c\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2f\n.text:0000000000402c32\n.text:0000000000402c34\n.text:0000000000402c38\n.text:0000000000402c39\n.text:0000000000402c3a\n'
p132
tp133
sS'fileno'
p134
(S'\n__stdcall fileno(FILE * __stream)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060d150)();\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0060d150]\n'
p137
S'ff 25 3a b9 20 00\n'
p138
S'.plt:0000000000401810\n'
p139
tp140
sS'xstrtol_error'
p141
(S'\n__stdcall xstrtol_error(option * long_options, char * arg)\n'
p142
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid xstrtol_error(option *long_options,char *arg)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  long in_RCX;\u000a  undefined in_DL;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  uint uVar5;\u000a  ulong in_R9;\u000a  char option_buffer [2];\u000a  ulong uStack40;\u000a  \u000a  iVar1 = (int)arg;\u000a  uVar5 = (int)long_options - 1;\u000a  if (uVar5 < 4) {\u000a    if (iVar1 < 0) {\u000a      lVar3 = (long)&uStack40 + 6;\u000a      puVar4 = &DAT_0040a950 + -(long)iVar1;\u000a      uStack40 = (ulong)CONCAT16(in_DL,(int6)in_RAX);\u000a    }\u000a    else {\u000a      lVar3 = *(long *)(in_RCX + (long)iVar1 * 0x20);\u000a      puVar4 = &DAT_0040a950;\u000a      uStack40 = in_RAX;\u000a    }\u000a    uVar2 = dcgettext(0,(&PTR_s__s_s_argument___s__too_large_0040a9b0)[(long)(int)uVar5],5);\u000a    error(in_R9 & 0xffffffff,0,uVar2,puVar4,lVar3);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV R14,R8\nMOV EAX,ESI\nDEC EDI\nCMP EDI,0x4\nJNC 0x004071be\nMOVSXD RSI,EDI\nMOV RSI,qword ptr [0x40a9b0 + RSI*0x8]\nCDQE\nTEST EAX,EAX\nJS 0x00407176\nSHL RAX,0x5\nMOV RBX,qword ptr [RCX + RAX*0x1]\nMOV EBP,0x40a950\nJMP 0x0040718c\nLEA RBX,[RSP + 0x6]\nMOV EBP,0x40a950\nSUB RBP,RAX\nMOV byte ptr [RSP + 0x6],DL\nMOV byte ptr [RSP + 0x7],0x0\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RDX,RCX\nMOV RCX,RBP\nMOV R8,RBX\nMOV R9,R14\nCALL 0x004018f0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004015e0\n'
p144
S'55\n41 57\n41 56\n53\n50\n45 89 cf\n4d 89 c6\n89 f0\nff cf\n83 ff 04\n73 68\n48 63 f7\n48 8b 34 f5 b0 a9 40 00\n48 98\n85 c0\n78 0f\n48 c1 e0 05\n48 8b 1c 01\nbd 50 a9 40 00\neb 16\n48 8d 5c 24 06\nbd 50 a9 40 00\n48 29 c5\n88 54 24 06\nc6 44 24 07 00\n31 ff\nba 05 00 00 00\ne8 28 a5 ff ff\n48 89 c1\n31 f6\n31 c0\n44 89 ff\n48 89 ca\n48 89 e9\n49 89 d8\n4d 89 f1\ne8 3d a7 ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 1d a4 ff ff\n'
p145
S'.text:0000000000407140\n.text:0000000000407141\n.text:0000000000407143\n.text:0000000000407145\n.text:0000000000407146\n.text:0000000000407147\n.text:000000000040714a\n.text:000000000040714d\n.text:000000000040714f\n.text:0000000000407151\n.text:0000000000407154\n.text:0000000000407156\n.text:0000000000407159\n.text:0000000000407161\n.text:0000000000407163\n.text:0000000000407165\n.text:0000000000407167\n.text:000000000040716b\n.text:000000000040716f\n.text:0000000000407174\n.text:0000000000407176\n.text:000000000040717b\n.text:0000000000407180\n.text:0000000000407183\n.text:0000000000407187\n.text:000000000040718c\n.text:000000000040718e\n.text:0000000000407193\n.text:0000000000407198\n.text:000000000040719b\n.text:000000000040719d\n.text:000000000040719f\n.text:00000000004071a2\n.text:00000000004071a5\n.text:00000000004071a8\n.text:00000000004071ab\n.text:00000000004071ae\n.text:00000000004071b3\n.text:00000000004071b7\n.text:00000000004071b8\n.text:00000000004071ba\n.text:00000000004071bc\n.text:00000000004071bd\n.text:00000000004071be\n'
p146
tp147
sS'mbrtowc'
p148
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060d0c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060d0c8]\n'
p151
S'ff 25 c2 b9 20 00\n'
p152
S'.plt:0000000000401700\n'
p153
tp154
sS'xstrtoumax'
p155
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p156
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00407406;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00407406;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00407335_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00407313:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00407313;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004073e7;\u000a  default:\u000aswitchD_00407335_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004073e7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004073e7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00407406:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00407423\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004015f0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x004019b0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00407220\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00407412\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401930\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00407280\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004072b1\nCMP EAX,0x22\nJNZ 0x00407412\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004072bc\nJMP 0x00407406\nTEST R12,R12\nJZ 0x00407412\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00407412\nMOV RDI,R12\nCALL 0x00401710\nTEST RAX,RAX\nJZ 0x00407412\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004072bc\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00407406\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00407406\nMOV RDI,R12\nCALL 0x00401710\nTEST RAX,RAX\nJZ 0x0040734e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401710\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00407313\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040731a\nCMP EAX,0x44\nJZ 0x0040731a\nCMP EAX,0x69\nJNZ 0x00407313\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00407324\nMOV EBP,0x1\nJMP 0x00407324\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040734e\nXOR EAX,EAX\nJMP qword ptr [0x40a9d0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00407470\nJMP 0x004073ec\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00407412\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004073e7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00407470\nJMP 0x004073ec\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004073e7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00407440\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40ab80\nMOV ESI,0x40aba6\nMOV EDX,0x60\nMOV ECX,0x40abb6\nCALL 0x00401740\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 f2 a3 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 a3 a7 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 dc a6 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 74 a4 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 3c a4 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 2a a4 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd d0 a9 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 80 ab 40 00\nbe a6 ab 40 00\nba 60 00 00 00\nb9 b6 ab 40 00\ne8 04 a3 ff ff\n'
p159
S'.text:00000000004071d0\n.text:00000000004071d1\n.text:00000000004071d3\n.text:00000000004071d5\n.text:00000000004071d7\n.text:00000000004071d9\n.text:00000000004071da\n.text:00000000004071de\n.text:00000000004071e1\n.text:00000000004071e4\n.text:00000000004071e7\n.text:00000000004071ea\n.text:00000000004071ee\n.text:00000000004071f4\n.text:00000000004071f9\n.text:00000000004071fe\n.text:0000000000407201\n.text:0000000000407208\n.text:000000000040720d\n.text:0000000000407210\n.text:0000000000407213\n.text:0000000000407220\n.text:0000000000407223\n.text:0000000000407226\n.text:000000000040722b\n.text:000000000040722d\n.text:0000000000407230\n.text:0000000000407235\n.text:0000000000407239\n.text:000000000040723e\n.text:0000000000407240\n.text:0000000000407246\n.text:0000000000407249\n.text:000000000040724c\n.text:000000000040724f\n.text:0000000000407254\n.text:0000000000407258\n.text:000000000040725c\n.text:000000000040725f\n.text:0000000000407261\n.text:0000000000407264\n.text:0000000000407266\n.text:0000000000407268\n.text:000000000040726b\n.text:0000000000407271\n.text:0000000000407276\n.text:0000000000407279\n.text:000000000040727b\n.text:0000000000407280\n.text:0000000000407283\n.text:0000000000407289\n.text:000000000040728c\n.text:000000000040728e\n.text:0000000000407294\n.text:0000000000407297\n.text:000000000040729c\n.text:000000000040729f\n.text:00000000004072a5\n.text:00000000004072ad\n.text:00000000004072af\n.text:00000000004072b1\n.text:00000000004072b3\n.text:00000000004072b6\n.text:00000000004072bc\n.text:00000000004072c0\n.text:00000000004072c4\n.text:00000000004072c6\n.text:00000000004072cc\n.text:00000000004072cf\n.text:00000000004072d4\n.text:00000000004072d7\n.text:00000000004072d9\n.text:00000000004072de\n.text:00000000004072e1\n.text:00000000004072e6\n.text:00000000004072eb\n.text:00000000004072ee\n.text:00000000004072f0\n.text:00000000004072f4\n.text:00000000004072f7\n.text:00000000004072f9\n.text:00000000004072fc\n.text:00000000004072fe\n.text:0000000000407301\n.text:0000000000407303\n.text:0000000000407305\n.text:0000000000407309\n.text:000000000040730c\n.text:0000000000407311\n.text:0000000000407313\n.text:0000000000407318\n.text:000000000040731a\n.text:000000000040731f\n.text:0000000000407324\n.text:0000000000407328\n.text:000000000040732b\n.text:000000000040732e\n.text:0000000000407331\n.text:0000000000407333\n.text:0000000000407335\n.text:000000000040733c\n.text:000000000040733f\n.text:0000000000407344\n.text:0000000000407349\n.text:000000000040734e\n.text:0000000000407352\n.text:0000000000407357\n.text:000000000040735a\n.text:000000000040735d\n.text:0000000000407362\n.text:0000000000407365\n.text:000000000040736a\n.text:000000000040736f\n.text:0000000000407371\n.text:0000000000407374\n.text:0000000000407379\n.text:000000000040737e\n.text:0000000000407380\n.text:0000000000407383\n.text:0000000000407388\n.text:000000000040738d\n.text:000000000040738f\n.text:0000000000407392\n.text:0000000000407397\n.text:0000000000407399\n.text:000000000040739c\n.text:00000000004073a1\n.text:00000000004073a6\n.text:00000000004073a8\n.text:00000000004073ab\n.text:00000000004073b0\n.text:00000000004073b5\n.text:00000000004073b7\n.text:00000000004073ba\n.text:00000000004073bf\n.text:00000000004073c4\n.text:00000000004073c6\n.text:00000000004073c9\n.text:00000000004073ce\n.text:00000000004073d3\n.text:00000000004073d5\n.text:00000000004073d8\n.text:00000000004073dd\n.text:00000000004073df\n.text:00000000004073e2\n.text:00000000004073e7\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f2\n.text:00000000004073f6\n.text:00000000004073fa\n.text:00000000004073fc\n.text:00000000004073ff\n.text:0000000000407403\n.text:0000000000407406\n.text:000000000040740a\n.text:000000000040740f\n.text:0000000000407412\n.text:0000000000407414\n.text:0000000000407418\n.text:0000000000407419\n.text:000000000040741b\n.text:000000000040741d\n.text:000000000040741f\n.text:0000000000407421\n.text:0000000000407422\n.text:0000000000407423\n.text:0000000000407428\n.text:000000000040742d\n.text:0000000000407432\n.text:0000000000407437\n'
p160
tp161
sS'setlocale'
p162
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060d1a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060d1a0]\n'
p165
S'ff 25 ea b8 20 00\n'
p166
S'.plt:00000000004018b0\n'
p167
tp168
sS'c_toupper'
p169
(S'\n__stdcall c_toupper()\n'
p170
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p172
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p173
S'.text:0000000000407780\n.text:0000000000407783\n.text:0000000000407786\n.text:0000000000407789\n.text:000000000040778c\n'
p174
tp175
sS'mbsinit'
p176
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060d208)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060d208]\n'
p179
S'ff 25 82 b8 20 00\n'
p180
S'.plt:0000000000401980\n'
p181
tp182
sS'dcgettext'
p183
(S'\n__stdcall dcgettext()\n'
p184
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060d0a8)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060d0a8]\n'
p186
S'ff 25 e2 b9 20 00\n'
p187
S'.plt:00000000004016c0\n'
p188
tp189
sS'quotearg_free'
p190
(S'\n__stdcall quotearg_free()\n'
p191
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060d258]\nCMP dword ptr [0x0060d260],0x2\nJC 0x00405eca\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004015c0\nINC RBX\nMOV EAX,dword ptr [0x0060d260]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00405eb0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60d480\nCMP RDI,RAX\nJZ 0x00405ef3\nCALL 0x004015c0\nMOV qword ptr [0x0060d268],0x100\nMOV qword ptr [0x0060d270],0x60d480\nMOV EAX,0x60d268\nCMP R14,RAX\nJZ 0x00405f10\nMOV RDI,R14\nCALL 0x004015c0\nMOV qword ptr [0x0060d258],0x60d268\nMOV dword ptr [0x0060d260],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n4c 8b 35 bc 73 20 00\n83 3d bd 73 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 08 b7 ff ff\n48 ff c3\n8b 05 9f 73 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 80 d4 60 00\n48 39 c7\n74 1b\ne8 e3 b6 ff ff\n48 c7 05 80 73 20 00 00 01 00 00\n48 c7 05 7d 73 20 00 80 d4 60 00\nb8 68 d2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 bb b6 ff ff\n48 c7 05 48 73 20 00 68 d2 60 00\nc7 05 46 73 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:0000000000405e90\n.text:0000000000405e92\n.text:0000000000405e94\n.text:0000000000405e95\n.text:0000000000405e9c\n.text:0000000000405ea3\n.text:0000000000405ea5\n.text:0000000000405ea9\n.text:0000000000405eae\n.text:0000000000405eb0\n.text:0000000000405eb3\n.text:0000000000405eb8\n.text:0000000000405ebb\n.text:0000000000405ec1\n.text:0000000000405ec5\n.text:0000000000405ec8\n.text:0000000000405eca\n.text:0000000000405ece\n.text:0000000000405ed3\n.text:0000000000405ed6\n.text:0000000000405ed8\n.text:0000000000405edd\n.text:0000000000405ee8\n.text:0000000000405ef3\n.text:0000000000405ef8\n.text:0000000000405efb\n.text:0000000000405efd\n.text:0000000000405f00\n.text:0000000000405f05\n.text:0000000000405f10\n.text:0000000000405f1a\n.text:0000000000405f1b\n.text:0000000000405f1d\n.text:0000000000405f1f\n'
p195
tp196
sS'quotearg_mem'
p197
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004060f0\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p201
S'.text:0000000000406110\n.text:0000000000406113\n.text:0000000000406116\n.text:0000000000406118\n.text:000000000040611b\n.text:000000000040611e\n'
p202
tp203
sS'deregister_tm_clones'
p204
(S'\n__stdcall deregister_tm_clones()\n'
p205
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a15) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a1f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p206
S'MOV EAX,0x60d2b7\nPUSH RBP\nSUB RAX,0x60d2b0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401a30\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a30\nPOP RBP\nMOV EDI,0x60d2b0\nJMP RAX\nPOP RBP\nRET\n'
p207
S'b8 b7 d2 60 00\n55\n48 2d b0 d2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf b0 d2 60 00\nff e0\n5d\nc3\n'
p208
S'.text:0000000000401a00\n.text:0000000000401a05\n.text:0000000000401a06\n.text:0000000000401a0c\n.text:0000000000401a10\n.text:0000000000401a13\n.text:0000000000401a15\n.text:0000000000401a1a\n.text:0000000000401a1d\n.text:0000000000401a1f\n.text:0000000000401a20\n.text:0000000000401a25\n.text:0000000000401a30\n.text:0000000000401a31\n'
p209
tp210
sS'xprintf'
p211
(S'\n__stdcall xprintf(char * format)\n'
p212
V\u000aint xprintf(char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  int iVar1;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &args[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  iVar1 = xvprintf(format,&local_d8);\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00406f52\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RSI,RSP\nCALL 0x00406fb0\nADD RSP,0xd8\nRET\n'
p214
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 89 e6\ne8 17 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p215
S'.text:0000000000406f10\n.text:0000000000406f17\n.text:0000000000406f19\n.text:0000000000406f1b\n.text:0000000000406f20\n.text:0000000000406f25\n.text:0000000000406f2a\n.text:0000000000406f32\n.text:0000000000406f3a\n.text:0000000000406f42\n.text:0000000000406f4a\n.text:0000000000406f52\n.text:0000000000406f57\n.text:0000000000406f5c\n.text:0000000000406f61\n.text:0000000000406f66\n.text:0000000000406f6b\n.text:0000000000406f70\n.text:0000000000406f75\n.text:0000000000406f7d\n.text:0000000000406f82\n.text:0000000000406f8a\n.text:0000000000406f91\n.text:0000000000406f94\n.text:0000000000406f99\n.text:0000000000406fa0\n'
p216
tp217
sS'quotearg_custom'
p218
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p219
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p220
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00406330\n'
p221
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p222
S'.text:00000000004063b0\n.text:00000000004063b3\n.text:00000000004063b6\n.text:00000000004063b9\n.text:00000000004063bb\n.text:00000000004063be\n.text:00000000004063c1\n.text:00000000004063c4\n'
p223
tp224
sS'free'
p225
(S'\n__stdcall free(void * __ptr)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060d028)();\u000a  return;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060d028]\n'
p228
S'ff 25 62 ba 20 00\n'
p229
S'.plt:00000000004015c0\n'
p230
tp231
sS'close'
p232
(S'\n__stdcall close(int __fd)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060d110)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060d110]\n'
p235
S'ff 25 7a b9 20 00\n'
p236
S'.plt:0000000000401790\n'
p237
tp238
sS'getenv'
p239
(S'\n__stdcall getenv(char * __name)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060d018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060d018]\n'
p242
S'ff 25 72 ba 20 00\n'
p243
S'.plt:00000000004015a0\n'
p244
tp245
sS'putchar_unlocked'
p246
(S'\n__stdcall putchar_unlocked(int __c)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060d148)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060d148]\n'
p249
S'ff 25 42 b9 20 00\n'
p250
S'.plt:0000000000401800\n'
p251
tp252
sS'fopen'
p253
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060d1d8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060d1d8]\n'
p256
S'ff 25 b2 b8 20 00\n'
p257
S'.plt:0000000000401920\n'
p258
tp259
sS'rpl_fseeko'
p260
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p261
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060d1d0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004075f8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004075f8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040760a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401910\nMOV RDI,RBX\nCALL 0x00401810\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401730\nCMP RAX,-0x1\nJZ 0x00407633\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00407638\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p263
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 06 a3 ff ff\n48 89 df\ne8 fe a1 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 11 a1 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p264
S'.text:00000000004075d0\n.text:00000000004075d1\n.text:00000000004075d3\n.text:00000000004075d4\n.text:00000000004075d7\n.text:00000000004075da\n.text:00000000004075dd\n.text:00000000004075e1\n.text:00000000004075e5\n.text:00000000004075e7\n.text:00000000004075eb\n.text:00000000004075ef\n.text:00000000004075f1\n.text:00000000004075f6\n.text:00000000004075f8\n.text:00000000004075fb\n.text:00000000004075fe\n.text:0000000000407601\n.text:0000000000407602\n.text:0000000000407604\n.text:0000000000407605\n.text:000000000040760a\n.text:000000000040760d\n.text:0000000000407612\n.text:0000000000407614\n.text:0000000000407617\n.text:000000000040761a\n.text:000000000040761f\n.text:0000000000407623\n.text:0000000000407625\n.text:0000000000407628\n.text:000000000040762f\n.text:0000000000407631\n.text:0000000000407633\n.text:0000000000407638\n.text:0000000000407639\n.text:000000000040763b\n.text:000000000040763c\n'
p265
tp266
sS'quote_n_mem'
p267
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p268
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV ECX,0x60d278\nJMP 0x00405f30\n'
p270
S'b9 78 d2 60 00\ne9 36 fb ff ff\n'
p271
S'.text:00000000004063f0\n.text:00000000004063f5\n'
p272
tp273
sS'xstrdup'
p274
(S'\n__stdcall xstrdup(char * string)\n'
p275
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p276
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004016e0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00406e90\n'
p277
S'53\n48 89 fb\ne8 17 a8 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p278
S'.text:0000000000406ec0\n.text:0000000000406ec1\n.text:0000000000406ec4\n.text:0000000000406ec9\n.text:0000000000406ecd\n.text:0000000000406ed0\n.text:0000000000406ed1\n'
p279
tp280
sS'c_ispunct'
p281
(S'\n__stdcall c_ispunct()\n'
p282
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p283
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407712\nMOV AL,0x1\nJMP qword ptr [0x40ac08 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p284
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 08 ac 40 00\nc3\n31 c0\nc3\n'
p285
S'.text:0000000000407700\n.text:0000000000407703\n.text:0000000000407706\n.text:0000000000407708\n.text:000000000040770a\n.text:0000000000407711\n.text:0000000000407712\n.text:0000000000407714\n'
p286
tp287
sS'fstat'
p288
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p289
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060d180)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401870\n'
p291
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 81 9c ff ff\n'
p292
S'.text:0000000000407be0\n.text:0000000000407be3\n.text:0000000000407be5\n.text:0000000000407bea\n'
p293
tp294
sS'parse_old_offset'
p295
(S'\n__stdcall parse_old_offset(char * s, uintmax_t * offset)\n'
p296
V\u000a_Bool parse_old_offset(char *s,uintmax_t *offset)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  char *pcVar2;\u000a  uintmax_t *val;\u000a  bool bVar3;\u000a  \u000a  if (*s == 0) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    if (*s == '+') {\u000a      s = s + 1;\u000a    }\u000a    pcVar2 = strchr(s,0x2e);\u000a    val = (uintmax_t *)0xa;\u000a    if ((pcVar2 == (char *)0x0) &&\u000a       ((*s != '0' || (val = (uintmax_t *)0x10, (byte)(s[1] | 0x20U) != 0x78)))) {\u000a      val = (uintmax_t *)0x8;\u000a    }\u000a    sVar1 = xstrtoumax(s,(char **)0x0,val,(char *)offset);\u000a    bVar3 = sVar1 == LONGINT_OK;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p297
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV AL,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00402ab0\nCMP AL,0x2b\nJNZ 0x00402a67\nINC RBX\nMOV ESI,0x2e\nMOV RDI,RBX\nCALL 0x00401710\nMOV EDX,0xa\nTEST RAX,RAX\nJNZ 0x00402a96\nCMP byte ptr [RBX],0x30\nJNZ 0x00402a91\nMOV AL,byte ptr [RBX + 0x1]\nMOV EDX,0x10\nOR AL,0x20\nCMP AL,0x78\nJZ 0x00402a96\nMOV EDX,0x8\nXOR ESI,ESI\nMOV R8D,0x409e97\nMOV RDI,RBX\nMOV RCX,R14\nCALL 0x004071d0\nTEST EAX,EAX\nSETZ AL\nJMP 0x00402ab2\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p298
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n8a 03\n84 c0\n74 50\n3c 2b\n75 03\n48 ff c3\nbe 2e 00 00 00\n48 89 df\ne8 9c ec ff ff\nba 0a 00 00 00\n48 85 c0\n75 18\n80 3b 30\n75 0e\n8a 43 01\nba 10 00 00 00\n0c 20\n3c 78\n74 05\nba 08 00 00 00\n31 f6\n41 b8 97 9e 40 00\n48 89 df\n4c 89 f1\ne8 27 47 00 00\n85 c0\n0f 94 c0\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p299
S'.text:0000000000402a50\n.text:0000000000402a52\n.text:0000000000402a53\n.text:0000000000402a54\n.text:0000000000402a57\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a5e\n.text:0000000000402a60\n.text:0000000000402a62\n.text:0000000000402a64\n.text:0000000000402a67\n.text:0000000000402a6c\n.text:0000000000402a6f\n.text:0000000000402a74\n.text:0000000000402a79\n.text:0000000000402a7c\n.text:0000000000402a7e\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a86\n.text:0000000000402a8b\n.text:0000000000402a8d\n.text:0000000000402a8f\n.text:0000000000402a91\n.text:0000000000402a96\n.text:0000000000402a98\n.text:0000000000402a9e\n.text:0000000000402aa1\n.text:0000000000402aa4\n.text:0000000000402aa9\n.text:0000000000402aab\n.text:0000000000402aae\n.text:0000000000402ab0\n.text:0000000000402ab2\n.text:0000000000402ab6\n.text:0000000000402ab7\n.text:0000000000402ab9\n'
p300
tp301
sS'fscanf'
p302
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060d100)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060d100]\n'
p305
S'ff 25 8a b9 20 00\n'
p306
S'.plt:0000000000401770\n'
p307
tp308
sS'memcpy'
p309
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060d140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060d140]\n'
p312
S'ff 25 4a b9 20 00\n'
p313
S'.plt:00000000004017f0\n'
p314
tp315
sS'close_stdout_set_ignore_EPIPE'
p316
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p317
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p318
S'MOV byte ptr [0x0060d428],DIL\nRET\n'
p319
S'40 88 3d a1 89 20 00\nc3\n'
p320
S'.text:0000000000404a80\n.text:0000000000404a87\n'
p321
tp322
sS'iswprint'
p323
(S'\n__stdcall iswprint(wint_t __wc)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060d210)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x0060d210]\n'
p326
S'ff 25 7a b8 20 00\n'
p327
S'.plt:0000000000401990\n'
p328
tp329
sS'c_isspace'
p330
(S'\n__stdcall c_isspace()\n'
p331
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p332
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00407735\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p333
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p334
S'.text:0000000000407720\n.text:0000000000407723\n.text:0000000000407726\n.text:0000000000407728\n.text:000000000040772d\n.text:000000000040772f\n.text:0000000000407731\n.text:0000000000407734\n.text:0000000000407735\n.text:0000000000407737\n'
p335
tp336
sS'open'
p337
(S'\n__stdcall open(char * __file, int __oflag)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060d1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060d1c8]\n'
p340
S'ff 25 c2 b8 20 00\n'
p341
S'.plt:0000000000401900\n'
p342
tp343
sS'quotearg_n_custom_mem'
p344
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060d470]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060d460]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d450]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d440]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004050a0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405f30\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p347
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 17 71 20 00\n48 89 44 24 30\n0f 10 05 fb 70 20 00\n0f 29 44 24 20\n0f 10 05 df 70 20 00\n0f 29 44 24 10\n0f 10 05 c3 70 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p348
S'.text:0000000000406340\n.text:0000000000406341\n.text:0000000000406343\n.text:0000000000406345\n.text:0000000000406346\n.text:000000000040634a\n.text:000000000040634d\n.text:0000000000406350\n.text:0000000000406352\n.text:0000000000406359\n.text:000000000040635e\n.text:0000000000406365\n.text:000000000040636a\n.text:0000000000406371\n.text:0000000000406376\n.text:000000000040637d\n.text:0000000000406381\n.text:0000000000406384\n.text:0000000000406387\n.text:000000000040638c\n.text:000000000040638e\n.text:0000000000406391\n.text:0000000000406394\n.text:0000000000406397\n.text:000000000040639c\n.text:00000000004063a0\n.text:00000000004063a1\n.text:00000000004063a3\n.text:00000000004063a5\n.text:00000000004063a6\n'
p349
tp350
sS'_init'
p351
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p352
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060cff8;\u000a  if (PTR___gmon_start___0060cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060cff8]\nTEST RAX,RAX\nJZ 0x00401582\nCALL RAX\nADD RSP,0x8\nRET\n'
p354
S'48 83 ec 08\n48 8b 05 7d ba 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p355
S'.init:0000000000401570\n.init:0000000000401574\n.init:000000000040157b\n.init:000000000040157e\n.init:0000000000401580\n.init:0000000000401582\n.init:0000000000401586\n'
p356
tp357
sS'set_quoting_flags'
p358
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p359
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'TEST RDI,RDI\nMOV ECX,0x60d440\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p361
S'48 85 ff\nb9 40 d4 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p362
S'.text:0000000000405080\n.text:0000000000405083\n.text:0000000000405088\n.text:000000000040508c\n.text:000000000040508f\n.text:0000000000405092\n'
p363
tp364
sS'realloc'
p365
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060d190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060d190]\n'
p368
S'ff 25 fa b8 20 00\n'
p369
S'.plt:0000000000401890\n'
p370
tp371
sS'localeconv'
p372
(S'\n__stdcall localeconv()\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0060d080)();\u000a  return plVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060d080]\n'
p375
S'ff 25 0a ba 20 00\n'
p376
S'.plt:0000000000401670\n'
p377
tp378
sS'__fprintf_chk'
p379
(S'\n__stdcall __fprintf_chk()\n'
p380
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060d200)();\u000a  return;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060d200]\n'
p382
S'ff 25 8a b8 20 00\n'
p383
S'.plt:0000000000401970\n'
p384
tp385
sS'print_long'
p386
(S'\n__stdcall print_long(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p387
V\u000avoid print_long(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ulong uVar3;\u000a  undefined8 *puVar4;\u000a  long lVar5;\u000a  undefined8 uVar6;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar7;\u000a  undefined8 local_38;\u000a  \u000a  uVar3 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar7 = fields;\u000a    do {\u000a      iVar2 = (int)uVar3;\u000a      sVar7 = sVar7 - 1;\u000a      auVar1 = ZEXT816(sVar7 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar3 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        uVar6 = *(undefined8 *)block;\u000a      }\u000a      else {\u000a        puVar4 = &local_38;\u000a        lVar5 = 8;\u000a        do {\u000a          *(undefined *)puVar4 = *(undefined *)((long)block + lVar5 + -1);\u000a          puVar4 = (undefined8 *)((long)puVar4 + 1);\u000a          lVar5 = lVar5 + -1;\u000a          uVar6 = local_38;\u000a        } while (lVar5 != 0);\u000a      }\u000a      block = (undefined8 *)block + 1;\u000a      xprintf(fmt_string,(ulong)(uint)((iVar2 + in_R8D) - SUB164(auVar1,0)),uVar6);\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV dword ptr [RSP + 0x4],R8D\nMOV qword ptr [RSP + 0x8],RCX\nMOV RBP,RDX\nMOV R12,RSI\nMOV R13,RDI\nCMP R13,R12\nJBE 0x00403cf9\nMOVSXD R14,EBX\nMOV R15,R13\nNOP\nMOV ESI,EBX\nDEC R15\nMOV RAX,R15\nIMUL RAX,R14\nXOR EDX,EDX\nDIV R13\nADD ESI,dword ptr [RSP + 0x4]\nMOV RBX,RAX\nSUB ESI,EBX\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403ce0\nLEA RAX,[RSP + 0x10]\nMOV ECX,0x8\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RBP + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403cc0\nMOV RDX,qword ptr [RSP + 0x10]\nJMP 0x00403ce4\nMOV RDX,qword ptr [RBP]\nADD RBP,0x8\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00406f10\nCMP R15,R12\nJA 0x00403c90\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p389
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n44 89 44 24 04\n48 89 4c 24 08\n48 89 d5\n49 89 f4\n49 89 fd\n4d 39 e5\n76 70\n4c 63 f3\n4d 89 ef\n90\n89 de\n49 ff cf\n4c 89 f8\n49 0f af c6\n31 d2\n49 f7 f5\n03 74 24 04\n48 89 c3\n29 de\n80 3d 29 97 20 00 00\n74 2d\n48 8d 44 24 10\nb9 08 00 00 00\n0f 1f 00\n0f b6 54 0d ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\n48 8b 54 24 10\neb 0e\n48 8b 55 00\n48 83 c5 08\n31 c0\n48 8b 7c 24 08\ne8 1c 32 00 00\n4d 39 e7\n77 97\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p390
S'.text:0000000000403c60\n.text:0000000000403c61\n.text:0000000000403c63\n.text:0000000000403c65\n.text:0000000000403c67\n.text:0000000000403c69\n.text:0000000000403c6a\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c76\n.text:0000000000403c7b\n.text:0000000000403c7e\n.text:0000000000403c81\n.text:0000000000403c84\n.text:0000000000403c87\n.text:0000000000403c89\n.text:0000000000403c8c\n.text:0000000000403c8f\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9c\n.text:0000000000403c9e\n.text:0000000000403ca1\n.text:0000000000403ca5\n.text:0000000000403ca8\n.text:0000000000403caa\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccd\n.text:0000000000403ccf\n.text:0000000000403cd4\n.text:0000000000403ce0\n.text:0000000000403ce4\n.text:0000000000403ce8\n.text:0000000000403cea\n.text:0000000000403cef\n.text:0000000000403cf4\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfd\n.text:0000000000403cfe\n.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d04\n.text:0000000000403d06\n.text:0000000000403d07\n'
p391
tp392
sS'get_charset_aliases'
p393
(S'\n__stdcall get_charset_aliases()\n'
p394
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00407aa4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00407aa4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00407aa4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00407aa4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00407aa4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00407aa4_caseD_9;\u000a      case -1:\u000a        goto switchD_00407aa4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00407afd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00407b03:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00407aa4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00407b03;\u000a  }\u000a  goto LAB_00407afd;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060d580]\nTEST R15,R15\nJNZ 0x00407b12\nMOV EDI,0x40b034\nCALL 0x004015a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004078c8\nCMP byte ptr [RBX],0x0\nJNZ 0x004078cd\nMOV EBX,0x40b044\nMOV RDI,RBX\nCALL 0x004016e0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004078e7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004078e9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401830\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040793d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004017f0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00407948\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00407965\nMOV R15D,0x40a6e9\nJMP 0x00407b0b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401900\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407afd\nMOV ESI,0x409e7c\nMOV EDI,EBP\nCALL 0x004018a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407ac4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00407a90\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401620\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401620\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00407a90\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401860\nMOV ESI,0x40b053\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401770\nCMP EAX,0x2\nJL 0x00407ae4\nMOV RDI,R12\nCALL 0x004016e0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004016e0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407a6d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401890\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004079b4\nJMP 0x00407acd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401830\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004079b4\nJMP 0x00407acd\nMOV RDI,RBX\nCALL 0x00401650\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004079f7\nJMP qword ptr [0x40aef8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401650\nCMP EAX,-0x1\nJZ 0x00407ae4\nCMP EAX,0xa\nJNZ 0x00407ab0\nJMP 0x00407a90\nMOV EDI,EBP\nCALL 0x00401790\nJMP 0x00407afd\nMOV RDI,R15\nCALL 0x004015c0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00407500\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407afd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00407b03\nMOV R15D,0x40a6e9\nMOV RDI,R13\nCALL 0x004015c0\nMOV qword ptr [0x0060d580],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p396
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d d8 5c 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 34 b0 40 00\ne8 e5 9c ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 44 b0 40 00\n48 89 df\ne8 0b 9e ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 9f ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 e3 9e ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e9 a6 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 8c 9f ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 7c 9e 40 00\n89 ef\ne8 16 9f ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 4b 9c ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 3b 9c ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 5f 9e ff ff\nbe 53 b0 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 5a 9d ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 b9 9c ff ff\n49 89 c4\n48 89 ef\ne8 ae 9c ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 36 9e ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 9d ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 b8 9b ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd f8 ae 40 00\n48 89 df\ne8 98 9b ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 9c ff ff\neb 30\n4c 89 ff\ne8 eb 9a ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 14 fa ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e9 a6 40 00\n4c 89 ef\ne8 b5 9a ff ff\n4c 89 3d 6e 5a 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p397
S'.text:0000000000407890\n.text:0000000000407891\n.text:0000000000407893\n.text:0000000000407895\n.text:0000000000407897\n.text:0000000000407899\n.text:000000000040789a\n.text:00000000004078a1\n.text:00000000004078a8\n.text:00000000004078ab\n.text:00000000004078b1\n.text:00000000004078b6\n.text:00000000004078bb\n.text:00000000004078be\n.text:00000000004078c1\n.text:00000000004078c3\n.text:00000000004078c6\n.text:00000000004078c8\n.text:00000000004078cd\n.text:00000000004078d0\n.text:00000000004078d5\n.text:00000000004078d8\n.text:00000000004078db\n.text:00000000004078dd\n.text:00000000004078e2\n.text:00000000004078e5\n.text:00000000004078e7\n.text:00000000004078e9\n.text:00000000004078ed\n.text:00000000004078f2\n.text:00000000004078f7\n.text:00000000004078fa\n.text:00000000004078fd\n.text:00000000004078ff\n.text:0000000000407902\n.text:0000000000407905\n.text:0000000000407908\n.text:000000000040790d\n.text:0000000000407910\n.text:0000000000407913\n.text:0000000000407916\n.text:0000000000407918\n.text:000000000040791e\n.text:0000000000407928\n.text:000000000040792d\n.text:0000000000407937\n.text:000000000040793b\n.text:000000000040793d\n.text:0000000000407943\n.text:0000000000407948\n.text:0000000000407952\n.text:0000000000407957\n.text:0000000000407961\n.text:0000000000407965\n.text:000000000040796a\n.text:000000000040796c\n.text:000000000040796f\n.text:0000000000407974\n.text:0000000000407976\n.text:0000000000407978\n.text:000000000040797e\n.text:0000000000407983\n.text:0000000000407985\n.text:000000000040798a\n.text:000000000040798d\n.text:0000000000407990\n.text:0000000000407996\n.text:000000000040799b\n.text:00000000004079a0\n.text:00000000004079a2\n.text:00000000004079a7\n.text:00000000004079aa\n.text:00000000004079af\n.text:00000000004079b4\n.text:00000000004079b9\n.text:00000000004079bc\n.text:00000000004079bf\n.text:00000000004079c2\n.text:00000000004079c5\n.text:00000000004079c8\n.text:00000000004079cd\n.text:00000000004079d0\n.text:00000000004079d5\n.text:00000000004079d8\n.text:00000000004079dd\n.text:00000000004079e0\n.text:00000000004079e5\n.text:00000000004079ea\n.text:00000000004079ed\n.text:00000000004079f2\n.text:00000000004079f7\n.text:00000000004079f9\n.text:00000000004079fc\n.text:0000000000407a01\n.text:0000000000407a06\n.text:0000000000407a08\n.text:0000000000407a0b\n.text:0000000000407a0e\n.text:0000000000407a11\n.text:0000000000407a16\n.text:0000000000407a19\n.text:0000000000407a1f\n.text:0000000000407a22\n.text:0000000000407a27\n.text:0000000000407a2a\n.text:0000000000407a2d\n.text:0000000000407a32\n.text:0000000000407a35\n.text:0000000000407a3a\n.text:0000000000407a3f\n.text:0000000000407a42\n.text:0000000000407a44\n.text:0000000000407a48\n.text:0000000000407a4d\n.text:0000000000407a52\n.text:0000000000407a55\n.text:0000000000407a5a\n.text:0000000000407a5d\n.text:0000000000407a62\n.text:0000000000407a65\n.text:0000000000407a6b\n.text:0000000000407a6d\n.text:0000000000407a72\n.text:0000000000407a76\n.text:0000000000407a7b\n.text:0000000000407a7e\n.text:0000000000407a81\n.text:0000000000407a87\n.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a98\n.text:0000000000407a9b\n.text:0000000000407a9e\n.text:0000000000407aa4\n.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab8\n.text:0000000000407abb\n.text:0000000000407abd\n.text:0000000000407ac0\n.text:0000000000407ac2\n.text:0000000000407ac4\n.text:0000000000407ac6\n.text:0000000000407acb\n.text:0000000000407acd\n.text:0000000000407ad0\n.text:0000000000407ad5\n.text:0000000000407ad7\n.text:0000000000407adc\n.text:0000000000407adf\n.text:0000000000407ae4\n.text:0000000000407ae7\n.text:0000000000407aec\n.text:0000000000407af1\n.text:0000000000407af4\n.text:0000000000407af6\n.text:0000000000407afb\n.text:0000000000407afd\n.text:0000000000407b03\n.text:0000000000407b06\n.text:0000000000407b0b\n.text:0000000000407b12\n.text:0000000000407b15\n.text:0000000000407b1c\n.text:0000000000407b1d\n.text:0000000000407b1f\n.text:0000000000407b21\n.text:0000000000407b23\n.text:0000000000407b25\n.text:0000000000407b26\n'
p398
tp399
sS'nl_langinfo'
p400
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060d170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060d170]\n'
p403
S'ff 25 1a b9 20 00\n'
p404
S'.plt:0000000000401850\n'
p405
tp406
sS'x2realloc'
p407
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p408
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p409
S'MOV EDX,0x1\nJMP 0x00406dc0\n'
p410
S'ba 01 00 00 00\neb 89\n'
p411
S'.text:0000000000406e30\n.text:0000000000406e35\n'
p412
tp413
sS'strlen'
p414
(S'\n__stdcall strlen(char * __s)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060d0b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060d0b8]\n'
p417
S'ff 25 d2 b9 20 00\n'
p418
S'.plt:00000000004016e0\n'
p419
tp420
sS'memcmp'
p421
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060d118)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060d118]\n'
p424
S'ff 25 72 b9 20 00\n'
p425
S'.plt:00000000004017a0\n'
p426
tp427
sS'quotearg_n_style_mem'
p428
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p429
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406160\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405f30\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p431
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p432
S'.text:00000000004061c0\n.text:00000000004061c1\n.text:00000000004061c3\n.text:00000000004061c5\n.text:00000000004061c6\n.text:00000000004061ca\n.text:00000000004061cd\n.text:00000000004061d0\n.text:00000000004061d2\n.text:00000000004061d5\n.text:00000000004061d8\n.text:00000000004061dd\n.text:00000000004061df\n.text:00000000004061e2\n.text:00000000004061e5\n.text:00000000004061e8\n.text:00000000004061ed\n.text:00000000004061f1\n.text:00000000004061f2\n.text:00000000004061f4\n.text:00000000004061f6\n.text:00000000004061f7\n'
p433
tp434
sS'xvprintf'
p435
(S'\n__stdcall xvprintf(char * format, __va_list_tag * args)\n'
p436
V\u000aint xvprintf(char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  \u000a  iVar3 = __vfprintf_chk(stdout,1,format,args);\u000a  if (iVar3 < 0) {\u000a    iVar4 = ferror(stdout);\u000a    iVar2 = exit_failure;\u000a    if (iVar4 == 0) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      uVar6 = dcgettext(0,"cannot perform formatted output",5);\u000a      error((ulong)(uint)iVar2,(ulong)uVar1,uVar6,uVar6);\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p437
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RAX,RSI\nMOV RCX,RDI\nMOV RDI,qword ptr [0x0060d2c8]\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004015d0\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00407018\nMOV RDI,qword ptr [0x0060d2c8]\nCALL 0x00401640\nTEST EAX,EAX\nJNZ 0x00407018\nMOV R14D,dword ptr [0x0060d250]\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a930\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x004018f0\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p438
S'55\n41 56\n53\n48 89 f0\n48 89 f9\n48 8b 3d 07 63 20 00\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 ff a5 ff ff\n89 c3\n85 db\n79 41\n48 8b 3d ea 62 20 00\ne8 5d a6 ff ff\n85 c0\n75 31\n44 8b 35 62 62 20 00\ne8 fd a5 ff ff\n8b 28\n31 ff\nbe 30 a9 40 00\nba 05 00 00 00\ne8 ba a6 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 ee\n48 89 ca\ne8 d8 a8 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p439
S'.text:0000000000406fb0\n.text:0000000000406fb1\n.text:0000000000406fb3\n.text:0000000000406fb4\n.text:0000000000406fb7\n.text:0000000000406fba\n.text:0000000000406fc1\n.text:0000000000406fc6\n.text:0000000000406fc9\n.text:0000000000406fcc\n.text:0000000000406fd1\n.text:0000000000406fd3\n.text:0000000000406fd5\n.text:0000000000406fd7\n.text:0000000000406fde\n.text:0000000000406fe3\n.text:0000000000406fe5\n.text:0000000000406fe7\n.text:0000000000406fee\n.text:0000000000406ff3\n.text:0000000000406ff5\n.text:0000000000406ff7\n.text:0000000000406ffc\n.text:0000000000407001\n.text:0000000000407006\n.text:0000000000407009\n.text:000000000040700b\n.text:000000000040700e\n.text:0000000000407010\n.text:0000000000407013\n.text:0000000000407018\n.text:000000000040701a\n.text:000000000040701b\n.text:000000000040701d\n.text:000000000040701e\n'
p440
tp441
sS'emit_stdin_note'
p442
(S'\n__stdcall emit_stdin_note()\n'
p443
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p444
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409a69\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004017b0\n'
p445
S'50\n31 ff\nbe 69 9a 40 00\nba 05 00 00 00\ne8 9e f9 ff ff\n48 8b 35 9f b5 20 00\n48 89 c7\n58\ne9 7e fa ff ff\n'
p446
S'.text:0000000000401d10\n.text:0000000000401d11\n.text:0000000000401d13\n.text:0000000000401d18\n.text:0000000000401d1d\n.text:0000000000401d22\n.text:0000000000401d29\n.text:0000000000401d2c\n.text:0000000000401d2d\n'
p447
tp448
sS'_exit'
p449
(S'\n__stdcall _exit(int __status)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060d050)();\u000a  return;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060d050]\n'
p452
S'ff 25 3a ba 20 00\n'
p453
S'.plt:0000000000401610\n'
p454
tp455
sS'bkm_scale_by_power'
p456
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p457
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x004074a1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00407440\nOR EBP,EAX\nDEC EBX\nJNZ 0x00407490\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000407470\n.text:0000000000407471\n.text:0000000000407473\n.text:0000000000407475\n.text:0000000000407476\n.text:0000000000407477\n.text:0000000000407479\n.text:000000000040747c\n.text:000000000040747f\n.text:0000000000407481\n.text:0000000000407483\n.text:0000000000407485\n.text:0000000000407490\n.text:0000000000407493\n.text:0000000000407496\n.text:000000000040749b\n.text:000000000040749d\n.text:000000000040749f\n.text:00000000004074a1\n.text:00000000004074a3\n.text:00000000004074a7\n.text:00000000004074a8\n.text:00000000004074aa\n.text:00000000004074ac\n.text:00000000004074ad\n'
p461
tp462
sS'argmatch_valid'
p463
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p464
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00404907:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00404907;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_00409fb7,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  putc_unlocked(10,stderr);\u000a  return;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x409f9a\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d300]\nMOV RDI,RAX\nCALL 0x004017b0\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060d300]\nJZ 0x0040496a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00404907\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x00404930\nMOV RDI,RBX\nCALL 0x00406420\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x409faf\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401970\nMOV RBP,R13\nJMP 0x0040494f\nMOV RDI,RBX\nCALL 0x00406420\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x409fb7\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401970\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060d300]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x004048f0\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401820\n'
p466
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 9a 9f 40 00\nba 05 00 00 00\ne8 fb cd ff ff\n48 8b 35 34 8a 20 00\n48 89 c7\ne8 dc ce ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 1b 8a 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 9d ce ff ff\n85 c0\n74 29\n48 89 df\ne8 11 1b 00 00\n48 89 c1\nbe 01 00 00 00\nba af 9f 40 00\n31 c0\n4c 89 e7\ne8 4a d0 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 e8 1a 00 00\n48 89 c1\nbe 01 00 00 00\nba b7 9f 40 00\n31 c0\n4c 89 e7\ne8 21 d0 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 9e 89 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 9b ce ff ff\n'
p467
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a3\n.text:00000000004048a5\n.text:00000000004048a7\n.text:00000000004048a9\n.text:00000000004048aa\n.text:00000000004048ab\n.text:00000000004048ae\n.text:00000000004048b1\n.text:00000000004048b4\n.text:00000000004048b6\n.text:00000000004048bb\n.text:00000000004048c0\n.text:00000000004048c5\n.text:00000000004048cc\n.text:00000000004048cf\n.text:00000000004048d4\n.text:00000000004048d8\n.text:00000000004048db\n.text:00000000004048de\n.text:00000000004048e5\n.text:00000000004048eb\n.text:00000000004048ed\n.text:00000000004048f0\n.text:00000000004048f3\n.text:00000000004048f5\n.text:00000000004048f8\n.text:00000000004048fb\n.text:00000000004048fe\n.text:0000000000404903\n.text:0000000000404905\n.text:0000000000404907\n.text:000000000040490a\n.text:000000000040490f\n.text:0000000000404912\n.text:0000000000404917\n.text:000000000040491c\n.text:000000000040491e\n.text:0000000000404921\n.text:0000000000404926\n.text:0000000000404929\n.text:0000000000404930\n.text:0000000000404933\n.text:0000000000404938\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404945\n.text:0000000000404947\n.text:000000000040494a\n.text:000000000040494f\n.text:0000000000404953\n.text:0000000000404958\n.text:000000000040495b\n.text:0000000000404962\n.text:0000000000404965\n.text:0000000000404968\n.text:000000000040496a\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404976\n.text:0000000000404977\n.text:0000000000404979\n.text:000000000040497b\n.text:000000000040497d\n.text:000000000040497f\n.text:0000000000404980\n'
p468
tp469
sS'xrealloc'
p470
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p471
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00406da7\nTEST RBX,RBX\nJNZ 0x00406da7\nCALL 0x004015c0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401890\nTEST RBX,RBX\nJZ 0x00406db9\nTEST RAX,RAX\nJZ 0x00406dbb\nPOP RBX\nRET\nCALL 0x00406ee0\n'
p473
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d a8 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 e1 aa ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p474
S'.text:0000000000406d90\n.text:0000000000406d91\n.text:0000000000406d94\n.text:0000000000406d97\n.text:0000000000406d99\n.text:0000000000406d9c\n.text:0000000000406d9e\n.text:0000000000406da3\n.text:0000000000406da5\n.text:0000000000406da6\n.text:0000000000406da7\n.text:0000000000406daa\n.text:0000000000406daf\n.text:0000000000406db2\n.text:0000000000406db4\n.text:0000000000406db7\n.text:0000000000406db9\n.text:0000000000406dba\n.text:0000000000406dbb\n'
p475
tp476
sS'__snprintf_chk'
p477
(S'\n__stdcall __snprintf_chk()\n'
p478
V\u000avoid __snprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___snprintf_chk_0060d020)();\u000a  return;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0060d020]\n'
p480
S'ff 25 6a ba 20 00\n'
p481
S'.plt:00000000004015b0\n'
p482
tp483
sS'dtoastr'
p484
(S'\n__stdcall dtoastr(char * buf, size_t bufsize, double x)\n'
p485
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint dtoastr(char *buf,size_t bufsize,double x)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  bool bVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  uint in_ECX;\u000a  ulong in_RDX;\u000a  uint uVar8;\u000a  double dVar7;\u000a  uint in_XMM0_Dc;\u000a  uint in_XMM0_Dd;\u000a  uint uVar9;\u000a  uint uVar11;\u000a  undefined auVar10 [16];\u000a  char format [11];\u000a  undefined local_53;\u000a  undefined local_52;\u000a  undefined8 local_48;\u000a  \u000a  uVar8 = (uint)((ulong)x >> 0x20);\u000a  uVar9 = (uint)-(ulong)(x < 0.00000000);\u000a  uVar11 = (uint)(-(ulong)(x < 0.00000000) >> 0x20);\u000a  auVar10 = orps(CONCAT412(in_XMM0_Dd & (DAT_00409fdc ^ in_XMM0_Dd),\u000a                           CONCAT48(in_XMM0_Dc & (DAT_00409fd8 ^ in_XMM0_Dc),\u000a                                    CONCAT44(uVar11 & (DAT_00409fd4 ^ uVar8),\u000a                                             uVar9 & (DAT_00409fd0 ^ SUB84(x,0))))),\u000a                 ZEXT816(CONCAT44(~uVar11 & uVar8,~uVar9 & SUB84(x,0))));\u000a  local_53 = 0x25;\u000a  local_52 = 0x2d;\u000a  uVar6 = (ulong)((uint)in_RDX & 1);\u000a  lVar2 = (long)&local_52 + uVar6;\u000a  *(undefined *)((long)&local_52 + uVar6) = 0x2b;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 1) & 1);\u000a  lVar1 = lVar2 + uVar6;\u000a  *(undefined *)(uVar6 + lVar2) = 0x20;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 2) & 1);\u000a  lVar2 = lVar1 + uVar6;\u000a  *(undefined *)(uVar6 + lVar1) = 0x30;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 3) & 1);\u000a  *(undefined2 *)(uVar6 + lVar2) = 0x2e2a;\u000a  *(undefined *)(uVar6 + 2 + lVar2) = 0x2a;\u000a  *(byte *)(uVar6 + 3 + lVar2) = (char)in_RDX * 2 & 0x20U ^ 0x67;\u000a  *(undefined *)(uVar6 + 4 + lVar2) = 0;\u000a  iVar4 = 0xf;\u000a  if (SUB168(auVar10,0) < DAT_00409fe0) {\u000a    iVar4 = 1;\u000a  }\u000a  local_48 = x;\u000a  iVar5 = __snprintf_chk(buf,bufsize,1,0xffffffffffffffff,&local_53,(ulong)in_ECX,iVar4);\u000a  do {\u000a    if (iVar5 < 0) {\u000a      return iVar5;\u000a    }\u000a    if ((ulong)(long)iVar5 < bufsize) {\u000a      dVar7 = strtod(buf,(char **)0x0);\u000a      if (dVar7 == local_48) {\u000a        return iVar5;\u000a      }\u000a    }\u000a    iVar5 = __snprintf_chk(local_48,buf,bufsize,1,0xffffffffffffffff,&local_53,(ulong)in_ECX,\u000a                           iVar4 + 1);\u000a    bVar3 = iVar4 < 0x10;\u000a    iVar4 = iVar4 + 1;\u000a  } while (bVar3);\u000a  return iVar5;\u000a}\u000a\u000a
p486
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R14D,ECX\nMOV R13,RSI\nMOV R12,RDI\nMOVAPS XMM1,xmmword ptr [0x00409fd0]\nXORPS XMM1,XMM0\nXORPS XMM2,XMM2\nMOVAPS XMM3,XMM0\nCMPLTSD XMM3,XMM2\nMOVAPS XMM2,XMM3\nANDNPS XMM2,XMM0\nANDPS XMM3,XMM1\nORPS XMM3,XMM2\nMOV byte ptr [RSP + 0x15],0x25\nMOV byte ptr [RSP + 0x16],0x2d\nMOV EAX,EDX\nAND EAX,0x1\nLEA RCX,[RSP + RAX*0x1 + 0x16]\nMOV byte ptr [RSP + RAX*0x1 + 0x16],0x2b\nMOV EAX,EDX\nSHR EAX,1\nAND EAX,0x1\nLEA RSI,[RCX + RAX*0x1]\nMOV byte ptr [RAX + RCX*0x1],0x20\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x1\nLEA RCX,[RSI + RAX*0x1]\nMOV byte ptr [RAX + RSI*0x1],0x30\nMOV EAX,EDX\nSHR EAX,0x3\nAND EAX,0x1\nMOV word ptr [RAX + RCX*0x1],0x2e2a\nMOV byte ptr [RAX + RCX*0x1 + 0x2],0x2a\nADD DL,DL\nAND DL,0x20\nXOR DL,0x67\nMOV byte ptr [RAX + RCX*0x1 + 0x3],DL\nMOV byte ptr [RAX + RCX*0x1 + 0x4],0x0\nMOVSD XMM1,qword ptr [0x00409fe0]\nUCOMISD XMM1,XMM3\nMOV EAX,0x1\nMOV EBX,0xf\nCMOVA EBX,EAX\nMOV dword ptr [RSP],EBX\nLEA R8,[RSP + 0x15]\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV AL,0x1\nMOV RSI,R13\nMOV R9D,R14D\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nCALL 0x004015b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404c88\nNOP dword ptr [RAX]\nMOVSXD RAX,EBP\nCMP RAX,R13\nJNC 0x00404c4c\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00401660\nUCOMISD XMM0,qword ptr [RSP + 0x20]\nJNZ 0x00404c4c\nJNP 0x00404c88\nLEA R15D,[RBX + 0x1]\nMOV dword ptr [RSP],R15D\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV AL,0x1\nMOV RDI,R12\nMOV RSI,R13\nLEA R8,[RSP + 0x15]\nMOV R9D,R14D\nMOVAPS XMM0,xmmword ptr [RSP + 0x20]\nCALL 0x004015b0\nMOV EBP,EAX\nCMP EBX,0xf\nJG 0x00404c88\nTEST EBP,EBP\nMOV EBX,R15D\nJNS 0x00404c30\nMOV EAX,EBP\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p487
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n41 89 ce\n49 89 f5\n49 89 fc\n0f 28 0d 62 54 00 00\n0f 57 c8\n0f 57 d2\n0f 28 d8\nf2 0f c2 da 01\n0f 28 d3\n0f 55 d0\n0f 54 d9\n0f 56 da\nc6 44 24 15 25\nc6 44 24 16 2d\n89 d0\n83 e0 01\n48 8d 4c 04 16\nc6 44 04 16 2b\n89 d0\nd1 e8\n83 e0 01\n48 8d 34 01\nc6 04 08 20\n89 d0\nc1 e8 02\n83 e0 01\n48 8d 0c 06\nc6 04 30 30\n89 d0\nc1 e8 03\n83 e0 01\n66 c7 04 08 2a 2e\nc6 44 08 02 2a\n00 d2\n80 e2 20\n80 f2 67\n88 54 08 03\nc6 44 08 04 00\nf2 0f 10 0d f4 53 00 00\n66 0f 2e cb\nb8 01 00 00 00\nbb 0f 00 00 00\n0f 47 d8\n89 1c 24\n4c 8d 44 24 15\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\nb0 01\n4c 89 ee\n45 89 f1\n0f 29 44 24 20\ne8 8d c9 ff ff\n89 c5\n85 ed\n78 5f\n0f 1f 80 00 00 00 00\n48 63 c5\n4c 39 e8\n73 14\n31 f6\n4c 89 e7\ne8 1e ca ff ff\n66 0f 2e 44 24 20\n75 02\n7b 3c\n44 8d 7b 01\n44 89 3c 24\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\nb0 01\n4c 89 e7\n4c 89 ee\n4c 8d 44 24 15\n45 89 f1\n0f 28 44 24 20\ne8 36 c9 ff ff\n89 c5\n83 fb 0f\n7f 07\n85 ed\n44 89 fb\n79 a8\n89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p488
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b57\n.text:0000000000404b59\n.text:0000000000404b5a\n.text:0000000000404b5e\n.text:0000000000404b61\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b6e\n.text:0000000000404b71\n.text:0000000000404b74\n.text:0000000000404b77\n.text:0000000000404b7c\n.text:0000000000404b7f\n.text:0000000000404b82\n.text:0000000000404b85\n.text:0000000000404b88\n.text:0000000000404b8d\n.text:0000000000404b92\n.text:0000000000404b94\n.text:0000000000404b97\n.text:0000000000404b9c\n.text:0000000000404ba1\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bac\n.text:0000000000404bb0\n.text:0000000000404bb2\n.text:0000000000404bb5\n.text:0000000000404bb8\n.text:0000000000404bbc\n.text:0000000000404bc0\n.text:0000000000404bc2\n.text:0000000000404bc5\n.text:0000000000404bc8\n.text:0000000000404bce\n.text:0000000000404bd3\n.text:0000000000404bd5\n.text:0000000000404bd8\n.text:0000000000404bdb\n.text:0000000000404bdf\n.text:0000000000404be4\n.text:0000000000404bec\n.text:0000000000404bf0\n.text:0000000000404bf5\n.text:0000000000404bfa\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c05\n.text:0000000000404c0a\n.text:0000000000404c11\n.text:0000000000404c13\n.text:0000000000404c16\n.text:0000000000404c19\n.text:0000000000404c1e\n.text:0000000000404c23\n.text:0000000000404c25\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3a\n.text:0000000000404c3d\n.text:0000000000404c42\n.text:0000000000404c48\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c50\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c60\n.text:0000000000404c62\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6d\n.text:0000000000404c70\n.text:0000000000404c75\n.text:0000000000404c7a\n.text:0000000000404c7c\n.text:0000000000404c7f\n.text:0000000000404c81\n.text:0000000000404c83\n.text:0000000000404c86\n.text:0000000000404c88\n.text:0000000000404c8a\n.text:0000000000404c8e\n.text:0000000000404c8f\n.text:0000000000404c91\n.text:0000000000404c93\n.text:0000000000404c95\n.text:0000000000404c97\n.text:0000000000404c98\n'
p489
tp490
sS'feof_unlocked'
p491
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_0060d218)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060d218]\n'
p494
S'ff 25 72 b8 20 00\n'
p495
S'.plt:00000000004019a0\n'
p496
tp497
sS'close_stdout'
p498
(S'\n__stdcall close_stdout()\n'
p499
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00404ab7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_00409fb9,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00404ab7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060d2c8]\nCALL 0x00407790\nTEST EAX,EAX\nJZ 0x00404ab7\nCMP byte ptr [0x0060d428],0x0\nJZ 0x00404acc\nCALL 0x004015f0\nCMP dword ptr [RAX],0x20\nJNZ 0x00404acc\nMOV RDI,qword ptr [0x0060d300]\nCALL 0x00407790\nTEST EAX,EAX\nJNZ 0x00404b11\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x409ed0\nMOV EDX,0x5\nCALL 0x004016c0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d420]\nCALL 0x004015f0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00404b1c\nXOR EDI,EDI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004018f0\nMOV EDI,dword ptr [0x0060d250]\nCALL 0x00401610\nMOV EDI,dword ptr [0x0060d250]\nCALL 0x00401610\nMOV RDI,RBX\nCALL 0x004062c0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x409fbc\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004018f0\nMOV EDI,dword ptr [0x0060d250]\nCALL 0x00401610\n'
p501
S'55\n41 56\n53\n48 8b 3d 2d 88 20 00\ne8 f0 2c 00 00\n85 c0\n74 13\n80 3d 7d 89 20 00 00\n74 1f\ne8 3e cb ff ff\n83 38 20\n75 15\n48 8b 3d 42 88 20 00\ne8 cd 2c 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe d0 9e 40 00\nba 05 00 00 00\ne8 e3 cb ff ff\n49 89 c6\n48 8b 1d 39 89 20 00\ne8 04 cb ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba b9 9f 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea cd ff ff\n8b 3d 44 87 20 00\ne8 ff ca ff ff\n8b 3d 39 87 20 00\ne8 f4 ca ff ff\n48 89 df\ne8 9c 17 00 00\n48 89 c1\n31 ff\nba bc 9f 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 cd ff ff\n8b 3d 10 87 20 00\ne8 cb ca ff ff\n'
p502
S'.text:0000000000404a90\n.text:0000000000404a91\n.text:0000000000404a93\n.text:0000000000404a94\n.text:0000000000404a9b\n.text:0000000000404aa0\n.text:0000000000404aa2\n.text:0000000000404aa4\n.text:0000000000404aab\n.text:0000000000404aad\n.text:0000000000404ab2\n.text:0000000000404ab5\n.text:0000000000404ab7\n.text:0000000000404abe\n.text:0000000000404ac3\n.text:0000000000404ac5\n.text:0000000000404ac7\n.text:0000000000404ac8\n.text:0000000000404aca\n.text:0000000000404acb\n.text:0000000000404acc\n.text:0000000000404ace\n.text:0000000000404ad3\n.text:0000000000404ad8\n.text:0000000000404add\n.text:0000000000404ae0\n.text:0000000000404ae7\n.text:0000000000404aec\n.text:0000000000404aef\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afc\n.text:0000000000404afe\n.text:0000000000404b01\n.text:0000000000404b06\n.text:0000000000404b0c\n.text:0000000000404b11\n.text:0000000000404b17\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b30\n.text:0000000000404b32\n.text:0000000000404b35\n.text:0000000000404b3a\n.text:0000000000404b40\n'
p503
tp504
sS'version_etc_ar'
p505
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p506
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p507
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00406ba0\nJMP 0x00406830\n'
p508
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p509
S'.text:0000000000406b90\n.text:0000000000406b97\n.text:0000000000406ba0\n.text:0000000000406ba6\n.text:0000000000406baa\n.text:0000000000406bac\n'
p510
tp511
sS'strtoumax'
p512
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060d1e0)();\u000a  return uVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060d1e0]\n'
p515
S'ff 25 aa b8 20 00\n'
p516
S'.plt:0000000000401930\n'
p517
tp518
sS'print_ascii'
p519
(S'\n__stdcall print_ascii(size_t fields, size_t blank, void * block, char * unused_fmt_string)\n'
p520
V\u000avoid print_ascii(size_t fields,size_t blank,void *block,char *unused_fmt_string)\u000a\u000a{\u000a  byte bVar1;\u000a  ushort **ppuVar2;\u000a  undefined *puVar3;\u000a  undefined *puVar4;\u000a  ulong uVar5;\u000a  int iVar6;\u000a  int in_R8D;\u000a  int in_R9D;\u000a  size_t sVar7;\u000a  int iVar8;\u000a  char buf [4];\u000a  undefined local_34 [4];\u000a  \u000a  if (blank < fields) {\u000a    uVar5 = (fields - 1) * (long)in_R9D;\u000a    sVar7 = fields;\u000a    iVar6 = in_R9D;\u000a    do {\u000a      sVar7 = sVar7 - 1;\u000a      bVar1 = *(byte *)block;\u000a      if ((bVar1 < 0xe) && ((0x3f81U >> ((uint)bVar1 & 0x1f) & 1) != 0)) {\u000a        puVar4 = (&PTR_DAT_00408be0)[(long)(char)bVar1];\u000a      }\u000a      else {\u000a        ppuVar2 = __ctype_b_loc();\u000a        puVar3 = &DAT_00409e87;\u000a        if (((*ppuVar2)[(ulong)bVar1] & 0x4000) != 0) {\u000a          puVar3 = &DAT_00409e84;\u000a        }\u000a        puVar4 = local_34;\u000a        __sprintf_chk(puVar4,1,4,puVar3,(ulong)bVar1);\u000a      }\u000a      iVar8 = (int)(uVar5 / fields);\u000a      block = (byte *)block + 1;\u000a      xprintf("%*s",(ulong)(uint)((iVar6 + in_R8D) - iVar8),puVar4);\u000a      uVar5 = uVar5 - (long)in_R9D;\u000a      iVar6 = iVar8;\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV EBP,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV R13,RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV qword ptr [RSP + 0x10],RDI\nCMP RDI,RSI\nJBE 0x00404237\nMOVSXD RCX,EBP\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RBX,[RAX + -0x1]\nMOV qword ptr [RSP + 0x18],RCX\nIMUL RBX,RCX\nMOV R12,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nDEC R12\nXOR EDX,EDX\nMOV RAX,RBX\nDIV qword ptr [RSP + 0x10]\nMOV R14,RAX\nMOVZX R15D,byte ptr [R13]\nCMP R15D,0xe\nJNC 0x004041a6\nMOV EAX,0x3f81\nBT EAX,R15D\nJC 0x00404200\nCALL 0x004019b0\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + R15*0x2]\nTEST AH,0x40\nMOV ECX,0x409e87\nMOV EAX,0x409e84\nCMOVNZ RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],R14\nMOV R14,R12\nLEA R12,[RSP + 0x34]\nMOV RDI,R12\nMOV R8D,R15D\nCALL 0x004019c0\nMOV RDX,R12\nMOV R12,R14\nMOV R14,qword ptr [RSP + 0x28]\nJMP 0x0040420c\nMOVSX RAX,R15B\nMOV RDX,qword ptr [0x408be0 + RAX*0x8]\nINC R13\nADD EBP,dword ptr [RSP + 0xc]\nSUB EBP,R14D\nMOV EDI,0x409e64\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00406f10\nSUB RBX,qword ptr [RSP + 0x18]\nCMP R12,qword ptr [RSP + 0x20]\nMOV EBP,R14D\nJA 0x00404180\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p522
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n44 89 cd\n44 89 44 24 0c\n49 89 d5\n48 89 74 24 20\n48 89 7c 24 10\n48 39 f7\n0f 86 db 00 00 00\n48 63 cd\n48 8b 44 24 10\n48 8d 58 ff\n48 89 4c 24 18\n48 0f af d9\n49 89 c4\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff cc\n31 d2\n48 89 d8\n48 f7 74 24 10\n49 89 c6\n45 0f b6 7d 00\n41 83 ff 0e\n73 0b\nb8 81 3f 00 00\n44 0f a3 f8\n72 5a\ne8 05 d8 ff ff\n48 8b 00\n42 0f b7 04 78\nf6 c4 40\nb9 87 9e 40 00\nb8 84 9e 40 00\n48 0f 45 c8\nbe 01 00 00 00\nba 04 00 00 00\n31 c0\n4c 89 74 24 28\n4d 89 e6\n4c 8d 64 24 34\n4c 89 e7\n45 89 f8\ne8 d8 d7 ff ff\n4c 89 e2\n4d 89 f4\n4c 8b 74 24 28\neb 17\n49 0f be c7\n48 8b 14 c5 e0 8b 40 00\n49 ff c5\n03 6c 24 0c\n44 29 f5\nbf 64 9e 40 00\n31 c0\n89 ee\ne8 ec 2c 00 00\n48 2b 5c 24 18\n4c 3b 64 24 20\n44 89 f5\n0f 87 49 ff ff ff\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p523
S'.text:0000000000404130\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404135\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413a\n.text:000000000040413e\n.text:0000000000404141\n.text:0000000000404146\n.text:0000000000404149\n.text:000000000040414e\n.text:0000000000404153\n.text:0000000000404156\n.text:000000000040415c\n.text:000000000040415f\n.text:0000000000404164\n.text:0000000000404168\n.text:000000000040416d\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404180\n.text:0000000000404183\n.text:0000000000404185\n.text:0000000000404188\n.text:000000000040418d\n.text:0000000000404190\n.text:0000000000404195\n.text:0000000000404199\n.text:000000000040419b\n.text:00000000004041a0\n.text:00000000004041a4\n.text:00000000004041a6\n.text:00000000004041ab\n.text:00000000004041ae\n.text:00000000004041b3\n.text:00000000004041b6\n.text:00000000004041bb\n.text:00000000004041c0\n.text:00000000004041c4\n.text:00000000004041c9\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d5\n.text:00000000004041d8\n.text:00000000004041dd\n.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ee\n.text:00000000004041f3\n.text:0000000000404200\n.text:0000000000404204\n.text:000000000040420c\n.text:000000000040420f\n.text:0000000000404213\n.text:0000000000404216\n.text:000000000040421b\n.text:000000000040421d\n.text:000000000040421f\n.text:0000000000404224\n.text:0000000000404229\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404237\n.text:000000000040423b\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404240\n.text:0000000000404242\n.text:0000000000404244\n.text:0000000000404245\n'
p524
tp525
sS'c_isxdigit'
p526
(S'\n__stdcall c_isxdigit()\n'
p527
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p528
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040776b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p529
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p530
S'.text:0000000000407750\n.text:0000000000407753\n.text:0000000000407756\n.text:0000000000407758\n.text:0000000000407762\n.text:0000000000407764\n.text:0000000000407767\n.text:000000000040776a\n.text:000000000040776b\n.text:000000000040776d\n'
p531
tp532
sS'dump_strings'
p533
(S'\n__stdcall dump_strings()\n'
p534
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool dump_strings(void)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  _Bool _Var4;\u000a  ushort **ppuVar5;\u000a  long lVar6;\u000a  char *pcVar7;\u000a  char *__s;\u000a  char *p;\u000a  byte bVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  int local_3c;\u000a  size_t local_38;\u000a  \u000a  local_38 = 100;\u000a  if (100 < string_min) {\u000a    local_38 = string_min;\u000a  }\u000a  p = (char *)xmalloc(local_38);\u000a  bVar8 = 1;\u000a  uVar9 = n_bytes_to_skip;\u000ajoined_r0x00402ef8:\u000a  do {\u000a    if (limit_bytes_to_format == 1) {\u000a      if ((end_offset < string_min) || (end_offset - string_min <= uVar9)) {\u000a        free(p);\u000a        _Var4 = check_and_close();\u000a        return (_Bool)(_Var4 & bVar8);\u000a      }\u000a      if (string_min != 0) goto LAB_00402f22;\u000aLAB_00403110:\u000a      uVar10 = 0;\u000a      if (end_offset <= uVar9) goto LAB_00402f81;\u000a      goto LAB_00402f91;\u000a    }\u000a    if (string_min == 0) goto LAB_00403110;\u000aLAB_00402f22:\u000a    uVar10 = 0;\u000a    do {\u000a      _Var4 = read_char(&local_3c);\u000a      iVar2 = local_3c;\u000a      bVar8 = _Var4 & bVar8;\u000a      lVar6 = (long)local_3c;\u000a      if (lVar6 < 0) goto LAB_00403177;\u000a      ppuVar5 = __ctype_b_loc();\u000a      if ((*(byte *)((long)*ppuVar5 + lVar6 * 2 + 1) & 0x40) == 0) {\u000a        uVar9 = uVar9 + 1 + uVar10;\u000a        goto joined_r0x00402ef8;\u000a      }\u000a      p[uVar10] = (char)iVar2;\u000a      uVar10 = uVar10 + 1;\u000a    } while (uVar10 < string_min);\u000a    uVar9 = uVar9 + uVar10;\u000a    if (uVar9 < end_offset) goto LAB_00402f91;\u000aLAB_00402f81:\u000a    if (((limit_bytes_to_format ^ 1) & 1) != 0) {\u000aLAB_00402f91:\u000a      uVar3 = uVar9 + 1;\u000a      do {\u000a        uVar9 = uVar3;\u000a        if (uVar10 == local_38) {\u000a          p = (char *)x2realloc(p,&local_38);\u000a        }\u000a        _Var4 = read_char(&local_3c);\u000a        iVar2 = local_3c;\u000a        bVar8 = _Var4 & bVar8;\u000a        lVar6 = (long)local_3c;\u000a        if (lVar6 < 0) {\u000aLAB_00403177:\u000a          free(p);\u000a          return (_Bool)bVar8;\u000a        }\u000a        if (local_3c == 0) break;\u000a        ppuVar5 = __ctype_b_loc();\u000a        if ((*(byte *)((long)*ppuVar5 + lVar6 * 2 + 1) & 0x40) == 0) goto joined_r0x00402ef8;\u000a        p[uVar10] = (char)iVar2;\u000a        uVar10 = uVar10 + 1;\u000a        uVar3 = uVar9 + 1;\u000a      } while ((uVar9 < end_offset) || (uVar3 = uVar9 + 1, ((limit_bytes_to_format ^ 1) & 1) != 0));\u000a    }\u000a    p[uVar10] = 0;\u000a    (*format_address)(~uVar10 + uVar9,' ');\u000a    cVar1 = *p;\u000a    pcVar7 = p;\u000a    while (local_3c = (int)cVar1, cVar1 != 0) {\u000a      pcVar7 = pcVar7 + 1;\u000a      switch(local_3c) {\u000a      case 7:\u000a        __s = "\u005c\u005ca";\u000a        break;\u000a      case 8:\u000a        __s = "\u005c\u005cb";\u000a        break;\u000a      case 9:\u000a        __s = "\u005c\u005ct";\u000a        break;\u000a      case 10:\u000a        __s = "\u005c\u005cn";\u000a        break;\u000a      case 0xb:\u000a        __s = "\u005c\u005cv";\u000a        break;\u000a      case 0xc:\u000a        __s = "\u005c\u005cf";\u000a        break;\u000a      case 0xd:\u000a        __s = "\u005c\u005cr";\u000a        break;\u000a      default:\u000a        putc_unlocked(local_3c,stdout);\u000a        goto LAB_004030d5;\u000a      }\u000a      fputs_unlocked(__s,stdout);\u000aLAB_004030d5:\u000a      cVar1 = *pcVar7;\u000a    }\u000a    putchar_unlocked(10);\u000a  } while( true );\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RAX,qword ptr [0x0060d3d0]\nCMP RAX,0x64\nMOV EDI,0x64\nCMOVA RDI,RAX\nMOV qword ptr [RSP + 0x10],RDI\nCALL 0x00406d50\nMOV R12,RAX\nMOV R14,qword ptr [0x0060d3b8]\nMOV R13B,0x1\nLEA RBP,[RSP + 0x10]\nMOV EBX,R13D\nCMP byte ptr [0x0060d3c0],0x1\nJZ 0x00403141\nJMP 0x00403100\nCMP RCX,R14\nJBE 0x00403158\nTEST RAX,RAX\nJZ 0x00403110\nMOV R13,RBP\nXOR R15D,R15D\nNOP dword ptr [RAX + RAX*0x1]\nMOV EBP,EBX\nLEA RDI,[RSP + 0xc]\nCALL 0x004043f0\nMOV EBX,EAX\nAND BL,BPL\nMOVSXD RBP,dword ptr [RSP + 0xc]\nTEST RBP,RBP\nJS 0x0040316e\nCALL 0x004019b0\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBP*0x2 + 0x1],0x40\nJZ 0x00403130\nMOV byte ptr [R12 + R15*0x1],BPL\nINC R15\nCMP R15,qword ptr [0x0060d3d0]\nJC 0x00402f30\nADD R14,R15\nMOV RBP,R13\nCMP R14,qword ptr [0x0060d3e0]\nJC 0x00402f91\nMOV AL,byte ptr [0x0060d3c0]\nXOR AL,0x1\nTEST AL,0x1\nJZ 0x00403125\nINC R14\nMOV RAX,R14\nNOP word ptr [RAX + RAX*0x1]\nMOV R14,RAX\nCMP R15,qword ptr [RSP + 0x10]\nJNZ 0x00402fb8\nMOV RDI,R12\nMOV RSI,RBP\nCALL 0x00406e30\nMOV R12,RAX\nLEA RDI,[RSP + 0xc]\nCALL 0x004043f0\nMOV R13D,EAX\nAND R13B,BL\nMOVSXD RBX,dword ptr [RSP + 0xc]\nTEST RBX,RBX\nJS 0x00403173\nTEST EBX,EBX\nJZ 0x00403016\nCALL 0x004019b0\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x40\nJZ 0x00402eee\nMOV byte ptr [R12 + R15*0x1],BL\nINC R15\nLEA RAX,[R14 + 0x1]\nCMP R14,qword ptr [0x0060d3e0]\nMOV EBX,R13D\nJC 0x00402fa0\nMOVZX ECX,byte ptr [0x0060d3c0]\nXOR CL,0x1\nTEST CL,0x1\nMOV EBX,R13D\nJNZ 0x00402fa0\nMOV byte ptr [R12 + R15*0x1],0x0\nNOT R15\nADD R15,R14\nMOV ESI,0x20\nMOV RDI,R15\nCALL qword ptr [0x0060d3a0]\nMOVSX EDI,byte ptr [R12]\nTEST EDI,EDI\nMOV dword ptr [RSP + 0xc],EDI\nJZ 0x004030e7\nLEA RBX,[R12 + 0x1]\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA EAX,[RDI + -0x7]\nCMP EAX,0x6\nJA 0x0040306d\nJMP qword ptr [0x4084e0 + RAX*0x8]\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e6f\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nCALL 0x00401820\nJMP 0x004030d5\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e72\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e7e\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e78\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e81\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e75\nJMP 0x004030d0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV EDI,0x409e7b\nNOP dword ptr [RAX]\nCALL 0x004017b0\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nTEST EDI,EDI\nMOV dword ptr [RSP + 0xc],EDI\nJNZ 0x00403050\nMOV EDI,0xa\nCALL 0x00401800\nMOV EBX,R13D\nCMP byte ptr [0x0060d3c0],0x1\nJZ 0x00403141\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x0060d3d0]\nTEST RAX,RAX\nJNZ 0x00402f22\nXOR R15D,R15D\nCMP R14,qword ptr [0x0060d3e0]\nJNC 0x00402f81\nJMP 0x00402f91\nMOV R13D,EBX\nJMP 0x00403016\nLEA R14,[R14 + R15*0x1 + 0x1]\nMOV RBP,R13\nCMP byte ptr [0x0060d3c0],0x1\nJNZ 0x00403100\nMOV RCX,qword ptr [0x0060d3e0]\nMOV RAX,qword ptr [0x0060d3d0]\nSUB RCX,RAX\nJNC 0x00402f10\nMOV RDI,R12\nCALL 0x004015c0\nXOR EDI,EDI\nCALL 0x00404270\nAND AL,BL\nMOVZX EBX,AL\nJMP 0x0040317f\nMOVZX EBX,BL\nJMP 0x00403177\nMOVZX EBX,R13B\nMOV RDI,R12\nCALL 0x004015c0\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 8b 05 0b a5 20 00\n48 83 f8 64\nbf 64 00 00 00\n48 0f 47 f8\n48 89 7c 24 10\ne8 74 3e 00 00\n49 89 c4\n4c 8b 35 d2 a4 20 00\n41 b5 01\n48 8d 6c 24 10\n44 89 eb\n80 3d c8 a4 20 00 01\n0f 84 43 02 00 00\ne9 fd 01 00 00\n4c 39 f1\n0f 86 3f 02 00 00\n48 85 c0\n0f 84 ee 01 00 00\n49 89 ed\n45 31 ff\n0f 1f 84 00 00 00 00 00\n89 dd\n48 8d 7c 24 0c\ne8 b4 14 00 00\n89 c3\n40 20 eb\n48 63 6c 24 0c\n48 85 ed\n0f 88 1f 02 00 00\ne8 5c ea ff ff\n48 8b 00\nf6 44 68 01 40\n0f 84 ce 01 00 00\n43 88 2c 3c\n49 ff c7\n4c 3b 3d 60 a4 20 00\n72 be\n4d 01 fe\n4c 89 ed\n4c 3b 35 61 a4 20 00\n72 10\n8a 05 39 a4 20 00\n34 01\na8 01\n0f 84 94 01 00 00\n49 ff c6\n4c 89 f0\n66 0f 1f 84 00 00 00 00 00\n49 89 c6\n4c 3b 7c 24 10\n75 0e\n4c 89 e7\n48 89 ee\ne8 7b 3e 00 00\n49 89 c4\n48 8d 7c 24 0c\ne8 2e 14 00 00\n41 89 c5\n41 20 dd\n48 63 5c 24 0c\n48 85 db\n0f 88 9d 01 00 00\n85 db\n74 3c\ne8 d1 e9 ff ff\n48 8b 00\nf6 44 58 01 40\n0f 84 01 ff ff ff\n43 88 1c 3c\n49 ff c7\n49 8d 46 01\n4c 3b 35 e1 a3 20 00\n44 89 eb\n72 9c\n0f b6 0d b5 a3 20 00\n80 f1 01\nf6 c1 01\n44 89 eb\n75 8a\n43 c6 04 3c 00\n49 f7 d7\n4d 01 f7\nbe 20 00 00 00\n4c 89 ff\nff 15 71 a3 20 00\n41 0f be 3c 24\n85 ff\n89 7c 24 0c\n0f 84 a7 00 00 00\n49 8d 5c 24 01\n66 66 2e 0f 1f 84 00 00 00 00 00\n8d 47 f9\n83 f8 06\n77 15\nff 24 c5 e0 84 40 00\n48 8b 35 62 a2 20 00\nbf 6f 9e 40 00\neb 63\n48 8b 35 54 a2 20 00\ne8 a7 e7 ff ff\neb 5a\n48 8b 35 46 a2 20 00\nbf 72 9e 40 00\neb 47\n48 8b 35 38 a2 20 00\nbf 7e 9e 40 00\neb 39\n48 8b 35 2a a2 20 00\nbf 78 9e 40 00\neb 2b\n48 8b 35 1c a2 20 00\nbf 81 9e 40 00\neb 1d\n48 8b 35 0e a2 20 00\nbf 75 9e 40 00\neb 0f\n48 8b 35 00 a2 20 00\nbf 7b 9e 40 00\n0f 1f 00\ne8 db e6 ff ff\n0f be 3b\n48 ff c3\n85 ff\n89 7c 24 0c\n0f 85 69 ff ff ff\nbf 0a 00 00 00\ne8 0f e7 ff ff\n44 89 eb\n80 3d c5 a2 20 00 01\n74 44\n0f 1f 00\n48 8b 05 c9 a2 20 00\n48 85 c0\n0f 85 12 fe ff ff\n45 31 ff\n4c 3b 35 c6 a2 20 00\n0f 83 61 fe ff ff\ne9 6c fe ff ff\n41 89 dd\ne9 e9 fe ff ff\n4f 8d 74 3e 01\n4c 89 ed\n80 3d 81 a2 20 00 01\n75 bf\n48 8b 0d 98 a2 20 00\n48 8b 05 81 a2 20 00\n48 29 c1\n0f 83 b8 fd ff ff\n4c 89 e7\ne8 60 e4 ff ff\n31 ff\ne8 09 11 00 00\n20 d8\n0f b6 d8\neb 11\n0f b6 db\neb 04\n41 0f b6 dd\n4c 89 e7\ne8 41 e4 ff ff\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p537
S'.text:0000000000402eb0\n.text:0000000000402eb1\n.text:0000000000402eb3\n.text:0000000000402eb5\n.text:0000000000402eb7\n.text:0000000000402eb9\n.text:0000000000402eba\n.text:0000000000402ebe\n.text:0000000000402ec5\n.text:0000000000402ec9\n.text:0000000000402ece\n.text:0000000000402ed2\n.text:0000000000402ed7\n.text:0000000000402edc\n.text:0000000000402edf\n.text:0000000000402ee6\n.text:0000000000402ee9\n.text:0000000000402eee\n.text:0000000000402ef1\n.text:0000000000402ef8\n.text:0000000000402efe\n.text:0000000000402f10\n.text:0000000000402f13\n.text:0000000000402f19\n.text:0000000000402f1c\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f28\n.text:0000000000402f30\n.text:0000000000402f32\n.text:0000000000402f37\n.text:0000000000402f3c\n.text:0000000000402f3e\n.text:0000000000402f41\n.text:0000000000402f46\n.text:0000000000402f49\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f57\n.text:0000000000402f5c\n.text:0000000000402f62\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f70\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f78\n.text:0000000000402f7f\n.text:0000000000402f81\n.text:0000000000402f87\n.text:0000000000402f89\n.text:0000000000402f8b\n.text:0000000000402f91\n.text:0000000000402f94\n.text:0000000000402f97\n.text:0000000000402fa0\n.text:0000000000402fa3\n.text:0000000000402fa8\n.text:0000000000402faa\n.text:0000000000402fad\n.text:0000000000402fb0\n.text:0000000000402fb5\n.text:0000000000402fb8\n.text:0000000000402fbd\n.text:0000000000402fc2\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fcd\n.text:0000000000402fd0\n.text:0000000000402fd6\n.text:0000000000402fd8\n.text:0000000000402fda\n.text:0000000000402fdf\n.text:0000000000402fe2\n.text:0000000000402fe7\n.text:0000000000402fed\n.text:0000000000402ff1\n.text:0000000000402ff4\n.text:0000000000402ff8\n.text:0000000000402fff\n.text:0000000000403002\n.text:0000000000403004\n.text:000000000040300b\n.text:000000000040300e\n.text:0000000000403011\n.text:0000000000403014\n.text:0000000000403016\n.text:000000000040301b\n.text:000000000040301e\n.text:0000000000403021\n.text:0000000000403026\n.text:0000000000403029\n.text:000000000040302f\n.text:0000000000403034\n.text:0000000000403036\n.text:000000000040303a\n.text:0000000000403040\n.text:0000000000403045\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403056\n.text:0000000000403058\n.text:000000000040305f\n.text:0000000000403066\n.text:000000000040306b\n.text:000000000040306d\n.text:0000000000403074\n.text:0000000000403079\n.text:000000000040307b\n.text:0000000000403082\n.text:0000000000403087\n.text:0000000000403089\n.text:0000000000403090\n.text:0000000000403095\n.text:0000000000403097\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030ac\n.text:00000000004030b1\n.text:00000000004030b3\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c1\n.text:00000000004030c8\n.text:00000000004030cd\n.text:00000000004030d0\n.text:00000000004030d5\n.text:00000000004030d8\n.text:00000000004030db\n.text:00000000004030dd\n.text:00000000004030e1\n.text:00000000004030e7\n.text:00000000004030ec\n.text:00000000004030f1\n.text:00000000004030f4\n.text:00000000004030fb\n.text:00000000004030fd\n.text:0000000000403100\n.text:0000000000403107\n.text:000000000040310a\n.text:0000000000403110\n.text:0000000000403113\n.text:000000000040311a\n.text:0000000000403120\n.text:0000000000403125\n.text:0000000000403128\n.text:0000000000403130\n.text:0000000000403135\n.text:0000000000403138\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403148\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403158\n.text:000000000040315b\n.text:0000000000403160\n.text:0000000000403162\n.text:0000000000403167\n.text:0000000000403169\n.text:000000000040316c\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403177\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403181\n.text:0000000000403185\n.text:0000000000403186\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318c\n.text:000000000040318e\n.text:000000000040318f\n'
p538
tp539
sS'ferror'
p540
(S'\n__stdcall ferror(FILE * __stream)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0060d068)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060d068]\n'
p543
S'ff 25 22 ba 20 00\n'
p544
S'.plt:0000000000401640\n'
p545
tp546
sS'__libc_csu_fini'
p547
(S'\n__stdcall __libc_csu_fini()\n'
p548
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p549
S'RET\n'
p550
S'f3 c3\n'
p551
S'.text:0000000000407ba0\n'
p552
tp553
sS'FUN_00401590'
p554
(S'\n__stdcall FUN_00401590()\n'
p555
V\u000avoid FUN_00401590(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060d010)();\u000a  return;\u000a}\u000a\u000a
p556
S'PUSH qword ptr [0x0060d008]\nJMP qword ptr [0x0060d010]\n'
p557
S'ff 35 72 ba 20 00\nff 25 74 ba 20 00\n'
p558
S'.plt:0000000000401590\n.plt:0000000000401596\n'
p559
tp560
sS'abort'
p561
(S'\n__stdcall abort()\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060d038)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060d038]\n'
p564
S'ff 25 52 ba 20 00\n'
p565
S'.plt:00000000004015e0\n'
p566
tp567
sS'usable_st_size'
p568
(S'\n__stdcall usable_st_size(stat * sb)\n'
p569
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p570
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x00404268\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p571
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p572
S'.text:0000000000404250\n.text:0000000000404254\n.text:0000000000404259\n.text:000000000040425e\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404267\n.text:0000000000404268\n.text:000000000040426a\n'
p573
tp574
sS'version_etc'
p575
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p576
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p577
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00406c62\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00406bc0\nADD RSP,0xd8\nRET\n'
p578
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p579
S'.text:0000000000406c20\n.text:0000000000406c27\n.text:0000000000406c29\n.text:0000000000406c2b\n.text:0000000000406c30\n.text:0000000000406c35\n.text:0000000000406c3a\n.text:0000000000406c42\n.text:0000000000406c4a\n.text:0000000000406c52\n.text:0000000000406c5a\n.text:0000000000406c62\n.text:0000000000406c67\n.text:0000000000406c6c\n.text:0000000000406c71\n.text:0000000000406c76\n.text:0000000000406c7e\n.text:0000000000406c83\n.text:0000000000406c8b\n.text:0000000000406c92\n.text:0000000000406c95\n.text:0000000000406c9a\n.text:0000000000406ca1\n'
p580
tp581
sS'print_named_ascii'
p582
(S'\n__stdcall print_named_ascii(size_t fields, size_t blank, void * block, char * unused_fmt_string)\n'
p583
V\u000avoid print_named_ascii(size_t fields,size_t blank,void *block,char *unused_fmt_string)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  byte bVar3;\u000a  byte *pbVar4;\u000a  ulong uVar5;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar6;\u000a  char buf [2];\u000a  byte local_3e;\u000a  undefined local_3d;\u000a  int local_3c;\u000a  long local_38;\u000a  \u000a  uVar2 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    local_38 = (long)(int)in_R9D;\u000a    uVar5 = (fields - 1) * local_38;\u000a    sVar6 = fields;\u000a    local_3c = in_R8D;\u000a    do {\u000a      iVar1 = (int)uVar2;\u000a      sVar6 = sVar6 - 1;\u000a      uVar2 = SUB168(ZEXT816(uVar5) / ZEXT816(fields),0);\u000a      bVar3 = *(byte *)block & 0x7f;\u000a      if (bVar3 == 0x7f) {\u000a        pbVar4 = &DAT_00409e68;\u000a      }\u000a      else {\u000a        if (bVar3 < 0x21) {\u000a          pbVar4 = (byte *)("nul" + (ulong)bVar3 * 4);\u000a        }\u000a        else {\u000a          local_3d = 0;\u000a          pbVar4 = &local_3e;\u000a          local_3e = bVar3;\u000a        }\u000a      }\u000a      block = (byte *)block + 1;\u000a      xprintf("%*s",(ulong)(uint)((iVar1 + local_3c) - SUB164(ZEXT816(uVar5) / ZEXT816(fields),0)),\u000a              pbVar4);\u000a      uVar5 = uVar5 - local_38;\u000a    } while (blank < sVar6);\u000a  }\u000a  return;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13D,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV RBX,RDX\nMOV R15,RSI\nMOV R14,RDI\nCMP R14,R15\nJBE 0x0040411e\nMOVSXD RAX,R13D\nLEA RBP,[R14 + -0x1]\nMOV qword ptr [RSP + 0x10],RAX\nIMUL RBP,RAX\nMOV R12,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV ESI,R13D\nDEC R12\nXOR EDX,EDX\nMOV RAX,RBP\nDIV R14\nMOVZX ECX,byte ptr [RBX]\nAND CL,0x7f\nCMP CL,0x7f\nMOV R13,RAX\nJNZ 0x004040d0\nMOV EDX,0x409e68\nJMP 0x004040fe\nCMP CL,0x20\nJA 0x004040f0\nMOVZX EAX,CL\nLEA RDX,[0x408b10 + RAX*0x4]\nJMP 0x004040fe\nMOV byte ptr [RSP + 0xa],CL\nMOV byte ptr [RSP + 0xb],0x0\nLEA RDX,[RSP + 0xa]\nINC RBX\nADD ESI,dword ptr [RSP + 0xc]\nSUB ESI,R13D\nMOV EDI,0x409e64\nXOR EAX,EAX\nCALL 0x00406f10\nSUB RBP,qword ptr [RSP + 0x10]\nCMP R12,R15\nJA 0x004040a0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n45 89 cd\n44 89 44 24 0c\n48 89 d3\n49 89 f7\n49 89 fe\n4d 39 fe\n0f 86 96 00 00 00\n49 63 c5\n49 8d 6e ff\n48 89 44 24 10\n48 0f af e8\n4d 89 f4\n0f 1f 44 00 00\n44 89 ee\n49 ff cc\n31 d2\n48 89 e8\n49 f7 f6\n0f b6 0b\n80 e1 7f\n80 f9 7f\n49 89 c5\n75 14\nba 68 9e 40 00\neb 3b\n80 f9 20\n77 1b\n0f b6 c1\n48 8d 14 85 10 8b 40 00\neb 1c\n88 4c 24 0a\nc6 44 24 0b 00\n48 8d 54 24 0a\n48 ff c3\n03 74 24 0c\n44 29 ee\nbf 64 9e 40 00\n31 c0\ne8 fc 2d 00 00\n48 2b 6c 24 10\n4d 39 fc\n77 82\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000404060\n.text:0000000000404061\n.text:0000000000404063\n.text:0000000000404065\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406a\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404076\n.text:0000000000404079\n.text:000000000040407c\n.text:000000000040407f\n.text:0000000000404082\n.text:0000000000404088\n.text:000000000040408b\n.text:000000000040408f\n.text:0000000000404094\n.text:0000000000404098\n.text:000000000040409b\n.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040a6\n.text:00000000004040a8\n.text:00000000004040ab\n.text:00000000004040ae\n.text:00000000004040b1\n.text:00000000004040b4\n.text:00000000004040b7\n.text:00000000004040ba\n.text:00000000004040bc\n.text:00000000004040c1\n.text:00000000004040d0\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d8\n.text:00000000004040e0\n.text:00000000004040f0\n.text:00000000004040f4\n.text:00000000004040f9\n.text:00000000004040fe\n.text:0000000000404101\n.text:0000000000404105\n.text:0000000000404108\n.text:000000000040410d\n.text:000000000040410f\n.text:0000000000404114\n.text:0000000000404119\n.text:000000000040411c\n.text:000000000040411e\n.text:0000000000404122\n.text:0000000000404123\n.text:0000000000404125\n.text:0000000000404127\n.text:0000000000404129\n.text:000000000040412b\n.text:000000000040412c\n'
p587
tp588
sS'lseek'
p589
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060d0e0)();\u000a  return _Var1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060d0e0]\n'
p592
S'ff 25 aa b9 20 00\n'
p593
S'.plt:0000000000401730\n'
p594
tp595
sS'xstrtol_fatal'
p596
(S'\n__stdcall xstrtol_fatal(option * long_options, char * arg)\n'
p597
V\u000avoid xstrtol_fatal(option *long_options,char *arg)\u000a\u000a{\u000a  xstrtol_error(long_options,arg);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p598
S'PUSH RAX\nMOV R9D,dword ptr [0x0060d250]\nCALL 0x00407140\nCALL 0x004015e0\n'
p599
S'50\n44 8b 0d 28 61 20 00\ne8 13 00 00 00\ne8 ae a4 ff ff\n'
p600
S'.text:0000000000407120\n.text:0000000000407121\n.text:0000000000407128\n.text:000000000040712d\n'
p601
tp602
sS'quotearg_n_mem'
p603
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p604
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'MOV ECX,0x60d440\nJMP 0x00405f30\n'
p606
S'b9 40 d4 60 00\ne9 36 fe ff ff\n'
p607
S'.text:00000000004060f0\n.text:00000000004060f5\n'
p608
tp609
sS'__printf_chk'
p610
(S'\n__stdcall __printf_chk()\n'
p611
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060d1a8)();\u000a  return;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x0060d1a8]\n'
p613
S'ff 25 e2 b8 20 00\n'
p614
S'.plt:00000000004018c0\n'
p615
tp616
sS'emit_ancillary_info'
p617
(S'\n__stdcall emit_ancillary_info()\n'
p618
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00408960;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("od",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "od";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_004098c7,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_004098c7);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40a6e9;\u000a  if (__s2 == "od") {\u000a    uVar3 = 0x409b08;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p619
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x408960\nMOV ESI,0x409aec\nNOP\nMOV EDI,0x4098c7\nCALL 0x004017e0\nTEST EAX,EAX\nJZ 0x00401d9b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401d80\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4098c7\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x409b4b\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409957\nMOV ECX,0x409b62\nXOR EAX,EAX\nCALL 0x004018c0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00401e24\nMOV ESI,0x409b89\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00401e24\nXOR EDI,EDI\nMOV ESI,0x409b8d\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4098c7\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004018c0\nXOR EDI,EDI\nMOV ESI,0x409bd2\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,RAX\nMOV R14D,0x4098c7\nMOV EDI,0x1\nMOV EDX,0x409b62\nMOV ECX,0x4098c7\nXOR EAX,EAX\nCALL 0x004018c0\nXOR EDI,EDI\nMOV ESI,0x409bf1\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x409b08\nMOV ECX,0x40a6e9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004018c0\n'
p620
S'41 56\n53\n50\nbb 60 89 40 00\nbe ec 9a 40 00\n66 90\nbf c7 98 40 00\ne8 56 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb c7 98 40 00\n48 0f 45 d8\n31 ff\nbe 4b 9b 40 00\nba 05 00 00 00\ne8 04 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 57 99 40 00\nb9 62 9b 40 00\n31 c0\ne8 eb fa ff ff\nbf 05 00 00 00\n31 f6\ne8 cf fa ff ff\n48 85 c0\n74 3e\nbe 89 9b 40 00\nba 03 00 00 00\n48 89 c7\ne8 08 f8 ff ff\n85 c0\n74 28\n31 ff\nbe 8d 9b 40 00\nba 05 00 00 00\ne8 b3 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba c7 98 40 00\n31 c0\n48 89 ce\ne8 9c fa ff ff\n31 ff\nbe d2 9b 40 00\nba 05 00 00 00\ne8 8b f8 ff ff\n48 89 c6\n41 be c7 98 40 00\nbf 01 00 00 00\nba 62 9b 40 00\nb9 c7 98 40 00\n31 c0\ne8 6c fa ff ff\n31 ff\nbe f1 9b 40 00\nba 05 00 00 00\ne8 5b f8 ff ff\n48 89 c2\n4c 39 f3\nb8 08 9b 40 00\nb9 e9 a6 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 2e fa ff ff\n'
p621
S'.text:0000000000401d70\n.text:0000000000401d72\n.text:0000000000401d73\n.text:0000000000401d74\n.text:0000000000401d79\n.text:0000000000401d7e\n.text:0000000000401d80\n.text:0000000000401d85\n.text:0000000000401d8a\n.text:0000000000401d8c\n.text:0000000000401d8e\n.text:0000000000401d92\n.text:0000000000401d96\n.text:0000000000401d99\n.text:0000000000401d9b\n.text:0000000000401d9f\n.text:0000000000401da2\n.text:0000000000401da7\n.text:0000000000401dab\n.text:0000000000401dad\n.text:0000000000401db2\n.text:0000000000401db7\n.text:0000000000401dbc\n.text:0000000000401dbf\n.text:0000000000401dc4\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd0\n.text:0000000000401dd5\n.text:0000000000401dda\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de4\n.text:0000000000401de6\n.text:0000000000401deb\n.text:0000000000401df0\n.text:0000000000401df3\n.text:0000000000401df8\n.text:0000000000401dfa\n.text:0000000000401dfc\n.text:0000000000401dfe\n.text:0000000000401e03\n.text:0000000000401e08\n.text:0000000000401e0d\n.text:0000000000401e10\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1c\n.text:0000000000401e1f\n.text:0000000000401e24\n.text:0000000000401e26\n.text:0000000000401e2b\n.text:0000000000401e30\n.text:0000000000401e35\n.text:0000000000401e38\n.text:0000000000401e3e\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e4d\n.text:0000000000401e4f\n.text:0000000000401e54\n.text:0000000000401e56\n.text:0000000000401e5b\n.text:0000000000401e60\n.text:0000000000401e65\n.text:0000000000401e68\n.text:0000000000401e6b\n.text:0000000000401e70\n.text:0000000000401e75\n.text:0000000000401e79\n.text:0000000000401e7e\n.text:0000000000401e80\n.text:0000000000401e83\n.text:0000000000401e86\n.text:0000000000401e8a\n.text:0000000000401e8b\n.text:0000000000401e8d\n'
p622
tp623
sS'version_etc_va'
p624
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p625
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p626
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00406bf0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00406bfc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00406c11\nINC R9\nCMP R9,0xa\nJC 0x00406bd0\nMOV R8,RSP\nCALL 0x00406830\nADD RSP,0x58\nRET\n'
p627
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p628
S'.text:0000000000406bc0\n.text:0000000000406bc4\n.text:0000000000406bc7\n.text:0000000000406bd0\n.text:0000000000406bd3\n.text:0000000000406bd7\n.text:0000000000406bd9\n.text:0000000000406bdc\n.text:0000000000406be0\n.text:0000000000406be4\n.text:0000000000406be7\n.text:0000000000406bf0\n.text:0000000000406bf4\n.text:0000000000406bf8\n.text:0000000000406bfc\n.text:0000000000406bff\n.text:0000000000406c03\n.text:0000000000406c06\n.text:0000000000406c08\n.text:0000000000406c0b\n.text:0000000000406c0f\n.text:0000000000406c11\n.text:0000000000406c14\n.text:0000000000406c19\n.text:0000000000406c1d\n'
p629
tp630
sS'xzalloc'
p631
(S'\n__stdcall xzalloc(size_t s)\n'
p632
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p633
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00406d50\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401760\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p634
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 04 a9 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p635
S'.text:0000000000406e40\n.text:0000000000406e42\n.text:0000000000406e43\n.text:0000000000406e44\n.text:0000000000406e47\n.text:0000000000406e4c\n.text:0000000000406e4f\n.text:0000000000406e51\n.text:0000000000406e54\n.text:0000000000406e57\n.text:0000000000406e5c\n.text:0000000000406e5f\n.text:0000000000406e63\n.text:0000000000406e64\n.text:0000000000406e66\n'
p636
tp637
sS'__vfprintf_chk'
p638
(S'\n__stdcall __vfprintf_chk()\n'
p639
V\u000avoid __vfprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___vfprintf_chk_0060d030)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060d030]\n'
p641
S'ff 25 5a ba 20 00\n'
p642
S'.plt:00000000004015d0\n'
p643
tp644
sS'print_short'
p645
(S'\n__stdcall print_short(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p646
V\u000avoid print_short(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ushort uVar3;\u000a  ulong uVar4;\u000a  ushort *puVar5;\u000a  long lVar6;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar7;\u000a  ushort local_40 [2];\u000a  int local_3c;\u000a  char *local_38;\u000a  \u000a  uVar4 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar7 = fields;\u000a    local_3c = in_R8D;\u000a    local_38 = fmt_string;\u000a    do {\u000a      iVar2 = (int)uVar4;\u000a      sVar7 = sVar7 - 1;\u000a      auVar1 = ZEXT816(sVar7 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar4 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        uVar3 = *(ushort *)block;\u000a      }\u000a      else {\u000a        puVar5 = local_40;\u000a        lVar6 = 2;\u000a        do {\u000a          *(undefined *)puVar5 = *(undefined *)((long)block + lVar6 + -1);\u000a          puVar5 = (ushort *)((long)puVar5 + 1);\u000a          lVar6 = lVar6 + -1;\u000a          uVar3 = local_40[0];\u000a        } while (lVar6 != 0);\u000a      }\u000a      block = (ushort *)block + 1;\u000a      xprintf(local_38,(ulong)(uint)((iVar2 + local_3c) - SUB164(auVar1,0)),(ulong)uVar3);\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBP,RDX\nMOV R12,RSI\nMOV R13,RDI\nCMP R13,R12\nJBE 0x00403b9c\nMOVSXD R14,EBX\nMOV R15,R13\nNOP\nMOV ESI,EBX\nDEC R15\nMOV RAX,R15\nIMUL RAX,R14\nXOR EDX,EDX\nDIV R13\nADD ESI,dword ptr [RSP + 0xc]\nMOV RBX,RAX\nSUB ESI,EBX\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403b80\nLEA RAX,[RSP + 0x8]\nMOV ECX,0x2\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RBP + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403b60\nMOVZX EAX,word ptr [RSP + 0x8]\nJMP 0x00403b84\nMOVZX EAX,word ptr [RBP]\nADD RBP,0x2\nMOVZX EDX,AX\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406f10\nCMP R15,R12\nJA 0x00403b30\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n44 89 44 24 0c\n48 89 4c 24 10\n48 89 d5\n49 89 f4\n49 89 fd\n4d 39 e5\n76 73\n4c 63 f3\n4d 89 ef\n90\n89 de\n49 ff cf\n4c 89 f8\n49 0f af c6\n31 d2\n49 f7 f5\n03 74 24 0c\n48 89 c3\n29 de\n80 3d 89 98 20 00 00\n74 2d\n48 8d 44 24 08\nb9 02 00 00 00\n0f 1f 00\n0f b6 54 0d ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\n0f b7 44 24 08\neb 0e\n0f b7 45 00\n48 83 c5 02\n0f b7 d0\n31 c0\n48 8b 7c 24 10\ne8 79 33 00 00\n4d 39 e7\n77 94\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000403b00\n.text:0000000000403b01\n.text:0000000000403b03\n.text:0000000000403b05\n.text:0000000000403b07\n.text:0000000000403b09\n.text:0000000000403b0a\n.text:0000000000403b0e\n.text:0000000000403b11\n.text:0000000000403b16\n.text:0000000000403b1b\n.text:0000000000403b1e\n.text:0000000000403b21\n.text:0000000000403b24\n.text:0000000000403b27\n.text:0000000000403b29\n.text:0000000000403b2c\n.text:0000000000403b2f\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b38\n.text:0000000000403b3c\n.text:0000000000403b3e\n.text:0000000000403b41\n.text:0000000000403b45\n.text:0000000000403b48\n.text:0000000000403b4a\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b67\n.text:0000000000403b6a\n.text:0000000000403b6d\n.text:0000000000403b6f\n.text:0000000000403b74\n.text:0000000000403b80\n.text:0000000000403b84\n.text:0000000000403b88\n.text:0000000000403b8b\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b97\n.text:0000000000403b9a\n.text:0000000000403b9c\n.text:0000000000403ba0\n.text:0000000000403ba1\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403baa\n'
p650
tp651
sS'gettext_quote'
p652
(S'\n__stdcall gettext_quote(char * msgid)\n'
p653
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040a5ae;\u000a        pcVar2 = &DAT_0040a5b2;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004016c0\nCMP RAX,RBX\nJNZ 0x004064e8\nCALL 0x00407800\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004064f0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00406498\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40a59e\nMOV EAX,0x40a5a2\nJMP 0x004064e4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004064f0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004064d6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40a5ae\nMOV EAX,0x40a5b2\nJMP 0x004064e4\nCMP R14D,0x9\nMOV ECX,0x40a594\nMOV EAX,0x40a96c\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p655
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 77 b2 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 a9 13 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 9e a5 40 00\nb8 a2 a5 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ae a5 40 00\nb8 b2 a5 40 00\neb 0e\n41 83 fe 09\nb9 94 a5 40 00\nb8 6c a9 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p656
S'.text:0000000000406430\n.text:0000000000406431\n.text:0000000000406433\n.text:0000000000406434\n.text:0000000000406437\n.text:000000000040643a\n.text:000000000040643c\n.text:0000000000406441\n.text:0000000000406444\n.text:0000000000406449\n.text:000000000040644c\n.text:0000000000406452\n.text:0000000000406457\n.text:000000000040645a\n.text:000000000040645f\n.text:0000000000406464\n.text:0000000000406469\n.text:000000000040646f\n.text:0000000000406475\n.text:0000000000406478\n.text:000000000040647a\n.text:000000000040647c\n.text:0000000000406481\n.text:0000000000406485\n.text:0000000000406487\n.text:0000000000406489\n.text:000000000040648c\n.text:0000000000406491\n.text:0000000000406496\n.text:0000000000406498\n.text:000000000040649d\n.text:00000000004064a2\n.text:00000000004064a7\n.text:00000000004064ad\n.text:00000000004064b3\n.text:00000000004064b6\n.text:00000000004064b8\n.text:00000000004064ba\n.text:00000000004064bf\n.text:00000000004064c3\n.text:00000000004064c5\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064cf\n.text:00000000004064d4\n.text:00000000004064d6\n.text:00000000004064da\n.text:00000000004064df\n.text:00000000004064e4\n.text:00000000004064e8\n.text:00000000004064e9\n.text:00000000004064eb\n.text:00000000004064ec\n'
p657
tp658
sS'fclose'
p659
(S'\n__stdcall fclose(FILE * __stream)\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060d098)();\u000a  return iVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060d098]\n'
p662
S'ff 25 f2 b9 20 00\n'
p663
S'.plt:00000000004016a0\n'
p664
tp665
sS'ftoastr'
p666
(S'\n__stdcall ftoastr(char * buf, size_t bufsize, float x)\n'
p667
V\u000aint ftoastr(char *buf,size_t bufsize,float x)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  uint in_ECX;\u000a  ulong in_RDX;\u000a  uint uVar5;\u000a  float fVar6;\u000a  uint in_XMM0_Db;\u000a  undefined8 in_XMM0_Qb;\u000a  undefined auVar7 [16];\u000a  char format [11];\u000a  undefined local_5b;\u000a  undefined local_5a;\u000a  double local_50;\u000a  float local_48;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  \u000a  uStack64 = (uint)in_XMM0_Qb;\u000a  uStack60 = (uint)((ulong)in_XMM0_Qb >> 0x20);\u000a  auVar7 = orps(CONCAT412(uStack60 & (DAT_00409ffc ^ uStack60),\u000a                          CONCAT48(uStack64 & (DAT_00409ff8 ^ uStack64),\u000a                                   CONCAT44(in_XMM0_Db & (DAT_00409ff4 ^ in_XMM0_Db),\u000a                                            -(uint)(x < 0.00000000) & (DAT_00409ff0 ^ (uint)x)))),\u000a                ZEXT416(~-(uint)(x < 0.00000000) & (uint)x));\u000a  local_5b = 0x25;\u000a  local_5a = 0x2d;\u000a  uVar4 = (ulong)((uint)in_RDX & 1);\u000a  lVar2 = (long)&local_5a + uVar4;\u000a  *(undefined *)((long)&local_5a + uVar4) = 0x2b;\u000a  uVar4 = (ulong)((uint)((in_RDX & 0xffffffff) >> 1) & 1);\u000a  lVar1 = lVar2 + uVar4;\u000a  *(undefined *)(uVar4 + lVar2) = 0x20;\u000a  uVar4 = (ulong)((uint)((in_RDX & 0xffffffff) >> 2) & 1);\u000a  lVar2 = lVar1 + uVar4;\u000a  *(undefined *)(uVar4 + lVar1) = 0x30;\u000a  uVar4 = (ulong)((uint)((in_RDX & 0xffffffff) >> 3) & 1);\u000a  *(undefined2 *)(uVar4 + lVar2) = 0x2e2a;\u000a  *(undefined *)(uVar4 + 2 + lVar2) = 0x2a;\u000a  *(byte *)(uVar4 + 3 + lVar2) = (char)in_RDX * 2 & 0x20U ^ 0x67;\u000a  *(undefined *)(uVar4 + 4 + lVar2) = 0;\u000a  uVar4 = (ulong)(DAT_0040a000 <= SUB164(auVar7,0)) * 5 + 1;\u000a  local_50 = (double)x;\u000a  local_48 = x;\u000a  iVar3 = __snprintf_chk(buf,bufsize,1,0xffffffffffffffff,&local_5b,(ulong)in_ECX,(int)uVar4);\u000a  if (-1 < iVar3) {\u000a    while ((bufsize <= (ulong)(long)iVar3 || (fVar6 = strtof(buf,(char **)0x0), fVar6 != local_48)))\u000a    {\u000a      uVar5 = (int)uVar4 + 1;\u000a      iVar3 = __snprintf_chk(local_50,buf,bufsize,1,0xffffffffffffffff,&local_5b,(ulong)in_ECX,uVar5\u000a                            );\u000a      if (7 < (int)uVar4) {\u000a        return iVar3;\u000a      }\u000a      uVar4 = (ulong)uVar5;\u000a      if (iVar3 < 0) {\u000a        return iVar3;\u000a      }\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV EBP,ECX\nMOV R13,RSI\nMOV R12,RDI\nMOVAPS XMM1,xmmword ptr [0x00409ff0]\nXORPS XMM1,XMM0\nXORPS XMM2,XMM2\nMOVAPS XMM3,XMM0\nCMPLTSS XMM3,XMM2\nMOVAPS XMM2,XMM3\nANDNPS XMM2,XMM0\nANDPS XMM3,XMM1\nORPS XMM3,XMM2\nMOV byte ptr [RSP + 0xd],0x25\nMOV byte ptr [RSP + 0xe],0x2d\nMOV EAX,EDX\nAND EAX,0x1\nLEA RCX,[RSP + RAX*0x1 + 0xe]\nMOV byte ptr [RSP + RAX*0x1 + 0xe],0x2b\nMOV EAX,EDX\nSHR EAX,1\nAND EAX,0x1\nLEA RSI,[RCX + RAX*0x1]\nMOV byte ptr [RAX + RCX*0x1],0x20\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x1\nLEA RCX,[RSI + RAX*0x1]\nMOV byte ptr [RAX + RSI*0x1],0x30\nMOV EAX,EDX\nSHR EAX,0x3\nAND EAX,0x1\nMOV word ptr [RAX + RCX*0x1],0x2e2a\nMOV byte ptr [RAX + RCX*0x1 + 0x2],0x2a\nADD DL,DL\nAND DL,0x20\nXOR DL,0x67\nMOV byte ptr [RAX + RCX*0x1 + 0x3],DL\nMOV byte ptr [RAX + RCX*0x1 + 0x4],0x0\nMOVSS XMM1,dword ptr [0x0040a000]\nXOR EAX,EAX\nUCOMISS XMM1,XMM3\nSETBE AL\nLEA EBX,[RAX + RAX*0x4 + 0x1]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nCVTSS2SD XMM0,XMM0\nMOV dword ptr [RSP],EBX\nLEA R8,[RSP + 0xd]\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV AL,0x1\nMOV RSI,R13\nMOV R15D,EBP\nMOV R9D,EBP\nMOVSD qword ptr [RSP + 0x18],XMM0\nCALL 0x004015b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404dd8\nMOVSXD RAX,EBP\nCMP RAX,R13\nJNC 0x00404d9b\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00401750\nUCOMISS XMM0,dword ptr [RSP + 0x20]\nJNZ 0x00404d9b\nJNP 0x00404dd8\nLEA R14D,[RBX + 0x1]\nMOV dword ptr [RSP],R14D\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV AL,0x1\nMOV RDI,R12\nMOV RSI,R13\nLEA R8,[RSP + 0xd]\nMOV R9D,R15D\nMOVSD XMM0,qword ptr [RSP + 0x18]\nCALL 0x004015b0\nMOV EBP,EAX\nCMP EBX,0x7\nJG 0x00404dd8\nTEST EBP,EBP\nMOV EBX,R14D\nJNS 0x00404d80\nMOV EAX,EBP\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n89 cd\n49 89 f5\n49 89 fc\n0f 28 0d 33 53 00 00\n0f 57 c8\n0f 57 d2\n0f 28 d8\nf3 0f c2 da 01\n0f 28 d3\n0f 55 d0\n0f 54 d9\n0f 56 da\nc6 44 24 0d 25\nc6 44 24 0e 2d\n89 d0\n83 e0 01\n48 8d 4c 04 0e\nc6 44 04 0e 2b\n89 d0\nd1 e8\n83 e0 01\n48 8d 34 01\nc6 04 08 20\n89 d0\nc1 e8 02\n83 e0 01\n48 8d 0c 06\nc6 04 30 30\n89 d0\nc1 e8 03\n83 e0 01\n66 c7 04 08 2a 2e\nc6 44 08 02 2a\n00 d2\n80 e2 20\n80 f2 67\n88 54 08 03\nc6 44 08 04 00\nf3 0f 10 0d c5 52 00 00\n31 c0\n0f 2e cb\n0f 96 c0\n8d 5c 80 01\n0f 29 44 24 20\nf3 0f 5a c0\n89 1c 24\n4c 8d 44 24 0d\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\nb0 01\n4c 89 ee\n41 89 ef\n41 89 e9\nf2 0f 11 44 24 18\ne8 36 c8 ff ff\n89 c5\n85 ed\n78 58\n48 63 c5\n4c 39 e8\n73 13\n31 f6\n4c 89 e7\ne8 be c9 ff ff\n0f 2e 44 24 20\n75 02\n7b 3d\n44 8d 73 01\n44 89 34 24\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\nb0 01\n4c 89 e7\n4c 89 ee\n4c 8d 44 24 0d\n45 89 f9\nf2 0f 10 44 24 18\ne8 e6 c7 ff ff\n89 c5\n83 fb 07\n7f 07\n85 ed\n44 89 f3\n79 a8\n89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p670
S'.text:0000000000404ca0\n.text:0000000000404ca1\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404caa\n.text:0000000000404cae\n.text:0000000000404cb0\n.text:0000000000404cb3\n.text:0000000000404cb6\n.text:0000000000404cbd\n.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc6\n.text:0000000000404ccb\n.text:0000000000404cce\n.text:0000000000404cd1\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ceb\n.text:0000000000404cf0\n.text:0000000000404cf2\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cfb\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d07\n.text:0000000000404d0b\n.text:0000000000404d0f\n.text:0000000000404d11\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d1d\n.text:0000000000404d22\n.text:0000000000404d24\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2e\n.text:0000000000404d33\n.text:0000000000404d3b\n.text:0000000000404d3d\n.text:0000000000404d40\n.text:0000000000404d43\n.text:0000000000404d47\n.text:0000000000404d4c\n.text:0000000000404d50\n.text:0000000000404d53\n.text:0000000000404d58\n.text:0000000000404d5d\n.text:0000000000404d64\n.text:0000000000404d66\n.text:0000000000404d69\n.text:0000000000404d6c\n.text:0000000000404d6f\n.text:0000000000404d75\n.text:0000000000404d7a\n.text:0000000000404d7c\n.text:0000000000404d7e\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d86\n.text:0000000000404d88\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d97\n.text:0000000000404d99\n.text:0000000000404d9b\n.text:0000000000404d9f\n.text:0000000000404da3\n.text:0000000000404da8\n.text:0000000000404daf\n.text:0000000000404db1\n.text:0000000000404db4\n.text:0000000000404db7\n.text:0000000000404dbc\n.text:0000000000404dbf\n.text:0000000000404dc5\n.text:0000000000404dca\n.text:0000000000404dcc\n.text:0000000000404dcf\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dd8\n.text:0000000000404dda\n.text:0000000000404dde\n.text:0000000000404ddf\n.text:0000000000404de1\n.text:0000000000404de3\n.text:0000000000404de5\n.text:0000000000404de7\n.text:0000000000404de8\n'
p671
tp672
sS'__ctype_get_mb_cur_max'
p673
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060d0b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x0060d0b0]\n'
p676
S'ff 25 da b9 20 00\n'
p677
S'.plt:00000000004016d0\n'
p678
tp679
sS'get_lcm'
p680
(S'\n__stdcall get_lcm()\n'
p681
V\u000aint get_lcm(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  size_spec *psVar4;\u000a  \u000a  sVar1 = n_specs;\u000a  if (n_specs != 0) {\u000a    psVar4 = &spec->size;\u000a    uVar3 = 0;\u000a    sVar2 = 1;\u000a    do {\u000a      sVar2 = lcm((long)(int)sVar2,(long)width_bytes[(ulong)*psVar4]);\u000a      uVar3 = uVar3 + 1;\u000a      psVar4 = psVar4 + 10;\u000a    } while (uVar3 < sVar1);\u000a    return (int)sVar2;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p682
S'CMP qword ptr [0x0060d388],0x0\nJZ 0x00402ea5\nPUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,qword ptr [0x0060d398]\nMOV R14,qword ptr [0x0060d388]\nADD R15,0x4\nXOR EBX,EBX\nMOV EAX,0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOVSXD RDI,EAX\nMOV EAX,dword ptr [R15]\nMOVSXD RSI,dword ptr [0x408930 + RAX*0x4]\nCALL 0x00404390\nINC RBX\nADD R15,0x28\nCMP RBX,R14\nJC 0x00402e80\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EAX,0x1\nRET\n'
p683
S'48 83 3d 30 a5 20 00 00\n74 4b\n41 57\n41 56\n53\n4c 8b 3d 32 a5 20 00\n4c 8b 35 1b a5 20 00\n49 83 c7 04\n31 db\nb8 01 00 00 00\n0f 1f 84 00 00 00 00 00\n48 63 f8\n41 8b 07\n48 63 34 85 30 89 40 00\ne8 fd 14 00 00\n48 ff c3\n49 83 c7 28\n4c 39 f3\n72 e1\n5b\n41 5e\n41 5f\nc3\nb8 01 00 00 00\nc3\n'
p684
S'.text:0000000000402e50\n.text:0000000000402e58\n.text:0000000000402e5a\n.text:0000000000402e5c\n.text:0000000000402e5e\n.text:0000000000402e5f\n.text:0000000000402e66\n.text:0000000000402e6d\n.text:0000000000402e71\n.text:0000000000402e73\n.text:0000000000402e78\n.text:0000000000402e80\n.text:0000000000402e83\n.text:0000000000402e86\n.text:0000000000402e8e\n.text:0000000000402e93\n.text:0000000000402e96\n.text:0000000000402e9a\n.text:0000000000402e9d\n.text:0000000000402e9f\n.text:0000000000402ea0\n.text:0000000000402ea2\n.text:0000000000402ea4\n.text:0000000000402ea5\n.text:0000000000402eaa\n'
p685
tp686
sS'quotearg_n_style'
p687
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p688
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00406160\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00405f30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p690
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p691
S'.text:0000000000406120\n.text:0000000000406121\n.text:0000000000406123\n.text:0000000000406124\n.text:0000000000406128\n.text:000000000040612b\n.text:000000000040612d\n.text:0000000000406132\n.text:0000000000406135\n.text:000000000040613a\n.text:0000000000406141\n.text:0000000000406143\n.text:0000000000406146\n.text:0000000000406149\n.text:000000000040614e\n.text:0000000000406152\n.text:0000000000406153\n.text:0000000000406155\n.text:0000000000406156\n'
p692
tp693
sS'quote_n'
p694
(S'\n__stdcall quote_n(char * arg)\n'
p695
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p696
S'MOV RDX,-0x1\nJMP 0x004063f0\n'
p697
S'48 c7 c2 ff ff ff ff\neb d7\n'
p698
S'.text:0000000000406410\n.text:0000000000406417\n'
p699
tp700
sS'quotearg_alloc'
p701
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p702
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00405da0\n'
p704
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p705
S'.text:0000000000405d90\n.text:0000000000405d93\n.text:0000000000405d95\n.text:0000000000405d98\n'
p706
tp707
sS'close_stdout_set_file_name'
p708
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p709
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p710
S'MOV qword ptr [0x0060d420],RDI\nRET\n'
p711
S'48 89 3d a9 89 20 00\nc3\n'
p712
S'.text:0000000000404a70\n.text:0000000000404a77\n'
p713
tp714
sS'fgetc'
p715
(S'\n__stdcall fgetc(FILE * __stream)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fgetc(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fgetc_0060d108)();\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060d108]\n'
p718
S'ff 25 82 b9 20 00\n'
p719
S'.plt:0000000000401780\n'
p720
tp721
sS'simple_strtoul'
p722
(S'\n__stdcall simple_strtoul(char * s, char * * p, ulong * val)\n'
p723
V\u000a_Bool simple_strtoul(char *s,char **p,ulong *val)\u000a\u000a{\u000a  bool bVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = 0;\u000a  do {\u000a    uVar2 = (long)*s - 0x30;\u000a    if (9 < (uint)uVar2) {\u000a      *p = s;\u000a      *val = uVar3;\u000a      return true;\u000a    }\u000a    s = s + 1;\u000a    bVar1 = uVar3 <= ~uVar2 / 10;\u000a    uVar3 = uVar2 + uVar3 * 10;\u000a  } while (bVar1);\u000a  return false;\u000a}\u000a\u000a
p724
S'MOV R8,RDX\nXOR R10D,R10D\nMOV R9,-0x3333333333333333\nMOVSX RCX,byte ptr [RDI]\nADD RCX,-0x30\nCMP ECX,0x9\nJA 0x0040391d\nINC RDI\nMOV RAX,RCX\nNOT RAX\nMUL R9\nSHR RDX,0x3\nCMP R10,RDX\nLEA RAX,[R10 + R10*0x4]\nLEA R10,[RCX + RAX*0x2]\nJBE 0x004038f0\nXOR EAX,EAX\nRET\nMOV qword ptr [RSI],RDI\nMOV qword ptr [R8],R10\nMOV AL,0x1\nRET\n'
p725
S'49 89 d0\n45 31 d2\n49 b9 cd cc cc cc cc cc cc cc\n48 0f be 0f\n48 83 c1 d0\n83 f9 09\n77 20\n48 ff c7\n48 89 c8\n48 f7 d0\n49 f7 e1\n48 c1 ea 03\n49 39 d2\n4b 8d 04 92\n4c 8d 14 41\n76 d6\n31 c0\nc3\n48 89 3e\n4d 89 10\nb0 01\nc3\n'
p726
S'.text:00000000004038e0\n.text:00000000004038e3\n.text:00000000004038e6\n.text:00000000004038f0\n.text:00000000004038f4\n.text:00000000004038f8\n.text:00000000004038fb\n.text:00000000004038fd\n.text:0000000000403900\n.text:0000000000403903\n.text:0000000000403906\n.text:0000000000403909\n.text:000000000040390d\n.text:0000000000403910\n.text:0000000000403914\n.text:0000000000403918\n.text:000000000040391a\n.text:000000000040391c\n.text:000000000040391d\n.text:0000000000403920\n.text:0000000000403923\n.text:0000000000403925\n'
p727
tp728
sS'__libc_csu_init'
p729
(S'\n__stdcall __libc_csu_init()\n'
p730
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ce08]\nPUSH RBP\nLEA RBP,[0x60ce10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401570\nTEST RBP,RBP\nJZ 0x00407b86\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00407b70\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p732
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 c6 52 20 00\n55\n48 8d 2d c6 52 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 0f 9a ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p733
S'.text:0000000000407b30\n.text:0000000000407b32\n.text:0000000000407b34\n.text:0000000000407b37\n.text:0000000000407b39\n.text:0000000000407b3b\n.text:0000000000407b42\n.text:0000000000407b43\n.text:0000000000407b4a\n.text:0000000000407b4b\n.text:0000000000407b4e\n.text:0000000000407b51\n.text:0000000000407b54\n.text:0000000000407b58\n.text:0000000000407b5c\n.text:0000000000407b61\n.text:0000000000407b64\n.text:0000000000407b66\n.text:0000000000407b68\n.text:0000000000407b70\n.text:0000000000407b73\n.text:0000000000407b76\n.text:0000000000407b79\n.text:0000000000407b7d\n.text:0000000000407b81\n.text:0000000000407b84\n.text:0000000000407b86\n.text:0000000000407b8a\n.text:0000000000407b8b\n.text:0000000000407b8c\n.text:0000000000407b8e\n.text:0000000000407b90\n.text:0000000000407b92\n.text:0000000000407b94\n'
p734
tp735
sS'argmatch_to_argument'
p736
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p737
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p738
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00404a51\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x00404a54\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00404a30\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p739
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 62 cd ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p740
S'.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a08\n.text:0000000000404a09\n.text:0000000000404a0c\n.text:0000000000404a0f\n.text:0000000000404a12\n.text:0000000000404a15\n.text:0000000000404a18\n.text:0000000000404a1b\n.text:0000000000404a1d\n.text:0000000000404a21\n.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a40\n.text:0000000000404a42\n.text:0000000000404a45\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a57\n.text:0000000000404a58\n.text:0000000000404a5a\n.text:0000000000404a5c\n.text:0000000000404a5e\n.text:0000000000404a60\n'
p741
tp742
sS'c_isdigit'
p743
(S'\n__stdcall c_isdigit()\n'
p744
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p745
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p746
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p747
S'.text:00000000004076c0\n.text:00000000004076c3\n.text:00000000004076c6\n.text:00000000004076c9\n'
p748
tp749
sS'usage'
p750
(S'\n__stdcall usage()\n'
p751
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... [FILE]...\u005cn  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\u005cn  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnWrite an unambiguous representation, octal bytes by default,\u005cnof FILE to standard output.  With more than one FILE argument,\u005cnconcatenate them in the listed order to form the input.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnIf first and second call formats both apply, the second format is assumed\u005cnif the last operand begins with + or (if there are 2 operands) a digit.\u005cnAn OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\u005cnat first byte printed, incremented when dump is progressing.\u005cnFor OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;\u005cnsuffixes may be . for octal and b for multiply by 512.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -A, --address-radix=RADIX   output format for file offsets; RADIX is one\u005cn                                of [doxn], for Decimal, Octal, Hex or None\u005cn      --endian={big|little}   swap input bytes according the specified order\u005cn  -j, --skip-bytes=BYTES      skip BYTES input bytes first\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\u005cn  -S BYTES, --strings[=BYTES]  output strings of at least BYTES graphic chars;\u005cn                                3 is implied when BYTES is not specified\u005cn  -t, --format=TYPE           select output format or formats\u005cn  -v, --output-duplicates     do not use * to mark line suppression\u005cn  -w[BYTES], --width[=BYTES]  output BYTES bytes per output line;\u005cn                                32 is implied when BYTES is not specified\u005cn      --traditional           accept arguments in third form above\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn\u005cnTraditional format specifications may be intermixed; they accumulate:\u005cn  -a   same as -t a,  select named characters, ignoring high-order bit\u005cn  -b   same as -t o1, select octal bytes\u005cn  -c   same as -t c,  select printable characters or backslash escapes\u005cn  -d   same as -t u2, select unsigned decimal 2-byte units\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f   same as -t fF, select floats\u005cn  -i   same as -t dI, select decimal ints\u005cn  -l   same as -t dL, select decimal longs\u005cn  -o   same as -t o2, select octal 2-byte units\u005cn  -s   same as -t d2, select decimal 2-byte units\u005cn  -x   same as -t x2, select hexadecimal 2-byte units\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn\u005cnTYPE is made up of one or more of these specifications:\u005cn  a          named character, ignoring high-order bit\u005cn  c          printable character or backslash escape\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  d[SIZE]    signed decimal, SIZE bytes per integer\u005cn  f[SIZE]    floating point, SIZE bytes per integer\u005cn  o[SIZE]    octal, SIZE bytes per integer\u005cn  u[SIZE]    unsigned decimal, SIZE bytes per integer\u005cn  x[SIZE]    hexadecimal, SIZE bytes per integer\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnSIZE is a number.  For TYPE in [doux], SIZE may also be C for\u005cnsizeof(char), S for sizeof(short), I for sizeof(int) or L for\u005cnsizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\u005cnfor sizeof(double) or L for sizeof(long double).\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnAdding a z suffix to any type displays printable characters at the end of\u005cneach output line.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn\u005cnBYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:\u005cn  b    512\u005cn  KB   1000\u005cn  K    1024\u005cn  MB   1000*1000\u005cn  M    1024*1024\u005cnand so on for G, T, P, E, Z, Y.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p752
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401cc1\nXOR EDI,EDI\nMOV ESI,0x408c50\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060d430]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x004018c0\nXOR EDI,EDI\nMOV ESI,0x408cf3\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nCALL 0x00401d10\nXOR EDI,EDI\nMOV ESI,0x408da9\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nCALL 0x00401d40\nXOR EDI,EDI\nMOV ESI,0x408f30\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x40904f\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x409277\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4092a4\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4092da\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x409415\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x409527\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4095cd\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4096c8\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4097bc\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x40981a\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nCALL 0x004017b0\nCALL 0x00401d70\nMOV EDI,EBX\nCALL 0x00401950\nCALL 0x00401cd0\nMOV EDI,EBX\nCALL 0x00401950\n'
p753
S'53\n89 fb\n85 db\n0f 85 e6 01 00 00\n31 ff\nbe 50 8c 40 00\nba 05 00 00 00\ne8 d4 fb ff ff\n48 89 c1\n48 8b 15 3a b9 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 b5 fd ff ff\n31 ff\nbe f3 8c 40 00\nba 05 00 00 00\ne8 a4 fb ff ff\n48 8b 35 a5 b7 20 00\n48 89 c7\ne8 85 fc ff ff\ne8 e0 01 00 00\n31 ff\nbe a9 8d 40 00\nba 05 00 00 00\ne8 7f fb ff ff\n48 8b 35 80 b7 20 00\n48 89 c7\ne8 60 fc ff ff\ne8 eb 01 00 00\n31 ff\nbe 30 8f 40 00\nba 05 00 00 00\ne8 5a fb ff ff\n48 8b 35 5b b7 20 00\n48 89 c7\ne8 3b fc ff ff\n31 ff\nbe 4f 90 40 00\nba 05 00 00 00\ne8 3a fb ff ff\n48 8b 35 3b b7 20 00\n48 89 c7\ne8 1b fc ff ff\n31 ff\nbe 77 92 40 00\nba 05 00 00 00\ne8 1a fb ff ff\n48 8b 35 1b b7 20 00\n48 89 c7\ne8 fb fb ff ff\n31 ff\nbe a4 92 40 00\nba 05 00 00 00\ne8 fa fa ff ff\n48 8b 35 fb b6 20 00\n48 89 c7\ne8 db fb ff ff\n31 ff\nbe da 92 40 00\nba 05 00 00 00\ne8 da fa ff ff\n48 8b 35 db b6 20 00\n48 89 c7\ne8 bb fb ff ff\n31 ff\nbe 15 94 40 00\nba 05 00 00 00\ne8 ba fa ff ff\n48 8b 35 bb b6 20 00\n48 89 c7\ne8 9b fb ff ff\n31 ff\nbe 27 95 40 00\nba 05 00 00 00\ne8 9a fa ff ff\n48 8b 35 9b b6 20 00\n48 89 c7\ne8 7b fb ff ff\n31 ff\nbe cd 95 40 00\nba 05 00 00 00\ne8 7a fa ff ff\n48 8b 35 7b b6 20 00\n48 89 c7\ne8 5b fb ff ff\n31 ff\nbe c8 96 40 00\nba 05 00 00 00\ne8 5a fa ff ff\n48 8b 35 5b b6 20 00\n48 89 c7\ne8 3b fb ff ff\n31 ff\nbe bc 97 40 00\nba 05 00 00 00\ne8 3a fa ff ff\n48 8b 35 3b b6 20 00\n48 89 c7\ne8 1b fb ff ff\n31 ff\nbe 1a 98 40 00\nba 05 00 00 00\ne8 1a fa ff ff\n48 8b 35 1b b6 20 00\n48 89 c7\ne8 fb fa ff ff\ne8 b6 00 00 00\n89 df\ne8 8f fc ff ff\ne8 0a 00 00 00\n89 df\ne8 83 fc ff ff\n'
p754
S'.text:0000000000401ad0\n.text:0000000000401ad1\n.text:0000000000401ad3\n.text:0000000000401ad5\n.text:0000000000401adb\n.text:0000000000401add\n.text:0000000000401ae2\n.text:0000000000401ae7\n.text:0000000000401aec\n.text:0000000000401aef\n.text:0000000000401af6\n.text:0000000000401afb\n.text:0000000000401afd\n.text:0000000000401b00\n.text:0000000000401b03\n.text:0000000000401b06\n.text:0000000000401b0b\n.text:0000000000401b0d\n.text:0000000000401b12\n.text:0000000000401b17\n.text:0000000000401b1c\n.text:0000000000401b23\n.text:0000000000401b26\n.text:0000000000401b2b\n.text:0000000000401b30\n.text:0000000000401b32\n.text:0000000000401b37\n.text:0000000000401b3c\n.text:0000000000401b41\n.text:0000000000401b48\n.text:0000000000401b4b\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b57\n.text:0000000000401b5c\n.text:0000000000401b61\n.text:0000000000401b66\n.text:0000000000401b6d\n.text:0000000000401b70\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b7c\n.text:0000000000401b81\n.text:0000000000401b86\n.text:0000000000401b8d\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b97\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba6\n.text:0000000000401bad\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcd\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bd7\n.text:0000000000401bdc\n.text:0000000000401be1\n.text:0000000000401be6\n.text:0000000000401bed\n.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bf7\n.text:0000000000401bfc\n.text:0000000000401c01\n.text:0000000000401c06\n.text:0000000000401c0d\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c17\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c2d\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c37\n.text:0000000000401c3c\n.text:0000000000401c41\n.text:0000000000401c46\n.text:0000000000401c4d\n.text:0000000000401c50\n.text:0000000000401c55\n.text:0000000000401c57\n.text:0000000000401c5c\n.text:0000000000401c61\n.text:0000000000401c66\n.text:0000000000401c6d\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c77\n.text:0000000000401c7c\n.text:0000000000401c81\n.text:0000000000401c86\n.text:0000000000401c8d\n.text:0000000000401c90\n.text:0000000000401c95\n.text:0000000000401c97\n.text:0000000000401c9c\n.text:0000000000401ca1\n.text:0000000000401ca6\n.text:0000000000401cad\n.text:0000000000401cb0\n.text:0000000000401cb5\n.text:0000000000401cba\n.text:0000000000401cbc\n.text:0000000000401cc1\n.text:0000000000401cc6\n.text:0000000000401cc8\n'
p755
tp756
sS'quoting_options_from_style'
p757
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p758
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p759
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004061ad\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004015e0\n'
p760
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e b4 ff ff\n'
p761
S'.text:0000000000406160\n.text:0000000000406164\n.text:0000000000406167\n.text:000000000040616c\n.text:0000000000406171\n.text:0000000000406175\n.text:000000000040617d\n.text:0000000000406180\n.text:0000000000406182\n.text:0000000000406184\n.text:0000000000406188\n.text:000000000040618b\n.text:000000000040618f\n.text:0000000000406194\n.text:0000000000406199\n.text:000000000040619d\n.text:00000000004061a1\n.text:00000000004061a5\n.text:00000000004061a8\n.text:00000000004061ac\n.text:00000000004061ad\n'
p762
tp763
sS'gcd'
p764
(S'\n__stdcall gcd(size_t u, size_t v)\n'
p765
V\u000asize_t gcd(size_t u,size_t v)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  do {\u000a    uVar1 = v;\u000a    v = u % uVar1;\u000a    u = uVar1;\u000a  } while (v != 0);\u000a  return uVar1;\u000a}\u000a\u000a
p766
S'MOV RDX,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RDI\nMOV RDI,RDX\nXOR EDX,EDX\nDIV RDI\nTEST RDX,RDX\nJNZ 0x004043d0\nMOV RAX,RDI\nRET\n'
p767
S'48 89 f2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 f8\n48 89 d7\n31 d2\n48 f7 f7\n48 85 d2\n75 f0\n48 89 f8\nc3\n'
p768
S'.text:00000000004043c0\n.text:00000000004043c3\n.text:00000000004043d0\n.text:00000000004043d3\n.text:00000000004043d6\n.text:00000000004043d8\n.text:00000000004043db\n.text:00000000004043de\n.text:00000000004043e0\n.text:00000000004043e3\n'
p769
tp770
sS'read_block'
p771
(S'\n__stdcall read_block(size_t n, char * block, size_t * n_bytes_in_buffer)\n'
p772
V\u000a_Bool read_block(size_t n,char *block,size_t *n_bytes_in_buffer)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  byte bVar4;\u000a  size_t __n;\u000a  \u000a  if (bytes_per_block <= n - 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 < n && n <= bytes_per_block","src/od.c",0x50a,\u000a                  "_Bool read_block(size_t, char *, size_t *)");\u000a  }\u000a  *n_bytes_in_buffer = 0;\u000a  if (in_stream == (FILE *)0x0) {\u000a    bVar4 = 1;\u000a  }\u000a  else {\u000a    bVar4 = 1;\u000a    do {\u000a      __n = n - *n_bytes_in_buffer;\u000a      sVar3 = fread_unlocked(block + *n_bytes_in_buffer,1,__n,(FILE *)in_stream);\u000a      *n_bytes_in_buffer = *n_bytes_in_buffer + sVar3;\u000a      if (sVar3 == __n) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      __errno_location();\u000a      _Var1 = check_and_close();\u000a      _Var2 = open_next_file();\u000a      bVar4 = _Var2 & _Var1 & bVar4;\u000a    } while (in_stream != (FILE *)0x0);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nMOV R15,RDI\nLEA RAX,[R15 + -0x1]\nCMP RAX,qword ptr [0x0060d400]\nJNC 0x004044f7\nMOV qword ptr [R12],0x0\nCMP qword ptr [0x0060d3f0],0x0\nJZ 0x004044e1\nMOV BL,0x1\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [R12]\nMOV R13,R15\nSUB R13,RDI\nADD RDI,R14\nMOV RCX,qword ptr [0x0060d3f0]\nMOV ESI,0x1\nMOV RDX,R13\nCALL 0x00401680\nADD qword ptr [R12],RAX\nCMP RAX,R13\nJZ 0x004044e3\nCALL 0x004015f0\nMOV EDI,dword ptr [RAX]\nCALL 0x00404270\nMOV EBP,EAX\nAND BPL,BL\nCALL 0x00402b30\nMOV EBX,EAX\nAND BL,BPL\nCMP qword ptr [0x0060d3f0],0x0\nJNZ 0x00404490\nJMP 0x004044e3\nMOV BL,0x1\nAND BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x409f0d\nMOV ESI,0x409c9b\nMOV EDX,0x50a\nMOV ECX,0x409f2b\nCALL 0x00401740\n'
p774
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d4\n49 89 f6\n49 89 ff\n49 8d 47 ff\n48 3b 05 91 8f 20 00\n0f 83 82 00 00 00\n49 c7 04 24 00 00 00 00\n48 83 3d 6b 8f 20 00 00\n74 5a\nb3 01\n0f 1f 80 00 00 00 00\n49 8b 3c 24\n4d 89 fd\n49 29 fd\n4c 01 f7\n48 8b 0d 4c 8f 20 00\nbe 01 00 00 00\n4c 89 ea\ne8 cf d1 ff ff\n49 01 04 24\n4c 39 e8\n74 29\ne8 31 d1 ff ff\n8b 38\ne8 aa fd ff ff\n89 c5\n40 20 dd\ne8 60 e6 ff ff\n89 c3\n40 20 eb\n48 83 3d 13 8f 20 00 00\n75 b1\neb 02\nb3 01\n80 e3 01\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 0d 9f 40 00\nbe 9b 9c 40 00\nba 0a 05 00 00\nb9 2b 9f 40 00\ne8 30 d2 ff ff\n'
p775
S'.text:0000000000404450\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404455\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445a\n.text:000000000040445b\n.text:000000000040445e\n.text:0000000000404461\n.text:0000000000404464\n.text:0000000000404468\n.text:000000000040446f\n.text:0000000000404475\n.text:000000000040447d\n.text:0000000000404485\n.text:0000000000404487\n.text:0000000000404489\n.text:0000000000404490\n.text:0000000000404494\n.text:0000000000404497\n.text:000000000040449a\n.text:000000000040449d\n.text:00000000004044a4\n.text:00000000004044a9\n.text:00000000004044ac\n.text:00000000004044b1\n.text:00000000004044b5\n.text:00000000004044b8\n.text:00000000004044ba\n.text:00000000004044bf\n.text:00000000004044c1\n.text:00000000004044c6\n.text:00000000004044c8\n.text:00000000004044cb\n.text:00000000004044d0\n.text:00000000004044d2\n.text:00000000004044d5\n.text:00000000004044dd\n.text:00000000004044df\n.text:00000000004044e1\n.text:00000000004044e3\n.text:00000000004044e6\n.text:00000000004044e8\n.text:00000000004044ec\n.text:00000000004044ed\n.text:00000000004044ef\n.text:00000000004044f1\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044f6\n.text:00000000004044f7\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404506\n.text:000000000040450b\n'
p776
tp777
sS'strcpy'
p778
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060d058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060d058]\n'
p781
S'ff 25 32 ba 20 00\n'
p782
S'.plt:0000000000401620\n'
p783
tp784
sS'format_address_none'
p785
(S'\n__stdcall format_address_none(uintmax_t address)\n'
p786
V\u000avoid format_address_none(uintmax_t address)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p787
S'RET\n'
p788
S'c3\n'
p789
S'.text:0000000000402950\n'
p790
tp791
sS'decode_one_format'
p792
(S'\n__stdcall decode_one_format(char * s_orig, char * s, char * * next, tspec * tspec)\n'
p793
V\u000a_Bool decode_one_format(char *s_orig,char *s,char **next,tspec *tspec)\u000a\u000a{\u000a  char cVar1;\u000a  size_spec sVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  code *pcVar7;\u000a  lconv *plVar8;\u000a  output_format oVar9;\u000a  undefined *puVar10;\u000a  size_spec sVar11;\u000a  uint uVar12;\u000a  ulong local_40;\u000a  char *local_38;\u000a  \u000a  if (tspec == (tspec *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("tspec != NULL","src/od.c",0x285,\u000a                                    \u000a                  "_Bool decode_one_format(const char *, const char *, const char **, struct tspec *)"\u000a                 );\u000a  }\u000a  cVar1 = *s;\u000a  switch((int)cVar1) {\u000a  case 0x61:\u000a    s = s + 1;\u000a    pcVar7 = print_named_ascii;\u000a    uVar12 = 3;\u000a    oVar9 = NAMED_CHARACTER;\u000a    sVar11 = CHAR;\u000a    break;\u000a  default:\u000a    uVar5 = dcgettext(0,"invalid character \u005c'%c\u005c' in type string %s",5);\u000a    cVar1 = *s;\u000a    pcVar6 = quote(s_orig);\u000a    error(0,0,uVar5,(ulong)(uint)(int)cVar1,pcVar6);\u000a    return false;\u000a  case 99:\u000a    s = s + 1;\u000a    pcVar7 = print_ascii;\u000a    uVar12 = 3;\u000a    oVar9 = CHARACTER;\u000a    sVar11 = CHAR;\u000a    break;\u000a  case 100:\u000a  case 0x6f:\u000a  case 0x75:\u000a  case 0x78:\u000a    switch(s[1]) {\u000a    case 'C':\u000a      local_40 = 1;\u000a      break;\u000a    default:\u000a      s = s + 1;\u000a      _Var3 = simple_strtoul(s,&local_38,&local_40);\u000a      if (_Var3 == false) {\u000aLAB_00403845:\u000a        uVar5 = dcgettext(0,"invalid type string %s",5);\u000a        pcVar6 = quote(s_orig);\u000a        error(0,0,uVar5,pcVar6);\u000a        return false;\u000a      }\u000a      if (local_38 == s) {\u000a        local_40 = 4;\u000a      }\u000a      else {\u000a        if ((8 < local_40) || (s = local_38, integral_type_size[local_40] == NO_SIZE)) {\u000a          pcVar6 = "invalid type string %s;\u005cnthis system doesn\u005c't provide a %lu-byte integral type";\u000aLAB_00403815:\u000a          uVar5 = dcgettext(0,pcVar6,5);\u000a          pcVar6 = quote(s_orig);\u000a          error(0,0,uVar5,pcVar6,local_40);\u000a          return false;\u000a        }\u000a      }\u000a      goto LAB_00403581;\u000a    case 'I':\u000a      local_40 = 4;\u000a      break;\u000a    case 'L':\u000a      local_40 = 8;\u000a      break;\u000a    case 'S':\u000a      local_40 = 2;\u000a    }\u000a    s = s + 2;\u000aLAB_00403581:\u000a    sVar2 = integral_type_size[local_40];\u000a    switch((int)cVar1) {\u000a    case 100:\u000a      uVar12 = bytes_to_signed_dec_digits[local_40];\u000a      puVar10 = (undefined *)0x409a31;\u000a      if ((sVar2 | 1) == 5) {\u000a        puVar10 = &DAT_00409da2;\u000a      }\u000a      oVar9 = SIGNED_DECIMAL;\u000a      goto LAB_0040363b;\u000a    default:\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    case 0x6f:\u000a      uVar12 = bytes_to_oct_digits[local_40];\u000a      puVar10 = &DAT_00409e8a;\u000a      if ((sVar2 | 1) == 5) {\u000a        puVar10 = &DAT_00409dae;\u000a      }\u000a      __sprintf_chk(tspec->fmt_string,1,8,"%%*.%d%s",(ulong)uVar12,puVar10);\u000a      oVar9 = OCTAL;\u000a      break;\u000a    case 0x75:\u000a      uVar12 = bytes_to_unsigned_dec_digits[local_40];\u000a      puVar10 = &DAT_00409db2;\u000a      if ((sVar2 | 1) == 5) {\u000a        puVar10 = &DAT_00409db1;\u000a      }\u000a      oVar9 = UNSIGNED_DECIMAL;\u000aLAB_0040363b:\u000a      __sprintf_chk(tspec->fmt_string,1,8,"%%*%s",puVar10);\u000a      break;\u000a    case 0x78:\u000a      uVar12 = bytes_to_hex_digits[local_40];\u000a      puVar10 = (undefined *)0x409c4c;\u000a      if ((sVar2 | 1) == 5) {\u000a        puVar10 = &DAT_00409db4;\u000a      }\u000a      __sprintf_chk(tspec->fmt_string,1,8,"%%*.%d%s",(ulong)uVar12,puVar10);\u000a      oVar9 = HEXADECIMAL;\u000a    }\u000a    _iVar4 = strlen(tspec->fmt_string);\u000a    if (7 < _iVar4) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED","src/od.c",0x2e8,\u000a                                        \u000a                    "_Bool decode_one_format(const char *, const char *, const char **, struct tspec *)"\u000a                   );\u000a    }\u000a    if (4 < sVar2 + ~NO_SIZE) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    pcVar7 = print_int;\u000a    sVar11 = INT;\u000a    switch(sVar2) {\u000a    case CHAR:\u000a      pcVar7 = print_char;\u000a      if (oVar9 == SIGNED_DECIMAL) {\u000a        pcVar7 = print_s_char;\u000a      }\u000a      sVar11 = CHAR;\u000a      break;\u000a    case SHORT:\u000a      pcVar7 = print_short;\u000a      if (oVar9 == SIGNED_DECIMAL) {\u000a        pcVar7 = print_s_short;\u000a      }\u000a      sVar11 = SHORT;\u000a      break;\u000a    case LONG:\u000a      pcVar7 = print_long;\u000a      sVar11 = sVar2;\u000a      break;\u000a    case LONG_LONG:\u000a      pcVar7 = print_long_long;\u000a      sVar11 = sVar2;\u000a    }\u000a    break;\u000a  case 0x66:\u000a    cVar1 = s[1];\u000a    if (cVar1 == 'D') {\u000a      s = s + 2;\u000a      local_40 = 8;\u000a    }\u000a    else {\u000a      if (cVar1 == 'L') {\u000a        s = s + 2;\u000a        local_40 = 0x10;\u000a      }\u000a      else {\u000a        if (cVar1 == 'F') {\u000a          s = s + 2;\u000a          local_40 = 4;\u000a        }\u000a        else {\u000a          s = s + 1;\u000a          _Var3 = simple_strtoul(s,&local_38,&local_40);\u000a          if (_Var3 == false) goto LAB_00403845;\u000a          if (local_38 == s) {\u000a            local_40 = 8;\u000a          }\u000a          else {\u000a            if ((0x10 < local_40) || (s = local_38, fp_type_size[local_40] == NO_SIZE)) {\u000a              pcVar6 = \u000a              "invalid type string %s;\u005cnthis system doesn\u005c't provide a %lu-byte floating point type"\u000a              ;\u000a              goto LAB_00403815;\u000a            }\u000a          }\u000a        }\u000a      }\u000a    }\u000a    sVar11 = fp_type_size[local_40];\u000a    plVar8 = localeconv();\u000a    if (*plVar8->decimal_point == 0) {\u000a      iVar4 = 1;\u000a    }\u000a    else {\u000a      _iVar4 = strlen(plVar8->decimal_point);\u000a      iVar4 = (int)_iVar4;\u000a    }\u000a    uVar12 = sVar11 + ~LONG_LONG;\u000a    if (2 < uVar12) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    pcVar7 = (code *)(&PTR_print_float_00408bc0)[(long)(int)uVar12];\u000a    uVar12 = iVar4 + *(int *)(&DAT_00408ba0 + (long)(int)uVar12 * 8);\u000a    oVar9 = FLOATING_POINT;\u000a  }\u000a  tspec->size = sVar11;\u000a  tspec->fmt = oVar9;\u000a  tspec->print_function = pcVar7;\u000a  tspec->field_width = uVar12;\u000a  cVar1 = *s;\u000a  *(bool *)&tspec->hexl_mode_trailer = cVar1 == 'z';\u000a  if (next != (char **)0x0) {\u000a    pcVar6 = s + 1;\u000a    if (cVar1 != 'z') {\u000a      pcVar6 = s;\u000a    }\u000a    *next = pcVar6;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RCX\nMOV RBX,RSI\nMOV R15,RDI\nTEST R12,R12\nJZ 0x0040389c\nMOVSX EBP,byte ptr [RBX]\nLEA EAX,[RBP + -0x61]\nCMP EAX,0x17\nJA 0x0040346c\nJMP qword ptr [0x408518 + RAX*0x8]\nMOVSX EAX,byte ptr [RBX + 0x1]\nADD EAX,-0x43\nCMP EAX,0x10\nJA 0x004034fe\nJMP qword ptr [0x4085d8 + RAX*0x8]\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x1\nJMP 0x0040357e\nINC RBX\nMOV EAX,0x404060\nMOV R15D,0x3\nMOV R14D,0x1\nMOV EBP,0x5\nMOV R13,RBX\nJMP 0x00403785\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x409e3b\nMOV EDX,0x5\nCALL 0x004016c0\nMOV R14,RAX\nMOVSX EBP,byte ptr [RBX]\nMOV RDI,R15\nCALL 0x00406420\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV ECX,EBP\nMOV R8,RBX\nCALL 0x004018f0\nJMP 0x004037b9\nINC RBX\nMOV EAX,0x404130\nMOV R15D,0x3\nMOV R14D,0x1\nMOV EBP,0x6\nMOV R13,RBX\nJMP 0x00403785\nMOVSX EAX,byte ptr [RBX + 0x1]\nMOV RBP,RDX\nCMP EAX,0x44\nJZ 0x00403714\nCMP EAX,0x4c\nJZ 0x00403723\nCMP EAX,0x46\nJNZ 0x004037cb\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x4\nJMP 0x00403730\nMOV R14,RDX\nINC RBX\nLEA RSI,[RSP + 0x10]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004038e0\nTEST AL,AL\nJZ 0x00403845\nMOV R13,qword ptr [RSP + 0x10]\nCMP R13,RBX\nJZ 0x0040387a\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,0x8\nMOV RDX,R14\nJA 0x00403544\nCMP dword ptr [0x60d310 + RAX*0x4],0x0\nJNZ 0x00403581\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x409d4f\nJMP 0x00403815\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x4\nJMP 0x0040357e\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x8\nJMP 0x0040357e\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x2\nMOV R13,RBX\nMOV R14,RDX\nADD EBP,-0x64\nCMP EBP,0x14\nJA 0x004038b5\nMOV RAX,qword ptr [RSP + 0x8]\nMOV EBX,dword ptr [0x60d310 + RAX*0x4]\nJMP qword ptr [0x408660 + RBP*0x8]\nMOV R15D,dword ptr [0x4089d0 + RAX*0x4]\nLEA RDI,[R12 + 0x10]\nMOV EAX,EBX\nOR EAX,0x1\nCMP EAX,0x5\nMOV EAX,0x409da2\nMOV R8D,0x409a31\nCMOVZ R8,RAX\nXOR EBP,EBP\nJMP 0x0040363b\nLEA RDI,[R12 + 0x10]\nMOV R15D,dword ptr [0x408a20 + RAX*0x4]\nMOV EAX,EBX\nOR EAX,0x1\nCMP EAX,0x5\nMOV EAX,0x409dae\nMOV R9D,0x409e8a\nCMOVZ R9,RAX\nMOV ESI,0x1\nMOV EDX,0x8\nMOV ECX,0x409da5\nXOR EAX,EAX\nMOV R8D,R15D\nCALL 0x004019c0\nMOV EBP,0x2\nJMP 0x00403695\nMOV R15D,dword ptr [0x408a70 + RAX*0x4]\nLEA RDI,[R12 + 0x10]\nMOV EAX,EBX\nOR EAX,0x1\nCMP EAX,0x5\nMOV EAX,0x409db1\nMOV R8D,0x409db2\nCMOVZ R8,RAX\nMOV EBP,0x1\nMOV ESI,0x1\nMOV EDX,0x8\nMOV ECX,0x409d9c\nXOR EAX,EAX\nCALL 0x004019c0\nJMP 0x00403695\nLEA RDI,[R12 + 0x10]\nMOV R15D,dword ptr [0x408ac0 + RAX*0x4]\nMOV EAX,EBX\nOR EAX,0x1\nCMP EAX,0x5\nMOV EAX,0x409db4\nMOV R9D,0x409c4c\nCMOVZ R9,RAX\nMOV ESI,0x1\nMOV EDX,0x8\nMOV ECX,0x409da5\nXOR EAX,EAX\nMOV R8D,R15D\nCALL 0x004019c0\nMOV EBP,0x3\nLEA RDI,[R12 + 0x10]\nCALL 0x004016e0\nCMP RAX,0x8\nJNC 0x004038ba\nLEA ECX,[RBX + -0x1]\nCMP ECX,0x4\nMOV RDX,R14\nJA 0x004038d3\nMOV EAX,0x403bb0\nMOV R14D,0x3\nJMP qword ptr [0x408708 + RCX*0x8]\nTEST EBP,EBP\nMOV ECX,0x403930\nMOV EAX,0x4039c0\nCMOVZ RAX,RCX\nMOV R14D,0x1\nJMP 0x00403785\nTEST EBP,EBP\nMOV ECX,0x403a50\nMOV EAX,0x403b00\nCMOVZ RAX,RCX\nMOV R14D,0x2\nJMP 0x00403785\nMOV EAX,0x403c60\nMOV R14D,EBX\nJMP 0x00403785\nMOV EAX,0x403d10\nMOV R14D,EBX\nJMP 0x00403785\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x8\nJMP 0x00403730\nADD RBX,0x2\nMOV qword ptr [RSP + 0x8],0x10\nMOV R13,RBX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R14D,dword ptr [0x60d340 + RAX*0x4]\nCALL 0x00401670\nMOV RDI,qword ptr [RAX]\nCMP byte ptr [RDI],0x0\nJZ 0x00403757\nCALL 0x004016e0\nMOV R15,RAX\nJMP 0x0040375d\nMOV R15D,0x1\nMOV RDX,RBP\nLEA EAX,[R14 + -0x6]\nCMP EAX,0x3\nJNC 0x004038d8\nMOVSXD RCX,EAX\nMOV RAX,qword ptr [0x408bc0 + RCX*0x8]\nADD R15D,dword ptr [0x408ba0 + RCX*0x8]\nMOV EBP,0x4\nMOV dword ptr [R12 + 0x4],R14D\nMOV dword ptr [R12],EBP\nMOV qword ptr [R12 + 0x8],RAX\nMOV dword ptr [R12 + 0x1c],R15D\nMOV AL,byte ptr [R13]\nCMP AL,0x7a\nSETZ byte ptr [R12 + 0x18]\nMOV R12B,0x1\nTEST RDX,RDX\nJZ 0x004037b9\nLEA RCX,[R13 + 0x1]\nCMP AL,0x7a\nCMOVNZ RCX,R13\nMOV qword ptr [RDX],RCX\nMOV EAX,R12D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nINC RBX\nLEA RSI,[RSP + 0x10]\nLEA RDX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004038e0\nTEST AL,AL\nJZ 0x00403845\nMOV R13,qword ptr [RSP + 0x10]\nCMP R13,RBX\nJZ 0x0040388e\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,0x10\nJA 0x0040380b\nCMP dword ptr [0x60d340 + RAX*0x4],0x0\nJNZ 0x00403733\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x409de8\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00406420\nMOV RCX,RAX\nMOV R8,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004018f0\nJMP 0x004037b9\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x409d38\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00406420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004018f0\nJMP 0x004037b9\nMOV qword ptr [RSP + 0x8],0x4\nMOV R13,RBX\nMOV RDX,R14\nJMP 0x00403581\nMOV qword ptr [RSP + 0x8],0x8\nJMP 0x00403730\nMOV EDI,0x409cd7\nMOV ESI,0x409c9b\nMOV EDX,0x285\nMOV ECX,0x409ce5\nCALL 0x00401740\nCALL 0x004015e0\nMOV EDI,0x409db7\nMOV ESI,0x409c9b\nMOV EDX,0x2e8\nMOV ECX,0x409ce5\nCALL 0x00401740\nCALL 0x004015e0\nCALL 0x004015e0\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 cc\n48 89 f3\n49 89 ff\n4d 85 e4\n0f 84 8c 04 00 00\n0f be 2b\n8d 45 9f\n83 f8 17\n77 51\nff 24 c5 18 85 40 00\n0f be 43 01\n83 c0 bd\n83 f8 10\n0f 87 cc 00 00 00\nff 24 c5 d8 85 40 00\n48 83 c3 02\n48 c7 44 24 08 01 00 00 00\ne9 33 01 00 00\n48 ff c3\nb8 60 40 40 00\n41 bf 03 00 00 00\n41 be 01 00 00 00\nbd 05 00 00 00\n49 89 dd\ne9 19 03 00 00\n45 31 e4\n31 ff\nbe 3b 9e 40 00\nba 05 00 00 00\ne8 40 e2 ff ff\n49 89 c6\n0f be 2b\n4c 89 ff\ne8 92 2f 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n89 e9\n49 89 d8\ne8 4c e4 ff ff\ne9 10 03 00 00\n48 ff c3\nb8 30 41 40 00\n41 bf 03 00 00 00\n41 be 01 00 00 00\nbd 06 00 00 00\n49 89 dd\ne9 bb 02 00 00\n0f be 43 01\n48 89 d5\n83 f8 44\n0f 84 3a 02 00 00\n83 f8 4c\n0f 84 40 02 00 00\n83 f8 46\n0f 85 df 02 00 00\n48 83 c3 02\n48 c7 44 24 08 04 00 00 00\ne9 32 02 00 00\n49 89 d6\n48 ff c3\n48 8d 74 24 10\n48 8d 54 24 08\n48 89 df\ne8 ca 03 00 00\n84 c0\n0f 84 27 03 00 00\n4c 8b 6c 24 10\n49 39 dd\n0f 84 4e 03 00 00\n48 8b 44 24 08\n48 83 f8 08\n4c 89 f2\n77 0a\n83 3c 85 10 d3 60 00 00\n75 3d\n45 31 e4\n31 ff\nbe 4f 9d 40 00\ne9 c2 02 00 00\n48 83 c3 02\n48 c7 44 24 08 04 00 00 00\neb 1c\n48 83 c3 02\n48 c7 44 24 08 08 00 00 00\neb 0d\n48 83 c3 02\n48 c7 44 24 08 02 00 00 00\n49 89 dd\n49 89 d6\n83 c5 9c\n83 fd 14\n0f 87 25 03 00 00\n48 8b 44 24 08\n8b 1c 85 10 d3 60 00\nff 24 ed 60 86 40 00\n44 8b 3c 85 d0 89 40 00\n49 8d 7c 24 10\n89 d8\n83 c8 01\n83 f8 05\nb8 a2 9d 40 00\n41 b8 31 9a 40 00\n4c 0f 44 c0\n31 ed\neb 70\n49 8d 7c 24 10\n44 8b 3c 85 20 8a 40 00\n89 d8\n83 c8 01\n83 f8 05\nb8 ae 9d 40 00\n41 b9 8a 9e 40 00\n4c 0f 44 c8\nbe 01 00 00 00\nba 08 00 00 00\nb9 a5 9d 40 00\n31 c0\n45 89 f8\ne8 b8 e3 ff ff\nbd 02 00 00 00\ne9 83 00 00 00\n44 8b 3c 85 70 8a 40 00\n49 8d 7c 24 10\n89 d8\n83 c8 01\n83 f8 05\nb8 b1 9d 40 00\n41 b8 b2 9d 40 00\n4c 0f 44 c0\nbd 01 00 00 00\nbe 01 00 00 00\nba 08 00 00 00\nb9 9c 9d 40 00\n31 c0\ne8 6f e3 ff ff\neb 42\n49 8d 7c 24 10\n44 8b 3c 85 c0 8a 40 00\n89 d8\n83 c8 01\n83 f8 05\nb8 b4 9d 40 00\n41 b9 4c 9c 40 00\n4c 0f 44 c8\nbe 01 00 00 00\nba 08 00 00 00\nb9 a5 9d 40 00\n31 c0\n45 89 f8\ne8 30 e3 ff ff\nbd 03 00 00 00\n49 8d 7c 24 10\ne8 41 e0 ff ff\n48 83 f8 08\n0f 83 11 02 00 00\n8d 4b ff\n83 f9 04\n4c 89 f2\n0f 87 1b 02 00 00\nb8 b0 3b 40 00\n41 be 03 00 00 00\nff 24 cd 08 87 40 00\n85 ed\nb9 30 39 40 00\nb8 c0 39 40 00\n48 0f 44 c1\n41 be 01 00 00 00\ne9 a0 00 00 00\n85 ed\nb9 50 3a 40 00\nb8 00 3b 40 00\n48 0f 44 c1\n41 be 02 00 00 00\ne9 85 00 00 00\nb8 60 3c 40 00\n41 89 de\neb 7b\nb8 10 3d 40 00\n41 89 de\neb 71\n48 83 c3 02\n48 c7 44 24 08 08 00 00 00\neb 0d\n48 83 c3 02\n48 c7 44 24 08 10 00 00 00\n49 89 dd\n48 8b 44 24 08\n44 8b 34 85 40 d3 60 00\ne8 2b df ff ff\n48 8b 38\n80 3f 00\n74 0a\ne8 8e df ff ff\n49 89 c7\neb 06\n41 bf 01 00 00 00\n48 89 ea\n41 8d 46 fa\n83 f8 03\n0f 83 6b 01 00 00\n48 63 c8\n48 8b 04 cd c0 8b 40 00\n44 03 3c cd a0 8b 40 00\nbd 04 00 00 00\n45 89 74 24 04\n41 89 2c 24\n49 89 44 24 08\n45 89 7c 24 1c\n41 8a 45 00\n3c 7a\n41 0f 94 44 24 18\n41 b4 01\n48 85 d2\n74 0d\n49 8d 4d 01\n3c 7a\n49 0f 45 cd\n48 89 0a\n44 89 e0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 ff c3\n48 8d 74 24 10\n48 8d 54 24 08\n48 89 df\ne8 00 01 00 00\n84 c0\n74 61\n4c 8b 6c 24 10\n49 39 dd\n0f 84 9c 00 00 00\n48 8b 44 24 08\n48 83 f8 10\n77 0e\n83 3c 85 40 d3 60 00 00\n0f 85 28 ff ff ff\n45 31 e4\n31 ff\nbe e8 9d 40 00\nba 05 00 00 00\ne8 a1 de ff ff\n48 89 c3\n4c 89 ff\ne8 f6 2b 00 00\n48 89 c1\n4c 8b 44 24 08\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 b0 e0 ff ff\ne9 74 ff ff ff\n45 31 e4\n31 ff\nbe 38 9d 40 00\nba 05 00 00 00\ne8 67 de ff ff\n48 89 c3\n4c 89 ff\ne8 bc 2b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 7b e0 ff ff\ne9 3f ff ff ff\n48 c7 44 24 08 04 00 00 00\n49 89 dd\n4c 89 f2\ne9 f3 fc ff ff\n48 c7 44 24 08 08 00 00 00\ne9 94 fe ff ff\nbf d7 9c 40 00\nbe 9b 9c 40 00\nba 85 02 00 00\nb9 e5 9c 40 00\ne8 8b de ff ff\ne8 26 dd ff ff\nbf b7 9d 40 00\nbe 9b 9c 40 00\nba e8 02 00 00\nb9 e5 9c 40 00\ne8 6d de ff ff\ne8 08 dd ff ff\ne8 03 dd ff ff\n'
p796
S'.text:00000000004033f0\n.text:00000000004033f1\n.text:00000000004033f3\n.text:00000000004033f5\n.text:00000000004033f7\n.text:00000000004033f9\n.text:00000000004033fa\n.text:00000000004033fe\n.text:0000000000403401\n.text:0000000000403404\n.text:0000000000403407\n.text:000000000040340a\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403416\n.text:0000000000403419\n.text:000000000040341b\n.text:0000000000403422\n.text:0000000000403426\n.text:0000000000403429\n.text:000000000040342c\n.text:0000000000403432\n.text:0000000000403439\n.text:000000000040343d\n.text:0000000000403446\n.text:000000000040344b\n.text:000000000040344e\n.text:0000000000403453\n.text:0000000000403459\n.text:000000000040345f\n.text:0000000000403464\n.text:0000000000403467\n.text:000000000040346c\n.text:000000000040346f\n.text:0000000000403471\n.text:0000000000403476\n.text:000000000040347b\n.text:0000000000403480\n.text:0000000000403483\n.text:0000000000403486\n.text:0000000000403489\n.text:000000000040348e\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403495\n.text:0000000000403497\n.text:000000000040349a\n.text:000000000040349c\n.text:000000000040349f\n.text:00000000004034a4\n.text:00000000004034a9\n.text:00000000004034ac\n.text:00000000004034b1\n.text:00000000004034b7\n.text:00000000004034bd\n.text:00000000004034c2\n.text:00000000004034c5\n.text:00000000004034ca\n.text:00000000004034ce\n.text:00000000004034d1\n.text:00000000004034d4\n.text:00000000004034da\n.text:00000000004034dd\n.text:00000000004034e3\n.text:00000000004034e6\n.text:00000000004034ec\n.text:00000000004034f0\n.text:00000000004034f9\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403504\n.text:0000000000403509\n.text:000000000040350e\n.text:0000000000403511\n.text:0000000000403516\n.text:0000000000403518\n.text:000000000040351e\n.text:0000000000403523\n.text:0000000000403526\n.text:000000000040352c\n.text:0000000000403531\n.text:0000000000403535\n.text:0000000000403538\n.text:000000000040353a\n.text:0000000000403542\n.text:0000000000403544\n.text:0000000000403547\n.text:0000000000403549\n.text:000000000040354e\n.text:0000000000403553\n.text:0000000000403557\n.text:0000000000403560\n.text:0000000000403562\n.text:0000000000403566\n.text:000000000040356f\n.text:0000000000403571\n.text:0000000000403575\n.text:000000000040357e\n.text:0000000000403581\n.text:0000000000403584\n.text:0000000000403587\n.text:000000000040358a\n.text:0000000000403590\n.text:0000000000403595\n.text:000000000040359c\n.text:00000000004035a3\n.text:00000000004035ab\n.text:00000000004035b0\n.text:00000000004035b2\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035bd\n.text:00000000004035c3\n.text:00000000004035c7\n.text:00000000004035c9\n.text:00000000004035cb\n.text:00000000004035d0\n.text:00000000004035d8\n.text:00000000004035da\n.text:00000000004035dd\n.text:00000000004035e0\n.text:00000000004035e5\n.text:00000000004035eb\n.text:00000000004035ef\n.text:00000000004035f4\n.text:00000000004035f9\n.text:00000000004035fe\n.text:0000000000403600\n.text:0000000000403603\n.text:0000000000403608\n.text:000000000040360d\n.text:0000000000403612\n.text:000000000040361a\n.text:000000000040361f\n.text:0000000000403621\n.text:0000000000403624\n.text:0000000000403627\n.text:000000000040362c\n.text:0000000000403632\n.text:0000000000403636\n.text:000000000040363b\n.text:0000000000403640\n.text:0000000000403645\n.text:000000000040364a\n.text:000000000040364c\n.text:0000000000403651\n.text:0000000000403653\n.text:0000000000403658\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403665\n.text:0000000000403668\n.text:000000000040366d\n.text:0000000000403673\n.text:0000000000403677\n.text:000000000040367c\n.text:0000000000403681\n.text:0000000000403686\n.text:0000000000403688\n.text:000000000040368b\n.text:0000000000403690\n.text:0000000000403695\n.text:000000000040369a\n.text:000000000040369f\n.text:00000000004036a3\n.text:00000000004036a9\n.text:00000000004036ac\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b8\n.text:00000000004036bd\n.text:00000000004036c3\n.text:00000000004036ca\n.text:00000000004036cc\n.text:00000000004036d1\n.text:00000000004036d6\n.text:00000000004036da\n.text:00000000004036e0\n.text:00000000004036e5\n.text:00000000004036e7\n.text:00000000004036ec\n.text:00000000004036f1\n.text:00000000004036f5\n.text:00000000004036fb\n.text:0000000000403700\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370a\n.text:000000000040370f\n.text:0000000000403712\n.text:0000000000403714\n.text:0000000000403718\n.text:0000000000403721\n.text:0000000000403723\n.text:0000000000403727\n.text:0000000000403730\n.text:0000000000403733\n.text:0000000000403738\n.text:0000000000403740\n.text:0000000000403745\n.text:0000000000403748\n.text:000000000040374b\n.text:000000000040374d\n.text:0000000000403752\n.text:0000000000403755\n.text:0000000000403757\n.text:000000000040375d\n.text:0000000000403760\n.text:0000000000403764\n.text:0000000000403767\n.text:000000000040376d\n.text:0000000000403770\n.text:0000000000403778\n.text:0000000000403780\n.text:0000000000403785\n.text:000000000040378a\n.text:000000000040378e\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379c\n.text:000000000040379e\n.text:00000000004037a4\n.text:00000000004037a7\n.text:00000000004037aa\n.text:00000000004037ac\n.text:00000000004037b0\n.text:00000000004037b2\n.text:00000000004037b6\n.text:00000000004037b9\n.text:00000000004037bc\n.text:00000000004037c0\n.text:00000000004037c1\n.text:00000000004037c3\n.text:00000000004037c5\n.text:00000000004037c7\n.text:00000000004037c9\n.text:00000000004037ca\n.text:00000000004037cb\n.text:00000000004037ce\n.text:00000000004037d3\n.text:00000000004037d8\n.text:00000000004037db\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037e9\n.text:00000000004037ec\n.text:00000000004037f2\n.text:00000000004037f7\n.text:00000000004037fb\n.text:00000000004037fd\n.text:0000000000403805\n.text:000000000040380b\n.text:000000000040380e\n.text:0000000000403810\n.text:0000000000403815\n.text:000000000040381a\n.text:000000000040381f\n.text:0000000000403822\n.text:0000000000403825\n.text:000000000040382a\n.text:000000000040382d\n.text:0000000000403832\n.text:0000000000403834\n.text:0000000000403836\n.text:0000000000403838\n.text:000000000040383b\n.text:0000000000403840\n.text:0000000000403845\n.text:0000000000403848\n.text:000000000040384a\n.text:000000000040384f\n.text:0000000000403854\n.text:0000000000403859\n.text:000000000040385c\n.text:000000000040385f\n.text:0000000000403864\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386b\n.text:000000000040386d\n.text:0000000000403870\n.text:0000000000403875\n.text:000000000040387a\n.text:0000000000403883\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388e\n.text:0000000000403897\n.text:000000000040389c\n.text:00000000004038a1\n.text:00000000004038a6\n.text:00000000004038ab\n.text:00000000004038b0\n.text:00000000004038b5\n.text:00000000004038ba\n.text:00000000004038bf\n.text:00000000004038c4\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d8\n'
p797
tp798
sS'xfprintf'
p799
(S'\n__stdcall xfprintf(FILE * stream, char * format)\n'
p800
V\u000aint xfprintf(FILE *stream,char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  int iVar1;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [16];\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &args[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x10;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  iVar1 = xvfprintf(stream,format,&local_d8);\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407062\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOV RDX,RSP\nCALL 0x004070b0\nADD RSP,0xd8\nRET\n'
p802
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 89 e2\ne8 0c 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p803
S'.text:0000000000407020\n.text:0000000000407027\n.text:0000000000407029\n.text:000000000040702b\n.text:0000000000407030\n.text:0000000000407035\n.text:000000000040703a\n.text:0000000000407042\n.text:000000000040704a\n.text:0000000000407052\n.text:000000000040705a\n.text:0000000000407062\n.text:0000000000407067\n.text:000000000040706c\n.text:0000000000407071\n.text:0000000000407076\n.text:000000000040707b\n.text:0000000000407080\n.text:0000000000407088\n.text:000000000040708d\n.text:0000000000407095\n.text:000000000040709c\n.text:000000000040709f\n.text:00000000004070a4\n.text:00000000004070ab\n'
p804
tp805
sS'c_isgraph'
p806
(S'\n__stdcall c_isgraph()\n'
p807
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p808
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p809
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p810
S'.text:00000000004076d0\n.text:00000000004076d3\n.text:00000000004076d6\n.text:00000000004076d9\n'
p811
tp812
sS'quotearg_buffer_restyled'
p813
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p814
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004051dc_caseD_7;\u000a  case 2:\u000a    goto switchD_004051dc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004051dc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004051dc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004051dc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004051dc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004051dc_caseD_7;\u000aswitchD_004051dc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004051dc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004051dc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00405ca0;\u000aLAB_004053c0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00405ca9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00405cb8:\u000a      left_quote_00 = &DAT_00000004;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004053cb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040540f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040540f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00405cb8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00405be5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00405af0;\u000a    }\u000a    goto LAB_00405cb8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00405c1a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00405cb8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00405c49;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00405708;\u000a  case '\u005ca':\u000a    goto joined_r0x004055f8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004055f8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00405426_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004055f8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004055f8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00405426_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004055f8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00405b5e;\u000a    }\u000a    goto LAB_00405cb8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00405cb8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00405cb8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00405cb8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00405cb8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00405cb8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00405426_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00405bb6;\u000a      goto joined_r0x00405ba8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004056b1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00405ba8;\u000a      goto LAB_00405bb6;\u000a    }\u000a    goto LAB_00405cb8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00405cb8;\u000a  }\u000a  goto joined_r0x00405af0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00405c1a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00405c49;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00405c49:\u000a  if (1 < uVar10) {\u000aLAB_00405726:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004057e2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004056b1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004057e2:\u000a        if (bVar6 != 0) goto LAB_00405cb8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00405708:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00405726;\u000ajoined_r0x00405af0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00405af0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00405b17;\u000aLAB_00405b50:\u000a    if (bVar22) goto LAB_00405b55;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00405b50;\u000aLAB_00405b17:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00405b55:\u000a      if (bVar6 != 0) goto LAB_00405cb8;\u000aLAB_00405b5e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00405ba8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00405bb6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00405ba8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00405be5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004053c0;\u000aLAB_00405ca0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00405ca9;\u000a  goto LAB_004053cb;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004016d0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00405d85\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40a070 + RAX*0x8]\nMOV EDI,0x40a596\nMOV ESI,R15D\nCALL 0x00406430\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40a96c\nMOV ESI,R15D\nCALL 0x00406430\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040523d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00405240\nNOP\nCMP R12,RSI\nJNC 0x0040522e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00405220\nJMP 0x00405240\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004016e0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040530c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040530c\nMOV ECX,0x40a594\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00405306\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004052a7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004052d4\nTEST RSI,RSI\nJZ 0x004052c1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40a96c\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004052e2\nMOV ECX,0x40a96c\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040530c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00405d5c\nMOV ECX,0x40a594\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00405ca0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00405ca9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040540f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040540a\nCMP R11,-0x1\nJNZ 0x0040540a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004016e0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00405460\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004056bc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40a0c8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00405cb8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00405b10\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00405b17\nJMP 0x00405b50\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004017a0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004054ad\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00405411\nJMP 0x00405cb8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00405411\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040543b\nCMP EBX,0x2\nJNZ 0x0040543b\nTEST R13,R13\nJNZ 0x0040543b\nJMP 0x00405cb8\nCMP R11,-0x1\nJZ 0x00405893\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004058b3\nJMP 0x0040543b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004058c4\nTEST R8B,R8B\nJNZ 0x00405cb8\nCMP EBX,0x2\nJNZ 0x00405568\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405568\nCMP R12,RSI\nJNC 0x00405543\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405552\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405561\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405572\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00405a38\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00405a38\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00405a38\nCMP RCX,RSI\nJNC 0x004055ac\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004055bb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nJMP 0x00405b10\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405439\nJMP 0x0040561a\nMOV DL,0x74\nJMP 0x00405602\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405439\nJMP 0x0040561a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405439\nJMP 0x0040561a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00405cb8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405439\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00405b5e\nJMP 0x00405cb8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00405439\nTEST R8B,R8B\nJNZ 0x00405cb8\nCMP R12,RSI\nJNC 0x0040564a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405659\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405668\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00405439\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00405a4b\nCMP EBX,0x2\nJNZ 0x00405439\nTEST R8B,R8B\nJZ 0x00405439\nJMP 0x00405cb8\nCMP EBX,0x2\nJNZ 0x004058e4\nTEST R8B,R8B\nJNZ 0x00405cb8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00405bb6\nJMP 0x00405bd9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00405905\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004019b0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405af8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00405af8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004057e2\nJMP 0x004057b0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00405799\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00405796\nCMP R12,RSI\nJNC 0x0040577b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040578a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004057d0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004057d0\nTEST BPL,0x1\nJZ 0x00405873\nCMP R12,RSI\nJNC 0x004057c4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00405873\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004057b0\nTEST R8B,R8B\nJNZ 0x00405cb8\nCMP EBX,0x2\nJNZ 0x0040582a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040582a\nCMP R12,RSI\nJNC 0x00405802\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405811\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405820\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00405834\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040584b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405865\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00405760\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00405bb6\nJMP 0x00405bd9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040543b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040543b\nJMP 0x00405cb8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00405be5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nJMP 0x00405b10\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00405602\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00405bb6\nJMP 0x00405bd9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00405927\nMOV RDI,R10\nCALL 0x004016e0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401700\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00405bff\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00405bf7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405c06\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004059ee\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004059e6\nBT RDI,RDX\nJC 0x00405d52\nINC RCX\nCMP RCX,R14\nJC 0x004059d0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401990\nTEST EAX,EAX\nJNZ 0x00405a03\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401980\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405945\nJMP 0x00405c49\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nJMP 0x00405b10\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00405439\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00405439\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00405439\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040543b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00405c82\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00405cb8\nCMP R12,RSI\nJNC 0x00405aae\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00405ac1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405ad0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00405adf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nJMP 0x00405b10\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00405b50\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00405b55\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00405bb0\nJMP 0x00405b55\nTEST BPL,BPL\nJZ 0x00405bb0\nTEST R8B,R8B\nJNZ 0x00405cb8\nCMP EBX,0x2\nJNZ 0x00405b98\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405b98\nCMP R12,RSI\nJNC 0x00405b73\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405b82\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405b91\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405ba2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00405be2\nJMP 0x00405bde\nTEST DIL,0x1\nJZ 0x00405bd9\nAND AL,0x1\nJNZ 0x00405bd9\nCMP R12,RSI\nJNC 0x00405bc4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405bd3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00405be2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00405ca0\nJMP 0x004053c0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00405c44\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00405c3c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00405c78\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00405c1a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405c49\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00405708\nJMP 0x00405726\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405c49\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405446\nJMP 0x00405b10\nCMP R13,R11\nJNZ 0x004053cb\nTEST R8B,R8B\nJZ 0x00405d12\nCMP EBX,0x2\nJNZ 0x00405d12\nTEST R12,R12\nJNZ 0x00405d12\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00405150\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00405d46\nTEST R8B,R8B\nJNZ 0x00405d46\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00405d46\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00405d39\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00405d30\nCMP R12,RSI\nJNC 0x00405cfd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00405cfd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00405cb8\nTEST RSI,RSI\nJZ 0x00405d69\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40a594\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040530c\nCALL 0x004015e0\n'
p816
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 52 c5 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 70 a0 40 00\nbf 96 a5 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 6c a9 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 93 c4 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 94 a5 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 6c a9 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 6c a9 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 94 a5 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 f3 c2 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd c8 a0 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 c3 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 d7 c2 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 c1 bd ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 93 bd ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 99 bf ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 62 bf ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 94 a5 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 b8 ff ff\n'
p817
S'.text:0000000000405150\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405155\n.text:0000000000405157\n.text:0000000000405159\n.text:000000000040515a\n.text:0000000000405161\n.text:0000000000405164\n.text:0000000000405167\n.text:000000000040516a\n.text:000000000040516f\n.text:0000000000405174\n.text:0000000000405179\n.text:000000000040517e\n.text:0000000000405186\n.text:000000000040518a\n.text:0000000000405190\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a5\n.text:00000000004051aa\n.text:00000000004051ae\n.text:00000000004051b0\n.text:00000000004051b3\n.text:00000000004051b6\n.text:00000000004051b9\n.text:00000000004051be\n.text:00000000004051c1\n.text:00000000004051c4\n.text:00000000004051c7\n.text:00000000004051ca\n.text:00000000004051cc\n.text:00000000004051cf\n.text:00000000004051d4\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051e3\n.text:00000000004051e8\n.text:00000000004051eb\n.text:00000000004051f0\n.text:00000000004051f5\n.text:00000000004051fa\n.text:00000000004051fd\n.text:0000000000405202\n.text:0000000000405207\n.text:000000000040520c\n.text:000000000040520e\n.text:0000000000405210\n.text:0000000000405215\n.text:0000000000405217\n.text:000000000040521a\n.text:000000000040521c\n.text:000000000040521e\n.text:0000000000405220\n.text:0000000000405223\n.text:0000000000405225\n.text:000000000040522a\n.text:000000000040522e\n.text:0000000000405234\n.text:0000000000405237\n.text:0000000000405239\n.text:000000000040523b\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405245\n.text:0000000000405248\n.text:000000000040524d\n.text:0000000000405252\n.text:0000000000405255\n.text:0000000000405258\n.text:000000000040525b\n.text:000000000040525e\n.text:0000000000405263\n.text:0000000000405266\n.text:0000000000405269\n.text:000000000040526e\n.text:0000000000405271\n.text:0000000000405273\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527a\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405287\n.text:000000000040528c\n.text:000000000040528f\n.text:0000000000405295\n.text:0000000000405297\n.text:000000000040529a\n.text:000000000040529d\n.text:00000000004052a0\n.text:00000000004052a2\n.text:00000000004052a4\n.text:00000000004052a7\n.text:00000000004052aa\n.text:00000000004052af\n.text:00000000004052b2\n.text:00000000004052b4\n.text:00000000004052b7\n.text:00000000004052b9\n.text:00000000004052be\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052cc\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d9\n.text:00000000004052df\n.text:00000000004052e2\n.text:00000000004052e5\n.text:00000000004052e8\n.text:00000000004052ea\n.text:00000000004052ef\n.text:00000000004052f2\n.text:00000000004052f8\n.text:00000000004052fd\n.text:0000000000405303\n.text:0000000000405306\n.text:0000000000405309\n.text:000000000040530c\n.text:0000000000405314\n.text:0000000000405316\n.text:0000000000405318\n.text:000000000040531b\n.text:000000000040531f\n.text:0000000000405321\n.text:0000000000405324\n.text:0000000000405328\n.text:000000000040532a\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405333\n.text:0000000000405335\n.text:0000000000405339\n.text:000000000040533b\n.text:000000000040533f\n.text:0000000000405342\n.text:0000000000405345\n.text:0000000000405348\n.text:000000000040534a\n.text:000000000040534e\n.text:0000000000405357\n.text:000000000040535a\n.text:000000000040535c\n.text:0000000000405360\n.text:0000000000405362\n.text:0000000000405366\n.text:0000000000405368\n.text:000000000040536b\n.text:000000000040536f\n.text:0000000000405371\n.text:0000000000405374\n.text:0000000000405378\n.text:000000000040537d\n.text:0000000000405380\n.text:0000000000405384\n.text:000000000040538c\n.text:000000000040538f\n.text:0000000000405392\n.text:0000000000405394\n.text:0000000000405398\n.text:000000000040539b\n.text:000000000040539d\n.text:00000000004053a2\n.text:00000000004053a6\n.text:00000000004053ab\n.text:00000000004053b0\n.text:00000000004053b4\n.text:00000000004053ba\n.text:00000000004053c0\n.text:00000000004053c5\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d2\n.text:00000000004053d7\n.text:00000000004053db\n.text:00000000004053dd\n.text:00000000004053e1\n.text:00000000004053e3\n.text:00000000004053e5\n.text:00000000004053e8\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f9\n.text:00000000004053fd\n.text:0000000000405402\n.text:0000000000405407\n.text:000000000040540a\n.text:000000000040540d\n.text:000000000040540f\n.text:0000000000405411\n.text:0000000000405416\n.text:000000000040541a\n.text:0000000000405420\n.text:0000000000405422\n.text:0000000000405424\n.text:0000000000405426\n.text:000000000040542e\n.text:0000000000405433\n.text:0000000000405439\n.text:000000000040543b\n.text:0000000000405440\n.text:0000000000405446\n.text:000000000040544f\n.text:0000000000405455\n.text:0000000000405460\n.text:0000000000405462\n.text:0000000000405465\n.text:0000000000405469\n.text:0000000000405471\n.text:0000000000405474\n.text:0000000000405479\n.text:000000000040547b\n.text:000000000040547e\n.text:0000000000405480\n.text:0000000000405485\n.text:0000000000405488\n.text:000000000040548d\n.text:0000000000405490\n.text:0000000000405495\n.text:0000000000405499\n.text:000000000040549e\n.text:00000000004054a0\n.text:00000000004054a2\n.text:00000000004054a8\n.text:00000000004054ad\n.text:00000000004054b2\n.text:00000000004054b5\n.text:00000000004054ba\n.text:00000000004054be\n.text:00000000004054c3\n.text:00000000004054c8\n.text:00000000004054ca\n.text:00000000004054cc\n.text:00000000004054d1\n.text:00000000004054d3\n.text:00000000004054d6\n.text:00000000004054dc\n.text:00000000004054df\n.text:00000000004054e5\n.text:00000000004054e8\n.text:00000000004054ee\n.text:00000000004054f3\n.text:00000000004054f7\n.text:00000000004054fd\n.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405507\n.text:000000000040550a\n.text:000000000040550c\n.text:000000000040550f\n.text:0000000000405515\n.text:000000000040551a\n.text:000000000040551f\n.text:0000000000405525\n.text:0000000000405528\n.text:000000000040552e\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405535\n.text:0000000000405537\n.text:0000000000405539\n.text:000000000040553c\n.text:000000000040553e\n.text:0000000000405543\n.text:0000000000405548\n.text:000000000040554b\n.text:000000000040554d\n.text:0000000000405552\n.text:0000000000405557\n.text:000000000040555a\n.text:000000000040555c\n.text:0000000000405561\n.text:0000000000405565\n.text:0000000000405568\n.text:000000000040556b\n.text:000000000040556d\n.text:0000000000405572\n.text:0000000000405577\n.text:0000000000405579\n.text:000000000040557c\n.text:000000000040557f\n.text:0000000000405585\n.text:0000000000405589\n.text:000000000040558c\n.text:0000000000405592\n.text:0000000000405596\n.text:0000000000405599\n.text:000000000040559c\n.text:00000000004055a2\n.text:00000000004055a5\n.text:00000000004055a7\n.text:00000000004055ac\n.text:00000000004055b1\n.text:00000000004055b4\n.text:00000000004055b6\n.text:00000000004055bb\n.text:00000000004055bf\n.text:00000000004055c4\n.text:00000000004055ca\n.text:00000000004055cf\n.text:00000000004055d1\n.text:00000000004055d6\n.text:00000000004055dc\n.text:00000000004055de\n.text:00000000004055e0\n.text:00000000004055e2\n.text:00000000004055e4\n.text:00000000004055e9\n.text:00000000004055ef\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f8\n.text:00000000004055fe\n.text:0000000000405600\n.text:0000000000405602\n.text:0000000000405607\n.text:0000000000405609\n.text:000000000040560f\n.text:0000000000405614\n.text:000000000040561a\n.text:000000000040561d\n.text:0000000000405620\n.text:0000000000405626\n.text:000000000040562b\n.text:000000000040562e\n.text:0000000000405631\n.text:0000000000405637\n.text:000000000040563a\n.text:0000000000405640\n.text:0000000000405643\n.text:0000000000405645\n.text:000000000040564a\n.text:000000000040564f\n.text:0000000000405652\n.text:0000000000405654\n.text:0000000000405659\n.text:000000000040565e\n.text:0000000000405661\n.text:0000000000405663\n.text:0000000000405668\n.text:000000000040566c\n.text:000000000040566e\n.text:0000000000405673\n.text:0000000000405676\n.text:0000000000405679\n.text:000000000040567f\n.text:0000000000405682\n.text:0000000000405688\n.text:000000000040568b\n.text:0000000000405691\n.text:0000000000405696\n.text:0000000000405699\n.text:000000000040569f\n.text:00000000004056a2\n.text:00000000004056a8\n.text:00000000004056ab\n.text:00000000004056ad\n.text:00000000004056b1\n.text:00000000004056b7\n.text:00000000004056bc\n.text:00000000004056c0\n.text:00000000004056c9\n.text:00000000004056cf\n.text:00000000004056d4\n.text:00000000004056d9\n.text:00000000004056de\n.text:00000000004056e1\n.text:00000000004056e6\n.text:00000000004056e9\n.text:00000000004056ec\n.text:00000000004056f1\n.text:00000000004056f6\n.text:00000000004056fa\n.text:00000000004056ff\n.text:0000000000405704\n.text:0000000000405708\n.text:000000000040570a\n.text:000000000040570f\n.text:0000000000405715\n.text:0000000000405718\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405720\n.text:0000000000405726\n.text:000000000040572b\n.text:000000000040572e\n.text:0000000000405731\n.text:0000000000405734\n.text:0000000000405737\n.text:0000000000405739\n.text:000000000040573d\n.text:000000000040573f\n.text:0000000000405744\n.text:0000000000405749\n.text:000000000040574f\n.text:0000000000405760\n.text:0000000000405765\n.text:0000000000405767\n.text:000000000040576a\n.text:000000000040576c\n.text:000000000040576f\n.text:0000000000405771\n.text:0000000000405774\n.text:0000000000405776\n.text:000000000040577b\n.text:0000000000405780\n.text:0000000000405783\n.text:0000000000405785\n.text:000000000040578a\n.text:000000000040578e\n.text:0000000000405796\n.text:0000000000405799\n.text:000000000040579c\n.text:000000000040579e\n.text:00000000004057a2\n.text:00000000004057b0\n.text:00000000004057b4\n.text:00000000004057ba\n.text:00000000004057bd\n.text:00000000004057bf\n.text:00000000004057c4\n.text:00000000004057c7\n.text:00000000004057c9\n.text:00000000004057d0\n.text:00000000004057d3\n.text:00000000004057d8\n.text:00000000004057db\n.text:00000000004057e0\n.text:00000000004057e2\n.text:00000000004057e5\n.text:00000000004057eb\n.text:00000000004057ee\n.text:00000000004057f0\n.text:00000000004057f4\n.text:00000000004057f6\n.text:00000000004057f8\n.text:00000000004057fb\n.text:00000000004057fd\n.text:0000000000405802\n.text:0000000000405807\n.text:000000000040580a\n.text:000000000040580c\n.text:0000000000405811\n.text:0000000000405816\n.text:0000000000405819\n.text:000000000040581b\n.text:0000000000405820\n.text:0000000000405824\n.text:0000000000405826\n.text:000000000040582a\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405834\n.text:0000000000405839\n.text:000000000040583c\n.text:000000000040583e\n.text:0000000000405841\n.text:0000000000405844\n.text:0000000000405847\n.text:000000000040584b\n.text:0000000000405850\n.text:0000000000405853\n.text:0000000000405855\n.text:0000000000405858\n.text:000000000040585b\n.text:000000000040585e\n.text:0000000000405861\n.text:0000000000405865\n.text:0000000000405869\n.text:000000000040586d\n.text:0000000000405871\n.text:0000000000405873\n.text:0000000000405877\n.text:000000000040587a\n.text:0000000000405880\n.text:0000000000405884\n.text:0000000000405888\n.text:000000000040588e\n.text:0000000000405893\n.text:0000000000405896\n.text:0000000000405899\n.text:000000000040589e\n.text:00000000004058a1\n.text:00000000004058a3\n.text:00000000004058a6\n.text:00000000004058ad\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058b9\n.text:00000000004058bf\n.text:00000000004058c4\n.text:00000000004058c9\n.text:00000000004058cf\n.text:00000000004058d2\n.text:00000000004058d4\n.text:00000000004058d9\n.text:00000000004058df\n.text:00000000004058e4\n.text:00000000004058e6\n.text:00000000004058eb\n.text:00000000004058f1\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058fa\n.text:0000000000405900\n.text:0000000000405905\n.text:0000000000405911\n.text:0000000000405915\n.text:0000000000405917\n.text:000000000040591a\n.text:000000000040591f\n.text:0000000000405924\n.text:0000000000405927\n.text:000000000040592b\n.text:0000000000405930\n.text:0000000000405932\n.text:0000000000405936\n.text:0000000000405938\n.text:0000000000405940\n.text:0000000000405945\n.text:000000000040594a\n.text:000000000040594e\n.text:0000000000405952\n.text:000000000040595a\n.text:000000000040595d\n.text:0000000000405962\n.text:0000000000405965\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405970\n.text:0000000000405973\n.text:0000000000405979\n.text:000000000040597d\n.text:0000000000405987\n.text:000000000040598d\n.text:0000000000405991\n.text:0000000000405996\n.text:000000000040599c\n.text:00000000004059a0\n.text:00000000004059a3\n.text:00000000004059a7\n.text:00000000004059a9\n.text:00000000004059ae\n.text:00000000004059b3\n.text:00000000004059b7\n.text:00000000004059b9\n.text:00000000004059be\n.text:00000000004059c3\n.text:00000000004059c7\n.text:00000000004059cc\n.text:00000000004059d0\n.text:00000000004059d4\n.text:00000000004059d7\n.text:00000000004059da\n.text:00000000004059dc\n.text:00000000004059e0\n.text:00000000004059e6\n.text:00000000004059e9\n.text:00000000004059ec\n.text:00000000004059ee\n.text:00000000004059f2\n.text:00000000004059f7\n.text:00000000004059f9\n.text:00000000004059fb\n.text:0000000000405a03\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a13\n.text:0000000000405a16\n.text:0000000000405a19\n.text:0000000000405a1e\n.text:0000000000405a21\n.text:0000000000405a23\n.text:0000000000405a28\n.text:0000000000405a2d\n.text:0000000000405a33\n.text:0000000000405a38\n.text:0000000000405a3b\n.text:0000000000405a40\n.text:0000000000405a46\n.text:0000000000405a4b\n.text:0000000000405a50\n.text:0000000000405a56\n.text:0000000000405a5a\n.text:0000000000405a5d\n.text:0000000000405a63\n.text:0000000000405a69\n.text:0000000000405a6f\n.text:0000000000405a74\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7f\n.text:0000000000405a83\n.text:0000000000405a85\n.text:0000000000405a8f\n.text:0000000000405a93\n.text:0000000000405a99\n.text:0000000000405a9c\n.text:0000000000405a9e\n.text:0000000000405aa4\n.text:0000000000405aa7\n.text:0000000000405aa9\n.text:0000000000405aae\n.text:0000000000405ab3\n.text:0000000000405ab6\n.text:0000000000405aba\n.text:0000000000405abc\n.text:0000000000405ac1\n.text:0000000000405ac6\n.text:0000000000405ac9\n.text:0000000000405acb\n.text:0000000000405ad0\n.text:0000000000405ad5\n.text:0000000000405ad8\n.text:0000000000405ada\n.text:0000000000405adf\n.text:0000000000405ae3\n.text:0000000000405ae5\n.text:0000000000405ae8\n.text:0000000000405aeb\n.text:0000000000405af0\n.text:0000000000405af6\n.text:0000000000405af8\n.text:0000000000405afd\n.text:0000000000405b02\n.text:0000000000405b08\n.text:0000000000405b10\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b1c\n.text:0000000000405b1f\n.text:0000000000405b21\n.text:0000000000405b24\n.text:0000000000405b26\n.text:0000000000405b29\n.text:0000000000405b2c\n.text:0000000000405b2f\n.text:0000000000405b31\n.text:0000000000405b39\n.text:0000000000405b3c\n.text:0000000000405b3e\n.text:0000000000405b40\n.text:0000000000405b50\n.text:0000000000405b53\n.text:0000000000405b55\n.text:0000000000405b58\n.text:0000000000405b5e\n.text:0000000000405b61\n.text:0000000000405b63\n.text:0000000000405b65\n.text:0000000000405b67\n.text:0000000000405b69\n.text:0000000000405b6c\n.text:0000000000405b6e\n.text:0000000000405b73\n.text:0000000000405b78\n.text:0000000000405b7b\n.text:0000000000405b7d\n.text:0000000000405b82\n.text:0000000000405b87\n.text:0000000000405b8a\n.text:0000000000405b8c\n.text:0000000000405b91\n.text:0000000000405b95\n.text:0000000000405b98\n.text:0000000000405b9b\n.text:0000000000405b9d\n.text:0000000000405ba2\n.text:0000000000405ba5\n.text:0000000000405ba8\n.text:0000000000405baa\n.text:0000000000405bb0\n.text:0000000000405bb4\n.text:0000000000405bb6\n.text:0000000000405bb8\n.text:0000000000405bba\n.text:0000000000405bbd\n.text:0000000000405bbf\n.text:0000000000405bc4\n.text:0000000000405bc9\n.text:0000000000405bcc\n.text:0000000000405bce\n.text:0000000000405bd3\n.text:0000000000405bd7\n.text:0000000000405bd9\n.text:0000000000405bdc\n.text:0000000000405bde\n.text:0000000000405be2\n.text:0000000000405be5\n.text:0000000000405be8\n.text:0000000000405bec\n.text:0000000000405bf2\n.text:0000000000405bf7\n.text:0000000000405bff\n.text:0000000000405c04\n.text:0000000000405c06\n.text:0000000000405c0e\n.text:0000000000405c13\n.text:0000000000405c15\n.text:0000000000405c1a\n.text:0000000000405c1f\n.text:0000000000405c23\n.text:0000000000405c25\n.text:0000000000405c2a\n.text:0000000000405c2d\n.text:0000000000405c30\n.text:0000000000405c32\n.text:0000000000405c3a\n.text:0000000000405c3c\n.text:0000000000405c44\n.text:0000000000405c49\n.text:0000000000405c4d\n.text:0000000000405c52\n.text:0000000000405c57\n.text:0000000000405c5b\n.text:0000000000405c60\n.text:0000000000405c65\n.text:0000000000405c69\n.text:0000000000405c6d\n.text:0000000000405c73\n.text:0000000000405c78\n.text:0000000000405c80\n.text:0000000000405c82\n.text:0000000000405c84\n.text:0000000000405c88\n.text:0000000000405c8d\n.text:0000000000405c93\n.text:0000000000405ca0\n.text:0000000000405ca3\n.text:0000000000405ca9\n.text:0000000000405cac\n.text:0000000000405cae\n.text:0000000000405cb1\n.text:0000000000405cb3\n.text:0000000000405cb6\n.text:0000000000405cb8\n.text:0000000000405cc0\n.text:0000000000405cc6\n.text:0000000000405cca\n.text:0000000000405ccd\n.text:0000000000405cd1\n.text:0000000000405cd6\n.text:0000000000405cda\n.text:0000000000405cde\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce7\n.text:0000000000405ceb\n.text:0000000000405cef\n.text:0000000000405cf1\n.text:0000000000405cf6\n.text:0000000000405cfa\n.text:0000000000405cfd\n.text:0000000000405d00\n.text:0000000000405d07\n.text:0000000000405d08\n.text:0000000000405d0a\n.text:0000000000405d0c\n.text:0000000000405d0e\n.text:0000000000405d10\n.text:0000000000405d11\n.text:0000000000405d12\n.text:0000000000405d1a\n.text:0000000000405d1d\n.text:0000000000405d1f\n.text:0000000000405d22\n.text:0000000000405d24\n.text:0000000000405d26\n.text:0000000000405d28\n.text:0000000000405d2a\n.text:0000000000405d2d\n.text:0000000000405d30\n.text:0000000000405d33\n.text:0000000000405d35\n.text:0000000000405d39\n.text:0000000000405d3c\n.text:0000000000405d3f\n.text:0000000000405d42\n.text:0000000000405d44\n.text:0000000000405d46\n.text:0000000000405d49\n.text:0000000000405d4b\n.text:0000000000405d50\n.text:0000000000405d52\n.text:0000000000405d57\n.text:0000000000405d5c\n.text:0000000000405d5f\n.text:0000000000405d61\n.text:0000000000405d66\n.text:0000000000405d69\n.text:0000000000405d6e\n.text:0000000000405d71\n.text:0000000000405d77\n.text:0000000000405d7d\n.text:0000000000405d80\n.text:0000000000405d85\n'
p818
tp819
sS'set_quoting_style'
p820
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p821
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x60d440\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p823
S'48 85 ff\nb8 40 d4 60 00\n48 0f 45 c7\n89 30\nc3\n'
p824
S'.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405038\n.text:000000000040503c\n.text:000000000040503e\n'
p825
tp826
sS'format_address_label'
p827
(S'\n__stdcall format_address_label(uintmax_t address)\n'
p828
V\u000avoid format_address_label(uintmax_t address)\u000a\u000a{\u000a  format_address_std(address);\u000a  format_address_paren(address + pseudo_offset);\u000a  return;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,0x20\nCALL 0x00402850\nADD RBX,qword ptr [0x0060d3f8]\nMOV RDI,RBX\nMOV ESI,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402ac0\n'
p830
S'55\n53\n50\n89 f5\n48 89 fb\nbe 20 00 00 00\ne8 3e fd ff ff\n48 03 1d df a8 20 00\n48 89 df\n89 ee\n48 83 c4 08\n5b\n5d\neb 9a\n'
p831
S'.text:0000000000402b00\n.text:0000000000402b01\n.text:0000000000402b02\n.text:0000000000402b03\n.text:0000000000402b05\n.text:0000000000402b08\n.text:0000000000402b0d\n.text:0000000000402b12\n.text:0000000000402b19\n.text:0000000000402b1c\n.text:0000000000402b1e\n.text:0000000000402b22\n.text:0000000000402b23\n.text:0000000000402b24\n'
p832
tp833
sS'textdomain'
p834
(S'\n__stdcall textdomain()\n'
p835
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060d090)();\u000a  return;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060d090]\n'
p837
S'ff 25 fa b9 20 00\n'
p838
S'.plt:0000000000401690\n'
p839
tp840
sS'xmemdup'
p841
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p842
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p843
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00406d50\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004017f0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p844
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 3c a9 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p845
S'.text:0000000000406e90\n.text:0000000000406e92\n.text:0000000000406e94\n.text:0000000000406e95\n.text:0000000000406e98\n.text:0000000000406e9b\n.text:0000000000406e9e\n.text:0000000000406ea3\n.text:0000000000406ea6\n.text:0000000000406ea9\n.text:0000000000406eac\n.text:0000000000406eaf\n.text:0000000000406eb4\n.text:0000000000406eb7\n.text:0000000000406eb8\n.text:0000000000406eba\n.text:0000000000406ebc\n'
p846
tp847
sS'get_quoting_style'
p848
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p849
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p850
S'TEST RDI,RDI\nMOV EAX,0x60d440\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p851
S'48 85 ff\nb8 40 d4 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p852
S'.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405028\n.text:000000000040502c\n.text:000000000040502e\n'
p853
tp854
sS'exit'
p855
(S'\n__stdcall exit(int __status)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060d1f0)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060d1f0]\n'
p858
S'ff 25 9a b8 20 00\n'
p859
S'.plt:0000000000401950\n'
p860
tp861
sS'ferror_unlocked'
p862
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060d128)();\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060d128]\n'
p865
S'ff 25 62 b9 20 00\n'
p866
S'.plt:00000000004017c0\n'
p867
tp868
sS'fread_unlocked'
p869
(S'\n__stdcall fread_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_unlocked_0060d088)();\u000a  return sVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x0060d088]\n'
p872
S'ff 25 02 ba 20 00\n'
p873
S'.plt:0000000000401680\n'
p874
tp875
sS'locale_charset'
p876
(S'\n__stdcall locale_charset()\n'
p877
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040787d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040787d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401850\nTEST RAX,RAX\nMOV R14D,0x40a6e9\nCMOVNZ R14,RAX\nCALL 0x00407890\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00407855\nJMP 0x0040787d\nMOV RDI,RBX\nCALL 0x004016e0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004016e0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040787d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004017e0\nTEST EAX,EAX\nJZ 0x00407870\nCMP BPL,0x2a\nJNZ 0x00407830\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00407830\nMOV RDI,RBX\nCALL 0x004016e0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40b020\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p879
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 a0 ff ff\n48 85 c0\n41 be e9 a6 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 a8 9e ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 9a 9e ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 80 9f ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 68 9e ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 20 b0 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p880
S'.text:0000000000407800\n.text:0000000000407801\n.text:0000000000407803\n.text:0000000000407804\n.text:0000000000407809\n.text:000000000040780e\n.text:0000000000407811\n.text:0000000000407817\n.text:000000000040781b\n.text:0000000000407820\n.text:0000000000407823\n.text:0000000000407826\n.text:0000000000407829\n.text:000000000040782b\n.text:0000000000407830\n.text:0000000000407833\n.text:0000000000407838\n.text:000000000040783c\n.text:0000000000407841\n.text:0000000000407846\n.text:000000000040784b\n.text:0000000000407850\n.text:0000000000407853\n.text:0000000000407855\n.text:0000000000407858\n.text:000000000040785b\n.text:0000000000407860\n.text:0000000000407862\n.text:0000000000407864\n.text:0000000000407868\n.text:000000000040786a\n.text:000000000040786e\n.text:0000000000407870\n.text:0000000000407873\n.text:0000000000407878\n.text:000000000040787d\n.text:0000000000407881\n.text:0000000000407886\n.text:000000000040788a\n.text:000000000040788b\n.text:000000000040788d\n.text:000000000040788e\n'
p881
tp882
sS'set_program_name'
p883
(S'\n__stdcall set_program_name(char * argv0)\n'
p884
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p885
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404fb1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401720\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00404f9b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40a058\nMOV EDX,0x7\nCALL 0x00401600\nTEST EAX,EAX\nJNZ 0x00404f9b\nMOV ESI,0x40a060\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401600\nTEST EAX,EAX\nJNZ 0x00404f98\nADD R14,0x3\nMOV qword ptr [0x0060d2c0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060d430],RBX\nMOV qword ptr [0x0060d2e8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060d300]\nMOV EDI,0x40a020\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401960\nCALL 0x004015e0\n'
p886
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 d7 c7 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 58 a0 40 00\nba 07 00 00 00\ne8 8d c6 ff ff\n85 c0\n75 24\nbe 60 a0 40 00\nba 03 00 00 00\n4c 89 f7\ne8 77 c6 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 28 83 20 00\n4c 89 f3\n48 89 1d 8e 84 20 00\n48 89 1d 3f 83 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 48 83 20 00\nbf 20 a0 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 94 c9 ff ff\ne8 0f c6 ff ff\n'
p887
S'.text:0000000000404f30\n.text:0000000000404f32\n.text:0000000000404f33\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f3a\n.text:0000000000404f3c\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f49\n.text:0000000000404f4c\n.text:0000000000404f50\n.text:0000000000404f54\n.text:0000000000404f57\n.text:0000000000404f5a\n.text:0000000000404f5e\n.text:0000000000404f60\n.text:0000000000404f64\n.text:0000000000404f69\n.text:0000000000404f6e\n.text:0000000000404f73\n.text:0000000000404f75\n.text:0000000000404f77\n.text:0000000000404f7c\n.text:0000000000404f81\n.text:0000000000404f84\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f91\n.text:0000000000404f98\n.text:0000000000404f9b\n.text:0000000000404fa2\n.text:0000000000404fa9\n.text:0000000000404fad\n.text:0000000000404fae\n.text:0000000000404fb0\n.text:0000000000404fb1\n.text:0000000000404fb8\n.text:0000000000404fbd\n.text:0000000000404fc2\n.text:0000000000404fc7\n.text:0000000000404fcc\n'
p888
tp889
sS'quotearg_buffer'
p890
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p891
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60d440\nCMOVNZ RBP,R8\nCALL 0x004015f0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00405150\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p893
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 40 d4 60 00\n49 0f 45 e8\ne8 f8 c4 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p894
S'.text:00000000004050d0\n.text:00000000004050d1\n.text:00000000004050d3\n.text:00000000004050d5\n.text:00000000004050d7\n.text:00000000004050d9\n.text:00000000004050da\n.text:00000000004050db\n.text:00000000004050de\n.text:00000000004050e1\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050ea\n.text:00000000004050ef\n.text:00000000004050f3\n.text:00000000004050f8\n.text:00000000004050fb\n.text:00000000004050fd\n.text:0000000000405101\n.text:0000000000405105\n.text:0000000000405109\n.text:000000000040510d\n.text:0000000000405110\n.text:0000000000405113\n.text:0000000000405116\n.text:0000000000405119\n.text:000000000040511c\n.text:000000000040511f\n.text:0000000000405123\n.text:0000000000405124\n.text:0000000000405129\n.text:000000000040512d\n.text:0000000000405131\n.text:0000000000405133\n.text:0000000000405137\n.text:0000000000405138\n.text:000000000040513a\n.text:000000000040513c\n.text:000000000040513e\n.text:0000000000405140\n.text:0000000000405141\n'
p895
tp896
sS'quotearg_colon'
p897
(S'\n__stdcall quotearg_colon(char * arg)\n'
p898
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV ESI,0x3a\nJMP 0x004062b0\n'
p900
S'be 3a 00 00 00\neb e9\n'
p901
S'.text:00000000004062c0\n.text:00000000004062c5\n'
p902
tp903
sS'rpl_fflush'
p904
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p905
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060d168)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040759d\nMOV RDI,RBX\nCALL 0x00401880\nTEST EAX,EAX\nJZ 0x0040759d\nMOV RDI,RBX\nCALL 0x004075b0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401840\n'
p907
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef a2 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 9a a2 ff ff\n'
p908
S'.text:0000000000407580\n.text:0000000000407581\n.text:0000000000407584\n.text:0000000000407587\n.text:0000000000407589\n.text:000000000040758c\n.text:0000000000407591\n.text:0000000000407593\n.text:0000000000407595\n.text:0000000000407598\n.text:000000000040759d\n.text:00000000004075a0\n.text:00000000004075a1\n'
p909
tp910
sS'__assert_fail'
p911
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060d0e8)();\u000a  return;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0060d0e8]\n'
p914
S'ff 25 a2 b9 20 00\n'
p915
S'.plt:0000000000401740\n'
p916
tp917
sS'strtold'
p918
(S'\n__stdcall strtold(char * __nptr, char * * __endptr)\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble strtold(char *__nptr,char **__endptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_strtold_0060d1b8)();\u000a  return dVar1;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x0060d1b8]\n'
p921
S'ff 25 d2 b8 20 00\n'
p922
S'.plt:00000000004018e0\n'
p923
tp924
sS'print_s_char'
p925
(S'\n__stdcall print_s_char(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p926
V\u000avoid print_s_char(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  char cVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int in_R8D;\u000a  int in_R9D;\u000a  size_t sVar4;\u000a  ulong uVar5;\u000a  \u000a  if (blank < fields) {\u000a    lVar2 = (long)in_R9D;\u000a    uVar5 = (fields - 1) * lVar2;\u000a    sVar4 = fields;\u000a    do {\u000a      sVar4 = sVar4 - 1;\u000a      iVar3 = in_R9D + in_R8D;\u000a      in_R9D = (int)(uVar5 / fields);\u000a      cVar1 = *(char *)block;\u000a      block = (char *)block + 1;\u000a      xprintf(fmt_string,(ulong)(uint)(iVar3 - in_R9D),(ulong)(uint)(int)cVar1);\u000a      uVar5 = uVar5 - lVar2;\u000a    } while (blank < sVar4);\u000a  }\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV R12,RCX\nMOV RBP,RDX\nMOV R15,RSI\nMOV qword ptr [RSP],RDI\nCMP RDI,R15\nJBE 0x004039b0\nMOVSXD RDX,EBX\nMOV R13,qword ptr [RSP]\nLEA R14,[R13 + -0x1]\nMOV qword ptr [RSP + 0x8],RDX\nIMUL R14,RDX\nNOP word ptr [RAX + RAX*0x1]\nDEC R13\nXOR EDX,EDX\nMOV RAX,R14\nDIV qword ptr [RSP]\nMOV qword ptr [RSP + 0x10],RAX\nADD EBX,R8D\nSUB EBX,EAX\nMOVSX EDX,byte ptr [RBP]\nINC RBP\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,EBX\nMOV EBX,R8D\nCALL 0x00406f10\nMOV R8D,EBX\nSUB R14,qword ptr [RSP + 0x8]\nCMP R13,R15\nMOV RAX,qword ptr [RSP + 0x10]\nMOV EBX,EAX\nJA 0x00403970\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p928
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n49 89 cc\n48 89 d5\n49 89 f7\n48 89 3c 24\n4c 39 ff\n76 5d\n48 63 d3\n4c 8b 2c 24\n4d 8d 75 ff\n48 89 54 24 08\n4c 0f af f2\n66 0f 1f 84 00 00 00 00 00\n49 ff cd\n31 d2\n4c 89 f0\n48 f7 34 24\n48 89 44 24 10\n44 01 c3\n29 c3\n0f be 55 00\n48 ff c5\n31 c0\n4c 89 e7\n89 de\n44 89 c3\ne8 74 35 00 00\n41 89 d8\n4c 2b 74 24 08\n4d 39 fd\n48 8b 44 24 10\n89 c3\n77 c0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p929
S'.text:0000000000403930\n.text:0000000000403931\n.text:0000000000403933\n.text:0000000000403935\n.text:0000000000403937\n.text:0000000000403939\n.text:000000000040393a\n.text:000000000040393e\n.text:0000000000403941\n.text:0000000000403944\n.text:0000000000403947\n.text:000000000040394a\n.text:000000000040394e\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395e\n.text:0000000000403963\n.text:0000000000403967\n.text:0000000000403970\n.text:0000000000403973\n.text:0000000000403975\n.text:0000000000403978\n.text:000000000040397c\n.text:0000000000403981\n.text:0000000000403984\n.text:0000000000403986\n.text:000000000040398a\n.text:000000000040398d\n.text:000000000040398f\n.text:0000000000403992\n.text:0000000000403994\n.text:0000000000403997\n.text:000000000040399c\n.text:000000000040399f\n.text:00000000004039a4\n.text:00000000004039a7\n.text:00000000004039ac\n.text:00000000004039ae\n.text:00000000004039b0\n.text:00000000004039b4\n.text:00000000004039b5\n.text:00000000004039b7\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039bd\n.text:00000000004039be\n'
p930
tp931
sS'bindtextdomain'
p932
(S'\n__stdcall bindtextdomain()\n'
p933
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060d0a0)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0060d0a0]\n'
p935
S'ff 25 ea b9 20 00\n'
p936
S'.plt:00000000004016b0\n'
p937
tp938
sS'set_char_quoting'
p939
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p940
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p941
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60d440\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p942
S'89 f1\n48 85 ff\nbe 40 d4 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p943
S'.text:0000000000405040\n.text:0000000000405042\n.text:0000000000405045\n.text:000000000040504a\n.text:000000000040504e\n.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405057\n.text:000000000040505c\n.text:000000000040505f\n.text:0000000000405061\n.text:0000000000405063\n.text:0000000000405066\n.text:0000000000405068\n.text:000000000040506b\n.text:000000000040506d\n.text:0000000000405070\n.text:0000000000405075\n'
p944
tp945
sS'quotearg_n'
p946
(S'\n__stdcall quotearg_n(char * arg)\n'
p947
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV RDX,-0x1\nMOV ECX,0x60d440\nJMP 0x00405f30\n'
p949
S'48 c7 c2 ff ff ff ff\nb9 40 d4 60 00\neb 02\n'
p950
S'.text:0000000000405f20\n.text:0000000000405f27\n.text:0000000000405f2c\n'
p951
tp952
sS'close_stream'
p953
(S'\n__stdcall close_stream(FILE * stream)\n'
p954
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401630\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004017c0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00407500\nTEST EBP,EBP\nJZ 0x004077cb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004077ef\nCALL 0x004015f0\nMOV dword ptr [RAX],0x0\nJMP 0x004077ef\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004077ef\nTEST CL,CL\nJNZ 0x004077ef\nCALL 0x004015f0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p956
S'55\n41 56\n53\n48 89 fb\ne8 94 9e ff ff\n49 89 c6\n48 89 df\ne8 19 a0 ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 2d 9e ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 0e 9e ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p957
S'.text:0000000000407790\n.text:0000000000407791\n.text:0000000000407793\n.text:0000000000407794\n.text:0000000000407797\n.text:000000000040779c\n.text:000000000040779f\n.text:00000000004077a2\n.text:00000000004077a7\n.text:00000000004077a9\n.text:00000000004077ac\n.text:00000000004077b1\n.text:00000000004077b3\n.text:00000000004077b5\n.text:00000000004077ba\n.text:00000000004077bc\n.text:00000000004077be\n.text:00000000004077c3\n.text:00000000004077c9\n.text:00000000004077cb\n.text:00000000004077cd\n.text:00000000004077d0\n.text:00000000004077d2\n.text:00000000004077d4\n.text:00000000004077d7\n.text:00000000004077d9\n.text:00000000004077db\n.text:00000000004077dd\n.text:00000000004077e2\n.text:00000000004077e4\n.text:00000000004077e7\n.text:00000000004077ec\n.text:00000000004077ef\n.text:00000000004077f1\n.text:00000000004077f2\n.text:00000000004077f4\n.text:00000000004077f5\n'
p958
tp959
sS'quotearg_colon_mem'
p960
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p961
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV EDX,0x3a\nJMP 0x00406240\n'
p963
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p964
S'.text:00000000004062d0\n.text:00000000004062d5\n'
p965
tp966
sS'skip'
p967
(S'\n__stdcall skip(uintmax_t n_skip)\n'
p968
V\u000a_Bool skip(uintmax_t n_skip)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  int __fd;\u000a  uint *puVar4;\u000a  char *pcVar5;\u000a  size_t sVar6;\u000a  undefined8 uVar7;\u000a  ulong uVar8;\u000a  ulong __n;\u000a  byte bVar9;\u000a  char buf [8192];\u000a  stat sStack8392;\u000a  undefined local_2038 [8200];\u000a  \u000a  if (n_skip == 0) {\u000a    bVar9 = 1;\u000a  }\u000a  else {\u000a    if (in_stream == (FILE *)0x0) {\u000a      bVar9 = 1;\u000a    }\u000a    else {\u000a      bVar9 = 1;\u000a      do {\u000a        __fd = fileno((FILE *)in_stream);\u000a        __fd = fstat(__fd,(stat *)&sStack8392);\u000a        if (__fd == 0) {\u000a          _Var2 = usable_st_size(&sStack8392);\u000a          if (_Var2 == false) {\u000aLAB_00402d30:\u000a            if (n_skip == 0) {\u000a              uVar8 = 0;\u000a            }\u000a            else {\u000a              __n = 0x2000;\u000a              uVar8 = n_skip;\u000a              do {\u000a                while( true ) {\u000a                  if (uVar8 < __n) {\u000a                    __n = uVar8;\u000a                  }\u000a                  sVar6 = fread_unlocked(local_2038,1,__n,(FILE *)in_stream);\u000a                  uVar8 = uVar8 - sVar6;\u000a                  if (sVar6 == __n) break;\u000a                  __fd = ferror_unlocked((FILE *)in_stream);\u000a                  if (__fd != 0) {\u000a                    __errno_location();\u000a                    uVar8 = 0;\u000a                    bVar9 = 0;\u000a                    goto LAB_00402db0;\u000a                  }\u000a                  __fd = feof_unlocked((FILE *)in_stream);\u000a                  if ((uVar8 == 0) || (__fd != 0)) goto LAB_00402db0;\u000a                }\u000a              } while (uVar8 != 0);\u000a              uVar8 = 0;\u000a            }\u000a          }\u000a          else {\u000a            uVar8 = 0x200;\u000a            if (sStack8392.st_blksize < 0x2000000000000001) {\u000a              uVar8 = sStack8392.st_blksize;\u000a            }\u000a            if ((long)sStack8392.st_blksize < 1) {\u000a              uVar8 = 0x200;\u000a            }\u000a            if ((long)sStack8392.st_size <= (long)uVar8) goto LAB_00402d30;\u000a            uVar8 = n_skip - sStack8392.st_size;\u000a            if (n_skip < sStack8392.st_size || uVar8 == 0) {\u000a              __fd = rpl_fseeko(in_stream,n_skip);\u000a              if (__fd == 0) {\u000a                return (_Bool)bVar9;\u000a              }\u000a              return false;\u000a            }\u000a          }\u000aLAB_00402db0:\u000a          if (uVar8 == 0) {\u000a            return (_Bool)bVar9;\u000a          }\u000a        }\u000a        else {\u000a          puVar4 = (uint *)__errno_location();\u000a          uVar1 = *puVar4;\u000a          bVar9 = 0;\u000a          pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)uVar1,&DAT_00409fb9,pcVar5);\u000a          uVar8 = n_skip;\u000a        }\u000a        _Var2 = check_and_close();\u000a        _Var3 = open_next_file();\u000a        bVar9 = _Var3 & _Var2 & bVar9;\u000a        n_skip = uVar8;\u000a      } while (in_stream != (FILE *)0x0);\u000a      if (uVar8 == 0) {\u000a        return (_Bool)bVar9;\u000a      }\u000a    }\u000a    uVar7 = dcgettext(0,"cannot skip past end of combined input",5);\u000a    error(1,0,uVar7,uVar7);\u000a  }\u000a  return (_Bool)bVar9;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2098\nMOV R14,RDI\nTEST R14,R14\nJZ 0x00402de5\nCMP qword ptr [0x0060d3f0],0x0\nJZ 0x00402dea\nXOR R15D,R15D\nMOV R12B,0x1\nMOV RBP,RSP\nLEA R13,[0x90 + RSP]\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [0x0060d3f0]\nCALL 0x00401810\nMOV EDI,EAX\nMOV RSI,RBP\nCALL 0x00407be0\nTEST EAX,EAX\nJZ 0x00402ce0\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060d410]\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004062e0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RBP,RSP\nCALL 0x004018f0\nJMP 0x00402db8\nMOV RDI,RBP\nCALL 0x00404250\nTEST AL,AL\nJZ 0x00402d30\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RSP + 0x38]\nMOV RDX,0x2000000000000001\nCMP RAX,RDX\nMOV EDX,0x200\nCMOVC RDX,RAX\nTEST RAX,RAX\nMOV EAX,0x200\nCMOVLE RDX,RAX\nCMP RDX,RCX\nJGE 0x00402d30\nMOV RAX,R14\nSUB RAX,RCX\nJA 0x00402db0\nJMP 0x00402e2b\nTEST R14,R14\nJZ 0x00402d97\nMOV EBP,0x2000\nNOP word ptr [RAX + RAX*0x1]\nCMP R14,RBP\nCMOVC RBP,R14\nMOV RCX,qword ptr [0x0060d3f0]\nMOV ESI,0x1\nMOV RDI,R13\nMOV RDX,RBP\nCALL 0x00401680\nSUB R14,RAX\nCMP RAX,RBP\nJZ 0x00402d8d\nMOV RDI,qword ptr [0x0060d3f0]\nCALL 0x004017c0\nTEST EAX,EAX\nJNZ 0x00402d9c\nMOV RDI,qword ptr [0x0060d3f0]\nCALL 0x004019a0\nTEST R14,R14\nJZ 0x00402daa\nTEST EAX,EAX\nJZ 0x00402d40\nJMP 0x00402daa\nTEST R14,R14\nJNZ 0x00402d40\nXOR R14D,R14D\nJMP 0x00402daa\nXOR R14D,R14D\nJMP 0x00402dad\nCALL 0x004015f0\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nXOR R12D,R12D\nMOV RBP,RSP\nMOV RAX,R14\nTEST RAX,RAX\nMOV R14,RAX\nJZ 0x00402e12\nMOV EDI,R15D\nCALL 0x00404270\nMOV EBX,EAX\nAND BL,R12B\nCALL 0x00402b30\nMOV R12B,AL\nAND R12B,BL\nCMP qword ptr [0x0060d3f0],0x0\nJNZ 0x00402c80\nTEST R14,R14\nJNZ 0x00402ded\nJMP 0x00402e12\nMOV R12B,0x1\nJMP 0x00402e16\nMOV R12B,0x1\nXOR EDI,EDI\nMOV ESI,0x409e9a\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004018f0\nAND R12B,0x1\nMOV EAX,R12D\nADD RSP,0x2098\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0060d3f0]\nMOV EDX,0x1\nMOV RSI,R14\nCALL 0x004075d0\nTEST EAX,EAX\nJZ 0x00402e12\nXOR R12D,R12D\nJMP 0x00402e12\n'
p970
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 20 00 00\n49 89 fe\n4d 85 f6\n0f 84 88 01 00 00\n48 83 3d 8b a7 20 00 00\n0f 84 7f 01 00 00\n45 31 ff\n41 b4 01\n48 89 e5\n4c 8d ac 24 90 00 00 00\n0f 1f 40 00\n48 8b 3d 69 a7 20 00\ne8 84 eb ff ff\n89 c7\n48 89 ee\ne8 4a 4f 00 00\n85 c0\n74 46\ne8 51 e9 ff ff\n8b 28\n48 8b 15 68 a7 20 00\n45 31 e4\n31 ff\nbe 03 00 00 00\ne8 29 36 00 00\n48 89 c1\n31 ff\nba b9 9f 40 00\n31 c0\n89 ee\n48 89 e5\ne8 23 ec ff ff\ne9 e6 00 00 00\n48 89 ef\ne8 68 15 00 00\n84 c0\n74 44\n48 8b 4c 24 30\n48 8b 44 24 38\n48 ba 01 00 00 00 00 00 00 20\n48 39 d0\nba 00 02 00 00\n48 0f 42 d0\n48 85 c0\nb8 00 02 00 00\n48 0f 4e d0\n48 39 ca\n7d 13\n4c 89 f0\n48 29 c8\n0f 87 87 00 00 00\ne9 fd 00 00 00\n4d 85 f6\n74 62\nbd 00 20 00 00\n66 0f 1f 44 00 00\n49 39 ee\n49 0f 42 ee\n48 8b 0d a2 a6 20 00\nbe 01 00 00 00\n4c 89 ef\n48 89 ea\ne8 22 e9 ff ff\n49 29 c6\n48 39 e8\n74 27\n48 8b 3d 83 a6 20 00\ne8 4e ea ff ff\n85 c0\n75 26\n48 8b 3d 73 a6 20 00\ne8 1e ec ff ff\n4d 85 f6\n74 23\n85 c0\n74 b5\neb 1d\n4d 85 f6\n75 ae\n45 31 f6\neb 13\n45 31 f6\neb 11\ne8 4f e8 ff ff\n44 8b 38\n45 31 f6\n45 31 e4\n48 89 e5\n4c 89 f0\n48 85 c0\n49 89 c6\n74 5a\n44 89 ff\ne8 b0 14 00 00\n89 c3\n44 20 e3\ne8 66 fd ff ff\n41 88 c4\n41 20 dc\n48 83 3d 18 a6 20 00 00\n0f 85 a2 fe ff ff\n4d 85 f6\n75 0a\neb 2d\n41 b4 01\neb 2c\n41 b4 01\n31 ff\nbe 9a 9e 40 00\nba 05 00 00 00\ne8 c2 e8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 de ea ff ff\n41 80 e4 01\n44 89 e0\n48 81 c4 98 20 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d be a5 20 00\nba 01 00 00 00\n4c 89 f6\ne8 91 47 00 00\n85 c0\n74 cf\n45 31 e4\neb ca\n'
p971
S'.text:0000000000402c40\n.text:0000000000402c41\n.text:0000000000402c43\n.text:0000000000402c45\n.text:0000000000402c47\n.text:0000000000402c49\n.text:0000000000402c4a\n.text:0000000000402c51\n.text:0000000000402c54\n.text:0000000000402c57\n.text:0000000000402c5d\n.text:0000000000402c65\n.text:0000000000402c6b\n.text:0000000000402c6e\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c7c\n.text:0000000000402c80\n.text:0000000000402c87\n.text:0000000000402c8c\n.text:0000000000402c8e\n.text:0000000000402c91\n.text:0000000000402c96\n.text:0000000000402c98\n.text:0000000000402c9a\n.text:0000000000402c9f\n.text:0000000000402ca1\n.text:0000000000402ca8\n.text:0000000000402cab\n.text:0000000000402cad\n.text:0000000000402cb2\n.text:0000000000402cb7\n.text:0000000000402cba\n.text:0000000000402cbc\n.text:0000000000402cc1\n.text:0000000000402cc3\n.text:0000000000402cc5\n.text:0000000000402cc8\n.text:0000000000402ccd\n.text:0000000000402ce0\n.text:0000000000402ce3\n.text:0000000000402ce8\n.text:0000000000402cea\n.text:0000000000402cec\n.text:0000000000402cf1\n.text:0000000000402cf6\n.text:0000000000402d00\n.text:0000000000402d03\n.text:0000000000402d08\n.text:0000000000402d0c\n.text:0000000000402d0f\n.text:0000000000402d14\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1d\n.text:0000000000402d20\n.text:0000000000402d23\n.text:0000000000402d29\n.text:0000000000402d30\n.text:0000000000402d33\n.text:0000000000402d35\n.text:0000000000402d3a\n.text:0000000000402d40\n.text:0000000000402d43\n.text:0000000000402d47\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d56\n.text:0000000000402d59\n.text:0000000000402d5e\n.text:0000000000402d61\n.text:0000000000402d64\n.text:0000000000402d66\n.text:0000000000402d6d\n.text:0000000000402d72\n.text:0000000000402d74\n.text:0000000000402d76\n.text:0000000000402d7d\n.text:0000000000402d82\n.text:0000000000402d85\n.text:0000000000402d87\n.text:0000000000402d89\n.text:0000000000402d8b\n.text:0000000000402d8d\n.text:0000000000402d90\n.text:0000000000402d92\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d9a\n.text:0000000000402d9c\n.text:0000000000402da1\n.text:0000000000402da4\n.text:0000000000402da7\n.text:0000000000402daa\n.text:0000000000402dad\n.text:0000000000402db0\n.text:0000000000402db3\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dc0\n.text:0000000000402dc2\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dcd\n.text:0000000000402dd0\n.text:0000000000402dd8\n.text:0000000000402dde\n.text:0000000000402de1\n.text:0000000000402de3\n.text:0000000000402de5\n.text:0000000000402de8\n.text:0000000000402dea\n.text:0000000000402ded\n.text:0000000000402def\n.text:0000000000402df4\n.text:0000000000402df9\n.text:0000000000402dfe\n.text:0000000000402e01\n.text:0000000000402e06\n.text:0000000000402e08\n.text:0000000000402e0a\n.text:0000000000402e0d\n.text:0000000000402e12\n.text:0000000000402e16\n.text:0000000000402e19\n.text:0000000000402e20\n.text:0000000000402e21\n.text:0000000000402e23\n.text:0000000000402e25\n.text:0000000000402e27\n.text:0000000000402e29\n.text:0000000000402e2a\n.text:0000000000402e2b\n.text:0000000000402e32\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3f\n.text:0000000000402e41\n.text:0000000000402e43\n.text:0000000000402e46\n'
p972
tp973
sS'xcalloc'
p974
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p975
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p976
S'PUSH RAX\nCALL 0x004074b0\nTEST RAX,RAX\nJZ 0x00406e7d\nPOP RCX\nRET\nCALL 0x00406ee0\n'
p977
S'50\ne8 3a 06 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p978
S'.text:0000000000406e70\n.text:0000000000406e71\n.text:0000000000406e76\n.text:0000000000406e79\n.text:0000000000406e7b\n.text:0000000000406e7c\n.text:0000000000406e7d\n'
p979
tp980
sS'clear_ungetc_buffer_preserving_position'
p981
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p982
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p983
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004075b7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004075d0\n'
p984
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p985
S'.text:00000000004075b0\n.text:00000000004075b4\n.text:00000000004075b6\n.text:00000000004075b7\n.text:00000000004075b9\n.text:00000000004075be\n'
p986
tp987
sS'xnmalloc'
p988
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p989
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p990
S'MOV RAX,RDI\nMUL RSI\nJO 0x00406d41\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00406d50\nPUSH RAX\nCALL 0x00406ee0\n'
p991
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p992
S'.text:0000000000406d30\n.text:0000000000406d33\n.text:0000000000406d36\n.text:0000000000406d38\n.text:0000000000406d3c\n.text:0000000000406d3f\n.text:0000000000406d41\n.text:0000000000406d42\n'
p993
tp994
sS'quotearg_char'
p995
(S'\n__stdcall quotearg_char(char * arg)\n'
p996
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p997
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00406240\n'
p998
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p999
S'.text:00000000004062b0\n.text:00000000004062b2\n.text:00000000004062b9\n.text:00000000004062bb\n'
p1000
tp1001
sS'malloc'
p1002
(S'\n__stdcall malloc(size_t __size)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060d160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060d160]\n'
p1005
S'ff 25 2a b9 20 00\n'
p1006
S'.plt:0000000000401830\n'
p1007
tp1008
sS'argmatch_invalid'
p1009
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1010
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1011
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x409f62\nMOV ESI,0x409f7d\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016c0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00406120\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00406410\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004018f0\n'
p1012
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 62 9f 40 00\nbe 7d 9f 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 64 ce ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 b2 18 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 92 1b 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 50 d0 ff ff\n'
p1013
S'.text:0000000000404830\n.text:0000000000404832\n.text:0000000000404834\n.text:0000000000404836\n.text:0000000000404837\n.text:0000000000404838\n.text:000000000040483b\n.text:000000000040483e\n.text:0000000000404842\n.text:0000000000404847\n.text:000000000040484c\n.text:0000000000404850\n.text:0000000000404852\n.text:0000000000404857\n.text:000000000040485c\n.text:000000000040485f\n.text:0000000000404861\n.text:0000000000404866\n.text:0000000000404869\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404876\n.text:0000000000404879\n.text:000000000040487e\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404887\n.text:000000000040488a\n.text:000000000040488d\n.text:0000000000404890\n.text:0000000000404894\n.text:0000000000404895\n.text:0000000000404897\n.text:0000000000404899\n.text:000000000040489b\n'
p1014
tp1015
sS'c_tolower'
p1016
(S'\n__stdcall c_tolower()\n'
p1017
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1018
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1019
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1020
S'.text:0000000000407770\n.text:0000000000407773\n.text:0000000000407776\n.text:0000000000407779\n.text:000000000040777c\n'
p1021
tp1022
sS'getopt_long'
p1023
(S'\n__stdcall getopt_long()\n'
p1024
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060d0c0)();\u000a  return;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0060d0c0]\n'
p1026
S'ff 25 ca b9 20 00\n'
p1027
S'.plt:00000000004016f0\n'
p1028
tp1029
sS'quotearg_style'
p1030
(S'\n__stdcall quotearg_style(char * arg)\n'
p1031
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1032
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00406120\n'
p1033
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1034
S'.text:0000000000406200\n.text:0000000000406203\n.text:0000000000406205\n.text:0000000000406207\n.text:0000000000406209\n.text:000000000040620c\n'
p1035
tp1036
sS'__argmatch_die'
p1037
(S'\n__stdcall __argmatch_die()\n'
p1038
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1039
S'MOV EDI,0x1\nJMP 0x00401ad0\n'
p1040
S'bf 01 00 00 00\ne9 a6 d3 ff ff\n'
p1041
S'.text:0000000000404720\n.text:0000000000404725\n'
p1042
tp1043
sS'emit_try_help'
p1044
(S'\n__stdcall emit_try_help()\n'
p1045
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1046
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d300]\nXOR EDI,EDI\nMOV ESI,0x409a42\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060d430]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401970\n'
p1047
S'53\n48 8b 1d 28 b6 20 00\n31 ff\nbe 42 9a 40 00\nba 05 00 00 00\ne8 d7 f9 ff ff\n48 89 c2\n48 8b 0d 3d b7 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 6d fc ff ff\n'
p1048
S'.text:0000000000401cd0\n.text:0000000000401cd1\n.text:0000000000401cd8\n.text:0000000000401cda\n.text:0000000000401cdf\n.text:0000000000401ce4\n.text:0000000000401ce9\n.text:0000000000401cec\n.text:0000000000401cf3\n.text:0000000000401cf8\n.text:0000000000401cfa\n.text:0000000000401cfd\n.text:0000000000401cfe\n'
p1049
tp1050
sS'print_s_short'
p1051
(S'\n__stdcall print_s_short(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p1052
V\u000avoid print_s_short(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  short sVar3;\u000a  ulong uVar4;\u000a  short *psVar5;\u000a  long lVar6;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar7;\u000a  short local_40 [2];\u000a  int local_3c;\u000a  char *local_38;\u000a  \u000a  uVar4 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar7 = fields;\u000a    local_3c = in_R8D;\u000a    local_38 = fmt_string;\u000a    do {\u000a      iVar2 = (int)uVar4;\u000a      sVar7 = sVar7 - 1;\u000a      auVar1 = ZEXT816(sVar7 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar4 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        sVar3 = *(short *)block;\u000a      }\u000a      else {\u000a        psVar5 = local_40;\u000a        lVar6 = 2;\u000a        do {\u000a          *(undefined *)psVar5 = *(undefined *)((long)block + lVar6 + -1);\u000a          psVar5 = (short *)((long)psVar5 + 1);\u000a          lVar6 = lVar6 + -1;\u000a          sVar3 = local_40[0];\u000a        } while (lVar6 != 0);\u000a      }\u000a      block = (short *)block + 1;\u000a      xprintf(local_38,(ulong)(uint)((iVar2 + local_3c) - SUB164(auVar1,0)),(ulong)(uint)(int)sVar3)\u000a      ;\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBP,RDX\nMOV R12,RSI\nMOV R13,RDI\nCMP R13,R12\nJBE 0x00403aec\nMOVSXD R14,EBX\nMOV R15,R13\nNOP\nMOV ESI,EBX\nDEC R15\nMOV RAX,R15\nIMUL RAX,R14\nXOR EDX,EDX\nDIV R13\nADD ESI,dword ptr [RSP + 0xc]\nMOV RBX,RAX\nSUB ESI,EBX\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403ad0\nLEA RAX,[RSP + 0x8]\nMOV ECX,0x2\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RBP + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403ab0\nMOVZX EAX,word ptr [RSP + 0x8]\nJMP 0x00403ad4\nMOVZX EAX,word ptr [RBP]\nADD RBP,0x2\nMOVSX EDX,AX\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406f10\nCMP R15,R12\nJA 0x00403a80\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n44 89 44 24 0c\n48 89 4c 24 10\n48 89 d5\n49 89 f4\n49 89 fd\n4d 39 e5\n76 73\n4c 63 f3\n4d 89 ef\n90\n89 de\n49 ff cf\n4c 89 f8\n49 0f af c6\n31 d2\n49 f7 f5\n03 74 24 0c\n48 89 c3\n29 de\n80 3d 39 99 20 00 00\n74 2d\n48 8d 44 24 08\nb9 02 00 00 00\n0f 1f 00\n0f b6 54 0d ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\n0f b7 44 24 08\neb 0e\n0f b7 45 00\n48 83 c5 02\n0f bf d0\n31 c0\n48 8b 7c 24 10\ne8 29 34 00 00\n4d 39 e7\n77 94\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:0000000000403a50\n.text:0000000000403a51\n.text:0000000000403a53\n.text:0000000000403a55\n.text:0000000000403a57\n.text:0000000000403a59\n.text:0000000000403a5a\n.text:0000000000403a5e\n.text:0000000000403a61\n.text:0000000000403a66\n.text:0000000000403a6b\n.text:0000000000403a6e\n.text:0000000000403a71\n.text:0000000000403a74\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a7f\n.text:0000000000403a80\n.text:0000000000403a82\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8c\n.text:0000000000403a8e\n.text:0000000000403a91\n.text:0000000000403a95\n.text:0000000000403a98\n.text:0000000000403a9a\n.text:0000000000403aa1\n.text:0000000000403aa3\n.text:0000000000403aa8\n.text:0000000000403aad\n.text:0000000000403ab0\n.text:0000000000403ab5\n.text:0000000000403ab7\n.text:0000000000403aba\n.text:0000000000403abd\n.text:0000000000403abf\n.text:0000000000403ac4\n.text:0000000000403ad0\n.text:0000000000403ad4\n.text:0000000000403ad8\n.text:0000000000403adb\n.text:0000000000403add\n.text:0000000000403ae2\n.text:0000000000403ae7\n.text:0000000000403aea\n.text:0000000000403aec\n.text:0000000000403af0\n.text:0000000000403af1\n.text:0000000000403af3\n.text:0000000000403af5\n.text:0000000000403af7\n.text:0000000000403af9\n.text:0000000000403afa\n'
p1056
tp1057
sS'strrchr'
p1058
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1059
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060d0d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x0060d0d8]\n'
p1061
S'ff 25 b2 b9 20 00\n'
p1062
S'.plt:0000000000401720\n'
p1063
tp1064
sS'format_address_paren'
p1065
(S'\n__stdcall format_address_paren(uintmax_t address)\n'
p1066
V\u000avoid format_address_paren(uintmax_t address)\u000a\u000a{\u000a  char in_SIL;\u000a  \u000a  putchar_unlocked(0x28);\u000a  format_address_std(address);\u000a  if (in_SIL != 0) {\u000a    putchar_unlocked((int)in_SIL);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1067
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV R14,RDI\nMOV EDI,0x28\nCALL 0x00401800\nMOV ESI,0x29\nMOV RDI,R14\nCALL 0x00402850\nTEST BL,BL\nJZ 0x00402af3\nMOVSX EDI,BL\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401800\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1068
S'41 56\n53\n50\n89 f3\n49 89 fe\nbf 28 00 00 00\ne8 2d ed ff ff\nbe 29 00 00 00\n4c 89 f7\ne8 70 fd ff ff\n84 db\n74 0f\n0f be fb\n48 83 c4 08\n5b\n41 5e\ne9 0d ed ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1069
S'.text:0000000000402ac0\n.text:0000000000402ac2\n.text:0000000000402ac3\n.text:0000000000402ac4\n.text:0000000000402ac6\n.text:0000000000402ac9\n.text:0000000000402ace\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402ae0\n.text:0000000000402ae2\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aeb\n.text:0000000000402aec\n.text:0000000000402aee\n.text:0000000000402af3\n.text:0000000000402af7\n.text:0000000000402af8\n.text:0000000000402afa\n'
p1070
tp1071
sS'quotearg_alloc_mem'
p1072
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1073
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60d440\nCMOVNZ R12,RCX\nCALL 0x004015f0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00405150\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00406e20\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00405150\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00405e7a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 40 d4 60 00\n4c 0f 45 e1\ne8 18 b8 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000405da0\n.text:0000000000405da1\n.text:0000000000405da3\n.text:0000000000405da5\n.text:0000000000405da7\n.text:0000000000405da9\n.text:0000000000405daa\n.text:0000000000405dae\n.text:0000000000405db1\n.text:0000000000405db6\n.text:0000000000405db9\n.text:0000000000405dbe\n.text:0000000000405dc1\n.text:0000000000405dc6\n.text:0000000000405dc9\n.text:0000000000405dcf\n.text:0000000000405dd3\n.text:0000000000405dd8\n.text:0000000000405ddd\n.text:0000000000405ddf\n.text:0000000000405de3\n.text:0000000000405de5\n.text:0000000000405de8\n.text:0000000000405dec\n.text:0000000000405df1\n.text:0000000000405df5\n.text:0000000000405dfa\n.text:0000000000405dfe\n.text:0000000000405e00\n.text:0000000000405e02\n.text:0000000000405e05\n.text:0000000000405e08\n.text:0000000000405e0b\n.text:0000000000405e10\n.text:0000000000405e15\n.text:0000000000405e17\n.text:0000000000405e1c\n.text:0000000000405e20\n.text:0000000000405e23\n.text:0000000000405e27\n.text:0000000000405e2a\n.text:0000000000405e2f\n.text:0000000000405e32\n.text:0000000000405e36\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e40\n.text:0000000000405e45\n.text:0000000000405e4a\n.text:0000000000405e4d\n.text:0000000000405e52\n.text:0000000000405e57\n.text:0000000000405e59\n.text:0000000000405e5e\n.text:0000000000405e63\n.text:0000000000405e67\n.text:0000000000405e6a\n.text:0000000000405e6e\n.text:0000000000405e73\n.text:0000000000405e75\n.text:0000000000405e77\n.text:0000000000405e7a\n.text:0000000000405e7d\n.text:0000000000405e81\n.text:0000000000405e82\n.text:0000000000405e84\n.text:0000000000405e86\n.text:0000000000405e88\n.text:0000000000405e8a\n.text:0000000000405e8b\n'
p1077
tp1078
sS'bkm_scale'
p1079
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1080
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1081
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1082
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1083
S'.text:0000000000407440\n.text:0000000000407443\n.text:000000000040744a\n.text:0000000000407451\n.text:0000000000407453\n.text:0000000000407456\n.text:0000000000407459\n.text:000000000040745d\n.text:0000000000407460\n.text:0000000000407464\n.text:0000000000407466\n.text:0000000000407469\n.text:000000000040746c\n'
p1084
tp1085
sS'format_address_std'
p1086
(S'\n__stdcall format_address_std(uintmax_t address)\n'
p1087
V\u000avoid format_address_std(uintmax_t address)\u000a\u000a{\u000a  bool bVar1;\u000a  char *__s;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  char buf [25];\u000a  undefined auStack56 [23];\u000a  char local_21 [17];\u000a  \u000a  local_21[1] = 0;\u000a  __s = local_21;\u000a  lVar2 = (long)address_pad_len;\u000a  pcVar3 = __s + -lVar2;\u000a  if (address_base == 8) {\u000a    do {\u000a      __s[-1] = (byte)address & 7 | 0x30;\u000a      __s = __s + -1;\u000a      address = address >> 3;\u000a    } while (address != 0);\u000a  }\u000a  else {\u000a    if (address_base == 10) {\u000a      do {\u000a        __s[-1] = (char)address +\u000a                  ((byte)((SUB168(ZEXT816(address) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                          0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        __s = __s + -1;\u000a        bVar1 = 9 < address;\u000a        address = address / 10;\u000a      } while (bVar1);\u000a    }\u000a    else {\u000a      if (address_base == 0x10) {\u000a        do {\u000a          __s[-1] = "0123456789abcdef"[(ulong)((uint)address & 0xf)];\u000a          __s = __s + -1;\u000a          address = address >> 4;\u000a        } while (address != 0);\u000a      }\u000a    }\u000a  }\u000a  if (pcVar3 < __s) {\u000a    memset(local_21 + -lVar2,0x30,(size_t)(__s + ((lVar2 + -0x17) - (long)auStack56)));\u000a    do {\u000a      __s = __s + -1;\u000a    } while (pcVar3 < __s);\u000a  }\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RCX,RDI\nMOV byte ptr [RSP + 0x18],0x0\nLEA RBX,[RSP + 0x17]\nMOV byte ptr [RSP + 0x17],SIL\nMOVSXD R8,dword ptr [0x0060d3ac]\nMOV R14,RBX\nSUB R14,R8\nMOV EAX,dword ptr [0x0060d3a8]\nCMP EAX,0x8\nJZ 0x004028b0\nCMP EAX,0xa\nJZ 0x004028c4\nCMP EAX,0x10\nJNZ 0x004028ff\nNOP dword ptr [RAX + RAX*0x1]\nMOV EAX,ECX\nAND EAX,0xf\nMOVZX EAX,byte ptr [0x409c24 + RAX]\nMOV byte ptr [RBX + -0x1],AL\nDEC RBX\nSHR RCX,0x4\nJNZ 0x00402890\nJMP 0x004028ff\nMOV EAX,ECX\nAND AL,0x7\nOR AL,0x30\nMOV byte ptr [RBX + -0x1],AL\nDEC RBX\nSHR RCX,0x3\nJNZ 0x004028b0\nJMP 0x004028ff\nMOV RDI,-0x3333333333333333\nNOP\nMOV RAX,RCX\nMUL RDI\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,ECX\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x004028d0\nCMP R14,RBX\nJNC 0x00402938\nMOV EAX,0x17\nSUB RAX,R8\nLEA RDI,[RSP + RAX*0x1]\nMOV RAX,RSP\nNEG RAX\nLEA RDX,[R8 + RAX*0x1 + -0x17]\nADD RDX,RBX\nMOV ESI,0x30\nCALL 0x00401760\nNOP dword ptr [RAX + RAX*0x1]\nDEC RBX\nCMP R14,RBX\nJC 0x00402930\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RBX\nCALL 0x004017b0\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p1089
S'41 56\n53\n48 83 ec 28\n48 89 f9\nc6 44 24 18 00\n48 8d 5c 24 17\n40 88 74 24 17\n4c 63 05 3c ab 20 00\n49 89 de\n4d 29 c6\n8b 05 2c ab 20 00\n83 f8 08\n74 2f\n83 f8 0a\n74 3e\n83 f8 10\n75 74\n0f 1f 44 00 00\n89 c8\n83 e0 0f\n0f b6 80 24 9c 40 00\n88 43 ff\n48 ff cb\n48 c1 e9 04\n75 e8\neb 55\n89 c8\n24 07\n0c 30\n88 43 ff\n48 ff cb\n48 c1 e9 03\n75 ee\neb 3b\n48 bf cd cc cc cc cc cc cc cc\n66 90\n48 89 c8\n48 f7 e7\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 ce\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n49 39 de\n73 34\nb8 17 00 00 00\n4c 29 c0\n48 8d 3c 04\n48 89 e0\n48 f7 d8\n49 8d 54 00 e9\n48 01 da\nbe 30 00 00 00\ne8 38 ee ff ff\n0f 1f 84 00 00 00 00 00\n48 ff cb\n49 39 de\n72 f8\n48 8b 35 89 a9 20 00\n48 89 df\ne8 69 ee ff ff\n48 83 c4 28\n5b\n41 5e\nc3\n'
p1090
S'.text:0000000000402850\n.text:0000000000402852\n.text:0000000000402853\n.text:0000000000402857\n.text:000000000040285a\n.text:000000000040285f\n.text:0000000000402864\n.text:0000000000402869\n.text:0000000000402870\n.text:0000000000402873\n.text:0000000000402876\n.text:000000000040287c\n.text:000000000040287f\n.text:0000000000402881\n.text:0000000000402884\n.text:0000000000402886\n.text:0000000000402889\n.text:000000000040288b\n.text:0000000000402890\n.text:0000000000402892\n.text:0000000000402895\n.text:000000000040289c\n.text:000000000040289f\n.text:00000000004028a2\n.text:00000000004028a6\n.text:00000000004028a8\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b4\n.text:00000000004028b6\n.text:00000000004028b9\n.text:00000000004028bc\n.text:00000000004028c0\n.text:00000000004028c2\n.text:00000000004028c4\n.text:00000000004028ce\n.text:00000000004028d0\n.text:00000000004028d3\n.text:00000000004028d6\n.text:00000000004028d8\n.text:00000000004028db\n.text:00000000004028e0\n.text:00000000004028e3\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028eb\n.text:00000000004028ef\n.text:00000000004028f2\n.text:00000000004028f6\n.text:00000000004028fa\n.text:00000000004028fd\n.text:00000000004028ff\n.text:0000000000402902\n.text:0000000000402904\n.text:0000000000402909\n.text:000000000040290c\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402916\n.text:000000000040291b\n.text:000000000040291e\n.text:0000000000402923\n.text:0000000000402928\n.text:0000000000402930\n.text:0000000000402933\n.text:0000000000402936\n.text:0000000000402938\n.text:000000000040293f\n.text:0000000000402942\n.text:0000000000402947\n.text:000000000040294b\n.text:000000000040294c\n.text:000000000040294e\n'
p1091
tp1092
sS'quotearg_style_mem'
p1093
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1094
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1095
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004061c0\n'
p1096
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1097
S'.text:0000000000406220\n.text:0000000000406223\n.text:0000000000406226\n.text:0000000000406228\n.text:000000000040622a\n.text:000000000040622c\n.text:000000000040622f\n.text:0000000000406232\n'
p1098
tp1099
sS'xalloc_die'
p1100
(S'\n__stdcall xalloc_die()\n'
p1101
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_00409fb9,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1102
S'PUSH RBX\nMOV EBX,dword ptr [0x0060d250]\nXOR EDI,EDI\nMOV ESI,0x40a91f\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004018f0\nCALL 0x004015e0\n'
p1103
S'53\n8b 1d 69 63 20 00\n31 ff\nbe 1f a9 40 00\nba 05 00 00 00\ne8 c8 a7 ff ff\n48 89 c1\n31 f6\nba b9 9f 40 00\n31 c0\n89 df\ne8 e5 a9 ff ff\ne8 d0 a6 ff ff\n'
p1104
S'.text:0000000000406ee0\n.text:0000000000406ee1\n.text:0000000000406ee7\n.text:0000000000406ee9\n.text:0000000000406eee\n.text:0000000000406ef3\n.text:0000000000406ef8\n.text:0000000000406efb\n.text:0000000000406efd\n.text:0000000000406f02\n.text:0000000000406f04\n.text:0000000000406f06\n.text:0000000000406f0b\n'
p1105
tp1106
sS'__sprintf_chk'
p1107
(S'\n__stdcall __sprintf_chk()\n'
p1108
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060d228)();\u000a  return;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060d228]\n'
p1110
S'ff 25 62 b8 20 00\n'
p1111
S'.plt:00000000004019c0\n'
p1112
tp1113
sS'quotearg_n_custom'
p1114
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1115
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1116
S'MOV R8,-0x1\nJMP 0x00406340\n'
p1117
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1118
S'.text:0000000000406330\n.text:0000000000406337\n'
p1119
tp1120
sS'__freading'
p1121
(S'\n__stdcall __freading()\n'
p1122
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060d188)();\u000a  return;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0060d188]\n'
p1124
S'ff 25 02 b9 20 00\n'
p1125
S'.plt:0000000000401880\n'
p1126
tp1127
sS'ldtoastr'
p1128
(S'\n__stdcall ldtoastr(char * buf, size_t bufsize, longdouble x)\n'
p1129
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint ldtoastr(char *buf,size_t bufsize,longdouble x)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  bool bVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  uint in_ECX;\u000a  ulong in_RDX;\u000a  float10 in_ST0;\u000a  float10 fVar7;\u000a  float10 in_ST1;\u000a  float10 in_ST2;\u000a  float10 in_ST3;\u000a  float10 in_ST4;\u000a  float10 fVar8;\u000a  float10 in_stack_00000008;\u000a  char format [11];\u000a  undefined local_47;\u000a  undefined local_46;\u000a  float10 local_3c;\u000a  \u000a  fVar7 = in_stack_00000008;\u000a  if (in_stack_00000008 <= (float10)0 || (float10)0 != in_stack_00000008) {\u000a    fVar7 = -in_stack_00000008;\u000a  }\u000a  local_47 = 0x25;\u000a  local_46 = 0x2d;\u000a  uVar6 = (ulong)((uint)in_RDX & 1);\u000a  lVar2 = (long)&local_46 + uVar6;\u000a  *(undefined *)((long)&local_46 + uVar6) = 0x2b;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 1) & 1);\u000a  lVar1 = lVar2 + uVar6;\u000a  *(undefined *)(uVar6 + lVar2) = 0x20;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 2) & 1);\u000a  lVar2 = lVar1 + uVar6;\u000a  *(undefined *)(uVar6 + lVar1) = 0x30;\u000a  uVar6 = (ulong)((uint)((in_RDX & 0xffffffff) >> 3) & 1);\u000a  *(undefined4 *)(uVar6 + lVar2) = 0x4c2a2e2a;\u000a  *(byte *)(uVar6 + 4 + lVar2) = (char)in_RDX * 2 & 0x20U ^ 0x67;\u000a  *(undefined *)(uVar6 + 5 + lVar2) = 0;\u000a  iVar4 = 0x12;\u000a  if (fVar7 < _DAT_0040a010) {\u000a    iVar4 = 1;\u000a  }\u000a  local_3c = in_stack_00000008;\u000a  fVar7 = in_ST4;\u000a  fVar8 = in_ST4;\u000a  iVar5 = __snprintf_chk(SUB168((undefined  [16])x,0),buf,bufsize,1,0xffffffffffffffff,&local_47,\u000a                         (ulong)in_ECX,iVar4);\u000a  if (-1 < iVar5) {\u000a    while ((bufsize <= (ulong)(long)iVar5 ||\u000a           (strtold(buf,(char **)0x0), bVar3 = in_ST0 != local_3c, in_ST0 = in_ST1, in_ST1 = in_ST2,\u000a           in_ST2 = in_ST3, in_ST3 = in_ST4, in_ST4 = fVar7, fVar7 = fVar8, bVar3))) {\u000a      iVar5 = __snprintf_chk(buf,bufsize,1,0xffffffffffffffff,&local_47,(ulong)in_ECX,iVar4 + 1);\u000a      if (0x13 < iVar4) {\u000a        return iVar5;\u000a      }\u000a      iVar4 = iVar4 + 1;\u000a      if (iVar5 < 0) {\u000a        return iVar5;\u000a      }\u000a    }\u000a  }\u000a  return iVar5;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R14D,ECX\nMOV R13,RSI\nMOV R12,RDI\nFLD tword ptr [RSP + 0x70]\nFLDZ\nFUCOMIP ST0,ST1\nFLD ST0\nFCHS\nFLD ST1\nFCMOVNBE ST0,ST1\nFSTP ST1\nMOV byte ptr [RSP + 0x21],0x25\nMOV byte ptr [RSP + 0x22],0x2d\nMOV EAX,EDX\nAND EAX,0x1\nLEA RCX,[RSP + RAX*0x1 + 0x22]\nMOV byte ptr [RSP + RAX*0x1 + 0x22],0x2b\nMOV EAX,EDX\nSHR EAX,1\nAND EAX,0x1\nLEA RSI,[RCX + RAX*0x1]\nMOV byte ptr [RAX + RCX*0x1],0x20\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x1\nLEA RCX,[RSI + RAX*0x1]\nMOV byte ptr [RAX + RSI*0x1],0x30\nMOV EAX,EDX\nSHR EAX,0x3\nAND EAX,0x1\nMOV dword ptr [RAX + RCX*0x1],0x4c2a2e2a\nADD DL,DL\nAND DL,0x20\nXOR DL,0x67\nMOV byte ptr [RAX + RCX*0x1 + 0x4],DL\nMOV byte ptr [RAX + RCX*0x1 + 0x5],0x0\nFLD tword ptr [0x0040a010]\nFUCOMIP ST0,ST1\nFSTP ST0\nMOV EAX,0x1\nMOV EBX,0x12\nCMOVA EBX,EAX\nFLD ST0\nFSTP tword ptr [RSP + 0x2c]\nFSTP tword ptr [RSP + 0x10]\nMOV dword ptr [RSP],EBX\nLEA R8,[RSP + 0x21]\nMOV EDX,0x1\nMOV RCX,-0x1\nXOR EAX,EAX\nMOV RSI,R13\nMOV R9D,R14D\nCALL 0x004015b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404f1f\nNOP dword ptr [RAX]\nMOVSXD RAX,EBP\nCMP RAX,R13\nJNC 0x00404ee0\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x004018e0\nFLD tword ptr [RSP + 0x2c]\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nJNZ 0x00404ee0\nJNP 0x00404f1f\nLEA R15D,[RBX + 0x1]\nFLD tword ptr [RSP + 0x2c]\nFSTP tword ptr [RSP + 0x10]\nMOV dword ptr [RSP],R15D\nMOV EDX,0x1\nMOV RCX,-0x1\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,R13\nLEA R8,[RSP + 0x21]\nMOV R9D,R14D\nCALL 0x004015b0\nMOV EBP,EAX\nCMP EBX,0x13\nJG 0x00404f1f\nTEST EBP,EBP\nMOV EBX,R15D\nJNS 0x00404ec0\nMOV EAX,EBP\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n41 89 ce\n49 89 f5\n49 89 fc\ndb 6c 24 70\nd9 ee\ndf e9\nd9 c0\nd9 e0\nd9 c1\ndb d1\ndd d9\nc6 44 24 21 25\nc6 44 24 22 2d\n89 d0\n83 e0 01\n48 8d 4c 04 22\nc6 44 04 22 2b\n89 d0\nd1 e8\n83 e0 01\n48 8d 34 01\nc6 04 08 20\n89 d0\nc1 e8 02\n83 e0 01\n48 8d 0c 06\nc6 04 30 30\n89 d0\nc1 e8 03\n83 e0 01\nc7 04 08 2a 2e 2a 4c\n00 d2\n80 e2 20\n80 f2 67\n88 54 08 04\nc6 44 08 05 00\ndb 2d 99 51 00 00\ndf e9\ndd d8\nb8 01 00 00 00\nbb 12 00 00 00\n0f 47 d8\nd9 c0\ndb 7c 24 2c\ndb 7c 24 10\n89 1c 24\n4c 8d 44 24 21\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n31 c0\n4c 89 ee\n45 89 f1\ne8 fd c6 ff ff\n89 c5\n85 ed\n78 66\n0f 1f 80 00 00 00 00\n48 63 c5\n4c 39 e8\n73 18\n31 f6\n4c 89 e7\ne8 0e ca ff ff\ndb 6c 24 2c\nd9 c9\ndf e9\ndd d8\n75 02\n7b 3f\n44 8d 7b 01\ndb 6c 24 2c\ndb 7c 24 10\n44 89 3c 24\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n31 c0\n4c 89 e7\n4c 89 ee\n4c 8d 44 24 21\n45 89 f1\ne8 9f c6 ff ff\n89 c5\n83 fb 13\n7f 07\n85 ed\n44 89 fb\n79 a1\n89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:0000000000404df0\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df5\n.text:0000000000404df7\n.text:0000000000404df9\n.text:0000000000404dfa\n.text:0000000000404dfe\n.text:0000000000404e01\n.text:0000000000404e04\n.text:0000000000404e07\n.text:0000000000404e0b\n.text:0000000000404e0d\n.text:0000000000404e0f\n.text:0000000000404e11\n.text:0000000000404e13\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e19\n.text:0000000000404e1e\n.text:0000000000404e23\n.text:0000000000404e25\n.text:0000000000404e28\n.text:0000000000404e2d\n.text:0000000000404e32\n.text:0000000000404e34\n.text:0000000000404e36\n.text:0000000000404e39\n.text:0000000000404e3d\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e46\n.text:0000000000404e49\n.text:0000000000404e4d\n.text:0000000000404e51\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e59\n.text:0000000000404e60\n.text:0000000000404e62\n.text:0000000000404e65\n.text:0000000000404e68\n.text:0000000000404e6c\n.text:0000000000404e71\n.text:0000000000404e77\n.text:0000000000404e79\n.text:0000000000404e7b\n.text:0000000000404e80\n.text:0000000000404e85\n.text:0000000000404e88\n.text:0000000000404e8a\n.text:0000000000404e8e\n.text:0000000000404e92\n.text:0000000000404e95\n.text:0000000000404e9a\n.text:0000000000404e9f\n.text:0000000000404ea6\n.text:0000000000404ea8\n.text:0000000000404eab\n.text:0000000000404eae\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ed2\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404eda\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee0\n.text:0000000000404ee4\n.text:0000000000404ee8\n.text:0000000000404eec\n.text:0000000000404ef0\n.text:0000000000404ef5\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f0c\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1a\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f21\n.text:0000000000404f25\n.text:0000000000404f26\n.text:0000000000404f28\n.text:0000000000404f2a\n.text:0000000000404f2c\n.text:0000000000404f2e\n.text:0000000000404f2f\n'
p1133
tp1134
sS'check_and_close'
p1135
(S'\n__stdcall check_and_close()\n'
p1136
V\u000a_Bool check_and_close(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  uint *puVar5;\u000a  undefined uVar6;\u000a  uint in_EDI;\u000a  \u000a  if (in_stream == (FILE *)0x0) {\u000a    uVar6 = 1;\u000a    goto LAB_00404355;\u000a  }\u000a  iVar2 = ferror_unlocked((FILE *)in_stream);\u000a  if (iVar2 == 0) {\u000a    if ((*file_list[-1] != '-') || (file_list[-1][1] != 0)) {\u000a      iVar2 = rpl_fclose(in_stream);\u000a      if (iVar2 != 0) {\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar1 = *puVar5;\u000a        uVar6 = 0;\u000a        pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a        error(0,(ulong)uVar1,&DAT_00409fb9,pcVar4);\u000a        goto LAB_0040434a;\u000a      }\u000a    }\u000a    uVar6 = 1;\u000a  }\u000a  else {\u000a    uVar3 = dcgettext(0,"%s: read error",5);\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)in_EDI,uVar3,pcVar4);\u000a    if ((*file_list[-1] == '-') && (file_list[-1][1] == 0)) {\u000a      uVar6 = 0;\u000a    }\u000a    else {\u000a      rpl_fclose(in_stream);\u000a      uVar6 = 0;\u000a    }\u000a  }\u000aLAB_0040434a:\u000a  in_stream = (FILE *)0x0;\u000aLAB_00404355:\u000a  iVar2 = ferror_unlocked(stdout);\u000a  if (iVar2 != 0) {\u000a    uVar6 = 0;\u000a    uVar3 = dcgettext(0,"write error",5);\u000a    error(0,0,uVar3,uVar3);\u000a  }\u000a  return (_Bool)uVar6;\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBX,EDI\nMOV RDI,qword ptr [0x0060d3f0]\nTEST RDI,RDI\nJZ 0x004042e9\nCALL 0x004017c0\nTEST EAX,EAX\nJZ 0x004042ed\nXOR EDI,EDI\nMOV ESI,0x409ec1\nMOV EDX,0x5\nCALL 0x004016c0\nMOV R14,RAX\nMOV RDX,qword ptr [0x0060d410]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004062e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R14\nCALL 0x004018f0\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RAX + -0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004042d9\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00404348\nMOV RDI,qword ptr [0x0060d3f0]\nCALL 0x00407500\nXOR EBX,EBX\nJMP 0x0040434a\nMOV BL,0x1\nJMP 0x00404355\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RAX + -0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00404303\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00404344\nMOV RDI,qword ptr [0x0060d3f0]\nCALL 0x00407500\nTEST EAX,EAX\nJZ 0x00404344\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060d410]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004062e0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004018f0\nJMP 0x0040434a\nMOV BL,0x1\nJMP 0x0040434a\nXOR EBX,EBX\nMOV qword ptr [0x0060d3f0],0x0\nMOV RDI,qword ptr [0x0060d2c8]\nCALL 0x004017c0\nTEST EAX,EAX\nJZ 0x00404389\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x409ed0\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004018f0\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1138
S'55\n41 56\n53\n89 fb\n48 8b 3d 73 91 20 00\n48 85 ff\n74 67\ne8 39 d5 ff ff\n85 c0\n74 62\n31 ff\nbe c1 9e 40 00\nba 05 00 00 00\ne8 24 d4 ff ff\n49 89 c6\n48 8b 15 6a 91 20 00\n31 ff\nbe 03 00 00 00\ne8 2e 20 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 f2\ne8 2d d6 ff ff\n48 8b 05 1e 91 20 00\n48 8b 40 f8\n80 38 2d\n75 06\n80 78 01 00\n74 6f\n48 8b 3d 10 91 20 00\ne8 1b 32 00 00\n31 db\neb 61\nb3 01\neb 68\n48 8b 05 f4 90 20 00\n48 8b 40 f8\n80 38 2d\n75 06\n80 78 01 00\n74 41\n48 8b 3d e6 90 20 00\ne8 f1 31 00 00\n85 c0\n74 31\ne8 d8 d2 ff ff\n8b 28\n48 8b 15 ef 90 20 00\n31 db\n31 ff\nbe 03 00 00 00\ne8 b1 1f 00 00\n48 89 c1\n31 ff\nba b9 9f 40 00\n31 c0\n89 ee\ne8 ae d5 ff ff\neb 06\nb3 01\neb 02\n31 db\n48 c7 05 9b 90 20 00 00 00 00 00\n48 8b 3d 6c 8f 20 00\ne8 5f d4 ff ff\n85 c0\n74 24\n31 db\n31 ff\nbe d0 9e 40 00\nba 05 00 00 00\ne8 48 d3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 67 d5 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1139
S'.text:0000000000404270\n.text:0000000000404271\n.text:0000000000404273\n.text:0000000000404274\n.text:0000000000404276\n.text:000000000040427d\n.text:0000000000404280\n.text:0000000000404282\n.text:0000000000404287\n.text:0000000000404289\n.text:000000000040428b\n.text:000000000040428d\n.text:0000000000404292\n.text:0000000000404297\n.text:000000000040429c\n.text:000000000040429f\n.text:00000000004042a6\n.text:00000000004042a8\n.text:00000000004042ad\n.text:00000000004042b2\n.text:00000000004042b5\n.text:00000000004042b7\n.text:00000000004042b9\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c3\n.text:00000000004042ca\n.text:00000000004042ce\n.text:00000000004042d1\n.text:00000000004042d3\n.text:00000000004042d7\n.text:00000000004042d9\n.text:00000000004042e0\n.text:00000000004042e5\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042ed\n.text:00000000004042f4\n.text:00000000004042f8\n.text:00000000004042fb\n.text:00000000004042fd\n.text:0000000000404301\n.text:0000000000404303\n.text:000000000040430a\n.text:000000000040430f\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431a\n.text:0000000000404321\n.text:0000000000404323\n.text:0000000000404325\n.text:000000000040432a\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404334\n.text:0000000000404339\n.text:000000000040433b\n.text:000000000040433d\n.text:0000000000404342\n.text:0000000000404344\n.text:0000000000404346\n.text:0000000000404348\n.text:000000000040434a\n.text:0000000000404355\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404367\n.text:0000000000404369\n.text:000000000040436e\n.text:0000000000404373\n.text:0000000000404378\n.text:000000000040437b\n.text:000000000040437d\n.text:000000000040437f\n.text:0000000000404381\n.text:0000000000404384\n.text:0000000000404389\n.text:000000000040438b\n.text:000000000040438c\n.text:000000000040438e\n.text:000000000040438f\n'
p1140
tp1141
sS'fputs_unlocked'
p1142
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060d120)();\u000a  return iVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060d120]\n'
p1145
S'ff 25 6a b9 20 00\n'
p1146
S'.plt:00000000004017b0\n'
p1147
tp1148
sS'main'
p1149
(S'\n__stdcall main(char * * argv)\n'
p1150
V\u000a/* WARNING: Removing unreachable block (ram,0x004024b7) */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  strtol_error sVar4;\u000a  int iVar5;\u000a  ptrdiff_t pVar6;\u000a  uintmax_t uVar7;\u000a  undefined8 uVar8;\u000a  uint *puVar9;\u000a  uintmax_t *valid_suffixes;\u000a  option *long_options;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  char *s;\u000a  int *piVar12;\u000a  char **in_RSI;\u000a  size_t sVar13;\u000a  ulong uVar14;\u000a  ulong uVar15;\u000a  long lVar16;\u000a  bool bVar17;\u000a  undefined8 unaff_R14;\u000a  uintmax_t uVar18;\u000a  char *pcVar19;\u000a  uintmax_t w_tmp;\u000a  undefined auStack144 [23];\u000a  char acStack121 [17];\u000a  ulong uStack104;\u000a  ulong uStack96;\u000a  uint local_54;\u000a  uintmax_t local_50;\u000a  uint local_44;\u000a  uintmax_t local_40;\u000a  uintmax_t local_38;\u000a  \u000a  uStack96 = 0x401ebc;\u000a  set_program_name(*in_RSI);\u000a  uStack96 = 0x401ecb;\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  uStack96 = 0x401eda;\u000a  bindtextdomain(0x40995b,"/usr/local/share/locale");\u000a  uStack96 = 0x401ee4;\u000a  textdomain(0x40995b);\u000a  uStack96 = 0x401eee;\u000a  atexit(close_stdout);\u000a  integral_type_size[5] = NO_SIZE;\u000a  integral_type_size[6] = NO_SIZE;\u000a  integral_type_size[7] = NO_SIZE;\u000a  integral_type_size[0] = NO_SIZE;\u000a  integral_type_size[3] = NO_SIZE;\u000a  integral_type_size._4_8_ = 0x200000001;\u000a  integral_type_size[4] = INT;\u000a  integral_type_size[8] = LONG_LONG;\u000a  fp_type_size[12] = NO_SIZE;\u000a  fp_type_size[13] = NO_SIZE;\u000a  fp_type_size[14] = NO_SIZE;\u000a  fp_type_size[15] = NO_SIZE;\u000a  fp_type_size[9] = NO_SIZE;\u000a  fp_type_size[10] = NO_SIZE;\u000a  fp_type_size[11] = NO_SIZE;\u000a  fp_type_size[5] = NO_SIZE;\u000a  fp_type_size[6] = NO_SIZE;\u000a  fp_type_size[7] = NO_SIZE;\u000a  fp_type_size[0] = NO_SIZE;\u000a  fp_type_size[1] = NO_SIZE;\u000a  fp_type_size[2] = NO_SIZE;\u000a  fp_type_size[3] = NO_SIZE;\u000a  fp_type_size[4] = FLOAT_SINGLE;\u000a  fp_type_size[16] = FLOAT_LONG_DOUBLE;\u000a  fp_type_size[8] = FLOAT_DOUBLE;\u000a  n_specs = 0;\u000a  n_specs_allocated = 0;\u000a  spec = (tspec *)0x0;\u000a  address_base = 8;\u000a  address_pad_len = 7;\u000a  flag_dump_strings = 0;\u000a  uVar18 = CONCAT71((int7)((ulong)unaff_R14 >> 8),1);\u000a  bVar17 = false;\u000a  local_44 = 0;\u000a  local_38 = 0x200000001;\u000a  format_address = format_address_std;\u000aLAB_00401fc8:\u000a  local_54 = 0xffffffff;\u000a  uStack96 = 0x401fe7;\u000a  uVar3 = getopt_long((ulong)argv & 0xffffffff);\u000a  uStack104 = (ulong)uVar3;\u000a  switch(uVar3) {\u000a  case 0x41:\u000a    switch(*optarg) {\u000a    case 'd':\u000a      address_base = 10;\u000a      break;\u000a    default:\u000a      uStack96 = 0x402239;\u000a      uVar8 = dcgettext(0,\u000a                        "invalid output address radix \u005c'%c\u005c'; it must be one character from [doxn]",\u000a                        5);\u000a      uStack96 = 0x402254;\u000a      error(1,0,uVar8,(ulong)(uint)(int)*optarg);\u000a      bVar17 = true;\u000a      goto LAB_00401fc8;\u000a    case 'n':\u000a      address_pad_len = 0;\u000a      bVar17 = true;\u000a      format_address = format_address_none;\u000a      goto LAB_00401fc8;\u000a    case 'o':\u000a      address_base = 8;\u000a      break;\u000a    case 'x':\u000a      address_base = 0x10;\u000a      address_pad_len = 6;\u000a      bVar17 = true;\u000a      format_address = format_address_std;\u000a      goto LAB_00401fc8;\u000a    }\u000a    address_pad_len = 7;\u000a    bVar17 = true;\u000a    format_address = format_address_std;\u000a    goto LAB_00401fc8;\u000a  case 0x42:\u000a  case 0x6f:\u000a    s = "o2";\u000a    break;\u000a  case 0x44:\u000a    s = "u4";\u000a    break;\u000a  case 0x46:\u000a  case 0x65:\u000a    s = "fD";\u000a    break;\u000a  case 0x48:\u000a  case 0x58:\u000a    s = "x4";\u000a    break;\u000a  case 0x49:\u000a  case 0x4c:\u000a  case 0x6c:\u000a    s = "dL";\u000a    break;\u000a  case 0x4e:\u000a    limit_bytes_to_format = 1;\u000a    valid_suffixes = &max_bytes_to_format;\u000a    goto LAB_0040210d;\u000a  case 0x4f:\u000a    s = "o4";\u000a    break;\u000a  case 0x53:\u000a    if (optarg == (char *)0x0) {\u000a      uVar7 = 3;\u000a    }\u000a    else {\u000a      uStack96 = 0x4020af;\u000a      sVar4 = xstrtoumax(optarg,(char **)0x0,(uintmax_t *)0x0,(char *)&local_50);\u000a      uVar7 = local_50;\u000a      if (sVar4 != LONGINT_OK) goto LAB_0040282d;\u000a    }\u000a    flag_dump_strings = 1;\u000a    bVar17 = true;\u000a    string_min = uVar7;\u000a    goto LAB_00401fc8;\u000a  case 0x61:\u000a    s = "a";\u000a    break;\u000a  case 0x62:\u000a    s = "o1";\u000a    break;\u000a  case 99:\u000a    s = "c";\u000a    break;\u000a  case 100:\u000a    s = "u2";\u000a    break;\u000a  case 0x66:\u000a    s = "fF";\u000a    break;\u000a  case 0x68:\u000a  case 0x78:\u000a    s = "x2";\u000a    break;\u000a  case 0x69:\u000a    s = "dI";\u000a    break;\u000a  case 0x6a:\u000a    valid_suffixes = &n_bytes_to_skip;\u000aLAB_0040210d:\u000a    uStack96 = 0x402118;\u000a    sVar4 = xstrtoumax(optarg,(char **)0x0,(uintmax_t *)0x0,(char *)valid_suffixes);\u000a    bVar17 = true;\u000a    if (sVar4 != LONGINT_OK) {\u000aLAB_0040282d:\u000a      acStack121[0] = (char)local_54;\u000a      long_options = (option *)(ulong)sVar4;\u000a      uStack96 = 0x402847;\u000a      xstrtol_fatal(long_options,(char *)(ulong)local_54);\u000a      acStack121[1] = 0;\u000a      s = acStack121;\u000a      lVar16 = (long)address_pad_len;\u000a      pcVar19 = s + -lVar16;\u000a      if (address_base == 8) {\u000a        do {\u000a          s[-1] = (byte)long_options & 7 | 0x30;\u000a          s = s + -1;\u000a          long_options = (option *)((ulong)long_options >> 3);\u000a        } while (long_options != (option *)0x0);\u000a      }\u000a      else {\u000a        if (address_base == 10) {\u000a          do {\u000a            s[-1] = (char)long_options +\u000a                    ((byte)((SUB168(ZEXT816(long_options) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                            0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a            s = s + -1;\u000a            bVar17 = (option *)0x9 < long_options;\u000a            long_options = (option *)((ulong)long_options / 10);\u000a          } while (bVar17);\u000a        }\u000a        else {\u000a          if (address_base == 0x10) {\u000a            do {\u000a              s[-1] = "0123456789abcdef"[(ulong)((uint)long_options & 0xf)];\u000a              s = s + -1;\u000a              long_options = (option *)((ulong)long_options >> 4);\u000a            } while (long_options != (option *)0x0);\u000a          }\u000a        }\u000a      }\u000a      uStack96 = uVar18;\u000a      if (pcVar19 < s) {\u000a        uStack96 = uVar18;\u000a        memset(acStack121 + -lVar16,0x30,(size_t)(s + ((lVar16 + -0x17) - (long)auStack144)));\u000a        do {\u000a          s = s + -1;\u000a        } while (pcVar19 < s);\u000a      }\u000a      iVar5 = fputs_unlocked(s,(FILE *)stdout);\u000a      return iVar5;\u000a    }\u000a    goto LAB_00401fc8;\u000a  case 0x73:\u000a    s = "d2";\u000a    break;\u000a  case 0x74:\u000a    uStack96 = 0x40213e;\u000a    _Var1 = decode_format_string(optarg);\u000a    uVar18 = uVar18 & 0xffffffffffffff00 | (ulong)((byte)uVar18 & _Var1);\u000a    bVar17 = true;\u000a    goto LAB_00401fc8;\u000a  case 0x76:\u000a    abbreviate_duplicate_blocks = 1;\u000a    bVar17 = true;\u000a    goto LAB_00401fc8;\u000a  case 0x77:\u000a    bVar17 = true;\u000a    if (optarg == (char *)0x0) {\u000a      uVar7 = 0x20;\u000a    }\u000a    else {\u000a      uStack96 = 0x402187;\u000a      sVar4 = xstrtoumax(optarg,(char **)0x0,(uintmax_t *)0xa,(char *)&local_40);\u000a      uVar7 = local_40;\u000a      if (sVar4 != LONGINT_OK) goto LAB_0040282d;\u000a    }\u000a    local_44 = (uint)CONCAT71((int7)(uVar7 >> 8),1);\u000a    local_38 = uVar7;\u000a    goto LAB_00401fc8;\u000a  case 0x80:\u000a    traditional = 1;\u000a    goto LAB_00401fc8;\u000a  case 0x81:\u000a    uStack96 = 0x4021ca;\u000a    pVar6 = __xargmatch_internal("--endian",optarg,endian_args,(char *)endian_types,4,argmatch_die);\u000a    if (endian_types[pVar6] == endian_little) {\u000a      input_swap = false;\u000a    }\u000a    else {\u000a      if (endian_types[pVar6] == endian_big) {\u000a        input_swap = true;\u000a      }\u000a    }\u000a    goto LAB_00401fc8;\u000a  case 0xffffff7d:\u000a    uStack96 = 0x402815;\u000a    version_etc(stdout,"od","GNU coreutils",Version,"Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    uStack96 = 0x40281c;\u000a    exit(0);\u000a  case 0xffffff7e:\u000a    uStack96 = 0x402823;\u000a    usage(0);\u000a  default:\u000a    uStack96 = 0x40282d;\u000a    sVar4 = usage();\u000a    goto LAB_0040282d;\u000a  case 0xffffffff:\u000a    uVar3 = 1;\u000a    if ((uVar18 & 1) != 0) {\u000a      if ((flag_dump_strings == 1) && (n_specs != 0)) {\u000a        uStack96 = 0x4022fc;\u000a        uVar8 = dcgettext(0,"no type may be specified when dumping strings",5);\u000a        uStack96 = 0x402310;\u000a        error(1,0,uVar8,uVar8);\u000a      }\u000a      iVar5 = (int)((ulong)argv & 0xffffffff) - optind;\u000a      if ((bVar17) && (traditional != 1)) {\u000ajoined_r0x0040240d:\u000a        local_40 = uVar18;\u000a        if (flag_pseudo_start == 1) goto LAB_00402564;\u000a      }\u000a      else {\u000a        if (iVar5 == 3) {\u000a          iVar5 = 3;\u000a          if (traditional == 1) {\u000a            uStack96 = 0x4023af;\u000a            _Var1 = parse_old_offset(in_RSI[(long)optind + 1],&local_50);\u000a            if (_Var1 != false) {\u000a              uStack96 = 0x4023cd;\u000a              _Var1 = parse_old_offset(in_RSI[(long)optind + 2],&local_40);\u000a              if (_Var1 != false) {\u000a                n_bytes_to_skip = local_50;\u000a                flag_pseudo_start = 1;\u000a                in_RSI[(long)optind + 2] = in_RSI[(long)optind];\u000a                in_RSI = in_RSI + 2;\u000a                iVar5 = 1;\u000a                uVar18 = local_40;\u000a                goto joined_r0x0040240d;\u000a              }\u000a            }\u000a          }\u000a          goto LAB_004024bc;\u000a        }\u000a        if (iVar5 != 2) {\u000a          if (iVar5 != 1) goto LAB_004024bc;\u000a          if ((traditional != 0) || (*in_RSI[(long)optind] == '+')) {\u000a            uStack96 = 0x402368;\u000a            _Var1 = parse_old_offset(in_RSI[(long)optind],&local_50);\u000a            if (_Var1 != false) {\u000a              in_RSI = in_RSI + 1;\u000a              iVar5 = 0;\u000a              n_bytes_to_skip = local_50;\u000a              goto joined_r0x0040240d;\u000a            }\u000a          }\u000aLAB_00402556:\u000a          iVar5 = 1;\u000a          goto joined_r0x0040240d;\u000a        }\u000a        if (((traditional == 0) && ((int)*in_RSI[(long)optind + 1] != 0x2b)) &&\u000a           (iVar5 = 2, 9 < (int)*in_RSI[(long)optind + 1] - 0x30U)) {\u000aLAB_004024bc:\u000a          if ((traditional != 1) || (iVar5 < 2)) goto joined_r0x0040240d;\u000a          uStack96 = 0x4024e3;\u000a          uVar8 = dcgettext(0,"extra operand %s",5);\u000a          uStack96 = 0x4024f7;\u000a          s = quote(in_RSI[(long)optind + 1]);\u000a          uStack96 = 0x402508;\u000a          error(0,0,uVar8,s);\u000a          uStack96 = 0x402519;\u000a          uVar8 = dcgettext(0,"compatibility mode supports at most one file",5);\u000a          uStack96 = 0x40252c;\u000a          error(0,0,&DAT_00409fb9,uVar8);\u000a          uStack96 = 0x402536;\u000a          usage(1);\u000aLAB_00402536:\u000a          n_bytes_to_skip = local_40;\u000a          in_RSI[(long)optind + 1] = in_RSI[(long)optind];\u000a          in_RSI = in_RSI + 1;\u000a          goto LAB_00402556;\u000a        }\u000a        uStack96 = 0x402459;\u000a        _Var1 = parse_old_offset(in_RSI[(long)optind + 1],&local_40);\u000a        iVar5 = 2;\u000a        if (_Var1 == false) goto LAB_004024bc;\u000a        if (traditional != 1) goto LAB_00402536;\u000a        uStack96 = 0x402484;\u000a        _Var1 = parse_old_offset(in_RSI[(long)optind],&local_50);\u000a        if (_Var1 == false) goto LAB_00402536;\u000a        n_bytes_to_skip = local_50;\u000a        flag_pseudo_start = 1;\u000a        in_RSI = in_RSI + 2;\u000a        iVar5 = 0;\u000aLAB_00402564:\u000a        if (format_address == format_address_none) {\u000a          address_base = 8;\u000a          address_pad_len = 7;\u000a          format_address = format_address_paren;\u000a        }\u000a        else {\u000a          format_address = format_address_label;\u000a        }\u000a      }\u000a      if ((limit_bytes_to_format == 1) &&\u000a         (end_offset = max_bytes_to_format + n_bytes_to_skip,\u000a         CARRY8(max_bytes_to_format,n_bytes_to_skip))) {\u000a        uStack96 = 0x4025ca;\u000a        uVar8 = dcgettext(0,"skip-bytes + read-bytes is too large",5);\u000a        uStack96 = 0x4025de;\u000a        error(1,0,uVar8,uVar8);\u000a      }\u000a      if (n_specs == 0) {\u000a        uStack96 = 0x4025f2;\u000a        decode_format_string("oS");\u000a      }\u000a      file_list = default_file_list;\u000a      if (0 < iVar5) {\u000a        file_list = in_RSI + (long)optind;\u000a      }\u000a      uStack96 = 0x402614;\u000a      _Var1 = open_next_file();\u000a      if (in_stream != (FILE *)0x0) {\u000a        uStack96 = 0x402631;\u000a        _Var2 = skip(n_bytes_to_skip);\u000a        _Var1 = (_Bool)(_Var1 & _Var2);\u000a        if (in_stream != (FILE *)0x0) {\u000a          pseudo_offset = 0;\u000a          if (flag_pseudo_start != 0) {\u000a            pseudo_offset = local_40 - n_bytes_to_skip;\u000a          }\u000a          uStack96 = 0x402663;\u000a          uVar3 = get_lcm();\u000a          uVar10 = local_38;\u000a          if ((local_44 & 1) == 0) {\u000a            if ((int)uVar3 < 0x10) {\u000a              uVar3 = 0x10 - (int)(0x10 % (long)(int)uVar3);\u000a            }\u000aLAB_004026c5:\u000a            uVar10 = (long)(int)uVar3;\u000a          }\u000a          else {\u000a            if ((local_38 == 0) || (local_38 % (long)(int)uVar3 != 0)) {\u000a              uStack96 = 0x4026ae;\u000a              uVar8 = dcgettext(0,"warning: invalid width %lu; using %d instead",5);\u000a              uStack96 = 0x4026c5;\u000a              error(0,0,uVar8,uVar10,(ulong)uVar3);\u000a              goto LAB_004026c5;\u000a            }\u000a          }\u000a          bytes_per_block = uVar10;\u000a          if (n_specs != 0) {\u000a            piVar12 = &spec->field_width;\u000a            uVar11 = 0;\u000a            uVar14 = 0;\u000a            do {\u000a              uVar15 = (long)(int)(uVar10 / (ulong)(long)width_bytes[(ulong)(uint)piVar12[-6]]) *\u000a                       ((long)*piVar12 + 1);\u000a              if (uVar15 <= uVar14) {\u000a                uVar15 = uVar14;\u000a              }\u000a              uVar11 = uVar11 + 1;\u000a              piVar12 = piVar12 + 10;\u000a              uVar14 = uVar15;\u000a            } while (uVar11 < n_specs);\u000a            bytes_per_block = uVar10;\u000a            if (n_specs != 0) {\u000a              piVar12 = &spec->pad_width;\u000a              sVar13 = n_specs;\u000a              bytes_per_block = uVar10;\u000a              do {\u000a                *piVar12 = (int)uVar15 -\u000a                           (int)(uVar10 / (ulong)(long)width_bytes[(ulong)(uint)piVar12[-7]]) *\u000a                           piVar12[-1];\u000a                piVar12 = piVar12 + 10;\u000a                sVar13 = sVar13 - 1;\u000a              } while (sVar13 != 0);\u000a            }\u000a          }\u000a          if (flag_dump_strings == 1) {\u000a            uStack96 = 0x402785;\u000a            _Var2 = dump_strings();\u000a          }\u000a          else {\u000a            uStack96 = 0x40278c;\u000a            _Var2 = dump();\u000a          }\u000a          _Var1 = (_Bool)(_Var1 & _Var2);\u000a        }\u000a      }\u000a      if (have_read_stdin == 1) {\u000a        uStack96 = 0x4027a8;\u000a        iVar5 = rpl_fclose(stdin);\u000a        if (iVar5 == -1) {\u000a          uStack96 = 0x4027b2;\u000a          puVar9 = (uint *)__errno_location();\u000a          uVar3 = *puVar9;\u000a          uStack96 = 0x4027c5;\u000a          uVar8 = dcgettext(0,"standard input",5);\u000a          uStack96 = 0x4027d9;\u000a          error(1,(ulong)uVar3,uVar8,uVar8);\u000a        }\u000a      }\u000a      uVar3 = (uint)_Var1 ^ 1;\u000a    }\u000a    return (int)uVar3;\u000a  }\u000a  uStack96 = 0x401fc5;\u000a  _Var1 = decode_format_string(s);\u000a  uVar18 = uVar18 & 0xffffffffffffff00 | (ulong)((byte)uVar18 & _Var1);\u000a  goto LAB_00401fc8;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x00404f30\nMOV EDI,0x6\nMOV ESI,0x40a6e9\nCALL 0x004018b0\nMOV EDI,0x40995b\nMOV ESI,0x4098ca\nCALL 0x004016b0\nMOV EDI,0x40995b\nCALL 0x00401690\nMOV EDI,0x404a90\nCALL 0x00407bb0\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0x0060d320],XMM0\nMOVAPS xmmword ptr [0x0060d310],XMM0\nMOV RAX,0x200000001\nMOV qword ptr [0x0060d314],RAX\nMOV dword ptr [0x0060d320],0x3\nMOV dword ptr [0x0060d330],0x5\nMOVAPS xmmword ptr [0x0060d370],XMM0\nMOVAPS xmmword ptr [0x0060d360],XMM0\nMOVAPS xmmword ptr [0x0060d350],XMM0\nMOVAPS xmmword ptr [0x0060d340],XMM0\nMOV dword ptr [0x0060d350],0x6\nMOV dword ptr [0x0060d380],0x8\nMOV dword ptr [0x0060d360],0x7\nMOV qword ptr [0x0060d388],0x0\nMOV qword ptr [0x0060d390],0x0\nMOV qword ptr [0x0060d398],0x0\nMOV qword ptr [0x0060d3a0],0x402850\nMOV dword ptr [0x0060d3a8],0x8\nMOV dword ptr [0x0060d3ac],0x7\nMOV byte ptr [0x0060d3b0],0x0\nMOV R14B,0x1\nXOR R13D,R13D\nLEA R15,[RSP + 0x4]\nMOV dword ptr [RSP + 0x14],0x0\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00401fc8\nCALL 0x00402960\nAND R14B,AL\nMOV dword ptr [RSP + 0x4],0xffffffff\nMOV EDX,0x408740\nMOV ECX,0x408770\nMOV EDI,EBP\nMOV RSI,R12\nMOV R8,R15\nCALL 0x004016f0\nMOV EBX,EAX\nLEA EAX,[0x83 + RBX]\nCMP EAX,0x104\nJA 0x00402823\nJMP qword ptr [0x407c10 + RAX*0x8]\nMOV EDI,0x409948\nJMP 0x00401fc0\nMOV EDI,0x40994e\nJMP 0x00401fc0\nMOV EDI,0x40993c\nJMP 0x00401fc0\nMOV EDI,0x409942\nJMP 0x00401fc0\nMOV EDI,0x409954\nJMP 0x00401fc0\nMOV RAX,qword ptr [0x0060d2e0]\nMOVSX EAX,byte ptr [RAX]\nADD EAX,-0x64\nCMP EAX,0x14\nJA 0x00402228\nJMP qword ptr [0x408438 + RAX*0x8]\nMOV qword ptr [0x0060d3a0],0x402850\nMOV dword ptr [0x0060d3a8],0xa\nJMP 0x0040228e\nMOV EDI,0x409936\nJMP 0x00401fc0\nMOV byte ptr [0x0060d3c0],0x1\nMOV RDI,qword ptr [0x0060d2e0]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x60d3c8\nJMP 0x0040210d\nMOV EDI,0x40994b\nJMP 0x00401fc0\nMOV RDI,qword ptr [0x0060d2e0]\nTEST RDI,RDI\nJZ 0x004021eb\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV R8D,0x408730\nCALL 0x004071d0\nTEST EAX,EAX\nJNZ 0x0040282d\nMOV RAX,qword ptr [RSP + 0x8]\nJMP 0x004021f0\nMOV EDI,0x409e70\nJMP 0x00401fc0\nMOV EDI,0x409933\nJMP 0x00401fc0\nMOV EDI,0x409e85\nJMP 0x00401fc0\nMOV EDI,0x409939\nJMP 0x00401fc0\nMOV EDI,0x40993f\nJMP 0x00401fc0\nMOV EDI,0x409945\nJMP 0x00401fc0\nMOV RDI,qword ptr [0x0060d2e0]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x60d3b8\nMOV R8D,0x408730\nCALL 0x004071d0\nMOV R13B,0x1\nTEST EAX,EAX\nJZ 0x00401fc8\nJMP 0x0040282d\nMOV EDI,0x409951\nJMP 0x00401fc0\nMOV RDI,qword ptr [0x0060d2e0]\nCALL 0x00402960\nAND R14B,AL\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV byte ptr [0x0060d3d8],0x1\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV R13B,0x1\nCMP qword ptr [0x0060d2e0],0x0\nJZ 0x00402206\nMOV RDI,qword ptr [0x0060d2e0]\nLEA RCX,[RSP + 0x18]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x40a6e9\nCALL 0x004071d0\nTEST EAX,EAX\nJNZ 0x0040282d\nMOV RAX,qword ptr [RSP + 0x18]\nJMP 0x0040220b\nMOV byte ptr [0x0060d3d9],0x1\nJMP 0x00401fc8\nMOV RSI,qword ptr [0x0060d2e0]\nMOV R9,qword ptr [0x0060d248]\nMOV EDI,0x40992a\nMOV EDX,0x408900\nMOV ECX,0x4088f0\nMOV R8D,0x4\nCALL 0x00404990\nMOV EAX,dword ptr [0x4088f0 + RAX*0x4]\nTEST EAX,EAX\nJZ 0x0040221b\nCMP EAX,0x1\nJNZ 0x00401fc8\nMOV AL,0x1\nMOV byte ptr [0x0060d3da],AL\nJMP 0x00401fc8\nMOV EAX,0x3\nMOV qword ptr [0x0060d3d0],RAX\nMOV byte ptr [0x0060d3b0],0x1\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV EAX,0x20\nMOV qword ptr [RSP + 0x20],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nJMP 0x00401fc8\nXOR EAX,EAX\nMOV byte ptr [0x0060d3da],AL\nJMP 0x00401fc8\nXOR EDI,EDI\nMOV ESI,0x4098e2\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0060d2e0]\nMOVSX ECX,byte ptr [RAX]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x004018f0\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV qword ptr [0x0060d3a0],0x402950\nMOV dword ptr [0x0060d3ac],0x0\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV qword ptr [0x0060d3a0],0x402850\nMOV dword ptr [0x0060d3a8],0x8\nMOV dword ptr [0x0060d3ac],0x7\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV qword ptr [0x0060d3a0],0x402850\nMOV dword ptr [0x0060d3a8],0x10\nMOV dword ptr [0x0060d3ac],0x6\nMOV R13B,0x1\nJMP 0x00401fc8\nMOV EBX,0x1\nTEST R14B,0x1\nJZ 0x004027dc\nCMP byte ptr [0x0060d3b0],0x1\nJNZ 0x00402310\nMOV RAX,qword ptr [0x0060d388]\nTEST RAX,RAX\nJZ 0x00402310\nXOR EDI,EDI\nMOV ESI,0x409972\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004018f0\nSUB EBP,dword ptr [0x0060d2d8]\nTEST R13B,0x1\nJZ 0x00402329\nCMP byte ptr [0x0060d3d9],0x1\nJNZ 0x0040255b\nCMP EBP,0x3\nJZ 0x00402387\nCMP EBP,0x2\nJZ 0x00402418\nCMP EBP,0x1\nJNZ 0x004024bc\nMOV AL,byte ptr [0x0060d3d9]\nMOVSXD RCX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RCX*0x8]\nTEST AL,AL\nJNZ 0x0040235e\nCMP byte ptr [RDI],0x2b\nJNZ 0x00402556\nLEA RSI,[RSP + 0x8]\nCALL 0x00402a50\nTEST AL,AL\nJZ 0x00402556\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0060d3b8],RAX\nADD R12,0x8\nXOR EBP,EBP\nJMP 0x0040255b\nMOV EBP,0x3\nCMP byte ptr [0x0060d3d9],0x1\nJNZ 0x004024bc\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x8]\nLEA RSI,[RSP + 0x8]\nCALL 0x00402a50\nTEST AL,AL\nJZ 0x004024bc\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x10]\nLEA RSI,[RSP + 0x18]\nCALL 0x00402a50\nTEST AL,AL\nJZ 0x004024bc\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0060d3b8],RAX\nMOV byte ptr [0x0060d3db],0x1\nMOV R14,qword ptr [RSP + 0x18]\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RCX,qword ptr [R12 + RAX*0x8]\nMOV qword ptr [R12 + RAX*0x8 + 0x10],RCX\nADD R12,0x10\nMOV EBP,0x1\nCMP byte ptr [0x0060d3db],0x1\nJZ 0x00402564\nJMP 0x00402599\nMOV AL,byte ptr [0x0060d3d9]\nTEST AL,AL\nJNZ 0x00402443\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RAX,qword ptr [R12 + RAX*0x8 + 0x8]\nMOVSX EAX,byte ptr [RAX]\nCMP EAX,0x2b\nJZ 0x00402443\nADD EAX,-0x30\nMOV EBP,0x2\nCMP EAX,0x9\nJA 0x004024bc\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x8]\nLEA RSI,[RSP + 0x18]\nCALL 0x00402a50\nMOV EBP,0x2\nTEST AL,AL\nJZ 0x004024bc\nCMP byte ptr [0x0060d3d9],0x1\nJNZ 0x00402536\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RAX*0x8]\nLEA RSI,[RSP + 0x8]\nCALL 0x00402a50\nTEST AL,AL\nJZ 0x00402536\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0060d3b8],RAX\nMOV byte ptr [0x0060d3db],0x1\nMOV R14,qword ptr [RSP + 0x18]\nADD R12,0x10\nXOR EBP,EBP\nCMP byte ptr [0x0060d3db],0x1\nJZ 0x00402564\nJMP 0x00402599\nCMP byte ptr [0x0060d3d9],0x1\nJNZ 0x0040255b\nCMP EBP,0x2\nJL 0x0040255b\nXOR EDI,EDI\nMOV ESI,0x4099a0\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x8]\nCALL 0x00406420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x4099b1\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x409fb9\nXOR EAX,EAX\nCALL 0x004018f0\nMOV EDI,0x1\nCALL 0x00401ad0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [0x0060d3b8],RAX\nMOVSXD RAX,dword ptr [0x0060d2d8]\nMOV RCX,qword ptr [R12 + RAX*0x8]\nMOV qword ptr [R12 + RAX*0x8 + 0x8],RCX\nADD R12,0x8\nMOV EBP,0x1\nCMP byte ptr [0x0060d3db],0x1\nJNZ 0x00402599\nMOV EAX,0x402950\nCMP qword ptr [0x0060d3a0],RAX\nJZ 0x00402579\nMOV EAX,0x402b00\nJMP 0x00402592\nMOV dword ptr [0x0060d3a8],0x8\nMOV dword ptr [0x0060d3ac],0x7\nMOV EAX,0x402ac0\nMOV qword ptr [0x0060d3a0],RAX\nCMP byte ptr [0x0060d3c0],0x1\nJNZ 0x004025de\nMOV RAX,qword ptr [0x0060d3c8]\nADD RAX,qword ptr [0x0060d3b8]\nMOV qword ptr [0x0060d3e0],RAX\nJNC 0x004025de\nXOR EDI,EDI\nMOV ESI,0x4099de\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004018f0\nCMP qword ptr [0x0060d388],0x0\nJNZ 0x004025f2\nMOV EDI,0x409a03\nCALL 0x00402960\nTEST EBP,EBP\nMOVSXD RAX,dword ptr [0x0060d2d8]\nLEA RAX,[R12 + RAX*0x8]\nMOV ECX,0x408920\nCMOVG RCX,RAX\nMOV qword ptr [0x0060d3e8],RCX\nCALL 0x00402b30\nMOV R15D,EAX\nCMP qword ptr [0x0060d3f0],0x0\nJZ 0x0040278f\nMOV RDI,qword ptr [0x0060d3b8]\nCALL 0x00402c40\nAND R15B,AL\nCMP qword ptr [0x0060d3f0],0x0\nJZ 0x0040278f\nMOV AL,byte ptr [0x0060d3db]\nSUB R14,qword ptr [0x0060d3b8]\nXOR ECX,ECX\nTEST AL,AL\nCMOVNZ RCX,R14\nMOV qword ptr [0x0060d3f8],RCX\nCALL 0x00402e50\nMOV EBP,EAX\nTEST byte ptr [RSP + 0x14],0x1\nJNZ 0x00402683\nCMP EBP,0xf\nJG 0x004026c5\nMOV EAX,0x10\nXOR EDX,EDX\nIDIV EBP\nMOV EBP,0x10\nSUB EBP,EDX\nJMP 0x004026c5\nMOV RBX,qword ptr [RSP + 0x20]\nTEST RBX,RBX\nJZ 0x0040269d\nMOVSXD RCX,EBP\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RCX\nTEST RDX,RDX\nJZ 0x004026c8\nXOR EDI,EDI\nMOV ESI,0x409a06\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nMOV R8D,EBP\nCALL 0x004018f0\nMOVSXD RBX,EBP\nMOV qword ptr [0x0060d400],RBX\nCMP qword ptr [0x0060d388],0x0\nJZ 0x00402777\nMOV R8,qword ptr [0x0060d400]\nMOV RBP,qword ptr [0x0060d398]\nMOV RSI,qword ptr [0x0060d388]\nADD RBP,0x1c\nXOR EBX,EBX\nXOR EDI,EDI\nNOP word ptr [RAX + RAX*0x1]\nMOV RCX,RDI\nMOV EAX,dword ptr [RBP + -0x18]\nMOVSXD RDI,dword ptr [0x408930 + RAX*0x4]\nXOR EDX,EDX\nMOV RAX,R8\nDIV RDI\nMOVSXD RDX,dword ptr [RBP]\nINC RDX\nMOVSXD RDI,EAX\nIMUL RDI,RDX\nCMP RCX,RDI\nCMOVNC RDI,RCX\nINC RBX\nADD RBP,0x28\nCMP RBX,RSI\nJC 0x00402700\nTEST RSI,RSI\nJZ 0x00402777\nMOV RCX,qword ptr [0x0060d400]\nMOV RBP,qword ptr [0x0060d398]\nADD RBP,0x20\nNOP\nMOV EAX,dword ptr [RBP + -0x1c]\nMOVSXD RBX,dword ptr [0x408930 + RAX*0x4]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RBX\nIMUL EAX,dword ptr [RBP + -0x4]\nMOV EDX,EDI\nSUB EDX,EAX\nMOV dword ptr [RBP],EDX\nADD RBP,0x28\nDEC RSI\nJNZ 0x00402750\nCMP byte ptr [0x0060d3b0],0x1\nJNZ 0x00402787\nCALL 0x00402eb0\nJMP 0x0040278c\nCALL 0x00403190\nAND R15B,AL\nMOVZX EBX,R15B\nCMP byte ptr [0x0060d408],0x1\nJNZ 0x004027d9\nMOV RDI,qword ptr [0x0060d2d0]\nCALL 0x00407500\nCMP EAX,-0x1\nJNZ 0x004027d9\nCALL 0x004015f0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409a33\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x004018f0\nXOR EBX,0x1\nMOV EAX,EBX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0060d2c8]\nMOV RCX,qword ptr [0x0060d240]\nMOV ESI,0x4098c7\nMOV EDX,0x409957\nMOV R8D,0x409965\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00406c20\nXOR EDI,EDI\nCALL 0x00401950\nXOR EDI,EDI\nCALL 0x00401ad0\nMOV EDI,0x1\nCALL 0x00401ad0\nMOV ESI,dword ptr [RSP + 0x4]\nMOV R8,qword ptr [0x0060d2e0]\nMOVSX EDX,BL\nMOV ECX,0x408770\nMOV EDI,EAX\nCALL 0x00407120\nNOP word ptr [RAX + RAX*0x1]\n'
p1152
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f4\n89 fd\n49 8b 3c 24\ne8 74 30 00 00\nbf 06 00 00 00\nbe e9 a6 40 00\ne8 e5 f9 ff ff\nbf 5b 99 40 00\nbe ca 98 40 00\ne8 d6 f7 ff ff\nbf 5b 99 40 00\ne8 ac f7 ff ff\nbf 90 4a 40 00\ne8 c2 5c 00 00\n0f 57 c0\n0f 29 05 28 b4 20 00\n0f 29 05 11 b4 20 00\n48 b8 01 00 00 00 02 00 00 00\n48 89 05 04 b4 20 00\nc7 05 06 b4 20 00 03 00 00 00\nc7 05 0c b4 20 00 05 00 00 00\n0f 29 05 45 b4 20 00\n0f 29 05 2e b4 20 00\n0f 29 05 17 b4 20 00\n0f 29 05 00 b4 20 00\nc7 05 06 b4 20 00 06 00 00 00\nc7 05 2c b4 20 00 08 00 00 00\nc7 05 02 b4 20 00 07 00 00 00\n48 c7 05 1f b4 20 00 00 00 00 00\n48 c7 05 1c b4 20 00 00 00 00 00\n48 c7 05 19 b4 20 00 00 00 00 00\n48 c7 05 16 b4 20 00 50 28 40 00\nc7 05 14 b4 20 00 08 00 00 00\nc7 05 0e b4 20 00 07 00 00 00\nc6 05 0b b4 20 00 00\n41 b6 01\n45 31 ed\n4c 8d 7c 24 04\nc7 44 24 14 00 00 00 00\n48 89 44 24 20\neb 09\ne8 9b 09 00 00\n41 20 c6\nc7 44 24 04 ff ff ff ff\nba 40 87 40 00\nb9 70 87 40 00\n89 ef\n4c 89 e6\n4d 89 f8\ne8 09 f7 ff ff\n89 c3\n8d 83 83 00 00 00\n3d 04 01 00 00\n0f 87 29 08 00 00\nff 24 c5 10 7c 40 00\nbf 48 99 40 00\neb b8\nbf 4e 99 40 00\neb b1\nbf 3c 99 40 00\neb aa\nbf 42 99 40 00\neb a3\nbf 54 99 40 00\neb 9c\n48 8b 05 b5 b2 20 00\n0f be 00\n83 c0 9c\n83 f8 14\n0f 87 ee 01 00 00\nff 24 c5 38 84 40 00\n48 c7 05 54 b3 20 00 50 28 40 00\nc7 05 52 b3 20 00 0a 00 00 00\ne9 33 02 00 00\nbf 36 99 40 00\ne9 5b ff ff ff\nc6 05 54 b3 20 00 01\n48 8b 3d 6d b2 20 00\n31 f6\n31 d2\nb9 c8 d3 60 00\ne9 8c 00 00 00\nbf 4b 99 40 00\ne9 35 ff ff ff\n48 8b 3d 4e b2 20 00\n48 85 ff\n0f 84 50 01 00 00\n48 8d 4c 24 08\n31 f6\n31 d2\n41 b8 30 87 40 00\ne8 21 51 00 00\n85 c0\n0f 85 76 07 00 00\n48 8b 44 24 08\ne9 2f 01 00 00\nbf 70 9e 40 00\ne9 f5 fe ff ff\nbf 33 99 40 00\ne9 eb fe ff ff\nbf 85 9e 40 00\ne9 e1 fe ff ff\nbf 39 99 40 00\ne9 d7 fe ff ff\nbf 3f 99 40 00\ne9 cd fe ff ff\nbf 45 99 40 00\ne9 c3 fe ff ff\n48 8b 3d dc b1 20 00\n31 f6\n31 d2\nb9 b8 d3 60 00\n41 b8 30 87 40 00\ne8 b8 50 00 00\n41 b5 01\n85 c0\n0f 84 a5 fe ff ff\ne9 05 07 00 00\nbf 51 99 40 00\ne9 8e fe ff ff\n48 8b 3d a7 b1 20 00\ne8 22 08 00 00\n41 20 c6\n41 b5 01\ne9 7f fe ff ff\nc6 05 88 b2 20 00 01\n41 b5 01\ne9 70 fe ff ff\n41 b5 01\n48 83 3d 7d b1 20 00 00\n0f 84 9d 00 00 00\n48 8b 3d 70 b1 20 00\n48 8d 4c 24 18\n31 f6\nba 0a 00 00 00\n41 b8 e9 a6 40 00\ne8 49 50 00 00\n85 c0\n0f 85 9e 06 00 00\n48 8b 44 24 18\neb 75\nc6 05 3c b2 20 00 01\ne9 26 fe ff ff\n48 8b 35 37 b1 20 00\n4c 8b 0d 98 b0 20 00\nbf 2a 99 40 00\nba 00 89 40 00\nb9 f0 88 40 00\n41 b8 04 00 00 00\ne8 c6 27 00 00\n8b 04 85 f0 88 40 00\n85 c0\n74 46\n83 f8 01\n0f 85 ea fd ff ff\nb0 01\n88 05 f4 b1 20 00\ne9 dd fd ff ff\nb8 03 00 00 00\n48 89 05 d9 b1 20 00\nc6 05 b2 b1 20 00 01\n41 b5 01\ne9 c2 fd ff ff\nb8 20 00 00 00\n48 89 44 24 20\nb0 01\n89 44 24 14\ne9 ad fd ff ff\n31 c0\n88 05 b7 b1 20 00\ne9 a0 fd ff ff\n31 ff\nbe e2 98 40 00\nba 05 00 00 00\ne8 87 f4 ff ff\n48 89 c2\n48 8b 05 9d b0 20 00\n0f be 08\nbf 01 00 00 00\n31 f6\n31 c0\ne8 9c f6 ff ff\n41 b5 01\ne9 6c fd ff ff\n48 c7 05 39 b1 20 00 50 29 40 00\nc7 05 3b b1 20 00 00 00 00 00\n41 b5 01\ne9 4f fd ff ff\n48 c7 05 1c b1 20 00 50 28 40 00\nc7 05 1a b1 20 00 08 00 00 00\nc7 05 14 b1 20 00 07 00 00 00\n41 b5 01\ne9 28 fd ff ff\n48 c7 05 f5 b0 20 00 50 28 40 00\nc7 05 f3 b0 20 00 10 00 00 00\nc7 05 ed b0 20 00 06 00 00 00\n41 b5 01\ne9 01 fd ff ff\nbb 01 00 00 00\n41 f6 c6 01\n0f 84 06 05 00 00\n80 3d d3 b0 20 00 01\n75 31\n48 8b 05 a2 b0 20 00\n48 85 c0\n74 25\n31 ff\nbe 72 99 40 00\nba 05 00 00 00\ne8 c4 f3 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 e0 f5 ff ff\n2b 2d c2 af 20 00\n41 f6 c5 01\n74 0d\n80 3d b6 b0 20 00 01\n0f 85 32 02 00 00\n83 fd 03\n74 59\n83 fd 02\n0f 84 e1 00 00 00\n83 fd 01\n0f 85 7c 01 00 00\n8a 05 93 b0 20 00\n48 63 0d 8b af 20 00\n49 8b 3c cc\n84 c0\n75 09\n80 3f 2b\n0f 85 f8 01 00 00\n48 8d 74 24 08\ne8 e8 06 00 00\n84 c0\n0f 84 e6 01 00 00\n48 8b 44 24 08\n48 89 05 3c b0 20 00\n49 83 c4 08\n31 ed\ne9 d4 01 00 00\nbd 03 00 00 00\n80 3d 46 b0 20 00 01\n0f 85 23 01 00 00\n48 63 05 38 af 20 00\n49 8b 7c c4 08\n48 8d 74 24 08\ne8 a1 06 00 00\n84 c0\n0f 84 05 01 00 00\n48 63 05 1a af 20 00\n49 8b 7c c4 10\n48 8d 74 24 18\ne8 83 06 00 00\n84 c0\n0f 84 e7 00 00 00\n48 8b 44 24 08\n48 89 05 d7 af 20 00\nc6 05 f3 af 20 00 01\n4c 8b 74 24 18\n48 63 05 e4 ae 20 00\n49 8b 0c c4\n49 89 4c c4 10\n49 83 c4 10\nbd 01 00 00 00\n80 3d ce af 20 00 01\n0f 84 51 01 00 00\ne9 81 01 00 00\n8a 05 bb af 20 00\n84 c0\n75 21\n48 63 05 af ae 20 00\n49 8b 44 c4 08\n0f be 00\n83 f8 2b\n74 0d\n83 c0 d0\nbd 02 00 00 00\n83 f8 09\n77 79\n48 63 05 8e ae 20 00\n49 8b 7c c4 08\n48 8d 74 24 18\ne8 f7 05 00 00\nbd 02 00 00 00\n84 c0\n74 5a\n80 3d 70 af 20 00 01\n0f 85 c7 00 00 00\n48 63 05 62 ae 20 00\n49 8b 3c c4\n48 8d 74 24 08\ne8 cc 05 00 00\n84 c0\n0f 84 aa 00 00 00\n48 8b 44 24 08\n48 89 05 20 af 20 00\nc6 05 3c af 20 00 01\n4c 8b 74 24 18\n49 83 c4 10\n31 ed\n80 3d 2a af 20 00 01\n0f 84 ad 00 00 00\ne9 dd 00 00 00\n80 3d 16 af 20 00 01\n0f 85 92 00 00 00\n83 fd 02\n0f 8c 89 00 00 00\n31 ff\nbe a0 99 40 00\nba 05 00 00 00\ne8 dd f1 ff ff\n48 89 c3\n48 63 05 eb ad 20 00\n49 8b 7c c4 08\ne8 29 3f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 e8 f3 ff ff\n31 ff\nbe b1 99 40 00\nba 05 00 00 00\ne8 a7 f1 ff ff\n48 89 c1\n31 ff\n31 f6\nba b9 9f 40 00\n31 c0\ne8 c4 f3 ff ff\nbf 01 00 00 00\ne8 9a f5 ff ff\n48 8b 44 24 18\n48 89 05 76 ae 20 00\n48 63 05 8f ad 20 00\n49 8b 0c c4\n49 89 4c c4 08\n49 83 c4 08\nbd 01 00 00 00\n80 3d 79 ae 20 00 01\n75 35\nb8 50 29 40 00\n48 39 05 30 ae 20 00\n74 07\nb8 00 2b 40 00\neb 19\nc7 05 25 ae 20 00 08 00 00 00\nc7 05 1f ae 20 00 07 00 00 00\nb8 c0 2a 40 00\n48 89 05 07 ae 20 00\n80 3d 20 ae 20 00 01\n75 3c\n48 8b 05 1f ae 20 00\n48 03 05 08 ae 20 00\n48 89 05 29 ae 20 00\n73 25\n31 ff\nbe de 99 40 00\nba 05 00 00 00\ne8 f6 f0 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 12 f3 ff ff\n48 83 3d a2 ad 20 00 00\n75 0a\nbf 03 9a 40 00\ne8 6e 03 00 00\n85 ed\n48 63 05 dd ac 20 00\n49 8d 04 c4\nb9 20 89 40 00\n48 0f 4f c8\n48 89 0d d9 ad 20 00\ne8 1c 05 00 00\n41 89 c7\n48 83 3d d1 ad 20 00 00\n0f 84 6a 01 00 00\n48 8b 3d 8c ad 20 00\ne8 0f 06 00 00\n41 20 c7\n48 83 3d b4 ad 20 00 00\n0f 84 4d 01 00 00\n8a 05 93 ad 20 00\n4c 2b 35 69 ad 20 00\n31 c9\n84 c0\n49 0f 45 ce\n48 89 0d 9a ad 20 00\ne8 ed 07 00 00\n89 c5\nf6 44 24 14 01\n75 17\n83 fd 0f\n7f 54\nb8 10 00 00 00\n31 d2\nf7 fd\nbd 10 00 00 00\n29 d5\neb 42\n48 8b 5c 24 20\n48 85 db\n74 10\n48 63 cd\n31 d2\n48 89 d8\n48 f7 f1\n48 85 d2\n74 2b\n31 ff\nbe 06 9a 40 00\nba 05 00 00 00\ne8 12 f0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\n41 89 e8\ne8 2b f2 ff ff\n48 63 dd\n48 89 1d 31 ad 20 00\n48 83 3d b1 ac 20 00 00\n0f 84 9a 00 00 00\n4c 8b 05 1c ad 20 00\n48 8b 2d ad ac 20 00\n48 8b 35 96 ac 20 00\n48 83 c5 1c\n31 db\n31 ff\n66 0f 1f 44 00 00\n48 89 f9\n8b 45 e8\n48 63 3c 85 30 89 40 00\n31 d2\n4c 89 c0\n48 f7 f7\n48 63 55 00\n48 ff c2\n48 63 f8\n48 0f af fa\n48 39 f9\n48 0f 43 f9\n48 ff c3\n48 83 c5 28\n48 39 f3\n72 c9\n48 85 f6\n74 3b\n48 8b 0d bd ac 20 00\n48 8b 2d 4e ac 20 00\n48 83 c5 20\n66 90\n8b 45 e4\n48 63 1c 85 30 89 40 00\n31 d2\n48 89 c8\n48 f7 f3\n0f af 45 fc\n89 fa\n29 c2\n89 55 00\n48 83 c5 28\n48 ff ce\n75 d9\n80 3d 32 ac 20 00 01\n75 07\ne8 2b 07 00 00\neb 05\ne8 04 0a 00 00\n41 20 c7\n41 0f b6 df\n80 3d 6e ac 20 00 01\n75 3d\n48 8b 3d 2d ab 20 00\ne8 58 4d 00 00\n83 f8 ff\n75 2c\ne8 3e ee ff ff\n8b 28\n31 ff\nbe 33 9a 40 00\nba 05 00 00 00\ne8 fb ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 17 f1 ff ff\n83 f3 01\n89 d8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d d4 aa 20 00\n48 8b 0d 45 aa 20 00\nbe c7 98 40 00\nba 57 99 40 00\n41 b8 65 99 40 00\n45 31 c9\n31 c0\ne8 0b 44 00 00\n31 ff\ne8 34 f1 ff ff\n31 ff\ne8 ad f2 ff ff\nbf 01 00 00 00\ne8 a3 f2 ff ff\n8b 74 24 04\n4c 8b 05 a8 aa 20 00\n0f be d3\nb9 70 87 40 00\n89 c7\ne8 d9 48 00 00\n66 0f 1f 84 00 00 00 00 00\n'
p1153
S'.text:0000000000401ea0\n.text:0000000000401ea1\n.text:0000000000401ea3\n.text:0000000000401ea5\n.text:0000000000401ea7\n.text:0000000000401ea9\n.text:0000000000401eaa\n.text:0000000000401eae\n.text:0000000000401eb1\n.text:0000000000401eb3\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ec1\n.text:0000000000401ec6\n.text:0000000000401ecb\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401eda\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401eee\n.text:0000000000401ef1\n.text:0000000000401ef8\n.text:0000000000401eff\n.text:0000000000401f09\n.text:0000000000401f10\n.text:0000000000401f1a\n.text:0000000000401f24\n.text:0000000000401f2b\n.text:0000000000401f32\n.text:0000000000401f39\n.text:0000000000401f40\n.text:0000000000401f4a\n.text:0000000000401f54\n.text:0000000000401f5e\n.text:0000000000401f69\n.text:0000000000401f74\n.text:0000000000401f7f\n.text:0000000000401f8a\n.text:0000000000401f94\n.text:0000000000401f9e\n.text:0000000000401fa5\n.text:0000000000401fa8\n.text:0000000000401fab\n.text:0000000000401fb0\n.text:0000000000401fb8\n.text:0000000000401fbd\n.text:0000000000401fc0\n.text:0000000000401fc5\n.text:0000000000401fc8\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fdf\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fe9\n.text:0000000000401fef\n.text:0000000000401ff4\n.text:0000000000401ffa\n.text:0000000000402001\n.text:0000000000402006\n.text:0000000000402008\n.text:000000000040200d\n.text:000000000040200f\n.text:0000000000402014\n.text:0000000000402016\n.text:000000000040201b\n.text:000000000040201d\n.text:0000000000402022\n.text:0000000000402024\n.text:000000000040202b\n.text:000000000040202e\n.text:0000000000402031\n.text:0000000000402034\n.text:000000000040203a\n.text:0000000000402041\n.text:000000000040204c\n.text:0000000000402056\n.text:000000000040205b\n.text:0000000000402060\n.text:0000000000402065\n.text:000000000040206c\n.text:0000000000402073\n.text:0000000000402075\n.text:0000000000402077\n.text:000000000040207c\n.text:0000000000402081\n.text:0000000000402086\n.text:000000000040208b\n.text:0000000000402092\n.text:0000000000402095\n.text:000000000040209b\n.text:00000000004020a0\n.text:00000000004020a2\n.text:00000000004020a4\n.text:00000000004020aa\n.text:00000000004020af\n.text:00000000004020b1\n.text:00000000004020b7\n.text:00000000004020bc\n.text:00000000004020c1\n.text:00000000004020c6\n.text:00000000004020cb\n.text:00000000004020d0\n.text:00000000004020d5\n.text:00000000004020da\n.text:00000000004020df\n.text:00000000004020e4\n.text:00000000004020e9\n.text:00000000004020ee\n.text:00000000004020f3\n.text:00000000004020f8\n.text:00000000004020fd\n.text:0000000000402104\n.text:0000000000402106\n.text:0000000000402108\n.text:000000000040210d\n.text:0000000000402113\n.text:0000000000402118\n.text:000000000040211b\n.text:000000000040211d\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212d\n.text:0000000000402132\n.text:0000000000402139\n.text:000000000040213e\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402149\n.text:0000000000402150\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215b\n.text:0000000000402163\n.text:0000000000402169\n.text:0000000000402170\n.text:0000000000402175\n.text:0000000000402177\n.text:000000000040217c\n.text:0000000000402182\n.text:0000000000402187\n.text:0000000000402189\n.text:000000000040218f\n.text:0000000000402194\n.text:0000000000402196\n.text:000000000040219d\n.text:00000000004021a2\n.text:00000000004021a9\n.text:00000000004021b0\n.text:00000000004021b5\n.text:00000000004021ba\n.text:00000000004021bf\n.text:00000000004021c5\n.text:00000000004021ca\n.text:00000000004021d1\n.text:00000000004021d3\n.text:00000000004021d5\n.text:00000000004021d8\n.text:00000000004021de\n.text:00000000004021e0\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f7\n.text:00000000004021fe\n.text:0000000000402201\n.text:0000000000402206\n.text:000000000040220b\n.text:0000000000402210\n.text:0000000000402212\n.text:0000000000402216\n.text:000000000040221b\n.text:000000000040221d\n.text:0000000000402223\n.text:0000000000402228\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402234\n.text:0000000000402239\n.text:000000000040223c\n.text:0000000000402243\n.text:0000000000402246\n.text:000000000040224b\n.text:000000000040224d\n.text:000000000040224f\n.text:0000000000402254\n.text:0000000000402257\n.text:000000000040225c\n.text:0000000000402267\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402279\n.text:0000000000402284\n.text:000000000040228e\n.text:0000000000402298\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022ab\n.text:00000000004022b5\n.text:00000000004022bf\n.text:00000000004022c2\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022d0\n.text:00000000004022d6\n.text:00000000004022dd\n.text:00000000004022df\n.text:00000000004022e6\n.text:00000000004022e9\n.text:00000000004022eb\n.text:00000000004022ed\n.text:00000000004022f2\n.text:00000000004022f7\n.text:00000000004022fc\n.text:00000000004022ff\n.text:0000000000402304\n.text:0000000000402306\n.text:0000000000402308\n.text:000000000040230b\n.text:0000000000402310\n.text:0000000000402316\n.text:000000000040231a\n.text:000000000040231c\n.text:0000000000402323\n.text:0000000000402329\n.text:000000000040232c\n.text:000000000040232e\n.text:0000000000402331\n.text:0000000000402337\n.text:000000000040233a\n.text:0000000000402340\n.text:0000000000402346\n.text:000000000040234d\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402358\n.text:000000000040235e\n.text:0000000000402363\n.text:0000000000402368\n.text:000000000040236a\n.text:0000000000402370\n.text:0000000000402375\n.text:000000000040237c\n.text:0000000000402380\n.text:0000000000402382\n.text:0000000000402387\n.text:000000000040238c\n.text:0000000000402393\n.text:0000000000402399\n.text:00000000004023a0\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023af\n.text:00000000004023b1\n.text:00000000004023b7\n.text:00000000004023be\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023cd\n.text:00000000004023cf\n.text:00000000004023d5\n.text:00000000004023da\n.text:00000000004023e1\n.text:00000000004023e8\n.text:00000000004023ed\n.text:00000000004023f4\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402401\n.text:0000000000402406\n.text:000000000040240d\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241e\n.text:0000000000402420\n.text:0000000000402422\n.text:0000000000402429\n.text:000000000040242e\n.text:0000000000402431\n.text:0000000000402434\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243e\n.text:0000000000402441\n.text:0000000000402443\n.text:000000000040244a\n.text:000000000040244f\n.text:0000000000402454\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402460\n.text:0000000000402462\n.text:0000000000402469\n.text:000000000040246f\n.text:0000000000402476\n.text:000000000040247a\n.text:000000000040247f\n.text:0000000000402484\n.text:0000000000402486\n.text:000000000040248c\n.text:0000000000402491\n.text:0000000000402498\n.text:000000000040249f\n.text:00000000004024a4\n.text:00000000004024a8\n.text:00000000004024aa\n.text:00000000004024b1\n.text:00000000004024b7\n.text:00000000004024bc\n.text:00000000004024c3\n.text:00000000004024c9\n.text:00000000004024cc\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d9\n.text:00000000004024de\n.text:00000000004024e3\n.text:00000000004024e6\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024fa\n.text:00000000004024fc\n.text:00000000004024fe\n.text:0000000000402500\n.text:0000000000402503\n.text:0000000000402508\n.text:000000000040250a\n.text:000000000040250f\n.text:0000000000402514\n.text:0000000000402519\n.text:000000000040251c\n.text:000000000040251e\n.text:0000000000402520\n.text:0000000000402525\n.text:0000000000402527\n.text:000000000040252c\n.text:0000000000402531\n.text:0000000000402536\n.text:000000000040253b\n.text:0000000000402542\n.text:0000000000402549\n.text:000000000040254d\n.text:0000000000402552\n.text:0000000000402556\n.text:000000000040255b\n.text:0000000000402562\n.text:0000000000402564\n.text:0000000000402569\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402577\n.text:0000000000402579\n.text:0000000000402583\n.text:000000000040258d\n.text:0000000000402592\n.text:0000000000402599\n.text:00000000004025a0\n.text:00000000004025a2\n.text:00000000004025a9\n.text:00000000004025b0\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025bb\n.text:00000000004025c0\n.text:00000000004025c5\n.text:00000000004025ca\n.text:00000000004025cd\n.text:00000000004025d2\n.text:00000000004025d4\n.text:00000000004025d6\n.text:00000000004025d9\n.text:00000000004025de\n.text:00000000004025e6\n.text:00000000004025e8\n.text:00000000004025ed\n.text:00000000004025f2\n.text:00000000004025f4\n.text:00000000004025fb\n.text:00000000004025ff\n.text:0000000000402604\n.text:0000000000402608\n.text:000000000040260f\n.text:0000000000402614\n.text:0000000000402617\n.text:000000000040261f\n.text:0000000000402625\n.text:000000000040262c\n.text:0000000000402631\n.text:0000000000402634\n.text:000000000040263c\n.text:0000000000402642\n.text:0000000000402648\n.text:000000000040264f\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402657\n.text:000000000040265e\n.text:0000000000402663\n.text:0000000000402665\n.text:000000000040266a\n.text:000000000040266c\n.text:000000000040266f\n.text:0000000000402671\n.text:0000000000402676\n.text:0000000000402678\n.text:000000000040267a\n.text:000000000040267f\n.text:0000000000402681\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268b\n.text:000000000040268d\n.text:0000000000402690\n.text:0000000000402692\n.text:0000000000402695\n.text:0000000000402698\n.text:000000000040269b\n.text:000000000040269d\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a9\n.text:00000000004026ae\n.text:00000000004026b1\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026b7\n.text:00000000004026ba\n.text:00000000004026bd\n.text:00000000004026c0\n.text:00000000004026c5\n.text:00000000004026c8\n.text:00000000004026cf\n.text:00000000004026d7\n.text:00000000004026dd\n.text:00000000004026e4\n.text:00000000004026eb\n.text:00000000004026f2\n.text:00000000004026f6\n.text:00000000004026f8\n.text:00000000004026fa\n.text:0000000000402700\n.text:0000000000402703\n.text:0000000000402706\n.text:000000000040270e\n.text:0000000000402710\n.text:0000000000402713\n.text:0000000000402716\n.text:000000000040271a\n.text:000000000040271d\n.text:0000000000402720\n.text:0000000000402724\n.text:0000000000402727\n.text:000000000040272b\n.text:000000000040272e\n.text:0000000000402732\n.text:0000000000402735\n.text:0000000000402737\n.text:000000000040273a\n.text:000000000040273c\n.text:0000000000402743\n.text:000000000040274a\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402753\n.text:000000000040275b\n.text:000000000040275d\n.text:0000000000402760\n.text:0000000000402763\n.text:0000000000402767\n.text:0000000000402769\n.text:000000000040276b\n.text:000000000040276e\n.text:0000000000402772\n.text:0000000000402775\n.text:0000000000402777\n.text:000000000040277e\n.text:0000000000402780\n.text:0000000000402785\n.text:0000000000402787\n.text:000000000040278c\n.text:000000000040278f\n.text:0000000000402793\n.text:000000000040279a\n.text:000000000040279c\n.text:00000000004027a3\n.text:00000000004027a8\n.text:00000000004027ab\n.text:00000000004027ad\n.text:00000000004027b2\n.text:00000000004027b4\n.text:00000000004027b6\n.text:00000000004027bb\n.text:00000000004027c0\n.text:00000000004027c5\n.text:00000000004027c8\n.text:00000000004027cd\n.text:00000000004027cf\n.text:00000000004027d1\n.text:00000000004027d4\n.text:00000000004027d9\n.text:00000000004027dc\n.text:00000000004027de\n.text:00000000004027e2\n.text:00000000004027e3\n.text:00000000004027e5\n.text:00000000004027e7\n.text:00000000004027e9\n.text:00000000004027eb\n.text:00000000004027ec\n.text:00000000004027ed\n.text:00000000004027f4\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402805\n.text:000000000040280b\n.text:000000000040280e\n.text:0000000000402810\n.text:0000000000402815\n.text:0000000000402817\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402823\n.text:0000000000402828\n.text:000000000040282d\n.text:0000000000402831\n.text:0000000000402838\n.text:000000000040283b\n.text:0000000000402840\n.text:0000000000402842\n.text:0000000000402847\n'
p1154
tp1155
sS'write_block'
p1156
(S'\n__stdcall write_block(uintmax_t current_offset, size_t n_bytes, char * prev_block, char * curr_block)\n'
p1157
V\u000avoid write_block(uintmax_t current_offset,size_t n_bytes,char *prev_block,char *curr_block)\u000a\u000a{\u000a  ulong uVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  long lVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  \u000a  if ((((abbreviate_duplicate_blocks == 0) && (write_block_first == 1)) &&\u000a      (bytes_per_block == n_bytes)) &&\u000a     (iVar2 = memcmp(prev_block,curr_block,bytes_per_block), iVar2 == 0)) {\u000a    if (write_block_prev_pair_equal != 0) {\u000a      write_block_first = 1;\u000a      return;\u000a    }\u000a    __printf_chk(1,&DAT_00409f56);\u000a    write_block_first = 1;\u000a    write_block_prev_pair_equal = 1;\u000a    return;\u000a  }\u000a  write_block_prev_pair_equal = 0;\u000a  if (n_specs != 0) {\u000a    lVar4 = 0x10;\u000a    uVar6 = 0;\u000a    do {\u000a      iVar2 = width_bytes[(ulong)*(uint *)((long)&spec->size + lVar4)];\u000a      uVar1 = bytes_per_block / (ulong)(long)iVar2;\u000a      uVar3 = bytes_per_block - n_bytes;\u000a      if (uVar6 == 0) {\u000a        (*format_address)(current_offset,0);\u000a      }\u000a      else {\u000a        __printf_chk(1,&DAT_00409e64,(ulong)(uint)address_pad_len,0x40a6e9);\u000a      }\u000a      iVar5 = (int)uVar1;\u000a      iVar2 = (int)(uVar3 / (ulong)(long)iVar2);\u000a      (**(code **)((long)&spec->print_function + lVar4))\u000a                ((long)iVar5,(long)iVar2,curr_block,(long)&spec->fmt + lVar4,\u000a                 (ulong)*(uint *)((long)&spec->print_function + lVar4 + 4),\u000a                 (ulong)*(uint *)(spec->fmt_string + lVar4));\u000a      if (*(char *)((long)&spec->print_function + lVar4) != 0) {\u000a        __printf_chk(1,&DAT_00409e64,\u000a                     (ulong)(uint)(iVar2 * *(int *)((long)&spec->print_function + lVar4 + 4) +\u000a                                  (*(int *)(spec->fmt_string + lVar4) * iVar2) / iVar5),0x40a6e9);\u000a        dump_hexl_mode_trailer(n_bytes,curr_block);\u000a      }\u000a      putchar_unlocked(10);\u000a      uVar6 = uVar6 + 1;\u000a      lVar4 = lVar4 + 0x28;\u000a    } while (uVar6 < n_specs);\u000a  }\u000a  write_block_first = 1;\u000a  return;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R12,RSI\nMOV qword ptr [RSP],RDI\nMOV AL,byte ptr [0x0060d3d8]\nTEST AL,AL\nJNZ 0x0040455a\nCMP byte ptr [0x0060d418],0x1\nJNZ 0x0040455a\nMOV RAX,qword ptr [0x0060d400]\nCMP RAX,R12\nJNZ 0x0040455a\nMOV RDI,RDX\nMOV RSI,R14\nMOV RDX,RAX\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x00404685\nMOV byte ptr [0x0060d419],0x0\nCMP qword ptr [0x0060d388],0x0\nJZ 0x0040466f\nMOV EBP,0x10\nXOR R15D,R15D\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060d398]\nMOV EAX,dword ptr [RAX + RBP*0x1 + -0xc]\nMOV RCX,qword ptr [0x0060d400]\nMOVSXD RSI,dword ptr [0x408930 + RAX*0x4]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nMOV R13,RAX\nSUB RCX,R12\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nMOV RBX,RAX\nTEST R15,R15\nJZ 0x004045e0\nMOV EDX,dword ptr [0x0060d3ac]\nMOV EDI,0x1\nMOV ESI,0x409e64\nMOV ECX,0x40a6e9\nXOR EAX,EAX\nCALL 0x004018c0\nJMP 0x004045ec\nXOR ESI,ESI\nMOV RDI,qword ptr [RSP]\nCALL qword ptr [0x0060d3a0]\nMOV RAX,qword ptr [0x0060d398]\nLEA RCX,[RAX + RBP*0x1]\nMOVSXD RDI,R13D\nMOVSXD RSI,EBX\nMOV R8D,dword ptr [RAX + RBP*0x1 + 0xc]\nMOV R9D,dword ptr [RAX + RBP*0x1 + 0x10]\nMOV RDX,R14\nCALL qword ptr [RAX + RBP*0x1 + -0x8]\nMOV RCX,qword ptr [0x0060d398]\nCMP byte ptr [RCX + RBP*0x1 + 0x8],0x0\nJZ 0x00404651\nMOV EAX,dword ptr [RCX + RBP*0x1 + 0x10]\nIMUL EAX,EBX\nCDQ\nIDIV R13D\nIMUL EBX,dword ptr [RCX + RBP*0x1 + 0xc]\nADD EBX,EAX\nMOV EDI,0x1\nMOV ESI,0x409e64\nMOV ECX,0x40a6e9\nXOR EAX,EAX\nMOV EDX,EBX\nCALL 0x004018c0\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004046b0\nMOV EDI,0xa\nCALL 0x00401800\nINC R15\nADD RBP,0x28\nCMP R15,qword ptr [0x0060d388]\nJC 0x00404580\nMOV byte ptr [0x0060d418],0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [0x0060d419]\nTEST AL,AL\nJNZ 0x0040466f\nMOV EDI,0x1\nMOV ESI,0x409f56\nXOR EAX,EAX\nCALL 0x004018c0\nMOV byte ptr [0x0060d419],0x1\nJMP 0x0040466f\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 f4\n48 89 3c 24\n8a 05 ad 8e 20 00\n84 c0\n75 2b\n80 3d e2 8e 20 00 01\n75 22\n48 8b 05 c1 8e 20 00\n4c 39 e0\n75 16\n48 89 d7\n4c 89 f6\n48 89 c2\ne8 4e d2 ff ff\n85 c0\n0f 84 2b 01 00 00\nc6 05 b8 8e 20 00 00\n48 83 3d 1f 8e 20 00 00\n0f 84 00 01 00 00\nbd 10 00 00 00\n45 31 ff\n66 0f 1f 84 00 00 00 00 00\n48 8b 05 11 8e 20 00\n8b 44 28 f4\n48 8b 0d 6e 8e 20 00\n48 63 34 85 30 89 40 00\n31 d2\n48 89 c8\n48 f7 f6\n49 89 c5\n4c 29 e1\n31 d2\n48 89 c8\n48 f7 f6\n48 89 c3\n4d 85 ff\n74 28\n8b 15 ee 8d 20 00\nbf 01 00 00 00\nbe 64 9e 40 00\nb9 e9 a6 40 00\n31 c0\ne8 ec d2 ff ff\neb 16\n31 f6\n48 8b 3c 24\nff 15 b4 8d 20 00\n48 8b 05 a5 8d 20 00\n48 8d 0c 28\n49 63 fd\n48 63 f3\n44 8b 44 28 0c\n44 8b 4c 28 10\n4c 89 f2\nff 54 28 f8\n48 8b 0d 83 8d 20 00\n80 7c 29 08 00\n74 35\n8b 44 29 10\n0f af c3\n99\n41 f7 fd\n0f af 5c 29 0c\n01 c3\nbf 01 00 00 00\nbe 64 9e 40 00\nb9 e9 a6 40 00\n31 c0\n89 da\ne8 7a d2 ff ff\n4c 89 e7\n4c 89 f6\ne8 5f 00 00 00\nbf 0a 00 00 00\ne8 a5 d1 ff ff\n49 ff c7\n48 83 c5 28\n4c 3b 3d 1f 8d 20 00\n0f 82 11 ff ff ff\nc6 05 a2 8d 20 00 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8a 05 8e 8d 20 00\n84 c0\n75 e0\nbf 01 00 00 00\nbe 56 9f 40 00\n31 c0\ne8 20 d2 ff ff\nc6 05 72 8d 20 00 01\neb c6\n'
p1160
S'.text:0000000000404510\n.text:0000000000404511\n.text:0000000000404513\n.text:0000000000404515\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451a\n.text:000000000040451b\n.text:000000000040451e\n.text:0000000000404521\n.text:0000000000404525\n.text:000000000040452b\n.text:000000000040452d\n.text:000000000040452f\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453f\n.text:0000000000404542\n.text:0000000000404544\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454d\n.text:0000000000404552\n.text:0000000000404554\n.text:000000000040455a\n.text:0000000000404561\n.text:0000000000404569\n.text:000000000040456f\n.text:0000000000404574\n.text:0000000000404577\n.text:0000000000404580\n.text:0000000000404587\n.text:000000000040458b\n.text:0000000000404592\n.text:000000000040459a\n.text:000000000040459c\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045aa\n.text:00000000004045ad\n.text:00000000004045b0\n.text:00000000004045b3\n.text:00000000004045b6\n.text:00000000004045b8\n.text:00000000004045be\n.text:00000000004045c3\n.text:00000000004045c8\n.text:00000000004045cd\n.text:00000000004045cf\n.text:00000000004045d4\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e6\n.text:00000000004045ec\n.text:00000000004045f3\n.text:00000000004045f7\n.text:00000000004045fa\n.text:00000000004045fd\n.text:0000000000404602\n.text:0000000000404607\n.text:000000000040460a\n.text:000000000040460e\n.text:0000000000404615\n.text:000000000040461a\n.text:000000000040461c\n.text:0000000000404620\n.text:0000000000404623\n.text:0000000000404624\n.text:0000000000404627\n.text:000000000040462c\n.text:000000000040462e\n.text:0000000000404633\n.text:0000000000404638\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404641\n.text:0000000000404646\n.text:0000000000404649\n.text:000000000040464c\n.text:0000000000404651\n.text:0000000000404656\n.text:000000000040465b\n.text:000000000040465e\n.text:0000000000404662\n.text:0000000000404669\n.text:000000000040466f\n.text:0000000000404676\n.text:000000000040467a\n.text:000000000040467b\n.text:000000000040467d\n.text:000000000040467f\n.text:0000000000404681\n.text:0000000000404683\n.text:0000000000404684\n.text:0000000000404685\n.text:000000000040468b\n.text:000000000040468d\n.text:000000000040468f\n.text:0000000000404694\n.text:0000000000404699\n.text:000000000040469b\n.text:00000000004046a0\n.text:00000000004046a7\n'
p1161
tp1162
sS'xcharalloc'
p1163
(S'\n__stdcall xcharalloc(size_t n)\n'
p1164
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1165
S'JMP 0x00406d50\n'
p1166
S'e9 2b ff ff ff\n'
p1167
S'.text:0000000000406e20\n'
p1168
tp1169
sS'c_isupper'
p1170
(S'\n__stdcall c_isupper()\n'
p1171
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1172
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1173
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1174
S'.text:0000000000407740\n.text:0000000000407743\n.text:0000000000407746\n.text:0000000000407749\n'
p1175
tp1176
sS'c_isalnum'
p1177
(S'\n__stdcall c_isalnum()\n'
p1178
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1179
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040765b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040765b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040765a\nXOR EAX,EAX\nRET\n'
p1180
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1181
S'.text:0000000000407640\n.text:0000000000407642\n.text:0000000000407645\n.text:0000000000407648\n.text:000000000040764a\n.text:0000000000407654\n.text:0000000000407658\n.text:000000000040765a\n.text:000000000040765b\n.text:000000000040765e\n.text:0000000000407661\n.text:0000000000407663\n.text:0000000000407665\n'
p1182
tp1183
sS'print_char'
p1184
(S'\n__stdcall print_char(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p1185
V\u000avoid print_char(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  byte bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int in_R8D;\u000a  int in_R9D;\u000a  size_t sVar4;\u000a  ulong uVar5;\u000a  \u000a  if (blank < fields) {\u000a    lVar2 = (long)in_R9D;\u000a    uVar5 = (fields - 1) * lVar2;\u000a    sVar4 = fields;\u000a    do {\u000a      sVar4 = sVar4 - 1;\u000a      iVar3 = in_R9D + in_R8D;\u000a      in_R9D = (int)(uVar5 / fields);\u000a      bVar1 = *(byte *)block;\u000a      block = (byte *)block + 1;\u000a      xprintf(fmt_string,(ulong)(uint)(iVar3 - in_R9D),(ulong)bVar1);\u000a      uVar5 = uVar5 - lVar2;\u000a    } while (blank < sVar4);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV R12,RCX\nMOV RBP,RDX\nMOV R15,RSI\nMOV qword ptr [RSP],RDI\nCMP RDI,R15\nJBE 0x00403a40\nMOVSXD RDX,EBX\nMOV R13,qword ptr [RSP]\nLEA R14,[R13 + -0x1]\nMOV qword ptr [RSP + 0x8],RDX\nIMUL R14,RDX\nNOP word ptr [RAX + RAX*0x1]\nDEC R13\nXOR EDX,EDX\nMOV RAX,R14\nDIV qword ptr [RSP]\nMOV qword ptr [RSP + 0x10],RAX\nADD EBX,R8D\nSUB EBX,EAX\nMOVZX EDX,byte ptr [RBP]\nINC RBP\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,EBX\nMOV EBX,R8D\nCALL 0x00406f10\nMOV R8D,EBX\nSUB R14,qword ptr [RSP + 0x8]\nCMP R13,R15\nMOV RAX,qword ptr [RSP + 0x10]\nMOV EBX,EAX\nJA 0x00403a00\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1187
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n49 89 cc\n48 89 d5\n49 89 f7\n48 89 3c 24\n4c 39 ff\n76 5d\n48 63 d3\n4c 8b 2c 24\n4d 8d 75 ff\n48 89 54 24 08\n4c 0f af f2\n66 0f 1f 84 00 00 00 00 00\n49 ff cd\n31 d2\n4c 89 f0\n48 f7 34 24\n48 89 44 24 10\n44 01 c3\n29 c3\n0f b6 55 00\n48 ff c5\n31 c0\n4c 89 e7\n89 de\n44 89 c3\ne8 e4 34 00 00\n41 89 d8\n4c 2b 74 24 08\n4d 39 fd\n48 8b 44 24 10\n89 c3\n77 c0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1188
S'.text:00000000004039c0\n.text:00000000004039c1\n.text:00000000004039c3\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039c9\n.text:00000000004039ca\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d4\n.text:00000000004039d7\n.text:00000000004039da\n.text:00000000004039de\n.text:00000000004039e1\n.text:00000000004039e3\n.text:00000000004039e6\n.text:00000000004039ea\n.text:00000000004039ee\n.text:00000000004039f3\n.text:00000000004039f7\n.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0c\n.text:0000000000403a11\n.text:0000000000403a14\n.text:0000000000403a16\n.text:0000000000403a1a\n.text:0000000000403a1d\n.text:0000000000403a1f\n.text:0000000000403a22\n.text:0000000000403a24\n.text:0000000000403a27\n.text:0000000000403a2c\n.text:0000000000403a2f\n.text:0000000000403a34\n.text:0000000000403a37\n.text:0000000000403a3c\n.text:0000000000403a3e\n.text:0000000000403a40\n.text:0000000000403a44\n.text:0000000000403a45\n.text:0000000000403a47\n.text:0000000000403a49\n.text:0000000000403a4b\n.text:0000000000403a4d\n.text:0000000000403a4e\n'
p1189
tp1190
sS'__errno_location'
p1191
(S'\n__stdcall __errno_location()\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060d040)();\u000a  return piVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x0060d040]\n'
p1194
S'ff 25 4a ba 20 00\n'
p1195
S'.plt:00000000004015f0\n'
p1196
tp1197
sS'x2nrealloc'
p1198
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1199
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1200
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00406dec\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00406e19\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00406e0a\nTEST RCX,RCX\nJNZ 0x00406e0a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00406d90\nPUSH RAX\nCALL 0x00406ee0\n'
p1201
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1202
S'.text:0000000000406dc0\n.text:0000000000406dc3\n.text:0000000000406dc6\n.text:0000000000406dc9\n.text:0000000000406dcb\n.text:0000000000406dd5\n.text:0000000000406dd7\n.text:0000000000406dda\n.text:0000000000406ddd\n.text:0000000000406ddf\n.text:0000000000406de2\n.text:0000000000406de5\n.text:0000000000406dea\n.text:0000000000406dec\n.text:0000000000406def\n.text:0000000000406df1\n.text:0000000000406df6\n.text:0000000000406df8\n.text:0000000000406dfb\n.text:0000000000406dfd\n.text:0000000000406e04\n.text:0000000000406e07\n.text:0000000000406e0a\n.text:0000000000406e0d\n.text:0000000000406e11\n.text:0000000000406e14\n.text:0000000000406e19\n.text:0000000000406e1a\n'
p1203
tp1204
sS'print_float'
p1205
(S'\n__stdcall print_float(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p1206
V\u000avoid print_float(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ulong uVar3;\u000a  float *pfVar4;\u000a  long lVar5;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar6;\u000a  float x;\u000a  char buf [31];\u000a  float local_58 [10];\u000a  \u000a  uVar3 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar6 = fields;\u000a    do {\u000a      iVar2 = (int)uVar3;\u000a      sVar6 = sVar6 - 1;\u000a      auVar1 = ZEXT816(sVar6 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar3 = SUB168(auVar1,0);\u000a      if (input_swap == false) {\u000a        x = *(float *)block;\u000a      }\u000a      else {\u000a        lVar5 = 4;\u000a        pfVar4 = local_58;\u000a        do {\u000a          *(char *)pfVar4 = *(char *)((long)block + lVar5 + -1);\u000a          pfVar4 = (float *)((long)pfVar4 + 1);\u000a          lVar5 = lVar5 + -1;\u000a          x = local_58[0];\u000a        } while (lVar5 != 0);\u000a      }\u000a      block = (float *)block + 1;\u000a      ftoastr((char *)local_58,0x1f,x);\u000a      xprintf("%*s",(ulong)(uint)((iVar2 + in_R8D) - SUB164(auVar1,0)),local_58);\u000a    } while (blank < sVar6);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1207
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV EBP,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV RBX,RDX\nMOV R12,RDI\nMOV qword ptr [RSP + 0x18],RSI\nCMP R12,RSI\nJBE 0x00403e86\nMOVSXD RAX,EBP\nMOV qword ptr [RSP + 0x10],RAX\nLEA R13,[RSP + 0x20]\nMOV R15,R12\nNOP word ptr [RAX + RAX*0x1]\nMOV R14D,EBP\nDEC R15\nMOV RAX,R15\nIMUL RAX,qword ptr [RSP + 0x10]\nXOR EDX,EDX\nDIV R12\nADD R14D,dword ptr [RSP + 0xc]\nMOV RBP,RAX\nSUB R14D,EBP\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403e50\nMOV RAX,R13\nMOV ECX,0x4\nMOVZX EDX,byte ptr [RBX + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403e30\nMOVSS XMM0,dword ptr [RSP + 0x20]\nJMP 0x00403e54\nMOVSS XMM0,dword ptr [RBX]\nADD RBX,0x4\nMOV ESI,0x1f\nXOR EDX,EDX\nXOR ECX,ECX\nMOV RDI,R13\nCALL 0x00404ca0\nMOV EDI,0x409e64\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R13\nCALL 0x00406f10\nCMP R15,qword ptr [RSP + 0x18]\nJA 0x00403e00\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1208
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n44 89 cd\n44 89 44 24 0c\n48 89 d3\n49 89 fc\n48 89 74 24 18\n49 39 f4\n0f 86 9c 00 00 00\n48 63 c5\n48 89 44 24 10\n4c 8d 6c 24 20\n4d 89 e7\n66 0f 1f 44 00 00\n41 89 ee\n49 ff cf\n4c 89 f8\n48 0f af 44 24 10\n31 d2\n49 f7 f4\n44 03 74 24 0c\n48 89 c5\n41 29 ee\n80 3d b4 95 20 00 00\n74 28\n4c 89 e8\nb9 04 00 00 00\n0f b6 54 0b ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\nf3 0f 10 44 24 20\neb 0d\nf3 0f 10 03\n48 83 c3 04\nbe 1f 00 00 00\n31 d2\n31 c9\n4c 89 ef\ne8 37 0e 00 00\nbf 64 9e 40 00\n31 c0\n44 89 f6\n4c 89 ea\ne8 95 30 00 00\n4c 3b 7c 24 18\n0f 87 7a ff ff ff\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1209
S'.text:0000000000403dc0\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dc9\n.text:0000000000403dca\n.text:0000000000403dce\n.text:0000000000403dd1\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403ddc\n.text:0000000000403de1\n.text:0000000000403de4\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403df2\n.text:0000000000403df7\n.text:0000000000403dfa\n.text:0000000000403e00\n.text:0000000000403e03\n.text:0000000000403e06\n.text:0000000000403e09\n.text:0000000000403e0f\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e1f\n.text:0000000000403e26\n.text:0000000000403e28\n.text:0000000000403e2b\n.text:0000000000403e30\n.text:0000000000403e35\n.text:0000000000403e37\n.text:0000000000403e3a\n.text:0000000000403e3d\n.text:0000000000403e3f\n.text:0000000000403e45\n.text:0000000000403e50\n.text:0000000000403e54\n.text:0000000000403e58\n.text:0000000000403e5d\n.text:0000000000403e5f\n.text:0000000000403e61\n.text:0000000000403e64\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e7b\n.text:0000000000403e80\n.text:0000000000403e86\n.text:0000000000403e8a\n.text:0000000000403e8b\n.text:0000000000403e8d\n.text:0000000000403e8f\n.text:0000000000403e91\n.text:0000000000403e93\n.text:0000000000403e94\n'
p1210
tp1211
sS'quotearg_n_options'
p1212
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1213
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004015f0\nTEST R12D,R12D\nJS 0x004060e1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060d258]\nCMP dword ptr [0x0060d260],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00405ffb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60d268\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00406d90\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060d258],R15\nJNZ 0x00405fc2\nMOVUPS XMM0,xmmword ptr [0x0060d268]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060d260]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401760\nMOV dword ptr [0x0060d260],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00405150\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040605d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004060cb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60d480\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00406088\nCALL 0x004015c0\nMOV RDI,R15\nCALL 0x00406e20\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00405150\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004015e0\n'
p1215
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 a1 b6 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ee 72 20 00\n44 39 25 ef 72 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 68 d2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d a3 72 20 00\n75 0b\n0f 10 05 aa 72 20 00\n41 0f 11 07\n8b 05 98 72 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d b7 ff ff\n89 1d 77 72 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 80 d4 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 38 b5 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa b4 ff ff\n'
p1216
S'.text:0000000000405f30\n.text:0000000000405f31\n.text:0000000000405f33\n.text:0000000000405f35\n.text:0000000000405f37\n.text:0000000000405f39\n.text:0000000000405f3a\n.text:0000000000405f3e\n.text:0000000000405f41\n.text:0000000000405f44\n.text:0000000000405f47\n.text:0000000000405f4a\n.text:0000000000405f4f\n.text:0000000000405f52\n.text:0000000000405f58\n.text:0000000000405f5d\n.text:0000000000405f5f\n.text:0000000000405f63\n.text:0000000000405f6a\n.text:0000000000405f71\n.text:0000000000405f76\n.text:0000000000405f7b\n.text:0000000000405f80\n.text:0000000000405f82\n.text:0000000000405f87\n.text:0000000000405f8a\n.text:0000000000405f8d\n.text:0000000000405f93\n.text:0000000000405f95\n.text:0000000000405f98\n.text:0000000000405f9c\n.text:0000000000405f9f\n.text:0000000000405fa3\n.text:0000000000405fa8\n.text:0000000000405fab\n.text:0000000000405fae\n.text:0000000000405fb5\n.text:0000000000405fb7\n.text:0000000000405fbe\n.text:0000000000405fc2\n.text:0000000000405fc8\n.text:0000000000405fcb\n.text:0000000000405fcf\n.text:0000000000405fd2\n.text:0000000000405fd5\n.text:0000000000405fd9\n.text:0000000000405fdb\n.text:0000000000405fde\n.text:0000000000405fe3\n.text:0000000000405fe9\n.text:0000000000405fec\n.text:0000000000405ff1\n.text:0000000000405ff6\n.text:0000000000405ffb\n.text:0000000000405ffe\n.text:0000000000406002\n.text:0000000000406006\n.text:000000000040600b\n.text:000000000040600f\n.text:0000000000406013\n.text:0000000000406017\n.text:000000000040601b\n.text:000000000040601f\n.text:0000000000406024\n.text:0000000000406027\n.text:000000000040602a\n.text:000000000040602d\n.text:0000000000406032\n.text:0000000000406035\n.text:0000000000406038\n.text:000000000040603b\n.text:000000000040603c\n.text:0000000000406041\n.text:0000000000406045\n.text:0000000000406048\n.text:000000000040604b\n.text:000000000040604d\n.text:0000000000406052\n.text:0000000000406056\n.text:000000000040605b\n.text:000000000040605d\n.text:0000000000406061\n.text:0000000000406066\n.text:0000000000406069\n.text:000000000040606c\n.text:0000000000406071\n.text:0000000000406076\n.text:0000000000406079\n.text:000000000040607e\n.text:0000000000406081\n.text:0000000000406083\n.text:0000000000406088\n.text:000000000040608b\n.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406096\n.text:000000000040609b\n.text:000000000040609e\n.text:00000000004060a2\n.text:00000000004060a5\n.text:00000000004060a8\n.text:00000000004060ad\n.text:00000000004060b2\n.text:00000000004060b7\n.text:00000000004060ba\n.text:00000000004060bd\n.text:00000000004060be\n.text:00000000004060c3\n.text:00000000004060c7\n.text:00000000004060cb\n.text:00000000004060cf\n.text:00000000004060d2\n.text:00000000004060d6\n.text:00000000004060d7\n.text:00000000004060d9\n.text:00000000004060db\n.text:00000000004060dd\n.text:00000000004060df\n.text:00000000004060e0\n.text:00000000004060e1\n'
p1217
tp1218
sS'strcmp'
p1219
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060d138)();\u000a  return iVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060d138]\n'
p1222
S'ff 25 52 b9 20 00\n'
p1223
S'.plt:00000000004017e0\n'
p1224
tp1225
sS'set_custom_quoting'
p1226
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1227
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1228
S'TEST RDI,RDI\nMOV EAX,0x60d440\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004050c5\nTEST RDX,RDX\nJZ 0x004050c5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004015e0\n'
p1229
S'48 85 ff\nb8 40 d4 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 c5 ff ff\n'
p1230
S'.text:00000000004050a0\n.text:00000000004050a3\n.text:00000000004050a8\n.text:00000000004050ac\n.text:00000000004050b2\n.text:00000000004050b5\n.text:00000000004050b7\n.text:00000000004050ba\n.text:00000000004050bc\n.text:00000000004050c0\n.text:00000000004050c4\n.text:00000000004050c5\n.text:00000000004050c6\n'
p1231
tp1232
sS'c_isalpha'
p1233
(S'\n__stdcall c_isalpha()\n'
p1234
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1235
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040768b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1236
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1237
S'.text:0000000000407670\n.text:0000000000407673\n.text:0000000000407676\n.text:0000000000407678\n.text:0000000000407682\n.text:0000000000407684\n.text:0000000000407687\n.text:000000000040768a\n.text:000000000040768b\n.text:000000000040768d\n'
p1238
tp1239
sS'quotearg_custom_mem'
p1240
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1241
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00406340\n'
p1243
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1244
S'.text:00000000004063d0\n.text:00000000004063d3\n.text:00000000004063d6\n.text:00000000004063d9\n.text:00000000004063dc\n.text:00000000004063de\n.text:00000000004063e1\n'
p1245
tp1246
sS'strtod'
p1247
(S'\n__stdcall strtod(char * __nptr, char * * __endptr)\n'
p1248
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble strtod(char *__nptr,char **__endptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_strtod_0060d078)();\u000a  return dVar1;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x0060d078]\n'
p1250
S'ff 25 12 ba 20 00\n'
p1251
S'.plt:0000000000401660\n'
p1252
tp1253
sS'rpl_calloc'
p1254
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1255
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060d130)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1256
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004074eb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004074f0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004074f0\nPUSH RAX\nCALL 0x004015f0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004017d0\n'
p1257
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 0f a1 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 d5 a2 ff ff\n'
p1258
S'.text:00000000004074b0\n.text:00000000004074b3\n.text:00000000004074b8\n.text:00000000004074ba\n.text:00000000004074bd\n.text:00000000004074c2\n.text:00000000004074c4\n.text:00000000004074c7\n.text:00000000004074cb\n.text:00000000004074cd\n.text:00000000004074d0\n.text:00000000004074d3\n.text:00000000004074d6\n.text:00000000004074d9\n.text:00000000004074db\n.text:00000000004074dc\n.text:00000000004074e1\n.text:00000000004074e7\n.text:00000000004074e9\n.text:00000000004074ea\n.text:00000000004074eb\n.text:00000000004074f0\n.text:00000000004074f3\n.text:00000000004074f6\n'
p1259
tp1260
sS'strtof'
p1261
(S'\n__stdcall strtof(char * __nptr, char * * __endptr)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000afloat strtof(char *__nptr,char **__endptr)\u000a\u000a{\u000a  float fVar1;\u000a  \u000a  fVar1 = (float)(*(code *)PTR_strtof_0060d0f0)();\u000a  return fVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060d0f0]\n'
p1264
S'ff 25 9a b9 20 00\n'
p1265
S'.plt:0000000000401750\n'
p1266
tp1267
sS'memset'
p1268
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060d0f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060d0f8]\n'
p1271
S'ff 25 92 b9 20 00\n'
p1272
S'.plt:0000000000401760\n'
p1273
tp1274
sS'xvfprintf'
p1275
(S'\n__stdcall xvfprintf(FILE * stream, char * format, __va_list_tag * args)\n'
p1276
V\u000aint xvfprintf(FILE *stream,char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  \u000a  iVar3 = __vfprintf_chk(stream,1,format,args);\u000a  if (iVar3 < 0) {\u000a    iVar4 = ferror((FILE *)stream);\u000a    iVar2 = exit_failure;\u000a    if (iVar4 == 0) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      uVar6 = dcgettext(0,"cannot perform formatted output",5);\u000a      error((ulong)(uint)iVar2,(ulong)uVar1,uVar6,uVar6);\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1277
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV RBX,RDI\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004015d0\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x00407110\nMOV RDI,RBX\nCALL 0x00401640\nTEST EAX,EAX\nJNZ 0x00407110\nMOV R14D,dword ptr [0x0060d250]\nCALL 0x004015f0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a930\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004018f0\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1278
S'55\n41 56\n53\n48 89 d0\n48 89 f1\n48 89 fb\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 03 a5 ff ff\n89 c5\n85 ed\n79 3d\n48 89 df\ne8 65 a5 ff ff\n85 c0\n75 31\n44 8b 35 6a 61 20 00\ne8 05 a5 ff ff\n8b 18\n31 ff\nbe 30 a9 40 00\nba 05 00 00 00\ne8 c2 a5 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 de\n48 89 ca\ne8 e0 a7 ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p1279
S'.text:00000000004070b0\n.text:00000000004070b1\n.text:00000000004070b3\n.text:00000000004070b4\n.text:00000000004070b7\n.text:00000000004070ba\n.text:00000000004070bd\n.text:00000000004070c2\n.text:00000000004070c5\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070cf\n.text:00000000004070d1\n.text:00000000004070d3\n.text:00000000004070d6\n.text:00000000004070db\n.text:00000000004070dd\n.text:00000000004070df\n.text:00000000004070e6\n.text:00000000004070eb\n.text:00000000004070ed\n.text:00000000004070ef\n.text:00000000004070f4\n.text:00000000004070f9\n.text:00000000004070fe\n.text:0000000000407101\n.text:0000000000407103\n.text:0000000000407106\n.text:0000000000407108\n.text:000000000040710b\n.text:0000000000407110\n.text:0000000000407112\n.text:0000000000407113\n.text:0000000000407115\n.text:0000000000407116\n'
p1280
tp1281
sS'getc_unlocked'
p1282
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1283
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060d070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1284
S'JMP qword ptr [0x0060d070]\n'
p1285
S'ff 25 1a ba 20 00\n'
p1286
S'.plt:0000000000401650\n'
p1287
tp1288
sS'print_int'
p1289
(S'\n__stdcall print_int(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p1290
V\u000avoid print_int(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined auVar2 [16];\u000a  int iVar3;\u000a  ulong uVar4;\u000a  uint *puVar5;\u000a  long lVar6;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar7;\u000a  uint local_40;\u000a  int local_3c;\u000a  char *local_38;\u000a  \u000a  uVar4 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar7 = fields;\u000a    local_3c = in_R8D;\u000a    local_38 = fmt_string;\u000a    do {\u000a      iVar3 = (int)uVar4;\u000a      sVar7 = sVar7 - 1;\u000a      auVar2 = ZEXT816(sVar7 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar4 = SUB168(auVar2,0);\u000a      if (input_swap == false) {\u000a        uVar1 = *(uint *)block;\u000a      }\u000a      else {\u000a        puVar5 = &local_40;\u000a        lVar6 = 4;\u000a        do {\u000a          *(undefined *)puVar5 = *(undefined *)((long)block + lVar6 + -1);\u000a          puVar5 = (uint *)((long)puVar5 + 1);\u000a          lVar6 = lVar6 + -1;\u000a          uVar1 = local_40;\u000a        } while (lVar6 != 0);\u000a      }\u000a      block = (uint *)block + 1;\u000a      xprintf(local_38,(ulong)(uint)((iVar3 + local_3c) - SUB164(auVar2,0)),(ulong)uVar1);\u000a    } while (blank < sVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBX,R9D\nMOV dword ptr [RSP + 0xc],R8D\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBP,RDX\nMOV R12,RSI\nMOV R13,RDI\nCMP R13,R12\nJBE 0x00403c48\nMOVSXD R14,EBX\nMOV R15,R13\nNOP\nMOV ESI,EBX\nDEC R15\nMOV RAX,R15\nIMUL RAX,R14\nXOR EDX,EDX\nDIV R13\nADD ESI,dword ptr [RSP + 0xc]\nMOV RBX,RAX\nSUB ESI,EBX\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00403c30\nLEA RAX,[RSP + 0x8]\nMOV ECX,0x4\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RBP + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403c10\nMOV EDX,dword ptr [RSP + 0x8]\nJMP 0x00403c33\nMOV EDX,dword ptr [RBP]\nADD RBP,0x4\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406f10\nCMP R15,R12\nJA 0x00403be0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1292
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 cb\n44 89 44 24 0c\n48 89 4c 24 10\n48 89 d5\n49 89 f4\n49 89 fd\n4d 39 e5\n76 6f\n4c 63 f3\n4d 89 ef\n90\n89 de\n49 ff cf\n4c 89 f8\n49 0f af c6\n31 d2\n49 f7 f5\n03 74 24 0c\n48 89 c3\n29 de\n80 3d d9 97 20 00 00\n74 2d\n48 8d 44 24 08\nb9 04 00 00 00\n0f 1f 00\n0f b6 54 0d ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\n8b 54 24 08\neb 0e\n8b 55 00\n48 83 c5 04\n31 c0\n48 8b 7c 24 10\ne8 cd 32 00 00\n4d 39 e7\n77 98\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1293
S'.text:0000000000403bb0\n.text:0000000000403bb1\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb7\n.text:0000000000403bb9\n.text:0000000000403bba\n.text:0000000000403bbe\n.text:0000000000403bc1\n.text:0000000000403bc6\n.text:0000000000403bcb\n.text:0000000000403bce\n.text:0000000000403bd1\n.text:0000000000403bd4\n.text:0000000000403bd7\n.text:0000000000403bd9\n.text:0000000000403bdc\n.text:0000000000403bdf\n.text:0000000000403be0\n.text:0000000000403be2\n.text:0000000000403be5\n.text:0000000000403be8\n.text:0000000000403bec\n.text:0000000000403bee\n.text:0000000000403bf1\n.text:0000000000403bf5\n.text:0000000000403bf8\n.text:0000000000403bfa\n.text:0000000000403c01\n.text:0000000000403c03\n.text:0000000000403c08\n.text:0000000000403c0d\n.text:0000000000403c10\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c1a\n.text:0000000000403c1d\n.text:0000000000403c1f\n.text:0000000000403c23\n.text:0000000000403c30\n.text:0000000000403c33\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3e\n.text:0000000000403c43\n.text:0000000000403c46\n.text:0000000000403c48\n.text:0000000000403c4c\n.text:0000000000403c4d\n.text:0000000000403c4f\n.text:0000000000403c51\n.text:0000000000403c53\n.text:0000000000403c55\n.text:0000000000403c56\n'
p1294
tp1295
sS'c_isascii'
p1296
(S'\n__stdcall c_isascii()\n'
p1297
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1298
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1299
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1300
S'.text:0000000000407690\n.text:0000000000407696\n.text:0000000000407699\n'
p1301
tp1302
sS'__xargmatch_internal'
p1303
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1304
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00404730\nTEST RAX,RAX\nJNS 0x004049e9\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00404830\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004048a0\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1307
S'.text:0000000000404990\n.text:0000000000404991\n.text:0000000000404993\n.text:0000000000404995\n.text:0000000000404997\n.text:0000000000404999\n.text:000000000040499a\n.text:000000000040499b\n.text:000000000040499e\n.text:00000000004049a1\n.text:00000000004049a4\n.text:00000000004049a7\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b6\n.text:00000000004049b9\n.text:00000000004049be\n.text:00000000004049c1\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d4\n.text:00000000004049d7\n.text:00000000004049da\n.text:00000000004049df\n.text:00000000004049e2\n.text:00000000004049e9\n.text:00000000004049ed\n.text:00000000004049ee\n.text:00000000004049f0\n.text:00000000004049f2\n.text:00000000004049f4\n.text:00000000004049f6\n.text:00000000004049f7\n'
p1308
tp1309
sS'setvbuf'
p1310
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_0060d1b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x0060d1b0]\n'
p1313
S'ff 25 da b8 20 00\n'
p1314
S'.plt:00000000004018d0\n'
p1315
tp1316
sS'__ctype_b_loc'
p1317
(S'\n__stdcall __ctype_b_loc()\n'
p1318
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060d220)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x0060d220]\n'
p1320
S'ff 25 6a b8 20 00\n'
p1321
S'.plt:00000000004019b0\n'
p1322
tp1323
sS'quotearg'
p1324
(S'\n__stdcall quotearg(char * arg)\n'
p1325
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1326
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00405f20\n'
p1327
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1328
S'.text:0000000000406100\n.text:0000000000406103\n.text:0000000000406105\n.text:0000000000406108\n'
p1329
tp1330
sS'_start'
p1331
(S'\n__stdcall _start()\n'
p1332
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1333
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x407ba0\nMOV RCX,0x407b30\nMOV RDI,0x401ea0\nCALL qword ptr [0x0060cff0]\nHLT\n'
p1334
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 a0 7b 40 00\n48 c7 c1 30 7b 40 00\n48 c7 c7 a0 1e 40 00\nff 15 f6 b5 20 00\nf4\n'
p1335
S'.text:00000000004019d0\n.text:00000000004019d2\n.text:00000000004019d5\n.text:00000000004019d6\n.text:00000000004019d9\n.text:00000000004019dd\n.text:00000000004019de\n.text:00000000004019df\n.text:00000000004019e6\n.text:00000000004019ed\n.text:00000000004019f4\n.text:00000000004019fa\n'
p1336
tp1337
sS'c_iscntrl'
p1338
(S'\n__stdcall c_iscntrl()\n'
p1339
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1340
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004076b8\nRET\nCMP EDI,0x7f\nJZ 0x004076b7\nXOR EAX,EAX\nRET\n'
p1341
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1342
S'.text:00000000004076b0\n.text:00000000004076b2\n.text:00000000004076b5\n.text:00000000004076b7\n.text:00000000004076b8\n.text:00000000004076bb\n.text:00000000004076bd\n.text:00000000004076bf\n'
p1343
tp1344
sS'read_char'
p1345
(S'\n__stdcall read_char(int * c)\n'
p1346
V\u000a_Bool read_char(int *c)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  byte bVar4;\u000a  \u000a  *c = -1;\u000a  bVar4 = 1;\u000a  while( true ) {\u000a    if (in_stream == (FILE *)0x0) {\u000a      return (_Bool)bVar4;\u000a    }\u000a    iVar3 = fgetc((FILE *)in_stream);\u000a    *c = iVar3;\u000a    if (iVar3 != -1) break;\u000a    __errno_location();\u000a    _Var1 = check_and_close();\u000a    _Var2 = open_next_file();\u000a    bVar4 = bVar4 & _Var1 & _Var2;\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p1347
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV dword ptr [R14],0xffffffff\nMOV RDI,qword ptr [0x0060d3f0]\nMOV BL,0x1\nTEST RDI,RDI\nJNZ 0x00404431\nJMP 0x0040443e\nCALL 0x004015f0\nMOV EDI,dword ptr [RAX]\nCALL 0x00404270\nAND BL,AL\nCALL 0x00402b30\nAND BL,AL\nMOV RDI,qword ptr [0x0060d3f0]\nTEST RDI,RDI\nJZ 0x0040443e\nCALL 0x00401780\nMOV dword ptr [R14],EAX\nCMP EAX,-0x1\nJZ 0x00404410\nAND BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1348
S'41 56\n53\n50\n49 89 fe\n41 c7 06 ff ff ff ff\n48 8b 3d eb 8f 20 00\nb3 01\n48 85 ff\n75 25\neb 30\ne8 db d1 ff ff\n8b 38\ne8 54 fe ff ff\n20 c3\ne8 0d e7 ff ff\n20 c3\n48 8b 3d c4 8f 20 00\n48 85 ff\n74 0d\ne8 4a d3 ff ff\n41 89 06\n83 f8 ff\n74 d2\n80 e3 01\n89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1349
S'.text:00000000004043f0\n.text:00000000004043f2\n.text:00000000004043f3\n.text:00000000004043f4\n.text:00000000004043f7\n.text:00000000004043fe\n.text:0000000000404405\n.text:0000000000404407\n.text:000000000040440a\n.text:000000000040440c\n.text:0000000000404410\n.text:0000000000404415\n.text:0000000000404417\n.text:000000000040441c\n.text:000000000040441e\n.text:0000000000404423\n.text:0000000000404425\n.text:000000000040442c\n.text:000000000040442f\n.text:0000000000404431\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443c\n.text:000000000040443e\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404447\n.text:0000000000404448\n.text:000000000040444a\n'
p1350
tp1351
sS'c_isblank'
p1352
(S'\n__stdcall c_isblank()\n'
p1353
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1354
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1355
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1356
S'.text:00000000004076a0\n.text:00000000004076a3\n.text:00000000004076a6\n.text:00000000004076a9\n.text:00000000004076ac\n.text:00000000004076ae\n'
p1357
tp1358
sS'atexit'
p1359
(S'\n__stdcall atexit(__func * __func)\n'
p1360
V\u000a/* WARNING: Removing unreachable block (ram,0x00407bd0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060d1e8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1361
S'MOV RAX,0x60d238\nTEST RAX,RAX\nJZ 0x00407bd0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401940\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401940\n'
p1362
S'48 c7 c0 38 d2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 7a 9d ff ff\n31 d2\n31 f6\ne9 67 9d ff ff\n'
p1363
S'.text:0000000000407bb0\n.text:0000000000407bb7\n.text:0000000000407bba\n.text:0000000000407bbc\n.text:0000000000407bbf\n.text:0000000000407bc1\n.text:0000000000407bd0\n.text:0000000000407bd2\n.text:0000000000407bd4\n'
p1364
tp1365
sS'fdopen'
p1366
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1367
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060d198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0060d198]\n'
p1369
S'ff 25 f2 b8 20 00\n'
p1370
S'.plt:00000000004018a0\n'
p1371
tp1372
sS'error'
p1373
(S'\n__stdcall error()\n'
p1374
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060d1c0)();\u000a  return;\u000a}\u000a\u000a
p1375
S'JMP qword ptr [0x0060d1c0]\n'
p1376
S'ff 25 ca b8 20 00\n'
p1377
S'.plt:00000000004018f0\n'
p1378
tp1379
sS'strcaseeq6'
p1380
(S'\n__stdcall strcaseeq6()\n'
p1381
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004067c2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004067c9\nJMP 0x004067de\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004067de\nTEST BPL,BPL\nJZ 0x004067d9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004067f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1383
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 91 0f 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1384
S'.text:00000000004067a0\n.text:00000000004067a1\n.text:00000000004067a2\n.text:00000000004067a3\n.text:00000000004067a5\n.text:00000000004067a8\n.text:00000000004067aa\n.text:00000000004067af\n.text:00000000004067b3\n.text:00000000004067b5\n.text:00000000004067b7\n.text:00000000004067ba\n.text:00000000004067bc\n.text:00000000004067be\n.text:00000000004067c0\n.text:00000000004067c2\n.text:00000000004067c4\n.text:00000000004067c7\n.text:00000000004067c9\n.text:00000000004067cc\n.text:00000000004067ce\n.text:00000000004067d1\n.text:00000000004067d5\n.text:00000000004067d6\n.text:00000000004067d7\n.text:00000000004067d9\n.text:00000000004067de\n.text:00000000004067e2\n.text:00000000004067e3\n.text:00000000004067e4\n'
p1385
tp1386
sS'strcaseeq5'
p1387
(S'\n__stdcall strcaseeq5()\n'
p1388
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00406776\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040677d\nJMP 0x00406794\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406794\nTEST BPL,BPL\nJZ 0x0040678f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004067a0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1390
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 dd 0f 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1391
S'.text:0000000000406750\n.text:0000000000406751\n.text:0000000000406753\n.text:0000000000406754\n.text:0000000000406757\n.text:0000000000406759\n.text:000000000040675c\n.text:000000000040675e\n.text:0000000000406763\n.text:0000000000406767\n.text:0000000000406769\n.text:000000000040676b\n.text:000000000040676e\n.text:0000000000406770\n.text:0000000000406772\n.text:0000000000406774\n.text:0000000000406776\n.text:0000000000406778\n.text:000000000040677b\n.text:000000000040677d\n.text:0000000000406780\n.text:0000000000406782\n.text:0000000000406786\n.text:0000000000406789\n.text:000000000040678a\n.text:000000000040678c\n.text:000000000040678d\n.text:000000000040678f\n.text:0000000000406794\n.text:0000000000406795\n.text:0000000000406797\n.text:0000000000406798\n'
p1392
tp1393
sS'putc_unlocked'
p1394
(S'\n__stdcall putc_unlocked(int __c, FILE * __stream)\n'
p1395
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putc_unlocked(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putc_unlocked_0060d158)();\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x0060d158]\n'
p1397
S'ff 25 32 b9 20 00\n'
p1398
S'.plt:0000000000401820\n'
p1399
tp1400
sS'strcaseeq7'
p1401
(S'\n__stdcall strcaseeq7()\n'
p1402
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1403
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00406812\nTEST ECX,0xffffffdf\nJNZ 0x00406816\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040681a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1404
S'53\n48 89 fb\n31 ff\ne8 45 0f 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1405
S'.text:00000000004067f0\n.text:00000000004067f1\n.text:00000000004067f4\n.text:00000000004067f6\n.text:00000000004067fb\n.text:00000000004067ff\n.text:0000000000406801\n.text:0000000000406803\n.text:0000000000406809\n.text:000000000040680b\n.text:0000000000406810\n.text:0000000000406811\n.text:0000000000406812\n.text:0000000000406814\n.text:0000000000406816\n.text:0000000000406818\n.text:0000000000406819\n.text:000000000040681a\n.text:000000000040681f\n.text:0000000000406820\n'
p1406
tp1407
sS'lcm'
p1408
(S'\n__stdcall lcm(size_t u, size_t v)\n'
p1409
V\u000asize_t lcm(size_t u,size_t v)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = gcd(u,v);\u000a  return (v / sVar1) * u;\u000a}\u000a\u000a
p1410
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004043c0\nMOV RCX,RAX\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RCX\nIMUL RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1411
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 21 00 00 00\n48 89 c1\n31 d2\n48 89 d8\n48 f7 f1\n49 0f af c6\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1412
S'.text:0000000000404390\n.text:0000000000404392\n.text:0000000000404393\n.text:0000000000404394\n.text:0000000000404397\n.text:000000000040439a\n.text:000000000040439f\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a7\n.text:00000000004043aa\n.text:00000000004043ae\n.text:00000000004043b2\n.text:00000000004043b3\n.text:00000000004043b5\n'
p1413
tp1414
sS'emit_mandatory_arg_note'
p1415
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1416
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1417
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409aa1\nMOV EDX,0x5\nCALL 0x004016c0\nMOV RSI,qword ptr [0x0060d2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004017b0\n'
p1418
S'50\n31 ff\nbe a1 9a 40 00\nba 05 00 00 00\ne8 6e f9 ff ff\n48 8b 35 6f b5 20 00\n48 89 c7\n58\ne9 4e fa ff ff\n'
p1419
S'.text:0000000000401d40\n.text:0000000000401d41\n.text:0000000000401d43\n.text:0000000000401d48\n.text:0000000000401d4d\n.text:0000000000401d52\n.text:0000000000401d59\n.text:0000000000401d5c\n.text:0000000000401d5d\n'
p1420
tp1421
sS'strcaseeq0'
p1422
(S'\n__stdcall strcaseeq0()\n'
p1423
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00406525\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040652c\nJMP 0x00406560\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406560\nTEST BPL,BPL\nJZ 0x0040655b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00406570\nJMP 0x00406560\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 2d 12 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:00000000004064f0\n.text:00000000004064f1\n.text:00000000004064f3\n.text:00000000004064f5\n.text:00000000004064f7\n.text:00000000004064f9\n.text:00000000004064fa\n.text:00000000004064fb\n.text:00000000004064fe\n.text:0000000000406501\n.text:0000000000406504\n.text:0000000000406507\n.text:0000000000406509\n.text:000000000040650c\n.text:000000000040650e\n.text:0000000000406513\n.text:0000000000406516\n.text:0000000000406518\n.text:000000000040651a\n.text:000000000040651d\n.text:000000000040651f\n.text:0000000000406521\n.text:0000000000406523\n.text:0000000000406525\n.text:0000000000406527\n.text:000000000040652a\n.text:000000000040652c\n.text:000000000040652f\n.text:0000000000406531\n.text:0000000000406535\n.text:000000000040653a\n.text:000000000040653d\n.text:0000000000406541\n.text:0000000000406545\n.text:0000000000406549\n.text:000000000040654d\n.text:0000000000406551\n.text:0000000000406554\n.text:0000000000406559\n.text:000000000040655b\n.text:0000000000406560\n.text:0000000000406564\n.text:0000000000406565\n.text:0000000000406567\n.text:0000000000406569\n.text:000000000040656b\n.text:000000000040656d\n.text:000000000040656e\n'
p1427
tp1428
sS'dump'
p1429
(S'\n__stdcall dump()\n'
p1430
V\u000a_Bool dump(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  byte bVar5;\u000a  char *block_00;\u000a  ulong n;\u000a  uintmax_t current_offset;\u000a  char *block [2];\u000a  ulong local_50;\u000a  char *local_48 [3];\u000a  \u000a  block_00 = (char *)xnmalloc(2,bytes_per_block);\u000a  current_offset = n_bytes_to_skip;\u000a  local_48[1] = block_00 + bytes_per_block;\u000a  if (limit_bytes_to_format == 0) {\u000a    local_48[0] = block_00;\u000a    _Var3 = read_block(bytes_per_block,block_00,&local_50);\u000a    bVar5 = 0;\u000a    if (bytes_per_block <= local_50) {\u000a      do {\u000a        if (local_50 != bytes_per_block) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("n_bytes_read == bytes_per_block","src/od.c",0x587,"_Bool dump(void)");\u000a        }\u000a        bVar5 = bVar5 ^ 1;\u000a        write_block(current_offset,local_50,local_48[(ulong)bVar5],block_00);\u000a        current_offset = current_offset + local_50;\u000a        block_00 = local_48[(ulong)bVar5];\u000a        _Var2 = read_block(bytes_per_block,block_00,&local_50);\u000a        _Var3 = (_Bool)(_Var3 & _Var2);\u000a      } while (bytes_per_block <= local_50);\u000a    }\u000a  }\u000a  else {\u000a    _Var3 = true;\u000a    if (n_bytes_to_skip < end_offset) {\u000a      bVar5 = 0;\u000a      current_offset = n_bytes_to_skip;\u000a      local_48[0] = block_00;\u000a      do {\u000a        n = end_offset - current_offset;\u000a        if (bytes_per_block <= end_offset - current_offset) {\u000a          n = bytes_per_block;\u000a        }\u000a        block_00 = local_48[(ulong)bVar5];\u000a        _Var2 = read_block(n,block_00,&local_50);\u000a        _Var3 = (_Bool)(_Var2 & _Var3);\u000a        if (local_50 < bytes_per_block) goto LAB_0040332e;\u000a        if (local_50 != bytes_per_block) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("n_bytes_read == bytes_per_block","src/od.c",0x579,"_Bool dump(void)");\u000a        }\u000a        bVar5 = bVar5 ^ 1;\u000a        write_block(current_offset,local_50,local_48[(ulong)bVar5],block_00);\u000a        current_offset = current_offset + local_50;\u000a      } while (current_offset < end_offset);\u000a    }\u000a    else {\u000a      bVar5 = 0;\u000a      current_offset = n_bytes_to_skip;\u000a      local_48[0] = block_00;\u000a    }\u000a    local_50 = 0;\u000a  }\u000aLAB_0040332e:\u000a  n = local_50;\u000a  if (local_50 != 0) {\u000a    iVar4 = get_lcm();\u000a    uVar1 = (n - 1) + (long)iVar4;\u000a    memset(local_48[(ulong)bVar5] + n,0,uVar1 - (uVar1 % (long)iVar4 + n));\u000a    write_block(current_offset,local_50,local_48[(ulong)(bVar5 ^ 1)],local_48[(ulong)bVar5]);\u000a    current_offset = current_offset + local_50;\u000a  }\u000a  (*format_address)(current_offset,'\u005cn');\u000a  if ((end_offset <= current_offset) && (((limit_bytes_to_format ^ 1) & 1) == 0)) {\u000a    _Var2 = check_and_close();\u000a    _Var3 = (_Bool)(_Var3 & _Var2);\u000a  }\u000a  free(local_48[0]);\u000a  return _Var3;\u000a}\u000a\u000a
p1431
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RSI,qword ptr [0x0060d400]\nMOV EDI,0x2\nCALL 0x00406d30\nMOV qword ptr [RSP + 0x10],RAX\nADD RAX,qword ptr [0x0060d400]\nMOV qword ptr [RSP + 0x18],RAX\nMOV R15,qword ptr [0x0060d3b8]\nMOV AL,byte ptr [0x0060d3c0]\nTEST AL,AL\nJZ 0x0040326c\nMOV RDI,qword ptr [0x0060d3e0]\nMOV R14B,0x1\nCMP RDI,R15\nJBE 0x0040331b\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nMOV R12D,R14D\nSUB RDI,R15\nMOV RAX,qword ptr [0x0060d400]\nCMP RDI,RAX\nCMOVNC RDI,RAX\nMOV BL,R13B\nAND BL,0x1\nMOVZX EAX,BL\nMOV RBP,qword ptr [RSP + RAX*0x8 + 0x10]\nMOV RSI,RBP\nLEA RDX,[RSP + 0x8]\nCALL 0x00404450\nMOV R14D,EAX\nAND R14B,R12B\nMOV RSI,qword ptr [RSP + 0x8]\nCMP RSI,qword ptr [0x0060d400]\nJC 0x00403329\nJNZ 0x004033d4\nXOR BL,0x1\nMOVZX EAX,BL\nMOV RDX,qword ptr [RSP + RAX*0x8 + 0x10]\nMOV RDI,R15\nMOV RCX,RBP\nCALL 0x00404510\nADD R15,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [0x0060d3e0]\nCMP RDI,R15\nMOV R13B,BL\nJA 0x004031f0\nJMP 0x0040331d\nMOV RDI,qword ptr [0x0060d400]\nMOV RBX,qword ptr [RSP + 0x10]\nLEA RDX,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00404450\nMOV R14D,EAX\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [0x0060d400]\nXOR R13D,R13D\nCMP RBP,RAX\nJNC 0x004032fd\nJMP 0x0040332e\nXOR R13B,0x1\nMOVZX R12D,R13B\nMOV RDX,qword ptr [RSP + R12*0x8 + 0x10]\nMOV RDI,R15\nMOV RSI,RBP\nMOV RCX,RBX\nCALL 0x00404510\nADD R15,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [0x0060d400]\nMOV RBX,qword ptr [RSP + R12*0x8 + 0x10]\nMOV RSI,RBX\nLEA RDX,[RSP + 0x8]\nCALL 0x00404450\nAND R14B,AL\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [0x0060d400]\nCMP RBP,RAX\nJC 0x0040332e\nCMP RBP,RAX\nJZ 0x004032b0\nMOV EDI,0x409edc\nMOV ESI,0x409c9b\nMOV EDX,0x587\nMOV ECX,0x409efc\nCALL 0x00401740\nXOR EBX,EBX\nMOV qword ptr [RSP + 0x8],0x0\nMOV R13B,BL\nMOV RBP,qword ptr [RSP + 0x8]\nTEST RBP,RBP\nJZ 0x0040338b\nCALL 0x00402e50\nMOVSXD RSI,EAX\nLEA RCX,[RBP + RSI*0x1 + -0x1]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nAND R13B,0x1\nMOVZX EBX,R13B\nADD RDX,RBP\nADD RBP,qword ptr [RSP + RBX*0x8 + 0x10]\nSUB RCX,RDX\nXOR ESI,ESI\nMOV RDI,RBP\nMOV RDX,RCX\nCALL 0x00401760\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EAX,EBX\nXOR AL,0x1\nMOVZX EAX,AL\nMOV RDX,qword ptr [RSP + RAX*0x8 + 0x10]\nMOV RCX,qword ptr [RSP + RBX*0x8 + 0x10]\nMOV RDI,R15\nCALL 0x00404510\nADD R15,qword ptr [RSP + 0x8]\nMOV ESI,0xa\nMOV RDI,R15\nCALL qword ptr [0x0060d3a0]\nCMP R15,qword ptr [0x0060d3e0]\nJC 0x004033b8\nMOV AL,byte ptr [0x0060d3c0]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x004033b8\nXOR EDI,EDI\nCALL 0x00404270\nAND R14B,AL\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004015c0\nMOV EAX,R14D\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x409edc\nMOV ESI,0x409c9b\nMOV EDX,0x579\nMOV ECX,0x409efc\nCALL 0x00401740\n'
p1432
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 8b 35 5b a2 20 00\nbf 02 00 00 00\ne8 81 3b 00 00\n48 89 44 24 10\n48 03 05 45 a2 20 00\n48 89 44 24 18\n4c 8b 3d f1 a1 20 00\n8a 05 f3 a1 20 00\n84 c0\n0f 84 97 00 00 00\n48 8b 3d 04 a2 20 00\n41 b6 01\n4c 39 ff\n0f 86 33 01 00 00\n45 31 ed\n0f 1f 44 00 00\n45 89 f4\n4c 29 ff\n48 8b 05 03 a2 20 00\n48 39 c7\n48 0f 43 f8\n44 88 eb\n80 e3 01\n0f b6 c3\n48 8b 6c c4 10\n48 89 ee\n48 8d 54 24 08\ne8 31 12 00 00\n41 89 c6\n45 20 e6\n48 8b 74 24 08\n48 3b 35 cf a1 20 00\n0f 82 f2 00 00 00\n0f 85 97 01 00 00\n80 f3 01\n0f b6 c3\n48 8b 54 c4 10\n4c 89 ff\n48 89 e9\ne8 bd 12 00 00\n4c 03 7c 24 08\n48 8b 3d 81 a1 20 00\n4c 39 ff\n41 88 dd\n77 89\ne9 b1 00 00 00\n48 8b 3d 8d a1 20 00\n48 8b 5c 24 10\n48 8d 54 24 08\n48 89 de\ne8 cb 11 00 00\n41 89 c6\n48 8b 6c 24 08\n48 8b 05 6c a1 20 00\n45 31 ed\n48 39 c5\n73 61\ne9 8d 00 00 00\n41 80 f5 01\n45 0f b6 e5\n4a 8b 54 e4 10\n4c 89 ff\n48 89 ee\n48 89 d9\ne8 45 12 00 00\n4c 03 7c 24 08\n48 8b 3d 29 a1 20 00\n4a 8b 5c e4 10\n48 89 de\n48 8d 54 24 08\ne8 67 11 00 00\n41 20 c6\n48 8b 6c 24 08\n48 8b 05 08 a1 20 00\n48 39 c5\n72 31\n48 39 c5\n74 ae\nbf dc 9e 40 00\nbe 9b 9c 40 00\nba 87 05 00 00\nb9 fc 9e 40 00\ne8 25 e4 ff ff\n31 db\n48 c7 44 24 08 00 00 00 00\n41 88 dd\n48 8b 6c 24 08\n48 85 ed\n74 58\ne8 18 fb ff ff\n48 63 f0\n48 8d 4c 35 ff\n31 d2\n48 89 c8\n48 f7 f6\n41 80 e5 01\n41 0f b6 dd\n48 01 ea\n48 03 6c dc 10\n48 29 d1\n31 f6\n48 89 ef\n48 89 ca\ne8 f8 e3 ff ff\n48 8b 74 24 08\n89 d8\n34 01\n0f b6 c0\n48 8b 54 c4 10\n48 8b 4c dc 10\n4c 89 ff\ne8 8a 11 00 00\n4c 03 7c 24 08\nbe 0a 00 00 00\n4c 89 ff\nff 15 07 a0 20 00\n4c 3b 3d 40 a0 20 00\n72 16\n8a 05 18 a0 20 00\n34 01\na8 01\n75 0a\n31 ff\ne8 bb 0e 00 00\n41 20 c6\n48 8b 7c 24 10\ne8 fe e1 ff ff\n44 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf dc 9e 40 00\nbe 9b 9c 40 00\nba 79 05 00 00\nb9 fc 9e 40 00\ne8 53 e3 ff ff\n'
p1433
S'.text:0000000000403190\n.text:0000000000403191\n.text:0000000000403193\n.text:0000000000403195\n.text:0000000000403197\n.text:0000000000403199\n.text:000000000040319a\n.text:000000000040319e\n.text:00000000004031a5\n.text:00000000004031aa\n.text:00000000004031af\n.text:00000000004031b4\n.text:00000000004031bb\n.text:00000000004031c0\n.text:00000000004031c7\n.text:00000000004031cd\n.text:00000000004031cf\n.text:00000000004031d5\n.text:00000000004031dc\n.text:00000000004031df\n.text:00000000004031e2\n.text:00000000004031e8\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f6\n.text:00000000004031fd\n.text:0000000000403200\n.text:0000000000403204\n.text:0000000000403207\n.text:000000000040320a\n.text:000000000040320d\n.text:0000000000403212\n.text:0000000000403215\n.text:000000000040321a\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403225\n.text:000000000040322a\n.text:0000000000403231\n.text:0000000000403237\n.text:000000000040323d\n.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403248\n.text:000000000040324b\n.text:000000000040324e\n.text:0000000000403253\n.text:0000000000403258\n.text:000000000040325f\n.text:0000000000403262\n.text:0000000000403265\n.text:0000000000403267\n.text:000000000040326c\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327d\n.text:0000000000403280\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328d\n.text:0000000000403294\n.text:0000000000403297\n.text:000000000040329a\n.text:000000000040329c\n.text:00000000004032b0\n.text:00000000004032b4\n.text:00000000004032b8\n.text:00000000004032bd\n.text:00000000004032c0\n.text:00000000004032c3\n.text:00000000004032c6\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032df\n.text:00000000004032e4\n.text:00000000004032e9\n.text:00000000004032ec\n.text:00000000004032f1\n.text:00000000004032f8\n.text:00000000004032fb\n.text:00000000004032fd\n.text:0000000000403300\n.text:0000000000403302\n.text:0000000000403307\n.text:000000000040330c\n.text:0000000000403311\n.text:0000000000403316\n.text:000000000040331b\n.text:000000000040331d\n.text:0000000000403326\n.text:0000000000403329\n.text:000000000040332e\n.text:0000000000403331\n.text:0000000000403333\n.text:0000000000403338\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403345\n.text:0000000000403348\n.text:000000000040334c\n.text:0000000000403350\n.text:0000000000403353\n.text:0000000000403358\n.text:000000000040335b\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403363\n.text:0000000000403368\n.text:000000000040336d\n.text:000000000040336f\n.text:0000000000403371\n.text:0000000000403374\n.text:0000000000403379\n.text:000000000040337e\n.text:0000000000403381\n.text:0000000000403386\n.text:000000000040338b\n.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403399\n.text:00000000004033a0\n.text:00000000004033a2\n.text:00000000004033a8\n.text:00000000004033aa\n.text:00000000004033ac\n.text:00000000004033ae\n.text:00000000004033b0\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033bd\n.text:00000000004033c2\n.text:00000000004033c5\n.text:00000000004033c9\n.text:00000000004033ca\n.text:00000000004033cc\n.text:00000000004033ce\n.text:00000000004033d0\n.text:00000000004033d2\n.text:00000000004033d3\n.text:00000000004033d4\n.text:00000000004033d9\n.text:00000000004033de\n.text:00000000004033e3\n.text:00000000004033e8\n'
p1434
tp1435
sS'strcaseeq2'
p1436
(S'\n__stdcall strcaseeq2()\n'
p1437
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00406636\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040663d\nJMP 0x0040666a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040666a\nTEST BPL,BPL\nJZ 0x00406665\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406680\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1439
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 11 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1440
S'.text:0000000000406600\n.text:0000000000406601\n.text:0000000000406603\n.text:0000000000406605\n.text:0000000000406607\n.text:0000000000406609\n.text:000000000040660a\n.text:000000000040660b\n.text:000000000040660e\n.text:0000000000406611\n.text:0000000000406614\n.text:0000000000406617\n.text:0000000000406619\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406623\n.text:0000000000406627\n.text:0000000000406629\n.text:000000000040662b\n.text:000000000040662e\n.text:0000000000406630\n.text:0000000000406632\n.text:0000000000406634\n.text:0000000000406636\n.text:0000000000406638\n.text:000000000040663b\n.text:000000000040663d\n.text:0000000000406640\n.text:0000000000406642\n.text:0000000000406646\n.text:000000000040664a\n.text:000000000040664e\n.text:0000000000406652\n.text:0000000000406655\n.text:0000000000406659\n.text:000000000040665a\n.text:000000000040665c\n.text:000000000040665e\n.text:0000000000406660\n.text:0000000000406662\n.text:0000000000406663\n.text:0000000000406665\n.text:000000000040666a\n.text:000000000040666e\n.text:000000000040666f\n.text:0000000000406671\n.text:0000000000406673\n.text:0000000000406675\n.text:0000000000406677\n.text:0000000000406678\n'
p1441
tp1442
sS'strcaseeq1'
p1443
(S'\n__stdcall strcaseeq1()\n'
p1444
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1445
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004065ad\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004065b4\nJMP 0x004065e7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004065e7\nTEST BPL,BPL\nJZ 0x004065e2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406600\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1446
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 a6 11 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1447
S'.text:0000000000406570\n.text:0000000000406571\n.text:0000000000406573\n.text:0000000000406575\n.text:0000000000406577\n.text:0000000000406579\n.text:000000000040657a\n.text:000000000040657b\n.text:0000000000406580\n.text:0000000000406583\n.text:0000000000406586\n.text:0000000000406589\n.text:000000000040658b\n.text:000000000040658e\n.text:0000000000406593\n.text:0000000000406595\n.text:000000000040659a\n.text:000000000040659e\n.text:00000000004065a0\n.text:00000000004065a2\n.text:00000000004065a5\n.text:00000000004065a7\n.text:00000000004065a9\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065af\n.text:00000000004065b2\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065b9\n.text:00000000004065bd\n.text:00000000004065c1\n.text:00000000004065c5\n.text:00000000004065cb\n.text:00000000004065cf\n.text:00000000004065d2\n.text:00000000004065d6\n.text:00000000004065d7\n.text:00000000004065d9\n.text:00000000004065db\n.text:00000000004065dd\n.text:00000000004065df\n.text:00000000004065e0\n.text:00000000004065e2\n.text:00000000004065e7\n.text:00000000004065eb\n.text:00000000004065ec\n.text:00000000004065ee\n.text:00000000004065f0\n.text:00000000004065f2\n.text:00000000004065f4\n.text:00000000004065f5\n'
p1448
tp1449
sS'strcaseeq4'
p1450
(S'\n__stdcall strcaseeq4()\n'
p1451
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1452
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040671c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406723\nJMP 0x00406744\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406744\nTEST BPL,BPL\nJZ 0x0040673f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406750\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1453
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 37 10 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1454
S'.text:00000000004066f0\n.text:00000000004066f1\n.text:00000000004066f3\n.text:00000000004066f5\n.text:00000000004066f6\n.text:00000000004066f7\n.text:00000000004066fa\n.text:00000000004066fd\n.text:00000000004066ff\n.text:0000000000406702\n.text:0000000000406704\n.text:0000000000406709\n.text:000000000040670d\n.text:000000000040670f\n.text:0000000000406711\n.text:0000000000406714\n.text:0000000000406716\n.text:0000000000406718\n.text:000000000040671a\n.text:000000000040671c\n.text:000000000040671e\n.text:0000000000406721\n.text:0000000000406723\n.text:0000000000406726\n.text:0000000000406728\n.text:000000000040672c\n.text:0000000000406730\n.text:0000000000406733\n.text:0000000000406737\n.text:0000000000406738\n.text:000000000040673a\n.text:000000000040673c\n.text:000000000040673d\n.text:000000000040673f\n.text:0000000000406744\n.text:0000000000406748\n.text:0000000000406749\n.text:000000000040674b\n.text:000000000040674d\n.text:000000000040674e\n'
p1455
tp1456
sS'strcaseeq3'
p1457
(S'\n__stdcall strcaseeq3()\n'
p1458
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407740\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004066b0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004066b7\nJMP 0x004066da\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004066da\nTEST BPL,BPL\nJZ 0x004066d5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004066f0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1460
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 a3 10 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1461
S'.text:0000000000406680\n.text:0000000000406681\n.text:0000000000406683\n.text:0000000000406685\n.text:0000000000406687\n.text:0000000000406688\n.text:000000000040668b\n.text:000000000040668e\n.text:0000000000406691\n.text:0000000000406693\n.text:0000000000406696\n.text:0000000000406698\n.text:000000000040669d\n.text:00000000004066a1\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066a8\n.text:00000000004066aa\n.text:00000000004066ac\n.text:00000000004066ae\n.text:00000000004066b0\n.text:00000000004066b2\n.text:00000000004066b5\n.text:00000000004066b7\n.text:00000000004066ba\n.text:00000000004066bc\n.text:00000000004066c0\n.text:00000000004066c4\n.text:00000000004066c8\n.text:00000000004066cb\n.text:00000000004066cc\n.text:00000000004066ce\n.text:00000000004066d0\n.text:00000000004066d2\n.text:00000000004066d3\n.text:00000000004066d5\n.text:00000000004066da\n.text:00000000004066db\n.text:00000000004066dd\n.text:00000000004066df\n.text:00000000004066e1\n.text:00000000004066e2\n'
p1462
tp1463
sS'register_tm_clones'
p1464
(S'\n__stdcall register_tm_clones()\n'
p1465
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a63) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a6d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1466
S'MOV ESI,0x60d2b0\nPUSH RBP\nSUB RSI,0x60d2b0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401a78\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a78\nPOP RBP\nMOV EDI,0x60d2b0\nJMP RAX\nPOP RBP\nRET\n'
p1467
S'be b0 d2 60 00\n55\n48 81 ee b0 d2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf b0 d2 60 00\nff e0\n5d\nc3\n'
p1468
S'.text:0000000000401a40\n.text:0000000000401a45\n.text:0000000000401a46\n.text:0000000000401a4d\n.text:0000000000401a51\n.text:0000000000401a54\n.text:0000000000401a57\n.text:0000000000401a5b\n.text:0000000000401a5e\n.text:0000000000401a61\n.text:0000000000401a63\n.text:0000000000401a68\n.text:0000000000401a6b\n.text:0000000000401a6d\n.text:0000000000401a6e\n.text:0000000000401a73\n.text:0000000000401a78\n.text:0000000000401a79\n'
p1469
tp1470
sS'c_islower'
p1471
(S'\n__stdcall c_islower()\n'
p1472
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1473
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1474
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1475
S'.text:00000000004076e0\n.text:00000000004076e3\n.text:00000000004076e6\n.text:00000000004076e9\n'
p1476
tp1477
sS'argmatch'
p1478
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1479
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x004016e0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x004047f7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401600\nTEST EAX,EAX\nJNZ 0x004047e0\nMOV RDI,R15\nCALL 0x004016e0\nCMP RAX,RBX\nJZ 0x00404819\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x004047d5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x004047cc\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x004047e0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x004047e0\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00404780\nJMP 0x00404807\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1481
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 91 cf ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 72 ce ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 46 cf ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 d8 cf ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1482
S'.text:0000000000404730\n.text:0000000000404731\n.text:0000000000404733\n.text:0000000000404735\n.text:0000000000404737\n.text:0000000000404739\n.text:000000000040473a\n.text:000000000040473e\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404747\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404752\n.text:0000000000404757\n.text:000000000040475b\n.text:000000000040475e\n.text:0000000000404764\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404774\n.text:0000000000404779\n.text:000000000040477b\n.text:0000000000404780\n.text:0000000000404783\n.text:0000000000404786\n.text:0000000000404789\n.text:000000000040478e\n.text:0000000000404790\n.text:0000000000404792\n.text:0000000000404795\n.text:000000000040479a\n.text:000000000040479d\n.text:000000000040479f\n.text:00000000004047a5\n.text:00000000004047a7\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b1\n.text:00000000004047b6\n.text:00000000004047ba\n.text:00000000004047bd\n.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c8\n.text:00000000004047ca\n.text:00000000004047cc\n.text:00000000004047ce\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047da\n.text:00000000004047e0\n.text:00000000004047e5\n.text:00000000004047ea\n.text:00000000004047ed\n.text:00000000004047f0\n.text:00000000004047f3\n.text:00000000004047f5\n.text:00000000004047f7\n.text:0000000000404800\n.text:0000000000404802\n.text:0000000000404807\n.text:000000000040480c\n.text:0000000000404813\n.text:0000000000404819\n.text:000000000040481c\n.text:0000000000404820\n.text:0000000000404821\n.text:0000000000404823\n.text:0000000000404825\n.text:0000000000404827\n.text:0000000000404829\n.text:000000000040482a\n'
p1483
tp1484
sS'fwrite'
p1485
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1486
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060d1f8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1487
S'JMP qword ptr [0x0060d1f8]\n'
p1488
S'ff 25 92 b8 20 00\n'
p1489
S'.plt:0000000000401960\n'
p1490
tp1491
sS'__do_global_dtors_aux'
p1492
(S'\n__stdcall __do_global_dtors_aux()\n'
p1493
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1494
S'CMP byte ptr [0x0060d308],0x0\nJNZ 0x00401a9a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401a00\nPOP RBP\nMOV byte ptr [0x0060d308],0x1\nRET\n'
p1495
S'80 3d 81 b8 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 6e b8 20 00 01\nf3 c3\n'
p1496
S'.text:0000000000401a80\n.text:0000000000401a87\n.text:0000000000401a89\n.text:0000000000401a8a\n.text:0000000000401a8d\n.text:0000000000401a92\n.text:0000000000401a93\n.text:0000000000401a9a\n'
p1497
tp1498
sS'c_isprint'
p1499
(S'\n__stdcall c_isprint()\n'
p1500
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1501
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1502
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1503
S'.text:00000000004076f0\n.text:00000000004076f3\n.text:00000000004076f6\n.text:00000000004076f9\n'
p1504
tp1505
sS'_fini'
p1506
(S'\n__stdcall _fini()\n'
p1507
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1508
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1509
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1510
S'.fini:0000000000407bf0\n.fini:0000000000407bf4\n.fini:0000000000407bf8\n'
p1511
tp1512
sS'print_long_double'
p1513
(S'\n__stdcall print_long_double(size_t fields, size_t blank, void * block, char * fmt_string)\n'
p1514
V\u000avoid print_long_double(size_t fields,size_t blank,void *block,char *fmt_string)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  int iVar2;\u000a  ulong uVar3;\u000a  char *pcVar4;\u000a  long lVar5;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  size_t sVar6;\u000a  undefined x [16];\u000a  undefined extraout_XMM0 [16];\u000a  char buf [45];\u000a  char local_68 [56];\u000a  \u000a  uVar3 = (ulong)in_R9D;\u000a  if (blank < fields) {\u000a    sVar6 = fields;\u000a    do {\u000a      iVar2 = (int)uVar3;\u000a      sVar6 = sVar6 - 1;\u000a      auVar1 = ZEXT816(sVar6 * (long)(int)in_R9D) / ZEXT816(fields);\u000a      uVar3 = SUB168(auVar1,0);\u000a      if (input_swap != false) {\u000a        lVar5 = 0x10;\u000a        pcVar4 = local_68;\u000a        do {\u000a          *pcVar4 = *(char *)((long)block + lVar5 + -1);\u000a          pcVar4 = pcVar4 + 1;\u000a          lVar5 = lVar5 + -1;\u000a        } while (lVar5 != 0);\u000a      }\u000a      block = (void *)((long)block + 0x10);\u000a      ldtoastr(local_68,0x2d,(longdouble)x);\u000a      xprintf("%*s",(ulong)(uint)((iVar2 + in_R8D) - SUB164(auVar1,0)),local_68);\u000a      x = extraout_XMM0;\u000a    } while (blank < sVar6);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1515
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x68\nMOV EBP,R9D\nMOV dword ptr [RSP + 0x1c],R8D\nMOV RBX,RDX\nMOV R12,RDI\nMOV qword ptr [RSP + 0x28],RSI\nCMP R12,RSI\nJBE 0x00404047\nMOVSXD RAX,EBP\nMOV qword ptr [RSP + 0x20],RAX\nLEA R13,[RSP + 0x30]\nMOV R15,R12\nNOP word ptr [RAX + RAX*0x1]\nMOV R14D,EBP\nDEC R15\nMOV RAX,R15\nIMUL RAX,qword ptr [RSP + 0x20]\nXOR EDX,EDX\nDIV R12\nADD R14D,dword ptr [RSP + 0x1c]\nMOV RBP,RAX\nSUB R14D,EBP\nCMP byte ptr [0x0060d3da],0x0\nJZ 0x00404010\nMOV RAX,R13\nMOV ECX,0x10\nMOVZX EDX,byte ptr [RBX + RCX*0x1 + -0x1]\nMOV byte ptr [RAX],DL\nINC RAX\nDEC RCX\nJNZ 0x00403ff0\nFLD tword ptr [RSP + 0x30]\nJMP 0x00404012\nFLD tword ptr [RBX]\nADD RBX,0x10\nFSTP tword ptr [RSP]\nMOV ESI,0x2d\nXOR EDX,EDX\nXOR ECX,ECX\nMOV RDI,R13\nCALL 0x00404df0\nMOV EDI,0x409e64\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R13\nCALL 0x00406f10\nCMP R15,qword ptr [RSP + 0x28]\nJA 0x00403fc0\nADD RSP,0x68\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1516
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 68\n44 89 cd\n44 89 44 24 1c\n48 89 d3\n49 89 fc\n48 89 74 24 28\n49 39 f4\n0f 86 9d 00 00 00\n48 63 c5\n48 89 44 24 20\n4c 8d 6c 24 30\n4d 89 e7\n66 0f 1f 44 00 00\n41 89 ee\n49 ff cf\n4c 89 f8\n48 0f af 44 24 20\n31 d2\n49 f7 f4\n44 03 74 24 1c\n48 89 c5\n41 29 ee\n80 3d f4 93 20 00 00\n74 28\n4c 89 e8\nb9 10 00 00 00\n0f b6 54 0b ff\n88 10\n48 ff c0\n48 ff c9\n75 f1\ndb 6c 24 30\neb 0d\ndb 2b\n48 83 c3 10\ndb 3c 24\nbe 2d 00 00 00\n31 d2\n31 c9\n4c 89 ef\ne8 c6 0d 00 00\nbf 64 9e 40 00\n31 c0\n44 89 f6\n4c 89 ea\ne8 d4 2e 00 00\n4c 3b 7c 24 28\n0f 87 79 ff ff ff\n48 83 c4 68\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1517
S'.text:0000000000403f80\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f87\n.text:0000000000403f89\n.text:0000000000403f8a\n.text:0000000000403f8e\n.text:0000000000403f91\n.text:0000000000403f96\n.text:0000000000403f99\n.text:0000000000403f9c\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403faa\n.text:0000000000403fad\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fc0\n.text:0000000000403fc3\n.text:0000000000403fc6\n.text:0000000000403fc9\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd9\n.text:0000000000403fdc\n.text:0000000000403fdf\n.text:0000000000403fe6\n.text:0000000000403fe8\n.text:0000000000403feb\n.text:0000000000403ff0\n.text:0000000000403ff5\n.text:0000000000403ff7\n.text:0000000000403ffa\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404003\n.text:0000000000404010\n.text:0000000000404012\n.text:0000000000404016\n.text:0000000000404019\n.text:000000000040401e\n.text:0000000000404020\n.text:0000000000404022\n.text:0000000000404025\n.text:000000000040402a\n.text:000000000040402f\n.text:0000000000404031\n.text:0000000000404034\n.text:0000000000404037\n.text:000000000040403c\n.text:0000000000404041\n.text:0000000000404047\n.text:000000000040404b\n.text:000000000040404c\n.text:000000000040404e\n.text:0000000000404050\n.text:0000000000404052\n.text:0000000000404054\n.text:0000000000404055\n'
p1518
tp1519
sS'__fpending'
p1520
(S'\n__stdcall __fpending()\n'
p1521
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060d060)();\u000a  return;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0060d060]\n'
p1523
S'ff 25 2a ba 20 00\n'
p1524
S'.plt:0000000000401630\n'
p1525
tp1526
s.