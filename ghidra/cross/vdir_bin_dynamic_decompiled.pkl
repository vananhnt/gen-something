(dp0
S'format_user_width'
p1
(S'\n__stdcall format_user_width()\n'
p2
V\u000aint format_user_width(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *name;\u000a  uint in_EDI;\u000a  \u000a  if (numeric_ids == 0) {\u000a    name = getuser();\u000a  }\u000a  else {\u000a    name = (char *)0x0;\u000a  }\u000a  iVar1 = format_user_or_group_width(name,(ulong)in_EDI);\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'PUSH RBX\nMOV EBX,EDI\nMOV AL,byte ptr [0x0061d839]\nTEST AL,AL\nJZ 0x00406401\nXOR EDI,EDI\nJMP 0x0040640b\nMOV EDI,EBX\nCALL 0x0040b0e0\nMOV RDI,RAX\nMOV ESI,EBX\nPOP RBX\nJMP 0x00406470\n'
p4
S'53\n89 fb\n8a 05 40 74 21 00\n84 c0\n74 04\n31 ff\neb 0a\n89 df\ne8 d8 4c 00 00\n48 89 c7\n89 de\n5b\neb 60\n'
p5
S'.text:00000000004063f0\n.text:00000000004063f1\n.text:00000000004063f3\n.text:00000000004063f9\n.text:00000000004063fb\n.text:00000000004063fd\n.text:00000000004063ff\n.text:0000000000406401\n.text:0000000000406403\n.text:0000000000406408\n.text:000000000040640b\n.text:000000000040640d\n.text:000000000040640e\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0061d258)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0061d258]\n'
p11
S'ff 25 42 ad 21 00\n'
p12
S'.plt:0000000000402510\n'
p13
tp14
sS'basename_is_dot_or_dotdot'
p15
(S'\n__stdcall basename_is_dot_or_dotdot(char * name)\n'
p16
V\u000a_Bool basename_is_dot_or_dotdot(char *name)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *file_name;\u000a  \u000a  file_name = last_component(name);\u000a  _Var1 = dot_or_dotdot(file_name);\u000a  return _Var1;\u000a}\u000a\u000a
p17
S'PUSH RAX\nCALL 0x004090e0\nMOV RDI,RAX\nPOP RAX\nJMP 0x004064f0\n'
p18
S'50\ne8 fa 2b 00 00\n48 89 c7\n58\neb 04\n'
p19
S'.text:00000000004064e0\n.text:00000000004064e1\n.text:00000000004064e6\n.text:00000000004064e9\n.text:00000000004064ea\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00417c13,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x40f597;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x40f618;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40f6ac;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x0040f428\nMOV EDX,0x417c00\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004026b0\nJMP 0x0040f43d\nMOV EDX,0x417c0c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004026b0\nXOR EDI,EDI\nMOV ESI,0x417c13\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x417ee0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004026b0\nXOR EDI,EDI\nMOV ESI,0x417c17\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004023c0\nCMP R12,0x9\nJA 0x0040f4c6\nJMP qword ptr [0x417bb0 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x417ce2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004026b0\nXOR EDI,EDI\nMOV ESI,0x417e21\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x38\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417cf2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004026b0\nXOR EDI,EDI\nMOV ESI,0x417d09\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004026b0\nXOR EDI,EDI\nMOV ESI,0x417d25\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x18\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417d45\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x18\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417d69\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x28\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417d91\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x28\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417dbd\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x38\nJMP 0x0040f737\nXOR EDI,EDI\nMOV ESI,0x417ded\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004026b0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00402100\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 00 7c 41 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 8a 32 ff ff\neb 15\nba 0c 7c 41 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 73 32 ff ff\n31 ff\nbe 13 7c 41 00\nba 05 00 00 00\ne8 22 2e ff ff\n48 89 c1\nbe 01 00 00 00\nba e0 7e 41 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 45 32 ff ff\n31 ff\nbe 17 7c 41 00\nba 05 00 00 00\ne8 f4 2d ff ff\n48 89 c7\n4c 89 f6\ne8 39 2f ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b0 7b 41 00\n31 ff\nbe e2 7c 41 00\nba 05 00 00 00\ne8 ca 2d ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea 31 ff ff\n31 ff\nbe 21 7e 41 00\nba 05 00 00 00\ne8 99 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 a1 31 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe f2 7c 41 00\nba 05 00 00 00\ne8 47 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 63 31 ff ff\n31 ff\nbe 09 7d 41 00\nba 05 00 00 00\ne8 12 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 2a 31 ff ff\n31 ff\nbe 25 7d 41 00\nba 05 00 00 00\ne8 d9 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 f4 30 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 45 7d 41 00\nba 05 00 00 00\ne8 9a 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 b2 30 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 69 7d 41 00\nba 05 00 00 00\ne8 58 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 68 30 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 91 7d 41 00\nba 05 00 00 00\ne8 0e 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1e 30 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe bd 7d 41 00\nba 05 00 00 00\ne8 c4 2b ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 cc 2f ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe ed 7d 41 00\nba 05 00 00 00\ne8 75 2b ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 7d 2f ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 bc 29 ff ff\n'
p26
S'.text:000000000040f3f0\n.text:000000000040f3f2\n.text:000000000040f3f4\n.text:000000000040f3f6\n.text:000000000040f3f7\n.text:000000000040f3f8\n.text:000000000040f3fb\n.text:000000000040f3fe\n.text:000000000040f401\n.text:000000000040f404\n.text:000000000040f407\n.text:000000000040f40a\n.text:000000000040f40f\n.text:000000000040f412\n.text:000000000040f414\n.text:000000000040f419\n.text:000000000040f41b\n.text:000000000040f41e\n.text:000000000040f421\n.text:000000000040f426\n.text:000000000040f428\n.text:000000000040f42d\n.text:000000000040f42f\n.text:000000000040f432\n.text:000000000040f435\n.text:000000000040f438\n.text:000000000040f43d\n.text:000000000040f43f\n.text:000000000040f444\n.text:000000000040f449\n.text:000000000040f44e\n.text:000000000040f451\n.text:000000000040f456\n.text:000000000040f45b\n.text:000000000040f461\n.text:000000000040f463\n.text:000000000040f466\n.text:000000000040f46b\n.text:000000000040f46d\n.text:000000000040f472\n.text:000000000040f477\n.text:000000000040f47c\n.text:000000000040f47f\n.text:000000000040f482\n.text:000000000040f487\n.text:000000000040f48b\n.text:000000000040f48d\n.text:000000000040f495\n.text:000000000040f497\n.text:000000000040f49c\n.text:000000000040f4a1\n.text:000000000040f4a6\n.text:000000000040f4a9\n.text:000000000040f4ac\n.text:000000000040f4b1\n.text:000000000040f4b3\n.text:000000000040f4b6\n.text:000000000040f4ba\n.text:000000000040f4bb\n.text:000000000040f4bd\n.text:000000000040f4bf\n.text:000000000040f4c1\n.text:000000000040f4c6\n.text:000000000040f4c8\n.text:000000000040f4cd\n.text:000000000040f4d2\n.text:000000000040f4d7\n.text:000000000040f4da\n.text:000000000040f4dd\n.text:000000000040f4e1\n.text:000000000040f4e5\n.text:000000000040f4ea\n.text:000000000040f4ef\n.text:000000000040f4f2\n.text:000000000040f4f6\n.text:000000000040f4fa\n.text:000000000040f4fe\n.text:000000000040f502\n.text:000000000040f506\n.text:000000000040f50a\n.text:000000000040f50f\n.text:000000000040f513\n.text:000000000040f518\n.text:000000000040f51a\n.text:000000000040f51f\n.text:000000000040f524\n.text:000000000040f529\n.text:000000000040f52c\n.text:000000000040f52f\n.text:000000000040f533\n.text:000000000040f538\n.text:000000000040f53a\n.text:000000000040f53d\n.text:000000000040f541\n.text:000000000040f542\n.text:000000000040f544\n.text:000000000040f546\n.text:000000000040f548\n.text:000000000040f54d\n.text:000000000040f54f\n.text:000000000040f554\n.text:000000000040f559\n.text:000000000040f55e\n.text:000000000040f561\n.text:000000000040f564\n.text:000000000040f568\n.text:000000000040f56c\n.text:000000000040f571\n.text:000000000040f573\n.text:000000000040f576\n.text:000000000040f57a\n.text:000000000040f57b\n.text:000000000040f57d\n.text:000000000040f57f\n.text:000000000040f581\n.text:000000000040f586\n.text:000000000040f588\n.text:000000000040f58d\n.text:000000000040f592\n.text:000000000040f597\n.text:000000000040f59a\n.text:000000000040f59d\n.text:000000000040f5a1\n.text:000000000040f5a5\n.text:000000000040f5a9\n.text:000000000040f5ae\n.text:000000000040f5b0\n.text:000000000040f5b3\n.text:000000000040f5b7\n.text:000000000040f5bc\n.text:000000000040f5c0\n.text:000000000040f5c5\n.text:000000000040f5c7\n.text:000000000040f5cc\n.text:000000000040f5d1\n.text:000000000040f5d6\n.text:000000000040f5d9\n.text:000000000040f5dc\n.text:000000000040f5e0\n.text:000000000040f5e4\n.text:000000000040f5e9\n.text:000000000040f5ee\n.text:000000000040f5f1\n.text:000000000040f5f5\n.text:000000000040f5f9\n.text:000000000040f5fe\n.text:000000000040f602\n.text:000000000040f607\n.text:000000000040f609\n.text:000000000040f60e\n.text:000000000040f613\n.text:000000000040f618\n.text:000000000040f61b\n.text:000000000040f61e\n.text:000000000040f622\n.text:000000000040f626\n.text:000000000040f62a\n.text:000000000040f62f\n.text:000000000040f634\n.text:000000000040f637\n.text:000000000040f63b\n.text:000000000040f63f\n.text:000000000040f643\n.text:000000000040f648\n.text:000000000040f64c\n.text:000000000040f651\n.text:000000000040f653\n.text:000000000040f658\n.text:000000000040f65d\n.text:000000000040f662\n.text:000000000040f665\n.text:000000000040f668\n.text:000000000040f66c\n.text:000000000040f670\n.text:000000000040f675\n.text:000000000040f67a\n.text:000000000040f67d\n.text:000000000040f681\n.text:000000000040f685\n.text:000000000040f689\n.text:000000000040f68d\n.text:000000000040f692\n.text:000000000040f696\n.text:000000000040f69b\n.text:000000000040f69d\n.text:000000000040f6a2\n.text:000000000040f6a7\n.text:000000000040f6ac\n.text:000000000040f6af\n.text:000000000040f6b2\n.text:000000000040f6b6\n.text:000000000040f6ba\n.text:000000000040f6be\n.text:000000000040f6c3\n.text:000000000040f6c8\n.text:000000000040f6cb\n.text:000000000040f6cf\n.text:000000000040f6d3\n.text:000000000040f6d7\n.text:000000000040f6db\n.text:000000000040f6df\n.text:000000000040f6e4\n.text:000000000040f6e8\n.text:000000000040f6ea\n.text:000000000040f6ec\n.text:000000000040f6f1\n.text:000000000040f6f6\n.text:000000000040f6fb\n.text:000000000040f6fe\n.text:000000000040f701\n.text:000000000040f705\n.text:000000000040f709\n.text:000000000040f70e\n.text:000000000040f713\n.text:000000000040f716\n.text:000000000040f71a\n.text:000000000040f71e\n.text:000000000040f722\n.text:000000000040f726\n.text:000000000040f72a\n.text:000000000040f72e\n.text:000000000040f733\n.text:000000000040f737\n.text:000000000040f738\n.text:000000000040f73a\n.text:000000000040f73c\n.text:000000000040f73e\n.text:000000000040f73f\n'
p27
tp28
sS'mktime_internal'
p29
(S'\n__stdcall mktime_internal(tm * tp, anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, time_t * offset)\n'
p30
V\u000atime_t mktime_internal(tm *tp,tm *(*convert)(time_t *,tm *),time_t *offset)\u000a\u000a{\u000a  uint uVar1;\u000a  tm *(*convert_00)(time_t *,tm *);\u000a  int iVar2;\u000a  int iVar3;\u000a  time_t tVar4;\u000a  tm *ptVar5;\u000a  uint uVar6;\u000a  time_t tVar7;\u000a  long a;\u000a  int iVar8;\u000a  long lVar9;\u000a  bool bVar10;\u000a  bool bVar11;\u000a  int isdst;\u000a  time_t local_108;\u000a  uint local_100;\u000a  int local_fc;\u000a  uint local_f8;\u000a  int local_f4;\u000a  time_t local_f0;\u000a  time_t local_e8;\u000a  long *local_e0;\u000a  long local_d8;\u000a  long local_d0;\u000a  long local_c8;\u000a  tm *local_c0;\u000a  long local_b8;\u000a  long local_b0;\u000a  tm *(*local_a8)(time_t *,tm *);\u000a  int local_a0;\u000a  int iStack156;\u000a  int iStack152;\u000a  int iStack148;\u000a  int local_90;\u000a  int iStack140;\u000a  int iStack136;\u000a  int iStack132;\u000a  int local_80;\u000a  undefined4 uStack124;\u000a  undefined4 uStack120;\u000a  undefined4 uStack116;\u000a  char *local_70;\u000a  tm local_68;\u000a  \u000a  iVar8 = tp->tm_sec;\u000a  local_b0 = (long)iVar8;\u000a  local_100 = tp->tm_min;\u000a  local_f8 = tp->tm_hour;\u000a  iVar3 = tp->tm_mon;\u000a  local_f4 = tp->tm_isdst;\u000a  iVar2 = iVar3 / 0xc + (iVar3 >> 0x1f) + ((uint)(iVar3 / 6 + (iVar3 >> 0x1f)) >> 0x1f);\u000a  uVar6 = iVar3 + iVar2 * -0xc;\u000a  local_d0 = (long)(int)(iVar2 - (uVar6 >> 0x1f)) + (long)tp->tm_year;\u000a  iVar3 = tp->tm_mday;\u000a  local_e0 = offset;\u000a  local_c0 = tp;\u000a  local_a8 = convert;\u000a  iVar2 = leapyear(local_d0);\u000a  uVar1 = local_f8;\u000a  bVar10 = false;\u000a  local_d8 = (long)iVar3 + -1 +\u000a             (ulong)__mon_yday[(long)iVar2 * 0xd + (long)(int)(((int)uVar6 >> 0x1f & 0xcU) + uVar6)]\u000a  ;\u000a  local_b8 = *local_e0;\u000a  iVar3 = 0;\u000a  if (-1 < local_b0) {\u000a    iVar3 = iVar8;\u000a  }\u000a  local_fc = 0x3b;\u000a  if (iVar3 < 0x3c) {\u000a    local_fc = iVar3;\u000a  }\u000a  local_108 = ydhms_diff(local_d0,local_d8,local_f8,local_100,local_fc,0x46);\u000a  convert_00 = local_a8;\u000a  local_f0 = local_108;\u000a  local_e8 = local_108;\u000a  ranged_convert(local_a8,&local_108,(tm *)&local_a0);\u000a  uVar6 = local_100;\u000a  tVar4 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)uVar1,(tm *)(ulong)local_100);\u000a  if (local_108 != tVar4) {\u000a    iVar8 = -6;\u000a    tVar7 = local_e8;\u000a    do {\u000a      a = local_f0;\u000a      if ((local_108 == tVar7) && (local_108 != local_f0)) {\u000a        if (local_80 < 0) goto LAB_0041146b;\u000a        if (local_f4 < 0) {\u000a          if (bVar10 <= (local_80 != 0)) goto LAB_0041146b;\u000a        }\u000a        else {\u000a          if ((local_f4 != 0) != (local_80 != 0)) goto LAB_0041146b;\u000a        }\u000a      }\u000a      iVar8 = iVar8 + 1;\u000a      if (iVar8 == 0) {\u000a        return -1;\u000a      }\u000a      local_f0 = local_108;\u000a      bVar10 = local_80 != 0;\u000a      local_108 = tVar4;\u000a      ranged_convert(convert_00,&local_108,(tm *)&local_a0);\u000a      tVar4 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)local_f8,(tm *)(ulong)uVar6);\u000a      tVar7 = a;\u000a    } while (local_108 != tVar4);\u000a  }\u000a  iVar8 = isdst_differ();\u000a  if (iVar8 != 0) {\u000a    a = 0x92c70;\u000a    do {\u000a      lVar9 = -1;\u000a      do {\u000a        iVar8 = time_t_int_add_ok(local_108);\u000a        if (iVar8 != 0) {\u000a          local_c8 = lVar9 * a + local_108;\u000a          ranged_convert(convert_00,&local_c8,&local_68);\u000a          iVar8 = isdst_differ();\u000a          if (iVar8 == 0) {\u000a            local_108 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)local_f8,\u000a                                      (tm *)(ulong)local_100);\u000a            ranged_convert(convert_00,&local_108,(tm *)&local_a0);\u000a            goto LAB_0041146b;\u000a          }\u000a        }\u000a        bVar10 = lVar9 < 0;\u000a        lVar9 = lVar9 + 2;\u000a      } while (bVar10);\u000a      a = a + 0x92c70;\u000a    } while (a < 0x1005fe28);\u000a  }\u000aLAB_0041146b:\u000a  a = local_b0;\u000a  iVar8 = local_fc;\u000a  *local_e0 = (local_b8 - local_e8) + local_108;\u000a  if ((int)local_b0 != local_a0) {\u000a    bVar10 = local_fc == 0;\u000a    bVar11 = local_a0 == 0x3c;\u000a    iVar3 = time_t_int_add_ok(local_108);\u000a    if (iVar3 == 0) {\u000a      return -1;\u000a    }\u000a    a = a + local_108;\u000a    iVar3 = time_t_int_add_ok(a);\u000a    if (iVar3 == 0) {\u000a      return -1;\u000a    }\u000a    local_f0 = a + (long)(int)((uint)(bVar10 && bVar11) - iVar8);\u000a    ptVar5 = (*convert_00)(&local_f0,(tm *)&local_a0);\u000a    if (ptVar5 == (tm *)0x0) {\u000a      return -1;\u000a    }\u000a    local_108 = local_f0;\u000a  }\u000a  local_c0->tm_zone = local_70;\u000a  local_c0->tm_isdst = local_80;\u000a  *(undefined4 *)&local_c0->field_0x24 = uStack124;\u000a  *(undefined4 *)&local_c0->tm_gmtoff = uStack120;\u000a  *(undefined4 *)((long)&local_c0->tm_gmtoff + 4) = uStack116;\u000a  local_c0->tm_mon = local_90;\u000a  local_c0->tm_year = iStack140;\u000a  local_c0->tm_wday = iStack136;\u000a  local_c0->tm_yday = iStack132;\u000a  local_c0->tm_sec = local_a0;\u000a  local_c0->tm_min = iStack156;\u000a  local_c0->tm_hour = iStack152;\u000a  local_c0->tm_mday = iStack148;\u000a  return local_108;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV qword ptr [RSP + 0x28],RDX\nMOV qword ptr [RSP + 0x60],RSI\nMOVSXD R15,dword ptr [RDI]\nMOV EAX,dword ptr [RDI + 0x4]\nMOV dword ptr [RSP + 0x8],EAX\nMOV EAX,dword ptr [RDI + 0x8]\nMOV dword ptr [RSP + 0x10],EAX\nMOVSXD RBX,dword ptr [RDI + 0x10]\nMOV EAX,dword ptr [RDI + 0x20]\nMOV dword ptr [RSP + 0x14],EAX\nIMUL RAX,RBX,0x2aaaaaab\nMOV RCX,RAX\nSHR RCX,0x3f\nSAR RAX,0x21\nADD EAX,ECX\nLEA ECX,[RAX*0x4]\nLEA ECX,[RCX + RCX*0x2]\nSUB EBX,ECX\nMOV ECX,EBX\nSHR ECX,0x1f\nSUB EAX,ECX\nMOVSXD RCX,dword ptr [RDI + 0x14]\nMOVSXD R13,EAX\nADD R13,RCX\nMOV qword ptr [RSP + 0x48],RDI\nMOVSXD R14,dword ptr [RDI + 0xc]\nMOV RDI,R13\nCALL 0x00411550\nCDQE\nMOV ECX,EBX\nSAR ECX,0x1f\nAND ECX,0xc\nADD ECX,EBX\nIMUL RAX,RAX,0x1a\nXOR EBP,EBP\nTEST R15,R15\nMOVSXD RCX,ECX\nMOVZX EAX,word ptr [0x418840 + RAX + RCX*0x2]\nLEA R12,[R14 + RAX*0x1 + -0x1]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV RDX,qword ptr [RAX]\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x58],R15\nCMOVNS EAX,R15D\nCMP EAX,0x3c\nMOV EBX,0x3b\nCMOVL EBX,EAX\nMOV qword ptr [RSP + 0x50],RDX\nMOV EAX,EDX\nNEG EAX\nMOV R9D,0x46\nMOV RDI,R13\nMOV RSI,R12\nMOV R14D,dword ptr [RSP + 0x10]\nMOV EDX,R14D\nMOV ECX,dword ptr [RSP + 0x8]\nMOV R8D,EBX\nPUSH RAX\nPUSH 0x0\nPUSH 0x0\nPUSH 0x0\nCALL 0x004115b0\nADD RSP,0x20\nMOV qword ptr [RSP + 0x18],RAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,qword ptr [RSP + 0x60]\nMOV R15,RDI\nCALL 0x00411750\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x40],R13\nMOV RDI,R13\nMOV qword ptr [RSP + 0x38],R12\nMOV RSI,R12\nMOV EDX,R14D\nMOV R14D,dword ptr [RSP + 0x10]\nMOV ECX,R14D\nMOV dword ptr [RSP + 0x14],EBX\nMOV R8D,EBX\nLEA R9,[RSP + 0x8]\nPUSH RAX\nCALL 0x004116c0\nADD RSP,0x10\nMOV RCX,qword ptr [RSP]\nCMP RCX,RAX\nJZ 0x0041139d\nMOV R13D,0xfffffffa\nMOV R12,RSP\nMOV RBX,qword ptr [RSP + 0x20]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RCX,RBX\nJNZ 0x00411330\nCMP RCX,qword ptr [RSP + 0x18]\nJZ 0x00411330\nMOV ECX,dword ptr [0x88 + RSP]\nTEST ECX,ECX\nJS 0x0041146b\nMOV EDX,dword ptr [RSP + 0x14]\nTEST EDX,EDX\nJS 0x00411316\nTEST ECX,ECX\nSETNZ CL\nTEST EDX,EDX\nSETNZ DL\nXOR DL,CL\nJZ 0x00411330\nJMP 0x0041146b\nXOR EDX,EDX\nTEST ECX,ECX\nSETNZ DL\nCMP EBP,EDX\nJBE 0x0041146b\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC R13D\nJZ 0x0041152c\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP]\nMOV qword ptr [RSP + 0x18],RCX\nMOV qword ptr [RSP],RAX\nXOR EBP,EBP\nCMP dword ptr [0x88 + RSP],0x0\nSETNZ BPL\nMOV RDI,R15\nMOV RSI,R12\nLEA RDX,[RSP + 0x68]\nCALL 0x00411750\nSUB RSP,0x8\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x18]\nMOV ECX,R14D\nMOV R8D,dword ptr [RSP + 0x14]\nMOV R9,R12\nPUSH RAX\nCALL 0x004116c0\nADD RSP,0x10\nMOV RCX,qword ptr [RSP]\nCMP RCX,RAX\nJNZ 0x004112e0\nMOV ESI,dword ptr [0x88 + RSP]\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x00411820\nTEST EAX,EAX\nJZ 0x0041146b\nMOV EBX,0x92c70\nLEA R13,[RSP + 0x40]\nLEA RBP,[0xa0 + RSP]\nMOV R14,-0x1\nNOP\nMOV RDI,qword ptr [RSP]\nMOV R12,R14\nIMUL R12,RBX\nMOV ESI,R12D\nCALL 0x00411840\nTEST EAX,EAX\nJZ 0x00411412\nADD R12,qword ptr [RSP]\nMOV qword ptr [RSP + 0x40],R12\nMOV RDI,R15\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00411750\nMOV ESI,dword ptr [0xc0 + RSP]\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x00411820\nTEST EAX,EAX\nJZ 0x0041142d\nTEST R14,R14\nLEA R14,[R14 + 0x2]\nJS 0x004113d0\nADD RBX,0x92c70\nCMP RBX,0x1005fe28\nJL 0x004113c7\nJMP 0x0041146b\nSUB RSP,0x8\nLEA R9,[RSP + 0x48]\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x18]\nMOV ECX,dword ptr [RSP + 0x10]\nMOV R8D,dword ptr [RSP + 0x14]\nPUSH RBP\nCALL 0x004116c0\nADD RSP,0x10\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,R15\nCALL 0x00411750\nMOV RDI,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x50]\nSUB RCX,qword ptr [RSP + 0x20]\nADD RCX,RDI\nMOV RAX,qword ptr [RSP + 0x28]\nMOV qword ptr [RAX],RCX\nMOV EAX,dword ptr [RSP + 0x68]\nMOV RBX,qword ptr [RSP + 0x58]\nCMP EBX,EAX\nJZ 0x004114f8\nMOV R13D,dword ptr [RSP + 0xc]\nTEST R13D,R13D\nSETZ R12B\nCMP EAX,0x3c\nSETZ BPL\nMOV ESI,EBX\nCALL 0x00411840\nMOV R14,-0x1\nTEST EAX,EAX\nJZ 0x00411533\nAND R12B,BPL\nMOVZX EBP,R12B\nSUB EBP,R13D\nADD RBX,qword ptr [RSP]\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00411840\nTEST EAX,EAX\nJZ 0x00411533\nMOVSXD RAX,EBP\nADD RBX,RAX\nMOV qword ptr [RSP + 0x18],RBX\nLEA RDI,[RSP + 0x18]\nLEA RSI,[RSP + 0x68]\nCALL R15\nTEST RAX,RAX\nJZ 0x00411533\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x98 + RSP]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x68]\nMOVUPS XMM1,xmmword ptr [RSP + 0x78]\nMOVUPS XMM2,xmmword ptr [0x88 + RSP]\nMOVUPS xmmword ptr [RCX + 0x20],XMM2\nMOVUPS xmmword ptr [RCX + 0x10],XMM1\nMOVUPS xmmword ptr [RCX],XMM0\nMOV R14,qword ptr [RSP]\nJMP 0x00411533\nMOV R14,-0x1\nMOV RAX,R14\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n48 89 54 24 28\n48 89 74 24 60\n4c 63 3f\n8b 47 04\n89 44 24 08\n8b 47 08\n89 44 24 10\n48 63 5f 10\n8b 47 20\n89 44 24 14\n48 69 c3 ab aa aa 2a\n48 89 c1\n48 c1 e9 3f\n48 c1 f8 21\n01 c8\n8d 0c 85 00 00 00 00\n8d 0c 49\n29 cb\n89 d9\nc1 e9 1f\n29 c8\n48 63 4f 14\n4c 63 e8\n49 01 cd\n48 89 7c 24 48\n4c 63 77 0c\n4c 89 ef\ne8 67 03 00 00\n48 98\n89 d9\nc1 f9 1f\n83 e1 0c\n01 d9\n48 6b c0 1a\n31 ed\n4d 85 ff\n48 63 c9\n0f b7 84 48 40 88 41 00\n4d 8d 64 06 ff\n48 8b 44 24 28\n48 8b 10\nb8 00 00 00 00\n4c 89 7c 24 58\n41 0f 49 c7\n83 f8 3c\nbb 3b 00 00 00\n0f 4c d8\n48 89 54 24 50\n89 d0\nf7 d8\n41 b9 46 00 00 00\n4c 89 ef\n4c 89 e6\n44 8b 74 24 10\n44 89 f2\n8b 4c 24 08\n41 89 d8\n50\n6a 00\n6a 00\n6a 00\ne8 51 03 00 00\n48 83 c4 20\n48 89 44 24 18\n48 89 44 24 20\n48 89 04 24\n48 89 e6\n48 8d 54 24 68\n48 8b 7c 24 60\n49 89 ff\ne8 ca 04 00 00\n48 83 ec 08\n4c 89 6c 24 40\n4c 89 ef\n4c 89 64 24 38\n4c 89 e6\n44 89 f2\n44 8b 74 24 10\n44 89 f1\n89 5c 24 14\n41 89 d8\n4c 8d 4c 24 08\n50\ne8 09 04 00 00\n48 83 c4 10\n48 8b 0c 24\n48 39 c1\n0f 84 d5 00 00 00\n41 bd fa ff ff ff\n49 89 e4\n48 8b 5c 24 20\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 d9\n75 4b\n48 3b 4c 24 18\n74 44\n8b 8c 24 88 00 00 00\n85 c9\n0f 88 70 01 00 00\n8b 54 24 14\n85 d2\n78 13\n85 c9\n0f 95 c1\n85 d2\n0f 95 c2\n30 ca\n74 1f\ne9 55 01 00 00\n31 d2\n85 c9\n0f 95 c2\n39 d5\n0f 86 46 01 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n41 ff c5\n0f 84 f3 01 00 00\n48 8b 5c 24 18\n48 8b 0c 24\n48 89 4c 24 18\n48 89 04 24\n31 ed\n83 bc 24 88 00 00 00 00\n40 0f 95 c5\n4c 89 ff\n4c 89 e6\n48 8d 54 24 68\ne8 e7 03 00 00\n48 83 ec 08\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 18\n44 89 f1\n44 8b 44 24 14\n4d 89 e1\n50\ne8 34 03 00 00\n48 83 c4 10\n48 8b 0c 24\n48 39 c1\n0f 85 43 ff ff ff\n8b b4 24 88 00 00 00\n8b 7c 24 14\ne8 73 04 00 00\n85 c0\n0f 84 b6 00 00 00\nbb 70 2c 09 00\n4c 8d 6c 24 40\n48 8d ac 24 a0 00 00 00\n49 c7 c6 ff ff ff ff\n66 90\n48 8b 3c 24\n4d 89 f4\n4c 0f af e3\n44 89 e6\ne8 5d 04 00 00\n85 c0\n74 2b\n4c 03 24 24\n4c 89 64 24 40\n4c 89 ff\n4c 89 ee\n48 89 ea\ne8 52 03 00 00\n8b b4 24 c0 00 00 00\n8b 7c 24 14\ne8 12 04 00 00\n85 c0\n74 1b\n4d 85 f6\n4d 8d 76 02\n78 b5\n48 81 c3 70 2c 09 00\n48 81 fb 28 fe 05 10\n7c 9c\neb 3e\n48 83 ec 08\n4c 8d 4c 24 48\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 18\n8b 4c 24 10\n44 8b 44 24 14\n55\ne8 6d 02 00 00\n48 83 c4 10\n48 89 04 24\n48 89 e6\n48 8d 54 24 68\n4c 89 ff\ne8 e5 02 00 00\n48 8b 3c 24\n48 8b 4c 24 50\n48 2b 4c 24 20\n48 01 f9\n48 8b 44 24 28\n48 89 08\n8b 44 24 68\n48 8b 5c 24 58\n39 c3\n74 67\n44 8b 6c 24 0c\n45 85 ed\n41 0f 94 c4\n83 f8 3c\n40 0f 94 c5\n89 de\ne8 95 03 00 00\n49 c7 c6 ff ff ff ff\n85 c0\n74 7d\n41 20 ec\n41 0f b6 ec\n44 29 ed\n48 03 1c 24\n48 89 df\n89 ee\ne8 72 03 00 00\n85 c0\n74 61\n48 63 c5\n48 01 c3\n48 89 5c 24 18\n48 8d 7c 24 18\n48 8d 74 24 68\n41 ff d7\n48 85 c0\n74 44\n48 8b 44 24 18\n48 89 04 24\n48 8b 84 24 98 00 00 00\n48 8b 4c 24 48\n48 89 41 30\n0f 10 44 24 68\n0f 10 4c 24 78\n0f 10 94 24 88 00 00 00\n0f 11 51 20\n0f 11 49 10\n0f 11 01\n4c 8b 34 24\neb 07\n49 c7 c6 ff ff ff ff\n4c 89 f0\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p33
S'.text:0000000000411170\n.text:0000000000411171\n.text:0000000000411173\n.text:0000000000411175\n.text:0000000000411177\n.text:0000000000411179\n.text:000000000041117a\n.text:0000000000411181\n.text:0000000000411186\n.text:000000000041118b\n.text:000000000041118e\n.text:0000000000411191\n.text:0000000000411195\n.text:0000000000411198\n.text:000000000041119c\n.text:00000000004111a0\n.text:00000000004111a3\n.text:00000000004111a7\n.text:00000000004111ae\n.text:00000000004111b1\n.text:00000000004111b5\n.text:00000000004111b9\n.text:00000000004111bb\n.text:00000000004111c2\n.text:00000000004111c5\n.text:00000000004111c7\n.text:00000000004111c9\n.text:00000000004111cc\n.text:00000000004111ce\n.text:00000000004111d2\n.text:00000000004111d5\n.text:00000000004111d8\n.text:00000000004111dd\n.text:00000000004111e1\n.text:00000000004111e4\n.text:00000000004111e9\n.text:00000000004111eb\n.text:00000000004111ed\n.text:00000000004111f0\n.text:00000000004111f3\n.text:00000000004111f5\n.text:00000000004111f9\n.text:00000000004111fb\n.text:00000000004111fe\n.text:0000000000411201\n.text:0000000000411209\n.text:000000000041120e\n.text:0000000000411213\n.text:0000000000411216\n.text:000000000041121b\n.text:0000000000411220\n.text:0000000000411224\n.text:0000000000411227\n.text:000000000041122c\n.text:000000000041122f\n.text:0000000000411234\n.text:0000000000411236\n.text:0000000000411238\n.text:000000000041123e\n.text:0000000000411241\n.text:0000000000411244\n.text:0000000000411249\n.text:000000000041124c\n.text:0000000000411250\n.text:0000000000411253\n.text:0000000000411254\n.text:0000000000411256\n.text:0000000000411258\n.text:000000000041125a\n.text:000000000041125f\n.text:0000000000411263\n.text:0000000000411268\n.text:000000000041126d\n.text:0000000000411271\n.text:0000000000411274\n.text:0000000000411279\n.text:000000000041127e\n.text:0000000000411281\n.text:0000000000411286\n.text:000000000041128a\n.text:000000000041128f\n.text:0000000000411292\n.text:0000000000411297\n.text:000000000041129a\n.text:000000000041129d\n.text:00000000004112a2\n.text:00000000004112a5\n.text:00000000004112a9\n.text:00000000004112ac\n.text:00000000004112b1\n.text:00000000004112b2\n.text:00000000004112b7\n.text:00000000004112bb\n.text:00000000004112bf\n.text:00000000004112c2\n.text:00000000004112c8\n.text:00000000004112ce\n.text:00000000004112d1\n.text:00000000004112d6\n.text:00000000004112e0\n.text:00000000004112e3\n.text:00000000004112e5\n.text:00000000004112ea\n.text:00000000004112ec\n.text:00000000004112f3\n.text:00000000004112f5\n.text:00000000004112fb\n.text:00000000004112ff\n.text:0000000000411301\n.text:0000000000411303\n.text:0000000000411305\n.text:0000000000411308\n.text:000000000041130a\n.text:000000000041130d\n.text:000000000041130f\n.text:0000000000411311\n.text:0000000000411316\n.text:0000000000411318\n.text:000000000041131a\n.text:000000000041131d\n.text:000000000041131f\n.text:0000000000411325\n.text:0000000000411330\n.text:0000000000411333\n.text:0000000000411339\n.text:000000000041133e\n.text:0000000000411342\n.text:0000000000411347\n.text:000000000041134b\n.text:000000000041134d\n.text:0000000000411355\n.text:0000000000411359\n.text:000000000041135c\n.text:000000000041135f\n.text:0000000000411364\n.text:0000000000411369\n.text:000000000041136d\n.text:0000000000411372\n.text:0000000000411377\n.text:000000000041137b\n.text:000000000041137e\n.text:0000000000411383\n.text:0000000000411386\n.text:0000000000411387\n.text:000000000041138c\n.text:0000000000411390\n.text:0000000000411394\n.text:0000000000411397\n.text:000000000041139d\n.text:00000000004113a4\n.text:00000000004113a8\n.text:00000000004113ad\n.text:00000000004113af\n.text:00000000004113b5\n.text:00000000004113ba\n.text:00000000004113bf\n.text:00000000004113c7\n.text:00000000004113ce\n.text:00000000004113d0\n.text:00000000004113d4\n.text:00000000004113d7\n.text:00000000004113db\n.text:00000000004113de\n.text:00000000004113e3\n.text:00000000004113e5\n.text:00000000004113e7\n.text:00000000004113eb\n.text:00000000004113f0\n.text:00000000004113f3\n.text:00000000004113f6\n.text:00000000004113f9\n.text:00000000004113fe\n.text:0000000000411405\n.text:0000000000411409\n.text:000000000041140e\n.text:0000000000411410\n.text:0000000000411412\n.text:0000000000411415\n.text:0000000000411419\n.text:000000000041141b\n.text:0000000000411422\n.text:0000000000411429\n.text:000000000041142b\n.text:000000000041142d\n.text:0000000000411431\n.text:0000000000411436\n.text:000000000041143b\n.text:0000000000411440\n.text:0000000000411444\n.text:0000000000411448\n.text:000000000041144d\n.text:000000000041144e\n.text:0000000000411453\n.text:0000000000411457\n.text:000000000041145b\n.text:000000000041145e\n.text:0000000000411463\n.text:0000000000411466\n.text:000000000041146b\n.text:000000000041146f\n.text:0000000000411474\n.text:0000000000411479\n.text:000000000041147c\n.text:0000000000411481\n.text:0000000000411484\n.text:0000000000411488\n.text:000000000041148d\n.text:000000000041148f\n.text:0000000000411491\n.text:0000000000411496\n.text:0000000000411499\n.text:000000000041149d\n.text:00000000004114a0\n.text:00000000004114a4\n.text:00000000004114a6\n.text:00000000004114ab\n.text:00000000004114b2\n.text:00000000004114b4\n.text:00000000004114b6\n.text:00000000004114b9\n.text:00000000004114bd\n.text:00000000004114c0\n.text:00000000004114c4\n.text:00000000004114c7\n.text:00000000004114c9\n.text:00000000004114ce\n.text:00000000004114d0\n.text:00000000004114d2\n.text:00000000004114d5\n.text:00000000004114d8\n.text:00000000004114dd\n.text:00000000004114e2\n.text:00000000004114e7\n.text:00000000004114ea\n.text:00000000004114ed\n.text:00000000004114ef\n.text:00000000004114f4\n.text:00000000004114f8\n.text:0000000000411500\n.text:0000000000411505\n.text:0000000000411509\n.text:000000000041150e\n.text:0000000000411513\n.text:000000000041151b\n.text:000000000041151f\n.text:0000000000411523\n.text:0000000000411526\n.text:000000000041152a\n.text:000000000041152c\n.text:0000000000411533\n.text:0000000000411536\n.text:000000000041153d\n.text:000000000041153e\n.text:0000000000411540\n.text:0000000000411542\n.text:0000000000411544\n.text:0000000000411546\n.text:0000000000411547\n'
p34
tp35
sS'transfer_entries'
p36
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p37
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x0040a272\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x0040a262\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x0040a20a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00409a80\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x0040a1f0\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x0040a202\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040a7f0\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x0040a1c0\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x0040a262\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00409a80\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x0040a250\nMOV RDI,R14\nCALL 0x0040a530\nTEST RAX,RAX\nJZ 0x0040a281\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x0040a257\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x0040a1a0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x0040a272\n'
p39
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p40
S'.text:000000000040a170\n.text:000000000040a171\n.text:000000000040a173\n.text:000000000040a175\n.text:000000000040a177\n.text:000000000040a179\n.text:000000000040a17a\n.text:000000000040a17b\n.text:000000000040a17e\n.text:000000000040a181\n.text:000000000040a184\n.text:000000000040a188\n.text:000000000040a18a\n.text:000000000040a18e\n.text:000000000040a194\n.text:000000000040a198\n.text:000000000040a1a0\n.text:000000000040a1a4\n.text:000000000040a1aa\n.text:000000000040a1ae\n.text:000000000040a1b1\n.text:000000000040a1b3\n.text:000000000040a1c0\n.text:000000000040a1c3\n.text:000000000040a1c6\n.text:000000000040a1c9\n.text:000000000040a1ce\n.text:000000000040a1d2\n.text:000000000040a1d6\n.text:000000000040a1d8\n.text:000000000040a1dc\n.text:000000000040a1e0\n.text:000000000040a1e4\n.text:000000000040a1f0\n.text:000000000040a1f3\n.text:000000000040a1f7\n.text:000000000040a1fa\n.text:000000000040a1fd\n.text:000000000040a202\n.text:000000000040a205\n.text:000000000040a208\n.text:000000000040a20a\n.text:000000000040a20d\n.text:000000000040a215\n.text:000000000040a218\n.text:000000000040a21c\n.text:000000000040a21e\n.text:000000000040a221\n.text:000000000040a224\n.text:000000000040a229\n.text:000000000040a22c\n.text:000000000040a230\n.text:000000000040a232\n.text:000000000040a235\n.text:000000000040a23a\n.text:000000000040a23d\n.text:000000000040a23f\n.text:000000000040a242\n.text:000000000040a246\n.text:000000000040a24a\n.text:000000000040a24e\n.text:000000000040a250\n.text:000000000040a253\n.text:000000000040a257\n.text:000000000040a25e\n.text:000000000040a262\n.text:000000000040a266\n.text:000000000040a26a\n.text:000000000040a270\n.text:000000000040a272\n.text:000000000040a276\n.text:000000000040a277\n.text:000000000040a279\n.text:000000000040a27b\n.text:000000000040a27d\n.text:000000000040a27f\n.text:000000000040a280\n.text:000000000040a281\n.text:000000000040a283\n'
p41
tp42
sS'file_name_concat'
p43
(S'\n__stdcall file_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p44
V\u000achar * file_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mfile_name_concat(dir,abase,base_in_result);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'PUSH RAX\nCALL 0x004092b0\nTEST RAX,RAX\nJZ 0x0040929d\nPOP RCX\nRET\nCALL 0x0040faa0\n'
p46
S'50\ne8 1a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 fe 67 00 00\n'
p47
S'.text:0000000000409290\n.text:0000000000409291\n.text:0000000000409296\n.text:0000000000409299\n.text:000000000040929b\n.text:000000000040929c\n.text:000000000040929d\n'
p48
tp49
sS'gnu_mbswidth'
p50
(S'\n__stdcall gnu_mbswidth(char * string)\n'
p51
V\u000aint gnu_mbswidth(char *string)\u000a\u000a{\u000a  int iVar1;\u000a  size_t nbytes;\u000a  \u000a  nbytes = strlen(string);\u000a  iVar1 = mbsnwidth(string,nbytes);\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00402290\nMOV RDI,RBX\nMOV RSI,RAX\nMOV EDX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x0040b9a0\n'
p53
S'55\n53\n50\n89 f5\n48 89 fb\ne8 03 69 ff ff\n48 89 df\n48 89 c6\n89 ea\n48 83 c4 08\n5b\n5d\neb 03\n'
p54
S'.text:000000000040b980\n.text:000000000040b981\n.text:000000000040b982\n.text:000000000040b983\n.text:000000000040b985\n.text:000000000040b988\n.text:000000000040b98d\n.text:000000000040b990\n.text:000000000040b993\n.text:000000000040b995\n.text:000000000040b999\n.text:000000000040b99a\n.text:000000000040b99b\n'
p55
tp56
sS'rev_xstrcoll_df_ctime'
p57
(S'\n__stdcall rev_xstrcoll_df_ctime(V a, V b)\n'
p58
V\u000aint rev_xstrcoll_df_ctime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_ctime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p59
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406e6a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406e8d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406e8d\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004072c0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p60
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 70 f6 ff ff\n89 c3\n4c 89 f7\ne8 66 f6 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 33 04 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p61
S'.text:0000000000406e40\n.text:0000000000406e42\n.text:0000000000406e44\n.text:0000000000406e45\n.text:0000000000406e48\n.text:0000000000406e4b\n.text:0000000000406e50\n.text:0000000000406e52\n.text:0000000000406e55\n.text:0000000000406e5a\n.text:0000000000406e5c\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e63\n.text:0000000000406e68\n.text:0000000000406e6a\n.text:0000000000406e6c\n.text:0000000000406e6e\n.text:0000000000406e73\n.text:0000000000406e76\n.text:0000000000406e78\n.text:0000000000406e7d\n.text:0000000000406e80\n.text:0000000000406e83\n.text:0000000000406e84\n.text:0000000000406e86\n.text:0000000000406e88\n.text:0000000000406e8d\n.text:0000000000406e8f\n.text:0000000000406e90\n.text:0000000000406e92\n.text:0000000000406e94\n'
p62
tp63
sS'to_uchar'
p64
(S'\n__stdcall to_uchar()\n'
p65
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p66
S'MOV EAX,EDI\nRET\n'
p67
S'89 f8\nc3\n'
p68
S'.text:00000000004060d0\n.text:00000000004060d2\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0061d060)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x0061d060]\n'
p74
S'ff 25 3a af 21 00\n'
p75
S'.plt:0000000000402120\n'
p76
tp77
sS'mpsort_with_tmp'
p78
(S'\n__stdcall mpsort_with_tmp(void * * base, size_t n, void * * tmp, comparison_function * cmp)\n'
p79
V\u000avoid mpsort_with_tmp(void **base,size_t n,void **tmp,int (*cmp)(void *,void *))\u000a\u000a{\u000a  void *pvVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  void **ppvVar4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  long lVar9;\u000a  ulong n_00;\u000a  ulong local_68;\u000a  \u000a  if (n < 3) {\u000a    if (n == 2) {\u000a      pvVar5 = *base;\u000a      pvVar1 = base[1];\u000a      iVar2 = (*cmp)(pvVar5,pvVar1);\u000a      if (0 < iVar2) {\u000a        *base = pvVar1;\u000a        base[1] = pvVar5;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    n_00 = n >> 1;\u000a    mpsort_with_tmp(base + n_00,n - n_00,tmp,cmp);\u000a    if (n == 3) {\u000a      *tmp = *base;\u000a    }\u000a    else {\u000a      mpsort_into_tmp(base,n_00,tmp,cmp);\u000a    }\u000a    pvVar5 = base[n_00];\u000a    uVar6 = 0;\u000a    lVar7 = 0;\u000a    ppvVar4 = tmp;\u000a    local_68 = n_00;\u000a    while( true ) {\u000a      pvVar1 = *ppvVar4;\u000a      iVar2 = (*cmp)(pvVar1,pvVar5);\u000a      lVar3 = lVar7 + 1;\u000a      ppvVar4 = base + lVar7;\u000a      if (0 < iVar2) {\u000a        lVar9 = 0;\u000a        lVar8 = 0;\u000a        do {\u000a          ppvVar4[lVar8] = pvVar5;\u000a          if ((1 - n) + local_68 + lVar8 == 0) {\u000a            memcpy((void *)((long)base + (lVar7 * 8 - lVar9) + 8),tmp + uVar6,(n_00 - uVar6) * 8);\u000a            return;\u000a          }\u000a          pvVar5 = base[local_68 + lVar8 + 1];\u000a          iVar2 = (*cmp)(pvVar1,pvVar5);\u000a          lVar8 = lVar8 + 1;\u000a          lVar9 = lVar9 + -8;\u000a        } while (0 < iVar2);\u000a        lVar3 = lVar3 + lVar8;\u000a        ppvVar4 = (void **)((long)ppvVar4 - lVar9);\u000a        local_68 = local_68 + lVar8;\u000a      }\u000a      *ppvVar4 = pvVar1;\u000a      uVar6 = uVar6 + 1;\u000a      if (uVar6 == n_00) break;\u000a      ppvVar4 = tmp + uVar6;\u000a      lVar7 = lVar3;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV R13,RDX\nMOV RBP,RSI\nCMP RBP,0x2\nJA 0x0040bc3b\nJNZ 0x0040bc2c\nMOV R14,qword ptr [RDI]\nMOV RBP,qword ptr [RDI + 0x8]\nMOV RBX,RDI\nMOV RDI,R14\nMOV RSI,RBP\nCALL RCX\nMOV RCX,RBX\nTEST EAX,EAX\nJLE 0x0040bc2c\nMOV qword ptr [RCX],RBP\nMOV qword ptr [RCX + 0x8],R14\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15,RBP\nSHR R15,1\nMOV RSI,RBP\nSUB RSI,R15\nLEA R14,[RDI + R15*0x8]\nMOV RBX,RDI\nMOV RDI,R14\nMOV RDX,R13\nMOV R12,RCX\nCALL 0x0040bbf0\nCMP RBP,0x3\nJNZ 0x0040bc6b\nMOV RAX,qword ptr [RBX]\nMOV qword ptr [R13],RAX\nJMP 0x0040bc7c\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R13\nMOV RCX,R12\nCALL 0x0040bde0\nMOV RCX,R12\nMOV RDX,RBX\nMOV RBX,qword ptr [R14]\nLEA RAX,[RDX + 0x8]\nMOV qword ptr [RSP + 0x50],RAX\nMOV EAX,0x1\nSUB RAX,RBP\nMOV qword ptr [RSP + 0x48],RAX\nXOR EBP,EBP\nMOV qword ptr [RSP + 0x20],R15\nXOR R12D,R12D\nMOV qword ptr [RSP],R13\nMOV R14,RDX\nMOV qword ptr [RSP + 0x10],R14\nMOV qword ptr [RSP + 0x8],R15\nMOV qword ptr [RSP + 0x28],RCX\nJMP 0x0040bd12\nMOV RAX,qword ptr [RSP + 0x38]\nADD RAX,R12\nSUB RDX,R14\nADD qword ptr [RSP + 0x20],R12\nMOV R12,RAX\nMOV R14,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSP]\nMOV RBP,qword ptr [RSP + 0x18]\nJMP 0x0040bcfa\nMOV R12,RCX\nMOV RCX,R13\nMOV RAX,qword ptr [RSP]\nMOV RDI,qword ptr [RSP + 0x30]\nMOV qword ptr [RDX],RDI\nINC RBP\nCMP RBP,R15\nJZ 0x0040bc2c\nLEA R13,[RAX + RBP*0x8]\nMOV RDI,qword ptr [R13]\nMOV qword ptr [RSP + 0x30],RDI\nMOV RSI,RBX\nMOV R13,RCX\nCALL R13\nLEA RCX,[R12 + 0x1]\nTEST EAX,EAX\nLEA RDX,[R14 + R12*0x8]\nJLE 0x0040bcf0\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x40],R12\nMOV qword ptr [RSP + 0x18],RBP\nMOV RAX,qword ptr [RSP + 0x50]\nMOV RCX,qword ptr [RSP + 0x20]\nLEA R13,[RAX + RCX*0x8]\nMOV RAX,qword ptr [RSP + 0x48]\nLEA RBP,[RAX + RCX*0x1]\nXOR R14D,R14D\nXOR R12D,R12D\nNOP dword ptr [RAX]\nMOV qword ptr [RDX + R12*0x8],RBX\nMOV RAX,RBP\nADD RAX,R12\nJZ 0x0040bd93\nMOV RBX,qword ptr [R13 + R12*0x8]\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,RBX\nMOV R15,RDX\nCALL qword ptr [RSP + 0x28]\nMOV RDX,R15\nINC R12\nADD R14,-0x8\nTEST EAX,EAX\nJG 0x0040bd60\nJMP 0x0040bcc0\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x40]\nLEA RDI,[RAX + RCX*0x8]\nSUB RDI,R14\nADD RDI,0x8\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x18]\nLEA RSI,[RAX + RCX*0x8]\nMOV RDX,qword ptr [RSP + 0x8]\nSUB RDX,RCX\nSHL RDX,0x3\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402440\n'
p81
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n49 89 d5\n48 89 f5\n48 83 fd 02\n77 31\n75 20\n4c 8b 37\n48 8b 6f 08\n48 89 fb\n4c 89 f7\n48 89 ee\nff d1\n48 89 d9\n85 c0\n7e 07\n48 89 29\n4c 89 71 08\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 ef\n49 d1 ef\n48 89 ee\n4c 29 fe\n4e 8d 34 ff\n48 89 fb\n4c 89 f7\n4c 89 ea\n49 89 cc\ne8 94 ff ff ff\n48 83 fd 03\n75 09\n48 8b 03\n49 89 45 00\neb 11\n48 89 df\n4c 89 fe\n4c 89 ea\n4c 89 e1\ne8 64 01 00 00\n4c 89 e1\n48 89 da\n49 8b 1e\n48 8d 42 08\n48 89 44 24 50\nb8 01 00 00 00\n48 29 e8\n48 89 44 24 48\n31 ed\n4c 89 7c 24 20\n45 31 e4\n4c 89 2c 24\n49 89 d6\n4c 89 74 24 10\n4c 89 7c 24 08\n48 89 4c 24 28\neb 55\n48 8b 44 24 38\n4c 01 e0\n4c 29 f2\n4c 01 64 24 20\n49 89 c4\n4c 8b 74 24 10\n48 8b 4c 24 28\n4c 8b 7c 24 08\n48 8b 04 24\n48 8b 6c 24 18\neb 0d\n49 89 cc\n4c 89 e9\n48 8b 04 24\n48 8b 7c 24 30\n48 89 3a\n48 ff c5\n4c 39 fd\n0f 84 1e ff ff ff\n4c 8d 2c e8\n49 8b 7d 00\n48 89 7c 24 30\n48 89 de\n49 89 cd\n41 ff d5\n49 8d 4c 24 01\n85 c0\n4b 8d 14 e6\n7e bf\n48 89 4c 24 38\n4c 89 64 24 40\n48 89 6c 24 18\n48 8b 44 24 50\n48 8b 4c 24 20\n4c 8d 2c c8\n48 8b 44 24 48\n48 8d 2c 08\n45 31 f6\n45 31 e4\n0f 1f 00\n4a 89 1c e2\n48 89 e8\n4c 01 e0\n74 27\n4b 8b 5c e5 00\n48 8b 7c 24 30\n48 89 de\n49 89 d7\nff 54 24 28\n4c 89 fa\n49 ff c4\n49 83 c6 f8\n85 c0\n7f d2\ne9 2d ff ff ff\n48 8b 44 24 10\n48 8b 4c 24 40\n48 8d 3c c8\n4c 29 f7\n48 83 c7 08\n48 8b 04 24\n48 8b 4c 24 18\n48 8d 34 c8\n48 8b 54 24 08\n48 29 ca\n48 c1 e2 03\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 6c 66 ff ff\n'
p82
S'.text:000000000040bbf0\n.text:000000000040bbf1\n.text:000000000040bbf3\n.text:000000000040bbf5\n.text:000000000040bbf7\n.text:000000000040bbf9\n.text:000000000040bbfa\n.text:000000000040bbfe\n.text:000000000040bc01\n.text:000000000040bc04\n.text:000000000040bc08\n.text:000000000040bc0a\n.text:000000000040bc0c\n.text:000000000040bc0f\n.text:000000000040bc13\n.text:000000000040bc16\n.text:000000000040bc19\n.text:000000000040bc1c\n.text:000000000040bc1e\n.text:000000000040bc21\n.text:000000000040bc23\n.text:000000000040bc25\n.text:000000000040bc28\n.text:000000000040bc2c\n.text:000000000040bc30\n.text:000000000040bc31\n.text:000000000040bc33\n.text:000000000040bc35\n.text:000000000040bc37\n.text:000000000040bc39\n.text:000000000040bc3a\n.text:000000000040bc3b\n.text:000000000040bc3e\n.text:000000000040bc41\n.text:000000000040bc44\n.text:000000000040bc47\n.text:000000000040bc4b\n.text:000000000040bc4e\n.text:000000000040bc51\n.text:000000000040bc54\n.text:000000000040bc57\n.text:000000000040bc5c\n.text:000000000040bc60\n.text:000000000040bc62\n.text:000000000040bc65\n.text:000000000040bc69\n.text:000000000040bc6b\n.text:000000000040bc6e\n.text:000000000040bc71\n.text:000000000040bc74\n.text:000000000040bc77\n.text:000000000040bc7c\n.text:000000000040bc7f\n.text:000000000040bc82\n.text:000000000040bc85\n.text:000000000040bc89\n.text:000000000040bc8e\n.text:000000000040bc93\n.text:000000000040bc96\n.text:000000000040bc9b\n.text:000000000040bc9d\n.text:000000000040bca2\n.text:000000000040bca5\n.text:000000000040bca9\n.text:000000000040bcac\n.text:000000000040bcb1\n.text:000000000040bcb6\n.text:000000000040bcbb\n.text:000000000040bcc0\n.text:000000000040bcc5\n.text:000000000040bcc8\n.text:000000000040bccb\n.text:000000000040bcd0\n.text:000000000040bcd3\n.text:000000000040bcd8\n.text:000000000040bcdd\n.text:000000000040bce2\n.text:000000000040bce6\n.text:000000000040bceb\n.text:000000000040bcf0\n.text:000000000040bcf3\n.text:000000000040bcf6\n.text:000000000040bcfa\n.text:000000000040bcff\n.text:000000000040bd02\n.text:000000000040bd05\n.text:000000000040bd08\n.text:000000000040bd0e\n.text:000000000040bd12\n.text:000000000040bd16\n.text:000000000040bd1b\n.text:000000000040bd1e\n.text:000000000040bd21\n.text:000000000040bd24\n.text:000000000040bd29\n.text:000000000040bd2b\n.text:000000000040bd2f\n.text:000000000040bd31\n.text:000000000040bd36\n.text:000000000040bd3b\n.text:000000000040bd40\n.text:000000000040bd45\n.text:000000000040bd4a\n.text:000000000040bd4e\n.text:000000000040bd53\n.text:000000000040bd57\n.text:000000000040bd5a\n.text:000000000040bd5d\n.text:000000000040bd60\n.text:000000000040bd64\n.text:000000000040bd67\n.text:000000000040bd6a\n.text:000000000040bd6c\n.text:000000000040bd71\n.text:000000000040bd76\n.text:000000000040bd79\n.text:000000000040bd7c\n.text:000000000040bd80\n.text:000000000040bd83\n.text:000000000040bd86\n.text:000000000040bd8a\n.text:000000000040bd8c\n.text:000000000040bd8e\n.text:000000000040bd93\n.text:000000000040bd98\n.text:000000000040bd9d\n.text:000000000040bda1\n.text:000000000040bda4\n.text:000000000040bda8\n.text:000000000040bdac\n.text:000000000040bdb1\n.text:000000000040bdb5\n.text:000000000040bdba\n.text:000000000040bdbd\n.text:000000000040bdc1\n.text:000000000040bdc5\n.text:000000000040bdc6\n.text:000000000040bdc8\n.text:000000000040bdca\n.text:000000000040bdcc\n.text:000000000040bdce\n.text:000000000040bdcf\n'
p83
tp84
sS'quote'
p85
(S'\n__stdcall quote(char * arg)\n'
p86
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040d420\n'
p88
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p89
S'.text:000000000040d430\n.text:000000000040d433\n.text:000000000040d435\n.text:000000000040d438\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402110\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x61e1b0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x0040fa50\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 14 61 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 b0 e1 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 35 3a 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:000000000040bff0\n.text:000000000040bff1\n.text:000000000040bff3\n.text:000000000040bff4\n.text:000000000040bff7\n.text:000000000040bffc\n.text:000000000040bfff\n.text:000000000040c002\n.text:000000000040c005\n.text:000000000040c00a\n.text:000000000040c00e\n.text:000000000040c013\n.text:000000000040c016\n.text:000000000040c01b\n.text:000000000040c01e\n.text:000000000040c01f\n.text:000000000040c021\n.text:000000000040c022\n'
p97
tp98
sS'clock_gettime'
p99
(S'\n__stdcall clock_gettime(clockid_t __clock_id, timespec * __tp)\n'
p100
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint clock_gettime(clockid_t __clock_id,timespec *__tp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_clock_gettime_0061d0c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p101
S'JMP qword ptr [0x0061d0c8]\n'
p102
S'ff 25 d2 ae 21 00\n'
p103
S'.plt:00000000004021f0\n'
p104
tp105
sS'frame_dummy'
p106
(S'\n__stdcall frame_dummy()\n'
p107
V\u000a/* WARNING: Removing unreachable block (ram,0x0040282a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p108
S'MOV EDI,0x61ce18\nCMP qword ptr [RDI],0x0\nJNZ 0x00402820\nJMP 0x004027b0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040281b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004027b0\n'
p109
S'bf 18 ce 61 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p110
S'.text:0000000000402810\n.text:0000000000402815\n.text:0000000000402819\n.text:000000000040281b\n.text:0000000000402820\n.text:0000000000402825\n.text:0000000000402828\n.text:000000000040282a\n.text:000000000040282b\n.text:000000000040282e\n.text:0000000000402830\n.text:0000000000402831\n'
p111
tp112
sS'is_ENOTSUP'
p113
(S'\n__stdcall is_ENOTSUP()\n'
p114
V\u000a_Bool is_ENOTSUP(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 0x5f);\u000a}\u000a\u000a
p115
S'CMP EDI,0x5f\nSETZ AL\nRET\n'
p116
S'83 ff 5f\n0f 94 c0\nc3\n'
p117
S'.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406286\n'
p118
tp119
sS'extend_abbrs'
p120
(S'\n__stdcall extend_abbrs(char * abbrs, char * abbr, size_t abbr_size)\n'
p121
V\u000avoid extend_abbrs(char *abbrs,char *abbr,size_t abbr_size)\u000a\u000a{\u000a  memcpy(abbrs,abbr,abbr_size);\u000a  abbrs[abbr_size] = 0;\u000a  return;\u000a}\u000a\u000a
p122
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RDI\nCALL 0x00402440\nMOV byte ptr [RBX + R14*0x1],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p123
S'41 56\n53\n50\n49 89 d6\n48 89 fb\ne8 11 1e ff ff\n42 c6 04 33 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p124
S'.text:0000000000410620\n.text:0000000000410622\n.text:0000000000410623\n.text:0000000000410624\n.text:0000000000410627\n.text:000000000041062a\n.text:000000000041062f\n.text:0000000000410634\n.text:0000000000410638\n.text:0000000000410639\n.text:000000000041063b\n'
p125
tp126
sS'_obstack_begin_1'
p127
(S'\n__stdcall _obstack_begin_1(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr_void_ptr * freefun, void * arg)\n'
p128
V\u000aint _obstack_begin_1(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(void *,size_t),\u000a                    void (*freefun)(void *,void *),void *arg)\u000a\u000a{\u000a  *(void *(**)(void *,size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *,void *))&h->freefun = freefun;\u000a  h->extra_arg = arg;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 1;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p129
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nMOV qword ptr [RDI + 0x48],R9\nOR byte ptr [RDI + 0x50],0x1\nCALL 0x004102b0\nMOV EAX,0x1\nPOP RCX\nRET\n'
p130
S'50\n48 89 4f 38\n4c 89 47 40\n4c 89 4f 48\n80 4f 50 01\ne8 5a ff ff ff\nb8 01 00 00 00\n59\nc3\n'
p131
S'.text:0000000000410340\n.text:0000000000410341\n.text:0000000000410345\n.text:0000000000410349\n.text:000000000041034d\n.text:0000000000410351\n.text:0000000000410356\n.text:000000000041035b\n.text:000000000041035c\n'
p132
tp133
sS'get_funky_string'
p134
(S'\n__stdcall get_funky_string(char * * dest, char * * src, size_t * output_count)\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x00405b37) */\u000a/* WARNING: Removing unreachable block (ram,0x00405b4a) */\u000a/* WARNING: Removing unreachable block (ram,0x00405974) */\u000a/* WARNING: Removing unreachable block (ram,0x00405b9b) */\u000a/* WARNING: Switch with 1 destination removed at 0x00405993 */\u000a\u000a_Bool get_funky_string(char **dest,char **src,size_t *output_count)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  long *in_RCX;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  long lVar5;\u000a  \u000a  pcVar3 = *src;\u000a  pcVar4 = *dest;\u000a  lVar5 = 0;\u000aLAB_00405991:\u000a  cVar1 = *pcVar3;\u000a  cVar2 = cVar1;\u000a  switch(cVar1) {\u000a  case ':':\u000aLAB_00405ba5:\u000a    *dest = pcVar4;\u000a    *src = pcVar3;\u000a    *in_RCX = lVar5;\u000a    return true;\u000a  case ';':\u000a  case '<':\u000a  case '>':\u000a  case '?':\u000a  case '@':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case '[':\u000a  case ']':\u000a    goto code_r0x00405b50;\u000a  case '=':\u000a    cVar2 = (char)output_count;\u000a  default:\u000a    if (cVar2 == 0) goto LAB_00405ba5;\u000acode_r0x00405b50:\u000a    pcVar3 = pcVar3 + 1;\u000a    *pcVar4 = cVar1;\u000a    pcVar4 = pcVar4 + 1;\u000a    lVar5 = lVar5 + 1;\u000a    break;\u000a  case '\u005c\u005c':\u000a    pcVar3 = pcVar3 + 1;\u000a    break;\u000a  case '^':\u000a    break;\u000a  }\u000a  pcVar3 = pcVar3 + 1;\u000a  goto LAB_00405991;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R8,qword ptr [RSI]\nMOV R9,qword ptr [RDI]\nXOR EAX,EAX\nMOV R11D,0x3ff\nMOV R15D,0x7e0000\nMOV R14,0x7e000000000000\nXOR R10D,R10D\nXOR R12D,R12D\nCMP EAX,0x4\nJBE 0x00405991\nJMP 0x00405b9b\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 8b 06\n4c 8b 0f\n31 c0\n41 bb ff 03 00 00\n41 bf 00 00 7e 00\n49 be 00 00 00 00 00 00 7e 00\n45 31 d2\n45 31 e4\n83 f8 04\n76 1d\ne9 22 02 00 00\n'
p138
S'.text:0000000000405940\n.text:0000000000405941\n.text:0000000000405943\n.text:0000000000405945\n.text:0000000000405947\n.text:0000000000405949\n.text:000000000040594a\n.text:000000000040594b\n.text:000000000040594e\n.text:0000000000405951\n.text:0000000000405953\n.text:0000000000405959\n.text:000000000040595f\n.text:0000000000405969\n.text:000000000040596c\n.text:000000000040596f\n.text:0000000000405972\n.text:0000000000405974\n'
p139
tp140
sS'filemodestring'
p141
(S'\n__stdcall filemodestring(stat * statp, char * str)\n'
p142
V\u000avoid filemodestring(stat *statp,char *str)\u000a\u000a{\u000a  strmode((char *)(ulong)statp->st_mode);\u000a  return;\u000a}\u000a\u000a
p143
S'MOV EDI,dword ptr [RDI + 0x18]\nJMP 0x00409180\n'
p144
S'8b 7f 18\ne9 f8 fe ff ff\n'
p145
S'.text:0000000000409280\n.text:0000000000409283\n'
p146
tp147
sS'get_stat_birthtime_ns'
p148
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p149
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p150
S'XOR EAX,EAX\nRET\n'
p151
S'31 c0\nc3\n'
p152
S'.text:000000000040da70\n.text:000000000040da72\n'
p153
tp154
sS'FUN_00402080'
p155
(S'\n__stdcall FUN_00402080()\n'
p156
V\u000avoid FUN_00402080(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0061d010)();\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH qword ptr [0x0061d008]\nJMP qword ptr [0x0061d010]\n'
p158
S'ff 35 82 af 21 00\nff 25 84 af 21 00\n'
p159
S'.plt:0000000000402080\n.plt:0000000000402086\n'
p160
tp161
sS'fileno'
p162
(S'\n__stdcall fileno(FILE * __stream)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0061d210)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0061d210]\n'
p165
S'ff 25 8a ad 21 00\n'
p166
S'.plt:0000000000402480\n'
p167
tp168
sS'rev_xstrcoll_extension'
p169
(S'\n__stdcall rev_xstrcoll_extension(V a, V b)\n'
p170
V\u000aint rev_xstrcoll_extension(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_extension((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x004071b0\n'
p172
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 dd 09 00 00\n'
p173
S'.text:00000000004067c0\n.text:00000000004067c3\n.text:00000000004067c8\n.text:00000000004067cb\n.text:00000000004067ce\n'
p174
tp175
sS'file_has_acl_cache'
p176
(S'\n__stdcall file_has_acl_cache(char * file, fileinfo * f)\n'
p177
V\u000aint file_has_acl_cache(char *file,fileinfo *f)\u000a\u000a{\u000a  dev_t dVar1;\u000a  dev_t unsupported_device;\u000a  int iVar2;\u000a  int *piVar3;\u000a  \u000a  dVar1 = (f->stat).st_dev;\u000a  piVar3 = __errno_location();\u000a  if (dVar1 == unsupported_device) {\u000a    *piVar3 = 0x5f;\u000a    iVar2 = 0;\u000a  }\u000a  else {\u000a    *piVar3 = 0;\u000a    iVar2 = file_has_acl(file,&f->stat);\u000a    if (iVar2 < 1) {\u000a      errno_unsupported();\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RBP,qword ptr [R12 + 0x10]\nMOV RBX,qword ptr [0x0061e090]\nCALL 0x00402110\nMOV R15,RAX\nCMP RBP,RBX\nJNZ 0x004062c3\nMOV dword ptr [R15],0x5f\nXOR R14D,R14D\nJMP 0x004062f8\nADD R12,0x10\nMOV dword ptr [R15],0x0\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00409170\nMOV R14D,EAX\nTEST R14D,R14D\nJG 0x004062f8\nMOV EDI,dword ptr [R15]\nCALL 0x00406450\nTEST AL,AL\nJZ 0x004062f8\nMOV RAX,qword ptr [R12]\nMOV qword ptr [0x0061e090],RAX\nMOV EAX,R14D\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p179
S'55\n41 57\n41 56\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 6c 24 10\n48 8b 1d e6 7d 21 00\ne8 61 be ff ff\n49 89 c7\n48 39 dd\n75 0c\n41 c7 07 5f 00 00 00\n45 31 f6\neb 35\n49 83 c4 10\n41 c7 07 00 00 00 00\n4c 89 f7\n4c 89 e6\ne8 97 2e 00 00\n41 89 c6\n45 85 f6\n7f 17\n41 8b 3f\ne8 67 01 00 00\n84 c0\n74 0b\n49 8b 04 24\n48 89 05 98 7d 21 00\n44 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p180
S'.text:0000000000406290\n.text:0000000000406291\n.text:0000000000406293\n.text:0000000000406295\n.text:0000000000406297\n.text:0000000000406298\n.text:000000000040629b\n.text:000000000040629e\n.text:00000000004062a3\n.text:00000000004062aa\n.text:00000000004062af\n.text:00000000004062b2\n.text:00000000004062b5\n.text:00000000004062b7\n.text:00000000004062be\n.text:00000000004062c1\n.text:00000000004062c3\n.text:00000000004062c7\n.text:00000000004062ce\n.text:00000000004062d1\n.text:00000000004062d4\n.text:00000000004062d9\n.text:00000000004062dc\n.text:00000000004062df\n.text:00000000004062e1\n.text:00000000004062e4\n.text:00000000004062e9\n.text:00000000004062eb\n.text:00000000004062ed\n.text:00000000004062f1\n.text:00000000004062f8\n.text:00000000004062fb\n.text:00000000004062fc\n.text:00000000004062fe\n.text:0000000000406300\n.text:0000000000406302\n.text:0000000000406303\n'
p181
tp182
sS'sigemptyset'
p183
(S'\n__stdcall sigemptyset(sigset_t * __set)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigemptyset(sigset_t *__set)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigemptyset_0061d1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0061d1e8]\n'
p186
S'ff 25 b2 ad 21 00\n'
p187
S'.plt:0000000000402430\n'
p188
tp189
sS'_obstack_free'
p190
(S'\n__stdcall _obstack_free(obstack * h, void * obj)\n'
p191
V\u000avoid _obstack_free(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  _obstack_chunk *old_chunk;\u000a  \u000a  old_chunk = h->chunk;\u000a  while( true ) {\u000a    if (old_chunk == (_obstack_chunk *)0x0) {\u000a      if (obj == (void *)0x0) {\u000a        return;\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    if ((old_chunk < obj) && (obj <= old_chunk->limit)) break;\u000a    p_Var1 = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a    *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 2;\u000a    old_chunk = p_Var1;\u000a  }\u000a  h->next_free = obj;\u000a  h->object_base = obj;\u000a  h->chunk_limit = old_chunk->limit;\u000a  h->chunk = old_chunk;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [R15 + 0x8]\nTEST RSI,RSI\nJZ 0x00410523\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RSI,R14\nJNC 0x0041050a\nCMP qword ptr [RSI],R14\nJNC 0x0041052d\nMOV RBX,qword ptr [RSI + 0x8]\nMOV RDI,R15\nCALL 0x00410490\nOR byte ptr [R15 + 0x50],0x2\nTEST RBX,RBX\nMOV RSI,RBX\nJNZ 0x00410500\nTEST R14,R14\nJZ 0x00410540\nCALL 0x00402100\nMOV qword ptr [R15 + 0x18],R14\nMOV qword ptr [R15 + 0x10],R14\nMOV RAX,qword ptr [RSI]\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R15 + 0x8],RSI\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8b 77 08\n48 85 f6\n74 2f\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 f6\n73 05\n4c 39 36\n73 23\n48 8b 5e 08\n4c 89 ff\ne8 7a ff ff ff\n41 80 4f 50 02\n48 85 db\n48 89 de\n75 dd\n4d 85 f6\n74 18\ne8 d3 1b ff ff\n4d 89 77 18\n4d 89 77 10\n48 8b 06\n49 89 47 20\n49 89 77 08\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:00000000004104e0\n.text:00000000004104e2\n.text:00000000004104e4\n.text:00000000004104e5\n.text:00000000004104e8\n.text:00000000004104eb\n.text:00000000004104ef\n.text:00000000004104f2\n.text:00000000004104f4\n.text:0000000000410500\n.text:0000000000410503\n.text:0000000000410505\n.text:0000000000410508\n.text:000000000041050a\n.text:000000000041050e\n.text:0000000000410511\n.text:0000000000410516\n.text:000000000041051b\n.text:000000000041051e\n.text:0000000000410521\n.text:0000000000410523\n.text:0000000000410526\n.text:0000000000410528\n.text:000000000041052d\n.text:0000000000410531\n.text:0000000000410535\n.text:0000000000410538\n.text:000000000041053c\n.text:0000000000410540\n.text:0000000000410541\n.text:0000000000410543\n.text:0000000000410545\n'
p195
tp196
sS'rotr16'
p197
(S'\n__stdcall rotr16()\n'
p198
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p199
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p200
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p201
S'.text:0000000000410ae0\n.text:0000000000410ae2\n.text:0000000000410ae4\n.text:0000000000410ae6\n.text:0000000000410aeb\n.text:0000000000410aed\n.text:0000000000410aef\n.text:0000000000410af1\n.text:0000000000410af3\n'
p202
tp203
sS'calculate_columns'
p204
(S'\n__stdcall calculate_columns()\n'
p205
V\u000asize_t calculate_columns(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool *p_Var2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  size_t sVar6;\u000a  ulong uVar7;\u000a  size_t sVar8;\u000a  ulong uVar9;\u000a  column_info *pcVar10;\u000a  ulong uVar11;\u000a  long lVar12;\u000a  char in_DIL;\u000a  size_t **ppsVar13;\u000a  ulong uVar14;\u000a  \u000a  sVar5 = max_idx;\u000a  sVar8 = cwd_n_used;\u000a  uVar14 = cwd_n_used;\u000a  if (max_idx < cwd_n_used) {\u000a    uVar14 = max_idx;\u000a  }\u000a  init_column_info();\u000a  if (cwd_n_used != 0) {\u000a    uVar11 = 0;\u000a    do {\u000a      sVar6 = length_of_file_name_and_frills((fileinfo *)sorted_file[uVar11]);\u000a      sVar4 = line_length;\u000a      sVar3 = cwd_n_used;\u000a      if (uVar14 != 0) {\u000a        ppsVar13 = &column_info->col_arr;\u000a        uVar9 = 0;\u000a        do {\u000a          if (*(char *)(ppsVar13 + -2) != 0) {\u000a            if (in_DIL == 0) {\u000a              uVar7 = uVar11 % (uVar9 + 1);\u000a            }\u000a            else {\u000a              uVar7 = SUB168(ZEXT816(uVar11) /\u000a                             (ZEXT816(sVar3 + uVar9) / ZEXT816(uVar9 + 1) &\u000a                             (undefined  [16])0xffffffffffffffff),0);\u000a            }\u000a            uVar1 = sVar6 + (ulong)(uVar9 != uVar7) * 2;\u000a            lVar12 = uVar1 - (*ppsVar13)[uVar7];\u000a            if ((*ppsVar13)[uVar7] <= uVar1 && lVar12 != 0) {\u000a              ppsVar13[-1] = (size_t *)((long)ppsVar13[-1] + lVar12);\u000a              (*ppsVar13)[uVar7] = uVar1;\u000a              *(bool *)(ppsVar13 + -2) = ppsVar13[-1] < sVar4;\u000a            }\u000a          }\u000a          uVar9 = uVar9 + 1;\u000a          ppsVar13 = ppsVar13 + 3;\u000a        } while (uVar9 < uVar14);\u000a      }\u000a      uVar11 = uVar11 + 1;\u000a    } while (uVar11 < cwd_n_used);\u000a  }\u000a  uVar11 = ~sVar8;\u000a  if (~sVar8 < ~sVar5) {\u000a    uVar11 = ~sVar5;\u000a  }\u000a  pcVar10 = column_info + (-2 - uVar11);\u000a  do {\u000a    sVar8 = uVar14;\u000a    if (uVar14 < 2) {\u000a      return sVar8;\u000a    }\u000a    uVar14 = uVar14 - 1;\u000a    p_Var2 = &pcVar10->valid_len;\u000a    pcVar10 = (column_info *)&pcVar10[-1].col_arr;\u000a  } while (*p_Var2 == false);\u000a  return sVar8;\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,EDI\nMOV R12,qword ptr [0x0061d880]\nMOV R15,qword ptr [0x0061d808]\nCMP R12,R15\nMOV R13,R15\nCMOVC R13,R12\nCALL 0x00408760\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00408676\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0061e048]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00408440\nMOV R10,RAX\nTEST R13,R13\nJZ 0x00408666\nMOV RDI,qword ptr [0x0061e168]\nMOV R8,qword ptr [0x0061d808]\nMOV R9,qword ptr [0x0061d850]\nADD RDI,0x10\nXOR ECX,ECX\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [RDI + -0x10],0x0\nJZ 0x0040865a\nTEST R14B,R14B\nJZ 0x00408620\nLEA RAX,[R8 + RCX*0x1]\nLEA RSI,[RCX + 0x1]\nXOR EDX,EDX\nDIV RSI\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RSI\nMOV RDX,RAX\nJMP 0x0040862c\nLEA RSI,[RCX + 0x1]\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RSI\nXOR EAX,EAX\nCMP RCX,RDX\nSETNZ AL\nLEA RAX,[R10 + RAX*0x2]\nMOV RBP,qword ptr [RDI]\nMOV RSI,RAX\nSUB RSI,qword ptr [RBP + RDX*0x8]\nJBE 0x0040865a\nADD qword ptr [RDI + -0x8],RSI\nMOV RSI,qword ptr [RDI]\nMOV qword ptr [RSI + RDX*0x8],RAX\nCMP qword ptr [RDI + -0x8],R9\nSETC AL\nMOV byte ptr [RDI + -0x10],AL\nINC RCX\nADD RDI,0x18\nCMP RCX,R13\nJC 0x004085f0\nINC RBX\nCMP RBX,qword ptr [0x0061d808]\nJC 0x004085b0\nNOT R12\nNOT R15\nCMP R12,R15\nCMOVA R15,R12\nMOV RAX,-0x2\nSUB RAX,R15\nLEA RCX,[RAX + RAX*0x2]\nSHL RCX,0x3\nADD RCX,qword ptr [0x0061e168]\nNOP dword ptr [RAX]\nMOV RAX,R13\nCMP RAX,0x2\nJC 0x004086b6\nLEA R13,[RAX + -0x1]\nCMP byte ptr [RCX],0x0\nLEA RCX,[RCX + -0x18]\nJZ 0x004086a0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p207
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 fe\n4c 8b 25 fb 52 21 00\n4c 8b 3d 7c 52 21 00\n4d 39 fc\n4d 89 fd\n4d 0f 42 ec\ne8 c5 01 00 00\n48 83 3d 65 52 21 00 00\n0f 84 cd 00 00 00\n31 db\n0f 1f 44 00 00\n48 8b 05 91 5a 21 00\n48 8b 3c d8\ne8 80 fe ff ff\n49 89 c2\n4d 85 ed\n0f 84 9a 00 00 00\n48 8b 3d 95 5b 21 00\n4c 8b 05 2e 52 21 00\n4c 8b 0d 6f 52 21 00\n48 83 c7 10\n31 c9\n66 0f 1f 84 00 00 00 00 00\n80 7f f0 00\n74 64\n45 84 f6\n74 25\n49 8d 04 08\n48 8d 71 01\n31 d2\n48 f7 f6\n48 89 c6\n31 d2\n48 89 d8\n48 f7 f6\n48 89 c2\neb 14\n48 8d 71 01\n31 d2\n48 89 d8\n48 f7 f6\n31 c0\n48 39 d1\n0f 95 c0\n49 8d 04 42\n48 8b 2f\n48 89 c6\n48 2b 74 d5 00\n76 15\n48 01 77 f8\n48 8b 37\n48 89 04 d6\n4c 39 4f f8\n0f 92 c0\n88 47 f0\n48 ff c1\n48 83 c7 18\n4c 39 e9\n72 8a\n48 ff c3\n48 3b 1d 98 51 21 00\n0f 82 3a ff ff ff\n49 f7 d4\n49 f7 d7\n4d 39 fc\n4d 0f 47 fc\n48 c7 c0 fe ff ff ff\n4c 29 f8\n48 8d 0c 40\n48 c1 e1 03\n48 03 0d cc 5a 21 00\n0f 1f 40 00\n4c 89 e8\n48 83 f8 02\n72 0d\n4c 8d 68 ff\n80 39 00\n48 8d 49 e8\n74 ea\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p208
S'.text:0000000000408570\n.text:0000000000408571\n.text:0000000000408573\n.text:0000000000408575\n.text:0000000000408577\n.text:0000000000408579\n.text:000000000040857a\n.text:000000000040857b\n.text:000000000040857e\n.text:0000000000408585\n.text:000000000040858c\n.text:000000000040858f\n.text:0000000000408592\n.text:0000000000408596\n.text:000000000040859b\n.text:00000000004085a3\n.text:00000000004085a9\n.text:00000000004085ab\n.text:00000000004085b0\n.text:00000000004085b7\n.text:00000000004085bb\n.text:00000000004085c0\n.text:00000000004085c3\n.text:00000000004085c6\n.text:00000000004085cc\n.text:00000000004085d3\n.text:00000000004085da\n.text:00000000004085e1\n.text:00000000004085e5\n.text:00000000004085e7\n.text:00000000004085f0\n.text:00000000004085f4\n.text:00000000004085f6\n.text:00000000004085f9\n.text:00000000004085fb\n.text:00000000004085ff\n.text:0000000000408603\n.text:0000000000408605\n.text:0000000000408608\n.text:000000000040860b\n.text:000000000040860d\n.text:0000000000408610\n.text:0000000000408613\n.text:0000000000408616\n.text:0000000000408620\n.text:0000000000408624\n.text:0000000000408626\n.text:0000000000408629\n.text:000000000040862c\n.text:000000000040862e\n.text:0000000000408631\n.text:0000000000408634\n.text:0000000000408638\n.text:000000000040863b\n.text:000000000040863e\n.text:0000000000408643\n.text:0000000000408645\n.text:0000000000408649\n.text:000000000040864c\n.text:0000000000408650\n.text:0000000000408654\n.text:0000000000408657\n.text:000000000040865a\n.text:000000000040865d\n.text:0000000000408661\n.text:0000000000408664\n.text:0000000000408666\n.text:0000000000408669\n.text:0000000000408670\n.text:0000000000408676\n.text:0000000000408679\n.text:000000000040867c\n.text:000000000040867f\n.text:0000000000408683\n.text:000000000040868a\n.text:000000000040868d\n.text:0000000000408691\n.text:0000000000408695\n.text:000000000040869c\n.text:00000000004086a0\n.text:00000000004086a3\n.text:00000000004086a7\n.text:00000000004086a9\n.text:00000000004086ad\n.text:00000000004086b0\n.text:00000000004086b4\n.text:00000000004086b6\n.text:00000000004086ba\n.text:00000000004086bb\n.text:00000000004086bd\n.text:00000000004086bf\n.text:00000000004086c1\n.text:00000000004086c3\n.text:00000000004086c4\n'
p209
tp210
sS'xstrtoumax'
p211
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p212
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00410196;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00410196;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_004100c5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_004100a3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_004100a3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00410177;\u000a  default:\u000aswitchD_004100c5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00410177;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00410177:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00410196:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x004101b3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402110\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00402720\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x0040ffb0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x004101a2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00402620\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00410010\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00410041\nCMP EAX,0x22\nJNZ 0x004101a2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0041004c\nJMP 0x00410196\nTEST R12,R12\nJZ 0x004101a2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004101a2\nMOV RDI,R12\nCALL 0x004022d0\nTEST RAX,RAX\nJZ 0x004101a2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0041004c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00410196\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00410196\nMOV RDI,R12\nCALL 0x004022d0\nTEST RAX,RAX\nJZ 0x004100de\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004022d0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004100a3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x004100aa\nCMP EAX,0x44\nJZ 0x004100aa\nCMP EAX,0x69\nJNZ 0x004100a3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x004100b4\nMOV EBP,0x1\nJMP 0x004100b4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004100de\nXOR EAX,EAX\nJMP qword ptr [0x4181e0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00410200\nJMP 0x0041017c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x004101a2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00410177\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00410200\nJMP 0x0041017c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00410177\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004101d0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4180d0\nMOV ESI,0x4180f6\nMOV EDX,0x60\nMOV ECX,0x418390\nCALL 0x00402330\n'
p214
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 82 21 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 83 27 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 3c 26 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 a4 22 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 6c 22 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 5a 22 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd e0 81 41 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf d0 80 41 00\nbe f6 80 41 00\nba 60 00 00 00\nb9 90 83 41 00\ne8 64 21 ff ff\n'
p215
S'.text:000000000040ff60\n.text:000000000040ff61\n.text:000000000040ff63\n.text:000000000040ff65\n.text:000000000040ff67\n.text:000000000040ff69\n.text:000000000040ff6a\n.text:000000000040ff6e\n.text:000000000040ff71\n.text:000000000040ff74\n.text:000000000040ff77\n.text:000000000040ff7a\n.text:000000000040ff7e\n.text:000000000040ff84\n.text:000000000040ff89\n.text:000000000040ff8e\n.text:000000000040ff91\n.text:000000000040ff98\n.text:000000000040ff9d\n.text:000000000040ffa0\n.text:000000000040ffa3\n.text:000000000040ffb0\n.text:000000000040ffb3\n.text:000000000040ffb6\n.text:000000000040ffbb\n.text:000000000040ffbd\n.text:000000000040ffc0\n.text:000000000040ffc5\n.text:000000000040ffc9\n.text:000000000040ffce\n.text:000000000040ffd0\n.text:000000000040ffd6\n.text:000000000040ffd9\n.text:000000000040ffdc\n.text:000000000040ffdf\n.text:000000000040ffe4\n.text:000000000040ffe8\n.text:000000000040ffec\n.text:000000000040ffef\n.text:000000000040fff1\n.text:000000000040fff4\n.text:000000000040fff6\n.text:000000000040fff8\n.text:000000000040fffb\n.text:0000000000410001\n.text:0000000000410006\n.text:0000000000410009\n.text:000000000041000b\n.text:0000000000410010\n.text:0000000000410013\n.text:0000000000410019\n.text:000000000041001c\n.text:000000000041001e\n.text:0000000000410024\n.text:0000000000410027\n.text:000000000041002c\n.text:000000000041002f\n.text:0000000000410035\n.text:000000000041003d\n.text:000000000041003f\n.text:0000000000410041\n.text:0000000000410043\n.text:0000000000410046\n.text:000000000041004c\n.text:0000000000410050\n.text:0000000000410054\n.text:0000000000410056\n.text:000000000041005c\n.text:000000000041005f\n.text:0000000000410064\n.text:0000000000410067\n.text:0000000000410069\n.text:000000000041006e\n.text:0000000000410071\n.text:0000000000410076\n.text:000000000041007b\n.text:000000000041007e\n.text:0000000000410080\n.text:0000000000410084\n.text:0000000000410087\n.text:0000000000410089\n.text:000000000041008c\n.text:000000000041008e\n.text:0000000000410091\n.text:0000000000410093\n.text:0000000000410095\n.text:0000000000410099\n.text:000000000041009c\n.text:00000000004100a1\n.text:00000000004100a3\n.text:00000000004100a8\n.text:00000000004100aa\n.text:00000000004100af\n.text:00000000004100b4\n.text:00000000004100b8\n.text:00000000004100bb\n.text:00000000004100be\n.text:00000000004100c1\n.text:00000000004100c3\n.text:00000000004100c5\n.text:00000000004100cc\n.text:00000000004100cf\n.text:00000000004100d4\n.text:00000000004100d9\n.text:00000000004100de\n.text:00000000004100e2\n.text:00000000004100e7\n.text:00000000004100ea\n.text:00000000004100ed\n.text:00000000004100f2\n.text:00000000004100f5\n.text:00000000004100fa\n.text:00000000004100ff\n.text:0000000000410101\n.text:0000000000410104\n.text:0000000000410109\n.text:000000000041010e\n.text:0000000000410110\n.text:0000000000410113\n.text:0000000000410118\n.text:000000000041011d\n.text:000000000041011f\n.text:0000000000410122\n.text:0000000000410127\n.text:0000000000410129\n.text:000000000041012c\n.text:0000000000410131\n.text:0000000000410136\n.text:0000000000410138\n.text:000000000041013b\n.text:0000000000410140\n.text:0000000000410145\n.text:0000000000410147\n.text:000000000041014a\n.text:000000000041014f\n.text:0000000000410154\n.text:0000000000410156\n.text:0000000000410159\n.text:000000000041015e\n.text:0000000000410163\n.text:0000000000410165\n.text:0000000000410168\n.text:000000000041016d\n.text:000000000041016f\n.text:0000000000410172\n.text:0000000000410177\n.text:000000000041017c\n.text:000000000041017e\n.text:0000000000410182\n.text:0000000000410186\n.text:000000000041018a\n.text:000000000041018c\n.text:000000000041018f\n.text:0000000000410193\n.text:0000000000410196\n.text:000000000041019a\n.text:000000000041019f\n.text:00000000004101a2\n.text:00000000004101a4\n.text:00000000004101a8\n.text:00000000004101a9\n.text:00000000004101ab\n.text:00000000004101ad\n.text:00000000004101af\n.text:00000000004101b1\n.text:00000000004101b2\n.text:00000000004101b3\n.text:00000000004101b8\n.text:00000000004101bd\n.text:00000000004101c2\n.text:00000000004101c7\n'
p216
tp217
sS'time_t_add_ok'
p218
(S'\n__stdcall time_t_add_ok(time_t a, time_t b)\n'
p219
V\u000aint time_t_add_ok(time_t a,time_t b)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = time_t_avg(a,b);\u000a  return (int)((uint)((ulong)(tVar1 + 0x4000000000000000) >> 0x3f) ^ 1);\u000a}\u000a\u000a
p220
S'PUSH RAX\nCALL 0x004118a0\nMOV RCX,0x4000000000000000\nADD RAX,RCX\nSHR RAX,0x3f\nXOR EAX,0x1\nPOP RCX\nRET\n'
p221
S'50\ne8 1a 00 00 00\n48 b9 00 00 00 00 00 00 00 40\n48 01 c8\n48 c1 e8 3f\n83 f0 01\n59\nc3\n'
p222
S'.text:0000000000411880\n.text:0000000000411881\n.text:0000000000411886\n.text:0000000000411890\n.text:0000000000411893\n.text:0000000000411897\n.text:000000000041189a\n.text:000000000041189b\n'
p223
tp224
sS'print_and_abort'
p225
(S'\n__stdcall print_and_abort()\n'
p226
V\u000avoid print_and_abort(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  __fprintf_chk(uVar1,1,0x417c08,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p227
S'PUSH RBX\nMOV RBX,qword ptr [0x0061d600]\nXOR EDI,EDI\nMOV ESI,0x417f0f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x417c08\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004026b0\nMOV EDI,dword ptr [0x0061d540]\nCALL 0x00402690\n'
p228
S'53\n48 8b 1d 88 d0 20 00\n31 ff\nbe 0f 7f 41 00\nba 05 00 00 00\ne8 e7 1c ff ff\n48 89 c1\nbe 01 00 00 00\nba 08 7c 41 00\n31 c0\n48 89 df\ne8 10 21 ff ff\n8b 3d 9a cf 20 00\ne8 e5 20 ff ff\n'
p229
S'.text:0000000000410570\n.text:0000000000410571\n.text:0000000000410578\n.text:000000000041057a\n.text:000000000041057f\n.text:0000000000410584\n.text:0000000000410589\n.text:000000000041058c\n.text:0000000000410591\n.text:0000000000410596\n.text:0000000000410598\n.text:000000000041059b\n.text:00000000004105a0\n.text:00000000004105a6\n'
p230
tp231
sS'setlocale'
p232
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0061d2a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0061d2a0]\n'
p235
S'ff 25 fa ac 21 00\n'
p236
S'.plt:00000000004025a0\n'
p237
tp238
sS'c_toupper'
p239
(S'\n__stdcall c_toupper()\n'
p240
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p242
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p243
S'.text:0000000000410c80\n.text:0000000000410c83\n.text:0000000000410c86\n.text:0000000000410c89\n.text:0000000000410c8c\n'
p244
tp245
sS'bad_cast'
p246
(S'\n__stdcall bad_cast(char * s)\n'
p247
V\u000achar * bad_cast(char *s)\u000a\u000a{\u000a  return s;\u000a}\u000a\u000a
p248
S'MOV RAX,RDI\nRET\n'
p249
S'48 89 f8\nc3\n'
p250
S'.text:0000000000405800\n.text:0000000000405803\n'
p251
tp252
sS'xstrcoll'
p253
(S'\n__stdcall xstrcoll(char * a, char * b)\n'
p254
V\u000aint xstrcoll(char *a,char *b)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  piVar2 = __errno_location();\u000a  *piVar2 = 0;\u000a  iVar1 = (*(code *)PTR_strcoll_0061d268)(a,b);\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00402110\nMOV dword ptr [RAX],0x0\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402530\n'
p256
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 81 af ff ff\nc7 00 00 00 00 00\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\ne9 89 b3 ff ff\n'
p257
S'.text:0000000000407180\n.text:0000000000407182\n.text:0000000000407183\n.text:0000000000407184\n.text:0000000000407187\n.text:000000000040718a\n.text:000000000040718f\n.text:0000000000407195\n.text:0000000000407198\n.text:000000000040719b\n.text:000000000040719f\n.text:00000000004071a0\n.text:00000000004071a2\n'
p258
tp259
sS'mbsinit'
p260
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0061d338)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0061d338]\n'
p263
S'ff 25 62 ac 21 00\n'
p264
S'.plt:00000000004026d0\n'
p265
tp266
sS'human_readable'
p267
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p268
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = ".";\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep =\u000a              \u000a       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a       + 0xca;\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_0040a965:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_0040abf6;\u000aLAB_0040abe0:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_0040abf6;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_0040abf6;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_0040abe0;\u000aLAB_0040abf6:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_0040ac47;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_0040ac47:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_0040ac71;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_0040ac71:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x0040ab52;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_0040a965;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_00416e80 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_00416e80 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_00416e80 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      __sprintf_chk(buf,1,0xffffffffffffffff);\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x0040ab52:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p269
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x004021c0\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x00402290\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x416d9b\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x00402290\nCMP RAX,0x11\nMOV ECX,0x417ce1\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x0040a92d\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x0040a993\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x0040a993\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x0040a965\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x0040a993\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x0040a993\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x0040ab5d\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x0040ab67\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x0040ac47\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x416e80 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x416e80 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x416e80 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x0040aa34\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x0040ae00\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416ea0\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402730\nMOV RDI,R12\nCALL 0x00402290\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0040ab2f\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP word ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x0040aa69\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x0040aa50\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x0040ae00\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416ea6\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00402730\nMOV RDI,R12\nCALL 0x00402290\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x0040aae4\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x0040ab2f\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x0040ab2f\nFLD dword ptr [0x00416e88]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x0040ae00\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416ea0\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402730\nMOV RDI,R12\nCALL 0x00402290\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x004025e0\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x0040ad0b\nJMP 0x0040ad2b\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x0040ac47\nXOR EBP,EBP\nNOP dword ptr [RAX]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x0040abb4\nCMP R9,R12\nJBE 0x0040ab70\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x0040abd1\nCMP EAX,0x1\nJNZ 0x0040abd8\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x0040abe0\nJMP 0x0040abf6\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x0040ac47\nTEST EAX,EAX\nJNZ 0x0040abf6\nTEST EBX,EBX\nJZ 0x0040abf6\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x0040abf6\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x0040ac3a\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x0040ac07\nTEST ECX,ECX\nJNZ 0x0040ac07\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x0040ac47\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00402440\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x0040ac45\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x0040ac6d\nCMP AL,0x1\nJNZ 0x0040acb7\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x0040ac71\nJMP 0x0040acb7\nADD ECX,EBX\nJLE 0x0040acb7\nINC R12\nCMP EBP,0x7\nJG 0x0040acb7\nTEST R13D,R13D\nJZ 0x0040acb7\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x0040acb7\nINC EBP\nTEST R8B,0x8\nJNZ 0x0040acb1\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00402440\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x0040acd0\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x0040ad2b\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x0040aed0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x0040addf\nTEST EBP,EBP\nJNS 0x0040ad77\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x0040ad77\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x0040ad72\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x0040ad60\nJMP 0x0040ad77\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x0040ad9e\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x0040ad9e\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x0040adc0\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x0040adb0\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x0040adb9\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x416ee0 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x0040addf\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x0040add7\nTEST EBP,EBP\nJZ 0x0040add7\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p270
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 67 79 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 29 7a ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 9b 6d 41 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 f5 79 ff ff\n48 83 f8 11\nb9 e1 7c 41 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 e6 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 de 01 00 00\n4c 8b 7c 24 10\ne9 b4 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 80 6e 41 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 80 6e 41 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 80 6e 41 00\nde f2\nde c9\n41 f6 c0 10\n75 49\ndb 3c 24\n8b 7c 24 24\ne8 09 04 00 00\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 a0 6e 41 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 13 7d ff ff\n4c 89 e7\ne8 6b 78 ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 fb 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n66 0f 1f 84 00 00 00 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 7d 03 00 00\ndb 3c 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 a6 6e 41 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 8a 7c ff ff\n4c 89 e7\ne8 e2 77 ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 53\n41 80 7c 04 ff 30\n75 4b\nd9 05 9e c3 00 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 00 03 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 a0 6e 41 00\n31 c0\n4c 89 e7\ne8 09 7c ff ff\n4c 89 e7\ne8 61 77 ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 9d 7a ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 b3 01 00 00\ne9 ce 01 00 00\n4c 8b 7c 24 10\ne9 e0 00 00 00\n31 ed\n0f 1f 80 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 0f 78 ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 94 77 ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 e0 6e 41 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p271
S'.text:000000000040a810\n.text:000000000040a811\n.text:000000000040a813\n.text:000000000040a815\n.text:000000000040a817\n.text:000000000040a819\n.text:000000000040a81a\n.text:000000000040a821\n.text:000000000040a824\n.text:000000000040a827\n.text:000000000040a82a\n.text:000000000040a82d\n.text:000000000040a82f\n.text:000000000040a832\n.text:000000000040a836\n.text:000000000040a83a\n.text:000000000040a83c\n.text:000000000040a83f\n.text:000000000040a843\n.text:000000000040a848\n.text:000000000040a84d\n.text:000000000040a850\n.text:000000000040a854\n.text:000000000040a859\n.text:000000000040a85c\n.text:000000000040a85f\n.text:000000000040a862\n.text:000000000040a867\n.text:000000000040a86b\n.text:000000000040a86f\n.text:000000000040a874\n.text:000000000040a878\n.text:000000000040a87d\n.text:000000000040a882\n.text:000000000040a886\n.text:000000000040a88b\n.text:000000000040a88f\n.text:000000000040a893\n.text:000000000040a896\n.text:000000000040a89b\n.text:000000000040a89f\n.text:000000000040a8a4\n.text:000000000040a8a8\n.text:000000000040a8b0\n.text:000000000040a8b5\n.text:000000000040a8b8\n.text:000000000040a8bd\n.text:000000000040a8c2\n.text:000000000040a8c7\n.text:000000000040a8cc\n.text:000000000040a8ce\n.text:000000000040a8d1\n.text:000000000040a8d6\n.text:000000000040a8dc\n.text:000000000040a8de\n.text:000000000040a8e1\n.text:000000000040a8e4\n.text:000000000040a8e7\n.text:000000000040a8ed\n.text:000000000040a8ef\n.text:000000000040a8f2\n.text:000000000040a8f5\n.text:000000000040a8f8\n.text:000000000040a8fa\n.text:000000000040a8fd\n.text:000000000040a900\n.text:000000000040a903\n.text:000000000040a906\n.text:000000000040a90a\n.text:000000000040a90c\n.text:000000000040a90f\n.text:000000000040a912\n.text:000000000040a914\n.text:000000000040a917\n.text:000000000040a91a\n.text:000000000040a91d\n.text:000000000040a91f\n.text:000000000040a922\n.text:000000000040a925\n.text:000000000040a928\n.text:000000000040a92b\n.text:000000000040a92d\n.text:000000000040a92f\n.text:000000000040a932\n.text:000000000040a935\n.text:000000000040a938\n.text:000000000040a93d\n.text:000000000040a93f\n.text:000000000040a941\n.text:000000000040a943\n.text:000000000040a946\n.text:000000000040a949\n.text:000000000040a94c\n.text:000000000040a94f\n.text:000000000040a953\n.text:000000000040a955\n.text:000000000040a958\n.text:000000000040a95b\n.text:000000000040a95e\n.text:000000000040a963\n.text:000000000040a965\n.text:000000000040a968\n.text:000000000040a96c\n.text:000000000040a971\n.text:000000000040a977\n.text:000000000040a97b\n.text:000000000040a97e\n.text:000000000040a980\n.text:000000000040a983\n.text:000000000040a989\n.text:000000000040a98e\n.text:000000000040a993\n.text:000000000040a998\n.text:000000000040a99a\n.text:000000000040a99d\n.text:000000000040a9a0\n.text:000000000040a9a4\n.text:000000000040a9ab\n.text:000000000040a9b0\n.text:000000000040a9b2\n.text:000000000040a9b5\n.text:000000000040a9b8\n.text:000000000040a9bc\n.text:000000000040a9c3\n.text:000000000040a9cb\n.text:000000000040a9cd\n.text:000000000040a9d0\n.text:000000000040a9d3\n.text:000000000040a9da\n.text:000000000040a9e1\n.text:000000000040a9e3\n.text:000000000040a9e5\n.text:000000000040a9e9\n.text:000000000040a9eb\n.text:000000000040a9ee\n.text:000000000040a9f2\n.text:000000000040a9f7\n.text:000000000040a9fa\n.text:000000000040a9fd\n.text:000000000040aa02\n.text:000000000040aa09\n.text:000000000040aa0e\n.text:000000000040aa10\n.text:000000000040aa15\n.text:000000000040aa18\n.text:000000000040aa1d\n.text:000000000040aa20\n.text:000000000040aa25\n.text:000000000040aa2a\n.text:000000000040aa2f\n.text:000000000040aa34\n.text:000000000040aa38\n.text:000000000040aa3d\n.text:000000000040aa3f\n.text:000000000040aa41\n.text:000000000040aa45\n.text:000000000040aa47\n.text:000000000040aa50\n.text:000000000040aa52\n.text:000000000040aa54\n.text:000000000040aa56\n.text:000000000040aa58\n.text:000000000040aa5a\n.text:000000000040aa5d\n.text:000000000040aa5f\n.text:000000000040aa61\n.text:000000000040aa63\n.text:000000000040aa65\n.text:000000000040aa67\n.text:000000000040aa69\n.text:000000000040aa6b\n.text:000000000040aa6d\n.text:000000000040aa6f\n.text:000000000040aa71\n.text:000000000040aa75\n.text:000000000040aa78\n.text:000000000040aa7c\n.text:000000000040aa7e\n.text:000000000040aa83\n.text:000000000040aa86\n.text:000000000040aa8b\n.text:000000000040aa92\n.text:000000000040aa97\n.text:000000000040aa99\n.text:000000000040aa9e\n.text:000000000040aaa1\n.text:000000000040aaa6\n.text:000000000040aaa9\n.text:000000000040aaae\n.text:000000000040aab2\n.text:000000000040aab6\n.text:000000000040aaba\n.text:000000000040aabf\n.text:000000000040aac2\n.text:000000000040aac5\n.text:000000000040aaca\n.text:000000000040aacc\n.text:000000000040aad0\n.text:000000000040aad2\n.text:000000000040aad5\n.text:000000000040aada\n.text:000000000040aadc\n.text:000000000040aae2\n.text:000000000040aae4\n.text:000000000040aaea\n.text:000000000040aaec\n.text:000000000040aaf0\n.text:000000000040aaf4\n.text:000000000040aaf6\n.text:000000000040aaf9\n.text:000000000040aafb\n.text:000000000040ab00\n.text:000000000040ab04\n.text:000000000040ab06\n.text:000000000040ab09\n.text:000000000040ab0c\n.text:000000000040ab11\n.text:000000000040ab18\n.text:000000000040ab1d\n.text:000000000040ab1f\n.text:000000000040ab22\n.text:000000000040ab27\n.text:000000000040ab2a\n.text:000000000040ab2f\n.text:000000000040ab32\n.text:000000000040ab35\n.text:000000000040ab38\n.text:000000000040ab3b\n.text:000000000040ab3e\n.text:000000000040ab43\n.text:000000000040ab46\n.text:000000000040ab49\n.text:000000000040ab4e\n.text:000000000040ab52\n.text:000000000040ab58\n.text:000000000040ab5d\n.text:000000000040ab62\n.text:000000000040ab67\n.text:000000000040ab69\n.text:000000000040ab70\n.text:000000000040ab72\n.text:000000000040ab75\n.text:000000000040ab78\n.text:000000000040ab7b\n.text:000000000040ab7e\n.text:000000000040ab80\n.text:000000000040ab82\n.text:000000000040ab84\n.text:000000000040ab87\n.text:000000000040ab89\n.text:000000000040ab8b\n.text:000000000040ab8e\n.text:000000000040ab90\n.text:000000000040ab92\n.text:000000000040ab95\n.text:000000000040ab97\n.text:000000000040ab99\n.text:000000000040ab9c\n.text:000000000040ab9f\n.text:000000000040aba1\n.text:000000000040aba3\n.text:000000000040aba6\n.text:000000000040aba8\n.text:000000000040abab\n.text:000000000040abad\n.text:000000000040abaf\n.text:000000000040abb2\n.text:000000000040abb4\n.text:000000000040abb8\n.text:000000000040abbc\n.text:000000000040abbe\n.text:000000000040abc1\n.text:000000000040abc3\n.text:000000000040abc5\n.text:000000000040abc8\n.text:000000000040abca\n.text:000000000040abcd\n.text:000000000040abcf\n.text:000000000040abd1\n.text:000000000040abd6\n.text:000000000040abd8\n.text:000000000040abda\n.text:000000000040abdc\n.text:000000000040abde\n.text:000000000040abe0\n.text:000000000040abe2\n.text:000000000040abe4\n.text:000000000040abe7\n.text:000000000040abe9\n.text:000000000040abec\n.text:000000000040abee\n.text:000000000040abf2\n.text:000000000040abf4\n.text:000000000040abf6\n.text:000000000040abfa\n.text:000000000040abfc\n.text:000000000040abfe\n.text:000000000040ac00\n.text:000000000040ac05\n.text:000000000040ac07\n.text:000000000040ac0a\n.text:000000000040ac0f\n.text:000000000040ac16\n.text:000000000040ac1c\n.text:000000000040ac21\n.text:000000000040ac24\n.text:000000000040ac27\n.text:000000000040ac2c\n.text:000000000040ac31\n.text:000000000040ac36\n.text:000000000040ac38\n.text:000000000040ac3a\n.text:000000000040ac40\n.text:000000000040ac45\n.text:000000000040ac47\n.text:000000000040ac4a\n.text:000000000040ac4c\n.text:000000000040ac4e\n.text:000000000040ac50\n.text:000000000040ac52\n.text:000000000040ac55\n.text:000000000040ac58\n.text:000000000040ac5b\n.text:000000000040ac5d\n.text:000000000040ac60\n.text:000000000040ac64\n.text:000000000040ac66\n.text:000000000040ac69\n.text:000000000040ac6b\n.text:000000000040ac6d\n.text:000000000040ac6f\n.text:000000000040ac71\n.text:000000000040ac74\n.text:000000000040ac77\n.text:000000000040ac79\n.text:000000000040ac7c\n.text:000000000040ac7e\n.text:000000000040ac82\n.text:000000000040ac85\n.text:000000000040ac87\n.text:000000000040ac89\n.text:000000000040ac8d\n.text:000000000040ac8f\n.text:000000000040ac94\n.text:000000000040ac97\n.text:000000000040ac9c\n.text:000000000040ac9f\n.text:000000000040aca2\n.text:000000000040aca7\n.text:000000000040acac\n.text:000000000040acb1\n.text:000000000040acb7\n.text:000000000040acbc\n.text:000000000040acc6\n.text:000000000040acc9\n.text:000000000040acd0\n.text:000000000040acd3\n.text:000000000040acd6\n.text:000000000040acd8\n.text:000000000040acdb\n.text:000000000040ace0\n.text:000000000040ace3\n.text:000000000040ace6\n.text:000000000040ace8\n.text:000000000040acec\n.text:000000000040acf0\n.text:000000000040acf3\n.text:000000000040acf7\n.text:000000000040acfb\n.text:000000000040acfe\n.text:000000000040ad00\n.text:000000000040ad05\n.text:000000000040ad09\n.text:000000000040ad0b\n.text:000000000040ad0e\n.text:000000000040ad11\n.text:000000000040ad14\n.text:000000000040ad19\n.text:000000000040ad1e\n.text:000000000040ad23\n.text:000000000040ad28\n.text:000000000040ad2b\n.text:000000000040ad30\n.text:000000000040ad34\n.text:000000000040ad37\n.text:000000000040ad3d\n.text:000000000040ad3f\n.text:000000000040ad41\n.text:000000000040ad43\n.text:000000000040ad47\n.text:000000000040ad49\n.text:000000000040ad4b\n.text:000000000040ad4d\n.text:000000000040ad52\n.text:000000000040ad60\n.text:000000000040ad63\n.text:000000000040ad65\n.text:000000000040ad67\n.text:000000000040ad6b\n.text:000000000040ad6e\n.text:000000000040ad70\n.text:000000000040ad72\n.text:000000000040ad77\n.text:000000000040ad7a\n.text:000000000040ad7f\n.text:000000000040ad83\n.text:000000000040ad85\n.text:000000000040ad87\n.text:000000000040ad89\n.text:000000000040ad8b\n.text:000000000040ad94\n.text:000000000040ad9b\n.text:000000000040ad9e\n.text:000000000040ada0\n.text:000000000040ada2\n.text:000000000040ada7\n.text:000000000040ada9\n.text:000000000040adab\n.text:000000000040adae\n.text:000000000040adb0\n.text:000000000040adb3\n.text:000000000040adb9\n.text:000000000040adbd\n.text:000000000040adc0\n.text:000000000040adc2\n.text:000000000040adc4\n.text:000000000040adc9\n.text:000000000040adcb\n.text:000000000040adcd\n.text:000000000040adcf\n.text:000000000040add4\n.text:000000000040add7\n.text:000000000040addc\n.text:000000000040addf\n.text:000000000040ade4\n.text:000000000040ade7\n.text:000000000040adee\n.text:000000000040adef\n.text:000000000040adf1\n.text:000000000040adf3\n.text:000000000040adf5\n.text:000000000040adf7\n.text:000000000040adf8\n'
p272
tp273
sS'__ctype_toupper_loc'
p274
(S'\n__stdcall __ctype_toupper_loc()\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_0061d018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x0061d018]\n'
p277
S'ff 25 82 af 21 00\n'
p278
S'.plt:0000000000402090\n'
p279
tp280
sS'rev_xstrcoll_version'
p281
(S'\n__stdcall rev_xstrcoll_version(V a, V b)\n'
p282
V\u000aint rev_xstrcoll_version(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_version((fileinfo *)b,(fileinfo *)a);\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'MOV RAX,RDI\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407250\n'
p284
S'48 89 f8\n48 89 f7\n48 89 c6\ne9 d2 06 00 00\n'
p285
S'.text:0000000000406b70\n.text:0000000000406b73\n.text:0000000000406b76\n.text:0000000000406b79\n'
p286
tp287
sS'deregister_tm_clones'
p288
(S'\n__stdcall deregister_tm_clones()\n'
p289
V\u000a/* WARNING: Removing unreachable block (ram,0x00402785) */\u000a/* WARNING: Removing unreachable block (ram,0x0040278f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p290
S'MOV EAX,0x61d5af\nPUSH RBP\nSUB RAX,0x61d5a8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004027a0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004027a0\nPOP RBP\nMOV EDI,0x61d5a8\nJMP RAX\nPOP RBP\nRET\n'
p291
S'b8 af d5 61 00\n55\n48 2d a8 d5 61 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf a8 d5 61 00\nff e0\n5d\nc3\n'
p292
S'.text:0000000000402770\n.text:0000000000402775\n.text:0000000000402776\n.text:000000000040277c\n.text:0000000000402780\n.text:0000000000402783\n.text:0000000000402785\n.text:000000000040278a\n.text:000000000040278d\n.text:000000000040278f\n.text:0000000000402790\n.text:0000000000402795\n.text:00000000004027a0\n.text:00000000004027a1\n'
p293
tp294
sS'strftime_case_'
p295
(S'\n__stdcall strftime_case_(char * s, size_t maxsize, char * format, tm * tp, timezone_t tz)\n'
p296
V\u000a/* WARNING: Removing unreachable block (ram,0x0040f09b) */\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t strftime_case_(char *s,size_t maxsize,char *format,tm *tp,timezone_t tz)\u000a\u000a{\u000a  int *piVar1;\u000a  byte bVar2;\u000a  char cVar3;\u000a  char cVar4;\u000a  bool bVar5;\u000a  int __c;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  size_t __n;\u000a  char cVar8;\u000a  int __c_00;\u000a  uint uVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  uint uVar12;\u000a  long lVar13;\u000a  char *__src;\u000a  int __c_01;\u000a  ulong uVar14;\u000a  ulong uVar15;\u000a  char *pcVar16;\u000a  timezone_t in_R9;\u000a  void *__src_00;\u000a  char *pcVar17;\u000a  char *__n_00;\u000a  char *pcVar18;\u000a  uint in_stack_00000008;\u000a  size_t _incr;\u000a  char ufmt [5];\u000a  char buf [23];\u000a  tm ltm;\u000a  uint local_4bc;\u000a  ulong local_4b0;\u000a  ulong local_490;\u000a  undefined2 local_485;\u000a  char local_483;\u000a  char local_482 [2];\u000a  size_t local_480;\u000a  uint local_474;\u000a  tm_zone *local_470;\u000a  timezone_t local_468;\u000a  undefined4 local_45c;\u000a  char local_441 [9];\u000a  undefined4 local_438;\u000a  int iStack1076;\u000a  int iStack1072;\u000a  int iStack1068;\u000a  int local_428;\u000a  int iStack1060;\u000a  int iStack1056;\u000a  int iStack1052;\u000a  int local_418;\u000a  undefined4 uStack1044;\u000a  undefined4 uStack1040;\u000a  undefined4 uStack1036;\u000a  tm_zone *local_408;\u000a  \u000a  local_45c = SUB84(s,0);\u000a  local_4bc = *(uint *)&tz->tz_is_set;\u000a  local_4b0 = (ulong)local_4bc;\u000a  local_470 = (tm_zone *)\u000a              (\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  if (tz[3].next != (tm_zone *)0x0) {\u000a    local_470 = tz[3].next;\u000a  }\u000a  local_474 = 0xc;\u000a  if (local_4bc != 0) {\u000a    local_474 = local_4bc;\u000a  }\u000a  if (0xc < (int)local_4bc) {\u000a    local_474 = local_4bc - 0xc;\u000a  }\u000a  pcVar16 = (char *)0x0;\u000a  cVar3 = *(char *)&tp->tm_sec;\u000a  local_490 = local_4b0;\u000a  local_468 = in_R9;\u000a  do {\u000a    if (cVar3 == 0) {\u000a      if ((format != (char *)0x0) && ((char *)maxsize != (char *)0x0)) {\u000a        *(char *)maxsize = 0;\u000a      }\u000a      return (size_t)pcVar16;\u000a    }\u000a    if (*(char *)&tp->tm_sec != '%') {\u000a      uVar7 = 1;\u000a      if ((char *)0x1 < format + -(long)pcVar16) {\u000a        if ((char *)maxsize == (char *)0x0) {\u000a          maxsize = 0;\u000a        }\u000a        else {\u000a          *(char *)maxsize = *(char *)&tp->tm_sec;\u000a          maxsize = (size_t)((char *)maxsize + 1);\u000a        }\u000a        pcVar16 = pcVar16 + 1;\u000a        uVar7 = 0;\u000a      }\u000a      if (uVar7 == 0) {\u000a        uVar7 = 4;\u000a      }\u000a      goto LAB_0040defa;\u000a    }\u000a    bVar5 = false;\u000a    bVar2 = (byte)local_45c;\u000a    tp = (tm *)((long)&tp->tm_sec + 1);\u000a    __c_01 = 0;\u000aLAB_0040dd26:\u000a    while( true ) {\u000a      while (__c = (int)*(char *)&tp->tm_sec, 0x2f < __c) {\u000a        if ((__c == 0x30) || (__c == 0x5f)) goto LAB_0040dd20;\u000a        if (__c != 0x5e) goto LAB_0040dda0;\u000a        bVar2 = 1;\u000a        tp = (tm *)((long)&tp->tm_sec + 1);\u000a      }\u000a      if (__c != 0x2d) break;\u000aLAB_0040dd20:\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a      __c_01 = __c;\u000a    }\u000a    if (__c == 0x23) {\u000a      bVar5 = true;\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a      goto LAB_0040dd26;\u000a    }\u000aLAB_0040dda0:\u000a    pcVar17 = (char *)0xffffffff;\u000a    if (__c - 0x30U < 10) {\u000a      pcVar17 = (char *)0x0;\u000a      do {\u000a        __c = (int)pcVar17;\u000a        pcVar17 = (char *)0x7fffffff;\u000a        if ((__c < 0xccccccd) &&\u000a           ((__c_00 = (int)*(char *)&tp->tm_sec + -0x30, __c != 0xccccccc ||\u000a            (pcVar17 = (char *)0x7fffffff, __c_00 < 8)))) {\u000a          pcVar17 = (char *)(ulong)(uint)(__c_00 + __c * 10);\u000a        }\u000a        piVar1 = &tp->tm_sec;\u000a        tp = (tm *)((long)&tp->tm_sec + 1);\u000a      } while ((int)*(char *)((long)piVar1 + 1) - 0x30U < 10);\u000a    }\u000a    uVar9 = (uint)pcVar17;\u000a    cVar3 = *(char *)&tp->tm_sec;\u000a    if ((cVar3 == 'O') || (cVar3 == 'E')) {\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a    }\u000a    else {\u000a      cVar3 = 0;\u000a    }\u000a    cVar8 = *(char *)&tp->tm_sec;\u000a    uVar11 = 0;\u000a    __src = "%H:%M";\u000a    uVar6 = 0;\u000a    cVar4 = 'r';\u000a    switch(cVar8) {\u000a    case 0:\u000a      tp = (tm *)((long)&tp->tm_mday + 3);\u000a    default:\u000a      goto LAB_0040e021;\u000a    case '%':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        uVar7 = 0;\u000a        if (-1 < (int)uVar9) {\u000a          uVar7 = uVar9;\u000a        }\u000a        pcVar17 = (char *)0x1;\u000a        if (1 < uVar7) {\u000a          pcVar17 = (char *)(ulong)uVar7;\u000a        }\u000a        if (format + -(long)pcVar16 <= pcVar17) {\u000a          return 0;\u000a        }\u000a        if ((char *)maxsize == (char *)0x0) goto LAB_0040e9a7;\u000a        if (1 < uVar7) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a        }\u000a        *(char *)maxsize = *(char *)&tp->tm_sec;\u000a        goto LAB_0040dcd8;\u000a      }\u000a      break;\u000a    case ':':\u000a      uVar11 = 1;\u000a      while (cVar4 = *(char *)((long)&tp->tm_sec + uVar11), cVar4 == ':') {\u000a        uVar11 = uVar11 + 1;\u000a      }\u000a      if (cVar4 == 'z') {\u000a        tp = (tm *)((long)&tp->tm_sec + uVar11);\u000a        goto switchD_0040de1d_caseD_7a;\u000a      }\u000a      goto LAB_0040e021;\u000a    case 'A':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'A';\u000a        uVar6 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      break;\u000a    case 'B':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'B';\u000a        uVar6 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      break;\u000a    case 'C':\u000a      if (cVar3 == 'E') {\u000a        uVar11 = 0;\u000a        cVar4 = 'C';\u000a        uVar6 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      if (cVar3 != 'O') {\u000a        __c = *(int *)((long)&tz[1].next + 4);\u000a        lVar13 = (long)__c;\u000a        bVar5 = lVar13 < 0xfffff894;\u000a        __c_00 = __c / 100 + (__c >> 0x1f) + (uint)((ulong)(lVar13 * 0x51eb851f) >> 0x3f);\u000a        uVar7 = (__c_00 - (uint)(__c + __c_00 * -100 < 0 && 0xfffff894 < lVar13)) + 0x13;\u000a        goto LAB_0040e54c;\u000a      }\u000aLAB_0040e021:\u000a      uVar6 = 0;\u000a      break;\u000a    case 'D':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        __src = "%m/%d/%y";\u000a        goto switchD_0040de1d_caseD_52;\u000a      }\u000a      break;\u000a    case 'F':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        __src = "%Y-%m-%d";\u000a        goto switchD_0040de1d_caseD_52;\u000a      }\u000a      break;\u000a    case 'G':\u000a    case 'V':\u000a    case 'g':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar7 = iso_week_days();\u000a        if ((int)uVar7 < 0) {\u000a          uVar7 = iso_week_days();\u000a          uVar9 = 0xffffffff;\u000a        }\u000a        else {\u000a          uVar6 = iso_week_days();\u000a          uVar9 = uVar6 >> 0x1f ^ 1;\u000a          if (-1 < (int)uVar6) {\u000a            uVar7 = uVar6;\u000a          }\u000a        }\u000a        if (*(char *)&tp->tm_sec == 'G') {\u000a          __c = *(int *)((long)&tz[1].next + 4);\u000a          local_490 = (ulong)(__c < (int)(-0x76c - uVar9));\u000a          local_4b0 = (ulong)(uVar9 + 0x76c + __c);\u000a          uVar6 = 4;\u000a          goto LAB_0040e924;\u000a        }\u000a        if (*(char *)&tp->tm_sec == 'g') {\u000a          __c = *(int *)((long)&tz[1].next + 4);\u000a          __c_00 = __c + (__c / 100 + (__c >> 0x1f) +\u000a                         (uint)((ulong)((long)__c * 0x51eb851f) >> 0x3f)) * -100 + uVar9;\u000a          uVar7 = __c_00 + (__c_00 / 100 + (__c_00 >> 0x1f) +\u000a                           (uint)((ulong)((long)__c_00 * 0x51eb851f) >> 0x3f)) * -100;\u000a          uVar11 = (ulong)uVar7;\u000a          uVar6 = 2;\u000a          if ((int)uVar7 < 0) {\u000a            uVar6 = uVar7 + 100;\u000a            if (__c < (int)(-0x76c - uVar9)) {\u000a              uVar6 = -uVar7;\u000a            }\u000a            uVar11 = (ulong)uVar6;\u000a            uVar6 = 2;\u000a          }\u000a        }\u000a        else {\u000a          uVar11 = (ulong)((int)uVar7 / 7 + ((int)uVar7 >> 0x1f) + 1 +\u000a                          (uint)((ulong)((long)(int)uVar7 * 0x92492493) >> 0x3f));\u000a          uVar6 = 2;\u000a        }\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'H':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->tz_is_set;\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'I':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)local_474;\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'M':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)((long)&tz->next + 4);\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'N':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        if (uVar9 == 0xffffffff) {\u000a          pcVar17 = (char *)0x9;\u000a          uVar11 = (ulong)in_stack_00000008;\u000a          uVar6 = 9;\u000a        }\u000a        else {\u000a          if ((int)uVar9 < 9) {\u000a            uVar7 = 9;\u000a            uVar11 = (ulong)in_stack_00000008;\u000a            do {\u000a              __c = (int)uVar11;\u000a              uVar11 = (ulong)(__c / 10 + (__c >> 0x1f) +\u000a                              (uint)((ulong)((long)__c * 0x66666667) >> 0x3f));\u000a              uVar7 = uVar7 - 1;\u000a              uVar6 = uVar9;\u000a            } while (uVar9 != uVar7);\u000a          }\u000a          else {\u000a            uVar11 = (ulong)in_stack_00000008;\u000a            uVar6 = uVar9;\u000a          }\u000a        }\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'P':\u000a      uVar11 = 1;\u000a    case 'p':\u000a      uVar6 = 0;\u000a      if (bVar5) {\u000a        bVar2 = 0;\u000a        uVar11 = 1;\u000a      }\u000a      cVar4 = 'p';\u000a      goto switchD_0040de1d_caseD_72;\u000a    case 'R':\u000a      goto switchD_0040de1d_caseD_52;\u000a    case 'S':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->next;\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'T':\u000a      __src = "%H:%M:%S";\u000aswitchD_0040de1d_caseD_52:\u000a      pcVar18 = (char *)strftime_case_((char *)(ulong)(bVar2 != 0),0,(char *)0xffffffffffffffff,\u000a                                       (tm *)__src,tz);\u000a      __n_00 = (char *)0x0;\u000a      if (-1 < (int)uVar9) {\u000a        __n_00 = pcVar17;\u000a      }\u000a      pcVar17 = pcVar18;\u000a      if (pcVar18 < __n_00) {\u000a        pcVar17 = __n_00;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) {\u000a        maxsize = 0;\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      else {\u000a        if (pcVar18 < __n_00) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)pcVar18);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)pcVar18));\u000a        }\u000a        strftime_case_((char *)(ulong)(bVar2 != 0),maxsize,format + -(long)pcVar16,(tm *)__src,tz);\u000a        maxsize = (size_t)(pcVar18 + maxsize);\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      goto LAB_0040f27d;\u000a    case 'U':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        __c = (*(int *)&tz[1].field_0xc + 7) - *(int *)&tz[1].tz_is_set;\u000aLAB_0040e35c:\u000a        uVar11 = (ulong)(__c / 7 + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x92492493) >> 0x3f));\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'W':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        __c = *(int *)&tz[1].tz_is_set + 6;\u000a        uVar7 = (int)((ulong)((long)__c * -0x6db6db6d) >> 0x20) + 6 + *(int *)&tz[1].tz_is_set;\u000a        __c = (*(int *)&tz[1].field_0xc + 7) - (__c + (((int)uVar7 >> 2) + (uVar7 >> 0x1f)) * -7);\u000a        goto LAB_0040e35c;\u000a      }\u000a      break;\u000a    case 'X':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'X';\u000aLAB_0040e8a8:\u000a        uVar6 = 0;\u000a        uVar11 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      break;\u000a    case 'Y':\u000a      if (cVar3 == 'E') {\u000a        uVar11 = 0;\u000a        cVar4 = 'Y';\u000a        uVar6 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      if (cVar3 == 'O') goto LAB_0040e021;\u000a      __c = *(int *)((long)&tz[1].next + 4);\u000a      bVar5 = __c < -0x76c;\u000a      local_4b0 = (ulong)(__c + 0x76c);\u000a      cVar4 = 0;\u000a      uVar6 = 4;\u000a      local_490 = (ulong)bVar5;\u000a      local_4bc = 0;\u000a      goto LAB_0040ecf9;\u000a    case 'Z':\u000a      __n_00 = (char *)strlen((char *)local_470);\u000a      __src = (char *)0x0;\u000a      if (-1 < (int)uVar9) {\u000a        __src = pcVar17;\u000a      }\u000a      pcVar17 = __n_00;\u000a      if (__n_00 < __src) {\u000a        pcVar17 = __src;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) {\u000aLAB_0040e9a7:\u000a        maxsize = 0;\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      else {\u000a        if (__n_00 < __src) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__n_00);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__n_00));\u000a          if (bVar5) goto LAB_0040f0ea;\u000aLAB_0040f0ff:\u000a          if (bVar2 == 0) {\u000a            memcpy((void *)maxsize,local_470,(size_t)__n_00);\u000a          }\u000a          else {\u000a            memcpy_uppcase(maxsize);\u000a          }\u000a        }\u000a        else {\u000a          if (!bVar5) goto LAB_0040f0ff;\u000aLAB_0040f0ea:\u000a          memcpy_lowcase(maxsize);\u000a        }\u000a        maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      goto LAB_0040f27d;\u000a    case 'a':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'a';\u000a        uVar6 = 0;\u000a        goto switchD_0040de1d_caseD_72;\u000a      }\u000a      break;\u000a    case 'b':\u000a    case 'h':\u000a      if (bVar5) {\u000a        bVar2 = 1;\u000a      }\u000a      uVar6 = 0;\u000a      cVar4 = cVar8;\u000a      if (cVar3 == 0) goto LAB_0040e8a8;\u000a      break;\u000a    case 'c':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'c';\u000a        goto LAB_0040e8a8;\u000a      }\u000a      break;\u000a    case 'd':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->field_0xc;\u000a        uVar6 = 2;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'e':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->field_0xc;\u000aLAB_0040e878:\u000a        uVar6 = 2;\u000a        if ((__c_01 != 0x2d) && (__c_01 != 0x30)) {\u000a          __c_01 = 0x5f;\u000a        }\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'j':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        local_490 = (ulong)(*(int *)&tz[1].field_0xc < -1);\u000a        local_4b0 = (ulong)(*(int *)&tz[1].field_0xc + 1);\u000a        uVar6 = 3;\u000aLAB_0040e924:\u000a        local_4bc = 0;\u000a        cVar4 = 0;\u000a        goto LAB_0040ebef;\u000a      }\u000a      break;\u000a    case 'k':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->tz_is_set;\u000a        goto LAB_0040e878;\u000a      }\u000a      break;\u000a    case 'l':\u000a      uVar6 = 0;\u000a      uVar11 = (ulong)local_474;\u000a      if (cVar3 != 'E') goto LAB_0040e878;\u000a      break;\u000a    case 'm':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        bVar5 = *(int *)&tz[1].next < -1;\u000a        uVar7 = *(int *)&tz[1].next + 1;\u000aLAB_0040e54c:\u000a        local_4b0 = (ulong)uVar7;\u000a        local_490 = (ulong)bVar5;\u000a        uVar6 = 2;\u000a        goto LAB_0040e924;\u000a      }\u000a      break;\u000a    case 'n':\u000a      uVar7 = 0;\u000a      if (-1 < (int)uVar9) {\u000a        uVar7 = uVar9;\u000a      }\u000a      pcVar17 = (char *)0x1;\u000a      if (1 < uVar7) {\u000a        pcVar17 = (char *)(ulong)uVar7;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) goto LAB_0040e9a7;\u000a      if (1 < uVar7) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a      }\u000a      *(char *)maxsize = '\u005cn';\u000a      goto LAB_0040dcd8;\u000a    case 'r':\u000a      goto switchD_0040de1d_caseD_72;\u000a    case 's':\u000a      local_408 = tz[3].next;\u000a      local_438 = *(int *)&tz->next;\u000a      iStack1076 = *(int *)((long)&tz->next + 4);\u000a      iStack1072 = *(int *)&tz->tz_is_set;\u000a      iStack1068 = *(int *)&tz->field_0xc;\u000a      local_428 = *(int *)&tz[1].next;\u000a      iStack1060 = *(int *)((long)&tz[1].next + 4);\u000a      iStack1056 = *(int *)&tz[1].tz_is_set;\u000a      iStack1052 = *(int *)&tz[1].field_0xc;\u000a      local_418 = *(int *)&tz[2].next;\u000a      uStack1044 = *(undefined4 *)((long)&tz[2].next + 4);\u000a      uStack1040 = *(undefined4 *)&tz[2].tz_is_set;\u000a      uStack1036 = *(undefined4 *)&tz[2].field_0xc;\u000a      uVar15 = mktime_z(local_468,(tm *)&local_438);\u000a      local_490 = uVar15 >> 0x3f;\u000a      __src = local_441;\u000a      uVar11 = uVar15;\u000a      do {\u000a        uVar10 = (long)uVar11 / 10 + ((long)uVar11 >> 0x3f);\u000a        cVar8 = (char)uVar11 + (char)uVar10 * -10;\u000a        cVar3 = -cVar8;\u000a        if (-1 < (long)uVar15) {\u000a          cVar3 = cVar8;\u000a        }\u000a        __src[-1] = cVar3 + '0';\u000a        __src = __src + -1;\u000a        uVar14 = uVar11 + 9;\u000a        uVar11 = uVar10;\u000a      } while (0x12 < uVar14);\u000a      uVar6 = 1;\u000a      cVar4 = 0;\u000a      goto LAB_0040ed4f;\u000a    case 't':\u000a      uVar7 = 0;\u000a      if (-1 < (int)uVar9) {\u000a        uVar7 = uVar9;\u000a      }\u000a      pcVar17 = (char *)0x1;\u000a      if (1 < uVar7) {\u000a        pcVar17 = (char *)(ulong)uVar7;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) goto LAB_0040e9a7;\u000a      if (1 < uVar7) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a      }\u000a      *(char *)maxsize = '\u005ct';\u000aLAB_0040dcd8:\u000a      maxsize = (size_t)((char *)maxsize + 1);\u000a      pcVar16 = pcVar17 + (long)pcVar16;\u000a      goto LAB_0040f27d;\u000a    case 'u':\u000a      __c = *(int *)&tz[1].tz_is_set + 6;\u000a      uVar7 = (int)((ulong)((long)__c * -0x6db6db6d) >> 0x20) + 6 + *(int *)&tz[1].tz_is_set;\u000a      uVar11 = (ulong)(__c + (((int)uVar7 >> 2) + (uVar7 >> 0x1f)) * -7 + 1);\u000a      uVar6 = 1;\u000aLAB_0040ebd7:\u000a      local_490 = uVar11 >> 0x1f;\u000a      local_4bc = 0;\u000a      cVar4 = 0;\u000a      local_4b0 = uVar11;\u000a      goto LAB_0040ebef;\u000a    case 'w':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz[1].tz_is_set;\u000a        uVar6 = 1;\u000a        goto LAB_0040ebd7;\u000a      }\u000a      break;\u000a    case 'x':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'x';\u000a        goto LAB_0040e8a8;\u000a      }\u000a      break;\u000a    case 'y':\u000a      if (cVar3 != 'E') {\u000a        __c = *(int *)((long)&tz[1].next + 4);\u000a        uVar7 = __c + (__c / 100 + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x51eb851f) >> 0x3f))\u000a                      * -100;\u000a        uVar11 = (ulong)uVar7;\u000a        uVar6 = 2;\u000a        if ((int)uVar7 < 0) {\u000a          uVar9 = uVar7 + 100;\u000a          if (__c < -0x76c) {\u000a            uVar9 = -uVar7;\u000a          }\u000a          uVar11 = (ulong)uVar9;\u000a          uVar6 = 2;\u000a        }\u000a        goto LAB_0040ebd7;\u000a      }\u000a      uVar11 = 0;\u000a      cVar4 = 'y';\u000a      uVar6 = 0;\u000a      goto switchD_0040de1d_caseD_72;\u000a    case 'z':\u000aswitchD_0040de1d_caseD_7a:\u000a      if (*(int *)&tz[2].next < 0) goto LAB_0040f27d;\u000a      if (3 < uVar11) {\u000a        uVar6 = 0;\u000a        uVar7 = 0xe;\u000a        goto LAB_0040dc7d;\u000a      }\u000a      uVar7 = *(uint *)&tz[2].tz_is_set;\u000a      __c = (int)uVar7 / 0x3c + ((int)uVar7 >> 0x1f) +\u000a            (uint)((ulong)((long)(int)uVar7 * 0x88888889) >> 0x3f);\u000a      uVar12 = (int)uVar7 / 0xe10 + ((int)uVar7 >> 0x1f) +\u000a               (uint)((ulong)((long)(int)uVar7 * 0x91a2b3c5) >> 0x3f);\u000a      __c_00 = __c + (__c / 0x3c + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x88888889) >> 0x3f))\u000a                     * -0x3c;\u000a      __c = uVar7 + __c * -0x3c;\u000a      switch(uVar11) {\u000a      case 0:\u000a        uVar12 = uVar12 * 100 + __c_00;\u000a        uVar6 = 5;\u000a        goto LAB_0040e00f;\u000a      case 1:\u000aswitchD_0040dfef_caseD_1:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)(uVar12 * 100 + __c_00);\u000a        uVar6 = 6;\u000a        local_4bc = 4;\u000a        break;\u000a      case 2:\u000aswitchD_0040dfef_caseD_2:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)(uVar12 * 10000 + __c + __c_00 * 100);\u000a        uVar6 = 9;\u000a        local_4bc = 0x14;\u000a        break;\u000a      case 3:\u000a        if (__c != 0) goto switchD_0040dfef_caseD_2;\u000a        if (__c_00 != 0) goto switchD_0040dfef_caseD_1;\u000a        uVar6 = 3;\u000aLAB_0040e00f:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)uVar12;\u000a        local_4bc = 0;\u000a      }\u000a      uVar7 = 0x20;\u000aLAB_0040dc7d:\u000a      if ((char)uVar7 == 0xe) break;\u000a      cVar4 = 1;\u000a      if ((char)uVar7 == ' ') {\u000aLAB_0040ebef:\u000a        uVar9 = (uint)pcVar17;\u000a        bVar5 = (bool)((byte)local_490 & 1);\u000a        if ((cVar3 == 'O') && ((local_490 & 1) == 0)) {\u000a          uVar11 = 0;\u000a          cVar4 = cVar8;\u000a          goto switchD_0040de1d_caseD_72;\u000a        }\u000aLAB_0040ecf9:\u000a        uVar11 = (ulong)(uint)-(int)local_4b0;\u000a        if (bVar5 == false) {\u000a          uVar11 = local_4b0;\u000a        }\u000a        __src = local_441;\u000a        do {\u000a          if ((local_4bc & 1) != 0) {\u000a            __src[-1] = ':';\u000a            __src = __src + -1;\u000a          }\u000a          local_4bc = (int)local_4bc >> 1;\u000a          uVar9 = (uint)uVar11;\u000a          uVar15 = uVar11 * 0xcccccccd;\u000a          local_4b0 = uVar15 >> 0x23;\u000a          uVar7 = (uint)(uVar15 >> 0x20);\u000a          __src[-1] = (char)uVar11 + ((char)(uVar7 >> 3) + (char)(uVar7 >> 3)) * -5 | 0x30;\u000a          __src = __src + -1;\u000a          uVar11 = local_4b0;\u000a        } while ((9 < uVar9) || (uVar11 = uVar15 >> 0x23, local_4bc != 0));\u000aLAB_0040ed4f:\u000a        uVar7 = (uint)pcVar17;\u000a        if ((int)uVar6 < (int)uVar7) {\u000a          uVar6 = uVar7;\u000a        }\u000a        if (cVar4 != 0) {\u000a          cVar4 = '+';\u000a        }\u000a        cVar3 = '-';\u000a        if ((local_490 & 1) == 0) {\u000a          cVar3 = cVar4;\u000a        }\u000a        if (__c_01 == 0x2d) {\u000a          if (cVar3 != 0) {\u000a            __n_00 = (char *)0x0;\u000a            if (-1 < (int)uVar7) {\u000a              __n_00 = pcVar17;\u000a            }\u000a            pcVar17 = (char *)0x1;\u000a            if (1 < (uint)__n_00) {\u000a              pcVar17 = __n_00;\u000a            }\u000a            if (format + -(long)pcVar16 <= pcVar17) {\u000a              return 0;\u000a            }\u000a            if ((char *)maxsize == (char *)0x0) {\u000a              maxsize = 0;\u000a            }\u000a            else {\u000a              if ((1 < (uint)__n_00) && (uVar6 == 0)) {\u000a                local_480 = SEXT48((int)uVar7);\u000a                memset((void *)maxsize,0x20,local_480 - 1);\u000a                maxsize = (size_t)((char *)maxsize + (local_480 - 1));\u000a              }\u000aLAB_0040f1aa:\u000a              *(char *)maxsize = cVar3;\u000a              maxsize = (size_t)((char *)maxsize + 1);\u000a            }\u000aLAB_0040f1b0:\u000a            pcVar16 = pcVar17 + (long)pcVar16;\u000a          }\u000a        }\u000a        else {\u000a          __c = (((int)__src - ((int)register0x00000020 + -0x441)) - (uint)(cVar3 != 0)) + uVar6;\u000a          if (__c < 1) {\u000a            if (cVar3 != 0) {\u000a              __n_00 = (char *)0x0;\u000a              if (-1 < (int)uVar7) {\u000a                __n_00 = pcVar17;\u000a              }\u000a              pcVar17 = (char *)0x1;\u000a              if (1 < (uint)__n_00) {\u000a                pcVar17 = __n_00;\u000a              }\u000a              if (format + -(long)pcVar16 <= pcVar17) {\u000a                return 0;\u000a              }\u000a              if ((char *)maxsize != (char *)0x0) {\u000a                if ((1 < (uint)__n_00) && (uVar6 == 0)) {\u000a                  local_480 = (long)(int)uVar7 - 1;\u000a                  if (__c_01 == 0x30) {\u000a                    __c = 0x30;\u000a                  }\u000a                  else {\u000a                    __c = 0x20;\u000a                  }\u000a                  memset((void *)maxsize,__c,local_480);\u000a                  maxsize = (size_t)((char *)maxsize + local_480);\u000a                }\u000a                goto LAB_0040f1aa;\u000a              }\u000a              maxsize = 0;\u000a              goto LAB_0040f1b0;\u000a            }\u000a          }\u000a          else {\u000a            pcVar17 = format + -(long)pcVar16;\u000a            if (__c_01 == 0x5f) {\u000a              __n_00 = (char *)(long)__c;\u000a              if (pcVar17 <= __n_00) {\u000a                return 0;\u000a              }\u000a              if ((char *)maxsize == (char *)0x0) {\u000a                maxsize = 0;\u000a              }\u000a              else {\u000a                memset((void *)maxsize,0x20,(size_t)__n_00);\u000a                maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a              }\u000a              pcVar17 = (char *)0x0;\u000a              pcVar16 = __n_00 + (long)pcVar16;\u000a              if (uVar7 - __c != 0 && __c <= (int)uVar7) {\u000a                pcVar17 = (char *)(ulong)(uVar7 - __c);\u000a              }\u000a              uVar7 = (uint)pcVar17;\u000a              if (cVar3 != 0) {\u000a                __n_00 = (char *)0x1;\u000a                if (1 < uVar7) {\u000a                  __n_00 = pcVar17;\u000a                }\u000a                if (format + -(long)pcVar16 <= __n_00) {\u000a                  return 0;\u000a                }\u000a                if ((char *)maxsize == (char *)0x0) {\u000a                  maxsize = 0;\u000a                }\u000a                else {\u000a                  if ((uVar6 == 0) && (1 < uVar7)) {\u000a                    memset((void *)maxsize,0x20,(size_t)(pcVar17 + -1));\u000a                    maxsize = (size_t)((char *)maxsize + (long)(pcVar17 + -1));\u000a                  }\u000a                  *(char *)maxsize = cVar3;\u000a                  maxsize = (size_t)((char *)maxsize + 1);\u000a                }\u000a                pcVar16 = __n_00 + (long)pcVar16;\u000a              }\u000a            }\u000a            else {\u000a              if (pcVar17 <= (char *)(long)(int)uVar6) {\u000a                return 0;\u000a              }\u000a              if (cVar3 != 0) {\u000a                uVar9 = 0;\u000a                if (-1 < (int)uVar7) {\u000a                  uVar9 = uVar7;\u000a                }\u000a                __n_00 = (char *)0x1;\u000a                if (1 < uVar9) {\u000a                  __n_00 = (char *)(ulong)uVar9;\u000a                }\u000a                if (pcVar17 <= __n_00) {\u000a                  return 0;\u000a                }\u000a                if ((char *)maxsize == (char *)0x0) {\u000a                  maxsize = 0;\u000a                }\u000a                else {\u000a                  if ((1 < uVar9) && (uVar6 == 0)) {\u000a                    if (__c_01 == 0x30) {\u000a                      __c_00 = 0x30;\u000a                    }\u000a                    else {\u000a                      __c_00 = 0x20;\u000a                    }\u000a                    memset((void *)maxsize,__c_00,(long)(int)uVar7 - 1U);\u000a                    maxsize = (size_t)((char *)maxsize + ((long)(int)uVar7 - 1U));\u000a                  }\u000a                  *(char *)maxsize = cVar3;\u000a                  maxsize = (size_t)((char *)maxsize + 1);\u000a                }\u000a                pcVar16 = __n_00 + (long)pcVar16;\u000a              }\u000a              uVar7 = 0;\u000a              __n = SEXT48(__c);\u000a              if ((char *)maxsize == (char *)0x0) {\u000a                maxsize = 0;\u000a                pcVar16 = pcVar16 + __n;\u000a              }\u000a              else {\u000a                memset((void *)maxsize,0x30,__n);\u000a                maxsize = (size_t)((char *)maxsize + __n);\u000a                pcVar16 = pcVar16 + __n;\u000a              }\u000a            }\u000a          }\u000a        }\u000a        __n_00 = local_441 + -(long)__src;\u000a        pcVar17 = (char *)0x0;\u000a        if (-1 < (int)uVar7) {\u000a          pcVar17 = (char *)(ulong)uVar7;\u000a        }\u000a        pcVar18 = __n_00;\u000a        if (__n_00 < pcVar17) {\u000a          pcVar18 = pcVar17;\u000a        }\u000a        if (format + -(long)pcVar16 <= pcVar18) {\u000a          return 0;\u000a        }\u000a        if ((char *)maxsize == (char *)0x0) {\u000a          maxsize = 0;\u000a        }\u000a        else {\u000a          if ((uVar6 == 0) && (__n_00 < pcVar17)) {\u000a            if (__c_01 == 0x30) {\u000a              __c_01 = 0x30;\u000a            }\u000a            else {\u000a              __c_01 = 0x20;\u000a            }\u000a            memset((void *)maxsize,__c_01,(long)(int)uVar7 - (long)__n_00);\u000a            maxsize = (size_t)((char *)maxsize + ((long)(int)uVar7 - (long)__n_00));\u000a          }\u000a          if (bVar2 == 0) {\u000a            memcpy((void *)maxsize,__src,(size_t)__n_00);\u000a          }\u000a          else {\u000a            memcpy_uppcase(maxsize);\u000a          }\u000a          maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a        }\u000a        goto LAB_0040f270;\u000a      }\u000aLAB_0040defa:\u000a      if ((uVar7 | 4) != 4) {\u000a        return 0;\u000a      }\u000a      goto LAB_0040f27d;\u000a    }\u000a    __src_00 = (void *)((long)&tp->tm_sec + 1);\u000a    lVar13 = 0;\u000a    do {\u000a      lVar13 = lVar13 + 0x100000000;\u000a      __src = (char *)((long)__src_00 + -1);\u000a      __src_00 = (void *)((long)__src_00 + -1);\u000a    } while (*__src != '%');\u000a    __n_00 = (char *)(lVar13 >> 0x20);\u000a    __src = (char *)0x0;\u000a    if (-1 < (int)uVar9) {\u000a      __src = pcVar17;\u000a    }\u000a    pcVar18 = __n_00;\u000a    if (__n_00 < __src) {\u000a      pcVar18 = __src;\u000a    }\u000a    if (format + -(long)pcVar16 <= pcVar18) {\u000a      return 0;\u000a    }\u000a    if ((char *)maxsize == (char *)0x0) {\u000a      maxsize = 0;\u000a    }\u000a    else {\u000a      if ((uVar6 == 0) && (__n_00 < __src)) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__n_00);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__n_00));\u000a      }\u000a      if ((bVar2 & 1) == 0) {\u000a        memcpy((void *)maxsize,__src_00,(size_t)__n_00);\u000a      }\u000a      else {\u000a        memcpy_uppcase(maxsize);\u000a      }\u000a      maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a    }\u000aLAB_0040f270:\u000a    pcVar16 = pcVar18 + (long)pcVar16;\u000aLAB_0040f27d:\u000a    cVar3 = *(char *)((long)&tp->tm_sec + 1);\u000a    tp = (tm *)((long)&tp->tm_sec + 1);\u000a  } while( true );\u000aswitchD_0040de1d_caseD_72:\u000a  local_485 = 0x2520;\u000a  pcVar17 = &local_483;\u000a  if (cVar3 != 0) {\u000a    pcVar17 = local_482;\u000a    local_483 = cVar3;\u000a  }\u000a  *pcVar17 = cVar4;\u000a  pcVar17[1] = 0;\u000a  __n = strftime(&local_438,0x400,(char *)&local_485,(tm *)tz);\u000a  if (__n != 0) {\u000a    __src = (char *)(__n - 1);\u000a    pcVar17 = (char *)0x0;\u000a    if (-1 < (int)uVar9) {\u000a      pcVar17 = (char *)(ulong)uVar9;\u000a    }\u000a    __n_00 = __src;\u000a    if (__src < pcVar17) {\u000a      __n_00 = pcVar17;\u000a    }\u000a    if (format + -(long)pcVar16 <= __n_00) {\u000a      return 0;\u000a    }\u000a    if ((char *)maxsize == (char *)0x0) {\u000a      maxsize = 0;\u000a      pcVar16 = __n_00 + (long)pcVar16;\u000a    }\u000a    else {\u000a      if ((uVar6 == 0) && (__src < pcVar17)) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__src);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__src));\u000a      }\u000a      if (uVar11 == 0) {\u000a        if ((bVar2 & 1) == 0) {\u000a          memcpy((void *)maxsize,&local_438 + 1,(size_t)__src);\u000a        }\u000a        else {\u000a          memcpy_uppcase(maxsize);\u000a        }\u000a      }\u000a      else {\u000a        memcpy_lowcase(maxsize);\u000a      }\u000a      maxsize = (size_t)((char *)maxsize + (long)__src);\u000a      pcVar16 = __n_00 + (long)pcVar16;\u000a    }\u000a  }\u000a  goto LAB_0040f27d;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x4b8\nMOV qword ptr [0x80 + RSP],R9\nMOV RBX,RCX\nMOV qword ptr [RSP + 0x48],RDX\nMOV R9,RSI\nMOV dword ptr [0x8c + RSP],EDI\nMOV EAX,dword ptr [R8 + 0x8]\nMOV qword ptr [RSP + 0x30],R8\nMOV RCX,qword ptr [R8 + 0x30]\nTEST RCX,RCX\nMOV EDX,0x417ce1\nCMOVNZ RDX,RCX\nMOV qword ptr [RSP + 0x78],RDX\nLEA ECX,[RAX + -0xc]\nTEST EAX,EAX\nMOV EDX,0xc\nCMOVNZ EDX,EAX\nCMP EAX,0xc\nCMOVG EDX,ECX\nMOV dword ptr [RSP + 0x74],EDX\nXOR R8D,R8D\nCMP byte ptr [RBX],0x0\nJZ 0x0040f28b\nMOV R15,0x100000000\nMOV qword ptr [RSP + 0x38],RAX\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x2c],EAX\nJMP 0x0040dd00\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nCALL 0x00402350\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nMOV AL,byte ptr [RSP + 0x50]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,R15\nXOR R14D,R14D\nTEST R9,R9\nMOVSXD R12,R12D\nJZ 0x0040dbe3\nMOV ESI,0x30\nMOV RDI,R9\nMOV RDX,R12\nMOV qword ptr [RSP + 0x20],R8\nMOV R15,R9\nCALL 0x00402350\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R12\nADD R8,R12\nJMP 0x0040f1b3\nXOR R9D,R9D\nADD R8,R12\nJMP 0x0040f1b3\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R12,R9\nCALL 0x00402350\nMOV RCX,qword ptr [RSP + 0x40]\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,R12\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nMOV AL,byte ptr [RSP + 0x50]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,R15\nMOV R14D,ECX\nJMP 0x0040f1b3\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x00402440\nMOV R9,R14\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R12\nADD R8,RBP\nJMP 0x0040f27d\nTEST R11D,R11D\nJZ 0x0040dce3\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x64\nADD EBP,R11D\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x6\nMOV dword ptr [RSP + 0x2c],0x4\nMOV EAX,0x20\nMOV EDX,EAX\nAND DL,0x3f\nCMP DL,0xe\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV R12B,0x1\nCMP DL,0x20\nMOV RDI,qword ptr [RSP + 0x58]\nJZ 0x0040ebef\nJMP 0x0040defa\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00402350\nADD R15,R14\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nMOV R15,0x100000000\nMOV AL,byte ptr [RBX]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,RBP\nJMP 0x0040f27d\nMOV qword ptr [RSP + 0x38],RBP\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nMOV R11D,0x3\nJMP 0x0040e00f\nMOV CL,byte ptr [RBX]\nCMP CL,0x25\nJNZ 0x0040dd70\nXOR ESI,ESI\nMOV EAX,dword ptr [0x8c + RSP]\nMOV R12B,AL\nXOR R13D,R13D\nINC RBX\nJMP 0x0040dd26\nINC RBX\nMOV R13D,EAX\nMOVSX EAX,byte ptr [RBX]\nCMP EAX,0x2f\nJLE 0x0040dd50\nCMP EAX,0x30\nJZ 0x0040dd20\nCMP EAX,0x5f\nJZ 0x0040dd20\nCMP EAX,0x5e\nJNZ 0x0040dda0\nMOV R12B,0x1\nINC RBX\nJMP 0x0040dd26\nCMP EAX,0x2d\nJZ 0x0040dd20\nCMP EAX,0x23\nJNZ 0x0040dda0\nMOV SIL,0x1\nINC RBX\nJMP 0x0040dd26\nMOV RDX,qword ptr [RSP + 0x48]\nSUB RDX,R8\nMOV EAX,0x1\nCMP RDX,0x2\nJC 0x0040def0\nTEST R9,R9\nJZ 0x0040dee8\nMOV byte ptr [R9],CL\nINC R9\nJMP 0x0040deeb\nADD EAX,-0x30\nMOV R14D,0xffffffff\nCMP EAX,0x9\nJA 0x0040dde8\nXOR EAX,EAX\nMOV R14D,0x7fffffff\nCMP EAX,0xccccccc\nJG 0x0040ddd6\nMOVSX ECX,byte ptr [RBX]\nADD ECX,-0x30\nCMP EAX,0xccccccc\nJNZ 0x0040ddcf\nCMP ECX,0x7\nJG 0x0040ddd6\nLEA EAX,[RAX + RAX*0x4]\nLEA R14D,[RCX + RAX*0x2]\nMOVSX EAX,byte ptr [RBX + 0x1]\nINC RBX\nADD EAX,-0x30\nCMP EAX,0xa\nMOV EAX,R14D\nJC 0x0040ddb0\nMOVSX R10D,byte ptr [RBX]\nCMP R10D,0x4f\nJZ 0x0040ddf8\nCMP R10D,0x45\nJNZ 0x0040ddfd\nINC RBX\nJMP 0x0040de00\nXOR R10D,R10D\nMOVSX EDI,byte ptr [RBX]\nCMP EDI,0x7a\nMOV qword ptr [RSP + 0x20],R8\nJA 0x0040e01c\nXOR EDX,EDX\nMOV AL,0x72\nMOV EBP,0x416611\nXOR R11D,R11D\nJMP qword ptr [0x417790 + RDI*0x8]\nMOV dword ptr [RSP + 0x14],R12D\nXOR R11D,R11D\nCMP R10D,0x45\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV dword ptr [RSP + 0x38],R10D\nMOV qword ptr [RSP + 0x40],R9\nMOV RDX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RDX + 0x14]\nMOV ESI,dword ptr [RDX + 0x18]\nMOV ECX,EAX\nSAR ECX,0x1f\nAND ECX,0x190\nLEA R12D,[RAX + RCX*0x1 + -0x64]\nMOV R15D,dword ptr [RDX + 0x1c]\nMOV EDI,R15D\nCALL 0x0040f340\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040e76e\nMOV EAX,0x16d\nTEST R12B,0x3\nJNZ 0x0040dec3\nMOVSXD RAX,R12D\nIMUL RAX,RAX,0x51eb851f\nMOV RCX,RAX\nSAR RCX,0x25\nMOV RDX,RAX\nSHR RDX,0x3f\nADD ECX,EDX\nIMUL ECX,ECX,0x64\nSAR RAX,0x27\nADD EAX,EDX\nIMUL EAX,EAX,0x190\nXOR EDX,EDX\nCMP R12D,EAX\nSETZ DL\nADD EDX,0x16d\nCMP R12D,ECX\nMOV EAX,0x16e\nCMOVZ EAX,EDX\nSUB R15D,EAX\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x18]\nMOV EDI,R15D\nCALL 0x0040f340\nMOV ECX,EAX\nSHR ECX,0x1f\nXOR ECX,0x1\nTEST EAX,EAX\nCMOVNS EBP,EAX\nJMP 0x0040e7d5\nXOR R9D,R9D\nINC R8\nXOR EAX,EAX\nTEST EAX,EAX\nMOV ECX,0x4\nCMOVZ EAX,ECX\nOR EAX,0x4\nCMP EAX,0x4\nJZ 0x0040f27d\nJMP 0x0040f29e\nTEST SIL,SIL\nJZ 0x0040df13\nMOV R12B,0x1\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e767\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nMOV dword ptr [RSP + 0x14],R12D\nDEC RBX\nJMP 0x0040e021\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e95a\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nMOV EDX,0x1\nJMP 0x0040df63\nINC RDX\nMOVZX EAX,byte ptr [RBX + RDX*0x1]\nCMP AL,0x3a\nJZ 0x0040df60\nCMP AL,0x7a\nJNZ 0x0040e01c\nADD RBX,RDX\nMOV RAX,qword ptr [RSP + 0x30]\nCMP dword ptr [RAX + 0x20],0x0\nJS 0x0040f27d\nCMP RDX,0x3\nJA 0x0040eb76\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RSI,dword ptr [RAX + 0x28]\nIMUL RAX,RSI,-0x77777777\nSHR RAX,0x20\nADD EAX,ESI\nMOV ECX,EAX\nSHR ECX,0x1f\nSAR EAX,0x5\nADD EAX,ECX\nIMUL RBP,RSI,-0x6e5d4c3b\nSHR RBP,0x20\nADD EBP,ESI\nMOV ECX,EBP\nSHR ECX,0x1f\nSAR EBP,0xb\nADD EBP,ECX\nMOVSXD R11,EAX\nIMUL RCX,R11,-0x77777777\nSHR RCX,0x20\nADD ECX,R11D\nMOV EAX,ECX\nSHR EAX,0x1f\nSAR ECX,0x5\nADD ECX,EAX\nIMUL ECX,ECX,0x3c\nIMUL EAX,R11D,0x3c\nSUB R11D,ECX\nMOV ECX,ESI\nSUB ECX,EAX\nJMP qword ptr [0x417b68 + RDX*0x8]\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x64\nADD EBP,R11D\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x5\nMOV dword ptr [RSP + 0x2c],0x0\nJMP 0x0040dc78\nMOV dword ptr [RSP + 0x14],R12D\nXOR R11D,R11D\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA R12,[RBX + 0x1]\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBP,R15\nCMP byte ptr [R12 + -0x1],0x25\nLEA R12,[R12 + -0x1]\nJNZ 0x0040e040\nSAR RBP,0x20\nTEST R14D,R14D\nMOV EAX,0x0\nCMOVNS EAX,R14D\nCMP RBP,RAX\nMOV R15,RBP\nCMOVC R15,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040e0a2\nCMP RBP,RAX\nSETNC AL\nTEST R11D,R11D\nJNZ 0x0040e0c3\nTEST AL,AL\nJNZ 0x0040e0c3\nMOVSXD R14,R14D\nSUB R14,RBP\nCMP R13D,0x30\nJNZ 0x0040e0aa\nMOV ESI,0x30\nJMP 0x0040e0af\nXOR R9D,R9D\nJMP 0x0040f270\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R13,R9\nCALL 0x00402350\nMOV R9,R13\nADD R9,R14\nTEST byte ptr [RSP + 0x14],0x1\nJNZ 0x0040e0dd\nMOV RDI,R9\nMOV RSI,R12\nMOV RDX,RBP\nMOV R14,R9\nCALL 0x00402440\nJMP 0x0040e0ee\nMOV RDI,R9\nMOV RSI,R12\nMOV RDX,RBP\nMOV R14,R9\nCALL 0x0040f300\nADD R14,RBP\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R14\nJMP 0x0040f270\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e9bc\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e9d0\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nCMP R10D,0x45\nJZ 0x0040eb25\nCMP R10D,0x4f\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e021\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RAX,dword ptr [RAX + 0x14]\nCMP RAX,0xfffff894\nSETL DIL\nSETG CL\nIMUL RSI,RAX,0x51eb851f\nMOV RDX,RSI\nSHR RDX,0x3f\nSAR RSI,0x25\nADD ESI,EDX\nIMUL EDX,ESI,0x64\nCMP EAX,EDX\nSETS AL\nAND AL,CL\nMOVZX EAX,AL\nSUB ESI,EAX\nADD ESI,0x13\nMOV qword ptr [RSP + 0x38],RSI\nJMP 0x0040e54c\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e9e4\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040e9eb\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x8]\nMOV EDX,0x2\nJMP 0x0040ebd7\nMOV EDX,0x2\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV EAX,dword ptr [RSP + 0x74]\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x4]\nMOV EDX,0x2\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nCMP R14D,-0x1\nMOV qword ptr [RSP + 0x18],RDI\nJZ 0x0040ebb9\nCMP R14D,0x8\nJG 0x0040ebcd\nMOV ECX,0x9\nMOV EAX,dword ptr [0x4f0 + RSP]\nNOP dword ptr [RAX + RAX*0x1]\nCDQE\nIMUL RAX,RAX,0x66666667\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x22\nADD EAX,EDX\nDEC ECX\nCMP R14D,ECX\nJNZ 0x0040e270\nJMP 0x0040ebd4\nMOV DL,0x1\nXOR R11D,R11D\nTEST SIL,SIL\nJZ 0x0040e2a2\nMOV R12D,0x0\nJZ 0x0040e2a6\nMOV DL,0x1\nMOV AL,0x70\nJMP 0x0040ec1f\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX]\nMOV EDX,0x2\nJMP 0x0040ebd7\nMOV EBP,0x417b9a\nJMP 0x0040e9f0\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RCX + 0x1c]\nADD EAX,0x7\nSUB EAX,dword ptr [RCX + 0x18]\nCDQE\nJMP 0x0040e35c\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RCX + 0x18]\nMOV ECX,dword ptr [RCX + 0x1c]\nLEA EDX,[RAX + 0x6]\nMOVSXD RDX,EDX\nIMUL RSI,RDX,-0x6db6db6d\nSHR RSI,0x20\nLEA EAX,[RSI + RAX*0x1 + 0x6]\nMOV ESI,EAX\nSHR ESI,0x1f\nSAR EAX,0x2\nADD EAX,ESI\nLEA ESI,[RAX*0x8]\nSUB ESI,EAX\nSUB EDX,ESI\nADD ECX,0x7\nSUB ECX,EDX\nMOVSXD RAX,ECX\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD EAX,ECX\nMOV ECX,EAX\nSHR ECX,0x1f\nSAR EAX,0x2\nADD EAX,ECX\nMOV EDX,0x2\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x0040e85e\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nCMP R10D,0x45\nJZ 0x0040eb31\nCMP R10D,0x4f\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e021\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x14]\nCMP ESI,0xfffff894\nSETL AL\nADD ESI,0x76c\nXOR R12D,R12D\nMOV R11D,0x4\nMOV R10B,AL\nXOR ECX,ECX\nJMP 0x0040ecf9\nMOV dword ptr [RSP + 0x18],ESI\nMOV dword ptr [RSP + 0x14],R12D\nMOV RDI,qword ptr [RSP + 0x78]\nMOV R15,R9\nCALL 0x00402290\nMOV RDI,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R12,RAX\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP R12,RAX\nMOV RBP,R12\nCMOVC RBP,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x0040f29e\nTEST RDI,RDI\nJZ 0x0040e9a7\nCMP R12,RAX\nJNC 0x0040eb3d\nMOVSXD R14,R14D\nSUB R14,R12\nCMP R13D,0x30\nJNZ 0x0040f0c5\nMOV ESI,0x30\nJMP 0x0040f0ca\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040eb11\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x0040e862\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0xc]\nMOV EDX,0x2\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x45\nJNZ 0x0040e866\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x1c]\nCMP EAX,-0x1\nSETL DIL\nINC EAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x3\nJMP 0x0040e924\nXOR R11D,R11D\nCMP R10D,0x45\nJNZ 0x0040e870\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x45\nMOV EAX,dword ptr [RSP + 0x74]\nJNZ 0x0040e878\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x10]\nCMP EAX,-0x1\nSETL DIL\nINC EAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x2\nJMP 0x0040e924\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040e9a7\nCMP EAX,0x2\nJC 0x0040eb58\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x0040f11f\nMOV ESI,0x30\nJMP 0x0040f124\nMOV dword ptr [RSP + 0x14],R12D\nMOV R15,R9\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX + 0x30]\nMOV qword ptr [0xe0 + RSP],RAX\nMOVUPS XMM0,xmmword ptr [RCX]\nMOVUPS XMM1,xmmword ptr [RCX + 0x10]\nMOVUPS XMM2,xmmword ptr [RCX + 0x20]\nMOVAPS xmmword ptr [0xd0 + RSP],XMM2\nMOVAPS xmmword ptr [0xc0 + RSP],XMM1\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nLEA RSI,[0xb0 + RSP]\nMOV RDI,qword ptr [0x80 + RSP]\nCALL 0x004108e0\nMOV R8,RAX\nSHR RAX,0x3f\nMOV R10,RAX\nMOV RSI,R8\nLEA RBP,[0xa7 + RSP]\nNOP\nMOV RDX,0x6666666666666667\nMOV RAX,RSI\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA EDI,[RDI + RDI*0x4]\nMOV ECX,ESI\nSUB ECX,EDI\nADD RDX,RAX\nMOV EAX,ECX\nNEG EAX\nTEST R8,R8\nCMOVNS EAX,ECX\nADD EAX,0x30\nMOV byte ptr [RBP + -0x1],AL\nDEC RBP\nADD RSI,0x9\nCMP RSI,0x12\nMOV RSI,RDX\nJA 0x0040e610\nMOV R11D,0x1\nXOR R12D,R12D\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nMOV RDI,qword ptr [RSP + 0x38]\nMOV ECX,dword ptr [RSP + 0x2c]\nJMP 0x0040ed4f\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040e9a7\nCMP EAX,0x2\nJC 0x0040eb67\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x0040f150\nMOV ESI,0x30\nJMP 0x0040f155\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ECX,dword ptr [RAX + 0x18]\nLEA EAX,[RCX + 0x6]\nCDQE\nIMUL RDX,RAX,-0x6db6db6d\nSHR RDX,0x20\nLEA ECX,[RDX + RCX*0x1 + 0x6]\nMOV EDX,ECX\nSHR EDX,0x1f\nSAR ECX,0x2\nADD ECX,EDX\nLEA EDX,[RCX*0x8]\nSUB EDX,ECX\nSUB EAX,EDX\nINC EAX\nMOV EDX,0x1\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x0040e030\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x18]\nMOV EDX,0x1\nJMP 0x0040ebd7\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x0040e8a6\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x0040e030\nCMP R10D,0x45\nJNZ 0x0040e8af\nXOR EDX,EDX\nMOV AL,0x79\nXOR R11D,R11D\nJMP 0x0040ec1f\nMOV EAX,EDI\nJMP 0x0040e8a8\nDEC R12D\nMOV EDI,0x16d\nTEST R12B,0x3\nJNZ 0x0040e7be\nMOVSXD RAX,R12D\nIMUL RAX,RAX,0x51eb851f\nMOV RCX,RAX\nSAR RCX,0x25\nMOV RDX,RAX\nSHR RDX,0x3f\nADD ECX,EDX\nIMUL ECX,ECX,0x64\nSAR RAX,0x27\nADD EAX,EDX\nIMUL EAX,EAX,0x190\nXOR EDX,EDX\nCMP R12D,EAX\nSETZ DL\nADD EDX,0x16d\nCMP R12D,ECX\nMOV EDI,0x16e\nCMOVZ EDI,EDX\nADD EDI,R15D\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x18]\nCALL 0x0040f340\nMOV EBP,EAX\nMOV ECX,0xffffffff\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R10D,dword ptr [RSP + 0x38]\nMOVSX EAX,byte ptr [RBX]\nCMP EAX,0x47\nJZ 0x0040e8fd\nCMP EAX,0x67\nJNZ 0x0040e934\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RBP,dword ptr [RAX + 0x14]\nIMUL RAX,RBP,0x51eb851f\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x25\nADD EAX,EDX\nIMUL EAX,EAX,0x64\nMOV EDX,EBP\nSUB EDX,EAX\nADD EDX,ECX\nMOVSXD RAX,EDX\nIMUL RDX,RAX,0x51eb851f\nMOV RDI,RDX\nSHR RDI,0x3f\nSAR RDX,0x25\nADD EDX,EDI\nIMUL EDX,EDX,0x64\nSUB EAX,EDX\nMOV EDX,0x2\nJNS 0x0040ebd7\nMOV EDI,0xfffff894\nSUB EDI,ECX\nMOV ECX,EAX\nNEG ECX\nADD EAX,0x64\nCMP EBP,EDI\nCMOVL EAX,ECX\nJMP 0x0040ebd7\nMOV AL,0x58\nJMP 0x0040e8a8\nMOV AL,0x63\nJMP 0x0040e8a8\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0xc]\nJMP 0x0040e878\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x8]\nMOV EDX,0x2\nCMP R13D,0x2d\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nJZ 0x0040ebd7\nCMP R13D,0x30\nJZ 0x0040ebd7\nMOV R13D,0x5f\nJMP 0x0040ebd7\nMOV AL,0x78\nXOR EDX,EDX\nJMP 0x0040ec1f\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RCX,dword ptr [RAX + 0x14]\nIMUL RAX,RCX,0x51eb851f\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x25\nADD EAX,EDX\nIMUL EDX,EAX,0x64\nMOV EAX,ECX\nSUB EAX,EDX\nMOV EDX,0x2\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nJNS 0x0040ebd7\nMOV ESI,EAX\nNEG ESI\nADD EAX,0x64\nCMP ECX,0xfffff894\nCMOVL EAX,ESI\nJMP 0x0040ebd7\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x14]\nMOV EDX,0xfffff894\nSUB EDX,ECX\nCMP EAX,EDX\nSETL DIL\nLEA EAX,[0x76c + RCX + RAX*0x1]\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x4\nMOV dword ptr [RSP + 0x2c],0x0\nXOR R12D,R12D\nJMP 0x0040ebef\nMOVSXD RAX,EBP\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD EAX,ECX\nMOV ECX,EAX\nSAR ECX,0x2\nSHR EAX,0x1f\nLEA EAX,[RCX + RAX*0x1 + 0x1]\nMOV EDX,0x2\nJMP 0x0040ebd7\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040e9a7\nCMP EAX,0x2\nJC 0x0040dcc9\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x0040dcab\nMOV ESI,0x30\nJMP 0x0040dcb0\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,RBP\nJMP 0x0040f27d\nTEST SIL,SIL\nJZ 0x0040e9c4\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x41\nXOR R11D,R11D\nJMP 0x0040ec1f\nTEST SIL,SIL\nJZ 0x0040e9d8\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x42\nXOR R11D,R11D\nJMP 0x0040ec1f\nMOV EBP,0x417b88\nJMP 0x0040e9f0\nMOV EBP,0x417b91\nXOR EDI,EDI\nMOV dword ptr [RSP + 0x14],R12D\nTEST R12B,R12B\nSETNZ DIL\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV dword ptr [RSP],EAX\nXOR R15D,R15D\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV RCX,RBP\nMOV R8,qword ptr [RSP + 0x30]\nMOV R12,R9\nMOV R9,qword ptr [0x80 + RSP]\nCALL 0x0040daf0\nMOV R9,R12\nMOV R8,qword ptr [RSP + 0x20]\nTEST R14D,R14D\nCMOVNS R15D,R14D\nCMP RAX,R15\nMOV RCX,RAX\nCMOVC RCX,R15\nMOV R12,qword ptr [RSP + 0x48]\nSUB R12,R8\nCMP RCX,R12\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040ea7d\nCMP RAX,R15\nMOV qword ptr [RSP + 0x18],RAX\nMOV qword ptr [RSP + 0x50],RCX\nJNC 0x0040ea92\nMOVSXD RCX,R14D\nSUB RCX,RAX\nCMP R13D,0x30\nJNZ 0x0040ea9e\nMOV ESI,0x30\nJMP 0x0040eaa3\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,RCX\nJMP 0x0040f27d\nMOV R15,0x100000000\nJMP 0x0040eac4\nMOV ESI,0x20\nMOV RDI,R9\nMOV R13,RCX\nMOV RDX,RCX\nMOV R14,R9\nCALL 0x00402350\nMOV R15,0x100000000\nADD R14,R13\nMOV R9,R14\nXOR EDI,EDI\nCMP byte ptr [RSP + 0x14],0x0\nSETNZ DIL\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV dword ptr [RSP],EAX\nMOV RSI,R9\nMOV RDX,R12\nMOV RCX,RBP\nMOV R8,qword ptr [RSP + 0x30]\nMOV RBP,R9\nMOV R9,qword ptr [0x80 + RSP]\nCALL 0x0040daf0\nMOV R9,qword ptr [RSP + 0x18]\nADD R9,RBP\nMOV R8,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x50]\nADD R8,RCX\nJMP 0x0040f27d\nTEST SIL,SIL\nJZ 0x0040eb19\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x61\nXOR R11D,R11D\nJMP 0x0040ec1f\nXOR EDX,EDX\nMOV AL,0x43\nXOR R11D,R11D\nJMP 0x0040ec1f\nXOR EDX,EDX\nMOV AL,0x59\nXOR R11D,R11D\nJMP 0x0040ec1f\nMOV R15,0x100000000\nMOV EAX,dword ptr [RSP + 0x18]\nTEST AL,AL\nJNZ 0x0040f0ea\nJMP 0x0040f0ff\nMOV R15,0x100000000\nJMP 0x0040f147\nMOV R15,0x100000000\nJMP 0x0040f178\nXOR R11D,R11D\nMOV EAX,0xe\nJMP 0x0040dc7d\nTEST ECX,ECX\nJZ 0x0040dc4e\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x2710\nIMUL EAX,R11D,0x64\nADD EBP,ECX\nADD EBP,EAX\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x9\nMOV dword ptr [RSP + 0x2c],0x14\nJMP 0x0040dc78\nMOV R14D,0x9\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV EDX,0x9\nJMP 0x0040ebd7\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV EDX,R14D\nMOV EDI,EAX\nSHR EDI,0x1f\nMOV dword ptr [RSP + 0x2c],0x0\nXOR R12D,R12D\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,EDX\nMOV EAX,EDI\nAND AL,0x1\nMOV ECX,R10D\nCMP R10D,0x4f\nMOV R10,RDI\nJNZ 0x0040ecf0\nTEST AL,AL\nJNZ 0x0040ecf0\nMOV qword ptr [RSP + 0x58],R10\nXOR EDX,EDX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV R10D,ECX\nMOV R12D,dword ptr [RSP + 0x14]\nMOV qword ptr [RSP + 0x50],RDX\nMOV dword ptr [RSP + 0x18],R11D\nMOV R15,R9\nMOV word ptr [RSP + 0x63],0x2520\nTEST R10D,R10D\nLEA RCX,[RSP + 0x65]\nJZ 0x0040ec47\nMOV byte ptr [RSP + 0x65],R10B\nLEA RCX,[RSP + 0x66]\nMOV byte ptr [RCX],AL\nMOV byte ptr [RCX + 0x1],0x0\nLEA RDI,[0xb0 + RSP]\nLEA RDX,[RSP + 0x63]\nMOV ESI,0x400\nMOV RCX,qword ptr [RSP + 0x30]\nCALL 0x004025d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040ee11\nMOV dword ptr [RSP + 0x14],R12D\nDEC RBP\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP RBP,RAX\nMOV R12,RBP\nCMOVC R12,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nMOV R8,qword ptr [RSP + 0x20]\nSUB RCX,R8\nCMP R12,RCX\nMOV ECX,dword ptr [RSP + 0x18]\nJNC 0x0040f29e\nMOV RDI,R15\nTEST RDI,RDI\nJZ 0x0040eea8\nCMP RBP,RAX\nSETNC AL\nTEST ECX,ECX\nMOV R15,0x100000000\nJNZ 0x0040ef54\nTEST AL,AL\nJNZ 0x0040ef54\nMOVSXD R14,R14D\nSUB R14,RBP\nCMP R13D,0x30\nJNZ 0x0040ef34\nMOV ESI,0x30\nJMP 0x0040ef39\nMOV RSI,qword ptr [RSP + 0x38]\nMOV ECX,dword ptr [RSP + 0x2c]\nMOV EDX,ESI\nNEG EDX\nTEST AL,AL\nCMOVZ EDX,ESI\nLEA RBP,[0xa7 + RSP]\nNOP word ptr [RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x0040ed1c\nMOV byte ptr [RBP + -0x1],0x3a\nDEC RBP\nSAR ECX,1\nMOV EAX,EDX\nMOV EDI,0xcccccccd\nIMUL RDI,RAX\nSHR RDI,0x23\nLEA EAX,[RDI + RDI*0x1]\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,EDX\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBP + -0x1],SIL\nDEC RBP\nCMP EDX,0x9\nMOV EDX,EDI\nJA 0x0040ed10\nTEST ECX,ECX\nMOV EDX,EDI\nJNZ 0x0040ed10\nCMP R11D,R14D\nCMOVL R11D,R14D\nTEST R12B,R12B\nJZ 0x0040ed5e\nMOV R12B,0x2b\nTEST R10B,0x1\nMOV R15B,0x2d\nJNZ 0x0040ed6a\nMOV R15D,R12D\nCMP R13D,0x2d\nMOV qword ptr [RSP + 0x58],R10\nMOV qword ptr [RSP + 0x38],RDI\nMOV dword ptr [RSP + 0x2c],ECX\nJNZ 0x0040ee1e\nTEST R15B,R15B\nJZ 0x0040f1b3\nMOV R12D,R15D\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV R15D,0x1\nCMOVA R15D,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040f026\nCMP EAX,0x2\nJC 0x0040f1aa\nTEST R11D,R11D\nJNZ 0x0040f1aa\nMOVSXD RAX,R14D\nMOV qword ptr [RSP + 0x68],RAX\nLEA RDX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x18],R11D\nMOV ESI,0x20\nMOV RDI,R9\nMOV qword ptr [RSP + 0x40],R9\nCALL 0x00402350\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x68]\nLEA R9,[R9 + RAX*0x1 + -0x1]\nJMP 0x0040f1aa\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nJMP 0x0040f273\nMOV dword ptr [RSP + 0x18],R11D\nMOVSXD RSI,R11D\nMOV RAX,RBP\nLEA RDX,[0xa7 + RSP]\nSUB RAX,RDX\nMOV EDX,R15D\nNEG DL\nSBB R12,R12\nADD R12,RAX\nADD R12,RSI\nTEST R12D,R12D\nJLE 0x0040eebd\nMOV RAX,qword ptr [RSP + 0x48]\nSUB RAX,R8\nCMP R13D,0x5f\nMOV byte ptr [RSP + 0x50],R15B\nJNZ 0x0040efb4\nMOVSXD R15,R12D\nCMP R15,RAX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x0040f29e\nXOR ECX,ECX\nTEST R9,R9\nJZ 0x0040f038\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R15\nMOV qword ptr [RSP + 0x40],R9\nCALL 0x00402350\nXOR ECX,ECX\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R15\nJMP 0x0040f03b\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,R12\nJMP 0x0040f27d\nTEST R15B,R15B\nJZ 0x0040f02e\nMOV R12D,R15D\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV R15D,0x1\nCMOVA R15D,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040f0ad\nCMP EAX,0x2\nJC 0x0040f1aa\nTEST R11D,R11D\nJNZ 0x0040f1aa\nMOVSXD RAX,R14D\nDEC RAX\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x40],R9\nMOV qword ptr [RSP + 0x68],RAX\nJNZ 0x0040f181\nMOV ESI,0x30\nJMP 0x0040f186\nMOV ESI,0x20\nMOV RDX,R14\nMOV R15,RDI\nCALL 0x00402350\nADD R15,R14\nMOV RDI,R15\nMOV R15,0x100000000\nMOV RAX,qword ptr [RSP + 0x50]\nTEST AL,0x1\nJNZ 0x0040ef79\nTEST byte ptr [RSP + 0x14],0x1\nJNZ 0x0040ef8e\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x00402440\nJMP 0x0040efa1\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x0040f2c0\nJMP 0x0040efa1\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x0040f300\nMOV R9,R14\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,RBP\nADD R8,R12\nJMP 0x0040f27d\nCMP RSI,RAX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x0040f29e\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x0040dba8\nXOR ECX,ECX\nTEST R14D,R14D\nCMOVNS ECX,R14D\nCMP ECX,0x1\nMOV R15D,0x1\nCMOVA R15D,ECX\nCMP R15,RAX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040f0b5\nCMP ECX,0x2\nJC 0x0040db9b\nTEST R11D,R11D\nJNZ 0x0040db9b\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x40],R9\nJNZ 0x0040db79\nMOV ESI,0x30\nJMP 0x0040db7e\nXOR R9D,R9D\nJMP 0x0040f1b0\nMOV R11D,dword ptr [RSP + 0x18]\nJMP 0x0040f1b3\nXOR R9D,R9D\nADD R8,R15\nSUB R14D,R12D\nCMOVG ECX,R14D\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x0040f0a5\nCMP ECX,0x1\nMOV R15D,0x1\nCMOVA R15D,ECX\nMOV RAX,qword ptr [RSP + 0x48]\nSUB RAX,R8\nCMP R15,RAX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040f0bd\nTEST R11D,R11D\nJNZ 0x0040dc16\nCMP ECX,0x2\nJC 0x0040dc16\nMOV R14D,ECX\nDEC R14\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x20],R8\nMOV qword ptr [RSP + 0x40],RCX\nJNZ 0x0040dbee\nMOV ESI,0x30\nJMP 0x0040dbf3\nMOV R14D,ECX\nJMP 0x0040f1b3\nXOR R9D,R9D\nJMP 0x0040f1b0\nXOR R9D,R9D\nJMP 0x0040dba5\nXOR R9D,R9D\nJMP 0x0040dc20\nMOV ESI,0x20\nMOV RDX,R14\nCALL 0x00402350\nMOV RDI,R15\nMOV R15,0x100000000\nMOV EAX,dword ptr [RSP + 0x18]\nADD RDI,R14\nTEST AL,AL\nJZ 0x0040f0ff\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x0040f2c0\nJMP 0x0040dc3b\nCMP byte ptr [RSP + 0x14],0x0\nJZ 0x0040dc2b\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x0040f300\nJMP 0x0040dc3b\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00402350\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R15,0x100000000\nADD R9,R14\nMOV byte ptr [R9],0xa\nJMP 0x0040dcd8\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00402350\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R15,0x100000000\nADD R9,R14\nMOV byte ptr [R9],0x9\nJMP 0x0040dcd8\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x00402350\nMOV RAX,qword ptr [RSP + 0x68]\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,RAX\nMOV byte ptr [R9],R12B\nINC R9\nADD R8,R15\nLEA R12,[0xa7 + RSP]\nSUB R12,RBP\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP R12,RAX\nMOV R15,R12\nCMOVC R15,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x0040f29e\nTEST R9,R9\nJZ 0x0040f20e\nCMP R12,RAX\nSETNC AL\nTEST R11D,R11D\nJNZ 0x0040f231\nTEST AL,AL\nJNZ 0x0040f231\nMOVSXD R14,R14D\nSUB R14,R12\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x20],R8\nJNZ 0x0040f213\nMOV ESI,0x30\nJMP 0x0040f218\nXOR R9D,R9D\nJMP 0x0040f270\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R13,R9\nCALL 0x00402350\nMOV R9,R13\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nCMP byte ptr [RSP + 0x14],0x0\nJZ 0x0040f24e\nMOV RDI,R9\nMOV RSI,RBP\nMOV RDX,R12\nMOV R14,R8\nMOV RBP,R9\nCALL 0x0040f300\nJMP 0x0040f262\nMOV RDI,R9\nMOV RSI,RBP\nMOV RDX,R12\nMOV R14,R8\nMOV RBP,R9\nCALL 0x00402440\nMOV R9,RBP\nMOV R8,R14\nADD R9,R12\nNOP dword ptr [RAX + RAX*0x1]\nADD R8,R15\nMOV R15,0x100000000\nCMP byte ptr [RBX + 0x1],0x0\nLEA RBX,[RBX + 0x1]\nJNZ 0x0040dd00\nCMP qword ptr [RSP + 0x48],0x0\nJZ 0x0040f2a1\nTEST R9,R9\nJZ 0x0040f2a1\nMOV byte ptr [R9],0x0\nJMP 0x0040f2a1\nXOR R8D,R8D\nMOV RAX,R8\nADD RSP,0x4b8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p298
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 04 00 00\n4c 89 8c 24 80 00 00 00\n48 89 cb\n48 89 54 24 48\n49 89 f1\n89 bc 24 8c 00 00 00\n41 8b 40 08\n4c 89 44 24 30\n49 8b 48 30\n48 85 c9\nba e1 7c 41 00\n48 0f 45 d1\n48 89 54 24 78\n8d 48 f4\n85 c0\nba 0c 00 00 00\n0f 45 d0\n83 f8 0c\n0f 4f d1\n89 54 24 74\n45 31 c0\n80 3b 00\n0f 84 2f 17 00 00\n49 bf 00 00 00 00 01 00 00 00\n48 89 44 24 38\n48 89 44 24 58\n89 44 24 2c\ne9 87 01 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\ne8 c7 47 ff ff\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n4d 01 f1\n8a 44 24 50\n41 88 01\n49 ff c1\n4d 01 f8\n45 31 f6\n4d 85 c9\n4d 63 e4\n74 30\nbe 30 00 00 00\n4c 89 cf\n4c 89 e2\n4c 89 44 24 20\n4d 89 cf\ne8 85 47 ff ff\n44 8b 5c 24 18\n4d 89 f9\n4c 8b 44 24 20\n4d 01 e1\n4d 01 e0\ne9 d0 15 00 00\n45 31 c9\n4d 01 e0\ne9 c5 15 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cc\ne8 4f 47 ff ff\n48 8b 4c 24 40\n44 8b 5c 24 18\n4d 89 e1\n4c 8b 44 24 20\n4d 01 f1\n8a 44 24 50\n41 88 01\n49 ff c1\n4d 01 f8\n41 89 ce\ne9 88 15 00 00\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 05 48 ff ff\n4d 89 f1\n4c 8b 44 24 20\n4d 01 e1\n49 01 e8\ne9 2f 16 00 00\n45 85 db\n0f 84 8c 00 00 00\nc1 ee 1f\n48 89 74 24 58\n6b ed 64\n44 01 dd\n48 89 6c 24 38\n41 bb 06 00 00 00\nc7 44 24 2c 04 00 00 00\nb8 20 00 00 00\n89 c2\n80 e2 3f\n80 fa 0e\n44 89 64 24 14\n0f 84 a0 03 00 00\n48 89 7c 24 18\n41 b4 01\n80 fa 20\n48 8b 7c 24 58\n0f 84 49 0f 00 00\ne9 4f 02 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 92 46 ff ff\n4d 01 f7\n4c 8b 44 24 20\n4d 89 f9\n49 bf 00 00 00 00 01 00 00 00\n8a 03\n41 88 01\n49 ff c1\n49 01 e8\ne9 9a 15 00 00\n48 89 6c 24 38\nc1 ee 1f\n48 89 74 24 58\n41 bb 03 00 00 00\ne9 14 03 00 00\n8a 0b\n80 f9 25\n75 69\n31 f6\n8b 84 24 8c 00 00 00\n41 88 c4\n45 31 ed\n48 ff c3\neb 0b\n48 ff c3\n41 89 c5\n0f be 03\n83 f8 2f\n7e 22\n83 f8 30\n74 ed\n83 f8 5f\n74 e8\n83 f8 5e\n75 63\n41 b4 01\n48 ff c3\neb e1\n83 f8 2d\n74 cb\n83 f8 23\n75 46\n40 b6 01\n48 ff c3\neb c4\n48 8b 54 24 48\n4c 29 c2\nb8 01 00 00 00\n48 83 fa 02\n0f 82 69 01 00 00\n4d 85 c9\n0f 84 58 01 00 00\n41 88 09\n49 ff c1\ne9 50 01 00 00\n83 c0 d0\n41 be ff ff ff ff\n83 f8 09\n77 3a\n31 c0\n41 be ff ff ff 7f\n3d cc cc cc 0c\n7f 19\n0f be 0b\n83 c1 d0\n3d cc cc cc 0c\n75 05\n83 f9 07\n7f 07\n8d 04 80\n44 8d 34 41\n0f be 43 01\n48 ff c3\n83 c0 d0\n83 f8 0a\n44 89 f0\n72 c8\n44 0f be 13\n41 83 fa 4f\n74 06\n41 83 fa 45\n75 05\n48 ff c3\neb 03\n45 31 d2\n0f be 3b\n83 ff 7a\n4c 89 44 24 20\n0f 87 0b 02 00 00\n31 d2\nb0 72\nbd 11 66 41 00\n45 31 db\nff 24 fd 90 77 41 00\n44 89 64 24 14\n45 31 db\n41 83 fa 45\n0f 84 fa 01 00 00\n48 89 7c 24 18\n44 89 54 24 38\n4c 89 4c 24 40\n48 8b 54 24 30\n8b 42 14\n8b 72 18\n89 c1\nc1 f9 1f\n81 e1 90 01 00 00\n44 8d 64 08 9c\n44 8b 7a 1c\n44 89 ff\ne8 d4 14 00 00\n89 c5\n85 ed\n0f 88 f8 08 00 00\nb8 6d 01 00 00\n41 f6 c4 03\n75 42\n49 63 c4\n48 69 c0 1f 85 eb 51\n48 89 c1\n48 c1 f9 25\n48 89 c2\n48 c1 ea 3f\n01 d1\n6b c9 64\n48 c1 f8 27\n01 d0\n69 c0 90 01 00 00\n31 d2\n41 39 c4\n0f 94 c2\n81 c2 6d 01 00 00\n41 39 cc\nb8 6e 01 00 00\n0f 44 c2\n41 29 c7\n48 8b 44 24 30\n8b 70 18\n44 89 ff\ne8 6a 14 00 00\n89 c1\nc1 e9 1f\n83 f1 01\n85 c0\n0f 49 e8\ne9 ed 08 00 00\n45 31 c9\n49 ff c0\n31 c0\n85 c0\nb9 04 00 00 00\n0f 44 c1\n83 c8 04\n83 f8 04\n0f 84 77 13 00 00\ne9 93 13 00 00\n40 84 f6\n74 03\n41 b4 01\n45 31 db\n45 85 d2\n0f 84 48 08 00 00\n44 89 64 24 14\ne9 07 01 00 00\n44 89 64 24 14\n48 ff cb\ne9 eb 00 00 00\n45 31 db\n45 85 d2\n0f 84 18 0a 00 00\n44 89 64 24 14\ne9 e4 00 00 00\nba 01 00 00 00\neb 10\n48 ff c2\n0f b6 04 13\n3c 3a\n74 f5\n3c 7a\n0f 85 a9 00 00 00\n48 01 d3\n48 8b 44 24 30\n83 78 20 00\n0f 88 f8 12 00 00\n48 83 fa 03\n0f 87 e7 0b 00 00\n48 8b 44 24 30\n48 63 70 28\n48 69 c6 89 88 88 88\n48 c1 e8 20\n01 f0\n89 c1\nc1 e9 1f\nc1 f8 05\n01 c8\n48 69 ee c5 b3 a2 91\n48 c1 ed 20\n01 f5\n89 e9\nc1 e9 1f\nc1 fd 0b\n01 cd\n4c 63 d8\n49 69 cb 89 88 88 88\n48 c1 e9 20\n44 01 d9\n89 c8\nc1 e8 1f\nc1 f9 05\n01 c1\n6b c9 3c\n41 6b c3 3c\n41 29 cb\n89 f1\n29 c1\nff 24 d5 68 7b 41 00\nc1 ee 1f\n48 89 74 24 58\n6b ed 64\n44 01 dd\n48 89 6c 24 38\n41 bb 05 00 00 00\nc7 44 24 2c 00 00 00 00\ne9 5c fc ff ff\n44 89 64 24 14\n45 31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8d 63 01\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\n4c 01 fd\n41 80 7c 24 ff 25\n4d 8d 64 24 ff\n75 f0\n48 c1 fd 20\n45 85 f6\nb8 00 00 00 00\n41 0f 49 c6\n48 39 c5\n49 89 ef\n4c 0f 42 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 23 12 00 00\n4d 85 c9\n74 22\n48 39 c5\n0f 93 c0\n45 85 db\n75 38\n84 c0\n75 34\n4d 63 f6\n49 29 ee\n41 83 fd 30\n75 0f\nbe 30 00 00 00\neb 0d\n45 31 c9\ne9 c6 11 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cd\ne8 93 42 ff ff\n4d 89 e9\n4d 01 f1\nf6 44 24 14 01\n75 13\n4c 89 cf\n4c 89 e6\n48 89 ea\n4d 89 ce\ne8 65 43 ff ff\neb 11\n4c 89 cf\n4c 89 e6\n48 89 ea\n4d 89 ce\ne8 12 12 00 00\n49 01 ee\n4c 8b 44 24 20\n4d 89 f1\ne9 72 11 00 00\n45 31 db\n45 85 d2\n0f 84 b2 08 00 00\n44 89 64 24 14\ne9 1c ff ff ff\n45 31 db\n45 85 d2\n0f 84 b0 08 00 00\n44 89 64 24 14\ne9 06 ff ff ff\n41 83 fa 45\n0f 84 f1 09 00 00\n41 83 fa 4f\n44 89 64 24 14\n0f 84 de fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n48 63 40 14\n48 3d 94 f8 ff ff\n40 0f 9c c7\n0f 9f c1\n48 69 f0 1f 85 eb 51\n48 89 f2\n48 c1 ea 3f\n48 c1 fe 25\n01 d6\n6b d6 64\n39 d0\n0f 98 c0\n20 c8\n0f b6 c0\n29 c6\n83 c6 13\n48 89 74 24 38\ne9 be 03 00 00\n45 31 db\n45 85 d2\n0f 84 4a 08 00 00\n44 89 64 24 14\ne9 8c fe ff ff\n45 31 db\n45 85 d2\n0f 84 3b 08 00 00\n44 89 64 24 14\ne9 76 fe ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 64 fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 08\nba 02 00 00 00\ne9 f4 09 00 00\nba 02 00 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 36 fe ff ff\n48 89 7c 24 18\n8b 44 24 74\ne9 cf 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 16 fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 04\nba 02 00 00 00\ne9 a6 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 ed fd ff ff\n41 83 fe ff\n48 89 7c 24 18\n0f 84 67 09 00 00\n41 83 fe 08\n0f 8f 71 09 00 00\nb9 09 00 00 00\n8b 84 24 f0 04 00 00\n0f 1f 84 00 00 00 00 00\n48 98\n48 69 c0 67 66 66 66\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 22\n01 d0\nff c9\n41 39 ce\n75 e3\ne9 42 09 00 00\nb2 01\n45 31 db\n40 84 f6\n74 06\n41 bc 00 00 00 00\n74 02\nb2 01\nb0 70\ne9 72 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 71 fd ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 00\nba 02 00 00 00\ne9 02 09 00 00\nbd 9a 7b 41 00\ne9 11 07 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 3f fd ff ff\n48 89 7c 24 18\n48 8b 4c 24 30\n8b 41 1c\n83 c0 07\n2b 41 18\n48 98\neb 54\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 16 fd ff ff\n48 89 7c 24 18\n48 8b 4c 24 30\n8b 41 18\n8b 49 1c\n8d 50 06\n48 63 d2\n48 69 f2 93 24 49 92\n48 c1 ee 20\n8d 44 06 06\n89 c6\nc1 ee 1f\nc1 f8 02\n01 f0\n8d 34 c5 00 00 00 00\n29 c6\n29 f2\n83 c1 07\n29 d1\n48 63 c1\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c8\n89 c1\nc1 e9 1f\nc1 f8 02\n01 c8\nba 02 00 00 00\ne9 5a 08 00 00\n45 31 db\n41 83 fa 4f\n0f 85 d4 04 00 00\n44 89 64 24 14\ne9 9c fc ff ff\n41 83 fa 45\n0f 84 93 07 00 00\n41 83 fa 4f\n44 89 64 24 14\n0f 84 74 fc ff ff\n48 8b 44 24 30\n8b 70 14\n81 fe 94 f8 ff ff\n0f 9c c0\n81 c6 6c 07 00 00\n45 31 e4\n41 bb 04 00 00 00\n41 88 c2\n31 c9\ne9 22 09 00 00\n89 74 24 18\n44 89 64 24 14\n48 8b 7c 24 78\n4d 89 cf\ne8 a3 3e ff ff\n4c 89 ff\n4c 8b 44 24 20\n49 89 c4\n31 c0\n45 85 f6\n41 0f 49 c6\n49 39 c4\n4c 89 e5\n48 0f 42 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 82 0e 00 00\n48 85 ff\n0f 84 82 05 00 00\n49 39 c4\n0f 83 0f 07 00 00\n4d 63 f6\n4d 29 e6\n41 83 fd 30\n0f 85 87 0c 00 00\nbe 30 00 00 00\ne9 82 0c 00 00\n45 31 db\n45 85 d2\n0f 84 bd 06 00 00\n44 89 64 24 14\ne9 d2 fb ff ff\n45 31 db\n41 83 fa 4f\n0f 85 f7 03 00 00\n44 89 64 24 14\ne9 bb fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 a9 fb ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 0c\nba 02 00 00 00\ne9 39 07 00 00\n45 31 db\n41 83 fa 45\n0f 85 bb 03 00 00\n44 89 64 24 14\ne9 7b fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 69 fb ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 1c\n83 f8 ff\n40 0f 9c c7\nff c0\n48 89 44 24 38\n41 bb 03 00 00 00\ne9 37 04 00 00\n45 31 db\n41 83 fa 45\n0f 85 76 03 00 00\n44 89 64 24 14\ne9 2c fb ff ff\n45 31 db\n41 83 fa 45\n8b 44 24 74\n0f 85 63 03 00 00\n44 89 64 24 14\ne9 11 fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 ff fa ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 10\n83 f8 ff\n40 0f 9c c7\nff c0\n48 89 44 24 38\n41 bb 02 00 00 00\ne9 cd 03 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 22 0d 00 00\n4d 85 c9\n0f 84 22 04 00 00\n83 f8 02\n0f 82 ca 05 00 00\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 81 0b 00 00\nbe 30 00 00 00\ne9 7c 0b 00 00\n44 89 64 24 14\n4d 89 cf\n48 8b 4c 24 30\n48 8b 41 30\n48 89 84 24 e0 00 00 00\n0f 10 01\n0f 10 49 10\n0f 10 51 20\n0f 29 94 24 d0 00 00 00\n0f 29 8c 24 c0 00 00 00\n0f 29 84 24 b0 00 00 00\n48 8d b4 24 b0 00 00 00\n48 8b bc 24 80 00 00 00\ne8 e7 22 00 00\n49 89 c0\n48 c1 e8 3f\n49 89 c2\n4c 89 c6\n48 8d ac 24 a7 00 00 00\n66 90\n48 ba 67 66 66 66 66 66 66 66\n48 89 f0\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n8d 3c bf\n89 f1\n29 f9\n48 01 c2\n89 c8\nf7 d8\n4d 85 c0\n0f 49 c1\n83 c0 30\n88 45 ff\n48 ff cd\n48 83 c6 09\n48 83 fe 12\n48 89 d6\n77 b6\n41 bb 01 00 00 00\n45 31 e4\n4c 8b 44 24 20\n4d 89 f9\n48 8b 7c 24 38\n8b 4c 24 2c\ne9 d6 06 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 00 0c 00 00\n4d 85 c9\n0f 84 00 03 00 00\n83 f8 02\n0f 82 b7 04 00 00\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 90 0a 00 00\nbe 30 00 00 00\ne9 8b 0a 00 00\n44 89 64 24 14\n48 89 7c 24 18\n48 8b 44 24 30\n8b 48 18\n8d 41 06\n48 98\n48 69 d0 93 24 49 92\n48 c1 ea 20\n8d 4c 0a 06\n89 ca\nc1 ea 1f\nc1 f9 02\n01 d1\n8d 14 cd 00 00 00 00\n29 ca\n29 d0\nff c0\nba 01 00 00 00\ne9 c6 04 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 0d f9 ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 18\nba 01 00 00 00\ne9 9d 04 00 00\n45 31 db\n41 83 fa 4f\n0f 85 5f 01 00 00\n44 89 64 24 14\ne9 df f8 ff ff\n41 83 fa 45\n0f 85 54 01 00 00\n31 d2\nb0 79\n45 31 db\ne9 b8 04 00 00\n89 f8\ne9 3a 01 00 00\n41 ff cc\nbf 6d 01 00 00\n41 f6 c4 03\n75 42\n49 63 c4\n48 69 c0 1f 85 eb 51\n48 89 c1\n48 c1 f9 25\n48 89 c2\n48 c1 ea 3f\n01 d1\n6b c9 64\n48 c1 f8 27\n01 d0\n69 c0 90 01 00 00\n31 d2\n41 39 c4\n0f 94 c2\n81 c2 6d 01 00 00\n41 39 cc\nbf 6e 01 00 00\n0f 44 fa\n44 01 ff\n48 8b 44 24 30\n8b 70 18\ne8 72 0b 00 00\n89 c5\nb9 ff ff ff ff\n4c 8b 44 24 20\n4c 8b 4c 24 40\n44 8b 54 24 38\n0f be 03\n83 f8 47\n0f 84 0d 01 00 00\n83 f8 67\n0f 85 3b 01 00 00\n48 8b 44 24 30\n48 63 68 14\n48 69 c5 1f 85 eb 51\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 25\n01 d0\n6b c0 64\n89 ea\n29 c2\n01 ca\n48 63 c2\n48 69 d0 1f 85 eb 51\n48 89 d7\n48 c1 ef 3f\n48 c1 fa 25\n01 fa\n6b d2 64\n29 d0\nba 02 00 00 00\n0f 89 91 03 00 00\nbf 94 f8 ff ff\n29 cf\n89 c1\nf7 d9\n83 c0 64\n39 fd\n0f 4c c1\ne9 79 03 00 00\nb0 58\neb 46\nb0 63\neb 42\n48 8b 44 24 30\n8b 40 0c\neb 08\n48 8b 44 24 30\n8b 40 08\nba 02 00 00 00\n41 83 fd 2d\n44 89 64 24 14\n48 89 7c 24 18\n0f 84 46 03 00 00\n41 83 fd 30\n0f 84 3c 03 00 00\n41 bd 5f 00 00 00\ne9 31 03 00 00\nb0 78\n31 d2\ne9 70 03 00 00\n48 8b 44 24 30\n48 63 48 14\n48 69 c1 1f 85 eb 51\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 25\n01 d0\n6b d0 64\n89 c8\n29 d0\nba 02 00 00 00\n44 89 64 24 14\n48 89 7c 24 18\n0f 89 ef 02 00 00\n89 c6\nf7 de\n83 c0 64\n81 f9 94 f8 ff ff\n0f 4c c6\ne9 da 02 00 00\n48 8b 44 24 30\n8b 40 14\nba 94 f8 ff ff\n29 ca\n39 d0\n40 0f 9c c7\n8d 84 01 6c 07 00 00\n48 89 44 24 38\n41 bb 04 00 00 00\nc7 44 24 2c 00 00 00 00\n45 31 e4\ne9 bb 02 00 00\n48 63 c5\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c8\n89 c1\nc1 f9 02\nc1 e8 1f\n8d 44 01 01\nba 02 00 00 00\ne9 7d 02 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 1f 09 00 00\n4d 85 c9\n74 23\n83 f8 02\n0f 82 3c f3 ff ff\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 0e f3 ff ff\nbe 30 00 00 00\ne9 09 f3 ff ff\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n49 01 e8\ne9 c1 08 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 41\n45 31 db\ne9 4f 02 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 42\n45 31 db\ne9 3b 02 00 00\nbd 88 7b 41 00\neb 05\nbd 91 7b 41 00\n31 ff\n44 89 64 24 14\n45 84 e4\n40 0f 95 c7\n8b 84 24 f0 04 00 00\n89 04 24\n45 31 ff\n31 f6\n48 c7 c2 ff ff ff ff\n48 89 e9\n4c 8b 44 24 30\n4d 89 cc\n4c 8b 8c 24 80 00 00 00\ne8 c4 f0 ff ff\n4d 89 e1\n4c 8b 44 24 20\n45 85 f6\n45 0f 49 fe\n4c 39 f8\n48 89 c1\n49 0f 42 cf\n4c 8b 64 24 48\n4d 29 c4\n4c 39 e1\n0f 83 48 08 00 00\n4d 85 c9\n74 22\n4c 39 f8\n48 89 44 24 18\n48 89 4c 24 50\n73 28\n49 63 ce\n48 29 c1\n41 83 fd 30\n75 28\nbe 30 00 00 00\neb 26\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n49 01 c8\ne9 eb 07 00 00\n49 bf 00 00 00 00 01 00 00 00\neb 26\nbe 20 00 00 00\n4c 89 cf\n49 89 cd\n48 89 ca\n4d 89 ce\ne8 9c 38 ff ff\n49 bf 00 00 00 00 01 00 00 00\n4d 01 ee\n4d 89 f1\n31 ff\n80 7c 24 14 00\n40 0f 95 c7\n8b 84 24 f0 04 00 00\n89 04 24\n4c 89 ce\n4c 89 e2\n48 89 e9\n4c 8b 44 24 30\n4c 89 cd\n4c 8b 8c 24 80 00 00 00\ne8 f9 ef ff ff\n4c 8b 4c 24 18\n49 01 e9\n4c 8b 44 24 20\n48 8b 4c 24 50\n49 01 c8\ne9 6c 07 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 61\n45 31 db\ne9 fa 00 00 00\n31 d2\nb0 43\n45 31 db\ne9 ee 00 00 00\n31 d2\nb0 59\n45 31 db\ne9 e2 00 00 00\n49 bf 00 00 00 00 01 00 00 00\n8b 44 24 18\n84 c0\n0f 85 97 05 00 00\ne9 a7 05 00 00\n49 bf 00 00 00 00 01 00 00 00\ne9 e0 05 00 00\n49 bf 00 00 00 00 01 00 00 00\ne9 02 06 00 00\n45 31 db\nb8 0e 00 00 00\ne9 fa f0 ff ff\n85 c9\n0f 84 c3 f0 ff ff\nc1 ee 1f\n48 89 74 24 58\n69 ed 10 27 00 00\n41 6b c3 64\n01 cd\n01 c5\n48 89 6c 24 38\n41 bb 09 00 00 00\nc7 44 24 2c 14 00 00 00\ne9 bf f0 ff ff\n41 be 09 00 00 00\n8b 84 24 f0 04 00 00\nba 09 00 00 00\neb 0a\n8b 84 24 f0 04 00 00\n44 89 f2\n89 c7\nc1 ef 1f\nc7 44 24 2c 00 00 00 00\n45 31 e4\n48 89 44 24 38\n41 89 d3\n89 f8\n24 01\n44 89 d1\n41 83 fa 4f\n49 89 fa\n0f 85 ed 00 00 00\n84 c0\n0f 85 e5 00 00 00\n4c 89 54 24 58\n31 d2\n48 8b 44 24 18\n41 89 ca\n44 8b 64 24 14\n48 89 54 24 50\n44 89 5c 24 18\n4d 89 cf\n66 c7 44 24 63 20 25\n45 85 d2\n48 8d 4c 24 65\n74 0a\n44 88 54 24 65\n48 8d 4c 24 66\n88 01\nc6 41 01 00\n48 8d bc 24 b0 00 00 00\n48 8d 54 24 63\nbe 00 04 00 00\n48 8b 4c 24 30\ne8 67 39 ff ff\n48 89 c5\n48 85 ed\n0f 84 9c 01 00 00\n44 89 64 24 14\n48 ff cd\n31 c0\n45 85 f6\n41 0f 49 c6\n48 39 c5\n49 89 ec\n4c 0f 42 e0\n48 8b 4c 24 48\n4c 8b 44 24 20\n4c 29 c1\n49 39 cc\n8b 4c 24 18\n0f 83 f4 05 00 00\n4c 89 ff\n48 85 ff\n0f 84 f2 01 00 00\n48 39 c5\n0f 93 c0\n85 c9\n49 bf 00 00 00 00 01 00 00 00\n0f 85 86 02 00 00\n84 c0\n0f 85 7e 02 00 00\n4d 63 f6\n49 29 ee\n41 83 fd 30\n0f 85 4e 02 00 00\nbe 30 00 00 00\ne9 49 02 00 00\n48 8b 74 24 38\n8b 4c 24 2c\n89 f2\nf7 da\n84 c0\n0f 44 d6\n48 8d ac 24 a7 00 00 00\n66 0f 1f 44 00 00\nf6 c1 01\n74 07\nc6 45 ff 3a\n48 ff cd\nd1 f9\n89 d0\nbf cd cc cc cc\n48 0f af f8\n48 c1 ef 23\n8d 04 3f\n8d 04 80\n89 d6\n29 c6\n40 80 ce 30\n40 88 75 ff\n48 ff cd\n83 fa 09\n89 fa\n77 c7\n85 c9\n89 fa\n75 c1\n45 39 f3\n45 0f 4c de\n45 84 e4\n74 03\n41 b4 2b\n41 f6 c2 01\n41 b7 2d\n75 03\n45 89 e7\n41 83 fd 2d\n4c 89 54 24 58\n48 89 7c 24 38\n89 4c 24 2c\n0f 85 9c 00 00 00\n45 84 ff\n0f 84 28 04 00 00\n45 89 fc\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\n41 bf 01 00 00 00\n44 0f 47 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 e9 04 00 00\n4d 85 c9\n0f 84 68 02 00 00\n83 f8 02\n0f 82 e3 03 00 00\n45 85 db\n0f 85 da 03 00 00\n49 63 c6\n48 89 44 24 68\n48 8d 50 ff\n44 89 5c 24 18\nbe 20 00 00 00\n4c 89 cf\n4c 89 4c 24 40\ne8 5d 35 ff ff\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n48 8b 44 24 68\n4d 8d 4c 01 ff\ne9 99 03 00 00\n4c 8b 44 24 20\n4d 89 f9\ne9 55 04 00 00\n44 89 5c 24 18\n49 63 f3\n48 89 e8\n48 8d 94 24 a7 00 00 00\n48 29 d0\n44 89 fa\nf6 da\n4d 19 e4\n49 01 c4\n49 01 f4\n45 85 e4\n7e 76\n48 8b 44 24 48\n4c 29 c0\n41 83 fd 5f\n44 88 7c 24 50\n0f 85 56 01 00 00\n4d 63 fc\n49 39 c7\n44 8b 5c 24 18\n0f 83 2f 04 00 00\n31 c9\n4d 85 c9\n0f 84 be 01 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 fa\n4c 89 4c 24 40\ne8 c1 34 ff ff\n31 c9\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n4d 01 f9\ne9 93 01 00 00\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n4d 01 e0\ne9 c0 03 00 00\n45 84 ff\n0f 84 68 01 00 00\n45 89 fc\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\n41 bf 01 00 00 00\n44 0f 47 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n44 8b 5c 24 18\n0f 83 a9 03 00 00\n4d 85 c9\n0f 84 af 01 00 00\n83 f8 02\n0f 82 a3 02 00 00\n45 85 db\n0f 85 9a 02 00 00\n49 63 c6\n48 ff c8\n41 83 fd 30\n4c 89 4c 24 40\n48 89 44 24 68\n0f 85 57 02 00 00\nbe 30 00 00 00\ne9 52 02 00 00\nbe 20 00 00 00\n4c 89 f2\n49 89 ff\ne8 0c 34 ff ff\n4d 01 f7\n4c 89 ff\n49 bf 00 00 00 00 01 00 00 00\n48 8b 44 24 50\na8 01\n75 1c\nf6 44 24 14 01\n75 2a\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 c9 34 ff ff\neb 28\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 34 03 00 00\neb 13\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 5f 03 00 00\n4d 89 f1\n4c 8b 44 24 20\n49 01 e9\n4d 01 e0\ne9 c9 02 00 00\n48 39 c6\n44 8b 5c 24 18\n0f 83 dc 02 00 00\n80 7c 24 50 00\n0f 84 db eb ff ff\n31 c9\n45 85 f6\n41 0f 49 ce\n83 f9 01\n41 bf 01 00 00 00\n44 0f 47 f9\n49 39 c7\n0f 83 b2 02 00 00\n4d 85 c9\n0f 84 c0 00 00 00\n83 f9 02\n0f 82 9d eb ff ff\n45 85 db\n0f 85 94 eb ff ff\n4d 63 f6\n49 ff ce\n41 83 fd 30\n4c 89 4c 24 40\n0f 85 5d eb ff ff\nbe 30 00 00 00\ne9 58 eb ff ff\n45 31 c9\ne9 82 01 00 00\n44 8b 5c 24 18\ne9 7b 01 00 00\n45 31 c9\n4d 01 f8\n45 29 e6\n41 0f 4f ce\n80 7c 24 50 00\n74 59\n83 f9 01\n41 bf 01 00 00 00\n44 0f 47 f9\n48 8b 44 24 48\n4c 29 c0\n49 39 c7\n0f 83 34 02 00 00\n4d 85 c9\n74 4e\n45 85 db\n0f 85 9e eb ff ff\n83 f9 02\n0f 82 95 eb ff ff\n41 89 ce\n49 ff ce\n41 83 fd 30\n4c 89 44 24 20\n48 89 4c 24 40\n0f 85 53 eb ff ff\nbe 30 00 00 00\ne9 4e eb ff ff\n41 89 ce\ne9 06 01 00 00\n45 31 c9\ne9 fb 00 00 00\n45 31 c9\ne9 e8 ea ff ff\n45 31 c9\ne9 5b eb ff ff\nbe 20 00 00 00\n4c 89 f2\ne8 7e 32 ff ff\n4c 89 ff\n49 bf 00 00 00 00 01 00 00 00\n8b 44 24 18\n4c 01 f7\n84 c0\n74 15\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 c6 01 00 00\ne9 3c eb ff ff\n80 7c 24 14 00\n0f 84 21 eb ff ff\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 e6 01 00 00\ne9 1c eb ff ff\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 1e 32 ff ff\n4d 89 f9\n4c 8b 44 24 20\n49 bf 00 00 00 00 01 00 00 00\n4d 01 f1\n41 c6 01 0a\ne9 88 eb ff ff\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 ed 31 ff ff\n4d 89 f9\n4c 8b 44 24 20\n49 bf 00 00 00 00 01 00 00 00\n4d 01 f1\n41 c6 01 09\ne9 57 eb ff ff\nbe 20 00 00 00\n4c 89 cf\n48 8b 54 24 68\ne8 bd 31 ff ff\n48 8b 44 24 68\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n49 01 c1\n45 88 21\n49 ff c1\n4d 01 f8\n4c 8d a4 24 a7 00 00 00\n49 29 ec\n31 c0\n45 85 f6\n41 0f 49 c6\n49 39 c4\n4d 89 e7\n4c 0f 42 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 bc 00 00 00\n4d 85 c9\n74 27\n49 39 c4\n0f 93 c0\n45 85 db\n75 3f\n84 c0\n75 3b\n4d 63 f6\n4d 29 e6\n41 83 fd 30\n4c 89 44 24 20\n75 0c\nbe 30 00 00 00\neb 0a\n45 31 c9\neb 5d\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cd\ne8 2a 31 ff ff\n4d 89 e9\n4c 8b 44 24 20\n4d 01 f1\n80 7c 24 14 00\n74 16\n4c 89 cf\n48 89 ee\n4c 89 e2\n4d 89 c6\n4c 89 cd\ne8 b4 00 00 00\neb 14\n4c 89 cf\n48 89 ee\n4c 89 e2\n4d 89 c6\n4c 89 cd\ne8 de 31 ff ff\n49 89 e9\n4d 89 f0\n4d 01 e1\n0f 1f 44 00 00\n4d 01 f8\n49 bf 00 00 00 00 01 00 00 00\n80 7b 01 00\n48 8d 5b 01\n0f 85 75 ea ff ff\n48 83 7c 24 48 00\n74 0e\n4d 85 c9\n74 09\n41 c6 01 00\neb 03\n45 31 c0\n4c 89 c0\n48 81 c4 b8 04 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p299
S'.text:000000000040daf0\n.text:000000000040daf1\n.text:000000000040daf3\n.text:000000000040daf5\n.text:000000000040daf7\n.text:000000000040daf9\n.text:000000000040dafa\n.text:000000000040db01\n.text:000000000040db09\n.text:000000000040db0c\n.text:000000000040db11\n.text:000000000040db14\n.text:000000000040db1b\n.text:000000000040db1f\n.text:000000000040db24\n.text:000000000040db28\n.text:000000000040db2b\n.text:000000000040db30\n.text:000000000040db34\n.text:000000000040db39\n.text:000000000040db3c\n.text:000000000040db3e\n.text:000000000040db43\n.text:000000000040db46\n.text:000000000040db49\n.text:000000000040db4c\n.text:000000000040db50\n.text:000000000040db53\n.text:000000000040db56\n.text:000000000040db5c\n.text:000000000040db66\n.text:000000000040db6b\n.text:000000000040db70\n.text:000000000040db74\n.text:000000000040db79\n.text:000000000040db7e\n.text:000000000040db81\n.text:000000000040db84\n.text:000000000040db89\n.text:000000000040db8e\n.text:000000000040db93\n.text:000000000040db98\n.text:000000000040db9b\n.text:000000000040db9f\n.text:000000000040dba2\n.text:000000000040dba5\n.text:000000000040dba8\n.text:000000000040dbab\n.text:000000000040dbae\n.text:000000000040dbb1\n.text:000000000040dbb3\n.text:000000000040dbb8\n.text:000000000040dbbb\n.text:000000000040dbbe\n.text:000000000040dbc3\n.text:000000000040dbc6\n.text:000000000040dbcb\n.text:000000000040dbd0\n.text:000000000040dbd3\n.text:000000000040dbd8\n.text:000000000040dbdb\n.text:000000000040dbde\n.text:000000000040dbe3\n.text:000000000040dbe6\n.text:000000000040dbe9\n.text:000000000040dbee\n.text:000000000040dbf3\n.text:000000000040dbf6\n.text:000000000040dbf9\n.text:000000000040dbfc\n.text:000000000040dc01\n.text:000000000040dc06\n.text:000000000040dc0b\n.text:000000000040dc0e\n.text:000000000040dc13\n.text:000000000040dc16\n.text:000000000040dc1a\n.text:000000000040dc1d\n.text:000000000040dc20\n.text:000000000040dc23\n.text:000000000040dc26\n.text:000000000040dc2b\n.text:000000000040dc30\n.text:000000000040dc33\n.text:000000000040dc36\n.text:000000000040dc3b\n.text:000000000040dc3e\n.text:000000000040dc43\n.text:000000000040dc46\n.text:000000000040dc49\n.text:000000000040dc4e\n.text:000000000040dc51\n.text:000000000040dc57\n.text:000000000040dc5a\n.text:000000000040dc5f\n.text:000000000040dc62\n.text:000000000040dc65\n.text:000000000040dc6a\n.text:000000000040dc70\n.text:000000000040dc78\n.text:000000000040dc7d\n.text:000000000040dc7f\n.text:000000000040dc82\n.text:000000000040dc85\n.text:000000000040dc8a\n.text:000000000040dc90\n.text:000000000040dc95\n.text:000000000040dc98\n.text:000000000040dc9b\n.text:000000000040dca0\n.text:000000000040dca6\n.text:000000000040dcab\n.text:000000000040dcb0\n.text:000000000040dcb3\n.text:000000000040dcb6\n.text:000000000040dcb9\n.text:000000000040dcbe\n.text:000000000040dcc1\n.text:000000000040dcc6\n.text:000000000040dcc9\n.text:000000000040dcd3\n.text:000000000040dcd5\n.text:000000000040dcd8\n.text:000000000040dcdb\n.text:000000000040dcde\n.text:000000000040dce3\n.text:000000000040dce8\n.text:000000000040dceb\n.text:000000000040dcf0\n.text:000000000040dcf6\n.text:000000000040dd00\n.text:000000000040dd02\n.text:000000000040dd05\n.text:000000000040dd07\n.text:000000000040dd09\n.text:000000000040dd10\n.text:000000000040dd13\n.text:000000000040dd16\n.text:000000000040dd19\n.text:000000000040dd20\n.text:000000000040dd23\n.text:000000000040dd26\n.text:000000000040dd29\n.text:000000000040dd2c\n.text:000000000040dd2e\n.text:000000000040dd31\n.text:000000000040dd33\n.text:000000000040dd36\n.text:000000000040dd38\n.text:000000000040dd3b\n.text:000000000040dd3d\n.text:000000000040dd40\n.text:000000000040dd43\n.text:000000000040dd50\n.text:000000000040dd53\n.text:000000000040dd55\n.text:000000000040dd58\n.text:000000000040dd5a\n.text:000000000040dd5d\n.text:000000000040dd60\n.text:000000000040dd70\n.text:000000000040dd75\n.text:000000000040dd78\n.text:000000000040dd7d\n.text:000000000040dd81\n.text:000000000040dd87\n.text:000000000040dd8a\n.text:000000000040dd90\n.text:000000000040dd93\n.text:000000000040dd96\n.text:000000000040dda0\n.text:000000000040dda3\n.text:000000000040dda9\n.text:000000000040ddac\n.text:000000000040ddae\n.text:000000000040ddb0\n.text:000000000040ddb6\n.text:000000000040ddbb\n.text:000000000040ddbd\n.text:000000000040ddc0\n.text:000000000040ddc3\n.text:000000000040ddc8\n.text:000000000040ddca\n.text:000000000040ddcd\n.text:000000000040ddcf\n.text:000000000040ddd2\n.text:000000000040ddd6\n.text:000000000040ddda\n.text:000000000040dddd\n.text:000000000040dde0\n.text:000000000040dde3\n.text:000000000040dde6\n.text:000000000040dde8\n.text:000000000040ddec\n.text:000000000040ddf0\n.text:000000000040ddf2\n.text:000000000040ddf6\n.text:000000000040ddf8\n.text:000000000040ddfb\n.text:000000000040ddfd\n.text:000000000040de00\n.text:000000000040de03\n.text:000000000040de06\n.text:000000000040de0b\n.text:000000000040de11\n.text:000000000040de13\n.text:000000000040de15\n.text:000000000040de1a\n.text:000000000040de1d\n.text:000000000040de24\n.text:000000000040de29\n.text:000000000040de2c\n.text:000000000040de30\n.text:000000000040de36\n.text:000000000040de3b\n.text:000000000040de40\n.text:000000000040de45\n.text:000000000040de4a\n.text:000000000040de4d\n.text:000000000040de50\n.text:000000000040de52\n.text:000000000040de55\n.text:000000000040de5b\n.text:000000000040de60\n.text:000000000040de64\n.text:000000000040de67\n.text:000000000040de6c\n.text:000000000040de6e\n.text:000000000040de70\n.text:000000000040de76\n.text:000000000040de7b\n.text:000000000040de7f\n.text:000000000040de81\n.text:000000000040de84\n.text:000000000040de8b\n.text:000000000040de8e\n.text:000000000040de92\n.text:000000000040de95\n.text:000000000040de99\n.text:000000000040de9b\n.text:000000000040de9e\n.text:000000000040dea2\n.text:000000000040dea4\n.text:000000000040deaa\n.text:000000000040deac\n.text:000000000040deaf\n.text:000000000040deb2\n.text:000000000040deb8\n.text:000000000040debb\n.text:000000000040dec0\n.text:000000000040dec3\n.text:000000000040dec6\n.text:000000000040decb\n.text:000000000040dece\n.text:000000000040ded1\n.text:000000000040ded6\n.text:000000000040ded8\n.text:000000000040dedb\n.text:000000000040dede\n.text:000000000040dee0\n.text:000000000040dee3\n.text:000000000040dee8\n.text:000000000040deeb\n.text:000000000040deee\n.text:000000000040def0\n.text:000000000040def2\n.text:000000000040def7\n.text:000000000040defa\n.text:000000000040defd\n.text:000000000040df00\n.text:000000000040df06\n.text:000000000040df0b\n.text:000000000040df0e\n.text:000000000040df10\n.text:000000000040df13\n.text:000000000040df16\n.text:000000000040df19\n.text:000000000040df1f\n.text:000000000040df24\n.text:000000000040df29\n.text:000000000040df2e\n.text:000000000040df31\n.text:000000000040df36\n.text:000000000040df39\n.text:000000000040df3c\n.text:000000000040df42\n.text:000000000040df47\n.text:000000000040df4c\n.text:000000000040df51\n.text:000000000040df60\n.text:000000000040df63\n.text:000000000040df67\n.text:000000000040df69\n.text:000000000040df6b\n.text:000000000040df6d\n.text:000000000040df73\n.text:000000000040df76\n.text:000000000040df7b\n.text:000000000040df7f\n.text:000000000040df85\n.text:000000000040df89\n.text:000000000040df8f\n.text:000000000040df94\n.text:000000000040df98\n.text:000000000040df9f\n.text:000000000040dfa3\n.text:000000000040dfa5\n.text:000000000040dfa7\n.text:000000000040dfaa\n.text:000000000040dfad\n.text:000000000040dfaf\n.text:000000000040dfb6\n.text:000000000040dfba\n.text:000000000040dfbc\n.text:000000000040dfbe\n.text:000000000040dfc1\n.text:000000000040dfc4\n.text:000000000040dfc6\n.text:000000000040dfc9\n.text:000000000040dfd0\n.text:000000000040dfd4\n.text:000000000040dfd7\n.text:000000000040dfd9\n.text:000000000040dfdc\n.text:000000000040dfdf\n.text:000000000040dfe1\n.text:000000000040dfe4\n.text:000000000040dfe8\n.text:000000000040dfeb\n.text:000000000040dfed\n.text:000000000040dfef\n.text:000000000040dff6\n.text:000000000040dff9\n.text:000000000040dffe\n.text:000000000040e001\n.text:000000000040e004\n.text:000000000040e009\n.text:000000000040e00f\n.text:000000000040e017\n.text:000000000040e01c\n.text:000000000040e021\n.text:000000000040e024\n.text:000000000040e030\n.text:000000000040e034\n.text:000000000040e036\n.text:000000000040e040\n.text:000000000040e043\n.text:000000000040e049\n.text:000000000040e04e\n.text:000000000040e050\n.text:000000000040e054\n.text:000000000040e057\n.text:000000000040e05c\n.text:000000000040e060\n.text:000000000040e063\n.text:000000000040e066\n.text:000000000040e06a\n.text:000000000040e06f\n.text:000000000040e072\n.text:000000000040e075\n.text:000000000040e07b\n.text:000000000040e07e\n.text:000000000040e080\n.text:000000000040e083\n.text:000000000040e086\n.text:000000000040e089\n.text:000000000040e08b\n.text:000000000040e08d\n.text:000000000040e08f\n.text:000000000040e092\n.text:000000000040e095\n.text:000000000040e099\n.text:000000000040e09b\n.text:000000000040e0a0\n.text:000000000040e0a2\n.text:000000000040e0a5\n.text:000000000040e0aa\n.text:000000000040e0af\n.text:000000000040e0b2\n.text:000000000040e0b5\n.text:000000000040e0b8\n.text:000000000040e0bd\n.text:000000000040e0c0\n.text:000000000040e0c3\n.text:000000000040e0c8\n.text:000000000040e0ca\n.text:000000000040e0cd\n.text:000000000040e0d0\n.text:000000000040e0d3\n.text:000000000040e0d6\n.text:000000000040e0db\n.text:000000000040e0dd\n.text:000000000040e0e0\n.text:000000000040e0e3\n.text:000000000040e0e6\n.text:000000000040e0e9\n.text:000000000040e0ee\n.text:000000000040e0f1\n.text:000000000040e0f6\n.text:000000000040e0f9\n.text:000000000040e0fe\n.text:000000000040e101\n.text:000000000040e104\n.text:000000000040e10a\n.text:000000000040e10f\n.text:000000000040e114\n.text:000000000040e117\n.text:000000000040e11a\n.text:000000000040e120\n.text:000000000040e125\n.text:000000000040e12a\n.text:000000000040e12e\n.text:000000000040e134\n.text:000000000040e138\n.text:000000000040e13d\n.text:000000000040e143\n.text:000000000040e148\n.text:000000000040e14d\n.text:000000000040e151\n.text:000000000040e157\n.text:000000000040e15b\n.text:000000000040e15e\n.text:000000000040e165\n.text:000000000040e168\n.text:000000000040e16c\n.text:000000000040e170\n.text:000000000040e172\n.text:000000000040e175\n.text:000000000040e177\n.text:000000000040e17a\n.text:000000000040e17c\n.text:000000000040e17f\n.text:000000000040e181\n.text:000000000040e184\n.text:000000000040e189\n.text:000000000040e18e\n.text:000000000040e191\n.text:000000000040e194\n.text:000000000040e19a\n.text:000000000040e19f\n.text:000000000040e1a4\n.text:000000000040e1a7\n.text:000000000040e1aa\n.text:000000000040e1b0\n.text:000000000040e1b5\n.text:000000000040e1ba\n.text:000000000040e1bd\n.text:000000000040e1c1\n.text:000000000040e1c6\n.text:000000000040e1cc\n.text:000000000040e1d1\n.text:000000000040e1d6\n.text:000000000040e1d9\n.text:000000000040e1de\n.text:000000000040e1e3\n.text:000000000040e1e8\n.text:000000000040e1eb\n.text:000000000040e1ef\n.text:000000000040e1f4\n.text:000000000040e1fa\n.text:000000000040e1ff\n.text:000000000040e203\n.text:000000000040e208\n.text:000000000040e20b\n.text:000000000040e20f\n.text:000000000040e214\n.text:000000000040e21a\n.text:000000000040e21f\n.text:000000000040e224\n.text:000000000040e227\n.text:000000000040e22c\n.text:000000000040e231\n.text:000000000040e234\n.text:000000000040e238\n.text:000000000040e23d\n.text:000000000040e243\n.text:000000000040e247\n.text:000000000040e24c\n.text:000000000040e252\n.text:000000000040e256\n.text:000000000040e25c\n.text:000000000040e261\n.text:000000000040e268\n.text:000000000040e270\n.text:000000000040e272\n.text:000000000040e279\n.text:000000000040e27c\n.text:000000000040e280\n.text:000000000040e284\n.text:000000000040e286\n.text:000000000040e288\n.text:000000000040e28b\n.text:000000000040e28d\n.text:000000000040e292\n.text:000000000040e294\n.text:000000000040e297\n.text:000000000040e29a\n.text:000000000040e29c\n.text:000000000040e2a2\n.text:000000000040e2a4\n.text:000000000040e2a6\n.text:000000000040e2a8\n.text:000000000040e2ad\n.text:000000000040e2b0\n.text:000000000040e2b4\n.text:000000000040e2b9\n.text:000000000040e2bf\n.text:000000000040e2c4\n.text:000000000040e2c9\n.text:000000000040e2cb\n.text:000000000040e2d0\n.text:000000000040e2d5\n.text:000000000040e2da\n.text:000000000040e2df\n.text:000000000040e2e2\n.text:000000000040e2e6\n.text:000000000040e2eb\n.text:000000000040e2f1\n.text:000000000040e2f6\n.text:000000000040e2fb\n.text:000000000040e2fe\n.text:000000000040e301\n.text:000000000040e304\n.text:000000000040e306\n.text:000000000040e308\n.text:000000000040e30b\n.text:000000000040e30f\n.text:000000000040e314\n.text:000000000040e31a\n.text:000000000040e31f\n.text:000000000040e324\n.text:000000000040e327\n.text:000000000040e32a\n.text:000000000040e32d\n.text:000000000040e330\n.text:000000000040e337\n.text:000000000040e33b\n.text:000000000040e33f\n.text:000000000040e341\n.text:000000000040e344\n.text:000000000040e347\n.text:000000000040e349\n.text:000000000040e350\n.text:000000000040e352\n.text:000000000040e354\n.text:000000000040e357\n.text:000000000040e359\n.text:000000000040e35c\n.text:000000000040e363\n.text:000000000040e367\n.text:000000000040e369\n.text:000000000040e36b\n.text:000000000040e36e\n.text:000000000040e371\n.text:000000000040e373\n.text:000000000040e378\n.text:000000000040e37d\n.text:000000000040e380\n.text:000000000040e384\n.text:000000000040e38a\n.text:000000000040e38f\n.text:000000000040e394\n.text:000000000040e398\n.text:000000000040e39e\n.text:000000000040e3a2\n.text:000000000040e3a7\n.text:000000000040e3ad\n.text:000000000040e3b2\n.text:000000000040e3b5\n.text:000000000040e3bb\n.text:000000000040e3be\n.text:000000000040e3c4\n.text:000000000040e3c7\n.text:000000000040e3cd\n.text:000000000040e3d0\n.text:000000000040e3d2\n.text:000000000040e3d7\n.text:000000000040e3db\n.text:000000000040e3e0\n.text:000000000040e3e5\n.text:000000000040e3e8\n.text:000000000040e3ed\n.text:000000000040e3f0\n.text:000000000040e3f5\n.text:000000000040e3f8\n.text:000000000040e3fa\n.text:000000000040e3fd\n.text:000000000040e401\n.text:000000000040e404\n.text:000000000040e407\n.text:000000000040e40b\n.text:000000000040e410\n.text:000000000040e413\n.text:000000000040e416\n.text:000000000040e41c\n.text:000000000040e41f\n.text:000000000040e425\n.text:000000000040e428\n.text:000000000040e42e\n.text:000000000040e431\n.text:000000000040e434\n.text:000000000040e438\n.text:000000000040e43e\n.text:000000000040e443\n.text:000000000040e448\n.text:000000000040e44b\n.text:000000000040e44e\n.text:000000000040e454\n.text:000000000040e459\n.text:000000000040e45e\n.text:000000000040e461\n.text:000000000040e465\n.text:000000000040e46b\n.text:000000000040e470\n.text:000000000040e475\n.text:000000000040e478\n.text:000000000040e47c\n.text:000000000040e481\n.text:000000000040e487\n.text:000000000040e48c\n.text:000000000040e491\n.text:000000000040e494\n.text:000000000040e499\n.text:000000000040e49e\n.text:000000000040e4a1\n.text:000000000040e4a5\n.text:000000000040e4ab\n.text:000000000040e4b0\n.text:000000000040e4b5\n.text:000000000040e4b8\n.text:000000000040e4bc\n.text:000000000040e4c1\n.text:000000000040e4c7\n.text:000000000040e4cc\n.text:000000000040e4d1\n.text:000000000040e4d4\n.text:000000000040e4d7\n.text:000000000040e4db\n.text:000000000040e4dd\n.text:000000000040e4e2\n.text:000000000040e4e8\n.text:000000000040e4ed\n.text:000000000040e4f0\n.text:000000000040e4f4\n.text:000000000040e4fa\n.text:000000000040e4ff\n.text:000000000040e504\n.text:000000000040e507\n.text:000000000040e50b\n.text:000000000040e50f\n.text:000000000040e515\n.text:000000000040e51a\n.text:000000000040e51f\n.text:000000000040e522\n.text:000000000040e526\n.text:000000000040e52b\n.text:000000000040e531\n.text:000000000040e536\n.text:000000000040e53b\n.text:000000000040e53e\n.text:000000000040e541\n.text:000000000040e545\n.text:000000000040e547\n.text:000000000040e54c\n.text:000000000040e552\n.text:000000000040e557\n.text:000000000040e559\n.text:000000000040e55c\n.text:000000000040e560\n.text:000000000040e563\n.text:000000000040e568\n.text:000000000040e56b\n.text:000000000040e570\n.text:000000000040e573\n.text:000000000040e576\n.text:000000000040e57c\n.text:000000000040e57f\n.text:000000000040e585\n.text:000000000040e588\n.text:000000000040e58e\n.text:000000000040e591\n.text:000000000040e594\n.text:000000000040e598\n.text:000000000040e59e\n.text:000000000040e5a3\n.text:000000000040e5a8\n.text:000000000040e5ad\n.text:000000000040e5b0\n.text:000000000040e5b5\n.text:000000000040e5b9\n.text:000000000040e5c1\n.text:000000000040e5c4\n.text:000000000040e5c8\n.text:000000000040e5cc\n.text:000000000040e5d4\n.text:000000000040e5dc\n.text:000000000040e5e4\n.text:000000000040e5ec\n.text:000000000040e5f4\n.text:000000000040e5f9\n.text:000000000040e5fc\n.text:000000000040e600\n.text:000000000040e603\n.text:000000000040e606\n.text:000000000040e60e\n.text:000000000040e610\n.text:000000000040e61a\n.text:000000000040e61d\n.text:000000000040e620\n.text:000000000040e623\n.text:000000000040e627\n.text:000000000040e62b\n.text:000000000040e62e\n.text:000000000040e630\n.text:000000000040e633\n.text:000000000040e635\n.text:000000000040e637\n.text:000000000040e63a\n.text:000000000040e63c\n.text:000000000040e63e\n.text:000000000040e641\n.text:000000000040e644\n.text:000000000040e647\n.text:000000000040e64a\n.text:000000000040e64d\n.text:000000000040e651\n.text:000000000040e655\n.text:000000000040e658\n.text:000000000040e65a\n.text:000000000040e660\n.text:000000000040e663\n.text:000000000040e668\n.text:000000000040e66b\n.text:000000000040e670\n.text:000000000040e674\n.text:000000000040e679\n.text:000000000040e67b\n.text:000000000040e67e\n.text:000000000040e682\n.text:000000000040e685\n.text:000000000040e68a\n.text:000000000040e68d\n.text:000000000040e692\n.text:000000000040e695\n.text:000000000040e698\n.text:000000000040e69e\n.text:000000000040e6a1\n.text:000000000040e6a7\n.text:000000000040e6aa\n.text:000000000040e6b0\n.text:000000000040e6b3\n.text:000000000040e6b6\n.text:000000000040e6ba\n.text:000000000040e6c0\n.text:000000000040e6c5\n.text:000000000040e6ca\n.text:000000000040e6cf\n.text:000000000040e6d4\n.text:000000000040e6d9\n.text:000000000040e6dc\n.text:000000000040e6df\n.text:000000000040e6e1\n.text:000000000040e6e8\n.text:000000000040e6ec\n.text:000000000040e6f0\n.text:000000000040e6f2\n.text:000000000040e6f5\n.text:000000000040e6f8\n.text:000000000040e6fa\n.text:000000000040e701\n.text:000000000040e703\n.text:000000000040e705\n.text:000000000040e707\n.text:000000000040e70c\n.text:000000000040e711\n.text:000000000040e714\n.text:000000000040e718\n.text:000000000040e71d\n.text:000000000040e723\n.text:000000000040e728\n.text:000000000040e72d\n.text:000000000040e730\n.text:000000000040e735\n.text:000000000040e73a\n.text:000000000040e73d\n.text:000000000040e741\n.text:000000000040e747\n.text:000000000040e74c\n.text:000000000040e751\n.text:000000000040e755\n.text:000000000040e75b\n.text:000000000040e75d\n.text:000000000040e75f\n.text:000000000040e762\n.text:000000000040e767\n.text:000000000040e769\n.text:000000000040e76e\n.text:000000000040e771\n.text:000000000040e776\n.text:000000000040e77a\n.text:000000000040e77c\n.text:000000000040e77f\n.text:000000000040e786\n.text:000000000040e789\n.text:000000000040e78d\n.text:000000000040e790\n.text:000000000040e794\n.text:000000000040e796\n.text:000000000040e799\n.text:000000000040e79d\n.text:000000000040e79f\n.text:000000000040e7a5\n.text:000000000040e7a7\n.text:000000000040e7aa\n.text:000000000040e7ad\n.text:000000000040e7b3\n.text:000000000040e7b6\n.text:000000000040e7bb\n.text:000000000040e7be\n.text:000000000040e7c1\n.text:000000000040e7c6\n.text:000000000040e7c9\n.text:000000000040e7ce\n.text:000000000040e7d0\n.text:000000000040e7d5\n.text:000000000040e7da\n.text:000000000040e7df\n.text:000000000040e7e4\n.text:000000000040e7e7\n.text:000000000040e7ea\n.text:000000000040e7f0\n.text:000000000040e7f3\n.text:000000000040e7f9\n.text:000000000040e7fe\n.text:000000000040e802\n.text:000000000040e809\n.text:000000000040e80c\n.text:000000000040e810\n.text:000000000040e814\n.text:000000000040e816\n.text:000000000040e819\n.text:000000000040e81b\n.text:000000000040e81d\n.text:000000000040e81f\n.text:000000000040e822\n.text:000000000040e829\n.text:000000000040e82c\n.text:000000000040e830\n.text:000000000040e834\n.text:000000000040e836\n.text:000000000040e839\n.text:000000000040e83b\n.text:000000000040e840\n.text:000000000040e846\n.text:000000000040e84b\n.text:000000000040e84d\n.text:000000000040e84f\n.text:000000000040e851\n.text:000000000040e854\n.text:000000000040e856\n.text:000000000040e859\n.text:000000000040e85e\n.text:000000000040e860\n.text:000000000040e862\n.text:000000000040e864\n.text:000000000040e866\n.text:000000000040e86b\n.text:000000000040e86e\n.text:000000000040e870\n.text:000000000040e875\n.text:000000000040e878\n.text:000000000040e87d\n.text:000000000040e881\n.text:000000000040e886\n.text:000000000040e88b\n.text:000000000040e891\n.text:000000000040e895\n.text:000000000040e89b\n.text:000000000040e8a1\n.text:000000000040e8a6\n.text:000000000040e8a8\n.text:000000000040e8aa\n.text:000000000040e8af\n.text:000000000040e8b4\n.text:000000000040e8b8\n.text:000000000040e8bf\n.text:000000000040e8c2\n.text:000000000040e8c6\n.text:000000000040e8ca\n.text:000000000040e8cc\n.text:000000000040e8cf\n.text:000000000040e8d1\n.text:000000000040e8d3\n.text:000000000040e8d8\n.text:000000000040e8dd\n.text:000000000040e8e2\n.text:000000000040e8e8\n.text:000000000040e8ea\n.text:000000000040e8ec\n.text:000000000040e8ef\n.text:000000000040e8f5\n.text:000000000040e8f8\n.text:000000000040e8fd\n.text:000000000040e902\n.text:000000000040e905\n.text:000000000040e90a\n.text:000000000040e90c\n.text:000000000040e90e\n.text:000000000040e912\n.text:000000000040e919\n.text:000000000040e91e\n.text:000000000040e924\n.text:000000000040e92c\n.text:000000000040e92f\n.text:000000000040e934\n.text:000000000040e937\n.text:000000000040e93e\n.text:000000000040e942\n.text:000000000040e944\n.text:000000000040e946\n.text:000000000040e949\n.text:000000000040e94c\n.text:000000000040e950\n.text:000000000040e955\n.text:000000000040e95a\n.text:000000000040e95c\n.text:000000000040e95f\n.text:000000000040e963\n.text:000000000040e966\n.text:000000000040e96b\n.text:000000000040e96e\n.text:000000000040e973\n.text:000000000040e976\n.text:000000000040e979\n.text:000000000040e97f\n.text:000000000040e982\n.text:000000000040e984\n.text:000000000040e987\n.text:000000000040e98d\n.text:000000000040e990\n.text:000000000040e993\n.text:000000000040e997\n.text:000000000040e99d\n.text:000000000040e9a2\n.text:000000000040e9a7\n.text:000000000040e9aa\n.text:000000000040e9b4\n.text:000000000040e9b7\n.text:000000000040e9bc\n.text:000000000040e9bf\n.text:000000000040e9c1\n.text:000000000040e9c4\n.text:000000000040e9c6\n.text:000000000040e9c8\n.text:000000000040e9cb\n.text:000000000040e9d0\n.text:000000000040e9d3\n.text:000000000040e9d5\n.text:000000000040e9d8\n.text:000000000040e9da\n.text:000000000040e9dc\n.text:000000000040e9df\n.text:000000000040e9e4\n.text:000000000040e9e9\n.text:000000000040e9eb\n.text:000000000040e9f0\n.text:000000000040e9f2\n.text:000000000040e9f7\n.text:000000000040e9fa\n.text:000000000040e9fe\n.text:000000000040ea05\n.text:000000000040ea08\n.text:000000000040ea0b\n.text:000000000040ea0d\n.text:000000000040ea14\n.text:000000000040ea17\n.text:000000000040ea1c\n.text:000000000040ea1f\n.text:000000000040ea27\n.text:000000000040ea2c\n.text:000000000040ea2f\n.text:000000000040ea34\n.text:000000000040ea37\n.text:000000000040ea3b\n.text:000000000040ea3e\n.text:000000000040ea41\n.text:000000000040ea45\n.text:000000000040ea4a\n.text:000000000040ea4d\n.text:000000000040ea50\n.text:000000000040ea56\n.text:000000000040ea59\n.text:000000000040ea5b\n.text:000000000040ea5e\n.text:000000000040ea63\n.text:000000000040ea68\n.text:000000000040ea6a\n.text:000000000040ea6d\n.text:000000000040ea70\n.text:000000000040ea74\n.text:000000000040ea76\n.text:000000000040ea7b\n.text:000000000040ea7d\n.text:000000000040ea80\n.text:000000000040ea8a\n.text:000000000040ea8d\n.text:000000000040ea92\n.text:000000000040ea9c\n.text:000000000040ea9e\n.text:000000000040eaa3\n.text:000000000040eaa6\n.text:000000000040eaa9\n.text:000000000040eaac\n.text:000000000040eaaf\n.text:000000000040eab4\n.text:000000000040eabe\n.text:000000000040eac1\n.text:000000000040eac4\n.text:000000000040eac6\n.text:000000000040eacb\n.text:000000000040eacf\n.text:000000000040ead6\n.text:000000000040ead9\n.text:000000000040eadc\n.text:000000000040eadf\n.text:000000000040eae2\n.text:000000000040eae7\n.text:000000000040eaea\n.text:000000000040eaf2\n.text:000000000040eaf7\n.text:000000000040eafc\n.text:000000000040eaff\n.text:000000000040eb04\n.text:000000000040eb09\n.text:000000000040eb0c\n.text:000000000040eb11\n.text:000000000040eb14\n.text:000000000040eb16\n.text:000000000040eb19\n.text:000000000040eb1b\n.text:000000000040eb1d\n.text:000000000040eb20\n.text:000000000040eb25\n.text:000000000040eb27\n.text:000000000040eb29\n.text:000000000040eb2c\n.text:000000000040eb31\n.text:000000000040eb33\n.text:000000000040eb35\n.text:000000000040eb38\n.text:000000000040eb3d\n.text:000000000040eb47\n.text:000000000040eb4b\n.text:000000000040eb4d\n.text:000000000040eb53\n.text:000000000040eb58\n.text:000000000040eb62\n.text:000000000040eb67\n.text:000000000040eb71\n.text:000000000040eb76\n.text:000000000040eb79\n.text:000000000040eb7e\n.text:000000000040eb83\n.text:000000000040eb85\n.text:000000000040eb8b\n.text:000000000040eb8e\n.text:000000000040eb93\n.text:000000000040eb99\n.text:000000000040eb9d\n.text:000000000040eb9f\n.text:000000000040eba1\n.text:000000000040eba6\n.text:000000000040ebac\n.text:000000000040ebb4\n.text:000000000040ebb9\n.text:000000000040ebbf\n.text:000000000040ebc6\n.text:000000000040ebcb\n.text:000000000040ebcd\n.text:000000000040ebd4\n.text:000000000040ebd7\n.text:000000000040ebd9\n.text:000000000040ebdc\n.text:000000000040ebe4\n.text:000000000040ebe7\n.text:000000000040ebec\n.text:000000000040ebef\n.text:000000000040ebf1\n.text:000000000040ebf3\n.text:000000000040ebf6\n.text:000000000040ebfa\n.text:000000000040ebfd\n.text:000000000040ec03\n.text:000000000040ec05\n.text:000000000040ec0b\n.text:000000000040ec10\n.text:000000000040ec12\n.text:000000000040ec17\n.text:000000000040ec1a\n.text:000000000040ec1f\n.text:000000000040ec24\n.text:000000000040ec29\n.text:000000000040ec2c\n.text:000000000040ec33\n.text:000000000040ec36\n.text:000000000040ec3b\n.text:000000000040ec3d\n.text:000000000040ec42\n.text:000000000040ec47\n.text:000000000040ec49\n.text:000000000040ec4d\n.text:000000000040ec55\n.text:000000000040ec5a\n.text:000000000040ec5f\n.text:000000000040ec64\n.text:000000000040ec69\n.text:000000000040ec6c\n.text:000000000040ec6f\n.text:000000000040ec75\n.text:000000000040ec7a\n.text:000000000040ec7d\n.text:000000000040ec7f\n.text:000000000040ec82\n.text:000000000040ec86\n.text:000000000040ec89\n.text:000000000040ec8c\n.text:000000000040ec90\n.text:000000000040ec95\n.text:000000000040ec9a\n.text:000000000040ec9d\n.text:000000000040eca0\n.text:000000000040eca4\n.text:000000000040ecaa\n.text:000000000040ecad\n.text:000000000040ecb0\n.text:000000000040ecb6\n.text:000000000040ecb9\n.text:000000000040ecbc\n.text:000000000040ecbe\n.text:000000000040ecc8\n.text:000000000040ecce\n.text:000000000040ecd0\n.text:000000000040ecd6\n.text:000000000040ecd9\n.text:000000000040ecdc\n.text:000000000040ece0\n.text:000000000040ece6\n.text:000000000040eceb\n.text:000000000040ecf0\n.text:000000000040ecf5\n.text:000000000040ecf9\n.text:000000000040ecfb\n.text:000000000040ecfd\n.text:000000000040ecff\n.text:000000000040ed02\n.text:000000000040ed0a\n.text:000000000040ed10\n.text:000000000040ed13\n.text:000000000040ed15\n.text:000000000040ed19\n.text:000000000040ed1c\n.text:000000000040ed1e\n.text:000000000040ed20\n.text:000000000040ed25\n.text:000000000040ed29\n.text:000000000040ed2d\n.text:000000000040ed30\n.text:000000000040ed33\n.text:000000000040ed35\n.text:000000000040ed37\n.text:000000000040ed3b\n.text:000000000040ed3f\n.text:000000000040ed42\n.text:000000000040ed45\n.text:000000000040ed47\n.text:000000000040ed49\n.text:000000000040ed4b\n.text:000000000040ed4d\n.text:000000000040ed4f\n.text:000000000040ed52\n.text:000000000040ed56\n.text:000000000040ed59\n.text:000000000040ed5b\n.text:000000000040ed5e\n.text:000000000040ed62\n.text:000000000040ed65\n.text:000000000040ed67\n.text:000000000040ed6a\n.text:000000000040ed6e\n.text:000000000040ed73\n.text:000000000040ed78\n.text:000000000040ed7c\n.text:000000000040ed82\n.text:000000000040ed85\n.text:000000000040ed8b\n.text:000000000040ed8e\n.text:000000000040ed90\n.text:000000000040ed93\n.text:000000000040ed97\n.text:000000000040ed9a\n.text:000000000040eda0\n.text:000000000040eda4\n.text:000000000040eda9\n.text:000000000040edac\n.text:000000000040edaf\n.text:000000000040edb5\n.text:000000000040edb8\n.text:000000000040edbe\n.text:000000000040edc1\n.text:000000000040edc7\n.text:000000000040edca\n.text:000000000040edd0\n.text:000000000040edd3\n.text:000000000040edd8\n.text:000000000040eddc\n.text:000000000040ede1\n.text:000000000040ede6\n.text:000000000040ede9\n.text:000000000040edee\n.text:000000000040edf3\n.text:000000000040edf8\n.text:000000000040edfd\n.text:000000000040ee02\n.text:000000000040ee07\n.text:000000000040ee0c\n.text:000000000040ee11\n.text:000000000040ee16\n.text:000000000040ee19\n.text:000000000040ee1e\n.text:000000000040ee23\n.text:000000000040ee26\n.text:000000000040ee29\n.text:000000000040ee31\n.text:000000000040ee34\n.text:000000000040ee37\n.text:000000000040ee39\n.text:000000000040ee3c\n.text:000000000040ee3f\n.text:000000000040ee42\n.text:000000000040ee45\n.text:000000000040ee47\n.text:000000000040ee4c\n.text:000000000040ee4f\n.text:000000000040ee53\n.text:000000000040ee58\n.text:000000000040ee5e\n.text:000000000040ee61\n.text:000000000040ee64\n.text:000000000040ee69\n.text:000000000040ee6f\n.text:000000000040ee71\n.text:000000000040ee74\n.text:000000000040ee7a\n.text:000000000040ee7f\n.text:000000000040ee82\n.text:000000000040ee85\n.text:000000000040ee8a\n.text:000000000040ee8f\n.text:000000000040ee91\n.text:000000000040ee96\n.text:000000000040ee9b\n.text:000000000040eea0\n.text:000000000040eea3\n.text:000000000040eea8\n.text:000000000040eeab\n.text:000000000040eeb5\n.text:000000000040eeb8\n.text:000000000040eebd\n.text:000000000040eec0\n.text:000000000040eec6\n.text:000000000040eec9\n.text:000000000040eecb\n.text:000000000040eece\n.text:000000000040eed2\n.text:000000000040eed5\n.text:000000000040eedb\n.text:000000000040eedf\n.text:000000000040eee4\n.text:000000000040eee7\n.text:000000000040eeea\n.text:000000000040eeef\n.text:000000000040eef5\n.text:000000000040eef8\n.text:000000000040eefe\n.text:000000000040ef01\n.text:000000000040ef07\n.text:000000000040ef0a\n.text:000000000040ef10\n.text:000000000040ef13\n.text:000000000040ef16\n.text:000000000040ef1a\n.text:000000000040ef1f\n.text:000000000040ef24\n.text:000000000040ef2a\n.text:000000000040ef2f\n.text:000000000040ef34\n.text:000000000040ef39\n.text:000000000040ef3c\n.text:000000000040ef3f\n.text:000000000040ef44\n.text:000000000040ef47\n.text:000000000040ef4a\n.text:000000000040ef54\n.text:000000000040ef59\n.text:000000000040ef5b\n.text:000000000040ef5d\n.text:000000000040ef62\n.text:000000000040ef64\n.text:000000000040ef6c\n.text:000000000040ef6f\n.text:000000000040ef72\n.text:000000000040ef77\n.text:000000000040ef79\n.text:000000000040ef81\n.text:000000000040ef84\n.text:000000000040ef87\n.text:000000000040ef8c\n.text:000000000040ef8e\n.text:000000000040ef96\n.text:000000000040ef99\n.text:000000000040ef9c\n.text:000000000040efa1\n.text:000000000040efa4\n.text:000000000040efa9\n.text:000000000040efac\n.text:000000000040efaf\n.text:000000000040efb4\n.text:000000000040efb7\n.text:000000000040efbc\n.text:000000000040efc2\n.text:000000000040efc7\n.text:000000000040efcd\n.text:000000000040efcf\n.text:000000000040efd2\n.text:000000000040efd6\n.text:000000000040efd9\n.text:000000000040efdf\n.text:000000000040efe3\n.text:000000000040efe6\n.text:000000000040efec\n.text:000000000040efef\n.text:000000000040eff5\n.text:000000000040eff8\n.text:000000000040effe\n.text:000000000040f001\n.text:000000000040f007\n.text:000000000040f00a\n.text:000000000040f00d\n.text:000000000040f011\n.text:000000000040f016\n.text:000000000040f01c\n.text:000000000040f021\n.text:000000000040f026\n.text:000000000040f029\n.text:000000000040f02e\n.text:000000000040f033\n.text:000000000040f038\n.text:000000000040f03b\n.text:000000000040f03e\n.text:000000000040f041\n.text:000000000040f045\n.text:000000000040f04a\n.text:000000000040f04c\n.text:000000000040f04f\n.text:000000000040f055\n.text:000000000040f059\n.text:000000000040f05e\n.text:000000000040f061\n.text:000000000040f064\n.text:000000000040f06a\n.text:000000000040f06d\n.text:000000000040f06f\n.text:000000000040f072\n.text:000000000040f078\n.text:000000000040f07b\n.text:000000000040f081\n.text:000000000040f084\n.text:000000000040f087\n.text:000000000040f08b\n.text:000000000040f090\n.text:000000000040f095\n.text:000000000040f09b\n.text:000000000040f0a0\n.text:000000000040f0a5\n.text:000000000040f0a8\n.text:000000000040f0ad\n.text:000000000040f0b0\n.text:000000000040f0b5\n.text:000000000040f0b8\n.text:000000000040f0bd\n.text:000000000040f0c0\n.text:000000000040f0c5\n.text:000000000040f0ca\n.text:000000000040f0cd\n.text:000000000040f0d2\n.text:000000000040f0d5\n.text:000000000040f0df\n.text:000000000040f0e3\n.text:000000000040f0e6\n.text:000000000040f0e8\n.text:000000000040f0ea\n.text:000000000040f0ef\n.text:000000000040f0f2\n.text:000000000040f0f5\n.text:000000000040f0fa\n.text:000000000040f0ff\n.text:000000000040f104\n.text:000000000040f10a\n.text:000000000040f10f\n.text:000000000040f112\n.text:000000000040f115\n.text:000000000040f11a\n.text:000000000040f11f\n.text:000000000040f124\n.text:000000000040f127\n.text:000000000040f12a\n.text:000000000040f12d\n.text:000000000040f132\n.text:000000000040f135\n.text:000000000040f13a\n.text:000000000040f144\n.text:000000000040f147\n.text:000000000040f14b\n.text:000000000040f150\n.text:000000000040f155\n.text:000000000040f158\n.text:000000000040f15b\n.text:000000000040f15e\n.text:000000000040f163\n.text:000000000040f166\n.text:000000000040f16b\n.text:000000000040f175\n.text:000000000040f178\n.text:000000000040f17c\n.text:000000000040f181\n.text:000000000040f186\n.text:000000000040f189\n.text:000000000040f18e\n.text:000000000040f193\n.text:000000000040f198\n.text:000000000040f19d\n.text:000000000040f1a2\n.text:000000000040f1a7\n.text:000000000040f1aa\n.text:000000000040f1ad\n.text:000000000040f1b0\n.text:000000000040f1b3\n.text:000000000040f1bb\n.text:000000000040f1be\n.text:000000000040f1c0\n.text:000000000040f1c3\n.text:000000000040f1c7\n.text:000000000040f1ca\n.text:000000000040f1cd\n.text:000000000040f1d1\n.text:000000000040f1d6\n.text:000000000040f1d9\n.text:000000000040f1dc\n.text:000000000040f1e2\n.text:000000000040f1e5\n.text:000000000040f1e7\n.text:000000000040f1ea\n.text:000000000040f1ed\n.text:000000000040f1f0\n.text:000000000040f1f2\n.text:000000000040f1f4\n.text:000000000040f1f6\n.text:000000000040f1f9\n.text:000000000040f1fc\n.text:000000000040f200\n.text:000000000040f205\n.text:000000000040f207\n.text:000000000040f20c\n.text:000000000040f20e\n.text:000000000040f211\n.text:000000000040f213\n.text:000000000040f218\n.text:000000000040f21b\n.text:000000000040f21e\n.text:000000000040f221\n.text:000000000040f226\n.text:000000000040f229\n.text:000000000040f22e\n.text:000000000040f231\n.text:000000000040f236\n.text:000000000040f238\n.text:000000000040f23b\n.text:000000000040f23e\n.text:000000000040f241\n.text:000000000040f244\n.text:000000000040f247\n.text:000000000040f24c\n.text:000000000040f24e\n.text:000000000040f251\n.text:000000000040f254\n.text:000000000040f257\n.text:000000000040f25a\n.text:000000000040f25d\n.text:000000000040f262\n.text:000000000040f265\n.text:000000000040f268\n.text:000000000040f26b\n.text:000000000040f270\n.text:000000000040f273\n.text:000000000040f27d\n.text:000000000040f281\n.text:000000000040f285\n.text:000000000040f28b\n.text:000000000040f291\n.text:000000000040f293\n.text:000000000040f296\n.text:000000000040f298\n.text:000000000040f29c\n.text:000000000040f29e\n.text:000000000040f2a1\n.text:000000000040f2a4\n.text:000000000040f2ab\n.text:000000000040f2ac\n.text:000000000040f2ae\n.text:000000000040f2b0\n.text:000000000040f2b2\n.text:000000000040f2b4\n.text:000000000040f2b5\n'
p300
tp301
sS'adjust_value'
p302
(S'\n__stdcall adjust_value()\n'
p303
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p304
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x0040aecc\nFLD tword ptr [0x00416e90]\nFUCOMIP ST0,ST1\nJBE 0x0040aecc\nFLD dword ptr [0x00416df8]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x416e80 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x416e80 + RDX*0x4]\nRET\n'
p305
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d 7d c0 00 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 d7 bf 00 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 80 6e 41 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 80 6e 41 00\nc3\n'
p306
S'.text:000000000040ae00\n.text:000000000040ae04\n.text:000000000040ae07\n.text:000000000040ae0d\n.text:000000000040ae13\n.text:000000000040ae15\n.text:000000000040ae1b\n.text:000000000040ae21\n.text:000000000040ae23\n.text:000000000040ae25\n.text:000000000040ae29\n.text:000000000040ae2e\n.text:000000000040ae35\n.text:000000000040ae39\n.text:000000000040ae3e\n.text:000000000040ae42\n.text:000000000040ae46\n.text:000000000040ae4a\n.text:000000000040ae4f\n.text:000000000040ae56\n.text:000000000040ae5a\n.text:000000000040ae5f\n.text:000000000040ae61\n.text:000000000040ae65\n.text:000000000040ae69\n.text:000000000040ae73\n.text:000000000040ae78\n.text:000000000040ae7a\n.text:000000000040ae7c\n.text:000000000040ae7e\n.text:000000000040ae84\n.text:000000000040ae86\n.text:000000000040ae8a\n.text:000000000040ae8f\n.text:000000000040ae91\n.text:000000000040ae94\n.text:000000000040ae97\n.text:000000000040ae9b\n.text:000000000040aea2\n.text:000000000040aea4\n.text:000000000040aea6\n.text:000000000040aea9\n.text:000000000040aeac\n.text:000000000040aeae\n.text:000000000040aeb1\n.text:000000000040aeb4\n.text:000000000040aeb6\n.text:000000000040aeb9\n.text:000000000040aebe\n.text:000000000040aec1\n.text:000000000040aec5\n.text:000000000040aecc\n'
p307
tp308
sS'quotearg_custom'
p309
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p310
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p311
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040d340\n'
p312
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p313
S'.text:000000000040d3c0\n.text:000000000040d3c3\n.text:000000000040d3c6\n.text:000000000040d3c9\n.text:000000000040d3cb\n.text:000000000040d3ce\n.text:000000000040d3d1\n.text:000000000040d3d4\n'
p314
tp315
sS'close'
p316
(S'\n__stdcall close(int __fd)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0061d190)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0061d190]\n'
p319
S'ff 25 0a ae 21 00\n'
p320
S'.plt:0000000000402380\n'
p321
tp322
sS'restore_default_color'
p323
(S'\n__stdcall restore_default_color()\n'
p324
V\u000avoid restore_default_color(void)\u000a\u000a{\u000a  put_indicator(color_indicator);\u000a  put_indicator(color_indicator + 1);\u000a  return;\u000a}\u000a\u000a
p325
S'PUSH RAX\nMOV EDI,0x61d380\nCALL 0x00405680\nMOV EDI,0x61d390\nPOP RAX\nJMP 0x00405680\n'
p326
S'50\nbf 80 d3 61 00\ne8 e5 05 00 00\nbf 90 d3 61 00\n58\ne9 da 05 00 00\n'
p327
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405096\n.text:000000000040509b\n.text:00000000004050a0\n.text:00000000004050a1\n'
p328
tp329
sS'getenv'
p330
(S'\n__stdcall getenv(char * __name)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0061d020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0061d020]\n'
p333
S'ff 25 7a af 21 00\n'
p334
S'.plt:00000000004020a0\n'
p335
tp336
sS'abmon_init'
p337
(S'\n__stdcall abmon_init()\n'
p338
V\u000asize_t abmon_init(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *src;\u000a  size_t sVar2;\u000a  long lVar3;\u000a  char *dest;\u000a  size_t local_28;\u000a  \u000a  required_mon_width = 5;\u000a  do {\u000a    sVar1 = required_mon_width;\u000a    required_mon_width = 0;\u000a    dest = abmon;\u000a    lVar3 = 0;\u000a    do {\u000a      local_28 = sVar1;\u000a      src = nl_langinfo((int)lVar3 + 0x2000e);\u000a      sVar2 = mbsalign(src,dest,0xa1,&local_28);\u000a      if (0xa0 < sVar2) {\u000a        required_mon_width = 0;\u000a        return 0;\u000a      }\u000a      if (local_28 < required_mon_width) {\u000a        local_28 = required_mon_width;\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a      dest = dest + 0xa1;\u000a      required_mon_width = local_28;\u000a    } while (lVar3 < 0xc);\u000a    required_mon_width = local_28;\u000a  } while (local_28 < sVar1);\u000a  required_mon_width = local_28;\u000a  return local_28;\u000a}\u000a\u000a
p339
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [0x0061d890],0x5\nMOV R14,RSP\nMOV R15,qword ptr [0x0061d890]\nMOV qword ptr [0x0061d890],0x0\nMOV R12D,0x61d8a0\nXOR EBX,EBX\nMOV qword ptr [RSP],R15\nLEA EDI,[0x2000e + RBX]\nCALL 0x00402500\nMOV EDX,0xa1\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,RAX\nMOV RSI,R12\nMOV RCX,R14\nCALL 0x0040b500\nCMP RAX,0xa0\nJA 0x004058a7\nMOV RAX,qword ptr [0x0061d890]\nMOV RCX,qword ptr [RSP]\nCMP RAX,RCX\nCMOVA RCX,RAX\nMOV qword ptr [0x0061d890],RCX\nINC RBX\nADD R12,0xa1\nCMP RBX,0xc\nJL 0x00405840\nMOV RAX,qword ptr [0x0061d890]\nCMP R15,RAX\nJA 0x00405826\nJMP 0x004058b4\nMOV qword ptr [0x0061d890],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p340
S'41 57\n41 56\n41 54\n53\n50\n48 c7 05 6d 80 21 00 05 00 00 00\n49 89 e6\n4c 8b 3d 63 80 21 00\n48 c7 05 58 80 21 00 00 00 00 00\n41 bc a0 d8 61 00\n31 db\n4c 89 3c 24\n8d bb 0e 00 02 00\ne8 b1 cc ff ff\nba a1 00 00 00\n45 31 c0\n45 31 c9\n48 89 c7\n4c 89 e6\n4c 89 f1\ne8 98 5c 00 00\n48 3d a0 00 00 00\n77 37\n48 8b 05 19 80 21 00\n48 8b 0c 24\n48 39 c8\n48 0f 47 c8\n48 89 0d 07 80 21 00\n48 ff c3\n49 81 c4 a1 00 00 00\n48 83 fb 0c\n7c a7\n48 8b 05 f0 7f 21 00\n49 39 c7\n77 81\neb 0d\n48 c7 05 de 7f 21 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p341
S'.text:0000000000405810\n.text:0000000000405812\n.text:0000000000405814\n.text:0000000000405816\n.text:0000000000405817\n.text:0000000000405818\n.text:0000000000405823\n.text:0000000000405826\n.text:000000000040582d\n.text:0000000000405838\n.text:000000000040583e\n.text:0000000000405840\n.text:0000000000405844\n.text:000000000040584a\n.text:000000000040584f\n.text:0000000000405854\n.text:0000000000405857\n.text:000000000040585a\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405863\n.text:0000000000405868\n.text:000000000040586e\n.text:0000000000405870\n.text:0000000000405877\n.text:000000000040587b\n.text:000000000040587e\n.text:0000000000405882\n.text:0000000000405889\n.text:000000000040588c\n.text:0000000000405893\n.text:0000000000405897\n.text:0000000000405899\n.text:00000000004058a0\n.text:00000000004058a3\n.text:00000000004058a5\n.text:00000000004058a7\n.text:00000000004058b2\n.text:00000000004058b4\n.text:00000000004058b8\n.text:00000000004058b9\n.text:00000000004058bb\n.text:00000000004058bd\n.text:00000000004058bf\n'
p342
tp343
sS'xstrcoll_size'
p344
(S'\n__stdcall xstrcoll_size(V a, V b)\n'
p345
V\u000aint xstrcoll_size(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_size((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'MOV EDX,0x407180\nJMP 0x00407220\n'
p347
S'ba 80 71 40 00\ne9 e6 08 00 00\n'
p348
S'.text:0000000000406930\n.text:0000000000406935\n'
p349
tp350
sS'putchar_unlocked'
p351
(S'\n__stdcall putchar_unlocked(int __c)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0061d200)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0061d200]\n'
p354
S'ff 25 9a ad 21 00\n'
p355
S'.plt:0000000000402460\n'
p356
tp357
sS'fnmatch'
p358
(S'\n__stdcall fnmatch(char * __pattern, char * __name, int __flags)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fnmatch(char *__pattern,char *__name,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fnmatch_0061d170)();\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0061d170]\n'
p361
S'ff 25 2a ae 21 00\n'
p362
S'.plt:0000000000402340\n'
p363
tp364
sS'make_link_name'
p365
(S'\n__stdcall make_link_name(char * name, char * linkname)\n'
p366
V\u000achar * make_link_name(char *name,char *linkname)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  char *__dest;\u000a  char *__dest_00;\u000a  \u000a  if (linkname == (char *)0x0) {\u000a    return (char *)0x0;\u000a  }\u000a  if ((*linkname != '/') && (sVar1 = dir_len(name), sVar1 != 0)) {\u000a    sVar2 = strlen(linkname);\u000a    __dest_00 = (char *)xmalloc(sVar1 + 2 + sVar2);\u000a    __dest = stpncpy(__dest_00,name,(ulong)(name[sVar1 - 1] != '/') + sVar1);\u000a    stpcpy(__dest,linkname);\u000a    return __dest_00;\u000a  }\u000a  __dest_00 = xstrdup(linkname);\u000a  return __dest_00;\u000a}\u000a\u000a
p367
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x004063d6\nCMP byte ptr [RBX],0x2f\nJZ 0x004063c3\nMOV RDI,R14\nCALL 0x00409040\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004063c3\nMOV RDI,RBX\nCALL 0x00402290\nLEA RDI,[R12 + RAX*0x1 + 0x2]\nCALL 0x0040f910\nMOV R15,RAX\nXOR EDX,EDX\nCMP byte ptr [R14 + R12*0x1 + -0x1],0x2f\nSETNZ DL\nADD RDX,R12\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00402580\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00402260\nJMP 0x004063d9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x0040fa80\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p368
S'41 57\n41 56\n41 54\n53\n50\n48 89 f3\n49 89 fe\n48 85 db\n74 63\n80 3b 2f\n74 4b\n4c 89 f7\ne8 c0 2c 00 00\n49 89 c4\n4d 85 e4\n74 3b\n48 89 df\ne8 00 bf ff ff\n49 8d 7c 04 02\ne8 76 95 00 00\n49 89 c7\n31 d2\n43 80 7c 26 ff 2f\n0f 95 c2\n4c 01 e2\n4c 89 ff\n4c 89 f6\ne8 ca c1 ff ff\n48 89 c7\n48 89 de\ne8 9f be ff ff\neb 16\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa 96 00 00\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p369
S'.text:0000000000406360\n.text:0000000000406362\n.text:0000000000406364\n.text:0000000000406366\n.text:0000000000406367\n.text:0000000000406368\n.text:000000000040636b\n.text:000000000040636e\n.text:0000000000406371\n.text:0000000000406373\n.text:0000000000406376\n.text:0000000000406378\n.text:000000000040637b\n.text:0000000000406380\n.text:0000000000406383\n.text:0000000000406386\n.text:0000000000406388\n.text:000000000040638b\n.text:0000000000406390\n.text:0000000000406395\n.text:000000000040639a\n.text:000000000040639d\n.text:000000000040639f\n.text:00000000004063a5\n.text:00000000004063a8\n.text:00000000004063ab\n.text:00000000004063ae\n.text:00000000004063b1\n.text:00000000004063b6\n.text:00000000004063b9\n.text:00000000004063bc\n.text:00000000004063c1\n.text:00000000004063c3\n.text:00000000004063c6\n.text:00000000004063ca\n.text:00000000004063cb\n.text:00000000004063cd\n.text:00000000004063cf\n.text:00000000004063d1\n.text:00000000004063d6\n.text:00000000004063d9\n.text:00000000004063dc\n.text:00000000004063e0\n.text:00000000004063e1\n.text:00000000004063e3\n.text:00000000004063e5\n.text:00000000004063e7\n'
p370
tp371
sS'rpl_fseeko'
p372
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p373
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0061d2d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00411128\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00411128\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0041113a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402610\nMOV RDI,RBX\nCALL 0x00402480\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00402310\nCMP RAX,-0x1\nJZ 0x00411163\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00411168\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p375
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 14 ff ff\n48 89 df\ne8 3e 13 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 c1 11 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p376
S'.text:0000000000411100\n.text:0000000000411101\n.text:0000000000411103\n.text:0000000000411104\n.text:0000000000411107\n.text:000000000041110a\n.text:000000000041110d\n.text:0000000000411111\n.text:0000000000411115\n.text:0000000000411117\n.text:000000000041111b\n.text:000000000041111f\n.text:0000000000411121\n.text:0000000000411126\n.text:0000000000411128\n.text:000000000041112b\n.text:000000000041112e\n.text:0000000000411131\n.text:0000000000411132\n.text:0000000000411134\n.text:0000000000411135\n.text:000000000041113a\n.text:000000000041113d\n.text:0000000000411142\n.text:0000000000411144\n.text:0000000000411147\n.text:000000000041114a\n.text:000000000041114f\n.text:0000000000411153\n.text:0000000000411155\n.text:0000000000411158\n.text:000000000041115f\n.text:0000000000411161\n.text:0000000000411163\n.text:0000000000411168\n.text:0000000000411169\n.text:000000000041116b\n.text:000000000041116c\n'
p377
tp378
sS'strcmp_df_atime'
p379
(S'\n__stdcall strcmp_df_atime(V a, V b)\n'
p380
V\u000aint strcmp_df_atime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_atime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p381
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x004070ba\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x004070dd\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x004070dd\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407320\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p382
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 20 f4 ff ff\n89 c3\n4c 89 f7\ne8 16 f4 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 43 02 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p383
S'.text:0000000000407090\n.text:0000000000407092\n.text:0000000000407094\n.text:0000000000407095\n.text:0000000000407098\n.text:000000000040709b\n.text:00000000004070a0\n.text:00000000004070a2\n.text:00000000004070a5\n.text:00000000004070aa\n.text:00000000004070ac\n.text:00000000004070ae\n.text:00000000004070b0\n.text:00000000004070b3\n.text:00000000004070b8\n.text:00000000004070ba\n.text:00000000004070bc\n.text:00000000004070be\n.text:00000000004070c3\n.text:00000000004070c6\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d0\n.text:00000000004070d3\n.text:00000000004070d4\n.text:00000000004070d6\n.text:00000000004070d8\n.text:00000000004070dd\n.text:00000000004070df\n.text:00000000004070e0\n.text:00000000004070e2\n.text:00000000004070e4\n'
p384
tp385
sS'rotr8'
p386
(S'\n__stdcall rotr8()\n'
p387
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p388
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p389
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p390
S'.text:0000000000410b20\n.text:0000000000410b22\n.text:0000000000410b24\n.text:0000000000410b26\n.text:0000000000410b2b\n.text:0000000000410b2d\n.text:0000000000410b2f\n.text:0000000000410b31\n.text:0000000000410b33\n'
p391
tp392
sS'is_prime'
p393
(S'\n__stdcall is_prime(size_t candidate)\n'
p394
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p395
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x0040a7e5\nTEST CL,CL\nJNZ 0x0040a7e5\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x0040a7e5\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x0040a7c0\nRET\n'
p396
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p397
S'.text:000000000040a780\n.text:000000000040a783\n.text:000000000040a78d\n.text:000000000040a790\n.text:000000000040a793\n.text:000000000040a796\n.text:000000000040a79a\n.text:000000000040a79d\n.text:000000000040a7a0\n.text:000000000040a7a3\n.text:000000000040a7a7\n.text:000000000040a7a9\n.text:000000000040a7ab\n.text:000000000040a7ad\n.text:000000000040a7b2\n.text:000000000040a7b7\n.text:000000000040a7bc\n.text:000000000040a7c0\n.text:000000000040a7c3\n.text:000000000040a7c5\n.text:000000000040a7c8\n.text:000000000040a7cb\n.text:000000000040a7ce\n.text:000000000040a7d1\n.text:000000000040a7d4\n.text:000000000040a7d7\n.text:000000000040a7d9\n.text:000000000040a7dd\n.text:000000000040a7e1\n.text:000000000040a7e3\n.text:000000000040a7e5\n'
p398
tp399
sS'fscanf'
p400
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0061d180)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0061d180]\n'
p403
S'ff 25 1a ae 21 00\n'
p404
S'.plt:0000000000402360\n'
p405
tp406
sS'memcpy'
p407
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0061d1f0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0061d1f0]\n'
p410
S'ff 25 aa ad 21 00\n'
p411
S'.plt:0000000000402440\n'
p412
tp413
sS'xstrcoll_df_name'
p414
(S'\n__stdcall xstrcoll_df_name(V a, V b)\n'
p415
V\u000aint xstrcoll_df_name(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_name((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p416
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x004065aa\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x004065cd\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x004065cd\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407170\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p417
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 30 ff ff ff\n89 c3\n4c 89 f7\ne8 26 ff ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 a3 0b 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p418
S'.text:0000000000406580\n.text:0000000000406582\n.text:0000000000406584\n.text:0000000000406585\n.text:0000000000406588\n.text:000000000040658b\n.text:0000000000406590\n.text:0000000000406592\n.text:0000000000406595\n.text:000000000040659a\n.text:000000000040659c\n.text:000000000040659e\n.text:00000000004065a0\n.text:00000000004065a3\n.text:00000000004065a8\n.text:00000000004065aa\n.text:00000000004065ac\n.text:00000000004065ae\n.text:00000000004065b3\n.text:00000000004065b6\n.text:00000000004065b8\n.text:00000000004065bd\n.text:00000000004065c0\n.text:00000000004065c3\n.text:00000000004065c4\n.text:00000000004065c6\n.text:00000000004065c8\n.text:00000000004065cd\n.text:00000000004065cf\n.text:00000000004065d0\n.text:00000000004065d2\n.text:00000000004065d4\n'
p419
tp420
sS'stophandler'
p421
(S'\n__stdcall stophandler()\n'
p422
V\u000avoid stophandler(void)\u000a\u000a{\u000a  if (interrupt_signal == 0) {\u000a    stop_signal_count = stop_signal_count + 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p423
S'CMP dword ptr [0x0061d820],0x0\nJNZ 0x00403f4f\nINC dword ptr [0x0061d81c]\nRET\n'
p424
S'83 3d d9 98 21 00 00\n75 06\nff 05 cd 98 21 00\nc3\n'
p425
S'.text:0000000000403f40\n.text:0000000000403f47\n.text:0000000000403f49\n.text:0000000000403f4f\n'
p426
tp427
sS'timetostr'
p428
(S'\n__stdcall timetostr(intmax_t i, char * buf)\n'
p429
V\u000achar * timetostr(intmax_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p430
S'JMP 0x0040b3e0\n'
p431
S'e9 ab 28 00 00\n'
p432
S'.text:0000000000408b30\n'
p433
tp434
sS'setenv_TZ'
p435
(S'\n__stdcall setenv_TZ(char * tz)\n'
p436
V\u000aint setenv_TZ(char *tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (tz != (char *)0x0) {\u000a    iVar1 = (*(code *)PTR_setenv_0061d0d0)("TZ",tz,1);\u000a    return iVar1;\u000a  }\u000a  iVar1 = (*(code *)PTR_unsetenv_0061d2e8)("TZ");\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'MOV RAX,RDI\nMOV EDI,0x4183df\nTEST RAX,RAX\nJZ 0x00410a3a\nMOV EDX,0x1\nMOV RSI,RAX\nJMP 0x00402200\nJMP 0x00402630\n'
p438
S'48 89 f8\nbf df 83 41 00\n48 85 c0\n74 0d\nba 01 00 00 00\n48 89 c6\ne9 c6 17 ff ff\ne9 f1 1b ff ff\n'
p439
S'.text:0000000000410a20\n.text:0000000000410a23\n.text:0000000000410a28\n.text:0000000000410a2b\n.text:0000000000410a2d\n.text:0000000000410a32\n.text:0000000000410a35\n.text:0000000000410a3a\n'
p440
tp441
sS'quotearg_n_custom_mem'
p442
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p443
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0061e1e0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0061e1d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061e1c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061e1b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040c0b0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040cf40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p445
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 77 0e 21 00\n48 89 44 24 30\n0f 10 05 5b 0e 21 00\n0f 29 44 24 20\n0f 10 05 3f 0e 21 00\n0f 29 44 24 10\n0f 10 05 23 0e 21 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p446
S'.text:000000000040d350\n.text:000000000040d351\n.text:000000000040d353\n.text:000000000040d355\n.text:000000000040d356\n.text:000000000040d35a\n.text:000000000040d35d\n.text:000000000040d360\n.text:000000000040d362\n.text:000000000040d369\n.text:000000000040d36e\n.text:000000000040d375\n.text:000000000040d37a\n.text:000000000040d381\n.text:000000000040d386\n.text:000000000040d38d\n.text:000000000040d391\n.text:000000000040d394\n.text:000000000040d397\n.text:000000000040d39c\n.text:000000000040d39e\n.text:000000000040d3a1\n.text:000000000040d3a4\n.text:000000000040d3a7\n.text:000000000040d3ac\n.text:000000000040d3b0\n.text:000000000040d3b1\n.text:000000000040d3b3\n.text:000000000040d3b5\n.text:000000000040d3b6\n'
p447
tp448
sS'localtime'
p449
(S'\n__stdcall localtime(time_t * __timer)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_0061d040)();\u000a  return ptVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0061d040]\n'
p452
S'ff 25 5a af 21 00\n'
p453
S'.plt:00000000004020e0\n'
p454
tp455
sS'_init'
p456
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p457
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0061cff8;\u000a  if (PTR___gmon_start___0061cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0061cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0061cff8]\nTEST RAX,RAX\nJZ 0x00402072\nCALL RAX\nADD RSP,0x8\nRET\n'
p459
S'48 83 ec 08\n48 8b 05 8d af 21 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p460
S'.init:0000000000402060\n.init:0000000000402064\n.init:000000000040206b\n.init:000000000040206e\n.init:0000000000402070\n.init:0000000000402072\n.init:0000000000402076\n'
p461
tp462
sS'_obstack_allocated_p'
p463
(S'\n__stdcall _obstack_allocated_p(obstack * h, void * obj)\n'
p464
V\u000aint _obstack_allocated_p(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  \u000a  p_Var1 = h->chunk;\u000a  while( true ) {\u000a    if (p_Var1 == (_obstack_chunk *)0x0) {\u000a      return 0;\u000a    }\u000a    if ((p_Var1 < obj) && (obj <= p_Var1->limit)) break;\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p465
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJNZ 0x004104c9\nJMP 0x004104d8\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJZ 0x004104d8\nCMP RCX,RSI\nJNC 0x004104c0\nCMP qword ptr [RCX],RSI\nJC 0x004104c0\nMOV EAX,0x1\nRET\n'
p466
S'48 8b 4f 08\n31 c0\n48 85 c9\n75 0e\neb 1b\n48 8b 49 08\n48 85 c9\n74 0f\n48 39 f1\n73 f2\n48 39 31\n72 ed\nb8 01 00 00 00\nc3\n'
p467
S'.text:00000000004104b0\n.text:00000000004104b4\n.text:00000000004104b6\n.text:00000000004104b9\n.text:00000000004104bb\n.text:00000000004104c0\n.text:00000000004104c4\n.text:00000000004104c7\n.text:00000000004104c9\n.text:00000000004104cc\n.text:00000000004104ce\n.text:00000000004104d1\n.text:00000000004104d3\n.text:00000000004104d8\n'
p468
tp469
sS'dev_ino_pop'
p470
(S'\n__stdcall dev_ino_pop()\n'
p471
V\u000adev_ino dev_ino_pop(void)\u000a\u000a{\u000a  dev_ino *pdVar1;\u000a  \u000a  if ((char *)0xf < dev_ino_obstack.next_free + -(long)dev_ino_obstack.object_base) {\u000a    pdVar1 = (dev_ino *)(dev_ino_obstack.next_free + -0x10);\u000a    dev_ino_obstack.next_free = dev_ino_obstack.next_free + -0x10;\u000a    return *pdVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("dev_ino_size <= obstack_object_size (&dev_ino_obstack)","src/ls.c",0x3e3,\u000a                "struct dev_ino dev_ino_pop(void)");\u000a}\u000a\u000a
p472
S'MOV RCX,qword ptr [0x0061d6f0]\nMOV RAX,RCX\nSUB RAX,qword ptr [0x0061d6e8]\nCMP RAX,0xf\nJBE 0x00404bab\nLEA RAX,[RCX + -0x10]\nMOV qword ptr [0x0061d6f0],RAX\nMOV RAX,qword ptr [RCX + -0x10]\nMOV RDX,qword ptr [RCX + -0x8]\nRET\nPUSH RAX\nMOV EDI,0x41634a\nMOV ESI,0x4146d9\nMOV EDX,0x3e3\nMOV ECX,0x416381\nCALL 0x00402330\n'
p473
S'48 8b 0d 69 8b 21 00\n48 89 c8\n48 2b 05 57 8b 21 00\n48 83 f8 0f\n76 14\n48 8d 41 f0\n48 89 05 4e 8b 21 00\n48 8b 41 f0\n48 8b 51 f8\nc3\n50\nbf 4a 63 41 00\nbe d9 46 41 00\nba e3 03 00 00\nb9 81 63 41 00\ne8 6b d7 ff ff\n'
p474
S'.text:0000000000404b80\n.text:0000000000404b87\n.text:0000000000404b8a\n.text:0000000000404b91\n.text:0000000000404b95\n.text:0000000000404b97\n.text:0000000000404b9b\n.text:0000000000404ba2\n.text:0000000000404ba6\n.text:0000000000404baa\n.text:0000000000404bab\n.text:0000000000404bac\n.text:0000000000404bb1\n.text:0000000000404bb6\n.text:0000000000404bbb\n.text:0000000000404bc0\n'
p475
tp476
sS'get_stat_birthtime'
p477
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p478
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p479
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p480
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p481
S'.text:000000000040dab0\n.text:000000000040dab7\n.text:000000000040dabe\n'
p482
tp483
sS'realloc'
p484
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0061d288)();\u000a  return pvVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0061d288]\n'
p487
S'ff 25 12 ad 21 00\n'
p488
S'.plt:0000000000402570\n'
p489
tp490
sS'strmode'
p491
(S'\n__stdcall strmode(char * str)\n'
p492
V\u000avoid strmode(char *str)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  byte bVar4;\u000a  byte bVar5;\u000a  char cVar6;\u000a  uint uVar7;\u000a  undefined in_SIL;\u000a  char cVar8;\u000a  undefined7 in_register_00000031;\u000a  char cVar9;\u000a  byte bVar10;\u000a  \u000a  pcVar1 = (char *)CONCAT71(in_register_00000031,in_SIL);\u000a  cVar2 = ftypelet();\u000a  *pcVar1 = cVar2;\u000a  cVar8 = 'r';\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x100) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[1] = cVar2;\u000a  uVar7 = (uint)((ulong)str & 0xffffffff);\u000a  bVar3 = (byte)((ulong)str & 0xffffffff);\u000a  pcVar1[2] = ((char)bVar3 >> 7 & 0x4aU) + 0x2d;\u000a  bVar10 = 0x78;\u000a  bVar4 = 0x78;\u000a  if (((ulong)str & 0x40) == 0) {\u000a    bVar4 = 0x2d;\u000a  }\u000a  bVar5 = (byte)((uVar7 & 0x40) >> 1) | 0x53;\u000a  if (((ulong)str & 0x800) == 0) {\u000a    bVar5 = bVar4;\u000a  }\u000a  pcVar1[3] = bVar5;\u000a  cVar2 = 'r';\u000a  if (((ulong)str & 0x20) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[4] = cVar2;\u000a  cVar6 = 'w';\u000a  cVar2 = 'w';\u000a  if (((ulong)str & 0x10) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  pcVar1[5] = cVar2;\u000a  cVar2 = 'x';\u000a  if (((ulong)str & 8) == 0) {\u000a    cVar2 = '-';\u000a  }\u000a  cVar9 = (bVar3 & 8) * 4 + 'S';\u000a  if (((ulong)str & 0x400) == 0) {\u000a    cVar9 = cVar2;\u000a  }\u000a  pcVar1[6] = cVar9;\u000a  if (((ulong)str & 4) == 0) {\u000a    cVar8 = '-';\u000a  }\u000a  pcVar1[7] = cVar8;\u000a  if (((ulong)str & 2) == 0) {\u000a    cVar6 = '-';\u000a  }\u000a  pcVar1[8] = cVar6;\u000a  if (((ulong)str & 1) == 0) {\u000a    bVar10 = 0x2d;\u000a  }\u000a  if (((ulong)str & 0x200) != 0) {\u000a    bVar10 = (byte)((uVar7 & 1) << 5) | 0x54;\u000a  }\u000a  pcVar1[9] = bVar10;\u000a  pcVar1[10] = ' ';\u000a  pcVar1[0xb] = 0;\u000a  return;\u000a}\u000a\u000a
p493
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV EBX,EDI\nCALL 0x00409250\nMOV byte ptr [R14],AL\nMOV AL,BH\nTEST AL,0x1\nMOV SIL,0x72\nMOV CL,0x72\nJNZ 0x0040919e\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x1],CL\nMOV ECX,EBX\nSAR CL,0x7\nAND CL,0x4a\nADD CL,0x2d\nMOV byte ptr [R14 + 0x2],CL\nMOV ECX,EBX\nAND ECX,0x40\nMOV EDX,ECX\nSHR EDX,1\nOR EDX,0x53\nTEST ECX,ECX\nMOV R8B,0x78\nMOV CL,0x78\nJNZ 0x004091c8\nMOV CL,0x2d\nTEST AL,0x8\nJNZ 0x004091ce\nMOV DL,CL\nMOV byte ptr [R14 + 0x3],DL\nTEST BL,0x20\nMOV CL,0x72\nJNZ 0x004091db\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x4],CL\nTEST BL,0x10\nMOV DL,0x77\nMOV CL,0x77\nJNZ 0x004091ea\nMOV CL,0x2d\nMOV byte ptr [R14 + 0x5],CL\nMOV ECX,EBX\nAND ECX,0x8\nLEA EDI,[0x53 + RCX*0x4]\nMOV CL,0x78\nJNZ 0x00409200\nMOV CL,0x2d\nTEST AL,0x4\nJNZ 0x00409207\nMOV DIL,CL\nMOV byte ptr [R14 + 0x6],DIL\nTEST BL,0x4\nJNZ 0x00409213\nMOV SIL,0x2d\nMOV byte ptr [R14 + 0x7],SIL\nTEST BL,0x2\nJNZ 0x0040921e\nMOV DL,0x2d\nMOV byte ptr [R14 + 0x8],DL\nAND EBX,0x1\nJNZ 0x0040922a\nMOV R8B,0x2d\nTEST AL,0x2\nJZ 0x00409237\nSHL EBX,0x5\nOR EBX,0x54\nMOV R8D,EBX\nMOV byte ptr [R14 + 0x9],R8B\nMOV byte ptr [R14 + 0xa],0x20\nMOV byte ptr [R14 + 0xb],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p494
S'41 56\n53\n50\n49 89 f6\n89 fb\ne8 c2 00 00 00\n41 88 06\n88 f8\na8 01\n40 b6 72\nb1 72\n75 02\nb1 2d\n41 88 4e 01\n89 d9\nc0 f9 07\n80 e1 4a\n80 c1 2d\n41 88 4e 02\n89 d9\n83 e1 40\n89 ca\nd1 ea\n83 ca 53\n85 c9\n41 b0 78\nb1 78\n75 02\nb1 2d\na8 08\n75 02\n88 ca\n41 88 56 03\nf6 c3 20\nb1 72\n75 02\nb1 2d\n41 88 4e 04\nf6 c3 10\nb2 77\nb1 77\n75 02\nb1 2d\n41 88 4e 05\n89 d9\n83 e1 08\n8d 3c 8d 53 00 00 00\nb1 78\n75 02\nb1 2d\na8 04\n75 03\n40 88 cf\n41 88 7e 06\nf6 c3 04\n75 03\n40 b6 2d\n41 88 76 07\nf6 c3 02\n75 02\nb2 2d\n41 88 56 08\n83 e3 01\n75 03\n41 b0 2d\na8 02\n74 09\nc1 e3 05\n83 cb 54\n41 89 d8\n45 88 46 09\n41 c6 46 0a 20\n41 c6 46 0b 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p495
S'.text:0000000000409180\n.text:0000000000409182\n.text:0000000000409183\n.text:0000000000409184\n.text:0000000000409187\n.text:0000000000409189\n.text:000000000040918e\n.text:0000000000409191\n.text:0000000000409193\n.text:0000000000409195\n.text:0000000000409198\n.text:000000000040919a\n.text:000000000040919c\n.text:000000000040919e\n.text:00000000004091a2\n.text:00000000004091a4\n.text:00000000004091a7\n.text:00000000004091aa\n.text:00000000004091ad\n.text:00000000004091b1\n.text:00000000004091b3\n.text:00000000004091b6\n.text:00000000004091b8\n.text:00000000004091ba\n.text:00000000004091bd\n.text:00000000004091bf\n.text:00000000004091c2\n.text:00000000004091c4\n.text:00000000004091c6\n.text:00000000004091c8\n.text:00000000004091ca\n.text:00000000004091cc\n.text:00000000004091ce\n.text:00000000004091d2\n.text:00000000004091d5\n.text:00000000004091d7\n.text:00000000004091d9\n.text:00000000004091db\n.text:00000000004091df\n.text:00000000004091e2\n.text:00000000004091e4\n.text:00000000004091e6\n.text:00000000004091e8\n.text:00000000004091ea\n.text:00000000004091ee\n.text:00000000004091f0\n.text:00000000004091f3\n.text:00000000004091fa\n.text:00000000004091fc\n.text:00000000004091fe\n.text:0000000000409200\n.text:0000000000409202\n.text:0000000000409204\n.text:0000000000409207\n.text:000000000040920b\n.text:000000000040920e\n.text:0000000000409210\n.text:0000000000409213\n.text:0000000000409217\n.text:000000000040921a\n.text:000000000040921c\n.text:000000000040921e\n.text:0000000000409222\n.text:0000000000409225\n.text:0000000000409227\n.text:000000000040922a\n.text:000000000040922c\n.text:000000000040922e\n.text:0000000000409231\n.text:0000000000409234\n.text:0000000000409237\n.text:000000000040923b\n.text:0000000000409240\n.text:0000000000409245\n.text:0000000000409249\n.text:000000000040924a\n.text:000000000040924c\n'
p496
tp497
sS'xstrcoll_mtime'
p498
(S'\n__stdcall xstrcoll_mtime(V a, V b)\n'
p499
V\u000aint xstrcoll_mtime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_mtime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'MOV EDX,0x407180\nJMP 0x00407260\n'
p501
S'ba 80 71 40 00\ne9 86 06 00 00\n'
p502
S'.text:0000000000406bd0\n.text:0000000000406bd5\n'
p503
tp504
sS'mbsalign'
p505
(S'\n__stdcall mbsalign(char * src, char * dest, size_t dest_size, size_t * width)\n'
p506
V\u000asize_t mbsalign(char *src,char *dest,size_t dest_size,size_t *width)\u000a\u000a{\u000a  char *dest_end;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  char *pcVar5;\u000a  char *dest_00;\u000a  wchar_t *__pwcs;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  char *n_spaces;\u000a  char *n_spaces_00;\u000a  char *pcVar6;\u000a  char *local_60;\u000a  char *local_48;\u000a  \u000a  pcVar6 = (char *)strlen(src);\u000a  if (((in_R9D & 2) == 0) && (sVar3 = __ctype_get_mb_cur_max(), 1 < sVar3)) {\u000a    sVar3 = mbstowcs((wchar_t *)0x0,src,0);\u000a    if ((sVar3 == 0xffffffffffffffff) ||\u000a       (__pwcs = (wchar_t *)malloc(sVar3 * 4 + 4), __pwcs == (wchar_t *)0x0)) {\u000a      __pwcs = (wchar_t *)0x0;\u000a      n_spaces = pcVar6;\u000ajoined_r0x0040b6f8:\u000a      local_60 = (char *)0x0;\u000a      n_spaces_00 = (char *)0xffffffffffffffff;\u000a      local_48 = src;\u000a      if ((in_R9D & 1) == 0) goto LAB_0040b6b2;\u000a    }\u000a    else {\u000a      sVar4 = mbstowcs(__pwcs,src,sVar3 + 1);\u000a      if (sVar4 == 0) {\u000a        local_60 = (char *)0x0;\u000a        n_spaces = pcVar6;\u000a        local_48 = src;\u000a      }\u000a      else {\u000a        __pwcs[sVar3] = L'\u005c0';\u000a        _Var1 = wc_ensure_printable(__pwcs);\u000a        iVar2 = wcswidth(__pwcs,sVar3 + 1);\u000a        n_spaces = (char *)(long)iVar2;\u000a        if (_Var1 == false) {\u000a          n_spaces_00 = pcVar6;\u000a          if (n_spaces < (char *)*width || n_spaces == (char *)*width) {\u000a            local_60 = (char *)0x0;\u000a            local_48 = src;\u000a            goto LAB_0040b5ff;\u000a          }\u000a        }\u000a        else {\u000a          n_spaces_00 = (char *)wcstombs((char *)0x0,__pwcs,0);\u000a        }\u000a        local_60 = (char *)malloc((size_t)(n_spaces_00 + 1));\u000a        if (local_60 == (char *)0x0) goto joined_r0x0040b6f8;\u000a        n_spaces = (char *)wc_truncate(__pwcs,*width);\u000a        pcVar6 = (char *)wcstombs(local_60,__pwcs,(size_t)(n_spaces_00 + 1));\u000a        local_48 = local_60;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_60 = (char *)0x0;\u000a    __pwcs = (wchar_t *)0x0;\u000a    n_spaces = pcVar6;\u000a    local_48 = src;\u000a  }\u000aLAB_0040b5ff:\u000a  n_spaces_00 = (char *)*width;\u000a  dest_end = n_spaces;\u000a  if (n_spaces_00 < n_spaces) {\u000a    pcVar6 = n_spaces_00;\u000a    dest_end = n_spaces_00;\u000a  }\u000a  dest_00 = n_spaces_00 + -(long)dest_end;\u000a  if (n_spaces_00 <= n_spaces) {\u000a    dest_00 = (char *)0x0;\u000a  }\u000a  *(char **)width = dest_end;\u000a  n_spaces_00 = dest_00;\u000a  n_spaces = (char *)0x0;\u000a  if (in_R8D != 0) {\u000a    if (in_R8D == 1) {\u000a      n_spaces_00 = (char *)0x0;\u000a      n_spaces = dest_00;\u000a    }\u000a    else {\u000a      n_spaces_00 = (char *)((ulong)dest_00 >> 1);\u000a      n_spaces = n_spaces_00 + (ulong)((uint)dest_00 & 1);\u000a    }\u000a  }\u000a  if ((in_R9D & 4) != 0) {\u000a    n_spaces = (char *)0x0;\u000a  }\u000a  if ((in_R9D & 8) != 0) {\u000a    n_spaces_00 = (char *)0x0;\u000a  }\u000a  if (dest_size != 0) {\u000a    dest_end = dest + (dest_size - 1);\u000a    pcVar5 = mbs_align_pad(dest,dest_end,(size_t)n_spaces);\u000a    dest_00 = dest_end + -(long)pcVar5;\u000a    if (pcVar6 < dest_end + -(long)pcVar5) {\u000a      dest_00 = pcVar6;\u000a    }\u000a    dest_00 = (char *)__mempcpy_chk(pcVar5,local_48,dest_00,0xffffffffffffffff);\u000a    mbs_align_pad(dest_00,dest_end,(size_t)n_spaces_00);\u000a  }\u000a  n_spaces_00 = n_spaces_00 + (long)(n_spaces + (long)pcVar6);\u000aLAB_0040b6b2:\u000a  free(__pwcs);\u000a  free(local_60);\u000a  return (size_t)n_spaces_00;\u000a}\u000a\u000a
p507
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R14D,R9D\nMOV dword ptr [RSP + 0x2c],R8D\nMOV R12,RCX\nMOV R13,RDX\nMOV RBP,RSI\nMOV RBX,RDI\nCALL 0x00402290\nMOV R15,RAX\nTEST R14B,0x2\nMOV qword ptr [RSP + 0x20],RBX\nMOV dword ptr [RSP + 0x4],R14D\nMOV qword ptr [RSP + 0x30],RBP\nJNZ 0x0040b5f0\nCALL 0x00402280\nCMP RAX,0x2\nJC 0x0040b5f0\nMOV qword ptr [RSP + 0x10],R12\nXOR EDI,EDI\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004021d0\nMOV RBX,RAX\nCMP RBX,-0x1\nJZ 0x0040b6d6\nLEA RDI,[0x4 + RBX*0x4]\nCALL 0x004024e0\nTEST RAX,RAX\nJZ 0x0040b6d6\nMOV RBP,R13\nLEA R14,[RBX + 0x1]\nMOV RDI,RAX\nMOV R13,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R14\nCALL 0x004021d0\nTEST RAX,RAX\nJZ 0x0040b700\nMOV dword ptr [R13 + RBX*0x4],0x0\nMOV RDI,R13\nCALL 0x0040b7c0\nMOV RDI,R13\nMOV R13D,EAX\nMOV RBX,RDI\nMOV RSI,R14\nCALL 0x004021b0\nMOVSXD R14,EAX\nTEST R13B,R13B\nMOV qword ptr [RSP + 0x18],RBX\nJZ 0x0040b717\nXOR EDI,EDI\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00402670\nMOV R13,RAX\nJMP 0x0040b724\nMOV RBP,R13\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EBX,EBX\nMOV R14,R15\nMOV RAX,qword ptr [R12]\nCMP R14,RAX\nMOV RCX,R14\nCMOVA RCX,RAX\nCMOVA R15,RAX\nMOV RDX,R12\nMOV R12,RAX\nSUB R12,RCX\nXOR R13D,R13D\nCMP RAX,R14\nCMOVBE R12,R13\nMOV qword ptr [RDX],RCX\nMOV EAX,dword ptr [RSP + 0x2c]\nTEST EAX,EAX\nJZ 0x0040b64f\nCMP EAX,0x1\nJNZ 0x0040b63c\nMOV R13,R12\nXOR R12D,R12D\nJMP 0x0040b64f\nMOV RAX,R12\nSHR RAX,1\nAND R12D,0x1\nADD R12,RAX\nMOV R13,R12\nMOV R12,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nTEST CL,0x4\nCMOVNZ R13,RAX\nTEST CL,0x8\nCMOVNZ R12,RAX\nTEST RBP,RBP\nJZ 0x0040b6ac\nMOV RDI,qword ptr [RSP + 0x30]\nLEA RBP,[RDI + RBP*0x1 + -0x1]\nMOV RSI,RBP\nMOV RDX,R13\nCALL 0x0040b880\nMOV RDX,RBP\nSUB RDX,RAX\nCMP R15,RDX\nCMOVC RDX,R15\nMOV RCX,-0x1\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x004020f0\nMOV RDI,RAX\nMOV RSI,RBP\nMOV RDX,R12\nCALL 0x0040b880\nADD R13,R15\nADD R13,R12\nMOV RDI,RBX\nCALL 0x004020d0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004020d0\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBP,R13\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nTEST R14B,0x1\nMOV R13,-0x1\nMOV EBX,0x0\nMOV R14,R15\nMOV R12,qword ptr [RSP + 0x10]\nJNZ 0x0040b5ff\nJMP 0x0040b6b2\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV R14,R15\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,R13\nJMP 0x0040b5ff\nMOV RAX,qword ptr [RSP + 0x10]\nCMP R14,qword ptr [RAX]\nMOV R13,R15\nJBE 0x0040b775\nINC R13\nMOV RDI,R13\nCALL 0x004024e0\nTEST RAX,RAX\nJZ 0x0040b78b\nMOV R15,RAX\nMOV qword ptr [RSP + 0x8],R15\nMOV R12,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [R12]\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RDI,RBX\nCALL 0x0040b810\nMOV R14,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R13\nCALL 0x00402670\nMOV R15,RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040b5ff\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RSP + 0x18]\nJMP 0x0040b5ff\nMOV R13,-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nTEST byte ptr [RSP + 0x4],0x1\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RSP + 0x18]\nJNZ 0x0040b5ff\nJMP 0x0040b6b2\n'
p508
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n45 89 ce\n44 89 44 24 2c\n49 89 cc\n49 89 d5\n48 89 f5\n48 89 fb\ne8 69 6d ff ff\n49 89 c7\n41 f6 c6 02\n48 89 5c 24 20\n44 89 74 24 04\n48 89 6c 24 30\n0f 85 ad 00 00 00\ne8 38 6d ff ff\n48 83 f8 02\n0f 82 9e 00 00 00\n4c 89 64 24 10\n31 ff\n31 d2\n48 89 de\ne8 6d 6c ff ff\n48 89 c3\n48 83 fb ff\n0f 84 66 01 00 00\n48 8d 3c 9d 04 00 00 00\ne8 63 6f ff ff\n48 85 c0\n0f 84 50 01 00 00\n4c 89 ed\n4c 8d 73 01\n48 89 c7\n49 89 c5\n48 8b 74 24 20\n4c 89 f2\ne8 30 6c ff ff\n48 85 c0\n0f 84 57 01 00 00\n41 c7 44 9d 00 00 00 00 00\n4c 89 ef\ne8 06 02 00 00\n4c 89 ef\n41 89 c5\n48 89 fb\n4c 89 f6\ne8 e5 6b ff ff\n4c 63 f0\n45 84 ed\n48 89 5c 24 18\n0f 84 3b 01 00 00\n31 ff\n31 d2\n48 89 de\ne8 88 70 ff ff\n49 89 c5\ne9 34 01 00 00\n4c 89 ed\n31 c0\n48 89 44 24 08\n31 db\n4d 89 fe\n49 8b 04 24\n49 39 c6\n4c 89 f1\n48 0f 47 c8\n4c 0f 47 f8\n4c 89 e2\n49 89 c4\n49 29 cc\n45 31 ed\n4c 39 f0\n4d 0f 46 e5\n48 89 0a\n8b 44 24 2c\n85 c0\n74 20\n83 f8 01\n75 08\n4d 89 e5\n45 31 e4\neb 13\n4c 89 e0\n48 d1 e8\n41 83 e4 01\n49 01 c4\n4d 89 e5\n49 89 c4\n8b 4c 24 04\n31 c0\nf6 c1 04\n4c 0f 45 e8\nf6 c1 08\n4c 0f 45 e0\n48 85 ed\n74 44\n48 8b 7c 24 30\n48 8d 6c 2f ff\n48 89 ee\n4c 89 ea\ne8 03 02 00 00\n48 89 ea\n48 29 c2\n49 39 d7\n49 0f 42 d7\n48 c7 c1 ff ff ff ff\n48 89 c7\n48 8b 74 24 20\ne8 52 6a ff ff\n48 89 c7\n48 89 ee\n4c 89 e2\ne8 d4 01 00 00\n4d 01 fd\n4d 01 e5\n48 89 df\ne8 16 6a ff ff\n48 8b 7c 24 08\ne8 0c 6a ff ff\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 89 ed\n31 c0\n48 89 44 24 08\n41 f6 c6 01\n49 c7 c5 ff ff ff ff\nbb 00 00 00 00\n4d 89 fe\n4c 8b 64 24 10\n0f 85 01 ff ff ff\neb b2\n31 c0\n48 89 44 24 08\n4d 89 fe\n4c 8b 64 24 10\n4c 89 eb\ne9 e8 fe ff ff\n48 8b 44 24 10\n4c 3b 30\n4d 89 fd\n76 51\n49 ff c5\n4c 89 ef\ne8 b1 6d ff ff\n48 85 c0\n74 57\n49 89 c7\n4c 89 7c 24 08\n4c 8b 64 24 10\n49 8b 34 24\n48 8b 5c 24 18\n48 89 df\ne8 be 00 00 00\n49 89 c6\n4c 89 ff\n48 89 de\n4c 89 ea\ne8 0d 6f ff ff\n49 89 c7\n48 8b 44 24 08\n48 89 44 24 20\ne9 8a fe ff ff\n31 c0\n48 89 44 24 08\n4c 8b 64 24 10\n48 8b 5c 24 18\ne9 74 fe ff ff\n49 c7 c5 ff ff ff ff\n31 c0\n48 89 44 24 08\nf6 44 24 04 01\n4c 8b 64 24 10\n48 8b 5c 24 18\n0f 85 51 fe ff ff\ne9 ff fe ff ff\n'
p509
S'.text:000000000040b500\n.text:000000000040b501\n.text:000000000040b503\n.text:000000000040b505\n.text:000000000040b507\n.text:000000000040b509\n.text:000000000040b50a\n.text:000000000040b50e\n.text:000000000040b511\n.text:000000000040b516\n.text:000000000040b519\n.text:000000000040b51c\n.text:000000000040b51f\n.text:000000000040b522\n.text:000000000040b527\n.text:000000000040b52a\n.text:000000000040b52e\n.text:000000000040b533\n.text:000000000040b538\n.text:000000000040b53d\n.text:000000000040b543\n.text:000000000040b548\n.text:000000000040b54c\n.text:000000000040b552\n.text:000000000040b557\n.text:000000000040b559\n.text:000000000040b55b\n.text:000000000040b55e\n.text:000000000040b563\n.text:000000000040b566\n.text:000000000040b56a\n.text:000000000040b570\n.text:000000000040b578\n.text:000000000040b57d\n.text:000000000040b580\n.text:000000000040b586\n.text:000000000040b589\n.text:000000000040b58d\n.text:000000000040b590\n.text:000000000040b593\n.text:000000000040b598\n.text:000000000040b59b\n.text:000000000040b5a0\n.text:000000000040b5a3\n.text:000000000040b5a9\n.text:000000000040b5b2\n.text:000000000040b5b5\n.text:000000000040b5ba\n.text:000000000040b5bd\n.text:000000000040b5c0\n.text:000000000040b5c3\n.text:000000000040b5c6\n.text:000000000040b5cb\n.text:000000000040b5ce\n.text:000000000040b5d1\n.text:000000000040b5d6\n.text:000000000040b5dc\n.text:000000000040b5de\n.text:000000000040b5e0\n.text:000000000040b5e3\n.text:000000000040b5e8\n.text:000000000040b5eb\n.text:000000000040b5f0\n.text:000000000040b5f3\n.text:000000000040b5f5\n.text:000000000040b5fa\n.text:000000000040b5fc\n.text:000000000040b5ff\n.text:000000000040b603\n.text:000000000040b606\n.text:000000000040b609\n.text:000000000040b60d\n.text:000000000040b611\n.text:000000000040b614\n.text:000000000040b617\n.text:000000000040b61a\n.text:000000000040b61d\n.text:000000000040b620\n.text:000000000040b624\n.text:000000000040b627\n.text:000000000040b62b\n.text:000000000040b62d\n.text:000000000040b62f\n.text:000000000040b632\n.text:000000000040b634\n.text:000000000040b637\n.text:000000000040b63a\n.text:000000000040b63c\n.text:000000000040b63f\n.text:000000000040b642\n.text:000000000040b646\n.text:000000000040b649\n.text:000000000040b64c\n.text:000000000040b64f\n.text:000000000040b653\n.text:000000000040b655\n.text:000000000040b658\n.text:000000000040b65c\n.text:000000000040b65f\n.text:000000000040b663\n.text:000000000040b666\n.text:000000000040b668\n.text:000000000040b66d\n.text:000000000040b672\n.text:000000000040b675\n.text:000000000040b678\n.text:000000000040b67d\n.text:000000000040b680\n.text:000000000040b683\n.text:000000000040b686\n.text:000000000040b68a\n.text:000000000040b691\n.text:000000000040b694\n.text:000000000040b699\n.text:000000000040b69e\n.text:000000000040b6a1\n.text:000000000040b6a4\n.text:000000000040b6a7\n.text:000000000040b6ac\n.text:000000000040b6af\n.text:000000000040b6b2\n.text:000000000040b6b5\n.text:000000000040b6ba\n.text:000000000040b6bf\n.text:000000000040b6c4\n.text:000000000040b6c7\n.text:000000000040b6cb\n.text:000000000040b6cc\n.text:000000000040b6ce\n.text:000000000040b6d0\n.text:000000000040b6d2\n.text:000000000040b6d4\n.text:000000000040b6d5\n.text:000000000040b6d6\n.text:000000000040b6d9\n.text:000000000040b6db\n.text:000000000040b6e0\n.text:000000000040b6e4\n.text:000000000040b6eb\n.text:000000000040b6f0\n.text:000000000040b6f3\n.text:000000000040b6f8\n.text:000000000040b6fe\n.text:000000000040b700\n.text:000000000040b702\n.text:000000000040b707\n.text:000000000040b70a\n.text:000000000040b70f\n.text:000000000040b712\n.text:000000000040b717\n.text:000000000040b71c\n.text:000000000040b71f\n.text:000000000040b722\n.text:000000000040b724\n.text:000000000040b727\n.text:000000000040b72a\n.text:000000000040b72f\n.text:000000000040b732\n.text:000000000040b734\n.text:000000000040b737\n.text:000000000040b73c\n.text:000000000040b741\n.text:000000000040b745\n.text:000000000040b74a\n.text:000000000040b74d\n.text:000000000040b752\n.text:000000000040b755\n.text:000000000040b758\n.text:000000000040b75b\n.text:000000000040b75e\n.text:000000000040b763\n.text:000000000040b766\n.text:000000000040b76b\n.text:000000000040b770\n.text:000000000040b775\n.text:000000000040b777\n.text:000000000040b77c\n.text:000000000040b781\n.text:000000000040b786\n.text:000000000040b78b\n.text:000000000040b792\n.text:000000000040b794\n.text:000000000040b799\n.text:000000000040b79e\n.text:000000000040b7a3\n.text:000000000040b7a8\n.text:000000000040b7ae\n'
p510
tp511
sS'matchpathcon'
p512
(S'\n__stdcall matchpathcon(char * file, security_context_t * con)\n'
p513
V\u000aint matchpathcon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p514
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p515
S'50\ne8 5a 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p516
S'.text:000000000040d8b0\n.text:000000000040d8b1\n.text:000000000040d8b6\n.text:000000000040d8bc\n.text:000000000040d8c1\n.text:000000000040d8c2\n'
p517
tp518
sS'strlen'
p519
(S'\n__stdcall strlen(char * __s)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0061d118)();\u000a  return sVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0061d118]\n'
p522
S'ff 25 82 ae 21 00\n'
p523
S'.plt:0000000000402290\n'
p524
tp525
sS'__mempcpy_chk'
p526
(S'\n__stdcall __mempcpy_chk()\n'
p527
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_0061d048)();\u000a  return;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0061d048]\n'
p529
S'ff 25 52 af 21 00\n'
p530
S'.plt:00000000004020f0\n'
p531
tp532
sS'memcmp'
p533
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0061d1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0061d1a0]\n'
p536
S'ff 25 fa ad 21 00\n'
p537
S'.plt:00000000004023a0\n'
p538
tp539
sS'hash_free'
p540
(S'\n__stdcall hash_free(Hash_table * table)\n'
p541
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p542
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00409fc2\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00409fc2\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409f9a\nJMP 0x00409fc2\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00409fc2\nCMP qword ptr [R14],0x0\nJZ 0x00409f90\nTEST R14,R14\nJZ 0x00409f90\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00409fb0\nJMP 0x00409f90\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409fda\nJMP 0x0040a003\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x0040a003\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00409fd0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020d0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00409ff0\nJMP 0x00409fd0\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x0040a021\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020d0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040a010\nMOV RDI,qword ptr [R15]\nCALL 0x004020d0\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004020d0\n'
p543
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 d7 80 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 b7 80 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 a7 80 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 9a 80 ff ff\n'
p544
S'.text:0000000000409f60\n.text:0000000000409f62\n.text:0000000000409f64\n.text:0000000000409f65\n.text:0000000000409f68\n.text:0000000000409f6d\n.text:0000000000409f6f\n.text:0000000000409f74\n.text:0000000000409f76\n.text:0000000000409f79\n.text:0000000000409f7d\n.text:0000000000409f7f\n.text:0000000000409f90\n.text:0000000000409f94\n.text:0000000000409f98\n.text:0000000000409f9a\n.text:0000000000409f9e\n.text:0000000000409fa0\n.text:0000000000409fa3\n.text:0000000000409fa5\n.text:0000000000409fa8\n.text:0000000000409fb0\n.text:0000000000409fb3\n.text:0000000000409fb7\n.text:0000000000409fbb\n.text:0000000000409fbe\n.text:0000000000409fc0\n.text:0000000000409fc2\n.text:0000000000409fc5\n.text:0000000000409fc9\n.text:0000000000409fcb\n.text:0000000000409fd0\n.text:0000000000409fd4\n.text:0000000000409fd8\n.text:0000000000409fda\n.text:0000000000409fde\n.text:0000000000409fe1\n.text:0000000000409fe3\n.text:0000000000409ff0\n.text:0000000000409ff4\n.text:0000000000409ff9\n.text:0000000000409ffc\n.text:0000000000409fff\n.text:000000000040a001\n.text:000000000040a003\n.text:000000000040a007\n.text:000000000040a00a\n.text:000000000040a00c\n.text:000000000040a010\n.text:000000000040a014\n.text:000000000040a019\n.text:000000000040a01c\n.text:000000000040a01f\n.text:000000000040a021\n.text:000000000040a024\n.text:000000000040a029\n.text:000000000040a02c\n.text:000000000040a02d\n.text:000000000040a02f\n.text:000000000040a031\n'
p545
tp546
sS'_exit'
p547
(S'\n__stdcall _exit(int __status)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0061d070)();\u000a  return;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x0061d070]\n'
p550
S'ff 25 2a af 21 00\n'
p551
S'.plt:0000000000402140\n'
p552
tp553
sS'rev_xstrcoll_atime'
p554
(S'\n__stdcall rev_xstrcoll_atime(V a, V b)\n'
p555
V\u000aint rev_xstrcoll_atime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_atime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407320\n'
p557
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 0d 03 00 00\n'
p558
S'.text:0000000000407000\n.text:0000000000407003\n.text:0000000000407008\n.text:000000000040700b\n.text:000000000040700e\n'
p559
tp560
sS'xdectoumax'
p561
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p562
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p563
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x0040fad0\nPOP RCX\nRET\n'
p564
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p565
S'.text:000000000040fba0\n.text:000000000040fba1\n.text:000000000040fba4\n.text:000000000040fba7\n.text:000000000040fbaa\n.text:000000000040fbad\n.text:000000000040fbb1\n.text:000000000040fbb6\n.text:000000000040fbb9\n.text:000000000040fbbc\n.text:000000000040fbc1\n.text:000000000040fbc2\n'
p566
tp567
sS'file_ignored'
p568
(S'\n__stdcall file_ignored(char * name)\n'
p569
V\u000a_Bool file_ignored(char *name)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (ignore_mode != IGNORE_MINIMAL) {\u000a    if ((*name == '.') &&\u000a       ((ignore_mode == IGNORE_DEFAULT || (name[(ulong)(name[1] == '.') + 1] == 0)))) {\u000a      return true;\u000a    }\u000a    if ((ignore_mode == IGNORE_DEFAULT) &&\u000a       (_Var1 = patterns_match(hide_patterns,name), _Var1 != false)) {\u000a      return true;\u000a    }\u000a  }\u000a  _Var1 = patterns_match(ignore_patterns,name);\u000a  return _Var1;\u000a}\u000a\u000a
p570
S'PUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [0x0061d83c]\nCMP EAX,0x2\nJZ 0x00406003\nCMP byte ptr [RBX],0x2e\nJNZ 0x00405fe8\nTEST EAX,EAX\nJZ 0x00405fff\nXOR ECX,ECX\nCMP byte ptr [RBX + 0x1],0x2e\nSETZ CL\nCMP byte ptr [RBX + RCX*0x1 + 0x1],0x0\nJZ 0x00405fff\nTEST EAX,EAX\nJNZ 0x00406003\nMOV RDI,qword ptr [0x0061d848]\nMOV RSI,RBX\nCALL 0x004060e0\nTEST AL,AL\nJZ 0x00406003\nMOV AL,0x1\nPOP RBX\nRET\nMOV RDI,qword ptr [0x0061d840]\nMOV RSI,RBX\nPOP RBX\nJMP 0x004060e0\n'
p571
S'53\n48 89 fb\n8b 05 72 78 21 00\n83 f8 02\n74 34\n80 3b 2e\n75 14\n85 c0\n74 27\n31 c9\n80 7b 01 2e\n0f 94 c1\n80 7c 0b 01 00\n74 17\n85 c0\n75 17\n48 8b 3d 55 78 21 00\n48 89 de\ne8 e5 00 00 00\n84 c0\n74 04\nb0 01\n5b\nc3\n48 8b 3d 36 78 21 00\n48 89 de\n5b\ne9 cd 00 00 00\n'
p572
S'.text:0000000000405fc0\n.text:0000000000405fc1\n.text:0000000000405fc4\n.text:0000000000405fca\n.text:0000000000405fcd\n.text:0000000000405fcf\n.text:0000000000405fd2\n.text:0000000000405fd4\n.text:0000000000405fd6\n.text:0000000000405fd8\n.text:0000000000405fda\n.text:0000000000405fde\n.text:0000000000405fe1\n.text:0000000000405fe6\n.text:0000000000405fe8\n.text:0000000000405fea\n.text:0000000000405fec\n.text:0000000000405ff3\n.text:0000000000405ff6\n.text:0000000000405ffb\n.text:0000000000405ffd\n.text:0000000000405fff\n.text:0000000000406001\n.text:0000000000406002\n.text:0000000000406003\n.text:000000000040600a\n.text:000000000040600d\n.text:000000000040600e\n'
p573
tp574
sS'hash_initialize'
p575
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p576
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x409d70\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x409d90\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x004024e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409d55\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x416e6c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00409da0\nTEST AL,AL\nJZ 0x00409d4d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00409e20\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00409d4d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00410240\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x00409d4d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00409d57\nMOV RDI,RBX\nCALL 0x004020d0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p578
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 70 9d 40 00\n48 0f 45 ea\n48 85 c9\n41 be 90 9d 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 19 88 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 6c 6e 41 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 2b 65 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 7b 83 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p579
S'.text:0000000000409c90\n.text:0000000000409c91\n.text:0000000000409c93\n.text:0000000000409c95\n.text:0000000000409c97\n.text:0000000000409c99\n.text:0000000000409c9a\n.text:0000000000409c9b\n.text:0000000000409c9e\n.text:0000000000409ca1\n.text:0000000000409ca4\n.text:0000000000409ca7\n.text:0000000000409cac\n.text:0000000000409cb0\n.text:0000000000409cb3\n.text:0000000000409cb9\n.text:0000000000409cbd\n.text:0000000000409cc2\n.text:0000000000409cc7\n.text:0000000000409cca\n.text:0000000000409ccd\n.text:0000000000409cd3\n.text:0000000000409cd7\n.text:0000000000409cda\n.text:0000000000409ce0\n.text:0000000000409ce4\n.text:0000000000409ce8\n.text:0000000000409ceb\n.text:0000000000409cf0\n.text:0000000000409cf2\n.text:0000000000409cf4\n.text:0000000000409cf7\n.text:0000000000409cfa\n.text:0000000000409cff\n.text:0000000000409d03\n.text:0000000000409d06\n.text:0000000000409d08\n.text:0000000000409d0d\n.text:0000000000409d10\n.text:0000000000409d15\n.text:0000000000409d18\n.text:0000000000409d1b\n.text:0000000000409d1d\n.text:0000000000409d21\n.text:0000000000409d25\n.text:0000000000409d28\n.text:0000000000409d2c\n.text:0000000000409d2f\n.text:0000000000409d33\n.text:0000000000409d37\n.text:0000000000409d3b\n.text:0000000000409d3f\n.text:0000000000409d43\n.text:0000000000409d4b\n.text:0000000000409d4d\n.text:0000000000409d50\n.text:0000000000409d55\n.text:0000000000409d57\n.text:0000000000409d5a\n.text:0000000000409d5e\n.text:0000000000409d5f\n.text:0000000000409d61\n.text:0000000000409d63\n.text:0000000000409d65\n.text:0000000000409d67\n.text:0000000000409d68\n'
p580
tp581
sS'xrealloc'
p582
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p583
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p584
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x0040f967\nTEST RBX,RBX\nJNZ 0x0040f967\nCALL 0x004020d0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00402570\nTEST RBX,RBX\nJZ 0x0040f979\nTEST RAX,RAX\nJZ 0x0040f97b\nPOP RBX\nRET\nCALL 0x0040faa0\n'
p585
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 6d 27 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 01 2c ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p586
S'.text:000000000040f950\n.text:000000000040f951\n.text:000000000040f954\n.text:000000000040f957\n.text:000000000040f959\n.text:000000000040f95c\n.text:000000000040f95e\n.text:000000000040f963\n.text:000000000040f965\n.text:000000000040f966\n.text:000000000040f967\n.text:000000000040f96a\n.text:000000000040f96f\n.text:000000000040f972\n.text:000000000040f974\n.text:000000000040f977\n.text:000000000040f979\n.text:000000000040f97a\n.text:000000000040f97b\n'
p587
tp588
sS'signal'
p589
(S'\n__stdcall signal(int __sig, __sighandler_t __handler)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__sighandler_t signal(int __sig,__sighandler_t __handler)\u000a\u000a{\u000a  __sighandler_t pVar1;\u000a  \u000a  pVar1 = (__sighandler_t)(*(code *)PTR_signal_0061d1d0)();\u000a  return pVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0061d1d0]\n'
p592
S'ff 25 ca ad 21 00\n'
p593
S'.plt:0000000000402400\n'
p594
tp595
sS'strcmp_ctime'
p596
(S'\n__stdcall strcmp_ctime(V a, V b)\n'
p597
V\u000aint strcmp_ctime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_ctime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'MOV EDX,0x4023f0\nJMP 0x004072c0\n'
p599
S'ba f0 23 40 00\ne9 16 04 00 00\n'
p600
S'.text:0000000000406ea0\n.text:0000000000406ea5\n'
p601
tp602
sS'cmp_ctime'
p603
(S'\n__stdcall cmp_ctime(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p604
V\u000aint cmp_ctime(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  get_stat_ctime(&b->stat);\u000a  get_stat_ctime(&a->stat);\u000a  iVar1 = timespec_cmp();\u000a  if (iVar1 != 0) {\u000a    return iVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x0040731b. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar1 = (*cmp)(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nLEA RDI,[R14 + 0x10]\nCALL 0x0040da90\nMOV RBX,RAX\nMOV R12,RDX\nLEA RDI,[R15 + 0x10]\nCALL 0x0040da90\nMOV RCX,RDX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x0040f390\nTEST EAX,EAX\nJZ 0x00407309\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RDI,qword ptr [R15]\nMOV RSI,qword ptr [R14]\nMOV RAX,R13\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP RAX\n'
p606
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8d 7e 10\ne8 b5 67 00 00\n48 89 c3\n49 89 d4\n49 8d 7f 10\ne8 a6 67 00 00\n48 89 d1\n48 89 df\n4c 89 e6\n48 89 c2\ne8 95 80 00 00\n85 c0\n74 0a\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n49 8b 3f\n49 8b 36\n4c 89 e8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nff e0\n'
p607
S'.text:00000000004072c0\n.text:00000000004072c2\n.text:00000000004072c4\n.text:00000000004072c6\n.text:00000000004072c8\n.text:00000000004072c9\n.text:00000000004072cc\n.text:00000000004072cf\n.text:00000000004072d2\n.text:00000000004072d6\n.text:00000000004072db\n.text:00000000004072de\n.text:00000000004072e1\n.text:00000000004072e5\n.text:00000000004072ea\n.text:00000000004072ed\n.text:00000000004072f0\n.text:00000000004072f3\n.text:00000000004072f6\n.text:00000000004072fb\n.text:00000000004072fd\n.text:00000000004072ff\n.text:0000000000407300\n.text:0000000000407302\n.text:0000000000407304\n.text:0000000000407306\n.text:0000000000407308\n.text:0000000000407309\n.text:000000000040730c\n.text:000000000040730f\n.text:0000000000407312\n.text:0000000000407313\n.text:0000000000407315\n.text:0000000000407317\n.text:0000000000407319\n.text:000000000040731b\n'
p608
tp609
sS'version_etc_ar'
p610
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p611
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p612
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x0040f760\nJMP 0x0040f3f0\n'
p613
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p614
S'.text:000000000040f750\n.text:000000000040f757\n.text:000000000040f760\n.text:000000000040f766\n.text:000000000040f76a\n.text:000000000040f76c\n'
p615
tp616
sS'strtoumax'
p617
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0061d2e0)();\u000a  return uVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0061d2e0]\n'
p620
S'ff 25 ba ac 21 00\n'
p621
S'.plt:0000000000402620\n'
p622
tp623
sS'sighandler'
p624
(S'\n__stdcall sighandler()\n'
p625
V\u000avoid sighandler(sig_atomic_t sParm1)\u000a\u000a{\u000a  if (interrupt_signal == 0) {\u000a    interrupt_signal = sParm1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p626
S'CMP dword ptr [0x0061d820],0x0\nJNZ 0x00403f5f\nMOV dword ptr [0x0061d820],EDI\nRET\n'
p627
S'83 3d c9 98 21 00 00\n75 06\n89 3d c1 98 21 00\nc3\n'
p628
S'.text:0000000000403f50\n.text:0000000000403f57\n.text:0000000000403f59\n.text:0000000000403f5f\n'
p629
tp630
sS'rev_xstrcoll_df_size'
p631
(S'\n__stdcall rev_xstrcoll_df_size(V a, V b)\n'
p632
V\u000aint rev_xstrcoll_df_size(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_size((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p633
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x004069ea\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406a0d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406a0d\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407220\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p634
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 f0 fa ff ff\n89 c3\n4c 89 f7\ne8 e6 fa ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 13 08 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p635
S'.text:00000000004069c0\n.text:00000000004069c2\n.text:00000000004069c4\n.text:00000000004069c5\n.text:00000000004069c8\n.text:00000000004069cb\n.text:00000000004069d0\n.text:00000000004069d2\n.text:00000000004069d5\n.text:00000000004069da\n.text:00000000004069dc\n.text:00000000004069de\n.text:00000000004069e0\n.text:00000000004069e3\n.text:00000000004069e8\n.text:00000000004069ea\n.text:00000000004069ec\n.text:00000000004069ee\n.text:00000000004069f3\n.text:00000000004069f6\n.text:00000000004069f8\n.text:00000000004069fd\n.text:0000000000406a00\n.text:0000000000406a03\n.text:0000000000406a04\n.text:0000000000406a06\n.text:0000000000406a08\n.text:0000000000406a0d\n.text:0000000000406a0f\n.text:0000000000406a10\n.text:0000000000406a12\n.text:0000000000406a14\n'
p636
tp637
sS'strstr'
p638
(S'\n__stdcall strstr(char * __haystack, char * __needle)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strstr(char *__haystack,char *__needle)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strstr_0061d350)();\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0061d350]\n'
p641
S'ff 25 4a ac 21 00\n'
p642
S'.plt:0000000000402700\n'
p643
tp644
sS'gettime'
p645
(S'\n__stdcall gettime(timespec * ts)\n'
p646
V\u000avoid gettime(timespec *ts)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = clock_gettime(0,(timespec *)ts);\u000a  if (iVar1 != 0) {\u000a    gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a    ts->tv_sec = local_18.tv_sec;\u000a    ts->tv_nsec = local_18.tv_usec * 1000;\u000a  }\u000a  return;\u000a}\u000a\u000a
p647
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x004021f0\nTEST EAX,EAX\nJZ 0x00409814\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00402320\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nIMUL RAX,qword ptr [RSP + 0x8],0x3e8\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p648
S'53\n48 83 ec 10\n48 89 fb\n31 ff\n48 89 de\ne8 fe 89 ff ff\n85 c0\n74 1e\n48 89 e7\n31 f6\ne8 20 8b ff ff\n48 8b 04 24\n48 89 03\n48 69 44 24 08 e8 03 00 00\n48 89 43 08\n48 83 c4 10\n5b\nc3\n'
p649
S'.text:00000000004097e0\n.text:00000000004097e1\n.text:00000000004097e5\n.text:00000000004097e8\n.text:00000000004097ea\n.text:00000000004097ed\n.text:00000000004097f2\n.text:00000000004097f4\n.text:00000000004097f6\n.text:00000000004097f9\n.text:00000000004097fb\n.text:0000000000409800\n.text:0000000000409804\n.text:0000000000409807\n.text:0000000000409810\n.text:0000000000409814\n.text:0000000000409818\n.text:0000000000409819\n'
p650
tp651
sS'process_signals'
p652
(S'\n__stdcall process_signals()\n'
p653
V\u000avoid process_signals(void)\u000a\u000a{\u000a  sig_atomic_t __sig;\u000a  undefined local_90 [128];\u000a  \u000a  if (interrupt_signal != 0) goto LAB_00406068;\u000a  while (stop_signal_count != 0) {\u000aLAB_00406068:\u000a    do {\u000a      if (used_color == 1) {\u000a        restore_default_color();\u000a      }\u000a      fflush_unlocked(stdout);\u000a      sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)local_90);\u000a      __sig = interrupt_signal;\u000a      if (stop_signal_count == 0) {\u000a        signal(interrupt_signal,(__sighandler_t)0x0);\u000a      }\u000a      else {\u000a        stop_signal_count = stop_signal_count + -1;\u000a        __sig = 0x13;\u000a      }\u000a      raise(__sig);\u000a      sigprocmask(2,(sigset_t *)local_90,(sigset_t *)0x0);\u000a    } while (interrupt_signal != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x88\nLEA RBX,[RSP + 0x8]\nCMP dword ptr [0x0061d820],0x0\nJNZ 0x00406068\nJMP 0x0040605f\nMOV EDI,EBP\nCALL 0x004020c0\nMOV EDI,0x2\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004020b0\nCMP dword ptr [0x0061d820],0x0\nJNZ 0x00406068\nCMP dword ptr [0x0061d81c],0x0\nJZ 0x004060bb\nCMP byte ptr [0x0061d818],0x1\nJNZ 0x00406076\nCALL 0x00405090\nMOV RDI,qword ptr [0x0061d5c8]\nCALL 0x004026c0\nXOR EDI,EDI\nMOV ESI,0x61d640\nMOV RDX,RBX\nCALL 0x004020b0\nMOV EBP,dword ptr [0x0061d820]\nMOV EAX,dword ptr [0x0061d81c]\nTEST EAX,EAX\nJZ 0x004060b0\nDEC EAX\nMOV dword ptr [0x0061d81c],EAX\nMOV EBP,0x13\nJMP 0x00406040\nXOR ESI,ESI\nMOV EDI,EBP\nCALL 0x00402400\nJMP 0x00406040\nADD RSP,0x88\nPOP RBX\nPOP RBP\nRET\n'
p655
S'55\n53\n48 81 ec 88 00 00 00\n48 8d 5c 24 08\n83 3d eb 77 21 00 00\n75 31\neb 26\n89 ef\ne8 79 c0 ff ff\nbf 02 00 00 00\n31 d2\n48 89 de\ne8 5a c0 ff ff\n83 3d c3 77 21 00 00\n75 09\n83 3d b6 77 21 00 00\n74 53\n80 3d a9 77 21 00 01\n75 05\ne8 1a f0 ff ff\n48 8b 3d 4b 75 21 00\ne8 3e c6 ff ff\n31 ff\nbe 40 d6 61 00\n48 89 da\ne8 1f c0 ff ff\n8b 2d 89 77 21 00\n8b 05 7f 77 21 00\n85 c0\n74 0f\nff c8\n89 05 73 77 21 00\nbd 13 00 00 00\neb 90\n31 f6\n89 ef\ne8 47 c3 ff ff\neb 85\n48 81 c4 88 00 00 00\n5b\n5d\nc3\n'
p656
S'.text:0000000000406020\n.text:0000000000406021\n.text:0000000000406022\n.text:0000000000406029\n.text:000000000040602e\n.text:0000000000406035\n.text:0000000000406037\n.text:0000000000406040\n.text:0000000000406042\n.text:0000000000406047\n.text:000000000040604c\n.text:000000000040604e\n.text:0000000000406051\n.text:0000000000406056\n.text:000000000040605d\n.text:000000000040605f\n.text:0000000000406066\n.text:0000000000406068\n.text:000000000040606f\n.text:0000000000406071\n.text:0000000000406076\n.text:000000000040607d\n.text:0000000000406082\n.text:0000000000406084\n.text:0000000000406089\n.text:000000000040608c\n.text:0000000000406091\n.text:0000000000406097\n.text:000000000040609d\n.text:000000000040609f\n.text:00000000004060a1\n.text:00000000004060a3\n.text:00000000004060a9\n.text:00000000004060ae\n.text:00000000004060b0\n.text:00000000004060b2\n.text:00000000004060b4\n.text:00000000004060b9\n.text:00000000004060bb\n.text:00000000004060c2\n.text:00000000004060c3\n.text:00000000004060c4\n'
p657
tp658
sS'longest_relative_suffix'
p659
(S'\n__stdcall longest_relative_suffix(char * f)\n'
p660
V\u000achar * longest_relative_suffix(char *f)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  f = f + -1;\u000a  do {\u000a    pcVar1 = f + 1;\u000a    f = f + 1;\u000a  } while (*pcVar1 == '/');\u000a  return f;\u000a}\u000a\u000a
p661
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004093b0\nMOV RAX,RDI\nRET\n'
p662
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n48 89 f8\nc3\n'
p663
S'.text:00000000004093a0\n.text:00000000004093a3\n.text:00000000004093b0\n.text:00000000004093b4\n.text:00000000004093b8\n.text:00000000004093ba\n.text:00000000004093bd\n'
p664
tp665
sS'xstrcoll_version'
p666
(S'\n__stdcall xstrcoll_version(fileinfo * a, fileinfo * b)\n'
p667
V\u000aint xstrcoll_version(fileinfo *a,fileinfo *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = filevercmp(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'JMP 0x00407250\n'
p669
S'e9 3b 07 00 00\n'
p670
S'.text:0000000000406b10\n'
p671
tp672
sS'version_etc'
p673
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p674
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p675
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x0040f822\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x0040f780\nADD RSP,0xd8\nRET\n'
p676
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p677
S'.text:000000000040f7e0\n.text:000000000040f7e7\n.text:000000000040f7e9\n.text:000000000040f7eb\n.text:000000000040f7f0\n.text:000000000040f7f5\n.text:000000000040f7fa\n.text:000000000040f802\n.text:000000000040f80a\n.text:000000000040f812\n.text:000000000040f81a\n.text:000000000040f822\n.text:000000000040f827\n.text:000000000040f82c\n.text:000000000040f831\n.text:000000000040f836\n.text:000000000040f83e\n.text:000000000040f843\n.text:000000000040f84b\n.text:000000000040f852\n.text:000000000040f855\n.text:000000000040f85a\n.text:000000000040f861\n'
p678
tp679
sS'hash_get_first'
p680
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p681
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p682
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00409ae3\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x00409ada\nJMP 0x00409ae6\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00409ae6\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00409ad0\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00402100\n'
p683
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 14 86 ff ff\n'
p684
S'.text:0000000000409ab0\n.text:0000000000409ab5\n.text:0000000000409ab7\n.text:0000000000409aba\n.text:0000000000409abe\n.text:0000000000409ac0\n.text:0000000000409ad0\n.text:0000000000409ad4\n.text:0000000000409ad8\n.text:0000000000409ada\n.text:0000000000409add\n.text:0000000000409ae0\n.text:0000000000409ae2\n.text:0000000000409ae3\n.text:0000000000409ae5\n.text:0000000000409ae6\n.text:0000000000409ae7\n'
p685
tp686
sS'xstrtol_fatal'
p687
(S'\n__stdcall xstrtol_fatal(option * long_options, char * arg)\n'
p688
V\u000avoid xstrtol_fatal(option *long_options,char *arg)\u000a\u000a{\u000a  xstrtol_error(long_options,arg);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p689
S'PUSH RAX\nMOV R9D,dword ptr [0x0061d540]\nCALL 0x0040fed0\nCALL 0x00402100\n'
p690
S'50\n44 8b 0d 88 d6 20 00\ne8 13 00 00 00\ne8 3e 22 ff ff\n'
p691
S'.text:000000000040feb0\n.text:000000000040feb1\n.text:000000000040feb8\n.text:000000000040febd\n'
p692
tp693
sS'wcwidth'
p694
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0061d230)();\u000a  return iVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0061d230]\n'
p697
S'ff 25 6a ad 21 00\n'
p698
S'.plt:00000000004024c0\n'
p699
tp700
sS'quotearg_n_mem'
p701
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p702
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'MOV ECX,0x61e1b0\nJMP 0x0040cf40\n'
p704
S'b9 b0 e1 61 00\ne9 36 fe ff ff\n'
p705
S'.text:000000000040d100\n.text:000000000040d105\n'
p706
tp707
sS'print_file_name_and_frills'
p708
(S'\n__stdcall print_file_name_and_frills()\n'
p709
V\u000asize_t print_file_name_and_frills(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *pcVar2;\u000a  size_t sVar3;\u000a  undefined7 extraout_var;\u000a  ulong uVar4;\u000a  uint uVar5;\u000a  fileinfo *f;\u000a  char buf [652];\u000a  char acStack680 [656];\u000a  \u000a  set_normal_color();\u000a  if (print_inode == 1) {\u000a    uVar4 = (ulong)(uint)inode_number_width;\u000a    if (format == with_commas) {\u000a      uVar4 = 0;\u000a    }\u000a    pcVar2 = format_inode(acStack680,0x28c,f);\u000a    __printf_chk(1,&DAT_00416ad2,uVar4,pcVar2);\u000a  }\u000a  if (print_block_size == 1) {\u000a    uVar5 = 0;\u000a    if (format != with_commas) {\u000a      uVar5 = block_size_width;\u000a    }\u000a    if (f->stat_ok == false) {\u000a      pcVar2 = "?";\u000a    }\u000a    else {\u000a      pcVar2 = human_readable((f->stat).st_blocks,acStack680,(ulong)(uint)human_output_opts,0x200);\u000a    }\u000a    __printf_chk(1,&DAT_00416ad2,(ulong)uVar5,pcVar2);\u000a  }\u000a  if (print_scontext == 1) {\u000a    uVar4 = (ulong)(uint)scontext_width;\u000a    if (format == with_commas) {\u000a      uVar4 = 0;\u000a    }\u000a    __printf_chk(1,&DAT_00416ad2,uVar4,f->scontext);\u000a  }\u000a  sVar3 = print_name_with_quoting(f,(obstack *)0x0,0);\u000a  if (indicator_style != none) {\u000a    _Var1 = print_type_indicator();\u000a    sVar3 = CONCAT71(extraout_var,_Var1);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x290\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x004077c0\nCMP byte ptr [0x0061d83a],0x1\nJNZ 0x004073d7\nXOR EAX,EAX\nCMP dword ptr [0x0061d634],0x4\nMOV EBP,dword ptr [0x0061e054]\nCMOVZ EBP,EAX\nMOV RDI,RSP\nMOV ESI,0x28c\nMOV RDX,RBX\nCALL 0x00407ec0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x416ad2\nXOR EAX,EAX\nMOV EDX,EBP\nCALL 0x004025b0\nCMP byte ptr [0x0061d73d],0x1\nJNZ 0x00407434\nXOR EBP,EBP\nCMP dword ptr [0x0061d634],0x4\nCMOVNZ EBP,dword ptr [0x0061e058]\nCMP byte ptr [0xb0 + RBX],0x0\nJZ 0x0040741c\nMOV RDI,qword ptr [RBX + 0x50]\nMOV EDX,dword ptr [0x0061d864]\nMOV R8,qword ptr [0x0061d870]\nMOV RSI,RSP\nMOV ECX,0x200\nCALL 0x0040a810\nMOV RCX,RAX\nJMP 0x00407421\nMOV ECX,0x4168bd\nMOV EDI,0x1\nMOV ESI,0x416ad2\nXOR EAX,EAX\nMOV EDX,EBP\nCALL 0x004025b0\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00407467\nXOR EAX,EAX\nCMP dword ptr [0x0061d634],0x4\nMOV EDX,dword ptr [0x0061e06c]\nCMOVZ EDX,EAX\nMOV RCX,qword ptr [0xa8 + RBX]\nMOV EDI,0x1\nMOV ESI,0x416ad2\nXOR EAX,EAX\nCALL 0x004025b0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RCX,R14\nCALL 0x00407f10\nCMP dword ptr [0x0061d6c8],0x0\nJZ 0x00407494\nMOV ESI,dword ptr [RBX + 0x28]\nMOV EDX,dword ptr [0xa0 + RBX]\nMOVZX EDI,byte ptr [0xb0 + RBX]\nCALL 0x00408050\nADD RSP,0x290\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p711
S'55\n41 56\n53\n48 81 ec 90 02 00 00\n49 89 f6\n48 89 fb\ne8 2a 04 00 00\n80 3d 9d 64 21 00 01\n75 38\n31 c0\n83 3d 8c 62 21 00 04\n8b 2d a6 6c 21 00\n0f 44 e8\n48 89 e7\nbe 8c 02 00 00\n48 89 da\ne8 ff 0a 00 00\n48 89 c1\nbf 01 00 00 00\nbe d2 6a 41 00\n31 c0\n89 ea\ne8 d9 b1 ff ff\n80 3d 5f 63 21 00 01\n75 54\n31 ed\n83 3d 4b 62 21 00 04\n0f 45 2d 68 6c 21 00\n80 bb b0 00 00 00 00\n74 23\n48 8b 7b 50\n8b 15 61 64 21 00\n4c 8b 05 66 64 21 00\n48 89 e6\nb9 00 02 00 00\ne8 f9 33 00 00\n48 89 c1\neb 05\nb9 bd 68 41 00\nbf 01 00 00 00\nbe d2 6a 41 00\n31 c0\n89 ea\ne8 7c b1 ff ff\n80 3d 01 63 21 00 01\n75 2a\n31 c0\n83 3d ee 61 21 00 04\n8b 15 20 6c 21 00\n0f 44 d0\n48 8b 8b a8 00 00 00\nbf 01 00 00 00\nbe d2 6a 41 00\n31 c0\ne8 49 b1 ff ff\n31 f6\n31 d2\n48 89 df\n4c 89 f1\ne8 9a 0a 00 00\n83 3d 4b 62 21 00 00\n74 15\n8b 73 28\n8b 93 a0 00 00 00\n0f b6 bb b0 00 00 00\ne8 bc 0b 00 00\n48 81 c4 90 02 00 00\n5b\n41 5e\n5d\nc3\n'
p712
S'.text:0000000000407380\n.text:0000000000407381\n.text:0000000000407383\n.text:0000000000407384\n.text:000000000040738b\n.text:000000000040738e\n.text:0000000000407391\n.text:0000000000407396\n.text:000000000040739d\n.text:000000000040739f\n.text:00000000004073a1\n.text:00000000004073a8\n.text:00000000004073ae\n.text:00000000004073b1\n.text:00000000004073b4\n.text:00000000004073b9\n.text:00000000004073bc\n.text:00000000004073c1\n.text:00000000004073c4\n.text:00000000004073c9\n.text:00000000004073ce\n.text:00000000004073d0\n.text:00000000004073d2\n.text:00000000004073d7\n.text:00000000004073de\n.text:00000000004073e0\n.text:00000000004073e2\n.text:00000000004073e9\n.text:00000000004073f0\n.text:00000000004073f7\n.text:00000000004073f9\n.text:00000000004073fd\n.text:0000000000407403\n.text:000000000040740a\n.text:000000000040740d\n.text:0000000000407412\n.text:0000000000407417\n.text:000000000040741a\n.text:000000000040741c\n.text:0000000000407421\n.text:0000000000407426\n.text:000000000040742b\n.text:000000000040742d\n.text:000000000040742f\n.text:0000000000407434\n.text:000000000040743b\n.text:000000000040743d\n.text:000000000040743f\n.text:0000000000407446\n.text:000000000040744c\n.text:000000000040744f\n.text:0000000000407456\n.text:000000000040745b\n.text:0000000000407460\n.text:0000000000407462\n.text:0000000000407467\n.text:0000000000407469\n.text:000000000040746b\n.text:000000000040746e\n.text:0000000000407471\n.text:0000000000407476\n.text:000000000040747d\n.text:000000000040747f\n.text:0000000000407482\n.text:0000000000407488\n.text:000000000040748f\n.text:0000000000407494\n.text:000000000040749b\n.text:000000000040749c\n.text:000000000040749e\n.text:000000000040749f\n'
p713
tp714
sS'free_ent'
p715
(S'\n__stdcall free_ent(fileinfo * f)\n'
p716
V\u000avoid free_ent(fileinfo *f)\u000a\u000a{\u000a  free(f->name);\u000a  free(f->linkname);\u000a  if (f->scontext != UNKNOWN_SECURITY_CONTEXT) {\u000a    freecon(f->scontext);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p717
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x004020d0\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x004020d0\nMOV RDI,qword ptr [0xa8 + RBX]\nMOV EAX,0x61d520\nCMP RDI,RAX\nJZ 0x0040615c\nPOP RBX\nJMP 0x0040d860\nPOP RBX\nRET\n'
p718
S'53\n48 89 fb\n48 8b 3b\ne8 94 bf ff ff\n48 8b 7b 08\ne8 8b bf ff ff\n48 8b bb a8 00 00 00\nb8 20 d5 61 00\n48 39 c7\n74 06\n5b\ne9 04 77 00 00\n5b\nc3\n'
p719
S'.text:0000000000406130\n.text:0000000000406131\n.text:0000000000406134\n.text:0000000000406137\n.text:000000000040613c\n.text:0000000000406140\n.text:0000000000406145\n.text:000000000040614c\n.text:0000000000406151\n.text:0000000000406154\n.text:0000000000406156\n.text:0000000000406157\n.text:000000000040615c\n.text:000000000040615d\n'
p720
tp721
sS'emit_ancillary_info'
p722
(S'\n__stdcall emit_ancillary_info(char * program)\n'
p723
V\u000avoid emit_ancillary_info(char *program)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00414610;\u000a  __s2 = (char *)((long)&DAT_004146f9 + 1);\u000a  do {\u000a    iVar1 = strcmp(program,__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = piVar4->node;\u000a  if (piVar4->node == (char *)0x0) {\u000a    __s2 = program;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,program,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",program);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x417ce1;\u000a  if (__s2 == program) {\u000a    uVar3 = 0x416c07;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p724
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV EBX,0x414610\nMOV ESI,0x4146fa\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x00405589\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00405570\nMOV R14,qword ptr [RBX + 0x8]\nTEST R14,R14\nCMOVZ R14,R15\nXOR EDI,EDI\nMOV ESI,0x416c4a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x41651b\nMOV ECX,0x416c61\nXOR EAX,EAX\nCALL 0x004025b0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004025a0\nTEST RAX,RAX\nJZ 0x0040560b\nMOV ESI,0x416c88\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00402120\nTEST EAX,EAX\nJZ 0x0040560b\nXOR EDI,EDI\nMOV ESI,0x416c8c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RDX,R15\nCALL 0x004025b0\nXOR EDI,EDI\nMOV ESI,0x416cd1\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x416c61\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,R15\nCALL 0x004025b0\nXOR EDI,EDI\nMOV ESI,0x416cf0\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nCMP R14,R15\nMOV EAX,0x416c07\nMOV ECX,0x417ce1\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004025b0\n'
p725
S'41 57\n41 56\n53\n49 89 ff\nbb 10 46 41 00\nbe fa 46 41 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\ne8 78 ce ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e7\n4c 8b 73 08\n4d 85 f6\n4d 0f 44 f7\n31 ff\nbe 4a 6c 41 00\nba 05 00 00 00\ne8 cb cc ff ff\n48 89 c6\nbf 01 00 00 00\nba 1b 65 41 00\nb9 61 6c 41 00\n31 c0\ne8 f2 cf ff ff\nbf 05 00 00 00\n31 f6\ne8 d6 cf ff ff\n48 85 c0\n74 3c\nbe 88 6c 41 00\nba 03 00 00 00\n48 89 c7\ne8 3f cb ff ff\n85 c0\n74 26\n31 ff\nbe 8c 6c 41 00\nba 05 00 00 00\ne8 7a cc ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\n4c 89 fa\ne8 a5 cf ff ff\n31 ff\nbe d1 6c 41 00\nba 05 00 00 00\ne8 54 cc ff ff\n48 89 c1\nbf 01 00 00 00\nba 61 6c 41 00\n31 c0\n48 89 ce\n4c 89 f9\ne8 7a cf ff ff\n31 ff\nbe f0 6c 41 00\nba 05 00 00 00\ne8 29 cc ff ff\n48 89 c2\n4d 39 fe\nb8 07 6c 41 00\nb9 e1 7c 41 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n4c 89 f2\n5b\n41 5e\n41 5f\ne9 3e cf ff ff\n'
p726
S'.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405555\n.text:0000000000405558\n.text:000000000040555d\n.text:0000000000405562\n.text:0000000000405570\n.text:0000000000405573\n.text:0000000000405578\n.text:000000000040557a\n.text:000000000040557c\n.text:0000000000405580\n.text:0000000000405584\n.text:0000000000405587\n.text:0000000000405589\n.text:000000000040558d\n.text:0000000000405590\n.text:0000000000405594\n.text:0000000000405596\n.text:000000000040559b\n.text:00000000004055a0\n.text:00000000004055a5\n.text:00000000004055a8\n.text:00000000004055ad\n.text:00000000004055b2\n.text:00000000004055b7\n.text:00000000004055b9\n.text:00000000004055be\n.text:00000000004055c3\n.text:00000000004055c5\n.text:00000000004055ca\n.text:00000000004055cd\n.text:00000000004055cf\n.text:00000000004055d4\n.text:00000000004055d9\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e5\n.text:00000000004055e7\n.text:00000000004055ec\n.text:00000000004055f1\n.text:00000000004055f6\n.text:00000000004055f9\n.text:00000000004055fe\n.text:0000000000405600\n.text:0000000000405603\n.text:0000000000405606\n.text:000000000040560b\n.text:000000000040560d\n.text:0000000000405612\n.text:0000000000405617\n.text:000000000040561c\n.text:000000000040561f\n.text:0000000000405624\n.text:0000000000405629\n.text:000000000040562b\n.text:000000000040562e\n.text:0000000000405631\n.text:0000000000405636\n.text:0000000000405638\n.text:000000000040563d\n.text:0000000000405642\n.text:0000000000405647\n.text:000000000040564a\n.text:000000000040564d\n.text:0000000000405652\n.text:0000000000405657\n.text:000000000040565b\n.text:0000000000405660\n.text:0000000000405662\n.text:0000000000405665\n.text:0000000000405668\n.text:0000000000405669\n.text:000000000040566b\n.text:000000000040566d\n'
p727
tp728
sS'xzalloc'
p729
(S'\n__stdcall xzalloc(size_t s)\n'
p730
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p731
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x0040f910\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00402350\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p732
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 34 29 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p733
S'.text:000000000040fa00\n.text:000000000040fa02\n.text:000000000040fa03\n.text:000000000040fa04\n.text:000000000040fa07\n.text:000000000040fa0c\n.text:000000000040fa0f\n.text:000000000040fa11\n.text:000000000040fa14\n.text:000000000040fa17\n.text:000000000040fa1c\n.text:000000000040fa1f\n.text:000000000040fa23\n.text:000000000040fa24\n.text:000000000040fa26\n'
p734
tp735
sS'rev_strcmp_ctime'
p736
(S'\n__stdcall rev_strcmp_ctime(V a, V b)\n'
p737
V\u000aint rev_strcmp_ctime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_ctime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p738
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x004072c0\n'
p739
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 9d 03 00 00\n'
p740
S'.text:0000000000406f10\n.text:0000000000406f13\n.text:0000000000406f18\n.text:0000000000406f1b\n.text:0000000000406f1e\n'
p741
tp742
sS'getenv_quoting_style'
p743
(S'\n__stdcall getenv_quoting_style()\n'
p744
V\u000avoid getenv_quoting_style(void)\u000a\u000a{\u000a  char *arg;\u000a  ptrdiff_t pVar1;\u000a  undefined8 uVar2;\u000a  \u000a  arg = getenv("QUOTING_STYLE");\u000a  if (arg == (char *)0x0) {\u000a    return;\u000a  }\u000a  pVar1 = argmatch(arg,quoting_style_args,(char *)quoting_style_vals,4);\u000a  if (-1 < (int)pVar1) {\u000a    set_quoting_style((quoting_options *)0x0);\u000a    return;\u000a  }\u000a  uVar2 = dcgettext(0,"ignoring invalid value of environment variable QUOTING_STYLE: %s",5);\u000a  arg = quote(arg);\u000a  error(0,0,uVar2,arg);\u000a  return;\u000a}\u000a\u000a
p745
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EDI,0x416645\nCALL 0x004020a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405738\nMOV ESI,0x4176a0\nMOV EDX,0x417700\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00408c20\nTEST EAX,EAX\nJS 0x00405740\nCDQE\nMOV ESI,dword ptr [0x417700 + RAX*0x4]\nXOR EDI,EDI\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x0040c040\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR EDI,EDI\nMOV ESI,0x416653\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x0040d430\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004025f0\n'
p746
S'41 56\n53\n50\nbf 45 66 41 00\ne8 a2 c9 ff ff\n48 89 c3\n48 85 db\n74 32\nbe a0 76 41 00\nba 00 77 41 00\nb9 04 00 00 00\n48 89 df\ne8 03 35 00 00\n85 c0\n78 1f\n48 98\n8b 34 85 00 77 41 00\n31 ff\n48 83 c4 08\n5b\n41 5e\ne9 08 69 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n31 ff\nbe 53 66 41 00\nba 05 00 00 00\ne8 1f cb ff ff\n49 89 c6\n48 89 df\ne8 d4 7c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\n48 83 c4 08\n5b\n41 5e\ne9 7c ce ff ff\n'
p747
S'.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f3\n.text:00000000004056f4\n.text:00000000004056f9\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405704\n.text:0000000000405706\n.text:000000000040570b\n.text:0000000000405710\n.text:0000000000405715\n.text:0000000000405718\n.text:000000000040571d\n.text:000000000040571f\n.text:0000000000405721\n.text:0000000000405723\n.text:000000000040572a\n.text:000000000040572c\n.text:0000000000405730\n.text:0000000000405731\n.text:0000000000405733\n.text:0000000000405738\n.text:000000000040573c\n.text:000000000040573d\n.text:000000000040573f\n.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405747\n.text:000000000040574c\n.text:0000000000405751\n.text:0000000000405754\n.text:0000000000405757\n.text:000000000040575c\n.text:000000000040575f\n.text:0000000000405761\n.text:0000000000405763\n.text:0000000000405765\n.text:0000000000405768\n.text:000000000040576c\n.text:000000000040576d\n.text:000000000040576f\n'
p748
tp749
sS'quotearg_n_style'
p750
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p751
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x0040d170\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x0040cf40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p753
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p754
S'.text:000000000040d130\n.text:000000000040d131\n.text:000000000040d133\n.text:000000000040d134\n.text:000000000040d138\n.text:000000000040d13b\n.text:000000000040d13d\n.text:000000000040d142\n.text:000000000040d145\n.text:000000000040d14a\n.text:000000000040d151\n.text:000000000040d153\n.text:000000000040d156\n.text:000000000040d159\n.text:000000000040d15e\n.text:000000000040d162\n.text:000000000040d163\n.text:000000000040d165\n.text:000000000040d166\n'
p755
tp756
sS'hash_clear'
p757
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p758
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p759
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00409eea\nJMP 0x00409f45\nTEST CL,CL\nJZ 0x00409ed9\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00409f45\nCMP qword ptr [R14],0x0\nJZ 0x00409ee0\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00409ed0\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00409f1a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00409f10\nJMP 0x00409ed0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p760
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p761
S'.text:0000000000409eb0\n.text:0000000000409eb2\n.text:0000000000409eb4\n.text:0000000000409eb5\n.text:0000000000409eb8\n.text:0000000000409ebb\n.text:0000000000409ebf\n.text:0000000000409ec1\n.text:0000000000409ed0\n.text:0000000000409ed2\n.text:0000000000409ed4\n.text:0000000000409ed7\n.text:0000000000409ed9\n.text:0000000000409edc\n.text:0000000000409ee0\n.text:0000000000409ee4\n.text:0000000000409ee8\n.text:0000000000409eea\n.text:0000000000409eee\n.text:0000000000409ef0\n.text:0000000000409ef4\n.text:0000000000409ef8\n.text:0000000000409efb\n.text:0000000000409efe\n.text:0000000000409f01\n.text:0000000000409f03\n.text:0000000000409f10\n.text:0000000000409f13\n.text:0000000000409f15\n.text:0000000000409f18\n.text:0000000000409f1a\n.text:0000000000409f21\n.text:0000000000409f25\n.text:0000000000409f29\n.text:0000000000409f2d\n.text:0000000000409f31\n.text:0000000000409f35\n.text:0000000000409f38\n.text:0000000000409f3b\n.text:0000000000409f3e\n.text:0000000000409f41\n.text:0000000000409f43\n.text:0000000000409f45\n.text:0000000000409f48\n.text:0000000000409f4d\n.text:0000000000409f4e\n.text:0000000000409f50\n.text:0000000000409f52\n'
p762
tp763
sS'setfilecon'
p764
(S'\n__stdcall setfilecon(char * file, security_context_t con)\n'
p765
V\u000aint setfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p766
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p767
S'50\ne8 da 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p768
S'.text:000000000040d930\n.text:000000000040d931\n.text:000000000040d936\n.text:000000000040d93c\n.text:000000000040d941\n.text:000000000040d942\n'
p769
tp770
sS'dir_len'
p771
(S'\n__stdcall dir_len(char * file)\n'
p772
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p773
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x004090e0\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00409073\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00409060\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p774
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p775
S'.text:0000000000409040\n.text:0000000000409042\n.text:0000000000409043\n.text:0000000000409044\n.text:0000000000409047\n.text:000000000040904a\n.text:000000000040904d\n.text:0000000000409051\n.text:0000000000409056\n.text:0000000000409059\n.text:000000000040905c\n.text:0000000000409060\n.text:0000000000409063\n.text:0000000000409066\n.text:0000000000409068\n.text:000000000040906c\n.text:0000000000409071\n.text:0000000000409073\n.text:0000000000409077\n.text:0000000000409078\n.text:000000000040907a\n'
p776
tp777
sS'quote_n'
p778
(S'\n__stdcall quote_n(char * arg)\n'
p779
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p780
S'MOV RDX,-0x1\nJMP 0x0040d400\n'
p781
S'48 c7 c2 ff ff ff ff\neb d7\n'
p782
S'.text:000000000040d420\n.text:000000000040d427\n'
p783
tp784
sS'rev_strcmp_df_ctime'
p785
(S'\n__stdcall rev_strcmp_df_ctime(V a, V b)\n'
p786
V\u000aint rev_strcmp_df_ctime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_ctime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p787
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406f5a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406f7d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406f7d\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004072c0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p788
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 80 f5 ff ff\n89 c3\n4c 89 f7\ne8 76 f5 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 43 03 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p789
S'.text:0000000000406f30\n.text:0000000000406f32\n.text:0000000000406f34\n.text:0000000000406f35\n.text:0000000000406f38\n.text:0000000000406f3b\n.text:0000000000406f40\n.text:0000000000406f42\n.text:0000000000406f45\n.text:0000000000406f4a\n.text:0000000000406f4c\n.text:0000000000406f4e\n.text:0000000000406f50\n.text:0000000000406f53\n.text:0000000000406f58\n.text:0000000000406f5a\n.text:0000000000406f5c\n.text:0000000000406f5e\n.text:0000000000406f63\n.text:0000000000406f66\n.text:0000000000406f68\n.text:0000000000406f6d\n.text:0000000000406f70\n.text:0000000000406f73\n.text:0000000000406f74\n.text:0000000000406f76\n.text:0000000000406f78\n.text:0000000000406f7d\n.text:0000000000406f7f\n.text:0000000000406f80\n.text:0000000000406f82\n.text:0000000000406f84\n'
p790
tp791
sS'close_stdout_set_file_name'
p792
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p793
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p794
S'MOV qword ptr [0x0061e178],RDI\nRET\n'
p795
S'48 89 3d 11 52 21 00\nc3\n'
p796
S'.text:0000000000408f60\n.text:0000000000408f67\n'
p797
tp798
sS'getgrnam'
p799
(S'\n__stdcall getgrnam(char * __name)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrnam(char *__name)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrnam_0061d1f8)();\u000a  return pgVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0061d1f8]\n'
p802
S'ff 25 a2 ad 21 00\n'
p803
S'.plt:0000000000402450\n'
p804
tp805
sS'format_user_or_group'
p806
(S'\n__stdcall format_user_or_group(char * name, ulong id)\n'
p807
V\u000avoid format_user_or_group(char *name,ulong id)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  uint in_EDX;\u000a  uint uVar3;\u000a  long lVar4;\u000a  ulong uVar5;\u000a  \u000a  if (name == (char *)0x0) {\u000a    __printf_chk(1,"%*lu ",(ulong)in_EDX,id);\u000a    lVar4 = (long)(int)in_EDX;\u000a  }\u000a  else {\u000a    iVar1 = gnu_mbswidth(name);\u000a    uVar5 = (ulong)(in_EDX - iVar1);\u000a    if ((int)(in_EDX - iVar1) < 0) {\u000a      uVar5 = 0;\u000a    }\u000a    fputs_unlocked(name,stdout);\u000a    sVar2 = strlen(name);\u000a    uVar3 = ~(uint)uVar5;\u000a    do {\u000a      putchar_unlocked(0x20);\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 != 0);\u000a    lVar4 = sVar2 + uVar5;\u000a  }\u000a  dired_pos = lVar4 + 1 + dired_pos;\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,EDX\nMOV RCX,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00408993\nXOR EBP,EBP\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x0040b980\nSUB R15D,EAX\nCMOVS R15D,EBP\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RBX\nCALL 0x004023c0\nMOV RDI,RBX\nCALL 0x00402290\nMOV R14,RAX\nMOV EBX,R15D\nNOT EBX\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0x20\nCALL 0x00402460\nINC EBX\nJNZ 0x00408980\nADD R14,R15\nJMP 0x004089aa\nMOV EDI,0x1\nMOV ESI,0x416adc\nXOR EAX,EAX\nMOV EDX,R15D\nCALL 0x004025b0\nMOVSXD R14,R15D\nMOV RAX,qword ptr [0x0061d810]\nLEA RAX,[R14 + RAX*0x1 + 0x1]\nMOV qword ptr [0x0061d810],RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n53\n50\n41 89 d7\n48 89 f1\n48 89 fb\n48 85 db\n74 4e\n31 ed\n31 f6\n48 89 df\ne8 2f 30 00 00\n41 29 c7\n44 0f 48 fd\n48 8b 35 69 4c 21 00\n48 89 df\ne8 59 9a ff ff\n48 89 df\ne8 21 99 ff ff\n49 89 c6\n44 89 fb\nf7 d3\n66 0f 1f 84 00 00 00 00 00\nbf 20 00 00 00\ne8 d6 9a ff ff\nff c3\n75 f2\n4d 01 fe\neb 17\nbf 01 00 00 00\nbe dc 6a 41 00\n31 c0\n44 89 fa\ne8 09 9c ff ff\n4d 63 f7\n48 8b 05 5f 4e 21 00\n49 8d 44 06 01\n48 89 05 53 4e 21 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:0000000000408930\n.text:0000000000408931\n.text:0000000000408933\n.text:0000000000408935\n.text:0000000000408936\n.text:0000000000408937\n.text:000000000040893a\n.text:000000000040893d\n.text:0000000000408940\n.text:0000000000408943\n.text:0000000000408945\n.text:0000000000408947\n.text:0000000000408949\n.text:000000000040894c\n.text:0000000000408951\n.text:0000000000408954\n.text:0000000000408958\n.text:000000000040895f\n.text:0000000000408962\n.text:0000000000408967\n.text:000000000040896a\n.text:000000000040896f\n.text:0000000000408972\n.text:0000000000408975\n.text:0000000000408977\n.text:0000000000408980\n.text:0000000000408985\n.text:000000000040898a\n.text:000000000040898c\n.text:000000000040898e\n.text:0000000000408991\n.text:0000000000408993\n.text:0000000000408998\n.text:000000000040899d\n.text:000000000040899f\n.text:00000000004089a2\n.text:00000000004089a7\n.text:00000000004089aa\n.text:00000000004089b1\n.text:00000000004089b6\n.text:00000000004089bd\n.text:00000000004089c1\n.text:00000000004089c2\n.text:00000000004089c4\n.text:00000000004089c6\n.text:00000000004089c7\n'
p811
tp812
sS'__libc_csu_init'
p813
(S'\n__stdcall __libc_csu_init()\n'
p814
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p815
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x61ce08]\nPUSH RBP\nLEA RBP,[0x61ce10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00402060\nTEST RBP,RBP\nJZ 0x00411916\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00411900\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p816
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 36 b5 20 00\n55\n48 8d 2d 36 b5 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 6f 07 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p817
S'.text:00000000004118c0\n.text:00000000004118c2\n.text:00000000004118c4\n.text:00000000004118c7\n.text:00000000004118c9\n.text:00000000004118cb\n.text:00000000004118d2\n.text:00000000004118d3\n.text:00000000004118da\n.text:00000000004118db\n.text:00000000004118de\n.text:00000000004118e1\n.text:00000000004118e4\n.text:00000000004118e8\n.text:00000000004118ec\n.text:00000000004118f1\n.text:00000000004118f4\n.text:00000000004118f6\n.text:00000000004118f8\n.text:0000000000411900\n.text:0000000000411903\n.text:0000000000411906\n.text:0000000000411909\n.text:000000000041190d\n.text:0000000000411911\n.text:0000000000411914\n.text:0000000000411916\n.text:000000000041191a\n.text:000000000041191b\n.text:000000000041191c\n.text:000000000041191e\n.text:0000000000411920\n.text:0000000000411922\n.text:0000000000411924\n'
p818
tp819
sS'print_color_indicator'
p820
(S'\n__stdcall print_color_indicator(fileinfo * f)\n'
p821
V\u000a_Bool print_color_indicator(fileinfo *f)\u000a\u000a{\u000a  filetype fVar1;\u000a  size_t __n;\u000a  indicator_no filetype_indicator [10];\u000a  _Bool _Var2;\u000a  undefined uVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  size_t sVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  bin_str *ind;\u000a  color_ext_type *pcVar9;\u000a  char in_SIL;\u000a  indicator_no iVar10;\u000a  char *__s;\u000a  ulong uVar11;\u000a  bool bVar12;\u000a  \u000a  if (in_SIL != 0) {\u000a    __s = f->linkname;\u000a    uVar8 = f->linkmode;\u000a    uVar7 = 0;\u000a    if (f->linkok != false) goto LAB_004080f2;\u000a    uVar11 = 0xc;\u000a    _Var2 = is_colored();\u000a    uVar7 = 0xffffffff;\u000a    if (_Var2 == false) goto LAB_004080f2;\u000a    goto LAB_00408323;\u000a  }\u000a  __s = f->name;\u000a  if ((color_symlink_as_referent == 1) && (f->linkok != false)) {\u000a    puVar5 = &f->linkmode;\u000a  }\u000a  else {\u000a    puVar5 = &(f->stat).st_mode;\u000a  }\u000a  uVar7 = (uint)f->linkok;\u000a  uVar8 = *puVar5;\u000aLAB_004080f2:\u000a  if (f->stat_ok == false) {\u000a    fVar1 = f->filetype;\u000a    if ((fVar1 == whiteout) || (fVar1 == normal)) goto LAB_00408144;\u000a    iVar10 = ((indicator_no *)&ram0x004145e0)[(ulong)fVar1];\u000aswitchD_00408121_caseD_9:\u000a    pcVar9 = (color_ext_type *)0x0;\u000a    if ((uVar7 != 0) || (iVar10 != C_LINK)) {\u000a      uVar11 = (ulong)iVar10;\u000a      goto switchD_00408121_caseD_0;\u000a    }\u000a    if ((color_symlink_as_referent == 0) && (_Var2 = is_colored(), _Var2 == false)) {\u000a      pcVar9 = (color_ext_type *)0x0;\u000a      uVar11 = 7;\u000a      goto switchD_00408121_caseD_0;\u000a    }\u000aswitchD_00408121_caseD_2:\u000a    uVar11 = 0xd;\u000a  }\u000a  else {\u000a    uVar11 = 8;\u000a    iVar10 = C_LINK;\u000a    pcVar9 = (color_ext_type *)0x0;\u000a    switch((uVar8 & 0xf000) - 0x1000 >> 0xc) {\u000a    case 0:\u000a      goto switchD_00408121_caseD_0;\u000a    case 1:\u000a      uVar11 = 0xb;\u000a      break;\u000a    default:\u000a      goto switchD_00408121_caseD_2;\u000a    case 3:\u000a      bVar12 = (uVar8 & 0x200) == 0;\u000a      if ((!bVar12) && ((uVar8 & 2) != 0)) {\u000a        uVar11 = 0x14;\u000a        _Var2 = is_colored();\u000a        if (_Var2 != false) break;\u000a      }\u000a      if ((uVar8 & 2) == 0) {\u000a        if ((uVar8 & 0x200) != 0) goto LAB_004082f9;\u000a        uVar11 = 6;\u000a      }\u000a      else {\u000a        _Var2 = is_colored();\u000a        uVar11 = 6;\u000a        if (_Var2 != false) {\u000a          uVar11 = 0x13;\u000a        }\u000a        if ((bVar12 | _Var2) == 0) {\u000aLAB_004082f9:\u000a          _Var2 = is_colored();\u000a          uVar11 = 6;\u000a          if (_Var2 != false) {\u000a            uVar11 = 0x12;\u000a          }\u000a        }\u000a      }\u000a      break;\u000a    case 5:\u000a      uVar11 = 10;\u000a      break;\u000a    case 7:\u000a      if ((uVar8 & 0x800) != 0) {\u000a        uVar11 = 0x10;\u000a        _Var2 = is_colored();\u000a        if (_Var2 != false) break;\u000a      }\u000a      if ((uVar8 & 0x400) != 0) {\u000a        uVar11 = 0x11;\u000a        _Var2 = is_colored();\u000a        if (_Var2 != false) break;\u000a      }\u000a      uVar11 = 0x15;\u000a      _Var2 = is_colored();\u000a      if ((_Var2 == false) || (f->has_capability == false)) {\u000a        if ((uVar8 & 0x49) != 0) {\u000a          uVar11 = 0xe;\u000a          _Var2 = is_colored();\u000a          if (_Var2 != false) break;\u000a        }\u000a        if (1 < (f->stat).st_nlink) {\u000a          uVar11 = 0x16;\u000a          _Var2 = is_colored();\u000a          if (_Var2 != false) break;\u000a        }\u000aLAB_00408144:\u000a        sVar6 = strlen(__s);\u000a        uVar11 = 5;\u000a        pcVar9 = color_ext_list;\u000a        while (pcVar9 != (color_ext_type *)0x0) {\u000a          __n = (pcVar9->ext).len;\u000a          if ((__n <= sVar6) &&\u000a             (iVar4 = strncmp(__s + (sVar6 - __n),(pcVar9->ext).string,__n), iVar4 == 0))\u000a          goto switchD_00408121_caseD_0;\u000a          pcVar9 = pcVar9->next;\u000a        }\u000a      }\u000a      break;\u000a    case 9:\u000a      goto switchD_00408121_caseD_9;\u000a    case 0xb:\u000a      uVar11 = 9;\u000a    }\u000a  }\u000aLAB_00408323:\u000a  pcVar9 = (color_ext_type *)0x0;\u000aswitchD_00408121_caseD_0:\u000a  ind = color_indicator + uVar11;\u000a  if (pcVar9 != (color_ext_type *)0x0) {\u000a    ind = &pcVar9->seq;\u000a  }\u000a  if (ind->string == (char *)0x0) {\u000a    uVar3 = 0;\u000a  }\u000a  else {\u000a    _Var2 = is_colored();\u000a    if (_Var2 != false) {\u000a      restore_default_color();\u000a    }\u000a    put_indicator(color_indicator);\u000a    put_indicator(ind);\u000a    put_indicator(color_indicator + 1);\u000a    uVar3 = 1;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV RBX,RDI\nTEST SIL,SIL\nJZ 0x004080c7\nMOV R14,qword ptr [RBX + 0x8]\nMOV EDX,dword ptr [0xa4 + RBX]\nXOR ECX,ECX\nCMP byte ptr [0xb1 + RBX],0x0\nJNZ 0x004080f2\nMOV R15D,0xc\nMOV EDI,0xc\nMOV EBP,EDX\nCALL 0x00403ef0\nMOV EDX,EBP\nMOV ECX,0xffffffff\nTEST AL,AL\nJZ 0x004080f2\nJMP 0x00408323\nMOV R14,qword ptr [RBX]\nCMP byte ptr [0x0061d631],0x1\nJNZ 0x004080e5\nCMP byte ptr [0xb1 + RBX],0x0\nJZ 0x004080e5\nLEA RAX,[0xa4 + RBX]\nJMP 0x004080e9\nLEA RAX,[RBX + 0x28]\nMOVZX ECX,byte ptr [0xb1 + RBX]\nMOV EDX,dword ptr [RAX]\nCMP byte ptr [0xb0 + RBX],0x0\nJZ 0x00408133\nMOV EAX,EDX\nAND EAX,0xf000\nADD EAX,0xfffff000\nSHR EAX,0xc\nCMP EAX,0xb\nJA 0x004081ce\nMOV R15D,0x8\nMOV R12D,0x7\nXOR EBP,EBP\nJMP qword ptr [0x412ae0 + RAX*0x8]\nMOV R15D,0xb\nJMP 0x00408323\nMOV EAX,dword ptr [0xa0 + RBX]\nCMP RAX,0x8\nJZ 0x00408144\nCMP EAX,0x5\nJNZ 0x0040819e\nMOV RDI,R14\nCALL 0x00402290\nMOV RBX,RAX\nMOV RBP,qword ptr [0x0061e038]\nMOV R15D,0x5\nTEST RBP,RBP\nJZ 0x00408323\nADD R14,RBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [RBP]\nCMP RDX,RBX\nJA 0x00408190\nMOV RDI,R14\nSUB RDI,RDX\nMOV RSI,qword ptr [RBP + 0x8]\nCALL 0x00402120\nTEST EAX,EAX\nJZ 0x00408325\nMOV RBP,qword ptr [RBP + 0x20]\nTEST RBP,RBP\nJNZ 0x00408170\nJMP 0x00408323\nMOV R12D,dword ptr [0x4145e0 + RAX*0x4]\nXOR EBP,EBP\nTEST ECX,ECX\nJNZ 0x004081d9\nCMP R12D,0x7\nJNZ 0x004081d9\nMOV AL,byte ptr [0x0061d631]\nTEST AL,AL\nJNZ 0x004081ce\nMOV EDI,0xd\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x00408316\nMOV R15D,0xd\nJMP 0x00408323\nMOV R15D,R12D\nJMP 0x00408325\nMOV EBP,EDX\nAND EBP,0x2\nSETZ AL\nAND EDX,0x200\nSETZ R14B\nJZ 0x00408215\nTEST AL,AL\nJNZ 0x00408215\nMOV R15D,0x14\nMOV EDI,0x14\nMOV EBX,EDX\nCALL 0x00403ef0\nMOV EDX,EBX\nTEST AL,AL\nJNZ 0x00408323\nTEST EBP,EBP\nJZ 0x004082f5\nMOV EBP,0x13\nMOV EDI,0x13\nCALL 0x00403ef0\nTEST AL,AL\nMOV R15D,0x6\nCMOVNZ R15D,EBP\nOR R14B,AL\nJZ 0x004082f9\nJMP 0x00408323\nMOV R15D,0xa\nJMP 0x00408323\nTEST DH,0x8\nJZ 0x00408272\nMOV R15D,0x10\nMOV EDI,0x10\nMOV EBP,EDX\nCALL 0x00403ef0\nMOV EDX,EBP\nTEST AL,AL\nJNZ 0x00408323\nMOV EBP,EDX\nTEST DH,0x4\nJZ 0x00408291\nMOV R15D,0x11\nMOV EDI,0x11\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00408323\nMOV R15D,0x15\nMOV EDI,0x15\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x004082ae\nCMP byte ptr [0xb8 + RBX],0x0\nJNZ 0x00408323\nTEST BPL,0x49\nJZ 0x004082c8\nMOV R15D,0xe\nMOV EDI,0xe\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00408323\nCMP qword ptr [RBX + 0x20],0x2\nJC 0x00408144\nMOV R15D,0x16\nMOV EDI,0x16\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x00408144\nJMP 0x00408323\nMOV R15D,0x9\nJMP 0x00408323\nTEST EDX,EDX\nJZ 0x0040831d\nMOV EBX,0x12\nMOV EDI,0x12\nCALL 0x00403ef0\nTEST AL,AL\nMOV R15D,0x6\nCMOVNZ R15D,EBX\nJMP 0x00408323\nXOR EBP,EBP\nMOV R15D,R12D\nJMP 0x00408325\nMOV R15D,0x6\nXOR EBP,EBP\nMOV EAX,R15D\nSHL RAX,0x4\nTEST RBP,RBP\nLEA RCX,[RBP + 0x10]\nLEA RBX,[0x61d380 + RAX]\nCMOVNZ RBX,RCX\nCMP qword ptr [RBX + 0x8],0x0\nJZ 0x00408378\nMOV EDI,0x4\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x00408358\nCALL 0x00405090\nMOV EDI,0x61d380\nCALL 0x00405680\nMOV RDI,RBX\nCALL 0x00405680\nMOV EDI,0x61d390\nCALL 0x00405680\nMOV AL,0x1\nJMP 0x0040837a\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n41 54\n53\n48 89 fb\n40 84 f6\n74 37\n4c 8b 73 08\n8b 93 a4 00 00 00\n31 c9\n80 bb b1 00 00 00 00\n75 4d\n41 bf 0c 00 00 00\nbf 0c 00 00 00\n89 d5\ne8 39 be ff ff\n89 ea\nb9 ff ff ff ff\n84 c0\n74 30\ne9 5c 02 00 00\n4c 8b 33\n80 3d 60 55 21 00 01\n75 12\n80 bb b1 00 00 00 00\n74 09\n48 8d 83 a4 00 00 00\neb 04\n48 8d 43 28\n0f b6 8b b1 00 00 00\n8b 10\n80 bb b0 00 00 00 00\n74 38\n89 d0\n25 00 f0 00 00\n05 00 f0 ff ff\nc1 e8 0c\n83 f8 0b\n0f 87 bb 00 00 00\n41 bf 08 00 00 00\n41 bc 07 00 00 00\n31 ed\nff 24 c5 e0 2a 41 00\n41 bf 0b 00 00 00\ne9 f0 01 00 00\n8b 83 a0 00 00 00\n48 83 f8 08\n74 05\n83 f8 05\n75 5a\n4c 89 f7\ne8 44 a1 ff ff\n48 89 c3\n48 8b 2d e2 5e 21 00\n41 bf 05 00 00 00\n48 85 ed\n0f 84 be 01 00 00\n49 01 de\n0f 1f 84 00 00 00 00 00\n48 8b 55 00\n48 39 da\n77 17\n4c 89 f7\n48 29 d7\n48 8b 75 08\ne8 98 9f ff ff\n85 c0\n0f 84 95 01 00 00\n48 8b 6d 20\n48 85 ed\n75 d7\ne9 85 01 00 00\n44 8b 24 85 e0 45 41 00\n31 ed\n85 c9\n75 2d\n41 83 fc 07\n75 27\n8a 05 79 54 21 00\n84 c0\n75 12\nbf 0d 00 00 00\ne8 2a bd ff ff\n84 c0\n0f 84 48 01 00 00\n41 bf 0d 00 00 00\ne9 4a 01 00 00\n45 89 e7\ne9 44 01 00 00\n89 d5\n83 e5 02\n0f 94 c0\n81 e2 00 02 00 00\n41 0f 94 c6\n74 20\n84 c0\n75 1c\n41 bf 14 00 00 00\nbf 14 00 00 00\n89 d3\ne8 e5 bc ff ff\n89 da\n84 c0\n0f 85 0e 01 00 00\n85 ed\n0f 84 d8 00 00 00\nbd 13 00 00 00\nbf 13 00 00 00\ne8 c4 bc ff ff\n84 c0\n41 bf 06 00 00 00\n44 0f 45 fd\n41 08 c6\n0f 84 b8 00 00 00\ne9 dd 00 00 00\n41 bf 0a 00 00 00\ne9 d2 00 00 00\nf6 c6 08\n74 1c\n41 bf 10 00 00 00\nbf 10 00 00 00\n89 d5\ne8 88 bc ff ff\n89 ea\n84 c0\n0f 85 b1 00 00 00\n89 d5\nf6 c6 04\n74 18\n41 bf 11 00 00 00\nbf 11 00 00 00\ne8 67 bc ff ff\n84 c0\n0f 85 92 00 00 00\n41 bf 15 00 00 00\nbf 15 00 00 00\ne8 4f bc ff ff\n84 c0\n74 09\n80 bb b8 00 00 00 00\n75 75\n40 f6 c5 49\n74 14\n41 bf 0e 00 00 00\nbf 0e 00 00 00\ne8 2c bc ff ff\n84 c0\n75 5b\n48 83 7b 20 02\n0f 82 71 fe ff ff\n41 bf 16 00 00 00\nbf 16 00 00 00\ne8 0d bc ff ff\n84 c0\n0f 84 59 fe ff ff\neb 36\n41 bf 09 00 00 00\neb 2e\n85 d2\n74 24\nbb 12 00 00 00\nbf 12 00 00 00\ne8 e8 bb ff ff\n84 c0\n41 bf 06 00 00 00\n44 0f 45 fb\neb 0d\n31 ed\n45 89 e7\neb 08\n41 bf 06 00 00 00\n31 ed\n44 89 f8\n48 c1 e0 04\n48 85 ed\n48 8d 4d 10\n48 8d 98 80 d3 61 00\n48 0f 45 d9\n48 83 7b 08 00\n74 33\nbf 04 00 00 00\ne8 a1 bb ff ff\n84 c0\n74 05\ne8 38 cd ff ff\nbf 80 d3 61 00\ne8 1e d3 ff ff\n48 89 df\ne8 16 d3 ff ff\nbf 90 d3 61 00\ne8 0c d3 ff ff\nb0 01\neb 02\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:0000000000408080\n.text:0000000000408081\n.text:0000000000408083\n.text:0000000000408085\n.text:0000000000408087\n.text:0000000000408088\n.text:000000000040808b\n.text:000000000040808e\n.text:0000000000408090\n.text:0000000000408094\n.text:000000000040809a\n.text:000000000040809c\n.text:00000000004080a3\n.text:00000000004080a5\n.text:00000000004080ab\n.text:00000000004080b0\n.text:00000000004080b2\n.text:00000000004080b7\n.text:00000000004080b9\n.text:00000000004080be\n.text:00000000004080c0\n.text:00000000004080c2\n.text:00000000004080c7\n.text:00000000004080ca\n.text:00000000004080d1\n.text:00000000004080d3\n.text:00000000004080da\n.text:00000000004080dc\n.text:00000000004080e3\n.text:00000000004080e5\n.text:00000000004080e9\n.text:00000000004080f0\n.text:00000000004080f2\n.text:00000000004080f9\n.text:00000000004080fb\n.text:00000000004080fd\n.text:0000000000408102\n.text:0000000000408107\n.text:000000000040810a\n.text:000000000040810d\n.text:0000000000408113\n.text:0000000000408119\n.text:000000000040811f\n.text:0000000000408121\n.text:0000000000408128\n.text:000000000040812e\n.text:0000000000408133\n.text:0000000000408139\n.text:000000000040813d\n.text:000000000040813f\n.text:0000000000408142\n.text:0000000000408144\n.text:0000000000408147\n.text:000000000040814c\n.text:000000000040814f\n.text:0000000000408156\n.text:000000000040815c\n.text:000000000040815f\n.text:0000000000408165\n.text:0000000000408168\n.text:0000000000408170\n.text:0000000000408174\n.text:0000000000408177\n.text:0000000000408179\n.text:000000000040817c\n.text:000000000040817f\n.text:0000000000408183\n.text:0000000000408188\n.text:000000000040818a\n.text:0000000000408190\n.text:0000000000408194\n.text:0000000000408197\n.text:0000000000408199\n.text:000000000040819e\n.text:00000000004081a6\n.text:00000000004081a8\n.text:00000000004081aa\n.text:00000000004081ac\n.text:00000000004081b0\n.text:00000000004081b2\n.text:00000000004081b8\n.text:00000000004081ba\n.text:00000000004081bc\n.text:00000000004081c1\n.text:00000000004081c6\n.text:00000000004081c8\n.text:00000000004081ce\n.text:00000000004081d4\n.text:00000000004081d9\n.text:00000000004081dc\n.text:00000000004081e1\n.text:00000000004081e3\n.text:00000000004081e6\n.text:00000000004081e9\n.text:00000000004081ef\n.text:00000000004081f3\n.text:00000000004081f5\n.text:00000000004081f7\n.text:00000000004081f9\n.text:00000000004081ff\n.text:0000000000408204\n.text:0000000000408206\n.text:000000000040820b\n.text:000000000040820d\n.text:000000000040820f\n.text:0000000000408215\n.text:0000000000408217\n.text:000000000040821d\n.text:0000000000408222\n.text:0000000000408227\n.text:000000000040822c\n.text:000000000040822e\n.text:0000000000408234\n.text:0000000000408238\n.text:000000000040823b\n.text:0000000000408241\n.text:0000000000408246\n.text:000000000040824c\n.text:0000000000408251\n.text:0000000000408254\n.text:0000000000408256\n.text:000000000040825c\n.text:0000000000408261\n.text:0000000000408263\n.text:0000000000408268\n.text:000000000040826a\n.text:000000000040826c\n.text:0000000000408272\n.text:0000000000408274\n.text:0000000000408277\n.text:0000000000408279\n.text:000000000040827f\n.text:0000000000408284\n.text:0000000000408289\n.text:000000000040828b\n.text:0000000000408291\n.text:0000000000408297\n.text:000000000040829c\n.text:00000000004082a1\n.text:00000000004082a3\n.text:00000000004082a5\n.text:00000000004082ac\n.text:00000000004082ae\n.text:00000000004082b2\n.text:00000000004082b4\n.text:00000000004082ba\n.text:00000000004082bf\n.text:00000000004082c4\n.text:00000000004082c6\n.text:00000000004082c8\n.text:00000000004082cd\n.text:00000000004082d3\n.text:00000000004082d9\n.text:00000000004082de\n.text:00000000004082e3\n.text:00000000004082e5\n.text:00000000004082eb\n.text:00000000004082ed\n.text:00000000004082f3\n.text:00000000004082f5\n.text:00000000004082f7\n.text:00000000004082f9\n.text:00000000004082fe\n.text:0000000000408303\n.text:0000000000408308\n.text:000000000040830a\n.text:0000000000408310\n.text:0000000000408314\n.text:0000000000408316\n.text:0000000000408318\n.text:000000000040831b\n.text:000000000040831d\n.text:0000000000408323\n.text:0000000000408325\n.text:0000000000408328\n.text:000000000040832c\n.text:000000000040832f\n.text:0000000000408333\n.text:000000000040833a\n.text:000000000040833e\n.text:0000000000408343\n.text:0000000000408345\n.text:000000000040834a\n.text:000000000040834f\n.text:0000000000408351\n.text:0000000000408353\n.text:0000000000408358\n.text:000000000040835d\n.text:0000000000408362\n.text:0000000000408365\n.text:000000000040836a\n.text:000000000040836f\n.text:0000000000408374\n.text:0000000000408376\n.text:0000000000408378\n.text:000000000040837a\n.text:000000000040837b\n.text:000000000040837d\n.text:000000000040837f\n.text:0000000000408381\n.text:0000000000408382\n'
p825
tp826
sS'c_isdigit'
p827
(S'\n__stdcall c_isdigit()\n'
p828
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p829
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p830
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p831
S'.text:0000000000410bc0\n.text:0000000000410bc3\n.text:0000000000410bc6\n.text:0000000000410bc9\n'
p832
tp833
sS'set_normal_color'
p834
(S'\n__stdcall set_normal_color()\n'
p835
V\u000aundefined8 set_normal_color(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined8 in_RAX;\u000a  undefined8 extraout_RAX;\u000a  \u000a  if (print_with_color != false) {\u000a    _Var1 = is_colored();\u000a    if (_Var1 != false) {\u000a      put_indicator(color_indicator);\u000a      put_indicator(color_indicator + 4);\u000a      put_indicator(color_indicator + 1);\u000a      return extraout_RAX;\u000a    }\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p836
S'PUSH RAX\nCMP byte ptr [0x0061d630],0x0\nJZ 0x004077f7\nMOV EDI,0x4\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x004077f7\nMOV EDI,0x61d380\nCALL 0x00405680\nMOV EDI,0x61d3c0\nCALL 0x00405680\nMOV EDI,0x61d390\nPOP RAX\nJMP 0x00405680\nPOP RAX\nRET\n'
p837
S'50\n80 3d 68 5e 21 00 00\n74 2d\nbf 04 00 00 00\ne8 1c c7 ff ff\n84 c0\n74 1f\nbf 80 d3 61 00\ne8 9e de ff ff\nbf c0 d3 61 00\ne8 94 de ff ff\nbf 90 d3 61 00\n58\ne9 89 de ff ff\n58\nc3\n'
p838
S'.text:00000000004077c0\n.text:00000000004077c1\n.text:00000000004077c8\n.text:00000000004077ca\n.text:00000000004077cf\n.text:00000000004077d4\n.text:00000000004077d6\n.text:00000000004077d8\n.text:00000000004077dd\n.text:00000000004077e2\n.text:00000000004077e7\n.text:00000000004077ec\n.text:00000000004077f1\n.text:00000000004077f2\n.text:00000000004077f7\n.text:00000000004077f8\n'
p839
tp840
sS'string_to_security_class'
p841
(S'\n__stdcall string_to_security_class(char * name)\n'
p842
V\u000asecurity_class_t string_to_security_class(char *name)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return 0;\u000a}\u000a\u000a
p843
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p844
S'50\ne8 fa 46 ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p845
S'.text:000000000040da10\n.text:000000000040da11\n.text:000000000040da16\n.text:000000000040da1c\n.text:000000000040da1e\n.text:000000000040da1f\n'
p846
tp847
sS'rev_xstrcoll_df_atime'
p848
(S'\n__stdcall rev_xstrcoll_df_atime(V a, V b)\n'
p849
V\u000aint rev_xstrcoll_df_atime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_atime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p850
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040704a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040706d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040706d\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407320\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p851
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 90 f4 ff ff\n89 c3\n4c 89 f7\ne8 86 f4 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 b3 02 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p852
S'.text:0000000000407020\n.text:0000000000407022\n.text:0000000000407024\n.text:0000000000407025\n.text:0000000000407028\n.text:000000000040702b\n.text:0000000000407030\n.text:0000000000407032\n.text:0000000000407035\n.text:000000000040703a\n.text:000000000040703c\n.text:000000000040703e\n.text:0000000000407040\n.text:0000000000407043\n.text:0000000000407048\n.text:000000000040704a\n.text:000000000040704c\n.text:000000000040704e\n.text:0000000000407053\n.text:0000000000407056\n.text:0000000000407058\n.text:000000000040705d\n.text:0000000000407060\n.text:0000000000407063\n.text:0000000000407064\n.text:0000000000407066\n.text:0000000000407068\n.text:000000000040706d\n.text:000000000040706f\n.text:0000000000407070\n.text:0000000000407072\n.text:0000000000407074\n'
p853
tp854
sS'matchpathcon_init_prefix'
p855
(S'\n__stdcall matchpathcon_init_prefix(char * path, char * prefix)\n'
p856
V\u000aint matchpathcon_init_prefix(char *path,char *prefix)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p857
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p858
S'50\ne8 ea 46 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p859
S'.text:000000000040da20\n.text:000000000040da21\n.text:000000000040da26\n.text:000000000040da2c\n.text:000000000040da31\n.text:000000000040da32\n'
p860
tp861
sS'initialize_ordering_vector'
p862
(S'\n__stdcall initialize_ordering_vector()\n'
p863
V\u000avoid initialize_ordering_vector(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  void **ppvVar2;\u000a  fileinfo *pfVar3;\u000a  ulong uVar4;\u000a  \u000a  ppvVar2 = sorted_file;\u000a  sVar1 = cwd_n_used;\u000a  if (cwd_n_used != 0) {\u000a    uVar4 = 0;\u000a    pfVar3 = cwd_file;\u000a    do {\u000a      *(fileinfo **)(ppvVar2 + uVar4) = pfVar3;\u000a      uVar4 = uVar4 + 1;\u000a      pfVar3 = pfVar3 + 1;\u000a    } while (uVar4 < sVar1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p864
S'CMP qword ptr [0x0061d808],0x0\nJZ 0x00406562\nMOV RAX,qword ptr [0x0061d800]\nMOV RCX,qword ptr [0x0061e048]\nMOV RDX,qword ptr [0x0061d808]\nXOR ESI,ESI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RCX + RSI*0x8],RAX\nINC RSI\nADD RAX,0xc0\nCMP RSI,RDX\nJC 0x00406550\nRET\n'
p865
S'48 83 3d e0 72 21 00 00\n74 38\n48 8b 05 cf 72 21 00\n48 8b 0d 10 7b 21 00\n48 8b 15 c9 72 21 00\n31 f6\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 04 f1\n48 ff c6\n48 05 c0 00 00 00\n48 39 d6\n72 ee\nc3\n'
p866
S'.text:0000000000406520\n.text:0000000000406528\n.text:000000000040652a\n.text:0000000000406531\n.text:0000000000406538\n.text:000000000040653f\n.text:0000000000406541\n.text:0000000000406550\n.text:0000000000406554\n.text:0000000000406557\n.text:000000000040655d\n.text:0000000000406560\n.text:0000000000406562\n'
p867
tp868
sS'verrevcmp'
p869
(S'\n__stdcall verrevcmp(char * s1, size_t s1_len, char * s2, size_t s2_len)\n'
p870
V\u000aint verrevcmp(char *s1,size_t s1_len,char *s2,size_t s2_len)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int iVar5;\u000a  long lVar6;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  \u000a  uVar10 = 0;\u000a  uVar9 = 0;\u000a  do {\u000a    if ((s2_len <= uVar10) && (s1_len <= uVar9)) {\u000a      return 0;\u000a    }\u000a    uVar1 = uVar9 - 1;\u000a    uVar2 = uVar10 - 1;\u000a    uVar7 = uVar10;\u000a    uVar8 = uVar9;\u000a    while (((uVar10 = uVar2, uVar9 = uVar1, uVar8 < s1_len && (_Var3 = c_isdigit(), _Var3 == false))\u000a           || ((uVar7 < s2_len && (_Var3 = c_isdigit(), _Var3 == false))))) {\u000a      iVar5 = 0;\u000a      iVar4 = 0;\u000a      if (s1_len != uVar8) {\u000a        iVar4 = order();\u000a      }\u000a      if (s2_len != uVar7) {\u000a        iVar5 = order();\u000a      }\u000a      if (iVar4 - iVar5 != 0) {\u000a        return iVar4 - iVar5;\u000a      }\u000a      uVar8 = uVar8 + 1;\u000a      uVar7 = uVar7 + 1;\u000a      uVar1 = uVar9 + 1;\u000a      uVar2 = uVar10 + 1;\u000a    }\u000a    do {\u000a      lVar6 = uVar9 + 1;\u000a      uVar9 = uVar9 + 1;\u000a    } while (s1[lVar6] == '0');\u000a    do {\u000a      lVar6 = uVar10 + 1;\u000a      uVar10 = uVar10 + 1;\u000a    } while (s2[lVar6] == '0');\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 == false) {\u000a      iVar4 = 0;\u000a    }\u000a    else {\u000a      lVar6 = 0;\u000a      iVar4 = 0;\u000a      do {\u000a        _Var3 = c_isdigit();\u000a        if (_Var3 == false) break;\u000a        if (iVar4 == 0) {\u000a          iVar4 = (int)s1[lVar6 + uVar9] - (int)s2[lVar6 + uVar10];\u000a        }\u000a        _Var3 = c_isdigit();\u000a        lVar6 = lVar6 + 1;\u000a      } while (_Var3 != false);\u000a      uVar9 = uVar9 + lVar6;\u000a      uVar10 = uVar10 + lVar6;\u000a    }\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 != false) {\u000a      return 1;\u000a    }\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 != false) {\u000a      return -1;\u000a    }\u000a    if (iVar4 != 0) {\u000a      return iVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV qword ptr [RSP + 0x8],RDI\nXOR R12D,R12D\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x18],RCX\nCMP R12,RCX\nJC 0x00409608\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x00409775\nLEA R13,[R14 + -0x1]\nLEA R15,[R12 + -0x1]\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x00409646\nJMP 0x00409633\nINC R14\nINC R12\nINC R13\nINC R15\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x00409646\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSX EDI,byte ptr [RAX + R14*0x1]\nCALL 0x00410bc0\nTEST AL,AL\nJZ 0x00409660\nCMP R12,qword ptr [RSP + 0x18]\nJNC 0x004096a0\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x00410bc0\nTEST AL,AL\nJNZ 0x004096a0\nXOR EBX,EBX\nCMP qword ptr [RSP + 0x20],R14\nMOV EBP,0x0\nJZ 0x0040967f\nMOV RAX,qword ptr [RSP + 0x8]\nMOVZX EDI,byte ptr [RAX + R14*0x1]\nCALL 0x004097a0\nMOV EBP,EAX\nCMP qword ptr [RSP + 0x18],R12\nJZ 0x00409697\nMOV RAX,qword ptr [RSP + 0x10]\nMOVZX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x004097a0\nMOV EBX,EAX\nSUB EBP,EBX\nJZ 0x00409620\nJMP 0x00409785\nMOV R14,R13\nMOV RBP,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBP + R14*0x1 + 0x1],0x30\nLEA R14,[R14 + 0x1]\nJZ 0x004096b0\nMOV RBX,qword ptr [RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RBX + R15*0x1 + 0x1],0x30\nLEA R15,[R15 + 0x1]\nJZ 0x004096d0\nMOVSX EDI,byte ptr [RBP + R14*0x1]\nCALL 0x00410bc0\nLEA R13,[RBP + R14*0x1]\nTEST AL,AL\nJZ 0x00409740\nLEA R12,[RBX + R15*0x1]\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [R12 + RBX*0x1]\nCALL 0x00410bc0\nTEST AL,AL\nJZ 0x00409731\nTEST EBP,EBP\nJNZ 0x0040971f\nMOVSX EBP,byte ptr [R13 + RBX*0x1]\nMOVSX EAX,byte ptr [R12 + RBX*0x1]\nSUB EBP,EAX\nMOVSX EDI,byte ptr [R13 + RBX*0x1 + 0x1]\nCALL 0x00410bc0\nINC RBX\nTEST AL,AL\nJNZ 0x00409700\nADD R13,RBX\nADD R14,RBX\nADD R15,RBX\nJMP 0x00409742\nXOR EBP,EBP\nMOV R12,R15\nMOVSX EDI,byte ptr [R13]\nCALL 0x00410bc0\nTEST AL,AL\nJNZ 0x00409779\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x00410bc0\nTEST AL,AL\nJNZ 0x00409780\nTEST EBP,EBP\nMOV RCX,qword ptr [RSP + 0x18]\nJZ 0x004095f8\nJMP 0x00409785\nXOR EBP,EBP\nJMP 0x00409785\nMOV EBP,0x1\nJMP 0x00409785\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p872
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 54 24 10\n48 89 74 24 20\n48 89 7c 24 08\n45 31 e4\n45 31 f6\n48 89 4c 24 18\n49 39 cc\n72 0b\n4c 3b 74 24 20\n0f 83 6d 01 00 00\n4d 8d 6e ff\n4d 8d 7c 24 ff\n4c 3b 74 24 20\n73 2e\neb 19\n49 ff c6\n49 ff c4\n49 ff c5\n49 ff c7\n4c 3b 74 24 20\n73 13\n48 8b 44 24 08\n42 0f be 3c 30\ne8 7e 75 00 00\n84 c0\n74 1a\n4c 3b 64 24 18\n73 53\n48 8b 44 24 10\n42 0f be 3c 20\ne8 64 75 00 00\n84 c0\n75 40\n31 db\n4c 39 74 24 20\nbd 00 00 00 00\n74 11\n48 8b 44 24 08\n42 0f b6 3c 30\ne8 23 01 00 00\n89 c5\n4c 39 64 24 18\n74 11\n48 8b 44 24 10\n42 0f b6 3c 20\ne8 0b 01 00 00\n89 c3\n29 dd\n74 85\ne9 e5 00 00 00\n4d 89 ee\n48 8b 6c 24 08\n0f 1f 84 00 00 00 00 00\n42 80 7c 35 01 30\n4d 8d 76 01\n74 f4\n48 8b 5c 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n42 80 7c 3b 01 30\n4d 8d 7f 01\n74 f4\n42 0f be 7c 35 00\ne8 d9 74 00 00\n4e 8d 6c 35 00\n84 c0\n74 50\n4e 8d 24 3b\n31 db\n31 ed\n0f 1f 84 00 00 00 00 00\n41 0f be 3c 1c\ne8 b6 74 00 00\n84 c0\n74 23\n85 ed\n75 0d\n41 0f be 6c 1d 00\n41 0f be 04 1c\n29 c5\n41 0f be 7c 1d 01\ne8 96 74 00 00\n48 ff c3\n84 c0\n75 cf\n49 01 dd\n49 01 de\n49 01 df\neb 06\n31 ed\n4d 89 fc\n41 0f be 7d 00\ne8 71 74 00 00\n84 c0\n75 26\n48 8b 44 24 10\n42 0f be 3c 20\ne8 5e 74 00 00\n84 c0\n75 1a\n85 ed\n48 8b 4c 24 18\n0f 84 85 fe ff ff\neb 10\n31 ed\neb 0c\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p873
S'.text:00000000004095d0\n.text:00000000004095d1\n.text:00000000004095d3\n.text:00000000004095d5\n.text:00000000004095d7\n.text:00000000004095d9\n.text:00000000004095da\n.text:00000000004095de\n.text:00000000004095e3\n.text:00000000004095e8\n.text:00000000004095ed\n.text:00000000004095f0\n.text:00000000004095f3\n.text:00000000004095f8\n.text:00000000004095fb\n.text:00000000004095fd\n.text:0000000000409602\n.text:0000000000409608\n.text:000000000040960c\n.text:0000000000409611\n.text:0000000000409616\n.text:0000000000409618\n.text:0000000000409620\n.text:0000000000409623\n.text:0000000000409626\n.text:0000000000409629\n.text:000000000040962c\n.text:0000000000409631\n.text:0000000000409633\n.text:0000000000409638\n.text:000000000040963d\n.text:0000000000409642\n.text:0000000000409644\n.text:0000000000409646\n.text:000000000040964b\n.text:000000000040964d\n.text:0000000000409652\n.text:0000000000409657\n.text:000000000040965c\n.text:000000000040965e\n.text:0000000000409660\n.text:0000000000409662\n.text:0000000000409667\n.text:000000000040966c\n.text:000000000040966e\n.text:0000000000409673\n.text:0000000000409678\n.text:000000000040967d\n.text:000000000040967f\n.text:0000000000409684\n.text:0000000000409686\n.text:000000000040968b\n.text:0000000000409690\n.text:0000000000409695\n.text:0000000000409697\n.text:0000000000409699\n.text:000000000040969b\n.text:00000000004096a0\n.text:00000000004096a3\n.text:00000000004096a8\n.text:00000000004096b0\n.text:00000000004096b6\n.text:00000000004096ba\n.text:00000000004096bc\n.text:00000000004096c1\n.text:00000000004096d0\n.text:00000000004096d6\n.text:00000000004096da\n.text:00000000004096dc\n.text:00000000004096e2\n.text:00000000004096e7\n.text:00000000004096ec\n.text:00000000004096ee\n.text:00000000004096f0\n.text:00000000004096f4\n.text:00000000004096f6\n.text:00000000004096f8\n.text:0000000000409700\n.text:0000000000409705\n.text:000000000040970a\n.text:000000000040970c\n.text:000000000040970e\n.text:0000000000409710\n.text:0000000000409712\n.text:0000000000409718\n.text:000000000040971d\n.text:000000000040971f\n.text:0000000000409725\n.text:000000000040972a\n.text:000000000040972d\n.text:000000000040972f\n.text:0000000000409731\n.text:0000000000409734\n.text:0000000000409737\n.text:000000000040973a\n.text:0000000000409740\n.text:0000000000409742\n.text:0000000000409745\n.text:000000000040974a\n.text:000000000040974f\n.text:0000000000409751\n.text:0000000000409753\n.text:0000000000409758\n.text:000000000040975d\n.text:0000000000409762\n.text:0000000000409764\n.text:0000000000409766\n.text:0000000000409768\n.text:000000000040976d\n.text:0000000000409773\n.text:0000000000409775\n.text:0000000000409777\n.text:0000000000409779\n.text:000000000040977e\n.text:0000000000409780\n.text:0000000000409785\n.text:0000000000409787\n.text:000000000040978b\n.text:000000000040978c\n.text:000000000040978e\n.text:0000000000409790\n.text:0000000000409792\n.text:0000000000409794\n.text:0000000000409795\n'
p874
tp875
sS'get_stat_mtime_ns'
p876
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p877
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p878
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p879
S'48 8b 47 60\nc3\n'
p880
S'.text:000000000040da60\n.text:000000000040da64\n'
p881
tp882
sS'get_stat_atime_ns'
p883
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p884
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p885
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p886
S'48 8b 47 50\nc3\n'
p887
S'.text:000000000040da40\n.text:000000000040da44\n'
p888
tp889
sS'mdir_name'
p890
(S'\n__stdcall mdir_name(char * file)\n'
p891
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p892
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00409040\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004024e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004090ce\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00402440\nTEST RBX,RBX\nJNZ 0x004090c7\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x004090d1\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p893
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 3e 94 ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 88 93 ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p894
S'.text:0000000000409080\n.text:0000000000409082\n.text:0000000000409084\n.text:0000000000409085\n.text:0000000000409088\n.text:000000000040908d\n.text:0000000000409090\n.text:0000000000409092\n.text:0000000000409095\n.text:0000000000409098\n.text:000000000040909d\n.text:00000000004090a2\n.text:00000000004090a5\n.text:00000000004090a8\n.text:00000000004090aa\n.text:00000000004090ad\n.text:00000000004090b0\n.text:00000000004090b3\n.text:00000000004090b8\n.text:00000000004090bb\n.text:00000000004090bd\n.text:00000000004090c2\n.text:00000000004090c7\n.text:00000000004090cc\n.text:00000000004090ce\n.text:00000000004090d1\n.text:00000000004090d4\n.text:00000000004090d5\n.text:00000000004090d7\n.text:00000000004090d9\n'
p895
tp896
sS'rev_xstrcoll_size'
p897
(S'\n__stdcall rev_xstrcoll_size(V a, V b)\n'
p898
V\u000aint rev_xstrcoll_size(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_size((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407220\n'
p900
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 6d 08 00 00\n'
p901
S'.text:00000000004069a0\n.text:00000000004069a3\n.text:00000000004069a8\n.text:00000000004069ab\n.text:00000000004069ae\n'
p902
tp903
sS'c_isgraph'
p904
(S'\n__stdcall c_isgraph()\n'
p905
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p906
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p907
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p908
S'.text:0000000000410bd0\n.text:0000000000410bd3\n.text:0000000000410bd6\n.text:0000000000410bd9\n'
p909
tp910
sS'hash_get_next'
p911
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p912
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p913
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00409a80\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00409b26\nTEST DL,DL\nJZ 0x00409b53\nTEST RCX,RCX\nJNZ 0x00409b10\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00409b58\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00409b40\nJMP 0x00409b5a\nMOV RCX,qword ptr [RCX]\nJMP 0x00409b5a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p914
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p915
S'.text:0000000000409af0\n.text:0000000000409af2\n.text:0000000000409af3\n.text:0000000000409af4\n.text:0000000000409af7\n.text:0000000000409afa\n.text:0000000000409aff\n.text:0000000000409b02\n.text:0000000000409b10\n.text:0000000000409b13\n.text:0000000000409b17\n.text:0000000000409b1a\n.text:0000000000409b1d\n.text:0000000000409b20\n.text:0000000000409b22\n.text:0000000000409b24\n.text:0000000000409b26\n.text:0000000000409b29\n.text:0000000000409b2b\n.text:0000000000409b2f\n.text:0000000000409b33\n.text:0000000000409b40\n.text:0000000000409b43\n.text:0000000000409b45\n.text:0000000000409b48\n.text:0000000000409b4c\n.text:0000000000409b4f\n.text:0000000000409b51\n.text:0000000000409b53\n.text:0000000000409b56\n.text:0000000000409b58\n.text:0000000000409b5a\n.text:0000000000409b5d\n.text:0000000000409b61\n.text:0000000000409b62\n.text:0000000000409b64\n'
p916
tp917
sS'order'
p918
(S'\n__stdcall order()\n'
p919
V\u000aint order(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  ulong in_RDI;\u000a  \u000a  _Var1 = c_isdigit();\u000a  uVar2 = 0;\u000a  if (_Var1 == false) {\u000a    _Var1 = c_isalpha();\u000a    uVar3 = (uint)(in_RDI & 0xffffffff);\u000a    uVar2 = uVar3;\u000a    if (_Var1 == false) {\u000a      uVar2 = 0xffffffff;\u000a      if ((char)(in_RDI & 0xffffffff) != '~') {\u000a        uVar2 = uVar3 | 0x100;\u000a      }\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p920
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00410bc0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST CL,CL\nJNZ 0x004097d0\nMOV EDI,EBX\nCALL 0x00410b70\nTEST AL,AL\nMOV EAX,EBX\nJNZ 0x004097d0\nMOV ECX,EBX\nOR ECX,0x100\nCMP BL,0x7e\nMOV EAX,0xffffffff\nCMOVNZ EAX,ECX\nPOP RBX\nRET\n'
p921
S'53\n89 fb\ne8 18 74 00 00\n89 c1\n31 c0\n84 c9\n75 20\n89 df\ne8 b9 73 00 00\n84 c0\n89 d8\n75 13\n89 d9\n81 c9 00 01 00 00\n80 fb 7e\nb8 ff ff ff ff\n0f 45 c1\n5b\nc3\n'
p922
S'.text:00000000004097a0\n.text:00000000004097a1\n.text:00000000004097a3\n.text:00000000004097a8\n.text:00000000004097aa\n.text:00000000004097ac\n.text:00000000004097ae\n.text:00000000004097b0\n.text:00000000004097b2\n.text:00000000004097b7\n.text:00000000004097b9\n.text:00000000004097bb\n.text:00000000004097bd\n.text:00000000004097bf\n.text:00000000004097c5\n.text:00000000004097c8\n.text:00000000004097cd\n.text:00000000004097d0\n.text:00000000004097d1\n'
p923
tp924
sS'ambsalign'
p925
(S'\n__stdcall ambsalign(char * src, size_t * width)\n'
p926
V\u000achar * ambsalign(char *src,size_t *width)\u000a\u000a{\u000a  ulong uVar1;\u000a  char *dest;\u000a  ulong uVar2;\u000a  ulong __size;\u000a  char *__ptr;\u000a  \u000a  uVar1 = *width;\u000a  uVar2 = uVar1;\u000a  __size = uVar1;\u000a  __ptr = (char *)0x0;\u000a  do {\u000a    if (uVar2 < __size) {\u000a      return __ptr;\u000a    }\u000a    __size = uVar2 + 1;\u000a    dest = (char *)realloc(__ptr,__size);\u000a    if (dest == (char *)0x0) break;\u000a    *width = uVar1;\u000a    uVar2 = mbsalign(src,dest,__size,width);\u000a    __ptr = dest;\u000a  } while (uVar2 != 0xffffffffffffffff);\u000a  free(__ptr);\u000a  return (char *)0x0;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],ECX\nMOV dword ptr [RSP],EDX\nMOV R13,RSI\nMOV R12,RDI\nMOV R15,qword ptr [R13]\nXOR EBP,EBP\nMOV RAX,R15\nMOV RBX,R15\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RAX,RBX\nJC 0x0040b964\nMOV RBX,RAX\nINC RBX\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x00402570\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040b95a\nMOV qword ptr [R13],R15\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nMOV RCX,R13\nMOV R8D,dword ptr [RSP]\nMOV R9D,dword ptr [RSP + 0x4]\nCALL 0x0040b500\nCMP RAX,-0x1\nMOV RBP,R14\nJNZ 0x0040b910\nMOV RDI,R14\nJMP 0x0040b95d\nMOV RDI,RBP\nCALL 0x004020d0\nXOR EBP,EBP\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p928
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 4c 24 04\n89 14 24\n49 89 f5\n49 89 fc\n4d 8b 7d 00\n31 ed\n4c 89 f8\n4c 89 fb\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d8\n72 4f\n48 89 c3\n48 ff c3\n48 89 ef\n48 89 de\ne8 4a 6c ff ff\n49 89 c6\n4d 85 f6\n74 2c\n4d 89 7d 00\n4c 89 e7\n4c 89 f6\n48 89 da\n4c 89 e9\n44 8b 04 24\n44 8b 4c 24 04\ne8 b4 fb ff ff\n48 83 f8 ff\n4c 89 f5\n75 bb\n4c 89 f7\neb 03\n48 89 ef\ne8 6e 67 ff ff\n31 ed\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p929
S'.text:000000000040b8e0\n.text:000000000040b8e1\n.text:000000000040b8e3\n.text:000000000040b8e5\n.text:000000000040b8e7\n.text:000000000040b8e9\n.text:000000000040b8ea\n.text:000000000040b8eb\n.text:000000000040b8ef\n.text:000000000040b8f2\n.text:000000000040b8f5\n.text:000000000040b8f8\n.text:000000000040b8fc\n.text:000000000040b8fe\n.text:000000000040b901\n.text:000000000040b904\n.text:000000000040b910\n.text:000000000040b913\n.text:000000000040b915\n.text:000000000040b918\n.text:000000000040b91b\n.text:000000000040b91e\n.text:000000000040b921\n.text:000000000040b926\n.text:000000000040b929\n.text:000000000040b92c\n.text:000000000040b92e\n.text:000000000040b932\n.text:000000000040b935\n.text:000000000040b938\n.text:000000000040b93b\n.text:000000000040b93e\n.text:000000000040b942\n.text:000000000040b947\n.text:000000000040b94c\n.text:000000000040b950\n.text:000000000040b953\n.text:000000000040b955\n.text:000000000040b958\n.text:000000000040b95a\n.text:000000000040b95d\n.text:000000000040b962\n.text:000000000040b964\n.text:000000000040b967\n.text:000000000040b96b\n.text:000000000040b96c\n.text:000000000040b96e\n.text:000000000040b970\n.text:000000000040b972\n.text:000000000040b974\n.text:000000000040b975\n'
p930
tp931
sS'quotearg_buffer_restyled'
p932
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p933
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040c1ec_caseD_7;\u000a  case 2:\u000a    goto switchD_0040c1ec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040c1ec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040c1ec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040c1ec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040c1ec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040c1ec_caseD_7;\u000aswitchD_0040c1ec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040c1ec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040c1ec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_0040ccb0;\u000aLAB_0040c3d0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_0040ccb9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_0040ccc8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040c3db:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040c41f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040c41f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_0040ccc8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_0040cbf5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x0040cb00;\u000a    }\u000a    goto LAB_0040ccc8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040cc2a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_0040ccc8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_0040cc59;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_0040c718;\u000a  case '\u005ca':\u000a    goto joined_r0x0040c608;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x0040c608;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_0040c436_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x0040c608;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x0040c608;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_0040c436_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x0040c608:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040cb6e;\u000a    }\u000a    goto LAB_0040ccc8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_0040ccc8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_0040ccc8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_0040ccc8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_0040ccc8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_0040ccc8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_0040c436_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_0040cbc6;\u000a      goto joined_r0x0040cbb8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x0040c6c1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x0040cbb8;\u000a      goto LAB_0040cbc6;\u000a    }\u000a    goto LAB_0040ccc8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_0040ccc8;\u000a  }\u000a  goto joined_r0x0040cb00;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040cc2a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_0040cc59;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_0040cc59:\u000a  if (1 < uVar10) {\u000aLAB_0040c736:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_0040c7f2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x0040c6c1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_0040c7f2:\u000a        if (bVar6 != 0) goto LAB_0040ccc8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_0040c718:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_0040c736;\u000ajoined_r0x0040cb00:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x0040cb00:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_0040cb27;\u000aLAB_0040cb60:\u000a    if (bVar22) goto LAB_0040cb65;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_0040cb60;\u000aLAB_0040cb27:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_0040cb65:\u000a      if (bVar6 != 0) goto LAB_0040ccc8;\u000aLAB_0040cb6e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x0040cbb8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_0040cbc6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x0040cbb8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_0040cbf5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_0040c3d0;\u000aLAB_0040ccb0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_0040ccb9;\u000a  goto LAB_0040c3db;\u000a}\u000a\u000a
p934
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00402280\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x0040cd95\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x417250 + RAX*0x8]\nMOV EDI,0x41776e\nMOV ESI,R15D\nCALL 0x0040d440\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x418173\nMOV ESI,R15D\nCALL 0x0040d440\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040c24d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x0040c250\nNOP\nCMP R12,RSI\nJNC 0x0040c23e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x0040c230\nJMP 0x0040c250\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00402290\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040c31c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040c31c\nMOV ECX,0x41776c\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x0040c316\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x0040c2b7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x0040c2e4\nTEST RSI,RSI\nJZ 0x0040c2d1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x418173\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x0040c2f2\nMOV ECX,0x418173\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040c31c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040cd6c\nMOV ECX,0x41776c\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x0040ccb0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x0040ccb9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040c41f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040c41a\nCMP R11,-0x1\nJNZ 0x0040c41a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00402290\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x0040c470\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040c6cc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4172a8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x0040ccc8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x0040cb20\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x0040cb27\nJMP 0x0040cb60\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004023a0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040c4bd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x0040c421\nJMP 0x0040ccc8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x0040c421\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040c44b\nCMP EBX,0x2\nJNZ 0x0040c44b\nTEST R13,R13\nJNZ 0x0040c44b\nJMP 0x0040ccc8\nCMP R11,-0x1\nJZ 0x0040c8a3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x0040c8c3\nJMP 0x0040c44b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040c8d4\nTEST R8B,R8B\nJNZ 0x0040ccc8\nCMP EBX,0x2\nJNZ 0x0040c578\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040c578\nCMP R12,RSI\nJNC 0x0040c553\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040c562\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040c571\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040c582\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x0040ca48\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x0040ca48\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x0040ca48\nCMP RCX,RSI\nJNC 0x0040c5bc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040c5cb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nJMP 0x0040cb20\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040c449\nJMP 0x0040c62a\nMOV DL,0x74\nJMP 0x0040c612\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040c449\nJMP 0x0040c62a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040c449\nJMP 0x0040c62a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x0040ccc8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040c449\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040cb6e\nJMP 0x0040ccc8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x0040c449\nTEST R8B,R8B\nJNZ 0x0040ccc8\nCMP R12,RSI\nJNC 0x0040c65a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040c669\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040c678\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x0040c449\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040ca5b\nCMP EBX,0x2\nJNZ 0x0040c449\nTEST R8B,R8B\nJZ 0x0040c449\nJMP 0x0040ccc8\nCMP EBX,0x2\nJNZ 0x0040c8f4\nTEST R8B,R8B\nJNZ 0x0040ccc8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x0040cbc6\nJMP 0x0040cbe9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x0040c915\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00402720\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040cb08\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x0040cb08\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x0040c7f2\nJMP 0x0040c7c0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x0040c7a9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x0040c7a6\nCMP R12,RSI\nJNC 0x0040c78b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040c79a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x0040c7e0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x0040c7e0\nTEST BPL,0x1\nJZ 0x0040c883\nCMP R12,RSI\nJNC 0x0040c7d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x0040c883\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x0040c7c0\nTEST R8B,R8B\nJNZ 0x0040ccc8\nCMP EBX,0x2\nJNZ 0x0040c83a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040c83a\nCMP R12,RSI\nJNC 0x0040c812\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040c821\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040c830\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x0040c844\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040c85b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040c875\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x0040c770\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x0040cbc6\nJMP 0x0040cbe9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040c44b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040c44b\nJMP 0x0040ccc8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x0040cbf5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nJMP 0x0040cb20\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x0040c612\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x0040cbc6\nJMP 0x0040cbe9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x0040c937\nMOV RDI,R10\nCALL 0x00402290\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004022c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040cc0f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x0040cc07\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040cc16\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040c9fe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x0040c9f6\nBT RDI,RDX\nJC 0x0040cd62\nINC RCX\nCMP RCX,R14\nJC 0x0040c9e0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004026e0\nTEST EAX,EAX\nJNZ 0x0040ca13\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004026d0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040c955\nJMP 0x0040cc59\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nJMP 0x0040cb20\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x0040c449\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x0040c449\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x0040c449\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040c44b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x0040cc92\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x0040ccc8\nCMP R12,RSI\nJNC 0x0040cabe\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x0040cad1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040cae0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040caef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nJMP 0x0040cb20\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x0040cb60\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x0040cb65\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x0040cbc0\nJMP 0x0040cb65\nTEST BPL,BPL\nJZ 0x0040cbc0\nTEST R8B,R8B\nJNZ 0x0040ccc8\nCMP EBX,0x2\nJNZ 0x0040cba8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040cba8\nCMP R12,RSI\nJNC 0x0040cb83\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040cb92\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040cba1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040cbb2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x0040cbf2\nJMP 0x0040cbee\nTEST DIL,0x1\nJZ 0x0040cbe9\nAND AL,0x1\nJNZ 0x0040cbe9\nCMP R12,RSI\nJNC 0x0040cbd4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040cbe3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x0040cbf2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x0040ccb0\nJMP 0x0040c3d0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x0040cc54\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040cc4c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x0040cc88\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040cc2a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040cc59\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x0040c718\nJMP 0x0040c736\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040cc59\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040c456\nJMP 0x0040cb20\nCMP R13,R11\nJNZ 0x0040c3db\nTEST R8B,R8B\nJZ 0x0040cd22\nCMP EBX,0x2\nJNZ 0x0040cd22\nTEST R12,R12\nJNZ 0x0040cd22\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x0040c160\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x0040cd56\nTEST R8B,R8B\nJNZ 0x0040cd56\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x0040cd56\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x0040cd49\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x0040cd40\nCMP R12,RSI\nJNC 0x0040cd0d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040cd0d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x0040ccc8\nTEST RSI,RSI\nJZ 0x0040cd79\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x41776c\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040c31c\nCALL 0x00402100\n'
p935
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 f2 60 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 50 72 41 00\nbf 6e 77 41 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 73 81 41 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 33 60 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 6c 77 41 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 73 81 41 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 73 81 41 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 6c 77 41 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 93 5e ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd a8 72 41 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 17 5f ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 37 60 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 61 59 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 43 59 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 d9 5c ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 a2 5c ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 6c 77 41 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 66 53 ff ff\n'
p936
S'.text:000000000040c160\n.text:000000000040c161\n.text:000000000040c163\n.text:000000000040c165\n.text:000000000040c167\n.text:000000000040c169\n.text:000000000040c16a\n.text:000000000040c171\n.text:000000000040c174\n.text:000000000040c177\n.text:000000000040c17a\n.text:000000000040c17f\n.text:000000000040c184\n.text:000000000040c189\n.text:000000000040c18e\n.text:000000000040c196\n.text:000000000040c19a\n.text:000000000040c1a0\n.text:000000000040c1a8\n.text:000000000040c1ad\n.text:000000000040c1b5\n.text:000000000040c1ba\n.text:000000000040c1be\n.text:000000000040c1c0\n.text:000000000040c1c3\n.text:000000000040c1c6\n.text:000000000040c1c9\n.text:000000000040c1ce\n.text:000000000040c1d1\n.text:000000000040c1d4\n.text:000000000040c1d7\n.text:000000000040c1da\n.text:000000000040c1dc\n.text:000000000040c1df\n.text:000000000040c1e4\n.text:000000000040c1e7\n.text:000000000040c1ec\n.text:000000000040c1f3\n.text:000000000040c1f8\n.text:000000000040c1fb\n.text:000000000040c200\n.text:000000000040c205\n.text:000000000040c20a\n.text:000000000040c20d\n.text:000000000040c212\n.text:000000000040c217\n.text:000000000040c21c\n.text:000000000040c21e\n.text:000000000040c220\n.text:000000000040c225\n.text:000000000040c227\n.text:000000000040c22a\n.text:000000000040c22c\n.text:000000000040c22e\n.text:000000000040c230\n.text:000000000040c233\n.text:000000000040c235\n.text:000000000040c23a\n.text:000000000040c23e\n.text:000000000040c244\n.text:000000000040c247\n.text:000000000040c249\n.text:000000000040c24b\n.text:000000000040c24d\n.text:000000000040c250\n.text:000000000040c255\n.text:000000000040c258\n.text:000000000040c25d\n.text:000000000040c262\n.text:000000000040c265\n.text:000000000040c268\n.text:000000000040c26b\n.text:000000000040c26e\n.text:000000000040c273\n.text:000000000040c276\n.text:000000000040c279\n.text:000000000040c27e\n.text:000000000040c281\n.text:000000000040c283\n.text:000000000040c286\n.text:000000000040c288\n.text:000000000040c28a\n.text:000000000040c28d\n.text:000000000040c292\n.text:000000000040c297\n.text:000000000040c29c\n.text:000000000040c29f\n.text:000000000040c2a5\n.text:000000000040c2a7\n.text:000000000040c2aa\n.text:000000000040c2ad\n.text:000000000040c2b0\n.text:000000000040c2b2\n.text:000000000040c2b4\n.text:000000000040c2b7\n.text:000000000040c2ba\n.text:000000000040c2bf\n.text:000000000040c2c2\n.text:000000000040c2c4\n.text:000000000040c2c7\n.text:000000000040c2c9\n.text:000000000040c2ce\n.text:000000000040c2d1\n.text:000000000040c2d6\n.text:000000000040c2dc\n.text:000000000040c2e2\n.text:000000000040c2e4\n.text:000000000040c2e9\n.text:000000000040c2ef\n.text:000000000040c2f2\n.text:000000000040c2f5\n.text:000000000040c2f8\n.text:000000000040c2fa\n.text:000000000040c2ff\n.text:000000000040c302\n.text:000000000040c308\n.text:000000000040c30d\n.text:000000000040c313\n.text:000000000040c316\n.text:000000000040c319\n.text:000000000040c31c\n.text:000000000040c324\n.text:000000000040c326\n.text:000000000040c328\n.text:000000000040c32b\n.text:000000000040c32f\n.text:000000000040c331\n.text:000000000040c334\n.text:000000000040c338\n.text:000000000040c33a\n.text:000000000040c33d\n.text:000000000040c340\n.text:000000000040c343\n.text:000000000040c345\n.text:000000000040c349\n.text:000000000040c34b\n.text:000000000040c34f\n.text:000000000040c352\n.text:000000000040c355\n.text:000000000040c358\n.text:000000000040c35a\n.text:000000000040c35e\n.text:000000000040c367\n.text:000000000040c36a\n.text:000000000040c36c\n.text:000000000040c370\n.text:000000000040c372\n.text:000000000040c376\n.text:000000000040c378\n.text:000000000040c37b\n.text:000000000040c37f\n.text:000000000040c381\n.text:000000000040c384\n.text:000000000040c388\n.text:000000000040c38d\n.text:000000000040c390\n.text:000000000040c394\n.text:000000000040c39c\n.text:000000000040c39f\n.text:000000000040c3a2\n.text:000000000040c3a4\n.text:000000000040c3a8\n.text:000000000040c3ab\n.text:000000000040c3ad\n.text:000000000040c3b2\n.text:000000000040c3b6\n.text:000000000040c3bb\n.text:000000000040c3c0\n.text:000000000040c3c4\n.text:000000000040c3ca\n.text:000000000040c3d0\n.text:000000000040c3d5\n.text:000000000040c3db\n.text:000000000040c3e0\n.text:000000000040c3e2\n.text:000000000040c3e7\n.text:000000000040c3eb\n.text:000000000040c3ed\n.text:000000000040c3f1\n.text:000000000040c3f3\n.text:000000000040c3f5\n.text:000000000040c3f8\n.text:000000000040c3fd\n.text:000000000040c3ff\n.text:000000000040c404\n.text:000000000040c409\n.text:000000000040c40d\n.text:000000000040c412\n.text:000000000040c417\n.text:000000000040c41a\n.text:000000000040c41d\n.text:000000000040c41f\n.text:000000000040c421\n.text:000000000040c426\n.text:000000000040c42a\n.text:000000000040c430\n.text:000000000040c432\n.text:000000000040c434\n.text:000000000040c436\n.text:000000000040c43e\n.text:000000000040c443\n.text:000000000040c449\n.text:000000000040c44b\n.text:000000000040c450\n.text:000000000040c456\n.text:000000000040c45f\n.text:000000000040c465\n.text:000000000040c470\n.text:000000000040c472\n.text:000000000040c475\n.text:000000000040c479\n.text:000000000040c481\n.text:000000000040c484\n.text:000000000040c489\n.text:000000000040c48b\n.text:000000000040c48e\n.text:000000000040c490\n.text:000000000040c495\n.text:000000000040c498\n.text:000000000040c49d\n.text:000000000040c4a0\n.text:000000000040c4a5\n.text:000000000040c4a9\n.text:000000000040c4ae\n.text:000000000040c4b0\n.text:000000000040c4b2\n.text:000000000040c4b8\n.text:000000000040c4bd\n.text:000000000040c4c2\n.text:000000000040c4c5\n.text:000000000040c4ca\n.text:000000000040c4ce\n.text:000000000040c4d3\n.text:000000000040c4d8\n.text:000000000040c4da\n.text:000000000040c4dc\n.text:000000000040c4e1\n.text:000000000040c4e3\n.text:000000000040c4e6\n.text:000000000040c4ec\n.text:000000000040c4ef\n.text:000000000040c4f5\n.text:000000000040c4f8\n.text:000000000040c4fe\n.text:000000000040c503\n.text:000000000040c507\n.text:000000000040c50d\n.text:000000000040c510\n.text:000000000040c513\n.text:000000000040c517\n.text:000000000040c51a\n.text:000000000040c51c\n.text:000000000040c51f\n.text:000000000040c525\n.text:000000000040c52a\n.text:000000000040c52f\n.text:000000000040c535\n.text:000000000040c538\n.text:000000000040c53e\n.text:000000000040c541\n.text:000000000040c543\n.text:000000000040c545\n.text:000000000040c547\n.text:000000000040c549\n.text:000000000040c54c\n.text:000000000040c54e\n.text:000000000040c553\n.text:000000000040c558\n.text:000000000040c55b\n.text:000000000040c55d\n.text:000000000040c562\n.text:000000000040c567\n.text:000000000040c56a\n.text:000000000040c56c\n.text:000000000040c571\n.text:000000000040c575\n.text:000000000040c578\n.text:000000000040c57b\n.text:000000000040c57d\n.text:000000000040c582\n.text:000000000040c587\n.text:000000000040c589\n.text:000000000040c58c\n.text:000000000040c58f\n.text:000000000040c595\n.text:000000000040c599\n.text:000000000040c59c\n.text:000000000040c5a2\n.text:000000000040c5a6\n.text:000000000040c5a9\n.text:000000000040c5ac\n.text:000000000040c5b2\n.text:000000000040c5b5\n.text:000000000040c5b7\n.text:000000000040c5bc\n.text:000000000040c5c1\n.text:000000000040c5c4\n.text:000000000040c5c6\n.text:000000000040c5cb\n.text:000000000040c5cf\n.text:000000000040c5d4\n.text:000000000040c5da\n.text:000000000040c5df\n.text:000000000040c5e1\n.text:000000000040c5e6\n.text:000000000040c5ec\n.text:000000000040c5ee\n.text:000000000040c5f0\n.text:000000000040c5f2\n.text:000000000040c5f4\n.text:000000000040c5f9\n.text:000000000040c5ff\n.text:000000000040c601\n.text:000000000040c603\n.text:000000000040c608\n.text:000000000040c60e\n.text:000000000040c610\n.text:000000000040c612\n.text:000000000040c617\n.text:000000000040c619\n.text:000000000040c61f\n.text:000000000040c624\n.text:000000000040c62a\n.text:000000000040c62d\n.text:000000000040c630\n.text:000000000040c636\n.text:000000000040c63b\n.text:000000000040c63e\n.text:000000000040c641\n.text:000000000040c647\n.text:000000000040c64a\n.text:000000000040c650\n.text:000000000040c653\n.text:000000000040c655\n.text:000000000040c65a\n.text:000000000040c65f\n.text:000000000040c662\n.text:000000000040c664\n.text:000000000040c669\n.text:000000000040c66e\n.text:000000000040c671\n.text:000000000040c673\n.text:000000000040c678\n.text:000000000040c67c\n.text:000000000040c67e\n.text:000000000040c683\n.text:000000000040c686\n.text:000000000040c689\n.text:000000000040c68f\n.text:000000000040c692\n.text:000000000040c698\n.text:000000000040c69b\n.text:000000000040c6a1\n.text:000000000040c6a6\n.text:000000000040c6a9\n.text:000000000040c6af\n.text:000000000040c6b2\n.text:000000000040c6b8\n.text:000000000040c6bb\n.text:000000000040c6bd\n.text:000000000040c6c1\n.text:000000000040c6c7\n.text:000000000040c6cc\n.text:000000000040c6d0\n.text:000000000040c6d9\n.text:000000000040c6df\n.text:000000000040c6e4\n.text:000000000040c6e9\n.text:000000000040c6ee\n.text:000000000040c6f1\n.text:000000000040c6f6\n.text:000000000040c6f9\n.text:000000000040c6fc\n.text:000000000040c701\n.text:000000000040c706\n.text:000000000040c70a\n.text:000000000040c70f\n.text:000000000040c714\n.text:000000000040c718\n.text:000000000040c71a\n.text:000000000040c71f\n.text:000000000040c725\n.text:000000000040c728\n.text:000000000040c72a\n.text:000000000040c72d\n.text:000000000040c730\n.text:000000000040c736\n.text:000000000040c73b\n.text:000000000040c73e\n.text:000000000040c741\n.text:000000000040c744\n.text:000000000040c747\n.text:000000000040c749\n.text:000000000040c74d\n.text:000000000040c74f\n.text:000000000040c754\n.text:000000000040c759\n.text:000000000040c75f\n.text:000000000040c770\n.text:000000000040c775\n.text:000000000040c777\n.text:000000000040c77a\n.text:000000000040c77c\n.text:000000000040c77f\n.text:000000000040c781\n.text:000000000040c784\n.text:000000000040c786\n.text:000000000040c78b\n.text:000000000040c790\n.text:000000000040c793\n.text:000000000040c795\n.text:000000000040c79a\n.text:000000000040c79e\n.text:000000000040c7a6\n.text:000000000040c7a9\n.text:000000000040c7ac\n.text:000000000040c7ae\n.text:000000000040c7b2\n.text:000000000040c7c0\n.text:000000000040c7c4\n.text:000000000040c7ca\n.text:000000000040c7cd\n.text:000000000040c7cf\n.text:000000000040c7d4\n.text:000000000040c7d7\n.text:000000000040c7d9\n.text:000000000040c7e0\n.text:000000000040c7e3\n.text:000000000040c7e8\n.text:000000000040c7eb\n.text:000000000040c7f0\n.text:000000000040c7f2\n.text:000000000040c7f5\n.text:000000000040c7fb\n.text:000000000040c7fe\n.text:000000000040c800\n.text:000000000040c804\n.text:000000000040c806\n.text:000000000040c808\n.text:000000000040c80b\n.text:000000000040c80d\n.text:000000000040c812\n.text:000000000040c817\n.text:000000000040c81a\n.text:000000000040c81c\n.text:000000000040c821\n.text:000000000040c826\n.text:000000000040c829\n.text:000000000040c82b\n.text:000000000040c830\n.text:000000000040c834\n.text:000000000040c836\n.text:000000000040c83a\n.text:000000000040c83d\n.text:000000000040c83f\n.text:000000000040c844\n.text:000000000040c849\n.text:000000000040c84c\n.text:000000000040c84e\n.text:000000000040c851\n.text:000000000040c854\n.text:000000000040c857\n.text:000000000040c85b\n.text:000000000040c860\n.text:000000000040c863\n.text:000000000040c865\n.text:000000000040c868\n.text:000000000040c86b\n.text:000000000040c86e\n.text:000000000040c871\n.text:000000000040c875\n.text:000000000040c879\n.text:000000000040c87d\n.text:000000000040c881\n.text:000000000040c883\n.text:000000000040c887\n.text:000000000040c88a\n.text:000000000040c890\n.text:000000000040c894\n.text:000000000040c898\n.text:000000000040c89e\n.text:000000000040c8a3\n.text:000000000040c8a6\n.text:000000000040c8a9\n.text:000000000040c8ae\n.text:000000000040c8b1\n.text:000000000040c8b3\n.text:000000000040c8b6\n.text:000000000040c8bd\n.text:000000000040c8c3\n.text:000000000040c8c5\n.text:000000000040c8c9\n.text:000000000040c8cf\n.text:000000000040c8d4\n.text:000000000040c8d9\n.text:000000000040c8df\n.text:000000000040c8e2\n.text:000000000040c8e4\n.text:000000000040c8e9\n.text:000000000040c8ef\n.text:000000000040c8f4\n.text:000000000040c8f6\n.text:000000000040c8fb\n.text:000000000040c901\n.text:000000000040c903\n.text:000000000040c906\n.text:000000000040c90a\n.text:000000000040c910\n.text:000000000040c915\n.text:000000000040c921\n.text:000000000040c925\n.text:000000000040c927\n.text:000000000040c92a\n.text:000000000040c92f\n.text:000000000040c934\n.text:000000000040c937\n.text:000000000040c93b\n.text:000000000040c940\n.text:000000000040c942\n.text:000000000040c946\n.text:000000000040c948\n.text:000000000040c950\n.text:000000000040c955\n.text:000000000040c95a\n.text:000000000040c95e\n.text:000000000040c962\n.text:000000000040c96a\n.text:000000000040c96d\n.text:000000000040c972\n.text:000000000040c975\n.text:000000000040c978\n.text:000000000040c97d\n.text:000000000040c980\n.text:000000000040c983\n.text:000000000040c989\n.text:000000000040c98d\n.text:000000000040c997\n.text:000000000040c99d\n.text:000000000040c9a1\n.text:000000000040c9a6\n.text:000000000040c9ac\n.text:000000000040c9b0\n.text:000000000040c9b3\n.text:000000000040c9b7\n.text:000000000040c9b9\n.text:000000000040c9be\n.text:000000000040c9c3\n.text:000000000040c9c7\n.text:000000000040c9c9\n.text:000000000040c9ce\n.text:000000000040c9d3\n.text:000000000040c9d7\n.text:000000000040c9dc\n.text:000000000040c9e0\n.text:000000000040c9e4\n.text:000000000040c9e7\n.text:000000000040c9ea\n.text:000000000040c9ec\n.text:000000000040c9f0\n.text:000000000040c9f6\n.text:000000000040c9f9\n.text:000000000040c9fc\n.text:000000000040c9fe\n.text:000000000040ca02\n.text:000000000040ca07\n.text:000000000040ca09\n.text:000000000040ca0b\n.text:000000000040ca13\n.text:000000000040ca18\n.text:000000000040ca1b\n.text:000000000040ca23\n.text:000000000040ca26\n.text:000000000040ca29\n.text:000000000040ca2e\n.text:000000000040ca31\n.text:000000000040ca33\n.text:000000000040ca38\n.text:000000000040ca3d\n.text:000000000040ca43\n.text:000000000040ca48\n.text:000000000040ca4b\n.text:000000000040ca50\n.text:000000000040ca56\n.text:000000000040ca5b\n.text:000000000040ca60\n.text:000000000040ca66\n.text:000000000040ca6a\n.text:000000000040ca6d\n.text:000000000040ca73\n.text:000000000040ca79\n.text:000000000040ca7f\n.text:000000000040ca84\n.text:000000000040ca86\n.text:000000000040ca89\n.text:000000000040ca8f\n.text:000000000040ca93\n.text:000000000040ca95\n.text:000000000040ca9f\n.text:000000000040caa3\n.text:000000000040caa9\n.text:000000000040caac\n.text:000000000040caae\n.text:000000000040cab4\n.text:000000000040cab7\n.text:000000000040cab9\n.text:000000000040cabe\n.text:000000000040cac3\n.text:000000000040cac6\n.text:000000000040caca\n.text:000000000040cacc\n.text:000000000040cad1\n.text:000000000040cad6\n.text:000000000040cad9\n.text:000000000040cadb\n.text:000000000040cae0\n.text:000000000040cae5\n.text:000000000040cae8\n.text:000000000040caea\n.text:000000000040caef\n.text:000000000040caf3\n.text:000000000040caf5\n.text:000000000040caf8\n.text:000000000040cafb\n.text:000000000040cb00\n.text:000000000040cb06\n.text:000000000040cb08\n.text:000000000040cb0d\n.text:000000000040cb12\n.text:000000000040cb18\n.text:000000000040cb20\n.text:000000000040cb25\n.text:000000000040cb27\n.text:000000000040cb2c\n.text:000000000040cb2f\n.text:000000000040cb31\n.text:000000000040cb34\n.text:000000000040cb36\n.text:000000000040cb39\n.text:000000000040cb3c\n.text:000000000040cb3f\n.text:000000000040cb41\n.text:000000000040cb49\n.text:000000000040cb4c\n.text:000000000040cb4e\n.text:000000000040cb50\n.text:000000000040cb60\n.text:000000000040cb63\n.text:000000000040cb65\n.text:000000000040cb68\n.text:000000000040cb6e\n.text:000000000040cb71\n.text:000000000040cb73\n.text:000000000040cb75\n.text:000000000040cb77\n.text:000000000040cb79\n.text:000000000040cb7c\n.text:000000000040cb7e\n.text:000000000040cb83\n.text:000000000040cb88\n.text:000000000040cb8b\n.text:000000000040cb8d\n.text:000000000040cb92\n.text:000000000040cb97\n.text:000000000040cb9a\n.text:000000000040cb9c\n.text:000000000040cba1\n.text:000000000040cba5\n.text:000000000040cba8\n.text:000000000040cbab\n.text:000000000040cbad\n.text:000000000040cbb2\n.text:000000000040cbb5\n.text:000000000040cbb8\n.text:000000000040cbba\n.text:000000000040cbc0\n.text:000000000040cbc4\n.text:000000000040cbc6\n.text:000000000040cbc8\n.text:000000000040cbca\n.text:000000000040cbcd\n.text:000000000040cbcf\n.text:000000000040cbd4\n.text:000000000040cbd9\n.text:000000000040cbdc\n.text:000000000040cbde\n.text:000000000040cbe3\n.text:000000000040cbe7\n.text:000000000040cbe9\n.text:000000000040cbec\n.text:000000000040cbee\n.text:000000000040cbf2\n.text:000000000040cbf5\n.text:000000000040cbf8\n.text:000000000040cbfc\n.text:000000000040cc02\n.text:000000000040cc07\n.text:000000000040cc0f\n.text:000000000040cc14\n.text:000000000040cc16\n.text:000000000040cc1e\n.text:000000000040cc23\n.text:000000000040cc25\n.text:000000000040cc2a\n.text:000000000040cc2f\n.text:000000000040cc33\n.text:000000000040cc35\n.text:000000000040cc3a\n.text:000000000040cc3d\n.text:000000000040cc40\n.text:000000000040cc42\n.text:000000000040cc4a\n.text:000000000040cc4c\n.text:000000000040cc54\n.text:000000000040cc59\n.text:000000000040cc5d\n.text:000000000040cc62\n.text:000000000040cc67\n.text:000000000040cc6b\n.text:000000000040cc70\n.text:000000000040cc75\n.text:000000000040cc79\n.text:000000000040cc7d\n.text:000000000040cc83\n.text:000000000040cc88\n.text:000000000040cc90\n.text:000000000040cc92\n.text:000000000040cc94\n.text:000000000040cc98\n.text:000000000040cc9d\n.text:000000000040cca3\n.text:000000000040ccb0\n.text:000000000040ccb3\n.text:000000000040ccb9\n.text:000000000040ccbc\n.text:000000000040ccbe\n.text:000000000040ccc1\n.text:000000000040ccc3\n.text:000000000040ccc6\n.text:000000000040ccc8\n.text:000000000040ccd0\n.text:000000000040ccd6\n.text:000000000040ccda\n.text:000000000040ccdd\n.text:000000000040cce1\n.text:000000000040cce6\n.text:000000000040ccea\n.text:000000000040ccee\n.text:000000000040ccf1\n.text:000000000040ccf4\n.text:000000000040ccf7\n.text:000000000040ccfb\n.text:000000000040ccff\n.text:000000000040cd01\n.text:000000000040cd06\n.text:000000000040cd0a\n.text:000000000040cd0d\n.text:000000000040cd10\n.text:000000000040cd17\n.text:000000000040cd18\n.text:000000000040cd1a\n.text:000000000040cd1c\n.text:000000000040cd1e\n.text:000000000040cd20\n.text:000000000040cd21\n.text:000000000040cd22\n.text:000000000040cd2a\n.text:000000000040cd2d\n.text:000000000040cd2f\n.text:000000000040cd32\n.text:000000000040cd34\n.text:000000000040cd36\n.text:000000000040cd38\n.text:000000000040cd3a\n.text:000000000040cd3d\n.text:000000000040cd40\n.text:000000000040cd43\n.text:000000000040cd45\n.text:000000000040cd49\n.text:000000000040cd4c\n.text:000000000040cd4f\n.text:000000000040cd52\n.text:000000000040cd54\n.text:000000000040cd56\n.text:000000000040cd59\n.text:000000000040cd5b\n.text:000000000040cd60\n.text:000000000040cd62\n.text:000000000040cd67\n.text:000000000040cd6c\n.text:000000000040cd6f\n.text:000000000040cd71\n.text:000000000040cd76\n.text:000000000040cd79\n.text:000000000040cd7e\n.text:000000000040cd81\n.text:000000000040cd87\n.text:000000000040cd8d\n.text:000000000040cd90\n.text:000000000040cd95\n'
p937
tp938
sS'rotr_sz'
p939
(S'\n__stdcall rotr_sz(size_t x)\n'
p940
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p941
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p942
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p943
S'.text:0000000000410ab0\n.text:0000000000410ab2\n.text:0000000000410ab5\n.text:0000000000410ab8\n'
p944
tp945
sS'format_inode'
p946
(S'\n__stdcall format_inode(char * buf, size_t buflen, fileinfo * f)\n'
p947
V\u000achar * format_inode(char *buf,size_t buflen,fileinfo *f)\u000a\u000a{\u000a  uintmax_t i;\u000a  char *pcVar1;\u000a  \u000a  if (buflen < 0x15) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("INT_BUFSIZE_BOUND (uintmax_t) <= buflen","src/ls.c",0xefc,\u000a                  "char *format_inode(char *, size_t, const struct fileinfo *)");\u000a  }\u000a  if ((f->stat_ok != false) && (i = (f->stat).st_ino, i != 0)) {\u000a    pcVar1 = umaxtostr(i,buf);\u000a    return pcVar1;\u000a  }\u000a  return "?";\u000a}\u000a\u000a
p948
S'MOV RAX,RDI\nCMP RSI,0x14\nJBE 0x00407ee9\nCMP byte ptr [0xb0 + RDX],0x0\nJZ 0x00407ee3\nMOV RDI,qword ptr [RDX + 0x18]\nTEST RDI,RDI\nJZ 0x00407ee3\nMOV RSI,RAX\nJMP 0x0040b4a0\nMOV EAX,0x4168bd\nRET\nPUSH RAX\nMOV EDI,0x416a56\nMOV ESI,0x4146d9\nMOV EDX,0xefc\nMOV ECX,0x416a7e\nCALL 0x00402330\n'
p949
S'48 89 f8\n48 83 fe 14\n76 20\n80 ba b0 00 00 00 00\n74 11\n48 8b 7a 18\n48 85 ff\n74 08\n48 89 c6\ne9 bd 35 00 00\nb8 bd 68 41 00\nc3\n50\nbf 56 6a 41 00\nbe d9 46 41 00\nba fc 0e 00 00\nb9 7e 6a 41 00\ne8 2d a4 ff ff\n'
p950
S'.text:0000000000407ec0\n.text:0000000000407ec3\n.text:0000000000407ec7\n.text:0000000000407ec9\n.text:0000000000407ed0\n.text:0000000000407ed2\n.text:0000000000407ed6\n.text:0000000000407ed9\n.text:0000000000407edb\n.text:0000000000407ede\n.text:0000000000407ee3\n.text:0000000000407ee8\n.text:0000000000407ee9\n.text:0000000000407eea\n.text:0000000000407eef\n.text:0000000000407ef4\n.text:0000000000407ef9\n.text:0000000000407efe\n'
p951
tp952
sS'set_quoting_style'
p953
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p954
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p955
S'TEST RDI,RDI\nMOV EAX,0x61e1b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p956
S'48 85 ff\nb8 b0 e1 61 00\n48 0f 45 c7\n89 30\nc3\n'
p957
S'.text:000000000040c040\n.text:000000000040c043\n.text:000000000040c048\n.text:000000000040c04c\n.text:000000000040c04e\n'
p958
tp959
sS'hash_get_entries'
p960
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p961
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p962
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00409bb3\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00409ba8\nTEST R8,R8\nJZ 0x00409ba8\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00409bb2\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00409b90\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x00409b7b\nRET\nXOR EAX,EAX\nRET\n'
p963
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p964
S'.text:0000000000409b70\n.text:0000000000409b73\n.text:0000000000409b77\n.text:0000000000409b79\n.text:0000000000409b7b\n.text:0000000000409b7f\n.text:0000000000409b81\n.text:0000000000409b84\n.text:0000000000409b86\n.text:0000000000409b89\n.text:0000000000409b90\n.text:0000000000409b93\n.text:0000000000409b95\n.text:0000000000409b98\n.text:0000000000409b9c\n.text:0000000000409b9f\n.text:0000000000409ba3\n.text:0000000000409ba6\n.text:0000000000409ba8\n.text:0000000000409bac\n.text:0000000000409bb0\n.text:0000000000409bb2\n.text:0000000000409bb3\n.text:0000000000409bb5\n'
p965
tp966
sS'put_indicator'
p967
(S'\n__stdcall put_indicator(bin_str * ind)\n'
p968
V\u000avoid put_indicator(bin_str *ind)\u000a\u000a{\u000a  if (used_color == 0) {\u000a    used_color = 1;\u000a    prep_non_filename_text();\u000a  }\u000a  fwrite_unlocked(ind->string,ind->len,1,stdout);\u000a  return;\u000a}\u000a\u000a
p969
S'PUSH RBX\nMOV RBX,RDI\nMOV AL,byte ptr [0x0061d818]\nTEST AL,AL\nJNZ 0x0040569a\nMOV byte ptr [0x0061d818],0x1\nCALL 0x004056c0\nMOV RSI,qword ptr [RBX]\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RCX,qword ptr [0x0061d5c8]\nMOV EDX,0x1\nPOP RBX\nJMP 0x00402550\n'
p970
S'53\n48 89 fb\n8a 05 8e 81 21 00\n84 c0\n75 0c\nc6 05 83 81 21 00 01\ne8 26 00 00 00\n48 8b 33\n48 8b 7b 08\n48 8b 0d 20 7f 21 00\nba 01 00 00 00\n5b\ne9 9d ce ff ff\n'
p971
S'.text:0000000000405680\n.text:0000000000405681\n.text:0000000000405684\n.text:000000000040568a\n.text:000000000040568c\n.text:000000000040568e\n.text:0000000000405695\n.text:000000000040569a\n.text:000000000040569d\n.text:00000000004056a1\n.text:00000000004056a8\n.text:00000000004056ad\n.text:00000000004056ae\n'
p972
tp973
sS'tzfree'
p974
(S'\n__stdcall tzfree(timezone_t tz)\n'
p975
V\u000avoid tzfree(timezone_t tz)\u000a\u000a{\u000a  tm_zone *ptVar1;\u000a  \u000a  if ((timezone_t)0x1 < tz) {\u000a    do {\u000a      ptVar1 = tz->next;\u000a      free(tz);\u000a      tz = (timezone_t)ptVar1;\u000a    } while (ptVar1 != (tm_zone *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBX\nCMP RDI,0x2\nJC 0x00410660\nNOP word ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI]\nCALL 0x004020d0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00410650\nPOP RBX\nRET\n'
p977
S'53\n48 83 ff 02\n72 19\n66 0f 1f 84 00 00 00 00 00\n48 8b 1f\ne8 78 1a ff ff\n48 85 db\n48 89 df\n75 f0\n5b\nc3\n'
p978
S'.text:0000000000410640\n.text:0000000000410641\n.text:0000000000410645\n.text:0000000000410647\n.text:0000000000410650\n.text:0000000000410653\n.text:0000000000410658\n.text:000000000041065b\n.text:000000000041065e\n.text:0000000000410660\n.text:0000000000410661\n'
p979
tp980
sS'xmemdup'
p981
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p982
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p983
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x0040f910\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00402440\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p984
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 cc 29 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p985
S'.text:000000000040fa50\n.text:000000000040fa52\n.text:000000000040fa54\n.text:000000000040fa55\n.text:000000000040fa58\n.text:000000000040fa5b\n.text:000000000040fa5e\n.text:000000000040fa63\n.text:000000000040fa66\n.text:000000000040fa69\n.text:000000000040fa6c\n.text:000000000040fa6f\n.text:000000000040fa74\n.text:000000000040fa77\n.text:000000000040fa78\n.text:000000000040fa7a\n.text:000000000040fa7c\n'
p986
tp987
sS'has_capability_cache'
p988
(S'\n__stdcall has_capability_cache()\n'
p989
V\u000a_Bool has_capability_cache(void)\u000a\u000a{\u000a  dev_t unsupported_device;\u000a  _Bool _Var1;\u000a  int *piVar2;\u000a  long in_RDI;\u000a  \u000a  if (*(dev_t *)(in_RDI + 0x10) == unsupported_device) {\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0x5f;\u000a    return SUB81(piVar2,0);\u000a  }\u000a  has_capability();\u000a  __errno_location();\u000a  _Var1 = errno_unsupported();\u000a  if (_Var1 != false) {\u000a    _Var1 = SUB81(*(undefined8 *)(in_RDI + 0x10),0);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p990
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [0x0061e080]\nJNZ 0x004061ee\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nPOP RBX\nRET\nCALL 0x00406440\nCALL 0x00402110\nMOV EDI,dword ptr [RAX]\nCALL 0x00406450\nTEST AL,AL\nJZ 0x0040620e\nMOV RAX,qword ptr [RBX + 0x10]\nMOV qword ptr [0x0061e080],RAX\nPOP RBX\nRET\n'
p991
S'53\n48 89 fb\n48 8b 43 10\n48 3b 05 a1 7e 21 00\n75 0d\ne8 2a bf ff ff\nc7 00 5f 00 00 00\n5b\nc3\ne8 4d 02 00 00\ne8 18 bf ff ff\n8b 38\ne8 51 02 00 00\n84 c0\n74 0b\n48 8b 43 10\n48 89 05 72 7e 21 00\n5b\nc3\n'
p992
S'.text:00000000004061d0\n.text:00000000004061d1\n.text:00000000004061d4\n.text:00000000004061d8\n.text:00000000004061df\n.text:00000000004061e1\n.text:00000000004061e6\n.text:00000000004061ec\n.text:00000000004061ed\n.text:00000000004061ee\n.text:00000000004061f3\n.text:00000000004061f8\n.text:00000000004061fa\n.text:00000000004061ff\n.text:0000000000406201\n.text:0000000000406203\n.text:0000000000406207\n.text:000000000040620e\n.text:000000000040620f\n'
p993
tp994
sS'get_quoting_style'
p995
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p996
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p997
S'TEST RDI,RDI\nMOV EAX,0x61e1b0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p998
S'48 85 ff\nb8 b0 e1 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p999
S'.text:000000000040c030\n.text:000000000040c033\n.text:000000000040c038\n.text:000000000040c03c\n.text:000000000040c03e\n'
p1000
tp1001
sS'exit'
p1002
(S'\n__stdcall exit(int __status)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0061d318)();\u000a  return;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0061d318]\n'
p1005
S'ff 25 82 ac 21 00\n'
p1006
S'.plt:0000000000402690\n'
p1007
tp1008
sS'safe_hasher'
p1009
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1010
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1011
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00409aa0\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00402100\n'
p1012
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 5b 86 ff ff\n'
p1013
S'.text:0000000000409a80\n.text:0000000000409a81\n.text:0000000000409a84\n.text:0000000000409a88\n.text:0000000000409a8b\n.text:0000000000409a8e\n.text:0000000000409a91\n.text:0000000000409a95\n.text:0000000000409a97\n.text:0000000000409a9b\n.text:0000000000409a9e\n.text:0000000000409a9f\n.text:0000000000409aa0\n'
p1014
tp1015
sS'hash_delete'
p1016
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1017
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_00416df8 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_00416df8) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1018
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x0040a470\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040a5da\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x0040a709\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x0040a5e2\nCVTSI2SS XMM0,RAX\nJMP 0x0040a5f7\nXOR R14D,R14D\nJMP 0x0040a709\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x0040a60b\nCVTSI2SS XMM1,RCX\nJMP 0x0040a620\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x0040a709\nMOV RDI,R15\nCALL 0x00409da0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a64c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x0040a664\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040a677\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040a68f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x0040a709\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040a6ac\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x00416df8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x0040a040\nTEST AL,AL\nJNZ 0x0040a709\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x0040a701\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004020d0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040a6f0\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1019
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 44 c7 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 d7 79 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1020
S'.text:000000000040a590\n.text:000000000040a592\n.text:000000000040a594\n.text:000000000040a595\n.text:000000000040a599\n.text:000000000040a59c\n.text:000000000040a5a1\n.text:000000000040a5a6\n.text:000000000040a5ab\n.text:000000000040a5ae\n.text:000000000040a5b1\n.text:000000000040a5b3\n.text:000000000040a5b7\n.text:000000000040a5bc\n.text:000000000040a5c0\n.text:000000000040a5c6\n.text:000000000040a5ca\n.text:000000000040a5cd\n.text:000000000040a5d1\n.text:000000000040a5d3\n.text:000000000040a5d8\n.text:000000000040a5da\n.text:000000000040a5dd\n.text:000000000040a5e2\n.text:000000000040a5e5\n.text:000000000040a5e8\n.text:000000000040a5eb\n.text:000000000040a5ee\n.text:000000000040a5f3\n.text:000000000040a5f7\n.text:000000000040a5fb\n.text:000000000040a5ff\n.text:000000000040a602\n.text:000000000040a604\n.text:000000000040a609\n.text:000000000040a60b\n.text:000000000040a60e\n.text:000000000040a611\n.text:000000000040a614\n.text:000000000040a617\n.text:000000000040a61c\n.text:000000000040a620\n.text:000000000040a624\n.text:000000000040a627\n.text:000000000040a62d\n.text:000000000040a630\n.text:000000000040a635\n.text:000000000040a639\n.text:000000000040a63d\n.text:000000000040a640\n.text:000000000040a642\n.text:000000000040a645\n.text:000000000040a64a\n.text:000000000040a64c\n.text:000000000040a64f\n.text:000000000040a652\n.text:000000000040a655\n.text:000000000040a658\n.text:000000000040a65b\n.text:000000000040a660\n.text:000000000040a664\n.text:000000000040a668\n.text:000000000040a66b\n.text:000000000040a66d\n.text:000000000040a670\n.text:000000000040a675\n.text:000000000040a677\n.text:000000000040a67a\n.text:000000000040a67d\n.text:000000000040a680\n.text:000000000040a683\n.text:000000000040a686\n.text:000000000040a68b\n.text:000000000040a68f\n.text:000000000040a693\n.text:000000000040a697\n.text:000000000040a69a\n.text:000000000040a69c\n.text:000000000040a6a1\n.text:000000000040a6a5\n.text:000000000040a6a7\n.text:000000000040a6ac\n.text:000000000040a6b4\n.text:000000000040a6b7\n.text:000000000040a6bb\n.text:000000000040a6c0\n.text:000000000040a6ca\n.text:000000000040a6cd\n.text:000000000040a6d2\n.text:000000000040a6d5\n.text:000000000040a6d9\n.text:000000000040a6dc\n.text:000000000040a6e1\n.text:000000000040a6e3\n.text:000000000040a6e5\n.text:000000000040a6e9\n.text:000000000040a6ec\n.text:000000000040a6ee\n.text:000000000040a6f0\n.text:000000000040a6f4\n.text:000000000040a6f9\n.text:000000000040a6fc\n.text:000000000040a6ff\n.text:000000000040a701\n.text:000000000040a709\n.text:000000000040a70c\n.text:000000000040a710\n.text:000000000040a711\n.text:000000000040a713\n.text:000000000040a715\n'
p1021
tp1022
sS'quotearg_colon'
p1023
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1024
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV ESI,0x3a\nJMP 0x0040d2c0\n'
p1026
S'be 3a 00 00 00\neb e9\n'
p1027
S'.text:000000000040d2d0\n.text:000000000040d2d5\n'
p1028
tp1029
sS'ydhms_diff'
p1030
(S'\n__stdcall ydhms_diff(long_int year1, long_int yday1, int yday0, int hour0, int min0, int sec0)\n'
p1031
V\u000atime_t ydhms_diff(long_int year1,long_int yday1,int yday0,int hour0,int min0,int sec0)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int in_stack_00000008;\u000a  int in_stack_00000010;\u000a  int in_stack_00000018;\u000a  int in_stack_00000020;\u000a  \u000a  iVar3 = ((int)((ulong)year1 >> 2) + 0x1db) - (uint)((year1 & 3U) == 0);\u000a  iVar1 = ((sec0 >> 2) + 0x1db) - (uint)((sec0 & 3U) == 0);\u000a  iVar4 = iVar3 / 0x19 + (iVar3 >> 0x1f) + (uint)((ulong)((long)iVar3 * 0x51eb851f) >> 0x3f);\u000a  iVar4 = iVar4 - ((uint)(iVar3 + iVar4 * -0x19) >> 0x1f);\u000a  iVar2 = iVar1 / 0x19 + (iVar1 >> 0x1f) + (uint)((ulong)((long)iVar1 * 0x51eb851f) >> 0x3f);\u000a  iVar2 = iVar2 - ((uint)(iVar1 + iVar2 * -0x19) >> 0x1f);\u000a  return ((long)min0 - (long)in_stack_00000020) +\u000a         (((long)hour0 - (long)in_stack_00000018) +\u000a         (((long)yday0 - (long)in_stack_00000010) +\u000a         ((yday1 - (long)in_stack_00000008) + (year1 - (long)sec0) * 0x16d +\u000a         (long)((((iVar3 - iVar4) - iVar1) + (iVar4 >> 2) + iVar2) - (iVar2 >> 2))) * 0x18) * 0x3c)\u000a         * 0x3c;\u000a}\u000a\u000a
p1032
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R10,RDI\nSHR R10,0x2\nMOV EAX,EDI\nAND EAX,0x3\nCMP RAX,0x1\nSBB RAX,RAX\nLEA R10,[0x1db + R10 + RAX*0x1]\nMOV R11D,R9D\nMOVSXD R14,R9D\nMOV EAX,R9D\nSAR EAX,0x2\nAND R11D,0x3\nCMP R11D,0x1\nSBB EBX,EBX\nLEA R9D,[0x1db + RAX + RBX*0x1]\nMOVSXD R11,R10D\nIMUL R15,R11,0x51eb851f\nMOV R10,R15\nSHR R10,0x3f\nSAR R15,0x23\nADD R15D,R10D\nLEA EBX,[R15 + R15*0x4]\nLEA R10D,[RBX + RBX*0x4]\nMOV EBX,R11D\nSUB EBX,R10D\nSHR EBX,0x1f\nSUB R15D,EBX\nMOVSXD R9,R9D\nIMUL RBX,R9,0x51eb851f\nMOV R10,RBX\nSHR R10,0x3f\nSAR RBX,0x23\nADD EBX,R10D\nLEA EAX,[RBX + RBX*0x4]\nLEA R10D,[RAX + RAX*0x4]\nSUB R11D,R15D\nSUB R11D,R9D\nMOV EAX,R9D\nSUB EAX,R10D\nSHR EAX,0x1f\nSUB EBX,EAX\nSAR R15D,0x2\nADD R11D,R15D\nADD R11D,EBX\nSAR EBX,0x2\nSUB R11D,EBX\nSUB RDI,R14\nIMUL RAX,RDI,0x16d\nMOVSXD RDI,dword ptr [RSP + 0x20]\nMOVSXD RBX,R11D\nSUB RSI,RDI\nADD RSI,RAX\nADD RSI,RBX\nLEA RAX,[RSI + RSI*0x2]\nMOVSXD RDX,EDX\nMOVSXD RSI,dword ptr [RSP + 0x28]\nSUB RDX,RSI\nLEA RAX,[RDX + RAX*0x8]\nIMUL RAX,RAX,0x3c\nMOVSXD RCX,ECX\nMOVSXD RDX,dword ptr [RSP + 0x30]\nSUB RCX,RDX\nADD RCX,RAX\nIMUL RCX,RCX,0x3c\nMOVSXD RAX,R8D\nMOVSXD RDX,dword ptr [RSP + 0x38]\nSUB RAX,RDX\nADD RAX,RCX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1033
S'41 57\n41 56\n53\n49 89 fa\n49 c1 ea 02\n89 f8\n83 e0 03\n48 83 f8 01\n48 19 c0\n4d 8d 94 02 db 01 00 00\n45 89 cb\n4d 63 f1\n44 89 c8\nc1 f8 02\n41 83 e3 03\n41 83 fb 01\n19 db\n44 8d 8c 18 db 01 00 00\n4d 63 da\n4d 69 fb 1f 85 eb 51\n4d 89 fa\n49 c1 ea 3f\n49 c1 ff 23\n45 01 d7\n43 8d 1c bf\n44 8d 14 9b\n44 89 db\n44 29 d3\nc1 eb 1f\n41 29 df\n4d 63 c9\n49 69 d9 1f 85 eb 51\n49 89 da\n49 c1 ea 3f\n48 c1 fb 23\n44 01 d3\n8d 04 9b\n44 8d 14 80\n45 29 fb\n45 29 cb\n44 89 c8\n44 29 d0\nc1 e8 1f\n29 c3\n41 c1 ff 02\n45 01 fb\n41 01 db\nc1 fb 02\n41 29 db\n4c 29 f7\n48 69 c7 6d 01 00 00\n48 63 7c 24 20\n49 63 db\n48 29 fe\n48 01 c6\n48 01 de\n48 8d 04 76\n48 63 d2\n48 63 74 24 28\n48 29 f2\n48 8d 04 c2\n48 6b c0 3c\n48 63 c9\n48 63 54 24 30\n48 29 d1\n48 01 c1\n48 6b c9 3c\n49 63 c0\n48 63 54 24 38\n48 29 d0\n48 01 c8\n5b\n41 5e\n41 5f\nc3\n'
p1034
S'.text:00000000004115b0\n.text:00000000004115b2\n.text:00000000004115b4\n.text:00000000004115b5\n.text:00000000004115b8\n.text:00000000004115bc\n.text:00000000004115be\n.text:00000000004115c1\n.text:00000000004115c5\n.text:00000000004115c8\n.text:00000000004115d0\n.text:00000000004115d3\n.text:00000000004115d6\n.text:00000000004115d9\n.text:00000000004115dc\n.text:00000000004115e0\n.text:00000000004115e4\n.text:00000000004115e6\n.text:00000000004115ee\n.text:00000000004115f1\n.text:00000000004115f8\n.text:00000000004115fb\n.text:00000000004115ff\n.text:0000000000411603\n.text:0000000000411606\n.text:000000000041160a\n.text:000000000041160e\n.text:0000000000411611\n.text:0000000000411614\n.text:0000000000411617\n.text:000000000041161a\n.text:000000000041161d\n.text:0000000000411624\n.text:0000000000411627\n.text:000000000041162b\n.text:000000000041162f\n.text:0000000000411632\n.text:0000000000411635\n.text:0000000000411639\n.text:000000000041163c\n.text:000000000041163f\n.text:0000000000411642\n.text:0000000000411645\n.text:0000000000411648\n.text:000000000041164a\n.text:000000000041164e\n.text:0000000000411651\n.text:0000000000411654\n.text:0000000000411657\n.text:000000000041165a\n.text:000000000041165d\n.text:0000000000411664\n.text:0000000000411669\n.text:000000000041166c\n.text:000000000041166f\n.text:0000000000411672\n.text:0000000000411675\n.text:0000000000411679\n.text:000000000041167c\n.text:0000000000411681\n.text:0000000000411684\n.text:0000000000411688\n.text:000000000041168c\n.text:000000000041168f\n.text:0000000000411694\n.text:0000000000411697\n.text:000000000041169a\n.text:000000000041169e\n.text:00000000004116a1\n.text:00000000004116a6\n.text:00000000004116a9\n.text:00000000004116ac\n.text:00000000004116ad\n.text:00000000004116af\n.text:00000000004116b1\n'
p1035
tp1036
sS'__assert_fail'
p1037
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0061d168)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0061d168]\n'
p1040
S'ff 25 32 ae 21 00\n'
p1041
S'.plt:0000000000402330\n'
p1042
tp1043
sS'bindtextdomain'
p1044
(S'\n__stdcall bindtextdomain()\n'
p1045
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0061d0f8)();\u000a  return;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0061d0f8]\n'
p1047
S'ff 25 a2 ae 21 00\n'
p1048
S'.plt:0000000000402250\n'
p1049
tp1050
sS'set_char_quoting'
p1051
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1052
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1053
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x61e1b0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1054
S'89 f1\n48 85 ff\nbe b0 e1 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1055
S'.text:000000000040c050\n.text:000000000040c052\n.text:000000000040c055\n.text:000000000040c05a\n.text:000000000040c05e\n.text:000000000040c060\n.text:000000000040c063\n.text:000000000040c067\n.text:000000000040c06c\n.text:000000000040c06f\n.text:000000000040c071\n.text:000000000040c073\n.text:000000000040c076\n.text:000000000040c078\n.text:000000000040c07b\n.text:000000000040c07d\n.text:000000000040c080\n.text:000000000040c085\n'
p1056
tp1057
sS'rev_strcmp_df_mtime'
p1058
(S'\n__stdcall rev_strcmp_df_mtime(V a, V b)\n'
p1059
V\u000aint rev_strcmp_df_mtime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_mtime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1060
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406d7a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406d9d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406d9d\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407260\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1061
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 60 f7 ff ff\n89 c3\n4c 89 f7\ne8 56 f7 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 c3 04 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1062
S'.text:0000000000406d50\n.text:0000000000406d52\n.text:0000000000406d54\n.text:0000000000406d55\n.text:0000000000406d58\n.text:0000000000406d5b\n.text:0000000000406d60\n.text:0000000000406d62\n.text:0000000000406d65\n.text:0000000000406d6a\n.text:0000000000406d6c\n.text:0000000000406d6e\n.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d78\n.text:0000000000406d7a\n.text:0000000000406d7c\n.text:0000000000406d7e\n.text:0000000000406d83\n.text:0000000000406d86\n.text:0000000000406d88\n.text:0000000000406d8d\n.text:0000000000406d90\n.text:0000000000406d93\n.text:0000000000406d94\n.text:0000000000406d96\n.text:0000000000406d98\n.text:0000000000406d9d\n.text:0000000000406d9f\n.text:0000000000406da0\n.text:0000000000406da2\n.text:0000000000406da4\n'
p1063
tp1064
sS'strcmp_df_extension'
p1065
(S'\n__stdcall strcmp_df_extension(V a, V b)\n'
p1066
V\u000aint strcmp_df_extension(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_extension((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1067
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040687a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040689d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040689d\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004071b0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1068
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 60 fc ff ff\n89 c3\n4c 89 f7\ne8 56 fc ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 13 09 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1069
S'.text:0000000000406850\n.text:0000000000406852\n.text:0000000000406854\n.text:0000000000406855\n.text:0000000000406858\n.text:000000000040685b\n.text:0000000000406860\n.text:0000000000406862\n.text:0000000000406865\n.text:000000000040686a\n.text:000000000040686c\n.text:000000000040686e\n.text:0000000000406870\n.text:0000000000406873\n.text:0000000000406878\n.text:000000000040687a\n.text:000000000040687c\n.text:000000000040687e\n.text:0000000000406883\n.text:0000000000406886\n.text:0000000000406888\n.text:000000000040688d\n.text:0000000000406890\n.text:0000000000406893\n.text:0000000000406894\n.text:0000000000406896\n.text:0000000000406898\n.text:000000000040689d\n.text:000000000040689f\n.text:00000000004068a0\n.text:00000000004068a2\n.text:00000000004068a4\n'
p1070
tp1071
sS'xcalloc'
p1072
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1073
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1074
S'PUSH RAX\nCALL 0x00410240\nTEST RAX,RAX\nJZ 0x0040fa3d\nPOP RCX\nRET\nCALL 0x0040faa0\n'
p1075
S'50\ne8 0a 08 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1076
S'.text:000000000040fa30\n.text:000000000040fa31\n.text:000000000040fa36\n.text:000000000040fa39\n.text:000000000040fa3b\n.text:000000000040fa3c\n.text:000000000040fa3d\n'
p1077
tp1078
sS'clear_ungetc_buffer_preserving_position'
p1079
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1080
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1081
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004110e7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00411100\n'
p1082
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1083
S'.text:00000000004110e0\n.text:00000000004110e4\n.text:00000000004110e6\n.text:00000000004110e7\n.text:00000000004110e9\n.text:00000000004110ee\n'
p1084
tp1085
sS'xnmalloc'
p1086
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1087
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1088
S'MOV RAX,RDI\nMUL RSI\nJO 0x0040f901\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x0040f910\nPUSH RAX\nCALL 0x0040faa0\n'
p1089
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1090
S'.text:000000000040f8f0\n.text:000000000040f8f3\n.text:000000000040f8f6\n.text:000000000040f8f8\n.text:000000000040f8fc\n.text:000000000040f8ff\n.text:000000000040f901\n.text:000000000040f902\n'
p1091
tp1092
sS'quotearg_char'
p1093
(S'\n__stdcall quotearg_char(char * arg)\n'
p1094
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1095
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x0040d250\n'
p1096
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1097
S'.text:000000000040d2c0\n.text:000000000040d2c2\n.text:000000000040d2c9\n.text:000000000040d2cb\n'
p1098
tp1099
sS'malloc'
p1100
(S'\n__stdcall malloc(size_t __size)\n'
p1101
V\u000a/* WARNING: Switch with 1 destination removed at 0x004024e0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x0061d240]\n'
p1103
S'ff 25 5a ad 21 00\n'
p1104
S'.plt:00000000004024e0\n'
p1105
tp1106
sS'hash_get_n_buckets'
p1107
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1108
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1109
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1110
S'48 8b 47 10\nc3\n'
p1111
S'.text:0000000000409860\n.text:0000000000409864\n'
p1112
tp1113
sS'rev_strcmp_extension'
p1114
(S'\n__stdcall rev_strcmp_extension(V a, V b)\n'
p1115
V\u000aint rev_strcmp_extension(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_extension((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1116
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x004071b0\n'
p1117
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 ed 08 00 00\n'
p1118
S'.text:00000000004068b0\n.text:00000000004068b3\n.text:00000000004068b8\n.text:00000000004068bb\n.text:00000000004068be\n'
p1119
tp1120
sS'make_timespec'
p1121
(S'\n__stdcall make_timespec(time_t s, long ns)\n'
p1122
V\u000atimespec make_timespec(time_t s,long ns)\u000a\u000a{\u000a  return (timespec)CONCAT88(ns,s);\u000a}\u000a\u000a
p1123
S'MOV RAX,RDI\nMOV RDX,RSI\nRET\n'
p1124
S'48 89 f8\n48 89 f2\nc3\n'
p1125
S'.text:000000000040f380\n.text:000000000040f383\n.text:000000000040f386\n'
p1126
tp1127
sS'filevercmp'
p1128
(S'\n__stdcall filevercmp(char * s1, char * s2)\n'
p1129
V\u000aint filevercmp(char *s1,char *s2)\u000a\u000a{\u000a  char *pcVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  char cVar6;\u000a  char *s2_len;\u000a  char *__n;\u000a  char *local_48;\u000a  char *local_40;\u000a  char *local_38;\u000a  \u000a  iVar2 = strcmp(s1,s2);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  if (*s1 == 0) {\u000a    return -1;\u000a  }\u000a  if (*s2 != 0) {\u000a    if ((*s1 == '.') && (s1[1] == 0)) {\u000a      return -1;\u000a    }\u000a    if ((*s2 != '.') || (s2[1] != 0)) {\u000a      if ((*s1 == '.') && ((s1[1] == '.' && (s1[2] == 0)))) {\u000a        return -1;\u000a      }\u000a      cVar6 = *s2;\u000a      if (cVar6 == '.') {\u000a        if ((s2[1] == '.') && (s2[2] == 0)) {\u000a          return 1;\u000a        }\u000a        cVar6 = *s2;\u000a      }\u000a      if (*s1 == '.') {\u000a        if (cVar6 != '.') {\u000a          return -1;\u000a        }\u000a        if (*s2 == '.') {\u000a          s1 = s1 + 1;\u000a          s2 = s2 + 1;\u000a        }\u000a      }\u000a      else {\u000a        if (cVar6 == '.') {\u000a          return 1;\u000a        }\u000a      }\u000a      local_48 = s2;\u000a      local_40 = s1;\u000a      pcVar4 = match_suffix(&local_40);\u000a      pcVar5 = match_suffix(&local_48);\u000a      pcVar1 = local_40;\u000a      __n = local_40;\u000a      if (pcVar4 != (char *)0x0) {\u000a        __n = pcVar4;\u000a      }\u000a      __n = __n + -(long)s1;\u000a      s2_len = local_48;\u000a      if (pcVar5 != (char *)0x0) {\u000a        s2_len = pcVar5;\u000a      }\u000a      s2_len = s2_len + -(long)s2;\u000a      if ((((ulong)pcVar4 | (ulong)pcVar5) != 0) && (__n == s2_len)) {\u000a        local_38 = local_48;\u000a        iVar3 = strncmp(s1,s2,(size_t)__n);\u000a        if (iVar3 == 0) {\u000a          __n = pcVar1 + -(long)s1;\u000a          s2_len = local_38 + -(long)s2;\u000a        }\u000a      }\u000a      iVar3 = verrevcmp(s1,(size_t)__n,s2,(size_t)s2_len);\u000a      if (iVar3 != 0) {\u000a        return iVar3;\u000a      }\u000a      return iVar2;\u000a    }\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV RBP,RDI\nCALL 0x004023f0\nMOV R14D,EAX\nTEST R14D,R14D\nJZ 0x00409457\nMOV CL,byte ptr [RBP]\nMOV EAX,0xffffffff\nTEST CL,CL\nJZ 0x00409503\nCMP byte ptr [RBX],0x0\nJZ 0x0040945e\nCMP CL,0x2e\nJNZ 0x00409405\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x00409503\nCMP byte ptr [RBX],0x2e\nJNZ 0x00409410\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x0040945e\nCMP byte ptr [RBP],0x2e\nJNZ 0x00409426\nCMP byte ptr [RBP + 0x1],0x2e\nJNZ 0x00409426\nCMP byte ptr [RBP + 0x2],0x0\nJZ 0x00409503\nMOV CL,byte ptr [RBX]\nCMP CL,0x2e\nJNZ 0x0040943b\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x00409439\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040945e\nMOV CL,byte ptr [RBX]\nCMP byte ptr [RBP],0x2e\nJNZ 0x00409468\nCMP CL,0x2e\nJNZ 0x00409503\nCMP byte ptr [RBX],0x2e\nJNZ 0x00409476\nINC RBP\nINC RBX\nJMP 0x00409476\nXOR EAX,EAX\nJMP 0x00409503\nMOV EAX,0x1\nJMP 0x00409503\nCMP CL,0x2e\nMOV EAX,0x1\nJZ 0x00409503\nMOV qword ptr [RSP + 0x8],RBP\nMOV qword ptr [RSP],RBX\nLEA RDI,[RSP + 0x8]\nCALL 0x00409520\nMOV R13,RAX\nMOV RDI,RSP\nCALL 0x00409520\nTEST R13,R13\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R15,RCX\nCMOVNZ R15,R13\nSUB R15,RBP\nTEST RAX,RAX\nMOV RDX,qword ptr [RSP]\nMOV R12,RDX\nCMOVNZ R12,RAX\nSUB R12,RBX\nOR R13,RAX\nJZ 0x004094e9\nCMP R15,R12\nJNZ 0x004094e9\nMOV qword ptr [RSP + 0x10],RDX\nMOV R13,RCX\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x004094e9\nMOV R15,R13\nSUB R15,RBP\nMOV R12,qword ptr [RSP + 0x10]\nSUB R12,RBX\nMOV RDI,RBP\nMOV RSI,R15\nMOV RDX,RBX\nMOV RCX,R12\nCALL 0x004095d0\nTEST EAX,EAX\nCMOVNZ R14D,EAX\nMOV EAX,R14D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 f3\n48 89 fd\ne8 17 90 ff ff\n41 89 c6\n45 85 f6\n74 76\n8a 4d 00\nb8 ff ff ff ff\n84 c9\n0f 84 12 01 00 00\n80 3b 00\n74 68\n80 f9 2e\n75 0a\n80 7d 01 00\n0f 84 fe 00 00 00\n80 3b 2e\n75 06\n80 7b 01 00\n74 4e\n80 7d 00 2e\n75 10\n80 7d 01 2e\n75 0a\n80 7d 02 00\n0f 84 dd 00 00 00\n8a 0b\n80 f9 2e\n75 0e\n80 7b 01 2e\n75 06\n80 7b 02 00\n74 25\n8a 0b\n80 7d 00 2e\n75 27\n80 f9 2e\n0f 85 b9 00 00 00\n80 3b 2e\n75 27\n48 ff c5\n48 ff c3\neb 1f\n31 c0\ne9 a5 00 00 00\nb8 01 00 00 00\ne9 9b 00 00 00\n80 f9 2e\nb8 01 00 00 00\n0f 84 8d 00 00 00\n48 89 6c 24 08\n48 89 1c 24\n48 8d 7c 24 08\ne8 97 00 00 00\n49 89 c5\n48 89 e7\ne8 8c 00 00 00\n4d 85 ed\n48 8b 4c 24 08\n49 89 cf\n4d 0f 45 fd\n49 29 ef\n48 85 c0\n48 8b 14 24\n49 89 d4\n4c 0f 45 e0\n49 29 dc\n49 09 c5\n74 2d\n4d 39 e7\n75 28\n48 89 54 24 10\n49 89 cd\n48 89 ef\n48 89 de\n4c 89 fa\ne8 49 8c ff ff\n85 c0\n75 0e\n4d 89 ef\n49 29 ef\n4c 8b 64 24 10\n49 29 dc\n48 89 ef\n4c 89 fe\n48 89 da\n4c 89 e1\ne8 d6 00 00 00\n85 c0\n44 0f 45 f0\n44 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:00000000004093c0\n.text:00000000004093c1\n.text:00000000004093c3\n.text:00000000004093c5\n.text:00000000004093c7\n.text:00000000004093c9\n.text:00000000004093ca\n.text:00000000004093ce\n.text:00000000004093d1\n.text:00000000004093d4\n.text:00000000004093d9\n.text:00000000004093dc\n.text:00000000004093df\n.text:00000000004093e1\n.text:00000000004093e4\n.text:00000000004093e9\n.text:00000000004093eb\n.text:00000000004093f1\n.text:00000000004093f4\n.text:00000000004093f6\n.text:00000000004093f9\n.text:00000000004093fb\n.text:00000000004093ff\n.text:0000000000409405\n.text:0000000000409408\n.text:000000000040940a\n.text:000000000040940e\n.text:0000000000409410\n.text:0000000000409414\n.text:0000000000409416\n.text:000000000040941a\n.text:000000000040941c\n.text:0000000000409420\n.text:0000000000409426\n.text:0000000000409428\n.text:000000000040942b\n.text:000000000040942d\n.text:0000000000409431\n.text:0000000000409433\n.text:0000000000409437\n.text:0000000000409439\n.text:000000000040943b\n.text:000000000040943f\n.text:0000000000409441\n.text:0000000000409444\n.text:000000000040944a\n.text:000000000040944d\n.text:000000000040944f\n.text:0000000000409452\n.text:0000000000409455\n.text:0000000000409457\n.text:0000000000409459\n.text:000000000040945e\n.text:0000000000409463\n.text:0000000000409468\n.text:000000000040946b\n.text:0000000000409470\n.text:0000000000409476\n.text:000000000040947b\n.text:000000000040947f\n.text:0000000000409484\n.text:0000000000409489\n.text:000000000040948c\n.text:000000000040948f\n.text:0000000000409494\n.text:0000000000409497\n.text:000000000040949c\n.text:000000000040949f\n.text:00000000004094a3\n.text:00000000004094a6\n.text:00000000004094a9\n.text:00000000004094ad\n.text:00000000004094b0\n.text:00000000004094b4\n.text:00000000004094b7\n.text:00000000004094ba\n.text:00000000004094bc\n.text:00000000004094bf\n.text:00000000004094c1\n.text:00000000004094c6\n.text:00000000004094c9\n.text:00000000004094cc\n.text:00000000004094cf\n.text:00000000004094d2\n.text:00000000004094d7\n.text:00000000004094d9\n.text:00000000004094db\n.text:00000000004094de\n.text:00000000004094e1\n.text:00000000004094e6\n.text:00000000004094e9\n.text:00000000004094ec\n.text:00000000004094ef\n.text:00000000004094f2\n.text:00000000004094f5\n.text:00000000004094fa\n.text:00000000004094fc\n.text:0000000000409500\n.text:0000000000409503\n.text:0000000000409507\n.text:0000000000409508\n.text:000000000040950a\n.text:000000000040950c\n.text:000000000040950e\n.text:0000000000409510\n.text:0000000000409511\n'
p1133
tp1134
sS'dev_ino_free'
p1135
(S'\n__stdcall dev_ino_free(void * __ptr)\n'
p1136
V\u000a/* WARNING: Switch with 1 destination removed at 0x004020d0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid dev_ino_free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1137
S'JMP 0x004020d0\n'
p1138
S'e9 3b e1 ff ff\n'
p1139
S'.text:0000000000403f90\n'
p1140
tp1141
sS'memcpy_lowcase'
p1142
(S'\n__stdcall memcpy_lowcase(size_t len)\n'
p1143
V\u000achar * memcpy_lowcase(size_t len)\u000a\u000a{\u000a  __int32_t **in_RAX;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  \u000a  if (in_RDX != 0) {\u000a    in_RAX = __ctype_tolower_loc();\u000a    do {\u000a      *(undefined *)((len - 1) + in_RDX) =\u000a           *(undefined *)(*in_RAX + (ulong)*(byte *)(in_RSI + -1 + in_RDX));\u000a      in_RDX = in_RDX + -1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return (char *)in_RAX;\u000a}\u000a\u000a
p1144
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x0040f2f7\nCALL 0x00402710\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RAX]\nMOVZX EDX,byte ptr [R14 + RBX*0x1 + -0x1]\nMOVZX ECX,byte ptr [RCX + RDX*0x4]\nMOV byte ptr [R15 + RBX*0x1 + -0x1],CL\nDEC RBX\nJNZ 0x0040f2e0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1145
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 24\ne8 38 34 ff ff\n0f 1f 84 00 00 00 00 00\n48 8b 08\n41 0f b6 54 1e ff\n0f b6 0c 91\n41 88 4c 1f ff\n48 ff cb\n75 e9\n5b\n41 5e\n41 5f\nc3\n'
p1146
S'.text:000000000040f2c0\n.text:000000000040f2c2\n.text:000000000040f2c4\n.text:000000000040f2c5\n.text:000000000040f2c8\n.text:000000000040f2cb\n.text:000000000040f2ce\n.text:000000000040f2d1\n.text:000000000040f2d3\n.text:000000000040f2d8\n.text:000000000040f2e0\n.text:000000000040f2e3\n.text:000000000040f2e9\n.text:000000000040f2ed\n.text:000000000040f2f2\n.text:000000000040f2f5\n.text:000000000040f2f7\n.text:000000000040f2f8\n.text:000000000040f2fa\n.text:000000000040f2fc\n'
p1147
tp1148
sS'bkm_scale'
p1149
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1150
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1151
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1152
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1153
S'.text:00000000004101d0\n.text:00000000004101d3\n.text:00000000004101da\n.text:00000000004101e1\n.text:00000000004101e3\n.text:00000000004101e6\n.text:00000000004101e9\n.text:00000000004101ed\n.text:00000000004101f0\n.text:00000000004101f4\n.text:00000000004101f6\n.text:00000000004101f9\n.text:00000000004101fc\n'
p1154
tp1155
sS'quotearg_style_mem'
p1156
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1157
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1158
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040d1d0\n'
p1159
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1160
S'.text:000000000040d230\n.text:000000000040d233\n.text:000000000040d236\n.text:000000000040d238\n.text:000000000040d23a\n.text:000000000040d23c\n.text:000000000040d23f\n.text:000000000040d242\n'
p1161
tp1162
sS'xalloc_die'
p1163
(S'\n__stdcall xalloc_die()\n'
p1164
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_00416d7f,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1165
S'PUSH RBX\nMOV EBX,dword ptr [0x0061d540]\nXOR EDI,EDI\nMOV ESI,0x417f0f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x416d7f\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004025f0\nCALL 0x00402100\n'
p1166
S'53\n8b 1d 99 da 20 00\n31 ff\nbe 0f 7f 41 00\nba 05 00 00 00\ne8 b8 27 ff ff\n48 89 c1\n31 f6\nba 7f 6d 41 00\n31 c0\n89 df\ne8 25 2b ff ff\ne8 30 26 ff ff\n'
p1167
S'.text:000000000040faa0\n.text:000000000040faa1\n.text:000000000040faa7\n.text:000000000040faa9\n.text:000000000040faae\n.text:000000000040fab3\n.text:000000000040fab8\n.text:000000000040fabb\n.text:000000000040fabd\n.text:000000000040fac2\n.text:000000000040fac4\n.text:000000000040fac6\n.text:000000000040facb\n'
p1168
tp1169
sS'gobble_file'
p1170
(S'\n__stdcall gobble_file()\n'
p1171
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000auintmax_t gobble_file(void)\u000a\u000a{\u000a  stat *__buf;\u000a  __mode_t *p_Var1;\u000a  char *__s2;\u000a  __ino_t i;\u000a  __nlink_t i_00;\u000a  __dev_t __dev;\u000a  __off_t size;\u000a  long lVar2;\u000a  acl_type aVar3;\u000a  fileinfo *f;\u000a  fileinfo *pfVar4;\u000a  fileinfo *pfVar5;\u000a  fileinfo *pfVar6;\u000a  size_t sVar7;\u000a  _Bool _Var8;\u000a  bool bVar9;\u000a  int iVar10;\u000a  uint uVar11;\u000a  size_t sVar12;\u000a  size_t sVar13;\u000a  undefined8 file;\u000a  int *piVar14;\u000a  uint *puVar15;\u000a  char *__file;\u000a  uintmax_t n;\u000a  char *dest;\u000a  ushort uVar16;\u000a  format fVar17;\u000a  filetype fVar18;\u000a  char *__s;\u000a  byte in_DL;\u000a  ulong from_block_size;\u000a  acl_type aVar19;\u000a  filetype in_ESI;\u000a  char *__s_00;\u000a  uintmax_t n_00;\u000a  bool bVar20;\u000a  undefined8 uStack784;\u000a  char local_308 [8];\u000a  char buf [652];\u000a  char b [21];\u000a  \u000a  dest = local_308;\u000a  if (cwd_n_used == cwd_n_alloc) {\u000a    uStack784 = 0x404097;\u000a    cwd_file = (fileinfo *)xnrealloc(cwd_file,cwd_n_alloc,0x180);\u000a    cwd_n_alloc = cwd_n_alloc << 1;\u000a  }\u000a  sVar7 = cwd_n_used;\u000a  pfVar6 = cwd_file;\u000a  f = cwd_file + cwd_n_used;\u000a  pfVar4 = cwd_file + cwd_n_used;\u000a  pfVar5 = cwd_file + cwd_n_used;\u000a  *(undefined4 *)&cwd_file[cwd_n_used].stat_ok = 0;\u000a  pfVar5->acl_type = ACL_T_NONE;\u000a  *(undefined4 *)&pfVar4->has_capability = 0;\u000a  *(undefined4 *)&f->field_0xbc = 0;\u000a  pfVar6[sVar7].filetype = unknown;\u000a  pfVar6[sVar7].linkmode = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].scontext = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].scontext + 4) = 0;\u000a  *(undefined4 *)(pfVar6[sVar7].stat.__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)pfVar6[sVar7].stat.__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(pfVar6[sVar7].stat.__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)pfVar6[sVar7].stat.__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)pfVar6[sVar7].stat.__glibc_reserved = 0;\u000a  *(undefined4 *)((long)pfVar6[sVar7].stat.__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_blocks = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_blocks + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_size = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_size + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_blksize = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_blksize + 4) = 0;\u000a  pfVar6[sVar7].stat.st_gid = 0;\u000a  pfVar6[sVar7].stat.__pad0 = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_rdev = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_rdev + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_nlink = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_nlink + 4) = 0;\u000a  pfVar6[sVar7].stat.st_mode = 0;\u000a  pfVar6[sVar7].stat.st_uid = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_dev = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_dev + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].stat.st_ino = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].stat.st_ino + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].name = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].name + 4) = 0;\u000a  *(undefined4 *)&pfVar6[sVar7].linkname = 0;\u000a  *(undefined4 *)((long)&pfVar6[sVar7].linkname + 4) = 0;\u000a  pfVar6[sVar7].filetype = in_ESI;\u000a  f = pfVar6 + sVar7;\u000a  if ((format_needs_stat == false & (in_DL ^ 1)) == 1) {\u000a    if ((in_ESI == directory) && (print_with_color != false)) {\u000a      uStack784 = 0x404155;\u000a      _Var8 = is_colored();\u000a      if (_Var8 == false) {\u000a        uStack784 = 0x404167;\u000a        _Var8 = is_colored();\u000a        if (_Var8 == false) {\u000a          uStack784 = 0x404179;\u000a          _Var8 = is_colored();\u000a          if (_Var8 == false) goto LAB_00404181;\u000a        }\u000a      }\u000a      goto LAB_00404251;\u000a    }\u000aLAB_00404181:\u000a    if ((format_needs_type != false) || (((print_inode ^ 1) & 1) == 0)) {\u000a      if ((((in_ESI != symbolic_link) && (in_ESI != unknown)) ||\u000a          (((dereference != DEREF_ALWAYS && (color_symlink_as_referent == 0)) &&\u000a           (check_symlink_color == 0)))) && (print_inode == 0)) goto LAB_004041dd;\u000a      goto LAB_00404251;\u000a    }\u000a    if ((print_inode & 1) != 0) goto LAB_00404251;\u000aLAB_004041dd:\u000a    if (format_needs_type == false) {\u000aLAB_004047d4:\u000a      n_00 = 0;\u000a      dest = local_308;\u000a      iVar10 = file_size_width;\u000a      goto joined_r0x004047cc;\u000a    }\u000a    if ((in_ESI == unknown) || (in_DL != 0)) goto LAB_00404251;\u000a    if (in_ESI == normal) {\u000a      if (indicator_style != classify) {\u000a        if (print_with_color == false) goto LAB_004047d4;\u000a        uStack784 = 0x40421f;\u000a        _Var8 = is_colored();\u000a        if (_Var8 == false) {\u000a          uStack784 = 0x40422d;\u000a          _Var8 = is_colored();\u000a          if (_Var8 == false) {\u000a            uStack784 = 0x40423b;\u000a            _Var8 = is_colored();\u000a            if (_Var8 == false) {\u000a              uStack784 = 0x404249;\u000a              _Var8 = is_colored();\u000a              if (_Var8 == false) goto LAB_004047d4;\u000a            }\u000a          }\u000a        }\u000a      }\u000a      goto LAB_00404251;\u000a    }\u000a    n_00 = 0;\u000a    goto joined_r0x004047f0;\u000a  }\u000aLAB_00404251:\u000a  dest = local_308;\u000a  __file = __s_00;\u000a  if ((*__s_00 != '/') && (dest = local_308, __file = __s_00, *__s != 0)) {\u000a    uStack784 = 0x404273;\u000a    sVar12 = strlen(__s_00);\u000a    uStack784 = 0x404282;\u000a    sVar13 = strlen(__s);\u000a    lVar2 = -(sVar12 + 0x11 + sVar13 & 0xfffffffffffffff0);\u000a    dest = local_308 + lVar2;\u000a    *(undefined8 *)((long)&uStack784 + lVar2) = 0x4042a2;\u000a    attach(dest,__s,__s_00,*(undefined *)((long)&uStack784 + lVar2));\u000a    __file = dest;\u000a  }\u000a  __buf = &pfVar6[sVar7].stat;\u000a  if (dereference + ~DEREF_NEVER < 2) {\u000a    if (in_DL == 0) goto LAB_0040430d;\u000a    *(undefined8 *)(dest + -8) = 0x4042c6;\u000a    iVar10 = stat(__file,__buf,dest[-8]);\u000a    if (dereference == DEREF_COMMAND_LINE_ARGUMENTS) goto joined_r0x004042ff;\u000a    if (-1 < iVar10) {\u000a      if ((pfVar6[sVar7].stat.st_mode & 0xf000) != 0x4000) goto LAB_0040430d;\u000a      goto joined_r0x004042ff;\u000a    }\u000a    *(undefined8 *)(dest + -8) = 0x404308;\u000a    piVar14 = __errno_location(dest[-8]);\u000a    if (*piVar14 == 2) goto LAB_0040430d;\u000a  }\u000a  else {\u000a    if (dereference == DEREF_ALWAYS) {\u000a      *(undefined8 *)(dest + -8) = 0x4042fa;\u000a      iVar10 = stat(__file,__buf,dest[-8]);\u000a      goto joined_r0x004042ff;\u000a    }\u000aLAB_0040430d:\u000a    *(undefined8 *)(dest + -8) = 0x404318;\u000a    iVar10 = lstat(__file,__buf,dest[-8]);\u000ajoined_r0x004042ff:\u000a    if (iVar10 == 0) {\u000a      pfVar6[sVar7].stat_ok = true;\u000a      if (((in_ESI == normal) || ((pfVar6[sVar7].stat.st_mode & 0xf000) == 0x8000)) &&\u000a         (print_with_color != false)) {\u000a        *(undefined8 *)(dest + -8) = 0x404390;\u000a        _Var8 = is_colored(dest[-8]);\u000a        if (_Var8 != false) {\u000a          *(undefined8 *)(dest + -8) = 0x40439d;\u000a          has_capability_cache(dest[-8]);\u000a          pfVar6[sVar7].has_capability = false;\u000a        }\u000a      }\u000a      if ((format == long_format) || (print_scontext == 1)) {\u000a        *(undefined8 *)(dest + -8) = 0x4043cc;\u000a        iVar10 = getfilecon_cache(__file,f,dest[-8]);\u000a        if (iVar10 < 0) {\u000a          pfVar6[sVar7].scontext = UNKNOWN_SECURITY_CONTEXT;\u000a          *(undefined8 *)(dest + -8) = 0x4043fb;\u000a          piVar14 = __errno_location(dest[-8]);\u000a          iVar10 = *piVar14;\u000a          *(undefined8 *)(dest + -8) = 0x404404;\u000a          _Var8 = is_ENOTSUP(dest[-8]);\u000a          fVar17 = (format)(byte)(iVar10 != 0x3d & ~_Var8);\u000a          bVar20 = false;\u000a        }\u000a        else {\u000a          __s2 = pfVar6[sVar7].scontext;\u000a          *(undefined8 *)(dest + -8) = 0x4043e5;\u000a          iVar10 = strcmp("unlabeled",__s2,dest[-8]);\u000a          bVar20 = iVar10 != 0;\u000a          fVar17 = long_format;\u000a        }\u000a        bVar9 = false;\u000a        if ((format | fVar17) == long_format) {\u000a          *(undefined8 *)(dest + -8) = 0x404431;\u000a          uVar11 = file_has_acl_cache(__file,f,dest[-8]);\u000a          fVar17 = uVar11 >> 0x1f;\u000a          bVar9 = 0 < (int)uVar11;\u000a        }\u000a        aVar19 = ACL_T_NONE;\u000a        aVar3 = ACL_T_YES;\u000a        if (bVar20) {\u000a          aVar19 = (uint)bVar9 + ACL_T_LSM_CONTEXT_ONLY;\u000a          aVar3 = (uint)bVar9 + ACL_T_LSM_CONTEXT_ONLY;\u000a        }\u000a        if (bVar9 != false) {\u000a          aVar19 = aVar3;\u000a        }\u000a        pfVar6[sVar7].acl_type = aVar19;\u000a        any_has_acl = (_Bool)(any_has_acl | aVar19 != ACL_T_NONE);\u000a        if (fVar17 != long_format) {\u000a          *(undefined8 *)(dest + -8) = 0x404470;\u000a          puVar15 = (uint *)__errno_location(dest[-8]);\u000a          uVar11 = *puVar15;\u000a          *(undefined8 *)(dest + -8) = 0x404481;\u000a          quotearg_n_style_colon(0,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x404494;\u000a          error(0,(ulong)uVar11,&DAT_00416d7f);\u000a        }\u000a      }\u000a      p_Var1 = &pfVar6[sVar7].stat.st_mode;\u000a      if (((pfVar6[sVar7].stat.st_mode & 0xf000) == 0xa000) &&\u000a         ((format == long_format || (check_symlink_color == 1)))) {\u000a        *(undefined8 *)(dest + -8) = 0x4044d7;\u000a        get_link_name(__file,f,dest[-8]);\u000a        __s2 = pfVar6[sVar7].linkname;\u000a        *(undefined8 *)(dest + -8) = 0x4044e4;\u000a        __file = make_link_name(__file,__s2,dest[-8]);\u000a        if ((__file != (char *)0x0) && ((slash < indicator_style || (check_symlink_color == 1)))) {\u000a          *(undefined8 *)(dest + -8) = 0x40450d;\u000a          iVar10 = stat(__file,local_308,dest[-8]);\u000a          if ((iVar10 == 0) &&\u000a             (((pfVar6[sVar7].linkok = true, format == long_format || (in_DL == 0)) ||\u000a              ((buf._16_4_ & 0xf000) != 0x4000)))) {\u000a            pfVar6[sVar7].linkmode = buf._16_4_;\u000a          }\u000a        }\u000a        *(undefined8 *)(dest + -8) = 0x40454f;\u000a        free(__file,dest[-8]);\u000a      }\u000a      uVar16 = *(ushort *)p_Var1 & 0xf000;\u000a      if (uVar16 == 0xa000) {\u000a        fVar18 = symbolic_link;\u000a      }\u000a      else {\u000a        if (uVar16 == 0x4000) {\u000a          if ((in_DL == 0) || (fVar18 = arg_directory, immediate_dirs == 1)) {\u000a            fVar18 = directory;\u000a          }\u000a        }\u000a        else {\u000a          fVar18 = normal;\u000a        }\u000a      }\u000a      pfVar6[sVar7].filetype = fVar18;\u000a      n_00 = pfVar6[sVar7].stat.st_blocks;\u000a      if ((format == long_format) || (print_block_size == 1)) {\u000a        from_block_size = (ulong)(uint)human_output_opts;\u000a        *(undefined8 *)(dest + -8) = 0x4045d7;\u000a        __file = human_readable(n_00,local_308,from_block_size,0x200,dest[-8]);\u000a        *(undefined8 *)(dest + -8) = 0x4045e1;\u000a        iVar10 = gnu_mbswidth(__file,dest[-8]);\u000a        if (block_size_width < iVar10) {\u000a          block_size_width = iVar10;\u000a        }\u000a      }\u000a      if (format == long_format) {\u000a        if (print_owner == 0) {\u000a          *(undefined8 *)(dest + -8) = 0x40460c;\u000a          iVar10 = format_user_width(dest[-8]);\u000a          if (owner_width < iVar10) {\u000a            owner_width = iVar10;\u000a          }\u000a        }\u000a        if (print_group == 0) {\u000a          *(undefined8 *)(dest + -8) = 0x40462e;\u000a          iVar10 = format_group_width(dest[-8]);\u000a          if (group_width < iVar10) {\u000a            group_width = iVar10;\u000a          }\u000a        }\u000a        if (print_author == 1) {\u000a          *(undefined8 *)(dest + -8) = 0x40464f;\u000a          iVar10 = format_user_width(dest[-8]);\u000a          if (author_width < iVar10) {\u000a            author_width = iVar10;\u000a          }\u000a        }\u000a      }\u000a      if (print_scontext == 1) {\u000a        __file = pfVar6[sVar7].scontext;\u000a        *(undefined8 *)(dest + -8) = 0x404673;\u000a        sVar12 = strlen(__file,dest[-8]);\u000a        if (scontext_width < (int)sVar12) {\u000a          scontext_width = (int)sVar12;\u000a        }\u000a      }\u000a      if (format == long_format) {\u000a        i_00 = pfVar6[sVar7].stat.st_nlink;\u000a        *(undefined8 *)(dest + -8) = 0x4046d8;\u000a        __file = umaxtostr(i_00,buf + 0x288,dest[-8]);\u000a        *(undefined8 *)(dest + -8) = 0x4046e0;\u000a        sVar12 = strlen(__file,dest[-8]);\u000a        if (nlink_width < (int)sVar12) {\u000a          nlink_width = (int)sVar12;\u000a        }\u000a        if ((*(ushort *)p_Var1 & 0xf000 | 0x4000) == 0x6000) {\u000a          __dev = pfVar6[sVar7].stat.st_rdev;\u000a          *(undefined8 *)(dest + -8) = 0x404711;\u000a          uVar11 = gnu_dev_major(__dev,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x40471f;\u000a          __file = umaxtostr((ulong)uVar11,local_308,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x404727;\u000a          sVar12 = strlen(__file,dest[-8]);\u000a          if (major_device_number_width < (int)sVar12) {\u000a            major_device_number_width = (int)sVar12;\u000a          }\u000a          __dev = pfVar6[sVar7].stat.st_rdev;\u000a          *(undefined8 *)(dest + -8) = 0x40473d;\u000a          uVar11 = gnu_dev_minor(__dev,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x40474b;\u000a          __file = umaxtostr((ulong)uVar11,local_308,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x404753;\u000a          sVar12 = strlen(__file,dest[-8]);\u000a          if (minor_device_number_width < (int)sVar12) {\u000a            minor_device_number_width = (int)sVar12;\u000a          }\u000a          iVar10 = major_device_number_width + 2 + minor_device_number_width;\u000a          if (iVar10 <= file_size_width) goto joined_r0x004047f0;\u000a        }\u000a        else {\u000a          size = pfVar6[sVar7].stat.st_size;\u000a          *(undefined8 *)(dest + -8) = 0x404788;\u000a          n = unsigned_file_size(size,dest[-8]);\u000a          from_block_size = (ulong)(uint)file_human_output_opts;\u000a          *(undefined8 *)(dest + -8) = 0x4047a9;\u000a          __file = human_readable(n,local_308,from_block_size,1,dest[-8]);\u000a          *(undefined8 *)(dest + -8) = 0x4047b3;\u000a          iVar10 = gnu_mbswidth(__file,dest[-8]);\u000a          if (iVar10 <= file_size_width) goto joined_r0x004047f0;\u000a        }\u000a      }\u000a      else {\u000ajoined_r0x004047f0:\u000a        iVar10 = file_size_width;\u000a      }\u000ajoined_r0x004047cc:\u000a      file_size_width = iVar10;\u000a      if (print_inode == 1) {\u000a        i = pfVar6[sVar7].stat.st_ino;\u000a        *(undefined8 *)(dest + -8) = 0x4046ab;\u000a        __file = umaxtostr(i,local_308,dest[-8]);\u000a        *(undefined8 *)(dest + -8) = 0x4046b3;\u000a        sVar12 = strlen(__file,dest[-8]);\u000a        if (inode_number_width < (int)sVar12) {\u000a          inode_number_width = (int)sVar12;\u000a        }\u000a      }\u000a      goto LAB_004047f6;\u000a    }\u000a  }\u000a  n_00 = 0;\u000a  *(undefined8 *)(dest + -8) = 0x404333;\u000a  file = dcgettext(0,"cannot access %s",5);\u000a  *(undefined8 *)(dest + -8) = 0x404344;\u000a  file_failure((ulong)in_DL,file,dest[-8]);\u000a  if (in_DL != 0) {\u000a    return 0;\u000a  }\u000aLAB_004047f6:\u000a  *(undefined8 *)(dest + -8) = 0x4047ff;\u000a  dest = xstrdup(__s_00,dest[-8]);\u000a  f->name = dest;\u000a  cwd_n_used = cwd_n_used + 1;\u000a  return n_00;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2d8\nMOV qword ptr [RBP + -0x48],RCX\nMOV R15D,ESI\nMOV R12,RDI\nMOV dword ptr [RBP + -0x2c],EDX\nMOV EBX,EDX\nXOR BL,0x1\nMOV RSI,qword ptr [0x0061d7f8]\nCMP qword ptr [0x0061d808],RSI\nJNZ 0x004040a5\nMOV RDI,qword ptr [0x0061d800]\nMOV EDX,0x180\nCALL 0x0040f930\nMOV qword ptr [0x0061d800],RAX\nSHL qword ptr [0x0061d7f8],1\nMOV R13,qword ptr [0x0061d800]\nMOV RAX,qword ptr [0x0061d808]\nLEA R14,[RAX + RAX*0x2]\nSHL R14,0x6\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0xb0 + R13 + R14*0x1],XMM0\nMOVUPS xmmword ptr [0xa0 + R13 + R14*0x1],XMM0\nMOVUPS xmmword ptr [0x90 + R13 + R14*0x1],XMM0\nMOVUPS xmmword ptr [0x80 + R13 + R14*0x1],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1 + 0x10],XMM0\nMOVUPS xmmword ptr [R13 + R14*0x1],XMM0\nMOV dword ptr [0xa0 + R13 + R14*0x1],R15D\nCMP byte ptr [0x0061d73e],0x0\nLEA RAX,[R13 + R14*0x1]\nMOV qword ptr [RBP + -0x38],RAX\nSETZ AL\nAND AL,BL\nCMP AL,0x1\nMOV qword ptr [RBP + -0x50],R12\nJNZ 0x00404251\nCMP R15D,0x3\nJNZ 0x00404181\nMOV AL,byte ptr [0x0061d630]\nTEST AL,AL\nJZ 0x00404181\nMOV EDI,0x13\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nMOV EDI,0x12\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nMOV EDI,0x14\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nCMP byte ptr [0x0061d740],0x0\nJNZ 0x004041a3\nMOV AL,byte ptr [0x0061d83a]\nMOV ECX,EAX\nXOR CL,0x1\nTEST CL,0x1\nJZ 0x004041a3\nTEST AL,0x1\nJZ 0x004041dd\nJMP 0x00404251\nCMP R15D,0x6\nJZ 0x004041ae\nTEST R15D,R15D\nJNZ 0x004041d3\nCMP dword ptr [0x0061d6c0],0x5\nJZ 0x00404251\nMOV AL,byte ptr [0x0061d631]\nTEST AL,AL\nJNZ 0x00404251\nMOV AL,byte ptr [0x0061d638]\nTEST AL,AL\nJNZ 0x00404251\nMOV AL,byte ptr [0x0061d83a]\nTEST AL,AL\nJNZ 0x00404251\nCMP byte ptr [0x0061d740],0x0\nJZ 0x004047d4\nTEST R15D,R15D\nJZ 0x00404251\nCMP byte ptr [RBP + -0x2c],0x0\nJNZ 0x00404251\nCMP R15D,0x5\nJNZ 0x004047e6\nCMP dword ptr [0x0061d6c8],0x3\nJZ 0x00404251\nCMP byte ptr [0x0061d630],0x0\nJZ 0x004047d4\nMOV EDI,0xe\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nMOV EDI,0x10\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nMOV EDI,0x11\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00404251\nMOV EDI,0x15\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x004047d4\nMOV dword ptr [RBP + -0x3c],R15D\nCMP byte ptr [R12],0x2f\nMOV R15,R12\nJZ 0x004042a2\nMOV RAX,qword ptr [RBP + -0x48]\nCMP byte ptr [RAX],0x0\nMOV R15,R12\nJZ 0x004042a2\nMOV RDI,R12\nCALL 0x00402290\nMOV RBX,RAX\nMOV R15,qword ptr [RBP + -0x48]\nMOV RDI,R15\nCALL 0x00402290\nLEA RAX,[RBX + RAX*0x1 + 0x11]\nAND RAX,-0x10\nMOV RDI,RSP\nSUB RDI,RAX\nMOV RSP,RDI\nMOV RSI,R15\nMOV R15,RDI\nMOV RDX,R12\nCALL 0x00406160\nLEA RBX,[R13 + R14*0x1 + 0x10]\nMOV EAX,dword ptr [0x0061d6c0]\nLEA ECX,[RAX + -0x3]\nCMP ECX,0x2\nJNC 0x004042ea\nCMP byte ptr [RBP + -0x2c],0x0\nJZ 0x0040430d\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00411970\nMOV R12B,0x1\nCMP dword ptr [0x0061d6c0],0x3\nJZ 0x0040431b\nTEST EAX,EAX\nJS 0x00404303\nMOV ECX,0xf000\nAND ECX,dword ptr [R13 + R14*0x1 + 0x28]\nCMP ECX,0x4000\nJNZ 0x0040430d\nJMP 0x0040431b\nCMP EAX,0x5\nJNZ 0x0040430d\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00411970\nMOV R12B,0x1\nTEST EAX,EAX\nJNZ 0x0040431f\nJMP 0x00404351\nCALL 0x00402110\nCMP dword ptr [RAX],0x2\nJNZ 0x0040431f\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00411990\nXOR R12D,R12D\nTEST EAX,EAX\nJZ 0x00404351\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x4169ee\nMOV EDX,0x5\nCALL 0x00402270\nMOV EBX,dword ptr [RBP + -0x2c]\nMOVZX EDI,BL\nMOV RSI,RAX\nMOV RDX,R15\nCALL 0x00405bc0\nTEST BL,BL\nJZ 0x004047f6\nJMP 0x0040480d\nMOV byte ptr [0xb0 + R13 + R14*0x1],0x1\nCMP dword ptr [RBP + -0x3c],0x5\nJNZ 0x0040436b\nCMP byte ptr [0x0061d630],0x0\nJNZ 0x00404386\nJMP 0x004043a6\nMOV EAX,0xf000\nAND EAX,dword ptr [R13 + R14*0x1 + 0x28]\nCMP EAX,0x8000\nJNZ 0x004043a6\nMOV AL,byte ptr [0x0061d630]\nTEST AL,AL\nJZ 0x004043a6\nMOV EDI,0x15\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x004043a6\nMOV RDI,qword ptr [RBP + -0x38]\nCALL 0x004061d0\nMOV byte ptr [0xb8 + R13 + R14*0x1],0x0\nCMP dword ptr [0x0061d634],0x0\nJZ 0x004043bc\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00404494\nMOVZX EDX,R12B\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x00406210\nLEA RCX,[0xa8 + R13 + R14*0x1]\nTEST EAX,EAX\nJS 0x004043ef\nMOV RSI,qword ptr [RCX]\nMOV EDI,0x4169ff\nCALL 0x004023f0\nTEST EAX,EAX\nSETNZ R12B\nXOR ECX,ECX\nJMP 0x00404414\nMOV qword ptr [RCX],0x61d520\nCALL 0x00402110\nMOV EBX,dword ptr [RAX]\nMOV EDI,EBX\nCALL 0x00406280\nNOT AL\nCMP EBX,0x3d\nSETNZ CL\nAND CL,AL\nMOVZX ECX,CL\nXOR R12D,R12D\nXOR EBX,EBX\nMOV EAX,dword ptr [0x0061d634]\nOR EAX,ECX\nMOV EAX,0x0\nJNZ 0x0040443b\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x00406290\nMOV ECX,EAX\nSHR ECX,0x1f\nTEST EAX,EAX\nSETG AL\nMOVZX EAX,AL\nLEA EDX,[RAX + 0x1]\nTEST R12B,R12B\nMOV ESI,0x2\nCMOVNZ ESI,EDX\nCMOVNZ EBX,ESI\nTEST AL,AL\nCMOVNZ EBX,ESI\nMOV dword ptr [0xb4 + R13 + R14*0x1],EBX\nTEST EBX,EBX\nSETNZ AL\nOR byte ptr [0x0061e050],AL\nTEST ECX,ECX\nJZ 0x00404494\nCALL 0x00402110\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x0040d2f0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x416d7f\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x004025f0\nLEA RBX,[R13 + R14*0x1 + 0x28]\nMOV EAX,0xf000\nAND EAX,dword ptr [R13 + R14*0x1 + 0x28]\nCMP EAX,0xa000\nJNZ 0x00404552\nCMP dword ptr [0x0061d634],0x0\nJZ 0x004044c4\nCMP byte ptr [0x0061d638],0x1\nJNZ 0x00404552\nMOV R12,RBX\nMOVZX EDX,byte ptr [RBP + -0x2c]\nMOV RDI,R15\nMOV RSI,qword ptr [RBP + -0x38]\nCALL 0x00406310\nMOV RSI,qword ptr [R13 + R14*0x1 + 0x8]\nMOV RDI,R15\nCALL 0x00406360\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404547\nCMP dword ptr [0x0061d6c8],0x1\nJA 0x004044fe\nCMP byte ptr [0x0061d638],0x1\nJNZ 0x00404547\nLEA RSI,[-0x300 + RBP]\nMOV RDI,RBX\nCALL 0x00411970\nTEST EAX,EAX\nJNZ 0x00404547\nMOV byte ptr [0xb1 + R13 + R14*0x1],0x1\nMOV EAX,dword ptr [-0x2e8 + RBP]\nCMP dword ptr [0x0061d634],0x0\nJZ 0x0040453f\nCMP byte ptr [RBP + -0x2c],0x0\nJZ 0x0040453f\nMOV ECX,EAX\nAND ECX,0xf000\nCMP ECX,0x4000\nJZ 0x00404547\nMOV dword ptr [0xa4 + R13 + R14*0x1],EAX\nMOV RDI,RBX\nCALL 0x004020d0\nMOV RBX,R12\nLEA RAX,[0xa0 + R13 + R14*0x1]\nMOVZX ECX,word ptr [RBX]\nAND ECX,0xf000\nCMP ECX,0xa000\nJZ 0x00404591\nMOVZX ECX,CX\nCMP ECX,0x4000\nJNZ 0x00404598\nCMP byte ptr [RBP + -0x2c],0x0\nJZ 0x0040458a\nMOV ECX,0x9\nCMP byte ptr [0x0061d6c4],0x1\nJNZ 0x0040459d\nMOV ECX,0x3\nJMP 0x0040459d\nMOV ECX,0x6\nJMP 0x0040459d\nMOV ECX,0x5\nMOV dword ptr [RAX],ECX\nMOV R12,qword ptr [R13 + R14*0x1 + 0x50]\nCMP dword ptr [0x0061d634],0x0\nJZ 0x004045b6\nCMP byte ptr [0x0061d73d],0x1\nJNZ 0x004045ef\nMOV EDX,dword ptr [0x0061d864]\nMOV R8,qword ptr [0x0061d870]\nLEA RSI,[-0x300 + RBP]\nMOV ECX,0x200\nMOV RDI,R12\nCALL 0x0040a810\nXOR ESI,ESI\nMOV RDI,RAX\nCALL 0x0040b980\nCMP dword ptr [0x0061e058],EAX\nJGE 0x004045ef\nMOV dword ptr [0x0061e058],EAX\nCMP dword ptr [0x0061d634],0x0\nJNZ 0x0040465d\nMOV AL,byte ptr [0x0061d860]\nTEST AL,AL\nJNZ 0x0040461a\nMOV EDI,dword ptr [R13 + R14*0x1 + 0x2c]\nCALL 0x004063f0\nCMP dword ptr [0x0061e060],EAX\nJGE 0x0040461a\nMOV dword ptr [0x0061e060],EAX\nMOV AL,byte ptr [0x0061d878]\nTEST AL,AL\nJNZ 0x0040463c\nMOV EDI,dword ptr [R13 + R14*0x1 + 0x30]\nCALL 0x00406410\nCMP dword ptr [0x0061e064],EAX\nJGE 0x0040463c\nMOV dword ptr [0x0061e064],EAX\nCMP byte ptr [0x0061d879],0x1\nJNZ 0x0040465d\nMOV EDI,dword ptr [R13 + R14*0x1 + 0x2c]\nCALL 0x004063f0\nCMP dword ptr [0x0061e068],EAX\nJGE 0x0040465d\nMOV dword ptr [0x0061e068],EAX\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00404681\nMOV RDI,qword ptr [0xa8 + R13 + R14*0x1]\nCALL 0x00402290\nCMP dword ptr [0x0061e06c],EAX\nJGE 0x00404681\nMOV dword ptr [0x0061e06c],EAX\nCMP dword ptr [0x0061d634],0x0\nJZ 0x004046ca\nCMP byte ptr [0x0061d83a],0x1\nJNZ 0x004047f6\nLEA RAX,[R13 + R14*0x1 + 0x18]\nMOV RDI,qword ptr [RAX]\nLEA RSI,[-0x300 + RBP]\nCALL 0x0040b4a0\nMOV RDI,RAX\nCALL 0x00402290\nCMP dword ptr [0x0061e054],EAX\nJGE 0x004047f6\nMOV dword ptr [0x0061e054],EAX\nJMP 0x004047f6\nMOV RDI,qword ptr [R13 + R14*0x1 + 0x20]\nLEA RSI,[RBP + -0x70]\nCALL 0x0040b4a0\nMOV RDI,RAX\nCALL 0x00402290\nCMP dword ptr [0x0061e05c],EAX\nJGE 0x004046ee\nMOV dword ptr [0x0061e05c],EAX\nMOVZX EAX,word ptr [RBX]\nOR EAX,0x4000\nAND EAX,0xf000\nCMP EAX,0x6000\nJNZ 0x0040477e\nLEA RBX,[R13 + R14*0x1 + 0x38]\nMOV RDI,qword ptr [R13 + R14*0x1 + 0x38]\nCALL 0x00402560\nMOV EDI,EAX\nLEA RSI,[-0x300 + RBP]\nCALL 0x0040b4a0\nMOV RDI,RAX\nCALL 0x00402290\nCMP dword ptr [0x0061e070],EAX\nJGE 0x00404735\nMOV dword ptr [0x0061e070],EAX\nMOV RDI,qword ptr [RBX]\nCALL 0x00402640\nMOV EDI,EAX\nLEA RSI,[-0x300 + RBP]\nCALL 0x0040b4a0\nMOV RDI,RAX\nCALL 0x00402290\nCMP dword ptr [0x0061e074],EAX\nJGE 0x00404761\nMOV dword ptr [0x0061e074],EAX\nMOV EAX,dword ptr [0x0061e070]\nMOV ECX,dword ptr [0x0061e074]\nLEA EAX,[RAX + RCX*0x1 + 0x2]\nCMP dword ptr [0x0061e078],EAX\nJL 0x004047bf\nJMP 0x0040468a\nMOV RDI,qword ptr [R13 + R14*0x1 + 0x40]\nCALL 0x00406430\nMOV EDX,dword ptr [0x0061d868]\nMOV R8,qword ptr [0x0061d500]\nLEA RSI,[-0x300 + RBP]\nMOV ECX,0x1\nMOV RDI,RAX\nCALL 0x0040a810\nXOR ESI,ESI\nMOV RDI,RAX\nCALL 0x0040b980\nCMP dword ptr [0x0061e078],EAX\nJGE 0x0040468a\nMOV dword ptr [0x0061e078],EAX\nCMP byte ptr [0x0061d83a],0x1\nJZ 0x00404697\nJMP 0x004047f6\nXOR R12D,R12D\nCMP byte ptr [0x0061d83a],0x1\nJZ 0x00404697\nJMP 0x004047f6\nXOR R12D,R12D\nCMP byte ptr [0x0061d83a],0x1\nJZ 0x00404697\nMOV RDI,qword ptr [RBP + -0x50]\nCALL 0x0040fa80\nMOV RCX,qword ptr [RBP + -0x38]\nMOV qword ptr [RCX],RAX\nINC qword ptr [0x0061d808]\nMOV RAX,R12\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1173
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 02 00 00\n48 89 4d b8\n41 89 f7\n49 89 fc\n89 55 d4\n89 d3\n80 f3 01\n48 8b 35 7b 97 21 00\n48 39 35 84 97 21 00\n75 1f\n48 8b 3d 73 97 21 00\nba 80 01 00 00\ne8 99 b8 00 00\n48 89 05 62 97 21 00\n48 d1 25 53 97 21 00\n4c 8b 2d 54 97 21 00\n48 8b 05 55 97 21 00\n4c 8d 34 40\n49 c1 e6 06\n0f 57 c0\n43 0f 11 84 35 b0 00 00 00\n43 0f 11 84 35 a0 00 00 00\n43 0f 11 84 35 90 00 00 00\n43 0f 11 84 35 80 00 00 00\n43 0f 11 44 35 70\n43 0f 11 44 35 60\n43 0f 11 44 35 50\n43 0f 11 44 35 40\n43 0f 11 44 35 30\n43 0f 11 44 35 20\n43 0f 11 44 35 10\n43 0f 11 44 35 00\n47 89 bc 35 a0 00 00 00\n80 3d 1d 96 21 00 00\n4b 8d 44 35 00\n48 89 45 c8\n0f 94 c0\n20 d8\n3c 01\n4c 89 65 b0\n0f 85 16 01 00 00\n41 83 ff 03\n75 40\n8a 05 e9 94 21 00\n84 c0\n74 36\nbf 13 00 00 00\ne8 9b fd ff ff\n84 c0\n0f 85 f4 00 00 00\nbf 12 00 00 00\ne8 89 fd ff ff\n84 c0\n0f 85 e2 00 00 00\nbf 14 00 00 00\ne8 77 fd ff ff\n84 c0\n0f 85 d0 00 00 00\n80 3d b8 95 21 00 00\n75 19\n8a 05 aa 96 21 00\n89 c1\n80 f1 01\nf6 c1 01\n74 09\na8 01\n74 3f\ne9 ae 00 00 00\n41 83 ff 06\n74 05\n45 85 ff\n75 25\n83 3d 0b 95 21 00 05\n0f 84 96 00 00 00\n8a 05 70 94 21 00\n84 c0\n0f 85 88 00 00 00\n8a 05 69 94 21 00\n84 c0\n75 7e\n8a 05 61 96 21 00\n84 c0\n75 74\n80 3d 5c 95 21 00 00\n0f 84 ea 05 00 00\n45 85 ff\n74 62\n80 7d d4 00\n75 5c\n41 83 ff 05\n0f 85 e7 05 00 00\n83 3d c2 94 21 00 03\n74 49\n80 3d 21 94 21 00 00\n0f 84 bf 05 00 00\nbf 0e 00 00 00\ne8 d1 fc ff ff\n84 c0\n75 2e\nbf 10 00 00 00\ne8 c3 fc ff ff\n84 c0\n75 20\nbf 11 00 00 00\ne8 b5 fc ff ff\n84 c0\n75 12\nbf 15 00 00 00\ne8 a7 fc ff ff\n84 c0\n0f 84 83 05 00 00\n44 89 7d c4\n41 80 3c 24 2f\n4d 89 e7\n74 43\n48 8b 45 b8\n80 38 00\n4d 89 e7\n74 37\n4c 89 e7\ne8 1d e0 ff ff\n48 89 c3\n4c 8b 7d b8\n4c 89 ff\ne8 0e e0 ff ff\n48 8d 44 03 11\n48 83 e0 f0\n48 89 e7\n48 29 c7\n48 89 fc\n4c 89 fe\n49 89 ff\n4c 89 e2\ne8 be 1e 00 00\n4b 8d 5c 35 10\n8b 05 13 94 21 00\n8d 48 fd\n83 f9 02\n73 35\n80 7d d4 00\n74 52\n4c 89 ff\n48 89 de\ne8 aa d6 00 00\n41 b4 01\n83 3d f0 93 21 00 03\n74 49\n85 c0\n78 2d\nb9 00 f0 00 00\n43 23 4c 35 28\n81 f9 00 40 00 00\n75 25\neb 31\n83 f8 05\n75 1e\n4c 89 ff\n48 89 de\ne8 76 d6 00 00\n41 b4 01\n85 c0\n75 1e\neb 4e\ne8 08 de ff ff\n83 38 02\n75 12\n4c 89 ff\n48 89 de\ne8 78 d6 00 00\n45 31 e4\n85 c0\n74 32\n45 31 e4\n31 ff\nbe ee 69 41 00\nba 05 00 00 00\ne8 3d df ff ff\n8b 5d d4\n0f b6 fb\n48 89 c6\n4c 89 fa\ne8 7c 18 00 00\n84 db\n0f 84 aa 04 00 00\ne9 bc 04 00 00\n43 c6 84 35 b0 00 00 00 01\n83 7d c4 05\n75 0b\n80 3d c9 92 21 00 00\n75 1d\neb 3b\nb8 00 f0 00 00\n43 23 44 35 28\n3d 00 80 00 00\n75 2a\n8a 05 ae 92 21 00\n84 c0\n74 20\nbf 15 00 00 00\ne8 60 fb ff ff\n84 c0\n74 12\n48 8b 7d c8\ne8 33 1e 00 00\n43 c6 84 35 b8 00 00 00 00\n83 3d 87 92 21 00 00\n74 0d\n80 3d 86 93 21 00 01\n0f 85 d8 00 00 00\n41 0f b6 d4\n4c 89 ff\n48 8b 75 c8\ne8 44 1e 00 00\n4b 8d 8c 35 a8 00 00 00\n85 c0\n78 17\n48 8b 31\nbf ff 69 41 00\ne8 0b e0 ff ff\n85 c0\n41 0f 95 c4\n31 c9\neb 25\n48 c7 01 20 d5 61 00\ne8 15 dd ff ff\n8b 18\n89 df\ne8 7c 1e 00 00\nf6 d0\n83 fb 3d\n0f 95 c1\n20 c1\n0f b6 c9\n45 31 e4\n31 db\n8b 05 18 92 21 00\n09 c8\nb8 00 00 00 00\n75 16\n4c 89 ff\n48 8b 75 c8\ne8 5f 1e 00 00\n89 c1\nc1 e9 1f\n85 c0\n0f 9f c0\n0f b6 c0\n8d 50 01\n45 84 e4\nbe 02 00 00 00\n0f 45 f2\n0f 45 de\n84 c0\n0f 45 de\n43 89 9c 35 b4 00 00 00\n85 db\n0f 95 c0\n08 05 e9 9b 21 00\n85 c9\n74 29\ne8 a0 dc ff ff\n8b 18\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 6f 8e 00 00\n48 89 c1\n31 ff\nba 7f 6d 41 00\n31 c0\n89 de\ne8 5c e1 ff ff\n4b 8d 5c 35 28\nb8 00 f0 00 00\n43 23 44 35 28\n3d 00 a0 00 00\n0f 85 a4 00 00 00\n83 3d 7f 91 21 00 00\n74 0d\n80 3d 7a 91 21 00 01\n0f 85 8e 00 00 00\n49 89 dc\n0f b6 55 d4\n4c 89 ff\n48 8b 75 c8\ne8 39 1e 00 00\n4b 8b 74 35 08\n4c 89 ff\ne8 7c 1e 00 00\n48 89 c3\n48 85 db\n74 5b\n83 3d d5 91 21 00 01\n77 09\n80 3d 3c 91 21 00 01\n75 49\n48 8d b5 00 fd ff ff\n48 89 df\ne8 63 d4 00 00\n85 c0\n75 36\n43 c6 84 35 b1 00 00 00 01\n8b 85 18 fd ff ff\n83 3d 0d 91 21 00 00\n74 16\n80 7d d4 00\n74 10\n89 c1\n81 e1 00 f0 00 00\n81 f9 00 40 00 00\n74 08\n43 89 84 35 a4 00 00 00\n48 89 df\ne8 81 db ff ff\n4c 89 e3\n4b 8d 84 35 a0 00 00 00\n0f b7 0b\n81 e1 00 f0 00 00\n81 f9 00 a0 00 00\n74 26\n0f b7 c9\n81 f9 00 40 00 00\n75 22\n80 7d d4 00\n74 0e\nb9 09 00 00 00\n80 3d 3c 91 21 00 01\n75 13\nb9 03 00 00 00\neb 0c\nb9 06 00 00 00\neb 05\nb9 05 00 00 00\n89 08\n4f 8b 64 35 50\n83 3d 89 90 21 00 00\n74 09\n80 3d 89 91 21 00 01\n75 39\n8b 15 a8 92 21 00\n4c 8b 05 ad 92 21 00\n48 8d b5 00 fd ff ff\nb9 00 02 00 00\n4c 89 e7\ne8 39 62 00 00\n31 f6\n48 89 c7\ne8 9f 73 00 00\n39 05 71 9a 21 00\n7d 06\n89 05 69 9a 21 00\n83 3d 3e 90 21 00 00\n75 65\n8a 05 62 92 21 00\n84 c0\n75 18\n43 8b 7c 35 2c\ne8 e4 1d 00 00\n39 05 4e 9a 21 00\n7d 06\n89 05 46 9a 21 00\n8a 05 58 92 21 00\n84 c0\n75 18\n43 8b 7c 35 30\ne8 e2 1d 00 00\n39 05 30 9a 21 00\n7d 06\n89 05 28 9a 21 00\n80 3d 36 92 21 00 01\n75 18\n43 8b 7c 35 2c\ne8 a1 1d 00 00\n39 05 13 9a 21 00\n7d 06\n89 05 0b 9a 21 00\n80 3d d8 90 21 00 01\n75 1b\n4b 8b bc 35 a8 00 00 00\ne8 1d dc ff ff\n39 05 f3 99 21 00\n7d 06\n89 05 eb 99 21 00\n83 3d ac 8f 21 00 00\n74 40\n80 3d a9 91 21 00 01\n0f 85 5f 01 00 00\n4b 8d 44 35 18\n48 8b 38\n48 8d b5 00 fd ff ff\ne8 f5 6d 00 00\n48 89 c7\ne8 dd db ff ff\n39 05 9b 99 21 00\n0f 8d 37 01 00 00\n89 05 8f 99 21 00\ne9 2c 01 00 00\n4b 8b 7c 35 20\n48 8d 75 90\ne8 c8 6d 00 00\n48 89 c7\ne8 b0 db ff ff\n39 05 76 99 21 00\n7d 06\n89 05 6e 99 21 00\n0f b7 03\n0d 00 40 00 00\n25 00 f0 00 00\n3d 00 60 00 00\n75 7c\n4b 8d 5c 35 38\n4b 8b 7c 35 38\ne8 4f de ff ff\n89 c7\n48 8d b5 00 fd ff ff\ne8 81 6d 00 00\n48 89 c7\ne8 69 db ff ff\n39 05 43 99 21 00\n7d 06\n89 05 3b 99 21 00\n48 8b 3b\ne8 03 df ff ff\n89 c7\n48 8d b5 00 fd ff ff\ne8 55 6d 00 00\n48 89 c7\ne8 3d db ff ff\n39 05 1b 99 21 00\n7d 06\n89 05 13 99 21 00\n8b 05 09 99 21 00\n8b 0d 07 99 21 00\n8d 44 08 02\n39 05 01 99 21 00\n7c 46\ne9 0c ff ff ff\n4b 8b 7c 35 40\ne8 a8 1c 00 00\n8b 15 da 90 21 00\n4c 8b 05 6b 8d 21 00\n48 8d b5 00 fd ff ff\nb9 01 00 00 00\n48 89 c7\ne8 67 60 00 00\n31 f6\n48 89 c7\ne8 cd 71 00 00\n39 05 bf 98 21 00\n0f 8d cb fe ff ff\n89 05 b3 98 21 00\n80 3d 6e 90 21 00 01\n0f 84 c5 fe ff ff\neb 22\n45 31 e4\n80 3d 5c 90 21 00 01\n0f 84 b3 fe ff ff\neb 10\n45 31 e4\n80 3d 4a 90 21 00 01\n0f 84 a1 fe ff ff\n48 8b 7d b0\ne8 81 b2 00 00\n48 8b 4d c8\n48 89 01\n48 ff 05 fb 8f 21 00\n4c 89 e0\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1174
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404054\n.text:0000000000404056\n.text:0000000000404058\n.text:000000000040405a\n.text:000000000040405c\n.text:000000000040405d\n.text:0000000000404064\n.text:0000000000404068\n.text:000000000040406b\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404073\n.text:0000000000404076\n.text:000000000040407d\n.text:0000000000404084\n.text:0000000000404086\n.text:000000000040408d\n.text:0000000000404092\n.text:0000000000404097\n.text:000000000040409e\n.text:00000000004040a5\n.text:00000000004040ac\n.text:00000000004040b3\n.text:00000000004040b7\n.text:00000000004040bb\n.text:00000000004040be\n.text:00000000004040c7\n.text:00000000004040d0\n.text:00000000004040d9\n.text:00000000004040e2\n.text:00000000004040e8\n.text:00000000004040ee\n.text:00000000004040f4\n.text:00000000004040fa\n.text:0000000000404100\n.text:0000000000404106\n.text:000000000040410c\n.text:0000000000404112\n.text:000000000040411a\n.text:0000000000404121\n.text:0000000000404126\n.text:000000000040412a\n.text:000000000040412d\n.text:000000000040412f\n.text:0000000000404131\n.text:0000000000404135\n.text:000000000040413b\n.text:000000000040413f\n.text:0000000000404141\n.text:0000000000404147\n.text:0000000000404149\n.text:000000000040414b\n.text:0000000000404150\n.text:0000000000404155\n.text:0000000000404157\n.text:000000000040415d\n.text:0000000000404162\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416f\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417b\n.text:0000000000404181\n.text:0000000000404188\n.text:000000000040418a\n.text:0000000000404190\n.text:0000000000404192\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419a\n.text:000000000040419c\n.text:000000000040419e\n.text:00000000004041a3\n.text:00000000004041a7\n.text:00000000004041a9\n.text:00000000004041ac\n.text:00000000004041ae\n.text:00000000004041b5\n.text:00000000004041bb\n.text:00000000004041c1\n.text:00000000004041c3\n.text:00000000004041c9\n.text:00000000004041cf\n.text:00000000004041d1\n.text:00000000004041d3\n.text:00000000004041d9\n.text:00000000004041db\n.text:00000000004041dd\n.text:00000000004041e4\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041ef\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041f9\n.text:00000000004041ff\n.text:0000000000404206\n.text:0000000000404208\n.text:000000000040420f\n.text:0000000000404215\n.text:000000000040421a\n.text:000000000040421f\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404228\n.text:000000000040422d\n.text:000000000040422f\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423b\n.text:000000000040423d\n.text:000000000040423f\n.text:0000000000404244\n.text:0000000000404249\n.text:000000000040424b\n.text:0000000000404251\n.text:0000000000404255\n.text:000000000040425a\n.text:000000000040425d\n.text:000000000040425f\n.text:0000000000404263\n.text:0000000000404266\n.text:0000000000404269\n.text:000000000040426b\n.text:000000000040426e\n.text:0000000000404273\n.text:0000000000404276\n.text:000000000040427a\n.text:000000000040427d\n.text:0000000000404282\n.text:0000000000404287\n.text:000000000040428b\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404294\n.text:0000000000404297\n.text:000000000040429a\n.text:000000000040429d\n.text:00000000004042a2\n.text:00000000004042a7\n.text:00000000004042ad\n.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b5\n.text:00000000004042b9\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c1\n.text:00000000004042c6\n.text:00000000004042c9\n.text:00000000004042d0\n.text:00000000004042d2\n.text:00000000004042d4\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042e0\n.text:00000000004042e6\n.text:00000000004042e8\n.text:00000000004042ea\n.text:00000000004042ed\n.text:00000000004042ef\n.text:00000000004042f2\n.text:00000000004042f5\n.text:00000000004042fa\n.text:00000000004042fd\n.text:00000000004042ff\n.text:0000000000404301\n.text:0000000000404303\n.text:0000000000404308\n.text:000000000040430b\n.text:000000000040430d\n.text:0000000000404310\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431b\n.text:000000000040431d\n.text:000000000040431f\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404329\n.text:000000000040432e\n.text:0000000000404333\n.text:0000000000404336\n.text:0000000000404339\n.text:000000000040433c\n.text:000000000040433f\n.text:0000000000404344\n.text:0000000000404346\n.text:000000000040434c\n.text:0000000000404351\n.text:000000000040435a\n.text:000000000040435e\n.text:0000000000404360\n.text:0000000000404367\n.text:0000000000404369\n.text:000000000040436b\n.text:0000000000404370\n.text:0000000000404375\n.text:000000000040437a\n.text:000000000040437c\n.text:0000000000404382\n.text:0000000000404384\n.text:0000000000404386\n.text:000000000040438b\n.text:0000000000404390\n.text:0000000000404392\n.text:0000000000404394\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a6\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b6\n.text:00000000004043bc\n.text:00000000004043c0\n.text:00000000004043c3\n.text:00000000004043c7\n.text:00000000004043cc\n.text:00000000004043d4\n.text:00000000004043d6\n.text:00000000004043d8\n.text:00000000004043db\n.text:00000000004043e0\n.text:00000000004043e5\n.text:00000000004043e7\n.text:00000000004043eb\n.text:00000000004043ed\n.text:00000000004043ef\n.text:00000000004043f6\n.text:00000000004043fb\n.text:00000000004043fd\n.text:00000000004043ff\n.text:0000000000404404\n.text:0000000000404406\n.text:0000000000404409\n.text:000000000040440c\n.text:000000000040440e\n.text:0000000000404411\n.text:0000000000404414\n.text:0000000000404416\n.text:000000000040441c\n.text:000000000040441e\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404428\n.text:000000000040442c\n.text:0000000000404431\n.text:0000000000404433\n.text:0000000000404436\n.text:0000000000404438\n.text:000000000040443b\n.text:000000000040443e\n.text:0000000000404441\n.text:0000000000404444\n.text:0000000000404449\n.text:000000000040444c\n.text:000000000040444f\n.text:0000000000404451\n.text:0000000000404454\n.text:000000000040445c\n.text:000000000040445e\n.text:0000000000404461\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446b\n.text:0000000000404470\n.text:0000000000404472\n.text:0000000000404474\n.text:0000000000404479\n.text:000000000040447c\n.text:0000000000404481\n.text:0000000000404484\n.text:0000000000404486\n.text:000000000040448b\n.text:000000000040448d\n.text:000000000040448f\n.text:0000000000404494\n.text:0000000000404499\n.text:000000000040449e\n.text:00000000004044a3\n.text:00000000004044a8\n.text:00000000004044ae\n.text:00000000004044b5\n.text:00000000004044b7\n.text:00000000004044be\n.text:00000000004044c4\n.text:00000000004044c7\n.text:00000000004044cb\n.text:00000000004044ce\n.text:00000000004044d2\n.text:00000000004044d7\n.text:00000000004044dc\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044ea\n.text:00000000004044ec\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044fc\n.text:00000000004044fe\n.text:0000000000404505\n.text:0000000000404508\n.text:000000000040450d\n.text:000000000040450f\n.text:0000000000404511\n.text:000000000040451a\n.text:0000000000404520\n.text:0000000000404527\n.text:0000000000404529\n.text:000000000040452d\n.text:000000000040452f\n.text:0000000000404531\n.text:0000000000404537\n.text:000000000040453d\n.text:000000000040453f\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454f\n.text:0000000000404552\n.text:000000000040455a\n.text:000000000040455d\n.text:0000000000404563\n.text:0000000000404569\n.text:000000000040456b\n.text:000000000040456e\n.text:0000000000404574\n.text:0000000000404576\n.text:000000000040457a\n.text:000000000040457c\n.text:0000000000404581\n.text:0000000000404588\n.text:000000000040458a\n.text:000000000040458f\n.text:0000000000404591\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a4\n.text:00000000004045ab\n.text:00000000004045ad\n.text:00000000004045b4\n.text:00000000004045b6\n.text:00000000004045bc\n.text:00000000004045c3\n.text:00000000004045ca\n.text:00000000004045cf\n.text:00000000004045d2\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045dc\n.text:00000000004045e1\n.text:00000000004045e7\n.text:00000000004045e9\n.text:00000000004045ef\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045fe\n.text:0000000000404600\n.text:0000000000404602\n.text:0000000000404607\n.text:000000000040460c\n.text:0000000000404612\n.text:0000000000404614\n.text:000000000040461a\n.text:0000000000404620\n.text:0000000000404622\n.text:0000000000404624\n.text:0000000000404629\n.text:000000000040462e\n.text:0000000000404634\n.text:0000000000404636\n.text:000000000040463c\n.text:0000000000404643\n.text:0000000000404645\n.text:000000000040464a\n.text:000000000040464f\n.text:0000000000404655\n.text:0000000000404657\n.text:000000000040465d\n.text:0000000000404664\n.text:0000000000404666\n.text:000000000040466e\n.text:0000000000404673\n.text:0000000000404679\n.text:000000000040467b\n.text:0000000000404681\n.text:0000000000404688\n.text:000000000040468a\n.text:0000000000404691\n.text:0000000000404697\n.text:000000000040469c\n.text:000000000040469f\n.text:00000000004046a6\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b3\n.text:00000000004046b9\n.text:00000000004046bf\n.text:00000000004046c5\n.text:00000000004046ca\n.text:00000000004046cf\n.text:00000000004046d3\n.text:00000000004046d8\n.text:00000000004046db\n.text:00000000004046e0\n.text:00000000004046e6\n.text:00000000004046e8\n.text:00000000004046ee\n.text:00000000004046f1\n.text:00000000004046f6\n.text:00000000004046fb\n.text:0000000000404700\n.text:0000000000404702\n.text:0000000000404707\n.text:000000000040470c\n.text:0000000000404711\n.text:0000000000404713\n.text:000000000040471a\n.text:000000000040471f\n.text:0000000000404722\n.text:0000000000404727\n.text:000000000040472d\n.text:000000000040472f\n.text:0000000000404735\n.text:0000000000404738\n.text:000000000040473d\n.text:000000000040473f\n.text:0000000000404746\n.text:000000000040474b\n.text:000000000040474e\n.text:0000000000404753\n.text:0000000000404759\n.text:000000000040475b\n.text:0000000000404761\n.text:0000000000404767\n.text:000000000040476d\n.text:0000000000404771\n.text:0000000000404777\n.text:0000000000404779\n.text:000000000040477e\n.text:0000000000404783\n.text:0000000000404788\n.text:000000000040478e\n.text:0000000000404795\n.text:000000000040479c\n.text:00000000004047a1\n.text:00000000004047a4\n.text:00000000004047a9\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b3\n.text:00000000004047b9\n.text:00000000004047bf\n.text:00000000004047c5\n.text:00000000004047cc\n.text:00000000004047d2\n.text:00000000004047d4\n.text:00000000004047d7\n.text:00000000004047de\n.text:00000000004047e4\n.text:00000000004047e6\n.text:00000000004047e9\n.text:00000000004047f0\n.text:00000000004047f6\n.text:00000000004047fa\n.text:00000000004047ff\n.text:0000000000404803\n.text:0000000000404806\n.text:000000000040480d\n.text:0000000000404810\n.text:0000000000404814\n.text:0000000000404815\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481b\n.text:000000000040481d\n.text:000000000040481e\n'
p1175
tp1176
sS'quotearg_n_custom'
p1177
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1178
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1179
S'MOV R8,-0x1\nJMP 0x0040d350\n'
p1180
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1181
S'.text:000000000040d340\n.text:000000000040d347\n'
p1182
tp1183
sS'set_tz'
p1184
(S'\n__stdcall set_tz(timezone_t tz)\n'
p1185
V\u000atimezone_t set_tz(timezone_t tz)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *__s2;\u000a  timezone_t tz_00;\u000a  int *piVar3;\u000a  \u000a  __s2 = getenv_TZ();\u000a  if (__s2 == (char *)0x0) {\u000a    if (tz->tz_is_set == 0) {\u000a      return (timezone_t)0x1;\u000a    }\u000a  }\u000a  else {\u000a    if ((tz->tz_is_set != 0) && (iVar2 = strcmp(tz->abbrs,__s2), iVar2 == 0)) {\u000a      return (timezone_t)0x1;\u000a    }\u000a  }\u000a  tz_00 = tzalloc(__s2);\u000a  if (tz_00 != (timezone_t)0x0) {\u000a    _Var1 = change_env(tz);\u000a    if (_Var1 != false) {\u000a      return tz_00;\u000a    }\u000a    piVar3 = __errno_location();\u000a    iVar2 = *piVar3;\u000a    tzfree(tz_00);\u000a    *piVar3 = iVar2;\u000a  }\u000a  return (timezone_t)0x0;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nCALL 0x004109e0\nMOV RBX,RAX\nTEST RBX,RBX\nMOV AL,byte ptr [R14 + 0x8]\nJZ 0x0041072e\nTEST AL,AL\nJZ 0x00410732\nLEA RDI,[R14 + 0x9]\nMOV RSI,RBX\nCALL 0x004023f0\nTEST EAX,EAX\nJNZ 0x00410732\nJMP 0x00410768\nTEST AL,AL\nJZ 0x00410768\nMOV RDI,RBX\nCALL 0x004105b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410764\nMOV RDI,R14\nCALL 0x004109f0\nTEST AL,AL\nJNZ 0x0041076d\nCALL 0x00402110\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x00410640\nMOV dword ptr [R14],EBP\nXOR EBX,EBX\nJMP 0x0041076d\nMOV EBX,0x1\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n49 89 fe\ne8 d4 02 00 00\n48 89 c3\n48 85 db\n41 8a 46 08\n74 16\n84 c0\n74 16\n49 8d 7e 09\n48 89 de\ne8 c8 1c ff ff\n85 c0\n75 06\neb 3a\n84 c0\n74 36\n48 89 df\ne8 76 fe ff ff\n48 89 c3\n48 85 db\n74 22\n4c 89 f7\ne8 a6 02 00 00\n84 c0\n75 1f\ne8 bd 19 ff ff\n49 89 c6\n41 8b 2e\n48 89 df\ne8 df fe ff ff\n41 89 2e\n31 db\neb 05\nbb 01 00 00 00\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:0000000000410700\n.text:0000000000410701\n.text:0000000000410703\n.text:0000000000410704\n.text:0000000000410707\n.text:000000000041070c\n.text:000000000041070f\n.text:0000000000410712\n.text:0000000000410716\n.text:0000000000410718\n.text:000000000041071a\n.text:000000000041071c\n.text:0000000000410720\n.text:0000000000410723\n.text:0000000000410728\n.text:000000000041072a\n.text:000000000041072c\n.text:000000000041072e\n.text:0000000000410730\n.text:0000000000410732\n.text:0000000000410735\n.text:000000000041073a\n.text:000000000041073d\n.text:0000000000410740\n.text:0000000000410742\n.text:0000000000410745\n.text:000000000041074a\n.text:000000000041074c\n.text:000000000041074e\n.text:0000000000410753\n.text:0000000000410756\n.text:0000000000410759\n.text:000000000041075c\n.text:0000000000410761\n.text:0000000000410764\n.text:0000000000410766\n.text:0000000000410768\n.text:000000000041076d\n.text:0000000000410770\n.text:0000000000410771\n.text:0000000000410773\n.text:0000000000410774\n'
p1189
tp1190
sS'revert_tz'
p1191
(S'\n__stdcall revert_tz(timezone_t tz)\n'
p1192
V\u000a_Bool revert_tz(timezone_t tz)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int *piVar2;\u000a  int iVar3;\u000a  \u000a  if (tz == (timezone_t)0x1) {\u000a    _Var1 = true;\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    iVar3 = *piVar2;\u000a    _Var1 = change_env(tz);\u000a    if (_Var1 == false) {\u000a      iVar3 = *piVar2;\u000a    }\u000a    tzfree(tz);\u000a    *piVar2 = iVar3;\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP RBX,0x1\nJZ 0x004108ca\nCALL 0x00402110\nMOV R14,RAX\nMOV R15D,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x004109f0\nMOV EBP,EAX\nTEST BPL,BPL\nJNZ 0x004108bd\nMOV R15D,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x00410640\nMOV dword ptr [R14],R15D\nJMP 0x004108cd\nMOV BPL,0x1\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1194
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 83 fb 01\n74 2a\ne8 6b 18 ff ff\n49 89 c6\n45 8b 3e\n48 89 df\ne8 3d 01 00 00\n89 c5\n40 84 ed\n75 03\n45 8b 3e\n48 89 df\ne8 7b fd ff ff\n45 89 3e\neb 03\n40 b5 01\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1195
S'.text:0000000000410890\n.text:0000000000410891\n.text:0000000000410893\n.text:0000000000410895\n.text:0000000000410896\n.text:0000000000410897\n.text:000000000041089a\n.text:000000000041089e\n.text:00000000004108a0\n.text:00000000004108a5\n.text:00000000004108a8\n.text:00000000004108ab\n.text:00000000004108ae\n.text:00000000004108b3\n.text:00000000004108b5\n.text:00000000004108b8\n.text:00000000004108ba\n.text:00000000004108bd\n.text:00000000004108c0\n.text:00000000004108c5\n.text:00000000004108c8\n.text:00000000004108ca\n.text:00000000004108cd\n.text:00000000004108cf\n.text:00000000004108d3\n.text:00000000004108d4\n.text:00000000004108d6\n.text:00000000004108d8\n.text:00000000004108d9\n'
p1196
tp1197
sS'main'
p1198
(S'\n__stdcall main(char * * argv)\n'
p1199
V\u000aint main(char **argv)\u000a\u000a{\u000a  char **ppcVar1;\u000a  int __sig;\u000a  char **ppcVar2;\u000a  pending *p;\u000a  Hash_table *table;\u000a  int sig [12];\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  int __signo;\u000a  __pid_t _Var5;\u000a  int iVar6;\u000a  int iVar7;\u000a  quoting_style qVar8;\u000a  char *name;\u000a  void *__ptr;\u000a  size_t sVar9;\u000a  long lVar10;\u000a  char **in_RSI;\u000a  dev_ino dVar11;\u000a  dev_ino local_c8;\u000a  undefined4 uStack184;\u000a  undefined4 uStack180;\u000a  undefined4 local_b0;\u000a  undefined4 uStack172;\u000a  undefined4 uStack168;\u000a  undefined4 uStack164;\u000a  undefined4 local_a0;\u000a  undefined4 uStack156;\u000a  undefined4 uStack152;\u000a  undefined4 uStack148;\u000a  undefined4 local_90;\u000a  undefined4 uStack140;\u000a  undefined4 uStack136;\u000a  undefined4 uStack132;\u000a  undefined4 local_80;\u000a  undefined4 uStack124;\u000a  undefined4 uStack120;\u000a  undefined4 uStack116;\u000a  undefined4 local_70;\u000a  undefined4 uStack108;\u000a  undefined4 uStack104;\u000a  undefined4 uStack100;\u000a  undefined4 local_60;\u000a  undefined4 uStack92;\u000a  undefined4 uStack88;\u000a  undefined4 uStack84;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  undefined4 local_40;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x41651f,"/usr/local/share/locale");\u000a  textdomain(0x41651f);\u000a  initialize_exit_failure();\u000a  atexit(close_stdout);\u000a  exit_status = 0;\u000a  print_dir_name = 1;\u000a  pending_dirs = (pending *)0x0;\u000a  current_time.tv_sec = -0x8000000000000000;\u000a  current_time.tv_nsec = -1;\u000a  iVar7 = (int)(char **)((ulong)argv & 0xffffffff);\u000a  __signo = decode_switches((char **)((ulong)argv & 0xffffffff));\u000a  if ((print_with_color != false) && (parse_ls_color(), print_with_color != false)) {\u000a    _Var3 = is_colored();\u000a    if (((_Var3 != false) ||\u000a        ((_Var3 = is_colored(), _Var3 != false && (color_symlink_as_referent != 0)))) ||\u000a       ((_Var3 = is_colored(), _Var3 != false && (format == long_format)))) {\u000a      check_symlink_color = 1;\u000a    }\u000a    _Var5 = tcgetpgrp(1);\u000a    if (-1 < _Var5) {\u000a      sigemptyset((sigset_t *)&caught_signals);\u000a      lVar10 = -0x30;\u000a      do {\u000a        __sig = *(int *)((long)&long_options[0].name + lVar10);\u000a        sigaction(__sig,(sigaction *)0x0,(sigaction *)&local_c8);\u000a        if (local_c8.st_ino != (code *)0x1) {\u000a          sigaddset((sigset_t *)&caught_signals,__sig);\u000a        }\u000a        lVar10 = lVar10 + 4;\u000a      } while (lVar10 != 0);\u000a      local_50 = (undefined4)caught_signals.__val[14];\u000a      uStack76 = caught_signals.__val[14]._4_4_;\u000a      uStack72 = (undefined4)caught_signals.__val[15];\u000a      uStack68 = caught_signals.__val[15]._4_4_;\u000a      local_60 = (undefined4)caught_signals.__val[12];\u000a      uStack92 = caught_signals.__val[12]._4_4_;\u000a      uStack88 = (undefined4)caught_signals.__val[13];\u000a      uStack84 = caught_signals.__val[13]._4_4_;\u000a      local_70 = (undefined4)caught_signals.__val[10];\u000a      uStack108 = caught_signals.__val[10]._4_4_;\u000a      uStack104 = (undefined4)caught_signals.__val[11];\u000a      uStack100 = caught_signals.__val[11]._4_4_;\u000a      local_80 = (undefined4)caught_signals.__val[8];\u000a      uStack124 = caught_signals.__val[8]._4_4_;\u000a      uStack120 = (undefined4)caught_signals.__val[9];\u000a      uStack116 = caught_signals.__val[9]._4_4_;\u000a      local_90 = (undefined4)caught_signals.__val[6];\u000a      uStack140 = caught_signals.__val[6]._4_4_;\u000a      uStack136 = (undefined4)caught_signals.__val[7];\u000a      uStack132 = caught_signals.__val[7]._4_4_;\u000a      local_a0 = (undefined4)caught_signals.__val[4];\u000a      uStack156 = caught_signals.__val[4]._4_4_;\u000a      uStack152 = (undefined4)caught_signals.__val[5];\u000a      uStack148 = caught_signals.__val[5]._4_4_;\u000a      local_b0 = (undefined4)caught_signals.__val[2];\u000a      uStack172 = caught_signals.__val[2]._4_4_;\u000a      uStack168 = (undefined4)caught_signals.__val[3];\u000a      uStack164 = caught_signals.__val[3]._4_4_;\u000a      local_c8.st_dev = CONCAT44(caught_signals.__val[0]._4_4_,(undefined4)caught_signals.__val[0]);\u000a      uStack184 = (undefined4)caught_signals.__val[1];\u000a      uStack180 = caught_signals.__val[1]._4_4_;\u000a      local_40 = 0x10000000;\u000a      lVar10 = 0;\u000a      do {\u000a        __sig = *(int *)((long)(int *)&ram0x00412b40 + lVar10);\u000a        iVar6 = sigismember((sigset_t *)&caught_signals,__sig);\u000a        if (iVar6 != 0) {\u000a          local_c8.st_ino = sighandler;\u000a          if (lVar10 == 0) {\u000a            local_c8.st_ino = stophandler;\u000a          }\u000a          sigaction(__sig,(sigaction *)&local_c8,(sigaction *)0x0);\u000a        }\u000a        lVar10 = lVar10 + 4;\u000a      } while (lVar10 != 0x30);\u000a    }\u000a  }\u000a  if (dereference == DEREF_UNDEFINED) {\u000a    dereference = (uint)(format != long_format) + 2 + (uint)(format != long_format);\u000a    if (indicator_style == classify) {\u000a      dereference = DEREF_NEVER;\u000a    }\u000a    if (immediate_dirs != 0) {\u000a      dereference = DEREF_NEVER;\u000a    }\u000a  }\u000a  if (recursive == 1) {\u000a    active_dir_set =\u000a         hash_initialize(0x1e,(Hash_tuning *)0x0,dev_ino_hash,dev_ino_compare,dev_ino_free);\u000a    if (active_dir_set == (Hash_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    _obstack_begin(&dev_ino_obstack,0,0,malloc,free);\u000a  }\u000a  name = getenv("TZ");\u000a  localtz = tzalloc(name);\u000a  if (((format == long_format) || (sort_type == sort_time)) || (sort_type == sort_size)) {\u000a    format_needs_stat = true;\u000aLAB_00402b25:\u000a    bVar4 = 0;\u000a  }\u000a  else {\u000a    format_needs_stat = (_Bool)((print_block_size | print_scontext) & 1);\u000a    if (format_needs_stat != false) goto LAB_00402b25;\u000a    bVar4 = 1;\u000a    if (recursive == 0) {\u000a      bVar4 = (indicator_style != none || print_with_color != false) | directories_first;\u000a    }\u000a  }\u000a  format_needs_type = (_Bool)(bVar4 & 1);\u000a  if (dired == 1) {\u000a    _obstack_begin(&dired_obstack,0,0,malloc,free);\u000a    _obstack_begin(&subdired_obstack,0,0,malloc,free);\u000a  }\u000a  cwd_n_alloc = 100;\u000a  cwd_file = (fileinfo *)xnmalloc(100,0xc0);\u000a  cwd_n_used = 0;\u000a  clear_files();\u000a  if (__signo < iVar7) {\u000a    lVar10 = (long)__signo;\u000a    do {\u000a      lVar10 = lVar10 + 1;\u000a      gobble_file();\u000a    } while (lVar10 < (long)iVar7);\u000aLAB_00402c60:\u000a    if (cwd_n_used == 0) goto LAB_00402cb5;\u000aLAB_00402c6a:\u000a    sort_files();\u000a    if (immediate_dirs == 0) {\u000a      extract_dirs_from_files((char *)0x0);\u000a    }\u000a    if (cwd_n_used == 0) goto LAB_00402cb5;\u000a    print_current_files();\u000a    if (pending_dirs == (pending *)0x0) goto LAB_00402d48;\u000a    putchar_unlocked(10);\u000a    dired_pos = dired_pos + 1;\u000a    local_c8 = (dev_ino)CONCAT88(local_c8.st_dev,local_c8.st_ino);\u000a  }\u000a  else {\u000a    if (immediate_dirs != 1) {\u000a      queue_directory(".",(char *)0x0);\u000a      goto LAB_00402c60;\u000a    }\u000a    gobble_file();\u000a    if (cwd_n_used != 0) goto LAB_00402c6a;\u000aLAB_00402cb5:\u000a    dVar11 = (dev_ino)CONCAT88(local_c8.st_dev,local_c8.st_ino);\u000a    local_c8 = dVar11;\u000a    if (((iVar7 - __signo < 2) && (local_c8 = dVar11, pending_dirs != (pending *)0x0)) &&\u000a       (local_c8 = (dev_ino)CONCAT88(local_c8.st_dev,local_c8.st_ino),\u000a       pending_dirs->next == (pending *)0x0)) {\u000a      print_dir_name = 0;\u000a      local_c8 = dVar11;\u000a    }\u000a  }\u000a  while (p = pending_dirs, pending_dirs != (pending *)0x0) {\u000a    ppcVar2 = &pending_dirs->name;\u000a    if ((active_dir_set == (Hash_table *)0x0) || (*ppcVar2 != (char *)0x0)) {\u000a      ppcVar1 = &pending_dirs->realname;\u000a      pending_dirs = pending_dirs->next;\u000a      print_dir(*ppcVar2,*ppcVar1);\u000a      free_pending_ent(p);\u000a      print_dir_name = 1;\u000a    }\u000a    else {\u000a      pending_dirs = pending_dirs->next;\u000a      dVar11 = dev_ino_pop();\u000a      local_c8 = dVar11;\u000a      __ptr = hash_delete(active_dir_set,&local_c8);\u000a      if (__ptr == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("found","src/ls.c",0x5af,"int main(int, char **)");\u000a      }\u000a      dev_ino_free(__ptr);\u000a      free_pending_ent(p);\u000a    }\u000a  }\u000aLAB_00402d48:\u000a  if (print_with_color != false) {\u000a    if ((used_color == 1) &&\u000a       (((color_indicator[0].len != 2 || (*(short *)color_indicator[0].string != 0x5b1b)) ||\u000a        ((color_indicator[1].len != 1 || (*color_indicator[1].string != 'm')))))) {\u000a      restore_default_color();\u000a    }\u000a    fflush_unlocked(stdout);\u000a    lVar10 = -0x30;\u000a    do {\u000a      __signo = *(int *)((long)&long_options[0].name + lVar10);\u000a      iVar7 = sigismember((sigset_t *)&caught_signals,__signo);\u000a      if (iVar7 != 0) {\u000a        signal(__signo,(__sighandler_t)0x0);\u000a      }\u000a      lVar10 = lVar10 + 4;\u000a      __signo = stop_signal_count;\u000a    } while (lVar10 != 0);\u000a    while (__signo != 0) {\u000a      raise(0x13);\u000a      __signo = __signo + -1;\u000a    }\u000a    if (interrupt_signal != 0) {\u000a      raise(interrupt_signal);\u000a    }\u000a  }\u000a  if (dired == 1) {\u000a    dired_dump_obstack("//DIRED//",&dired_obstack);\u000a    dired_dump_obstack("//SUBDIRED//",&subdired_obstack);\u000a    qVar8 = get_quoting_style(filename_quoting_options);\u000a    __printf_chk(1,"//DIRED-OPTIONS// --quoting-style=%s\u005cn",quoting_style_args[(ulong)qVar8]);\u000a  }\u000a  table = active_dir_set;\u000a  if (active_dir_set != (Hash_table *)0x0) {\u000a    sVar9 = hash_get_n_entries(active_dir_set);\u000a    if (sVar9 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("hash_get_n_entries (active_dir_set) == 0","src/ls.c",0x5ee,\u000a                    "int main(int, char **)");\u000a    }\u000a    hash_free(table);\u000a  }\u000a  return exit_status;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R13,RSI\nMOV R15D,EDI\nMOV RDI,qword ptr [R13]\nCALL 0x0040bf40\nMOV EDI,0x6\nMOV ESI,0x417ce1\nCALL 0x004025a0\nMOV EDI,0x41651f\nMOV ESI,0x4146b8\nCALL 0x00402250\nMOV EDI,0x41651f\nCALL 0x00402210\nCALL 0x00402ee0\nMOV EDI,0x408f80\nCALL 0x00411940\nMOV dword ptr [0x0061d610],0x0\nMOV byte ptr [0x0061d614],0x1\nMOV qword ptr [0x0061d618],0x0\nMOV RAX,-0x8000000000000000\nMOV qword ptr [0x0061d620],RAX\nMOV qword ptr [0x0061d628],-0x1\nMOV EDI,R15D\nMOV RSI,R13\nCALL 0x00402ef0\nMOV EBX,EAX\nCMP byte ptr [0x0061d630],0x0\nJZ 0x00402a61\nCALL 0x00403bf0\nCMP byte ptr [0x0061d630],0x0\nJZ 0x00402a61\nMOV EDI,0xd\nCALL 0x00403ef0\nTEST AL,AL\nJNZ 0x00402939\nMOV EDI,0xe\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x00402921\nMOV AL,byte ptr [0x0061d631]\nTEST AL,AL\nJNZ 0x00402939\nMOV EDI,0xc\nCALL 0x00403ef0\nTEST AL,AL\nJZ 0x00402940\nMOV EAX,dword ptr [0x0061d634]\nTEST EAX,EAX\nJNZ 0x00402940\nMOV byte ptr [0x0061d638],0x1\nMOV EDI,0x1\nCALL 0x00402490\nTEST EAX,EAX\nJS 0x00402a61\nMOV dword ptr [RSP + 0xc],EBX\nMOV EDI,0x61d640\nCALL 0x00402430\nMOV RBP,-0x30\nLEA R14,[RSP + 0x10]\nNOP dword ptr [RAX]\nMOV EBX,dword ptr [0x412b70 + RBP]\nXOR ESI,ESI\nMOV EDI,EBX\nMOV RDX,R14\nCALL 0x00402190\nCMP qword ptr [RSP + 0x10],0x1\nJZ 0x00402996\nMOV EDI,0x61d640\nMOV ESI,EBX\nCALL 0x004026f0\nADD RBP,0x4\nJNZ 0x00402970\nMOVUPS XMM0,xmmword ptr [0x0061d6b0]\nMOVUPS xmmword ptr [0x88 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d6a0]\nMOVUPS xmmword ptr [RSP + 0x78],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d690]\nMOVUPS xmmword ptr [RSP + 0x68],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d680]\nMOVUPS xmmword ptr [RSP + 0x58],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d670]\nMOVUPS xmmword ptr [RSP + 0x48],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d660]\nMOVUPS xmmword ptr [RSP + 0x38],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d650]\nMOVUPS xmmword ptr [RSP + 0x28],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061d640]\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV dword ptr [0x98 + RSP],0x10000000\nXOR EBX,EBX\nMOV R14D,0x403f40\nLEA R12,[RSP + 0x10]\nNOP word ptr [RAX + RAX*0x1]\nMOV EBP,dword ptr [0x412b40 + RBX]\nMOV EDI,0x61d640\nMOV ESI,EBP\nCALL 0x00402680\nTEST EAX,EAX\nJZ 0x00402a53\nTEST RBX,RBX\nMOV EAX,0x403f50\nCMOVZ RAX,R14\nMOV qword ptr [RSP + 0x10],RAX\nXOR EDX,EDX\nMOV EDI,EBP\nMOV RSI,R12\nCALL 0x00402190\nADD RBX,0x4\nCMP RBX,0x30\nJNZ 0x00402a20\nMOV EBX,dword ptr [RSP + 0xc]\nCMP dword ptr [0x0061d6c0],0x1\nJNZ 0x00402a9a\nMOV AL,byte ptr [0x0061d6c4]\nXOR ECX,ECX\nCMP dword ptr [0x0061d634],0x0\nSETNZ CL\nCMP dword ptr [0x0061d6c8],0x3\nLEA ECX,[RCX + RCX*0x1 + 0x2]\nMOV EDX,0x2\nCMOVZ ECX,EDX\nTEST AL,AL\nCMOVNZ ECX,EDX\nMOV dword ptr [0x0061d6c0],ECX\nCMP byte ptr [0x0061d6cc],0x1\nJNZ 0x00402ae8\nMOV EDI,0x1e\nXOR ESI,ESI\nMOV EDX,0x403f60\nMOV ECX,0x403f70\nMOV R8D,0x403f90\nCALL 0x00409c90\nMOV qword ptr [0x0061d6d0],RAX\nTEST RAX,RAX\nJZ 0x00402cd7\nMOV EDI,0x61d6d8\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4024e0\nMOV R8D,0x4020d0\nCALL 0x00410290\nMOV EDI,0x4146d0\nCALL 0x004020a0\nMOV RDI,RAX\nCALL 0x004105b0\nMOV qword ptr [0x0061d730],RAX\nCMP dword ptr [0x0061d634],0x0\nJZ 0x00402b1e\nMOV EAX,dword ptr [0x0061d738]\nCMP EAX,0x4\nJZ 0x00402b1e\nCMP EAX,0x2\nJNZ 0x00402c04\nMOV byte ptr [0x0061d73e],0x1\nXOR EAX,EAX\nAND AL,0x1\nMOV byte ptr [0x0061d740],AL\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00402b6a\nMOV EDI,0x61d748\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4024e0\nMOV R8D,0x4020d0\nCALL 0x00410290\nMOV EDI,0x61d7a0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4024e0\nMOV R8D,0x4020d0\nCALL 0x00410290\nMOV qword ptr [0x0061d7f8],0x64\nMOV EDI,0x64\nMOV ESI,0xc0\nCALL 0x0040f8f0\nMOV qword ptr [0x0061d800],RAX\nMOV qword ptr [0x0061d808],0x0\nCALL 0x00403fa0\nMOV R14D,R15D\nSUB R14D,EBX\nJLE 0x00402bd3\nMOVSXD RBX,EBX\nMOVSXD RBP,R15D\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [R13 + RBX*0x8]\nINC RBX\nXOR ESI,ESI\nMOV EDX,0x1\nMOV ECX,0x417ce1\nCALL 0x00404050\nCMP RBX,RBP\nJL 0x00402bb0\nJMP 0x00402c60\nCMP byte ptr [0x0061d6c4],0x1\nJNZ 0x00402c4f\nMOV EDI,0x416d9b\nMOV ESI,0x3\nMOV EDX,0x1\nMOV ECX,0x417ce1\nCALL 0x00404050\nCMP qword ptr [0x0061d808],0x0\nJNZ 0x00402c6a\nJMP 0x00402cb5\nMOV AL,byte ptr [0x0061d73d]\nOR AL,byte ptr [0x0061d73c]\nAND AL,0x1\nMOV byte ptr [0x0061d73e],AL\nJNZ 0x00402b25\nMOV AL,0x1\nMOV CL,byte ptr [0x0061d6cc]\nTEST CL,CL\nJNZ 0x00402b27\nCMP byte ptr [0x0061d630],0x0\nSETNZ CL\nCMP dword ptr [0x0061d6c8],0x0\nSETNZ AL\nOR AL,CL\nOR AL,byte ptr [0x0061d73f]\nJMP 0x00402b27\nMOV EDI,0x416d9b\nXOR ESI,ESI\nMOV EDX,0x1\nCALL 0x00404820\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00402cb5\nCALL 0x00404890\nMOV AL,byte ptr [0x0061d6c4]\nTEST AL,AL\nJNZ 0x00402c85\nXOR EDI,EDI\nMOV ESI,0x1\nCALL 0x00404980\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00402cb5\nCALL 0x00404ac0\nCMP qword ptr [0x0061d618],0x0\nJZ 0x00402d48\nMOV EDI,0xa\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nJMP 0x00402cdc\nMOV RBX,qword ptr [0x0061d618]\nCMP R14D,0x1\nJG 0x00402ce3\nTEST RBX,RBX\nJZ 0x00402ce3\nCMP qword ptr [RBX + 0x18],0x0\nJNZ 0x00402cdc\nMOV byte ptr [0x0061d614],0x0\nJMP 0x00402cdc\nCALL 0x0040faa0\nMOV RBX,qword ptr [0x0061d618]\nTEST RBX,RBX\nJZ 0x00402d48\nMOV RAX,qword ptr [RBX + 0x18]\nMOV qword ptr [0x0061d618],RAX\nMOV RDI,qword ptr [RBX]\nCMP qword ptr [0x0061d6d0],0x0\nJZ 0x00402e84\nTEST RDI,RDI\nJNZ 0x00402e84\nCALL 0x00404b80\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],RDX\nMOV RDI,qword ptr [0x0061d6d0]\nLEA RSI,[RSP + 0x10]\nCALL 0x0040a590\nTEST RAX,RAX\nJZ 0x00402ea5\nMOV RDI,RAX\nCALL 0x00403f90\nMOV RDI,RBX\nCALL 0x00404bd0\nJMP 0x00402cdc\nCMP byte ptr [0x0061d630],0x0\nJZ 0x00402dfd\nCMP byte ptr [0x0061d818],0x1\nJNZ 0x00402d94\nCMP qword ptr [0x0061d380],0x2\nJNZ 0x00402d8f\nMOV RAX,qword ptr [0x0061d388]\nMOVZX EAX,word ptr [RAX]\nCMP EAX,0x5b1b\nJNZ 0x00402d8f\nCMP qword ptr [0x0061d390],0x1\nJNZ 0x00402d8f\nMOV RAX,qword ptr [0x0061d398]\nCMP byte ptr [RAX],0x6d\nJZ 0x00402d94\nCALL 0x00405090\nMOV RDI,qword ptr [0x0061d5c8]\nCALL 0x004026c0\nMOV RBP,-0x30\nNOP word ptr [RAX + RAX*0x1]\nMOV EBX,dword ptr [0x412b70 + RBP]\nMOV EDI,0x61d640\nMOV ESI,EBX\nCALL 0x00402680\nTEST EAX,EAX\nJZ 0x00402dcf\nXOR ESI,ESI\nMOV EDI,EBX\nCALL 0x00402400\nADD RBP,0x4\nJNZ 0x00402db0\nMOV EBX,dword ptr [0x0061d81c]\nTEST EBX,EBX\nJZ 0x00402dee\nNOP\nMOV EDI,0x13\nCALL 0x004020c0\nDEC EBX\nJNZ 0x00402de0\nMOV EDI,dword ptr [0x0061d820]\nTEST EDI,EDI\nJZ 0x00402dfd\nCALL 0x004020c0\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00402e4b\nMOV EDI,0x4146fc\nMOV ESI,0x61d748\nCALL 0x004050b0\nMOV EDI,0x414706\nMOV ESI,0x61d7a0\nCALL 0x004050b0\nMOV RDI,qword ptr [0x0061d828]\nCALL 0x0040c030\nMOV EAX,EAX\nMOV RDX,qword ptr [0x4176a0 + RAX*0x8]\nMOV EDI,0x1\nMOV ESI,0x414713\nXOR EAX,EAX\nCALL 0x004025b0\nMOV RBX,qword ptr [0x0061d6d0]\nTEST RBX,RBX\nJZ 0x00402e6c\nMOV RDI,RBX\nCALL 0x00409880\nTEST RAX,RAX\nJNZ 0x00402ebe\nMOV RDI,RBX\nCALL 0x00409f60\nMOV EAX,dword ptr [0x0061d610]\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RSI,qword ptr [RBX + 0x8]\nMOVZX EDX,byte ptr [RBX + 0x10]\nCALL 0x00404bf0\nMOV RDI,RBX\nCALL 0x00404bd0\nMOV byte ptr [0x0061d614],0x1\nJMP 0x00402cdc\nMOV EDI,0x4146d3\nMOV ESI,0x4146d9\nMOV EDX,0x5af\nMOV ECX,0x4146e2\nCALL 0x00402330\nMOV EDI,0x414739\nMOV ESI,0x4146d9\nMOV EDX,0x5ee\nMOV ECX,0x4146e2\nCALL 0x00402330\n'
p1201
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 f5\n41 89 ff\n49 8b 7d 00\ne8 e0 96 00 00\nbf 06 00 00 00\nbe e1 7c 41 00\ne8 31 fd ff ff\nbf 1f 65 41 00\nbe b8 46 41 00\ne8 d2 f9 ff ff\nbf 1f 65 41 00\ne8 88 f9 ff ff\ne8 53 06 00 00\nbf 80 8f 40 00\ne8 a9 f0 00 00\nc7 05 6f ad 21 00 00 00 00 00\nc6 05 6c ad 21 00 01\n48 c7 05 65 ad 21 00 00 00 00 00\n48 b8 00 00 00 00 00 00 00 80\n48 89 05 5c ad 21 00\n48 c7 05 59 ad 21 00 ff ff ff ff\n44 89 ff\n4c 89 ee\ne8 16 06 00 00\n89 c3\n80 3d 4d ad 21 00 00\n0f 84 78 01 00 00\ne8 02 13 00 00\n80 3d 3b ad 21 00 00\n0f 84 66 01 00 00\nbf 0d 00 00 00\ne8 eb 15 00 00\n84 c0\n75 30\nbf 0e 00 00 00\ne8 dd 15 00 00\n84 c0\n74 0a\n8a 05 14 ad 21 00\n84 c0\n75 18\nbf 0c 00 00 00\ne8 c5 15 00 00\n84 c0\n74 11\n8b 05 ff ac 21 00\n85 c0\n75 07\nc6 05 f8 ac 21 00 01\nbf 01 00 00 00\ne8 46 fb ff ff\n85 c0\n0f 88 0f 01 00 00\n89 5c 24 0c\nbf 40 d6 61 00\ne8 d0 fa ff ff\n48 c7 c5 d0 ff ff ff\n4c 8d 74 24 10\n0f 1f 40 00\n8b 9d 70 2b 41 00\n31 f6\n89 df\n4c 89 f2\ne8 0e f8 ff ff\n48 83 7c 24 10 01\n74 0c\nbf 40 d6 61 00\n89 de\ne8 5a fd ff ff\n48 83 c5 04\n75 d4\n0f 10 05 0d ad 21 00\n0f 11 84 24 88 00 00 00\n0f 10 05 ee ac 21 00\n0f 11 44 24 78\n0f 10 05 d2 ac 21 00\n0f 11 44 24 68\n0f 10 05 b6 ac 21 00\n0f 11 44 24 58\n0f 10 05 9a ac 21 00\n0f 11 44 24 48\n0f 10 05 7e ac 21 00\n0f 11 44 24 38\n0f 10 05 62 ac 21 00\n0f 11 44 24 28\n0f 10 05 46 ac 21 00\n0f 11 44 24 18\nc7 84 24 98 00 00 00 00 00 00 10\n31 db\n41 be 40 3f 40 00\n4c 8d 64 24 10\n66 0f 1f 84 00 00 00 00 00\n8b ab 40 2b 41 00\nbf 40 d6 61 00\n89 ee\ne8 4e fc ff ff\n85 c0\n74 1d\n48 85 db\nb8 50 3f 40 00\n49 0f 44 c6\n48 89 44 24 10\n31 d2\n89 ef\n4c 89 e6\ne8 3d f7 ff ff\n48 83 c3 04\n48 83 fb 30\n75 c3\n8b 5c 24 0c\n83 3d 58 ac 21 00 01\n75 30\n8a 05 54 ac 21 00\n31 c9\n83 3d bb ab 21 00 00\n0f 95 c1\n83 3d 45 ac 21 00 03\n8d 4c 09 02\nba 02 00 00 00\n0f 44 ca\n84 c0\n0f 45 ca\n89 0d 26 ac 21 00\n80 3d 2b ac 21 00 01\n75 45\nbf 1e 00 00 00\n31 f6\nba 60 3f 40 00\nb9 70 3f 40 00\n41 b8 90 3f 40 00\ne8 d1 71 00 00\n48 89 05 0a ac 21 00\n48 85 c0\n0f 84 08 02 00 00\nbf d8 d6 61 00\n31 f6\n31 d2\nb9 e0 24 40 00\n41 b8 d0 20 40 00\ne8 a8 d7 00 00\nbf d0 46 41 00\ne8 ae f5 ff ff\n48 89 c7\ne8 b6 da 00 00\n48 89 05 2f ac 21 00\n83 3d 2c ab 21 00 00\n74 14\n8b 05 28 ac 21 00\n83 f8 04\n74 09\n83 f8 02\n0f 85 e6 00 00 00\nc6 05 19 ac 21 00 01\n31 c0\n24 01\n88 05 11 ac 21 00\n80 3d 0b ac 21 00 01\n75 32\nbf 48 d7 61 00\n31 f6\n31 d2\nb9 e0 24 40 00\n41 b8 d0 20 40 00\ne8 3f d7 00 00\nbf a0 d7 61 00\n31 f6\n31 d2\nb9 e0 24 40 00\n41 b8 d0 20 40 00\ne8 26 d7 00 00\n48 c7 05 83 ac 21 00 64 00 00 00\nbf 64 00 00 00\nbe c0 00 00 00\ne8 6c cd 00 00\n48 89 05 75 ac 21 00\n48 c7 05 72 ac 21 00 00 00 00 00\ne8 05 14 00 00\n45 89 fe\n41 29 de\n7e 30\n48 63 db\n49 63 ef\n0f 1f 80 00 00 00 00\n49 8b 7c dd 00\n48 ff c3\n31 f6\nba 01 00 00 00\nb9 e1 7c 41 00\ne8 87 14 00 00\n48 39 eb\n7c e2\ne9 8d 00 00 00\n80 3d ea aa 21 00 01\n75 73\nbf 9b 6d 41 00\nbe 03 00 00 00\nba 01 00 00 00\nb9 e1 7c 41 00\ne8 5b 14 00 00\n48 83 3d 0b ac 21 00 00\n75 6b\ne9 b1 00 00 00\n8a 05 33 ab 21 00\n0a 05 2c ab 21 00\n24 01\n88 05 26 ab 21 00\n0f 85 07 ff ff ff\nb0 01\n8a 0d a6 aa 21 00\n84 c9\n0f 85 f9 fe ff ff\n80 3d fb a9 21 00 00\n0f 95 c1\n83 3d 89 aa 21 00 00\n0f 95 c0\n08 c8\n0a 05 f5 aa 21 00\ne9 d8 fe ff ff\nbf 9b 6d 41 00\n31 f6\nba 01 00 00 00\ne8 c0 1b 00 00\n48 83 3d a0 ab 21 00 00\n74 4b\ne8 21 1c 00 00\n8a 05 4f aa 21 00\n84 c0\n75 0c\n31 ff\nbe 01 00 00 00\ne8 fb 1c 00 00\n48 83 3d 7b ab 21 00 00\n74 26\ne8 2c 1e 00 00\n48 83 3d 7c a9 21 00 00\n0f 84 a6 00 00 00\nbf 0a 00 00 00\ne8 b4 f7 ff ff\n48 ff 05 5d ab 21 00\neb 27\n48 8b 1d 5c a9 21 00\n41 83 fe 01\n7f 21\n48 85 db\n74 1c\n48 83 7b 18 00\n75 0e\nc6 05 3f a9 21 00 00\neb 05\ne8 c4 cd 00 00\n48 8b 1d 35 a9 21 00\n48 85 db\n74 60\n48 8b 43 18\n48 89 05 25 a9 21 00\n48 8b 3b\n48 83 3d d2 a9 21 00 00\n0f 84 80 01 00 00\n48 85 ff\n0f 85 77 01 00 00\ne8 6e 1e 00 00\n48 89 44 24 10\n48 89 54 24 18\n48 8b 3d ad a9 21 00\n48 8d 74 24 10\ne8 63 78 00 00\n48 85 c0\n0f 84 6f 01 00 00\n48 89 c7\ne8 52 12 00 00\n48 89 df\ne8 8a 1e 00 00\neb 94\n80 3d e1 a8 21 00 00\n0f 84 a8 00 00 00\n80 3d bc aa 21 00 01\n75 36\n48 83 3d 1a a6 21 00 02\n75 27\n48 8b 05 19 a6 21 00\n0f b7 00\n3d 1b 5b 00 00\n75 16\n48 83 3d 0f a6 21 00 01\n75 0c\n48 8b 05 0e a6 21 00\n80 38 6d\n74 05\ne8 fc 22 00 00\n48 8b 3d 2d a8 21 00\ne8 20 f9 ff ff\n48 c7 c5 d0 ff ff ff\n66 0f 1f 84 00 00 00 00 00\n8b 9d 70 2b 41 00\nbf 40 d6 61 00\n89 de\ne8 be f8 ff ff\n85 c0\n74 09\n31 f6\n89 df\ne8 31 f6 ff ff\n48 83 c5 04\n75 db\n8b 1d 41 aa 21 00\n85 db\n74 0f\n90\nbf 13 00 00 00\ne8 d6 f2 ff ff\nff cb\n75 f2\n8b 3d 2c aa 21 00\n85 ff\n74 05\ne8 c3 f2 ff ff\n80 3d 3d a9 21 00 01\n75 45\nbf fc 46 41 00\nbe 48 d7 61 00\ne8 9b 22 00 00\nbf 06 47 41 00\nbe a0 d7 61 00\ne8 8c 22 00 00\n48 8b 3d fd a9 21 00\ne8 00 92 00 00\n89 c0\n48 8b 14 c5 a0 76 41 00\nbf 01 00 00 00\nbe 13 47 41 00\n31 c0\ne8 65 f7 ff ff\n48 8b 1d 7e a8 21 00\n48 85 db\n74 15\n48 89 df\ne8 21 6a 00 00\n48 85 c0\n75 5a\n48 89 df\ne8 f4 70 00 00\n8b 05 9e a7 21 00\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 73 08\n0f b6 53 10\ne8 5f 1d 00 00\n48 89 df\ne8 37 1d 00 00\nc6 05 74 a7 21 00 01\ne9 37 fe ff ff\nbf d3 46 41 00\nbe d9 46 41 00\nba af 05 00 00\nb9 e2 46 41 00\ne8 72 f4 ff ff\nbf 39 47 41 00\nbe d9 46 41 00\nba ee 05 00 00\nb9 e2 46 41 00\ne8 59 f4 ff ff\n'
p1202
S'.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402845\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284a\n.text:0000000000402851\n.text:0000000000402854\n.text:0000000000402857\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402865\n.text:000000000040286a\n.text:000000000040286f\n.text:0000000000402874\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402888\n.text:000000000040288d\n.text:0000000000402892\n.text:0000000000402897\n.text:00000000004028a1\n.text:00000000004028a8\n.text:00000000004028b3\n.text:00000000004028bd\n.text:00000000004028c4\n.text:00000000004028cf\n.text:00000000004028d2\n.text:00000000004028d5\n.text:00000000004028da\n.text:00000000004028dc\n.text:00000000004028e3\n.text:00000000004028e9\n.text:00000000004028ee\n.text:00000000004028f5\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402905\n.text:0000000000402907\n.text:0000000000402909\n.text:000000000040290e\n.text:0000000000402913\n.text:0000000000402915\n.text:0000000000402917\n.text:000000000040291d\n.text:000000000040291f\n.text:0000000000402921\n.text:0000000000402926\n.text:000000000040292b\n.text:000000000040292d\n.text:000000000040292f\n.text:0000000000402935\n.text:0000000000402937\n.text:0000000000402939\n.text:0000000000402940\n.text:0000000000402945\n.text:000000000040294a\n.text:000000000040294c\n.text:0000000000402952\n.text:0000000000402956\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402967\n.text:000000000040296c\n.text:0000000000402970\n.text:0000000000402976\n.text:0000000000402978\n.text:000000000040297a\n.text:000000000040297d\n.text:0000000000402982\n.text:0000000000402988\n.text:000000000040298a\n.text:000000000040298f\n.text:0000000000402991\n.text:0000000000402996\n.text:000000000040299a\n.text:000000000040299c\n.text:00000000004029a3\n.text:00000000004029ab\n.text:00000000004029b2\n.text:00000000004029b7\n.text:00000000004029be\n.text:00000000004029c3\n.text:00000000004029ca\n.text:00000000004029cf\n.text:00000000004029d6\n.text:00000000004029db\n.text:00000000004029e2\n.text:00000000004029e7\n.text:00000000004029ee\n.text:00000000004029f3\n.text:00000000004029fa\n.text:00000000004029ff\n.text:0000000000402a0a\n.text:0000000000402a0c\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a20\n.text:0000000000402a26\n.text:0000000000402a2b\n.text:0000000000402a2d\n.text:0000000000402a32\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a42\n.text:0000000000402a47\n.text:0000000000402a49\n.text:0000000000402a4b\n.text:0000000000402a4e\n.text:0000000000402a53\n.text:0000000000402a57\n.text:0000000000402a5b\n.text:0000000000402a5d\n.text:0000000000402a61\n.text:0000000000402a68\n.text:0000000000402a6a\n.text:0000000000402a70\n.text:0000000000402a72\n.text:0000000000402a79\n.text:0000000000402a7c\n.text:0000000000402a83\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8f\n.text:0000000000402a91\n.text:0000000000402a94\n.text:0000000000402a9a\n.text:0000000000402aa1\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aaa\n.text:0000000000402aaf\n.text:0000000000402ab4\n.text:0000000000402aba\n.text:0000000000402abf\n.text:0000000000402ac6\n.text:0000000000402ac9\n.text:0000000000402acf\n.text:0000000000402ad4\n.text:0000000000402ad6\n.text:0000000000402ad8\n.text:0000000000402add\n.text:0000000000402ae3\n.text:0000000000402ae8\n.text:0000000000402aed\n.text:0000000000402af2\n.text:0000000000402af5\n.text:0000000000402afa\n.text:0000000000402b01\n.text:0000000000402b08\n.text:0000000000402b0a\n.text:0000000000402b10\n.text:0000000000402b13\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1e\n.text:0000000000402b25\n.text:0000000000402b27\n.text:0000000000402b29\n.text:0000000000402b2f\n.text:0000000000402b36\n.text:0000000000402b38\n.text:0000000000402b3d\n.text:0000000000402b3f\n.text:0000000000402b41\n.text:0000000000402b46\n.text:0000000000402b4c\n.text:0000000000402b51\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b5a\n.text:0000000000402b5f\n.text:0000000000402b65\n.text:0000000000402b6a\n.text:0000000000402b75\n.text:0000000000402b7a\n.text:0000000000402b7f\n.text:0000000000402b84\n.text:0000000000402b8b\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402b9e\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba6\n.text:0000000000402ba9\n.text:0000000000402bb0\n.text:0000000000402bb5\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc4\n.text:0000000000402bc9\n.text:0000000000402bcc\n.text:0000000000402bce\n.text:0000000000402bd3\n.text:0000000000402bda\n.text:0000000000402bdc\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf5\n.text:0000000000402bfd\n.text:0000000000402bff\n.text:0000000000402c04\n.text:0000000000402c0a\n.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c18\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c26\n.text:0000000000402c28\n.text:0000000000402c2e\n.text:0000000000402c35\n.text:0000000000402c38\n.text:0000000000402c3f\n.text:0000000000402c42\n.text:0000000000402c44\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c54\n.text:0000000000402c56\n.text:0000000000402c5b\n.text:0000000000402c60\n.text:0000000000402c68\n.text:0000000000402c6a\n.text:0000000000402c6f\n.text:0000000000402c75\n.text:0000000000402c77\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c80\n.text:0000000000402c85\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c94\n.text:0000000000402c9c\n.text:0000000000402ca2\n.text:0000000000402ca7\n.text:0000000000402cac\n.text:0000000000402cb3\n.text:0000000000402cb5\n.text:0000000000402cbc\n.text:0000000000402cc0\n.text:0000000000402cc2\n.text:0000000000402cc5\n.text:0000000000402cc7\n.text:0000000000402ccc\n.text:0000000000402cce\n.text:0000000000402cd5\n.text:0000000000402cd7\n.text:0000000000402cdc\n.text:0000000000402ce3\n.text:0000000000402ce6\n.text:0000000000402ce8\n.text:0000000000402cec\n.text:0000000000402cf3\n.text:0000000000402cf6\n.text:0000000000402cfe\n.text:0000000000402d04\n.text:0000000000402d07\n.text:0000000000402d0d\n.text:0000000000402d12\n.text:0000000000402d17\n.text:0000000000402d1c\n.text:0000000000402d23\n.text:0000000000402d28\n.text:0000000000402d2d\n.text:0000000000402d30\n.text:0000000000402d36\n.text:0000000000402d39\n.text:0000000000402d3e\n.text:0000000000402d41\n.text:0000000000402d46\n.text:0000000000402d48\n.text:0000000000402d4f\n.text:0000000000402d55\n.text:0000000000402d5c\n.text:0000000000402d5e\n.text:0000000000402d66\n.text:0000000000402d68\n.text:0000000000402d6f\n.text:0000000000402d72\n.text:0000000000402d77\n.text:0000000000402d79\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d8a\n.text:0000000000402d8d\n.text:0000000000402d8f\n.text:0000000000402d94\n.text:0000000000402d9b\n.text:0000000000402da0\n.text:0000000000402da7\n.text:0000000000402db0\n.text:0000000000402db6\n.text:0000000000402dbb\n.text:0000000000402dbd\n.text:0000000000402dc2\n.text:0000000000402dc4\n.text:0000000000402dc6\n.text:0000000000402dc8\n.text:0000000000402dca\n.text:0000000000402dcf\n.text:0000000000402dd3\n.text:0000000000402dd5\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402ddf\n.text:0000000000402de0\n.text:0000000000402de5\n.text:0000000000402dea\n.text:0000000000402dec\n.text:0000000000402dee\n.text:0000000000402df4\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfd\n.text:0000000000402e04\n.text:0000000000402e06\n.text:0000000000402e0b\n.text:0000000000402e10\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e24\n.text:0000000000402e2b\n.text:0000000000402e30\n.text:0000000000402e32\n.text:0000000000402e3a\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e46\n.text:0000000000402e4b\n.text:0000000000402e52\n.text:0000000000402e55\n.text:0000000000402e57\n.text:0000000000402e5a\n.text:0000000000402e5f\n.text:0000000000402e62\n.text:0000000000402e64\n.text:0000000000402e67\n.text:0000000000402e6c\n.text:0000000000402e72\n.text:0000000000402e79\n.text:0000000000402e7a\n.text:0000000000402e7c\n.text:0000000000402e7e\n.text:0000000000402e80\n.text:0000000000402e82\n.text:0000000000402e83\n.text:0000000000402e84\n.text:0000000000402e88\n.text:0000000000402e8c\n.text:0000000000402e91\n.text:0000000000402e94\n.text:0000000000402e99\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb9\n.text:0000000000402ebe\n.text:0000000000402ec3\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ed2\n'
p1203
tp1204
sS'_obstack_memory_used'
p1205
(S'\n__stdcall _obstack_memory_used(obstack * h)\n'
p1206
V\u000asize_t _obstack_memory_used(obstack *h)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  char *pcVar2;\u000a  \u000a  p_Var1 = h->chunk;\u000a  pcVar2 = (char *)0x0;\u000a  while (p_Var1 != (_obstack_chunk *)0x0) {\u000a    pcVar2 = p_Var1->limit + (long)(pcVar2 + -(long)p_Var1);\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return (size_t)pcVar2;\u000a}\u000a\u000a
p1207
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJZ 0x0041056f\nNOP dword ptr [RAX + RAX*0x1]\nSUB RAX,RCX\nADD RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJNZ 0x00410560\nRET\n'
p1208
S'48 8b 4f 08\n31 c0\n48 85 c9\n74 14\n0f 1f 44 00 00\n48 29 c8\n48 03 01\n48 8b 49 08\n48 85 c9\n75 f1\nc3\n'
p1209
S'.text:0000000000410550\n.text:0000000000410554\n.text:0000000000410556\n.text:0000000000410559\n.text:000000000041055b\n.text:0000000000410560\n.text:0000000000410563\n.text:0000000000410566\n.text:000000000041056a\n.text:000000000041056d\n.text:000000000041056f\n'
p1210
tp1211
sS'c_isupper'
p1212
(S'\n__stdcall c_isupper()\n'
p1213
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1214
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1215
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1216
S'.text:0000000000410c40\n.text:0000000000410c43\n.text:0000000000410c46\n.text:0000000000410c49\n'
p1217
tp1218
sS'known_term_type'
p1219
(S'\n__stdcall known_term_type()\n'
p1220
V\u000a_Bool known_term_type(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__name;\u000a  size_t sVar2;\u000a  char *__s1;\u000a  \u000a  __name = getenv("TERM");\u000a  if ((__name != (char *)0x0) && (*__name != 0)) {\u000a    __s1 = "# Configuration file for dircolors, a utility to help you set the";\u000a    do {\u000a      iVar1 = strncmp(__s1,"TERM ",5);\u000a      if ((iVar1 == 0) && (iVar1 = fnmatch(__s1 + 5,__name,0), iVar1 == 0)) {\u000a        return true;\u000a      }\u000a      sVar2 = strlen(__s1);\u000a      __s1 = __s1 + sVar2 + 1;\u000a    } while (__s1 + -0x4133a0 < (char *)0x1075);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1221
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV EDI,0x4168b7\nCALL 0x004020a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00405933\nCMP byte ptr [R14],0x0\nJZ 0x00405933\nMOV R15D,0x4133a0\nMOV EBX,0x4133a0\nNOP dword ptr [RAX + RAX*0x1]\nMOV ESI,0x416912\nMOV EDX,0x5\nMOV RDI,RBX\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x00405918\nLEA RDI,[RBX + 0x5]\nXOR EDX,EDX\nMOV RSI,R14\nCALL 0x00402340\nTEST EAX,EAX\nJZ 0x0040593b\nMOV RDI,RBX\nCALL 0x00402290\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nMOV RAX,RBX\nSUB RAX,R15\nCMP RAX,0x1075\nJC 0x004058f0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x00405935\n'
p1222
S'41 57\n41 56\n53\nbf b7 68 41 00\ne8 d1 c7 ff ff\n49 89 c6\n4d 85 f6\n74 5c\n41 80 3e 00\n74 56\n41 bf a0 33 41 00\nbb a0 33 41 00\n0f 1f 84 00 00 00 00 00\nbe 12 69 41 00\nba 05 00 00 00\n48 89 df\ne8 1e c8 ff ff\n85 c0\n75 12\n48 8d 7b 05\n31 d2\n4c 89 f6\ne8 2c ca ff ff\n85 c0\n74 23\n48 89 df\ne8 70 c9 ff ff\n48 8d 5c 03 01\n48 89 d8\n4c 29 f8\n48 3d 75 10 00 00\n72 bd\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\n'
p1223
S'.text:00000000004058c0\n.text:00000000004058c2\n.text:00000000004058c4\n.text:00000000004058c5\n.text:00000000004058ca\n.text:00000000004058cf\n.text:00000000004058d2\n.text:00000000004058d5\n.text:00000000004058d7\n.text:00000000004058db\n.text:00000000004058dd\n.text:00000000004058e3\n.text:00000000004058e8\n.text:00000000004058f0\n.text:00000000004058f5\n.text:00000000004058fa\n.text:00000000004058fd\n.text:0000000000405902\n.text:0000000000405904\n.text:0000000000405906\n.text:000000000040590a\n.text:000000000040590c\n.text:000000000040590f\n.text:0000000000405914\n.text:0000000000405916\n.text:0000000000405918\n.text:000000000040591b\n.text:0000000000405920\n.text:0000000000405925\n.text:0000000000405928\n.text:000000000040592b\n.text:0000000000405931\n.text:0000000000405933\n.text:0000000000405935\n.text:0000000000405936\n.text:0000000000405938\n.text:000000000040593a\n.text:000000000040593b\n.text:000000000040593d\n'
p1224
tp1225
sS'allocate_entry'
p1226
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1227
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1228
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x0040a542\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x004024e0\nADD RSP,0x8\nRET\n'
p1229
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 93 7f ff ff\n48 83 c4 08\nc3\n'
p1230
S'.text:000000000040a530\n.text:000000000040a534\n.text:000000000040a537\n.text:000000000040a539\n.text:000000000040a53d\n.text:000000000040a541\n.text:000000000040a542\n.text:000000000040a543\n.text:000000000040a548\n.text:000000000040a54d\n.text:000000000040a551\n'
p1231
tp1232
sS'getpwuid'
p1233
(S'\n__stdcall getpwuid(__uid_t __uid)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwuid(__uid_t __uid)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwuid_0061d0f0)();\u000a  return ppVar1;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x0061d0f0]\n'
p1236
S'ff 25 aa ae 21 00\n'
p1237
S'.plt:0000000000402240\n'
p1238
tp1239
sS'decode_switches'
p1240
(S'\n__stdcall decode_switches(char * * argv)\n'
p1241
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint decode_switches(char **argv)\u000a\u000a{\u000a  char cVar1;\u000a  color_ext_type *pcVar2;\u000a  char "posix-" [7];\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  strtol_error sVar5;\u000a  undefined4 uVar6;\u000a  quoting_style qVar7;\u000a  int extraout_EAX;\u000a  int extraout_EAX_00;\u000a  char *spec;\u000a  undefined8 uVar8;\u000a  ignore_pattern *piVar9;\u000a  ptrdiff_t problem;\u000a  char *pcVar10;\u000a  char *command_name;\u000a  size_t sVar11;\u000a  undefined7 extraout_var;\u000a  byte bVar12;\u000a  char **ppcVar13;\u000a  long lVar14;\u000a  bin_str *pbVar15;\u000a  undefined7 uVar16;\u000a  color_ext_type *__ptr;\u000a  winsize ws;\u000a  char cStack140;\u000a  char cStack139;\u000a  undefined uStack138;\u000a  char *pcStack136;\u000a  char *pcStack128;\u000a  undefined2 *puStack120;\u000a  ulong uStack112;\u000a  ulong uStack104;\u000a  char *pcStack96;\u000a  ulong uStack80;\u000a  undefined8 local_48;\u000a  undefined2 local_38;\u000a  ushort uStack54;\u000a  undefined4 uStack52;\u000a  \u000a  qmark_funny_chars = false;\u000a  if (ls_mode == 1) {\u000a    uStack80 = 0x402f39;\u000a    iVar4 = isatty(1);\u000a    if (iVar4 == 0) {\u000a      format = one_per_line;\u000a      qmark_funny_chars = false;\u000a    }\u000a    else {\u000a      format = many_per_line;\u000a      uStack80 = 0x402f57;\u000a      set_quoting_style((quoting_options *)0x0);\u000a      qmark_funny_chars = true;\u000a    }\u000a  }\u000a  else {\u000a    if (ls_mode == 3) {\u000a      format = long_format;\u000a    }\u000a    else {\u000a      if (ls_mode != 2) {\u000aLAB_00403bce:\u000a                    /* WARNING: Subroutine does not return */\u000a        uStack80 = 0x403bd3;\u000a        abort();\u000a      }\u000a      format = many_per_line;\u000a    }\u000a    uStack80 = 0x402f77;\u000a    set_quoting_style((quoting_options *)0x0);\u000a  }\u000a  time_type = time_mtime;\u000a  sort_type = sort_name;\u000a  sort_reverse = 0;\u000a  numeric_ids = 0;\u000a  print_block_size = 0;\u000a  indicator_style = none;\u000a  print_inode = 0;\u000a  dereference = DEREF_UNDEFINED;\u000a  recursive = 0;\u000a  immediate_dirs = 0;\u000a  ignore_mode = IGNORE_DEFAULT;\u000a  ignore_patterns = (ignore_pattern *)0x0;\u000a  hide_patterns = (ignore_pattern *)0x0;\u000a  print_scontext = 0;\u000a  uStack80 = 0x402ff5;\u000a  getenv_quoting_style();\u000a  line_length = 0x50;\u000a  uStack80 = 0x40300a;\u000a  spec = getenv("COLUMNS");\u000a  if ((spec != (char *)0x0) && (*spec != 0)) {\u000a    uStack80 = 0x403020;\u000a    _Var3 = set_line_length(spec);\u000a    if (_Var3 == false) {\u000a      uStack80 = 0x403035;\u000a      uVar8 = dcgettext(0,"ignoring invalid width in environment variable COLUMNS: %s",5);\u000a      uStack80 = 0x403040;\u000a      spec = quote(spec);\u000a      uStack80 = 0x403051;\u000a      error(0,0,uVar8,spec);\u000a    }\u000a  }\u000a  uStack80 = 0x403067;\u000a  iVar4 = ioctl(1,0x5413,&local_38);\u000a  if ((iVar4 != -1) && (uStack54 != 0)) {\u000a    line_length = (ulong)uStack54;\u000a  }\u000a  uStack80 = 0x403087;\u000a  spec = getenv("TABSIZE");\u000a  tabsize = 8;\u000a  if (spec != (char *)0x0) {\u000a    uStack80 = 0x4030ae;\u000a    sVar5 = xstrtoul(spec,(char **)0x0,(ulong *)0x0,(char *)&local_38);\u000a    if (sVar5 == LONGINT_OK) {\u000a      tabsize = CONCAT44(uStack52,CONCAT22(uStack54,local_38));\u000a    }\u000a    else {\u000a      uStack80 = 0x4030c3;\u000a      uVar8 = dcgettext(0,"ignoring invalid tab size in environment variable TABSIZE: %s",5);\u000a      uStack80 = 0x4030ce;\u000a      spec = quote(spec);\u000a      uStack80 = 0x4030df;\u000a      error(0,0,uVar8,spec);\u000a    }\u000a  }\u000a  uStack104 = 0;\u000a  uStack112 = 0;\u000a  pcStack96 = (char *)0x0;\u000aLAB_00403103:\u000a  puStack120 = &local_38;\u000a  local_38 = 0xffff;\u000a  uStack54 = 0xffff;\u000a  uStack80 = 0x403122;\u000a  uVar6 = getopt_long();\u000a  spec = optarg;\u000a  bVar12 = 1;\u000a  uVar16 = (undefined7)(uStack112 >> 8);\u000a  switch(uVar6) {\u000a  case 0x31:\u000a    if (format != long_format) {\u000a      format = one_per_line;\u000a    }\u000a    break;\u000a  case 0x41:\u000a    if (ignore_mode == IGNORE_DEFAULT) {\u000a      ignore_mode = IGNORE_DOT_AND_DOTDOT;\u000a    }\u000a    break;\u000a  case 0x42:\u000a    uStack80 = 0x40317d;\u000a    add_ignore_pattern("*~");\u000a    uStack80 = 0x403187;\u000a    add_ignore_pattern(".*~");\u000a    break;\u000a  case 0x43:\u000a    format = many_per_line;\u000a    break;\u000a  case 0x44:\u000a    dired = 1;\u000a    break;\u000a  case 0x46:\u000a    indicator_style = classify;\u000a    break;\u000a  case 0x47:\u000a    goto switchD_00403134_caseD_47;\u000a  case 0x48:\u000a    dereference = DEREF_COMMAND_LINE_ARGUMENTS;\u000a    break;\u000a  case 0x49:\u000a    uStack80 = 0x4031d1;\u000a    add_ignore_pattern(optarg);\u000a    break;\u000a  case 0x4c:\u000a    dereference = DEREF_ALWAYS;\u000a    break;\u000a  case 0x4e:\u000a    uStack80 = 0x4031ee;\u000a    set_quoting_style((quoting_options *)0x0);\u000a    break;\u000a  case 0x51:\u000a    uStack80 = 0x4031ff;\u000a    set_quoting_style((quoting_options *)0x0);\u000a    break;\u000a  case 0x52:\u000a    recursive = 1;\u000a    break;\u000a  case 0x53:\u000a    sort_type = sort_size;\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x54:\u000a    uStack80 = 0x403240;\u000a    dcgettext(0,"invalid tab size",5);\u000a    local_48 = CONCAT44(local_48._4_4_,2);\u000a    uStack80 = 0x403271;\u000a    tabsize = xnumtoumax(spec,0,0,(char *)0xffffffffffffffff,\u000a                                                  \u000a                         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                         + 0xca);\u000a    break;\u000a  case 0x55:\u000a    sort_type = sort_none;\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x58:\u000a    sort_type = sort_extension;\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x5a:\u000a    print_scontext = 1;\u000a    break;\u000a  case 0x61:\u000a    ignore_mode = IGNORE_MINIMAL;\u000a    break;\u000a  case 0x62:\u000a    uStack80 = 0x4032c8;\u000a    set_quoting_style((quoting_options *)0x0);\u000a    break;\u000a  case 99:\u000a    time_type = time_ctime;\u000a    break;\u000a  case 100:\u000a    immediate_dirs = 1;\u000a    break;\u000a  case 0x66:\u000a    ignore_mode = IGNORE_MINIMAL;\u000a    sort_type = sort_none;\u000a    if (format == long_format) {\u000a      uStack80 = 0x403315;\u000a      iVar4 = isatty(1);\u000a      format = many_per_line - (uint)(iVar4 == 0);\u000a      uStack112 = (ulong)format;\u000a    }\u000a    print_block_size = 0;\u000a    print_with_color = false;\u000a    uStack112 = CONCAT71((int7)(uStack112 >> 8),1);\u000a    break;\u000a  case 0x67:\u000a    format = long_format;\u000a    print_owner = 1;\u000a    break;\u000a  case 0x68:\u000a    human_output_opts = 0xb0;\u000a    file_human_output_opts = 0xb0;\u000a    goto LAB_0040367b;\u000a  case 0x69:\u000a    print_inode = 1;\u000a    break;\u000a  case 0x6b:\u000a    goto switchD_00403134_caseD_6b;\u000a  case 0x6c:\u000a    goto switchD_00403134_caseD_6c;\u000a  case 0x6d:\u000a    format = with_commas;\u000a    break;\u000a  case 0x6e:\u000a    numeric_ids = 1;\u000a    goto switchD_00403134_caseD_6c;\u000a  case 0x6f:\u000a    format = long_format;\u000a    goto switchD_00403134_caseD_47;\u000a  case 0x70:\u000a    indicator_style = slash;\u000a    break;\u000a  case 0x71:\u000a    qmark_funny_chars = true;\u000a    break;\u000a  case 0x72:\u000a    sort_reverse = 1;\u000a    break;\u000a  case 0x73:\u000a    print_block_size = 1;\u000a    break;\u000a  case 0x74:\u000a    sort_type = sort_time;\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x75:\u000a    time_type = time_atime;\u000a    break;\u000a  case 0x76:\u000a    sort_type = sort_version;\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x77:\u000a    uStack80 = 0x403421;\u000a    _Var3 = set_line_length(optarg);\u000a    if (_Var3 == false) {\u000a      uStack80 = 0x40343a;\u000a      uVar8 = dcgettext(0,"invalid line width",5);\u000a      uStack80 = 0x40344f;\u000a      spec = quote(optarg);\u000a      uStack80 = 0x403476;\u000a      error(2,0,"%s: %s",uVar8,spec);\u000a    }\u000a    break;\u000a  case 0x78:\u000a    format = horizontal;\u000a    break;\u000a  case 0x80:\u000a    print_author = 1;\u000a    break;\u000a  case 0x81:\u000a    uStack80 = 0x4034ac;\u000a    sVar5 = human_options(optarg,&human_output_opts,&output_block_size);\u000a    if (sVar5 != LONGINT_OK) {\u000a      uStack80 = 0x403bec;\u000a      xstrtol_fatal((option *)(ulong)sVar5,(char *)(ulong)CONCAT22(uStack54,local_38));\u000a      uStack80 = (ulong)argv & 0xffffffff;\u000a      pcStack136 = getenv("LS_COLORS");\u000a      if ((pcStack136 == (char *)0x0) || (*pcStack136 == 0)) {\u000a        spec = getenv("COLORTERM");\u000a        if ((spec != (char *)0x0) && (*spec != 0)) {\u000a          return (int)spec;\u000a        }\u000a        _Var3 = known_term_type();\u000a        iVar4 = (int)CONCAT71(extraout_var,_Var3);\u000a        if (_Var3 != false) {\u000a          return iVar4;\u000a        }\u000a        print_with_color = false;\u000a        return iVar4;\u000a      }\u000a      uStack138 = 0;\u000a      cStack140 = '?';\u000a      cStack139 = 0x3f;\u000a      color_buf = xstrdup(pcStack136);\u000a      bVar12 = 1;\u000a      __ptr = (color_ext_type *)0x0;\u000a      pcStack128 = color_buf;\u000a      goto LAB_00403d90;\u000a    }\u000a    file_human_output_opts = human_output_opts;\u000a    file_output_block_size = output_block_size;\u000a    break;\u000a  case 0x82:\u000a    if (optarg == (char *)0x0) {\u000aLAB_00403710:\u000a      print_with_color = true;\u000a    }\u000a    else {\u000a      uStack80 = 0x403504;\u000a      problem = __xargmatch_internal("--color",optarg,color_args,(char *)color_types,4,argmatch_die)\u000a      ;\u000a      if (color_types[problem] == color_always) goto LAB_00403710;\u000a      if (color_types[problem] != color_if_tty) {\u000a        print_with_color = false;\u000a        break;\u000a      }\u000a      uStack80 = 0x403527;\u000a      iVar4 = isatty(1);\u000a      print_with_color = (_Bool)(iVar4 != 0);\u000a      if (!(bool)print_with_color) break;\u000a    }\u000a    tabsize = 0;\u000a    break;\u000a  case 0x83:\u000a    dereference = DEREF_COMMAND_LINE_SYMLINK_TO_DIR;\u000a    break;\u000a  case 0x84:\u000a    indicator_style = file_type;\u000a    break;\u000a  case 0x85:\u000a    uStack80 = 0x403581;\u000a    problem = __xargmatch_internal\u000a                        ("--format",optarg,format_args,(char *)format_types,4,argmatch_die);\u000a    format = format_types[problem];\u000a    break;\u000a  case 0x86:\u000a    format = long_format;\u000a    uStack80 = 0x4035a7;\u000a    pcStack96 = bad_cast("full-iso");\u000a    break;\u000a  case 0x87:\u000a    directories_first = 1;\u000a    break;\u000a  case 0x88:\u000a    uStack80 = 0x4035c5;\u000a    piVar9 = (ignore_pattern *)xmalloc(0x10);\u000a    piVar9->pattern = optarg;\u000a    piVar9->next = hide_patterns;\u000a    hide_patterns = piVar9;\u000a    break;\u000a  case 0x89:\u000a    uStack80 = 0x40360e;\u000a    problem = __xargmatch_internal\u000a                        ("--indicator-style",optarg,indicator_style_args,\u000a                         (char *)indicator_style_types,4,argmatch_die);\u000a    indicator_style = indicator_style_types[problem];\u000a    break;\u000a  case 0x8a:\u000a    uStack80 = 0x403648;\u000a    __xargmatch_internal\u000a              ("--quoting-style",optarg,quoting_style_args,(char *)quoting_style_vals,4,argmatch_die\u000a              );\u000a    uStack80 = 0x403656;\u000a    set_quoting_style((quoting_options *)0x0);\u000a    break;\u000a  case 0x8b:\u000a    qmark_funny_chars = false;\u000a    break;\u000a  case 0x8c:\u000a    human_output_opts = 0x90;\u000a    file_human_output_opts = 0x90;\u000aLAB_0040367b:\u000a    output_block_size = 1;\u000a    file_output_block_size = 1;\u000a    break;\u000a  case 0x8d:\u000a    uStack80 = 0x4036be;\u000a    problem = __xargmatch_internal("--sort",optarg,sort_args,(char *)sort_types,4,argmatch_die);\u000a    sort_type = sort_types[problem];\u000a    uStack112 = CONCAT71(uVar16,1);\u000a    break;\u000a  case 0x8e:\u000a    uStack80 = 0x4036f8;\u000a    problem = __xargmatch_internal("--time",optarg,time_args,(char *)time_types,4,argmatch_die);\u000a    time_type = time_types[problem];\u000a    break;\u000a  case 0x8f:\u000a    pcStack96 = optarg;\u000a    break;\u000a  case 0xffffff7d:\u000a    spec = "vdir";\u000a    if (ls_mode == 2) {\u000a      spec = "dir";\u000a    }\u000a    command_name = "ls";\u000a    if (ls_mode != 1) {\u000a      command_name = spec;\u000a    }\u000a    local_48 = 0;\u000a    uStack80 = 0x403bb6;\u000a    version_etc(stdout,command_name,"GNU coreutils",Version,"Richard M. Stallman","David MacKenzie")\u000a    ;\u000a                    /* WARNING: Subroutine does not return */\u000a    uStack80 = 0x403bbd;\u000a    exit(0);\u000a  case 0xffffff7e:\u000a    uStack80 = 0x403bc4;\u000a    usage(0);\u000a  default:\u000a    uStack80 = 0x403bce;\u000a    usage(2);\u000a    goto LAB_00403bce;\u000a  case 0xffffffff:\u000a    if (output_block_size != 0) goto LAB_004037aa;\u000a    uStack80 = 0x40374c;\u000a    spec = getenv("LS_BLOCK_SIZE");\u000a    uStack80 = 0x403761;\u000a    human_options(spec,&human_output_opts,&output_block_size);\u000a    if (spec == (char *)0x0) {\u000a      uStack80 = 0x403770;\u000a      spec = getenv("BLOCK_SIZE");\u000a      if (spec != (char *)0x0) goto LAB_00403775;\u000a    }\u000a    else {\u000aLAB_00403775:\u000a      file_human_output_opts = human_output_opts;\u000a      file_output_block_size = output_block_size;\u000a    }\u000a    if (uStack104 != 0) {\u000a      human_output_opts = 0;\u000a      output_block_size = 0x400;\u000a    }\u000aLAB_004037aa:\u000a    max_idx = (ulong)(line_length != (line_length / 3) * 3) + line_length / 3;\u000a    uStack80 = 0x4037e2;\u000a    filename_quoting_options = clone_quoting_options((quoting_options *)0x0);\u000a    uStack80 = 0x4037f1;\u000a    qVar7 = get_quoting_style(filename_quoting_options);\u000a    if (qVar7 == escape_quoting_style) {\u000a      uStack80 = 0x40380c;\u000a      set_char_quoting(filename_quoting_options);\u000a    }\u000a    if ((slash < indicator_style) && (indicator_style + ~slash != 5)) {\u000a      spec = &DAT_0041655c + (ulong)(indicator_style + ~slash);\u000a      do {\u000a        uStack80 = 0x403844;\u000a        set_char_quoting(filename_quoting_options);\u000a        cVar1 = *spec;\u000a        spec = spec + 1;\u000a      } while (cVar1 != 0);\u000a    }\u000a    uStack80 = 0x403855;\u000a    dirname_quoting_options = clone_quoting_options((quoting_options *)0x0);\u000a    uStack80 = 0x40386e;\u000a    set_char_quoting(dirname_quoting_options);\u000a    if ((dired == 1) && (format != long_format)) {\u000a      dired = 0;\u000a    }\u000a    if (((time_type + ~time_mtime < 2) && ((uStack112 & 1) == 0)) && (format != long_format)) {\u000a      sort_type = sort_time;\u000a    }\u000a    else {\u000a      if (format == long_format) {\u000a        if (pcStack96 == (char *)0x0) {\u000a          uStack80 = 0x4038d9;\u000a          pcStack96 = getenv("TIME_STYLE");\u000a          if (pcStack96 == (char *)0x0) {\u000a            uStack80 = 0x4038eb;\u000a            pcStack96 = bad_cast("locale");\u000a          }\u000a        }\u000a        while( true ) {\u000a          uStack80 = 0x403906;\u000a          iVar4 = strncmp(pcStack96,"posix-",6);\u000a          if (iVar4 != 0) break;\u000a          uStack80 = 0x403914;\u000a          _Var3 = hard_locale();\u000a          if (_Var3 == false) {\u000a            return optind;\u000a          }\u000a          pcStack96 = pcStack96 + 6;\u000a        }\u000a        if (*pcStack96 == '+') {\u000a          spec = pcStack96 + 1;\u000a          uStack80 = 0x403934;\u000a          pcVar10 = strchr(spec,10);\u000a          command_name = spec;\u000a          if (pcVar10 != (char *)0x0) {\u000a            uStack80 = 0x403952;\u000a            command_name = strchr(pcVar10 + 1,10);\u000a            if (command_name != (char *)0x0) {\u000a              uStack80 = 0x403968;\u000a              uVar8 = dcgettext(0,"invalid time style format %s",5);\u000a              uStack80 = 0x403973;\u000a              command_name = quote(spec);\u000a              uStack80 = 0x403987;\u000a              error(2,0,uVar8,command_name);\u000a            }\u000a            *pcVar10 = 0;\u000a            command_name = pcVar10 + 1;\u000a          }\u000a        }\u000a        else {\u000a          uStack80 = 0x403a2c;\u000a          problem = argmatch(pcStack96,time_style_args,(char *)time_style_types,4);\u000a          spec = long_time_format[0];\u000a          command_name = long_time_format[1];\u000a          switch(problem) {\u000a          case 0:\u000a            spec = "%Y-%m-%d %H:%M:%S.%N %z";\u000a            command_name = "%Y-%m-%d %H:%M:%S.%N %z";\u000a            break;\u000a          case 1:\u000aswitchD_00403a3b_caseD_1:\u000a            spec = "%Y-%m-%d %H:%M";\u000a            command_name = "%Y-%m-%d %H:%M";\u000a            break;\u000a          case 2:\u000a            spec = "%Y-%m-%d ";\u000a            command_name = "%m-%d %H:%M";\u000a            break;\u000a          case 3:\u000a            uStack80 = 0x403b2e;\u000a            _Var3 = hard_locale();\u000a            spec = long_time_format[0];\u000a            command_name = long_time_format[1];\u000a            if (_Var3 != false) {\u000a              lVar14 = -0x10;\u000a              do {\u000a                uStack80 = 0x403b53;\u000a                uVar8 = dcgettext(0,*(undefined8 *)(UNKNOWN_SECURITY_CONTEXT + lVar14),2);\u000a                *(undefined8 *)(UNKNOWN_SECURITY_CONTEXT + lVar14) = uVar8;\u000a                lVar14 = lVar14 + 8;\u000a                spec = long_time_format[0];\u000a                command_name = long_time_format[1];\u000a              } while (lVar14 != 0);\u000a            }\u000a            break;\u000a          default:\u000a            uStack80 = 0x403a6d;\u000a            argmatch_invalid("time style",pcStack96,problem);\u000a            uStack80 = 0x403a7e;\u000a            spec = (char *)dcgettext(0,"Valid arguments are:\u005cn",5);\u000a            uStack80 = 0x403a8d;\u000a            fputs_unlocked(spec,stderr);\u000a            spec = "full-iso";\u000a            ppcVar13 = time_style_args;\u000a            do {\u000a              ppcVar13 = ppcVar13 + 1;\u000a              uStack80 = 0x403ab8;\u000a              __fprintf_chk(stderr,1,"  - [posix-]%s\u005cn",spec);\u000a              spec = *ppcVar13;\u000a            } while (spec != (char *)0x0);\u000a            uStack80 = 0x403ad5;\u000a            spec = (char *)dcgettext(0,"  - +FORMAT (e.g., +%H:%M) for a \u005c'date\u005c'-style format\u005cn",5)\u000a            ;\u000a            uStack80 = 0x403ae4;\u000a            fputs_unlocked(spec,stderr);\u000a            uStack80 = 0x403aee;\u000a            usage(2);\u000a            goto switchD_00403a3b_caseD_1;\u000a          case 0xbad1abe1:\u000a            break;\u000a          }\u000a        }\u000a        long_time_format[1] = command_name;\u000a        long_time_format[0] = spec;\u000a        uStack80 = 0x4039aa;\u000a        spec = strstr(long_time_format[0],"%b");\u000a        if (spec == (char *)0x0) {\u000a          uStack80 = 0x4039c0;\u000a          spec = strstr(long_time_format[1],"%b");\u000a          if (spec == (char *)0x0) {\u000a            return optind;\u000a          }\u000a        }\u000a        uStack80 = 0x4039ce;\u000a        sVar11 = abmon_init();\u000a        if (sVar11 == 0) {\u000a          uStack80 = 0x4039e8;\u000a          uVar8 = dcgettext(0,"error initializing month strings",5);\u000a          uStack80 = 0x4039f9;\u000a          error(0,0,uVar8,uVar8);\u000a        }\u000a      }\u000a    }\u000a    return optind;\u000a  }\u000aLAB_00403730:\u000a  bVar12 = (byte)uStack104;\u000aswitchD_00403134_caseD_6b:\u000a  uStack104 = (ulong)bVar12;\u000a  goto LAB_00403103;\u000aLAB_00403d90:\u000a  switch(bVar12 & 7) {\u000a  case 1:\u000a    iVar4 = (int)pcStack136;\u000a    cVar1 = *pcStack136;\u000a    if (cVar1 == '*') {\u000a      __ptr = (color_ext_type *)xmalloc(0x28);\u000a      __ptr->next = color_ext_list;\u000a      pcStack136 = pcStack136 + 1;\u000a      color_ext_list = __ptr;\u000a      (__ptr->ext).string = pcStack128;\u000a      _Var3 = get_funky_string(&pcStack128,&pcStack136,(size_t *)0x1);\u000a      bVar12 = (_Var3 == false) * 2 + 4;\u000a    }\u000a    else {\u000a      if (cVar1 == ':') {\u000a        bVar12 = 1;\u000a        pcStack136 = pcStack136 + 1;\u000a      }\u000a      else {\u000a        if (cVar1 == 0) goto LAB_00403ea8;\u000a        cStack140 = *pcStack136;\u000a        bVar12 = 2;\u000a        pcStack136 = pcStack136 + 1;\u000a      }\u000a    }\u000a    break;\u000a  case 2:\u000a    bVar12 = 6;\u000a    if (*pcStack136 != 0) {\u000a      cStack139 = *pcStack136;\u000a      bVar12 = 3;\u000a      pcStack136 = pcStack136 + 1;\u000a    }\u000a    break;\u000a  case 3:\u000a    spec = pcStack136 + 1;\u000a    cVar1 = *pcStack136;\u000a    bVar12 = 6;\u000a    pcStack136 = spec;\u000a    if (cVar1 == '=') {\u000a      lVar14 = -0xc0;\u000a      pbVar15 = color_indicator;\u000a      pcStack136 = spec;\u000a      do {\u000a        iVar4 = strcmp(&cStack140,*(char **)((long)indicator_name + lVar14 + 0xc0));\u000a        if (iVar4 == 0) {\u000a          pbVar15->string = pcStack128;\u000a          _Var3 = get_funky_string(&pcStack128,&pcStack136,(size_t *)0x0);\u000a          bVar12 = 1;\u000a          if (_Var3 != false) goto LAB_00403d90;\u000a          break;\u000a        }\u000a        pbVar15 = pbVar15 + 1;\u000a        lVar14 = lVar14 + 8;\u000a      } while (lVar14 != 0);\u000a      uVar8 = dcgettext(0,"unrecognized prefix: %s",5);\u000a      quote(&cStack140);\u000a      error(0,0,uVar8);\u000a      bVar12 = 6;\u000a    }\u000a    break;\u000a  case 4:\u000a    spec = pcStack136 + 1;\u000a    bVar12 = 6;\u000a    cVar1 = *pcStack136;\u000a    pcStack136 = spec;\u000a    if (cVar1 == '=') {\u000a      (__ptr->seq).string = pcStack128;\u000a      pcStack136 = spec;\u000a      _Var3 = get_funky_string(&pcStack128,&pcStack136,(size_t *)0x0);\u000a      bVar12 = (_Var3 == false) * 5 + 1;\u000a    }\u000a    break;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 6:\u000a    uVar8 = dcgettext(0,"unparsable value for LS_COLORS environment variable",5);\u000a    error(0,0,uVar8,uVar8);\u000a    free(color_buf);\u000a    iVar4 = extraout_EAX;\u000a    __ptr = color_ext_list;\u000a    while (__ptr != (color_ext_type *)0x0) {\u000a      pcVar2 = __ptr->next;\u000a      free(__ptr);\u000a      iVar4 = extraout_EAX_00;\u000a      __ptr = pcVar2;\u000a    }\u000a    print_with_color = false;\u000aLAB_00403ea8:\u000a    if ((color_indicator[7].len == 6) &&\u000a       (iVar4 = strncmp(color_indicator[7].string,"target",6), iVar4 == 0)) {\u000a      color_symlink_as_referent = 1;\u000a    }\u000a    return iVar4;\u000a  }\u000aswitchD_00403134_caseD_6c:\u000a  format = long_format;\u000a  goto LAB_00403730;\u000aswitchD_00403134_caseD_47:\u000a  print_group = 1;\u000a  goto LAB_00403730;\u000a}\u000a\u000a
p1242
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV EBP,EDI\nMOV byte ptr [0x0061d830],0x0\nMOV EAX,dword ptr [0x0061d528]\nCMP EAX,0x1\nJZ 0x00402f2f\nCMP EAX,0x3\nJZ 0x00402f61\nCMP EAX,0x2\nJNZ 0x00403bce\nMOV dword ptr [0x0061d634],0x2\nJMP 0x00402f6b\nMOV EDI,0x1\nCALL 0x00402180\nTEST EAX,EAX\nJZ 0x004039fe\nMOV dword ptr [0x0061d634],0x2\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x0040c040\nMOV AL,0x1\nMOV byte ptr [0x0061d830],AL\nJMP 0x00402f77\nMOV dword ptr [0x0061d634],0x0\nXOR EDI,EDI\nMOV ESI,0x7\nCALL 0x0040c040\nMOV dword ptr [0x0061d834],0x0\nMOV dword ptr [0x0061d738],0x0\nMOV byte ptr [0x0061d838],0x0\nMOV byte ptr [0x0061d839],0x0\nMOV byte ptr [0x0061d73d],0x0\nMOV dword ptr [0x0061d6c8],0x0\nMOV byte ptr [0x0061d83a],0x0\nMOV dword ptr [0x0061d6c0],0x1\nMOV byte ptr [0x0061d6cc],0x0\nMOV byte ptr [0x0061d6c4],0x0\nMOV dword ptr [0x0061d83c],0x0\nMOV qword ptr [0x0061d840],0x0\nMOV qword ptr [0x0061d848],0x0\nMOV byte ptr [0x0061d73c],0x0\nCALL 0x004056f0\nMOV qword ptr [0x0061d850],0x50\nMOV EDI,0x4163ed\nCALL 0x004020a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403051\nCMP byte ptr [R14],0x0\nJZ 0x00403051\nMOV RDI,R14\nCALL 0x00405780\nTEST AL,AL\nJNZ 0x00403051\nXOR EDI,EDI\nMOV ESI,0x4163f5\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x0040d430\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004025f0\nLEA RDX,[RSP + 0x10]\nMOV EDI,0x1\nMOV ESI,0x5413\nXOR EAX,EAX\nCALL 0x00402370\nCMP EAX,-0x1\nJZ 0x0040307d\nMOVZX EAX,word ptr [RSP + 0x12]\nTEST RAX,RAX\nJZ 0x0040307d\nMOV qword ptr [0x0061d850],RAX\nMOV EDI,0x416430\nCALL 0x004020a0\nMOV R14,RAX\nMOV qword ptr [0x0061d858],0x8\nTEST R14,R14\nJZ 0x004030ed\nLEA RCX,[RSP + 0x10]\nXOR ESI,ESI\nXOR EDX,EDX\nXOR R8D,R8D\nMOV RDI,R14\nCALL 0x0040fbd0\nTEST EAX,EAX\nJZ 0x004030e1\nXOR EDI,EDI\nMOV ESI,0x416438\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x0040d430\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004025f0\nJMP 0x004030ed\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [0x0061d858],RAX\nXOR R13D,R13D\nLEA RBX,[RSP + 0x10]\nXOR R12D,R12D\nXOR R14D,R14D\nJMP 0x00403103\nMOV R13B,CL\nMOV dword ptr [RSP + 0x10],0xffffffff\nMOV EDX,0x416476\nMOV ECX,0x412b70\nMOV EDI,EBP\nMOV RSI,R15\nMOV R8,RBX\nCALL 0x004022b0\nADD EAX,0x83\nCMP EAX,0x112\nJA 0x00403bc4\nMOV CL,0x1\nJMP qword ptr [0x4119c0 + RAX*0x8]\nCMP dword ptr [0x0061d634],0x0\nJZ 0x00403730\nMOV dword ptr [0x0061d634],0x1\nJMP 0x00403730\nCMP dword ptr [0x0061d83c],0x0\nJNZ 0x00403730\nMOV dword ptr [0x0061d83c],0x1\nJMP 0x00403730\nMOV EDI,0x4164bd\nCALL 0x004057d0\nMOV EDI,0x4164bc\nCALL 0x004057d0\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x2\nJMP 0x00403730\nMOV byte ptr [0x0061d741],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d6c8],0x3\nJMP 0x00403730\nMOV dword ptr [0x0061d6c0],0x3\nJMP 0x00403730\nMOV RDI,qword ptr [0x0061d5d8]\nCALL 0x004057d0\nJMP 0x00403730\nMOV dword ptr [0x0061d6c0],0x5\nJMP 0x00403730\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x0040c040\nJMP 0x00403730\nXOR EDI,EDI\nMOV ESI,0x5\nCALL 0x0040c040\nJMP 0x00403730\nMOV byte ptr [0x0061d6cc],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d738],0x2\nMOV R12B,0x1\nJMP 0x00403730\nMOV RBX,R14\nMOV R14,R12\nMOV R12,qword ptr [0x0061d5d8]\nXOR EDI,EDI\nMOV ESI,0x4164c0\nMOV EDX,0x5\nCALL 0x00402270\nMOV dword ptr [RSP],0x2\nMOV ESI,0x0\nXOR EDX,EDX\nMOV RCX,-0x1\nMOV R8D,0x417ce1\nMOV RDI,R12\nMOV R12,R14\nMOV R14,RBX\nLEA RBX,[RSP + 0x10]\nMOV R9,RAX\nCALL 0x0040fad0\nMOV qword ptr [0x0061d858],RAX\nJMP 0x00403730\nMOV dword ptr [0x0061d738],0xffffffff\nMOV R12B,0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d738],0x1\nMOV R12B,0x1\nJMP 0x00403730\nMOV byte ptr [0x0061d73c],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d83c],0x2\nJMP 0x00403730\nXOR EDI,EDI\nMOV ESI,0x7\nCALL 0x0040c040\nJMP 0x00403730\nMOV dword ptr [0x0061d834],0x1\nJMP 0x00403730\nMOV byte ptr [0x0061d6c4],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d83c],0x2\nMOV dword ptr [0x0061d738],0xffffffff\nCMP dword ptr [0x0061d634],0x0\nJNZ 0x00403323\nMOV R12D,0x1\nMOV EDI,0x1\nCALL 0x00402180\nCMP EAX,0x1\nSBB R12D,-0x1\nMOV dword ptr [0x0061d634],R12D\nMOV byte ptr [0x0061d73d],0x0\nMOV byte ptr [0x0061d630],0x0\nMOV R12B,0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x0\nMOV byte ptr [0x0061d860],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d864],0xb0\nMOV dword ptr [0x0061d868],0xb0\nJMP 0x0040367b\nMOV byte ptr [0x0061d83a],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x4\nJMP 0x00403730\nMOV byte ptr [0x0061d839],0x1\nMOV dword ptr [0x0061d634],0x0\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x0\nMOV byte ptr [0x0061d878],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d6c8],0x1\nJMP 0x00403730\nMOV byte ptr [0x0061d830],0x1\nJMP 0x00403730\nMOV byte ptr [0x0061d838],0x1\nJMP 0x00403730\nMOV byte ptr [0x0061d73d],0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d738],0x4\nMOV R12B,0x1\nJMP 0x00403730\nMOV dword ptr [0x0061d834],0x2\nJMP 0x00403730\nMOV dword ptr [0x0061d738],0x3\nMOV R12B,0x1\nJMP 0x00403730\nMOV RDI,qword ptr [0x0061d5d8]\nCALL 0x00405780\nTEST AL,AL\nJNZ 0x00403730\nXOR EDI,EDI\nMOV ESI,0x4164a9\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,R14\nMOV R14,R12\nMOV R12,RAX\nMOV RDI,qword ptr [0x0061d5d8]\nCALL 0x0040d430\nMOV R8,RAX\nMOV EDI,0x2\nMOV ESI,0x0\nMOV EDX,0x4164a2\nXOR EAX,EAX\nMOV RCX,R12\nMOV R12,R14\nMOV R14,RBX\nLEA RBX,[RSP + 0x10]\nCALL 0x004025f0\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x3\nJMP 0x00403730\nMOV byte ptr [0x0061d879],0x1\nJMP 0x00403730\nMOV RDI,qword ptr [0x0061d5d8]\nMOV ESI,0x61d864\nMOV EDX,0x61d870\nCALL 0x0040af80\nTEST EAX,EAX\nJNZ 0x00403bd3\nMOV EAX,dword ptr [0x0061d864]\nMOV dword ptr [0x0061d868],EAX\nMOV RAX,qword ptr [0x0061d870]\nMOV qword ptr [0x0061d500],RAX\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nTEST RSI,RSI\nJZ 0x00403710\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x4164f1\nMOV EDX,0x413200\nMOV ECX,0x4131d0\nMOV R8D,0x4\nCALL 0x00408e80\nMOV EAX,dword ptr [0x4131d0 + RAX*0x4]\nCMP EAX,0x1\nJZ 0x00403710\nCMP EAX,0x2\nJNZ 0x00403724\nMOV EDI,0x1\nCALL 0x00402180\nTEST EAX,EAX\nSETNZ byte ptr [0x0061d630]\nJNZ 0x00403717\nJMP 0x00403730\nMOV dword ptr [0x0061d6c0],0x4\nJMP 0x00403730\nMOV dword ptr [0x0061d6c8],0x2\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x4164df\nMOV EDX,0x413190\nMOV ECX,0x413170\nMOV R8D,0x4\nCALL 0x00408e80\nMOV EAX,dword ptr [0x413170 + RAX*0x4]\nMOV dword ptr [0x0061d634],EAX\nJMP 0x00403730\nMOV dword ptr [0x0061d634],0x0\nMOV EDI,0x4164e8\nCALL 0x00405800\nMOV R14,RAX\nJMP 0x00403730\nMOV byte ptr [0x0061d73f],0x1\nJMP 0x00403730\nMOV EDI,0x10\nCALL 0x0040f910\nMOV RCX,qword ptr [0x0061d5d8]\nMOV qword ptr [RAX],RCX\nMOV RCX,qword ptr [0x0061d848]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [0x0061d848],RAX\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x4164f9\nMOV EDX,0x413260\nMOV ECX,0x413250\nMOV R8D,0x4\nCALL 0x00408e80\nMOV EAX,dword ptr [0x413250 + RAX*0x4]\nMOV dword ptr [0x0061d6c8],EAX\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x41650b\nMOV EDX,0x4176a0\nMOV ECX,0x417700\nMOV R8D,0x4\nCALL 0x00408e80\nMOV ESI,dword ptr [0x417700 + RAX*0x4]\nXOR EDI,EDI\nCALL 0x0040c040\nJMP 0x00403730\nMOV byte ptr [0x0061d830],0x0\nJMP 0x00403730\nMOV dword ptr [0x0061d864],0x90\nMOV dword ptr [0x0061d868],0x90\nMOV qword ptr [0x0061d870],0x1\nMOV qword ptr [0x0061d500],0x1\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x4164d1\nMOV EDX,0x4130f0\nMOV ECX,0x4130d0\nMOV R8D,0x4\nCALL 0x00408e80\nMOV EAX,dword ptr [0x4130d0 + RAX*0x4]\nMOV dword ptr [0x0061d738],EAX\nMOV R12B,0x1\nJMP 0x00403730\nMOV RSI,qword ptr [0x0061d5d8]\nMOV R9,qword ptr [0x0061d538]\nMOV EDI,0x4164d8\nMOV EDX,0x413140\nMOV ECX,0x413120\nMOV R8D,0x4\nCALL 0x00408e80\nMOV EAX,dword ptr [0x413120 + RAX*0x4]\nMOV dword ptr [0x0061d834],EAX\nJMP 0x00403730\nMOV R14,qword ptr [0x0061d5d8]\nJMP 0x00403730\nMOV byte ptr [0x0061d630],0x1\nMOV qword ptr [0x0061d858],0x0\nJMP 0x00403730\nMOV byte ptr [0x0061d630],0x0\nNOP dword ptr [RAX + RAX*0x1]\nMOV ECX,R13D\nJMP 0x00403100\nCMP qword ptr [0x0061d870],0x0\nJNZ 0x004037aa\nMOV EDI,0x41654d\nCALL 0x004020a0\nMOV RBX,RAX\nMOV ESI,0x61d864\nMOV EDX,0x61d870\nMOV RDI,RBX\nCALL 0x0040af80\nTEST RBX,RBX\nJNZ 0x00403775\nMOV EDI,0x416550\nCALL 0x004020a0\nTEST RAX,RAX\nJZ 0x0040378f\nMOV EAX,dword ptr [0x0061d864]\nMOV dword ptr [0x0061d868],EAX\nMOV RAX,qword ptr [0x0061d870]\nMOV qword ptr [0x0061d500],RAX\nTEST R13B,0x1\nJZ 0x004037aa\nMOV dword ptr [0x0061d864],0x0\nMOV qword ptr [0x0061d870],0x400\nMOV RCX,qword ptr [0x0061d850]\nMOV RDX,-0x5555555555555555\nMOV RAX,RCX\nMUL RDX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nXOR ESI,ESI\nCMP RCX,RAX\nSETNZ SIL\nADD RSI,RDX\nMOV qword ptr [0x0061d880],RSI\nXOR EDI,EDI\nCALL 0x0040bff0\nMOV qword ptr [0x0061d828],RAX\nMOV RDI,RAX\nCALL 0x0040c030\nCMP EAX,0x7\nJNZ 0x0040380c\nMOV RDI,qword ptr [0x0061d828]\nMOV ESI,0x20\nMOV EDX,0x1\nCALL 0x0040c050\nMOV ECX,dword ptr [0x0061d6c8]\nCMP ECX,0x2\nJC 0x0040384e\nADD ECX,-0x2\nCMP ECX,0x5\nJZ 0x0040384e\nMOV AL,byte ptr [0x41655b + RCX]\nLEA RBX,[0x41655c + RCX]\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [0x0061d828]\nMOVSX ESI,AL\nMOV EDX,0x1\nCALL 0x0040c050\nMOVZX EAX,byte ptr [RBX]\nINC RBX\nTEST AL,AL\nJNZ 0x00403830\nXOR EDI,EDI\nCALL 0x0040bff0\nMOV qword ptr [0x0061d888],RAX\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RAX\nCALL 0x0040c050\nMOV EAX,dword ptr [0x0061d634]\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x0040388e\nTEST EAX,EAX\nJZ 0x0040388e\nMOV byte ptr [0x0061d741],0x0\nMOV EAX,dword ptr [0x0061d634]\nMOV ECX,dword ptr [0x0061d834]\nDEC ECX\nCMP ECX,0x1\nJA 0x004038b1\nTEST R12B,0x1\nJNZ 0x004038b1\nTEST EAX,EAX\nJZ 0x004038b1\nMOV dword ptr [0x0061d738],0x4\nJMP 0x004038b5\nTEST EAX,EAX\nJZ 0x004038ca\nMOV EAX,dword ptr [0x0061d5d0]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R14,R14\nJNZ 0x004038f4\nMOV EDI,0x416561\nCALL 0x004020a0\nMOV R14,RAX\nTEST R14,R14\nJNZ 0x004038f4\nMOV EDI,0x4146c9\nCALL 0x00405800\nMOV R14,RAX\nJMP 0x004038f4\nADD R14,0x6\nMOV ESI,0x413288\nMOV EDX,0x6\nMOV RDI,R14\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x0040391a\nMOV EDI,0x2\nCALL 0x00409820\nTEST AL,AL\nJNZ 0x004038f0\nJMP 0x004038b5\nCMP byte ptr [R14],0x2b\nJNZ 0x00403a15\nINC R14\nMOV ESI,0xa\nMOV RDI,R14\nCALL 0x004022d0\nMOV RBP,RAX\nTEST RBP,RBP\nMOV RBX,R14\nJZ 0x0040398b\nMOV RBX,RBP\nINC RBX\nMOV ESI,0xa\nMOV RDI,RBX\nCALL 0x004022d0\nTEST RAX,RAX\nJZ 0x00403987\nXOR EDI,EDI\nMOV ESI,0x41656c\nMOV EDX,0x5\nCALL 0x00402270\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x0040d430\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x004025f0\nMOV byte ptr [RBP],0x0\nMOV qword ptr [0x0061d510],R14\nMOV qword ptr [0x0061d518],RBX\nMOV RDI,qword ptr [0x0061d510]\nMOV ESI,0x416621\nCALL 0x00402700\nTEST RAX,RAX\nJNZ 0x004039c9\nMOV RDI,qword ptr [0x0061d518]\nMOV ESI,0x416621\nCALL 0x00402700\nTEST RAX,RAX\nJZ 0x004038b5\nCALL 0x00405810\nTEST RAX,RAX\nJNZ 0x004038b5\nXOR EDI,EDI\nMOV ESI,0x416624\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004025f0\nJMP 0x004038b5\nMOV dword ptr [0x0061d634],0x1\nXOR EAX,EAX\nMOV byte ptr [0x0061d830],AL\nJMP 0x00402f77\nMOV ESI,0x413290\nMOV EDX,0x4132c0\nMOV ECX,0x4\nMOV RDI,R14\nCALL 0x00408c20\nTEST RAX,RAX\nJS 0x00403a5d\nCMP RAX,0x3\nJA 0x00403999\nJMP qword ptr [0x412258 + RAX*0x8]\nMOV qword ptr [0x0061d518],0x4165f0\nMOV qword ptr [0x0061d510],0x4165f0\nJMP 0x00403999\nMOV EDI,0x416589\nMOV RSI,R14\nMOV RDX,RAX\nCALL 0x00408d20\nXOR EDI,EDI\nMOV ESI,0x416594\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d600]\nMOV RDI,RAX\nCALL 0x004023c0\nMOV ECX,0x4164e8\nMOV EBX,0x413298\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0061d600]\nMOV ESI,0x1\nMOV EDX,0x4165aa\nXOR EAX,EAX\nCALL 0x004026b0\nMOV RCX,qword ptr [RBX]\nADD RBX,0x8\nTEST RCX,RCX\nJNZ 0x00403aa0\nXOR EDI,EDI\nMOV ESI,0x4165ba\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d600]\nMOV RDI,RAX\nCALL 0x004023c0\nMOV EDI,0x2\nCALL 0x00405150\nMOV qword ptr [0x0061d518],0x416608\nMOV qword ptr [0x0061d510],0x416608\nJMP 0x00403999\nMOV qword ptr [0x0061d510],0x416617\nMOV qword ptr [0x0061d518],0x41660b\nJMP 0x00403999\nMOV EDI,0x2\nCALL 0x00409820\nTEST AL,AL\nJZ 0x00403999\nMOV RBX,-0x10\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [0x61d520 + RBX]\nXOR EDI,EDI\nMOV EDX,0x2\nCALL 0x00402270\nMOV qword ptr [0x61d520 + RBX],RAX\nADD RBX,0x8\nJNZ 0x00403b40\nJMP 0x00403999\nMOV RDI,qword ptr [0x0061d5c8]\nMOV EAX,dword ptr [0x0061d528]\nCMP EAX,0x2\nMOV ECX,0x41677c\nMOV EDX,0x416342\nCMOVZ RDX,RCX\nCMP EAX,0x1\nMOV ESI,0x416526\nCMOVNZ RSI,RDX\nMOV RCX,qword ptr [0x0061d530]\nMOV qword ptr [RSP],0x0\nMOV EDX,0x41651b\nMOV R8D,0x416529\nMOV R9D,0x41653d\nXOR EAX,EAX\nCALL 0x0040f7e0\nXOR EDI,EDI\nCALL 0x00402690\nXOR EDI,EDI\nCALL 0x00405150\nMOV EDI,0x2\nCALL 0x00405150\nCALL 0x00402100\nMOV ESI,dword ptr [RSP + 0x10]\nMOV R8,qword ptr [0x0061d5d8]\nXOR EDX,EDX\nMOV ECX,0x412b70\nMOV EDI,EAX\nCALL 0x0040feb0\nNOP dword ptr [RAX]\n'
p1243
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n89 fd\nc6 05 26 a9 21 00 00\n8b 05 18 a6 21 00\n83 f8 01\n74 1a\n83 f8 03\n74 47\n83 f8 02\n0f 85 ab 0c 00 00\nc7 05 07 a7 21 00 02 00 00 00\neb 3c\nbf 01 00 00 00\ne8 47 f2 ff ff\n85 c0\n0f 84 bd 0a 00 00\nc7 05 e9 a6 21 00 02 00 00 00\n31 ff\nbe 03 00 00 00\ne8 e9 90 00 00\nb0 01\n88 05 d1 a8 21 00\neb 16\nc7 05 c9 a6 21 00 00 00 00 00\n31 ff\nbe 07 00 00 00\ne8 c9 90 00 00\nc7 05 b3 a8 21 00 00 00 00 00\nc7 05 ad a7 21 00 00 00 00 00\nc6 05 a6 a8 21 00 00\nc6 05 a0 a8 21 00 00\nc6 05 9d a7 21 00 00\nc7 05 1e a7 21 00 00 00 00 00\nc6 05 89 a8 21 00 00\nc7 05 05 a7 21 00 01 00 00 00\nc6 05 0a a7 21 00 00\nc6 05 fb a6 21 00 00\nc7 05 69 a8 21 00 00 00 00 00\n48 c7 05 62 a8 21 00 00 00 00 00\n48 c7 05 5f a8 21 00 00 00 00 00\nc6 05 4c a7 21 00 00\ne8 fb 26 00 00\n48 c7 05 50 a8 21 00 50 00 00 00\nbf ed 63 41 00\ne8 96 f0 ff ff\n49 89 c6\n4d 85 f6\n74 3f\n41 80 3e 00\n74 39\n4c 89 f7\ne8 60 27 00 00\n84 c0\n75 2d\n31 ff\nbe f5 63 41 00\nba 05 00 00 00\ne8 3b f2 ff ff\n48 89 c3\n4c 89 f7\ne8 f0 a3 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 9f f5 ff ff\n48 8d 54 24 10\nbf 01 00 00 00\nbe 13 54 00 00\n31 c0\ne8 09 f3 ff ff\n83 f8 ff\n74 11\n0f b7 44 24 12\n48 85 c0\n74 07\n48 89 05 d3 a7 21 00\nbf 30 64 41 00\ne8 19 f0 ff ff\n49 89 c6\n48 c7 05 c3 a7 21 00 08 00 00 00\n4d 85 f6\n74 53\n48 8d 4c 24 10\n31 f6\n31 d2\n45 31 c0\n4c 89 f7\ne8 22 cb 00 00\n85 c0\n74 2f\n31 ff\nbe 38 64 41 00\nba 05 00 00 00\ne8 ad f1 ff ff\n48 89 c3\n4c 89 f7\ne8 62 a3 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 11 f5 ff ff\neb 0c\n48 8b 44 24 10\n48 89 05 6b a7 21 00\n45 31 ed\n48 8d 5c 24 10\n45 31 e4\n45 31 f6\neb 06\n41 88 cd\nc7 44 24 10 ff ff ff ff\nba 76 64 41 00\nb9 70 2b 41 00\n89 ef\n4c 89 fe\n49 89 d8\ne8 8e f1 ff ff\n05 83 00 00 00\n3d 12 01 00 00\n0f 87 92 0a 00 00\nb1 01\nff 24 c5 c0 19 41 00\n83 3d f2 a4 21 00 00\n0f 84 e8 05 00 00\nc7 05 e2 a4 21 00 01 00 00 00\ne9 d9 05 00 00\n83 3d de a6 21 00 00\n0f 85 cc 05 00 00\nc7 05 ce a6 21 00 01 00 00 00\ne9 bd 05 00 00\nbf bd 64 41 00\ne8 53 26 00 00\nbf bc 64 41 00\ne8 49 26 00 00\ne9 a4 05 00 00\nc7 05 9e a4 21 00 02 00 00 00\ne9 95 05 00 00\nc6 05 9f a5 21 00 01\ne9 89 05 00 00\nc7 05 17 a5 21 00 03 00 00 00\ne9 7a 05 00 00\nc7 05 00 a5 21 00 03 00 00 00\ne9 6b 05 00 00\n48 8b 3d 0c a4 21 00\ne8 ff 25 00 00\ne9 5a 05 00 00\nc7 05 e0 a4 21 00 05 00 00 00\ne9 4b 05 00 00\n31 ff\n31 f6\ne8 52 8e 00 00\ne9 3d 05 00 00\n31 ff\nbe 05 00 00 00\ne8 41 8e 00 00\ne9 2c 05 00 00\nc6 05 c1 a4 21 00 01\ne9 20 05 00 00\nc7 05 1e a5 21 00 02 00 00 00\n41 b4 01\ne9 0e 05 00 00\n4c 89 f3\n4d 89 e6\n4c 8b 25 a9 a3 21 00\n31 ff\nbe c0 64 41 00\nba 05 00 00 00\ne8 30 f0 ff ff\nc7 04 24 02 00 00 00\nbe 00 00 00 00\n31 d2\n48 c7 c1 ff ff ff ff\n41 b8 e1 7c 41 00\n4c 89 e7\n4d 89 f4\n49 89 de\n48 8d 5c 24 10\n49 89 c1\ne8 5f c8 00 00\n48 89 05 e0 a5 21 00\ne9 b3 04 00 00\nc7 05 b1 a4 21 00 ff ff ff ff\n41 b4 01\ne9 a1 04 00 00\nc7 05 9f a4 21 00 01 00 00 00\n41 b4 01\ne9 8f 04 00 00\nc6 05 94 a4 21 00 01\ne9 83 04 00 00\nc7 05 85 a5 21 00 02 00 00 00\ne9 74 04 00 00\n31 ff\nbe 07 00 00 00\ne8 78 8d 00 00\ne9 63 04 00 00\nc7 05 5d a5 21 00 01 00 00 00\ne9 54 04 00 00\nc6 05 e1 a3 21 00 01\ne9 48 04 00 00\nc7 05 4a a5 21 00 02 00 00 00\nc7 05 3c a4 21 00 ff ff ff ff\n83 3d 31 a3 21 00 00\n75 1e\n41 bc 01 00 00 00\nbf 01 00 00 00\ne8 6b ee ff ff\n83 f8 01\n41 83 dc ff\n44 89 25 11 a3 21 00\nc6 05 13 a4 21 00 00\nc6 05 ff a2 21 00 00\n41 b4 01\ne9 f7 03 00 00\nc7 05 f1 a2 21 00 00 00 00 00\nc6 05 16 a5 21 00 01\ne9 e1 03 00 00\nc7 05 0b a5 21 00 b0 00 00 00\nc7 05 05 a5 21 00 b0 00 00 00\ne9 13 03 00 00\nc6 05 cb a4 21 00 01\ne9 bc 03 00 00\nc7 05 b6 a2 21 00 04 00 00 00\ne9 ad 03 00 00\nc6 05 af a4 21 00 01\nc7 05 a0 a2 21 00 00 00 00 00\ne9 97 03 00 00\nc7 05 91 a2 21 00 00 00 00 00\nc6 05 ce a4 21 00 01\ne9 81 03 00 00\nc7 05 0f a3 21 00 01 00 00 00\ne9 72 03 00 00\nc6 05 6b a4 21 00 01\ne9 66 03 00 00\nc6 05 67 a4 21 00 01\ne9 5a 03 00 00\nc6 05 60 a3 21 00 01\ne9 4e 03 00 00\nc7 05 4c a3 21 00 04 00 00 00\n41 b4 01\ne9 3c 03 00 00\nc7 05 36 a4 21 00 02 00 00 00\ne9 2d 03 00 00\nc7 05 2b a3 21 00 03 00 00 00\n41 b4 01\ne9 1b 03 00 00\n48 8b 3d bc a1 21 00\ne8 5f 23 00 00\n84 c0\n0f 85 07 03 00 00\n31 ff\nbe a9 64 41 00\nba 05 00 00 00\ne8 36 ee ff ff\n4c 89 f3\n4d 89 e6\n49 89 c4\n48 8b 3d 8e a1 21 00\ne8 e1 9f 00 00\n49 89 c0\nbf 02 00 00 00\nbe 00 00 00 00\nba a2 64 41 00\n31 c0\n4c 89 e1\n4d 89 f4\n49 89 de\n48 8d 5c 24 10\ne8 7a f1 ff ff\ne9 b5 02 00 00\nc7 05 af a1 21 00 03 00 00 00\ne9 a6 02 00 00\nc6 05 e8 a3 21 00 01\ne9 9a 02 00 00\n48 8b 3d 3b a1 21 00\nbe 64 d8 61 00\nba 70 d8 61 00\ne8 d4 7a 00 00\n85 c0\n0f 85 1f 07 00 00\n8b 05 aa a3 21 00\n89 05 a8 a3 21 00\n48 8b 05 a9 a3 21 00\n48 89 05 32 a0 21 00\ne9 5d 02 00 00\n48 8b 35 fe a0 21 00\n48 85 f6\n0f 84 2d 02 00 00\n4c 8b 0d 4e a0 21 00\nbf f1 64 41 00\nba 00 32 41 00\nb9 d0 31 41 00\n41 b8 04 00 00 00\ne8 7c 59 00 00\n8b 04 85 d0 31 41 00\n83 f8 01\n0f 84 fc 01 00 00\n83 f8 02\n0f 85 07 02 00 00\nbf 01 00 00 00\ne8 59 ec ff ff\n85 c0\n0f 95 05 00 a1 21 00\n0f 85 e1 01 00 00\ne9 f5 01 00 00\nc7 05 7b a1 21 00 04 00 00 00\ne9 e6 01 00 00\nc7 05 74 a1 21 00 02 00 00 00\ne9 d7 01 00 00\n48 8b 35 78 a0 21 00\n4c 8b 0d d1 9f 21 00\nbf df 64 41 00\nba 90 31 41 00\nb9 70 31 41 00\n41 b8 04 00 00 00\ne8 ff 58 00 00\n8b 04 85 70 31 41 00\n89 05 a6 a0 21 00\ne9 9d 01 00 00\nc7 05 97 a0 21 00 00 00 00 00\nbf e8 64 41 00\ne8 59 22 00 00\n49 89 c6\ne9 81 01 00 00\nc6 05 89 a1 21 00 01\ne9 75 01 00 00\nbf 10 00 00 00\ne8 4b c3 00 00\n48 8b 0d 0c a0 21 00\n48 89 08\n48 8b 0d 72 a2 21 00\n48 89 48 08\n48 89 05 67 a2 21 00\ne9 4a 01 00 00\n48 8b 35 eb 9f 21 00\n4c 8b 0d 44 9f 21 00\nbf f9 64 41 00\nba 60 32 41 00\nb9 50 32 41 00\n41 b8 04 00 00 00\ne8 72 58 00 00\n8b 04 85 50 32 41 00\n89 05 ad a0 21 00\ne9 10 01 00 00\n48 8b 35 b1 9f 21 00\n4c 8b 0d 0a 9f 21 00\nbf 0b 65 41 00\nba a0 76 41 00\nb9 00 77 41 00\n41 b8 04 00 00 00\ne8 38 58 00 00\n8b 34 85 00 77 41 00\n31 ff\ne8 ea 89 00 00\ne9 d5 00 00 00\nc6 05 ce a1 21 00 00\ne9 c9 00 00 00\nc7 05 f3 a1 21 00 90 00 00 00\nc7 05 ed a1 21 00 90 00 00 00\n48 c7 05 ea a1 21 00 01 00 00 00\n48 c7 05 6f 9e 21 00 01 00 00 00\ne9 9a 00 00 00\n48 8b 35 3b 9f 21 00\n4c 8b 0d 94 9e 21 00\nbf d1 64 41 00\nba f0 30 41 00\nb9 d0 30 41 00\n41 b8 04 00 00 00\ne8 c2 57 00 00\n8b 04 85 d0 30 41 00\n89 05 6d a0 21 00\n41 b4 01\neb 60\n48 8b 35 01 9f 21 00\n4c 8b 0d 5a 9e 21 00\nbf d8 64 41 00\nba 40 31 41 00\nb9 20 31 41 00\n41 b8 04 00 00 00\ne8 88 57 00 00\n8b 04 85 20 31 41 00\n89 05 2f a1 21 00\neb 29\n4c 8b 35 ca 9e 21 00\neb 20\nc6 05 19 9f 21 00 01\n48 c7 05 36 a1 21 00 00 00 00 00\neb 0c\nc6 05 05 9f 21 00 00\n0f 1f 44 00 00\n44 89 e9\ne9 c8 f9 ff ff\n48 83 3d 30 a1 21 00 00\n75 68\nbf 4d 65 41 00\ne8 54 e9 ff ff\n48 89 c3\nbe 64 d8 61 00\nba 70 d8 61 00\n48 89 df\ne8 1f 78 00 00\n48 85 db\n75 0f\nbf 50 65 41 00\ne8 30 e9 ff ff\n48 85 c0\n74 1a\n8b 05 e9 a0 21 00\n89 05 e7 a0 21 00\n48 8b 05 e8 a0 21 00\n48 89 05 71 9d 21 00\n41 f6 c5 01\n74 15\nc7 05 c5 a0 21 00 00 00 00 00\n48 c7 05 c6 a0 21 00 00 04 00 00\n48 8b 0d 9f a0 21 00\n48 ba ab aa aa aa aa aa aa aa\n48 89 c8\n48 f7 e2\n48 d1 ea\n48 8d 04 52\n31 f6\n48 39 c1\n40 0f 95 c6\n48 01 d6\n48 89 35 a5 a0 21 00\n31 ff\ne8 0e 88 00 00\n48 89 05 3f a0 21 00\n48 89 c7\ne8 3f 88 00 00\n83 f8 07\n75 16\n48 8b 3d 2b a0 21 00\nbe 20 00 00 00\nba 01 00 00 00\ne8 44 88 00 00\n8b 0d b6 9e 21 00\n83 f9 02\n72 37\n83 c1 fe\n83 f9 05\n74 2f\n8a 81 5b 65 41 00\n48 8d 99 5c 65 41 00\n0f 1f 40 00\n48 8b 3d f1 9f 21 00\n0f be f0\nba 01 00 00 00\ne8 0c 88 00 00\n0f b6 03\n48 ff c3\n84 c0\n75 e2\n31 ff\ne8 9b 87 00 00\n48 89 05 2c a0 21 00\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 c7\ne8 e2 87 00 00\n8b 05 c0 9d 21 00\n80 3d c6 9e 21 00 01\n75 11\n85 c0\n74 0d\nc6 05 b9 9e 21 00 00\n8b 05 a6 9d 21 00\n8b 0d a0 9f 21 00\nff c9\n83 f9 01\n77 16\n41 f6 c4 01\n75 10\n85 c0\n74 0c\nc7 05 89 9e 21 00 04 00 00 00\neb 04\n85 c0\n74 15\n8b 05 15 9d 21 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 85 f6\n75 25\nbf 61 65 41 00\ne8 c7 e7 ff ff\n49 89 c6\n4d 85 f6\n75 13\nbf c9 46 41 00\ne8 15 1f 00 00\n49 89 c6\neb 04\n49 83 c6 06\nbe 88 32 41 00\nba 06 00 00 00\n4c 89 f7\ne8 1a e8 ff ff\n85 c0\n75 10\nbf 02 00 00 00\ne8 0c 5f 00 00\n84 c0\n75 d8\neb 9b\n41 80 3e 2b\n0f 85 f1 00 00 00\n49 ff c6\nbe 0a 00 00 00\n4c 89 f7\ne8 9c e9 ff ff\n48 89 c5\n48 85 ed\n4c 89 f3\n74 4c\n48 89 eb\n48 ff c3\nbe 0a 00 00 00\n48 89 df\ne8 7e e9 ff ff\n48 85 c0\n74 30\n31 ff\nbe 6c 65 41 00\nba 05 00 00 00\ne8 08 e9 ff ff\n49 89 c7\n4c 89 f7\ne8 bd 9a 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 69 ec ff ff\nc6 45 00 00\n4c 89 35 7e 9b 21 00\n48 89 1d 7f 9b 21 00\n48 8b 3d 70 9b 21 00\nbe 21 66 41 00\ne8 56 ed ff ff\n48 85 c0\n75 1a\n48 8b 3d 62 9b 21 00\nbe 21 66 41 00\ne8 40 ed ff ff\n48 85 c0\n0f 84 ec fe ff ff\ne8 42 1e 00 00\n48 85 c0\n0f 85 de fe ff ff\n31 ff\nbe 24 66 41 00\nba 05 00 00 00\ne8 88 e8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 f7 eb ff ff\ne9 b7 fe ff ff\nc7 05 2c 9c 21 00 01 00 00 00\n31 c0\n88 05 20 9e 21 00\ne9 62 f5 ff ff\nbe 90 32 41 00\nba c0 32 41 00\nb9 04 00 00 00\n4c 89 f7\ne8 f4 51 00 00\n48 85 c0\n78 2c\n48 83 f8 03\n0f 87 5e ff ff ff\nff 24 c5 58 22 41 00\n48 c7 05 cb 9a 21 00 f0 65 41 00\n48 c7 05 b8 9a 21 00 f0 65 41 00\ne9 3c ff ff ff\nbf 89 65 41 00\n4c 89 f6\n48 89 c2\ne8 b3 52 00 00\n31 ff\nbe 94 65 41 00\nba 05 00 00 00\ne8 f2 e7 ff ff\n48 8b 35 7b 9b 21 00\n48 89 c7\ne8 33 e9 ff ff\nb9 e8 64 41 00\nbb 98 32 41 00\n66 0f 1f 84 00 00 00 00 00\n48 8b 3d 59 9b 21 00\nbe 01 00 00 00\nba aa 65 41 00\n31 c0\ne8 f8 eb ff ff\n48 8b 0b\n48 83 c3 08\n48 85 c9\n75 dc\n31 ff\nbe ba 65 41 00\nba 05 00 00 00\ne8 9b e7 ff ff\n48 8b 35 24 9b 21 00\n48 89 c7\ne8 dc e8 ff ff\nbf 02 00 00 00\ne8 62 16 00 00\n48 c7 05 1f 9a 21 00 08 66 41 00\n48 c7 05 0c 9a 21 00 08 66 41 00\ne9 90 fe ff ff\n48 c7 05 fc 99 21 00 17 66 41 00\n48 c7 05 f9 99 21 00 0b 66 41 00\ne9 75 fe ff ff\nbf 02 00 00 00\ne8 f2 5c 00 00\n84 c0\n0f 84 63 fe ff ff\n48 c7 c3 f0 ff ff ff\n0f 1f 00\n48 8b b3 20 d5 61 00\n31 ff\nba 02 00 00 00\ne8 1d e7 ff ff\n48 89 83 20 d5 61 00\n48 83 c3 08\n75 e0\ne9 34 fe ff ff\n48 8b 3d 5c 9a 21 00\n8b 05 b6 99 21 00\n83 f8 02\nb9 7c 67 41 00\nba 42 63 41 00\n48 0f 44 d1\n83 f8 01\nbe 26 65 41 00\n48 0f 45 f2\n48 8b 0d 9a 99 21 00\n48 c7 04 24 00 00 00 00\nba 1b 65 41 00\n41 b8 29 65 41 00\n41 b9 3d 65 41 00\n31 c0\ne8 2a bc 00 00\n31 ff\ne8 d3 ea ff ff\n31 ff\ne8 8c 15 00 00\nbf 02 00 00 00\ne8 82 15 00 00\ne8 2d e5 ff ff\n8b 74 24 10\n4c 8b 05 fa 99 21 00\n31 d2\nb9 70 2b 41 00\n89 c7\ne8 c4 c2 00 00\n0f 1f 40 00\n'
p1244
S'.text:0000000000402ef0\n.text:0000000000402ef1\n.text:0000000000402ef3\n.text:0000000000402ef5\n.text:0000000000402ef7\n.text:0000000000402ef9\n.text:0000000000402efa\n.text:0000000000402efe\n.text:0000000000402f01\n.text:0000000000402f03\n.text:0000000000402f0a\n.text:0000000000402f10\n.text:0000000000402f13\n.text:0000000000402f15\n.text:0000000000402f18\n.text:0000000000402f1a\n.text:0000000000402f1d\n.text:0000000000402f23\n.text:0000000000402f2d\n.text:0000000000402f2f\n.text:0000000000402f34\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f41\n.text:0000000000402f4b\n.text:0000000000402f4d\n.text:0000000000402f52\n.text:0000000000402f57\n.text:0000000000402f59\n.text:0000000000402f5f\n.text:0000000000402f61\n.text:0000000000402f6b\n.text:0000000000402f6d\n.text:0000000000402f72\n.text:0000000000402f77\n.text:0000000000402f81\n.text:0000000000402f8b\n.text:0000000000402f92\n.text:0000000000402f99\n.text:0000000000402fa0\n.text:0000000000402faa\n.text:0000000000402fb1\n.text:0000000000402fbb\n.text:0000000000402fc2\n.text:0000000000402fc9\n.text:0000000000402fd3\n.text:0000000000402fde\n.text:0000000000402fe9\n.text:0000000000402ff0\n.text:0000000000402ff5\n.text:0000000000403000\n.text:0000000000403005\n.text:000000000040300a\n.text:000000000040300d\n.text:0000000000403010\n.text:0000000000403012\n.text:0000000000403016\n.text:0000000000403018\n.text:000000000040301b\n.text:0000000000403020\n.text:0000000000403022\n.text:0000000000403024\n.text:0000000000403026\n.text:000000000040302b\n.text:0000000000403030\n.text:0000000000403035\n.text:0000000000403038\n.text:000000000040303b\n.text:0000000000403040\n.text:0000000000403043\n.text:0000000000403045\n.text:0000000000403047\n.text:0000000000403049\n.text:000000000040304c\n.text:0000000000403051\n.text:0000000000403056\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403062\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306c\n.text:0000000000403071\n.text:0000000000403074\n.text:0000000000403076\n.text:000000000040307d\n.text:0000000000403082\n.text:0000000000403087\n.text:000000000040308a\n.text:0000000000403095\n.text:0000000000403098\n.text:000000000040309a\n.text:000000000040309f\n.text:00000000004030a1\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b2\n.text:00000000004030b4\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c3\n.text:00000000004030c6\n.text:00000000004030c9\n.text:00000000004030ce\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030d7\n.text:00000000004030da\n.text:00000000004030df\n.text:00000000004030e1\n.text:00000000004030e6\n.text:00000000004030ed\n.text:00000000004030f0\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403103\n.text:000000000040310b\n.text:0000000000403110\n.text:0000000000403115\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403132\n.text:0000000000403134\n.text:000000000040313b\n.text:0000000000403142\n.text:0000000000403148\n.text:0000000000403152\n.text:0000000000403157\n.text:000000000040315e\n.text:0000000000403164\n.text:000000000040316e\n.text:0000000000403173\n.text:0000000000403178\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403187\n.text:000000000040318c\n.text:0000000000403196\n.text:000000000040319b\n.text:00000000004031a2\n.text:00000000004031a7\n.text:00000000004031b1\n.text:00000000004031b6\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d6\n.text:00000000004031e0\n.text:00000000004031e5\n.text:00000000004031e7\n.text:00000000004031e9\n.text:00000000004031ee\n.text:00000000004031f3\n.text:00000000004031f5\n.text:00000000004031fa\n.text:00000000004031ff\n.text:0000000000403204\n.text:000000000040320b\n.text:0000000000403210\n.text:000000000040321a\n.text:000000000040321d\n.text:0000000000403222\n.text:0000000000403225\n.text:0000000000403228\n.text:000000000040322f\n.text:0000000000403231\n.text:0000000000403236\n.text:000000000040323b\n.text:0000000000403240\n.text:0000000000403247\n.text:000000000040324c\n.text:000000000040324e\n.text:0000000000403255\n.text:000000000040325b\n.text:000000000040325e\n.text:0000000000403261\n.text:0000000000403264\n.text:0000000000403269\n.text:000000000040326c\n.text:0000000000403271\n.text:0000000000403278\n.text:000000000040327d\n.text:0000000000403287\n.text:000000000040328a\n.text:000000000040328f\n.text:0000000000403299\n.text:000000000040329c\n.text:00000000004032a1\n.text:00000000004032a8\n.text:00000000004032ad\n.text:00000000004032b7\n.text:00000000004032bc\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c8\n.text:00000000004032cd\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032e3\n.text:00000000004032e8\n.text:00000000004032f2\n.text:00000000004032fc\n.text:0000000000403303\n.text:0000000000403305\n.text:000000000040330b\n.text:0000000000403310\n.text:0000000000403315\n.text:0000000000403318\n.text:000000000040331c\n.text:0000000000403323\n.text:000000000040332a\n.text:0000000000403331\n.text:0000000000403334\n.text:0000000000403339\n.text:0000000000403343\n.text:000000000040334a\n.text:000000000040334f\n.text:0000000000403359\n.text:0000000000403363\n.text:0000000000403368\n.text:000000000040336f\n.text:0000000000403374\n.text:000000000040337e\n.text:0000000000403383\n.text:000000000040338a\n.text:0000000000403394\n.text:0000000000403399\n.text:00000000004033a3\n.text:00000000004033aa\n.text:00000000004033af\n.text:00000000004033b9\n.text:00000000004033be\n.text:00000000004033c5\n.text:00000000004033ca\n.text:00000000004033d1\n.text:00000000004033d6\n.text:00000000004033dd\n.text:00000000004033e2\n.text:00000000004033ec\n.text:00000000004033ef\n.text:00000000004033f4\n.text:00000000004033fe\n.text:0000000000403403\n.text:000000000040340d\n.text:0000000000403410\n.text:0000000000403415\n.text:000000000040341c\n.text:0000000000403421\n.text:0000000000403423\n.text:0000000000403429\n.text:000000000040342b\n.text:0000000000403430\n.text:0000000000403435\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403440\n.text:0000000000403443\n.text:000000000040344a\n.text:000000000040344f\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403463\n.text:0000000000403466\n.text:0000000000403469\n.text:000000000040346c\n.text:0000000000403471\n.text:0000000000403476\n.text:000000000040347b\n.text:0000000000403485\n.text:000000000040348a\n.text:0000000000403491\n.text:0000000000403496\n.text:000000000040349d\n.text:00000000004034a2\n.text:00000000004034a7\n.text:00000000004034ac\n.text:00000000004034ae\n.text:00000000004034b4\n.text:00000000004034ba\n.text:00000000004034c0\n.text:00000000004034c7\n.text:00000000004034ce\n.text:00000000004034d3\n.text:00000000004034da\n.text:00000000004034dd\n.text:00000000004034e3\n.text:00000000004034ea\n.text:00000000004034ef\n.text:00000000004034f4\n.text:00000000004034f9\n.text:00000000004034ff\n.text:0000000000403504\n.text:000000000040350b\n.text:000000000040350e\n.text:0000000000403514\n.text:0000000000403517\n.text:000000000040351d\n.text:0000000000403522\n.text:0000000000403527\n.text:0000000000403529\n.text:0000000000403530\n.text:0000000000403536\n.text:000000000040353b\n.text:0000000000403545\n.text:000000000040354a\n.text:0000000000403554\n.text:0000000000403559\n.text:0000000000403560\n.text:0000000000403567\n.text:000000000040356c\n.text:0000000000403571\n.text:0000000000403576\n.text:000000000040357c\n.text:0000000000403581\n.text:0000000000403588\n.text:000000000040358e\n.text:0000000000403593\n.text:000000000040359d\n.text:00000000004035a2\n.text:00000000004035a7\n.text:00000000004035aa\n.text:00000000004035af\n.text:00000000004035b6\n.text:00000000004035bb\n.text:00000000004035c0\n.text:00000000004035c5\n.text:00000000004035cc\n.text:00000000004035cf\n.text:00000000004035d6\n.text:00000000004035da\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035ed\n.text:00000000004035f4\n.text:00000000004035f9\n.text:00000000004035fe\n.text:0000000000403603\n.text:0000000000403609\n.text:000000000040360e\n.text:0000000000403615\n.text:000000000040361b\n.text:0000000000403620\n.text:0000000000403627\n.text:000000000040362e\n.text:0000000000403633\n.text:0000000000403638\n.text:000000000040363d\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364f\n.text:0000000000403651\n.text:0000000000403656\n.text:000000000040365b\n.text:0000000000403662\n.text:0000000000403667\n.text:0000000000403671\n.text:000000000040367b\n.text:0000000000403686\n.text:0000000000403691\n.text:0000000000403696\n.text:000000000040369d\n.text:00000000004036a4\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b3\n.text:00000000004036b9\n.text:00000000004036be\n.text:00000000004036c5\n.text:00000000004036cb\n.text:00000000004036ce\n.text:00000000004036d0\n.text:00000000004036d7\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e8\n.text:00000000004036ed\n.text:00000000004036f3\n.text:00000000004036f8\n.text:00000000004036ff\n.text:0000000000403705\n.text:0000000000403707\n.text:000000000040370e\n.text:0000000000403710\n.text:0000000000403717\n.text:0000000000403722\n.text:0000000000403724\n.text:000000000040372b\n.text:0000000000403730\n.text:0000000000403733\n.text:0000000000403738\n.text:0000000000403740\n.text:0000000000403742\n.text:0000000000403747\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403754\n.text:0000000000403759\n.text:000000000040375c\n.text:0000000000403761\n.text:0000000000403764\n.text:0000000000403766\n.text:000000000040376b\n.text:0000000000403770\n.text:0000000000403773\n.text:0000000000403775\n.text:000000000040377b\n.text:0000000000403781\n.text:0000000000403788\n.text:000000000040378f\n.text:0000000000403793\n.text:0000000000403795\n.text:000000000040379f\n.text:00000000004037aa\n.text:00000000004037b1\n.text:00000000004037bb\n.text:00000000004037be\n.text:00000000004037c1\n.text:00000000004037c4\n.text:00000000004037c8\n.text:00000000004037ca\n.text:00000000004037cd\n.text:00000000004037d1\n.text:00000000004037d4\n.text:00000000004037db\n.text:00000000004037dd\n.text:00000000004037e2\n.text:00000000004037e9\n.text:00000000004037ec\n.text:00000000004037f1\n.text:00000000004037f4\n.text:00000000004037f6\n.text:00000000004037fd\n.text:0000000000403802\n.text:0000000000403807\n.text:000000000040380c\n.text:0000000000403812\n.text:0000000000403815\n.text:0000000000403817\n.text:000000000040381a\n.text:000000000040381d\n.text:000000000040381f\n.text:0000000000403825\n.text:000000000040382c\n.text:0000000000403830\n.text:0000000000403837\n.text:000000000040383a\n.text:000000000040383f\n.text:0000000000403844\n.text:0000000000403847\n.text:000000000040384a\n.text:000000000040384c\n.text:000000000040384e\n.text:0000000000403850\n.text:0000000000403855\n.text:000000000040385c\n.text:0000000000403861\n.text:0000000000403866\n.text:0000000000403869\n.text:000000000040386e\n.text:0000000000403874\n.text:000000000040387b\n.text:000000000040387d\n.text:000000000040387f\n.text:0000000000403881\n.text:0000000000403888\n.text:000000000040388e\n.text:0000000000403894\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389b\n.text:000000000040389f\n.text:00000000004038a1\n.text:00000000004038a3\n.text:00000000004038a5\n.text:00000000004038af\n.text:00000000004038b1\n.text:00000000004038b3\n.text:00000000004038b5\n.text:00000000004038bb\n.text:00000000004038bf\n.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c4\n.text:00000000004038c6\n.text:00000000004038c8\n.text:00000000004038c9\n.text:00000000004038ca\n.text:00000000004038cd\n.text:00000000004038cf\n.text:00000000004038d4\n.text:00000000004038d9\n.text:00000000004038dc\n.text:00000000004038df\n.text:00000000004038e1\n.text:00000000004038e6\n.text:00000000004038eb\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f4\n.text:00000000004038f9\n.text:00000000004038fe\n.text:0000000000403901\n.text:0000000000403906\n.text:0000000000403908\n.text:000000000040390a\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403916\n.text:0000000000403918\n.text:000000000040391a\n.text:000000000040391e\n.text:0000000000403924\n.text:0000000000403927\n.text:000000000040392c\n.text:000000000040392f\n.text:0000000000403934\n.text:0000000000403937\n.text:000000000040393a\n.text:000000000040393d\n.text:000000000040393f\n.text:0000000000403942\n.text:0000000000403945\n.text:000000000040394a\n.text:000000000040394d\n.text:0000000000403952\n.text:0000000000403955\n.text:0000000000403957\n.text:0000000000403959\n.text:000000000040395e\n.text:0000000000403963\n.text:0000000000403968\n.text:000000000040396b\n.text:000000000040396e\n.text:0000000000403973\n.text:0000000000403976\n.text:000000000040397b\n.text:000000000040397d\n.text:000000000040397f\n.text:0000000000403982\n.text:0000000000403987\n.text:000000000040398b\n.text:0000000000403992\n.text:0000000000403999\n.text:00000000004039a0\n.text:00000000004039a5\n.text:00000000004039aa\n.text:00000000004039ad\n.text:00000000004039af\n.text:00000000004039b6\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c9\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d7\n.text:00000000004039d9\n.text:00000000004039de\n.text:00000000004039e3\n.text:00000000004039e8\n.text:00000000004039eb\n.text:00000000004039ed\n.text:00000000004039ef\n.text:00000000004039f1\n.text:00000000004039f4\n.text:00000000004039f9\n.text:00000000004039fe\n.text:0000000000403a08\n.text:0000000000403a0a\n.text:0000000000403a10\n.text:0000000000403a15\n.text:0000000000403a1a\n.text:0000000000403a1f\n.text:0000000000403a24\n.text:0000000000403a27\n.text:0000000000403a2c\n.text:0000000000403a2f\n.text:0000000000403a31\n.text:0000000000403a35\n.text:0000000000403a3b\n.text:0000000000403a42\n.text:0000000000403a4d\n.text:0000000000403a58\n.text:0000000000403a5d\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6d\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n.text:0000000000403a7e\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8d\n.text:0000000000403a92\n.text:0000000000403a97\n.text:0000000000403aa0\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403ab1\n.text:0000000000403ab3\n.text:0000000000403ab8\n.text:0000000000403abb\n.text:0000000000403abf\n.text:0000000000403ac2\n.text:0000000000403ac4\n.text:0000000000403ac6\n.text:0000000000403acb\n.text:0000000000403ad0\n.text:0000000000403ad5\n.text:0000000000403adc\n.text:0000000000403adf\n.text:0000000000403ae4\n.text:0000000000403ae9\n.text:0000000000403aee\n.text:0000000000403af9\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b14\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b29\n.text:0000000000403b2e\n.text:0000000000403b30\n.text:0000000000403b36\n.text:0000000000403b3d\n.text:0000000000403b40\n.text:0000000000403b47\n.text:0000000000403b49\n.text:0000000000403b4e\n.text:0000000000403b53\n.text:0000000000403b5a\n.text:0000000000403b5e\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b6c\n.text:0000000000403b72\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7f\n.text:0000000000403b83\n.text:0000000000403b86\n.text:0000000000403b8b\n.text:0000000000403b8f\n.text:0000000000403b96\n.text:0000000000403b9e\n.text:0000000000403ba3\n.text:0000000000403ba9\n.text:0000000000403baf\n.text:0000000000403bb1\n.text:0000000000403bb6\n.text:0000000000403bb8\n.text:0000000000403bbd\n.text:0000000000403bbf\n.text:0000000000403bc4\n.text:0000000000403bc9\n.text:0000000000403bce\n.text:0000000000403bd3\n.text:0000000000403bd7\n.text:0000000000403bde\n.text:0000000000403be0\n.text:0000000000403be5\n.text:0000000000403be7\n.text:0000000000403bec\n'
p1245
tp1246
sS'_obstack_begin_worker'
p1247
(S'\n__stdcall _obstack_begin_worker()\n'
p1248
V\u000aint _obstack_begin_worker(void)\u000a\u000a{\u000a  size_t size;\u000a  _obstack_chunk *p_Var1;\u000a  long in_RDX;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  size_t in_RSI;\u000a  obstack *h;\u000a  \u000a  lVar2 = 0x10;\u000a  if (in_RDX != 0) {\u000a    lVar2 = in_RDX;\u000a  }\u000a  size = 0xfe0;\u000a  if (in_RSI != 0) {\u000a    size = in_RSI;\u000a  }\u000a  h->chunk_size = size;\u000a  h->alignment_mask = lVar2 - 1;\u000a  p_Var1 = (_obstack_chunk *)call_chunkfun(h,size);\u000a  h->chunk = p_Var1;\u000a  if (p_Var1 == (_obstack_chunk *)0x0) {\u000a    (*obstack_alloc_failed_handler)();\u000a  }\u000a  pcVar3 = (char *)(-lVar2 & (long)&p_Var1->prev + lVar2 + 7);\u000a  h->object_base = pcVar3;\u000a  h->next_free = pcVar3;\u000a  pcVar3 = (char *)((long)&p_Var1->limit + h->chunk_size);\u000a  p_Var1->limit = pcVar3;\u000a  h->chunk_limit = pcVar3;\u000a  p_Var1->prev = (_obstack_chunk *)0x0;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xf9;\u000a  return (int)pcVar3;\u000a}\u000a\u000a
p1249
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBX,0x10\nCMOVNZ RBX,RDX\nTEST RSI,RSI\nMOV EAX,0xfe0\nCMOVNZ RAX,RSI\nMOV qword ptr [R15],RAX\nLEA R12,[RBX + -0x1]\nMOV qword ptr [R15 + 0x30],R12\nMOV RSI,RAX\nCALL 0x00410470\nMOV R14,RAX\nMOV qword ptr [R15 + 0x8],R14\nTEST R14,R14\nJNZ 0x004102f8\nCALL qword ptr [0x0061d5a0]\nLEA RAX,[R14 + R12*0x1 + 0x10]\nNEG RBX\nAND RBX,RAX\nMOV qword ptr [R15 + 0x10],RBX\nMOV qword ptr [R15 + 0x18],RBX\nMOV RAX,qword ptr [R15]\nADD RAX,R14\nMOV qword ptr [R14],RAX\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R14 + 0x8],0x0\nAND byte ptr [R15 + 0x50],0xf9\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1250
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\n48 85 d2\nbb 10 00 00 00\n48 0f 45 da\n48 85 f6\nb8 e0 0f 00 00\n48 0f 45 c6\n49 89 07\n4c 8d 63 ff\n4d 89 67 30\n48 89 c6\ne8 8a 01 00 00\n49 89 c6\n4d 89 77 08\n4d 85 f6\n75 06\nff 15 a8 d2 20 00\n4b 8d 44 26 10\n48 f7 db\n48 21 c3\n49 89 5f 10\n49 89 5f 18\n49 8b 07\n4c 01 f0\n49 89 06\n49 89 47 20\n49 c7 46 08 00 00 00 00\n41 80 67 50 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1251
S'.text:00000000004102b0\n.text:00000000004102b2\n.text:00000000004102b4\n.text:00000000004102b6\n.text:00000000004102b7\n.text:00000000004102b8\n.text:00000000004102bb\n.text:00000000004102be\n.text:00000000004102c3\n.text:00000000004102c7\n.text:00000000004102ca\n.text:00000000004102cf\n.text:00000000004102d3\n.text:00000000004102d6\n.text:00000000004102da\n.text:00000000004102de\n.text:00000000004102e1\n.text:00000000004102e6\n.text:00000000004102e9\n.text:00000000004102ed\n.text:00000000004102f0\n.text:00000000004102f2\n.text:00000000004102f8\n.text:00000000004102fd\n.text:0000000000410300\n.text:0000000000410303\n.text:0000000000410307\n.text:000000000041030b\n.text:000000000041030e\n.text:0000000000410311\n.text:0000000000410314\n.text:0000000000410318\n.text:0000000000410320\n.text:0000000000410325\n.text:0000000000410329\n.text:000000000041032a\n.text:000000000041032c\n.text:000000000041032e\n.text:0000000000410330\n'
p1252
tp1253
sS'raise'
p1254
(S'\n__stdcall raise(int __sig)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint raise(int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_raise_0061d030)();\u000a  return iVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0061d030]\n'
p1257
S'ff 25 6a af 21 00\n'
p1258
S'.plt:00000000004020c0\n'
p1259
tp1260
sS'file_failure'
p1261
(S'\n__stdcall file_failure(char * message, char * file)\n'
p1262
V\u000avoid file_failure(char *message,char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  char *pcVar3;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  pcVar3 = quotearg_style((char *)0x4);\u000a  error(0,(ulong)uVar1,file,pcVar3);\u000a  set_exit_status((ulong)message & 0xff);\u000a  return;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15D,EDI\nCALL 0x00402110\nMOV EBP,dword ptr [RAX]\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x0040d210\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x004025f0\nMOVZX EDI,R15B\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405c70\n'
p1264
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n41 89 ff\ne8 3b c5 ff ff\n8b 28\nbf 04 00 00 00\n48 89 de\ne8 2c 76 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 f2\ne8 fb c9 ff ff\n41 0f b6 ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 6b\n'
p1265
S'.text:0000000000405bc0\n.text:0000000000405bc1\n.text:0000000000405bc3\n.text:0000000000405bc5\n.text:0000000000405bc6\n.text:0000000000405bc7\n.text:0000000000405bca\n.text:0000000000405bcd\n.text:0000000000405bd0\n.text:0000000000405bd5\n.text:0000000000405bd7\n.text:0000000000405bdc\n.text:0000000000405bdf\n.text:0000000000405be4\n.text:0000000000405be7\n.text:0000000000405be9\n.text:0000000000405beb\n.text:0000000000405bed\n.text:0000000000405bf0\n.text:0000000000405bf5\n.text:0000000000405bf9\n.text:0000000000405bfd\n.text:0000000000405bfe\n.text:0000000000405c00\n.text:0000000000405c02\n.text:0000000000405c03\n'
p1266
tp1267
sS'xstrcoll_extension'
p1268
(S'\n__stdcall xstrcoll_extension(V a, V b)\n'
p1269
V\u000aint xstrcoll_extension(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_extension((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p1270
S'MOV EDX,0x407180\nJMP 0x004071b0\n'
p1271
S'ba 80 71 40 00\ne9 56 0a 00 00\n'
p1272
S'.text:0000000000406750\n.text:0000000000406755\n'
p1273
tp1274
sS'xstrcoll_df_version'
p1275
(S'\n__stdcall xstrcoll_df_version(V a, V b)\n'
p1276
V\u000aint xstrcoll_df_version(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_version((fileinfo *)a,(fileinfo *)b);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1277
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406b4a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406b68\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406b68\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407250\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1278
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 90 f9 ff ff\n89 c3\n4c 89 f7\ne8 86 f9 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 1e\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 10\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 e8 06 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1279
S'.text:0000000000406b20\n.text:0000000000406b22\n.text:0000000000406b24\n.text:0000000000406b25\n.text:0000000000406b28\n.text:0000000000406b2b\n.text:0000000000406b30\n.text:0000000000406b32\n.text:0000000000406b35\n.text:0000000000406b3a\n.text:0000000000406b3c\n.text:0000000000406b3e\n.text:0000000000406b40\n.text:0000000000406b43\n.text:0000000000406b48\n.text:0000000000406b4a\n.text:0000000000406b4c\n.text:0000000000406b4e\n.text:0000000000406b53\n.text:0000000000406b56\n.text:0000000000406b58\n.text:0000000000406b5b\n.text:0000000000406b5e\n.text:0000000000406b5f\n.text:0000000000406b61\n.text:0000000000406b63\n.text:0000000000406b68\n.text:0000000000406b6a\n.text:0000000000406b6b\n.text:0000000000406b6d\n.text:0000000000406b6f\n'
p1280
tp1281
sS'dev_ino_compare'
p1282
(S'\n__stdcall dev_ino_compare(void * x, void * y)\n'
p1283
V\u000a_Bool dev_ino_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)x == *(long *)y) {\u000a    return (_Bool)(*(long *)((long)x + 8) == *(long *)((long)y + 8));\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1284
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nJNZ 0x00403f84\nMOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p1285
S'48 8b 07\n48 3b 06\n75 0c\n48 8b 47 08\n48 3b 46 08\n0f 94 c0\nc3\n31 c0\nc3\n'
p1286
S'.text:0000000000403f70\n.text:0000000000403f73\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7c\n.text:0000000000403f80\n.text:0000000000403f83\n.text:0000000000403f84\n.text:0000000000403f86\n'
p1287
tp1288
sS'mpsort'
p1289
(S'\n__stdcall mpsort(void * * base, size_t n, comparison_function * cmp)\n'
p1290
V\u000avoid mpsort(void **base,size_t n,int (*cmp)(void *,void *))\u000a\u000a{\u000a  mpsort_with_tmp(base,n,base + n,cmp);\u000a  return;\u000a}\u000a\u000a
p1291
S'MOV RAX,RDX\nLEA RDX,[RDI + RSI*0x8]\nMOV RCX,RAX\nJMP 0x0040bbf0\n'
p1292
S'48 89 d0\n48 8d 14 f7\n48 89 c1\neb 04\n'
p1293
S'.text:000000000040bbe0\n.text:000000000040bbe3\n.text:000000000040bbe7\n.text:000000000040bbea\n'
p1294
tp1295
sS'mktime_z'
p1296
(S'\n__stdcall mktime_z(timezone_t tz, tm * tm)\n'
p1297
V\u000atime_t mktime_z(timezone_t tz,tm *tm)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  time_t tVar3;\u000a  timezone_t tz_00;\u000a  tm *ptVar4;\u000a  time_t local_58;\u000a  tm local_50;\u000a  \u000a  if (tz == (timezone_t)0x0) {\u000a    tVar3 = (*(code *)PTR_timegm_0061d2b0)(tm);\u000a    return tVar3;\u000a  }\u000a  tz_00 = set_tz(tz);\u000a  if (tz_00 != (timezone_t)0x0) {\u000a    local_58 = rpl_mktime(tm);\u000a    if (((local_58 != -1) ||\u000a        ((ptVar4 = localtime_r(&local_58,&local_50), ptVar4 != (tm *)0x0 &&\u000a         (iVar2 = equal_tm(tm,(tm *)&local_50), iVar2 != 0)))) &&\u000a       (_Var1 = save_abbr(tz,tm), _Var1 == false)) {\u000a      local_58 = -1;\u000a    }\u000a    _Var1 = revert_tz(tz_00);\u000a    if (_Var1 != false) {\u000a      return local_58;\u000a    }\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p1298
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R15,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0041092f\nMOV RDI,RBX\nCALL 0x00410700\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00410975\nMOV RDI,R15\nCALL 0x00411870\nMOV qword ptr [RSP],RAX\nCMP RAX,-0x1\nJZ 0x00410940\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00410780\nTEST AL,AL\nJNZ 0x00410963\nMOV qword ptr [RSP],-0x1\nJMP 0x00410963\nMOV RDI,R15\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004025c0\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00402130\nTEST RAX,RAX\nJZ 0x00410963\nLEA RSI,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x00410990\nTEST EAX,EAX\nJNZ 0x00410916\nMOV RDI,R14\nCALL 0x00410890\nTEST AL,AL\nJZ 0x00410975\nMOV RAX,qword ptr [RSP]\nJMP 0x0041097c\nMOV RAX,-0x1\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1299
S'41 57\n41 56\n53\n48 83 ec 40\n49 89 f7\n48 89 fb\n48 85 db\n74 3b\n48 89 df\ne8 04 fe ff ff\n49 89 c6\n4d 85 f6\n74 71\n4c 89 ff\ne8 64 0f 00 00\n48 89 04 24\n48 83 f8 ff\n74 2a\n48 89 df\n4c 89 fe\ne8 5f fe ff ff\n84 c0\n75 3e\n48 c7 04 24 ff ff ff ff\neb 34\n4c 89 ff\n48 83 c4 40\n5b\n41 5e\n41 5f\ne9 80 1c ff ff\n48 89 e7\n48 8d 74 24 08\ne8 e3 17 ff ff\n48 85 c0\n74 11\n48 8d 74 24 08\n4c 89 ff\ne8 31 00 00 00\n85 c0\n75 b3\n4c 89 f7\ne8 25 ff ff ff\n84 c0\n74 06\n48 8b 04 24\neb 07\n48 c7 c0 ff ff ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p1300
S'.text:00000000004108e0\n.text:00000000004108e2\n.text:00000000004108e4\n.text:00000000004108e5\n.text:00000000004108e9\n.text:00000000004108ec\n.text:00000000004108ef\n.text:00000000004108f2\n.text:00000000004108f4\n.text:00000000004108f7\n.text:00000000004108fc\n.text:00000000004108ff\n.text:0000000000410902\n.text:0000000000410904\n.text:0000000000410907\n.text:000000000041090c\n.text:0000000000410910\n.text:0000000000410914\n.text:0000000000410916\n.text:0000000000410919\n.text:000000000041091c\n.text:0000000000410921\n.text:0000000000410923\n.text:0000000000410925\n.text:000000000041092d\n.text:000000000041092f\n.text:0000000000410932\n.text:0000000000410936\n.text:0000000000410937\n.text:0000000000410939\n.text:000000000041093b\n.text:0000000000410940\n.text:0000000000410943\n.text:0000000000410948\n.text:000000000041094d\n.text:0000000000410950\n.text:0000000000410952\n.text:0000000000410957\n.text:000000000041095a\n.text:000000000041095f\n.text:0000000000410961\n.text:0000000000410963\n.text:0000000000410966\n.text:000000000041096b\n.text:000000000041096d\n.text:000000000041096f\n.text:0000000000410973\n.text:0000000000410975\n.text:000000000041097c\n.text:0000000000410980\n.text:0000000000410981\n.text:0000000000410983\n.text:0000000000410985\n'
p1301
tp1302
sS'rotr64'
p1303
(S'\n__stdcall rotr64(uint64_t x)\n'
p1304
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1305
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1306
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1307
S'.text:0000000000410a70\n.text:0000000000410a72\n.text:0000000000410a75\n.text:0000000000410a78\n'
p1308
tp1309
sS'set_custom_quoting'
p1310
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1311
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1312
S'TEST RDI,RDI\nMOV EAX,0x61e1b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x0040c0d5\nTEST RDX,RDX\nJZ 0x0040c0d5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00402100\n'
p1313
S'48 85 ff\nb8 b0 e1 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 25 60 ff ff\n'
p1314
S'.text:000000000040c0b0\n.text:000000000040c0b3\n.text:000000000040c0b8\n.text:000000000040c0bc\n.text:000000000040c0c2\n.text:000000000040c0c5\n.text:000000000040c0c7\n.text:000000000040c0ca\n.text:000000000040c0cc\n.text:000000000040c0d0\n.text:000000000040c0d4\n.text:000000000040c0d5\n.text:000000000040c0d6\n'
p1315
tp1316
sS'c_isalpha'
p1317
(S'\n__stdcall c_isalpha()\n'
p1318
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1319
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00410b8b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1320
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1321
S'.text:0000000000410b70\n.text:0000000000410b73\n.text:0000000000410b76\n.text:0000000000410b78\n.text:0000000000410b82\n.text:0000000000410b84\n.text:0000000000410b87\n.text:0000000000410b8a\n.text:0000000000410b8b\n.text:0000000000410b8d\n'
p1322
tp1323
sS'ftypelet'
p1324
(S'\n__stdcall ftypelet()\n'
p1325
V\u000achar ftypelet(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  uVar1 = ((uint)in_RDI & 0xf000) - 0x1000;\u000a  if (uVar1 < 0xc000) {\u000a    return (&DAT_00416d8e)[(ulong)(uVar1 >> 0xc)];\u000a  }\u000a  return '?';\u000a}\u000a\u000a
p1326
S'AND EDI,0xf000\nADD EDI,0xfffff000\nCMP EDI,0xbfff\nJA 0x0040926e\nSHR EDI,0xc\nMOV AL,byte ptr [0x416d8e + RDI]\nRET\nMOV AL,0x3f\nRET\n'
p1327
S'81 e7 00 f0 00 00\n81 c7 00 f0 ff ff\n81 ff ff bf 00 00\n77 0a\nc1 ef 0c\n8a 87 8e 6d 41 00\nc3\nb0 3f\nc3\n'
p1328
S'.text:0000000000409250\n.text:0000000000409256\n.text:000000000040925c\n.text:0000000000409262\n.text:0000000000409264\n.text:0000000000409267\n.text:000000000040926d\n.text:000000000040926e\n.text:0000000000409270\n'
p1329
tp1330
sS'gnu_dev_minor'
p1331
(S'\n__stdcall gnu_dev_minor(ulonglong __dev)\n'
p1332
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint gnu_dev_minor(ulonglong __dev)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_minor_0061d2f0)();\u000a  return uVar1;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x0061d2f0]\n'
p1334
S'ff 25 aa ac 21 00\n'
p1335
S'.plt:0000000000402640\n'
p1336
tp1337
sS'print_name_with_quoting'
p1338
(S'\n__stdcall print_name_with_quoting(fileinfo * f, obstack * stack, size_t start_col)\n'
p1339
V\u000asize_t print_name_with_quoting(fileinfo *f,obstack *stack,size_t start_col)\u000a\u000a{\u000a  char *name;\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  fileinfo *pfVar3;\u000a  size_t sVar4;\u000a  ulong in_RCX;\u000a  \u000a  pfVar3 = (fileinfo *)&f->linkname;\u000a  if ((char)stack == 0) {\u000a    pfVar3 = f;\u000a  }\u000a  name = pfVar3->name;\u000a  if (print_with_color == false) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    _Var1 = print_color_indicator(f);\u000a    _Var2 = true;\u000a    if (_Var1 == false) {\u000a      _Var2 = is_colored();\u000a    }\u000a  }\u000a  if ((start_col != 0) && (dired == 1)) {\u000a    if ((ulong)(*(long *)(start_col + 0x20) - *(long *)(start_col + 0x18)) < 8) {\u000a      _obstack_newchunk((obstack *)start_col,8);\u000a    }\u000a    **(size_t **)(start_col + 0x18) = dired_pos;\u000a    *(long *)(start_col + 0x18) = *(long *)(start_col + 0x18) + 8;\u000a  }\u000a  sVar4 = quote_name(stdout,name,filename_quoting_options,(size_t *)0x0);\u000a  dired_pos = dired_pos + sVar4;\u000a  if ((start_col != 0) && (dired == 1)) {\u000a    if ((ulong)(*(long *)(start_col + 0x20) - *(long *)(start_col + 0x18)) < 8) {\u000a      _obstack_newchunk((obstack *)start_col,8);\u000a    }\u000a    **(size_t **)(start_col + 0x18) = dired_pos;\u000a    *(long *)(start_col + 0x18) = *(long *)(start_col + 0x18) + 8;\u000a  }\u000a  process_signals();\u000a  if (((_Var2 != false) && (prep_non_filename_text(), line_length != 0)) &&\u000a     (in_RCX / line_length != ((in_RCX - 1) + sVar4) / line_length)) {\u000a    put_indicator(color_indicator + 0x17);\u000a  }\u000a  return sVar4;\u000a}\u000a\u000a
p1340
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV RBX,RDX\nLEA RAX,[RDI + 0x8]\nTEST SIL,SIL\nCMOVZ RAX,RDI\nMOV RBP,qword ptr [RAX]\nCMP byte ptr [0x0061d630],0x0\nJZ 0x00407f58\nMOVZX ESI,SIL\nCALL 0x00408080\nMOV R15B,0x1\nTEST AL,AL\nJNZ 0x00407f5b\nMOV EDI,0x4\nCALL 0x00403ef0\nMOV R15B,AL\nTEST RBX,RBX\nJNZ 0x00407f60\nJMP 0x00407f97\nXOR R15D,R15D\nTEST RBX,RBX\nJZ 0x00407f97\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00407f97\nMOV RAX,qword ptr [RBX + 0x20]\nSUB RAX,qword ptr [RBX + 0x18]\nCMP RAX,0x7\nJA 0x00407f84\nMOV ESI,0x8\nMOV RDI,RBX\nCALL 0x00410360\nMOV RAX,qword ptr [RBX + 0x18]\nMOV RCX,qword ptr [0x0061d810]\nMOV qword ptr [RAX],RCX\nADD qword ptr [RBX + 0x18],0x8\nMOV RDI,qword ptr [0x0061d5c8]\nMOV RDX,qword ptr [0x0061d828]\nXOR ECX,ECX\nMOV RSI,RBP\nCALL 0x00405ce0\nMOV RBP,RAX\nADD qword ptr [0x0061d810],RBP\nTEST RBX,RBX\nJZ 0x00407ff5\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00407ff5\nMOV RAX,qword ptr [RBX + 0x20]\nSUB RAX,qword ptr [RBX + 0x18]\nCMP RAX,0x7\nJA 0x00407fe2\nMOV ESI,0x8\nMOV RDI,RBX\nCALL 0x00410360\nMOV RAX,qword ptr [RBX + 0x18]\nMOV RCX,qword ptr [0x0061d810]\nMOV qword ptr [RAX],RCX\nADD qword ptr [RBX + 0x18],0x8\nCALL 0x00406020\nTEST R15B,R15B\nJZ 0x00408034\nCALL 0x004056c0\nMOV RSI,qword ptr [0x0061d850]\nTEST RSI,RSI\nJZ 0x00408034\nXOR EDX,EDX\nMOV RAX,R14\nDIV RSI\nMOV RCX,RAX\nLEA RAX,[R14 + RBP*0x1 + -0x1]\nXOR EDX,EDX\nDIV RSI\nCMP RCX,RAX\nJZ 0x00408034\nMOV EDI,0x61d4f0\nCALL 0x00405680\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1341
S'55\n41 57\n41 56\n53\n50\n49 89 ce\n48 89 d3\n48 8d 47 08\n40 84 f6\n48 0f 44 c7\n48 8b 28\n80 3d fe 56 21 00 00\n74 24\n40 0f b6 f6\ne8 43 01 00 00\n41 b7 01\n84 c0\n75 17\nbf 04 00 00 00\ne8 a2 bf ff ff\n41 88 c7\n48 85 db\n75 0a\neb 3f\n45 31 ff\n48 85 db\n74 37\n80 3d da 57 21 00 01\n75 2e\n48 8b 43 20\n48 2b 43 18\n48 83 f8 07\n77 0d\nbe 08 00 00 00\n48 89 df\ne8 dc 83 00 00\n48 8b 43 18\n48 8b 0d 81 58 21 00\n48 89 08\n48 83 43 18 08\n48 8b 3d 2a 56 21 00\n48 8b 15 83 58 21 00\n31 c9\n48 89 ee\ne8 31 dd ff ff\n48 89 c5\n48 01 2d 57 58 21 00\n48 85 db\n74 37\n80 3d 7c 57 21 00 01\n75 2e\n48 8b 43 20\n48 2b 43 18\n48 83 f8 07\n77 0d\nbe 08 00 00 00\n48 89 df\ne8 7e 83 00 00\n48 8b 43 18\n48 8b 0d 23 58 21 00\n48 89 08\n48 83 43 18 08\ne8 26 e0 ff ff\n45 84 ff\n74 35\ne8 bc d6 ff ff\n48 8b 35 45 58 21 00\n48 85 f6\n74 24\n31 d2\n4c 89 f0\n48 f7 f6\n48 89 c1\n49 8d 44 2e ff\n31 d2\n48 f7 f6\n48 39 c1\n74 0a\nbf f0 d4 61 00\ne8 4c d6 ff ff\n48 89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1342
S'.text:0000000000407f10\n.text:0000000000407f11\n.text:0000000000407f13\n.text:0000000000407f15\n.text:0000000000407f16\n.text:0000000000407f17\n.text:0000000000407f1a\n.text:0000000000407f1d\n.text:0000000000407f21\n.text:0000000000407f24\n.text:0000000000407f28\n.text:0000000000407f2b\n.text:0000000000407f32\n.text:0000000000407f34\n.text:0000000000407f38\n.text:0000000000407f3d\n.text:0000000000407f40\n.text:0000000000407f42\n.text:0000000000407f44\n.text:0000000000407f49\n.text:0000000000407f4e\n.text:0000000000407f51\n.text:0000000000407f54\n.text:0000000000407f56\n.text:0000000000407f58\n.text:0000000000407f5b\n.text:0000000000407f5e\n.text:0000000000407f60\n.text:0000000000407f67\n.text:0000000000407f69\n.text:0000000000407f6d\n.text:0000000000407f71\n.text:0000000000407f75\n.text:0000000000407f77\n.text:0000000000407f7c\n.text:0000000000407f7f\n.text:0000000000407f84\n.text:0000000000407f88\n.text:0000000000407f8f\n.text:0000000000407f92\n.text:0000000000407f97\n.text:0000000000407f9e\n.text:0000000000407fa5\n.text:0000000000407fa7\n.text:0000000000407faa\n.text:0000000000407faf\n.text:0000000000407fb2\n.text:0000000000407fb9\n.text:0000000000407fbc\n.text:0000000000407fbe\n.text:0000000000407fc5\n.text:0000000000407fc7\n.text:0000000000407fcb\n.text:0000000000407fcf\n.text:0000000000407fd3\n.text:0000000000407fd5\n.text:0000000000407fda\n.text:0000000000407fdd\n.text:0000000000407fe2\n.text:0000000000407fe6\n.text:0000000000407fed\n.text:0000000000407ff0\n.text:0000000000407ff5\n.text:0000000000407ffa\n.text:0000000000407ffd\n.text:0000000000407fff\n.text:0000000000408004\n.text:000000000040800b\n.text:000000000040800e\n.text:0000000000408010\n.text:0000000000408012\n.text:0000000000408015\n.text:0000000000408018\n.text:000000000040801b\n.text:0000000000408020\n.text:0000000000408022\n.text:0000000000408025\n.text:0000000000408028\n.text:000000000040802a\n.text:000000000040802f\n.text:0000000000408034\n.text:0000000000408037\n.text:000000000040803b\n.text:000000000040803c\n.text:000000000040803e\n.text:0000000000408040\n.text:0000000000408041\n'
p1343
tp1344
sS'strcmp_size'
p1345
(S'\n__stdcall strcmp_size(V a, V b)\n'
p1346
V\u000aint strcmp_size(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_size((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1347
S'MOV EDX,0x4023f0\nJMP 0x00407220\n'
p1348
S'ba f0 23 40 00\ne9 f6 07 00 00\n'
p1349
S'.text:0000000000406a20\n.text:0000000000406a25\n'
p1350
tp1351
sS'rpl_calloc'
p1352
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1353
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0061d1c0)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1354
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0041027b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00410280\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00410280\nPUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004023e0\n'
p1355
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 9f 1e ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 55 21 ff ff\n'
p1356
S'.text:0000000000410240\n.text:0000000000410243\n.text:0000000000410248\n.text:000000000041024a\n.text:000000000041024d\n.text:0000000000410252\n.text:0000000000410254\n.text:0000000000410257\n.text:000000000041025b\n.text:000000000041025d\n.text:0000000000410260\n.text:0000000000410263\n.text:0000000000410266\n.text:0000000000410269\n.text:000000000041026b\n.text:000000000041026c\n.text:0000000000410271\n.text:0000000000410277\n.text:0000000000410279\n.text:000000000041027a\n.text:000000000041027b\n.text:0000000000410280\n.text:0000000000410283\n.text:0000000000410286\n'
p1357
tp1358
sS'memset'
p1359
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1360
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0061d178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1361
S'JMP qword ptr [0x0061d178]\n'
p1362
S'ff 25 22 ae 21 00\n'
p1363
S'.plt:0000000000402350\n'
p1364
tp1365
sS'xstrcoll_df_atime'
p1366
(S'\n__stdcall xstrcoll_df_atime(V a, V b)\n'
p1367
V\u000aint xstrcoll_df_atime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_atime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1368
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406fca\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406fed\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406fed\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407320\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1369
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 10 f5 ff ff\n89 c3\n4c 89 f7\ne8 06 f5 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 33 03 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1370
S'.text:0000000000406fa0\n.text:0000000000406fa2\n.text:0000000000406fa4\n.text:0000000000406fa5\n.text:0000000000406fa8\n.text:0000000000406fab\n.text:0000000000406fb0\n.text:0000000000406fb2\n.text:0000000000406fb5\n.text:0000000000406fba\n.text:0000000000406fbc\n.text:0000000000406fbe\n.text:0000000000406fc0\n.text:0000000000406fc3\n.text:0000000000406fc8\n.text:0000000000406fca\n.text:0000000000406fcc\n.text:0000000000406fce\n.text:0000000000406fd3\n.text:0000000000406fd6\n.text:0000000000406fd8\n.text:0000000000406fdd\n.text:0000000000406fe0\n.text:0000000000406fe3\n.text:0000000000406fe4\n.text:0000000000406fe6\n.text:0000000000406fe8\n.text:0000000000406fed\n.text:0000000000406fef\n.text:0000000000406ff0\n.text:0000000000406ff2\n.text:0000000000406ff4\n'
p1371
tp1372
sS'__xargmatch_internal'
p1373
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1374
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00408c20\nTEST RAX,RAX\nJNS 0x00408ed9\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00408d20\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00408d90\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1376
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1377
S'.text:0000000000408e80\n.text:0000000000408e81\n.text:0000000000408e83\n.text:0000000000408e85\n.text:0000000000408e87\n.text:0000000000408e89\n.text:0000000000408e8a\n.text:0000000000408e8b\n.text:0000000000408e8e\n.text:0000000000408e91\n.text:0000000000408e94\n.text:0000000000408e97\n.text:0000000000408e9a\n.text:0000000000408e9d\n.text:0000000000408ea0\n.text:0000000000408ea3\n.text:0000000000408ea6\n.text:0000000000408ea9\n.text:0000000000408eae\n.text:0000000000408eb1\n.text:0000000000408eb3\n.text:0000000000408eb6\n.text:0000000000408eb9\n.text:0000000000408ebc\n.text:0000000000408ec1\n.text:0000000000408ec4\n.text:0000000000408ec7\n.text:0000000000408eca\n.text:0000000000408ecf\n.text:0000000000408ed2\n.text:0000000000408ed9\n.text:0000000000408edd\n.text:0000000000408ede\n.text:0000000000408ee0\n.text:0000000000408ee2\n.text:0000000000408ee4\n.text:0000000000408ee6\n.text:0000000000408ee7\n'
p1378
tp1379
sS'strcmp_atime'
p1380
(S'\n__stdcall strcmp_atime(V a, V b)\n'
p1381
V\u000aint strcmp_atime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_atime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1382
S'MOV EDX,0x4023f0\nJMP 0x00407320\n'
p1383
S'ba f0 23 40 00\ne9 96 02 00 00\n'
p1384
S'.text:0000000000407080\n.text:0000000000407085\n'
p1385
tp1386
sS'sort_files'
p1387
(S'\n__stdcall sort_files()\n'
p1388
V\u000avoid sort_files(void)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  time_type tVar3;\u000a  \u000a  if (sorted_file_alloc < (cwd_n_used >> 1) + cwd_n_used) {\u000a    free(sorted_file);\u000a    sorted_file = (void **)xnmalloc(cwd_n_used,0x18);\u000a    sorted_file_alloc = cwd_n_used * 3;\u000a  }\u000a  initialize_ordering_vector();\u000a  if (sort_type != sort_none) {\u000a    iVar1 = _setjmp((__jmp_buf_tag *)failed_strcoll);\u000a    if (iVar1 == 0) {\u000a      lVar2 = 0;\u000a    }\u000a    else {\u000a      if (sort_type == sort_version) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("sort_type != sort_version","src/ls.c",0xe29,"void sort_files(void)");\u000a      }\u000a      initialize_ordering_vector();\u000a      lVar2 = 1;\u000a    }\u000a    tVar3 = time_mtime;\u000a    if (sort_type == sort_time) {\u000a      tVar3 = time_type;\u000a    }\u000a    mpsort(sorted_file,cwd_n_used,\u000a           *(int (**)(void *,void *))\u000a            ((long)sort_functions +\u000a            (ulong)directories_first * 8 +\u000a            ((ulong)sort_reverse << 4 | lVar2 << 5 | (ulong)(tVar3 + sort_type) << 6)));\u000a  }\u000a  return;\u000a}\u000a\u000a
p1389
S'PUSH RBX\nMOV RAX,qword ptr [0x0061d808]\nMOV RCX,RAX\nSHR RCX,1\nADD RCX,RAX\nCMP qword ptr [0x0061e098],RCX\nJNC 0x004048dd\nMOV RDI,qword ptr [0x0061e048]\nCALL 0x004020d0\nMOV RDI,qword ptr [0x0061d808]\nMOV ESI,0x18\nCALL 0x0040f8f0\nMOV qword ptr [0x0061e048],RAX\nIMUL RAX,qword ptr [0x0061d808],0x3\nMOV qword ptr [0x0061e098],RAX\nCALL 0x00406520\nCMP dword ptr [0x0061d738],-0x1\nJZ 0x0040495f\nMOV EDI,0x61e0a0\nCALL 0x004023b0\nXOR EBX,EBX\nTEST EAX,EAX\nJZ 0x00404910\nCMP dword ptr [0x0061d738],0x3\nJZ 0x00404961\nCALL 0x00406520\nMOV EAX,0x1\nJMP 0x00404912\nXOR EAX,EAX\nMOV RDI,qword ptr [0x0061e048]\nMOV RSI,qword ptr [0x0061d808]\nMOV ECX,dword ptr [0x0061d738]\nCMP ECX,0x4\nCMOVZ EBX,dword ptr [0x0061d834]\nADD EBX,ECX\nMOVZX ECX,byte ptr [0x0061d838]\nMOVZX EDX,byte ptr [0x0061d73f]\nSHL RBX,0x6\nSHL RAX,0x5\nOR RAX,RBX\nSHL RCX,0x4\nOR RCX,RAX\nMOV RDX,qword ptr [0x414420 + RCX + RDX*0x8]\nCALL 0x0040bbe0\nPOP RBX\nRET\nMOV EDI,0x416a26\nMOV ESI,0x4146d9\nMOV EDX,0xe29\nMOV ECX,0x416a40\nCALL 0x00402330\n'
p1390
S'53\n48 8b 05 70 8f 21 00\n48 89 c1\n48 d1 e9\n48 01 c1\n48 39 0d f0 97 21 00\n73 33\n48 8b 3d 97 97 21 00\ne8 1a d8 ff ff\n48 8b 3d 4b 8f 21 00\nbe 18 00 00 00\ne8 29 b0 00 00\n48 89 05 7a 97 21 00\n48 6b 05 32 8f 21 00 03\n48 89 05 bb 97 21 00\ne8 3e 1c 00 00\n83 3d 4f 8e 21 00 ff\n74 74\nbf a0 e0 61 00\ne8 bb da ff ff\n31 db\n85 c0\n74 15\n83 3d 36 8e 21 00 03\n74 5d\ne8 17 1c 00 00\nb8 01 00 00 00\neb 02\n31 c0\n48 8b 3d 2f 97 21 00\n48 8b 35 e8 8e 21 00\n8b 0d 12 8e 21 00\n83 f9 04\n0f 44 1d 04 8f 21 00\n01 cb\n0f b6 0d ff 8e 21 00\n0f b6 15 ff 8d 21 00\n48 c1 e3 06\n48 c1 e0 05\n48 09 d8\n48 c1 e1 04\n48 09 c1\n48 8b 94 d1 20 44 41 00\ne8 81 72 00 00\n5b\nc3\nbf 26 6a 41 00\nbe d9 46 41 00\nba 29 0e 00 00\nb9 40 6a 41 00\ne8 b6 d9 ff ff\n'
p1391
S'.text:0000000000404890\n.text:0000000000404891\n.text:0000000000404898\n.text:000000000040489b\n.text:000000000040489e\n.text:00000000004048a1\n.text:00000000004048a8\n.text:00000000004048aa\n.text:00000000004048b1\n.text:00000000004048b6\n.text:00000000004048bd\n.text:00000000004048c2\n.text:00000000004048c7\n.text:00000000004048ce\n.text:00000000004048d6\n.text:00000000004048dd\n.text:00000000004048e2\n.text:00000000004048e9\n.text:00000000004048eb\n.text:00000000004048f0\n.text:00000000004048f5\n.text:00000000004048f7\n.text:00000000004048f9\n.text:00000000004048fb\n.text:0000000000404902\n.text:0000000000404904\n.text:0000000000404909\n.text:000000000040490e\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404919\n.text:0000000000404920\n.text:0000000000404926\n.text:0000000000404929\n.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404939\n.text:0000000000404940\n.text:0000000000404944\n.text:0000000000404948\n.text:000000000040494b\n.text:000000000040494f\n.text:0000000000404952\n.text:000000000040495a\n.text:000000000040495f\n.text:0000000000404960\n.text:0000000000404961\n.text:0000000000404966\n.text:000000000040496b\n.text:0000000000404970\n.text:0000000000404975\n'
p1392
tp1393
sS'rev_strcmp_atime'
p1394
(S'\n__stdcall rev_strcmp_atime(V a, V b)\n'
p1395
V\u000aint rev_strcmp_atime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_atime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407320\n'
p1397
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 1d 02 00 00\n'
p1398
S'.text:00000000004070f0\n.text:00000000004070f3\n.text:00000000004070f8\n.text:00000000004070fb\n.text:00000000004070fe\n'
p1399
tp1400
sS'rotr32'
p1401
(S'\n__stdcall rotr32()\n'
p1402
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1403
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1404
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1405
S'.text:0000000000410a90\n.text:0000000000410a92\n.text:0000000000410a94\n.text:0000000000410a96\n'
p1406
tp1407
sS'__ctype_b_loc'
p1408
(S'\n__stdcall __ctype_b_loc()\n'
p1409
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0061d360)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1410
S'JMP qword ptr [0x0061d360]\n'
p1411
S'ff 25 3a ac 21 00\n'
p1412
S'.plt:0000000000402720\n'
p1413
tp1414
sS'sigaddset'
p1415
(S'\n__stdcall sigaddset(sigset_t * __set, int __signo)\n'
p1416
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaddset(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaddset_0061d348)();\u000a  return iVar1;\u000a}\u000a\u000a
p1417
S'JMP qword ptr [0x0061d348]\n'
p1418
S'ff 25 52 ac 21 00\n'
p1419
S'.plt:00000000004026f0\n'
p1420
tp1421
sS'quotearg'
p1422
(S'\n__stdcall quotearg(char * arg)\n'
p1423
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1424
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040cf30\n'
p1425
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1426
S'.text:000000000040d110\n.text:000000000040d113\n.text:000000000040d115\n.text:000000000040d118\n'
p1427
tp1428
sS'equal_tm'
p1429
(S'\n__stdcall equal_tm(tm * a, tm * b)\n'
p1430
V\u000aint equal_tm(tm *a,tm *b)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  uint uVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  uint uVar12;\u000a  _Bool _Var13;\u000a  \u000a  uVar1 = b->tm_sec;\u000a  uVar2 = b->tm_min;\u000a  uVar3 = a->tm_sec;\u000a  uVar4 = a->tm_min;\u000a  uVar5 = b->tm_hour;\u000a  uVar6 = a->tm_hour;\u000a  uVar7 = b->tm_mday;\u000a  uVar8 = a->tm_mday;\u000a  uVar9 = b->tm_mon;\u000a  uVar10 = a->tm_mon;\u000a  uVar11 = b->tm_year;\u000a  uVar12 = a->tm_year;\u000a  _Var13 = isdst_differ();\u000a  return (int)(uint)(((uint)_Var13 |\u000a                     uVar11 ^ uVar12 | uVar9 ^ uVar10 |\u000a                     uVar7 ^ uVar8 | uVar5 ^ uVar6 | uVar2 ^ uVar4 | uVar1 ^ uVar3) == 0);\u000a}\u000a\u000a
p1431
S'PUSH RBX\nMOV EAX,dword ptr [RSI]\nMOV ECX,dword ptr [RSI + 0x4]\nXOR EAX,dword ptr [RDI]\nXOR ECX,dword ptr [RDI + 0x4]\nOR ECX,EAX\nMOV EAX,dword ptr [RSI + 0x8]\nXOR EAX,dword ptr [RDI + 0x8]\nMOV EDX,dword ptr [RSI + 0xc]\nXOR EDX,dword ptr [RDI + 0xc]\nOR EDX,EAX\nOR EDX,ECX\nMOV EAX,dword ptr [RSI + 0x10]\nXOR EAX,dword ptr [RDI + 0x10]\nMOV EBX,dword ptr [RSI + 0x14]\nXOR EBX,dword ptr [RDI + 0x14]\nOR EBX,EAX\nOR EBX,EDX\nMOV EDI,dword ptr [RDI + 0x20]\nMOV ESI,dword ptr [RSI + 0x20]\nCALL 0x00410a40\nMOVZX ECX,AL\nXOR EAX,EAX\nOR ECX,EBX\nSETZ AL\nPOP RBX\nRET\n'
p1432
S'53\n8b 06\n8b 4e 04\n33 07\n33 4f 04\n09 c1\n8b 46 08\n33 47 08\n8b 56 0c\n33 57 0c\n09 c2\n09 ca\n8b 46 10\n33 47 10\n8b 5e 14\n33 5f 14\n09 c3\n09 d3\n8b 7f 20\n8b 76 20\ne8 78 00 00 00\n0f b6 c8\n31 c0\n09 d9\n0f 94 c0\n5b\nc3\n'
p1433
S'.text:0000000000410990\n.text:0000000000410991\n.text:0000000000410993\n.text:0000000000410996\n.text:0000000000410998\n.text:000000000041099b\n.text:000000000041099d\n.text:00000000004109a0\n.text:00000000004109a3\n.text:00000000004109a6\n.text:00000000004109a9\n.text:00000000004109ab\n.text:00000000004109ad\n.text:00000000004109b0\n.text:00000000004109b3\n.text:00000000004109b6\n.text:00000000004109b9\n.text:00000000004109bb\n.text:00000000004109bd\n.text:00000000004109c0\n.text:00000000004109c3\n.text:00000000004109c8\n.text:00000000004109cb\n.text:00000000004109cd\n.text:00000000004109cf\n.text:00000000004109d2\n.text:00000000004109d3\n'
p1434
tp1435
sS'c_iscntrl'
p1436
(S'\n__stdcall c_iscntrl()\n'
p1437
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1438
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00410bb8\nRET\nCMP EDI,0x7f\nJZ 0x00410bb7\nXOR EAX,EAX\nRET\n'
p1439
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1440
S'.text:0000000000410bb0\n.text:0000000000410bb2\n.text:0000000000410bb5\n.text:0000000000410bb7\n.text:0000000000410bb8\n.text:0000000000410bbb\n.text:0000000000410bbd\n.text:0000000000410bbf\n'
p1441
tp1442
sS'hash_reset_tuning'
p1443
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1444
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1445
S'MOV EAX,dword ptr [0x00416e7c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x00416e6c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1446
S'8b 05 06 d2 00 00\n89 47 10\n0f 10 05 ec d1 00 00\n0f 11 07\nc3\n'
p1447
S'.text:0000000000409c70\n.text:0000000000409c76\n.text:0000000000409c79\n.text:0000000000409c80\n.text:0000000000409c83\n'
p1448
tp1449
sS'indent'
p1450
(S'\n__stdcall indent(size_t from, size_t to)\n'
p1451
V\u000avoid indent(size_t from,size_t to)\u000a\u000a{\u000a  if (from < to) {\u000a    do {\u000a      while ((tabsize == 0 || (to / tabsize <= (from + 1) / tabsize))) {\u000a        putchar_unlocked(0x20);\u000a        from = from + 1;\u000a        if (to <= from) {\u000a          return;\u000a        }\u000a      }\u000a      putchar_unlocked(9);\u000a      from = (tabsize + from) - from % tabsize;\u000a    } while (from < to);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1452
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCMP RBX,R14\nJC 0x00408702\nJMP 0x0040874e\nMOV EDI,0x20\nCALL 0x00402460\nINC RBX\nCMP RBX,R14\nJNC 0x0040874e\nMOV RSI,qword ptr [0x0061d858]\nTEST RSI,RSI\nJZ 0x004086f0\nXOR EDX,EDX\nMOV RAX,R14\nDIV RSI\nMOV RCX,RAX\nLEA RAX,[RBX + 0x1]\nXOR EDX,EDX\nDIV RSI\nCMP RCX,RAX\nJBE 0x004086f0\nMOV EDI,0x9\nCALL 0x00402460\nMOV RCX,qword ptr [0x0061d858]\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RCX\nADD RCX,RBX\nSUB RCX,RDX\nMOV RBX,RCX\nCMP RBX,R14\nJC 0x00408702\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1453
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n4c 39 f3\n72 23\neb 6d\nbf 20 00 00 00\ne8 66 9d ff ff\n48 ff c3\n4c 39 f3\n73 4c\n48 8b 35 4f 51 21 00\n48 85 f6\n74 e2\n31 d2\n4c 89 f0\n48 f7 f6\n48 89 c1\n48 8d 43 01\n31 d2\n48 f7 f6\n48 39 c1\n76 c9\nbf 09 00 00 00\ne8 2f 9d ff ff\n48 8b 0d 20 51 21 00\n31 d2\n48 89 d8\n48 f7 f1\n48 01 d9\n48 29 d1\n48 89 cb\n4c 39 f3\n72 b4\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1454
S'.text:00000000004086d0\n.text:00000000004086d2\n.text:00000000004086d3\n.text:00000000004086d4\n.text:00000000004086d7\n.text:00000000004086da\n.text:00000000004086dd\n.text:00000000004086df\n.text:00000000004086f0\n.text:00000000004086f5\n.text:00000000004086fa\n.text:00000000004086fd\n.text:0000000000408700\n.text:0000000000408702\n.text:0000000000408709\n.text:000000000040870c\n.text:000000000040870e\n.text:0000000000408710\n.text:0000000000408713\n.text:0000000000408716\n.text:0000000000408719\n.text:000000000040871d\n.text:000000000040871f\n.text:0000000000408722\n.text:0000000000408725\n.text:0000000000408727\n.text:000000000040872c\n.text:0000000000408731\n.text:0000000000408738\n.text:000000000040873a\n.text:000000000040873d\n.text:0000000000408740\n.text:0000000000408743\n.text:0000000000408746\n.text:0000000000408749\n.text:000000000040874c\n.text:000000000040874e\n.text:0000000000408752\n.text:0000000000408753\n.text:0000000000408755\n'
p1455
tp1456
sS'c_isblank'
p1457
(S'\n__stdcall c_isblank()\n'
p1458
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1459
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1460
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1461
S'.text:0000000000410ba0\n.text:0000000000410ba3\n.text:0000000000410ba6\n.text:0000000000410ba9\n.text:0000000000410bac\n.text:0000000000410bae\n'
p1462
tp1463
sS'isdst_differ'
p1464
(S'\n__stdcall isdst_differ()\n'
p1465
V\u000aint isdst_differ(void)\u000a\u000a{\u000a  uint in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (int)(uint)(-1 < (int)(in_ESI | in_EDI) && (in_ESI == 0) != (in_EDI == 0));\u000a}\u000a\u000a
p1466
S'TEST EDI,EDI\nSETZ AL\nTEST ESI,ESI\nSETZ CL\nXOR CL,AL\nOR ESI,EDI\nSETNS AL\nAND AL,CL\nMOVZX EAX,AL\nRET\n'
p1467
S'85 ff\n0f 94 c0\n85 f6\n0f 94 c1\n30 c1\n09 fe\n0f 99 c0\n20 c8\n0f b6 c0\nc3\n'
p1468
S'.text:0000000000411820\n.text:0000000000411822\n.text:0000000000411825\n.text:0000000000411827\n.text:000000000041182a\n.text:000000000041182c\n.text:000000000041182e\n.text:0000000000411831\n.text:0000000000411833\n.text:0000000000411836\n'
p1469
tp1470
sS'add_ignore_pattern'
p1471
(S'\n__stdcall add_ignore_pattern(char * pattern)\n'
p1472
V\u000avoid add_ignore_pattern(char *pattern)\u000a\u000a{\u000a  ignore_pattern *piVar1;\u000a  \u000a  piVar1 = (ignore_pattern *)xmalloc(0x10);\u000a  piVar1->pattern = pattern;\u000a  piVar1->next = ignore_patterns;\u000a  ignore_patterns = piVar1;\u000a  return;\u000a}\u000a\u000a
p1473
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x10\nCALL 0x0040f910\nMOV qword ptr [RAX],RBX\nMOV RCX,qword ptr [0x0061d840]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [0x0061d840],RAX\nPOP RBX\nRET\n'
p1474
S'53\n48 89 fb\nbf 10 00 00 00\ne8 32 a1 00 00\n48 89 18\n48 8b 0d 58 80 21 00\n48 89 48 08\n48 89 05 4d 80 21 00\n5b\nc3\n'
p1475
S'.text:00000000004057d0\n.text:00000000004057d1\n.text:00000000004057d4\n.text:00000000004057d9\n.text:00000000004057de\n.text:00000000004057e1\n.text:00000000004057e8\n.text:00000000004057ec\n.text:00000000004057f3\n.text:00000000004057f4\n'
p1476
tp1477
sS'rev_strcmp_name'
p1478
(S'\n__stdcall rev_strcmp_name(V a, V b)\n'
p1479
V\u000aint rev_strcmp_name(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_name((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1480
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407170\n'
p1481
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 8d 0a 00 00\n'
p1482
S'.text:00000000004066d0\n.text:00000000004066d3\n.text:00000000004066d8\n.text:00000000004066db\n.text:00000000004066de\n'
p1483
tp1484
sS'mbstowcs'
p1485
(S'\n__stdcall mbstowcs(wchar_t * __pwcs, char * __s, size_t __n)\n'
p1486
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbstowcs(wchar_t *__pwcs,char *__s,size_t __n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbstowcs_0061d0b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1487
S'JMP qword ptr [0x0061d0b8]\n'
p1488
S'ff 25 e2 ae 21 00\n'
p1489
S'.plt:00000000004021d0\n'
p1490
tp1491
sS'guess_time_tm'
p1492
(S'\n__stdcall guess_time_tm(long_int year, long_int yday, time_t * t, tm * tp)\n'
p1493
V\u000atime_t guess_time_tm(long_int year,long_int yday,time_t *t,tm *tp)\u000a\u000a{\u000a  int iVar1;\u000a  time_t b;\u000a  long lVar2;\u000a  time_t a;\u000a  int min0;\u000a  time_t *in_R9;\u000a  long in_stack_00000008;\u000a  \u000a  if (in_stack_00000008 == 0) {\u000a    a = *in_R9;\u000a  }\u000a  else {\u000a    b = ydhms_diff(year,yday,(int)t,(int)tp,min0,*(int *)(in_stack_00000008 + 0x14));\u000a    a = *in_R9;\u000a    iVar1 = time_t_add_ok(a,b);\u000a    if (iVar1 != 0) {\u000a      return a + b;\u000a    }\u000a  }\u000a  if (a < 0) {\u000a    lVar2 = -0x8000000000000000;\u000a    if (a < -0x7ffffffffffffffe) {\u000a      lVar2 = a + 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar2 = a + -1;\u000a    if (a < 0x7ffffffffffffffe) {\u000a      lVar2 = 0x7fffffffffffffff;\u000a    }\u000a  }\u000a  return lVar2;\u000a}\u000a\u000a
p1494
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,R9\nMOV RAX,qword ptr [RSP + 0x20]\nTEST RAX,RAX\nJZ 0x0041170c\nMOV R9D,dword ptr [RAX + 0x14]\nMOV R10D,dword ptr [RAX + 0x1c]\nMOV R11D,dword ptr [RAX + 0x8]\nMOV EBX,dword ptr [RAX]\nMOV EAX,dword ptr [RAX + 0x4]\nPUSH RBX\nPUSH RAX\nPUSH R11\nPUSH R10\nCALL 0x004115b0\nADD RSP,0x20\nMOV R14,RAX\nMOV RBX,qword ptr [R15]\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00411880\nTEST EAX,EAX\nJZ 0x0041170f\nADD RBX,R14\nJMP 0x00411745\nMOV RBX,qword ptr [R15]\nMOV RAX,0x7ffffffffffffffd\nTEST RBX,RBX\nJS 0x0041172f\nCMP RBX,RAX\nLEA RCX,[RAX + 0x2]\nLEA RAX,[RBX + -0x1]\nCMOVLE RAX,RCX\nJMP 0x00411748\nLEA RCX,[RAX + 0x5]\nLEA RDX,[RBX + 0x1]\nADD RAX,0x3\nCMP RBX,RCX\nCMOVL RAX,RDX\nMOV RBX,RAX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1495
S'41 57\n41 56\n53\n4d 89 cf\n48 8b 44 24 20\n48 85 c0\n74 3a\n44 8b 48 14\n44 8b 50 1c\n44 8b 58 08\n8b 18\n8b 40 04\n53\n50\n41 53\n41 52\ne8 c2 fe ff ff\n48 83 c4 20\n49 89 c6\n49 8b 1f\n48 89 df\n4c 89 f6\ne8 7d 01 00 00\n85 c0\n74 08\n4c 01 f3\neb 39\n49 8b 1f\n48 b8 fd ff ff ff ff ff ff 7f\n48 85 db\n78 11\n48 39 c3\n48 8d 48 02\n48 8d 43 ff\n48 0f 4e c1\neb 19\n48 8d 48 05\n48 8d 53 01\n48 83 c0 03\n48 39 cb\n48 0f 4c c2\n48 89 c3\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1496
S'.text:00000000004116c0\n.text:00000000004116c2\n.text:00000000004116c4\n.text:00000000004116c5\n.text:00000000004116c8\n.text:00000000004116cd\n.text:00000000004116d0\n.text:00000000004116d2\n.text:00000000004116d6\n.text:00000000004116da\n.text:00000000004116de\n.text:00000000004116e0\n.text:00000000004116e3\n.text:00000000004116e4\n.text:00000000004116e5\n.text:00000000004116e7\n.text:00000000004116e9\n.text:00000000004116ee\n.text:00000000004116f2\n.text:00000000004116f5\n.text:00000000004116f8\n.text:00000000004116fb\n.text:00000000004116fe\n.text:0000000000411703\n.text:0000000000411705\n.text:0000000000411707\n.text:000000000041170a\n.text:000000000041170c\n.text:000000000041170f\n.text:0000000000411719\n.text:000000000041171c\n.text:000000000041171e\n.text:0000000000411721\n.text:0000000000411725\n.text:0000000000411729\n.text:000000000041172d\n.text:000000000041172f\n.text:0000000000411733\n.text:0000000000411737\n.text:000000000041173b\n.text:000000000041173e\n.text:0000000000411742\n.text:0000000000411745\n.text:0000000000411748\n.text:0000000000411749\n.text:000000000041174b\n.text:000000000041174d\n'
p1497
tp1498
sS'strcmp_df_name'
p1499
(S'\n__stdcall strcmp_df_name(V a, V b)\n'
p1500
V\u000aint strcmp_df_name(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_name((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1501
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040669a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x004066bd\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x004066bd\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407170\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1502
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 40 fe ff ff\n89 c3\n4c 89 f7\ne8 36 fe ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 b3 0a 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1503
S'.text:0000000000406670\n.text:0000000000406672\n.text:0000000000406674\n.text:0000000000406675\n.text:0000000000406678\n.text:000000000040667b\n.text:0000000000406680\n.text:0000000000406682\n.text:0000000000406685\n.text:000000000040668a\n.text:000000000040668c\n.text:000000000040668e\n.text:0000000000406690\n.text:0000000000406693\n.text:0000000000406698\n.text:000000000040669a\n.text:000000000040669c\n.text:000000000040669e\n.text:00000000004066a3\n.text:00000000004066a6\n.text:00000000004066a8\n.text:00000000004066ad\n.text:00000000004066b0\n.text:00000000004066b3\n.text:00000000004066b4\n.text:00000000004066b6\n.text:00000000004066b8\n.text:00000000004066bd\n.text:00000000004066bf\n.text:00000000004066c0\n.text:00000000004066c2\n.text:00000000004066c4\n'
p1504
tp1505
sS'format_group_width'
p1506
(S'\n__stdcall format_group_width()\n'
p1507
V\u000aint format_group_width(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *name;\u000a  uint in_EDI;\u000a  \u000a  if (numeric_ids == 0) {\u000a    name = getgroup();\u000a  }\u000a  else {\u000a    name = (char *)0x0;\u000a  }\u000a  iVar1 = format_user_or_group_width(name,(ulong)in_EDI);\u000a  return iVar1;\u000a}\u000a\u000a
p1508
S'PUSH RBX\nMOV EBX,EDI\nMOV AL,byte ptr [0x0061d839]\nTEST AL,AL\nJZ 0x00406421\nXOR EDI,EDI\nJMP 0x0040642b\nMOV EDI,EBX\nCALL 0x0040b260\nMOV RDI,RAX\nMOV ESI,EBX\nPOP RBX\nJMP 0x00406470\n'
p1509
S'53\n89 fb\n8a 05 20 74 21 00\n84 c0\n74 04\n31 ff\neb 0a\n89 df\ne8 38 4e 00 00\n48 89 c7\n89 de\n5b\neb 40\n'
p1510
S'.text:0000000000406410\n.text:0000000000406411\n.text:0000000000406413\n.text:0000000000406419\n.text:000000000040641b\n.text:000000000040641d\n.text:000000000040641f\n.text:0000000000406421\n.text:0000000000406423\n.text:0000000000406428\n.text:000000000040642b\n.text:000000000040642d\n.text:000000000040642e\n'
p1511
tp1512
sS'is_directory'
p1513
(S'\n__stdcall is_directory(fileinfo * f)\n'
p1514
V\u000a_Bool is_directory(fileinfo *f)\u000a\u000a{\u000a  return (_Bool)(f->filetype == arg_directory || f->filetype == directory);\u000a}\u000a\u000a
p1515
S'MOV EAX,dword ptr [0xa0 + RDI]\nCMP EAX,0x3\nSETZ CL\nCMP EAX,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1516
S'8b 87 a0 00 00 00\n83 f8 03\n0f 94 c1\n83 f8 09\n0f 94 c0\n08 c8\nc3\n'
p1517
S'.text:00000000004064c0\n.text:00000000004064c6\n.text:00000000004064c9\n.text:00000000004064cc\n.text:00000000004064cf\n.text:00000000004064d2\n.text:00000000004064d4\n'
p1518
tp1519
sS'format_user'
p1520
(S'\n__stdcall format_user()\n'
p1521
V\u000avoid format_user(uint uParm1,undefined8 uParm2,char cParm3)\u000a\u000a{\u000a  char *name;\u000a  \u000a  if (cParm3 == 0) {\u000a    name = "?";\u000a  }\u000a  else {\u000a    if (numeric_ids == 0) {\u000a      name = getuser();\u000a    }\u000a    else {\u000a      name = (char *)0x0;\u000a    }\u000a  }\u000a  format_user_or_group(name,(ulong)uParm1);\u000a  return;\u000a}\u000a\u000a
p1522
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV EBP,EDI\nTEST DL,DL\nJZ 0x004088c9\nMOV AL,byte ptr [0x0061d839]\nTEST AL,AL\nJZ 0x004088d0\nXOR EDI,EDI\nJMP 0x004088da\nMOV EDI,0x4168bd\nJMP 0x004088da\nMOV EDI,EBP\nCALL 0x0040b0e0\nMOV RDI,RAX\nMOV ESI,EBP\nMOV EDX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00408930\n'
p1523
S'55\n53\n50\n89 f3\n89 fd\n84 d2\n74 0e\n8a 05 78 4f 21 00\n84 c0\n74 0b\n31 ff\neb 11\nbf bd 68 41 00\neb 0a\n89 ef\ne8 09 28 00 00\n48 89 c7\n89 ee\n89 da\n48 83 c4 08\n5b\n5d\neb 4a\n'
p1524
S'.text:00000000004088b0\n.text:00000000004088b1\n.text:00000000004088b2\n.text:00000000004088b3\n.text:00000000004088b5\n.text:00000000004088b7\n.text:00000000004088b9\n.text:00000000004088bb\n.text:00000000004088c1\n.text:00000000004088c3\n.text:00000000004088c5\n.text:00000000004088c7\n.text:00000000004088c9\n.text:00000000004088ce\n.text:00000000004088d0\n.text:00000000004088d2\n.text:00000000004088d7\n.text:00000000004088da\n.text:00000000004088dc\n.text:00000000004088de\n.text:00000000004088e2\n.text:00000000004088e3\n.text:00000000004088e4\n'
p1525
tp1526
sS'xstrtoul'
p1527
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1528
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_0040fe06;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_0040fe06;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_0040fd35_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_0040fd13:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_0040fd13;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_0040fde7;\u000a  default:\u000aswitchD_0040fd35_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_0040fde7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_0040fde7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_0040fe06:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1529
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x0040fe23\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402110\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00402720\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x0040fc20\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x0040fe12\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00402650\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x0040fc80\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x0040fcb1\nCMP EAX,0x22\nJNZ 0x0040fe12\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040fcbc\nJMP 0x0040fe06\nTEST R12,R12\nJZ 0x0040fe12\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x0040fe12\nMOV RDI,R12\nCALL 0x004022d0\nTEST RAX,RAX\nJZ 0x0040fe12\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040fcbc\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x0040fe06\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x0040fe06\nMOV RDI,R12\nCALL 0x004022d0\nTEST RAX,RAX\nJZ 0x0040fd4e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004022d0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x0040fd13\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040fd1a\nCMP EAX,0x44\nJZ 0x0040fd1a\nCMP EAX,0x69\nJNZ 0x0040fd13\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x0040fd24\nMOV EBP,0x1\nJMP 0x0040fd24\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040fd4e\nXOR EAX,EAX\nJMP qword ptr [0x417f20 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x0040fe12\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x0040fde7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x0040fe70\nJMP 0x0040fdec\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x0040fde7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x0040fe40\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4180d0\nMOV ESI,0x4180f6\nMOV EDX,0x60\nMOV ECX,0x418106\nCALL 0x00402330\n'
p1530
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 12 25 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 13 2b ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 fc 29 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 34 26 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 fc 25 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 ea 25 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 20 7f 41 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf d0 80 41 00\nbe f6 80 41 00\nba 60 00 00 00\nb9 06 81 41 00\ne8 f4 24 ff ff\n'
p1531
S'.text:000000000040fbd0\n.text:000000000040fbd1\n.text:000000000040fbd3\n.text:000000000040fbd5\n.text:000000000040fbd7\n.text:000000000040fbd9\n.text:000000000040fbda\n.text:000000000040fbde\n.text:000000000040fbe1\n.text:000000000040fbe4\n.text:000000000040fbe7\n.text:000000000040fbea\n.text:000000000040fbee\n.text:000000000040fbf4\n.text:000000000040fbf9\n.text:000000000040fbfe\n.text:000000000040fc01\n.text:000000000040fc08\n.text:000000000040fc0d\n.text:000000000040fc10\n.text:000000000040fc13\n.text:000000000040fc20\n.text:000000000040fc23\n.text:000000000040fc26\n.text:000000000040fc2b\n.text:000000000040fc2d\n.text:000000000040fc30\n.text:000000000040fc35\n.text:000000000040fc39\n.text:000000000040fc3e\n.text:000000000040fc40\n.text:000000000040fc46\n.text:000000000040fc49\n.text:000000000040fc4c\n.text:000000000040fc4f\n.text:000000000040fc54\n.text:000000000040fc58\n.text:000000000040fc5c\n.text:000000000040fc5f\n.text:000000000040fc61\n.text:000000000040fc64\n.text:000000000040fc66\n.text:000000000040fc68\n.text:000000000040fc6b\n.text:000000000040fc71\n.text:000000000040fc76\n.text:000000000040fc79\n.text:000000000040fc7b\n.text:000000000040fc80\n.text:000000000040fc83\n.text:000000000040fc89\n.text:000000000040fc8c\n.text:000000000040fc8e\n.text:000000000040fc94\n.text:000000000040fc97\n.text:000000000040fc9c\n.text:000000000040fc9f\n.text:000000000040fca5\n.text:000000000040fcad\n.text:000000000040fcaf\n.text:000000000040fcb1\n.text:000000000040fcb3\n.text:000000000040fcb6\n.text:000000000040fcbc\n.text:000000000040fcc0\n.text:000000000040fcc4\n.text:000000000040fcc6\n.text:000000000040fccc\n.text:000000000040fccf\n.text:000000000040fcd4\n.text:000000000040fcd7\n.text:000000000040fcd9\n.text:000000000040fcde\n.text:000000000040fce1\n.text:000000000040fce6\n.text:000000000040fceb\n.text:000000000040fcee\n.text:000000000040fcf0\n.text:000000000040fcf4\n.text:000000000040fcf7\n.text:000000000040fcf9\n.text:000000000040fcfc\n.text:000000000040fcfe\n.text:000000000040fd01\n.text:000000000040fd03\n.text:000000000040fd05\n.text:000000000040fd09\n.text:000000000040fd0c\n.text:000000000040fd11\n.text:000000000040fd13\n.text:000000000040fd18\n.text:000000000040fd1a\n.text:000000000040fd1f\n.text:000000000040fd24\n.text:000000000040fd28\n.text:000000000040fd2b\n.text:000000000040fd2e\n.text:000000000040fd31\n.text:000000000040fd33\n.text:000000000040fd35\n.text:000000000040fd3c\n.text:000000000040fd3f\n.text:000000000040fd44\n.text:000000000040fd49\n.text:000000000040fd4e\n.text:000000000040fd52\n.text:000000000040fd57\n.text:000000000040fd5a\n.text:000000000040fd5d\n.text:000000000040fd62\n.text:000000000040fd65\n.text:000000000040fd6a\n.text:000000000040fd6f\n.text:000000000040fd71\n.text:000000000040fd74\n.text:000000000040fd79\n.text:000000000040fd7e\n.text:000000000040fd80\n.text:000000000040fd83\n.text:000000000040fd88\n.text:000000000040fd8d\n.text:000000000040fd8f\n.text:000000000040fd92\n.text:000000000040fd97\n.text:000000000040fd99\n.text:000000000040fd9c\n.text:000000000040fda1\n.text:000000000040fda6\n.text:000000000040fda8\n.text:000000000040fdab\n.text:000000000040fdb0\n.text:000000000040fdb5\n.text:000000000040fdb7\n.text:000000000040fdba\n.text:000000000040fdbf\n.text:000000000040fdc4\n.text:000000000040fdc6\n.text:000000000040fdc9\n.text:000000000040fdce\n.text:000000000040fdd3\n.text:000000000040fdd5\n.text:000000000040fdd8\n.text:000000000040fddd\n.text:000000000040fddf\n.text:000000000040fde2\n.text:000000000040fde7\n.text:000000000040fdec\n.text:000000000040fdee\n.text:000000000040fdf2\n.text:000000000040fdf6\n.text:000000000040fdfa\n.text:000000000040fdfc\n.text:000000000040fdff\n.text:000000000040fe03\n.text:000000000040fe06\n.text:000000000040fe0a\n.text:000000000040fe0f\n.text:000000000040fe12\n.text:000000000040fe14\n.text:000000000040fe18\n.text:000000000040fe19\n.text:000000000040fe1b\n.text:000000000040fe1d\n.text:000000000040fe1f\n.text:000000000040fe21\n.text:000000000040fe22\n.text:000000000040fe23\n.text:000000000040fe28\n.text:000000000040fe2d\n.text:000000000040fe32\n.text:000000000040fe37\n'
p1532
tp1533
sS'print_current_files'
p1534
(S'\n__stdcall print_current_files()\n'
p1535
V\u000avoid print_current_files(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  switch(format) {\u000a  case long_format:\u000a    if (cwd_n_used != 0) {\u000a      uVar1 = 0;\u000a      do {\u000a        set_normal_color();\u000a        print_long_format((fileinfo *)sorted_file[uVar1]);\u000a        putchar_unlocked(10);\u000a        dired_pos = dired_pos + 1;\u000a        uVar1 = uVar1 + 1;\u000a      } while (uVar1 < cwd_n_used);\u000a    }\u000a    break;\u000a  case one_per_line:\u000a    if (cwd_n_used != 0) {\u000a      uVar1 = 0;\u000a      do {\u000a        print_file_name_and_frills();\u000a        putchar_unlocked(10);\u000a        uVar1 = uVar1 + 1;\u000a      } while (uVar1 < cwd_n_used);\u000a    }\u000a    break;\u000a  case many_per_line:\u000a    if (line_length != 0) {\u000a      print_many_per_line();\u000a      return;\u000a    }\u000a    goto LAB_00404b75;\u000a  case horizontal:\u000a    if (line_length != 0) {\u000a      print_horizontal();\u000a      return;\u000a    }\u000aLAB_00404b75:\u000a    print_with_separator(0x20);\u000a    return;\u000a  case with_commas:\u000a    print_with_separator(0x2c);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1536
S'PUSH RBX\nMOV EAX,dword ptr [0x0061d634]\nCMP RAX,0x4\nJA 0x00404b48\nJMP qword ptr [0x4122a8 + RAX*0x8]\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00404b48\nXOR EBX,EBX\nCALL 0x004077c0\nMOV RAX,qword ptr [0x0061e048]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407800\nMOV EDI,0xa\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nINC RBX\nCMP RBX,qword ptr [0x0061d808]\nJC 0x00404ae0\nJMP 0x00404b48\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00404b48\nXOR EBX,EBX\nMOV RAX,qword ptr [0x0061e048]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nXOR ESI,ESI\nCALL 0x00407380\nMOV EDI,0xa\nCALL 0x00402460\nINC RBX\nCMP RBX,qword ptr [0x0061d808]\nJC 0x00404b20\nPOP RBX\nRET\nCMP qword ptr [0x0061d850],0x0\nJZ 0x00404b75\nPOP RBX\nJMP 0x00407590\nCMP qword ptr [0x0061d850],0x0\nJZ 0x00404b75\nPOP RBX\nJMP 0x004076c0\nMOV EDI,0x2c\nPOP RBX\nJMP 0x004074a0\nMOV EDI,0x20\nPOP RBX\nJMP 0x004074a0\n'
p1537
S'53\n8b 05 6d 8b 21 00\n48 83 f8 04\n77 7b\nff 24 c5 a8 22 41 00\n48 83 3d 2c 8d 21 00 00\n74 6a\n31 db\ne8 db 2c 00 00\n48 8b 05 5c 95 21 00\n48 8b 3c d8\ne8 0b 2d 00 00\nbf 0a 00 00 00\ne8 61 d9 ff ff\n48 ff 05 0a 8d 21 00\n48 ff c3\n48 3b 1d f8 8c 21 00\n72 ce\neb 34\n48 83 3d ec 8c 21 00 00\n74 2a\n31 db\n48 8b 05 21 95 21 00\n48 8b 3c d8\n31 f6\ne8 4e 28 00 00\nbf 0a 00 00 00\ne8 24 d9 ff ff\n48 ff c3\n48 3b 1d c2 8c 21 00\n72 d8\n5b\nc3\n48 83 3d fe 8c 21 00 00\n74 21\n5b\ne9 36 2a 00 00\n48 83 3d ee 8c 21 00 00\n74 11\n5b\ne9 56 2b 00 00\nbf 2c 00 00 00\n5b\ne9 2b 29 00 00\nbf 20 00 00 00\n5b\ne9 20 29 00 00\n'
p1538
S'.text:0000000000404ac0\n.text:0000000000404ac1\n.text:0000000000404ac7\n.text:0000000000404acb\n.text:0000000000404acd\n.text:0000000000404ad4\n.text:0000000000404adc\n.text:0000000000404ade\n.text:0000000000404ae0\n.text:0000000000404ae5\n.text:0000000000404aec\n.text:0000000000404af0\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404aff\n.text:0000000000404b06\n.text:0000000000404b09\n.text:0000000000404b10\n.text:0000000000404b12\n.text:0000000000404b14\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b20\n.text:0000000000404b27\n.text:0000000000404b2b\n.text:0000000000404b2d\n.text:0000000000404b32\n.text:0000000000404b37\n.text:0000000000404b3c\n.text:0000000000404b3f\n.text:0000000000404b46\n.text:0000000000404b48\n.text:0000000000404b49\n.text:0000000000404b4a\n.text:0000000000404b52\n.text:0000000000404b54\n.text:0000000000404b55\n.text:0000000000404b5a\n.text:0000000000404b62\n.text:0000000000404b64\n.text:0000000000404b65\n.text:0000000000404b6a\n.text:0000000000404b6f\n.text:0000000000404b70\n.text:0000000000404b75\n.text:0000000000404b7a\n.text:0000000000404b7b\n'
p1539
tp1540
sS'timespec_cmp'
p1541
(S'\n__stdcall timespec_cmp()\n'
p1542
V\u000aint timespec_cmp(void)\u000a\u000a{\u000a  int in_ECX;\u000a  long in_RDX;\u000a  int in_ESI;\u000a  int iVar1;\u000a  long in_RDI;\u000a  \u000a  iVar1 = -1;\u000a  if ((in_RDX <= in_RDI) && (iVar1 = 1, in_RDI <= in_RDX)) {\u000a    iVar1 = in_ESI - in_ECX;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1543
S'MOV EAX,0xffffffff\nCMP RDI,RDX\nJL 0x0040f3a5\nMOV EAX,0x1\nJG 0x0040f3a5\nSUB ESI,ECX\nMOV EAX,ESI\nRET\n'
p1544
S'b8 ff ff ff ff\n48 39 d7\n7c 0b\nb8 01 00 00 00\n7f 04\n29 ce\n89 f0\nc3\n'
p1545
S'.text:000000000040f390\n.text:000000000040f395\n.text:000000000040f398\n.text:000000000040f39a\n.text:000000000040f39f\n.text:000000000040f3a1\n.text:000000000040f3a3\n.text:000000000040f3a5\n'
p1546
tp1547
sS'argmatch'
p1548
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1549
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1550
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00402290\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00408ce7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x00408cd0\nMOV RDI,R15\nCALL 0x00402290\nCMP RAX,RBX\nJZ 0x00408d09\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00408cc5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00408cbc\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x004023a0\nTEST EAX,EAX\nJZ 0x00408cd0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00408cd0\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00408c70\nJMP 0x00408cf7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1551
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 51 96 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 a2 94 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 06 96 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 e8 96 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1552
S'.text:0000000000408c20\n.text:0000000000408c21\n.text:0000000000408c23\n.text:0000000000408c25\n.text:0000000000408c27\n.text:0000000000408c29\n.text:0000000000408c2a\n.text:0000000000408c2e\n.text:0000000000408c31\n.text:0000000000408c34\n.text:0000000000408c37\n.text:0000000000408c3a\n.text:0000000000408c3f\n.text:0000000000408c42\n.text:0000000000408c47\n.text:0000000000408c4b\n.text:0000000000408c4e\n.text:0000000000408c54\n.text:0000000000408c5d\n.text:0000000000408c5f\n.text:0000000000408c64\n.text:0000000000408c69\n.text:0000000000408c6b\n.text:0000000000408c70\n.text:0000000000408c73\n.text:0000000000408c76\n.text:0000000000408c79\n.text:0000000000408c7e\n.text:0000000000408c80\n.text:0000000000408c82\n.text:0000000000408c85\n.text:0000000000408c8a\n.text:0000000000408c8d\n.text:0000000000408c8f\n.text:0000000000408c95\n.text:0000000000408c97\n.text:0000000000408c9c\n.text:0000000000408c9f\n.text:0000000000408ca1\n.text:0000000000408ca6\n.text:0000000000408caa\n.text:0000000000408cad\n.text:0000000000408cb0\n.text:0000000000408cb3\n.text:0000000000408cb8\n.text:0000000000408cba\n.text:0000000000408cbc\n.text:0000000000408cbe\n.text:0000000000408cc3\n.text:0000000000408cc5\n.text:0000000000408cca\n.text:0000000000408cd0\n.text:0000000000408cd5\n.text:0000000000408cda\n.text:0000000000408cdd\n.text:0000000000408ce0\n.text:0000000000408ce3\n.text:0000000000408ce5\n.text:0000000000408ce7\n.text:0000000000408cf0\n.text:0000000000408cf2\n.text:0000000000408cf7\n.text:0000000000408cfc\n.text:0000000000408d03\n.text:0000000000408d09\n.text:0000000000408d0c\n.text:0000000000408d10\n.text:0000000000408d11\n.text:0000000000408d13\n.text:0000000000408d15\n.text:0000000000408d17\n.text:0000000000408d19\n.text:0000000000408d1a\n'
p1553
tp1554
sS'getgidbyname'
p1555
(S'\n__stdcall getgidbyname(char * group)\n'
p1556
V\u000agid_t * getgidbyname(char *group)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  group *pgVar3;\u000a  size_t sVar4;\u000a  userid *puVar5;\u000a  userid *puVar6;\u000a  \u000a  if (group_alist != (userid *)0x0) {\u000a    cVar1 = *group;\u000a    puVar5 = group_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),group), iVar2 == 0)) {\u000a        return (gid_t *)puVar5;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  if (nogroup_alist != (userid *)0x0) {\u000a    cVar1 = *group;\u000a    puVar5 = nogroup_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),group), iVar2 == 0)) {\u000a        return (gid_t *)0x0;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  pgVar3 = getgrnam(group);\u000a  sVar4 = strlen(group);\u000a  puVar5 = (userid *)xmalloc(sVar4 + 0x11);\u000a  strcpy((char *)(puVar5 + 1),group);\u000a  if (pgVar3 == (group *)0x0) {\u000a    puVar5->next = nogroup_alist;\u000a    puVar6 = (userid *)0x0;\u000a    nogroup_alist = puVar5;\u000a  }\u000a  else {\u000a    puVar5->id = pgVar3->gr_gid;\u000a    puVar5->next = group_alist;\u000a    puVar6 = puVar5;\u000a    group_alist = puVar5;\u000a  }\u000a  return (gid_t *)puVar6;\u000a}\u000a\u000a
p1557
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV R12,qword ptr [0x0061e198]\nTEST R12,R12\nJZ 0x0040b336\nMOV BL,byte ptr [R14]\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R12 + 0x10],BL\nJNZ 0x0040b32c\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x0040b3d3\nMOV R12,qword ptr [R12 + 0x8]\nTEST R12,R12\nJNZ 0x0040b310\nMOV RBX,qword ptr [0x0061e1a0]\nTEST RBX,RBX\nJZ 0x0040b36f\nMOV BPL,byte ptr [R14]\nXOR R12D,R12D\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBX + 0x10],BPL\nJNZ 0x0040b366\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x0040b3d3\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x0040b350\nMOV RDI,R14\nCALL 0x00402450\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x00402290\nLEA RDI,[RAX + 0x11]\nCALL 0x0040f910\nMOV R12,RAX\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x00402150\nTEST R15,R15\nJZ 0x0040b3bd\nMOV EAX,dword ptr [R15 + 0x10]\nMOV dword ptr [R12],EAX\nMOV RAX,qword ptr [0x0061e198]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0061e198],R12\nJMP 0x0040b3d3\nMOV RAX,qword ptr [0x0061e1a0]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0061e1a0],R12\nXOR R12D,R12D\nMOV RAX,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1558
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n4c 8b 25 96 2e 21 00\n4d 85 e4\n74 2f\n41 8a 1e\n66 0f 1f 44 00 00\n41 38 5c 24 10\n75 15\n49 8d 7c 24 10\n4c 89 f6\ne8 cc 70 ff ff\n85 c0\n0f 84 a7 00 00 00\n4d 8b 64 24 08\n4d 85 e4\n75 da\n48 8b 1d 63 2e 21 00\n48 85 db\n74 2d\n41 8a 2e\n45 31 e4\n0f 1f 84 00 00 00 00 00\n40 38 6b 10\n75 10\n48 8d 7b 10\n4c 89 f6\ne8 8e 70 ff ff\n85 c0\n74 6d\n48 8b 5b 08\n48 85 db\n75 e1\n4c 89 f7\ne8 d9 70 ff ff\n49 89 c7\n4c 89 f7\ne8 0e 6f ff ff\n48 8d 78 11\ne8 85 45 00 00\n49 89 c4\n49 8d 7c 24 10\n4c 89 f6\ne8 b5 6d ff ff\n4d 85 ff\n74 1d\n41 8b 47 10\n41 89 04 24\n48 8b 05 e9 2d 21 00\n49 89 44 24 08\n4c 89 25 dd 2d 21 00\neb 16\n48 8b 05 dc 2d 21 00\n49 89 44 24 08\n4c 89 25 d0 2d 21 00\n45 31 e4\n4c 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1559
S'.text:000000000040b2f0\n.text:000000000040b2f1\n.text:000000000040b2f3\n.text:000000000040b2f5\n.text:000000000040b2f7\n.text:000000000040b2f8\n.text:000000000040b2fb\n.text:000000000040b302\n.text:000000000040b305\n.text:000000000040b307\n.text:000000000040b30a\n.text:000000000040b310\n.text:000000000040b315\n.text:000000000040b317\n.text:000000000040b31c\n.text:000000000040b31f\n.text:000000000040b324\n.text:000000000040b326\n.text:000000000040b32c\n.text:000000000040b331\n.text:000000000040b334\n.text:000000000040b336\n.text:000000000040b33d\n.text:000000000040b340\n.text:000000000040b342\n.text:000000000040b345\n.text:000000000040b348\n.text:000000000040b350\n.text:000000000040b354\n.text:000000000040b356\n.text:000000000040b35a\n.text:000000000040b35d\n.text:000000000040b362\n.text:000000000040b364\n.text:000000000040b366\n.text:000000000040b36a\n.text:000000000040b36d\n.text:000000000040b36f\n.text:000000000040b372\n.text:000000000040b377\n.text:000000000040b37a\n.text:000000000040b37d\n.text:000000000040b382\n.text:000000000040b386\n.text:000000000040b38b\n.text:000000000040b38e\n.text:000000000040b393\n.text:000000000040b396\n.text:000000000040b39b\n.text:000000000040b39e\n.text:000000000040b3a0\n.text:000000000040b3a4\n.text:000000000040b3a8\n.text:000000000040b3af\n.text:000000000040b3b4\n.text:000000000040b3bb\n.text:000000000040b3bd\n.text:000000000040b3c4\n.text:000000000040b3c9\n.text:000000000040b3d0\n.text:000000000040b3d3\n.text:000000000040b3d6\n.text:000000000040b3d7\n.text:000000000040b3d9\n.text:000000000040b3db\n.text:000000000040b3dd\n.text:000000000040b3de\n'
p1560
tp1561
sS'fgetfilecon'
p1562
(S'\n__stdcall fgetfilecon(security_context_t * con)\n'
p1563
V\u000aint fgetfilecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1564
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1565
S'50\ne8 fa 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1566
S'.text:000000000040d910\n.text:000000000040d911\n.text:000000000040d916\n.text:000000000040d91c\n.text:000000000040d921\n.text:000000000040d922\n'
p1567
tp1568
sS'getfilecon'
p1569
(S'\n__stdcall getfilecon(char * file, security_context_t * con)\n'
p1570
V\u000aint getfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1571
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1572
S'50\ne8 3a 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1573
S'.text:000000000040d8d0\n.text:000000000040d8d1\n.text:000000000040d8d6\n.text:000000000040d8dc\n.text:000000000040d8e1\n.text:000000000040d8e2\n'
p1574
tp1575
sS'cmp_size'
p1576
(S'\n__stdcall cmp_size(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p1577
V\u000aint cmp_size(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  \u000a  lVar1 = (b->stat).st_size;\u000a  lVar2 = (a->stat).st_size;\u000a  uVar3 = 0xffffffff;\u000a  if (lVar2 <= lVar1) {\u000a    uVar3 = (uint)(lVar2 < lVar1);\u000a  }\u000a  if (uVar3 != 0) {\u000a    return (int)uVar3;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00407240. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar4 = (*cmp)(a->name,b->name);\u000a  return iVar4;\u000a}\u000a\u000a
p1578
S'MOV RAX,qword ptr [RSI + 0x40]\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x40]\nSETG CL\nMOV EAX,0xffffffff\nCMOVGE EAX,ECX\nTEST EAX,EAX\nJZ 0x0040723a\nRET\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP RDX\n'
p1579
S'48 8b 46 40\n31 c9\n48 3b 47 40\n0f 9f c1\nb8 ff ff ff ff\n0f 4d c1\n85 c0\n74 01\nc3\n48 8b 3f\n48 8b 36\nff e2\n'
p1580
S'.text:0000000000407220\n.text:0000000000407224\n.text:0000000000407226\n.text:000000000040722a\n.text:000000000040722d\n.text:0000000000407232\n.text:0000000000407235\n.text:0000000000407237\n.text:0000000000407239\n.text:000000000040723a\n.text:000000000040723d\n.text:0000000000407240\n'
p1581
tp1582
sS'cmp_version'
p1583
(S'\n__stdcall cmp_version(fileinfo * a, fileinfo * b)\n'
p1584
V\u000aint cmp_version(fileinfo *a,fileinfo *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = filevercmp(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p1585
S'MOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x004093c0\n'
p1586
S'48 8b 3f\n48 8b 36\ne9 65 21 00 00\n'
p1587
S'.text:0000000000407250\n.text:0000000000407253\n.text:0000000000407256\n'
p1588
tp1589
sS'getfscreatecon'
p1590
(S'\n__stdcall getfscreatecon(security_context_t * con)\n'
p1591
V\u000aint getfscreatecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1592
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1593
S'50\ne8 9a 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1594
S'.text:000000000040d870\n.text:000000000040d871\n.text:000000000040d876\n.text:000000000040d87c\n.text:000000000040d881\n.text:000000000040d882\n'
p1595
tp1596
sS'align_nstrftime'
p1597
(S'\n__stdcall align_nstrftime()\n'
p1598
V\u000asize_t align_nstrftime(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  char *__dest;\u000a  size_t sVar3;\u000a  timezone_t tz;\u000a  tm *tp;\u000a  char *__haystack;\u000a  char *s;\u000a  char rpl_fmt [261];\u000a  char acStack312 [264];\u000a  \u000a  if (required_mon_width != 0) {\u000a    pcVar1 = strstr(__haystack,"%b");\u000a    if ((pcVar1 != (char *)0x0) && ((uint)tp->tm_mon < 0xc)) {\u000a      sVar2 = strlen(__haystack);\u000a      if (sVar2 < 0x66) {\u000a        __dest = (char *)__mempcpy_chk(acStack312);\u000a        __dest = stpcpy(__dest,abmon + (long)tp->tm_mon * 0xa1);\u000a        strcpy(__dest,pcVar1 + 2);\u000a        __haystack = acStack312;\u000a      }\u000a    }\u000a  }\u000a  sVar3 = nstrftime(s,0x3e9,__haystack,tp,tz);\u000a  return sVar3;\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x108\nMOV R14D,R8D\nMOV R15,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP qword ptr [0x0061d890],0x0\nJZ 0x00408a66\nMOV ESI,0x416621\nMOV RDI,RBX\nCALL 0x00402700\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408a66\nCMP dword ptr [R13 + 0x10],0xb\nJA 0x00408a66\nMOV RDI,RBX\nCALL 0x00402290\nCMP RAX,0x65\nJA 0x00408a66\nMOV RDI,RSP\nMOV RDX,RBP\nSUB RDX,RBX\nMOV ECX,0x105\nMOV RSI,RBX\nCALL 0x004020f0\nMOVSXD RCX,dword ptr [R13 + 0x10]\nIMUL RCX,RCX,0xa1\nLEA RSI,[0x61d8a0 + RCX]\nMOV RDI,RAX\nCALL 0x00402260\nADD RBP,0x2\nMOV RDI,RAX\nMOV RSI,RBP\nCALL 0x00402150\nMOV RBX,RSP\nMOV ESI,0x3e9\nMOV RDI,R12\nMOV RDX,RBX\nMOV RCX,R13\nMOV R8,R15\nMOV R9D,R14D\nCALL 0x0040dac0\nADD RSP,0x108\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1600
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 08 01 00 00\n45 89 c6\n49 89 cf\n49 89 d5\n48 89 f3\n49 89 fc\n48 83 3d 98 4e 21 00 00\n74 6c\nbe 21 66 41 00\n48 89 df\ne8 f9 9c ff ff\n48 89 c5\n48 85 ed\n74 57\n41 83 7d 10 0b\n77 50\n48 89 df\ne8 72 98 ff ff\n48 83 f8 65\n77 42\n48 89 e7\n48 89 ea\n48 29 da\nb9 05 01 00 00\n48 89 de\ne8 b6 96 ff ff\n49 63 4d 10\n48 69 c9 a1 00 00 00\n48 8d b1 a0 d8 61 00\n48 89 c7\ne8 0c 98 ff ff\n48 83 c5 02\n48 89 c7\n48 89 ee\ne8 ed 96 ff ff\n48 89 e3\nbe e9 03 00 00\n4c 89 e7\n48 89 da\n4c 89 e9\n4d 89 f8\n45 89 f1\ne8 41 50 00 00\n48 81 c4 08 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1601
S'.text:00000000004089d0\n.text:00000000004089d1\n.text:00000000004089d3\n.text:00000000004089d5\n.text:00000000004089d7\n.text:00000000004089d9\n.text:00000000004089da\n.text:00000000004089e1\n.text:00000000004089e4\n.text:00000000004089e7\n.text:00000000004089ea\n.text:00000000004089ed\n.text:00000000004089f0\n.text:00000000004089f8\n.text:00000000004089fa\n.text:00000000004089ff\n.text:0000000000408a02\n.text:0000000000408a07\n.text:0000000000408a0a\n.text:0000000000408a0d\n.text:0000000000408a0f\n.text:0000000000408a14\n.text:0000000000408a16\n.text:0000000000408a19\n.text:0000000000408a1e\n.text:0000000000408a22\n.text:0000000000408a24\n.text:0000000000408a27\n.text:0000000000408a2a\n.text:0000000000408a2d\n.text:0000000000408a32\n.text:0000000000408a35\n.text:0000000000408a3a\n.text:0000000000408a3e\n.text:0000000000408a45\n.text:0000000000408a4c\n.text:0000000000408a4f\n.text:0000000000408a54\n.text:0000000000408a58\n.text:0000000000408a5b\n.text:0000000000408a5e\n.text:0000000000408a63\n.text:0000000000408a66\n.text:0000000000408a6b\n.text:0000000000408a6e\n.text:0000000000408a71\n.text:0000000000408a74\n.text:0000000000408a77\n.text:0000000000408a7a\n.text:0000000000408a7f\n.text:0000000000408a86\n.text:0000000000408a87\n.text:0000000000408a89\n.text:0000000000408a8b\n.text:0000000000408a8d\n.text:0000000000408a8f\n.text:0000000000408a90\n'
p1602
tp1603
sS'mbs_align_pad'
p1604
(S'\n__stdcall mbs_align_pad(char * dest, char * dest_end, size_t n_spaces)\n'
p1605
V\u000achar * mbs_align_pad(char *dest,char *dest_end,size_t n_spaces)\u000a\u000a{\u000a  long lVar1;\u000a  char *pcVar2;\u000a  \u000a  if ((dest < dest_end) && (n_spaces != 0)) {\u000a    pcVar2 = (char *)-n_spaces;\u000a    if ((char *)-n_spaces <= dest + -(long)dest_end) {\u000a      pcVar2 = dest + -(long)dest_end;\u000a    }\u000a    memset(dest,0x20,-(long)pcVar2);\u000a    lVar1 = -n_spaces;\u000a    do {\u000a      lVar1 = lVar1 + 1;\u000a      dest = dest + 1;\u000a      if (dest_end <= dest) break;\u000a    } while (lVar1 != 0);\u000a  }\u000a  *dest = 0;\u000a  return dest;\u000a}\u000a\u000a
p1606
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,RBX\nSUB RAX,R14\nJNC 0x0040b8d1\nTEST R15,R15\nJZ 0x0040b8d1\nMOV RDX,R15\nNEG RDX\nCMP RAX,RDX\nCMOVNC RDX,RAX\nNEG RDX\nMOV ESI,0x20\nMOV RDI,RBX\nCALL 0x00402350\nMOV EAX,0x1\nSUB RAX,R15\nINC RBX\nCMP RBX,R14\nJNC 0x0040b8d1\nTEST RAX,RAX\nLEA RAX,[RAX + 0x1]\nJNZ 0x0040b8c0\nMOV byte ptr [RBX],0x0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1607
S'41 57\n41 56\n53\n49 89 d7\n49 89 f6\n48 89 fb\n48 89 d8\n4c 29 f0\n73 3b\n4d 85 ff\n74 36\n4c 89 fa\n48 f7 da\n48 39 d0\n48 0f 43 d0\n48 f7 da\nbe 20 00 00 00\n48 89 df\ne8 98 6a ff ff\nb8 01 00 00 00\n4c 29 f8\n48 ff c3\n4c 39 f3\n73 09\n48 85 c0\n48 8d 40 01\n75 ef\nc6 03 00\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1608
S'.text:000000000040b880\n.text:000000000040b882\n.text:000000000040b884\n.text:000000000040b885\n.text:000000000040b888\n.text:000000000040b88b\n.text:000000000040b88e\n.text:000000000040b891\n.text:000000000040b894\n.text:000000000040b896\n.text:000000000040b899\n.text:000000000040b89b\n.text:000000000040b89e\n.text:000000000040b8a1\n.text:000000000040b8a4\n.text:000000000040b8a8\n.text:000000000040b8ab\n.text:000000000040b8b0\n.text:000000000040b8b3\n.text:000000000040b8b8\n.text:000000000040b8bd\n.text:000000000040b8c0\n.text:000000000040b8c3\n.text:000000000040b8c6\n.text:000000000040b8c8\n.text:000000000040b8cb\n.text:000000000040b8cf\n.text:000000000040b8d1\n.text:000000000040b8d4\n.text:000000000040b8d7\n.text:000000000040b8d8\n.text:000000000040b8da\n.text:000000000040b8dc\n'
p1609
tp1610
sS'_obstack_newchunk'
p1611
(S'\n__stdcall _obstack_newchunk(obstack * h, size_t length)\n'
p1612
V\u000avoid _obstack_newchunk(obstack *h,size_t length)\u000a\u000a{\u000a  _obstack_chunk *old_chunk;\u000a  char *__dest;\u000a  ulong uVar1;\u000a  char *__src;\u000a  _obstack_chunk *p_Var2;\u000a  char *__n;\u000a  \u000a  old_chunk = h->chunk;\u000a  __n = h->next_free + -(long)h->object_base;\u000a  __dest = __n + length + h->alignment_mask;\u000a  uVar1 = ((ulong)__n >> 3) + 100;\u000a  __src = __dest + uVar1;\u000a  if (CARRY8(uVar1,(ulong)__dest)) {\u000a    __src = __dest;\u000a  }\u000a  if (__src < (char *)h->chunk_size) {\u000a    __src = (char *)h->chunk_size;\u000a  }\u000a  if ((!CARRY8(length,(ulong)__n)) && (CARRY8((ulong)(__n + length),h->alignment_mask) == false)) {\u000a    p_Var2 = (_obstack_chunk *)call_chunkfun(h,(size_t)__src);\u000a    if (p_Var2 != (_obstack_chunk *)0x0) goto LAB_004103ce;\u000a  }\u000a  (*obstack_alloc_failed_handler)();\u000a  p_Var2 = (_obstack_chunk *)0x0;\u000aLAB_004103ce:\u000a  h->chunk = p_Var2;\u000a  p_Var2->prev = old_chunk;\u000a  __src = (char *)((long)&p_Var2->limit + (long)__src);\u000a  h->chunk_limit = __src;\u000a  p_Var2->limit = __src;\u000a  __src = h->object_base;\u000a  uVar1 = h->alignment_mask;\u000a  __dest = (char *)((ulong)(p_Var2->contents + uVar1) & ~uVar1);\u000a  memcpy(__dest,__src,(size_t)__n);\u000a  if (((*(byte *)&h->use_extra_arg_bitfield & 2) == 0) &&\u000a     (__src == (char *)((ulong)(old_chunk->contents + uVar1) & ~uVar1))) {\u000a    p_Var2->prev = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a  }\u000a  h->object_base = __dest;\u000a  h->next_free = __n + (long)__dest;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfd;\u000a  return;\u000a}\u000a\u000a
p1613
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nMOV RCX,qword ptr [R12]\nMOV R15,qword ptr [R12 + 0x8]\nMOV R14,qword ptr [R12 + 0x18]\nSUB R14,qword ptr [R12 + 0x10]\nLEA RDX,[R14 + RSI*0x1]\nADD RDX,qword ptr [R12 + 0x30]\nSETC AL\nMOV RBX,R14\nSHR RBX,0x3\nADD RBX,0x64\nADD RBX,RDX\nCMOVC RBX,RDX\nCMP RBX,RCX\nCMOVC RBX,RCX\nADD RSI,R14\nJC 0x004103c5\nTEST AL,AL\nJNZ 0x004103c5\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00410470\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004103ce\nCALL qword ptr [0x0061d5a0]\nXOR R13D,R13D\nMOV qword ptr [R12 + 0x8],R13\nMOV qword ptr [R13 + 0x8],R15\nADD RBX,R13\nMOV qword ptr [R12 + 0x20],RBX\nMOV qword ptr [R13],RBX\nMOV RSI,qword ptr [R12 + 0x10]\nMOV RBP,qword ptr [R12 + 0x30]\nLEA RBX,[RBP + R13*0x1 + 0x10]\nMOV qword ptr [RSP + 0x8],R15\nMOV R15,RBP\nNOT R15\nAND RBX,R15\nMOV RDI,RBX\nMOV qword ptr [RSP + 0x10],RSI\nMOV RDX,R14\nCALL 0x00402440\nTEST byte ptr [R12 + 0x50],0x2\nJNZ 0x00410441\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RAX,[RBP + RAX*0x1 + 0x10]\nAND RAX,R15\nCMP qword ptr [RSP + 0x10],RAX\nJNZ 0x00410441\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [R13 + 0x8],RAX\nMOV RDI,R12\nCALL 0x00410490\nMOV qword ptr [R12 + 0x10],RBX\nADD R14,RBX\nMOV qword ptr [R12 + 0x18],R14\nAND byte ptr [R12 + 0x50],0xfd\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1614
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fc\n49 8b 0c 24\n4d 8b 7c 24 08\n4d 8b 74 24 18\n4d 2b 74 24 10\n49 8d 14 36\n49 03 54 24 30\n0f 92 c0\n4c 89 f3\n48 c1 eb 03\n48 83 c3 64\n48 01 d3\n48 0f 42 da\n48 39 cb\n48 0f 42 d9\n4c 01 f6\n72 17\n84 c0\n75 13\n4c 89 e7\n48 89 de\ne8 b3 00 00 00\n49 89 c5\n4d 85 ed\n75 09\nff 15 d5 d1 20 00\n45 31 ed\n4d 89 6c 24 08\n4d 89 7d 08\n4c 01 eb\n49 89 5c 24 20\n49 89 5d 00\n49 8b 74 24 10\n49 8b 6c 24 30\n4a 8d 5c 2d 10\n4c 89 7c 24 08\n49 89 ef\n49 f7 d7\n4c 21 fb\n48 89 df\n48 89 74 24 10\n4c 89 f2\ne8 30 20 ff ff\n41 f6 44 24 50 02\n75 29\n48 8b 44 24 08\n48 8d 44 05 10\n4c 21 f8\n48 39 44 24 10\n75 15\n48 8b 74 24 08\n48 8b 46 08\n49 89 45 08\n4c 89 e7\ne8 4f 00 00 00\n49 89 5c 24 10\n49 01 de\n4d 89 74 24 18\n41 80 64 24 50 fd\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1615
S'.text:0000000000410360\n.text:0000000000410361\n.text:0000000000410363\n.text:0000000000410365\n.text:0000000000410367\n.text:0000000000410369\n.text:000000000041036a\n.text:000000000041036e\n.text:0000000000410371\n.text:0000000000410375\n.text:000000000041037a\n.text:000000000041037f\n.text:0000000000410384\n.text:0000000000410388\n.text:000000000041038d\n.text:0000000000410390\n.text:0000000000410393\n.text:0000000000410397\n.text:000000000041039b\n.text:000000000041039e\n.text:00000000004103a2\n.text:00000000004103a5\n.text:00000000004103a9\n.text:00000000004103ac\n.text:00000000004103ae\n.text:00000000004103b0\n.text:00000000004103b2\n.text:00000000004103b5\n.text:00000000004103b8\n.text:00000000004103bd\n.text:00000000004103c0\n.text:00000000004103c3\n.text:00000000004103c5\n.text:00000000004103cb\n.text:00000000004103ce\n.text:00000000004103d3\n.text:00000000004103d7\n.text:00000000004103da\n.text:00000000004103df\n.text:00000000004103e3\n.text:00000000004103e8\n.text:00000000004103ed\n.text:00000000004103f2\n.text:00000000004103f7\n.text:00000000004103fa\n.text:00000000004103fd\n.text:0000000000410400\n.text:0000000000410403\n.text:0000000000410408\n.text:000000000041040b\n.text:0000000000410410\n.text:0000000000410416\n.text:0000000000410418\n.text:000000000041041d\n.text:0000000000410422\n.text:0000000000410425\n.text:000000000041042a\n.text:000000000041042c\n.text:0000000000410431\n.text:0000000000410435\n.text:0000000000410439\n.text:000000000041043c\n.text:0000000000410441\n.text:0000000000410446\n.text:0000000000410449\n.text:000000000041044e\n.text:0000000000410454\n.text:0000000000410458\n.text:0000000000410459\n.text:000000000041045b\n.text:000000000041045d\n.text:000000000041045f\n.text:0000000000410461\n.text:0000000000410462\n'
p1616
tp1617
sS'__fpending'
p1618
(S'\n__stdcall __fpending()\n'
p1619
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0061d080)();\u000a  return;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0061d080]\n'
p1621
S'ff 25 1a af 21 00\n'
p1622
S'.plt:0000000000402160\n'
p1623
tp1624
sS'quote_name'
p1625
(S'\n__stdcall quote_name(FILE * out, char * name, quoting_options * options, size_t * width)\n'
p1626
V\u000asize_t quote_name(FILE *out,char *name,quoting_options *options,size_t *width)\u000a\u000a{\u000a  char cVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  quoting_style qVar4;\u000a  int iVar5;\u000a  quoting_options *nbytes;\u000a  size_t sVar6;\u000a  long lVar7;\u000a  ushort **ppuVar8;\u000a  FILE *__stream;\u000a  size_t sVar9;\u000a  char *buffer;\u000a  char *pcVar10;\u000a  char *__s;\u000a  char *pcVar11;\u000a  char *pcVar12;\u000a  undefined8 uStack8304;\u000a  char local_2068 [8];\u000a  char smallbuf [8192];\u000a  undefined8 local_60;\u000a  char *local_58;\u000a  undefined4 local_4c;\u000a  quoting_options **local_48;\u000a  char *local_40;\u000a  FILE *local_38;\u000a  \u000a  buffer = local_2068;\u000a  uStack8304 = 0x405d22;\u000a  local_38 = out;\u000a  nbytes = (quoting_options *)quotearg_buffer(local_2068,0x2000,name,0xffffffffffffffff,options);\u000a  if ((quoting_options *)0x1fff < nbytes) {\u000a    lVar7 = -((ulong)(nbytes->quote_these_too + 2) & 0xfffffffffffffff0);\u000a    buffer = local_2068 + lVar7;\u000a    *(undefined8 *)((long)&uStack8304 + lVar7) = 0x405d58;\u000a    quotearg_buffer(buffer,(long)&nbytes->style + 1,name,0xffffffffffffffff,options,\u000a                    *(undefined *)((long)&uStack8304 + lVar7));\u000a  }\u000a  *(undefined8 *)(buffer + -8) = 0x405d60;\u000a  qVar4 = get_quoting_style(options,buffer[-8]);\u000a  if ((qVar4 < shell_escape_quoting_style) && (qmark_funny_chars != false)) {\u000a    *(undefined8 *)(buffer + -8) = 0x405d80;\u000a    local_58 = buffer;\u000a    sVar6 = __ctype_get_mb_cur_max(buffer[-8]);\u000a    local_40 = buffer + (long)nbytes;\u000a    if (sVar6 < 2) {\u000a      options = nbytes;\u000a      __stream = local_38;\u000a      if (0 < (long)nbytes) {\u000a        *(undefined8 *)(buffer + -8) = 0x405ee4;\u000a        ppuVar8 = __ctype_b_loc(buffer[-8]);\u000a        pcVar12 = buffer;\u000a        do {\u000a          puVar2 = *ppuVar8;\u000a          *(undefined8 *)(buffer + -8) = 0x405efb;\u000a          bVar3 = to_uchar(buffer[-8]);\u000a          if ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x40) == 0) {\u000a            *pcVar12 = '?';\u000a          }\u000a          pcVar12 = pcVar12 + 1;\u000a          options = nbytes;\u000a          __stream = local_38;\u000a        } while (pcVar12 < local_40);\u000a      }\u000a    }\u000a    else {\u000a      options = (quoting_options *)0x0;\u000a      __stream = local_38;\u000a      pcVar12 = buffer;\u000a      if (0 < (long)nbytes) {\u000a        __stream = local_38;\u000a        pcVar11 = buffer;\u000a        pcVar12 = buffer;\u000aLAB_00405db0:\u000a        do {\u000a          cVar1 = *pcVar11;\u000a          switch(cVar1) {\u000a          case ' ':\u000a          case '!':\u000a          case '\u005c"':\u000a          case '#':\u000a          case '%':\u000a          case '&':\u000a          case '\u005c'':\u000a          case '(':\u000a          case ')':\u000a          case '*':\u000a          case '+':\u000a          case ',':\u000a          case '-':\u000a          case '.':\u000a          case '/':\u000a          case '0':\u000a          case '1':\u000a          case '2':\u000a          case '3':\u000a          case '4':\u000a          case '5':\u000a          case '6':\u000a          case '7':\u000a          case '8':\u000a          case '9':\u000a          case ':':\u000a          case ';':\u000a          case '<':\u000a          case '=':\u000a          case '>':\u000a          case '?':\u000a          case 'A':\u000a          case 'B':\u000a          case 'C':\u000a          case 'D':\u000a          case 'E':\u000a          case 'F':\u000a          case 'G':\u000a          case 'H':\u000a          case 'I':\u000a          case 'J':\u000a          case 'K':\u000a          case 'L':\u000a          case 'M':\u000a          case 'N':\u000a          case 'O':\u000a          case 'P':\u000a          case 'Q':\u000a          case 'R':\u000a          case 'S':\u000a          case 'T':\u000a          case 'U':\u000a          case 'V':\u000a          case 'W':\u000a          case 'X':\u000a          case 'Y':\u000a          case 'Z':\u000a          case '[':\u000a          case '\u005c\u005c':\u000a          case ']':\u000a          case '^':\u000a          case '_':\u000a          case 'a':\u000a          case 'b':\u000a          case 'c':\u000a          case 'd':\u000a          case 'e':\u000a          case 'f':\u000a          case 'g':\u000a          case 'h':\u000a          case 'i':\u000a          case 'j':\u000a          case 'k':\u000a          case 'l':\u000a          case 'm':\u000a          case 'n':\u000a          case 'o':\u000a          case 'p':\u000a          case 'q':\u000a          case 'r':\u000a          case 's':\u000a          case 't':\u000a          case 'u':\u000a          case 'v':\u000a          case 'w':\u000a          case 'x':\u000a          case 'y':\u000a          case 'z':\u000a          case '{':\u000a          case '|':\u000a          case '}':\u000a          case '~':\u000a            pcVar11 = pcVar11 + 1;\u000a            *pcVar12 = cVar1;\u000a            pcVar12 = pcVar12 + 1;\u000a            options = (quoting_options *)((long)&options->style + 1);\u000a            if (local_40 <= pcVar11) goto LAB_00405f6e;\u000a            goto LAB_00405db0;\u000a          }\u000a          local_60 = 0;\u000a          __s = pcVar11;\u000a          local_48 = (quoting_options **)width;\u000a          do {\u000a            *(undefined8 *)(buffer + -8) = 0x405e06;\u000a            sVar6 = mbrtowc(&local_4c,__s,local_40 + -(long)__s,&local_60,buffer[-8]);\u000a            if (sVar6 != 0) {\u000a              pcVar11 = local_40;\u000a              if (sVar6 != 0xfffffffffffffffe) {\u000a                if (sVar6 != 0xffffffffffffffff) goto LAB_00405e26;\u000a                pcVar11 = __s + 1;\u000a              }\u000a              *pcVar12 = '?';\u000a              pcVar12 = pcVar12 + 1;\u000a              options = (quoting_options *)((long)&options->style + 1);\u000a              break;\u000a            }\u000a            sVar6 = 1;\u000aLAB_00405e26:\u000a            *(undefined8 *)(buffer + -8) = 0x405e2e;\u000a            iVar5 = wcwidth(local_4c,buffer[-8]);\u000a            sVar9 = sVar6;\u000a            pcVar11 = pcVar12;\u000a            pcVar10 = __s;\u000a            if (iVar5 < 0) {\u000a              *pcVar12 = '?';\u000a              pcVar12 = pcVar12 + 1;\u000a              lVar7 = 1;\u000a            }\u000a            else {\u000a              do {\u000a                *pcVar11 = *pcVar10;\u000a                sVar9 = sVar9 - 1;\u000a                pcVar11 = pcVar11 + 1;\u000a                pcVar10 = pcVar10 + 1;\u000a              } while (sVar9 != 0);\u000a              pcVar12 = pcVar12 + sVar6;\u000a              lVar7 = (long)iVar5;\u000a            }\u000a            pcVar11 = __s + sVar6;\u000a            options = (quoting_options *)((long)&options->style + lVar7);\u000a            *(undefined8 *)(buffer + -8) = 0x405e7a;\u000a            iVar5 = mbsinit(&local_60,buffer[-8]);\u000a            __s = pcVar11;\u000a          } while (iVar5 == 0);\u000a          __stream = local_38;\u000a          width = (size_t *)local_48;\u000a        } while (pcVar11 < local_40);\u000a      }\u000aLAB_00405f6e:\u000a      nbytes = (quoting_options *)(pcVar12 + -(long)local_58);\u000a    }\u000a  }\u000a  else {\u000a    local_58 = buffer;\u000a    __stream = local_38;\u000a    if (width != (size_t *)0x0) {\u000a      *(undefined8 *)(buffer + -8) = 0x405eb8;\u000a      local_58 = buffer;\u000a      sVar6 = __ctype_get_mb_cur_max(buffer[-8]);\u000a      if (sVar6 < 2) {\u000a        if ((long)nbytes < 1) {\u000a          options = (quoting_options *)0x0;\u000a          __stream = local_38;\u000a        }\u000a        else {\u000a          *(undefined8 *)(buffer + -8) = 0x405f30;\u000a          local_48 = (quoting_options **)width;\u000a          ppuVar8 = __ctype_b_loc(buffer[-8]);\u000a          puVar2 = *ppuVar8;\u000a          options = (quoting_options *)0x0;\u000a          pcVar12 = buffer;\u000a          do {\u000a            *(undefined8 *)(buffer + -8) = 0x405f48;\u000a            bVar3 = to_uchar(buffer[-8]);\u000a            options = (quoting_options *)\u000a                      ((long)&options->style + (ulong)((uint)(puVar2[(ulong)bVar3] >> 0xe) & 1));\u000a            pcVar12 = pcVar12 + 1;\u000a            width = (size_t *)local_48;\u000a            __stream = local_38;\u000a          } while (pcVar12 < buffer + (long)&nbytes->style);\u000a        }\u000a      }\u000a      else {\u000a        *(undefined8 *)(buffer + -8) = 0x405ecb;\u000a        iVar5 = mbsnwidth(buffer,nbytes,buffer[-8]);\u000a        options = (quoting_options *)(long)iVar5;\u000a        __stream = local_38;\u000a      }\u000a    }\u000a  }\u000a  if (__stream != (FILE *)0x0) {\u000a    *(undefined8 *)(buffer + -8) = 0x405f9b;\u000a    fwrite_unlocked(local_58,1,nbytes,__stream,buffer[-8]);\u000a  }\u000a  if ((quoting_options **)width != (quoting_options **)0x0) {\u000a    *(quoting_options **)width = options;\u000a  }\u000a  return (size_t)nbytes;\u000a}\u000a\u000a
p1627
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2038\nMOV R12,RCX\nMOV R15,RDX\nMOV R13,RSI\nMOV qword ptr [RBP + -0x30],RDI\nLEA RBX,[-0x2060 + RBP]\nMOV ESI,0x2000\nMOV RCX,-0x1\nMOV RDI,RBX\nMOV RDX,R13\nMOV R8,R15\nCALL 0x0040c0e0\nMOV R14,RAX\nCMP R14,0x2000\nJC 0x00405d58\nLEA RSI,[R14 + 0x1]\nMOV RBX,RSP\nLEA RAX,[R14 + 0x10]\nAND RAX,-0x10\nSUB RBX,RAX\nMOV RSP,RBX\nMOV RCX,-0x1\nMOV RDI,RBX\nMOV RDX,R13\nMOV R8,R15\nCALL 0x0040c0e0\nMOV RDI,R15\nCALL 0x0040c030\nCMP EAX,0x2\nMOV qword ptr [RBP + -0x50],RBX\nJA 0x00405eae\nMOV AL,byte ptr [0x0061d830]\nTEST AL,AL\nJZ 0x00405eae\nCALL 0x00402280\nLEA RCX,[RBX + R14*0x1]\nMOV qword ptr [RBP + -0x38],RCX\nCMP RAX,0x1\nJBE 0x00405ed3\nXOR R15D,R15D\nTEST R14,R14\nJLE 0x00405f67\nLEA RAX,[RBP + -0x58]\nMOV R14,RBX\nMOV R13,RBX\nMOV RBX,RAX\nMOV RCX,qword ptr [RBP + -0x30]\nNOP\nMOVSX EAX,byte ptr [R13]\nLEA EDX,[RAX + -0x20]\nCMP EDX,0x5e\nJA 0x00405ddb\nJMP qword ptr [0x4127e8 + RDX*0x8]\nINC R13\nMOV byte ptr [R14],AL\nINC R14\nINC R15\nCMP R13,qword ptr [RBP + -0x38]\nJC 0x00405db0\nJMP 0x00405f6e\nMOV qword ptr [RBP + -0x40],R12\nMOV qword ptr [RBP + -0x58],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [RBP + -0x38]\nSUB RDX,R13\nLEA RDI,[RBP + -0x44]\nMOV RSI,R13\nMOV RCX,RBX\nCALL 0x004022c0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00405e20\nCMP R12,-0x2\nJZ 0x00405e84\nCMP R12,-0x1\nJNZ 0x00405e26\nJMP 0x00405e8a\nMOV R12D,0x1\nMOV EDI,dword ptr [RBP + -0x44]\nCALL 0x004024c0\nTEST EAX,EAX\nJS 0x00405e60\nMOV RDI,RBX\nMOV RCX,R12\nMOV RDX,R14\nMOV RSI,R13\nNOP\nMOVZX EBX,byte ptr [RSI]\nINC RSI\nMOV byte ptr [RDX],BL\nINC RDX\nDEC RCX\nJNZ 0x00405e40\nADD R14,R12\nCDQE\nMOV RBX,RDI\nJMP 0x00405e6c\nMOV byte ptr [R14],0x3f\nINC R14\nMOV EAX,0x1\nADD R13,R12\nADD R15,RAX\nMOV RDI,RBX\nCALL 0x004026d0\nTEST EAX,EAX\nJZ 0x00405df0\nJMP 0x00405e97\nMOV R13,qword ptr [RBP + -0x38]\nJMP 0x00405e8d\nINC R13\nMOV byte ptr [R14],0x3f\nINC R14\nINC R15\nMOV R12,qword ptr [RBP + -0x40]\nMOV RCX,qword ptr [RBP + -0x30]\nCMP R13,qword ptr [RBP + -0x38]\nJC 0x00405db0\nJMP 0x00405f6e\nTEST R12,R12\nJZ 0x00405f1a\nCALL 0x00402280\nCMP RAX,0x2\nJC 0x00405f1c\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040b9a0\nMOVSXD R15,EAX\nJMP 0x00405f81\nTEST R14,R14\nJLE 0x00405f79\nMOV R13,R12\nCALL 0x00402720\nMOV R15,RAX\nNOP word ptr [RAX + RAX*0x1]\nMOV R12,qword ptr [R15]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004060d0\nMOVZX EAX,AL\nTEST byte ptr [R12 + RAX*0x2 + 0x1],0x40\nJNZ 0x00405f09\nMOV byte ptr [RBX],0x3f\nINC RBX\nCMP RBX,qword ptr [RBP + -0x38]\nJC 0x00405ef0\nMOV R15,R14\nMOV R12,R13\nJMP 0x00405f81\nJMP 0x00405f81\nTEST R14,R14\nJLE 0x00405f7e\nMOV qword ptr [RBP + -0x40],R12\nMOV R13,R14\nADD R13,RBX\nCALL 0x00402720\nMOV R12,qword ptr [RAX]\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004060d0\nMOVZX EAX,AL\nMOVZX EAX,word ptr [R12 + RAX*0x2]\nSHR EAX,0xe\nAND EAX,0x1\nADD R15,RAX\nINC RBX\nCMP RBX,R13\nJC 0x00405f40\nMOV R12,qword ptr [RBP + -0x40]\nJMP 0x00405f81\nMOV R14,RBX\nMOV RCX,qword ptr [RBP + -0x30]\nSUB R14,qword ptr [RBP + -0x50]\nTEST RCX,RCX\nJNZ 0x00405f8a\nJMP 0x00405f9b\nMOV R15,R14\nJMP 0x00405f81\nXOR R15D,R15D\nMOV RCX,qword ptr [RBP + -0x30]\nTEST RCX,RCX\nJZ 0x00405f9b\nMOV ESI,0x1\nMOV RDI,qword ptr [RBP + -0x50]\nMOV RDX,R14\nCALL 0x00402550\nTEST R12,R12\nJZ 0x00405fa4\nMOV qword ptr [R12],R15\nMOV RAX,R14\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1628
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 20 00 00\n49 89 cc\n49 89 d7\n49 89 f5\n48 89 7d d0\n48 8d 9d a0 df ff ff\nbe 00 20 00 00\n48 c7 c1 ff ff ff ff\n48 89 df\n4c 89 ea\n4d 89 f8\ne8 be 63 00 00\n49 89 c6\n49 81 fe 00 20 00 00\n72 2a\n49 8d 76 01\n48 89 e3\n49 8d 46 10\n48 83 e0 f0\n48 29 c3\n48 89 dc\n48 c7 c1 ff ff ff ff\n48 89 df\n4c 89 ea\n4d 89 f8\ne8 88 63 00 00\n4c 89 ff\ne8 d0 62 00 00\n83 f8 02\n48 89 5d b0\n0f 87 41 01 00 00\n8a 05 bd 7a 21 00\n84 c0\n0f 84 33 01 00 00\ne8 00 c5 ff ff\n4a 8d 0c 33\n48 89 4d c8\n48 83 f8 01\n0f 86 41 01 00 00\n45 31 ff\n4d 85 f6\n0f 8e c9 01 00 00\n48 8d 45 a8\n49 89 de\n49 89 dd\n48 89 c3\n48 8b 4d d0\n90\n41 0f be 45 00\n8d 50 e0\n83 fa 5e\n77 1e\nff 24 d5 e8 27 41 00\n49 ff c5\n41 88 06\n49 ff c6\n49 ff c7\n4c 3b 6d c8\n72 da\ne9 93 01 00 00\n4c 89 65 c0\n48 c7 45 a8 00 00 00 00\n66 0f 1f 84 00 00 00 00 00\n48 8b 55 c8\n4c 29 ea\n48 8d 7d bc\n4c 89 ee\n48 89 d9\ne8 ba c4 ff ff\n49 89 c4\n4d 85 e4\n74 12\n49 83 fc fe\n74 70\n49 83 fc ff\n75 0c\neb 6e\n41 bc 01 00 00 00\n8b 7d bc\ne8 92 c6 ff ff\n85 c0\n78 2e\n48 89 df\n4c 89 e1\n4c 89 f2\n4c 89 ee\n66 90\n0f b6 1e\n48 ff c6\n88 1a\n48 ff c2\n48 ff c9\n75 f0\n4d 01 e6\n48 98\n48 89 fb\neb 12\n41 c6 06 3f\n49 ff c6\nb8 01 00 00 00\n4d 01 e5\n49 01 c7\n48 89 df\ne8 56 c8 ff ff\n85 c0\n0f 84 6e ff ff ff\neb 13\n4c 8b 6d c8\neb 03\n49 ff c5\n41 c6 06 3f\n49 ff c6\n49 ff c7\n4c 8b 65 c0\n48 8b 4d d0\n4c 3b 6d c8\n0f 82 07 ff ff ff\ne9 c0 00 00 00\n4d 85 e4\n74 67\ne8 c8 c3 ff ff\n48 83 f8 02\n72 5e\n31 d2\n48 89 df\n4c 89 f6\ne8 d5 5a 00 00\n4c 63 f8\ne9 ae 00 00 00\n4d 85 f6\n0f 8e 9d 00 00 00\n4d 89 e5\ne8 3c c8 ff ff\n49 89 c7\n66 0f 1f 84 00 00 00 00 00\n4d 8b 27\n0f be 3b\ne8 d5 01 00 00\n0f b6 c0\n41 f6 44 44 01 40\n75 03\nc6 03 3f\n48 ff c3\n48 3b 5d c8\n72 de\n4d 89 f7\n4d 89 ec\neb 67\neb 65\n4d 85 f6\n7e 5d\n4c 89 65 c0\n4d 89 f5\n49 01 dd\ne8 f0 c7 ff ff\n4c 8b 20\n45 31 ff\n66 2e 0f 1f 84 00 00 00 00 00\n0f be 3b\ne8 88 01 00 00\n0f b6 c0\n41 0f b7 04 44\nc1 e8 0e\n83 e0 01\n49 01 c7\n48 ff c3\n4c 39 eb\n72 df\n4c 8b 65 c0\neb 1a\n49 89 de\n48 8b 4d d0\n4c 2b 75 b0\n48 85 c9\n75 13\neb 22\n4d 89 f7\neb 03\n45 31 ff\n48 8b 4d d0\n48 85 c9\n74 11\nbe 01 00 00 00\n48 8b 7d b0\n4c 89 f2\ne8 b5 c5 ff ff\n4d 85 e4\n74 04\n4d 89 3c 24\n4c 89 f0\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1629
S'.text:0000000000405ce0\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce6\n.text:0000000000405ce8\n.text:0000000000405cea\n.text:0000000000405cec\n.text:0000000000405ced\n.text:0000000000405cf4\n.text:0000000000405cf7\n.text:0000000000405cfa\n.text:0000000000405cfd\n.text:0000000000405d01\n.text:0000000000405d08\n.text:0000000000405d0d\n.text:0000000000405d14\n.text:0000000000405d17\n.text:0000000000405d1a\n.text:0000000000405d1d\n.text:0000000000405d22\n.text:0000000000405d25\n.text:0000000000405d2c\n.text:0000000000405d2e\n.text:0000000000405d32\n.text:0000000000405d35\n.text:0000000000405d39\n.text:0000000000405d3d\n.text:0000000000405d40\n.text:0000000000405d43\n.text:0000000000405d4a\n.text:0000000000405d4d\n.text:0000000000405d50\n.text:0000000000405d53\n.text:0000000000405d58\n.text:0000000000405d5b\n.text:0000000000405d60\n.text:0000000000405d63\n.text:0000000000405d67\n.text:0000000000405d6d\n.text:0000000000405d73\n.text:0000000000405d75\n.text:0000000000405d7b\n.text:0000000000405d80\n.text:0000000000405d84\n.text:0000000000405d88\n.text:0000000000405d8c\n.text:0000000000405d92\n.text:0000000000405d95\n.text:0000000000405d98\n.text:0000000000405d9e\n.text:0000000000405da2\n.text:0000000000405da5\n.text:0000000000405da8\n.text:0000000000405dab\n.text:0000000000405daf\n.text:0000000000405db0\n.text:0000000000405db5\n.text:0000000000405db8\n.text:0000000000405dbb\n.text:0000000000405dbd\n.text:0000000000405dc4\n.text:0000000000405dc7\n.text:0000000000405dca\n.text:0000000000405dcd\n.text:0000000000405dd0\n.text:0000000000405dd4\n.text:0000000000405dd6\n.text:0000000000405ddb\n.text:0000000000405ddf\n.text:0000000000405de7\n.text:0000000000405df0\n.text:0000000000405df4\n.text:0000000000405df7\n.text:0000000000405dfb\n.text:0000000000405dfe\n.text:0000000000405e01\n.text:0000000000405e06\n.text:0000000000405e09\n.text:0000000000405e0c\n.text:0000000000405e0e\n.text:0000000000405e12\n.text:0000000000405e14\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e20\n.text:0000000000405e26\n.text:0000000000405e29\n.text:0000000000405e2e\n.text:0000000000405e30\n.text:0000000000405e32\n.text:0000000000405e35\n.text:0000000000405e38\n.text:0000000000405e3b\n.text:0000000000405e3e\n.text:0000000000405e40\n.text:0000000000405e43\n.text:0000000000405e46\n.text:0000000000405e48\n.text:0000000000405e4b\n.text:0000000000405e4e\n.text:0000000000405e50\n.text:0000000000405e53\n.text:0000000000405e55\n.text:0000000000405e58\n.text:0000000000405e60\n.text:0000000000405e64\n.text:0000000000405e67\n.text:0000000000405e6c\n.text:0000000000405e6f\n.text:0000000000405e72\n.text:0000000000405e75\n.text:0000000000405e7a\n.text:0000000000405e7c\n.text:0000000000405e82\n.text:0000000000405e84\n.text:0000000000405e88\n.text:0000000000405e8a\n.text:0000000000405e8d\n.text:0000000000405e91\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9b\n.text:0000000000405e9f\n.text:0000000000405ea3\n.text:0000000000405ea9\n.text:0000000000405eae\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb8\n.text:0000000000405ebc\n.text:0000000000405ebe\n.text:0000000000405ec0\n.text:0000000000405ec3\n.text:0000000000405ec6\n.text:0000000000405ecb\n.text:0000000000405ece\n.text:0000000000405ed3\n.text:0000000000405ed6\n.text:0000000000405edc\n.text:0000000000405edf\n.text:0000000000405ee4\n.text:0000000000405ee7\n.text:0000000000405ef0\n.text:0000000000405ef3\n.text:0000000000405ef6\n.text:0000000000405efb\n.text:0000000000405efe\n.text:0000000000405f04\n.text:0000000000405f06\n.text:0000000000405f09\n.text:0000000000405f0c\n.text:0000000000405f10\n.text:0000000000405f12\n.text:0000000000405f15\n.text:0000000000405f18\n.text:0000000000405f1a\n.text:0000000000405f1c\n.text:0000000000405f1f\n.text:0000000000405f21\n.text:0000000000405f25\n.text:0000000000405f28\n.text:0000000000405f2b\n.text:0000000000405f30\n.text:0000000000405f33\n.text:0000000000405f36\n.text:0000000000405f40\n.text:0000000000405f43\n.text:0000000000405f48\n.text:0000000000405f4b\n.text:0000000000405f50\n.text:0000000000405f53\n.text:0000000000405f56\n.text:0000000000405f59\n.text:0000000000405f5c\n.text:0000000000405f5f\n.text:0000000000405f61\n.text:0000000000405f65\n.text:0000000000405f67\n.text:0000000000405f6a\n.text:0000000000405f6e\n.text:0000000000405f72\n.text:0000000000405f75\n.text:0000000000405f77\n.text:0000000000405f79\n.text:0000000000405f7c\n.text:0000000000405f7e\n.text:0000000000405f81\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8a\n.text:0000000000405f8f\n.text:0000000000405f93\n.text:0000000000405f96\n.text:0000000000405f9b\n.text:0000000000405f9e\n.text:0000000000405fa0\n.text:0000000000405fa4\n.text:0000000000405fa7\n.text:0000000000405fab\n.text:0000000000405fac\n.text:0000000000405fae\n.text:0000000000405fb0\n.text:0000000000405fb2\n.text:0000000000405fb4\n.text:0000000000405fb5\n'
p1630
tp1631
sS'strchr'
p1632
(S'\n__stdcall strchr(char * __s, int __c)\n'
p1633
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0061d138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1634
S'JMP qword ptr [0x0061d138]\n'
p1635
S'ff 25 62 ae 21 00\n'
p1636
S'.plt:00000000004022d0\n'
p1637
tp1638
sS'rpl_fclose'
p1639
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p1640
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00411099;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00411099:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p1641
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00402480\nTEST EAX,EAX\nJS 0x00411099\nMOV RDI,RBX\nCALL 0x00402540\nTEST EAX,EAX\nJZ 0x00411067\nMOV RDI,RBX\nCALL 0x00402480\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00402310\nCMP RAX,-0x1\nJZ 0x00411099\nMOV RDI,RBX\nCALL 0x004110b0\nTEST EAX,EAX\nJZ 0x00411099\nCALL 0x00402110\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00402220\nTEST EBP,EBP\nJZ 0x00411092\nCALL 0x00402110\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402220\n'
p1642
S'55\n53\n50\n48 89 fb\ne8 45 14 ff ff\n85 c0\n78 5a\n48 89 df\ne8 f9 14 ff ff\n85 c0\n74 1c\n48 89 df\ne8 2d 14 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 af 12 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 98 10 ff ff\n8b 28\n48 89 df\ne8 9e 11 ff ff\n85 ed\n74 0c\ne8 85 10 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 79 11 ff ff\n'
p1643
S'.text:0000000000411030\n.text:0000000000411031\n.text:0000000000411032\n.text:0000000000411033\n.text:0000000000411036\n.text:000000000041103b\n.text:000000000041103d\n.text:000000000041103f\n.text:0000000000411042\n.text:0000000000411047\n.text:0000000000411049\n.text:000000000041104b\n.text:000000000041104e\n.text:0000000000411053\n.text:0000000000411055\n.text:000000000041105a\n.text:000000000041105c\n.text:0000000000411061\n.text:0000000000411065\n.text:0000000000411067\n.text:000000000041106a\n.text:000000000041106f\n.text:0000000000411071\n.text:0000000000411073\n.text:0000000000411078\n.text:000000000041107a\n.text:000000000041107d\n.text:0000000000411082\n.text:0000000000411084\n.text:0000000000411086\n.text:000000000041108b\n.text:000000000041108d\n.text:0000000000411092\n.text:0000000000411096\n.text:0000000000411097\n.text:0000000000411098\n.text:0000000000411099\n.text:000000000041109c\n.text:00000000004110a0\n.text:00000000004110a1\n.text:00000000004110a2\n'
p1644
tp1645
sS'fwrite_unlocked'
p1646
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0061d278)();\u000a  return sVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x0061d278]\n'
p1649
S'ff 25 22 ad 21 00\n'
p1650
S'.plt:0000000000402550\n'
p1651
tp1652
sS'xstrcoll_atime'
p1653
(S'\n__stdcall xstrcoll_atime(V a, V b)\n'
p1654
V\u000aint xstrcoll_atime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_atime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p1655
S'MOV EDX,0x407180\nJMP 0x00407320\n'
p1656
S'ba 80 71 40 00\ne9 86 03 00 00\n'
p1657
S'.text:0000000000406f90\n.text:0000000000406f95\n'
p1658
tp1659
sS'xnrealloc'
p1660
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p1661
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1662
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x0040f944\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x0040f950\nPUSH RAX\nCALL 0x0040faa0\n'
p1663
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p1664
S'.text:000000000040f930\n.text:000000000040f933\n.text:000000000040f936\n.text:000000000040f939\n.text:000000000040f93b\n.text:000000000040f93f\n.text:000000000040f942\n.text:000000000040f944\n.text:000000000040f945\n'
p1665
tp1666
sS'mfile_name_concat'
p1667
(S'\n__stdcall mfile_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p1668
V\u000achar * mfile_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *name;\u000a  size_t sVar1;\u000a  char *__s;\u000a  size_t sVar2;\u000a  undefined *puVar3;\u000a  long lVar4;\u000a  char *pcVar5;\u000a  bool bVar6;\u000a  \u000a  name = last_component(dir);\u000a  sVar1 = base_len(name);\u000a  if (sVar1 == 0) {\u000a    bVar6 = false;\u000a  }\u000a  else {\u000a    bVar6 = name[sVar1 - 1] != '/';\u000a  }\u000a  __s = longest_relative_suffix(abase);\u000a  sVar2 = strlen(__s);\u000a  pcVar5 = (char *)malloc((size_t)(name + (sVar1 - (long)dir) + sVar2 + 1 + (ulong)bVar6));\u000a  if (pcVar5 == (char *)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    puVar3 = (undefined *)__mempcpy_chk(pcVar5,dir,name + (sVar1 - (long)dir),0xffffffffffffffff);\u000a    *puVar3 = 0x2f;\u000a    if (base_in_result != (char **)0x0) {\u000a      lVar4 = 0;\u000a      if (*abase == '/') {\u000a        lVar4 = -1;\u000a      }\u000a      *base_in_result = puVar3 + (ulong)bVar6 + lVar4;\u000a    }\u000a    puVar3 = (undefined *)__mempcpy_chk(puVar3 + (ulong)bVar6,__s,sVar2,0xffffffffffffffff);\u000a    *puVar3 = 0;\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RDX\nMOV R14,RSI\nMOV R12,RDI\nCALL 0x004090e0\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00409140\nMOV RBX,RBP\nSUB RBX,R12\nADD RBX,RAX\nTEST RAX,RAX\nJZ 0x004092f1\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004092f3\nXOR EAX,EAX\nMOVZX R13D,AL\nMOV qword ptr [RSP + 0x8],R14\nMOV RDI,R14\nCALL 0x004093a0\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00402290\nMOV R15,RAX\nLEA RAX,[RBX + R13*0x1]\nLEA RDI,[R15 + RAX*0x1 + 0x1]\nCALL 0x004024e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00409382\nMOV RCX,-0x1\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004020f0\nMOV byte ptr [RAX],0x2f\nADD R13,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nTEST RCX,RCX\nJZ 0x00409368\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x8]\nCMP byte ptr [RDX],0x2f\nMOV RDX,-0x1\nCMOVZ RAX,RDX\nADD RAX,R13\nMOV qword ptr [RCX],RAX\nMOV RCX,-0x1\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x004020f0\nMOV byte ptr [RAX],0x0\nJMP 0x00409385\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1670
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 54 24 10\n49 89 f6\n49 89 fc\ne8 12 fe ff ff\n48 89 c5\n48 89 ef\ne8 67 fe ff ff\n48 89 eb\n4c 29 e3\n48 01 c3\n48 85 c0\n74 0a\n80 7c 05 ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 e8\n4c 89 74 24 08\n4c 89 f7\ne8 9c 00 00 00\n48 89 c5\n48 89 ef\ne8 81 8f ff ff\n49 89 c7\n4a 8d 04 2b\n49 8d 7c 07 01\ne8 c0 91 ff ff\n49 89 c6\n4d 85 f6\n74 5a\n48 c7 c1 ff ff ff ff\n4c 89 f7\n4c 89 e6\n48 89 da\ne8 b3 8d ff ff\nc6 00 2f\n49 01 c5\n48 8b 4c 24 10\n48 85 c9\n74 1b\n31 c0\n48 8b 54 24 08\n80 3a 2f\n48 c7 c2 ff ff ff ff\n48 0f 44 c2\n4c 01 e8\n48 89 01\n48 c7 c1 ff ff ff ff\n4c 89 ef\n48 89 ee\n4c 89 fa\ne8 73 8d ff ff\nc6 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1671
S'.text:00000000004092b0\n.text:00000000004092b1\n.text:00000000004092b3\n.text:00000000004092b5\n.text:00000000004092b7\n.text:00000000004092b9\n.text:00000000004092ba\n.text:00000000004092be\n.text:00000000004092c3\n.text:00000000004092c6\n.text:00000000004092c9\n.text:00000000004092ce\n.text:00000000004092d1\n.text:00000000004092d4\n.text:00000000004092d9\n.text:00000000004092dc\n.text:00000000004092df\n.text:00000000004092e2\n.text:00000000004092e5\n.text:00000000004092e7\n.text:00000000004092ec\n.text:00000000004092ef\n.text:00000000004092f1\n.text:00000000004092f3\n.text:00000000004092f7\n.text:00000000004092fc\n.text:00000000004092ff\n.text:0000000000409304\n.text:0000000000409307\n.text:000000000040930a\n.text:000000000040930f\n.text:0000000000409312\n.text:0000000000409316\n.text:000000000040931b\n.text:0000000000409320\n.text:0000000000409323\n.text:0000000000409326\n.text:0000000000409328\n.text:000000000040932f\n.text:0000000000409332\n.text:0000000000409335\n.text:0000000000409338\n.text:000000000040933d\n.text:0000000000409340\n.text:0000000000409343\n.text:0000000000409348\n.text:000000000040934b\n.text:000000000040934d\n.text:000000000040934f\n.text:0000000000409354\n.text:0000000000409357\n.text:000000000040935e\n.text:0000000000409362\n.text:0000000000409365\n.text:0000000000409368\n.text:000000000040936f\n.text:0000000000409372\n.text:0000000000409375\n.text:0000000000409378\n.text:000000000040937d\n.text:0000000000409380\n.text:0000000000409382\n.text:0000000000409385\n.text:0000000000409388\n.text:000000000040938c\n.text:000000000040938d\n.text:000000000040938f\n.text:0000000000409391\n.text:0000000000409393\n.text:0000000000409395\n.text:0000000000409396\n'
p1672
tp1673
sS'emit_bug_reporting_address'
p1674
(S'\n__stdcall emit_bug_reporting_address()\n'
p1675
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1676
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x417e5d\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x417e72\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004025b0\nXOR EDI,EDI\nMOV ESI,0x417e88\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x41651b\nMOV ECX,0x416c61\nXOR EAX,EAX\nCALL 0x004025b0\nXOR EDI,EDI\nMOV ESI,0x417e9c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004023c0\n'
p1677
S'50\n31 ff\nbe 5d 7e 41 00\nba 05 00 00 00\ne8 ee 29 ff ff\n48 89 c1\nbf 01 00 00 00\nba 72 7e 41 00\n31 c0\n48 89 ce\ne8 17 2d ff ff\n31 ff\nbe 88 7e 41 00\nba 05 00 00 00\ne8 c6 29 ff ff\n48 89 c6\nbf 01 00 00 00\nba 1b 65 41 00\nb9 61 6c 41 00\n31 c0\ne8 ed 2c ff ff\n31 ff\nbe 9c 7e 41 00\nba 05 00 00 00\ne8 9c 29 ff ff\n48 8b 35 ed dc 20 00\n48 89 c7\n58\ne9 dc 2a ff ff\n'
p1678
S'.text:000000000040f870\n.text:000000000040f871\n.text:000000000040f873\n.text:000000000040f878\n.text:000000000040f87d\n.text:000000000040f882\n.text:000000000040f885\n.text:000000000040f88a\n.text:000000000040f88f\n.text:000000000040f891\n.text:000000000040f894\n.text:000000000040f899\n.text:000000000040f89b\n.text:000000000040f8a0\n.text:000000000040f8a5\n.text:000000000040f8aa\n.text:000000000040f8ad\n.text:000000000040f8b2\n.text:000000000040f8b7\n.text:000000000040f8bc\n.text:000000000040f8be\n.text:000000000040f8c3\n.text:000000000040f8c5\n.text:000000000040f8ca\n.text:000000000040f8cf\n.text:000000000040f8d4\n.text:000000000040f8db\n.text:000000000040f8de\n.text:000000000040f8df\n'
p1679
tp1680
sS'strcmp_df_size'
p1681
(S'\n__stdcall strcmp_df_size(V a, V b)\n'
p1682
V\u000aint strcmp_df_size(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_size((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1683
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406a5a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406a7d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406a7d\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407220\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1684
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 80 fa ff ff\n89 c3\n4c 89 f7\ne8 76 fa ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 a3 07 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1685
S'.text:0000000000406a30\n.text:0000000000406a32\n.text:0000000000406a34\n.text:0000000000406a35\n.text:0000000000406a38\n.text:0000000000406a3b\n.text:0000000000406a40\n.text:0000000000406a42\n.text:0000000000406a45\n.text:0000000000406a4a\n.text:0000000000406a4c\n.text:0000000000406a4e\n.text:0000000000406a50\n.text:0000000000406a53\n.text:0000000000406a58\n.text:0000000000406a5a\n.text:0000000000406a5c\n.text:0000000000406a5e\n.text:0000000000406a63\n.text:0000000000406a66\n.text:0000000000406a68\n.text:0000000000406a6d\n.text:0000000000406a70\n.text:0000000000406a73\n.text:0000000000406a74\n.text:0000000000406a76\n.text:0000000000406a78\n.text:0000000000406a7d\n.text:0000000000406a7f\n.text:0000000000406a80\n.text:0000000000406a82\n.text:0000000000406a84\n'
p1686
tp1687
sS'get_stat_atime'
p1688
(S'\n__stdcall get_stat_atime(stat * st)\n'
p1689
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p1690
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p1691
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p1692
S'.text:000000000040da80\n.text:000000000040da84\n.text:000000000040da88\n'
p1693
tp1694
sS'xmalloc'
p1695
(S'\n__stdcall xmalloc(size_t n)\n'
p1696
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1697
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004024e0\nTEST RBX,RBX\nJZ 0x0040f923\nTEST RAX,RAX\nJZ 0x0040f925\nPOP RBX\nRET\nCALL 0x0040faa0\n'
p1698
S'53\n48 89 fb\ne8 c7 2b ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p1699
S'.text:000000000040f910\n.text:000000000040f911\n.text:000000000040f914\n.text:000000000040f919\n.text:000000000040f91c\n.text:000000000040f91e\n.text:000000000040f921\n.text:000000000040f923\n.text:000000000040f924\n.text:000000000040f925\n'
p1700
tp1701
sS'rev_strcmp_df_name'
p1702
(S'\n__stdcall rev_strcmp_df_name(V a, V b)\n'
p1703
V\u000aint rev_strcmp_df_name(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_name((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1704
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040671a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040673d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040673d\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407170\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1705
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 c0 fd ff ff\n89 c3\n4c 89 f7\ne8 b6 fd ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 33 0a 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1706
S'.text:00000000004066f0\n.text:00000000004066f2\n.text:00000000004066f4\n.text:00000000004066f5\n.text:00000000004066f8\n.text:00000000004066fb\n.text:0000000000406700\n.text:0000000000406702\n.text:0000000000406705\n.text:000000000040670a\n.text:000000000040670c\n.text:000000000040670e\n.text:0000000000406710\n.text:0000000000406713\n.text:0000000000406718\n.text:000000000040671a\n.text:000000000040671c\n.text:000000000040671e\n.text:0000000000406723\n.text:0000000000406726\n.text:0000000000406728\n.text:000000000040672d\n.text:0000000000406730\n.text:0000000000406733\n.text:0000000000406734\n.text:0000000000406736\n.text:0000000000406738\n.text:000000000040673d\n.text:000000000040673f\n.text:0000000000406740\n.text:0000000000406742\n.text:0000000000406744\n'
p1707
tp1708
sS'xstrcoll_df_extension'
p1709
(S'\n__stdcall xstrcoll_df_extension(V a, V b)\n'
p1710
V\u000aint xstrcoll_df_extension(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_extension((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1711
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040678a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x004067ad\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x004067ad\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004071b0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1712
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 50 fd ff ff\n89 c3\n4c 89 f7\ne8 46 fd ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 03 0a 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1713
S'.text:0000000000406760\n.text:0000000000406762\n.text:0000000000406764\n.text:0000000000406765\n.text:0000000000406768\n.text:000000000040676b\n.text:0000000000406770\n.text:0000000000406772\n.text:0000000000406775\n.text:000000000040677a\n.text:000000000040677c\n.text:000000000040677e\n.text:0000000000406780\n.text:0000000000406783\n.text:0000000000406788\n.text:000000000040678a\n.text:000000000040678c\n.text:000000000040678e\n.text:0000000000406793\n.text:0000000000406796\n.text:0000000000406798\n.text:000000000040679d\n.text:00000000004067a0\n.text:00000000004067a3\n.text:00000000004067a4\n.text:00000000004067a6\n.text:00000000004067a8\n.text:00000000004067ad\n.text:00000000004067af\n.text:00000000004067b0\n.text:00000000004067b2\n.text:00000000004067b4\n'
p1714
tp1715
sS'leapyear'
p1716
(S'\n__stdcall leapyear(long_int year)\n'
p1717
V\u000aint leapyear(long_int year)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  if ((year & 3U) != 0) {\u000a    return 0;\u000a  }\u000a  bVar1 = true;\u000a  if (year == (year / 100 + (year >> 0x3f) +\u000a              SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0)) * 100) {\u000a    bVar1 = (((uint)SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x46,0) & 0x3ffffff) +\u000a             SUB164(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0) & 3) == 1;\u000a  }\u000a  return (int)(uint)bVar1;\u000a}\u000a\u000a
p1718
S'TEST DIL,0x3\nJZ 0x0041155c\nXOR EAX,EAX\nMOVZX EAX,AL\nRET\nMOV RCX,-0x5c28f5c28f5c28f5\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nIMUL RDX,RDX,0x64\nMOV AL,0x1\nCMP RDI,RDX\nJNZ 0x004115a7\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSHR EDX,0x6\nADD EDX,EAX\nAND EDX,0x3\nCMP RDX,0x1\nSETZ AL\nMOVZX EAX,AL\nRET\n'
p1719
S'40 f6 c7 03\n74 06\n31 c0\n0f b6 c0\nc3\n48 b9 0b d7 a3 70 3d 0a d7 a3\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 6b d2 64\nb0 01\n48 39 d7\n75 1f\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\nc1 ea 06\n01 c2\n83 e2 03\n48 83 fa 01\n0f 94 c0\n0f b6 c0\nc3\n'
p1720
S'.text:0000000000411550\n.text:0000000000411554\n.text:0000000000411556\n.text:0000000000411558\n.text:000000000041155b\n.text:000000000041155c\n.text:0000000000411566\n.text:0000000000411569\n.text:000000000041156c\n.text:000000000041156f\n.text:0000000000411572\n.text:0000000000411576\n.text:000000000041157a\n.text:000000000041157d\n.text:0000000000411581\n.text:0000000000411583\n.text:0000000000411586\n.text:0000000000411588\n.text:000000000041158b\n.text:000000000041158e\n.text:0000000000411591\n.text:0000000000411594\n.text:0000000000411598\n.text:000000000041159b\n.text:000000000041159d\n.text:00000000004115a0\n.text:00000000004115a4\n.text:00000000004115a7\n.text:00000000004115aa\n'
p1721
tp1722
sS'quotearg_char_mem'
p1723
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p1724
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1725
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0061e1e0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0061e1d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061e1c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061e1b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x0040c050\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040cf40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1726
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 78 0f 21 00\n48 89 4c 24 30\n0f 10 05 5c 0f 21 00\n0f 29 44 24 20\n0f 10 05 40 0f 21 00\n0f 29 44 24 10\n0f 10 05 24 0f 21 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p1727
S'.text:000000000040d250\n.text:000000000040d252\n.text:000000000040d254\n.text:000000000040d255\n.text:000000000040d259\n.text:000000000040d25b\n.text:000000000040d25e\n.text:000000000040d261\n.text:000000000040d268\n.text:000000000040d26d\n.text:000000000040d274\n.text:000000000040d279\n.text:000000000040d280\n.text:000000000040d285\n.text:000000000040d28c\n.text:000000000040d290\n.text:000000000040d293\n.text:000000000040d298\n.text:000000000040d29b\n.text:000000000040d29d\n.text:000000000040d2a2\n.text:000000000040d2a4\n.text:000000000040d2a7\n.text:000000000040d2aa\n.text:000000000040d2ad\n.text:000000000040d2b2\n.text:000000000040d2b6\n.text:000000000040d2b7\n.text:000000000040d2b9\n.text:000000000040d2bb\n'
p1728
tp1729
sS'mbsnwidth'
p1730
(S'\n__stdcall mbsnwidth(char * string, size_t nbytes)\n'
p1731
V\u000aint mbsnwidth(char *string,size_t nbytes)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  ushort **ppuVar5;\u000a  ulong uVar6;\u000a  byte *pbVar7;\u000a  ulong in_RDX;\u000a  int iVar8;\u000a  uint uVar9;\u000a  bool bVar10;\u000a  wint_t local_48;\u000a  uint local_44;\u000a  uint local_40;\u000a  uint local_3c;\u000a  mbstate_t local_38;\u000a  \u000a  pbVar1 = (byte *)(string + nbytes);\u000a  sVar4 = __ctype_get_mb_cur_max();\u000a  if (sVar4 < 2) {\u000a    iVar3 = 0;\u000aLAB_0040bb70:\u000a    do {\u000a      pbVar7 = (byte *)string;\u000a      if (pbVar1 <= pbVar7) {\u000a        return iVar3;\u000a      }\u000a      bVar2 = *pbVar7;\u000a      ppuVar5 = __ctype_b_loc();\u000a      if (((*ppuVar5)[(ulong)bVar2] & 0x4000) == 0) {\u000a        if ((in_RDX & 2) != 0) {\u000a          return -1;\u000a        }\u000a        string = (char *)(pbVar7 + 1);\u000a        if (((*ppuVar5)[(ulong)bVar2] & 2) != 0) goto LAB_0040bb70;\u000a      }\u000a      bVar10 = iVar3 != 0x7fffffff;\u000a      iVar3 = iVar3 + 1;\u000a      iVar8 = 0x7fffffff;\u000a      string = (char *)(pbVar7 + 1);\u000a    } while (bVar10);\u000a  }\u000a  else {\u000a    if ((long)nbytes < 1) {\u000a      iVar8 = 0;\u000a    }\u000a    else {\u000a      local_44 = (uint)in_RDX & 2;\u000a      uVar9 = (uint)in_RDX & 1;\u000a      local_3c = uVar9 ^ 1;\u000a      local_40 = uVar9 * 4 ^ 5;\u000a      iVar8 = 0;\u000a      do {\u000a        switch(*string) {\u000a        case ' ':\u000a        case '!':\u000a        case '\u005c"':\u000a        case '#':\u000a        case '%':\u000a        case '&':\u000a        case '\u005c'':\u000a        case '(':\u000a        case ')':\u000a        case '*':\u000a        case '+':\u000a        case ',':\u000a        case '-':\u000a        case '.':\u000a        case '/':\u000a        case '0':\u000a        case '1':\u000a        case '2':\u000a        case '3':\u000a        case '4':\u000a        case '5':\u000a        case '6':\u000a        case '7':\u000a        case '8':\u000a        case '9':\u000a        case ':':\u000a        case ';':\u000a        case '<':\u000a        case '=':\u000a        case '>':\u000a        case '?':\u000a        case 'A':\u000a        case 'B':\u000a        case 'C':\u000a        case 'D':\u000a        case 'E':\u000a        case 'F':\u000a        case 'G':\u000a        case 'H':\u000a        case 'I':\u000a        case 'J':\u000a        case 'K':\u000a        case 'L':\u000a        case 'M':\u000a        case 'N':\u000a        case 'O':\u000a        case 'P':\u000a        case 'Q':\u000a        case 'R':\u000a        case 'S':\u000a        case 'T':\u000a        case 'U':\u000a        case 'V':\u000a        case 'W':\u000a        case 'X':\u000a        case 'Y':\u000a        case 'Z':\u000a        case '[':\u000a        case '\u005c\u005c':\u000a        case ']':\u000a        case '^':\u000a        case '_':\u000a        case 'a':\u000a        case 'b':\u000a        case 'c':\u000a        case 'd':\u000a        case 'e':\u000a        case 'f':\u000a        case 'g':\u000a        case 'h':\u000a        case 'i':\u000a        case 'j':\u000a        case 'k':\u000a        case 'l':\u000a        case 'm':\u000a        case 'n':\u000a        case 'o':\u000a        case 'p':\u000a        case 'q':\u000a        case 'r':\u000a        case 's':\u000a        case 't':\u000a        case 'u':\u000a        case 'v':\u000a        case 'w':\u000a        case 'x':\u000a        case 'y':\u000a        case 'z':\u000a        case '{':\u000a        case '|':\u000a        case '}':\u000a        case '~':\u000a          string = (char *)((byte *)string + 1);\u000a          iVar8 = iVar8 + 1;\u000a          break;\u000a        default:\u000a          local_38 = (mbstate_t)0x0;\u000a          do {\u000a            sVar4 = mbrtowc((wchar_t *)&local_48,string,(size_t)(pbVar1 + -(long)string),&local_38);\u000a            if (sVar4 == 0xfffffffffffffffe) {\u000a              iVar8 = iVar8 + local_3c;\u000a              if ((in_RDX & 1) == 0) {\u000a                string = (char *)pbVar1;\u000a              }\u000a              uVar6 = (ulong)local_40;\u000a            }\u000a            else {\u000a              if (sVar4 == 0) {\u000a                sVar4 = 1;\u000a              }\u000a              else {\u000a                if (sVar4 == 0xffffffffffffffff) {\u000a                  uVar6 = 1;\u000a                  if ((in_RDX & 1) == 0) {\u000a                    string = (char *)((byte *)string + 1);\u000a                    iVar8 = iVar8 + 1;\u000a                    uVar6 = 5;\u000a                  }\u000a                  goto LAB_0040bb15;\u000a                }\u000a              }\u000a              iVar3 = wcwidth(local_48);\u000a              if (iVar3 < 0) {\u000a                uVar6 = 1;\u000a                if (local_44 == 0) {\u000a                  iVar3 = iswcntrl(local_48);\u000a                  if (iVar3 == 0) {\u000a                    if (iVar8 == 0x7fffffff) {\u000a                      uVar6 = 7;\u000a                      iVar8 = 0x7fffffff;\u000a                      goto LAB_0040bb15;\u000a                    }\u000a                    iVar8 = iVar8 + 1;\u000a                  }\u000aLAB_0040bb10:\u000a                  string = (char *)((byte *)string + sVar4);\u000a                  uVar6 = 0;\u000a                }\u000a              }\u000a              else {\u000a                uVar6 = 7;\u000a                if (iVar3 <= 0x7fffffff - iVar8) {\u000a                  iVar8 = iVar8 + iVar3;\u000a                  goto LAB_0040bb10;\u000a                }\u000a              }\u000a            }\u000aLAB_0040bb15:\u000a            if ((uVar6 & 7) != 0) {\u000a              if ((((byte)uVar6 & 7) != 5) && ((uVar6 & 7) != 0)) {\u000a                if (((byte)uVar6 & 7) != 7) {\u000a                  return -1;\u000a                }\u000a                return 0x7fffffff;\u000a              }\u000a              break;\u000a            }\u000a            iVar3 = mbsinit(&local_38);\u000a          } while (iVar3 == 0);\u000a        }\u000a      } while (string < pbVar1);\u000a    }\u000a  }\u000a  return iVar8;\u000a}\u000a\u000a
p1732
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nLEA R15,[RBX + RBP*0x1]\nCALL 0x00402280\nCMP RAX,0x1\nJBE 0x0040bb52\nTEST RBP,RBP\nJLE 0x0040bbc0\nMOV EAX,R14D\nAND EAX,0x2\nMOV dword ptr [RSP + 0x4],EAX\nAND R14D,0x1\nMOV EAX,R14D\nXOR EAX,0x1\nMOV dword ptr [RSP + 0xc],EAX\nLEA EAX,[R14*0x4]\nXOR EAX,0x5\nMOV dword ptr [RSP + 0x8],EAX\nXOR EBP,EBP\nLEA R12,[RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x20\nCMP EAX,0x5e\nJA 0x0040ba31\nJMP qword ptr [0x416f10 + RAX*0x8]\nINC RBX\nINC EBP\nCMP RBX,R15\nJC 0x0040ba10\nJMP 0x0040bbc2\nMOV qword ptr [RSP + 0x10],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBX\nMOV RDI,RSP\nMOV RSI,RBX\nMOV RCX,R12\nCALL 0x004022c0\nMOV R13,RAX\nCMP R13,-0x2\nJZ 0x0040ba90\nTEST R13,R13\nJZ 0x0040bab0\nCMP R13,-0x1\nJNZ 0x0040bab6\nMOV ECX,0x1\nTEST R14D,R14D\nJNZ 0x0040bb15\nINC RBX\nINC EBP\nMOV ECX,0x5\nJMP 0x0040bb15\nADD EBP,dword ptr [RSP + 0xc]\nTEST R14D,R14D\nCMOVZ RBX,R15\nMOV ECX,dword ptr [RSP + 0x8]\nJMP 0x0040bb15\nMOV R13D,0x1\nMOV EDI,dword ptr [RSP]\nCALL 0x004024c0\nTEST EAX,EAX\nJS 0x0040bad6\nMOV EDX,0x7fffffff\nSUB EDX,EBP\nMOV ECX,0x7\nCMP EAX,EDX\nJG 0x0040bb15\nADD EBP,EAX\nJMP 0x0040bb10\nMOV ECX,0x1\nCMP dword ptr [RSP + 0x4],0x0\nJNZ 0x0040bb15\nMOV EDI,dword ptr [RSP]\nCALL 0x004021a0\nTEST EAX,EAX\nJNZ 0x0040bb10\nCMP EBP,0x7fffffff\nJNZ 0x0040bb02\nMOV ECX,0x7\nMOV EBP,0x7fffffff\nJMP 0x0040bb15\nINC EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBX,R13\nXOR ECX,ECX\nMOV EAX,ECX\nAND AL,0x7\nJNZ 0x0040bb30\nMOV RDI,R12\nCALL 0x004026d0\nTEST EAX,EAX\nJZ 0x0040ba40\nJMP 0x0040ba27\nCMP AL,0x5\nJZ 0x0040ba27\nAND CL,0x7\nJZ 0x0040ba27\nMOV EBP,0xffffffff\nCMP CL,0x7\nJNZ 0x0040bbc2\nMOV EBP,0x7fffffff\nJMP 0x0040bbc2\nAND R14D,0x2\nXOR R12D,R12D\nMOV RCX,RBX\nJMP 0x0040bb70\nMOV RCX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nCMP RBX,R15\nJNC 0x0040bbb4\nMOVZX EBP,byte ptr [RBX]\nCALL 0x00402720\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nTEST AH,0x40\nJNZ 0x0040bb99\nTEST R14D,R14D\nJNZ 0x0040bbb9\nLEA RCX,[RBX + 0x1]\nTEST AL,0x2\nJNZ 0x0040bb70\nINC RBX\nCMP R12D,0x7fffffff\nLEA EAX,[R12 + 0x1]\nMOV EBP,0x7fffffff\nMOV R12D,EAX\nJNZ 0x0040bb5e\nJMP 0x0040bbc2\nMOV EBP,R12D\nJMP 0x0040bbc2\nMOV EBP,0xffffffff\nJMP 0x0040bbc2\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1733
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d6\n48 89 f5\n48 89 fb\n4c 8d 3c 2b\ne8 c0 68 ff ff\n48 83 f8 01\n0f 86 88 01 00 00\n48 85 ed\n0f 8e ed 01 00 00\n44 89 f0\n83 e0 02\n89 44 24 04\n41 83 e6 01\n44 89 f0\n83 f0 01\n89 44 24 0c\n42 8d 04 b5 00 00 00 00\n83 f0 05\n89 44 24 08\n31 ed\n4c 8d 64 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 03\n83 c0 e0\n83 f8 5e\n77 16\nff 24 c5 10 6f 41 00\n48 ff c3\nff c5\n4c 39 fb\n72 e4\ne9 91 01 00 00\n48 c7 44 24 10 00 00 00 00\n66 0f 1f 44 00 00\n4c 89 fa\n48 29 da\n48 89 e7\n48 89 de\n4c 89 e1\ne8 6c 68 ff ff\n49 89 c5\n49 83 fd fe\n74 33\n4d 85 ed\n74 4e\n49 83 fd ff\n75 4e\nb9 01 00 00 00\n45 85 f6\n0f 85 9f 00 00 00\n48 ff c3\nff c5\nb9 05 00 00 00\ne9 90 00 00 00\n03 6c 24 0c\n45 85 f6\n49 0f 44 df\n8b 4c 24 08\neb 74\n41 bd 01 00 00 00\n8b 3c 24\ne8 02 6a ff ff\n85 c0\n78 14\nba ff ff ff 7f\n29 ea\nb9 07 00 00 00\n39 d0\n7f 43\n01 c5\neb 3a\nb9 01 00 00 00\n83 7c 24 04 00\n75 33\n8b 3c 24\ne8 b6 66 ff ff\n85 c0\n75 22\n81 fd ff ff ff 7f\n75 0c\nb9 07 00 00 00\nbd ff ff ff 7f\neb 13\nff c5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 01 eb\n31 c9\n89 c8\n24 07\n75 15\n4c 89 e7\ne8 ad 6b ff ff\n85 c0\n0f 84 15 ff ff ff\ne9 f7 fe ff ff\n3c 05\n0f 84 ef fe ff ff\n80 e1 07\n0f 84 e6 fe ff ff\nbd ff ff ff ff\n80 f9 07\n75 77\nbd ff ff ff 7f\neb 70\n41 83 e6 02\n45 31 e4\n48 89 d9\neb 12\n48 89 d9\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n4c 39 fb\n73 3c\n0f b6 2b\ne8 a0 6b ff ff\n48 8b 00\n0f b7 04 68\nf6 c4 40\n75 0d\n45 85 f6\n75 28\n48 8d 4b 01\na8 02\n75 d7\n48 ff c3\n41 81 fc ff ff ff 7f\n41 8d 44 24 01\nbd ff ff ff 7f\n41 89 c4\n75 ac\neb 0e\n44 89 e5\neb 09\nbd ff ff ff ff\neb 02\n31 ed\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1734
S'.text:000000000040b9a0\n.text:000000000040b9a1\n.text:000000000040b9a3\n.text:000000000040b9a5\n.text:000000000040b9a7\n.text:000000000040b9a9\n.text:000000000040b9aa\n.text:000000000040b9ae\n.text:000000000040b9b1\n.text:000000000040b9b4\n.text:000000000040b9b7\n.text:000000000040b9bb\n.text:000000000040b9c0\n.text:000000000040b9c4\n.text:000000000040b9ca\n.text:000000000040b9cd\n.text:000000000040b9d3\n.text:000000000040b9d6\n.text:000000000040b9d9\n.text:000000000040b9dd\n.text:000000000040b9e1\n.text:000000000040b9e4\n.text:000000000040b9e7\n.text:000000000040b9eb\n.text:000000000040b9f3\n.text:000000000040b9f6\n.text:000000000040b9fa\n.text:000000000040b9fc\n.text:000000000040ba01\n.text:000000000040ba10\n.text:000000000040ba13\n.text:000000000040ba16\n.text:000000000040ba19\n.text:000000000040ba1b\n.text:000000000040ba22\n.text:000000000040ba25\n.text:000000000040ba27\n.text:000000000040ba2a\n.text:000000000040ba2c\n.text:000000000040ba31\n.text:000000000040ba3a\n.text:000000000040ba40\n.text:000000000040ba43\n.text:000000000040ba46\n.text:000000000040ba49\n.text:000000000040ba4c\n.text:000000000040ba4f\n.text:000000000040ba54\n.text:000000000040ba57\n.text:000000000040ba5b\n.text:000000000040ba5d\n.text:000000000040ba60\n.text:000000000040ba62\n.text:000000000040ba66\n.text:000000000040ba68\n.text:000000000040ba6d\n.text:000000000040ba70\n.text:000000000040ba76\n.text:000000000040ba79\n.text:000000000040ba7b\n.text:000000000040ba80\n.text:000000000040ba90\n.text:000000000040ba94\n.text:000000000040ba97\n.text:000000000040ba9b\n.text:000000000040ba9f\n.text:000000000040bab0\n.text:000000000040bab6\n.text:000000000040bab9\n.text:000000000040babe\n.text:000000000040bac0\n.text:000000000040bac2\n.text:000000000040bac7\n.text:000000000040bac9\n.text:000000000040bace\n.text:000000000040bad0\n.text:000000000040bad2\n.text:000000000040bad4\n.text:000000000040bad6\n.text:000000000040badb\n.text:000000000040bae0\n.text:000000000040bae2\n.text:000000000040bae5\n.text:000000000040baea\n.text:000000000040baec\n.text:000000000040baee\n.text:000000000040baf4\n.text:000000000040baf6\n.text:000000000040bafb\n.text:000000000040bb00\n.text:000000000040bb02\n.text:000000000040bb04\n.text:000000000040bb10\n.text:000000000040bb13\n.text:000000000040bb15\n.text:000000000040bb17\n.text:000000000040bb19\n.text:000000000040bb1b\n.text:000000000040bb1e\n.text:000000000040bb23\n.text:000000000040bb25\n.text:000000000040bb2b\n.text:000000000040bb30\n.text:000000000040bb32\n.text:000000000040bb38\n.text:000000000040bb3b\n.text:000000000040bb41\n.text:000000000040bb46\n.text:000000000040bb49\n.text:000000000040bb4b\n.text:000000000040bb50\n.text:000000000040bb52\n.text:000000000040bb56\n.text:000000000040bb59\n.text:000000000040bb5c\n.text:000000000040bb5e\n.text:000000000040bb61\n.text:000000000040bb70\n.text:000000000040bb73\n.text:000000000040bb76\n.text:000000000040bb78\n.text:000000000040bb7b\n.text:000000000040bb80\n.text:000000000040bb83\n.text:000000000040bb87\n.text:000000000040bb8a\n.text:000000000040bb8c\n.text:000000000040bb8f\n.text:000000000040bb91\n.text:000000000040bb95\n.text:000000000040bb97\n.text:000000000040bb99\n.text:000000000040bb9c\n.text:000000000040bba3\n.text:000000000040bba8\n.text:000000000040bbad\n.text:000000000040bbb0\n.text:000000000040bbb2\n.text:000000000040bbb4\n.text:000000000040bbb7\n.text:000000000040bbb9\n.text:000000000040bbbe\n.text:000000000040bbc0\n.text:000000000040bbc2\n.text:000000000040bbc4\n.text:000000000040bbc8\n.text:000000000040bbc9\n.text:000000000040bbcb\n.text:000000000040bbcd\n.text:000000000040bbcf\n.text:000000000040bbd1\n.text:000000000040bbd2\n'
p1735
tp1736
sS'gettimeofday'
p1737
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p1738
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0061d160)();\u000a  return iVar1;\u000a}\u000a\u000a
p1739
S'JMP qword ptr [0x0061d160]\n'
p1740
S'ff 25 3a ae 21 00\n'
p1741
S'.plt:0000000000402320\n'
p1742
tp1743
sS'mpsort_into_tmp'
p1744
(S'\n__stdcall mpsort_into_tmp(void * * base, size_t n, void * * tmp, comparison_function * cmp)\n'
p1745
V\u000avoid mpsort_into_tmp(void **base,size_t n,void **tmp,int (*cmp)(void *,void *))\u000a\u000a{\u000a  long lVar1;\u000a  void *pvVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  void **ppvVar5;\u000a  void *pvVar6;\u000a  void **__dest;\u000a  ulong n_00;\u000a  long lVar7;\u000a  ulong uVar8;\u000a  ulong local_68;\u000a  \u000a  n_00 = n >> 1;\u000a  mpsort_with_tmp(base + n_00,n - n_00,tmp,cmp);\u000a  mpsort_with_tmp(base,n_00,tmp,cmp);\u000a  pvVar6 = base[n_00];\u000a  local_68 = 0;\u000a  ppvVar5 = base;\u000a  uVar8 = n_00;\u000a  while( true ) {\u000a    pvVar2 = *ppvVar5;\u000a    iVar4 = (*cmp)(pvVar2,pvVar6);\u000a    if (iVar4 < 1) {\u000a      __dest = tmp + 1;\u000a    }\u000a    else {\u000a      lVar1 = uVar8 * 8;\u000a      lVar3 = 0;\u000a      do {\u000a        lVar7 = lVar3;\u000a        *(void **)((long)tmp + lVar7) = pvVar6;\u000a        if (n - 1 == uVar8) {\u000a          __dest = (void **)((long)tmp + lVar7 + 8);\u000a          n = n_00;\u000a          uVar8 = local_68;\u000a          goto LAB_0040bf0d;\u000a        }\u000a        uVar8 = uVar8 + 1;\u000a        pvVar6 = *(void **)((long)base + lVar7 + lVar1 + 8);\u000a        iVar4 = (*cmp)(pvVar2,pvVar6);\u000a        lVar3 = lVar7 + 8;\u000a      } while (0 < iVar4);\u000a      __dest = (void **)((long)tmp + lVar7 + 0x10);\u000a      tmp = (void **)((long)tmp + lVar7 + 8);\u000a    }\u000a    *tmp = pvVar2;\u000a    local_68 = local_68 + 1;\u000a    if (local_68 == n_00) break;\u000a    ppvVar5 = base + local_68;\u000a    tmp = __dest;\u000a  }\u000aLAB_0040bf0d:\u000a  memcpy(__dest,base + uVar8,(n - uVar8) * 8);\u000a  return;\u000a}\u000a\u000a
p1746
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R13,RDI\nMOV R12,R14\nSHR R12,1\nSUB RSI,R12\nLEA RDI,[R13 + R12*0x8]\nCALL 0x0040bbf0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,RBP\nCALL 0x0040bbf0\nMOV RCX,RBP\nMOV RBP,qword ptr [R13 + R12*0x8]\nLEA RAX,[R13 + 0x8]\nMOV qword ptr [RSP + 0x28],RAX\nMOV qword ptr [RSP + 0x20],R14\nLEA RAX,[R14 + -0x1]\nMOV qword ptr [RSP + 0x30],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nMOV R14,R12\nMOV RAX,R13\nMOV qword ptr [RSP + 0x10],R12\nMOV qword ptr [RSP + 0x8],R13\nJMP 0x0040beae\nLEA RDI,[RBX + R13*0x1 + 0x8]\nLEA RBX,[RBX + R13*0x1]\nMOV R12,qword ptr [RSP + 0x10]\nMOV R13,qword ptr [RSP + 0x8]\nJMP 0x0040be84\nLEA RDI,[RBX + 0x8]\nMOV RCX,R15\nMOV RAX,qword ptr [RSP]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX],RDX\nINC RAX\nCMP RAX,R12\nJZ 0x0040bf2c\nMOV RDX,RAX\nMOV qword ptr [RSP],RDX\nLEA RAX,[R13 + RAX*0x8]\nMOV RBX,RDI\nMOV RDI,qword ptr [RAX]\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,RBP\nMOV R15,RCX\nCALL RCX\nTEST EAX,EAX\nJLE 0x0040be80\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R12,[RAX + R14*0x8]\nXOR R13D,R13D\nNOP\nMOV qword ptr [RBX + R13*0x1],RBP\nCMP qword ptr [RSP + 0x30],R14\nJZ 0x0040befa\nINC R14\nMOV RBP,qword ptr [R12 + R13*0x1]\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,RBP\nCALL R15\nADD R13,0x8\nTEST EAX,EAX\nJG 0x0040bed0\nJMP 0x0040be60\nLEA RDI,[RBX + R13*0x1 + 0x8]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV R13,qword ptr [RSP + 0x8]\nMOV R14,qword ptr [RSP]\nLEA RSI,[R13 + R14*0x8]\nSUB RDX,R14\nSHL RDX,0x3\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402440\nMOV RDX,qword ptr [RSP + 0x20]\nJMP 0x0040bf0d\n'
p1747
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n48 89 d3\n49 89 f6\n49 89 fd\n4d 89 f4\n49 d1 ec\n4c 29 e6\n4b 8d 7c e5 00\ne8 e3 fd ff ff\n4c 89 ef\n4c 89 e6\n48 89 da\n48 89 e9\ne8 d2 fd ff ff\n48 89 e9\n4b 8b 6c e5 00\n49 8d 45 08\n48 89 44 24 28\n4c 89 74 24 20\n49 8d 46 ff\n48 89 44 24 30\n31 c0\n48 89 04 24\n4d 89 e6\n4c 89 e8\n4c 89 64 24 10\n4c 89 6c 24 08\neb 59\n4a 8d 7c 2b 08\n4a 8d 1c 2b\n4c 8b 64 24 10\n4c 8b 6c 24 08\neb 0f\n48 8d 7b 08\n4c 89 f9\n48 8b 04 24\n48 8b 54 24 18\n48 89 13\n48 ff c0\n4c 39 e0\n0f 84 8d 00 00 00\n48 89 c2\n48 89 14 24\n49 8d 44 c5 00\n48 89 fb\n48 8b 38\n48 89 7c 24 18\n48 89 ee\n49 89 cf\nff d1\n85 c0\n7e be\n48 8b 44 24 28\n4e 8d 24 f0\n45 31 ed\n66 90\n4a 89 2c 2b\n4c 39 74 24 30\n74 1f\n49 ff c6\n4b 8b 2c 2c\n48 8b 7c 24 18\n48 89 ee\n41 ff d7\n49 83 c5 08\n85 c0\n7f db\ne9 66 ff ff ff\n4a 8d 7c 2b 08\n48 8b 54 24 10\n4c 8b 6c 24 08\n4c 8b 34 24\n4b 8d 74 f5 00\n4c 29 f2\n48 c1 e2 03\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 14 65 ff ff\n48 8b 54 24 20\neb da\n'
p1748
S'.text:000000000040bde0\n.text:000000000040bde1\n.text:000000000040bde3\n.text:000000000040bde5\n.text:000000000040bde7\n.text:000000000040bde9\n.text:000000000040bdea\n.text:000000000040bdee\n.text:000000000040bdf1\n.text:000000000040bdf4\n.text:000000000040bdf7\n.text:000000000040bdfa\n.text:000000000040bdfd\n.text:000000000040be00\n.text:000000000040be03\n.text:000000000040be08\n.text:000000000040be0d\n.text:000000000040be10\n.text:000000000040be13\n.text:000000000040be16\n.text:000000000040be19\n.text:000000000040be1e\n.text:000000000040be21\n.text:000000000040be26\n.text:000000000040be2a\n.text:000000000040be2f\n.text:000000000040be34\n.text:000000000040be38\n.text:000000000040be3d\n.text:000000000040be3f\n.text:000000000040be43\n.text:000000000040be46\n.text:000000000040be49\n.text:000000000040be4e\n.text:000000000040be53\n.text:000000000040be60\n.text:000000000040be65\n.text:000000000040be69\n.text:000000000040be6e\n.text:000000000040be73\n.text:000000000040be80\n.text:000000000040be84\n.text:000000000040be87\n.text:000000000040be8b\n.text:000000000040be90\n.text:000000000040be93\n.text:000000000040be96\n.text:000000000040be99\n.text:000000000040be9f\n.text:000000000040bea2\n.text:000000000040bea6\n.text:000000000040beab\n.text:000000000040beae\n.text:000000000040beb1\n.text:000000000040beb6\n.text:000000000040beb9\n.text:000000000040bebc\n.text:000000000040bebe\n.text:000000000040bec0\n.text:000000000040bec2\n.text:000000000040bec7\n.text:000000000040becb\n.text:000000000040bece\n.text:000000000040bed0\n.text:000000000040bed4\n.text:000000000040bed9\n.text:000000000040bedb\n.text:000000000040bede\n.text:000000000040bee2\n.text:000000000040bee7\n.text:000000000040beea\n.text:000000000040beed\n.text:000000000040bef1\n.text:000000000040bef3\n.text:000000000040bef5\n.text:000000000040befa\n.text:000000000040beff\n.text:000000000040bf04\n.text:000000000040bf09\n.text:000000000040bf0d\n.text:000000000040bf12\n.text:000000000040bf15\n.text:000000000040bf19\n.text:000000000040bf1d\n.text:000000000040bf1e\n.text:000000000040bf20\n.text:000000000040bf22\n.text:000000000040bf24\n.text:000000000040bf26\n.text:000000000040bf27\n.text:000000000040bf2c\n.text:000000000040bf31\n'
p1749
tp1750
sS'quotearg_n_style_colon'
p1751
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p1752
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1753
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x0040d170\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040c050\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x0040cf40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1754
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1755
S'.text:000000000040d2f0\n.text:000000000040d2f1\n.text:000000000040d2f3\n.text:000000000040d2f4\n.text:000000000040d2f8\n.text:000000000040d2fb\n.text:000000000040d2fd\n.text:000000000040d302\n.text:000000000040d305\n.text:000000000040d30a\n.text:000000000040d30f\n.text:000000000040d314\n.text:000000000040d317\n.text:000000000040d31c\n.text:000000000040d323\n.text:000000000040d325\n.text:000000000040d328\n.text:000000000040d32b\n.text:000000000040d330\n.text:000000000040d334\n.text:000000000040d335\n.text:000000000040d337\n.text:000000000040d338\n'
p1756
tp1757
sS'rotl64'
p1758
(S'\n__stdcall rotl64(uint64_t x)\n'
p1759
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1760
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1761
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1762
S'.text:0000000000410a60\n.text:0000000000410a62\n.text:0000000000410a65\n.text:0000000000410a68\n'
p1763
tp1764
sS'print_type_indicator'
p1765
(S'\n__stdcall print_type_indicator()\n'
p1766
V\u000a_Bool print_type_indicator(void)\u000a\u000a{\u000a  char cVar1;\u000a  \u000a  cVar1 = get_type_indicator();\u000a  if (cVar1 != 0) {\u000a    putchar_unlocked((int)cVar1);\u000a    dired_pos = dired_pos + 1;\u000a  }\u000a  return (_Bool)(cVar1 != 0);\u000a}\u000a\u000a
p1767
S'PUSH RBX\nMOVZX EDI,DIL\nCALL 0x00408390\nMOV EBX,EAX\nTEST BL,BL\nJZ 0x0040806f\nMOVSX EDI,BL\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nTEST BL,BL\nSETNZ AL\nPOP RBX\nRET\n'
p1768
S'53\n40 0f b6 ff\ne8 36 03 00 00\n89 c3\n84 db\n74 0f\n0f be fb\ne8 f8 a3 ff ff\n48 ff 05 a1 57 21 00\n84 db\n0f 95 c0\n5b\nc3\n'
p1769
S'.text:0000000000408050\n.text:0000000000408051\n.text:0000000000408055\n.text:000000000040805a\n.text:000000000040805c\n.text:000000000040805e\n.text:0000000000408060\n.text:0000000000408063\n.text:0000000000408068\n.text:000000000040806f\n.text:0000000000408071\n.text:0000000000408074\n.text:0000000000408075\n'
p1770
tp1771
sS'strcmp_name'
p1772
(S'\n__stdcall strcmp_name(V a, V b)\n'
p1773
V\u000aint strcmp_name(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_name((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1774
S'MOV EDX,0x4023f0\nJMP 0x00407170\n'
p1775
S'ba f0 23 40 00\ne9 06 0b 00 00\n'
p1776
S'.text:0000000000406660\n.text:0000000000406665\n'
p1777
tp1778
sS'localtime_rz'
p1779
(S'\n__stdcall localtime_rz(timezone_t tz, time_t * t, tm * tm)\n'
p1780
V\u000atm * localtime_rz(timezone_t tz,time_t *t,tm *tm)\u000a\u000a{\u000a  _Bool _Var1;\u000a  tm *ptVar2;\u000a  timezone_t tz_00;\u000a  tm *ptVar3;\u000a  byte bVar4;\u000a  \u000a  if (tz == (timezone_t)0x0) {\u000a    ptVar2 = (tm *)(*(code *)PTR_gmtime_r_0061d150)(t,tm);\u000a    return ptVar2;\u000a  }\u000a  tz_00 = set_tz(tz);\u000a  if (tz_00 == (timezone_t)0x0) {\u000a    tm = (tm *)0x0;\u000a  }\u000a  else {\u000a    ptVar3 = localtime_r(t,(tm *)tm);\u000a    if (ptVar3 == (tm *)0x0) {\u000a      bVar4 = 1;\u000a    }\u000a    else {\u000a      _Var1 = save_abbr(tz,tm);\u000a      bVar4 = _Var1 ^ 1;\u000a    }\u000a    _Var1 = revert_tz(tz_00);\u000a    if (_Var1 == false) {\u000a      tm = (tm *)0x0;\u000a    }\u000a    if (bVar4 != 0) {\u000a      tm = (tm *)0x0;\u000a    }\u000a  }\u000a  return tm;\u000a}\u000a\u000a
p1781
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004106b8\nMOV RDI,RBX\nCALL 0x00410700\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004106ce\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x00402130\nTEST RAX,RAX\nJZ 0x004106d2\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00410780\nMOV EBX,EAX\nXOR BL,0x1\nJMP 0x004106d4\nMOV RDI,R12\nMOV RSI,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402300\nXOR EAX,EAX\nJMP 0x004106ed\nMOV BL,0x1\nMOV RDI,R14\nCALL 0x00410890\nXOR ECX,ECX\nTEST AL,AL\nCMOVZ R15,RCX\nTEST BL,BL\nCMOVNZ R15,RCX\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1782
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n48 89 fb\n48 85 db\n74 32\n48 89 df\ne8 72 00 00 00\n49 89 c6\n4d 85 f6\n74 38\n4c 89 e7\n4c 89 fe\ne8 8f 1a ff ff\n48 85 c0\n74 2c\n48 89 df\n4c 89 fe\ne8 cf 00 00 00\n89 c3\n80 f3 01\neb 1c\n4c 89 e7\n4c 89 fe\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 32 1c ff ff\n31 c0\neb 1b\nb3 01\n4c 89 f7\ne8 b4 01 00 00\n31 c9\n84 c0\n4c 0f 44 f9\n84 db\n4c 0f 45 f9\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1783
S'.text:0000000000410670\n.text:0000000000410672\n.text:0000000000410674\n.text:0000000000410676\n.text:0000000000410677\n.text:0000000000410678\n.text:000000000041067b\n.text:000000000041067e\n.text:0000000000410681\n.text:0000000000410684\n.text:0000000000410686\n.text:0000000000410689\n.text:000000000041068e\n.text:0000000000410691\n.text:0000000000410694\n.text:0000000000410696\n.text:0000000000410699\n.text:000000000041069c\n.text:00000000004106a1\n.text:00000000004106a4\n.text:00000000004106a6\n.text:00000000004106a9\n.text:00000000004106ac\n.text:00000000004106b1\n.text:00000000004106b3\n.text:00000000004106b6\n.text:00000000004106b8\n.text:00000000004106bb\n.text:00000000004106be\n.text:00000000004106c2\n.text:00000000004106c3\n.text:00000000004106c5\n.text:00000000004106c7\n.text:00000000004106c9\n.text:00000000004106ce\n.text:00000000004106d0\n.text:00000000004106d2\n.text:00000000004106d4\n.text:00000000004106d7\n.text:00000000004106dc\n.text:00000000004106de\n.text:00000000004106e0\n.text:00000000004106e4\n.text:00000000004106e6\n.text:00000000004106ea\n.text:00000000004106ed\n.text:00000000004106f1\n.text:00000000004106f2\n.text:00000000004106f4\n.text:00000000004106f6\n.text:00000000004106f8\n'
p1784
tp1785
sS'quote_mem'
p1786
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p1787
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1788
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040d400\n'
p1789
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p1790
S'.text:000000000040d410\n.text:000000000040d413\n.text:000000000040d416\n.text:000000000040d418\n.text:000000000040d41b\n.text:000000000040d41e\n'
p1791
tp1792
sS'xstrtol_error'
p1793
(S'\n__stdcall xstrtol_error(option * long_options, char * arg)\n'
p1794
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid xstrtol_error(option *long_options,char *arg)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  long in_RCX;\u000a  undefined in_DL;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  uint uVar5;\u000a  ulong in_R9;\u000a  char option_buffer [2];\u000a  ulong uStack40;\u000a  \u000a  iVar1 = (int)arg;\u000a  uVar5 = (int)long_options - 1;\u000a  if (uVar5 < 4) {\u000a    if (iVar1 < 0) {\u000a      lVar3 = (long)&uStack40 + 6;\u000a      puVar4 = &DAT_00418157 + -(long)iVar1;\u000a      uStack40 = (ulong)CONCAT16(in_DL,(int6)in_RAX);\u000a    }\u000a    else {\u000a      lVar3 = *(long *)(in_RCX + (long)iVar1 * 0x20);\u000a      puVar4 = &DAT_00418157;\u000a      uStack40 = in_RAX;\u000a    }\u000a    uVar2 = dcgettext(0,(&PTR_s__s_s_argument___s__too_large_004181c0)[(long)(int)uVar5],5);\u000a    error(in_R9 & 0xffffffff,0,uVar2,puVar4,lVar3);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1795
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV R14,R8\nMOV EAX,ESI\nDEC EDI\nCMP EDI,0x4\nJNC 0x0040ff4e\nMOVSXD RSI,EDI\nMOV RSI,qword ptr [0x4181c0 + RSI*0x8]\nCDQE\nTEST EAX,EAX\nJS 0x0040ff06\nSHL RAX,0x5\nMOV RBX,qword ptr [RCX + RAX*0x1]\nMOV EBP,0x418157\nJMP 0x0040ff1c\nLEA RBX,[RSP + 0x6]\nMOV EBP,0x418157\nSUB RBP,RAX\nMOV byte ptr [RSP + 0x6],DL\nMOV byte ptr [RSP + 0x7],0x0\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RDX,RCX\nMOV RCX,RBP\nMOV R8,RBX\nMOV R9,R14\nCALL 0x004025f0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402100\n'
p1796
S'55\n41 57\n41 56\n53\n50\n45 89 cf\n4d 89 c6\n89 f0\nff cf\n83 ff 04\n73 68\n48 63 f7\n48 8b 34 f5 c0 81 41 00\n48 98\n85 c0\n78 0f\n48 c1 e0 05\n48 8b 1c 01\nbd 57 81 41 00\neb 16\n48 8d 5c 24 06\nbd 57 81 41 00\n48 29 c5\n88 54 24 06\nc6 44 24 07 00\n31 ff\nba 05 00 00 00\ne8 48 23 ff ff\n48 89 c1\n31 f6\n31 c0\n44 89 ff\n48 89 ca\n48 89 e9\n49 89 d8\n4d 89 f1\ne8 ad 26 ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 ad 21 ff ff\n'
p1797
S'.text:000000000040fed0\n.text:000000000040fed1\n.text:000000000040fed3\n.text:000000000040fed5\n.text:000000000040fed6\n.text:000000000040fed7\n.text:000000000040feda\n.text:000000000040fedd\n.text:000000000040fedf\n.text:000000000040fee1\n.text:000000000040fee4\n.text:000000000040fee6\n.text:000000000040fee9\n.text:000000000040fef1\n.text:000000000040fef3\n.text:000000000040fef5\n.text:000000000040fef7\n.text:000000000040fefb\n.text:000000000040feff\n.text:000000000040ff04\n.text:000000000040ff06\n.text:000000000040ff0b\n.text:000000000040ff10\n.text:000000000040ff13\n.text:000000000040ff17\n.text:000000000040ff1c\n.text:000000000040ff1e\n.text:000000000040ff23\n.text:000000000040ff28\n.text:000000000040ff2b\n.text:000000000040ff2d\n.text:000000000040ff2f\n.text:000000000040ff32\n.text:000000000040ff35\n.text:000000000040ff38\n.text:000000000040ff3b\n.text:000000000040ff3e\n.text:000000000040ff43\n.text:000000000040ff47\n.text:000000000040ff48\n.text:000000000040ff4a\n.text:000000000040ff4c\n.text:000000000040ff4d\n.text:000000000040ff4e\n'
p1798
tp1799
sS'mbrtowc'
p1800
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p1801
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0061d130)();\u000a  return sVar1;\u000a}\u000a\u000a
p1802
S'JMP qword ptr [0x0061d130]\n'
p1803
S'ff 25 6a ae 21 00\n'
p1804
S'.plt:00000000004022c0\n'
p1805
tp1806
sS'get_type_indicator'
p1807
(S'\n__stdcall get_type_indicator()\n'
p1808
V\u000achar get_type_indicator(void)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  int in_EDX;\u000a  ulong in_RSI;\u000a  char in_DIL;\u000a  \u000a  if (in_DIL == 0) {\u000a    if (in_EDX == 3) {\u000a      return '/';\u000a    }\u000a    if (in_EDX == 9) {\u000a      return '/';\u000a    }\u000a    if (in_EDX == 5) goto LAB_004083c2;\u000a  }\u000a  else {\u000a    uVar2 = (uint)in_RSI & 0xf000;\u000a    if (uVar2 == 0x8000) {\u000aLAB_004083c2:\u000a      if (in_DIL != 0) {\u000a        in_DIL = '*';\u000a      }\u000a      if (indicator_style != classify) {\u000a        in_DIL = 0;\u000a      }\u000a      cVar1 = 0;\u000a      if ((in_RSI & 0x49) != 0) {\u000a        cVar1 = in_DIL;\u000a      }\u000a      return cVar1;\u000a    }\u000a    if (uVar2 == 0x4000) {\u000a      return '/';\u000a    }\u000a  }\u000a  if (indicator_style != slash) {\u000a    if (in_DIL == 0) {\u000a      if (in_EDX - 1U < 7) {\u000a        return (char)(0x3d40000000007c >> (((byte)(in_EDX - 1U) & 7) << 3));\u000a      }\u000a    }\u000a    else {\u000a      uVar2 = (uint)in_RSI & 0xf000;\u000a      if (uVar2 == 0xa000) {\u000a        return '@';\u000a      }\u000a      if (uVar2 == 0x1000) {\u000a        return '|';\u000a      }\u000a      if (uVar2 == 0xc000) {\u000a        return '=';\u000a      }\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1809
S'TEST DIL,DIL\nJZ 0x004083b1\nMOV ECX,ESI\nAND ECX,0xf000\nCMP ECX,0x8000\nJZ 0x004083c2\nMOV AL,0x2f\nCMP ECX,0x4000\nJNZ 0x004083e3\nJMP 0x004083ee\nMOV AL,0x2f\nCMP EDX,0x3\nJZ 0x004083ee\nCMP EDX,0x9\nJZ 0x004083ee\nCMP EDX,0x5\nJNZ 0x004083e3\nMOV ECX,dword ptr [0x0061d6c8]\nTEST DIL,DIL\nJZ 0x004083d0\nMOV DIL,0x2a\nXOR EAX,EAX\nCMP ECX,0x3\nJZ 0x004083d9\nXOR EDI,EDI\nTEST SIL,0x49\nJZ 0x004083e2\nMOV AL,DIL\nRET\nCMP dword ptr [0x0061d6c8],0x1\nJNZ 0x004083ef\nXOR EAX,EAX\nRET\nTEST DIL,DIL\nJZ 0x0040841a\nAND ESI,0xf000\nMOV AL,0x40\nCMP ESI,0xa000\nJZ 0x004083ee\nMOV AL,0x7c\nCMP ESI,0x1000\nJZ 0x004083ee\nMOV AL,0x3d\nCMP ESI,0xc000\nJNZ 0x004083ec\nJMP 0x004083ee\nDEC EDX\nCMP EDX,0x7\nJNC 0x004083ec\nSHL DL,0x3\nMOV RAX,0x3d40000000007c\nMOV ECX,EDX\nSHR RAX,CL\nRET\n'
p1810
S'40 84 ff\n74 1c\n89 f1\n81 e1 00 f0 00 00\n81 f9 00 80 00 00\n74 1d\nb0 2f\n81 f9 00 40 00 00\n75 34\neb 3d\nb0 2f\n83 fa 03\n74 36\n83 fa 09\n74 31\n83 fa 05\n75 21\n8b 0d 00 53 21 00\n40 84 ff\n74 03\n40 b7 2a\n31 c0\n83 f9 03\n74 02\n31 ff\n40 f6 c6 49\n74 03\n40 88 f8\nc3\n83 3d de 52 21 00 01\n75 03\n31 c0\nc3\n40 84 ff\n74 26\n81 e6 00 f0 00 00\nb0 40\n81 fe 00 a0 00 00\n74 ea\nb0 7c\n81 fe 00 10 00 00\n74 e0\nb0 3d\n81 fe 00 c0 00 00\n75 d4\neb d4\nff ca\n83 fa 07\n73 cb\nc0 e2 03\n48 b8 7c 00 00 00 00 40 3d 00\n89 d1\n48 d3 e8\nc3\n'
p1811
S'.text:0000000000408390\n.text:0000000000408393\n.text:0000000000408395\n.text:0000000000408397\n.text:000000000040839d\n.text:00000000004083a3\n.text:00000000004083a5\n.text:00000000004083a7\n.text:00000000004083ad\n.text:00000000004083af\n.text:00000000004083b1\n.text:00000000004083b3\n.text:00000000004083b6\n.text:00000000004083b8\n.text:00000000004083bb\n.text:00000000004083bd\n.text:00000000004083c0\n.text:00000000004083c2\n.text:00000000004083c8\n.text:00000000004083cb\n.text:00000000004083cd\n.text:00000000004083d0\n.text:00000000004083d2\n.text:00000000004083d5\n.text:00000000004083d7\n.text:00000000004083d9\n.text:00000000004083dd\n.text:00000000004083df\n.text:00000000004083e2\n.text:00000000004083e3\n.text:00000000004083ea\n.text:00000000004083ec\n.text:00000000004083ee\n.text:00000000004083ef\n.text:00000000004083f2\n.text:00000000004083f4\n.text:00000000004083fa\n.text:00000000004083fc\n.text:0000000000408402\n.text:0000000000408404\n.text:0000000000408406\n.text:000000000040840c\n.text:000000000040840e\n.text:0000000000408410\n.text:0000000000408416\n.text:0000000000408418\n.text:000000000040841a\n.text:000000000040841c\n.text:000000000040841f\n.text:0000000000408421\n.text:0000000000408424\n.text:000000000040842e\n.text:0000000000408430\n.text:0000000000408433\n'
p1812
tp1813
sS'rev_strcmp_size'
p1814
(S'\n__stdcall rev_strcmp_size(V a, V b)\n'
p1815
V\u000aint rev_strcmp_size(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_size((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p1816
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407220\n'
p1817
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 7d 07 00 00\n'
p1818
S'.text:0000000000406a90\n.text:0000000000406a93\n.text:0000000000406a98\n.text:0000000000406a9b\n.text:0000000000406a9e\n'
p1819
tp1820
sS'dcgettext'
p1821
(S'\n__stdcall dcgettext()\n'
p1822
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0061d108)();\u000a  return;\u000a}\u000a\u000a
p1823
S'JMP qword ptr [0x0061d108]\n'
p1824
S'ff 25 92 ae 21 00\n'
p1825
S'.plt:0000000000402270\n'
p1826
tp1827
sS'quotearg_free'
p1828
(S'\n__stdcall quotearg_free()\n'
p1829
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p1830
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0061d548]\nCMP dword ptr [0x0061d550],0x2\nJC 0x0040ceda\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004020d0\nINC RBX\nMOV EAX,dword ptr [0x0061d550]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x0040cec0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x61e1f0\nCMP RDI,RAX\nJZ 0x0040cf03\nCALL 0x004020d0\nMOV qword ptr [0x0061d558],0x100\nMOV qword ptr [0x0061d560],0x61e1f0\nMOV EAX,0x61d558\nCMP R14,RAX\nJZ 0x0040cf20\nMOV RDI,R14\nCALL 0x004020d0\nMOV qword ptr [0x0061d548],0x61d558\nMOV dword ptr [0x0061d550],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1831
S'41 57\n41 56\n53\n4c 8b 35 9c 06 21 00\n83 3d 9d 06 21 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 08 52 ff ff\n48 ff c3\n8b 05 7f 06 21 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 f0 e1 61 00\n48 39 c7\n74 1b\ne8 e3 51 ff ff\n48 c7 05 60 06 21 00 00 01 00 00\n48 c7 05 5d 06 21 00 f0 e1 61 00\nb8 58 d5 61 00\n49 39 c6\n74 13\n4c 89 f7\ne8 bb 51 ff ff\n48 c7 05 28 06 21 00 58 d5 61 00\nc7 05 26 06 21 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1832
S'.text:000000000040cea0\n.text:000000000040cea2\n.text:000000000040cea4\n.text:000000000040cea5\n.text:000000000040ceac\n.text:000000000040ceb3\n.text:000000000040ceb5\n.text:000000000040ceb9\n.text:000000000040cebe\n.text:000000000040cec0\n.text:000000000040cec3\n.text:000000000040cec8\n.text:000000000040cecb\n.text:000000000040ced1\n.text:000000000040ced5\n.text:000000000040ced8\n.text:000000000040ceda\n.text:000000000040cede\n.text:000000000040cee3\n.text:000000000040cee6\n.text:000000000040cee8\n.text:000000000040ceed\n.text:000000000040cef8\n.text:000000000040cf03\n.text:000000000040cf08\n.text:000000000040cf0b\n.text:000000000040cf0d\n.text:000000000040cf10\n.text:000000000040cf15\n.text:000000000040cf20\n.text:000000000040cf2a\n.text:000000000040cf2b\n.text:000000000040cf2d\n.text:000000000040cf2f\n'
p1833
tp1834
sS'quotearg_mem'
p1835
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p1836
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1837
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040d100\n'
p1838
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p1839
S'.text:000000000040d120\n.text:000000000040d123\n.text:000000000040d126\n.text:000000000040d128\n.text:000000000040d12b\n.text:000000000040d12e\n'
p1840
tp1841
sS'security_check_context'
p1842
(S'\n__stdcall security_check_context(security_context_t con)\n'
p1843
V\u000aint security_check_context(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1844
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1845
S'50\ne8 7a 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1846
S'.text:000000000040d990\n.text:000000000040d991\n.text:000000000040d996\n.text:000000000040d99c\n.text:000000000040d9a1\n.text:000000000040d9a2\n'
p1847
tp1848
sS'rotl32'
p1849
(S'\n__stdcall rotl32()\n'
p1850
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p1851
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p1852
S'89 f1\nd3 c7\n89 f8\nc3\n'
p1853
S'.text:0000000000410a80\n.text:0000000000410a82\n.text:0000000000410a84\n.text:0000000000410a86\n'
p1854
tp1855
sS'attach'
p1856
(S'\n__stdcall attach(char * dest, char * dirname, char * name)\n'
p1857
V\u000avoid attach(char *dest,char *dirname,char *name)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *dirname;\u000a  if (cVar2 == '.') {\u000a    if (dirname[1] == 0) goto LAB_004061a1;\u000a    cVar2 = *dirname;\u000a  }\u000a  pcVar1 = dirname;\u000a  if (cVar2 != 0) {\u000a    do {\u000a      pcVar4 = dest;\u000a      pcVar3 = pcVar1;\u000a      *pcVar4 = cVar2;\u000a      dest = pcVar4 + 1;\u000a      cVar2 = pcVar3[1];\u000a      pcVar1 = pcVar3 + 1;\u000a    } while (cVar2 != 0);\u000a    if ((dirname < pcVar3 + 1) && (*pcVar3 != '/')) {\u000a      *dest = '/';\u000a      dest = pcVar4 + 2;\u000a    }\u000a  }\u000aLAB_004061a1:\u000a  cVar2 = *name;\u000a  if (cVar2 != 0) {\u000a    name = name + 1;\u000a    do {\u000a      *dest = cVar2;\u000a      dest = dest + 1;\u000a      cVar2 = *name;\u000a      name = name + 1;\u000a    } while (cVar2 != 0);\u000a  }\u000a  *dest = 0;\u000a  return;\u000a}\u000a\u000a
p1858
S'MOV AL,byte ptr [RSI]\nCMP AL,0x2e\nJNZ 0x0040616e\nCMP byte ptr [RSI + 0x1],0x0\nJZ 0x004061a1\nMOV AL,byte ptr [RSI]\nTEST AL,AL\nJZ 0x004061a1\nMOV RCX,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV byte ptr [RDI],AL\nINC RDI\nMOVZX EAX,byte ptr [RCX + 0x1]\nINC RCX\nTEST AL,AL\nJNZ 0x00406180\nCMP RCX,RSI\nJBE 0x004061a1\nCMP byte ptr [RCX + -0x1],0x2f\nJZ 0x004061a1\nMOV byte ptr [RDI],0x2f\nINC RDI\nMOV AL,byte ptr [RDX]\nTEST AL,AL\nJZ 0x004061bf\nINC RDX\nNOP word ptr [RAX + RAX*0x1]\nMOV byte ptr [RDI],AL\nINC RDI\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST AL,AL\nJNZ 0x004061b0\nMOV byte ptr [RDI],0x0\nRET\n'
p1859
S'8a 06\n3c 2e\n75 08\n80 7e 01 00\n74 35\n8a 06\n84 c0\n74 2f\n48 89 f1\n66 66 2e 0f 1f 84 00 00 00 00 00\n88 07\n48 ff c7\n0f b6 41 01\n48 ff c1\n84 c0\n75 f0\n48 39 f1\n76 0c\n80 79 ff 2f\n74 06\nc6 07 2f\n48 ff c7\n8a 02\n84 c0\n74 18\n48 ff c2\n66 0f 1f 44 00 00\n88 07\n48 ff c7\n0f b6 02\n48 ff c2\n84 c0\n75 f1\nc6 07 00\nc3\n'
p1860
S'.text:0000000000406160\n.text:0000000000406162\n.text:0000000000406164\n.text:0000000000406166\n.text:000000000040616a\n.text:000000000040616c\n.text:000000000040616e\n.text:0000000000406170\n.text:0000000000406172\n.text:0000000000406175\n.text:0000000000406180\n.text:0000000000406182\n.text:0000000000406185\n.text:0000000000406189\n.text:000000000040618c\n.text:000000000040618e\n.text:0000000000406190\n.text:0000000000406193\n.text:0000000000406195\n.text:0000000000406199\n.text:000000000040619b\n.text:000000000040619e\n.text:00000000004061a1\n.text:00000000004061a3\n.text:00000000004061a5\n.text:00000000004061a7\n.text:00000000004061aa\n.text:00000000004061b0\n.text:00000000004061b2\n.text:00000000004061b5\n.text:00000000004061b8\n.text:00000000004061bb\n.text:00000000004061bd\n.text:00000000004061bf\n.text:00000000004061c2\n'
p1861
tp1862
sS'free'
p1863
(S'\n__stdcall free(void * __ptr)\n'
p1864
V\u000a/* WARNING: Switch with 1 destination removed at 0x004020d0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1865
S'JMP qword ptr [0x0061d038]\n'
p1866
S'ff 25 62 af 21 00\n'
p1867
S'.plt:00000000004020d0\n'
p1868
tp1869
sS'format_group'
p1870
(S'\n__stdcall format_group()\n'
p1871
V\u000avoid format_group(uint uParm1,undefined8 uParm2,char cParm3)\u000a\u000a{\u000a  char *name;\u000a  \u000a  if (cParm3 == 0) {\u000a    name = "?";\u000a  }\u000a  else {\u000a    if (numeric_ids == 0) {\u000a      name = getgroup();\u000a    }\u000a    else {\u000a      name = (char *)0x0;\u000a    }\u000a  }\u000a  format_user_or_group(name,(ulong)uParm1);\u000a  return;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV EBP,EDI\nTEST DL,DL\nJZ 0x00408909\nMOV AL,byte ptr [0x0061d839]\nTEST AL,AL\nJZ 0x00408910\nXOR EDI,EDI\nJMP 0x0040891a\nMOV EDI,0x4168bd\nJMP 0x0040891a\nMOV EDI,EBP\nCALL 0x0040b260\nMOV RDI,RAX\nMOV ESI,EBP\nMOV EDX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00408930\n'
p1873
S'55\n53\n50\n89 f3\n89 fd\n84 d2\n74 0e\n8a 05 38 4f 21 00\n84 c0\n74 0b\n31 ff\neb 11\nbf bd 68 41 00\neb 0a\n89 ef\ne8 49 29 00 00\n48 89 c7\n89 ee\n89 da\n48 83 c4 08\n5b\n5d\neb 0a\n'
p1874
S'.text:00000000004088f0\n.text:00000000004088f1\n.text:00000000004088f2\n.text:00000000004088f3\n.text:00000000004088f5\n.text:00000000004088f7\n.text:00000000004088f9\n.text:00000000004088fb\n.text:0000000000408901\n.text:0000000000408903\n.text:0000000000408905\n.text:0000000000408907\n.text:0000000000408909\n.text:000000000040890e\n.text:0000000000408910\n.text:0000000000408912\n.text:0000000000408917\n.text:000000000040891a\n.text:000000000040891c\n.text:000000000040891e\n.text:0000000000408922\n.text:0000000000408923\n.text:0000000000408924\n'
p1875
tp1876
sS'stat'
p1877
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p1878
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0061d220)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1879
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004024a0\n'
p1880
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 20 0b ff ff\n'
p1881
S'.text:0000000000411970\n.text:0000000000411973\n.text:0000000000411976\n.text:000000000041197b\n'
p1882
tp1883
sS'tzalloc'
p1884
(S'\n__stdcall tzalloc(char * name)\n'
p1885
V\u000atimezone_t tzalloc(char *name)\u000a\u000a{\u000a  size_t __size;\u000a  timezone_t ptVar1;\u000a  ulong abbr_size;\u000a  \u000a  if (name == (char *)0x0) {\u000a    abbr_size = 0;\u000a  }\u000a  else {\u000a    __size = strlen(name);\u000a    abbr_size = __size + 1;\u000a  }\u000a  __size = 0x80;\u000a  if (0x76 < abbr_size) {\u000a    __size = abbr_size + 10;\u000a  }\u000a  ptVar1 = (timezone_t)malloc(__size);\u000a  if (ptVar1 != (timezone_t)0x0) {\u000a    ptVar1->next = (tm_zone *)0x0;\u000a    *(bool *)&ptVar1->tz_is_set = name != (char *)0x0;\u000a    ptVar1->abbrs[0] = 0;\u000a    if (name != (char *)0x0) {\u000a      extend_abbrs(ptVar1->abbrs,name,abbr_size);\u000a    }\u000a  }\u000a  return ptVar1;\u000a}\u000a\u000a
p1886
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nTEST R14,R14\nJZ 0x004105cd\nMOV RDI,R14\nCALL 0x00402290\nMOV R15,RAX\nINC R15\nJMP 0x004105d0\nXOR R15D,R15D\nLEA RAX,[R15 + 0xa]\nCMP R15,0x77\nMOV EDI,0x80\nCMOVNC RDI,RAX\nCALL 0x004024e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410614\nMOV qword ptr [RBX],0x0\nTEST R14,R14\nSETNZ byte ptr [RBX + 0x8]\nMOV byte ptr [RBX + 0x9],0x0\nJZ 0x00410614\nMOV RDI,RBX\nADD RDI,0x9\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00410620\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1887
S'41 57\n41 56\n53\n49 89 fe\n4d 85 f6\n74 10\n4c 89 f7\ne8 cb 1c ff ff\n49 89 c7\n49 ff c7\neb 03\n45 31 ff\n49 8d 47 0a\n49 83 ff 77\nbf 80 00 00 00\n48 0f 43 f8\ne8 fa 1e ff ff\n48 89 c3\n48 85 db\n74 26\n48 c7 03 00 00 00 00\n4d 85 f6\n0f 95 43 08\nc6 43 09 00\n74 12\n48 89 df\n48 83 c7 09\n4c 89 f6\n4c 89 fa\ne8 0c 00 00 00\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1888
S'.text:00000000004105b0\n.text:00000000004105b2\n.text:00000000004105b4\n.text:00000000004105b5\n.text:00000000004105b8\n.text:00000000004105bb\n.text:00000000004105bd\n.text:00000000004105c0\n.text:00000000004105c5\n.text:00000000004105c8\n.text:00000000004105cb\n.text:00000000004105cd\n.text:00000000004105d0\n.text:00000000004105d4\n.text:00000000004105d8\n.text:00000000004105dd\n.text:00000000004105e1\n.text:00000000004105e6\n.text:00000000004105e9\n.text:00000000004105ec\n.text:00000000004105ee\n.text:00000000004105f5\n.text:00000000004105f8\n.text:00000000004105fc\n.text:0000000000410600\n.text:0000000000410602\n.text:0000000000410605\n.text:0000000000410609\n.text:000000000041060c\n.text:000000000041060f\n.text:0000000000410614\n.text:0000000000410617\n.text:0000000000410618\n.text:000000000041061a\n.text:000000000041061c\n'
p1889
tp1890
sS'quote_n_mem'
p1891
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p1892
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1893
S'MOV ECX,0x61d568\nJMP 0x0040cf40\n'
p1894
S'b9 68 d5 61 00\ne9 36 fb ff ff\n'
p1895
S'.text:000000000040d400\n.text:000000000040d405\n'
p1896
tp1897
sS'xstrdup'
p1898
(S'\n__stdcall xstrdup(char * string)\n'
p1899
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p1900
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402290\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x0040fa50\n'
p1901
S'53\n48 89 fb\ne8 07 28 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p1902
S'.text:000000000040fa80\n.text:000000000040fa81\n.text:000000000040fa84\n.text:000000000040fa89\n.text:000000000040fa8d\n.text:000000000040fa90\n.text:000000000040fa91\n'
p1903
tp1904
sS'c_ispunct'
p1905
(S'\n__stdcall c_ispunct()\n'
p1906
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p1907
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00410c12\nMOV AL,0x1\nJMP qword ptr [0x4183e8 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p1908
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd e8 83 41 00\nc3\n31 c0\nc3\n'
p1909
S'.text:0000000000410c00\n.text:0000000000410c03\n.text:0000000000410c06\n.text:0000000000410c08\n.text:0000000000410c0a\n.text:0000000000410c11\n.text:0000000000410c12\n.text:0000000000410c14\n'
p1910
tp1911
sS'fstat'
p1912
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p1913
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0061d260)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1914
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00402520\n'
p1915
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 91 0b ff ff\n'
p1916
S'.text:0000000000411980\n.text:0000000000411983\n.text:0000000000411985\n.text:000000000041198a\n'
p1917
tp1918
sS'rev_xstrcoll_df_mtime'
p1919
(S'\n__stdcall rev_xstrcoll_df_mtime(V a, V b)\n'
p1920
V\u000aint rev_xstrcoll_df_mtime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_mtime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1921
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406c8a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406cad\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406cad\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407260\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1922
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 50 f8 ff ff\n89 c3\n4c 89 f7\ne8 46 f8 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 b3 05 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p1923
S'.text:0000000000406c60\n.text:0000000000406c62\n.text:0000000000406c64\n.text:0000000000406c65\n.text:0000000000406c68\n.text:0000000000406c6b\n.text:0000000000406c70\n.text:0000000000406c72\n.text:0000000000406c75\n.text:0000000000406c7a\n.text:0000000000406c7c\n.text:0000000000406c7e\n.text:0000000000406c80\n.text:0000000000406c83\n.text:0000000000406c88\n.text:0000000000406c8a\n.text:0000000000406c8c\n.text:0000000000406c8e\n.text:0000000000406c93\n.text:0000000000406c96\n.text:0000000000406c98\n.text:0000000000406c9d\n.text:0000000000406ca0\n.text:0000000000406ca3\n.text:0000000000406ca4\n.text:0000000000406ca6\n.text:0000000000406ca8\n.text:0000000000406cad\n.text:0000000000406caf\n.text:0000000000406cb0\n.text:0000000000406cb2\n.text:0000000000406cb4\n'
p1924
tp1925
sS'strftime'
p1926
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p1927
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_0061d2b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1928
S'JMP qword ptr [0x0061d2b8]\n'
p1929
S'ff 25 e2 ac 21 00\n'
p1930
S'.plt:00000000004025d0\n'
p1931
tp1932
sS'call_freefun'
p1933
(S'\n__stdcall call_freefun(obstack * h, void * old_chunk)\n'
p1934
V\u000avoid call_freefun(obstack *h,void *old_chunk)\u000a\u000a{\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x0041049c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    (*(code *)h->freefun)(old_chunk);\u000a    return;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x004104a7. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)h->freefun)(h->extra_arg,old_chunk,in_RDX,(code *)h->freefun);\u000a  return;\u000a}\u000a\u000a
p1935
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x0041049f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x40]\nMOV RCX,qword ptr [RAX + 0x40]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p1936
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 40\n48 8b 48 40\n48 8b 78 48\nff e1\n'
p1937
S'.text:0000000000410490\n.text:0000000000410493\n.text:0000000000410497\n.text:0000000000410499\n.text:000000000041049c\n.text:000000000041049f\n.text:00000000004104a3\n.text:00000000004104a7\n'
p1938
tp1939
sS'close_stdout_set_ignore_EPIPE'
p1940
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p1941
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p1942
S'MOV byte ptr [0x0061e180],DIL\nRET\n'
p1943
S'40 88 3d 09 52 21 00\nc3\n'
p1944
S'.text:0000000000408f70\n.text:0000000000408f77\n'
p1945
tp1946
sS'hash_get_n_buckets_used'
p1947
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p1948
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p1949
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p1950
S'48 8b 47 18\nc3\n'
p1951
S'.text:0000000000409870\n.text:0000000000409874\n'
p1952
tp1953
sS'_setjmp'
p1954
(S'\n__stdcall _setjmp(__jmp_buf_tag * __env)\n'
p1955
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _setjmp(__jmp_buf_tag *__env)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__setjmp_0061d1a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1956
S'JMP qword ptr [0x0061d1a8]\n'
p1957
S'ff 25 f2 ad 21 00\n'
p1958
S'.plt:00000000004023b0\n'
p1959
tp1960
sS'iswprint'
p1961
(S'\n__stdcall iswprint(wint_t __wc)\n'
p1962
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0061d340)();\u000a  return iVar1;\u000a}\u000a\u000a
p1963
S'JMP qword ptr [0x0061d340]\n'
p1964
S'ff 25 5a ac 21 00\n'
p1965
S'.plt:00000000004026e0\n'
p1966
tp1967
sS'c_isspace'
p1968
(S'\n__stdcall c_isspace()\n'
p1969
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1970
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00410c35\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1971
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1972
S'.text:0000000000410c20\n.text:0000000000410c23\n.text:0000000000410c26\n.text:0000000000410c28\n.text:0000000000410c2d\n.text:0000000000410c2f\n.text:0000000000410c31\n.text:0000000000410c34\n.text:0000000000410c35\n.text:0000000000410c37\n'
p1973
tp1974
sS'open'
p1975
(S'\n__stdcall open(char * __file, int __oflag)\n'
p1976
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0061d2d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1977
S'JMP qword ptr [0x0061d2d0]\n'
p1978
S'ff 25 ca ac 21 00\n'
p1979
S'.plt:0000000000402600\n'
p1980
tp1981
sS'set_line_length'
p1982
(S'\n__stdcall set_line_length(char * spec)\n'
p1983
V\u000a_Bool set_line_length(char *spec)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  size_t local_10;\u000a  \u000a  sVar1 = xstrtoumax(spec,(char **)0x0,(uintmax_t *)0x0,(char *)&local_10);\u000a  if (sVar1 == LONGINT_OVERFLOW) {\u000a    local_10 = 0xffffffffffffffff;\u000a  }\u000a  else {\u000a    if (sVar1 != LONGINT_OK) {\u000a      return false;\u000a    }\u000a  }\u000a  line_length = local_10;\u000a  return true;\u000a}\u000a\u000a
p1984
S'PUSH RBX\nSUB RSP,0x10\nXOR EBX,EBX\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV R8D,0x417ce1\nCALL 0x0040ff60\nCMP EAX,0x1\nJZ 0x004057ab\nTEST EAX,EAX\nJNZ 0x004057bb\nMOV RAX,qword ptr [RSP + 0x8]\nJMP 0x004057b2\nMOV RAX,-0x1\nMOV qword ptr [0x0061d850],RAX\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p1985
S'53\n48 83 ec 10\n31 db\n48 8d 4c 24 08\n31 f6\n31 d2\n41 b8 e1 7c 41 00\ne8 c5 a7 00 00\n83 f8 01\n74 0b\n85 c0\n75 17\n48 8b 44 24 08\neb 07\n48 c7 c0 ff ff ff ff\n48 89 05 97 80 21 00\nb3 01\n89 d8\n48 83 c4 10\n5b\nc3\n'
p1986
S'.text:0000000000405780\n.text:0000000000405781\n.text:0000000000405785\n.text:0000000000405787\n.text:000000000040578c\n.text:000000000040578e\n.text:0000000000405790\n.text:0000000000405796\n.text:000000000040579b\n.text:000000000040579e\n.text:00000000004057a0\n.text:00000000004057a2\n.text:00000000004057a4\n.text:00000000004057a9\n.text:00000000004057ab\n.text:00000000004057b2\n.text:00000000004057b9\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057c1\n.text:00000000004057c2\n'
p1987
tp1988
sS'rotl16'
p1989
(S'\n__stdcall rotl16()\n'
p1990
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1991
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1992
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1993
S'.text:0000000000410ac0\n.text:0000000000410ac2\n.text:0000000000410ac4\n.text:0000000000410ac6\n.text:0000000000410acb\n.text:0000000000410acd\n.text:0000000000410acf\n.text:0000000000410ad1\n.text:0000000000410ad3\n'
p1994
tp1995
sS'localtime_r'
p1996
(S'\n__stdcall localtime_r(time_t * __timer, tm * __tp)\n'
p1997
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402130 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime_r(time_t *__timer,tm *__tp)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1998
S'JMP qword ptr [0x0061d068]\n'
p1999
S'ff 25 32 af 21 00\n'
p2000
S'.plt:0000000000402130\n'
p2001
tp2002
sS'tzset'
p2003
(S'\n__stdcall tzset()\n'
p2004
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid tzset(void)\u000a\u000a{\u000a  (*(code *)PTR_tzset_0061d208)();\u000a  return;\u000a}\u000a\u000a
p2005
S'JMP qword ptr [0x0061d208]\n'
p2006
S'ff 25 92 ad 21 00\n'
p2007
S'.plt:0000000000402470\n'
p2008
tp2009
sS'rev_xstrcoll_df_version'
p2010
(S'\n__stdcall rev_xstrcoll_df_version(V a, V b)\n'
p2011
V\u000aint rev_xstrcoll_df_version(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_version((fileinfo *)b,(fileinfo *)a);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2012
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406baa\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406bc8\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406bc8\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407250\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2013
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 30 f9 ff ff\n89 c3\n4c 89 f7\ne8 26 f9 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 1e\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 10\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 88 06 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2014
S'.text:0000000000406b80\n.text:0000000000406b82\n.text:0000000000406b84\n.text:0000000000406b85\n.text:0000000000406b88\n.text:0000000000406b8b\n.text:0000000000406b90\n.text:0000000000406b92\n.text:0000000000406b95\n.text:0000000000406b9a\n.text:0000000000406b9c\n.text:0000000000406b9e\n.text:0000000000406ba0\n.text:0000000000406ba3\n.text:0000000000406ba8\n.text:0000000000406baa\n.text:0000000000406bac\n.text:0000000000406bae\n.text:0000000000406bb3\n.text:0000000000406bb6\n.text:0000000000406bb8\n.text:0000000000406bbb\n.text:0000000000406bbe\n.text:0000000000406bbf\n.text:0000000000406bc1\n.text:0000000000406bc3\n.text:0000000000406bc8\n.text:0000000000406bca\n.text:0000000000406bcb\n.text:0000000000406bcd\n.text:0000000000406bcf\n'
p2015
tp2016
sS'set_quoting_flags'
p2017
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p2018
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p2019
S'TEST RDI,RDI\nMOV ECX,0x61e1b0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p2020
S'48 85 ff\nb9 b0 e1 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p2021
S'.text:000000000040c090\n.text:000000000040c093\n.text:000000000040c098\n.text:000000000040c09c\n.text:000000000040c09f\n.text:000000000040c0a2\n'
p2022
tp2023
sS'queue_directory'
p2024
(S'\n__stdcall queue_directory(char * name, char * realname)\n'
p2025
V\u000avoid queue_directory(char *name,char *realname)\u000a\u000a{\u000a  pending *ppVar1;\u000a  char *pcVar2;\u000a  _Bool in_DL;\u000a  \u000a  ppVar1 = (pending *)xmalloc(0x20);\u000a  if (realname == (char *)0x0) {\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar2 = xstrdup(realname);\u000a  }\u000a  ppVar1->realname = pcVar2;\u000a  if (name == (char *)0x0) {\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar2 = xstrdup(name);\u000a  }\u000a  ppVar1->name = pcVar2;\u000a  ppVar1->command_line_arg = in_DL;\u000a  ppVar1->next = pending_dirs;\u000a  pending_dirs = ppVar1;\u000a  return;\u000a}\u000a\u000a
p2026
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV R15,RDI\nMOV EDI,0x20\nCALL 0x0040f910\nMOV RBX,RAX\nTEST RBP,RBP\nJZ 0x0040484c\nMOV RDI,RBP\nCALL 0x0040fa80\nJMP 0x0040484e\nXOR EAX,EAX\nMOV qword ptr [RBX + 0x8],RAX\nTEST R15,R15\nJZ 0x00404861\nMOV RDI,R15\nCALL 0x0040fa80\nJMP 0x00404863\nXOR EAX,EAX\nMOV qword ptr [RBX],RAX\nMOV byte ptr [RBX + 0x10],R14B\nMOV RAX,qword ptr [0x0061d618]\nMOV qword ptr [RBX + 0x18],RAX\nMOV qword ptr [0x0061d618],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2027
S'55\n41 57\n41 56\n53\n50\n41 89 d6\n48 89 f5\n49 89 ff\nbf 20 00 00 00\ne8 d6 b0 00 00\n48 89 c3\n48 85 ed\n74 0a\n48 89 ef\ne8 36 b2 00 00\neb 02\n31 c0\n48 89 43 08\n4d 85 ff\n74 0a\n4c 89 ff\ne8 21 b2 00 00\neb 02\n31 c0\n48 89 03\n44 88 73 10\n48 8b 05 a7 8d 21 00\n48 89 43 18\n48 89 1d 9c 8d 21 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2028
S'.text:0000000000404820\n.text:0000000000404821\n.text:0000000000404823\n.text:0000000000404825\n.text:0000000000404826\n.text:0000000000404827\n.text:000000000040482a\n.text:000000000040482d\n.text:0000000000404830\n.text:0000000000404835\n.text:000000000040483a\n.text:000000000040483d\n.text:0000000000404840\n.text:0000000000404842\n.text:0000000000404845\n.text:000000000040484a\n.text:000000000040484c\n.text:000000000040484e\n.text:0000000000404852\n.text:0000000000404855\n.text:0000000000404857\n.text:000000000040485a\n.text:000000000040485f\n.text:0000000000404861\n.text:0000000000404863\n.text:0000000000404866\n.text:000000000040486a\n.text:0000000000404871\n.text:0000000000404875\n.text:000000000040487c\n.text:0000000000404880\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404886\n'
p2029
tp2030
sS'__fprintf_chk'
p2031
(S'\n__stdcall __fprintf_chk()\n'
p2032
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0061d328)();\u000a  return;\u000a}\u000a\u000a
p2033
S'JMP qword ptr [0x0061d328]\n'
p2034
S'ff 25 72 ac 21 00\n'
p2035
S'.plt:00000000004026b0\n'
p2036
tp2037
sS'localeconv'
p2038
(S'\n__stdcall localeconv()\n'
p2039
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0061d0b0)();\u000a  return plVar1;\u000a}\u000a\u000a
p2040
S'JMP qword ptr [0x0061d0b0]\n'
p2041
S'ff 25 ea ae 21 00\n'
p2042
S'.plt:00000000004021c0\n'
p2043
tp2044
sS'set_exit_status'
p2045
(S'\n__stdcall set_exit_status()\n'
p2046
V\u000avoid set_exit_status(char cParm1)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = 2;\u000a  if ((cParm1 == 0) && (iVar1 = exit_status, exit_status == 0)) {\u000a    iVar1 = 1;\u000a  }\u000a  exit_status = iVar1;\u000a  return;\u000a}\u000a\u000a
p2047
S'MOV EAX,0x2\nTEST DIL,DIL\nJNZ 0x00405c88\nCMP dword ptr [0x0061d610],0x0\nJNZ 0x00405c8e\nMOV EAX,0x1\nMOV dword ptr [0x0061d610],EAX\nRET\n'
p2048
S'b8 02 00 00 00\n40 84 ff\n75 0e\n83 3d 8f 79 21 00 00\n75 0b\nb8 01 00 00 00\n89 05 82 79 21 00\nc3\n'
p2049
S'.text:0000000000405c70\n.text:0000000000405c75\n.text:0000000000405c78\n.text:0000000000405c7a\n.text:0000000000405c81\n.text:0000000000405c83\n.text:0000000000405c88\n.text:0000000000405c8e\n'
p2050
tp2051
sS'get_charset_aliases'
p2052
(S'\n__stdcall get_charset_aliases()\n'
p2053
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00410fa4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00410fa4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00410fa4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00410fa4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00410fa4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00410fa4_caseD_9;\u000a      case -1:\u000a        goto switchD_00410fa4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00410ffd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00411003:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00410fa4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00411003;\u000a  }\u000a  goto LAB_00410ffd;\u000a}\u000a\u000a
p2054
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0061e2f0]\nTEST R15,R15\nJNZ 0x00411012\nMOV EDI,0x418814\nCALL 0x004020a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410dc8\nCMP byte ptr [RBX],0x0\nJNZ 0x00410dcd\nMOV EBX,0x418824\nMOV RDI,RBX\nCALL 0x00402290\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00410de7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00410de9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004024e0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00410e3d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00402440\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00410e48\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00410e65\nMOV R15D,0x417ce1\nJMP 0x0041100b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402600\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00410ffd\nMOV ESI,0x416872\nMOV EDI,EBP\nCALL 0x00402590\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00410fc4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00410f90\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00402150\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00402150\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00410f90\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00402510\nMOV ESI,0x418833\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00402360\nCMP EAX,0x2\nJL 0x00410fe4\nMOV RDI,R12\nCALL 0x00402290\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00402290\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00410f6d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00402570\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00410eb4\nJMP 0x00410fcd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004024e0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00410eb4\nJMP 0x00410fcd\nMOV RDI,RBX\nCALL 0x00402170\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00410ef7\nJMP qword ptr [0x4186d8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00402170\nCMP EAX,-0x1\nJZ 0x00410fe4\nCMP EAX,0xa\nJNZ 0x00410fb0\nJMP 0x00410f90\nMOV EDI,EBP\nCALL 0x00402380\nJMP 0x00410ffd\nMOV RDI,R15\nCALL 0x004020d0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00411030\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00410ffd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00411003\nMOV R15D,0x417ce1\nMOV RDI,R13\nCALL 0x004020d0\nMOV qword ptr [0x0061e2f0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2055
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 48 d5 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 14 88 41 00\ne8 e5 12 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 24 88 41 00\n48 89 df\ne8 bb 14 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 e9 16 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 16 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e1 7c 41 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 8c 17 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 72 68 41 00\n89 ef\ne8 06 17 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b 12 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b 12 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 0f 16 ff ff\nbe 33 88 41 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 4a 14 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 69 13 ff ff\n49 89 c4\n48 89 ef\ne8 5e 13 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 16 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 65 15 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 d8 11 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd d8 86 41 00\n48 89 df\ne8 b8 11 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 b5 13 ff ff\neb 30\n4c 89 ff\ne8 fb 10 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e1 7c 41 00\n4c 89 ef\ne8 c5 10 ff ff\n4c 89 3d de d2 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2056
S'.text:0000000000410d90\n.text:0000000000410d91\n.text:0000000000410d93\n.text:0000000000410d95\n.text:0000000000410d97\n.text:0000000000410d99\n.text:0000000000410d9a\n.text:0000000000410da1\n.text:0000000000410da8\n.text:0000000000410dab\n.text:0000000000410db1\n.text:0000000000410db6\n.text:0000000000410dbb\n.text:0000000000410dbe\n.text:0000000000410dc1\n.text:0000000000410dc3\n.text:0000000000410dc6\n.text:0000000000410dc8\n.text:0000000000410dcd\n.text:0000000000410dd0\n.text:0000000000410dd5\n.text:0000000000410dd8\n.text:0000000000410ddb\n.text:0000000000410ddd\n.text:0000000000410de2\n.text:0000000000410de5\n.text:0000000000410de7\n.text:0000000000410de9\n.text:0000000000410ded\n.text:0000000000410df2\n.text:0000000000410df7\n.text:0000000000410dfa\n.text:0000000000410dfd\n.text:0000000000410dff\n.text:0000000000410e02\n.text:0000000000410e05\n.text:0000000000410e08\n.text:0000000000410e0d\n.text:0000000000410e10\n.text:0000000000410e13\n.text:0000000000410e16\n.text:0000000000410e18\n.text:0000000000410e1e\n.text:0000000000410e28\n.text:0000000000410e2d\n.text:0000000000410e37\n.text:0000000000410e3b\n.text:0000000000410e3d\n.text:0000000000410e43\n.text:0000000000410e48\n.text:0000000000410e52\n.text:0000000000410e57\n.text:0000000000410e61\n.text:0000000000410e65\n.text:0000000000410e6a\n.text:0000000000410e6c\n.text:0000000000410e6f\n.text:0000000000410e74\n.text:0000000000410e76\n.text:0000000000410e78\n.text:0000000000410e7e\n.text:0000000000410e83\n.text:0000000000410e85\n.text:0000000000410e8a\n.text:0000000000410e8d\n.text:0000000000410e90\n.text:0000000000410e96\n.text:0000000000410e9b\n.text:0000000000410ea0\n.text:0000000000410ea2\n.text:0000000000410ea7\n.text:0000000000410eaa\n.text:0000000000410eaf\n.text:0000000000410eb4\n.text:0000000000410eb9\n.text:0000000000410ebc\n.text:0000000000410ebf\n.text:0000000000410ec2\n.text:0000000000410ec5\n.text:0000000000410ec8\n.text:0000000000410ecd\n.text:0000000000410ed0\n.text:0000000000410ed5\n.text:0000000000410ed8\n.text:0000000000410edd\n.text:0000000000410ee0\n.text:0000000000410ee5\n.text:0000000000410eea\n.text:0000000000410eed\n.text:0000000000410ef2\n.text:0000000000410ef7\n.text:0000000000410ef9\n.text:0000000000410efc\n.text:0000000000410f01\n.text:0000000000410f06\n.text:0000000000410f08\n.text:0000000000410f0b\n.text:0000000000410f0e\n.text:0000000000410f11\n.text:0000000000410f16\n.text:0000000000410f19\n.text:0000000000410f1f\n.text:0000000000410f22\n.text:0000000000410f27\n.text:0000000000410f2a\n.text:0000000000410f2d\n.text:0000000000410f32\n.text:0000000000410f35\n.text:0000000000410f3a\n.text:0000000000410f3f\n.text:0000000000410f42\n.text:0000000000410f44\n.text:0000000000410f48\n.text:0000000000410f4d\n.text:0000000000410f52\n.text:0000000000410f55\n.text:0000000000410f5a\n.text:0000000000410f5d\n.text:0000000000410f62\n.text:0000000000410f65\n.text:0000000000410f6b\n.text:0000000000410f6d\n.text:0000000000410f72\n.text:0000000000410f76\n.text:0000000000410f7b\n.text:0000000000410f7e\n.text:0000000000410f81\n.text:0000000000410f87\n.text:0000000000410f90\n.text:0000000000410f93\n.text:0000000000410f98\n.text:0000000000410f9b\n.text:0000000000410f9e\n.text:0000000000410fa4\n.text:0000000000410fb0\n.text:0000000000410fb3\n.text:0000000000410fb8\n.text:0000000000410fbb\n.text:0000000000410fbd\n.text:0000000000410fc0\n.text:0000000000410fc2\n.text:0000000000410fc4\n.text:0000000000410fc6\n.text:0000000000410fcb\n.text:0000000000410fcd\n.text:0000000000410fd0\n.text:0000000000410fd5\n.text:0000000000410fd7\n.text:0000000000410fdc\n.text:0000000000410fdf\n.text:0000000000410fe4\n.text:0000000000410fe7\n.text:0000000000410fec\n.text:0000000000410ff1\n.text:0000000000410ff4\n.text:0000000000410ff6\n.text:0000000000410ffb\n.text:0000000000410ffd\n.text:0000000000411003\n.text:0000000000411006\n.text:000000000041100b\n.text:0000000000411012\n.text:0000000000411015\n.text:000000000041101c\n.text:000000000041101d\n.text:000000000041101f\n.text:0000000000411021\n.text:0000000000411023\n.text:0000000000411025\n.text:0000000000411026\n'
p2057
tp2058
sS'nl_langinfo'
p2059
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p2060
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0061d250)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2061
S'JMP qword ptr [0x0061d250]\n'
p2062
S'ff 25 4a ad 21 00\n'
p2063
S'.plt:0000000000402500\n'
p2064
tp2065
sS'x2realloc'
p2066
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p2067
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p2068
S'MOV EDX,0x1\nJMP 0x0040f980\n'
p2069
S'ba 01 00 00 00\neb 89\n'
p2070
S'.text:000000000040f9f0\n.text:000000000040f9f5\n'
p2071
tp2072
sS'_obstack_begin'
p2073
(S'\n__stdcall _obstack_begin(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr * freefun)\n'
p2074
V\u000aint _obstack_begin(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(size_t),\u000a                  void (*freefun)(void *))\u000a\u000a{\u000a  *(void *(**)(size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *))&h->freefun = freefun;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfe;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p2075
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nAND byte ptr [RDI + 0x50],0xfe\nCALL 0x004102b0\nMOV EAX,0x1\nPOP RCX\nRET\n'
p2076
S'50\n48 89 4f 38\n4c 89 47 40\n80 67 50 fe\ne8 0e 00 00 00\nb8 01 00 00 00\n59\nc3\n'
p2077
S'.text:0000000000410290\n.text:0000000000410291\n.text:0000000000410295\n.text:0000000000410299\n.text:000000000041029d\n.text:00000000004102a2\n.text:00000000004102a7\n.text:00000000004102a8\n'
p2078
tp2079
sS'stpncpy'
p2080
(S'\n__stdcall stpncpy(char * __dest, char * __src, size_t __n)\n'
p2081
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpncpy_0061d290)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2082
S'JMP qword ptr [0x0061d290]\n'
p2083
S'ff 25 0a ad 21 00\n'
p2084
S'.plt:0000000000402580\n'
p2085
tp2086
sS'quotearg_n_style_mem'
p2087
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p2088
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p2089
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040d170\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040cf40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2090
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2091
S'.text:000000000040d1d0\n.text:000000000040d1d1\n.text:000000000040d1d3\n.text:000000000040d1d5\n.text:000000000040d1d6\n.text:000000000040d1da\n.text:000000000040d1dd\n.text:000000000040d1e0\n.text:000000000040d1e2\n.text:000000000040d1e5\n.text:000000000040d1e8\n.text:000000000040d1ed\n.text:000000000040d1ef\n.text:000000000040d1f2\n.text:000000000040d1f5\n.text:000000000040d1f8\n.text:000000000040d1fd\n.text:000000000040d201\n.text:000000000040d202\n.text:000000000040d204\n.text:000000000040d206\n.text:000000000040d207\n'
p2092
tp2093
sS'free_entry'
p2094
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p2095
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p2096
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p2097
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p2098
S'.text:000000000040a7f0\n.text:000000000040a7f7\n.text:000000000040a7fb\n.text:000000000040a7ff\n.text:000000000040a803\n'
p2099
tp2100
sS'long_time_expected_width'
p2101
(S'\n__stdcall long_time_expected_width()\n'
p2102
V\u000aint long_time_expected_width(void)\u000a\u000a{\u000a  int width;\u000a  tm *ptVar1;\u000a  size_t nbytes;\u000a  char buf [1001];\u000a  time_t local_400;\u000a  char local_3f8 [1016];\u000a  \u000a  if (width < 0) {\u000a    local_400 = 0;\u000a    ptVar1 = localtime(&local_400);\u000a    if ((ptVar1 != (tm *)0x0) && (nbytes = align_nstrftime(), nbytes != 0)) {\u000a      width = mbsnwidth(local_3f8,nbytes);\u000a    }\u000a    if (width < 0) {\u000a      width = 0;\u000a    }\u000a  }\u000a  return width;\u000a}\u000a\u000a
p2103
S'CMP dword ptr [0x0061d524],0x0\nJNS 0x00408b1e\nSUB RSP,0x408\nMOV qword ptr [RSP + 0x8],0x0\nLEA RDI,[RSP + 0x8]\nCALL 0x004020e0\nTEST RAX,RAX\nJZ 0x00408b02\nMOV RSI,qword ptr [0x0061d510]\nMOV RCX,qword ptr [0x0061d730]\nLEA RDI,[RSP + 0x10]\nXOR R8D,R8D\nMOV RDX,RAX\nCALL 0x004089d0\nTEST RAX,RAX\nJZ 0x00408b02\nLEA RDI,[RSP + 0x10]\nXOR EDX,EDX\nMOV RSI,RAX\nCALL 0x0040b9a0\nMOV dword ptr [0x0061d524],EAX\nJMP 0x00408b08\nMOV EAX,dword ptr [0x0061d524]\nTEST EAX,EAX\nLEA RSP,[0x408 + RSP]\nJNS 0x00408b1e\nMOV dword ptr [0x0061d524],0x0\nMOV EAX,dword ptr [0x0061d524]\nRET\n'
p2104
S'83 3d 7d 4a 21 00 00\n79 75\n48 81 ec 08 04 00 00\n48 c7 44 24 08 00 00 00 00\n48 8d 7c 24 08\ne8 1d 96 ff ff\n48 85 c0\n74 3a\n48 8b 35 41 4a 21 00\n48 8b 0d 5a 4c 21 00\n48 8d 7c 24 10\n45 31 c0\n48 89 c2\ne8 ea fe ff ff\n48 85 c0\n74 17\n48 8d 7c 24 10\n31 d2\n48 89 c6\ne8 a6 2e 00 00\n89 05 24 4a 21 00\neb 06\n8b 05 1c 4a 21 00\n85 c0\n48 8d a4 24 08 04 00 00\n79 0a\nc7 05 06 4a 21 00 00 00 00 00\n8b 05 00 4a 21 00\nc3\n'
p2105
S'.text:0000000000408aa0\n.text:0000000000408aa7\n.text:0000000000408aa9\n.text:0000000000408ab0\n.text:0000000000408ab9\n.text:0000000000408abe\n.text:0000000000408ac3\n.text:0000000000408ac6\n.text:0000000000408ac8\n.text:0000000000408acf\n.text:0000000000408ad6\n.text:0000000000408adb\n.text:0000000000408ade\n.text:0000000000408ae1\n.text:0000000000408ae6\n.text:0000000000408ae9\n.text:0000000000408aeb\n.text:0000000000408af0\n.text:0000000000408af2\n.text:0000000000408af5\n.text:0000000000408afa\n.text:0000000000408b00\n.text:0000000000408b02\n.text:0000000000408b08\n.text:0000000000408b0a\n.text:0000000000408b12\n.text:0000000000408b14\n.text:0000000000408b1e\n.text:0000000000408b24\n'
p2106
tp2107
sS'bkm_scale_by_power'
p2108
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p2109
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2110
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00410231\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004101d0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00410220\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2111
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2112
S'.text:0000000000410200\n.text:0000000000410201\n.text:0000000000410203\n.text:0000000000410205\n.text:0000000000410206\n.text:0000000000410207\n.text:0000000000410209\n.text:000000000041020c\n.text:000000000041020f\n.text:0000000000410211\n.text:0000000000410213\n.text:0000000000410215\n.text:0000000000410220\n.text:0000000000410223\n.text:0000000000410226\n.text:000000000041022b\n.text:000000000041022d\n.text:000000000041022f\n.text:0000000000410231\n.text:0000000000410233\n.text:0000000000410237\n.text:0000000000410238\n.text:000000000041023a\n.text:000000000041023c\n.text:000000000041023d\n'
p2113
tp2114
sS'argmatch_valid'
p2115
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p2116
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00408df7:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00408df7;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_00416d7d,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0061d238)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p2117
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x416d60\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d600]\nMOV RDI,RAX\nCALL 0x004023c0\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0061d600]\nJZ 0x00408e5a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00408df7\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x004023a0\nTEST EAX,EAX\nJZ 0x00408e20\nMOV RDI,RBX\nCALL 0x0040d430\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x416d75\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004026b0\nMOV RBP,R13\nJMP 0x00408e3f\nMOV RDI,RBX\nCALL 0x0040d430\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x416d7d\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004026b0\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0061d600]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00408de0\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004024d0\n'
p2118
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 60 6d 41 00\nba 05 00 00 00\ne8 bb 94 ff ff\n48 8b 35 44 48 21 00\n48 89 c7\ne8 fc 95 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 2b 48 21 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 ad 95 ff ff\n85 c0\n74 29\n48 89 df\ne8 31 46 00 00\n48 89 c1\nbe 01 00 00 00\nba 75 6d 41 00\n31 c0\n4c 89 e7\ne8 9a 98 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 08 46 00 00\n48 89 c1\nbe 01 00 00 00\nba 7d 6d 41 00\n31 c0\n4c 89 e7\ne8 71 98 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 ae 47 21 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 5b 96 ff ff\n'
p2119
S'.text:0000000000408d90\n.text:0000000000408d91\n.text:0000000000408d93\n.text:0000000000408d95\n.text:0000000000408d97\n.text:0000000000408d99\n.text:0000000000408d9a\n.text:0000000000408d9b\n.text:0000000000408d9e\n.text:0000000000408da1\n.text:0000000000408da4\n.text:0000000000408da6\n.text:0000000000408dab\n.text:0000000000408db0\n.text:0000000000408db5\n.text:0000000000408dbc\n.text:0000000000408dbf\n.text:0000000000408dc4\n.text:0000000000408dc8\n.text:0000000000408dcb\n.text:0000000000408dce\n.text:0000000000408dd5\n.text:0000000000408ddb\n.text:0000000000408ddd\n.text:0000000000408de0\n.text:0000000000408de3\n.text:0000000000408de5\n.text:0000000000408de8\n.text:0000000000408deb\n.text:0000000000408dee\n.text:0000000000408df3\n.text:0000000000408df5\n.text:0000000000408df7\n.text:0000000000408dfa\n.text:0000000000408dff\n.text:0000000000408e02\n.text:0000000000408e07\n.text:0000000000408e0c\n.text:0000000000408e0e\n.text:0000000000408e11\n.text:0000000000408e16\n.text:0000000000408e19\n.text:0000000000408e20\n.text:0000000000408e23\n.text:0000000000408e28\n.text:0000000000408e2b\n.text:0000000000408e30\n.text:0000000000408e35\n.text:0000000000408e37\n.text:0000000000408e3a\n.text:0000000000408e3f\n.text:0000000000408e43\n.text:0000000000408e48\n.text:0000000000408e4b\n.text:0000000000408e52\n.text:0000000000408e55\n.text:0000000000408e58\n.text:0000000000408e5a\n.text:0000000000408e5f\n.text:0000000000408e62\n.text:0000000000408e66\n.text:0000000000408e67\n.text:0000000000408e69\n.text:0000000000408e6b\n.text:0000000000408e6d\n.text:0000000000408e6f\n.text:0000000000408e70\n'
p2120
tp2121
sS'cmp_extension'
p2122
(S'\n__stdcall cmp_extension(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p2123
V\u000aint cmp_extension(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  pcVar2 = strrchr(a->name,0x2e);\u000a  pcVar3 = strrchr(b->name,0x2e);\u000a  if (pcVar2 == (char *)0x0) {\u000a    pcVar2 = \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca;\u000a  }\u000a  pcVar4 = \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  if (pcVar3 != (char *)0x0) {\u000a    pcVar4 = pcVar3;\u000a  }\u000a  iVar1 = (*cmp)(pcVar2,pcVar4);\u000a  if (iVar1 != 0) {\u000a    return iVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x0040721e. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar1 = (*cmp)(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p2124
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RDI,qword ptr [R15]\nMOV ESI,0x2e\nCALL 0x004022f0\nMOV RBX,RAX\nMOV RDI,qword ptr [R14]\nMOV ESI,0x2e\nCALL 0x004022f0\nTEST RBX,RBX\nMOV ESI,0x417ce1\nCMOVZ RBX,RSI\nTEST RAX,RAX\nCMOVNZ RSI,RAX\nMOV RDI,RBX\nMOV RBX,R12\nCALL R12\nTEST EAX,EAX\nJZ 0x0040720a\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV RDI,qword ptr [R15]\nMOV RSI,qword ptr [R14]\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP RAX\n'
p2125
S'41 57\n41 56\n41 54\n53\n50\n49 89 d4\n49 89 f6\n49 89 ff\n49 8b 3f\nbe 2e 00 00 00\ne8 22 b1 ff ff\n48 89 c3\n49 8b 3e\nbe 2e 00 00 00\ne8 12 b1 ff ff\n48 85 db\nbe e1 7c 41 00\n48 0f 44 de\n48 85 c0\n48 0f 45 f0\n48 89 df\n4c 89 e3\n41 ff d4\n85 c0\n74 0c\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n49 8b 3f\n49 8b 36\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nff e0\n'
p2126
S'.text:00000000004071b0\n.text:00000000004071b2\n.text:00000000004071b4\n.text:00000000004071b6\n.text:00000000004071b7\n.text:00000000004071b8\n.text:00000000004071bb\n.text:00000000004071be\n.text:00000000004071c1\n.text:00000000004071c4\n.text:00000000004071c9\n.text:00000000004071ce\n.text:00000000004071d1\n.text:00000000004071d4\n.text:00000000004071d9\n.text:00000000004071de\n.text:00000000004071e1\n.text:00000000004071e6\n.text:00000000004071ea\n.text:00000000004071ed\n.text:00000000004071f1\n.text:00000000004071f4\n.text:00000000004071f7\n.text:00000000004071fa\n.text:00000000004071fc\n.text:00000000004071fe\n.text:0000000000407202\n.text:0000000000407203\n.text:0000000000407205\n.text:0000000000407207\n.text:0000000000407209\n.text:000000000040720a\n.text:000000000040720d\n.text:0000000000407210\n.text:0000000000407213\n.text:0000000000407217\n.text:0000000000407218\n.text:000000000040721a\n.text:000000000040721c\n.text:000000000040721e\n'
p2127
tp2128
sS'emit_size_note'
p2129
(S'\n__stdcall emit_size_note()\n'
p2130
V\u000avoid emit_size_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\u005cnUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p2131
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x416b54\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004023c0\n'
p2132
S'50\n31 ff\nbe 54 6b 41 00\nba 05 00 00 00\ne8 3e cd ff ff\n48 8b 35 8f 80 21 00\n48 89 c7\n58\ne9 7e ce ff ff\n'
p2133
S'.text:0000000000405520\n.text:0000000000405521\n.text:0000000000405523\n.text:0000000000405528\n.text:000000000040552d\n.text:0000000000405532\n.text:0000000000405539\n.text:000000000040553c\n.text:000000000040553d\n'
p2134
tp2135
sS'close_stdout'
p2136
(S'\n__stdcall close_stdout()\n'
p2137
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00408fa7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_00416d7f,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00408fa7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p2138
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0061d5c8]\nCALL 0x00410c90\nTEST EAX,EAX\nJZ 0x00408fa7\nCMP byte ptr [0x0061e180],0x0\nJZ 0x00408fbc\nCALL 0x00402110\nCMP dword ptr [RAX],0x20\nJNZ 0x00408fbc\nMOV RDI,qword ptr [0x0061d600]\nCALL 0x00410c90\nTEST EAX,EAX\nJNZ 0x00409001\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x416d82\nMOV EDX,0x5\nCALL 0x00402270\nMOV R14,RAX\nMOV RBX,qword ptr [0x0061e178]\nCALL 0x00402110\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040900c\nXOR EDI,EDI\nMOV EDX,0x416d7f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004025f0\nMOV EDI,dword ptr [0x0061d540]\nCALL 0x00402140\nMOV EDI,dword ptr [0x0061d540]\nCALL 0x00402140\nMOV RDI,RBX\nCALL 0x0040d2d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4164a2\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004025f0\nMOV EDI,dword ptr [0x0061d540]\nCALL 0x00402140\n'
p2139
S'55\n41 56\n53\n48 8b 3d 3d 46 21 00\ne8 00 7d 00 00\n85 c0\n74 13\n80 3d e5 51 21 00 00\n74 1f\ne8 6e 91 ff ff\n83 38 20\n75 15\n48 8b 3d 52 46 21 00\ne8 dd 7c 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 82 6d 41 00\nba 05 00 00 00\ne8 a3 92 ff ff\n49 89 c6\n48 8b 1d a1 51 21 00\ne8 34 91 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 7f 6d 41 00\n31 c0\n89 ee\n4c 89 f1\ne8 fa 95 ff ff\n8b 3d 44 45 21 00\ne8 3f 91 ff ff\n8b 3d 39 45 21 00\ne8 34 91 ff ff\n48 89 df\ne8 bc 42 00 00\n48 89 c1\n31 ff\nba a2 64 41 00\n31 c0\n89 ee\n4d 89 f0\ne8 c6 95 ff ff\n8b 3d 10 45 21 00\ne8 0b 91 ff ff\n'
p2140
S'.text:0000000000408f80\n.text:0000000000408f81\n.text:0000000000408f83\n.text:0000000000408f84\n.text:0000000000408f8b\n.text:0000000000408f90\n.text:0000000000408f92\n.text:0000000000408f94\n.text:0000000000408f9b\n.text:0000000000408f9d\n.text:0000000000408fa2\n.text:0000000000408fa5\n.text:0000000000408fa7\n.text:0000000000408fae\n.text:0000000000408fb3\n.text:0000000000408fb5\n.text:0000000000408fb7\n.text:0000000000408fb8\n.text:0000000000408fba\n.text:0000000000408fbb\n.text:0000000000408fbc\n.text:0000000000408fbe\n.text:0000000000408fc3\n.text:0000000000408fc8\n.text:0000000000408fcd\n.text:0000000000408fd0\n.text:0000000000408fd7\n.text:0000000000408fdc\n.text:0000000000408fdf\n.text:0000000000408fe1\n.text:0000000000408fe3\n.text:0000000000408fe5\n.text:0000000000408fea\n.text:0000000000408fec\n.text:0000000000408fee\n.text:0000000000408ff1\n.text:0000000000408ff6\n.text:0000000000408ffc\n.text:0000000000409001\n.text:0000000000409007\n.text:000000000040900c\n.text:000000000040900f\n.text:0000000000409014\n.text:0000000000409017\n.text:0000000000409019\n.text:000000000040901e\n.text:0000000000409020\n.text:0000000000409022\n.text:0000000000409025\n.text:000000000040902a\n.text:0000000000409030\n'
p2141
tp2142
sS'getgroup'
p2143
(S'\n__stdcall getgroup()\n'
p2144
V\u000achar * getgroup(void)\u000a\u000a{\u000a  group *pgVar1;\u000a  size_t sVar2;\u000a  userid *puVar3;\u000a  userid *puVar4;\u000a  __gid_t __gid;\u000a  char *__s;\u000a  \u000a  puVar4 = group_alist;\u000a  if (group_alist != (userid *)0x0) {\u000a    do {\u000a      if (puVar4->id == __gid) goto LAB_0040b2da;\u000a      puVar4 = puVar4->next;\u000a    } while (puVar4 != (userid *)0x0);\u000a  }\u000a  pgVar1 = getgrgid(__gid);\u000a  if (pgVar1 == (group *)0x0) {\u000a    __s = \u000a          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a          + 0xca;\u000a  }\u000a  else {\u000a    __s = pgVar1->gr_name;\u000a  }\u000a  sVar2 = strlen(__s);\u000a  puVar4 = (userid *)xmalloc(sVar2 + 0x11);\u000a  puVar4->id = __gid;\u000a  strcpy((char *)(puVar4 + 1),__s);\u000a  puVar4->next = group_alist;\u000a  group_alist = puVar4;\u000aLAB_0040b2da:\u000a  puVar3 = (userid *)0x0;\u000a  if (*(char *)&puVar4[1].id != 0) {\u000a    puVar3 = puVar4 + 1;\u000a  }\u000a  return (char *)puVar3;\u000a}\u000a\u000a
p2145
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,EDI\nMOV RBX,qword ptr [0x0061e198]\nTEST RBX,RBX\nJNZ 0x0040b289\nJMP 0x0040b28f\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJZ 0x0040b28f\nCMP dword ptr [RBX],EBP\nJNZ 0x0040b280\nJMP 0x0040b2da\nMOV EDI,EBP\nCALL 0x004022e0\nTEST RAX,RAX\nJZ 0x0040b2a0\nMOV R14,qword ptr [RAX]\nJMP 0x0040b2a6\nMOV R14D,0x417ce1\nMOV RDI,R14\nCALL 0x00402290\nLEA RDI,[RAX + 0x11]\nCALL 0x0040f910\nMOV RBX,RAX\nMOV dword ptr [RBX],EBP\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x00402150\nMOV RAX,qword ptr [0x0061e198]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [0x0061e198],RBX\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x10],0x0\nLEA RCX,[RBX + 0x10]\nCMOVNZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2146
S'55\n41 56\n53\n89 fd\n48 8b 1d 2b 2f 21 00\n48 85 db\n75 17\neb 1b\n48 8b 5b 08\n48 85 db\n74 06\n39 2b\n75 f3\neb 4b\n89 ef\ne8 4a 70 ff ff\n48 85 c0\n74 05\n4c 8b 30\neb 06\n41 be e1 7c 41 00\n4c 89 f7\ne8 e2 6f ff ff\n48 8d 78 11\ne8 59 46 00 00\n48 89 c3\n89 2b\n48 8d 7b 10\n4c 89 f6\ne8 88 6e ff ff\n48 8b 05 c9 2e 21 00\n48 89 43 08\n48 89 1d be 2e 21 00\n31 c0\n80 7b 10 00\n48 8d 4b 10\n48 0f 45 c1\n5b\n41 5e\n5d\nc3\n'
p2147
S'.text:000000000040b260\n.text:000000000040b261\n.text:000000000040b263\n.text:000000000040b264\n.text:000000000040b266\n.text:000000000040b26d\n.text:000000000040b270\n.text:000000000040b272\n.text:000000000040b280\n.text:000000000040b284\n.text:000000000040b287\n.text:000000000040b289\n.text:000000000040b28b\n.text:000000000040b28d\n.text:000000000040b28f\n.text:000000000040b291\n.text:000000000040b296\n.text:000000000040b299\n.text:000000000040b29b\n.text:000000000040b29e\n.text:000000000040b2a0\n.text:000000000040b2a6\n.text:000000000040b2a9\n.text:000000000040b2ae\n.text:000000000040b2b2\n.text:000000000040b2b7\n.text:000000000040b2ba\n.text:000000000040b2bc\n.text:000000000040b2c0\n.text:000000000040b2c3\n.text:000000000040b2c8\n.text:000000000040b2cf\n.text:000000000040b2d3\n.text:000000000040b2da\n.text:000000000040b2dc\n.text:000000000040b2e0\n.text:000000000040b2e4\n.text:000000000040b2e8\n.text:000000000040b2e9\n.text:000000000040b2eb\n.text:000000000040b2ec\n'
p2148
tp2149
sS'__ctype_tolower_loc'
p2150
(S'\n__stdcall __ctype_tolower_loc()\n'
p2151
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_tolower_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_0061d358)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p2152
S'JMP qword ptr [0x0061d358]\n'
p2153
S'ff 25 42 ac 21 00\n'
p2154
S'.plt:0000000000402710\n'
p2155
tp2156
sS'c_isxdigit'
p2157
(S'\n__stdcall c_isxdigit()\n'
p2158
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2159
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00410c6b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p2160
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p2161
S'.text:0000000000410c50\n.text:0000000000410c53\n.text:0000000000410c56\n.text:0000000000410c58\n.text:0000000000410c62\n.text:0000000000410c64\n.text:0000000000410c67\n.text:0000000000410c6a\n.text:0000000000410c6b\n.text:0000000000410c6d\n'
p2162
tp2163
sS'__libc_csu_fini'
p2164
(S'\n__stdcall __libc_csu_fini()\n'
p2165
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2166
S'RET\n'
p2167
S'f3 c3\n'
p2168
S'.text:0000000000411930\n'
p2169
tp2170
sS'memcpy_uppcase'
p2171
(S'\n__stdcall memcpy_uppcase(size_t len)\n'
p2172
V\u000achar * memcpy_uppcase(size_t len)\u000a\u000a{\u000a  __int32_t **in_RAX;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  \u000a  if (in_RDX != 0) {\u000a    in_RAX = __ctype_toupper_loc();\u000a    do {\u000a      *(undefined *)((len - 1) + in_RDX) =\u000a           *(undefined *)(*in_RAX + (ulong)*(byte *)(in_RSI + -1 + in_RDX));\u000a      in_RDX = in_RDX + -1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return (char *)in_RAX;\u000a}\u000a\u000a
p2173
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x0040f337\nCALL 0x00402090\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RAX]\nMOVZX EDX,byte ptr [R14 + RBX*0x1 + -0x1]\nMOVZX ECX,byte ptr [RCX + RDX*0x4]\nMOV byte ptr [R15 + RBX*0x1 + -0x1],CL\nDEC RBX\nJNZ 0x0040f320\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2174
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 24\ne8 78 2d ff ff\n0f 1f 84 00 00 00 00 00\n48 8b 08\n41 0f b6 54 1e ff\n0f b6 0c 91\n41 88 4c 1f ff\n48 ff cb\n75 e9\n5b\n41 5e\n41 5f\nc3\n'
p2175
S'.text:000000000040f300\n.text:000000000040f302\n.text:000000000040f304\n.text:000000000040f305\n.text:000000000040f308\n.text:000000000040f30b\n.text:000000000040f30e\n.text:000000000040f311\n.text:000000000040f313\n.text:000000000040f318\n.text:000000000040f320\n.text:000000000040f323\n.text:000000000040f329\n.text:000000000040f32d\n.text:000000000040f332\n.text:000000000040f335\n.text:000000000040f337\n.text:000000000040f338\n.text:000000000040f33a\n.text:000000000040f33c\n'
p2176
tp2177
sS'abort'
p2178
(S'\n__stdcall abort()\n'
p2179
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0061d050)();\u000a  return;\u000a}\u000a\u000a
p2180
S'JMP qword ptr [0x0061d050]\n'
p2181
S'ff 25 4a af 21 00\n'
p2182
S'.plt:0000000000402100\n'
p2183
tp2184
sS'group_number'
p2185
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p2186
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p2187
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00402290\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00402440\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x0040af33\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x00402440\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x0040af48\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00402440\nSUB R12,RBP\nJNZ 0x0040af20\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2188
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 9c 73 ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 39 75 ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 0d 75 ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 d8 74 ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2189
S'.text:000000000040aed0\n.text:000000000040aed1\n.text:000000000040aed3\n.text:000000000040aed5\n.text:000000000040aed7\n.text:000000000040aed9\n.text:000000000040aeda\n.text:000000000040aede\n.text:000000000040aee1\n.text:000000000040aee4\n.text:000000000040aee7\n.text:000000000040aeec\n.text:000000000040aeef\n.text:000000000040aef4\n.text:000000000040aef7\n.text:000000000040aefc\n.text:000000000040aeff\n.text:000000000040af02\n.text:000000000040af07\n.text:000000000040af0a\n.text:000000000040af0d\n.text:000000000040af10\n.text:000000000040af17\n.text:000000000040af20\n.text:000000000040af23\n.text:000000000040af26\n.text:000000000040af2b\n.text:000000000040af2e\n.text:000000000040af33\n.text:000000000040af37\n.text:000000000040af3a\n.text:000000000040af3c\n.text:000000000040af3e\n.text:000000000040af42\n.text:000000000040af45\n.text:000000000040af48\n.text:000000000040af4b\n.text:000000000040af4f\n.text:000000000040af52\n.text:000000000040af55\n.text:000000000040af58\n.text:000000000040af5d\n.text:000000000040af60\n.text:000000000040af63\n.text:000000000040af68\n.text:000000000040af6b\n.text:000000000040af6d\n.text:000000000040af70\n.text:000000000040af74\n.text:000000000040af75\n.text:000000000040af77\n.text:000000000040af79\n.text:000000000040af7b\n.text:000000000040af7d\n.text:000000000040af7e\n'
p2190
tp2191
sS'closedir'
p2192
(S'\n__stdcall closedir(DIR * __dirp)\n'
p2193
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0061d198)();\u000a  return iVar1;\u000a}\u000a\u000a
p2194
S'JMP qword ptr [0x0061d198]\n'
p2195
S'ff 25 02 ae 21 00\n'
p2196
S'.plt:0000000000402390\n'
p2197
tp2198
sS'opendir'
p2199
(S'\n__stdcall opendir(char * __name)\n'
p2200
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * opendir(char *__name)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_opendir_0061d0e8)();\u000a  return pDVar1;\u000a}\u000a\u000a
p2201
S'JMP qword ptr [0x0061d0e8]\n'
p2202
S'ff 25 b2 ae 21 00\n'
p2203
S'.plt:0000000000402230\n'
p2204
tp2205
sS'compute_bucket_size'
p2206
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p2207
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_00416df8 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_00416df8) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_00416dfc <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2208
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00409e82\nTEST RDI,RDI\nJS 0x00409e32\nCVTSI2SS XMM0,RDI\nJMP 0x00409e47\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x00416df8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x00416dfc]\nJNC 0x00409ea1\nPUSH RAX\nCALL 0x0040a720\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p2209
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d a4 cf 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 7c cf 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p2210
S'.text:0000000000409e20\n.text:0000000000409e24\n.text:0000000000409e26\n.text:0000000000409e29\n.text:0000000000409e2b\n.text:0000000000409e30\n.text:0000000000409e32\n.text:0000000000409e35\n.text:0000000000409e38\n.text:0000000000409e3b\n.text:0000000000409e3e\n.text:0000000000409e43\n.text:0000000000409e47\n.text:0000000000409e4c\n.text:0000000000409e54\n.text:0000000000409e57\n.text:0000000000409e5b\n.text:0000000000409e60\n.text:0000000000409e6a\n.text:0000000000409e6d\n.text:0000000000409e72\n.text:0000000000409e75\n.text:0000000000409e79\n.text:0000000000409e80\n.text:0000000000409e82\n.text:0000000000409e83\n.text:0000000000409e88\n.text:0000000000409e8b\n.text:0000000000409e90\n.text:0000000000409e92\n.text:0000000000409e95\n.text:0000000000409e99\n.text:0000000000409e9d\n.text:0000000000409ea0\n.text:0000000000409ea1\n.text:0000000000409ea3\n.text:0000000000409ea6\n'
p2211
tp2212
sS'security_check_context_raw'
p2213
(S'\n__stdcall security_check_context_raw(security_context_t con)\n'
p2214
V\u000aint security_check_context_raw(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2215
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2216
S'50\ne8 5a 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2217
S'.text:000000000040d9b0\n.text:000000000040d9b1\n.text:000000000040d9b6\n.text:000000000040d9bc\n.text:000000000040d9c1\n.text:000000000040d9c2\n'
p2218
tp2219
sS'hash_rehash'
p2220
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p2221
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2222
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00409e20\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040a151\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x0040a154\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00410240\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x0040a151\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x0040a170\nTEST AL,AL\nJZ 0x0040a11a\nMOV RDI,qword ptr [RBX]\nCALL 0x004020d0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x0040a154\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040a170\nTEST AL,AL\nJZ 0x0040a160\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x0040a170\nTEST AL,AL\nJZ 0x0040a160\nMOV RDI,qword ptr [RSP]\nCALL 0x004020d0\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00402100\n'
p2223
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 c0 61 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 e3 7f ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 7f 7f ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 9b 7f ff ff\n'
p2224
S'.text:000000000040a040\n.text:000000000040a041\n.text:000000000040a043\n.text:000000000040a044\n.text:000000000040a048\n.text:000000000040a04b\n.text:000000000040a04f\n.text:000000000040a052\n.text:000000000040a055\n.text:000000000040a05a\n.text:000000000040a05d\n.text:000000000040a060\n.text:000000000040a066\n.text:000000000040a069\n.text:000000000040a06d\n.text:000000000040a073\n.text:000000000040a078\n.text:000000000040a07b\n.text:000000000040a080\n.text:000000000040a084\n.text:000000000040a087\n.text:000000000040a08d\n.text:000000000040a092\n.text:000000000040a096\n.text:000000000040a09a\n.text:000000000040a09f\n.text:000000000040a0a2\n.text:000000000040a0a7\n.text:000000000040a0ab\n.text:000000000040a0b0\n.text:000000000040a0b4\n.text:000000000040a0b9\n.text:000000000040a0bd\n.text:000000000040a0c2\n.text:000000000040a0c6\n.text:000000000040a0cb\n.text:000000000040a0cf\n.text:000000000040a0d4\n.text:000000000040a0d7\n.text:000000000040a0d9\n.text:000000000040a0dc\n.text:000000000040a0e1\n.text:000000000040a0e3\n.text:000000000040a0e5\n.text:000000000040a0e8\n.text:000000000040a0ed\n.text:000000000040a0f1\n.text:000000000040a0f4\n.text:000000000040a0f9\n.text:000000000040a0fd\n.text:000000000040a102\n.text:000000000040a106\n.text:000000000040a10b\n.text:000000000040a10f\n.text:000000000040a114\n.text:000000000040a118\n.text:000000000040a11a\n.text:000000000040a11f\n.text:000000000040a123\n.text:000000000040a126\n.text:000000000040a12b\n.text:000000000040a12e\n.text:000000000040a133\n.text:000000000040a135\n.text:000000000040a137\n.text:000000000040a13a\n.text:000000000040a13c\n.text:000000000040a13f\n.text:000000000040a144\n.text:000000000040a146\n.text:000000000040a148\n.text:000000000040a14c\n.text:000000000040a151\n.text:000000000040a154\n.text:000000000040a157\n.text:000000000040a15b\n.text:000000000040a15c\n.text:000000000040a15e\n.text:000000000040a15f\n.text:000000000040a160\n'
p2225
tp2226
sS'errno_unsupported'
p2227
(S'\n__stdcall errno_unsupported()\n'
p2228
V\u000a_Bool errno_unsupported(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int in_EDI;\u000a  \u000a  if ((in_EDI != 0x16) && (in_EDI != 0x26)) {\u000a    _Var1 = is_ENOTSUP();\u000a    return _Var1;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2229
S'CMP EDI,0x16\nJZ 0x0040645a\nCMP EDI,0x26\nJNZ 0x0040645d\nMOV AL,0x1\nRET\nJMP 0x00406280\n'
p2230
S'83 ff 16\n74 05\n83 ff 26\n75 03\nb0 01\nc3\ne9 1e fe ff ff\n'
p2231
S'.text:0000000000406450\n.text:0000000000406453\n.text:0000000000406455\n.text:0000000000406458\n.text:000000000040645a\n.text:000000000040645c\n.text:000000000040645d\n'
p2232
tp2233
sS'lseek'
p2234
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p2235
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0061d158)();\u000a  return _Var1;\u000a}\u000a\u000a
p2236
S'JMP qword ptr [0x0061d158]\n'
p2237
S'ff 25 42 ae 21 00\n'
p2238
S'.plt:0000000000402310\n'
p2239
tp2240
sS'default_block_size'
p2241
(S'\n__stdcall default_block_size()\n'
p2242
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p2243
S'PUSH RAX\nMOV EDI,0x416ec8\nCALL 0x004020a0\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p2244
S'50\nbf c8 6e 41 00\ne8 d5 6f ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p2245
S'.text:000000000040b0c0\n.text:000000000040b0c1\n.text:000000000040b0c6\n.text:000000000040b0cb\n.text:000000000040b0ce\n.text:000000000040b0d3\n.text:000000000040b0d8\n.text:000000000040b0dc\n.text:000000000040b0dd\n'
p2246
tp2247
sS'readlink'
p2248
(S'\n__stdcall readlink(char * __path, char * __buf, size_t __len)\n'
p2249
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t readlink(char *__path,char *__buf,size_t __len)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_readlink_0061d0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p2250
S'JMP qword ptr [0x0061d0c0]\n'
p2251
S'ff 25 da ae 21 00\n'
p2252
S'.plt:00000000004021e0\n'
p2253
tp2254
sS'hash_get_n_entries'
p2255
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p2256
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p2257
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p2258
S'48 8b 47 20\nc3\n'
p2259
S'.text:0000000000409880\n.text:0000000000409884\n'
p2260
tp2261
sS'__printf_chk'
p2262
(S'\n__stdcall __printf_chk()\n'
p2263
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0061d2a8)();\u000a  return;\u000a}\u000a\u000a
p2264
S'JMP qword ptr [0x0061d2a8]\n'
p2265
S'ff 25 f2 ac 21 00\n'
p2266
S'.plt:00000000004025b0\n'
p2267
tp2268
sS'hash_lookup'
p2269
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p2270
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p2271
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x00409a80\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00409a71\nTEST RBX,RBX\nJZ 0x00409a71\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x00409a6e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00409a6e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00409a50\nJMP 0x00409a71\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2272
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2273
S'.text:0000000000409a20\n.text:0000000000409a22\n.text:0000000000409a24\n.text:0000000000409a26\n.text:0000000000409a27\n.text:0000000000409a28\n.text:0000000000409a2b\n.text:0000000000409a2e\n.text:0000000000409a33\n.text:0000000000409a36\n.text:0000000000409a39\n.text:0000000000409a3d\n.text:0000000000409a3f\n.text:0000000000409a42\n.text:0000000000409a44\n.text:0000000000409a47\n.text:0000000000409a50\n.text:0000000000409a53\n.text:0000000000409a56\n.text:0000000000409a58\n.text:0000000000409a5b\n.text:0000000000409a5f\n.text:0000000000409a61\n.text:0000000000409a63\n.text:0000000000409a67\n.text:0000000000409a6a\n.text:0000000000409a6c\n.text:0000000000409a6e\n.text:0000000000409a71\n.text:0000000000409a74\n.text:0000000000409a78\n.text:0000000000409a79\n.text:0000000000409a7b\n.text:0000000000409a7d\n.text:0000000000409a7f\n'
p2274
tp2275
sS'ioctl'
p2276
(S'\n__stdcall ioctl(int __fd, ulong __request)\n'
p2277
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ioctl(int __fd,ulong __request,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ioctl_0061d188)();\u000a  return iVar1;\u000a}\u000a\u000a
p2278
S'JMP qword ptr [0x0061d188]\n'
p2279
S'ff 25 12 ae 21 00\n'
p2280
S'.plt:0000000000402370\n'
p2281
tp2282
sS'base_len'
p2283
(S'\n__stdcall base_len(char * name)\n'
p2284
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p2285
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402290\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00409164\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00409150\nPOP RBX\nRET\n'
p2286
S'53\n48 89 fb\ne8 47 91 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p2287
S'.text:0000000000409140\n.text:0000000000409141\n.text:0000000000409144\n.text:0000000000409149\n.text:000000000040914c\n.text:0000000000409150\n.text:0000000000409153\n.text:0000000000409157\n.text:0000000000409159\n.text:000000000040915d\n.text:0000000000409162\n.text:0000000000409164\n.text:0000000000409165\n'
p2288
tp2289
sS'init_column_info'
p2290
(S'\n__stdcall init_column_info()\n'
p2291
V\u000avoid init_column_info(void)\u000a\u000a{\u000a  column_info *pcVar1;\u000a  size_t column_info_alloc;\u000a  size_t *psVar2;\u000a  ulong uVar3;\u000a  ulong uVar4;\u000a  ulong uVar5;\u000a  size_t **ppsVar6;\u000a  long lVar7;\u000a  size_t n;\u000a  long lVar8;\u000a  \u000a  n = cwd_n_used;\u000a  if (max_idx < cwd_n_used) {\u000a    n = max_idx;\u000a  }\u000a  if (column_info_alloc < n) {\u000a    if (n < max_idx >> 1) {\u000a      column_info = (column_info *)xnrealloc(column_info,n,0x30);\u000a      uVar4 = n * 2;\u000a    }\u000a    else {\u000a      column_info = (column_info *)xnrealloc(column_info,max_idx,0x18);\u000a      uVar4 = max_idx;\u000a    }\u000a    uVar5 = uVar4 + 1 + column_info_alloc;\u000a    if ((uVar5 < uVar4) ||\u000a       (uVar3 = uVar5 * (uVar4 - column_info_alloc), uVar3 / (uVar4 - column_info_alloc) != uVar5))\u000a    {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    psVar2 = (size_t *)xnmalloc(uVar3 >> 1,8);\u000a    if (column_info_alloc < uVar4) {\u000a      ppsVar6 = &column_info[column_info_alloc].col_arr;\u000a      do {\u000a        *ppsVar6 = psVar2;\u000a        psVar2 = psVar2 + column_info_alloc + 1;\u000a        column_info_alloc = column_info_alloc + 1;\u000a        ppsVar6 = ppsVar6 + 3;\u000a      } while (uVar4 != column_info_alloc);\u000a    }\u000a  }\u000a  pcVar1 = column_info;\u000a  if (n != 0) {\u000a    lVar7 = 1;\u000a    uVar4 = 0;\u000a    do {\u000a      pcVar1[uVar4].valid_len = true;\u000a      uVar5 = uVar4 + 1;\u000a      pcVar1[uVar4].line_len = uVar5 * 3;\u000a      psVar2 = pcVar1[uVar4].col_arr;\u000a      lVar8 = 0;\u000a      do {\u000a        psVar2[lVar8] = 3;\u000a        lVar8 = lVar8 + 1;\u000a      } while (lVar7 != lVar8);\u000a      lVar7 = lVar7 + 1;\u000a      uVar4 = uVar5;\u000a    } while (uVar5 < n);\u000a  }\u000a  return;\u000a}\u000a\u000a
p2292
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RSI,qword ptr [0x0061d880]\nMOV RBX,qword ptr [0x0061d808]\nCMP RSI,RBX\nCMOVC RBX,RSI\nCMP qword ptr [0x0061e170],RBX\nJNC 0x0040884b\nMOV RAX,RSI\nSHR RAX,1\nMOV RDI,qword ptr [0x0061e168]\nCMP RBX,RAX\nJNC 0x004087b2\nMOV EDX,0x30\nMOV RSI,RBX\nCALL 0x0040f930\nMOV qword ptr [0x0061e168],RAX\nLEA R14,[RBX + RBX*0x1]\nJMP 0x004087ca\nMOV EDX,0x18\nCALL 0x0040f930\nMOV qword ptr [0x0061e168],RAX\nMOV R14,qword ptr [0x0061d880]\nMOV RAX,qword ptr [0x0061e170]\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nCMP RSI,R14\nJC 0x004088a0\nMOV RDI,R14\nSUB RDI,RAX\nMOV RCX,RSI\nIMUL RCX,RDI\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RDI\nCMP RAX,RSI\nJNZ 0x004088a0\nSHR RCX,1\nMOV ESI,0x8\nMOV RDI,RCX\nCALL 0x0040f8f0\nMOV RCX,qword ptr [0x0061e170]\nCMP RCX,R14\nJNC 0x00408844\nMOV RDX,qword ptr [0x0061e168]\nLEA RSI,[RCX + RCX*0x2]\nLEA RDX,[RDX + RSI*0x8 + 0x10]\nNOP dword ptr [RAX]\nMOV qword ptr [RDX],RAX\nLEA RAX,[RAX + RCX*0x8 + 0x8]\nINC RCX\nADD RDX,0x18\nCMP R14,RCX\nJNZ 0x00408830\nMOV qword ptr [0x0061e170],R14\nTEST RBX,RBX\nJZ 0x00408898\nMOV RAX,qword ptr [0x0061e168]\nXOR ECX,ECX\nMOV EDX,0x1\nNOP\nLEA RSI,[RCX + RCX*0x2]\nMOV byte ptr [RAX + RSI*0x8],0x1\nINC RCX\nLEA RDI,[RCX + RCX*0x2]\nMOV qword ptr [RAX + RSI*0x8 + 0x8],RDI\nMOV RSI,qword ptr [RAX + RSI*0x8 + 0x10]\nXOR EDI,EDI\nNOP dword ptr [RAX + RAX*0x1]\nMOV qword ptr [RSI + RDI*0x8],0x3\nINC RDI\nCMP RDX,RDI\nJNZ 0x00408880\nINC RDX\nCMP RCX,RBX\nJC 0x00408860\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nCALL 0x0040faa0\n'
p2293
S'41 56\n53\n50\n48 8b 35 15 51 21 00\n48 8b 1d 96 50 21 00\n48 39 de\n48 0f 42 de\n48 39 1d f0 59 21 00\n0f 83 c5 00 00 00\n48 89 f0\n48 d1 e8\n48 8b 3d d5 59 21 00\n48 39 c3\n73 1a\nba 30 00 00 00\n48 89 de\ne8 8b 71 00 00\n48 89 05 bc 59 21 00\n4c 8d 34 1b\neb 18\nba 18 00 00 00\ne8 74 71 00 00\n48 89 05 a5 59 21 00\n4c 8b 35 b6 50 21 00\n48 8b 05 9f 59 21 00\n49 8d 74 06 01\n4c 39 f6\n0f 82 c1 00 00 00\n4c 89 f7\n48 29 c7\n48 89 f1\n48 0f af cf\n31 d2\n48 89 c8\n48 f7 f7\n48 39 f0\n0f 85 a3 00 00 00\n48 d1 e9\nbe 08 00 00 00\n48 89 cf\ne8 e3 70 00 00\n48 8b 0d 5c 59 21 00\n4c 39 f1\n73 2b\n48 8b 15 48 59 21 00\n48 8d 34 49\n48 8d 54 f2 10\n0f 1f 80 00 00 00 00\n48 89 02\n48 8d 44 c8 08\n48 ff c1\n48 83 c2 18\n49 39 ce\n75 ec\n4c 89 35 25 59 21 00\n48 85 db\n74 48\n48 8b 05 11 59 21 00\n31 c9\nba 01 00 00 00\n66 90\n48 8d 34 49\nc6 04 f0 01\n48 ff c1\n48 8d 3c 49\n48 89 7c f0 08\n48 8b 74 f0 10\n31 ff\n0f 1f 44 00 00\n48 c7 04 fe 03 00 00 00\n48 ff c7\n48 39 fa\n75 f0\n48 ff c2\n48 39 d9\n72 c8\n48 83 c4 08\n5b\n41 5e\nc3\ne8 fb 71 00 00\n'
p2294
S'.text:0000000000408760\n.text:0000000000408762\n.text:0000000000408763\n.text:0000000000408764\n.text:000000000040876b\n.text:0000000000408772\n.text:0000000000408775\n.text:0000000000408779\n.text:0000000000408780\n.text:0000000000408786\n.text:0000000000408789\n.text:000000000040878c\n.text:0000000000408793\n.text:0000000000408796\n.text:0000000000408798\n.text:000000000040879d\n.text:00000000004087a0\n.text:00000000004087a5\n.text:00000000004087ac\n.text:00000000004087b0\n.text:00000000004087b2\n.text:00000000004087b7\n.text:00000000004087bc\n.text:00000000004087c3\n.text:00000000004087ca\n.text:00000000004087d1\n.text:00000000004087d6\n.text:00000000004087d9\n.text:00000000004087df\n.text:00000000004087e2\n.text:00000000004087e5\n.text:00000000004087e8\n.text:00000000004087ec\n.text:00000000004087ee\n.text:00000000004087f1\n.text:00000000004087f4\n.text:00000000004087f7\n.text:00000000004087fd\n.text:0000000000408800\n.text:0000000000408805\n.text:0000000000408808\n.text:000000000040880d\n.text:0000000000408814\n.text:0000000000408817\n.text:0000000000408819\n.text:0000000000408820\n.text:0000000000408824\n.text:0000000000408829\n.text:0000000000408830\n.text:0000000000408833\n.text:0000000000408838\n.text:000000000040883b\n.text:000000000040883f\n.text:0000000000408842\n.text:0000000000408844\n.text:000000000040884b\n.text:000000000040884e\n.text:0000000000408850\n.text:0000000000408857\n.text:0000000000408859\n.text:000000000040885e\n.text:0000000000408860\n.text:0000000000408864\n.text:0000000000408868\n.text:000000000040886b\n.text:000000000040886f\n.text:0000000000408874\n.text:0000000000408879\n.text:000000000040887b\n.text:0000000000408880\n.text:0000000000408888\n.text:000000000040888b\n.text:000000000040888e\n.text:0000000000408890\n.text:0000000000408893\n.text:0000000000408896\n.text:0000000000408898\n.text:000000000040889c\n.text:000000000040889d\n.text:000000000040889f\n.text:00000000004088a0\n'
p2295
tp2296
sS'dev_ino_hash'
p2297
(S'\n__stdcall dev_ino_hash(void * x, size_t table_size)\n'
p2298
V\u000asize_t dev_ino_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p2299
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p2300
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p2301
S'.text:0000000000403f60\n.text:0000000000403f63\n.text:0000000000403f65\n.text:0000000000403f68\n.text:0000000000403f6b\n'
p2302
tp2303
sS'xstrcoll_df_ctime'
p2304
(S'\n__stdcall xstrcoll_df_ctime(V a, V b)\n'
p2305
V\u000aint xstrcoll_df_ctime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_ctime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2306
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406dea\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406e0d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406e0d\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004072c0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2307
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 f0 f6 ff ff\n89 c3\n4c 89 f7\ne8 e6 f6 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 b3 04 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2308
S'.text:0000000000406dc0\n.text:0000000000406dc2\n.text:0000000000406dc4\n.text:0000000000406dc5\n.text:0000000000406dc8\n.text:0000000000406dcb\n.text:0000000000406dd0\n.text:0000000000406dd2\n.text:0000000000406dd5\n.text:0000000000406dda\n.text:0000000000406ddc\n.text:0000000000406dde\n.text:0000000000406de0\n.text:0000000000406de3\n.text:0000000000406de8\n.text:0000000000406dea\n.text:0000000000406dec\n.text:0000000000406dee\n.text:0000000000406df3\n.text:0000000000406df6\n.text:0000000000406df8\n.text:0000000000406dfd\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e04\n.text:0000000000406e06\n.text:0000000000406e08\n.text:0000000000406e0d\n.text:0000000000406e0f\n.text:0000000000406e10\n.text:0000000000406e12\n.text:0000000000406e14\n'
p2309
tp2310
sS'length_of_file_name_and_frills'
p2311
(S'\n__stdcall length_of_file_name_and_frills(fileinfo * f)\n'
p2312
V\u000asize_t length_of_file_name_and_frills(fileinfo *f)\u000a\u000a{\u000a  char cVar1;\u000a  char *__s;\u000a  size_t sVar2;\u000a  long lVar3;\u000a  size_t name_width;\u000a  char buf [652];\u000a  size_t local_2b0;\u000a  char local_2a8 [664];\u000a  \u000a  if (print_inode == 1) {\u000a    if (format == with_commas) {\u000a      __s = umaxtostr((f->stat).st_ino,local_2a8);\u000a      sVar2 = strlen(__s);\u000a    }\u000a    else {\u000a      sVar2 = SEXT48(inode_number_width);\u000a    }\u000a    lVar3 = sVar2 + 1;\u000a    if (print_block_size != 1) goto LAB_004084ea;\u000a  }\u000a  else {\u000a    lVar3 = 0;\u000a    if (print_block_size != 1) goto LAB_004084ea;\u000a  }\u000a  if (format == with_commas) {\u000a    if (f->stat_ok == false) {\u000a      __s = "?";\u000a    }\u000a    else {\u000a      __s = human_readable((f->stat).st_blocks,local_2a8,(ulong)(uint)human_output_opts,0x200);\u000a    }\u000a    sVar2 = strlen(__s);\u000a  }\u000a  else {\u000a    sVar2 = SEXT48(block_size_width);\u000a  }\u000a  lVar3 = lVar3 + 1 + sVar2;\u000aLAB_004084ea:\u000a  if (print_scontext == 1) {\u000a    if (format == with_commas) {\u000a      sVar2 = strlen(f->scontext);\u000a    }\u000a    else {\u000a      sVar2 = SEXT48(scontext_width);\u000a    }\u000a    lVar3 = lVar3 + 1 + sVar2;\u000a  }\u000a  quote_name((FILE *)0x0,f->name,filename_quoting_options,&local_2b0);\u000a  local_2b0 = lVar3 + local_2b0;\u000a  if (indicator_style != none) {\u000a    cVar1 = get_type_indicator();\u000a    local_2b0 = (local_2b0 + 1) - (ulong)(cVar1 == 0);\u000a  }\u000a  return local_2b0;\u000a}\u000a\u000a
p2313
S'PUSH R14\nPUSH RBX\nSUB RSP,0x2a8\nMOV R14,RDI\nCMP byte ptr [0x0061d83a],0x1\nJNZ 0x0040847a\nCMP dword ptr [0x0061d634],0x4\nJNZ 0x00408487\nMOV RDI,qword ptr [R14 + 0x18]\nLEA RSI,[RSP + 0x10]\nCALL 0x0040b4a0\nMOV RDI,RAX\nCALL 0x00402290\nMOV RBX,RAX\nJMP 0x0040848e\nXOR EBX,EBX\nCMP byte ptr [0x0061d73d],0x1\nJZ 0x0040849a\nJMP 0x004084ea\nMOVSXD RBX,dword ptr [0x0061e054]\nINC RBX\nCMP byte ptr [0x0061d73d],0x1\nJNZ 0x004084ea\nCMP dword ptr [0x0061d634],0x4\nJNZ 0x004084d2\nCMP byte ptr [0xb0 + R14],0x0\nJZ 0x004084db\nMOV RDI,qword ptr [R14 + 0x50]\nMOV EDX,dword ptr [0x0061d864]\nMOV R8,qword ptr [0x0061d870]\nLEA RSI,[RSP + 0x10]\nMOV ECX,0x200\nCALL 0x0040a810\nMOV RDI,RAX\nJMP 0x004084e0\nMOVSXD RAX,dword ptr [0x0061e058]\nJMP 0x004084e5\nMOV EDI,0x4168bd\nCALL 0x00402290\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00408516\nCMP dword ptr [0x0061d634],0x4\nJNZ 0x0040850a\nMOV RDI,qword ptr [0xa8 + R14]\nCALL 0x00402290\nJMP 0x00408511\nMOVSXD RAX,dword ptr [0x0061e06c]\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nMOV RSI,qword ptr [R14]\nMOV RDX,qword ptr [0x0061d828]\nLEA RCX,[RSP + 0x8]\nXOR EDI,EDI\nCALL 0x00405ce0\nADD RBX,qword ptr [RSP + 0x8]\nCMP dword ptr [0x0061d6c8],0x0\nJZ 0x00408558\nMOV ESI,dword ptr [R14 + 0x28]\nMOV EDX,dword ptr [0xa0 + R14]\nMOVZX EDI,byte ptr [0xb0 + R14]\nCALL 0x00408390\nCMP AL,0x1\nSBB RBX,-0x1\nMOV RAX,RBX\nADD RSP,0x2a8\nPOP RBX\nPOP R14\nRET\n'
p2314
S'41 56\n53\n48 81 ec a8 02 00 00\n49 89 fe\n80 3d e6 53 21 00 01\n75 24\n83 3d d7 51 21 00 04\n75 28\n49 8b 7e 18\n48 8d 74 24 10\ne8 33 30 00 00\n48 89 c7\ne8 1b 9e ff ff\n48 89 c3\neb 14\n31 db\n80 3d ba 52 21 00 01\n74 15\neb 63\n48 63 1d c6 5b 21 00\n48 ff c3\n80 3d a5 52 21 00 01\n75 50\n83 3d 93 51 21 00 04\n75 2f\n41 80 be b0 00 00 00 00\n74 2e\n49 8b 7e 50\n8b 15 ad 53 21 00\n4c 8b 05 b2 53 21 00\n48 8d 74 24 10\nb9 00 02 00 00\ne8 43 23 00 00\n48 89 c7\neb 0e\n48 63 05 7f 5b 21 00\neb 0a\nbf bd 68 41 00\ne8 ab 9d ff ff\n48 8d 5c 03 01\n80 3d 4b 52 21 00 01\n75 23\n83 3d 3a 51 21 00 04\n75 0e\n49 8b be a8 00 00 00\ne8 88 9d ff ff\neb 07\n48 63 05 5b 5b 21 00\n48 8d 5c 03 01\n49 8b 36\n48 8b 15 08 53 21 00\n48 8d 4c 24 08\n31 ff\ne8 b4 d7 ff ff\n48 03 5c 24 08\n83 3d 90 51 21 00 00\n74 1e\n41 8b 76 28\n41 8b 96 a0 00 00 00\n41 0f b6 be b0 00 00 00\ne8 3e fe ff ff\n3c 01\n48 83 db ff\n48 89 d8\n48 81 c4 a8 02 00 00\n5b\n41 5e\nc3\n'
p2315
S'.text:0000000000408440\n.text:0000000000408442\n.text:0000000000408443\n.text:000000000040844a\n.text:000000000040844d\n.text:0000000000408454\n.text:0000000000408456\n.text:000000000040845d\n.text:000000000040845f\n.text:0000000000408463\n.text:0000000000408468\n.text:000000000040846d\n.text:0000000000408470\n.text:0000000000408475\n.text:0000000000408478\n.text:000000000040847a\n.text:000000000040847c\n.text:0000000000408483\n.text:0000000000408485\n.text:0000000000408487\n.text:000000000040848e\n.text:0000000000408491\n.text:0000000000408498\n.text:000000000040849a\n.text:00000000004084a1\n.text:00000000004084a3\n.text:00000000004084ab\n.text:00000000004084ad\n.text:00000000004084b1\n.text:00000000004084b7\n.text:00000000004084be\n.text:00000000004084c3\n.text:00000000004084c8\n.text:00000000004084cd\n.text:00000000004084d0\n.text:00000000004084d2\n.text:00000000004084d9\n.text:00000000004084db\n.text:00000000004084e0\n.text:00000000004084e5\n.text:00000000004084ea\n.text:00000000004084f1\n.text:00000000004084f3\n.text:00000000004084fa\n.text:00000000004084fc\n.text:0000000000408503\n.text:0000000000408508\n.text:000000000040850a\n.text:0000000000408511\n.text:0000000000408516\n.text:0000000000408519\n.text:0000000000408520\n.text:0000000000408525\n.text:0000000000408527\n.text:000000000040852c\n.text:0000000000408531\n.text:0000000000408538\n.text:000000000040853a\n.text:000000000040853e\n.text:0000000000408545\n.text:000000000040854d\n.text:0000000000408552\n.text:0000000000408554\n.text:0000000000408558\n.text:000000000040855b\n.text:0000000000408562\n.text:0000000000408563\n.text:0000000000408565\n'
p2316
tp2317
sS'initialize_exit_failure'
p2318
(S'\n__stdcall initialize_exit_failure()\n'
p2319
V\u000avoid initialize_exit_failure(void)\u000a\u000a{\u000a  exit_failure = 2;\u000a  return;\u000a}\u000a\u000a
p2320
S'MOV dword ptr [0x0061d540],0x2\nRET\n'
p2321
S'c7 05 56 a6 21 00 02 00 00 00\nc3\n'
p2322
S'.text:0000000000402ee0\n.text:0000000000402eea\n'
p2323
tp2324
sS'version_etc_va'
p2325
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p2326
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p2327
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x0040f7b0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040f7bc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x0040f7d1\nINC R9\nCMP R9,0xa\nJC 0x0040f790\nMOV R8,RSP\nCALL 0x0040f3f0\nADD RSP,0x58\nRET\n'
p2328
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p2329
S'.text:000000000040f780\n.text:000000000040f784\n.text:000000000040f787\n.text:000000000040f790\n.text:000000000040f793\n.text:000000000040f797\n.text:000000000040f799\n.text:000000000040f79c\n.text:000000000040f7a0\n.text:000000000040f7a4\n.text:000000000040f7a7\n.text:000000000040f7b0\n.text:000000000040f7b4\n.text:000000000040f7b8\n.text:000000000040f7bc\n.text:000000000040f7bf\n.text:000000000040f7c3\n.text:000000000040f7c6\n.text:000000000040f7c8\n.text:000000000040f7cb\n.text:000000000040f7cf\n.text:000000000040f7d1\n.text:000000000040f7d4\n.text:000000000040f7d9\n.text:000000000040f7dd\n'
p2330
tp2331
sS'hash_print_statistics'
p2332
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p2333
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x416e00,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_00416db0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00416db0,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00416dc8,DAT_00416dc0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00416db0,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00416dc8,DAT_00416dc0));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_00416de0) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p2334
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00409880\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00409860\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00409870\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00409890\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x416e00\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x004026b0\nMOV ESI,0x1\nMOV EDX,0x416e18\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x004026b0\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x00416db0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x00416dc0]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00416de0]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x416e30\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x004026b0\nMOV ESI,0x1\nMOV EDX,0x416e51\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004026b0\n'
p2335
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 00 6e 41 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 2f 8d ff ff\nbe 01 00 00 00\nba 18 6e 41 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 18 8d ff ff\n66 49 0f 6e cf\n66 0f 6f 15 0b d4 00 00\n66 0f 62 ca\n66 0f 28 1d 0f d4 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 1a d4 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba 30 6e 41 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 b9 8c ff ff\nbe 01 00 00 00\nba 51 6e 41 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 94 8c ff ff\n'
p2336
S'.text:0000000000409930\n.text:0000000000409931\n.text:0000000000409933\n.text:0000000000409935\n.text:0000000000409937\n.text:0000000000409939\n.text:000000000040993a\n.text:000000000040993b\n.text:000000000040993e\n.text:0000000000409941\n.text:0000000000409946\n.text:0000000000409949\n.text:000000000040994c\n.text:0000000000409951\n.text:0000000000409954\n.text:0000000000409957\n.text:000000000040995c\n.text:000000000040995f\n.text:0000000000409962\n.text:0000000000409967\n.text:000000000040996a\n.text:000000000040996f\n.text:0000000000409974\n.text:0000000000409976\n.text:0000000000409979\n.text:000000000040997c\n.text:0000000000409981\n.text:0000000000409986\n.text:000000000040998b\n.text:000000000040998d\n.text:0000000000409990\n.text:0000000000409993\n.text:0000000000409998\n.text:000000000040999d\n.text:00000000004099a5\n.text:00000000004099a9\n.text:00000000004099b1\n.text:00000000004099b5\n.text:00000000004099ba\n.text:00000000004099be\n.text:00000000004099c6\n.text:00000000004099cb\n.text:00000000004099cf\n.text:00000000004099d3\n.text:00000000004099d8\n.text:00000000004099dc\n.text:00000000004099e0\n.text:00000000004099e5\n.text:00000000004099ea\n.text:00000000004099ec\n.text:00000000004099ef\n.text:00000000004099f2\n.text:00000000004099f7\n.text:00000000004099fc\n.text:0000000000409a01\n.text:0000000000409a03\n.text:0000000000409a06\n.text:0000000000409a09\n.text:0000000000409a0d\n.text:0000000000409a0e\n.text:0000000000409a10\n.text:0000000000409a12\n.text:0000000000409a14\n.text:0000000000409a16\n.text:0000000000409a17\n'
p2337
tp2338
sS'umaxtostr'
p2339
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p2340
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p2341
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x0040b4c0\nMOV RAX,RSI\nRET\n'
p2342
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p2343
S'.text:000000000040b4a0\n.text:000000000040b4a3\n.text:000000000040b4a7\n.text:000000000040b4ab\n.text:000000000040b4b5\n.text:000000000040b4c0\n.text:000000000040b4c3\n.text:000000000040b4c6\n.text:000000000040b4c8\n.text:000000000040b4cb\n.text:000000000040b4d0\n.text:000000000040b4d3\n.text:000000000040b4d5\n.text:000000000040b4d7\n.text:000000000040b4db\n.text:000000000040b4df\n.text:000000000040b4e2\n.text:000000000040b4e6\n.text:000000000040b4ea\n.text:000000000040b4ed\n.text:000000000040b4ef\n.text:000000000040b4f2\n'
p2344
tp2345
sS'next_prime'
p2346
(S'\n__stdcall next_prime(size_t candidate)\n'
p2347
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2348
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040a75a\nJMP 0x0040a769\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x0040a769\nMOV RDI,RBX\nCALL 0x0040a780\nTEST AL,AL\nJZ 0x0040a750\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2349
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2350
S'.text:000000000040a720\n.text:000000000040a722\n.text:000000000040a723\n.text:000000000040a724\n.text:000000000040a728\n.text:000000000040a72d\n.text:000000000040a731\n.text:000000000040a735\n.text:000000000040a73c\n.text:000000000040a740\n.text:000000000040a742\n.text:000000000040a750\n.text:000000000040a754\n.text:000000000040a758\n.text:000000000040a75a\n.text:000000000040a75d\n.text:000000000040a762\n.text:000000000040a764\n.text:000000000040a766\n.text:000000000040a769\n.text:000000000040a76c\n.text:000000000040a770\n.text:000000000040a771\n.text:000000000040a773\n'
p2351
tp2352
sS'lsetfilecon'
p2353
(S'\n__stdcall lsetfilecon(char * file, security_context_t con)\n'
p2354
V\u000aint lsetfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2355
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2356
S'50\ne8 ba 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2357
S'.text:000000000040d950\n.text:000000000040d951\n.text:000000000040d956\n.text:000000000040d95c\n.text:000000000040d961\n.text:000000000040d962\n'
p2358
tp2359
sS'getpwnam'
p2360
(S'\n__stdcall getpwnam(char * __name)\n'
p2361
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_0061d1e0)();\u000a  return ppVar1;\u000a}\u000a\u000a
p2362
S'JMP qword ptr [0x0061d1e0]\n'
p2363
S'ff 25 ba ad 21 00\n'
p2364
S'.plt:0000000000402420\n'
p2365
tp2366
sS'hash_insert'
p2367
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p2368
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p2369
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x0040a290\nCMP EAX,-0x1\nJZ 0x0040a581\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x0040a583\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p2370
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p2371
S'.text:000000000040a560\n.text:000000000040a561\n.text:000000000040a565\n.text:000000000040a568\n.text:000000000040a56d\n.text:000000000040a572\n.text:000000000040a575\n.text:000000000040a577\n.text:000000000040a579\n.text:000000000040a57f\n.text:000000000040a581\n.text:000000000040a583\n.text:000000000040a586\n.text:000000000040a58a\n.text:000000000040a58b\n'
p2372
tp2373
sS'gettext_quote'
p2374
(S'\n__stdcall gettext_quote(char * msgid)\n'
p2375
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00417786;\u000a        pcVar2 = &DAT_0041778a;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p2376
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00402270\nCMP RAX,RBX\nJNZ 0x0040d4f8\nCALL 0x00410d00\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x0040d500\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040d4a8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x417776\nMOV EAX,0x41777a\nJMP 0x0040d4f4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x0040d500\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040d4e6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x417786\nMOV EAX,0x41778a\nJMP 0x0040d4f4\nCMP R14D,0x9\nMOV ECX,0x41776c\nMOV EAX,0x418173\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2377
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 17 4e ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 99 38 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 76 77 41 00\nb8 7a 77 41 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 86 77 41 00\nb8 8a 77 41 00\neb 0e\n41 83 fe 09\nb9 6c 77 41 00\nb8 73 81 41 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p2378
S'.text:000000000040d440\n.text:000000000040d441\n.text:000000000040d443\n.text:000000000040d444\n.text:000000000040d447\n.text:000000000040d44a\n.text:000000000040d44c\n.text:000000000040d451\n.text:000000000040d454\n.text:000000000040d459\n.text:000000000040d45c\n.text:000000000040d462\n.text:000000000040d467\n.text:000000000040d46a\n.text:000000000040d46f\n.text:000000000040d474\n.text:000000000040d479\n.text:000000000040d47f\n.text:000000000040d485\n.text:000000000040d488\n.text:000000000040d48a\n.text:000000000040d48c\n.text:000000000040d491\n.text:000000000040d495\n.text:000000000040d497\n.text:000000000040d499\n.text:000000000040d49c\n.text:000000000040d4a1\n.text:000000000040d4a6\n.text:000000000040d4a8\n.text:000000000040d4ad\n.text:000000000040d4b2\n.text:000000000040d4b7\n.text:000000000040d4bd\n.text:000000000040d4c3\n.text:000000000040d4c6\n.text:000000000040d4c8\n.text:000000000040d4ca\n.text:000000000040d4cf\n.text:000000000040d4d3\n.text:000000000040d4d5\n.text:000000000040d4d7\n.text:000000000040d4da\n.text:000000000040d4df\n.text:000000000040d4e4\n.text:000000000040d4e6\n.text:000000000040d4ea\n.text:000000000040d4ef\n.text:000000000040d4f4\n.text:000000000040d4f8\n.text:000000000040d4f9\n.text:000000000040d4fb\n.text:000000000040d4fc\n'
p2379
tp2380
sS'cmp_mtime'
p2381
(S'\n__stdcall cmp_mtime(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p2382
V\u000aint cmp_mtime(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  get_stat_mtime(&b->stat);\u000a  get_stat_mtime(&a->stat);\u000a  iVar1 = timespec_cmp();\u000a  if (iVar1 != 0) {\u000a    return iVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x004072bb. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar1 = (*cmp)(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p2383
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nLEA RDI,[R14 + 0x10]\nCALL 0x0040daa0\nMOV RBX,RAX\nMOV R12,RDX\nLEA RDI,[R15 + 0x10]\nCALL 0x0040daa0\nMOV RCX,RDX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x0040f390\nTEST EAX,EAX\nJZ 0x004072a9\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RDI,qword ptr [R15]\nMOV RSI,qword ptr [R14]\nMOV RAX,R13\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP RAX\n'
p2384
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8d 7e 10\ne8 25 68 00 00\n48 89 c3\n49 89 d4\n49 8d 7f 10\ne8 16 68 00 00\n48 89 d1\n48 89 df\n4c 89 e6\n48 89 c2\ne8 f5 80 00 00\n85 c0\n74 0a\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n49 8b 3f\n49 8b 36\n4c 89 e8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nff e0\n'
p2385
S'.text:0000000000407260\n.text:0000000000407262\n.text:0000000000407264\n.text:0000000000407266\n.text:0000000000407268\n.text:0000000000407269\n.text:000000000040726c\n.text:000000000040726f\n.text:0000000000407272\n.text:0000000000407276\n.text:000000000040727b\n.text:000000000040727e\n.text:0000000000407281\n.text:0000000000407285\n.text:000000000040728a\n.text:000000000040728d\n.text:0000000000407290\n.text:0000000000407293\n.text:0000000000407296\n.text:000000000040729b\n.text:000000000040729d\n.text:000000000040729f\n.text:00000000004072a0\n.text:00000000004072a2\n.text:00000000004072a4\n.text:00000000004072a6\n.text:00000000004072a8\n.text:00000000004072a9\n.text:00000000004072ac\n.text:00000000004072af\n.text:00000000004072b2\n.text:00000000004072b3\n.text:00000000004072b5\n.text:00000000004072b7\n.text:00000000004072b9\n.text:00000000004072bb\n'
p2386
tp2387
sS'fsetfilecon'
p2388
(S'\n__stdcall fsetfilecon(security_context_t con)\n'
p2389
V\u000aint fsetfilecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2390
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2391
S'50\ne8 9a 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2392
S'.text:000000000040d970\n.text:000000000040d971\n.text:000000000040d976\n.text:000000000040d97c\n.text:000000000040d981\n.text:000000000040d982\n'
p2393
tp2394
sS'fclose'
p2395
(S'\n__stdcall fclose(FILE * __stream)\n'
p2396
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0061d0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2397
S'JMP qword ptr [0x0061d0e0]\n'
p2398
S'ff 25 ba ae 21 00\n'
p2399
S'.plt:0000000000402220\n'
p2400
tp2401
sS'__ctype_get_mb_cur_max'
p2402
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p2403
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0061d110)();\u000a  return sVar1;\u000a}\u000a\u000a
p2404
S'JMP qword ptr [0x0061d110]\n'
p2405
S'ff 25 8a ae 21 00\n'
p2406
S'.plt:0000000000402280\n'
p2407
tp2408
sS'lstat'
p2409
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p2410
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0061d120)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p2411
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004022a0\n'
p2412
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 00 09 ff ff\n'
p2413
S'.text:0000000000411990\n.text:0000000000411993\n.text:0000000000411996\n.text:000000000041199b\n'
p2414
tp2415
sS'prep_non_filename_text'
p2416
(S'\n__stdcall prep_non_filename_text()\n'
p2417
V\u000avoid prep_non_filename_text(void)\u000a\u000a{\u000a  if (color_indicator[2].string != (char *)0x0) {\u000a    put_indicator(color_indicator + 2);\u000a    return;\u000a  }\u000a  put_indicator(color_indicator);\u000a  put_indicator(color_indicator + 3);\u000a  put_indicator(color_indicator + 1);\u000a  return;\u000a}\u000a\u000a
p2418
S'CMP qword ptr [0x0061d3a8],0x0\nJZ 0x004056d1\nMOV EDI,0x61d3a0\nJMP 0x00405680\nPUSH RAX\nMOV EDI,0x61d380\nCALL 0x00405680\nMOV EDI,0x61d3b0\nCALL 0x00405680\nMOV EDI,0x61d390\nPOP RAX\nJMP 0x00405680\n'
p2419
S'48 83 3d e0 7c 21 00 00\n74 07\nbf a0 d3 61 00\neb af\n50\nbf 80 d3 61 00\ne8 a4 ff ff ff\nbf b0 d3 61 00\ne8 9a ff ff ff\nbf 90 d3 61 00\n58\neb 92\n'
p2420
S'.text:00000000004056c0\n.text:00000000004056c8\n.text:00000000004056ca\n.text:00000000004056cf\n.text:00000000004056d1\n.text:00000000004056d2\n.text:00000000004056d7\n.text:00000000004056dc\n.text:00000000004056e1\n.text:00000000004056e6\n.text:00000000004056eb\n.text:00000000004056ec\n'
p2421
tp2422
sS'raw_hasher'
p2423
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p2424
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p2425
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00410ab0\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p2426
S'53\n48 89 f3\nbe 03 00 00 00\ne8 32 6d 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p2427
S'.text:0000000000409d70\n.text:0000000000409d71\n.text:0000000000409d74\n.text:0000000000409d79\n.text:0000000000409d7e\n.text:0000000000409d80\n.text:0000000000409d83\n.text:0000000000409d86\n.text:0000000000409d87\n'
p2428
tp2429
sS'unsigned_file_size'
p2430
(S'\n__stdcall unsigned_file_size(off_t size)\n'
p2431
V\u000auintmax_t unsigned_file_size(off_t size)\u000a\u000a{\u000a  return size;\u000a}\u000a\u000a
p2432
S'MOV RAX,RDI\nRET\n'
p2433
S'48 89 f8\nc3\n'
p2434
S'.text:0000000000406430\n.text:0000000000406433\n'
p2435
tp2436
sS'quotearg_alloc'
p2437
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p2438
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p2439
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x0040cdb0\n'
p2440
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p2441
S'.text:000000000040cda0\n.text:000000000040cda3\n.text:000000000040cda5\n.text:000000000040cda8\n'
p2442
tp2443
sS'strcmp_mtime'
p2444
(S'\n__stdcall strcmp_mtime(V a, V b)\n'
p2445
V\u000aint strcmp_mtime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_mtime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p2446
S'MOV EDX,0x4023f0\nJMP 0x00407260\n'
p2447
S'ba f0 23 40 00\ne9 96 05 00 00\n'
p2448
S'.text:0000000000406cc0\n.text:0000000000406cc5\n'
p2449
tp2450
sS'sigismember'
p2451
(S'\n__stdcall sigismember(sigset_t * __set, int __signo)\n'
p2452
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigismember(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigismember_0061d310)();\u000a  return iVar1;\u000a}\u000a\u000a
p2453
S'JMP qword ptr [0x0061d310]\n'
p2454
S'ff 25 8a ac 21 00\n'
p2455
S'.plt:0000000000402680\n'
p2456
tp2457
sS'check_tuning'
p2458
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p2459
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_00416de8 || (DAT_00416dec <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_00416df0)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_00416de8, fVar1 <= fVar4)) ||\u000a       ((DAT_00416df4 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p2460
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x416e6c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00409e13\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x00416de8]\nJBE 0x00409e09\nMOVSS XMM1,dword ptr [0x00416dec]\nUCOMISS XMM1,XMM0\nJBE 0x00409e09\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x00416df0]\nJBE 0x00409e09\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00409e09\nADDSS XMM1,dword ptr [0x00416de8]\nUCOMISS XMM0,XMM1\nJBE 0x00409e09\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x00416df4]\nUCOMISS XMM2,XMM0\nJC 0x00409e09\nUCOMISS XMM0,XMM1\nJA 0x00409e13\nMOV qword ptr [RDI + 0x28],0x416e6c\nXOR EAX,EAX\nRET\n'
p2461
S'48 8b 4f 28\nba 6c 6e 41 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 2c d0 00 00\n76 4b\nf3 0f 10 0d 26 d0 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 19 d0 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d fb cf 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 f5 cf 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 6c 6e 41 00\n31 c0\nc3\n'
p2462
S'.text:0000000000409da0\n.text:0000000000409da4\n.text:0000000000409da9\n.text:0000000000409dab\n.text:0000000000409dae\n.text:0000000000409db0\n.text:0000000000409db5\n.text:0000000000409dbc\n.text:0000000000409dbe\n.text:0000000000409dc6\n.text:0000000000409dc9\n.text:0000000000409dcb\n.text:0000000000409dd0\n.text:0000000000409dd7\n.text:0000000000409dd9\n.text:0000000000409ddd\n.text:0000000000409de0\n.text:0000000000409de3\n.text:0000000000409de5\n.text:0000000000409ded\n.text:0000000000409df0\n.text:0000000000409df2\n.text:0000000000409df7\n.text:0000000000409dff\n.text:0000000000409e02\n.text:0000000000409e04\n.text:0000000000409e07\n.text:0000000000409e09\n.text:0000000000409e11\n.text:0000000000409e13\n'
p2463
tp2464
sS'fflush_unlocked'
p2465
(S'\n__stdcall fflush_unlocked(FILE * __stream)\n'
p2466
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_unlocked_0061d330)();\u000a  return iVar1;\u000a}\u000a\u000a
p2467
S'JMP qword ptr [0x0061d330]\n'
p2468
S'ff 25 6a ac 21 00\n'
p2469
S'.plt:00000000004026c0\n'
p2470
tp2471
sS'argmatch_to_argument'
p2472
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p2473
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p2474
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00408f41\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004023a0\nTEST EAX,EAX\nJZ 0x00408f44\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00408f20\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p2475
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 72 94 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p2476
S'.text:0000000000408ef0\n.text:0000000000408ef2\n.text:0000000000408ef4\n.text:0000000000408ef6\n.text:0000000000408ef8\n.text:0000000000408ef9\n.text:0000000000408efc\n.text:0000000000408eff\n.text:0000000000408f02\n.text:0000000000408f05\n.text:0000000000408f08\n.text:0000000000408f0b\n.text:0000000000408f0d\n.text:0000000000408f11\n.text:0000000000408f20\n.text:0000000000408f23\n.text:0000000000408f26\n.text:0000000000408f29\n.text:0000000000408f2e\n.text:0000000000408f30\n.text:0000000000408f32\n.text:0000000000408f35\n.text:0000000000408f39\n.text:0000000000408f3c\n.text:0000000000408f3f\n.text:0000000000408f41\n.text:0000000000408f44\n.text:0000000000408f47\n.text:0000000000408f48\n.text:0000000000408f4a\n.text:0000000000408f4c\n.text:0000000000408f4e\n.text:0000000000408f50\n'
p2477
tp2478
sS'dired_dump_obstack'
p2479
(S'\n__stdcall dired_dump_obstack(char * prefix, obstack * os)\n'
p2480
V\u000avoid dired_dump_obstack(char *prefix,obstack *os)\u000a\u000a{\u000a  undefined8 *puVar1;\u000a  char *pcVar2;\u000a  undefined8 *puVar3;\u000a  ulong uVar4;\u000a  \u000a  puVar3 = (undefined8 *)os->object_base;\u000a  puVar1 = (undefined8 *)os->next_free;\u000a  uVar4 = (ulong)((long)puVar1 - (long)puVar3) >> 3;\u000a  if (uVar4 != 0) {\u000a    if (puVar1 == puVar3) {\u000a      *(byte *)&os->use_extra_arg_bitfield = *(byte *)&os->use_extra_arg_bitfield | 2;\u000a    }\u000a    pcVar2 = (char *)(~os->alignment_mask & (long)puVar1 + os->alignment_mask);\u000a    os->next_free = pcVar2;\u000a    if (os->chunk_limit + -(long)os->chunk < pcVar2 + -(long)os->chunk) {\u000a      os->next_free = os->chunk_limit;\u000a    }\u000a    os->object_base = os->next_free;\u000a    fputs_unlocked(prefix,stdout);\u000a    do {\u000a      __printf_chk(1,&DAT_004163e8,*puVar3);\u000a      puVar3 = puVar3 + 1;\u000a      uVar4 = uVar4 - 1;\u000a    } while (uVar4 != 0);\u000a    putchar_unlocked(10);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2481
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,qword ptr [RSI + 0x10]\nMOV RAX,qword ptr [RSI + 0x18]\nMOV R14,RAX\nSUB R14,RBX\nSHR R14,0x3\nJZ 0x0040513e\nCMP RAX,RBX\nJNZ 0x004050d1\nOR byte ptr [RSI + 0x50],0x2\nMOV RCX,qword ptr [RSI + 0x30]\nADD RAX,RCX\nNOT RCX\nAND RCX,RAX\nMOV qword ptr [RSI + 0x18],RCX\nMOV RDX,qword ptr [RSI + 0x8]\nMOV R8,qword ptr [RSI + 0x20]\nSUB RCX,RDX\nMOV RAX,R8\nSUB RAX,RDX\nCMP RCX,RAX\nJBE 0x004050fc\nMOV qword ptr [RSI + 0x18],R8\nMOV RAX,qword ptr [RSI + 0x18]\nMOV qword ptr [RSI + 0x10],RAX\nMOV RSI,qword ptr [0x0061d5c8]\nCALL 0x004023c0\nMOV RDX,qword ptr [RBX]\nMOV EDI,0x1\nMOV ESI,0x4163e8\nXOR EAX,EAX\nCALL 0x004025b0\nADD RBX,0x8\nDEC R14\nJNZ 0x00405110\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402460\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2482
S'41 56\n53\n50\n48 8b 5e 10\n48 8b 46 18\n49 89 c6\n49 29 de\n49 c1 ee 03\n74 76\n48 39 d8\n75 04\n80 4e 50 02\n48 8b 4e 30\n48 01 c8\n48 f7 d1\n48 21 c1\n48 89 4e 18\n48 8b 56 08\n4c 8b 46 20\n48 29 d1\n4c 89 c0\n48 29 d0\n48 39 c1\n76 04\n4c 89 46 18\n48 8b 46 18\n48 89 46 10\n48 8b 35 bd 84 21 00\ne8 b0 d2 ff ff\n48 8b 13\nbf 01 00 00 00\nbe e8 63 41 00\n31 c0\ne8 8c d4 ff ff\n48 83 c3 08\n49 ff ce\n75 e3\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5e\ne9 22 d3 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2483
S'.text:00000000004050b0\n.text:00000000004050b2\n.text:00000000004050b3\n.text:00000000004050b4\n.text:00000000004050b8\n.text:00000000004050bc\n.text:00000000004050bf\n.text:00000000004050c2\n.text:00000000004050c6\n.text:00000000004050c8\n.text:00000000004050cb\n.text:00000000004050cd\n.text:00000000004050d1\n.text:00000000004050d5\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050de\n.text:00000000004050e2\n.text:00000000004050e6\n.text:00000000004050ea\n.text:00000000004050ed\n.text:00000000004050f0\n.text:00000000004050f3\n.text:00000000004050f6\n.text:00000000004050f8\n.text:00000000004050fc\n.text:0000000000405100\n.text:0000000000405104\n.text:000000000040510b\n.text:0000000000405110\n.text:0000000000405113\n.text:0000000000405118\n.text:000000000040511d\n.text:000000000040511f\n.text:0000000000405124\n.text:0000000000405128\n.text:000000000040512b\n.text:000000000040512d\n.text:0000000000405132\n.text:0000000000405136\n.text:0000000000405137\n.text:0000000000405139\n.text:000000000040513e\n.text:0000000000405142\n.text:0000000000405143\n.text:0000000000405145\n'
p2484
tp2485
sS'hash_do_for_each'
p2486
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p2487
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2488
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00409c17\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x00409c0a\nTEST R13,R13\nJZ 0x00409c0a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00409c19\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00409bf0\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00409be1\nJMP 0x00409c19\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2489
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2490
S'.text:0000000000409bc0\n.text:0000000000409bc1\n.text:0000000000409bc3\n.text:0000000000409bc5\n.text:0000000000409bc7\n.text:0000000000409bc9\n.text:0000000000409bca\n.text:0000000000409bcb\n.text:0000000000409bce\n.text:0000000000409bd1\n.text:0000000000409bd4\n.text:0000000000409bd8\n.text:0000000000409bdd\n.text:0000000000409bdf\n.text:0000000000409be1\n.text:0000000000409be6\n.text:0000000000409be8\n.text:0000000000409beb\n.text:0000000000409bed\n.text:0000000000409bf0\n.text:0000000000409bf4\n.text:0000000000409bf7\n.text:0000000000409bfa\n.text:0000000000409bfc\n.text:0000000000409bfe\n.text:0000000000409c01\n.text:0000000000409c05\n.text:0000000000409c08\n.text:0000000000409c0a\n.text:0000000000409c0e\n.text:0000000000409c13\n.text:0000000000409c15\n.text:0000000000409c17\n.text:0000000000409c19\n.text:0000000000409c1c\n.text:0000000000409c20\n.text:0000000000409c21\n.text:0000000000409c23\n.text:0000000000409c25\n.text:0000000000409c27\n.text:0000000000409c29\n.text:0000000000409c2a\n'
p2491
tp2492
sS'usage'
p2493
(S'\n__stdcall usage()\n'
p2494
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  char *program;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "List information about the FILEs (the current directory by default).\u005cnSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -a, --all                  do not ignore entries starting with .\u005cn  -A, --almost-all           do not list implied . and ..\u005cn      --author               with -l, print the author of each file\u005cn  -b, --escape               print C-style escapes for nongraphic characters\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,\u005cn                               \u005c'--block-size=M\u005c' prints sizes in units of\u005cn                               1,048,576 bytes; see SIZE format below\u005cn  -B, --ignore-backups       do not list implied entries ending with ~\u005cn  -c                         with -lt: sort by, and show, ctime (time of last\u005cn                               modification of file status information);\u005cn                               with -l: show ctime and sort by name;\u005cn                               otherwise: sort by ctime, newest first\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -C                         list entries by columns\u005cn      --color[=WHEN]         colorize the output; WHEN can be \u005c'always\u005c' (default\u005cn                               if omitted), \u005c'auto\u005c', or \u005c'never\u005c'; more info below\u005cn  -d, --directory            list directories themselves, not their contents\u005cn  -D, --dired                generate output designed for Emacs\u005c' dired mode\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f                         do not sort, enable -aU, disable -ls --color\u005cn  -F, --classify             append indicator (one of */=>@|) to entries\u005cn      --file-type            likewise, except do not append \u005c'*\u005c'\u005cn      --format=WORD          across -x, commas -m, horizontal -x, long -l,\u005cn                               single-column -1, verbose -l, vertical -C\u005cn      --full-time            like -l --time-style=full-iso\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -g                         like -l, but do not list owner\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --group-directories-first\u005cn                             group directories before files;\u005cn                               can be augmented with a --sort option, but any\u005cn                               use of --sort=none (-U) disables grouping\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -G, --no-group             in a long listing, don\u005c't print group names\u005cn  -h, --human-readable       with -l and/or -s, print human readable sizes\u005cn                               (e.g., 1K 234M 2G)\u005cn      --si                   likewise, but use powers of 1000 not 1024\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -H, --dereference-command-line\u005cn                             follow symbolic links listed on the command line\u005cn      --dereference-command-line-symlink-to-dir\u005cn                             follow each command line symbolic link\u005cn                               that points to a directory\u005cn      --hide=PATTERN         do not list implied entries matching shell PATTERN\u005cn                               (overridden by -a or -A)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --indicator-style=WORD  append indicator with style WORD to entry names:\u005cn                               none (default), slash (-p),\u005cn                               file-type (--file-type), classify (-F)\u005cn  -i, --inode                print the index number of each file\u005cn  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\u005cn  -k, --kibibytes            default to 1024-byte blocks for disk usage\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -l                         use a long listing format\u005cn  -L, --dereference          when showing file information for a symbolic\u005cn                               link, show information for the file the link\u005cn                               references rather than for the link itself\u005cn  -m                         fill width with a comma separated list of entries\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\u005cn  -N, --literal              print raw entry names (don\u005c't treat e.g. control\u005cn                               characters specially)\u005cn  -o                         like -l, but do not list group information\u005cn  -p, --indicator-style=slash\u005cn                             append / indicator to directories\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -q, --hide-control-chars   print ? instead of nongraphic characters\u005cn      --show-control-chars   show nongraphic characters as-is (the default,\u005cn                               unless program is \u005c'ls\u005c' and output is a terminal)\u005cn  -Q, --quote-name           enclose entry names in double quotes\u005cn      --quoting-style=WORD   use quoting style WORD for entry names:\u005cn                               literal, locale, shell, shell-always,\u005cn                               shell-escape, shell-escape-always, c, escape\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -r, --reverse              reverse order while sorting\u005cn  -R, --recursive            list subdirectories recursively\u005cn  -s, --size                 print the allocated size of each file, in blocks\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -S                         sort by file size, largest first\u005cn      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\u005cn                               time (-t), version (-v), extension (-X)\u005cn      --time=WORD            with -l, show time as WORD instead of default\u005cn                               modification time: atime or access or use (-u);\u005cn                               ctime or status (-c); also use specified time\u005cn                               as sort key if --sort=time (newest first)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --time-style=STYLE     with -l, show times using style STYLE:\u005cn                               full-iso, long-iso, iso, locale, or +FORMAT;\u005cn                               FORMAT is interpreted like in \u005c'date\u005c'; if FORMAT\u005cn                               is FORMAT1<newline>FORMAT2, then FORMAT1 applies\u005cn                               to non-recent files and FORMAT2 to recent files;\u005cn                               if STYLE is prefixed with \u005c'posix-\u005c', STYLE\u005cn                               takes effect only outside the POSIX locale\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -t                         sort by modification time, newest first\u005cn  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -u                         with -lt: sort by, and show, access time;\u005cn                               with -l: show access time and sort by name;\u005cn                               otherwise: sort by access time, newest first\u005cn  -U                         do not sort; list entries in directory order\u005cn  -v                         natural sort of (version) numbers within text\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -w, --width=COLS           set output width to COLS.  0 means no limit\u005cn  -x                         list entries by lines instead of by columns\u005cn  -X                         sort alphabetically by entry extension\u005cn  -Z, --context              print any security context of each file\u005cn  -1                         list one file per line.  Avoid \u005c'\u005c\u005cn\u005c' with -q or -b\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_size_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnUsing color to distinguish file types is disabled both by default and\u005cnwith --color=never.  With --color=auto, ls emits color codes only when\u005cnstandard output is connected to a terminal.  The LS_COLORS environment\u005cnvariable can change the settings.  Use the dircolors command to set it.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnExit status:\u005cn 0  if OK,\u005cn 1  if minor problems (e.g., cannot access subdirectory),\u005cn 2  if serious trouble (e.g., cannot access command-line argument).\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = "vdir";\u000a    if (ls_mode == 2) {\u000a      __s = "dir";\u000a    }\u000a    program = "ls";\u000a    if (ls_mode != 1) {\u000a      program = __s;\u000a    }\u000a    emit_ancillary_info(program);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p2495
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x0040549e\nXOR EDI,EDI\nMOV ESI,0x414762\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0061e1a8]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004025b0\nXOR EDI,EDI\nMOV ESI,0x414783\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nCALL 0x004054f0\nXOR EDI,EDI\nMOV ESI,0x414813\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414922\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414b68\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414cd7\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414e7a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414eb7\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x414fac\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x4150b9\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x41525f\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415409\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415570\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x4156e2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x4158dd\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x4159a2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415ba9\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415dbc\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415e4a\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x415fbe\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x416129\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x416156\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nCALL 0x00405520\nXOR EDI,EDI\nMOV ESI,0x41618c\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nXOR EDI,EDI\nMOV ESI,0x4162aa\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nCALL 0x004023c0\nMOV EAX,dword ptr [0x0061d528]\nCMP EAX,0x2\nMOV ECX,0x41677c\nMOV EDX,0x416342\nCMOVZ RDX,RCX\nCMP EAX,0x1\nMOV EDI,0x416526\nCMOVNZ RDI,RDX\nCALL 0x00405550\nMOV EDI,EBX\nCALL 0x00402690\nCALL 0x004054b0\nMOV EDI,EBX\nCALL 0x00402690\n'
p2496
S'53\n89 fb\n85 db\n0f 85 43 03 00 00\n31 ff\nbe 62 47 41 00\nba 05 00 00 00\ne8 04 d1 ff ff\n48 89 c1\n48 8b 15 32 90 21 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 2b d4 ff ff\n31 ff\nbe 83 47 41 00\nba 05 00 00 00\ne8 da d0 ff ff\n48 8b 35 2b 84 21 00\n48 89 c7\ne8 1b d2 ff ff\ne8 46 03 00 00\n31 ff\nbe 13 48 41 00\nba 05 00 00 00\ne8 b5 d0 ff ff\n48 8b 35 06 84 21 00\n48 89 c7\ne8 f6 d1 ff ff\n31 ff\nbe 22 49 41 00\nba 05 00 00 00\ne8 95 d0 ff ff\n48 8b 35 e6 83 21 00\n48 89 c7\ne8 d6 d1 ff ff\n31 ff\nbe 68 4b 41 00\nba 05 00 00 00\ne8 75 d0 ff ff\n48 8b 35 c6 83 21 00\n48 89 c7\ne8 b6 d1 ff ff\n31 ff\nbe d7 4c 41 00\nba 05 00 00 00\ne8 55 d0 ff ff\n48 8b 35 a6 83 21 00\n48 89 c7\ne8 96 d1 ff ff\n31 ff\nbe 7a 4e 41 00\nba 05 00 00 00\ne8 35 d0 ff ff\n48 8b 35 86 83 21 00\n48 89 c7\ne8 76 d1 ff ff\n31 ff\nbe b7 4e 41 00\nba 05 00 00 00\ne8 15 d0 ff ff\n48 8b 35 66 83 21 00\n48 89 c7\ne8 56 d1 ff ff\n31 ff\nbe ac 4f 41 00\nba 05 00 00 00\ne8 f5 cf ff ff\n48 8b 35 46 83 21 00\n48 89 c7\ne8 36 d1 ff ff\n31 ff\nbe b9 50 41 00\nba 05 00 00 00\ne8 d5 cf ff ff\n48 8b 35 26 83 21 00\n48 89 c7\ne8 16 d1 ff ff\n31 ff\nbe 5f 52 41 00\nba 05 00 00 00\ne8 b5 cf ff ff\n48 8b 35 06 83 21 00\n48 89 c7\ne8 f6 d0 ff ff\n31 ff\nbe 09 54 41 00\nba 05 00 00 00\ne8 95 cf ff ff\n48 8b 35 e6 82 21 00\n48 89 c7\ne8 d6 d0 ff ff\n31 ff\nbe 70 55 41 00\nba 05 00 00 00\ne8 75 cf ff ff\n48 8b 35 c6 82 21 00\n48 89 c7\ne8 b6 d0 ff ff\n31 ff\nbe e2 56 41 00\nba 05 00 00 00\ne8 55 cf ff ff\n48 8b 35 a6 82 21 00\n48 89 c7\ne8 96 d0 ff ff\n31 ff\nbe dd 58 41 00\nba 05 00 00 00\ne8 35 cf ff ff\n48 8b 35 86 82 21 00\n48 89 c7\ne8 76 d0 ff ff\n31 ff\nbe a2 59 41 00\nba 05 00 00 00\ne8 15 cf ff ff\n48 8b 35 66 82 21 00\n48 89 c7\ne8 56 d0 ff ff\n31 ff\nbe a9 5b 41 00\nba 05 00 00 00\ne8 f5 ce ff ff\n48 8b 35 46 82 21 00\n48 89 c7\ne8 36 d0 ff ff\n31 ff\nbe bc 5d 41 00\nba 05 00 00 00\ne8 d5 ce ff ff\n48 8b 35 26 82 21 00\n48 89 c7\ne8 16 d0 ff ff\n31 ff\nbe 4a 5e 41 00\nba 05 00 00 00\ne8 b5 ce ff ff\n48 8b 35 06 82 21 00\n48 89 c7\ne8 f6 cf ff ff\n31 ff\nbe be 5f 41 00\nba 05 00 00 00\ne8 95 ce ff ff\n48 8b 35 e6 81 21 00\n48 89 c7\ne8 d6 cf ff ff\n31 ff\nbe 29 61 41 00\nba 05 00 00 00\ne8 75 ce ff ff\n48 8b 35 c6 81 21 00\n48 89 c7\ne8 b6 cf ff ff\n31 ff\nbe 56 61 41 00\nba 05 00 00 00\ne8 55 ce ff ff\n48 8b 35 a6 81 21 00\n48 89 c7\ne8 96 cf ff ff\ne8 f1 00 00 00\n31 ff\nbe 8c 61 41 00\nba 05 00 00 00\ne8 30 ce ff ff\n48 8b 35 81 81 21 00\n48 89 c7\ne8 71 cf ff ff\n31 ff\nbe aa 62 41 00\nba 05 00 00 00\ne8 10 ce ff ff\n48 8b 35 61 81 21 00\n48 89 c7\ne8 51 cf ff ff\n8b 05 b3 80 21 00\n83 f8 02\nb9 7c 67 41 00\nba 42 63 41 00\n48 0f 44 d1\n83 f8 01\nbf 26 65 41 00\n48 0f 45 fa\ne8 b9 00 00 00\n89 df\ne8 f2 d1 ff ff\ne8 0d 00 00 00\n89 df\ne8 e6 d1 ff ff\n'
p2497
S'.text:0000000000405150\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405155\n.text:000000000040515b\n.text:000000000040515d\n.text:0000000000405162\n.text:0000000000405167\n.text:000000000040516c\n.text:000000000040516f\n.text:0000000000405176\n.text:000000000040517b\n.text:000000000040517d\n.text:0000000000405180\n.text:0000000000405185\n.text:0000000000405187\n.text:000000000040518c\n.text:0000000000405191\n.text:0000000000405196\n.text:000000000040519d\n.text:00000000004051a0\n.text:00000000004051a5\n.text:00000000004051aa\n.text:00000000004051ac\n.text:00000000004051b1\n.text:00000000004051b6\n.text:00000000004051bb\n.text:00000000004051c2\n.text:00000000004051c5\n.text:00000000004051ca\n.text:00000000004051cc\n.text:00000000004051d1\n.text:00000000004051d6\n.text:00000000004051db\n.text:00000000004051e2\n.text:00000000004051e5\n.text:00000000004051ea\n.text:00000000004051ec\n.text:00000000004051f1\n.text:00000000004051f6\n.text:00000000004051fb\n.text:0000000000405202\n.text:0000000000405205\n.text:000000000040520a\n.text:000000000040520c\n.text:0000000000405211\n.text:0000000000405216\n.text:000000000040521b\n.text:0000000000405222\n.text:0000000000405225\n.text:000000000040522a\n.text:000000000040522c\n.text:0000000000405231\n.text:0000000000405236\n.text:000000000040523b\n.text:0000000000405242\n.text:0000000000405245\n.text:000000000040524a\n.text:000000000040524c\n.text:0000000000405251\n.text:0000000000405256\n.text:000000000040525b\n.text:0000000000405262\n.text:0000000000405265\n.text:000000000040526a\n.text:000000000040526c\n.text:0000000000405271\n.text:0000000000405276\n.text:000000000040527b\n.text:0000000000405282\n.text:0000000000405285\n.text:000000000040528a\n.text:000000000040528c\n.text:0000000000405291\n.text:0000000000405296\n.text:000000000040529b\n.text:00000000004052a2\n.text:00000000004052a5\n.text:00000000004052aa\n.text:00000000004052ac\n.text:00000000004052b1\n.text:00000000004052b6\n.text:00000000004052bb\n.text:00000000004052c2\n.text:00000000004052c5\n.text:00000000004052ca\n.text:00000000004052cc\n.text:00000000004052d1\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052e2\n.text:00000000004052e5\n.text:00000000004052ea\n.text:00000000004052ec\n.text:00000000004052f1\n.text:00000000004052f6\n.text:00000000004052fb\n.text:0000000000405302\n.text:0000000000405305\n.text:000000000040530a\n.text:000000000040530c\n.text:0000000000405311\n.text:0000000000405316\n.text:000000000040531b\n.text:0000000000405322\n.text:0000000000405325\n.text:000000000040532a\n.text:000000000040532c\n.text:0000000000405331\n.text:0000000000405336\n.text:000000000040533b\n.text:0000000000405342\n.text:0000000000405345\n.text:000000000040534a\n.text:000000000040534c\n.text:0000000000405351\n.text:0000000000405356\n.text:000000000040535b\n.text:0000000000405362\n.text:0000000000405365\n.text:000000000040536a\n.text:000000000040536c\n.text:0000000000405371\n.text:0000000000405376\n.text:000000000040537b\n.text:0000000000405382\n.text:0000000000405385\n.text:000000000040538a\n.text:000000000040538c\n.text:0000000000405391\n.text:0000000000405396\n.text:000000000040539b\n.text:00000000004053a2\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053ac\n.text:00000000004053b1\n.text:00000000004053b6\n.text:00000000004053bb\n.text:00000000004053c2\n.text:00000000004053c5\n.text:00000000004053ca\n.text:00000000004053cc\n.text:00000000004053d1\n.text:00000000004053d6\n.text:00000000004053db\n.text:00000000004053e2\n.text:00000000004053e5\n.text:00000000004053ea\n.text:00000000004053ec\n.text:00000000004053f1\n.text:00000000004053f6\n.text:00000000004053fb\n.text:0000000000405402\n.text:0000000000405405\n.text:000000000040540a\n.text:000000000040540c\n.text:0000000000405411\n.text:0000000000405416\n.text:000000000040541b\n.text:0000000000405422\n.text:0000000000405425\n.text:000000000040542a\n.text:000000000040542f\n.text:0000000000405431\n.text:0000000000405436\n.text:000000000040543b\n.text:0000000000405440\n.text:0000000000405447\n.text:000000000040544a\n.text:000000000040544f\n.text:0000000000405451\n.text:0000000000405456\n.text:000000000040545b\n.text:0000000000405460\n.text:0000000000405467\n.text:000000000040546a\n.text:000000000040546f\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405482\n.text:0000000000405486\n.text:0000000000405489\n.text:000000000040548e\n.text:0000000000405492\n.text:0000000000405497\n.text:0000000000405499\n.text:000000000040549e\n.text:00000000004054a3\n.text:00000000004054a5\n'
p2498
tp2499
sS'get_stat_ctime_ns'
p2500
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p2501
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p2502
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p2503
S'48 8b 47 70\nc3\n'
p2504
S'.text:000000000040da50\n.text:000000000040da54\n'
p2505
tp2506
sS'quoting_options_from_style'
p2507
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p2508
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2509
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040d1bd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00402100\n'
p2510
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 3e 4f ff ff\n'
p2511
S'.text:000000000040d170\n.text:000000000040d174\n.text:000000000040d177\n.text:000000000040d17c\n.text:000000000040d181\n.text:000000000040d185\n.text:000000000040d18d\n.text:000000000040d190\n.text:000000000040d192\n.text:000000000040d194\n.text:000000000040d198\n.text:000000000040d19b\n.text:000000000040d19f\n.text:000000000040d1a4\n.text:000000000040d1a9\n.text:000000000040d1ad\n.text:000000000040d1b1\n.text:000000000040d1b5\n.text:000000000040d1b8\n.text:000000000040d1bc\n.text:000000000040d1bd\n'
p2512
tp2513
sS'file_has_acl'
p2514
(S'\n__stdcall file_has_acl(char * name, stat * sb)\n'
p2515
V\u000aint file_has_acl(char *name,stat *sb)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p2516
S'XOR EAX,EAX\nRET\n'
p2517
S'31 c0\nc3\n'
p2518
S'.text:0000000000409170\n.text:0000000000409172\n'
p2519
tp2520
sS'strcpy'
p2521
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p2522
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0061d078)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2523
S'JMP qword ptr [0x0061d078]\n'
p2524
S'ff 25 22 af 21 00\n'
p2525
S'.plt:0000000000402150\n'
p2526
tp2527
sS'print_dir'
p2528
(S'\n__stdcall print_dir(char * name, char * realname)\n'
p2529
V\u000avoid print_dir(char *name,char *realname)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  DIR *__dirp;\u000a  undefined8 uVar4;\u000a  char *file;\u000a  size_t sVar5;\u000a  dirent *pdVar6;\u000a  uintmax_t uVar7;\u000a  size_t sVar8;\u000a  ulong in_RDX;\u000a  uintmax_t n;\u000a  char buf [652];\u000a  stat local_2c8 [4];\u000a  \u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  __dirp = opendir(name);\u000a  if (__dirp == (DIR *)0x0) {\u000a    file = (char *)dcgettext(0,"cannot open directory %s",5);\u000a    file_failure((char *)(in_RDX & 0xff),file);\u000a    return;\u000a  }\u000a  if (active_dir_set != (Hash_table *)0x0) {\u000a    __fd = dirfd(__dirp);\u000a    if (__fd < 0) {\u000a      __fd = stat(name,local_2c8);\u000a    }\u000a    else {\u000a      __fd = fstat(__fd,local_2c8);\u000a    }\u000a    if (__fd < 0) {\u000a      file = (char *)dcgettext(0,"cannot determine device and inode of %s",5);\u000a      file_failure((char *)(in_RDX & 0xff),file);\u000a      closedir(__dirp);\u000a    }\u000a    else {\u000a      _Var1 = visit_dir(local_2c8[0].st_dev,local_2c8[0].st_ino);\u000a      if (_Var1 == false) {\u000a        dev_ino_push(local_2c8[0].st_dev,local_2c8[0].st_ino);\u000a        goto LAB_00404d30;\u000a      }\u000a      uVar4 = dcgettext(0,"%s: not listing already-listed directory",5);\u000a      file = quotearg_n_style_colon((char *)0x0);\u000a      error(0,0,uVar4,file);\u000a      closedir(__dirp);\u000a      set_exit_status(1);\u000a    }\u000a    return;\u000a  }\u000aLAB_00404d30:\u000a  if ((recursive != 0) || (print_dir_name == 1)) {\u000a    if (print_dir_first == 1) {\u000a      putchar_unlocked(10);\u000a      dired_pos = dired_pos + 1;\u000a    }\u000a    print_dir_first = 1;\u000a    if (dired == 1) {\u000a      fputs_unlocked("  ",(FILE *)stdout);\u000a      dired_pos = dired_pos + 2;\u000a      if (dired == 1) {\u000a        if (subdired_obstack.chunk_limit + -(long)subdired_obstack.next_free < &DAT_00000008) {\u000a          _obstack_newchunk(&subdired_obstack,8);\u000a        }\u000a        *(size_t *)subdired_obstack.next_free = dired_pos;\u000a        subdired_obstack.next_free = subdired_obstack.next_free + 8;\u000a      }\u000a    }\u000a    if (realname == (char *)0x0) {\u000a      realname = name;\u000a    }\u000a    sVar5 = quote_name(stdout,realname,dirname_quoting_options,(size_t *)0x0);\u000a    dired_pos = dired_pos + sVar5;\u000a    if (dired == 1) {\u000a      if (subdired_obstack.chunk_limit + -(long)subdired_obstack.next_free < &DAT_00000008) {\u000a        _obstack_newchunk(&subdired_obstack,8);\u000a      }\u000a      *(size_t *)subdired_obstack.next_free = dired_pos;\u000a      subdired_obstack.next_free = subdired_obstack.next_free + 8;\u000a    }\u000a    fputs_unlocked(":\u005cn",(FILE *)stdout);\u000a    dired_pos = dired_pos + 2;\u000a  }\u000a  clear_files();\u000a  n = 0;\u000a  uVar2 = (uint)in_RDX & 0xff;\u000a  do {\u000a    *piVar3 = 0;\u000a    pdVar6 = readdir(__dirp);\u000a    if (pdVar6 == (dirent *)0x0) {\u000a      if (*piVar3 == 0) {\u000aLAB_00404f59:\u000a        __fd = closedir(__dirp);\u000a        if (__fd != 0) {\u000a          file = (char *)dcgettext(0,"closing directory %s",5);\u000a          file_failure((char *)(ulong)uVar2,file);\u000a        }\u000a        sort_files();\u000a        if (recursive == 1) {\u000a          extract_dirs_from_files(name);\u000a        }\u000a        if ((format == long_format) || (print_block_size == 1)) {\u000a          if (dired == 1) {\u000a            fputs_unlocked("  ",(FILE *)stdout);\u000a            dired_pos = dired_pos + 2;\u000a          }\u000a          file = (char *)dcgettext(0,"total",5);\u000a          fputs_unlocked(file,(FILE *)stdout);\u000a          sVar8 = strlen(file);\u000a          dired_pos = dired_pos + sVar8;\u000a          putchar_unlocked(0x20);\u000a          dired_pos = dired_pos + 1;\u000a          file = human_readable(n,(char *)local_2c8,(ulong)(uint)human_output_opts,0x200);\u000a          fputs_unlocked(file,(FILE *)stdout);\u000a          sVar8 = strlen(file);\u000a          dired_pos = dired_pos + sVar8;\u000a          putchar_unlocked(10);\u000a          dired_pos = dired_pos + 1;\u000a        }\u000a        if (cwd_n_used == 0) {\u000a          return;\u000a        }\u000a        print_current_files();\u000a        return;\u000a      }\u000a      file = (char *)dcgettext(0,"reading directory %s",5);\u000a      file_failure((char *)(ulong)uVar2,file);\u000a      if (*piVar3 != 0x4b) goto LAB_00404f59;\u000a    }\u000a    else {\u000a      _Var1 = file_ignored(pdVar6->d_name);\u000a      if (_Var1 == false) {\u000a        uVar7 = gobble_file();\u000a        n = uVar7 + n;\u000a        if ((((format == one_per_line) && (sort_type == sort_none)) && (print_block_size == 0)) &&\u000a           (recursive == 0)) {\u000a          sort_files();\u000a          print_current_files();\u000a          clear_files();\u000a        }\u000a      }\u000a    }\u000a    process_signals();\u000a  } while( true );\u000a}\u000a\u000a
p2530
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x2a8\nMOV R14D,EDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00402110\nMOV R13,RAX\nMOV dword ptr [R13],0x0\nMOV RDI,R12\nCALL 0x00402230\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00404c59\nCMP qword ptr [0x0061d6d0],0x0\nJZ 0x00404d30\nMOV RDI,R15\nCALL 0x00402410\nLEA RSI,[RSP + 0x10]\nTEST EAX,EAX\nJS 0x00404c8a\nMOV EDI,EAX\nCALL 0x00411980\nTEST EAX,EAX\nJNS 0x00404c96\nJMP 0x00404cf4\nXOR EDI,EDI\nMOV ESI,0x416951\nMOV EDX,0x5\nCALL 0x00402270\nMOVZX EDI,R14B\nMOV RSI,RAX\nMOV RDX,R12\nADD RSP,0x2a8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405bc0\nMOV RDI,R12\nCALL 0x00411970\nTEST EAX,EAX\nJS 0x00404cf4\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00405c10\nTEST AL,AL\nJZ 0x00404d21\nXOR EDI,EDI\nMOV ESI,0x416992\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R12\nCALL 0x0040d2f0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004025f0\nMOV RDI,R15\nCALL 0x00402390\nMOV EDI,0x1\nCALL 0x00405c70\nJMP 0x00405078\nXOR EDI,EDI\nMOV ESI,0x41696a\nMOV EDX,0x5\nCALL 0x00402270\nMOVZX EDI,R14B\nMOV RSI,RAX\nMOV RDX,R12\nCALL 0x00405bc0\nMOV RDI,R15\nCALL 0x00402390\nJMP 0x00405078\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00405c90\nMOV AL,byte ptr [0x0061d6cc]\nTEST AL,AL\nJNZ 0x00404d47\nCMP byte ptr [0x0061d614],0x1\nJNZ 0x00404e53\nCMP byte ptr [0x0061e040],0x1\nJNZ 0x00404d61\nMOV EDI,0xa\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nMOV byte ptr [0x0061e040],0x1\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00404dcf\nMOV RSI,qword ptr [0x0061d5c8]\nMOV EDI,0x4169bb\nCALL 0x004023c0\nADD qword ptr [0x0061d810],0x2\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00404dcf\nMOV RAX,qword ptr [0x0061d7c0]\nSUB RAX,qword ptr [0x0061d7b8]\nCMP RAX,0x7\nJA 0x00404db6\nMOV EDI,0x61d7a0\nMOV ESI,0x8\nCALL 0x00410360\nMOV RAX,qword ptr [0x0061d7b8]\nMOV RCX,qword ptr [0x0061d810]\nMOV qword ptr [RAX],RCX\nADD qword ptr [0x0061d7b8],0x8\nMOV RDI,qword ptr [0x0061d5c8]\nTEST RBP,RBP\nCMOVZ RBP,R12\nMOV RDX,qword ptr [0x0061d888]\nXOR ECX,ECX\nMOV RSI,RBP\nCALL 0x00405ce0\nADD qword ptr [0x0061d810],RAX\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00404e3a\nMOV RAX,qword ptr [0x0061d7c0]\nSUB RAX,qword ptr [0x0061d7b8]\nCMP RAX,0x7\nJA 0x00404e21\nMOV EDI,0x61d7a0\nMOV ESI,0x8\nCALL 0x00410360\nMOV RAX,qword ptr [0x0061d7b8]\nMOV RCX,qword ptr [0x0061d810]\nMOV qword ptr [RAX],RCX\nADD qword ptr [0x0061d7b8],0x8\nMOV RSI,qword ptr [0x0061d5c8]\nMOV EDI,0x4165a7\nCALL 0x004023c0\nADD qword ptr [0x0061d810],0x2\nCALL 0x00403fa0\nXOR EBP,EBP\nMOVZX EAX,R14B\nMOV dword ptr [RSP + 0xc],EAX\nJMP 0x00404e78\nCALL 0x00406020\nMOV RBP,RBX\nMOV dword ptr [R13],0x0\nMOV RDI,R15\nCALL 0x004024b0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00404f20\nLEA RBX,[R14 + 0x13]\nMOV RDI,RBX\nCALL 0x00405fc0\nTEST AL,AL\nJNZ 0x00404f51\nMOVZX EAX,byte ptr [R14 + 0x12]\nDEC AL\nXOR ESI,ESI\nCMP AL,0xd\nJA 0x00404ec0\nMOVSX RAX,AL\nMOV ESI,dword ptr [0x414680 + RAX*0x4]\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RCX,R12\nCALL 0x00404050\nMOV RBX,RAX\nADD RBX,RBP\nCMP dword ptr [0x0061d634],0x1\nJNZ 0x00404e70\nCMP dword ptr [0x0061d738],-0x1\nJNZ 0x00404e70\nMOVZX EAX,byte ptr [0x0061d73d]\nTEST AL,AL\nJNZ 0x00404e70\nMOVZX EAX,byte ptr [0x0061d6cc]\nTEST AL,AL\nJNZ 0x00404e70\nCALL 0x00404890\nCALL 0x00404ac0\nCALL 0x00403fa0\nJMP 0x00404e70\nCMP dword ptr [R13],0x0\nMOV RBX,R12\nJZ 0x00404f59\nXOR EDI,EDI\nMOV ESI,0x4169be\nMOV EDX,0x5\nCALL 0x00402270\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,RAX\nMOV RDX,RBX\nCALL 0x00405bc0\nCMP dword ptr [R13],0x4b\nJNZ 0x00404f59\nMOV RBX,RBP\nJMP 0x00404e70\nMOV RDI,R15\nCALL 0x00402390\nTEST EAX,EAX\nJZ 0x00404f85\nXOR EDI,EDI\nMOV ESI,0x4169d3\nMOV EDX,0x5\nCALL 0x00402270\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,RAX\nMOV RDX,RBX\nCALL 0x00405bc0\nCALL 0x00404890\nCMP byte ptr [0x0061d6cc],0x1\nJNZ 0x00404f9d\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00404980\nCMP dword ptr [0x0061d634],0x0\nJZ 0x00404fb3\nCMP byte ptr [0x0061d73d],0x1\nJNZ 0x00405069\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00404fd5\nMOV RSI,qword ptr [0x0061d5c8]\nMOV EDI,0x4169bb\nCALL 0x004023c0\nADD qword ptr [0x0061d810],0x2\nXOR EDI,EDI\nMOV ESI,0x4169e8\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RBX\nCALL 0x004023c0\nMOV RDI,RBX\nCALL 0x00402290\nADD qword ptr [0x0061d810],RAX\nMOV EDI,0x20\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nMOV EDX,dword ptr [0x0061d864]\nMOV R8,qword ptr [0x0061d870]\nLEA RSI,[RSP + 0x10]\nMOV ECX,0x200\nMOV RDI,RBP\nCALL 0x0040a810\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RBX\nCALL 0x004023c0\nMOV RDI,RBX\nCALL 0x00402290\nADD qword ptr [0x0061d810],RAX\nMOV EDI,0xa\nCALL 0x00402460\nINC qword ptr [0x0061d810]\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00405078\nCALL 0x00404ac0\nADD RSP,0x2a8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2531
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 02 00 00\n41 89 d6\n48 89 f5\n49 89 fc\ne8 01 d5 ff ff\n49 89 c5\n41 c7 45 00 00 00 00 00\n4c 89 e7\ne8 0e d6 ff ff\n49 89 c7\n4d 85 ff\n74 2f\n48 83 3d 9e 8a 21 00 00\n0f 84 f8 00 00 00\n4c 89 ff\ne8 d0 d7 ff ff\n48 8d 74 24 10\n85 c0\n78 41\n89 c7\ne8 30 cd 00 00\n85 c0\n79 42\ne9 9b 00 00 00\n31 ff\nbe 51 69 41 00\nba 05 00 00 00\ne8 06 d6 ff ff\n41 0f b6 fe\n48 89 c6\n4c 89 e2\n48 81 c4 a8 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 36 0f 00 00\n4c 89 e7\ne8 de cc 00 00\n85 c0\n78 5e\n48 8b 7c 24 10\n48 8b 74 24 18\ne8 6b 0f 00 00\n84 c0\n74 78\n31 ff\nbe 92 69 41 00\nba 05 00 00 00\ne8 b6 d5 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n4c 89 e2\ne8 24 86 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 13 d9 ff ff\n4c 89 ff\ne8 ab d6 ff ff\nbf 01 00 00 00\ne8 81 0f 00 00\ne9 84 03 00 00\n31 ff\nbe 6a 69 41 00\nba 05 00 00 00\ne8 6b d5 ff ff\n41 0f b6 fe\n48 89 c6\n4c 89 e2\ne8 ac 0e 00 00\n4c 89 ff\ne8 74 d6 ff ff\ne9 57 03 00 00\n48 8b 7c 24 10\n48 8b 74 24 18\ne8 60 0f 00 00\n8a 05 96 89 21 00\n84 c0\n75 0d\n80 3d d3 88 21 00 01\n0f 85 0c 01 00 00\n80 3d f2 92 21 00 01\n75 11\nbf 0a 00 00 00\ne8 06 d7 ff ff\n48 ff 05 af 8a 21 00\nc6 05 d8 92 21 00 01\n80 3d d2 89 21 00 01\n75 5e\n48 8b 35 50 88 21 00\nbf bb 69 41 00\ne8 3e d6 ff ff\n48 83 05 86 8a 21 00 02\n80 3d b0 89 21 00 01\n75 3c\n48 8b 05 26 8a 21 00\n48 2b 05 17 8a 21 00\n48 83 f8 07\n77 0f\nbf a0 d7 61 00\nbe 08 00 00 00\ne8 aa b5 00 00\n48 8b 05 fb 89 21 00\n48 8b 0d 4c 8a 21 00\n48 89 08\n48 83 05 e9 89 21 00 08\n48 8b 3d f2 87 21 00\n48 85 ed\n49 0f 44 ec\n48 8b 15 a4 8a 21 00\n31 c9\n48 89 ee\ne8 f2 0e 00 00\n48 01 05 1b 8a 21 00\n80 3d 45 89 21 00 01\n75 3c\n48 8b 05 bb 89 21 00\n48 2b 05 ac 89 21 00\n48 83 f8 07\n77 0f\nbf a0 d7 61 00\nbe 08 00 00 00\ne8 3f b5 00 00\n48 8b 05 90 89 21 00\n48 8b 0d e1 89 21 00\n48 89 08\n48 83 05 7e 89 21 00 08\n48 8b 35 87 87 21 00\nbf a7 65 41 00\ne8 75 d5 ff ff\n48 83 05 bd 89 21 00 02\ne8 48 f1 ff ff\n31 ed\n41 0f b6 c6\n89 44 24 0c\neb 14\ne8 ab 11 00 00\n48 89 dd\n41 c7 45 00 00 00 00 00\n4c 89 ff\ne8 28 d6 ff ff\n49 89 c6\n4d 85 f6\n0f 84 8c 00 00 00\n49 8d 5e 13\n48 89 df\ne8 20 11 00 00\n84 c0\n0f 85 a9 00 00 00\n41 0f b6 46 12\nfe c8\n31 f6\n3c 0d\n77 0b\n48 0f be c0\n8b 34 85 80 46 41 00\n31 d2\n48 89 df\n4c 89 e1\ne8 83 f1 ff ff\n48 89 c3\n48 01 eb\n83 3d 5a 87 21 00 01\n75 94\n83 3d 55 88 21 00 ff\n75 8b\n0f b6 05 51 88 21 00\n84 c0\n75 80\n0f b6 05 d5 87 21 00\n84 c0\n0f 85 71 ff ff ff\ne8 8c f9 ff ff\ne8 b7 fb ff ff\ne8 92 f0 ff ff\ne9 5d ff ff ff\n41 83 7d 00 00\n4c 89 e3\n74 2f\n31 ff\nbe be 69 41 00\nba 05 00 00 00\ne8 35 d3 ff ff\n8b 7c 24 0c\n48 89 c6\n48 89 da\ne8 76 0c 00 00\n41 83 7d 00 4b\n75 08\n48 89 eb\ne9 17 ff ff ff\n4c 89 ff\ne8 2f d4 ff ff\n85 c0\n74 20\n31 ff\nbe d3 69 41 00\nba 05 00 00 00\ne8 fa d2 ff ff\n8b 7c 24 0c\n48 89 c6\n48 89 da\ne8 3b 0c 00 00\ne8 06 f9 ff ff\n80 3d 3b 87 21 00 01\n75 0a\n31 f6\n48 89 df\ne8 e3 f9 ff ff\n83 3d 90 86 21 00 00\n74 0d\n80 3d 90 87 21 00 01\n0f 85 b6 00 00 00\n80 3d 87 87 21 00 01\n75 19\n48 8b 35 05 86 21 00\nbf bb 69 41 00\ne8 f3 d3 ff ff\n48 83 05 3b 88 21 00 02\n31 ff\nbe e8 69 41 00\nba 05 00 00 00\ne8 8a d2 ff ff\n48 89 c3\n48 8b 35 d8 85 21 00\n48 89 df\ne8 c8 d3 ff ff\n48 89 df\ne8 90 d2 ff ff\n48 01 05 09 88 21 00\nbf 20 00 00 00\ne8 4f d4 ff ff\n48 ff 05 f8 87 21 00\n8b 15 46 88 21 00\n4c 8b 05 4b 88 21 00\n48 8d 74 24 10\nb9 00 02 00 00\n48 89 ef\ne8 d9 57 00 00\n48 89 c3\n48 8b 35 87 85 21 00\n48 89 df\ne8 77 d3 ff ff\n48 89 df\ne8 3f d2 ff ff\n48 01 05 b8 87 21 00\nbf 0a 00 00 00\ne8 fe d3 ff ff\n48 ff 05 a7 87 21 00\n48 83 3d 97 87 21 00 00\n74 05\ne8 48 fa ff ff\n48 81 c4 a8 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2532
S'.text:0000000000404bf0\n.text:0000000000404bf1\n.text:0000000000404bf3\n.text:0000000000404bf5\n.text:0000000000404bf7\n.text:0000000000404bf9\n.text:0000000000404bfa\n.text:0000000000404c01\n.text:0000000000404c04\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0f\n.text:0000000000404c12\n.text:0000000000404c1a\n.text:0000000000404c1d\n.text:0000000000404c22\n.text:0000000000404c25\n.text:0000000000404c28\n.text:0000000000404c2a\n.text:0000000000404c32\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c40\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4b\n.text:0000000000404c50\n.text:0000000000404c52\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c6a\n.text:0000000000404c6e\n.text:0000000000404c71\n.text:0000000000404c74\n.text:0000000000404c7b\n.text:0000000000404c7c\n.text:0000000000404c7e\n.text:0000000000404c80\n.text:0000000000404c82\n.text:0000000000404c84\n.text:0000000000404c85\n.text:0000000000404c8a\n.text:0000000000404c8d\n.text:0000000000404c92\n.text:0000000000404c94\n.text:0000000000404c96\n.text:0000000000404c9b\n.text:0000000000404ca0\n.text:0000000000404ca5\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cab\n.text:0000000000404cb0\n.text:0000000000404cb5\n.text:0000000000404cba\n.text:0000000000404cbd\n.text:0000000000404cbf\n.text:0000000000404cc4\n.text:0000000000404cc7\n.text:0000000000404ccc\n.text:0000000000404ccf\n.text:0000000000404cd1\n.text:0000000000404cd3\n.text:0000000000404cd5\n.text:0000000000404cd8\n.text:0000000000404cdd\n.text:0000000000404ce0\n.text:0000000000404ce5\n.text:0000000000404cea\n.text:0000000000404cef\n.text:0000000000404cf4\n.text:0000000000404cf6\n.text:0000000000404cfb\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d0f\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d1c\n.text:0000000000404d21\n.text:0000000000404d26\n.text:0000000000404d2b\n.text:0000000000404d30\n.text:0000000000404d36\n.text:0000000000404d38\n.text:0000000000404d3a\n.text:0000000000404d41\n.text:0000000000404d47\n.text:0000000000404d4e\n.text:0000000000404d50\n.text:0000000000404d55\n.text:0000000000404d5a\n.text:0000000000404d61\n.text:0000000000404d68\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d78\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d8a\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d9a\n.text:0000000000404da1\n.text:0000000000404da5\n.text:0000000000404da7\n.text:0000000000404dac\n.text:0000000000404db1\n.text:0000000000404db6\n.text:0000000000404dbd\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dcf\n.text:0000000000404dd6\n.text:0000000000404dd9\n.text:0000000000404ddd\n.text:0000000000404de4\n.text:0000000000404de6\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df5\n.text:0000000000404dfc\n.text:0000000000404dfe\n.text:0000000000404e05\n.text:0000000000404e0c\n.text:0000000000404e10\n.text:0000000000404e12\n.text:0000000000404e17\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e28\n.text:0000000000404e2f\n.text:0000000000404e32\n.text:0000000000404e3a\n.text:0000000000404e41\n.text:0000000000404e46\n.text:0000000000404e4b\n.text:0000000000404e53\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5e\n.text:0000000000404e62\n.text:0000000000404e70\n.text:0000000000404e75\n.text:0000000000404e78\n.text:0000000000404e80\n.text:0000000000404e83\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e8e\n.text:0000000000404e94\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404ea0\n.text:0000000000404ea2\n.text:0000000000404ea8\n.text:0000000000404ead\n.text:0000000000404eaf\n.text:0000000000404eb1\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eb9\n.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec5\n.text:0000000000404ec8\n.text:0000000000404ecd\n.text:0000000000404ed0\n.text:0000000000404ed3\n.text:0000000000404eda\n.text:0000000000404edc\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404eec\n.text:0000000000404eee\n.text:0000000000404ef0\n.text:0000000000404ef7\n.text:0000000000404ef9\n.text:0000000000404eff\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f0e\n.text:0000000000404f20\n.text:0000000000404f25\n.text:0000000000404f28\n.text:0000000000404f2a\n.text:0000000000404f2c\n.text:0000000000404f31\n.text:0000000000404f36\n.text:0000000000404f3b\n.text:0000000000404f3f\n.text:0000000000404f42\n.text:0000000000404f45\n.text:0000000000404f4a\n.text:0000000000404f4f\n.text:0000000000404f51\n.text:0000000000404f54\n.text:0000000000404f59\n.text:0000000000404f5c\n.text:0000000000404f61\n.text:0000000000404f63\n.text:0000000000404f65\n.text:0000000000404f67\n.text:0000000000404f6c\n.text:0000000000404f71\n.text:0000000000404f76\n.text:0000000000404f7a\n.text:0000000000404f7d\n.text:0000000000404f80\n.text:0000000000404f85\n.text:0000000000404f8a\n.text:0000000000404f91\n.text:0000000000404f93\n.text:0000000000404f95\n.text:0000000000404f98\n.text:0000000000404f9d\n.text:0000000000404fa4\n.text:0000000000404fa6\n.text:0000000000404fad\n.text:0000000000404fb3\n.text:0000000000404fba\n.text:0000000000404fbc\n.text:0000000000404fc3\n.text:0000000000404fc8\n.text:0000000000404fcd\n.text:0000000000404fd5\n.text:0000000000404fd7\n.text:0000000000404fdc\n.text:0000000000404fe1\n.text:0000000000404fe6\n.text:0000000000404fe9\n.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff8\n.text:0000000000404ffb\n.text:0000000000405000\n.text:0000000000405007\n.text:000000000040500c\n.text:0000000000405011\n.text:0000000000405018\n.text:000000000040501e\n.text:0000000000405025\n.text:000000000040502a\n.text:000000000040502f\n.text:0000000000405032\n.text:0000000000405037\n.text:000000000040503a\n.text:0000000000405041\n.text:0000000000405044\n.text:0000000000405049\n.text:000000000040504c\n.text:0000000000405051\n.text:0000000000405058\n.text:000000000040505d\n.text:0000000000405062\n.text:0000000000405069\n.text:0000000000405071\n.text:0000000000405073\n.text:0000000000405078\n.text:000000000040507f\n.text:0000000000405080\n.text:0000000000405082\n.text:0000000000405084\n.text:0000000000405086\n.text:0000000000405088\n.text:0000000000405089\n'
p2533
tp2534
sS'rotl8'
p2535
(S'\n__stdcall rotl8()\n'
p2536
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p2537
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p2538
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p2539
S'.text:0000000000410b00\n.text:0000000000410b02\n.text:0000000000410b04\n.text:0000000000410b06\n.text:0000000000410b0b\n.text:0000000000410b0d\n.text:0000000000410b0f\n.text:0000000000410b11\n.text:0000000000410b13\n'
p2540
tp2541
sS'hard_locale'
p2542
(S'\n__stdcall hard_locale()\n'
p2543
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2544
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x004025a0\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040984d\nCMP byte ptr [RAX],0x43\nJNZ 0x0040983a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040984b\nMOV ESI,0x416d9f\nMOV RDI,RAX\nCALL 0x004023f0\nTEST EAX,EAX\nJNZ 0x0040984d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p2545
S'53\n31 f6\ne8 78 8d ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 9f 6d 41 00\n48 89 c7\ne8 a9 8b ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p2546
S'.text:0000000000409820\n.text:0000000000409821\n.text:0000000000409823\n.text:0000000000409828\n.text:000000000040982a\n.text:000000000040982d\n.text:000000000040982f\n.text:0000000000409832\n.text:0000000000409834\n.text:0000000000409838\n.text:000000000040983a\n.text:000000000040983f\n.text:0000000000409842\n.text:0000000000409847\n.text:0000000000409849\n.text:000000000040984b\n.text:000000000040984d\n.text:000000000040984f\n.text:0000000000409850\n'
p2547
tp2548
sS'getgrgid'
p2549
(S'\n__stdcall getgrgid(__gid_t __gid)\n'
p2550
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrgid(__gid_t __gid)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrgid_0061d140)();\u000a  return pgVar1;\u000a}\u000a\u000a
p2551
S'JMP qword ptr [0x0061d140]\n'
p2552
S'ff 25 5a ae 21 00\n'
p2553
S'.plt:00000000004022e0\n'
p2554
tp2555
sS'rev_xstrcoll_df_extension'
p2556
(S'\n__stdcall rev_xstrcoll_df_extension(V a, V b)\n'
p2557
V\u000aint rev_xstrcoll_df_extension(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_extension((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2558
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040680a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040682d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040682d\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004071b0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2559
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 d0 fc ff ff\n89 c3\n4c 89 f7\ne8 c6 fc ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 83 09 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2560
S'.text:00000000004067e0\n.text:00000000004067e2\n.text:00000000004067e4\n.text:00000000004067e5\n.text:00000000004067e8\n.text:00000000004067eb\n.text:00000000004067f0\n.text:00000000004067f2\n.text:00000000004067f5\n.text:00000000004067fa\n.text:00000000004067fc\n.text:00000000004067fe\n.text:0000000000406800\n.text:0000000000406803\n.text:0000000000406808\n.text:000000000040680a\n.text:000000000040680c\n.text:000000000040680e\n.text:0000000000406813\n.text:0000000000406816\n.text:0000000000406818\n.text:000000000040681d\n.text:0000000000406820\n.text:0000000000406823\n.text:0000000000406824\n.text:0000000000406826\n.text:0000000000406828\n.text:000000000040682d\n.text:000000000040682f\n.text:0000000000406830\n.text:0000000000406832\n.text:0000000000406834\n'
p2561
tp2562
sS'strcmp_extension'
p2563
(S'\n__stdcall strcmp_extension(V a, V b)\n'
p2564
V\u000aint strcmp_extension(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_extension((fileinfo *)a,(fileinfo *)b,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p2565
S'MOV EDX,0x4023f0\nJMP 0x004071b0\n'
p2566
S'ba f0 23 40 00\ne9 66 09 00 00\n'
p2567
S'.text:0000000000406840\n.text:0000000000406845\n'
p2568
tp2569
sS'rev_xstrcoll_df_name'
p2570
(S'\n__stdcall rev_xstrcoll_df_name(V a, V b)\n'
p2571
V\u000aint rev_xstrcoll_df_name(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_name((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2572
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040662a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040664d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040664d\nMOV EDX,0x407180\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407170\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2573
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 b0 fe ff ff\n89 c3\n4c 89 f7\ne8 a6 fe ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 23 0b 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2574
S'.text:0000000000406600\n.text:0000000000406602\n.text:0000000000406604\n.text:0000000000406605\n.text:0000000000406608\n.text:000000000040660b\n.text:0000000000406610\n.text:0000000000406612\n.text:0000000000406615\n.text:000000000040661a\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406620\n.text:0000000000406623\n.text:0000000000406628\n.text:000000000040662a\n.text:000000000040662c\n.text:000000000040662e\n.text:0000000000406633\n.text:0000000000406636\n.text:0000000000406638\n.text:000000000040663d\n.text:0000000000406640\n.text:0000000000406643\n.text:0000000000406644\n.text:0000000000406646\n.text:0000000000406648\n.text:000000000040664d\n.text:000000000040664f\n.text:0000000000406650\n.text:0000000000406652\n.text:0000000000406654\n'
p2575
tp2576
sS'is_colored'
p2577
(S'\n__stdcall is_colored()\n'
p2578
V\u000a_Bool is_colored(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  int iVar2;\u000a  ulong in_RDI;\u000a  \u000a  sVar1 = color_indicator[in_RDI & 0xffffffff].len;\u000a  if (sVar1 == 0) {\u000a    return false;\u000a  }\u000a  if (sVar1 != 2) {\u000a    if ((sVar1 == 1) && (*color_indicator[in_RDI & 0xffffffff].string == '0')) {\u000a      return false;\u000a    }\u000a    return true;\u000a  }\u000a  iVar2 = strncmp(color_indicator[in_RDI & 0xffffffff].string,"00",2);\u000a  return (_Bool)(iVar2 != 0);\u000a}\u000a\u000a
p2579
S'MOV ECX,EDI\nSHL RCX,0x4\nMOV RAX,qword ptr [0x61d380 + RCX]\nTEST RAX,RAX\nJZ 0x00403f20\nMOV RDI,qword ptr [0x61d388 + RCX]\nCMP RAX,0x2\nJZ 0x00403f23\nCMP RAX,0x1\nJNZ 0x00403f1d\nCMP byte ptr [RDI],0x30\nJNZ 0x00403f1d\nXOR EAX,EAX\nRET\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nMOV ESI,0x416347\nMOV EDX,0x2\nCALL 0x00402120\nTEST EAX,EAX\nSETNZ AL\nADD RSP,0x8\nRET\n'
p2580
S'89 f9\n48 c1 e1 04\n48 8b 81 80 d3 61 00\n48 85 c0\n74 1e\n48 8b b9 88 d3 61 00\n48 83 f8 02\n74 14\n48 83 f8 01\n75 08\n80 3f 30\n75 03\n31 c0\nc3\nb0 01\nc3\n31 c0\nc3\n50\nbe 47 63 41 00\nba 02 00 00 00\ne8 ed e1 ff ff\n85 c0\n0f 95 c0\n48 83 c4 08\nc3\n'
p2581
S'.text:0000000000403ef0\n.text:0000000000403ef2\n.text:0000000000403ef6\n.text:0000000000403efd\n.text:0000000000403f00\n.text:0000000000403f02\n.text:0000000000403f09\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f13\n.text:0000000000403f15\n.text:0000000000403f18\n.text:0000000000403f1a\n.text:0000000000403f1c\n.text:0000000000403f1d\n.text:0000000000403f1f\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f23\n.text:0000000000403f24\n.text:0000000000403f29\n.text:0000000000403f2e\n.text:0000000000403f33\n.text:0000000000403f35\n.text:0000000000403f38\n.text:0000000000403f3c\n'
p2582
tp2583
sS'textdomain'
p2584
(S'\n__stdcall textdomain()\n'
p2585
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0061d0d8)();\u000a  return;\u000a}\u000a\u000a
p2586
S'JMP qword ptr [0x0061d0d8]\n'
p2587
S'ff 25 c2 ae 21 00\n'
p2588
S'.plt:0000000000402210\n'
p2589
tp2590
sS'print_horizontal'
p2591
(S'\n__stdcall print_horizontal()\n'
p2592
V\u000avoid print_horizontal(void)\u000a\u000a{\u000a  fileinfo *f;\u000a  column_info *pcVar1;\u000a  size_t sVar2;\u000a  size_t from;\u000a  ulong uVar3;\u000a  long lVar4;\u000a  size_t to;\u000a  \u000a  sVar2 = calculate_columns();\u000a  pcVar1 = column_info;\u000a  from = length_of_file_name_and_frills((fileinfo *)*sorted_file);\u000a  lVar4 = *(long *)pcVar1[sVar2].line_len;\u000a  print_file_name_and_frills();\u000a  if (1 < cwd_n_used) {\u000a    to = 0;\u000a    uVar3 = 1;\u000a    do {\u000a      if (uVar3 % sVar2 == 0) {\u000a        putchar_unlocked(10);\u000a        to = 0;\u000a      }\u000a      else {\u000a        from = from + to;\u000a        to = to + lVar4;\u000a        indent(from,to);\u000a      }\u000a      f = (fileinfo *)sorted_file[uVar3];\u000a      print_file_name_and_frills();\u000a      from = length_of_file_name_and_frills(f);\u000a      lVar4 = *(long *)(pcVar1[sVar2].line_len + (uVar3 % sVar2) * 8);\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < cwd_n_used);\u000a  }\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p2593
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nXOR EDI,EDI\nCALL 0x00408570\nMOV R15,qword ptr [0x0061e168]\nMOV qword ptr [RSP],RAX\nLEA RBP,[RAX + RAX*0x2]\nMOV RAX,qword ptr [0x0061e048]\nMOV RBX,qword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00408440\nMOV R12,RAX\nMOV RAX,qword ptr [R15 + RBP*0x8 + -0x8]\nMOV R14,qword ptr [RAX]\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00407380\nCMP qword ptr [0x0061d808],0x2\nJC 0x004077a2\nLEA RBP,[R15 + RBP*0x8 + -0x8]\nXOR R15D,R15D\nMOV EBX,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV RAX,RBX\nDIV qword ptr [RSP]\nMOV R13,RDX\nTEST R13,R13\nJZ 0x00407760\nADD R12,R15\nADD R15,R14\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x004086d0\nJMP 0x0040776d\nMOV EDI,0xa\nCALL 0x00402460\nXOR R15D,R15D\nMOV RAX,qword ptr [0x0061e048]\nMOV R12,qword ptr [RAX + RBX*0x8]\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x00407380\nMOV RDI,R12\nCALL 0x00408440\nMOV R12,RAX\nMOV RAX,qword ptr [RBP]\nMOV R14,qword ptr [RAX + R13*0x8]\nINC RBX\nCMP RBX,qword ptr [0x0061d808]\nJC 0x00407730\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402460\n'
p2594
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n31 ff\ne8 9e 0e 00 00\n4c 8b 3d 8f 6a 21 00\n48 89 04 24\n48 8d 2c 40\n48 8b 05 60 69 21 00\n48 8b 18\n48 89 df\ne8 4d 0d 00 00\n49 89 c4\n49 8b 44 ef f8\n4c 8b 30\n31 f6\n48 89 df\ne8 78 fc ff ff\n48 83 3d f8 60 21 00 02\n0f 82 8c 00 00 00\n49 8d 6c ef f8\n45 31 ff\nbb 01 00 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n48 89 d8\n48 f7 34 24\n49 89 d5\n4d 85 ed\n74 1f\n4d 01 fc\n4d 01 f7\n4c 89 e7\n4c 89 fe\ne8 7e 0f 00 00\neb 19\nbf 0a 00 00 00\ne8 f6 ac ff ff\n45 31 ff\n48 8b 05 d4 68 21 00\n4c 8b 24 d8\n4c 89 e7\n4c 89 fe\ne8 fd fb ff ff\n4c 89 e7\ne8 b5 0c 00 00\n49 89 c4\n48 8b 45 00\n4e 8b 34 e8\n48 ff c3\n48 3b 1d 68 60 21 00\n72 8e\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a6 ac ff ff\n'
p2595
S'.text:00000000004076c0\n.text:00000000004076c1\n.text:00000000004076c3\n.text:00000000004076c5\n.text:00000000004076c7\n.text:00000000004076c9\n.text:00000000004076ca\n.text:00000000004076cb\n.text:00000000004076cd\n.text:00000000004076d2\n.text:00000000004076d9\n.text:00000000004076dd\n.text:00000000004076e1\n.text:00000000004076e8\n.text:00000000004076eb\n.text:00000000004076ee\n.text:00000000004076f3\n.text:00000000004076f6\n.text:00000000004076fb\n.text:00000000004076fe\n.text:0000000000407700\n.text:0000000000407703\n.text:0000000000407708\n.text:0000000000407710\n.text:0000000000407716\n.text:000000000040771b\n.text:000000000040771e\n.text:0000000000407723\n.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407735\n.text:0000000000407739\n.text:000000000040773c\n.text:000000000040773f\n.text:0000000000407741\n.text:0000000000407744\n.text:0000000000407747\n.text:000000000040774a\n.text:000000000040774d\n.text:0000000000407752\n.text:0000000000407760\n.text:0000000000407765\n.text:000000000040776a\n.text:000000000040776d\n.text:0000000000407774\n.text:0000000000407778\n.text:000000000040777b\n.text:000000000040777e\n.text:0000000000407783\n.text:0000000000407786\n.text:000000000040778b\n.text:000000000040778e\n.text:0000000000407792\n.text:0000000000407796\n.text:0000000000407799\n.text:00000000004077a0\n.text:00000000004077a2\n.text:00000000004077a7\n.text:00000000004077ab\n.text:00000000004077ac\n.text:00000000004077ae\n.text:00000000004077b0\n.text:00000000004077b2\n.text:00000000004077b4\n.text:00000000004077b5\n'
p2596
tp2597
sS'change_env'
p2598
(S'\n__stdcall change_env(timezone_t tz)\n'
p2599
V\u000a_Bool change_env(timezone_t tz)\u000a\u000a{\u000a  int iVar1;\u000a  char *tz_00;\u000a  \u000a  tz_00 = tz->abbrs;\u000a  if (tz->tz_is_set == 0) {\u000a    tz_00 = (char *)0x0;\u000a  }\u000a  iVar1 = setenv_TZ(tz_00);\u000a  if (iVar1 == 0) {\u000a    tzset();\u000a  }\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p2600
S'PUSH RBX\nXOR EBX,EBX\nCMP byte ptr [RDI + 0x8],0x0\nLEA RDI,[RDI + 0x9]\nCMOVZ RDI,RBX\nCALL 0x00410a20\nTEST EAX,EAX\nJNZ 0x00410a0f\nCALL 0x00402470\nMOV BL,0x1\nMOV EAX,EBX\nPOP RBX\nRET\n'
p2601
S'53\n31 db\n80 7f 08 00\n48 8d 7f 09\n48 0f 44 fb\ne8 1c 00 00 00\n85 c0\n75 07\ne8 63 1a ff ff\nb3 01\n89 d8\n5b\nc3\n'
p2602
S'.text:00000000004109f0\n.text:00000000004109f1\n.text:00000000004109f3\n.text:00000000004109f7\n.text:00000000004109fb\n.text:00000000004109ff\n.text:0000000000410a04\n.text:0000000000410a06\n.text:0000000000410a08\n.text:0000000000410a0d\n.text:0000000000410a0f\n.text:0000000000410a11\n.text:0000000000410a12\n'
p2603
tp2604
sS'time_t_avg'
p2605
(S'\n__stdcall time_t_avg(time_t a, time_t b)\n'
p2606
V\u000atime_t time_t_avg(time_t a,time_t b)\u000a\u000a{\u000a  return (ulong)((uint)a & (uint)b & 1) + (b >> 1) + (a >> 1);\u000a}\u000a\u000a
p2607
S'MOV RAX,RDI\nSAR RAX,1\nAND EDI,ESI\nSAR RSI,1\nLEA RAX,[RSI + RAX*0x1]\nAND EDI,0x1\nADD RDI,RAX\nMOV RAX,RDI\nRET\n'
p2608
S'48 89 f8\n48 d1 f8\n21 f7\n48 d1 fe\n48 8d 04 06\n83 e7 01\n48 01 c7\n48 89 f8\nc3\n'
p2609
S'.text:00000000004118a0\n.text:00000000004118a3\n.text:00000000004118a6\n.text:00000000004118a8\n.text:00000000004118ab\n.text:00000000004118af\n.text:00000000004118b2\n.text:00000000004118b5\n.text:00000000004118b8\n'
p2610
tp2611
sS'nstrftime'
p2612
(S'\n__stdcall nstrftime(char * s, size_t maxsize, char * format, tm * tp, timezone_t tz)\n'
p2613
V\u000asize_t nstrftime(char *s,size_t maxsize,char *format,tm *tp,timezone_t tz)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strftime_case_((char *)0x0,(size_t)s,(char *)maxsize,(tm *)format,(timezone_t)tp);\u000a  return sVar1;\u000a}\u000a\u000a
p2614
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nMOV dword ptr [RSP],R9D\nXOR EDI,EDI\nMOV R8,RAX\nMOV R9,R10\nCALL 0x0040daf0\nPOP RCX\nRET\n'
p2615
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n44 89 0c 24\n31 ff\n49 89 c0\n4d 89 d1\ne8 0f 00 00 00\n59\nc3\n'
p2616
S'.text:000000000040dac0\n.text:000000000040dac1\n.text:000000000040dac4\n.text:000000000040dac7\n.text:000000000040daca\n.text:000000000040dacd\n.text:000000000040dad0\n.text:000000000040dad4\n.text:000000000040dad6\n.text:000000000040dad9\n.text:000000000040dadc\n.text:000000000040dae1\n.text:000000000040dae2\n'
p2617
tp2618
sS'ferror_unlocked'
p2619
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p2620
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0061d1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2621
S'JMP qword ptr [0x0061d1b8]\n'
p2622
S'ff 25 e2 ad 21 00\n'
p2623
S'.plt:00000000004023d0\n'
p2624
tp2625
sS'locale_charset'
p2626
(S'\n__stdcall locale_charset()\n'
p2627
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00410d7d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00410d7d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p2628
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00402500\nTEST RAX,RAX\nMOV R14D,0x417ce1\nCMOVNZ R14,RAX\nCALL 0x00410d90\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00410d55\nJMP 0x00410d7d\nMOV RDI,RBX\nCALL 0x00402290\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00402290\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00410d7d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x00410d70\nCMP BPL,0x2a\nJNZ 0x00410d30\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00410d30\nMOV RDI,RBX\nCALL 0x00402290\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x418800\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2629
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 f2 17 ff ff\n48 85 c0\n41 be e1 7c 41 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 58 15 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 4a 15 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 90 16 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 18 15 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 00 88 41 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p2630
S'.text:0000000000410d00\n.text:0000000000410d01\n.text:0000000000410d03\n.text:0000000000410d04\n.text:0000000000410d09\n.text:0000000000410d0e\n.text:0000000000410d11\n.text:0000000000410d17\n.text:0000000000410d1b\n.text:0000000000410d20\n.text:0000000000410d23\n.text:0000000000410d26\n.text:0000000000410d29\n.text:0000000000410d2b\n.text:0000000000410d30\n.text:0000000000410d33\n.text:0000000000410d38\n.text:0000000000410d3c\n.text:0000000000410d41\n.text:0000000000410d46\n.text:0000000000410d4b\n.text:0000000000410d50\n.text:0000000000410d53\n.text:0000000000410d55\n.text:0000000000410d58\n.text:0000000000410d5b\n.text:0000000000410d60\n.text:0000000000410d62\n.text:0000000000410d64\n.text:0000000000410d68\n.text:0000000000410d6a\n.text:0000000000410d6e\n.text:0000000000410d70\n.text:0000000000410d73\n.text:0000000000410d78\n.text:0000000000410d7d\n.text:0000000000410d81\n.text:0000000000410d86\n.text:0000000000410d8a\n.text:0000000000410d8b\n.text:0000000000410d8d\n.text:0000000000410d8e\n'
p2631
tp2632
sS'set_program_name'
p2633
(S'\n__stdcall set_program_name(char * argv0)\n'
p2634
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p2635
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040bfc1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004022f0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040bfab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x417240\nMOV EDX,0x7\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x0040bfab\nMOV ESI,0x417248\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x0040bfa8\nADD R14,0x3\nMOV qword ptr [0x0061d5c0],R14\nMOV RBX,R14\nMOV qword ptr [0x0061e1a8],RBX\nMOV qword ptr [0x0061d5e0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0061d600]\nMOV EDI,0x417208\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004026a0\nCALL 0x00402100\n'
p2636
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 97 63 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 40 72 41 00\nba 07 00 00 00\ne8 9d 61 ff ff\n85 c0\n75 24\nbe 48 72 41 00\nba 03 00 00 00\n4c 89 f7\ne8 87 61 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 16 21 00\n4c 89 f3\n48 89 1d f6 21 21 00\n48 89 1d 27 16 21 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 38 16 21 00\nbf 08 72 41 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 c4 66 ff ff\ne8 1f 61 ff ff\n'
p2637
S'.text:000000000040bf40\n.text:000000000040bf42\n.text:000000000040bf43\n.text:000000000040bf44\n.text:000000000040bf47\n.text:000000000040bf4a\n.text:000000000040bf4c\n.text:000000000040bf51\n.text:000000000040bf54\n.text:000000000040bf59\n.text:000000000040bf5c\n.text:000000000040bf60\n.text:000000000040bf64\n.text:000000000040bf67\n.text:000000000040bf6a\n.text:000000000040bf6e\n.text:000000000040bf70\n.text:000000000040bf74\n.text:000000000040bf79\n.text:000000000040bf7e\n.text:000000000040bf83\n.text:000000000040bf85\n.text:000000000040bf87\n.text:000000000040bf8c\n.text:000000000040bf91\n.text:000000000040bf94\n.text:000000000040bf99\n.text:000000000040bf9b\n.text:000000000040bf9d\n.text:000000000040bfa1\n.text:000000000040bfa8\n.text:000000000040bfab\n.text:000000000040bfb2\n.text:000000000040bfb9\n.text:000000000040bfbd\n.text:000000000040bfbe\n.text:000000000040bfc0\n.text:000000000040bfc1\n.text:000000000040bfc8\n.text:000000000040bfcd\n.text:000000000040bfd2\n.text:000000000040bfd7\n.text:000000000040bfdc\n'
p2638
tp2639
sS'clear_files'
p2640
(S'\n__stdcall clear_files()\n'
p2641
V\u000avoid clear_files(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  if (cwd_n_used != 0) {\u000a    uVar1 = 0;\u000a    do {\u000a      free_ent((fileinfo *)sorted_file[uVar1]);\u000a      uVar1 = uVar1 + 1;\u000a    } while (uVar1 < cwd_n_used);\u000a  }\u000a  cwd_n_used = 0;\u000a  any_has_acl = false;\u000a  inode_number_width = 0;\u000a  block_size_width = 0;\u000a  nlink_width = 0;\u000a  owner_width = 0;\u000a  group_width = 0;\u000a  author_width = 0;\u000a  scontext_width = 0;\u000a  major_device_number_width = 0;\u000a  minor_device_number_width = 0;\u000a  file_size_width = 0;\u000a  return;\u000a}\u000a\u000a
p2642
S'PUSH RBX\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00403fcc\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x0061e048]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00406130\nINC RBX\nCMP RBX,qword ptr [0x0061d808]\nJC 0x00403fb0\nMOV qword ptr [0x0061d808],0x0\nMOV byte ptr [0x0061e050],0x0\nMOV dword ptr [0x0061e054],0x0\nMOV dword ptr [0x0061e058],0x0\nMOV dword ptr [0x0061e05c],0x0\nMOV dword ptr [0x0061e060],0x0\nMOV dword ptr [0x0061e064],0x0\nMOV dword ptr [0x0061e068],0x0\nMOV dword ptr [0x0061e06c],0x0\nMOV dword ptr [0x0061e070],0x0\nMOV dword ptr [0x0061e074],0x0\nMOV dword ptr [0x0061e078],0x0\nPOP RBX\nRET\n'
p2643
S'53\n48 83 3d 5f 98 21 00 00\n74 21\n31 db\n0f 1f 00\n48 8b 05 91 a0 21 00\n48 8b 3c d8\ne8 70 21 00 00\n48 ff c3\n48 3b 1d 3e 98 21 00\n72 e4\n48 c7 05 31 98 21 00 00 00 00 00\nc6 05 72 a0 21 00 00\nc7 05 6c a0 21 00 00 00 00 00\nc7 05 66 a0 21 00 00 00 00 00\nc7 05 60 a0 21 00 00 00 00 00\nc7 05 5a a0 21 00 00 00 00 00\nc7 05 54 a0 21 00 00 00 00 00\nc7 05 4e a0 21 00 00 00 00 00\nc7 05 48 a0 21 00 00 00 00 00\nc7 05 42 a0 21 00 00 00 00 00\nc7 05 3c a0 21 00 00 00 00 00\nc7 05 36 a0 21 00 00 00 00 00\n5b\nc3\n'
p2644
S'.text:0000000000403fa0\n.text:0000000000403fa1\n.text:0000000000403fa9\n.text:0000000000403fab\n.text:0000000000403fad\n.text:0000000000403fb0\n.text:0000000000403fb7\n.text:0000000000403fbb\n.text:0000000000403fc0\n.text:0000000000403fc3\n.text:0000000000403fca\n.text:0000000000403fcc\n.text:0000000000403fd7\n.text:0000000000403fde\n.text:0000000000403fe8\n.text:0000000000403ff2\n.text:0000000000403ffc\n.text:0000000000404006\n.text:0000000000404010\n.text:000000000040401a\n.text:0000000000404024\n.text:000000000040402e\n.text:0000000000404038\n.text:0000000000404042\n.text:0000000000404043\n'
p2645
tp2646
sS'xstrcoll_ctime'
p2647
(S'\n__stdcall xstrcoll_ctime(V a, V b)\n'
p2648
V\u000aint xstrcoll_ctime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_ctime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p2649
S'MOV EDX,0x407180\nJMP 0x004072c0\n'
p2650
S'ba 80 71 40 00\ne9 06 05 00 00\n'
p2651
S'.text:0000000000406db0\n.text:0000000000406db5\n'
p2652
tp2653
sS'quotearg_buffer'
p2654
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p2655
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p2656
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x61e1b0\nCMOVNZ RBP,R8\nCALL 0x00402110\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x0040c160\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2657
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd b0 e1 61 00\n49 0f 45 e8\ne8 08 60 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2658
S'.text:000000000040c0e0\n.text:000000000040c0e1\n.text:000000000040c0e3\n.text:000000000040c0e5\n.text:000000000040c0e7\n.text:000000000040c0e9\n.text:000000000040c0ea\n.text:000000000040c0eb\n.text:000000000040c0ee\n.text:000000000040c0f1\n.text:000000000040c0f4\n.text:000000000040c0f7\n.text:000000000040c0fa\n.text:000000000040c0ff\n.text:000000000040c103\n.text:000000000040c108\n.text:000000000040c10b\n.text:000000000040c10d\n.text:000000000040c111\n.text:000000000040c115\n.text:000000000040c119\n.text:000000000040c11d\n.text:000000000040c120\n.text:000000000040c123\n.text:000000000040c126\n.text:000000000040c129\n.text:000000000040c12c\n.text:000000000040c12f\n.text:000000000040c133\n.text:000000000040c134\n.text:000000000040c139\n.text:000000000040c13d\n.text:000000000040c141\n.text:000000000040c143\n.text:000000000040c147\n.text:000000000040c148\n.text:000000000040c14a\n.text:000000000040c14c\n.text:000000000040c14e\n.text:000000000040c150\n.text:000000000040c151\n'
p2659
tp2660
sS'dev_ino_push'
p2661
(S'\n__stdcall dev_ino_push(dev_t dev, ino_t ino)\n'
p2662
V\u000avoid dev_ino_push(dev_t dev,ino_t ino)\u000a\u000a{\u000a  dev_t *pdVar1;\u000a  char *pcVar2;\u000a  \u000a  if (dev_ino_obstack.chunk_limit + -(long)dev_ino_obstack.next_free < &DAT_00000010) {\u000a    _obstack_newchunk(&dev_ino_obstack,0x10);\u000a  }\u000a  pcVar2 = dev_ino_obstack.next_free;\u000a  pdVar1 = (dev_t *)(dev_ino_obstack.next_free + 8);\u000a  dev_ino_obstack.next_free = dev_ino_obstack.next_free + 0x10;\u000a  *pdVar1 = dev;\u000a  *(ino_t *)pcVar2 = ino;\u000a  return;\u000a}\u000a\u000a
p2663
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0061d6f8]\nSUB RAX,qword ptr [0x0061d6f0]\nCMP RAX,0xf\nJA 0x00405cbd\nMOV EDI,0x61d6d8\nMOV ESI,0x10\nCALL 0x00410360\nMOV RAX,qword ptr [0x0061d6f0]\nLEA RCX,[RAX + 0x10]\nMOV qword ptr [0x0061d6f0],RCX\nMOV qword ptr [RAX + 0x8],RBX\nMOV qword ptr [RAX],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2664
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 05 57 7a 21 00\n48 2b 05 48 7a 21 00\n48 83 f8 0f\n77 0f\nbf d8 d6 61 00\nbe 10 00 00 00\ne8 a3 a6 00 00\n48 8b 05 2c 7a 21 00\n48 8d 48 10\n48 89 0d 21 7a 21 00\n48 89 58 08\n4c 89 30\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2665
S'.text:0000000000405c90\n.text:0000000000405c92\n.text:0000000000405c93\n.text:0000000000405c94\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405ca1\n.text:0000000000405ca8\n.text:0000000000405cac\n.text:0000000000405cae\n.text:0000000000405cb3\n.text:0000000000405cb8\n.text:0000000000405cbd\n.text:0000000000405cc4\n.text:0000000000405cc8\n.text:0000000000405ccf\n.text:0000000000405cd3\n.text:0000000000405cd6\n.text:0000000000405cda\n.text:0000000000405cdb\n.text:0000000000405cdd\n'
p2666
tp2667
sS'get_stat_ctime'
p2668
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p2669
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p2670
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p2671
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p2672
S'.text:000000000040da90\n.text:000000000040da94\n.text:000000000040da98\n'
p2673
tp2674
sS'rpl_fflush'
p2675
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p2676
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0061d248)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p2677
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004110cd\nMOV RDI,RBX\nCALL 0x00402540\nTEST EAX,EAX\nJZ 0x004110cd\nMOV RDI,RBX\nCALL 0x004110e0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004024f0\n'
p2678
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 7f 14 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 1a 14 ff ff\n'
p2679
S'.text:00000000004110b0\n.text:00000000004110b1\n.text:00000000004110b4\n.text:00000000004110b7\n.text:00000000004110b9\n.text:00000000004110bc\n.text:00000000004110c1\n.text:00000000004110c3\n.text:00000000004110c5\n.text:00000000004110c8\n.text:00000000004110cd\n.text:00000000004110d0\n.text:00000000004110d1\n'
p2680
tp2681
sS'strcmp_df_mtime'
p2682
(S'\n__stdcall strcmp_df_mtime(V a, V b)\n'
p2683
V\u000aint strcmp_df_mtime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_mtime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2684
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406cfa\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406d1d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406d1d\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407260\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2685
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 e0 f7 ff ff\n89 c3\n4c 89 f7\ne8 d6 f7 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 43 05 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2686
S'.text:0000000000406cd0\n.text:0000000000406cd2\n.text:0000000000406cd4\n.text:0000000000406cd5\n.text:0000000000406cd8\n.text:0000000000406cdb\n.text:0000000000406ce0\n.text:0000000000406ce2\n.text:0000000000406ce5\n.text:0000000000406cea\n.text:0000000000406cec\n.text:0000000000406cee\n.text:0000000000406cf0\n.text:0000000000406cf3\n.text:0000000000406cf8\n.text:0000000000406cfa\n.text:0000000000406cfc\n.text:0000000000406cfe\n.text:0000000000406d03\n.text:0000000000406d06\n.text:0000000000406d08\n.text:0000000000406d0d\n.text:0000000000406d10\n.text:0000000000406d13\n.text:0000000000406d14\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d1d\n.text:0000000000406d1f\n.text:0000000000406d20\n.text:0000000000406d22\n.text:0000000000406d24\n'
p2687
tp2688
sS'timespectod'
p2689
(S'\n__stdcall timespectod()\n'
p2690
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble timespectod(void)\u000a\u000a{\u000a  long in_RSI;\u000a  long in_RDI;\u000a  \u000a  return (double)in_RSI / _DAT_00417ba8 + (double)in_RDI;\u000a}\u000a\u000a
p2691
S'CVTSI2SD XMM1,RDI\nCVTSI2SD XMM0,RSI\nDIVSD XMM0,qword ptr [0x00417ba8]\nADDSD XMM0,XMM1\nRET\n'
p2692
S'f2 48 0f 2a cf\nf2 48 0f 2a c6\nf2 0f 5e 05 c6 87 00 00\nf2 0f 58 c1\nc3\n'
p2693
S'.text:000000000040f3d0\n.text:000000000040f3d5\n.text:000000000040f3da\n.text:000000000040f3e2\n.text:000000000040f3e6\n'
p2694
tp2695
sS'save_abbr'
p2696
(S'\n__stdcall save_abbr(timezone_t tz, tm * tm)\n'
p2697
V\u000a_Bool save_abbr(timezone_t tz,tm *tm)\u000a\u000a{\u000a  char *pcVar1;\u000a  tm *__s2;\u000a  tm_zone *ptVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  timezone_t ptVar5;\u000a  char *pcVar6;\u000a  char *__s1;\u000a  \u000a  __s2 = (tm *)tm->tm_zone;\u000a  if ((__s2 != (tm *)0x0) && ((__s2 < tm || (tm + 1 <= __s2)))) {\u000a    if (*(char *)&__s2->tm_sec != 0) {\u000a      pcVar6 = tz->abbrs;\u000a      do {\u000a        __s1 = pcVar6;\u000a        do {\u000a          iVar3 = strcmp(__s1,(char *)__s2);\u000a          if (iVar3 == 0) goto LAB_00410871;\u000a          if ((*__s1 == 0) && ((__s1 != tz->abbrs || (tz->tz_is_set == 0)))) {\u000a            sVar4 = strlen((char *)__s2);\u000a            if (sVar4 + 1 < (ulong)((long)tz + (0x80 - (long)__s1))) {\u000a              extend_abbrs(__s1,(char *)__s2,sVar4 + 1);\u000a            }\u000a            else {\u000a              ptVar5 = tzalloc((char *)__s2);\u000a              *(timezone_t *)&tz->next = ptVar5;\u000a              if (ptVar5 == (timezone_t)0x0) {\u000a                return false;\u000a              }\u000a              ptVar5->tz_is_set = 0;\u000a              __s1 = ptVar5->abbrs;\u000a            }\u000a            goto LAB_00410871;\u000a          }\u000a          sVar4 = strlen(__s1);\u000a          pcVar6 = __s1 + sVar4 + 1;\u000a          pcVar1 = __s1 + sVar4 + 1;\u000a          __s1 = pcVar6;\u000a        } while (*pcVar1 != 0);\u000a        ptVar2 = tz->next;\u000a        if (ptVar2 != (tm_zone *)0x0) {\u000a          pcVar6 = ptVar2->abbrs;\u000a          tz = (timezone_t)ptVar2;\u000a        }\u000a      } while( true );\u000a    }\u000a    __s1 = \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000aLAB_00410871:\u000a    tm->tm_zone = __s1;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2698
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R12,RDI\nMOV RBX,qword ptr [R15 + 0x30]\nMOV R14B,0x1\nTEST RBX,RBX\nJZ 0x00410875\nCMP R15,RBX\nJA 0x004107b3\nLEA RAX,[R15 + 0x38]\nCMP RBX,RAX\nJC 0x00410875\nCMP byte ptr [RBX],0x0\nJZ 0x004107bf\nLEA RBP,[R12 + 0x9]\nJMP 0x004107dc\nMOV EBP,0x417ce1\nJMP 0x00410871\nMOV RAX,qword ptr [R12]\nLEA RBP,[RAX + 0x9]\nTEST RAX,RAX\nCMOVZ RBP,RCX\nCMOVNZ R12,RAX\nLEA R13,[R12 + 0x9]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x00410871\nCMP byte ptr [RBP],0x0\nJNZ 0x00410812\nCMP RBP,R13\nJNZ 0x0041082b\nCMP byte ptr [R12 + 0x8],0x0\nJZ 0x0041082b\nMOV RDI,RBP\nCALL 0x00402290\nLEA RCX,[RBP + RAX*0x1 + 0x1]\nCMP byte ptr [RBP + RAX*0x1 + 0x1],0x0\nMOV RBP,RCX\nJNZ 0x004107f0\nJMP 0x004107c9\nMOV RDI,RBX\nCALL 0x00402290\nINC RAX\nMOV RCX,R12\nSUB RCX,-0x80\nSUB RCX,RBP\nCMP RAX,RCX\nJNC 0x00410855\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00410620\nJMP 0x00410871\nMOV RDI,RBX\nCALL 0x004105b0\nMOV RBP,RAX\nMOV qword ptr [R12],RBP\nTEST RBP,RBP\nJZ 0x00410887\nMOV byte ptr [RBP + 0x8],0x0\nADD RBP,0x9\nMOV qword ptr [R15 + 0x30],RBP\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nJMP 0x00410875\n'
p2699
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f7\n49 89 fc\n49 8b 5f 30\n41 b6 01\n48 85 db\n0f 84 d4 00 00 00\n49 39 df\n77 0d\n49 8d 47 38\n48 39 c3\n0f 82 c2 00 00 00\n80 3b 00\n74 07\n49 8d 6c 24 09\neb 1d\nbd e1 7c 41 00\ne9 a8 00 00 00\n49 8b 04 24\n48 8d 68 09\n48 85 c0\n48 0f 44 e9\n4c 0f 45 e0\n4d 8d 6c 24 09\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\n48 89 de\ne8 f5 1b ff ff\n85 c0\n74 72\n80 7d 00 00\n75 0d\n4c 39 ed\n75 21\n41 80 7c 24 08 00\n74 19\n48 89 ef\ne8 76 1a ff ff\n48 8d 4c 05 01\n80 7c 05 01 00\n48 89 cd\n75 c7\neb 9e\n48 89 df\ne8 5d 1a ff ff\n48 ff c0\n4c 89 e1\n48 83 e9 80\n48 29 e9\n48 39 c8\n73 10\n48 89 ef\n48 89 de\n48 89 c2\ne8 cd fd ff ff\neb 1c\n48 89 df\ne8 53 fd ff ff\n48 89 c5\n49 89 2c 24\n48 85 ed\n74 1e\nc6 45 08 00\n48 83 c5 09\n49 89 6f 30\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\neb e9\n'
p2700
S'.text:0000000000410780\n.text:0000000000410781\n.text:0000000000410783\n.text:0000000000410785\n.text:0000000000410787\n.text:0000000000410789\n.text:000000000041078a\n.text:000000000041078b\n.text:000000000041078e\n.text:0000000000410791\n.text:0000000000410795\n.text:0000000000410798\n.text:000000000041079b\n.text:00000000004107a1\n.text:00000000004107a4\n.text:00000000004107a6\n.text:00000000004107aa\n.text:00000000004107ad\n.text:00000000004107b3\n.text:00000000004107b6\n.text:00000000004107b8\n.text:00000000004107bd\n.text:00000000004107bf\n.text:00000000004107c4\n.text:00000000004107c9\n.text:00000000004107cd\n.text:00000000004107d1\n.text:00000000004107d4\n.text:00000000004107d8\n.text:00000000004107dc\n.text:00000000004107e1\n.text:00000000004107f0\n.text:00000000004107f3\n.text:00000000004107f6\n.text:00000000004107fb\n.text:00000000004107fd\n.text:00000000004107ff\n.text:0000000000410803\n.text:0000000000410805\n.text:0000000000410808\n.text:000000000041080a\n.text:0000000000410810\n.text:0000000000410812\n.text:0000000000410815\n.text:000000000041081a\n.text:000000000041081f\n.text:0000000000410824\n.text:0000000000410827\n.text:0000000000410829\n.text:000000000041082b\n.text:000000000041082e\n.text:0000000000410833\n.text:0000000000410836\n.text:0000000000410839\n.text:000000000041083d\n.text:0000000000410840\n.text:0000000000410843\n.text:0000000000410845\n.text:0000000000410848\n.text:000000000041084b\n.text:000000000041084e\n.text:0000000000410853\n.text:0000000000410855\n.text:0000000000410858\n.text:000000000041085d\n.text:0000000000410860\n.text:0000000000410864\n.text:0000000000410867\n.text:0000000000410869\n.text:000000000041086d\n.text:0000000000410871\n.text:0000000000410875\n.text:0000000000410878\n.text:000000000041087c\n.text:000000000041087d\n.text:000000000041087f\n.text:0000000000410881\n.text:0000000000410883\n.text:0000000000410885\n.text:0000000000410886\n.text:0000000000410887\n.text:000000000041088a\n'
p2701
tp2702
sS'strcmp_df_ctime'
p2703
(S'\n__stdcall strcmp_df_ctime(V a, V b)\n'
p2704
V\u000aint strcmp_df_ctime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_ctime((fileinfo *)a,(fileinfo *)b,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2705
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406eda\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406efd\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406efd\nMOV EDX,0x4023f0\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004072c0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2706
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 00 f6 ff ff\n89 c3\n4c 89 f7\ne8 f6 f5 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 c3 03 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2707
S'.text:0000000000406eb0\n.text:0000000000406eb2\n.text:0000000000406eb4\n.text:0000000000406eb5\n.text:0000000000406eb8\n.text:0000000000406ebb\n.text:0000000000406ec0\n.text:0000000000406ec2\n.text:0000000000406ec5\n.text:0000000000406eca\n.text:0000000000406ecc\n.text:0000000000406ece\n.text:0000000000406ed0\n.text:0000000000406ed3\n.text:0000000000406ed8\n.text:0000000000406eda\n.text:0000000000406edc\n.text:0000000000406ede\n.text:0000000000406ee3\n.text:0000000000406ee6\n.text:0000000000406ee8\n.text:0000000000406eed\n.text:0000000000406ef0\n.text:0000000000406ef3\n.text:0000000000406ef4\n.text:0000000000406ef6\n.text:0000000000406ef8\n.text:0000000000406efd\n.text:0000000000406eff\n.text:0000000000406f00\n.text:0000000000406f02\n.text:0000000000406f04\n'
p2708
tp2709
sS'quotearg_n'
p2710
(S'\n__stdcall quotearg_n(char * arg)\n'
p2711
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p2712
S'MOV RDX,-0x1\nMOV ECX,0x61e1b0\nJMP 0x0040cf40\n'
p2713
S'48 c7 c2 ff ff ff ff\nb9 b0 e1 61 00\neb 02\n'
p2714
S'.text:000000000040cf30\n.text:000000000040cf37\n.text:000000000040cf3c\n'
p2715
tp2716
sS'close_stream'
p2717
(S'\n__stdcall close_stream(FILE * stream)\n'
p2718
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2719
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402160\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004023d0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00411030\nTEST EBP,EBP\nJZ 0x00410ccb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00410cef\nCALL 0x00402110\nMOV dword ptr [RAX],0x0\nJMP 0x00410cef\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00410cef\nTEST CL,CL\nJNZ 0x00410cef\nCALL 0x00402110\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2720
S'55\n41 56\n53\n48 89 fb\ne8 c4 14 ff ff\n49 89 c6\n48 89 df\ne8 29 17 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 4d 14 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 2e 14 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p2721
S'.text:0000000000410c90\n.text:0000000000410c91\n.text:0000000000410c93\n.text:0000000000410c94\n.text:0000000000410c97\n.text:0000000000410c9c\n.text:0000000000410c9f\n.text:0000000000410ca2\n.text:0000000000410ca7\n.text:0000000000410ca9\n.text:0000000000410cac\n.text:0000000000410cb1\n.text:0000000000410cb3\n.text:0000000000410cb5\n.text:0000000000410cba\n.text:0000000000410cbc\n.text:0000000000410cbe\n.text:0000000000410cc3\n.text:0000000000410cc9\n.text:0000000000410ccb\n.text:0000000000410ccd\n.text:0000000000410cd0\n.text:0000000000410cd2\n.text:0000000000410cd4\n.text:0000000000410cd7\n.text:0000000000410cd9\n.text:0000000000410cdb\n.text:0000000000410cdd\n.text:0000000000410ce2\n.text:0000000000410ce4\n.text:0000000000410ce7\n.text:0000000000410cec\n.text:0000000000410cef\n.text:0000000000410cf1\n.text:0000000000410cf2\n.text:0000000000410cf4\n.text:0000000000410cf5\n'
p2722
tp2723
sS'quotearg_colon_mem'
p2724
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p2725
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p2726
S'MOV EDX,0x3a\nJMP 0x0040d250\n'
p2727
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p2728
S'.text:000000000040d2e0\n.text:000000000040d2e5\n'
p2729
tp2730
sS'cmp_name'
p2731
(S'\n__stdcall cmp_name(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p2732
V\u000aint cmp_name(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a                    /* WARNING: Could not recover jumptable at 0x00407176. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar1 = (*cmp)(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p2733
S'MOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP RDX\n'
p2734
S'48 8b 3f\n48 8b 36\nff e2\n'
p2735
S'.text:0000000000407170\n.text:0000000000407173\n.text:0000000000407176\n'
p2736
tp2737
sS'wcswidth'
p2738
(S'\n__stdcall wcswidth(wchar_t * __s, size_t __n)\n'
p2739
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcswidth(wchar_t *__s,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcswidth_0061d0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2740
S'JMP qword ptr [0x0061d0a8]\n'
p2741
S'ff 25 f2 ae 21 00\n'
p2742
S'.plt:00000000004021b0\n'
p2743
tp2744
sS'readdir'
p2745
(S'\n__stdcall readdir(DIR * __dirp)\n'
p2746
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0061d228)();\u000a  return pdVar1;\u000a}\u000a\u000a
p2747
S'JMP qword ptr [0x0061d228]\n'
p2748
S'ff 25 72 ad 21 00\n'
p2749
S'.plt:00000000004024b0\n'
p2750
tp2751
sS'xnumtoumax'
p2752
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p2753
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p2754
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x0040ff60\nCMP EAX,0x3\nJZ 0x0040fb2e\nCMP EAX,0x1\nJZ 0x0040fb3b\nTEST EAX,EAX\nJNZ 0x0040fb46\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x0040fb11\nCMP RBX,R15\nJBE 0x0040fb81\nCALL 0x00402110\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x0040fb46\nCALL 0x00402110\nMOV dword ptr [RAX],0x0\nJMP 0x0040fb46\nCALL 0x00402110\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00402110\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x0040d430\nMOV R8,RAX\nMOV EDX,0x4164a2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x004025f0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2755
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 6b 04 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 fa 25 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 dd 25 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 d0 25 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 b7 25 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 c5 d8 ff ff\n49 89 c0\nba a2 64 41 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 6f 2a ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2756
S'.text:000000000040fad0\n.text:000000000040fad1\n.text:000000000040fad3\n.text:000000000040fad5\n.text:000000000040fad7\n.text:000000000040fad9\n.text:000000000040fada\n.text:000000000040fadb\n.text:000000000040fade\n.text:000000000040fae1\n.text:000000000040fae4\n.text:000000000040fae6\n.text:000000000040fae9\n.text:000000000040faec\n.text:000000000040faee\n.text:000000000040faf0\n.text:000000000040faf5\n.text:000000000040faf8\n.text:000000000040fafa\n.text:000000000040fafd\n.text:000000000040faff\n.text:000000000040fb01\n.text:000000000040fb03\n.text:000000000040fb07\n.text:000000000040fb0a\n.text:000000000040fb0c\n.text:000000000040fb0f\n.text:000000000040fb11\n.text:000000000040fb16\n.text:000000000040fb1d\n.text:000000000040fb22\n.text:000000000040fb27\n.text:000000000040fb2a\n.text:000000000040fb2c\n.text:000000000040fb2e\n.text:000000000040fb33\n.text:000000000040fb39\n.text:000000000040fb3b\n.text:000000000040fb40\n.text:000000000040fb46\n.text:000000000040fb4a\n.text:000000000040fb4c\n.text:000000000040fb51\n.text:000000000040fb54\n.text:000000000040fb59\n.text:000000000040fb5b\n.text:000000000040fb5d\n.text:000000000040fb60\n.text:000000000040fb63\n.text:000000000040fb66\n.text:000000000040fb6b\n.text:000000000040fb6e\n.text:000000000040fb73\n.text:000000000040fb75\n.text:000000000040fb77\n.text:000000000040fb79\n.text:000000000040fb7c\n.text:000000000040fb81\n.text:000000000040fb85\n.text:000000000040fb89\n.text:000000000040fb8a\n.text:000000000040fb8c\n.text:000000000040fb8e\n.text:000000000040fb90\n.text:000000000040fb92\n.text:000000000040fb93\n'
p2757
tp2758
sS'wc_ensure_printable'
p2759
(S'\n__stdcall wc_ensure_printable(wchar_t * wchars)\n'
p2760
V\u000a_Bool wc_ensure_printable(wchar_t *wchars)\u000a\u000a{\u000a  int iVar1;\u000a  wint_t *pwVar2;\u000a  undefined uVar3;\u000a  wint_t __wc;\u000a  \u000a  __wc = *wchars;\u000a  if (__wc == 0) {\u000a    uVar3 = 0;\u000a  }\u000a  else {\u000a    pwVar2 = (wint_t *)(wchars + 1);\u000a    uVar3 = 0;\u000a    do {\u000a      iVar1 = iswprint(__wc);\u000a      if (iVar1 == 0) {\u000a        pwVar2[-1] = 0xfffd;\u000a        uVar3 = 1;\u000a      }\u000a      __wc = *pwVar2;\u000a      pwVar2 = pwVar2 + 1;\u000a    } while (__wc != 0);\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p2761
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJZ 0x0040b7ff\nADD RBX,0x4\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004026e0\nTEST EAX,EAX\nJNZ 0x0040b7f3\nMOV dword ptr [RBX + -0x4],0xfffd\nMOV BPL,0x1\nMOV EDI,dword ptr [RBX]\nADD RBX,0x4\nTEST EDI,EDI\nJNZ 0x0040b7e0\nJMP 0x0040b801\nXOR EBP,EBP\nAND BPL,0x1\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p2762
S'55\n53\n50\n48 89 fb\n8b 3b\n85 ff\n74 33\n48 83 c3 04\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 fb 6e ff ff\n85 c0\n75 0a\nc7 43 fc fd ff 00 00\n40 b5 01\n8b 3b\n48 83 c3 04\n85 ff\n75 e3\neb 02\n31 ed\n40 80 e5 01\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p2763
S'.text:000000000040b7c0\n.text:000000000040b7c1\n.text:000000000040b7c2\n.text:000000000040b7c3\n.text:000000000040b7c6\n.text:000000000040b7c8\n.text:000000000040b7ca\n.text:000000000040b7cc\n.text:000000000040b7d0\n.text:000000000040b7d2\n.text:000000000040b7e0\n.text:000000000040b7e5\n.text:000000000040b7e7\n.text:000000000040b7e9\n.text:000000000040b7f0\n.text:000000000040b7f3\n.text:000000000040b7f5\n.text:000000000040b7f9\n.text:000000000040b7fb\n.text:000000000040b7fd\n.text:000000000040b7ff\n.text:000000000040b801\n.text:000000000040b805\n.text:000000000040b807\n.text:000000000040b80b\n.text:000000000040b80c\n.text:000000000040b80d\n'
p2764
tp2765
sS'security_compute_create'
p2766
(S'\n__stdcall security_compute_create(security_context_t scon, security_context_t tcon, security_context_t * newcon)\n'
p2767
V\u000aint security_compute_create\u000a              (security_context_t scon,security_context_t tcon,security_context_t *newcon)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2768
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2769
S'50\ne8 1a 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2770
S'.text:000000000040d9f0\n.text:000000000040d9f1\n.text:000000000040d9f6\n.text:000000000040d9fc\n.text:000000000040da01\n.text:000000000040da02\n'
p2771
tp2772
sS'hash_string'
p2773
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p2774
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2775
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00409c63\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00409c40\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p2776
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p2777
S'.text:0000000000409c30\n.text:0000000000409c32\n.text:0000000000409c34\n.text:0000000000409c36\n.text:0000000000409c39\n.text:0000000000409c3b\n.text:0000000000409c40\n.text:0000000000409c43\n.text:0000000000409c47\n.text:0000000000409c4a\n.text:0000000000409c4d\n.text:0000000000409c50\n.text:0000000000409c52\n.text:0000000000409c55\n.text:0000000000409c58\n.text:0000000000409c5b\n.text:0000000000409c5d\n.text:0000000000409c5f\n.text:0000000000409c62\n.text:0000000000409c63\n.text:0000000000409c65\n.text:0000000000409c68\n'
p2778
tp2779
sS'argmatch_invalid'
p2780
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p2781
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p2782
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x416d28\nMOV ESI,0x416d43\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00402270\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x0040d130\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x0040d420\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004025f0\n'
p2783
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 28 6d 41 00\nbe 43 6d 41 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 24 95 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 d2 43 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 b2 46 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 60 98 ff ff\n'
p2784
S'.text:0000000000408d20\n.text:0000000000408d22\n.text:0000000000408d24\n.text:0000000000408d26\n.text:0000000000408d27\n.text:0000000000408d28\n.text:0000000000408d2b\n.text:0000000000408d2e\n.text:0000000000408d32\n.text:0000000000408d37\n.text:0000000000408d3c\n.text:0000000000408d40\n.text:0000000000408d42\n.text:0000000000408d47\n.text:0000000000408d4c\n.text:0000000000408d4f\n.text:0000000000408d51\n.text:0000000000408d56\n.text:0000000000408d59\n.text:0000000000408d5e\n.text:0000000000408d61\n.text:0000000000408d66\n.text:0000000000408d69\n.text:0000000000408d6e\n.text:0000000000408d71\n.text:0000000000408d73\n.text:0000000000408d75\n.text:0000000000408d77\n.text:0000000000408d7a\n.text:0000000000408d7d\n.text:0000000000408d80\n.text:0000000000408d84\n.text:0000000000408d85\n.text:0000000000408d87\n.text:0000000000408d89\n.text:0000000000408d8b\n'
p2785
tp2786
sS'c_tolower'
p2787
(S'\n__stdcall c_tolower()\n'
p2788
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2789
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p2790
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p2791
S'.text:0000000000410c70\n.text:0000000000410c73\n.text:0000000000410c76\n.text:0000000000410c79\n.text:0000000000410c7c\n'
p2792
tp2793
sS'getopt_long'
p2794
(S'\n__stdcall getopt_long()\n'
p2795
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0061d128)();\u000a  return;\u000a}\u000a\u000a
p2796
S'JMP qword ptr [0x0061d128]\n'
p2797
S'ff 25 72 ae 21 00\n'
p2798
S'.plt:00000000004022b0\n'
p2799
tp2800
sS'has_capability'
p2801
(S'\n__stdcall has_capability()\n'
p2802
V\u000a_Bool has_capability(void)\u000a\u000a{\u000a  undefined in_AL;\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (_Bool)in_AL;\u000a}\u000a\u000a
p2803
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nPOP RAX\nRET\n'
p2804
S'50\ne8 ca bc ff ff\nc7 00 5f 00 00 00\n58\nc3\n'
p2805
S'.text:0000000000406440\n.text:0000000000406441\n.text:0000000000406446\n.text:000000000040644c\n.text:000000000040644d\n'
p2806
tp2807
sS'rev_strcmp_mtime'
p2808
(S'\n__stdcall rev_strcmp_mtime(V a, V b)\n'
p2809
V\u000aint rev_strcmp_mtime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_mtime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a  return iVar1;\u000a}\u000a\u000a
p2810
S'MOV RAX,RDI\nMOV EDX,0x4023f0\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407260\n'
p2811
S'48 89 f8\nba f0 23 40 00\n48 89 f7\n48 89 c6\ne9 1d 05 00 00\n'
p2812
S'.text:0000000000406d30\n.text:0000000000406d33\n.text:0000000000406d38\n.text:0000000000406d3b\n.text:0000000000406d3e\n'
p2813
tp2814
sS'areadlink_with_size'
p2815
(S'\n__stdcall areadlink_with_size(char * file, size_t size)\n'
p2816
V\u000achar * areadlink_with_size(char *file,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  char *__buf;\u000a  ulong uVar2;\u000a  int *piVar3;\u000a  ulong __size;\u000a  bool bVar4;\u000a  \u000a  __size = 0x401;\u000a  if (size < 0x401) {\u000a    __size = size + 1;\u000a  }\u000a  while( true ) {\u000a    __buf = (char *)malloc(__size);\u000a    if (__buf == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    uVar2 = readlink(file,__buf,__size);\u000a    if ((long)uVar2 < 0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      if (iVar1 != 0x22) {\u000a        free(__buf);\u000a        *piVar3 = iVar1;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    if (uVar2 < __size) break;\u000a    free(__buf);\u000a    if (__size >> 0x3e == 0) {\u000a      __size = __size * 2;\u000a    }\u000a    else {\u000a      bVar4 = 0x7ffffffffffffffe < __size;\u000a      __size = 0x7fffffffffffffff;\u000a      if (bVar4) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0xc;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a  }\u000a  __buf[uVar2] = 0;\u000a  return __buf;\u000a}\u000a\u000a
p2817
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP RSI,0x401\nLEA RAX,[RSI + 0x1]\nMOV EBX,0x401\nCMOVC RBX,RAX\nJMP 0x00408b73\nADD RBX,RBX\nMOV RDI,RBX\nCALL 0x004024e0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00408bf2\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004021e0\nMOV R12,RAX\nTEST R12,R12\nJNS 0x00408baa\nCALL 0x00402110\nMOV R13,RAX\nMOV EBP,dword ptr [R13]\nCMP EBP,0x22\nJNZ 0x00408be6\nCMP R12,RBX\nJC 0x00408bdf\nMOV RDI,R15\nCALL 0x004020d0\nMOV RAX,RBX\nSHR RAX,0x3e\nJZ 0x00408b70\nMOV RAX,0x7fffffffffffffff\nCMP RBX,RAX\nMOV RBX,RAX\nJC 0x00408b73\nCALL 0x00402110\nMOV dword ptr [RAX],0xc\nJMP 0x00408bf2\nMOV byte ptr [R15 + R12*0x1],0x0\nJMP 0x00408bf5\nMOV RDI,R15\nCALL 0x004020d0\nMOV dword ptr [R13],EBP\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2818
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 81 fe 01 04 00 00\n48 8d 46 01\nbb 01 04 00 00\n48 0f 42 d8\neb 0f\n48 01 db\n48 89 df\ne8 65 99 ff ff\n49 89 c7\n4d 85 ff\n74 6f\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 4f 96 ff ff\n49 89 c4\n4d 85 e4\n79 11\ne8 72 95 ff ff\n49 89 c5\n41 8b 6d 00\n83 fd 22\n75 3c\n49 39 dc\n72 30\n4c 89 ff\ne8 19 95 ff ff\n48 89 d8\n48 c1 e8 3e\n74 b0\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c3\n48 89 c3\n72 a1\ne8 39 95 ff ff\nc7 00 0c 00 00 00\neb 13\n43 c6 04 27 00\neb 0f\n4c 89 ff\ne8 e2 94 ff ff\n41 89 6d 00\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2819
S'.text:0000000000408b40\n.text:0000000000408b41\n.text:0000000000408b43\n.text:0000000000408b45\n.text:0000000000408b47\n.text:0000000000408b49\n.text:0000000000408b4a\n.text:0000000000408b4b\n.text:0000000000408b4e\n.text:0000000000408b55\n.text:0000000000408b59\n.text:0000000000408b5e\n.text:0000000000408b62\n.text:0000000000408b70\n.text:0000000000408b73\n.text:0000000000408b76\n.text:0000000000408b7b\n.text:0000000000408b7e\n.text:0000000000408b81\n.text:0000000000408b83\n.text:0000000000408b86\n.text:0000000000408b89\n.text:0000000000408b8c\n.text:0000000000408b91\n.text:0000000000408b94\n.text:0000000000408b97\n.text:0000000000408b99\n.text:0000000000408b9e\n.text:0000000000408ba1\n.text:0000000000408ba5\n.text:0000000000408ba8\n.text:0000000000408baa\n.text:0000000000408bad\n.text:0000000000408baf\n.text:0000000000408bb2\n.text:0000000000408bb7\n.text:0000000000408bba\n.text:0000000000408bbe\n.text:0000000000408bc0\n.text:0000000000408bca\n.text:0000000000408bcd\n.text:0000000000408bd0\n.text:0000000000408bd2\n.text:0000000000408bd7\n.text:0000000000408bdd\n.text:0000000000408bdf\n.text:0000000000408be4\n.text:0000000000408be6\n.text:0000000000408be9\n.text:0000000000408bee\n.text:0000000000408bf2\n.text:0000000000408bf5\n.text:0000000000408bf8\n.text:0000000000408bfc\n.text:0000000000408bfd\n.text:0000000000408bff\n.text:0000000000408c01\n.text:0000000000408c03\n.text:0000000000408c05\n.text:0000000000408c06\n'
p2820
tp2821
sS'quotearg_style'
p2822
(S'\n__stdcall quotearg_style(char * arg)\n'
p2823
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p2824
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x0040d130\n'
p2825
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p2826
S'.text:000000000040d210\n.text:000000000040d213\n.text:000000000040d215\n.text:000000000040d217\n.text:000000000040d219\n.text:000000000040d21c\n'
p2827
tp2828
sS'sigprocmask'
p2829
(S'\n__stdcall sigprocmask(int __how, sigset_t * __set, sigset_t * __oset)\n'
p2830
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigprocmask(int __how,sigset_t *__set,sigset_t *__oset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigprocmask_0061d028)();\u000a  return iVar1;\u000a}\u000a\u000a
p2831
S'JMP qword ptr [0x0061d028]\n'
p2832
S'ff 25 72 af 21 00\n'
p2833
S'.plt:00000000004020b0\n'
p2834
tp2835
sS'rev_xstrcoll_mtime'
p2836
(S'\n__stdcall rev_xstrcoll_mtime(V a, V b)\n'
p2837
V\u000aint rev_xstrcoll_mtime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_mtime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p2838
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407260\n'
p2839
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 0d 06 00 00\n'
p2840
S'.text:0000000000406c40\n.text:0000000000406c43\n.text:0000000000406c48\n.text:0000000000406c4b\n.text:0000000000406c4e\n'
p2841
tp2842
sS'__argmatch_die'
p2843
(S'\n__stdcall __argmatch_die()\n'
p2844
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p2845
S'MOV EDI,0x1\nJMP 0x00405150\n'
p2846
S'bf 01 00 00 00\ne9 36 c5 ff ff\n'
p2847
S'.text:0000000000408c10\n.text:0000000000408c15\n'
p2848
tp2849
sS'emit_try_help'
p2850
(S'\n__stdcall emit_try_help()\n'
p2851
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p2852
S'PUSH RBX\nMOV RBX,qword ptr [0x0061d600]\nXOR EDI,EDI\nMOV ESI,0x416ae2\nMOV EDX,0x5\nCALL 0x00402270\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0061e1a8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004026b0\n'
p2853
S'53\n48 8b 1d 48 81 21 00\n31 ff\nbe e2 6a 41 00\nba 05 00 00 00\ne8 a7 cd ff ff\n48 89 c2\n48 8b 0d d5 8c 21 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 cd d1 ff ff\n'
p2854
S'.text:00000000004054b0\n.text:00000000004054b1\n.text:00000000004054b8\n.text:00000000004054ba\n.text:00000000004054bf\n.text:00000000004054c4\n.text:00000000004054c9\n.text:00000000004054cc\n.text:00000000004054d3\n.text:00000000004054d8\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054de\n'
p2855
tp2856
sS'strrchr'
p2857
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p2858
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0061d148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2859
S'JMP qword ptr [0x0061d148]\n'
p2860
S'ff 25 52 ae 21 00\n'
p2861
S'.plt:00000000004022f0\n'
p2862
tp2863
sS'quotearg_alloc_mem'
p2864
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p2865
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p2866
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x61e1b0\nCMOVNZ R12,RCX\nCALL 0x00402110\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040c160\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x0040f9e0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040c160\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040ce8a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2867
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc b0 e1 61 00\n4c 0f 45 e1\ne8 28 53 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 a1 2b 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2868
S'.text:000000000040cdb0\n.text:000000000040cdb1\n.text:000000000040cdb3\n.text:000000000040cdb5\n.text:000000000040cdb7\n.text:000000000040cdb9\n.text:000000000040cdba\n.text:000000000040cdbe\n.text:000000000040cdc1\n.text:000000000040cdc6\n.text:000000000040cdc9\n.text:000000000040cdce\n.text:000000000040cdd1\n.text:000000000040cdd6\n.text:000000000040cdd9\n.text:000000000040cddf\n.text:000000000040cde3\n.text:000000000040cde8\n.text:000000000040cded\n.text:000000000040cdef\n.text:000000000040cdf3\n.text:000000000040cdf5\n.text:000000000040cdf8\n.text:000000000040cdfc\n.text:000000000040ce01\n.text:000000000040ce05\n.text:000000000040ce0a\n.text:000000000040ce0e\n.text:000000000040ce10\n.text:000000000040ce12\n.text:000000000040ce15\n.text:000000000040ce18\n.text:000000000040ce1b\n.text:000000000040ce20\n.text:000000000040ce25\n.text:000000000040ce27\n.text:000000000040ce2c\n.text:000000000040ce30\n.text:000000000040ce33\n.text:000000000040ce37\n.text:000000000040ce3a\n.text:000000000040ce3f\n.text:000000000040ce42\n.text:000000000040ce46\n.text:000000000040ce4a\n.text:000000000040ce4d\n.text:000000000040ce50\n.text:000000000040ce55\n.text:000000000040ce5a\n.text:000000000040ce5d\n.text:000000000040ce62\n.text:000000000040ce67\n.text:000000000040ce69\n.text:000000000040ce6e\n.text:000000000040ce73\n.text:000000000040ce77\n.text:000000000040ce7a\n.text:000000000040ce7e\n.text:000000000040ce83\n.text:000000000040ce85\n.text:000000000040ce87\n.text:000000000040ce8a\n.text:000000000040ce8d\n.text:000000000040ce91\n.text:000000000040ce92\n.text:000000000040ce94\n.text:000000000040ce96\n.text:000000000040ce98\n.text:000000000040ce9a\n.text:000000000040ce9b\n'
p2869
tp2870
sS'__sprintf_chk'
p2871
(S'\n__stdcall __sprintf_chk()\n'
p2872
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0061d368)();\u000a  return;\u000a}\u000a\u000a
p2873
S'JMP qword ptr [0x0061d368]\n'
p2874
S'ff 25 32 ac 21 00\n'
p2875
S'.plt:0000000000402730\n'
p2876
tp2877
sS'xstrcoll_df_mtime'
p2878
(S'\n__stdcall xstrcoll_df_mtime(V a, V b)\n'
p2879
V\u000aint xstrcoll_df_mtime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_mtime((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2880
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406c0a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406c2d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406c2d\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407260\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2881
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 d0 f8 ff ff\n89 c3\n4c 89 f7\ne8 c6 f8 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 33 06 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2882
S'.text:0000000000406be0\n.text:0000000000406be2\n.text:0000000000406be4\n.text:0000000000406be5\n.text:0000000000406be8\n.text:0000000000406beb\n.text:0000000000406bf0\n.text:0000000000406bf2\n.text:0000000000406bf5\n.text:0000000000406bfa\n.text:0000000000406bfc\n.text:0000000000406bfe\n.text:0000000000406c00\n.text:0000000000406c03\n.text:0000000000406c08\n.text:0000000000406c0a\n.text:0000000000406c0c\n.text:0000000000406c0e\n.text:0000000000406c13\n.text:0000000000406c16\n.text:0000000000406c18\n.text:0000000000406c1d\n.text:0000000000406c20\n.text:0000000000406c23\n.text:0000000000406c24\n.text:0000000000406c26\n.text:0000000000406c28\n.text:0000000000406c2d\n.text:0000000000406c2f\n.text:0000000000406c30\n.text:0000000000406c32\n.text:0000000000406c34\n'
p2883
tp2884
sS'__freading'
p2885
(S'\n__stdcall __freading()\n'
p2886
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0061d270)();\u000a  return;\u000a}\u000a\u000a
p2887
S'JMP qword ptr [0x0061d270]\n'
p2888
S'ff 25 2a ad 21 00\n'
p2889
S'.plt:0000000000402540\n'
p2890
tp2891
sS'extract_dirs_from_files'
p2892
(S'\n__stdcall extract_dirs_from_files(char * dirname)\n'
p2893
V\u000avoid extract_dirs_from_files(char *dirname)\u000a\u000a{\u000a  fileinfo *f;\u000a  void *pvVar1;\u000a  void **ppvVar2;\u000a  _Bool _Var3;\u000a  char *name;\u000a  size_t sVar4;\u000a  ulong uVar5;\u000a  \u000a  if ((dirname != (char *)0x0) && (active_dir_set != (Hash_table *)0x0)) {\u000a    queue_directory((char *)0x0,dirname);\u000a  }\u000a  sVar4 = cwd_n_used;\u000a  if (cwd_n_used != 0) {\u000a    do {\u000a      f = (fileinfo *)sorted_file[sVar4 - 1];\u000a      sVar4 = sVar4 - 1;\u000a      _Var3 = is_directory(f);\u000a      if (_Var3 != false) {\u000a        name = f->name;\u000a        if (dirname == (char *)0x0) {\u000aLAB_004049f9:\u000a          queue_directory(name,f->linkname);\u000a          if (f->filetype == arg_directory) {\u000aLAB_00404a43:\u000a            free_ent(f);\u000a          }\u000a        }\u000a        else {\u000a          _Var3 = basename_is_dot_or_dotdot(name);\u000a          if (_Var3 == false) {\u000a            name = f->name;\u000a            if (*name == '/') goto LAB_004049f9;\u000a            name = file_name_concat(dirname,name,(char **)0x0);\u000a            queue_directory(name,f->linkname);\u000a            free(name);\u000a            if (f->filetype != arg_directory) goto LAB_00404a50;\u000a            goto LAB_00404a43;\u000a          }\u000a        }\u000a      }\u000aLAB_00404a50:\u000a      ppvVar2 = sorted_file;\u000a    } while (sVar4 != 0);\u000a    if (cwd_n_used != 0) {\u000a      uVar5 = 0;\u000a      sVar4 = 0;\u000a      do {\u000a        pvVar1 = ppvVar2[uVar5];\u000a        ppvVar2[sVar4] = pvVar1;\u000a        sVar4 = sVar4 + (ulong)(*(int *)((long)pvVar1 + 0xa0) != 9);\u000a        uVar5 = uVar5 + 1;\u000a      } while (uVar5 < cwd_n_used);\u000a      cwd_n_used = sVar4;\u000a      return;\u000a    }\u000a  }\u000a  cwd_n_used = 0;\u000a  return;\u000a}\u000a\u000a
p2894
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV R15,RDI\nTEST R15,R15\nJZ 0x004049aa\nMOV RAX,qword ptr [0x0061d6d0]\nTEST RAX,RAX\nJZ 0x004049aa\nXOR EDI,EDI\nXOR EDX,EDX\nMOV RSI,R15\nCALL 0x00404820\nMOV RBX,qword ptr [0x0061d808]\nTEST RBX,RBX\nJZ 0x00404aa2\nMOVZX R14D,BPL\nNOP\nMOV RAX,qword ptr [0x0061e048]\nMOV RBP,qword ptr [RAX + RBX*0x8 + -0x8]\nDEC RBX\nMOV RDI,RBP\nCALL 0x004064c0\nTEST AL,AL\nJZ 0x00404a50\nMOV RAX,qword ptr [RBP]\nTEST R15,R15\nJZ 0x004049f9\nMOV RDI,RAX\nCALL 0x004064e0\nTEST AL,AL\nJNZ 0x00404a50\nMOV RAX,qword ptr [RBP]\nCMP byte ptr [RAX],0x2f\nJNZ 0x00404a13\nMOV RSI,qword ptr [RBP + 0x8]\nMOV RDI,RAX\nMOV EDX,R14D\nCALL 0x00404820\nCMP dword ptr [0xa0 + RBP],0x9\nJZ 0x00404a43\nJMP 0x00404a50\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x00409290\nMOV R12,RAX\nMOV RSI,qword ptr [RBP + 0x8]\nMOV RDI,R12\nMOV EDX,R14D\nCALL 0x00404820\nMOV RDI,R12\nCALL 0x004020d0\nCMP dword ptr [0xa0 + RBP],0x9\nJNZ 0x00404a50\nMOV RDI,RBP\nCALL 0x00406130\nNOP dword ptr [RAX + RAX*0x1]\nTEST RBX,RBX\nJNZ 0x004049c0\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00404aa2\nMOV RCX,qword ptr [0x0061e048]\nMOV RDX,qword ptr [0x0061d808]\nXOR ESI,ESI\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RCX + RSI*0x8]\nMOV qword ptr [RCX + RAX*0x8],RDI\nXOR EBP,EBP\nCMP dword ptr [0xa0 + RDI],0x9\nSETNZ BPL\nADD RAX,RBP\nINC RSI\nCMP RSI,RDX\nJC 0x00404a80\nJMP 0x00404aa4\nXOR EAX,EAX\nMOV qword ptr [0x0061d808],RAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2895
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n49 89 ff\n4d 85 ff\n74 18\n48 8b 05 37 8d 21 00\n48 85 c0\n74 0c\n31 ff\n31 d2\n4c 89 fe\ne8 76 fe ff ff\n48 8b 1d 57 8e 21 00\n48 85 db\n0f 84 e8 00 00 00\n44 0f b6 f5\n66 90\n48 8b 05 81 96 21 00\n48 8b 6c d8 f8\n48 ff cb\n48 89 ef\ne8 e9 1a 00 00\n84 c0\n74 75\n48 8b 45 00\n4d 85 ff\n74 15\n48 89 c7\ne8 f4 1a 00 00\n84 c0\n75 60\n48 8b 45 00\n80 38 2f\n75 1a\n48 8b 75 08\n48 89 c7\n44 89 f2\ne8 18 fe ff ff\n83 bd a0 00 00 00 09\n74 32\neb 3d\n31 d2\n4c 89 ff\n48 89 c6\ne8 70 48 00 00\n49 89 c4\n48 8b 75 08\n4c 89 e7\n44 89 f2\ne8 ee fd ff ff\n4c 89 e7\ne8 96 d6 ff ff\n83 bd a0 00 00 00 09\n75 0d\n48 89 ef\ne8 e5 16 00 00\n0f 1f 44 00 00\n48 85 db\n0f 85 67 ff ff ff\n48 83 3d a7 8d 21 00 00\n74 3f\n48 8b 0d de 95 21 00\n48 8b 15 97 8d 21 00\n31 f6\n31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3c f1\n48 89 3c c1\n31 ed\n83 bf a0 00 00 00 09\n40 0f 95 c5\n48 01 e8\n48 ff c6\n48 39 d6\n72 e0\neb 02\n31 c0\n48 89 05 5d 8d 21 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2896
S'.text:0000000000404980\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404985\n.text:0000000000404987\n.text:0000000000404988\n.text:000000000040498a\n.text:000000000040498d\n.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404999\n.text:000000000040499c\n.text:000000000040499e\n.text:00000000004049a0\n.text:00000000004049a2\n.text:00000000004049a5\n.text:00000000004049aa\n.text:00000000004049b1\n.text:00000000004049b4\n.text:00000000004049ba\n.text:00000000004049be\n.text:00000000004049c0\n.text:00000000004049c7\n.text:00000000004049cc\n.text:00000000004049cf\n.text:00000000004049d2\n.text:00000000004049d7\n.text:00000000004049d9\n.text:00000000004049db\n.text:00000000004049df\n.text:00000000004049e2\n.text:00000000004049e4\n.text:00000000004049e7\n.text:00000000004049ec\n.text:00000000004049ee\n.text:00000000004049f0\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049f9\n.text:00000000004049fd\n.text:0000000000404a00\n.text:0000000000404a03\n.text:0000000000404a08\n.text:0000000000404a0f\n.text:0000000000404a11\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a18\n.text:0000000000404a1b\n.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a27\n.text:0000000000404a2a\n.text:0000000000404a2d\n.text:0000000000404a32\n.text:0000000000404a35\n.text:0000000000404a3a\n.text:0000000000404a41\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a4b\n.text:0000000000404a50\n.text:0000000000404a53\n.text:0000000000404a59\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a6a\n.text:0000000000404a71\n.text:0000000000404a73\n.text:0000000000404a75\n.text:0000000000404a80\n.text:0000000000404a84\n.text:0000000000404a88\n.text:0000000000404a8a\n.text:0000000000404a91\n.text:0000000000404a95\n.text:0000000000404a98\n.text:0000000000404a9b\n.text:0000000000404a9e\n.text:0000000000404aa0\n.text:0000000000404aa2\n.text:0000000000404aa4\n.text:0000000000404aab\n.text:0000000000404aac\n.text:0000000000404aae\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab3\n'
p2897
tp2898
sS'ranged_convert'
p2899
(S'\n__stdcall ranged_convert(anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, time_t * t, tm * tp)\n'
p2900
V\u000atm * ranged_convert(tm *(*convert)(time_t *,tm *),time_t *t,tm *tp)\u000a\u000a{\u000a  tm *ptVar1;\u000a  ulong uVar2;\u000a  ulong a;\u000a  ulong uVar3;\u000a  ulong b;\u000a  undefined auVar4 [16];\u000a  \u000a  ptVar1 = (*convert)(t,tp);\u000a  if (ptVar1 == (tm *)0x0) {\u000a    b = *t;\u000a    if ((b == 0) || (b == ((long)b >> 0x3f | 1U))) {\u000a      ptVar1 = (tm *)0x0;\u000a    }\u000a    else {\u000a      a = 0;\u000a      do {\u000a        uVar2 = time_t_avg(a,b);\u000a        *t = uVar2;\u000a        auVar4 = (undefined  [16])(*convert)(t,tp);\u000a        ptVar1 = SUB168(auVar4,0);\u000a        uVar3 = uVar2;\u000a        if (ptVar1 == (tm *)0x0) {\u000a          uVar3 = a;\u000a          b = uVar2;\u000a        }\u000a        a = uVar3;\u000a      } while (b != ((long)b >> 0x3f | 1U) + uVar3);\u000a      if ((uVar3 != 0) && (ptVar1 == (tm *)0x0)) {\u000a        *t = uVar3;\u000a                    /* WARNING: Could not recover jumptable at 0x0041180f. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a        ptVar1 = (*convert)(t,tp);\u000a        return ptVar1;\u000a      }\u000a    }\u000a  }\u000a  return ptVar1;\u000a}\u000a\u000a
p2901
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOV RDI,R15\nMOV RSI,R14\nCALL RBX\nTEST RAX,RAX\nJNZ 0x0041178f\nMOV qword ptr [RSP],RBX\nMOV R12,qword ptr [R15]\nTEST R12,R12\nJZ 0x0041178d\nMOV RAX,R12\nSAR RAX,0x3f\nOR RAX,0x1\nCMP R12,RAX\nJNZ 0x0041179e\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EBX,EBX\nMOV RBP,qword ptr [RSP]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R13,RBX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x004118a0\nMOV RBX,RAX\nMOV qword ptr [R15],RBX\nMOV RDI,R15\nMOV RSI,R14\nCALL RBP\nTEST RAX,RAX\nCMOVZ R12,RBX\nCMOVZ RBX,R13\nMOV RCX,R12\nSAR RCX,0x3f\nOR RCX,0x1\nADD RCX,RBX\nCMP R12,RCX\nJNZ 0x004117b0\nTEST RBX,RBX\nJZ 0x0041178f\nTEST RAX,RAX\nMOV RCX,qword ptr [RSP]\nJNZ 0x0041178f\nMOV qword ptr [R15],RBX\nMOV RDI,R15\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP RCX\n'
p2902
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n48 89 fb\n4c 89 ff\n4c 89 f6\nff d3\n48 85 c0\n75 1e\n48 89 1c 24\n4d 8b 27\n4d 85 e4\n74 10\n4c 89 e0\n48 c1 f8 3f\n48 83 c8 01\n49 39 c4\n75 11\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 db\n48 8b 2c 24\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 dd\n4c 89 ef\n4c 89 e6\ne8 e2 00 00 00\n48 89 c3\n49 89 1f\n4c 89 ff\n4c 89 f6\nff d5\n48 85 c0\n4c 0f 44 e3\n49 0f 44 dd\n4c 89 e1\n48 c1 f9 3f\n48 83 c9 01\n48 01 d9\n49 39 cc\n75 c6\n48 85 db\n74 a0\n48 85 c0\n48 8b 0c 24\n75 97\n49 89 1f\n4c 89 ff\n4c 89 f6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nff e1\n'
p2903
S'.text:0000000000411750\n.text:0000000000411751\n.text:0000000000411753\n.text:0000000000411755\n.text:0000000000411757\n.text:0000000000411759\n.text:000000000041175a\n.text:000000000041175b\n.text:000000000041175e\n.text:0000000000411761\n.text:0000000000411764\n.text:0000000000411767\n.text:000000000041176a\n.text:000000000041176c\n.text:000000000041176f\n.text:0000000000411771\n.text:0000000000411775\n.text:0000000000411778\n.text:000000000041177b\n.text:000000000041177d\n.text:0000000000411780\n.text:0000000000411784\n.text:0000000000411788\n.text:000000000041178b\n.text:000000000041178d\n.text:000000000041178f\n.text:0000000000411793\n.text:0000000000411794\n.text:0000000000411796\n.text:0000000000411798\n.text:000000000041179a\n.text:000000000041179c\n.text:000000000041179d\n.text:000000000041179e\n.text:00000000004117a0\n.text:00000000004117a4\n.text:00000000004117b0\n.text:00000000004117b3\n.text:00000000004117b6\n.text:00000000004117b9\n.text:00000000004117be\n.text:00000000004117c1\n.text:00000000004117c4\n.text:00000000004117c7\n.text:00000000004117ca\n.text:00000000004117cc\n.text:00000000004117cf\n.text:00000000004117d3\n.text:00000000004117d7\n.text:00000000004117da\n.text:00000000004117de\n.text:00000000004117e2\n.text:00000000004117e5\n.text:00000000004117e8\n.text:00000000004117ea\n.text:00000000004117ed\n.text:00000000004117ef\n.text:00000000004117f2\n.text:00000000004117f6\n.text:00000000004117f8\n.text:00000000004117fb\n.text:00000000004117fe\n.text:0000000000411801\n.text:0000000000411805\n.text:0000000000411806\n.text:0000000000411808\n.text:000000000041180a\n.text:000000000041180c\n.text:000000000041180e\n.text:000000000041180f\n'
p2904
tp2905
sS'print_long_format'
p2906
(S'\n__stdcall print_long_format(fileinfo * f)\n'
p2907
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid print_long_format(fileinfo *f)\u000a\u000a{\u000a  char cVar1;\u000a  undefined uVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  char *__s;\u000a  size_t sVar6;\u000a  char *string;\u000a  char *pcVar7;\u000a  uintmax_t n;\u000a  tm *ptVar8;\u000a  size_t sVar9;\u000a  int iVar10;\u000a  int iVar11;\u000a  uint uVar12;\u000a  ulong uVar13;\u000a  char modebuf [12];\u000a  char minorbuf [21];\u000a  char hbuf [21];\u000a  char buf [3643];\u000a  undefined8 uVar14;\u000a  char local_114c;\u000a  undefined8 local_114b;\u000a  undefined2 local_1143;\u000a  undefined local_1141;\u000a  timespec local_1140;\u000a  fileinfo *local_1130;\u000a  char local_1128 [32];\u000a  char local_1108 [656];\u000a  char local_e78 [3656];\u000a  \u000a  if (f->stat_ok == false) {\u000a    local_114c = "?pcdb-lswd"[(ulong)f->filetype];\u000a    local_114b = 0x3f3f3f3f3f3f3f3f;\u000a    local_1143 = 0x3f3f;\u000a    local_1143._0_1_ = 0x3f;\u000a    local_1141 = 0;\u000a    if (any_has_acl != false) goto LAB_0040786c;\u000aLAB_00407881:\u000a    uVar2 = 0;\u000aLAB_00407887:\u000a    local_1143 = CONCAT11(uVar2,(undefined)local_1143);\u000a  }\u000a  else {\u000a    filemodestring(&f->stat,&local_114c);\u000a    if (any_has_acl == false) goto LAB_00407881;\u000aLAB_0040786c:\u000a    if (f->acl_type == ACL_T_LSM_CONTEXT_ONLY) {\u000a      uVar2 = 0x2e;\u000a      goto LAB_00407887;\u000a    }\u000a    if (f->acl_type == ACL_T_YES) {\u000a      uVar2 = 0x2b;\u000a      goto LAB_00407887;\u000a    }\u000a  }\u000a  if (time_type == time_mtime) {\u000a    uVar14 = 0x4078b7;\u000a    local_1140 = get_stat_mtime(&f->stat);\u000a  }\u000a  else {\u000a    if (time_type == time_atime) {\u000a      uVar14 = 0x4078c2;\u000a      local_1140 = get_stat_atime(&f->stat);\u000a    }\u000a    else {\u000a      if (time_type != time_ctime) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      uVar14 = 0x4078ac;\u000a      local_1140 = get_stat_ctime(&f->stat);\u000a    }\u000a  }\u000a  iVar11 = inode_number_width;\u000a  if (print_inode == 1) {\u000a    __s = format_inode(local_1108,0x15,f);\u000a    __sprintf_chk(local_e78,1,0xe3b,&DAT_00416ad2,(ulong)(uint)iVar11,__s);\u000a    uVar14 = 0x407920;\u000a    sVar6 = strlen(local_e78);\u000a    __s = local_e78 + sVar6;\u000a  }\u000a  else {\u000a    __s = local_e78;\u000a  }\u000a  if (print_block_size == 1) {\u000a    if (f->stat_ok == false) {\u000a      string = "?";\u000a    }\u000a    else {\u000a      string = human_readable((f->stat).st_blocks,local_1108,(ulong)(uint)human_output_opts,0x200);\u000a    }\u000a    iVar11 = block_size_width;\u000a    uVar14 = 0x40798f;\u000a    iVar4 = gnu_mbswidth(string);\u000a    if (iVar4 < iVar11) {\u000a      iVar5 = (iVar4 + -1) - iVar11;\u000a      iVar10 = -2;\u000a      if (-3 < iVar5) {\u000a        iVar10 = iVar5;\u000a      }\u000a      uVar14 = 0x4079bf;\u000a      memset(__s,0x20,(ulong)(uint)((iVar11 + 1 + iVar10) - iVar4) + 1);\u000a      iVar4 = (iVar11 + 1) - iVar4;\u000a      do {\u000a        __s = __s + 1;\u000a        iVar4 = iVar4 + -1;\u000a      } while (1 < iVar4);\u000a    }\u000a    do {\u000a      pcVar7 = __s;\u000a      cVar1 = *string;\u000a      string = string + 1;\u000a      *pcVar7 = cVar1;\u000a      __s = pcVar7 + 1;\u000a    } while (cVar1 != 0);\u000a    *pcVar7 = ' ';\u000a  }\u000a  iVar11 = nlink_width;\u000a  if (f->stat_ok == false) {\u000a    string = "?";\u000a  }\u000a  else {\u000a    uVar14 = 0x407a15;\u000a    string = umaxtostr((f->stat).st_nlink,local_1108);\u000a  }\u000a  __sprintf_chk(__s,1,0xffffffffffffffff,"%s %*s ",&local_114c,(ulong)(uint)iVar11,string,uVar14);\u000a  sVar6 = strlen(__s);\u000a  if (dired == 1) {\u000a    fputs_unlocked("  ",stdout);\u000a    dired_pos = dired_pos + 2;\u000a  }\u000a  __s = __s + sVar6;\u000a  if ((((print_owner == 1) && (print_group == 1)) && (print_author == 0)) && (print_scontext != 1))\u000a  {\u000a    if (f->stat_ok == false) goto LAB_00407c0e;\u000aLAB_00407b52:\u000a    if ((*(ushort *)&(f->stat).st_mode & 0xf000 | 0x4000) != 0x6000) goto LAB_00407c0e;\u000a    iVar11 = ((file_size_width + -2) - major_device_number_width) - minor_device_number_width;\u000a    if (iVar11 < 0) {\u000a      iVar11 = 0;\u000a    }\u000a    uVar12 = iVar11 + major_device_number_width;\u000a    uVar3 = gnu_dev_major((f->stat).st_rdev);\u000a    string = umaxtostr((ulong)uVar3,local_1108);\u000a    uVar13 = (ulong)(uint)minor_device_number_width;\u000a    uVar3 = gnu_dev_minor((f->stat).st_rdev);\u000a    pcVar7 = umaxtostr((ulong)uVar3,local_1128);\u000a    __sprintf_chk(__s,1,0xffffffffffffffff,&DAT_00416acd,(ulong)uVar12,string,uVar13,pcVar7);\u000a    __s = __s + (long)file_size_width + 1;\u000a  }\u000a  else {\u000a    fputs_unlocked(local_e78,stdout);\u000a    dired_pos = (size_t)(__s + (dired_pos - (long)local_e78));\u000a    if (print_owner == 0) {\u000a      format_user((ulong)(f->stat).st_uid,(ulong)(uint)owner_width,(ulong)f->stat_ok);\u000a    }\u000a    if (print_group == 0) {\u000a      format_group((ulong)(f->stat).st_gid,(ulong)(uint)group_width,(ulong)f->stat_ok);\u000a    }\u000a    if (print_author == 1) {\u000a      format_user((ulong)(f->stat).st_uid,(ulong)(uint)author_width,(ulong)f->stat_ok);\u000a    }\u000a    if (print_scontext == 1) {\u000a      format_user_or_group(f->scontext,0);\u000a    }\u000a    __s = local_e78;\u000a    if (f->stat_ok != false) goto LAB_00407b52;\u000aLAB_00407c0e:\u000a    if (f->stat_ok == false) {\u000a      string = "?";\u000a    }\u000a    else {\u000a      n = unsigned_file_size((f->stat).st_size);\u000a      string = human_readable(n,local_1108,(ulong)(uint)file_human_output_opts,1);\u000a    }\u000a    iVar11 = file_size_width;\u000a    iVar4 = gnu_mbswidth(string);\u000a    if (iVar4 < iVar11) {\u000a      iVar5 = (iVar4 + -1) - iVar11;\u000a      iVar10 = -2;\u000a      if (-3 < iVar5) {\u000a        iVar10 = iVar5;\u000a      }\u000a      memset(__s,0x20,(ulong)(uint)((iVar11 + 1 + iVar10) - iVar4) + 1);\u000a      iVar4 = (iVar11 + 1) - iVar4;\u000a      do {\u000a        __s = __s + 1;\u000a        iVar4 = iVar4 + -1;\u000a      } while (1 < iVar4);\u000a    }\u000a    do {\u000a      pcVar7 = __s;\u000a      cVar1 = *string;\u000a      string = string + 1;\u000a      *pcVar7 = cVar1;\u000a      __s = pcVar7 + 1;\u000a    } while (cVar1 != 0);\u000a    *pcVar7 = ' ';\u000a  }\u000a  ptVar8 = localtime((time_t *)&local_1140);\u000a  *__s = 1;\u000a  if ((ptVar8 == (tm *)0x0) || (f->stat_ok == false)) {\u000aLAB_00407d9b:\u000a    uVar3 = long_time_expected_width();\u000a    if (f->stat_ok == false) {\u000a      string = "?";\u000a    }\u000a    else {\u000a      string = timetostr(local_1140.tv_sec,local_1108);\u000a    }\u000a    __sprintf_chk(__s,1,0xffffffffffffffff,&DAT_00416ad2,(ulong)uVar3,string);\u000a    sVar6 = strlen(__s);\u000a  }\u000a  else {\u000a    local_1130 = f;\u000a    iVar11 = timespec_cmp();\u000a    if (iVar11 < 0) {\u000a      gettime(&current_time);\u000a    }\u000a    iVar11 = timespec_cmp();\u000a    if (iVar11 < 0) {\u000a      timespec_cmp();\u000a    }\u000a    sVar9 = align_nstrftime();\u000a    if (sVar9 == 0) {\u000a      f = local_1130;\u000a      if (*__s != 0) goto LAB_00407d9b;\u000a      sVar9 = 0;\u000a    }\u000a    sVar6 = sVar9 + 1;\u000a    *(undefined2 *)(__s + sVar9) = 0x20;\u000a    f = local_1130;\u000a  }\u000a  fputs_unlocked(local_e78,stdout);\u000a  dired_pos = (size_t)(__s + sVar6 + (dired_pos - (long)local_e78));\u000a  print_name_with_quoting(f,(obstack *)0x0,(size_t)&dired_obstack);\u000a  if (f->filetype == symbolic_link) {\u000a    if (f->linkname == (char *)0x0) {\u000a      return;\u000a    }\u000a    fputs_unlocked(" -> ",stdout);\u000a    dired_pos = dired_pos + 4;\u000a    print_name_with_quoting(f,(obstack *)0x1,0);\u000a  }\u000a  if (indicator_style != none) {\u000a    print_type_indicator();\u000a  }\u000a  return;\u000a}\u000a\u000a
p2908
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1128\nMOV R13,RDI\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x00407837\nLEA RDI,[R13 + 0x10]\nLEA RSI,[RSP + 0xc]\nCALL 0x00409280\nCMP byte ptr [0x0061e050],0x0\nJNZ 0x0040786c\nJMP 0x00407881\nMOV EAX,dword ptr [0xa0 + R13]\nMOV AL,byte ptr [0x416aba + RAX]\nMOV byte ptr [RSP + 0xc],AL\nMOV RAX,0x3f3f3f3f3f3f3f3f\nMOV qword ptr [RSP + 0xd],RAX\nMOV word ptr [RSP + 0x15],0x3f3f\nMOV byte ptr [RSP + 0x17],0x0\nCMP byte ptr [0x0061e050],0x0\nJZ 0x00407881\nMOV EAX,dword ptr [0xb4 + R13]\nCMP EAX,0x1\nJZ 0x00407885\nCMP EAX,0x2\nJNZ 0x0040788b\nMOV AL,0x2b\nJMP 0x00407887\nXOR EAX,EAX\nJMP 0x00407887\nMOV AL,0x2e\nMOV byte ptr [RSP + 0x16],AL\nMOV EAX,dword ptr [0x0061d834]\nTEST EAX,EAX\nJZ 0x004078ae\nCMP EAX,0x2\nJZ 0x004078b9\nCMP EAX,0x1\nJNZ 0x00407eb4\nLEA RDI,[R13 + 0x10]\nCALL 0x0040da90\nJMP 0x004078c2\nLEA RDI,[R13 + 0x10]\nCALL 0x0040daa0\nJMP 0x004078c2\nLEA RDI,[R13 + 0x10]\nCALL 0x0040da80\nMOV qword ptr [RSP + 0x18],RAX\nMOV qword ptr [RSP + 0x20],RDX\nCMP byte ptr [0x0061d83a],0x1\nJNZ 0x00407936\nMOV R14D,dword ptr [0x0061e054]\nLEA RDI,[RSP + 0x50]\nMOV ESI,0x15\nMOV RDX,R13\nCALL 0x00407ec0\nMOV RBP,RAX\nLEA RBX,[0x2e0 + RSP]\nMOV ESI,0x1\nMOV EDX,0xe3b\nMOV ECX,0x416ad2\nXOR EAX,EAX\nMOV R8D,R14D\nMOV RDI,RBX\nMOV R9,RBP\nCALL 0x00402730\nMOV RDI,RBX\nCALL 0x00402290\nLEA R12,[0x2e0 + RSP + RAX*0x1]\nCMP byte ptr [0x0061d73d],0x1\nJZ 0x0040794b\nJMP 0x004079f7\nLEA R12,[0x2e0 + RSP]\nCMP byte ptr [0x0061d73d],0x1\nJNZ 0x004079f7\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x0040797a\nMOV RDI,qword ptr [R13 + 0x50]\nMOV EDX,dword ptr [0x0061d864]\nMOV R8,qword ptr [0x0061d870]\nLEA RSI,[RSP + 0x50]\nMOV ECX,0x200\nCALL 0x0040a810\nMOV RBX,RAX\nJMP 0x0040797f\nMOV EBX,0x4168bd\nMOV EBP,dword ptr [0x0061e058]\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x0040b980\nMOV R15D,EAX\nCMP EBP,R15D\nJLE 0x004079e0\nLEA EAX,[R15 + -0x1]\nSUB EAX,EBP\nCMP EAX,-0x3\nMOV ECX,0xfffffffe\nCMOVG ECX,EAX\nLEA EDX,[RBP + RCX*0x1 + 0x1]\nSUB EDX,R15D\nINC RDX\nMOV ESI,0x20\nMOV RDI,R12\nCALL 0x00402350\nINC EBP\nSUB EBP,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nINC R12\nDEC EBP\nCMP EBP,0x1\nJG 0x004079d0\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RBX]\nINC RBX\nMOV byte ptr [R12],AL\nINC R12\nTEST AL,AL\nJNZ 0x004079e0\nMOV byte ptr [R12 + -0x1],0x20\nMOV EBP,dword ptr [0x0061e05c]\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x00407a1a\nMOV RDI,qword ptr [R13 + 0x20]\nLEA RSI,[RSP + 0x50]\nCALL 0x0040b4a0\nMOV RBX,RAX\nJMP 0x00407a1f\nMOV EBX,0x4168bd\nSUB RSP,0x8\nLEA R8,[RSP + 0x14]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416ac5\nXOR EAX,EAX\nMOV RDI,R12\nMOV R9D,EBP\nPUSH RBX\nCALL 0x00402730\nADD RSP,0x10\nMOV RDI,R12\nCALL 0x00402290\nMOV RBX,RAX\nCMP byte ptr [0x0061d741],0x1\nJNZ 0x00407a78\nMOV RSI,qword ptr [0x0061d5c8]\nMOV EDI,0x4169bb\nCALL 0x004023c0\nADD qword ptr [0x0061d810],0x2\nADD R12,RBX\nCMP byte ptr [0x0061d860],0x1\nJNZ 0x00407aa4\nCMP byte ptr [0x0061d878],0x1\nJNZ 0x00407aa4\nMOV AL,byte ptr [0x0061d879]\nTEST AL,AL\nJNZ 0x00407aa4\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00407bfd\nMOV RSI,qword ptr [0x0061d5c8]\nLEA R15,[0x2e0 + RSP]\nMOV RDI,R15\nCALL 0x004023c0\nSUB R12,R15\nADD qword ptr [0x0061d810],R12\nMOV AL,byte ptr [0x0061d860]\nTEST AL,AL\nJNZ 0x00407ae6\nMOV EDI,dword ptr [R13 + 0x2c]\nMOV ESI,dword ptr [0x0061e060]\nMOVZX EDX,byte ptr [0xb0 + R13]\nCALL 0x004088b0\nMOV AL,byte ptr [0x0061d878]\nTEST AL,AL\nJNZ 0x00407b07\nMOV EDI,dword ptr [R13 + 0x30]\nMOV ESI,dword ptr [0x0061e064]\nMOVZX EDX,byte ptr [0xb0 + R13]\nCALL 0x004088f0\nCMP byte ptr [0x0061d879],0x1\nJNZ 0x00407b27\nMOV EDI,dword ptr [R13 + 0x2c]\nMOV ESI,dword ptr [0x0061e068]\nMOVZX EDX,byte ptr [0xb0 + R13]\nCALL 0x004088b0\nCMP byte ptr [0x0061d73c],0x1\nJNZ 0x00407b44\nMOV RDI,qword ptr [0xa8 + R13]\nMOV EDX,dword ptr [0x0061e06c]\nXOR ESI,ESI\nCALL 0x00408930\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x00407c0e\nMOVZX EAX,word ptr [R13 + 0x28]\nOR EAX,0x4000\nAND EAX,0xf000\nCMP EAX,0x6000\nJNZ 0x00407c0e\nMOV EBX,dword ptr [0x0061e078]\nMOV EAX,dword ptr [0x0061e070]\nADD EBX,-0x2\nSUB EBX,EAX\nXOR ECX,ECX\nSUB EBX,dword ptr [0x0061e074]\nCMOVS EBX,ECX\nADD EBX,EAX\nMOV RDI,qword ptr [R13 + 0x38]\nCALL 0x00402560\nMOV EDI,EAX\nLEA RSI,[RSP + 0x50]\nCALL 0x0040b4a0\nMOV R14,RAX\nMOV R12D,dword ptr [0x0061e074]\nMOV RDI,qword ptr [R13 + 0x38]\nCALL 0x00402640\nMOV EDI,EAX\nLEA RSI,[RSP + 0x30]\nCALL 0x0040b4a0\nMOV RBP,RAX\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416acd\nMOV EAX,0x0\nMOV RDI,R15\nMOV R8D,EBX\nMOV R9,R14\nPUSH RBP\nPUSH R12\nCALL 0x00402730\nADD RSP,0x10\nMOVSXD RAX,dword ptr [0x0061e078]\nLEA R15,[R15 + RAX*0x1 + 0x1]\nJMP 0x00407cb5\nMOV R15,R12\nCMP byte ptr [0xb0 + R13],0x0\nJNZ 0x00407b52\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x00407c45\nMOV RDI,qword ptr [R13 + 0x40]\nCALL 0x00406430\nMOV EDX,dword ptr [0x0061d868]\nMOV R8,qword ptr [0x0061d500]\nLEA RSI,[RSP + 0x50]\nMOV ECX,0x1\nMOV RDI,RAX\nCALL 0x0040a810\nMOV RBX,RAX\nJMP 0x00407c4a\nMOV EBX,0x4168bd\nMOV EBP,dword ptr [0x0061e078]\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x0040b980\nMOV R12D,EAX\nCMP EBP,R12D\nJLE 0x00407ca0\nLEA EAX,[R12 + -0x1]\nSUB EAX,EBP\nCMP EAX,-0x3\nMOV ECX,0xfffffffe\nCMOVG ECX,EAX\nLEA EDX,[RBP + RCX*0x1 + 0x1]\nSUB EDX,R12D\nINC RDX\nMOV ESI,0x20\nMOV RDI,R15\nCALL 0x00402350\nINC EBP\nSUB EBP,R12D\nINC R15\nDEC EBP\nCMP EBP,0x1\nJG 0x00407c90\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RBX]\nINC RBX\nMOV byte ptr [R15],AL\nINC R15\nTEST AL,AL\nJNZ 0x00407ca0\nMOV byte ptr [R15 + -0x1],0x20\nLEA RDI,[RSP + 0x18]\nCALL 0x004020e0\nMOV R12,RAX\nMOV byte ptr [R15],0x1\nTEST R12,R12\nJZ 0x00407d9b\nMOV AL,byte ptr [0xb0 + R13]\nTEST AL,AL\nJZ 0x00407d9b\nMOV qword ptr [RSP + 0x28],R13\nMOV RDI,qword ptr [0x0061d620]\nMOV RSI,qword ptr [0x0061d628]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x20]\nCALL 0x0040f390\nTEST EAX,EAX\nJNS 0x00407d0e\nMOV EDI,0x61d620\nCALL 0x004097e0\nMOV R13,qword ptr [0x0061d620]\nLEA RDI,[-0xf0c2ac + R13]\nMOV RBX,qword ptr [0x0061d628]\nMOV RBP,qword ptr [RSP + 0x18]\nMOV R14,qword ptr [RSP + 0x20]\nMOV RSI,RBX\nMOV RDX,RBP\nMOV RCX,R14\nCALL 0x0040f390\nTEST EAX,EAX\nJS 0x00407d43\nXOR EAX,EAX\nJMP 0x00407d57\nMOV RDI,RBP\nMOV RSI,R14\nMOV RDX,R13\nMOV RCX,RBX\nCALL 0x0040f390\nSHR EAX,0x1f\nMOVZX EAX,AL\nMOV RSI,qword ptr [0x61d510 + RAX*0x8]\nMOV RCX,qword ptr [0x0061d730]\nMOV R8D,dword ptr [RSP + 0x20]\nMOV RDI,R15\nMOV RDX,R12\nCALL 0x004089d0\nTEST RAX,RAX\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x00407d91\nLEA RBX,[R15 + RAX*0x1 + 0x1]\nMOV word ptr [R15 + RAX*0x1],0x20\nJMP 0x00407df2\nCMP byte ptr [R15],0x0\nJZ 0x00407ead\nCALL 0x00408aa0\nMOV EBX,EAX\nCMP byte ptr [0xb0 + R13],0x0\nJZ 0x00407dc0\nMOV RDI,qword ptr [RSP + 0x18]\nLEA RSI,[RSP + 0x50]\nCALL 0x00408b30\nMOV R9,RAX\nJMP 0x00407dc6\nMOV R9D,0x4168bd\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x416ad2\nXOR EAX,EAX\nMOV RDI,R15\nMOV R8D,EBX\nCALL 0x00402730\nMOV RDI,R15\nCALL 0x00402290\nMOV RBX,RAX\nADD RBX,R15\nMOV RSI,qword ptr [0x0061d5c8]\nLEA RBP,[0x2e0 + RSP]\nMOV RDI,RBP\nCALL 0x004023c0\nSUB RBX,RBP\nADD qword ptr [0x0061d810],RBX\nXOR ESI,ESI\nMOV EDX,0x61d748\nMOV RDI,R13\nMOV RCX,RBX\nCALL 0x00407f10\nMOV RBP,RAX\nMOV EDX,dword ptr [0xa0 + R13]\nCMP EDX,0x6\nJNZ 0x00407e81\nCMP qword ptr [R13 + 0x8],0x0\nJZ 0x00407e9b\nMOV RSI,qword ptr [0x0061d5c8]\nMOV EDI,0x416ad7\nCALL 0x004023c0\nADD qword ptr [0x0061d810],0x4\nLEA RCX,[RBX + RBP*0x1 + 0x4]\nMOV ESI,0x1\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00407f10\nCMP dword ptr [0x0061d6c8],0x0\nJZ 0x00407e9b\nMOV ESI,dword ptr [0xa4 + R13]\nMOV EDI,0x1\nXOR EDX,EDX\nJMP 0x00407e96\nCMP dword ptr [0x0061d6c8],0x0\nJZ 0x00407e9b\nMOV ESI,dword ptr [R13 + 0x28]\nMOVZX EDI,byte ptr [0xb0 + R13]\nCALL 0x00408050\nADD RSP,0x1128\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00407d83\nCALL 0x00402100\n'
p2909
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 28 11 00 00\n49 89 fd\n41 80 bd b0 00 00 00 00\n74 19\n49 8d 7d 10\n48 8d 74 24 0c\ne8 54 1a 00 00\n80 3d 1d 68 21 00 00\n75 37\neb 4a\n41 8b 85 a0 00 00 00\n8a 80 ba 6a 41 00\n88 44 24 0c\n48 b8 3f 3f 3f 3f 3f 3f 3f 3f\n48 89 44 24 0d\n66 c7 44 24 15 3f 3f\nc6 44 24 17 00\n80 3d e6 67 21 00 00\n74 15\n41 8b 85 b4 00 00 00\n83 f8 01\n74 0d\n83 f8 02\n75 0e\nb0 2b\neb 06\n31 c0\neb 02\nb0 2e\n88 44 24 16\n8b 05 a3 5f 21 00\n85 c0\n74 19\n83 f8 02\n74 1f\n83 f8 01\n0f 85 11 06 00 00\n49 8d 7d 10\ne8 e4 61 00 00\neb 14\n49 8d 7d 10\ne8 e9 61 00 00\neb 09\n49 8d 7d 10\ne8 be 61 00 00\n48 89 44 24 18\n48 89 54 24 20\n80 3d 67 5f 21 00 01\n75 61\n44 8b 35 78 67 21 00\n48 8d 7c 24 50\nbe 15 00 00 00\n4c 89 ea\ne8 d2 05 00 00\n48 89 c5\n48 8d 9c 24 e0 02 00 00\nbe 01 00 00 00\nba 3b 0e 00 00\nb9 d2 6a 41 00\n31 c0\n45 89 f0\n48 89 df\n49 89 e9\ne8 18 ae ff ff\n48 89 df\ne8 70 a9 ff ff\n4c 8d a4 04 e0 02 00 00\n80 3d 0e 5e 21 00 01\n74 1a\ne9 c1 00 00 00\n4c 8d a4 24 e0 02 00 00\n80 3d f8 5d 21 00 01\n0f 85 ac 00 00 00\n41 80 bd b0 00 00 00 00\n74 25\n49 8b 7d 50\n8b 15 05 5f 21 00\n4c 8b 05 0a 5f 21 00\n48 8d 74 24 50\nb9 00 02 00 00\ne8 9b 2e 00 00\n48 89 c3\neb 05\nbb bd 68 41 00\n8b 2d d3 66 21 00\n31 f6\n48 89 df\ne8 f1 3f 00 00\n41 89 c7\n44 39 fd\n7e 49\n41 8d 47 ff\n29 e8\n83 f8 fd\nb9 fe ff ff ff\n0f 4f c8\n8d 54 0d 01\n44 29 fa\n48 ff c2\nbe 20 00 00 00\n4c 89 e7\ne8 91 a9 ff ff\nff c5\n44 29 fd\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff c4\nff cd\n83 fd 01\n7f f6\n66 0f 1f 44 00 00\n0f b6 03\n48 ff c3\n41 88 04 24\n49 ff c4\n84 c0\n75 ef\n41 c6 44 24 ff 20\n8b 2d 5f 66 21 00\n41 80 bd b0 00 00 00 00\n74 13\n49 8b 7d 20\n48 8d 74 24 50\ne8 8b 3a 00 00\n48 89 c3\neb 05\nbb bd 68 41 00\n48 83 ec 08\n4c 8d 44 24 14\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 c5 6a 41 00\n31 c0\n4c 89 e7\n41 89 e9\n53\ne8 e9 ac ff ff\n48 83 c4 10\n4c 89 e7\ne8 3d a8 ff ff\n48 89 c3\n80 3d e4 5c 21 00 01\n75 19\n48 8b 35 62 5b 21 00\nbf bb 69 41 00\ne8 50 a9 ff ff\n48 83 05 98 5d 21 00 02\n49 01 dc\n80 3d de 5d 21 00 01\n75 20\n80 3d ed 5d 21 00 01\n75 17\n8a 05 e6 5d 21 00\n84 c0\n75 0d\n80 3d 9e 5c 21 00 01\n0f 85 59 01 00 00\n48 8b 35 1d 5b 21 00\n4c 8d bc 24 e0 02 00 00\n4c 89 ff\ne8 05 a9 ff ff\n4d 29 fc\n4c 01 25 4b 5d 21 00\n8a 05 95 5d 21 00\n84 c0\n75 17\n41 8b 7d 2c\n8b 35 87 65 21 00\n41 0f b6 95 b0 00 00 00\ne8 ca 0d 00 00\n8a 05 8c 5d 21 00\n84 c0\n75 17\n41 8b 7d 30\n8b 35 6a 65 21 00\n41 0f b6 95 b0 00 00 00\ne8 e9 0d 00 00\n80 3d 6b 5d 21 00 01\n75 17\n41 8b 7d 2c\n8b 35 4e 65 21 00\n41 0f b6 95 b0 00 00 00\ne8 89 0d 00 00\n80 3d 0e 5c 21 00 01\n75 14\n49 8b bd a8 00 00 00\n8b 15 2f 65 21 00\n31 f6\ne8 ec 0d 00 00\n41 80 bd b0 00 00 00 00\n0f 84 bc 00 00 00\n41 0f b7 45 28\n0d 00 40 00 00\n25 00 f0 00 00\n3d 00 60 00 00\n0f 85 a2 00 00 00\n8b 1d 06 65 21 00\n8b 05 f8 64 21 00\n83 c3 fe\n29 c3\n31 c9\n2b 1d ef 64 21 00\n0f 48 d9\n01 c3\n49 8b 7d 38\ne8 cd a9 ff ff\n89 c7\n48 8d 74 24 50\ne8 01 39 00 00\n49 89 c6\n44 8b 25 cb 64 21 00\n49 8b 7d 38\ne8 8e aa ff ff\n89 c7\n48 8d 74 24 30\ne8 e2 38 00 00\n48 89 c5\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 cd 6a 41 00\nb8 00 00 00 00\n4c 89 ff\n41 89 d8\n4d 89 f1\n55\n41 54\ne8 48 ab ff ff\n48 83 c4 10\n48 63 05 85 64 21 00\n4d 8d 7c 07 01\ne9 b8 00 00 00\n4d 89 e7\n41 80 bd b0 00 00 00 00\n0f 85 44 ff ff ff\n41 80 bd b0 00 00 00 00\n74 2d\n49 8b 7d 40\ne8 0f e8 ff ff\n8b 15 41 5c 21 00\n4c 8b 05 d2 58 21 00\n48 8d 74 24 50\nb9 01 00 00 00\n48 89 c7\ne8 d0 2b 00 00\n48 89 c3\neb 05\nbb bd 68 41 00\n8b 2d 28 64 21 00\n31 f6\n48 89 df\ne8 26 3d 00 00\n41 89 c4\n44 39 e5\n7e 3e\n41 8d 44 24 ff\n29 e8\n83 f8 fd\nb9 fe ff ff ff\n0f 4f c8\n8d 54 0d 01\n44 29 e2\n48 ff c2\nbe 20 00 00 00\n4c 89 ff\ne8 c5 a6 ff ff\nff c5\n44 29 e5\n49 ff c7\nff cd\n83 fd 01\n7f f6\n66 0f 1f 44 00 00\n0f b6 03\n48 ff c3\n41 88 07\n49 ff c7\n84 c0\n75 f0\n41 c6 47 ff 20\n48 8d 7c 24 18\ne8 21 a4 ff ff\n49 89 c4\n41 c6 07 01\n4d 85 e4\n0f 84 cc 00 00 00\n41 8a 85 b0 00 00 00\n84 c0\n0f 84 bd 00 00 00\n4c 89 6c 24 28\n48 8b 3d 36 59 21 00\n48 8b 35 37 59 21 00\n48 8b 54 24 18\n48 8b 4c 24 20\ne8 90 76 00 00\n85 c0\n79 0a\nbf 20 d6 61 00\ne8 d2 1a 00 00\n4c 8b 2d 0b 59 21 00\n49 8d bd 54 3d 0f ff\n48 8b 1d 05 59 21 00\n48 8b 6c 24 18\n4c 8b 74 24 20\n48 89 de\n48 89 ea\n4c 89 f1\ne8 55 76 00 00\n85 c0\n78 04\n31 c0\neb 14\n48 89 ef\n4c 89 f6\n4c 89 ea\n48 89 d9\ne8 3c 76 00 00\nc1 e8 1f\n0f b6 c0\n48 8b 34 c5 10 d5 61 00\n48 8b 0d c7 59 21 00\n44 8b 44 24 20\n4c 89 ff\n4c 89 e2\ne8 57 0c 00 00\n48 85 c0\n4c 8b 6c 24 28\n74 0e\n49 8d 5c 07 01\n66 41 c7 04 07 20 00\neb 61\n41 80 3f 00\n0f 84 12 01 00 00\ne8 00 0d 00 00\n89 c3\n41 80 bd b0 00 00 00 00\n74 14\n48 8b 7c 24 18\n48 8d 74 24 50\ne8 75 0d 00 00\n49 89 c1\neb 06\n41 b9 bd 68 41 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 d2 6a 41 00\n31 c0\n4c 89 ff\n41 89 d8\ne8 4c a9 ff ff\n4c 89 ff\ne8 a4 a4 ff ff\n48 89 c3\n4c 01 fb\n48 8b 35 cf 57 21 00\n48 8d ac 24 e0 02 00 00\n48 89 ef\ne8 b7 a5 ff ff\n48 29 eb\n48 01 1d fd 59 21 00\n31 f6\nba 48 d7 61 00\n4c 89 ef\n48 89 d9\ne8 eb 00 00 00\n48 89 c5\n41 8b 95 a0 00 00 00\n83 fa 06\n75 4d\n49 83 7d 08 00\n74 60\n48 8b 35 86 57 21 00\nbf d7 6a 41 00\ne8 74 a5 ff ff\n48 83 05 bc 59 21 00 04\n48 8d 4c 2b 04\nbe 01 00 00 00\n31 d2\n4c 89 ef\ne8 a8 00 00 00\n83 3d 59 58 21 00 00\n74 2a\n41 8b b5 a4 00 00 00\nbf 01 00 00 00\n31 d2\neb 15\n83 3d 40 58 21 00 00\n74 11\n41 8b 75 28\n41 0f b6 bd b0 00 00 00\ne8 b5 01 00 00\n48 81 c4 28 11 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\ne9 cf fe ff ff\ne8 47 a2 ff ff\n'
p2910
S'.text:0000000000407800\n.text:0000000000407801\n.text:0000000000407803\n.text:0000000000407805\n.text:0000000000407807\n.text:0000000000407809\n.text:000000000040780a\n.text:0000000000407811\n.text:0000000000407814\n.text:000000000040781c\n.text:000000000040781e\n.text:0000000000407822\n.text:0000000000407827\n.text:000000000040782c\n.text:0000000000407833\n.text:0000000000407835\n.text:0000000000407837\n.text:000000000040783e\n.text:0000000000407844\n.text:0000000000407848\n.text:0000000000407852\n.text:0000000000407857\n.text:000000000040785e\n.text:0000000000407863\n.text:000000000040786a\n.text:000000000040786c\n.text:0000000000407873\n.text:0000000000407876\n.text:0000000000407878\n.text:000000000040787b\n.text:000000000040787d\n.text:000000000040787f\n.text:0000000000407881\n.text:0000000000407883\n.text:0000000000407885\n.text:0000000000407887\n.text:000000000040788b\n.text:0000000000407891\n.text:0000000000407893\n.text:0000000000407895\n.text:0000000000407898\n.text:000000000040789a\n.text:000000000040789d\n.text:00000000004078a3\n.text:00000000004078a7\n.text:00000000004078ac\n.text:00000000004078ae\n.text:00000000004078b2\n.text:00000000004078b7\n.text:00000000004078b9\n.text:00000000004078bd\n.text:00000000004078c2\n.text:00000000004078c7\n.text:00000000004078cc\n.text:00000000004078d3\n.text:00000000004078d5\n.text:00000000004078dc\n.text:00000000004078e1\n.text:00000000004078e6\n.text:00000000004078e9\n.text:00000000004078ee\n.text:00000000004078f1\n.text:00000000004078f9\n.text:00000000004078fe\n.text:0000000000407903\n.text:0000000000407908\n.text:000000000040790a\n.text:000000000040790d\n.text:0000000000407910\n.text:0000000000407913\n.text:0000000000407918\n.text:000000000040791b\n.text:0000000000407920\n.text:0000000000407928\n.text:000000000040792f\n.text:0000000000407931\n.text:0000000000407936\n.text:000000000040793e\n.text:0000000000407945\n.text:000000000040794b\n.text:0000000000407953\n.text:0000000000407955\n.text:0000000000407959\n.text:000000000040795f\n.text:0000000000407966\n.text:000000000040796b\n.text:0000000000407970\n.text:0000000000407975\n.text:0000000000407978\n.text:000000000040797a\n.text:000000000040797f\n.text:0000000000407985\n.text:0000000000407987\n.text:000000000040798a\n.text:000000000040798f\n.text:0000000000407992\n.text:0000000000407995\n.text:0000000000407997\n.text:000000000040799b\n.text:000000000040799d\n.text:00000000004079a0\n.text:00000000004079a5\n.text:00000000004079a8\n.text:00000000004079ac\n.text:00000000004079af\n.text:00000000004079b2\n.text:00000000004079b7\n.text:00000000004079ba\n.text:00000000004079bf\n.text:00000000004079c1\n.text:00000000004079c4\n.text:00000000004079d0\n.text:00000000004079d3\n.text:00000000004079d5\n.text:00000000004079d8\n.text:00000000004079da\n.text:00000000004079e0\n.text:00000000004079e3\n.text:00000000004079e6\n.text:00000000004079ea\n.text:00000000004079ed\n.text:00000000004079ef\n.text:00000000004079f1\n.text:00000000004079f7\n.text:00000000004079fd\n.text:0000000000407a05\n.text:0000000000407a07\n.text:0000000000407a0b\n.text:0000000000407a10\n.text:0000000000407a15\n.text:0000000000407a18\n.text:0000000000407a1a\n.text:0000000000407a1f\n.text:0000000000407a23\n.text:0000000000407a28\n.text:0000000000407a2d\n.text:0000000000407a34\n.text:0000000000407a39\n.text:0000000000407a3b\n.text:0000000000407a3e\n.text:0000000000407a41\n.text:0000000000407a42\n.text:0000000000407a47\n.text:0000000000407a4b\n.text:0000000000407a4e\n.text:0000000000407a53\n.text:0000000000407a56\n.text:0000000000407a5d\n.text:0000000000407a5f\n.text:0000000000407a66\n.text:0000000000407a6b\n.text:0000000000407a70\n.text:0000000000407a78\n.text:0000000000407a7b\n.text:0000000000407a82\n.text:0000000000407a84\n.text:0000000000407a8b\n.text:0000000000407a8d\n.text:0000000000407a93\n.text:0000000000407a95\n.text:0000000000407a97\n.text:0000000000407a9e\n.text:0000000000407aa4\n.text:0000000000407aab\n.text:0000000000407ab3\n.text:0000000000407ab6\n.text:0000000000407abb\n.text:0000000000407abe\n.text:0000000000407ac5\n.text:0000000000407acb\n.text:0000000000407acd\n.text:0000000000407acf\n.text:0000000000407ad3\n.text:0000000000407ad9\n.text:0000000000407ae1\n.text:0000000000407ae6\n.text:0000000000407aec\n.text:0000000000407aee\n.text:0000000000407af0\n.text:0000000000407af4\n.text:0000000000407afa\n.text:0000000000407b02\n.text:0000000000407b07\n.text:0000000000407b0e\n.text:0000000000407b10\n.text:0000000000407b14\n.text:0000000000407b1a\n.text:0000000000407b22\n.text:0000000000407b27\n.text:0000000000407b2e\n.text:0000000000407b30\n.text:0000000000407b37\n.text:0000000000407b3d\n.text:0000000000407b3f\n.text:0000000000407b44\n.text:0000000000407b4c\n.text:0000000000407b52\n.text:0000000000407b57\n.text:0000000000407b5c\n.text:0000000000407b61\n.text:0000000000407b66\n.text:0000000000407b6c\n.text:0000000000407b72\n.text:0000000000407b78\n.text:0000000000407b7b\n.text:0000000000407b7d\n.text:0000000000407b7f\n.text:0000000000407b85\n.text:0000000000407b88\n.text:0000000000407b8a\n.text:0000000000407b8e\n.text:0000000000407b93\n.text:0000000000407b95\n.text:0000000000407b9a\n.text:0000000000407b9f\n.text:0000000000407ba2\n.text:0000000000407ba9\n.text:0000000000407bad\n.text:0000000000407bb2\n.text:0000000000407bb4\n.text:0000000000407bb9\n.text:0000000000407bbe\n.text:0000000000407bc1\n.text:0000000000407bc6\n.text:0000000000407bcd\n.text:0000000000407bd2\n.text:0000000000407bd7\n.text:0000000000407bda\n.text:0000000000407bdd\n.text:0000000000407be0\n.text:0000000000407be1\n.text:0000000000407be3\n.text:0000000000407be8\n.text:0000000000407bec\n.text:0000000000407bf3\n.text:0000000000407bf8\n.text:0000000000407bfd\n.text:0000000000407c00\n.text:0000000000407c08\n.text:0000000000407c0e\n.text:0000000000407c16\n.text:0000000000407c18\n.text:0000000000407c1c\n.text:0000000000407c21\n.text:0000000000407c27\n.text:0000000000407c2e\n.text:0000000000407c33\n.text:0000000000407c38\n.text:0000000000407c3b\n.text:0000000000407c40\n.text:0000000000407c43\n.text:0000000000407c45\n.text:0000000000407c4a\n.text:0000000000407c50\n.text:0000000000407c52\n.text:0000000000407c55\n.text:0000000000407c5a\n.text:0000000000407c5d\n.text:0000000000407c60\n.text:0000000000407c62\n.text:0000000000407c67\n.text:0000000000407c69\n.text:0000000000407c6c\n.text:0000000000407c71\n.text:0000000000407c74\n.text:0000000000407c78\n.text:0000000000407c7b\n.text:0000000000407c7e\n.text:0000000000407c83\n.text:0000000000407c86\n.text:0000000000407c8b\n.text:0000000000407c8d\n.text:0000000000407c90\n.text:0000000000407c93\n.text:0000000000407c95\n.text:0000000000407c98\n.text:0000000000407c9a\n.text:0000000000407ca0\n.text:0000000000407ca3\n.text:0000000000407ca6\n.text:0000000000407ca9\n.text:0000000000407cac\n.text:0000000000407cae\n.text:0000000000407cb0\n.text:0000000000407cb5\n.text:0000000000407cba\n.text:0000000000407cbf\n.text:0000000000407cc2\n.text:0000000000407cc6\n.text:0000000000407cc9\n.text:0000000000407ccf\n.text:0000000000407cd6\n.text:0000000000407cd8\n.text:0000000000407cde\n.text:0000000000407ce3\n.text:0000000000407cea\n.text:0000000000407cf1\n.text:0000000000407cf6\n.text:0000000000407cfb\n.text:0000000000407d00\n.text:0000000000407d02\n.text:0000000000407d04\n.text:0000000000407d09\n.text:0000000000407d0e\n.text:0000000000407d15\n.text:0000000000407d1c\n.text:0000000000407d23\n.text:0000000000407d28\n.text:0000000000407d2d\n.text:0000000000407d30\n.text:0000000000407d33\n.text:0000000000407d36\n.text:0000000000407d3b\n.text:0000000000407d3d\n.text:0000000000407d3f\n.text:0000000000407d41\n.text:0000000000407d43\n.text:0000000000407d46\n.text:0000000000407d49\n.text:0000000000407d4c\n.text:0000000000407d4f\n.text:0000000000407d54\n.text:0000000000407d57\n.text:0000000000407d5a\n.text:0000000000407d62\n.text:0000000000407d69\n.text:0000000000407d6e\n.text:0000000000407d71\n.text:0000000000407d74\n.text:0000000000407d79\n.text:0000000000407d7c\n.text:0000000000407d81\n.text:0000000000407d83\n.text:0000000000407d88\n.text:0000000000407d8f\n.text:0000000000407d91\n.text:0000000000407d95\n.text:0000000000407d9b\n.text:0000000000407da0\n.text:0000000000407da2\n.text:0000000000407daa\n.text:0000000000407dac\n.text:0000000000407db1\n.text:0000000000407db6\n.text:0000000000407dbb\n.text:0000000000407dbe\n.text:0000000000407dc0\n.text:0000000000407dc6\n.text:0000000000407dcb\n.text:0000000000407dd2\n.text:0000000000407dd7\n.text:0000000000407dd9\n.text:0000000000407ddc\n.text:0000000000407ddf\n.text:0000000000407de4\n.text:0000000000407de7\n.text:0000000000407dec\n.text:0000000000407def\n.text:0000000000407df2\n.text:0000000000407df9\n.text:0000000000407e01\n.text:0000000000407e04\n.text:0000000000407e09\n.text:0000000000407e0c\n.text:0000000000407e13\n.text:0000000000407e15\n.text:0000000000407e1a\n.text:0000000000407e1d\n.text:0000000000407e20\n.text:0000000000407e25\n.text:0000000000407e28\n.text:0000000000407e2f\n.text:0000000000407e32\n.text:0000000000407e34\n.text:0000000000407e39\n.text:0000000000407e3b\n.text:0000000000407e42\n.text:0000000000407e47\n.text:0000000000407e4c\n.text:0000000000407e54\n.text:0000000000407e59\n.text:0000000000407e5e\n.text:0000000000407e60\n.text:0000000000407e63\n.text:0000000000407e68\n.text:0000000000407e6f\n.text:0000000000407e71\n.text:0000000000407e78\n.text:0000000000407e7d\n.text:0000000000407e7f\n.text:0000000000407e81\n.text:0000000000407e88\n.text:0000000000407e8a\n.text:0000000000407e8e\n.text:0000000000407e96\n.text:0000000000407e9b\n.text:0000000000407ea2\n.text:0000000000407ea3\n.text:0000000000407ea5\n.text:0000000000407ea7\n.text:0000000000407ea9\n.text:0000000000407eab\n.text:0000000000407eac\n.text:0000000000407ead\n.text:0000000000407eaf\n.text:0000000000407eb4\n'
p2911
tp2912
sS'iswcntrl'
p2913
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p2914
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0061d0a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2915
S'JMP qword ptr [0x0061d0a0]\n'
p2916
S'ff 25 fa ae 21 00\n'
p2917
S'.plt:00000000004021a0\n'
p2918
tp2919
sS'fputs_unlocked'
p2920
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p2921
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0061d1b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2922
S'JMP qword ptr [0x0061d1b0]\n'
p2923
S'ff 25 ea ad 21 00\n'
p2924
S'.plt:00000000004023c0\n'
p2925
tp2926
sS'xcharalloc'
p2927
(S'\n__stdcall xcharalloc(size_t n)\n'
p2928
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p2929
S'JMP 0x0040f910\n'
p2930
S'e9 2b ff ff ff\n'
p2931
S'.text:000000000040f9e0\n'
p2932
tp2933
sS'time_t_int_add_ok'
p2934
(S'\n__stdcall time_t_int_add_ok(time_t a)\n'
p2935
V\u000aint time_t_int_add_ok(time_t a)\u000a\u000a{\u000a  uint in_ESI;\u000a  \u000a  return (int)((uint)((ulong)((long)(int)(((uint)a & in_ESI & 1) + ((int)in_ESI >> 1)) + (a >> 1) +\u000a                             0x4000000000000000) >> 0x3f) ^ 1);\u000a}\u000a\u000a
p2936
S'MOV EAX,EDI\nAND EAX,ESI\nSAR RDI,1\nSAR ESI,1\nAND EAX,0x1\nADD EAX,ESI\nMOVSXD RCX,EAX\nADD RCX,RDI\nMOV RAX,0x4000000000000000\nADD RAX,RCX\nSHR RAX,0x3f\nXOR EAX,0x1\nRET\n'
p2937
S'89 f8\n21 f0\n48 d1 ff\nd1 fe\n83 e0 01\n01 f0\n48 63 c8\n48 01 f9\n48 b8 00 00 00 00 00 00 00 40\n48 01 c8\n48 c1 e8 3f\n83 f0 01\nc3\n'
p2938
S'.text:0000000000411840\n.text:0000000000411842\n.text:0000000000411844\n.text:0000000000411847\n.text:0000000000411849\n.text:000000000041184c\n.text:000000000041184e\n.text:0000000000411851\n.text:0000000000411854\n.text:000000000041185e\n.text:0000000000411861\n.text:0000000000411865\n.text:0000000000411868\n'
p2939
tp2940
sS'isatty'
p2941
(S'\n__stdcall isatty(int __fd)\n'
p2942
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0061d090)();\u000a  return iVar1;\u000a}\u000a\u000a
p2943
S'JMP qword ptr [0x0061d090]\n'
p2944
S'ff 25 0a af 21 00\n'
p2945
S'.plt:0000000000402180\n'
p2946
tp2947
sS'c_isalnum'
p2948
(S'\n__stdcall c_isalnum()\n'
p2949
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2950
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00410b5b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00410b5b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00410b5a\nXOR EAX,EAX\nRET\n'
p2951
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p2952
S'.text:0000000000410b40\n.text:0000000000410b42\n.text:0000000000410b45\n.text:0000000000410b48\n.text:0000000000410b4a\n.text:0000000000410b54\n.text:0000000000410b58\n.text:0000000000410b5a\n.text:0000000000410b5b\n.text:0000000000410b5e\n.text:0000000000410b61\n.text:0000000000410b63\n.text:0000000000410b65\n'
p2953
tp2954
sS'human_options'
p2955
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p2956
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p2957
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x0040afb0\nCMP qword ptr [RBX],0x0\nJNZ 0x0040afa5\nCALL 0x0040b0c0\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p2958
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p2959
S'.text:000000000040af80\n.text:000000000040af81\n.text:000000000040af84\n.text:000000000040af87\n.text:000000000040af8a\n.text:000000000040af8d\n.text:000000000040af92\n.text:000000000040af96\n.text:000000000040af98\n.text:000000000040af9d\n.text:000000000040afa0\n.text:000000000040afa5\n.text:000000000040afa6\n'
p2960
tp2961
sS'rev_strcmp_df_size'
p2962
(S'\n__stdcall rev_strcmp_df_size(V a, V b)\n'
p2963
V\u000aint rev_strcmp_df_size(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_size((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p2964
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x00406ada\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x00406afd\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x00406afd\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407220\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p2965
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 00 fa ff ff\n89 c3\n4c 89 f7\ne8 f6 f9 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 23 07 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p2966
S'.text:0000000000406ab0\n.text:0000000000406ab2\n.text:0000000000406ab4\n.text:0000000000406ab5\n.text:0000000000406ab8\n.text:0000000000406abb\n.text:0000000000406ac0\n.text:0000000000406ac2\n.text:0000000000406ac5\n.text:0000000000406aca\n.text:0000000000406acc\n.text:0000000000406ace\n.text:0000000000406ad0\n.text:0000000000406ad3\n.text:0000000000406ad8\n.text:0000000000406ada\n.text:0000000000406adc\n.text:0000000000406ade\n.text:0000000000406ae3\n.text:0000000000406ae6\n.text:0000000000406ae8\n.text:0000000000406aed\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406af4\n.text:0000000000406af6\n.text:0000000000406af8\n.text:0000000000406afd\n.text:0000000000406aff\n.text:0000000000406b00\n.text:0000000000406b02\n.text:0000000000406b04\n'
p2967
tp2968
sS'freecon'
p2969
(S'\n__stdcall freecon(security_context_t con)\n'
p2970
V\u000avoid freecon(security_context_t con)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2971
S'RET\n'
p2972
S'c3\n'
p2973
S'.text:000000000040d860\n'
p2974
tp2975
sS'visit_dir'
p2976
(S'\n__stdcall visit_dir(dev_t dev, ino_t ino)\n'
p2977
V\u000a_Bool visit_dir(dev_t dev,ino_t ino)\u000a\u000a{\u000a  ino_t *entry;\u000a  ino_t *piVar1;\u000a  \u000a  entry = (ino_t *)xmalloc(0x10);\u000a  *entry = ino;\u000a  entry[1] = dev;\u000a  piVar1 = (ino_t *)hash_insert(active_dir_set,entry);\u000a  if (piVar1 != (ino_t *)0x0) {\u000a    if (piVar1 != entry) {\u000a      free(entry);\u000a    }\u000a    return (_Bool)(piVar1 != entry);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p2978
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV EDI,0x10\nCALL 0x0040f910\nMOV RBX,RAX\nMOV qword ptr [RBX],R14\nMOV qword ptr [RBX + 0x8],R15\nMOV RDI,qword ptr [0x0061d6d0]\nMOV RSI,RBX\nCALL 0x0040a560\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00405c5f\nCMP R14,RBX\nJZ 0x00405c53\nMOV RDI,RBX\nCALL 0x004020d0\nCMP R14,RBX\nSETNZ AL\nPOP RBX\nPOP R14\nPOP R15\nRET\nCALL 0x0040faa0\n'
p2979
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\nbf 10 00 00 00\ne8 eb 9c 00 00\n48 89 c3\n4c 89 33\n4c 89 7b 08\n48 8b 3d 9a 7a 21 00\n48 89 de\ne8 22 49 00 00\n49 89 c6\n4d 85 f6\n74 19\n49 39 de\n74 08\n48 89 df\ne8 7d c4 ff ff\n49 39 de\n0f 95 c0\n5b\n41 5e\n41 5f\nc3\ne8 3c 9e 00 00\n'
p2980
S'.text:0000000000405c10\n.text:0000000000405c12\n.text:0000000000405c14\n.text:0000000000405c15\n.text:0000000000405c18\n.text:0000000000405c1b\n.text:0000000000405c20\n.text:0000000000405c25\n.text:0000000000405c28\n.text:0000000000405c2b\n.text:0000000000405c2f\n.text:0000000000405c36\n.text:0000000000405c39\n.text:0000000000405c3e\n.text:0000000000405c41\n.text:0000000000405c44\n.text:0000000000405c46\n.text:0000000000405c49\n.text:0000000000405c4b\n.text:0000000000405c4e\n.text:0000000000405c53\n.text:0000000000405c56\n.text:0000000000405c59\n.text:0000000000405c5a\n.text:0000000000405c5c\n.text:0000000000405c5e\n.text:0000000000405c5f\n'
p2981
tp2982
sS'timespec_sign'
p2983
(S'\n__stdcall timespec_sign()\n'
p2984
V\u000aint timespec_sign(void)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong in_RSI;\u000a  ulong in_RDI;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (-1 < (long)in_RDI) {\u000a    uVar1 = (uint)((in_RSI | in_RDI) != 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p2985
S'XOR ECX,ECX\nOR RSI,RDI\nSETNZ CL\nTEST RDI,RDI\nMOV EAX,0xffffffff\nCMOVNS EAX,ECX\nRET\n'
p2986
S'31 c9\n48 09 fe\n0f 95 c1\n48 85 ff\nb8 ff ff ff ff\n0f 49 c1\nc3\n'
p2987
S'.text:000000000040f3b0\n.text:000000000040f3b2\n.text:000000000040f3b5\n.text:000000000040f3b8\n.text:000000000040f3bb\n.text:000000000040f3c0\n.text:000000000040f3c3\n'
p2988
tp2989
sS'__errno_location'
p2990
(S'\n__stdcall __errno_location()\n'
p2991
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0061d058)();\u000a  return piVar1;\u000a}\u000a\u000a
p2992
S'JMP qword ptr [0x0061d058]\n'
p2993
S'ff 25 42 af 21 00\n'
p2994
S'.plt:0000000000402110\n'
p2995
tp2996
sS'x2nrealloc'
p2997
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p2998
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p2999
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040f9ac\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x0040f9d9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040f9ca\nTEST RCX,RCX\nJNZ 0x0040f9ca\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x0040f950\nPUSH RAX\nCALL 0x0040faa0\n'
p3000
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p3001
S'.text:000000000040f980\n.text:000000000040f983\n.text:000000000040f986\n.text:000000000040f989\n.text:000000000040f98b\n.text:000000000040f995\n.text:000000000040f997\n.text:000000000040f99a\n.text:000000000040f99d\n.text:000000000040f99f\n.text:000000000040f9a2\n.text:000000000040f9a5\n.text:000000000040f9aa\n.text:000000000040f9ac\n.text:000000000040f9af\n.text:000000000040f9b1\n.text:000000000040f9b6\n.text:000000000040f9b8\n.text:000000000040f9bb\n.text:000000000040f9bd\n.text:000000000040f9c4\n.text:000000000040f9c7\n.text:000000000040f9ca\n.text:000000000040f9cd\n.text:000000000040f9d1\n.text:000000000040f9d4\n.text:000000000040f9d9\n.text:000000000040f9da\n'
p3002
tp3003
sS'quotearg_n_options'
p3004
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p3005
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p3006
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00402110\nTEST R12D,R12D\nJS 0x0040d0f1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0061d548]\nCMP dword ptr [0x0061d550],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040d00b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x61d558\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x0040f950\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0061d548],R15\nJNZ 0x0040cfd2\nMOVUPS XMM0,xmmword ptr [0x0061d558]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0061d550]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00402350\nMOV dword ptr [0x0061d550],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x0040c160\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040d06d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040d0db\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x61e1f0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x0040d098\nCALL 0x004020d0\nMOV RDI,R15\nCALL 0x0040f9e0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x0040c160\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402100\n'
p3007
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 b1 51 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ce 05 21 00\n44 39 25 cf 05 21 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 58 d5 61 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 98 29 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 83 05 21 00\n75 0b\n0f 10 05 8a 05 21 00\n41 0f 11 07\n8b 05 78 05 21 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 5d 53 ff ff\n89 1d 57 05 21 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 f0 e1 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 38 50 ff ff\n4c 89 ff\ne8 40 29 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 0a 50 ff ff\n'
p3008
S'.text:000000000040cf40\n.text:000000000040cf41\n.text:000000000040cf43\n.text:000000000040cf45\n.text:000000000040cf47\n.text:000000000040cf49\n.text:000000000040cf4a\n.text:000000000040cf4e\n.text:000000000040cf51\n.text:000000000040cf54\n.text:000000000040cf57\n.text:000000000040cf5a\n.text:000000000040cf5f\n.text:000000000040cf62\n.text:000000000040cf68\n.text:000000000040cf6d\n.text:000000000040cf6f\n.text:000000000040cf73\n.text:000000000040cf7a\n.text:000000000040cf81\n.text:000000000040cf86\n.text:000000000040cf8b\n.text:000000000040cf90\n.text:000000000040cf92\n.text:000000000040cf97\n.text:000000000040cf9a\n.text:000000000040cf9d\n.text:000000000040cfa3\n.text:000000000040cfa5\n.text:000000000040cfa8\n.text:000000000040cfac\n.text:000000000040cfaf\n.text:000000000040cfb3\n.text:000000000040cfb8\n.text:000000000040cfbb\n.text:000000000040cfbe\n.text:000000000040cfc5\n.text:000000000040cfc7\n.text:000000000040cfce\n.text:000000000040cfd2\n.text:000000000040cfd8\n.text:000000000040cfdb\n.text:000000000040cfdf\n.text:000000000040cfe2\n.text:000000000040cfe5\n.text:000000000040cfe9\n.text:000000000040cfeb\n.text:000000000040cfee\n.text:000000000040cff3\n.text:000000000040cff9\n.text:000000000040cffc\n.text:000000000040d001\n.text:000000000040d006\n.text:000000000040d00b\n.text:000000000040d00e\n.text:000000000040d012\n.text:000000000040d016\n.text:000000000040d01b\n.text:000000000040d01f\n.text:000000000040d023\n.text:000000000040d027\n.text:000000000040d02b\n.text:000000000040d02f\n.text:000000000040d034\n.text:000000000040d037\n.text:000000000040d03a\n.text:000000000040d03d\n.text:000000000040d042\n.text:000000000040d045\n.text:000000000040d048\n.text:000000000040d04b\n.text:000000000040d04c\n.text:000000000040d051\n.text:000000000040d055\n.text:000000000040d058\n.text:000000000040d05b\n.text:000000000040d05d\n.text:000000000040d062\n.text:000000000040d066\n.text:000000000040d06b\n.text:000000000040d06d\n.text:000000000040d071\n.text:000000000040d076\n.text:000000000040d079\n.text:000000000040d07c\n.text:000000000040d081\n.text:000000000040d086\n.text:000000000040d089\n.text:000000000040d08e\n.text:000000000040d091\n.text:000000000040d093\n.text:000000000040d098\n.text:000000000040d09b\n.text:000000000040d0a0\n.text:000000000040d0a3\n.text:000000000040d0a6\n.text:000000000040d0ab\n.text:000000000040d0ae\n.text:000000000040d0b2\n.text:000000000040d0b5\n.text:000000000040d0b8\n.text:000000000040d0bd\n.text:000000000040d0c2\n.text:000000000040d0c7\n.text:000000000040d0ca\n.text:000000000040d0cd\n.text:000000000040d0ce\n.text:000000000040d0d3\n.text:000000000040d0d7\n.text:000000000040d0db\n.text:000000000040d0df\n.text:000000000040d0e2\n.text:000000000040d0e6\n.text:000000000040d0e7\n.text:000000000040d0e9\n.text:000000000040d0eb\n.text:000000000040d0ed\n.text:000000000040d0ef\n.text:000000000040d0f0\n.text:000000000040d0f1\n'
p3009
tp3010
sS'strcmp'
p3011
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p3012
V\u000a/* WARNING: Switch with 1 destination removed at 0x004023f0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p3013
S'JMP qword ptr [0x0061d1c8]\n'
p3014
S'ff 25 d2 ad 21 00\n'
p3015
S'.plt:00000000004023f0\n'
p3016
tp3017
sS'free_pending_ent'
p3018
(S'\n__stdcall free_pending_ent(pending * p)\n'
p3019
V\u000avoid free_pending_ent(pending *p)\u000a\u000a{\u000a  free(p->name);\u000a  free(p->realname);\u000a  free(p);\u000a  return;\u000a}\u000a\u000a
p3020
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x004020d0\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x004020d0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004020d0\n'
p3021
S'53\n48 89 fb\n48 8b 3b\ne8 f4 d4 ff ff\n48 8b 7b 08\ne8 eb d4 ff ff\n48 89 df\n5b\ne9 e2 d4 ff ff\n'
p3022
S'.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd7\n.text:0000000000404bdc\n.text:0000000000404be0\n.text:0000000000404be5\n.text:0000000000404be8\n.text:0000000000404be9\n'
p3023
tp3024
sS'parse_ls_color'
p3025
(S'\n__stdcall parse_ls_color()\n'
p3026
V\u000avoid parse_ls_color(void)\u000a\u000a{\u000a  char cVar1;\u000a  color_ext_type *pcVar2;\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  int iVar5;\u000a  char *pcVar6;\u000a  undefined8 uVar7;\u000a  bin_str *pbVar8;\u000a  long lVar9;\u000a  color_ext_type *__ptr;\u000a  char label [3];\u000a  char local_44;\u000a  char cStack67;\u000a  undefined local_42;\u000a  char *local_40;\u000a  char *local_38;\u000a  \u000a  local_40 = getenv("LS_COLORS");\u000a  if ((local_40 == (char *)0x0) || (*local_40 == 0)) {\u000a    pcVar6 = getenv("COLORTERM");\u000a    if (((pcVar6 == (char *)0x0) || (*pcVar6 == 0)) && (_Var3 = known_term_type(), _Var3 == false))\u000a    {\u000a      print_with_color = false;\u000a    }\u000a    return;\u000a  }\u000a  local_42 = 0;\u000a  local_44 = '?';\u000a  cStack67 = 0x3f;\u000a  color_buf = xstrdup(local_40);\u000a  bVar4 = 1;\u000a  __ptr = (color_ext_type *)0x0;\u000a  local_38 = color_buf;\u000aLAB_00403d90:\u000a  switch(bVar4 & 7) {\u000a  case 1:\u000a    cVar1 = *local_40;\u000a    if (cVar1 == '*') {\u000a      __ptr = (color_ext_type *)xmalloc(0x28);\u000a      __ptr->next = color_ext_list;\u000a      local_40 = local_40 + 1;\u000a      color_ext_list = __ptr;\u000a      (__ptr->ext).string = local_38;\u000a      _Var3 = get_funky_string(&local_38,&local_40,(size_t *)0x1);\u000a      bVar4 = (_Var3 == false) * 2 + 4;\u000a    }\u000a    else {\u000a      if (cVar1 == ':') {\u000a        bVar4 = 1;\u000a        local_40 = local_40 + 1;\u000a      }\u000a      else {\u000a        if (cVar1 == 0) goto LAB_00403ea8;\u000a        local_44 = *local_40;\u000a        bVar4 = 2;\u000a        local_40 = local_40 + 1;\u000a      }\u000a    }\u000a    break;\u000a  case 2:\u000a    bVar4 = 6;\u000a    if (*local_40 != 0) {\u000a      cStack67 = *local_40;\u000a      bVar4 = 3;\u000a      local_40 = local_40 + 1;\u000a    }\u000a    break;\u000a  case 3:\u000a    pcVar6 = local_40 + 1;\u000a    cVar1 = *local_40;\u000a    bVar4 = 6;\u000a    local_40 = pcVar6;\u000a    if (cVar1 == '=') {\u000a      lVar9 = -0xc0;\u000a      pbVar8 = color_indicator;\u000a      local_40 = pcVar6;\u000a      do {\u000a        iVar5 = strcmp(&local_44,*(char **)((long)indicator_name + lVar9 + 0xc0));\u000a        if (iVar5 == 0) {\u000a          pbVar8->string = local_38;\u000a          _Var3 = get_funky_string(&local_38,&local_40,(size_t *)0x0);\u000a          bVar4 = 1;\u000a          if (_Var3 != false) goto LAB_00403d90;\u000a          break;\u000a        }\u000a        pbVar8 = pbVar8 + 1;\u000a        lVar9 = lVar9 + 8;\u000a      } while (lVar9 != 0);\u000a      uVar7 = dcgettext(0,"unrecognized prefix: %s",5);\u000a      quote(&local_44);\u000a      error(0,0,uVar7);\u000a      bVar4 = 6;\u000a    }\u000a    break;\u000a  case 4:\u000a    pcVar6 = local_40 + 1;\u000a    bVar4 = 6;\u000a    cVar1 = *local_40;\u000a    local_40 = pcVar6;\u000a    if (cVar1 == '=') {\u000a      (__ptr->seq).string = local_38;\u000a      local_40 = pcVar6;\u000a      _Var3 = get_funky_string(&local_38,&local_40,(size_t *)0x0);\u000a      bVar4 = (_Var3 == false) * 5 + 1;\u000a    }\u000a    break;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 6:\u000a    uVar7 = dcgettext(0,"unparsable value for LS_COLORS environment variable",5);\u000a    error(0,0,uVar7,uVar7);\u000a    free(color_buf);\u000a    __ptr = color_ext_list;\u000a    while (__ptr != (color_ext_type *)0x0) {\u000a      pcVar2 = __ptr->next;\u000a      free(__ptr);\u000a      __ptr = pcVar2;\u000a    }\u000a    print_with_color = false;\u000aLAB_00403ea8:\u000a    if (color_indicator[7].len != 6) {\u000a      return;\u000a    }\u000a    iVar5 = strncmp(color_indicator[7].string,"target",6);\u000a    if (iVar5 != 0) {\u000a      return;\u000a    }\u000a    color_symlink_as_referent = 1;\u000a    return;\u000a  }\u000a}\u000a\u000a
p3027
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EDI,0x4168a8\nCALL 0x004020a0\nMOV qword ptr [RSP + 0x8],RAX\nTEST RAX,RAX\nJZ 0x00403c55\nCMP byte ptr [RAX],0x0\nJZ 0x00403c55\nMOV byte ptr [RSP + 0x6],0x0\nMOV word ptr [RSP + 0x4],0x3f3f\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x0040fa80\nMOV qword ptr [0x0061e030],RAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x1\nLEA R14,[RSP + 0x10]\nLEA R15,[RSP + 0x8]\nLEA R13,[RSP + 0x4]\nXOR R12D,R12D\nJMP 0x00403d90\nMOV EDI,0x4168b2\nCALL 0x004020a0\nTEST RAX,RAX\nJZ 0x00403c6d\nCMP byte ptr [RAX],0x0\nJNZ 0x00403ed3\nCALL 0x004058c0\nTEST AL,AL\nJNZ 0x00403ed3\nMOV byte ptr [0x0061d630],0x0\nJMP 0x00403ed3\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x1]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,0x6\nCMP byte ptr [RCX],0x3d\nJNZ 0x00403d90\nJMP 0x00403d61\nMOV EDI,0x28\nCALL 0x0040f910\nMOV R12,RAX\nMOV RAX,qword ptr [0x0061e038]\nMOV qword ptr [R12 + 0x20],RAX\nMOV qword ptr [0x0061e038],R12\nINC qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [R12 + 0x8],RAX\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,R12\nCALL 0x00405940\nXOR ECX,ECX\nTEST AL,AL\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x4]\nJMP 0x00403d90\nINC RAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,0x1\nJMP 0x00403d90\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x8],RAX\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,RBX\nCALL 0x00405940\nTEST AL,AL\nMOV EAX,0x1\nJNZ 0x00403d90\nXOR EDI,EDI\nMOV ESI,0x4168bf\nMOV EDX,0x5\nCALL 0x00402270\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x0040d430\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004025f0\nMOV EAX,0x6\nJMP 0x00403d90\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RCX,[R12 + 0x10]\nMOV qword ptr [R12 + 0x18],RAX\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00405940\nXOR ECX,ECX\nTEST AL,AL\nSETZ CL\nLEA EAX,[RCX + RCX*0x4 + 0x1]\nNOP dword ptr [RAX + RAX*0x1]\nAND AL,0x7\nDEC AL\nCMP AL,0x5\nJA 0x00403ee2\nMOVZX EAX,AL\nJMP qword ptr [0x412278 + RAX*0x8]\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSX ECX,byte ptr [RAX]\nCMP ECX,0x2a\nJZ 0x00403ca7\nCMP ECX,0x3a\nJZ 0x00403cf9\nTEST ECX,ECX\nJZ 0x00403ea8\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV AL,byte ptr [RAX]\nMOV byte ptr [RSP + 0x4],AL\nMOV EAX,0x2\nJMP 0x00403d90\nMOV RCX,qword ptr [RSP + 0x8]\nMOV EAX,0x6\nCMP byte ptr [RCX],0x0\nJZ 0x00403d90\nLEA RAX,[RCX + 0x1]\nMOV qword ptr [RSP + 0x8],RAX\nMOV AL,byte ptr [RCX]\nMOV byte ptr [RSP + 0x5],AL\nMOV EAX,0x3\nJMP 0x00403d90\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nCMP byte ptr [RAX],0x3d\nMOV EAX,0x6\nJNZ 0x00403d90\nMOV RBP,-0xc0\nMOV EBX,0x61d380\nNOP dword ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [0x413390 + RBP]\nMOV RDI,R13\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x00403d0b\nADD RBX,0x10\nADD RBP,0x8\nJNZ 0x00403e30\nJMP 0x00403d2d\nXOR EDI,EDI\nMOV ESI,0x4168d7\nMOV EDX,0x5\nCALL 0x00402270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004025f0\nMOV RDI,qword ptr [0x0061e030]\nCALL 0x004020d0\nMOV RDI,qword ptr [0x0061e038]\nTEST RDI,RDI\nJZ 0x00403ea1\nMOV RBX,qword ptr [RDI + 0x20]\nCALL 0x004020d0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00403e90\nMOV byte ptr [0x0061d630],0x0\nCMP qword ptr [0x0061d3f0],0x6\nJNZ 0x00403ed3\nMOV RDI,qword ptr [0x0061d3f8]\nMOV ESI,0x41690b\nMOV EDX,0x6\nCALL 0x00402120\nTEST EAX,EAX\nJNZ 0x00403ed3\nMOV byte ptr [0x0061d631],0x1\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402100\n'
p3028
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\nbf a8 68 41 00\ne8 98 e4 ff ff\n48 89 44 24 08\n48 85 c0\n74 43\n80 38 00\n74 3e\nc6 44 24 06 00\n66 c7 44 24 04 3f 3f\n48 8b 7c 24 08\ne8 53 be 00 00\n48 89 05 fc a3 21 00\n48 89 44 24 10\nb8 01 00 00 00\n4c 8d 74 24 10\n4c 8d 7c 24 08\n4c 8d 6c 24 04\n45 31 e4\ne9 3b 01 00 00\nbf b2 68 41 00\ne8 41 e4 ff ff\n48 85 c0\n74 09\n80 38 00\n0f 85 66 02 00 00\ne8 4e 1c 00 00\n84 c0\n0f 85 59 02 00 00\nc6 05 af 99 21 00 00\ne9 4d 02 00 00\n48 8b 4c 24 08\n48 8d 41 01\n48 89 44 24 08\nb8 06 00 00 00\n80 39 3d\n0f 85 ee 00 00 00\ne9 ba 00 00 00\nbf 28 00 00 00\ne8 5f bc 00 00\n49 89 c4\n48 8b 05 7d a3 21 00\n49 89 44 24 20\n4c 89 25 71 a3 21 00\n48 ff 44 24 08\n48 8b 44 24 10\n49 89 44 24 08\nba 01 00 00 00\n4c 89 f7\n4c 89 fe\n4c 89 e1\ne8 57 1c 00 00\n31 c9\n84 c0\n0f 94 c1\n8d 44 09 04\ne9 97 00 00 00\n48 ff c0\n48 89 44 24 08\nb8 01 00 00 00\ne9 85 00 00 00\n48 8b 44 24 10\n48 89 43 08\n31 d2\n4c 89 f7\n4c 89 fe\n48 89 d9\ne8 1c 1c 00 00\n84 c0\nb8 01 00 00 00\n75 63\n31 ff\nbe bf 68 41 00\nba 05 00 00 00\ne8 32 e5 ff ff\n48 89 c3\n4c 89 ef\ne8 e7 96 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 96 e8 ff ff\nb8 06 00 00 00\neb 2f\n48 8b 44 24 10\n49 8d 4c 24 10\n49 89 44 24 18\n31 d2\n4c 89 f7\n4c 89 fe\ne8 c3 1b 00 00\n31 c9\n84 c0\n0f 94 c1\n8d 44 89 01\n0f 1f 84 00 00 00 00 00\n24 07\nfe c8\n3c 05\n0f 87 46 01 00 00\n0f b6 c0\nff 24 c5 78 22 41 00\n48 8b 44 24 08\n0f be 08\n83 f9 2a\n0f 84 f0 fe ff ff\n83 f9 3a\n0f 84 39 ff ff ff\n85 c9\n0f 84 e0 00 00 00\n48 8d 48 01\n48 89 4c 24 08\n8a 00\n88 44 24 04\nb8 02 00 00 00\neb b2\n48 8b 4c 24 08\nb8 06 00 00 00\n80 39 00\n74 a3\n48 8d 41 01\n48 89 44 24 08\n8a 01\n88 44 24 05\nb8 03 00 00 00\neb 8d\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\n80 38 3d\nb8 06 00 00 00\n0f 85 71 ff ff ff\n48 c7 c5 40 ff ff ff\nbb 80 d3 61 00\n0f 1f 44 00 00\n48 8b b5 90 33 41 00\n4c 89 ef\ne8 b1 e5 ff ff\n85 c0\n0f 84 c4 fe ff ff\n48 83 c3 10\n48 83 c5 08\n75 df\ne9 d7 fe ff ff\n31 ff\nbe d7 68 41 00\nba 05 00 00 00\ne8 09 e4 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 78 e7 ff ff\n48 8b 3d b1 a1 21 00\ne8 4c e2 ff ff\n48 8b 3d ad a1 21 00\n48 85 ff\n74 11\n48 8b 5f 20\ne8 37 e2 ff ff\n48 85 db\n48 89 df\n75 ef\nc6 05 88 97 21 00 00\n48 83 3d 40 95 21 00 06\n75 21\n48 8b 3d 3f 95 21 00\nbe 0b 69 41 00\nba 06 00 00 00\ne8 58 e2 ff ff\n85 c0\n75 07\nc6 05 5e 97 21 00 01\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 19 e2 ff ff\n'
p3029
S'.text:0000000000403bf0\n.text:0000000000403bf1\n.text:0000000000403bf3\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bfa\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c08\n.text:0000000000403c0d\n.text:0000000000403c10\n.text:0000000000403c12\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c1c\n.text:0000000000403c23\n.text:0000000000403c28\n.text:0000000000403c2d\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c3e\n.text:0000000000403c43\n.text:0000000000403c48\n.text:0000000000403c4d\n.text:0000000000403c50\n.text:0000000000403c55\n.text:0000000000403c5a\n.text:0000000000403c5f\n.text:0000000000403c62\n.text:0000000000403c64\n.text:0000000000403c67\n.text:0000000000403c6d\n.text:0000000000403c72\n.text:0000000000403c74\n.text:0000000000403c7a\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c8b\n.text:0000000000403c8f\n.text:0000000000403c94\n.text:0000000000403c99\n.text:0000000000403c9c\n.text:0000000000403ca2\n.text:0000000000403ca7\n.text:0000000000403cac\n.text:0000000000403cb1\n.text:0000000000403cb4\n.text:0000000000403cbb\n.text:0000000000403cc0\n.text:0000000000403cc7\n.text:0000000000403ccc\n.text:0000000000403cd1\n.text:0000000000403cd6\n.text:0000000000403cdb\n.text:0000000000403cde\n.text:0000000000403ce1\n.text:0000000000403ce4\n.text:0000000000403ce9\n.text:0000000000403ceb\n.text:0000000000403ced\n.text:0000000000403cf0\n.text:0000000000403cf4\n.text:0000000000403cf9\n.text:0000000000403cfc\n.text:0000000000403d01\n.text:0000000000403d06\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d14\n.text:0000000000403d16\n.text:0000000000403d19\n.text:0000000000403d1c\n.text:0000000000403d1f\n.text:0000000000403d24\n.text:0000000000403d26\n.text:0000000000403d2b\n.text:0000000000403d2d\n.text:0000000000403d2f\n.text:0000000000403d34\n.text:0000000000403d39\n.text:0000000000403d3e\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d49\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d52\n.text:0000000000403d55\n.text:0000000000403d5a\n.text:0000000000403d5f\n.text:0000000000403d61\n.text:0000000000403d66\n.text:0000000000403d6b\n.text:0000000000403d70\n.text:0000000000403d72\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7d\n.text:0000000000403d7f\n.text:0000000000403d81\n.text:0000000000403d84\n.text:0000000000403d88\n.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d96\n.text:0000000000403d9c\n.text:0000000000403d9f\n.text:0000000000403da6\n.text:0000000000403dab\n.text:0000000000403dae\n.text:0000000000403db1\n.text:0000000000403db7\n.text:0000000000403dba\n.text:0000000000403dc0\n.text:0000000000403dc2\n.text:0000000000403dc8\n.text:0000000000403dcc\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd7\n.text:0000000000403ddc\n.text:0000000000403dde\n.text:0000000000403de3\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403df1\n.text:0000000000403df6\n.text:0000000000403df8\n.text:0000000000403dfc\n.text:0000000000403e01\n.text:0000000000403e03\n.text:0000000000403e08\n.text:0000000000403e0c\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e19\n.text:0000000000403e1f\n.text:0000000000403e26\n.text:0000000000403e2b\n.text:0000000000403e30\n.text:0000000000403e37\n.text:0000000000403e3a\n.text:0000000000403e3f\n.text:0000000000403e41\n.text:0000000000403e47\n.text:0000000000403e4b\n.text:0000000000403e4f\n.text:0000000000403e51\n.text:0000000000403e56\n.text:0000000000403e58\n.text:0000000000403e5d\n.text:0000000000403e62\n.text:0000000000403e67\n.text:0000000000403e6a\n.text:0000000000403e6c\n.text:0000000000403e6e\n.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e78\n.text:0000000000403e7f\n.text:0000000000403e84\n.text:0000000000403e8b\n.text:0000000000403e8e\n.text:0000000000403e90\n.text:0000000000403e94\n.text:0000000000403e99\n.text:0000000000403e9c\n.text:0000000000403e9f\n.text:0000000000403ea1\n.text:0000000000403ea8\n.text:0000000000403eb0\n.text:0000000000403eb2\n.text:0000000000403eb9\n.text:0000000000403ebe\n.text:0000000000403ec3\n.text:0000000000403ec8\n.text:0000000000403eca\n.text:0000000000403ecc\n.text:0000000000403ed3\n.text:0000000000403ed7\n.text:0000000000403ed8\n.text:0000000000403eda\n.text:0000000000403edc\n.text:0000000000403ede\n.text:0000000000403ee0\n.text:0000000000403ee1\n.text:0000000000403ee2\n'
p3030
tp3031
sS'quotearg_custom_mem'
p3032
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p3033
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p3034
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x0040d350\n'
p3035
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p3036
S'.text:000000000040d3e0\n.text:000000000040d3e3\n.text:000000000040d3e6\n.text:000000000040d3e9\n.text:000000000040d3ec\n.text:000000000040d3ee\n.text:000000000040d3f1\n'
p3037
tp3038
sS'rev_strcmp_df_atime'
p3039
(S'\n__stdcall rev_strcmp_df_atime(V a, V b)\n'
p3040
V\u000aint rev_strcmp_df_atime(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_atime((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p3041
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040713a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040715d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040715d\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407320\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3042
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 a0 f3 ff ff\n89 c3\n4c 89 f7\ne8 96 f3 ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 c3 01 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p3043
S'.text:0000000000407110\n.text:0000000000407112\n.text:0000000000407114\n.text:0000000000407115\n.text:0000000000407118\n.text:000000000040711b\n.text:0000000000407120\n.text:0000000000407122\n.text:0000000000407125\n.text:000000000040712a\n.text:000000000040712c\n.text:000000000040712e\n.text:0000000000407130\n.text:0000000000407133\n.text:0000000000407138\n.text:000000000040713a\n.text:000000000040713c\n.text:000000000040713e\n.text:0000000000407143\n.text:0000000000407146\n.text:0000000000407148\n.text:000000000040714d\n.text:0000000000407150\n.text:0000000000407153\n.text:0000000000407154\n.text:0000000000407156\n.text:0000000000407158\n.text:000000000040715d\n.text:000000000040715f\n.text:0000000000407160\n.text:0000000000407162\n.text:0000000000407164\n'
p3044
tp3045
sS'hash_get_max_bucket_length'
p3046
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p3047
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p3048
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x004098cd\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x004098c3\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x004098b0\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x004098a0\nRET\nXOR EAX,EAX\nRET\n'
p3049
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p3050
S'.text:0000000000409890\n.text:0000000000409893\n.text:0000000000409897\n.text:0000000000409899\n.text:000000000040989d\n.text:000000000040989f\n.text:00000000004098a0\n.text:00000000004098a4\n.text:00000000004098a6\n.text:00000000004098a8\n.text:00000000004098ab\n.text:00000000004098b0\n.text:00000000004098b4\n.text:00000000004098b7\n.text:00000000004098ba\n.text:00000000004098bc\n.text:00000000004098bf\n.text:00000000004098c3\n.text:00000000004098c7\n.text:00000000004098ca\n.text:00000000004098cc\n.text:00000000004098cd\n.text:00000000004098cf\n'
p3051
tp3052
sS'sigaction'
p3053
(S'\n__stdcall sigaction(int __sig, sigaction * __act, sigaction * __oact)\n'
p3054
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaction(int __sig,sigaction *__act,sigaction *__oact)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaction_0061d098)();\u000a  return iVar1;\u000a}\u000a\u000a
p3055
S'JMP qword ptr [0x0061d098]\n'
p3056
S'ff 25 02 af 21 00\n'
p3057
S'.plt:0000000000402190\n'
p3058
tp3059
sS'setfscreatecon'
p3060
(S'\n__stdcall setfscreatecon(security_context_t con)\n'
p3061
V\u000aint setfscreatecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3062
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3063
S'50\ne8 7a 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3064
S'.text:000000000040d890\n.text:000000000040d891\n.text:000000000040d896\n.text:000000000040d89c\n.text:000000000040d8a1\n.text:000000000040d8a2\n'
p3065
tp3066
sS'gnu_dev_major'
p3067
(S'\n__stdcall gnu_dev_major(ulonglong __dev)\n'
p3068
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint gnu_dev_major(ulonglong __dev)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_major_0061d280)();\u000a  return uVar1;\u000a}\u000a\u000a
p3069
S'JMP qword ptr [0x0061d280]\n'
p3070
S'ff 25 1a ad 21 00\n'
p3071
S'.plt:0000000000402560\n'
p3072
tp3073
sS'getc_unlocked'
p3074
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p3075
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0061d088)();\u000a  return iVar1;\u000a}\u000a\u000a
p3076
S'JMP qword ptr [0x0061d088]\n'
p3077
S'ff 25 12 af 21 00\n'
p3078
S'.plt:0000000000402170\n'
p3079
tp3080
sS'print_with_separator'
p3081
(S'\n__stdcall print_with_separator()\n'
p3082
V\u000avoid print_with_separator(char cParm1)\u000a\u000a{\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  ulong uVar4;\u000a  int __c;\u000a  \u000a  if (cwd_n_used != 0) {\u000a    uVar4 = 0;\u000a    uVar3 = 0;\u000a    do {\u000a      if (line_length == 0) {\u000a        sVar2 = 0;\u000a      }\u000a      else {\u000a        sVar2 = length_of_file_name_and_frills((fileinfo *)sorted_file[uVar4]);\u000a      }\u000a      if (uVar4 != 0) {\u000a        if (line_length == 0) {\u000aLAB_00407539:\u000a          __c = 0x20;\u000a          uVar1 = uVar3 + 2;\u000a        }\u000a        else {\u000a          __c = 10;\u000a          if (-sVar2 - 3 < uVar3) {\u000a            uVar1 = 0;\u000a          }\u000a          else {\u000a            uVar1 = 0;\u000a            if (uVar3 + 2 + sVar2 < line_length) goto LAB_00407539;\u000a          }\u000a        }\u000a        uVar3 = uVar1;\u000a        putchar_unlocked((int)cParm1);\u000a        putchar_unlocked(__c);\u000a      }\u000a      print_file_name_and_frills();\u000a      uVar3 = uVar3 + sVar2;\u000a      uVar4 = uVar4 + 1;\u000a    } while (uVar4 < cwd_n_used);\u000a  }\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p3083
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nCMP qword ptr [0x0061d808],0x0\nJZ 0x00407578\nMOVSX EAX,DIL\nMOV dword ptr [RSP + 0x4],EAX\nXOR EBP,EBP\nXOR EBX,EBX\nJMP 0x004074d0\nXOR R14D,R14D\nJMP 0x00407546\nMOV RAX,qword ptr [0x0061e048]\nMOV R15,qword ptr [RAX + RBP*0x8]\nCMP qword ptr [0x0061d850],0x0\nJZ 0x00407500\nMOV RDI,R15\nCALL 0x00408440\nMOV R13,RAX\nTEST RBP,RBP\nJNZ 0x00407508\nJMP 0x0040755a\nXOR R13D,R13D\nTEST RBP,RBP\nJZ 0x0040755a\nMOV RAX,qword ptr [0x0061d850]\nTEST RAX,RAX\nJZ 0x00407539\nMOV RCX,-0x3\nSUB RCX,R13\nCMP RBX,RCX\nMOV R12D,0xa\nJA 0x004074c7\nLEA RCX,[RBX + R13*0x1 + 0x2]\nCMP RCX,RAX\nMOV R14D,0x0\nJNC 0x00407546\nADD RBX,0x2\nMOV R12D,0x20\nMOV R14,RBX\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402460\nMOV EDI,R12D\nCALL 0x00402460\nMOV RBX,R14\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00407380\nADD RBX,R13\nINC RBP\nCMP RBP,qword ptr [0x0061d808]\nJC 0x004074d0\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402460\n'
p3084
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 83 3d 55 63 21 00 00\n0f 84 bf 00 00 00\n40 0f be c7\n89 44 24 04\n31 ed\n31 db\neb 09\n45 31 f6\neb 7a\n48 8b 05 71 6b 21 00\n4c 8b 3c e8\n48 83 3d 6d 63 21 00 00\n74 1b\n4c 89 ff\ne8 53 0f 00 00\n49 89 c5\n48 85 ed\n75 13\neb 63\n45 31 ed\n48 85 ed\n74 52\n48 8b 05 41 63 21 00\n48 85 c0\n74 25\n48 c7 c1 fd ff ff ff\n4c 29 e9\n48 39 cb\n41 bc 0a 00 00 00\n77 9e\n4a 8d 4c 2b 02\n48 39 c1\n41 be 00 00 00 00\n73 0d\n48 83 c3 02\n41 bc 20 00 00 00\n49 89 de\n8b 7c 24 04\ne8 11 af ff ff\n44 89 e7\ne8 09 af ff ff\n4c 89 f3\n4c 89 ff\n48 89 de\ne8 1b fe ff ff\n4c 01 eb\n48 ff c5\n48 3b 2d 96 62 21 00\n0f 82 58 ff ff ff\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 d0 ae ff ff\n'
p3085
S'.text:00000000004074a0\n.text:00000000004074a1\n.text:00000000004074a3\n.text:00000000004074a5\n.text:00000000004074a7\n.text:00000000004074a9\n.text:00000000004074aa\n.text:00000000004074ab\n.text:00000000004074b3\n.text:00000000004074b9\n.text:00000000004074bd\n.text:00000000004074c1\n.text:00000000004074c3\n.text:00000000004074c5\n.text:00000000004074c7\n.text:00000000004074ca\n.text:00000000004074d0\n.text:00000000004074d7\n.text:00000000004074db\n.text:00000000004074e3\n.text:00000000004074e5\n.text:00000000004074e8\n.text:00000000004074ed\n.text:00000000004074f0\n.text:00000000004074f3\n.text:00000000004074f5\n.text:0000000000407500\n.text:0000000000407503\n.text:0000000000407506\n.text:0000000000407508\n.text:000000000040750f\n.text:0000000000407512\n.text:0000000000407514\n.text:000000000040751b\n.text:000000000040751e\n.text:0000000000407521\n.text:0000000000407527\n.text:0000000000407529\n.text:000000000040752e\n.text:0000000000407531\n.text:0000000000407537\n.text:0000000000407539\n.text:000000000040753d\n.text:0000000000407543\n.text:0000000000407546\n.text:000000000040754a\n.text:000000000040754f\n.text:0000000000407552\n.text:0000000000407557\n.text:000000000040755a\n.text:000000000040755d\n.text:0000000000407560\n.text:0000000000407565\n.text:0000000000407568\n.text:000000000040756b\n.text:0000000000407572\n.text:0000000000407578\n.text:000000000040757d\n.text:0000000000407581\n.text:0000000000407582\n.text:0000000000407584\n.text:0000000000407586\n.text:0000000000407588\n.text:000000000040758a\n.text:000000000040758b\n'
p3086
tp3087
sS'memmove'
p3088
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p3089
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0061d2c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p3090
S'JMP qword ptr [0x0061d2c0]\n'
p3091
S'ff 25 da ac 21 00\n'
p3092
S'.plt:00000000004025e0\n'
p3093
tp3094
sS'hash_insert_if_absent'
p3095
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p3096
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_00416dfc <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_00416df8 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_00416df8) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040a45d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040a45d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p3097
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040a45d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040a470\nTEST RAX,RAX\nJZ 0x0040a2d1\nTEST RBX,RBX\nJZ 0x0040a450\nMOV qword ptr [RBX],RAX\nJMP 0x0040a450\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a2e5\nCVTSI2SS XMM0,RCX\nJMP 0x0040a2fa\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040a30a\nCVTSI2SS XMM1,RAX\nJMP 0x0040a31f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x0040a409\nMOV RDI,R15\nCALL 0x00409da0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040a349\nCVTSI2SS XMM2,RCX\nJMP 0x0040a35e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x0040a376\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040a38e\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x0040a409\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x0040a3a9\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x00416dfc]\nJNC 0x0040a450\nMOVSS XMM1,dword ptr [0x00416df8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x0040a040\nTEST AL,AL\nJZ 0x0040a450\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040a470\nTEST RAX,RAX\nJNZ 0x0040a45d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x0040a439\nMOV RDI,R15\nCALL 0x0040a530\nTEST RAX,RAX\nJZ 0x0040a44b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x0040a444\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x0040a450\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402100\n'
p3098
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 47 ca 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d 35 ca 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 9e 7c ff ff\n'
p3099
S'.text:000000000040a290\n.text:000000000040a291\n.text:000000000040a293\n.text:000000000040a295\n.text:000000000040a296\n.text:000000000040a297\n.text:000000000040a29a\n.text:000000000040a29d\n.text:000000000040a2a0\n.text:000000000040a2a3\n.text:000000000040a2a9\n.text:000000000040a2ac\n.text:000000000040a2ae\n.text:000000000040a2b0\n.text:000000000040a2b3\n.text:000000000040a2b6\n.text:000000000040a2bb\n.text:000000000040a2be\n.text:000000000040a2c0\n.text:000000000040a2c3\n.text:000000000040a2c9\n.text:000000000040a2cc\n.text:000000000040a2d1\n.text:000000000040a2d5\n.text:000000000040a2d9\n.text:000000000040a2dc\n.text:000000000040a2de\n.text:000000000040a2e3\n.text:000000000040a2e5\n.text:000000000040a2e8\n.text:000000000040a2eb\n.text:000000000040a2ee\n.text:000000000040a2f1\n.text:000000000040a2f6\n.text:000000000040a2fa\n.text:000000000040a2fe\n.text:000000000040a301\n.text:000000000040a303\n.text:000000000040a308\n.text:000000000040a30a\n.text:000000000040a30d\n.text:000000000040a310\n.text:000000000040a313\n.text:000000000040a316\n.text:000000000040a31b\n.text:000000000040a31f\n.text:000000000040a324\n.text:000000000040a327\n.text:000000000040a32d\n.text:000000000040a330\n.text:000000000040a335\n.text:000000000040a339\n.text:000000000040a33d\n.text:000000000040a340\n.text:000000000040a342\n.text:000000000040a347\n.text:000000000040a349\n.text:000000000040a34c\n.text:000000000040a34f\n.text:000000000040a352\n.text:000000000040a355\n.text:000000000040a35a\n.text:000000000040a35e\n.text:000000000040a362\n.text:000000000040a367\n.text:000000000040a36a\n.text:000000000040a36c\n.text:000000000040a36f\n.text:000000000040a374\n.text:000000000040a376\n.text:000000000040a379\n.text:000000000040a37c\n.text:000000000040a37f\n.text:000000000040a382\n.text:000000000040a385\n.text:000000000040a38a\n.text:000000000040a38e\n.text:000000000040a391\n.text:000000000040a395\n.text:000000000040a398\n.text:000000000040a39a\n.text:000000000040a39e\n.text:000000000040a3a3\n.text:000000000040a3a5\n.text:000000000040a3a9\n.text:000000000040a3ae\n.text:000000000040a3b5\n.text:000000000040a3bb\n.text:000000000040a3c3\n.text:000000000040a3c6\n.text:000000000040a3ca\n.text:000000000040a3cf\n.text:000000000040a3d9\n.text:000000000040a3dc\n.text:000000000040a3e1\n.text:000000000040a3e4\n.text:000000000040a3e8\n.text:000000000040a3eb\n.text:000000000040a3f0\n.text:000000000040a3f2\n.text:000000000040a3f4\n.text:000000000040a3f7\n.text:000000000040a3f9\n.text:000000000040a3fc\n.text:000000000040a3ff\n.text:000000000040a404\n.text:000000000040a407\n.text:000000000040a409\n.text:000000000040a40d\n.text:000000000040a411\n.text:000000000040a413\n.text:000000000040a416\n.text:000000000040a41b\n.text:000000000040a41e\n.text:000000000040a420\n.text:000000000040a423\n.text:000000000040a427\n.text:000000000040a42b\n.text:000000000040a42f\n.text:000000000040a433\n.text:000000000040a437\n.text:000000000040a439\n.text:000000000040a43c\n.text:000000000040a440\n.text:000000000040a444\n.text:000000000040a449\n.text:000000000040a44b\n.text:000000000040a450\n.text:000000000040a452\n.text:000000000040a456\n.text:000000000040a457\n.text:000000000040a459\n.text:000000000040a45b\n.text:000000000040a45c\n.text:000000000040a45d\n'
p3100
tp3101
sS'getuser'
p3102
(S'\n__stdcall getuser()\n'
p3103
V\u000achar * getuser(void)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  size_t sVar2;\u000a  userid *puVar3;\u000a  userid *puVar4;\u000a  __uid_t __uid;\u000a  char *__s;\u000a  \u000a  puVar4 = user_alist;\u000a  if (user_alist != (userid *)0x0) {\u000a    do {\u000a      if (puVar4->id == __uid) goto LAB_0040b15a;\u000a      puVar4 = puVar4->next;\u000a    } while (puVar4 != (userid *)0x0);\u000a  }\u000a  ppVar1 = getpwuid(__uid);\u000a  if (ppVar1 == (passwd *)0x0) {\u000a    __s = \u000a          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a          + 0xca;\u000a  }\u000a  else {\u000a    __s = ppVar1->pw_name;\u000a  }\u000a  sVar2 = strlen(__s);\u000a  puVar4 = (userid *)xmalloc(sVar2 + 0x11);\u000a  puVar4->id = __uid;\u000a  strcpy((char *)(puVar4 + 1),__s);\u000a  puVar4->next = user_alist;\u000a  user_alist = puVar4;\u000aLAB_0040b15a:\u000a  puVar3 = (userid *)0x0;\u000a  if (*(char *)&puVar4[1].id != 0) {\u000a    puVar3 = puVar4 + 1;\u000a  }\u000a  return (char *)puVar3;\u000a}\u000a\u000a
p3104
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,EDI\nMOV RBX,qword ptr [0x0061e188]\nTEST RBX,RBX\nJNZ 0x0040b109\nJMP 0x0040b10f\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJZ 0x0040b10f\nCMP dword ptr [RBX],EBP\nJNZ 0x0040b100\nJMP 0x0040b15a\nMOV EDI,EBP\nCALL 0x00402240\nTEST RAX,RAX\nJZ 0x0040b120\nMOV R14,qword ptr [RAX]\nJMP 0x0040b126\nMOV R14D,0x417ce1\nMOV RDI,R14\nCALL 0x00402290\nLEA RDI,[RAX + 0x11]\nCALL 0x0040f910\nMOV RBX,RAX\nMOV dword ptr [RBX],EBP\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x00402150\nMOV RAX,qword ptr [0x0061e188]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [0x0061e188],RBX\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x10],0x0\nLEA RCX,[RBX + 0x10]\nCMOVNZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3105
S'55\n41 56\n53\n89 fd\n48 8b 1d 9b 30 21 00\n48 85 db\n75 17\neb 1b\n48 8b 5b 08\n48 85 db\n74 06\n39 2b\n75 f3\neb 4b\n89 ef\ne8 2a 71 ff ff\n48 85 c0\n74 05\n4c 8b 30\neb 06\n41 be e1 7c 41 00\n4c 89 f7\ne8 62 71 ff ff\n48 8d 78 11\ne8 d9 47 00 00\n48 89 c3\n89 2b\n48 8d 7b 10\n4c 89 f6\ne8 08 70 ff ff\n48 8b 05 39 30 21 00\n48 89 43 08\n48 89 1d 2e 30 21 00\n31 c0\n80 7b 10 00\n48 8d 4b 10\n48 0f 45 c1\n5b\n41 5e\n5d\nc3\n'
p3106
S'.text:000000000040b0e0\n.text:000000000040b0e1\n.text:000000000040b0e3\n.text:000000000040b0e4\n.text:000000000040b0e6\n.text:000000000040b0ed\n.text:000000000040b0f0\n.text:000000000040b0f2\n.text:000000000040b100\n.text:000000000040b104\n.text:000000000040b107\n.text:000000000040b109\n.text:000000000040b10b\n.text:000000000040b10d\n.text:000000000040b10f\n.text:000000000040b111\n.text:000000000040b116\n.text:000000000040b119\n.text:000000000040b11b\n.text:000000000040b11e\n.text:000000000040b120\n.text:000000000040b126\n.text:000000000040b129\n.text:000000000040b12e\n.text:000000000040b132\n.text:000000000040b137\n.text:000000000040b13a\n.text:000000000040b13c\n.text:000000000040b140\n.text:000000000040b143\n.text:000000000040b148\n.text:000000000040b14f\n.text:000000000040b153\n.text:000000000040b15a\n.text:000000000040b15c\n.text:000000000040b160\n.text:000000000040b164\n.text:000000000040b168\n.text:000000000040b169\n.text:000000000040b16b\n.text:000000000040b16c\n'
p3107
tp3108
sS'c_isascii'
p3109
(S'\n__stdcall c_isascii()\n'
p3110
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p3111
S'CMP EDI,0x80\nSETC AL\nRET\n'
p3112
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p3113
S'.text:0000000000410b90\n.text:0000000000410b96\n.text:0000000000410b99\n'
p3114
tp3115
sS'dot_or_dotdot'
p3116
(S'\n__stdcall dot_or_dotdot(char * file_name)\n'
p3117
V\u000a_Bool dot_or_dotdot(char *file_name)\u000a\u000a{\u000a  if (*file_name == '.') {\u000a    return (_Bool)(file_name[(ulong)(file_name[1] == '.') + 1] == '/' ||\u000a                  file_name[(ulong)(file_name[1] == '.') + 1] == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3118
S'CMP byte ptr [RDI],0x2e\nJNZ 0x0040650f\nXOR EAX,EAX\nCMP byte ptr [RDI + 0x1],0x2e\nSETZ AL\nMOV AL,byte ptr [RDI + RAX*0x1 + 0x1]\nTEST AL,AL\nSETZ CL\nCMP AL,0x2f\nSETZ AL\nOR AL,CL\nRET\nXOR EAX,EAX\nRET\n'
p3119
S'80 3f 2e\n75 1a\n31 c0\n80 7f 01 2e\n0f 94 c0\n8a 44 07 01\n84 c0\n0f 94 c1\n3c 2f\n0f 94 c0\n08 c8\nc3\n31 c0\nc3\n'
p3120
S'.text:00000000004064f0\n.text:00000000004064f3\n.text:00000000004064f5\n.text:00000000004064f7\n.text:00000000004064fb\n.text:00000000004064fe\n.text:0000000000406502\n.text:0000000000406504\n.text:0000000000406507\n.text:0000000000406509\n.text:000000000040650c\n.text:000000000040650e\n.text:000000000040650f\n.text:0000000000406511\n'
p3121
tp3122
sS'getuidbyname'
p3123
(S'\n__stdcall getuidbyname(char * user)\n'
p3124
V\u000auid_t * getuidbyname(char *user)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  passwd *ppVar3;\u000a  size_t sVar4;\u000a  userid *puVar5;\u000a  userid *puVar6;\u000a  \u000a  if (user_alist != (userid *)0x0) {\u000a    cVar1 = *user;\u000a    puVar5 = user_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),user), iVar2 == 0)) {\u000a        return (uid_t *)puVar5;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  if (nouser_alist != (userid *)0x0) {\u000a    cVar1 = *user;\u000a    puVar5 = nouser_alist;\u000a    do {\u000a      if ((*(char *)&puVar5[1].id == cVar1) &&\u000a         (iVar2 = strcmp((char *)(puVar5 + 1),user), iVar2 == 0)) {\u000a        return (uid_t *)0x0;\u000a      }\u000a      puVar5 = puVar5->next;\u000a    } while (puVar5 != (userid *)0x0);\u000a  }\u000a  ppVar3 = getpwnam(user);\u000a  sVar4 = strlen(user);\u000a  puVar5 = (userid *)xmalloc(sVar4 + 0x11);\u000a  strcpy((char *)(puVar5 + 1),user);\u000a  if (ppVar3 == (passwd *)0x0) {\u000a    puVar5->next = nouser_alist;\u000a    puVar6 = (userid *)0x0;\u000a    nouser_alist = puVar5;\u000a  }\u000a  else {\u000a    puVar5->id = ppVar3->pw_uid;\u000a    puVar5->next = user_alist;\u000a    puVar6 = puVar5;\u000a    user_alist = puVar5;\u000a  }\u000a  return (uid_t *)puVar6;\u000a}\u000a\u000a
p3125
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nMOV R12,qword ptr [0x0061e188]\nTEST R12,R12\nJZ 0x0040b1b6\nMOV BL,byte ptr [R14]\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R12 + 0x10],BL\nJNZ 0x0040b1ac\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x0040b253\nMOV R12,qword ptr [R12 + 0x8]\nTEST R12,R12\nJNZ 0x0040b190\nMOV RBX,qword ptr [0x0061e190]\nTEST RBX,RBX\nJZ 0x0040b1ef\nMOV BPL,byte ptr [R14]\nXOR R12D,R12D\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBX + 0x10],BPL\nJNZ 0x0040b1e6\nLEA RDI,[RBX + 0x10]\nMOV RSI,R14\nCALL 0x004023f0\nTEST EAX,EAX\nJZ 0x0040b253\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x0040b1d0\nMOV RDI,R14\nCALL 0x00402420\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x00402290\nLEA RDI,[RAX + 0x11]\nCALL 0x0040f910\nMOV R12,RAX\nLEA RDI,[R12 + 0x10]\nMOV RSI,R14\nCALL 0x00402150\nTEST R15,R15\nJZ 0x0040b23d\nMOV EAX,dword ptr [R15 + 0x10]\nMOV dword ptr [R12],EAX\nMOV RAX,qword ptr [0x0061e188]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0061e188],R12\nJMP 0x0040b253\nMOV RAX,qword ptr [0x0061e190]\nMOV qword ptr [R12 + 0x8],RAX\nMOV qword ptr [0x0061e190],R12\nXOR R12D,R12D\nMOV RAX,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3126
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n4c 8b 25 06 30 21 00\n4d 85 e4\n74 2f\n41 8a 1e\n66 0f 1f 44 00 00\n41 38 5c 24 10\n75 15\n49 8d 7c 24 10\n4c 89 f6\ne8 4c 72 ff ff\n85 c0\n0f 84 a7 00 00 00\n4d 8b 64 24 08\n4d 85 e4\n75 da\n48 8b 1d d3 2f 21 00\n48 85 db\n74 2d\n41 8a 2e\n45 31 e4\n0f 1f 84 00 00 00 00 00\n40 38 6b 10\n75 10\n48 8d 7b 10\n4c 89 f6\ne8 0e 72 ff ff\n85 c0\n74 6d\n48 8b 5b 08\n48 85 db\n75 e1\n4c 89 f7\ne8 29 72 ff ff\n49 89 c7\n4c 89 f7\ne8 8e 70 ff ff\n48 8d 78 11\ne8 05 47 00 00\n49 89 c4\n49 8d 7c 24 10\n4c 89 f6\ne8 35 6f ff ff\n4d 85 ff\n74 1d\n41 8b 47 10\n41 89 04 24\n48 8b 05 59 2f 21 00\n49 89 44 24 08\n4c 89 25 4d 2f 21 00\neb 16\n48 8b 05 4c 2f 21 00\n49 89 44 24 08\n4c 89 25 40 2f 21 00\n45 31 e4\n4c 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3127
S'.text:000000000040b170\n.text:000000000040b171\n.text:000000000040b173\n.text:000000000040b175\n.text:000000000040b177\n.text:000000000040b178\n.text:000000000040b17b\n.text:000000000040b182\n.text:000000000040b185\n.text:000000000040b187\n.text:000000000040b18a\n.text:000000000040b190\n.text:000000000040b195\n.text:000000000040b197\n.text:000000000040b19c\n.text:000000000040b19f\n.text:000000000040b1a4\n.text:000000000040b1a6\n.text:000000000040b1ac\n.text:000000000040b1b1\n.text:000000000040b1b4\n.text:000000000040b1b6\n.text:000000000040b1bd\n.text:000000000040b1c0\n.text:000000000040b1c2\n.text:000000000040b1c5\n.text:000000000040b1c8\n.text:000000000040b1d0\n.text:000000000040b1d4\n.text:000000000040b1d6\n.text:000000000040b1da\n.text:000000000040b1dd\n.text:000000000040b1e2\n.text:000000000040b1e4\n.text:000000000040b1e6\n.text:000000000040b1ea\n.text:000000000040b1ed\n.text:000000000040b1ef\n.text:000000000040b1f2\n.text:000000000040b1f7\n.text:000000000040b1fa\n.text:000000000040b1fd\n.text:000000000040b202\n.text:000000000040b206\n.text:000000000040b20b\n.text:000000000040b20e\n.text:000000000040b213\n.text:000000000040b216\n.text:000000000040b21b\n.text:000000000040b21e\n.text:000000000040b220\n.text:000000000040b224\n.text:000000000040b228\n.text:000000000040b22f\n.text:000000000040b234\n.text:000000000040b23b\n.text:000000000040b23d\n.text:000000000040b244\n.text:000000000040b249\n.text:000000000040b250\n.text:000000000040b253\n.text:000000000040b256\n.text:000000000040b257\n.text:000000000040b259\n.text:000000000040b25b\n.text:000000000040b25d\n.text:000000000040b25e\n'
p3128
tp3129
sS'dirfd'
p3130
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p3131
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0061d1d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p3132
S'JMP qword ptr [0x0061d1d8]\n'
p3133
S'ff 25 c2 ad 21 00\n'
p3134
S'.plt:0000000000402410\n'
p3135
tp3136
sS'getenv_TZ'
p3137
(S'\n__stdcall getenv_TZ()\n'
p3138
V\u000achar * getenv_TZ(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = getenv("TZ");\u000a  return pcVar1;\u000a}\u000a\u000a
p3139
S'MOV EDI,0x4183df\nJMP 0x004020a0\n'
p3140
S'bf df 83 41 00\ne9 b6 16 ff ff\n'
p3141
S'.text:00000000004109e0\n.text:00000000004109e5\n'
p3142
tp3143
sS'rev_strcmp_df_extension'
p3144
(S'\n__stdcall rev_strcmp_df_extension(V a, V b)\n'
p3145
V\u000aint rev_strcmp_df_extension(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_extension((fileinfo *)b,(fileinfo *)a,strcmp);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p3146
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x004068fa\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040691d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040691d\nMOV EDX,0x4023f0\nMOV RDI,R14\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004071b0\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3147
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 e0 fb ff ff\n89 c3\n4c 89 f7\ne8 d6 fb ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba f0 23 40 00\n4c 89 f7\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 93 08 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p3148
S'.text:00000000004068d0\n.text:00000000004068d2\n.text:00000000004068d4\n.text:00000000004068d5\n.text:00000000004068d8\n.text:00000000004068db\n.text:00000000004068e0\n.text:00000000004068e2\n.text:00000000004068e5\n.text:00000000004068ea\n.text:00000000004068ec\n.text:00000000004068ee\n.text:00000000004068f0\n.text:00000000004068f3\n.text:00000000004068f8\n.text:00000000004068fa\n.text:00000000004068fc\n.text:00000000004068fe\n.text:0000000000406903\n.text:0000000000406906\n.text:0000000000406908\n.text:000000000040690d\n.text:0000000000406910\n.text:0000000000406913\n.text:0000000000406914\n.text:0000000000406916\n.text:0000000000406918\n.text:000000000040691d\n.text:000000000040691f\n.text:0000000000406920\n.text:0000000000406922\n.text:0000000000406924\n'
p3149
tp3150
sS'_start'
p3151
(S'\n__stdcall _start()\n'
p3152
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0061cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p3153
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x411930\nMOV RCX,0x4118c0\nMOV RDI,0x402840\nCALL qword ptr [0x0061cff0]\nHLT\n'
p3154
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 30 19 41 00\n48 c7 c1 c0 18 41 00\n48 c7 c7 40 28 40 00\nff 15 86 a8 21 00\nf4\n'
p3155
S'.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402745\n.text:0000000000402746\n.text:0000000000402749\n.text:000000000040274d\n.text:000000000040274e\n.text:000000000040274f\n.text:0000000000402756\n.text:000000000040275d\n.text:0000000000402764\n.text:000000000040276a\n'
p3156
tp3157
sS'lgetfilecon'
p3158
(S'\n__stdcall lgetfilecon(char * file, security_context_t * con)\n'
p3159
V\u000aint lgetfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3160
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3161
S'50\ne8 1a 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3162
S'.text:000000000040d8f0\n.text:000000000040d8f1\n.text:000000000040d8f6\n.text:000000000040d8fc\n.text:000000000040d901\n.text:000000000040d902\n'
p3163
tp3164
sS'humblock'
p3165
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p3166
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_0040b02a;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_0040b02a:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p3167
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x0040afea\nMOV EDI,0x416550\nCALL 0x004020a0\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x0040afea\nMOV EDI,0x416eac\nCALL 0x004020a0\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x0040b086\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x416ef0\nMOV EDX,0x416f08\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00408c20\nTEST EAX,EAX\nJS 0x0040b031\nCDQE\nOR EBP,dword ptr [0x416f08 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x0040b052\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x416eb6\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x0040ff60\nTEST EAX,EAX\nJZ 0x0040b05d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x0040b02a\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x0040b08f\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x0040b070\nJMP 0x0040b02a\nXOR EBP,EBP\nCALL 0x0040b0c0\nJMP 0x0040b027\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x0040b0b0\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x0040b02a\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x0040b02a\n'
p3168
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf 50 65 41 00\ne8 d4 70 ff ff\n48 89 c7\n48 85 ff\n75 16\nbf ac 6e 41 00\ne8 c2 70 ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe f0 6e 41 00\nba 08 6f 41 00\nb9 04 00 00 00\n48 89 df\ne8 0b dc ff ff\n85 c0\n78 18\n48 98\n0b 2c 85 08 6f 41 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 b6 6e 41 00\n48 89 df\n4c 89 f9\ne8 19 4f 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p3169
S'.text:000000000040afb0\n.text:000000000040afb1\n.text:000000000040afb3\n.text:000000000040afb5\n.text:000000000040afb6\n.text:000000000040afb7\n.text:000000000040afba\n.text:000000000040afbd\n.text:000000000040afc0\n.text:000000000040afc2\n.text:000000000040afc7\n.text:000000000040afcc\n.text:000000000040afcf\n.text:000000000040afd2\n.text:000000000040afd4\n.text:000000000040afd9\n.text:000000000040afde\n.text:000000000040afe1\n.text:000000000040afe4\n.text:000000000040afea\n.text:000000000040afec\n.text:000000000040afef\n.text:000000000040aff3\n.text:000000000040aff7\n.text:000000000040affb\n.text:000000000040affe\n.text:000000000040b003\n.text:000000000040b008\n.text:000000000040b00d\n.text:000000000040b010\n.text:000000000040b015\n.text:000000000040b017\n.text:000000000040b019\n.text:000000000040b01b\n.text:000000000040b022\n.text:000000000040b027\n.text:000000000040b02a\n.text:000000000040b02d\n.text:000000000040b02f\n.text:000000000040b031\n.text:000000000040b034\n.text:000000000040b036\n.text:000000000040b03c\n.text:000000000040b03f\n.text:000000000040b042\n.text:000000000040b047\n.text:000000000040b049\n.text:000000000040b04b\n.text:000000000040b052\n.text:000000000040b056\n.text:000000000040b057\n.text:000000000040b059\n.text:000000000040b05b\n.text:000000000040b05c\n.text:000000000040b05d\n.text:000000000040b05f\n.text:000000000040b061\n.text:000000000040b063\n.text:000000000040b065\n.text:000000000040b069\n.text:000000000040b070\n.text:000000000040b073\n.text:000000000040b075\n.text:000000000040b079\n.text:000000000040b07c\n.text:000000000040b07f\n.text:000000000040b082\n.text:000000000040b084\n.text:000000000040b086\n.text:000000000040b088\n.text:000000000040b08d\n.text:000000000040b08f\n.text:000000000040b091\n.text:000000000040b097\n.text:000000000040b09d\n.text:000000000040b0a1\n.text:000000000040b0a4\n.text:000000000040b0a6\n.text:000000000040b0aa\n.text:000000000040b0b0\n.text:000000000040b0b3\n.text:000000000040b0b5\n'
p3170
tp3171
sS'stpcpy'
p3172
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p3173
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_0061d100)();\u000a  return pcVar1;\u000a}\u000a\u000a
p3174
S'JMP qword ptr [0x0061d100]\n'
p3175
S'ff 25 9a ae 21 00\n'
p3176
S'.plt:0000000000402260\n'
p3177
tp3178
sS'atexit'
p3179
(S'\n__stdcall atexit(__func * __func)\n'
p3180
V\u000a/* WARNING: Removing unreachable block (ram,0x00411960) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0061d300)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p3181
S'MOV RAX,0x61d378\nTEST RAX,RAX\nJZ 0x00411960\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00402660\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00402660\n'
p3182
S'48 c7 c0 78 d3 61 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 0a 0d ff ff\n31 d2\n31 f6\ne9 f7 0c ff ff\n'
p3183
S'.text:0000000000411940\n.text:0000000000411947\n.text:000000000041194a\n.text:000000000041194c\n.text:000000000041194f\n.text:0000000000411951\n.text:0000000000411960\n.text:0000000000411962\n.text:0000000000411964\n'
p3184
tp3185
sS'fdopen'
p3186
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p3187
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0061d298)();\u000a  return pFVar1;\u000a}\u000a\u000a
p3188
S'JMP qword ptr [0x0061d298]\n'
p3189
S'ff 25 02 ad 21 00\n'
p3190
S'.plt:0000000000402590\n'
p3191
tp3192
sS'hash_find_entry'
p3193
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p3194
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p3195
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x00409a80\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x0040a4f5\nCMP RSI,RBP\nJZ 0x0040a4a7\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x0040a4c0\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x0040a51d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x0040a4fa\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x0040a515\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x0040a4f5\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x0040a503\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040a503\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x0040a4d0\nJMP 0x0040a51d\nXOR R14D,R14D\nJMP 0x0040a51d\nMOV qword ptr [RBX],0x0\nJMP 0x0040a51d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x0040a51d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x0040a7f0\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3196
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3197
S'.text:000000000040a470\n.text:000000000040a471\n.text:000000000040a473\n.text:000000000040a475\n.text:000000000040a477\n.text:000000000040a478\n.text:000000000040a47b\n.text:000000000040a47e\n.text:000000000040a481\n.text:000000000040a484\n.text:000000000040a489\n.text:000000000040a48c\n.text:000000000040a48f\n.text:000000000040a492\n.text:000000000040a495\n.text:000000000040a497\n.text:000000000040a49a\n.text:000000000040a49c\n.text:000000000040a49f\n.text:000000000040a4a3\n.text:000000000040a4a5\n.text:000000000040a4a7\n.text:000000000040a4aa\n.text:000000000040a4ad\n.text:000000000040a4af\n.text:000000000040a4b3\n.text:000000000040a4b6\n.text:000000000040a4b8\n.text:000000000040a4bb\n.text:000000000040a4be\n.text:000000000040a4c0\n.text:000000000040a4c4\n.text:000000000040a4c7\n.text:000000000040a4c9\n.text:000000000040a4cd\n.text:000000000040a4d0\n.text:000000000040a4d3\n.text:000000000040a4d6\n.text:000000000040a4d8\n.text:000000000040a4db\n.text:000000000040a4df\n.text:000000000040a4e1\n.text:000000000040a4e3\n.text:000000000040a4e6\n.text:000000000040a4ea\n.text:000000000040a4ee\n.text:000000000040a4f1\n.text:000000000040a4f3\n.text:000000000040a4f5\n.text:000000000040a4f8\n.text:000000000040a4fa\n.text:000000000040a501\n.text:000000000040a503\n.text:000000000040a506\n.text:000000000040a509\n.text:000000000040a50c\n.text:000000000040a50e\n.text:000000000040a512\n.text:000000000040a515\n.text:000000000040a518\n.text:000000000040a51d\n.text:000000000040a520\n.text:000000000040a521\n.text:000000000040a523\n.text:000000000040a525\n.text:000000000040a527\n.text:000000000040a528\n'
p3198
tp3199
sS'error'
p3200
(S'\n__stdcall error()\n'
p3201
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0061d2c8)();\u000a  return;\u000a}\u000a\u000a
p3202
S'JMP qword ptr [0x0061d2c8]\n'
p3203
S'ff 25 d2 ac 21 00\n'
p3204
S'.plt:00000000004025f0\n'
p3205
tp3206
sS'cmp_atime'
p3207
(S'\n__stdcall cmp_atime(fileinfo * a, fileinfo * b, anon_subr_int_char_ptr_char_ptr * cmp)\n'
p3208
V\u000aint cmp_atime(fileinfo *a,fileinfo *b,int (*cmp)(char *,char *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  get_stat_atime(&b->stat);\u000a  get_stat_atime(&a->stat);\u000a  iVar1 = timespec_cmp();\u000a  if (iVar1 != 0) {\u000a    return iVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x0040737b. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  iVar1 = (*cmp)(a->name,b->name);\u000a  return iVar1;\u000a}\u000a\u000a
p3209
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nLEA RDI,[R14 + 0x10]\nCALL 0x0040da80\nMOV RBX,RAX\nMOV R12,RDX\nLEA RDI,[R15 + 0x10]\nCALL 0x0040da80\nMOV RCX,RDX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x0040f390\nTEST EAX,EAX\nJZ 0x00407369\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RDI,qword ptr [R15]\nMOV RSI,qword ptr [R14]\nMOV RAX,R13\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP RAX\n'
p3210
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8d 7e 10\ne8 45 67 00 00\n48 89 c3\n49 89 d4\n49 8d 7f 10\ne8 36 67 00 00\n48 89 d1\n48 89 df\n4c 89 e6\n48 89 c2\ne8 35 80 00 00\n85 c0\n74 0a\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n49 8b 3f\n49 8b 36\n4c 89 e8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nff e0\n'
p3211
S'.text:0000000000407320\n.text:0000000000407322\n.text:0000000000407324\n.text:0000000000407326\n.text:0000000000407328\n.text:0000000000407329\n.text:000000000040732c\n.text:000000000040732f\n.text:0000000000407332\n.text:0000000000407336\n.text:000000000040733b\n.text:000000000040733e\n.text:0000000000407341\n.text:0000000000407345\n.text:000000000040734a\n.text:000000000040734d\n.text:0000000000407350\n.text:0000000000407353\n.text:0000000000407356\n.text:000000000040735b\n.text:000000000040735d\n.text:000000000040735f\n.text:0000000000407360\n.text:0000000000407362\n.text:0000000000407364\n.text:0000000000407366\n.text:0000000000407368\n.text:0000000000407369\n.text:000000000040736c\n.text:000000000040736f\n.text:0000000000407372\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407377\n.text:0000000000407379\n.text:000000000040737b\n'
p3212
tp3213
sS'raw_comparator'
p3214
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p3215
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p3216
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p3217
S'48 39 f7\n0f 94 c0\nc3\n'
p3218
S'.text:0000000000409d90\n.text:0000000000409d93\n.text:0000000000409d96\n'
p3219
tp3220
sS'strcaseeq6'
p3221
(S'\n__stdcall strcaseeq6()\n'
p3222
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p3223
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x0040d7d2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d7d9\nJMP 0x0040d7ee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d7ee\nTEST BPL,BPL\nJZ 0x0040d7e9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x0040d800\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p3224
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 81 34 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p3225
S'.text:000000000040d7b0\n.text:000000000040d7b1\n.text:000000000040d7b2\n.text:000000000040d7b3\n.text:000000000040d7b5\n.text:000000000040d7b8\n.text:000000000040d7ba\n.text:000000000040d7bf\n.text:000000000040d7c3\n.text:000000000040d7c5\n.text:000000000040d7c7\n.text:000000000040d7ca\n.text:000000000040d7cc\n.text:000000000040d7ce\n.text:000000000040d7d0\n.text:000000000040d7d2\n.text:000000000040d7d4\n.text:000000000040d7d7\n.text:000000000040d7d9\n.text:000000000040d7dc\n.text:000000000040d7de\n.text:000000000040d7e1\n.text:000000000040d7e5\n.text:000000000040d7e6\n.text:000000000040d7e7\n.text:000000000040d7e9\n.text:000000000040d7ee\n.text:000000000040d7f2\n.text:000000000040d7f3\n.text:000000000040d7f4\n'
p3226
tp3227
sS'patterns_match'
p3228
(S'\n__stdcall patterns_match(ignore_pattern * patterns, char * file)\n'
p3229
V\u000a_Bool patterns_match(ignore_pattern *patterns,char *file)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (patterns != (ignore_pattern *)0x0) {\u000a    do {\u000a      iVar1 = fnmatch(patterns->pattern,file,4);\u000a      if (iVar1 == 0) {\u000a        return true;\u000a      }\u000a      patterns = patterns->next;\u000a    } while (patterns != (ignore_pattern *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p3230
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJNZ 0x00406109\nJMP 0x00406121\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJZ 0x00406121\nMOV RDI,qword ptr [RBX]\nMOV EDX,0x4\nMOV RSI,R14\nCALL 0x00402340\nTEST EAX,EAX\nJNZ 0x00406100\nMOV AL,0x1\nJMP 0x00406123\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p3231
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 85 db\n75 1a\neb 30\n48 8b 5b 08\n48 85 db\n74 18\n48 8b 3b\nba 04 00 00 00\n4c 89 f6\ne8 27 c2 ff ff\n85 c0\n75 e3\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p3232
S'.text:00000000004060e0\n.text:00000000004060e2\n.text:00000000004060e3\n.text:00000000004060e4\n.text:00000000004060e7\n.text:00000000004060ea\n.text:00000000004060ed\n.text:00000000004060ef\n.text:0000000000406100\n.text:0000000000406104\n.text:0000000000406107\n.text:0000000000406109\n.text:000000000040610c\n.text:0000000000406111\n.text:0000000000406114\n.text:0000000000406119\n.text:000000000040611b\n.text:000000000040611d\n.text:000000000040611f\n.text:0000000000406121\n.text:0000000000406123\n.text:0000000000406127\n.text:0000000000406128\n.text:000000000040612a\n'
p3233
tp3234
sS'imaxtostr'
p3235
(S'\n__stdcall imaxtostr(intmax_t i, char * buf)\n'
p3236
V\u000achar * imaxtostr(intmax_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p3237
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x0040b43b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x0040b400\nJMP 0x0040b48f\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x0040b450\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p3238
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p3239
S'.text:000000000040b3e0\n.text:000000000040b3e3\n.text:000000000040b3e7\n.text:000000000040b3ea\n.text:000000000040b3ec\n.text:000000000040b3f0\n.text:000000000040b3fa\n.text:000000000040b400\n.text:000000000040b403\n.text:000000000040b406\n.text:000000000040b409\n.text:000000000040b40d\n.text:000000000040b411\n.text:000000000040b414\n.text:000000000040b416\n.text:000000000040b41a\n.text:000000000040b41c\n.text:000000000040b41f\n.text:000000000040b422\n.text:000000000040b426\n.text:000000000040b429\n.text:000000000040b42c\n.text:000000000040b430\n.text:000000000040b434\n.text:000000000040b437\n.text:000000000040b439\n.text:000000000040b43b\n.text:000000000040b43f\n.text:000000000040b449\n.text:000000000040b450\n.text:000000000040b453\n.text:000000000040b456\n.text:000000000040b459\n.text:000000000040b45d\n.text:000000000040b461\n.text:000000000040b465\n.text:000000000040b467\n.text:000000000040b46b\n.text:000000000040b46d\n.text:000000000040b470\n.text:000000000040b475\n.text:000000000040b477\n.text:000000000040b479\n.text:000000000040b47c\n.text:000000000040b480\n.text:000000000040b483\n.text:000000000040b487\n.text:000000000040b48a\n.text:000000000040b48c\n.text:000000000040b48f\n.text:000000000040b492\n'
p3240
tp3241
sS'strcaseeq5'
p3242
(S'\n__stdcall strcaseeq5()\n'
p3243
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p3244
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x0040d786\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d78d\nJMP 0x0040d7a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d7a4\nTEST BPL,BPL\nJZ 0x0040d79f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040d7b0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p3245
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 cd 34 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p3246
S'.text:000000000040d760\n.text:000000000040d761\n.text:000000000040d763\n.text:000000000040d764\n.text:000000000040d767\n.text:000000000040d769\n.text:000000000040d76c\n.text:000000000040d76e\n.text:000000000040d773\n.text:000000000040d777\n.text:000000000040d779\n.text:000000000040d77b\n.text:000000000040d77e\n.text:000000000040d780\n.text:000000000040d782\n.text:000000000040d784\n.text:000000000040d786\n.text:000000000040d788\n.text:000000000040d78b\n.text:000000000040d78d\n.text:000000000040d790\n.text:000000000040d792\n.text:000000000040d796\n.text:000000000040d799\n.text:000000000040d79a\n.text:000000000040d79c\n.text:000000000040d79d\n.text:000000000040d79f\n.text:000000000040d7a4\n.text:000000000040d7a5\n.text:000000000040d7a7\n.text:000000000040d7a8\n'
p3247
tp3248
sS'strcaseeq7'
p3249
(S'\n__stdcall strcaseeq7()\n'
p3250
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p3251
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x0040d822\nTEST ECX,0xffffffdf\nJNZ 0x0040d826\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040d82a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p3252
S'53\n48 89 fb\n31 ff\ne8 35 34 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p3253
S'.text:000000000040d800\n.text:000000000040d801\n.text:000000000040d804\n.text:000000000040d806\n.text:000000000040d80b\n.text:000000000040d80f\n.text:000000000040d811\n.text:000000000040d813\n.text:000000000040d819\n.text:000000000040d81b\n.text:000000000040d820\n.text:000000000040d821\n.text:000000000040d822\n.text:000000000040d824\n.text:000000000040d826\n.text:000000000040d828\n.text:000000000040d829\n.text:000000000040d82a\n.text:000000000040d82f\n.text:000000000040d830\n'
p3254
tp3255
sS'wcstombs'
p3256
(S'\n__stdcall wcstombs(char * __s, wchar_t * __pwcs, size_t __n)\n'
p3257
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t wcstombs(char *__s,wchar_t *__pwcs,size_t __n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_wcstombs_0061d308)();\u000a  return sVar1;\u000a}\u000a\u000a
p3258
S'JMP qword ptr [0x0061d308]\n'
p3259
S'ff 25 92 ac 21 00\n'
p3260
S'.plt:0000000000402670\n'
p3261
tp3262
sS'tcgetpgrp'
p3263
(S'\n__stdcall tcgetpgrp(int __fd)\n'
p3264
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t tcgetpgrp(int __fd)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_tcgetpgrp_0061d218)();\u000a  return _Var1;\u000a}\u000a\u000a
p3265
S'JMP qword ptr [0x0061d218]\n'
p3266
S'ff 25 82 ad 21 00\n'
p3267
S'.plt:0000000000402490\n'
p3268
tp3269
sS'format_user_or_group_width'
p3270
(S'\n__stdcall format_user_or_group_width(char * name, ulong id)\n'
p3271
V\u000aint format_user_or_group_width(char *name,ulong id)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  int iVar3;\u000a  char buf [21];\u000a  char acStack40 [32];\u000a  \u000a  if (name == (char *)0x0) {\u000a    __sprintf_chk(acStack40,1,0x15,&DAT_004163e9,id);\u000a    sVar2 = strlen(acStack40);\u000a    iVar3 = (int)sVar2;\u000a  }\u000a  else {\u000a    iVar1 = gnu_mbswidth(name);\u000a    iVar3 = 0;\u000a    if (-1 < iVar1) {\u000a      iVar3 = iVar1;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p3272
S'PUSH RBX\nSUB RSP,0x20\nMOV R8,RSI\nTEST RDI,RDI\nJZ 0x0040648d\nXOR EBX,EBX\nXOR ESI,ESI\nCALL 0x0040b980\nTEST EAX,EAX\nCMOVNS EBX,EAX\nJMP 0x004064b4\nMOV RBX,RSP\nMOV ESI,0x1\nMOV EDX,0x15\nMOV ECX,0x4163e9\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00402730\nMOV RDI,RBX\nCALL 0x00402290\nMOV RBX,RAX\nMOV EAX,EBX\nADD RSP,0x20\nPOP RBX\nRET\n'
p3273
S'53\n48 83 ec 20\n49 89 f0\n48 85 ff\n74 10\n31 db\n31 f6\ne8 fa 54 00 00\n85 c0\n0f 49 d8\neb 27\n48 89 e3\nbe 01 00 00 00\nba 15 00 00 00\nb9 e9 63 41 00\n31 c0\n48 89 df\ne8 87 c2 ff ff\n48 89 df\ne8 df bd ff ff\n48 89 c3\n89 d8\n48 83 c4 20\n5b\nc3\n'
p3274
S'.text:0000000000406470\n.text:0000000000406471\n.text:0000000000406475\n.text:0000000000406478\n.text:000000000040647b\n.text:000000000040647d\n.text:000000000040647f\n.text:0000000000406481\n.text:0000000000406486\n.text:0000000000406488\n.text:000000000040648b\n.text:000000000040648d\n.text:0000000000406490\n.text:0000000000406495\n.text:000000000040649a\n.text:000000000040649f\n.text:00000000004064a1\n.text:00000000004064a4\n.text:00000000004064a9\n.text:00000000004064ac\n.text:00000000004064b1\n.text:00000000004064b4\n.text:00000000004064b6\n.text:00000000004064ba\n.text:00000000004064bb\n'
p3275
tp3276
sS'strtoul'
p3277
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p3278
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0061d2f8)();\u000a  return uVar1;\u000a}\u000a\u000a
p3279
S'JMP qword ptr [0x0061d2f8]\n'
p3280
S'ff 25 a2 ac 21 00\n'
p3281
S'.plt:0000000000402650\n'
p3282
tp3283
sS'emit_mandatory_arg_note'
p3284
(S'\n__stdcall emit_mandatory_arg_note()\n'
p3285
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p3286
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x416b09\nMOV EDX,0x5\nCALL 0x00402270\nMOV RSI,qword ptr [0x0061d5c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004023c0\n'
p3287
S'50\n31 ff\nbe 09 6b 41 00\nba 05 00 00 00\ne8 6e cd ff ff\n48 8b 35 bf 80 21 00\n48 89 c7\n58\ne9 ae ce ff ff\n'
p3288
S'.text:00000000004054f0\n.text:00000000004054f1\n.text:00000000004054f3\n.text:00000000004054f8\n.text:00000000004054fd\n.text:0000000000405502\n.text:0000000000405509\n.text:000000000040550c\n.text:000000000040550d\n'
p3289
tp3290
sS'match_suffix'
p3291
(S'\n__stdcall match_suffix(char * * str)\n'
p3292
V\u000achar * match_suffix(char **str)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  char *pcVar3;\u000a  char cVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  \u000a  pcVar3 = *str;\u000a  cVar4 = *pcVar3;\u000a  if (cVar4 == 0) {\u000a    pcVar6 = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar5 = (char *)0x0;\u000a    pcVar6 = (char *)0x0;\u000a    do {\u000a      if (pcVar5 == (char *)0x0) {\u000a        if (cVar4 == '.') {\u000a          if (pcVar6 == (char *)0x0) {\u000a            pcVar6 = pcVar3;\u000a          }\u000a          pcVar5 = (char *)0x1;\u000a        }\u000a        else {\u000a          _Var2 = c_isalnum();\u000a          if ((_Var2 == false) && (**str != '~')) {\u000a            pcVar6 = (char *)0x0;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        _Var2 = c_isalpha();\u000a        if (_Var2 == false) {\u000a          pcVar5 = (char *)0x0;\u000a          if (**str != '~') {\u000a            pcVar6 = pcVar5;\u000a          }\u000a        }\u000a        else {\u000a          pcVar5 = (char *)0x0;\u000a        }\u000a      }\u000a      pcVar1 = *str;\u000a      pcVar3 = pcVar1 + 1;\u000a      *str = pcVar3;\u000a      cVar4 = pcVar1[1];\u000a    } while (cVar4 != 0);\u000a  }\u000a  return pcVar6;\u000a}\u000a\u000a
p3293
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDI\nMOV RAX,qword ptr [R12]\nMOV CL,byte ptr [RAX]\nTEST CL,CL\nJZ 0x004095b3\nXOR R15D,R15D\nXOR EBX,EBX\nXOR R14D,R14D\nNOP dword ptr [RAX]\nTEST BL,0x1\nMOVSX EDI,CL\nJNZ 0x00409560\nCMP CL,0x2e\nJNZ 0x00409570\nTEST R14,R14\nCMOVZ R14,RAX\nMOV BL,0x1\nJMP 0x0040959d\nCALL 0x00410b70\nTEST AL,AL\nJZ 0x00409590\nXOR EBX,EBX\nJMP 0x0040959d\nCALL 0x00410b40\nTEST AL,AL\nJNZ 0x0040959d\nMOV RAX,qword ptr [R12]\nCMP byte ptr [RAX],0x7e\nCMOVNZ R14,R15\nJMP 0x0040959d\nMOV RAX,qword ptr [R12]\nXOR EBX,EBX\nCMP byte ptr [RAX],0x7e\nCMOVNZ R14,RBX\nMOV RCX,qword ptr [R12]\nLEA RAX,[RCX + 0x1]\nMOV qword ptr [R12],RAX\nMOVZX ECX,byte ptr [RCX + 0x1]\nTEST CL,CL\nJNZ 0x00409540\nJMP 0x004095b6\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p3294
S'41 57\n41 56\n41 54\n53\n50\n49 89 fc\n49 8b 04 24\n8a 08\n84 c9\n74 7e\n45 31 ff\n31 db\n45 31 f6\n0f 1f 00\nf6 c3 01\n0f be f9\n75 18\n80 f9 2e\n75 23\n4d 85 f6\n4c 0f 44 f0\nb3 01\neb 45\ne8 0b 76 00 00\n84 c0\n74 27\n31 db\neb 30\ne8 cb 75 00 00\n84 c0\n75 24\n49 8b 04 24\n80 38 7e\n4d 0f 45 f7\neb 17\n49 8b 04 24\n31 db\n80 38 7e\n4c 0f 45 f3\n49 8b 0c 24\n48 8d 41 01\n49 89 04 24\n0f b6 49 01\n84 c9\n75 8f\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p3295
S'.text:0000000000409520\n.text:0000000000409522\n.text:0000000000409524\n.text:0000000000409526\n.text:0000000000409527\n.text:0000000000409528\n.text:000000000040952b\n.text:000000000040952f\n.text:0000000000409531\n.text:0000000000409533\n.text:0000000000409535\n.text:0000000000409538\n.text:000000000040953a\n.text:000000000040953d\n.text:0000000000409540\n.text:0000000000409543\n.text:0000000000409546\n.text:0000000000409548\n.text:000000000040954b\n.text:000000000040954d\n.text:0000000000409550\n.text:0000000000409554\n.text:0000000000409556\n.text:0000000000409560\n.text:0000000000409565\n.text:0000000000409567\n.text:0000000000409569\n.text:000000000040956b\n.text:0000000000409570\n.text:0000000000409575\n.text:0000000000409577\n.text:0000000000409579\n.text:000000000040957d\n.text:0000000000409580\n.text:0000000000409584\n.text:0000000000409590\n.text:0000000000409594\n.text:0000000000409596\n.text:0000000000409599\n.text:000000000040959d\n.text:00000000004095a1\n.text:00000000004095a5\n.text:00000000004095a9\n.text:00000000004095ad\n.text:00000000004095af\n.text:00000000004095b1\n.text:00000000004095b3\n.text:00000000004095b6\n.text:00000000004095b9\n.text:00000000004095bd\n.text:00000000004095be\n.text:00000000004095c0\n.text:00000000004095c2\n.text:00000000004095c4\n'
p3296
tp3297
sS'strcaseeq0'
p3298
(S'\n__stdcall strcaseeq0()\n'
p3299
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p3300
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x0040d535\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d53c\nJMP 0x0040d570\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d570\nTEST BPL,BPL\nJZ 0x0040d56b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x0040d580\nJMP 0x0040d570\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3301
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 37 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3302
S'.text:000000000040d500\n.text:000000000040d501\n.text:000000000040d503\n.text:000000000040d505\n.text:000000000040d507\n.text:000000000040d509\n.text:000000000040d50a\n.text:000000000040d50b\n.text:000000000040d50e\n.text:000000000040d511\n.text:000000000040d514\n.text:000000000040d517\n.text:000000000040d519\n.text:000000000040d51c\n.text:000000000040d51e\n.text:000000000040d523\n.text:000000000040d526\n.text:000000000040d528\n.text:000000000040d52a\n.text:000000000040d52d\n.text:000000000040d52f\n.text:000000000040d531\n.text:000000000040d533\n.text:000000000040d535\n.text:000000000040d537\n.text:000000000040d53a\n.text:000000000040d53c\n.text:000000000040d53f\n.text:000000000040d541\n.text:000000000040d545\n.text:000000000040d54a\n.text:000000000040d54d\n.text:000000000040d551\n.text:000000000040d555\n.text:000000000040d559\n.text:000000000040d55d\n.text:000000000040d561\n.text:000000000040d564\n.text:000000000040d569\n.text:000000000040d56b\n.text:000000000040d570\n.text:000000000040d574\n.text:000000000040d575\n.text:000000000040d577\n.text:000000000040d579\n.text:000000000040d57b\n.text:000000000040d57d\n.text:000000000040d57e\n'
p3303
tp3304
sS'get_stat_mtime'
p3305
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p3306
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p3307
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p3308
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p3309
S'.text:000000000040daa0\n.text:000000000040daa4\n.text:000000000040daa8\n'
p3310
tp3311
sS'get_link_name'
p3312
(S'\n__stdcall get_link_name(char * filename, fileinfo * f)\n'
p3313
V\u000avoid get_link_name(char *filename,fileinfo *f)\u000a\u000a{\u000a  char *file;\u000a  ulong in_RDX;\u000a  \u000a  file = areadlink_with_size(filename,(f->stat).st_size);\u000a  f->linkname = file;\u000a  if (file != (char *)0x0) {\u000a    return;\u000a  }\u000a  file = (char *)dcgettext(0,"cannot read symbolic link %s",5);\u000a  file_failure((char *)(in_RDX & 0xff),file);\u000a  return;\u000a}\u000a\u000a
p3314
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RSI,qword ptr [RBP + 0x40]\nCALL 0x00408b40\nMOV qword ptr [RBP + 0x8],RAX\nTEST RAX,RAX\nJZ 0x00406334\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x416a09\nMOV EDX,0x5\nCALL 0x00402270\nMOVZX EDI,R14B\nMOV RSI,RAX\nMOV RDX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00405bc0\n'
p3315
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 75 40\ne8 1a 28 00 00\n48 89 45 08\n48 85 c0\n74 05\n5b\n41 5e\n5d\nc3\n31 ff\nbe 09 6a 41 00\nba 05 00 00 00\ne8 2b bf ff ff\n41 0f b6 fe\n48 89 c6\n48 89 da\n5b\n41 5e\n5d\ne9 68 f8 ff ff\n'
p3316
S'.text:0000000000406310\n.text:0000000000406311\n.text:0000000000406313\n.text:0000000000406314\n.text:0000000000406317\n.text:000000000040631a\n.text:000000000040631d\n.text:0000000000406321\n.text:0000000000406326\n.text:000000000040632a\n.text:000000000040632d\n.text:000000000040632f\n.text:0000000000406330\n.text:0000000000406332\n.text:0000000000406333\n.text:0000000000406334\n.text:0000000000406336\n.text:000000000040633b\n.text:0000000000406340\n.text:0000000000406345\n.text:0000000000406349\n.text:000000000040634c\n.text:000000000040634f\n.text:0000000000406350\n.text:0000000000406352\n.text:0000000000406353\n'
p3317
tp3318
sS'hash_table_ok'
p3319
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p3320
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p3321
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0040991a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0040990f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00409900\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x004098f0\nJMP 0x0040991e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0040992c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0040992e\nXOR EAX,EAX\nRET\n'
p3322
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p3323
S'.text:00000000004098d0\n.text:00000000004098d3\n.text:00000000004098d7\n.text:00000000004098d9\n.text:00000000004098dd\n.text:00000000004098df\n.text:00000000004098e1\n.text:00000000004098f0\n.text:00000000004098f4\n.text:00000000004098f6\n.text:00000000004098f9\n.text:0000000000409900\n.text:0000000000409903\n.text:0000000000409907\n.text:000000000040990a\n.text:000000000040990c\n.text:000000000040990f\n.text:0000000000409913\n.text:0000000000409916\n.text:0000000000409918\n.text:000000000040991a\n.text:000000000040991c\n.text:000000000040991e\n.text:0000000000409922\n.text:0000000000409924\n.text:0000000000409926\n.text:000000000040992a\n.text:000000000040992c\n.text:000000000040992e\n'
p3324
tp3325
sS'strcaseeq2'
p3326
(S'\n__stdcall strcaseeq2()\n'
p3327
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p3328
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x0040d646\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d64d\nJMP 0x0040d67a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d67a\nTEST BPL,BPL\nJZ 0x0040d675\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d690\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3329
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 0d 36 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3330
S'.text:000000000040d610\n.text:000000000040d611\n.text:000000000040d613\n.text:000000000040d615\n.text:000000000040d617\n.text:000000000040d619\n.text:000000000040d61a\n.text:000000000040d61b\n.text:000000000040d61e\n.text:000000000040d621\n.text:000000000040d624\n.text:000000000040d627\n.text:000000000040d629\n.text:000000000040d62c\n.text:000000000040d62e\n.text:000000000040d633\n.text:000000000040d637\n.text:000000000040d639\n.text:000000000040d63b\n.text:000000000040d63e\n.text:000000000040d640\n.text:000000000040d642\n.text:000000000040d644\n.text:000000000040d646\n.text:000000000040d648\n.text:000000000040d64b\n.text:000000000040d64d\n.text:000000000040d650\n.text:000000000040d652\n.text:000000000040d656\n.text:000000000040d65a\n.text:000000000040d65e\n.text:000000000040d662\n.text:000000000040d665\n.text:000000000040d669\n.text:000000000040d66a\n.text:000000000040d66c\n.text:000000000040d66e\n.text:000000000040d670\n.text:000000000040d672\n.text:000000000040d673\n.text:000000000040d675\n.text:000000000040d67a\n.text:000000000040d67e\n.text:000000000040d67f\n.text:000000000040d681\n.text:000000000040d683\n.text:000000000040d685\n.text:000000000040d687\n.text:000000000040d688\n'
p3331
tp3332
sS'strcaseeq1'
p3333
(S'\n__stdcall strcaseeq1()\n'
p3334
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p3335
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040d5bd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d5c4\nJMP 0x0040d5f7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d5f7\nTEST BPL,BPL\nJZ 0x0040d5f2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d610\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3336
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 96 36 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3337
S'.text:000000000040d580\n.text:000000000040d581\n.text:000000000040d583\n.text:000000000040d585\n.text:000000000040d587\n.text:000000000040d589\n.text:000000000040d58a\n.text:000000000040d58b\n.text:000000000040d590\n.text:000000000040d593\n.text:000000000040d596\n.text:000000000040d599\n.text:000000000040d59b\n.text:000000000040d59e\n.text:000000000040d5a3\n.text:000000000040d5a5\n.text:000000000040d5aa\n.text:000000000040d5ae\n.text:000000000040d5b0\n.text:000000000040d5b2\n.text:000000000040d5b5\n.text:000000000040d5b7\n.text:000000000040d5b9\n.text:000000000040d5bb\n.text:000000000040d5bd\n.text:000000000040d5bf\n.text:000000000040d5c2\n.text:000000000040d5c4\n.text:000000000040d5c7\n.text:000000000040d5c9\n.text:000000000040d5cd\n.text:000000000040d5d1\n.text:000000000040d5d5\n.text:000000000040d5db\n.text:000000000040d5df\n.text:000000000040d5e2\n.text:000000000040d5e6\n.text:000000000040d5e7\n.text:000000000040d5e9\n.text:000000000040d5eb\n.text:000000000040d5ed\n.text:000000000040d5ef\n.text:000000000040d5f0\n.text:000000000040d5f2\n.text:000000000040d5f7\n.text:000000000040d5fb\n.text:000000000040d5fc\n.text:000000000040d5fe\n.text:000000000040d600\n.text:000000000040d602\n.text:000000000040d604\n.text:000000000040d605\n'
p3338
tp3339
sS'strcaseeq4'
p3340
(S'\n__stdcall strcaseeq4()\n'
p3341
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p3342
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040d72c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d733\nJMP 0x0040d754\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d754\nTEST BPL,BPL\nJZ 0x0040d74f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d760\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3343
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 27 35 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p3344
S'.text:000000000040d700\n.text:000000000040d701\n.text:000000000040d703\n.text:000000000040d705\n.text:000000000040d706\n.text:000000000040d707\n.text:000000000040d70a\n.text:000000000040d70d\n.text:000000000040d70f\n.text:000000000040d712\n.text:000000000040d714\n.text:000000000040d719\n.text:000000000040d71d\n.text:000000000040d71f\n.text:000000000040d721\n.text:000000000040d724\n.text:000000000040d726\n.text:000000000040d728\n.text:000000000040d72a\n.text:000000000040d72c\n.text:000000000040d72e\n.text:000000000040d731\n.text:000000000040d733\n.text:000000000040d736\n.text:000000000040d738\n.text:000000000040d73c\n.text:000000000040d740\n.text:000000000040d743\n.text:000000000040d747\n.text:000000000040d748\n.text:000000000040d74a\n.text:000000000040d74c\n.text:000000000040d74d\n.text:000000000040d74f\n.text:000000000040d754\n.text:000000000040d758\n.text:000000000040d759\n.text:000000000040d75b\n.text:000000000040d75d\n.text:000000000040d75e\n'
p3345
tp3346
sS'strcaseeq3'
p3347
(S'\n__stdcall strcaseeq3()\n'
p3348
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p3349
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410c40\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x0040d6c0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040d6c7\nJMP 0x0040d6ea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040d6ea\nTEST BPL,BPL\nJZ 0x0040d6e5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040d700\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3350
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 93 35 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3351
S'.text:000000000040d690\n.text:000000000040d691\n.text:000000000040d693\n.text:000000000040d695\n.text:000000000040d697\n.text:000000000040d698\n.text:000000000040d69b\n.text:000000000040d69e\n.text:000000000040d6a1\n.text:000000000040d6a3\n.text:000000000040d6a6\n.text:000000000040d6a8\n.text:000000000040d6ad\n.text:000000000040d6b1\n.text:000000000040d6b3\n.text:000000000040d6b5\n.text:000000000040d6b8\n.text:000000000040d6ba\n.text:000000000040d6bc\n.text:000000000040d6be\n.text:000000000040d6c0\n.text:000000000040d6c2\n.text:000000000040d6c5\n.text:000000000040d6c7\n.text:000000000040d6ca\n.text:000000000040d6cc\n.text:000000000040d6d0\n.text:000000000040d6d4\n.text:000000000040d6d8\n.text:000000000040d6db\n.text:000000000040d6dc\n.text:000000000040d6de\n.text:000000000040d6e0\n.text:000000000040d6e2\n.text:000000000040d6e3\n.text:000000000040d6e5\n.text:000000000040d6ea\n.text:000000000040d6eb\n.text:000000000040d6ed\n.text:000000000040d6ef\n.text:000000000040d6f1\n.text:000000000040d6f2\n'
p3352
tp3353
sS'last_component'
p3354
(S'\n__stdcall last_component(char * name)\n'
p3355
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p3356
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004090f0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00409116\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00409110\nTEST CL,CL\nJZ 0x00409137\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x0040912d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00409110\nMOV RAX,RDI\nRET\n'
p3357
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p3358
S'.text:00000000004090e0\n.text:00000000004090e3\n.text:00000000004090f0\n.text:00000000004090f4\n.text:00000000004090f8\n.text:00000000004090fa\n.text:00000000004090fc\n.text:00000000004090ff\n.text:0000000000409110\n.text:0000000000409113\n.text:0000000000409116\n.text:0000000000409119\n.text:000000000040911b\n.text:000000000040911e\n.text:0000000000409120\n.text:0000000000409122\n.text:0000000000409124\n.text:0000000000409126\n.text:0000000000409129\n.text:000000000040912b\n.text:000000000040912d\n.text:000000000040912f\n.text:0000000000409133\n.text:0000000000409135\n.text:0000000000409137\n.text:000000000040913a\n'
p3359
tp3360
sS'register_tm_clones'
p3361
(S'\n__stdcall register_tm_clones()\n'
p3362
V\u000a/* WARNING: Removing unreachable block (ram,0x004027d3) */\u000a/* WARNING: Removing unreachable block (ram,0x004027dd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p3363
S'MOV ESI,0x61d5a8\nPUSH RBP\nSUB RSI,0x61d5a8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004027e8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004027e8\nPOP RBP\nMOV EDI,0x61d5a8\nJMP RAX\nPOP RBP\nRET\n'
p3364
S'be a8 d5 61 00\n55\n48 81 ee a8 d5 61 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf a8 d5 61 00\nff e0\n5d\nc3\n'
p3365
S'.text:00000000004027b0\n.text:00000000004027b5\n.text:00000000004027b6\n.text:00000000004027bd\n.text:00000000004027c1\n.text:00000000004027c4\n.text:00000000004027c7\n.text:00000000004027cb\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d3\n.text:00000000004027d8\n.text:00000000004027db\n.text:00000000004027dd\n.text:00000000004027de\n.text:00000000004027e3\n.text:00000000004027e8\n.text:00000000004027e9\n'
p3366
tp3367
sS'c_islower'
p3368
(S'\n__stdcall c_islower()\n'
p3369
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p3370
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p3371
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p3372
S'.text:0000000000410be0\n.text:0000000000410be3\n.text:0000000000410be6\n.text:0000000000410be9\n'
p3373
tp3374
sS'xstrcoll_name'
p3375
(S'\n__stdcall xstrcoll_name(V a, V b)\n'
p3376
V\u000aint xstrcoll_name(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_name((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p3377
S'MOV EDX,0x407180\nJMP 0x00407170\n'
p3378
S'ba 80 71 40 00\ne9 f6 0b 00 00\n'
p3379
S'.text:0000000000406570\n.text:0000000000406575\n'
p3380
tp3381
sS'getcon'
p3382
(S'\n__stdcall getcon(security_context_t * con)\n'
p3383
V\u000aint getcon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3384
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3385
S'50\ne8 ca 48 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3386
S'.text:000000000040d840\n.text:000000000040d841\n.text:000000000040d846\n.text:000000000040d84c\n.text:000000000040d851\n.text:000000000040d852\n'
p3387
tp3388
sS'call_chunkfun'
p3389
(S'\n__stdcall call_chunkfun(obstack * h, size_t size)\n'
p3390
V\u000avoid * call_chunkfun(obstack *h,size_t size)\u000a\u000a{\u000a  void *pvVar1;\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x0041047c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    pvVar1 = (void *)(*(code *)h->chunkfun)(size);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00410487. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  pvVar1 = (void *)(*(code *)h->chunkfun)(h->extra_arg,size,in_RDX,(code *)h->chunkfun);\u000a  return pvVar1;\u000a}\u000a\u000a
p3391
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x0041047f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x38]\nMOV RCX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p3392
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 38\n48 8b 48 38\n48 8b 78 48\nff e1\n'
p3393
S'.text:0000000000410470\n.text:0000000000410473\n.text:0000000000410477\n.text:0000000000410479\n.text:000000000041047c\n.text:000000000041047f\n.text:0000000000410483\n.text:0000000000410487\n'
p3394
tp3395
sS'fwrite'
p3396
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p3397
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0061d320)();\u000a  return sVar1;\u000a}\u000a\u000a
p3398
S'JMP qword ptr [0x0061d320]\n'
p3399
S'ff 25 7a ac 21 00\n'
p3400
S'.plt:00000000004026a0\n'
p3401
tp3402
sS'rev_xstrcoll_name'
p3403
(S'\n__stdcall rev_xstrcoll_name(V a, V b)\n'
p3404
V\u000aint rev_xstrcoll_name(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_name((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p3405
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x00407170\n'
p3406
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 7d 0b 00 00\n'
p3407
S'.text:00000000004065e0\n.text:00000000004065e3\n.text:00000000004065e8\n.text:00000000004065eb\n.text:00000000004065ee\n'
p3408
tp3409
sS'setexeccon'
p3410
(S'\n__stdcall setexeccon(security_context_t con)\n'
p3411
V\u000aint setexeccon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p3412
S'PUSH RAX\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p3413
S'50\ne8 3a 47 ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p3414
S'.text:000000000040d9d0\n.text:000000000040d9d1\n.text:000000000040d9d6\n.text:000000000040d9dc\n.text:000000000040d9e1\n.text:000000000040d9e2\n'
p3415
tp3416
sS'rpl_mktime'
p3417
(S'\n__stdcall rpl_mktime(tm * tp)\n'
p3418
V\u000atime_t rpl_mktime(tm *tp)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = mktime_internal(tp,localtime_r,&localtime_offset);\u000a  return tVar1;\u000a}\u000a\u000a
p3419
S'MOV ESI,0x402130\nMOV EDX,0x61e2f8\nJMP 0x00411170\n'
p3420
S'be 30 21 40 00\nba f8 e2 61 00\ne9 f1 f8 ff ff\n'
p3421
S'.text:0000000000411870\n.text:0000000000411875\n.text:000000000041187a\n'
p3422
tp3423
sS'wc_truncate'
p3424
(S'\n__stdcall wc_truncate(wchar_t * wc, size_t width)\n'
p3425
V\u000asize_t wc_truncate(wchar_t *wc,size_t width)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  wchar_t __c;\u000a  \u000a  __c = *wc;\u000a  if (__c == L'\u005c0') {\u000a    sVar3 = 0;\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    do {\u000a      iVar1 = wcwidth(__c);\u000a      if (iVar1 == -1) {\u000a        *wc = 0xfffd;\u000a        iVar1 = 1;\u000a      }\u000a      uVar2 = (long)iVar1 + sVar3;\u000a      if (width < uVar2) break;\u000a      __c = wc[1];\u000a      wc = wc + 1;\u000a      sVar3 = uVar2;\u000a    } while (__c != L'\u005c0');\u000a  }\u000a  *wc = 0;\u000a  return sVar3;\u000a}\u000a\u000a
p3426
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJZ 0x0040b85f\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004024c0\nCMP EAX,-0x1\nJNZ 0x0040b845\nMOV dword ptr [RBX],0xfffd\nMOV EAX,0x1\nCDQE\nADD RAX,R15\nCMP RAX,R14\nJA 0x0040b863\nMOV EDI,dword ptr [RBX + 0x4]\nADD RBX,0x4\nTEST EDI,EDI\nMOV R15,RAX\nJNZ 0x0040b830\nJMP 0x0040b866\nXOR EAX,EAX\nJMP 0x0040b866\nMOV RAX,R15\nMOV dword ptr [RBX],0x0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3427
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\n8b 3b\n85 ff\n74 3e\n45 31 ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 8b 6c ff ff\n83 f8 ff\n75 0b\nc7 03 fd ff 00 00\nb8 01 00 00 00\n48 98\n4c 01 f8\n4c 39 f0\n77 14\n8b 7b 04\n48 83 c3 04\n85 ff\n49 89 c7\n75 d3\neb 07\n31 c0\neb 03\n4c 89 f8\nc7 03 00 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p3428
S'.text:000000000040b810\n.text:000000000040b812\n.text:000000000040b814\n.text:000000000040b815\n.text:000000000040b818\n.text:000000000040b81b\n.text:000000000040b81d\n.text:000000000040b81f\n.text:000000000040b821\n.text:000000000040b824\n.text:000000000040b830\n.text:000000000040b835\n.text:000000000040b838\n.text:000000000040b83a\n.text:000000000040b840\n.text:000000000040b845\n.text:000000000040b847\n.text:000000000040b84a\n.text:000000000040b84d\n.text:000000000040b84f\n.text:000000000040b852\n.text:000000000040b856\n.text:000000000040b858\n.text:000000000040b85b\n.text:000000000040b85d\n.text:000000000040b85f\n.text:000000000040b861\n.text:000000000040b863\n.text:000000000040b866\n.text:000000000040b86c\n.text:000000000040b86d\n.text:000000000040b86f\n.text:000000000040b871\n'
p3429
tp3430
sS'rotl_sz'
p3431
(S'\n__stdcall rotl_sz(size_t x)\n'
p3432
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p3433
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p3434
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p3435
S'.text:0000000000410aa0\n.text:0000000000410aa2\n.text:0000000000410aa5\n.text:0000000000410aa8\n'
p3436
tp3437
sS'__do_global_dtors_aux'
p3438
(S'\n__stdcall __do_global_dtors_aux()\n'
p3439
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3440
S'CMP byte ptr [0x0061d608],0x0\nJNZ 0x0040280a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00402770\nPOP RBP\nMOV byte ptr [0x0061d608],0x1\nRET\n'
p3441
S'80 3d 11 ae 21 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 fe ad 21 00 01\nf3 c3\n'
p3442
S'.text:00000000004027f0\n.text:00000000004027f7\n.text:00000000004027f9\n.text:00000000004027fa\n.text:00000000004027fd\n.text:0000000000402802\n.text:0000000000402803\n.text:000000000040280a\n'
p3443
tp3444
sS'c_isprint'
p3445
(S'\n__stdcall c_isprint()\n'
p3446
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p3447
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p3448
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p3449
S'.text:0000000000410bf0\n.text:0000000000410bf3\n.text:0000000000410bf6\n.text:0000000000410bf9\n'
p3450
tp3451
sS'rev_xstrcoll_ctime'
p3452
(S'\n__stdcall rev_xstrcoll_ctime(V a, V b)\n'
p3453
V\u000aint rev_xstrcoll_ctime(V a,V b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = cmp_ctime((fileinfo *)b,(fileinfo *)a,xstrcoll);\u000a  return iVar1;\u000a}\u000a\u000a
p3454
S'MOV RAX,RDI\nMOV EDX,0x407180\nMOV RDI,RSI\nMOV RSI,RAX\nJMP 0x004072c0\n'
p3455
S'48 89 f8\nba 80 71 40 00\n48 89 f7\n48 89 c6\ne9 8d 04 00 00\n'
p3456
S'.text:0000000000406e20\n.text:0000000000406e23\n.text:0000000000406e28\n.text:0000000000406e2b\n.text:0000000000406e2e\n'
p3457
tp3458
sS'_fini'
p3459
(S'\n__stdcall _fini()\n'
p3460
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p3461
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p3462
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p3463
S'.fini:00000000004119a0\n.fini:00000000004119a4\n.fini:00000000004119a8\n'
p3464
tp3465
sS'print_many_per_line'
p3466
(S'\n__stdcall print_many_per_line()\n'
p3467
V\u000avoid print_many_per_line(void)\u000a\u000a{\u000a  column_info *pcVar1;\u000a  size_t from;\u000a  size_t to;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  ulong uVar6;\u000a  \u000a  from = calculate_columns();\u000a  uVar6 = (ulong)(cwd_n_used % from != 0) + cwd_n_used / from;\u000a  if (uVar6 != 0) {\u000a    pcVar1 = column_info + from;\u000a    uVar3 = 0;\u000a    do {\u000a      from = length_of_file_name_and_frills((fileinfo *)sorted_file[uVar3]);\u000a      lVar5 = *(long *)pcVar1->line_len;\u000a      print_file_name_and_frills();\u000a      uVar2 = uVar3 + uVar6;\u000a      if (uVar2 < cwd_n_used) {\u000a        lVar4 = 1;\u000a        to = 0;\u000a        do {\u000a          from = from + to;\u000a          to = to + lVar5;\u000a          indent(from,to);\u000a          from = length_of_file_name_and_frills((fileinfo *)sorted_file[uVar2]);\u000a          lVar5 = ((long *)pcVar1->line_len)[lVar4];\u000a          print_file_name_and_frills();\u000a          uVar2 = uVar2 + uVar6;\u000a          lVar4 = lVar4 + 1;\u000a        } while (uVar2 < cwd_n_used);\u000a      }\u000a      putchar_unlocked(10);\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < uVar6);\u000a  }\u000a  return;\u000a}\u000a\u000a
p3468
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EDI,0x1\nCALL 0x00408570\nMOV RCX,RAX\nMOV RAX,qword ptr [0x0061d808]\nXOR EDX,EDX\nDIV RCX\nXOR R15D,R15D\nTEST RDX,RDX\nSETNZ R15B\nADD R15,RAX\nJZ 0x004076b0\nLEA RAX,[RCX + RCX*0x2]\nMOV RCX,qword ptr [0x0061e168]\nLEA RBX,[RCX + RAX*0x8 + -0x8]\nXOR EBP,EBP\nMOV qword ptr [RSP + 0x10],R15\nMOV qword ptr [RSP],RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0061e048]\nMOV R12,qword ptr [RAX + RBP*0x8]\nMOV RDI,R12\nCALL 0x00408440\nMOV R14,RAX\nMOV RAX,qword ptr [RBX]\nMOV R13,qword ptr [RAX]\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00407380\nMOV qword ptr [RSP + 0x8],RBP\nLEA RBP,[RBP + R15*0x1]\nCMP RBP,qword ptr [0x0061d808]\nJNC 0x00407691\nMOV R12D,0x1\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nADD R14,RBX\nADD RBX,R13\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004086d0\nMOV RAX,qword ptr [0x0061e048]\nMOV R15,qword ptr [RAX + RBP*0x8]\nMOV RDI,R15\nCALL 0x00408440\nMOV R14,RAX\nMOV RAX,qword ptr [RSP]\nMOV RAX,qword ptr [RAX]\nMOV R13,qword ptr [RAX + R12*0x8]\nMOV RDI,R15\nMOV R15,qword ptr [RSP + 0x10]\nMOV RSI,RBX\nCALL 0x00407380\nADD RBP,R15\nINC R12\nCMP RBP,qword ptr [0x0061d808]\nJC 0x00407640\nMOV EDI,0xa\nCALL 0x00402460\nMOV RBP,qword ptr [RSP + 0x8]\nINC RBP\nCMP RBP,R15\nMOV RBX,qword ptr [RSP]\nJC 0x004075f0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3469
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\nbf 01 00 00 00\ne8 c8 0f 00 00\n48 89 c1\n48 8b 05 56 62 21 00\n31 d2\n48 f7 f1\n45 31 ff\n48 85 d2\n41 0f 95 c7\n49 01 c7\n0f 84 e6 00 00 00\n48 8d 04 49\n48 8b 0d 93 6b 21 00\n48 8d 5c c1 f8\n31 ed\n4c 89 7c 24 10\n48 89 1c 24\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 51 6a 21 00\n4c 8b 24 e8\n4c 89 e7\ne8 3d 0e 00 00\n49 89 c6\n48 8b 03\n4c 8b 28\n31 f6\n4c 89 e7\ne8 6a fd ff ff\n48 89 6c 24 08\n4a 8d 6c 3d 00\n48 3b 2d e1 61 21 00\n73 68\n41 bc 01 00 00 00\n31 db\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 01 de\n4c 01 eb\n4c 89 f7\n48 89 de\ne8 7f 10 00 00\n48 8b 05 f0 69 21 00\n4c 8b 3c e8\n4c 89 ff\ne8 dc 0d 00 00\n49 89 c6\n48 8b 04 24\n48 8b 00\n4e 8b 2c e0\n4c 89 ff\n4c 8b 7c 24 10\n48 89 de\ne8 fe fc ff ff\n4c 01 fd\n49 ff c4\n48 3b 2d 79 61 21 00\n72 af\nbf 0a 00 00 00\ne8 c5 ad ff ff\n48 8b 6c 24 08\n48 ff c5\n4c 39 fd\n48 8b 1c 24\n0f 82 40 ff ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p3470
S'.text:0000000000407590\n.text:0000000000407591\n.text:0000000000407593\n.text:0000000000407595\n.text:0000000000407597\n.text:0000000000407599\n.text:000000000040759a\n.text:000000000040759e\n.text:00000000004075a3\n.text:00000000004075a8\n.text:00000000004075ab\n.text:00000000004075b2\n.text:00000000004075b4\n.text:00000000004075b7\n.text:00000000004075ba\n.text:00000000004075bd\n.text:00000000004075c1\n.text:00000000004075c4\n.text:00000000004075ca\n.text:00000000004075ce\n.text:00000000004075d5\n.text:00000000004075da\n.text:00000000004075dc\n.text:00000000004075e1\n.text:00000000004075e5\n.text:00000000004075f0\n.text:00000000004075f7\n.text:00000000004075fb\n.text:00000000004075fe\n.text:0000000000407603\n.text:0000000000407606\n.text:0000000000407609\n.text:000000000040760c\n.text:000000000040760e\n.text:0000000000407611\n.text:0000000000407616\n.text:000000000040761b\n.text:0000000000407620\n.text:0000000000407627\n.text:0000000000407629\n.text:000000000040762f\n.text:0000000000407631\n.text:0000000000407640\n.text:0000000000407643\n.text:0000000000407646\n.text:0000000000407649\n.text:000000000040764c\n.text:0000000000407651\n.text:0000000000407658\n.text:000000000040765c\n.text:000000000040765f\n.text:0000000000407664\n.text:0000000000407667\n.text:000000000040766b\n.text:000000000040766e\n.text:0000000000407672\n.text:0000000000407675\n.text:000000000040767a\n.text:000000000040767d\n.text:0000000000407682\n.text:0000000000407685\n.text:0000000000407688\n.text:000000000040768f\n.text:0000000000407691\n.text:0000000000407696\n.text:000000000040769b\n.text:00000000004076a0\n.text:00000000004076a3\n.text:00000000004076a6\n.text:00000000004076aa\n.text:00000000004076b0\n.text:00000000004076b4\n.text:00000000004076b5\n.text:00000000004076b7\n.text:00000000004076b9\n.text:00000000004076bb\n.text:00000000004076bd\n.text:00000000004076be\n'
p3471
tp3472
sS'xstrcoll_df_size'
p3473
(S'\n__stdcall xstrcoll_df_size(V a, V b)\n'
p3474
V\u000aint xstrcoll_df_size(V a,V b)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  \u000a  _Var1 = is_directory((fileinfo *)a);\u000a  _Var2 = is_directory((fileinfo *)b);\u000a  if (((_Var2 != false) || (iVar3 = -1, _Var1 != true)) &&\u000a     (iVar3 = 1, (byte)(_Var1 | _Var2 ^ 1U) == 1)) {\u000a    iVar3 = cmp_size((fileinfo *)a,(fileinfo *)b,xstrcoll);\u000a    return iVar3;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p3475
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCALL 0x004064c0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x004064c0\nTEST AL,AL\nJNZ 0x0040696a\nMOV ECX,EBX\nXOR CL,0x1\nMOV ECX,0xffffffff\nJZ 0x0040698d\nXOR AL,0x1\nOR BL,AL\nMOV ECX,0x1\nCMP BL,0x1\nJNZ 0x0040698d\nMOV EDX,0x407180\nMOV RDI,R15\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00407220\nMOV EAX,ECX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3476
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\ne8 70 fb ff ff\n89 c3\n4c 89 f7\ne8 66 fb ff ff\n84 c0\n75 0c\n89 d9\n80 f1 01\nb9 ff ff ff ff\n74 23\n34 01\n08 c3\nb9 01 00 00 00\n80 fb 01\n75 15\nba 80 71 40 00\n4c 89 ff\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 93 08 00 00\n89 c8\n5b\n41 5e\n41 5f\nc3\n'
p3477
S'.text:0000000000406940\n.text:0000000000406942\n.text:0000000000406944\n.text:0000000000406945\n.text:0000000000406948\n.text:000000000040694b\n.text:0000000000406950\n.text:0000000000406952\n.text:0000000000406955\n.text:000000000040695a\n.text:000000000040695c\n.text:000000000040695e\n.text:0000000000406960\n.text:0000000000406963\n.text:0000000000406968\n.text:000000000040696a\n.text:000000000040696c\n.text:000000000040696e\n.text:0000000000406973\n.text:0000000000406976\n.text:0000000000406978\n.text:000000000040697d\n.text:0000000000406980\n.text:0000000000406983\n.text:0000000000406984\n.text:0000000000406986\n.text:0000000000406988\n.text:000000000040698d\n.text:000000000040698f\n.text:0000000000406990\n.text:0000000000406992\n.text:0000000000406994\n'
p3478
tp3479
sS'getfilecon_cache'
p3480
(S'\n__stdcall getfilecon_cache(char * file, fileinfo * f)\n'
p3481
V\u000aint getfilecon_cache(char *file,fileinfo *f)\u000a\u000a{\u000a  dev_t unsupported_device;\u000a  int iVar1;\u000a  int *piVar2;\u000a  char in_DL;\u000a  \u000a  if ((f->stat).st_dev == unsupported_device) {\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0x5f;\u000a    iVar1 = -1;\u000a  }\u000a  else {\u000a    if (in_DL == 0) {\u000a      iVar1 = lgetfilecon(file,&f->scontext);\u000a    }\u000a    else {\u000a      iVar1 = getfilecon(file,&f->scontext);\u000a    }\u000a    if (iVar1 < 0) {\u000a      __errno_location();\u000a      errno_unsupported();\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p3482
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [0x0061e088]\nJNZ 0x00406235\nCALL 0x00402110\nMOV dword ptr [RAX],0x5f\nMOV EBP,0xffffffff\nJMP 0x0040626d\nLEA RSI,[0xa8 + RBX]\nTEST DL,DL\nJZ 0x00406247\nCALL 0x0040d8d0\nJMP 0x0040624c\nCALL 0x0040d8f0\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x0040626d\nCALL 0x00402110\nMOV EDI,dword ptr [RAX]\nCALL 0x00406450\nTEST AL,AL\nJZ 0x0040626d\nMOV RAX,qword ptr [RBX + 0x10]\nMOV qword ptr [0x0061e088],RAX\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p3483
S'55\n53\n50\n48 89 f3\n48 8b 43 10\n48 3b 05 67 7e 21 00\n75 12\ne8 e8 be ff ff\nc7 00 5f 00 00 00\nbd ff ff ff ff\neb 38\n48 8d b3 a8 00 00 00\n84 d2\n74 07\ne8 8b 76 00 00\neb 05\ne8 a4 76 00 00\n89 c5\n85 ed\n79 1b\ne8 b9 be ff ff\n8b 38\ne8 f2 01 00 00\n84 c0\n74 0b\n48 8b 43 10\n48 89 05 1b 7e 21 00\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p3484
S'.text:0000000000406210\n.text:0000000000406211\n.text:0000000000406212\n.text:0000000000406213\n.text:0000000000406216\n.text:000000000040621a\n.text:0000000000406221\n.text:0000000000406223\n.text:0000000000406228\n.text:000000000040622e\n.text:0000000000406233\n.text:0000000000406235\n.text:000000000040623c\n.text:000000000040623e\n.text:0000000000406240\n.text:0000000000406245\n.text:0000000000406247\n.text:000000000040624c\n.text:000000000040624e\n.text:0000000000406250\n.text:0000000000406252\n.text:0000000000406257\n.text:0000000000406259\n.text:000000000040625e\n.text:0000000000406260\n.text:0000000000406262\n.text:0000000000406266\n.text:000000000040626d\n.text:000000000040626f\n.text:0000000000406273\n.text:0000000000406274\n.text:0000000000406275\n'
p3485
tp3486
sS'iso_week_days'
p3487
(S'\n__stdcall iso_week_days()\n'
p3488
V\u000aint iso_week_days(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_ESI;\u000a  int in_EDI;\u000a  \u000a  iVar1 = (in_EDI + 0x17e) - in_ESI;\u000a  return (int)((in_EDI + 3) -\u000a              (iVar1 + (iVar1 / 7 + (iVar1 >> 0x1f) +\u000a                       (uint)((ulong)((long)iVar1 * 0x92492493) >> 0x3f)) * -7));\u000a}\u000a\u000a
p3489
S'LEA EAX,[0x17e + RDI]\nSUB EAX,ESI\nCDQE\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD ECX,EAX\nMOV EDX,ECX\nSHR EDX,0x1f\nSAR ECX,0x2\nADD ECX,EDX\nLEA EDX,[RCX*0x8]\nSUB EDX,ECX\nSUB EAX,EDX\nNEG EAX\nLEA EAX,[RDI + RAX*0x1 + 0x3]\nRET\n'
p3490
S'8d 87 7e 01 00 00\n29 f0\n48 98\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c1\n89 ca\nc1 ea 1f\nc1 f9 02\n01 d1\n8d 14 cd 00 00 00 00\n29 ca\n29 d0\nf7 d8\n8d 44 07 03\nc3\n'
p3491
S'.text:000000000040f340\n.text:000000000040f346\n.text:000000000040f348\n.text:000000000040f34a\n.text:000000000040f351\n.text:000000000040f355\n.text:000000000040f357\n.text:000000000040f359\n.text:000000000040f35c\n.text:000000000040f35f\n.text:000000000040f361\n.text:000000000040f368\n.text:000000000040f36a\n.text:000000000040f36c\n.text:000000000040f36e\n.text:000000000040f372\n'
p3492
tp3493
s.