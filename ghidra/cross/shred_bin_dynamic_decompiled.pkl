(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060d1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060d1c0]\n'
p4
S'ff 25 fa b5 20 00\n'
p5
S'.plt:0000000000401bc0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040a0bb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4072a7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x407328;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4073bc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00407138\nMOV EDX,0x40a0a8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401d30\nJMP 0x0040714d\nMOV EDX,0x40a0b4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40a0bb\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a390\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40a0bf\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401af0\nCMP R12,0x9\nJA 0x004071d6\nJMP qword ptr [0x40a058 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40a18a\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40a2c9\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a19a\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40a1b1\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40a1cd\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x18\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a1ed\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x18\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a211\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x28\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a239\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x28\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a265\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nJMP 0x00407447\nXOR EDI,EDI\nMOV ESI,0x40a295\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401890\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba a8 a0 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 fa ab ff ff\neb 15\nba b4 a0 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 e3 ab ff ff\n31 ff\nbe bb a0 40 00\nba 05 00 00 00\ne8 52 a8 ff ff\n48 89 c1\nbe 01 00 00 00\nba 90 a3 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 b5 ab ff ff\n31 ff\nbe bf a0 40 00\nba 05 00 00 00\ne8 24 a8 ff ff\n48 89 c7\n4c 89 f6\ne8 59 a9 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 58 a0 40 00\n31 ff\nbe 8a a1 40 00\nba 05 00 00 00\ne8 fa a7 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a ab ff ff\n31 ff\nbe c9 a2 40 00\nba 05 00 00 00\ne8 c9 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 11 ab ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 9a a1 40 00\nba 05 00 00 00\ne8 77 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d3 aa ff ff\n31 ff\nbe b1 a1 40 00\nba 05 00 00 00\ne8 42 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a aa ff ff\n31 ff\nbe cd a1 40 00\nba 05 00 00 00\ne8 09 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 64 aa ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe ed a1 40 00\nba 05 00 00 00\ne8 ca a6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 22 aa ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 11 a2 40 00\nba 05 00 00 00\ne8 88 a6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d8 a9 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 39 a2 40 00\nba 05 00 00 00\ne8 3e a6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8e a9 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 65 a2 40 00\nba 05 00 00 00\ne8 f4 a5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3c a9 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 95 a2 40 00\nba 05 00 00 00\ne8 a5 a5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ed a8 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 3c a4 ff ff\n'
p12
S'.text:0000000000407100\n.text:0000000000407102\n.text:0000000000407104\n.text:0000000000407106\n.text:0000000000407107\n.text:0000000000407108\n.text:000000000040710b\n.text:000000000040710e\n.text:0000000000407111\n.text:0000000000407114\n.text:0000000000407117\n.text:000000000040711a\n.text:000000000040711f\n.text:0000000000407122\n.text:0000000000407124\n.text:0000000000407129\n.text:000000000040712b\n.text:000000000040712e\n.text:0000000000407131\n.text:0000000000407136\n.text:0000000000407138\n.text:000000000040713d\n.text:000000000040713f\n.text:0000000000407142\n.text:0000000000407145\n.text:0000000000407148\n.text:000000000040714d\n.text:000000000040714f\n.text:0000000000407154\n.text:0000000000407159\n.text:000000000040715e\n.text:0000000000407161\n.text:0000000000407166\n.text:000000000040716b\n.text:0000000000407171\n.text:0000000000407173\n.text:0000000000407176\n.text:000000000040717b\n.text:000000000040717d\n.text:0000000000407182\n.text:0000000000407187\n.text:000000000040718c\n.text:000000000040718f\n.text:0000000000407192\n.text:0000000000407197\n.text:000000000040719b\n.text:000000000040719d\n.text:00000000004071a5\n.text:00000000004071a7\n.text:00000000004071ac\n.text:00000000004071b1\n.text:00000000004071b6\n.text:00000000004071b9\n.text:00000000004071bc\n.text:00000000004071c1\n.text:00000000004071c3\n.text:00000000004071c6\n.text:00000000004071ca\n.text:00000000004071cb\n.text:00000000004071cd\n.text:00000000004071cf\n.text:00000000004071d1\n.text:00000000004071d6\n.text:00000000004071d8\n.text:00000000004071dd\n.text:00000000004071e2\n.text:00000000004071e7\n.text:00000000004071ea\n.text:00000000004071ed\n.text:00000000004071f1\n.text:00000000004071f5\n.text:00000000004071fa\n.text:00000000004071ff\n.text:0000000000407202\n.text:0000000000407206\n.text:000000000040720a\n.text:000000000040720e\n.text:0000000000407212\n.text:0000000000407216\n.text:000000000040721a\n.text:000000000040721f\n.text:0000000000407223\n.text:0000000000407228\n.text:000000000040722a\n.text:000000000040722f\n.text:0000000000407234\n.text:0000000000407239\n.text:000000000040723c\n.text:000000000040723f\n.text:0000000000407243\n.text:0000000000407248\n.text:000000000040724a\n.text:000000000040724d\n.text:0000000000407251\n.text:0000000000407252\n.text:0000000000407254\n.text:0000000000407256\n.text:0000000000407258\n.text:000000000040725d\n.text:000000000040725f\n.text:0000000000407264\n.text:0000000000407269\n.text:000000000040726e\n.text:0000000000407271\n.text:0000000000407274\n.text:0000000000407278\n.text:000000000040727c\n.text:0000000000407281\n.text:0000000000407283\n.text:0000000000407286\n.text:000000000040728a\n.text:000000000040728b\n.text:000000000040728d\n.text:000000000040728f\n.text:0000000000407291\n.text:0000000000407296\n.text:0000000000407298\n.text:000000000040729d\n.text:00000000004072a2\n.text:00000000004072a7\n.text:00000000004072aa\n.text:00000000004072ad\n.text:00000000004072b1\n.text:00000000004072b5\n.text:00000000004072b9\n.text:00000000004072be\n.text:00000000004072c0\n.text:00000000004072c3\n.text:00000000004072c7\n.text:00000000004072cc\n.text:00000000004072d0\n.text:00000000004072d5\n.text:00000000004072d7\n.text:00000000004072dc\n.text:00000000004072e1\n.text:00000000004072e6\n.text:00000000004072e9\n.text:00000000004072ec\n.text:00000000004072f0\n.text:00000000004072f4\n.text:00000000004072f9\n.text:00000000004072fe\n.text:0000000000407301\n.text:0000000000407305\n.text:0000000000407309\n.text:000000000040730e\n.text:0000000000407312\n.text:0000000000407317\n.text:0000000000407319\n.text:000000000040731e\n.text:0000000000407323\n.text:0000000000407328\n.text:000000000040732b\n.text:000000000040732e\n.text:0000000000407332\n.text:0000000000407336\n.text:000000000040733a\n.text:000000000040733f\n.text:0000000000407344\n.text:0000000000407347\n.text:000000000040734b\n.text:000000000040734f\n.text:0000000000407353\n.text:0000000000407358\n.text:000000000040735c\n.text:0000000000407361\n.text:0000000000407363\n.text:0000000000407368\n.text:000000000040736d\n.text:0000000000407372\n.text:0000000000407375\n.text:0000000000407378\n.text:000000000040737c\n.text:0000000000407380\n.text:0000000000407385\n.text:000000000040738a\n.text:000000000040738d\n.text:0000000000407391\n.text:0000000000407395\n.text:0000000000407399\n.text:000000000040739d\n.text:00000000004073a2\n.text:00000000004073a6\n.text:00000000004073ab\n.text:00000000004073ad\n.text:00000000004073b2\n.text:00000000004073b7\n.text:00000000004073bc\n.text:00000000004073bf\n.text:00000000004073c2\n.text:00000000004073c6\n.text:00000000004073ca\n.text:00000000004073ce\n.text:00000000004073d3\n.text:00000000004073d8\n.text:00000000004073db\n.text:00000000004073df\n.text:00000000004073e3\n.text:00000000004073e7\n.text:00000000004073eb\n.text:00000000004073ef\n.text:00000000004073f4\n.text:00000000004073f8\n.text:00000000004073fa\n.text:00000000004073fc\n.text:0000000000407401\n.text:0000000000407406\n.text:000000000040740b\n.text:000000000040740e\n.text:0000000000407411\n.text:0000000000407415\n.text:0000000000407419\n.text:000000000040741e\n.text:0000000000407423\n.text:0000000000407426\n.text:000000000040742a\n.text:000000000040742e\n.text:0000000000407432\n.text:0000000000407436\n.text:000000000040743a\n.text:000000000040743e\n.text:0000000000407443\n.text:0000000000407447\n.text:0000000000407448\n.text:000000000040744a\n.text:000000000040744c\n.text:000000000040744e\n.text:000000000040744f\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060d0f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060d0f0]\n'
p18
S'ff 25 ca b6 20 00\n'
p19
S'.plt:0000000000401a20\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00407c79;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00407c79:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401b50\nTEST EAX,EAX\nJS 0x00407c79\nMOV RDI,RBX\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00407c47\nMOV RDI,RBX\nCALL 0x00401b50\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401a50\nCMP RAX,-0x1\nJZ 0x00407c79\nMOV RDI,RBX\nCALL 0x00407e50\nTEST EAX,EAX\nJZ 0x00407c79\nCALL 0x004018a0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401990\nTEST EBP,EBP\nJZ 0x00407c72\nCALL 0x004018a0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401990\n'
p25
S'55\n53\n50\n48 89 fb\ne8 35 9f ff ff\n85 c0\n78 5a\n48 89 df\ne8 b9 9f ff ff\n85 c0\n74 1c\n48 89 df\ne8 1d 9f ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 0f 9e ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 48 9c ff ff\n8b 28\n48 89 df\ne8 2e 9d ff ff\n85 ed\n74 0c\ne8 35 9c ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 09 9d ff ff\n'
p26
S'.text:0000000000407c10\n.text:0000000000407c11\n.text:0000000000407c12\n.text:0000000000407c13\n.text:0000000000407c16\n.text:0000000000407c1b\n.text:0000000000407c1d\n.text:0000000000407c1f\n.text:0000000000407c22\n.text:0000000000407c27\n.text:0000000000407c29\n.text:0000000000407c2b\n.text:0000000000407c2e\n.text:0000000000407c33\n.text:0000000000407c35\n.text:0000000000407c3a\n.text:0000000000407c3c\n.text:0000000000407c41\n.text:0000000000407c45\n.text:0000000000407c47\n.text:0000000000407c4a\n.text:0000000000407c4f\n.text:0000000000407c51\n.text:0000000000407c53\n.text:0000000000407c58\n.text:0000000000407c5a\n.text:0000000000407c5d\n.text:0000000000407c62\n.text:0000000000407c64\n.text:0000000000407c66\n.text:0000000000407c6b\n.text:0000000000407c6d\n.text:0000000000407c72\n.text:0000000000407c76\n.text:0000000000407c77\n.text:0000000000407c78\n.text:0000000000407c79\n.text:0000000000407c7c\n.text:0000000000407c80\n.text:0000000000407c81\n.text:0000000000407c82\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060d048)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060d048]\n'
p32
S'ff 25 72 b7 20 00\n'
p33
S'.plt:00000000004018d0\n'
p34
tp35
sS'xnrealloc'
p36
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p37
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p38
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00407654\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00407660\nPUSH RAX\nCALL 0x004077b0\n'
p39
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p40
S'.text:0000000000407640\n.text:0000000000407643\n.text:0000000000407646\n.text:0000000000407649\n.text:000000000040764b\n.text:000000000040764f\n.text:0000000000407652\n.text:0000000000407654\n.text:0000000000407655\n'
p41
tp42
sS'quote'
p43
(S'\n__stdcall quote(char * arg)\n'
p44
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00405f20\n'
p46
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p47
S'.text:0000000000405f30\n.text:0000000000405f33\n.text:0000000000405f35\n.text:0000000000405f38\n'
p48
tp49
sS'emit_bug_reporting_address'
p50
(S'\n__stdcall emit_bug_reporting_address()\n'
p51
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40a305\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a31a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x40a330\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40952e\nMOV ECX,0x409645\nXOR EAX,EAX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x40a344\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401af0\n'
p53
S'50\n31 ff\nbe 05 a3 40 00\nba 05 00 00 00\ne8 1e a4 ff ff\n48 89 c1\nbf 01 00 00 00\nba 1a a3 40 00\n31 c0\n48 89 ce\ne8 87 a6 ff ff\n31 ff\nbe 30 a3 40 00\nba 05 00 00 00\ne8 f6 a3 ff ff\n48 89 c6\nbf 01 00 00 00\nba 2e 95 40 00\nb9 45 96 40 00\n31 c0\ne8 5d a6 ff ff\n31 ff\nbe 44 a3 40 00\nba 05 00 00 00\ne8 cc a3 ff ff\n48 8b 35 3d 5d 20 00\n48 89 c7\n58\ne9 fc a4 ff ff\n'
p54
S'.text:0000000000407580\n.text:0000000000407581\n.text:0000000000407583\n.text:0000000000407588\n.text:000000000040758d\n.text:0000000000407592\n.text:0000000000407595\n.text:000000000040759a\n.text:000000000040759f\n.text:00000000004075a1\n.text:00000000004075a4\n.text:00000000004075a9\n.text:00000000004075ab\n.text:00000000004075b0\n.text:00000000004075b5\n.text:00000000004075ba\n.text:00000000004075bd\n.text:00000000004075c2\n.text:00000000004075c7\n.text:00000000004075cc\n.text:00000000004075ce\n.text:00000000004075d3\n.text:00000000004075d5\n.text:00000000004075da\n.text:00000000004075df\n.text:00000000004075e4\n.text:00000000004075eb\n.text:00000000004075ee\n.text:00000000004075ef\n'
p55
tp56
sS'clone_quoting_options'
p57
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p58
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004018a0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60d390\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00407760\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p60
S'55\n41 56\n53\n48 89 fb\ne8 a4 cd ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 90 d3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 45 2c 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p61
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af4\n.text:0000000000404af7\n.text:0000000000404afc\n.text:0000000000404aff\n.text:0000000000404b02\n.text:0000000000404b05\n.text:0000000000404b0a\n.text:0000000000404b0e\n.text:0000000000404b13\n.text:0000000000404b16\n.text:0000000000404b1b\n.text:0000000000404b1e\n.text:0000000000404b1f\n.text:0000000000404b21\n.text:0000000000404b22\n'
p62
tp63
sS'xmalloc'
p64
(S'\n__stdcall xmalloc(size_t n)\n'
p65
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401b90\nTEST RBX,RBX\nJZ 0x00407633\nTEST RAX,RAX\nJZ 0x00407635\nPOP RBX\nRET\nCALL 0x004077b0\n'
p67
S'53\n48 89 fb\ne8 67 a5 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p68
S'.text:0000000000407620\n.text:0000000000407621\n.text:0000000000407624\n.text:0000000000407629\n.text:000000000040762c\n.text:000000000040762e\n.text:0000000000407631\n.text:0000000000407633\n.text:0000000000407634\n.text:0000000000407635\n'
p69
tp70
sS'direct_mode'
p71
(S'\n__stdcall direct_mode()\n'
p72
V\u000avoid direct_mode(ulong uParm1,char cParm2)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = rpl_fcntl(uParm1,3);\u000a  if (0 < (int)uVar2) {\u000a    uVar1 = uVar2 & 0xffffbfff;\u000a    if (cParm2 != 0) {\u000a      uVar1 = uVar2 | 0x4000;\u000a    }\u000a    if (uVar1 != uVar2) {\u000a      rpl_fcntl(uParm1 & 0xffffffff,4);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV EBX,EDI\nMOV ESI,0x3\nXOR EAX,EAX\nCALL 0x00407c90\nTEST EAX,EAX\nJLE 0x004034f1\nMOV ECX,EAX\nOR ECX,0x4000\nMOV EDX,EAX\nAND EDX,0xffffbfff\nTEST BPL,BPL\nCMOVNZ EDX,ECX\nCMP EDX,EAX\nJNZ 0x004034f8\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV ESI,0x4\nXOR EAX,EAX\nMOV EDI,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00407c90\n'
p74
S'55\n53\n50\n89 f5\n89 fb\nbe 03 00 00 00\n31 c0\ne8 bd 47 00 00\n85 c0\n7e 1a\n89 c1\n81 c9 00 40 00 00\n89 c2\n81 e2 ff bf ff ff\n40 84 ed\n0f 45 d1\n39 c2\n75 07\n48 83 c4 08\n5b\n5d\nc3\nbe 04 00 00 00\n31 c0\n89 df\n48 83 c4 08\n5b\n5d\ne9 84 47 00 00\n'
p75
S'.text:00000000004034c0\n.text:00000000004034c1\n.text:00000000004034c2\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034c7\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d3\n.text:00000000004034d5\n.text:00000000004034d7\n.text:00000000004034d9\n.text:00000000004034df\n.text:00000000004034e1\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034ed\n.text:00000000004034ef\n.text:00000000004034f1\n.text:00000000004034f5\n.text:00000000004034f6\n.text:00000000004034f7\n.text:00000000004034f8\n.text:00000000004034fd\n.text:00000000004034ff\n.text:0000000000403501\n.text:0000000000403505\n.text:0000000000403506\n.text:0000000000403507\n'
p76
tp77
sS'quotearg_char_mem'
p78
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p79
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060d3c0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060d3b0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d3a0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d390]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00404b50\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405a40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 58 76 20 00\n48 89 4c 24 30\n0f 10 05 3c 76 20 00\n0f 29 44 24 20\n0f 10 05 20 76 20 00\n0f 29 44 24 10\n0f 10 05 04 76 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p82
S'.text:0000000000405d50\n.text:0000000000405d52\n.text:0000000000405d54\n.text:0000000000405d55\n.text:0000000000405d59\n.text:0000000000405d5b\n.text:0000000000405d5e\n.text:0000000000405d61\n.text:0000000000405d68\n.text:0000000000405d6d\n.text:0000000000405d74\n.text:0000000000405d79\n.text:0000000000405d80\n.text:0000000000405d85\n.text:0000000000405d8c\n.text:0000000000405d90\n.text:0000000000405d93\n.text:0000000000405d98\n.text:0000000000405d9b\n.text:0000000000405d9d\n.text:0000000000405da2\n.text:0000000000405da4\n.text:0000000000405da7\n.text:0000000000405daa\n.text:0000000000405dad\n.text:0000000000405db2\n.text:0000000000405db6\n.text:0000000000405db7\n.text:0000000000405db9\n.text:0000000000405dbb\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x00401e6a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x60ce18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401e60\nJMP 0x00401df0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e5b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401df0\n'
p88
S'bf 18 ce 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e59\n.text:0000000000401e5b\n.text:0000000000401e60\n.text:0000000000401e65\n.text:0000000000401e68\n.text:0000000000401e6a\n.text:0000000000401e6b\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e71\n'
p90
tp91
sS'gettimeofday'
p92
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p93
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0060d110)();\u000a  return iVar1;\u000a}\u000a\u000a
p94
S'JMP qword ptr [0x0060d110]\n'
p95
S'ff 25 aa b6 20 00\n'
p96
S'.plt:0000000000401a60\n'
p97
tp98
sS'quotearg_n_style_colon'
p99
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p100
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00405c70\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00404b50\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00405a40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000405df0\n.text:0000000000405df1\n.text:0000000000405df3\n.text:0000000000405df4\n.text:0000000000405df8\n.text:0000000000405dfb\n.text:0000000000405dfd\n.text:0000000000405e02\n.text:0000000000405e05\n.text:0000000000405e0a\n.text:0000000000405e0f\n.text:0000000000405e14\n.text:0000000000405e17\n.text:0000000000405e1c\n.text:0000000000405e23\n.text:0000000000405e25\n.text:0000000000405e28\n.text:0000000000405e2b\n.text:0000000000405e30\n.text:0000000000405e34\n.text:0000000000405e35\n.text:0000000000405e37\n.text:0000000000405e38\n'
p104
tp105
sS'randint_new'
p106
(S'\n__stdcall randint_new(randread_source * source)\n'
p107
V\u000arandint_source * randint_new(randread_source *source)\u000a\u000a{\u000a  randint_source *prVar1;\u000a  \u000a  prVar1 = (randint_source *)xmalloc(0x18);\u000a  prVar1->source = source;\u000a  *(undefined4 *)&prVar1->randnum = 0;\u000a  *(undefined4 *)((long)&prVar1->randnum + 4) = 0;\u000a  *(undefined4 *)&prVar1->randmax = 0;\u000a  *(undefined4 *)((long)&prVar1->randmax + 4) = 0;\u000a  return prVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x18\nCALL 0x00407620\nMOV qword ptr [RAX],RBX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RAX + 0x8],XMM0\nPOP RBX\nRET\n'
p109
S'53\n48 89 fb\nbf 18 00 00 00\ne8 d2 12 00 00\n48 89 18\n0f 57 c0\n0f 11 40 08\n5b\nc3\n'
p110
S'.text:0000000000406340\n.text:0000000000406341\n.text:0000000000406344\n.text:0000000000406349\n.text:000000000040634e\n.text:0000000000406351\n.text:0000000000406354\n.text:0000000000406358\n.text:0000000000406359\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00405f00\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:0000000000405f10\n.text:0000000000405f13\n.text:0000000000405f16\n.text:0000000000405f18\n.text:0000000000405f1b\n.text:0000000000405f1e\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060d188)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060d188]\n'
p123
S'ff 25 32 b6 20 00\n'
p124
S'.plt:0000000000401b50\n'
p125
tp126
sS'mbrtowc'
p127
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060d0e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x0060d0e8]\n'
p130
S'ff 25 d2 b6 20 00\n'
p131
S'.plt:0000000000401a10\n'
p132
tp133
sS'xstrtoumax'
p134
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p135
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00407b16;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00407b16;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00407a45_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00407a23:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00407a23;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00407af7;\u000a  default:\u000aswitchD_00407a45_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00407af7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00407af7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00407b16:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00407b33\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004018a0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401d60\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00407930\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00407b22\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401cd0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00407990\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004079c1\nCMP EAX,0x22\nJNZ 0x00407b22\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004079cc\nJMP 0x00407b16\nTEST R12,R12\nJZ 0x00407b22\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00407b22\nMOV RDI,R12\nCALL 0x00401a20\nTEST RAX,RAX\nJZ 0x00407b22\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004079cc\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00407b16\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00407b16\nMOV RDI,R12\nCALL 0x00401a20\nTEST RAX,RAX\nJZ 0x00407a5e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401a20\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00407a23\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00407a2a\nCMP EAX,0x44\nJZ 0x00407a2a\nCMP EAX,0x69\nJNZ 0x00407a23\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00407a34\nMOV EBP,0x1\nJMP 0x00407a34\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00407a5e\nXOR EAX,EAX\nJMP qword ptr [0x40a3d0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00407b22\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00407af7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00407b80\nJMP 0x00407afc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00407af7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00407b50\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40a580\nMOV ESI,0x40a5a6\nMOV EDX,0x60\nMOV ECX,0x40a5b6\nCALL 0x00401a70\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 92 9f ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 43 a4 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 6c a3 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 74 a0 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 3c a0 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 2a a0 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd d0 a3 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 80 a5 40 00\nbe a6 a5 40 00\nba 60 00 00 00\nb9 b6 a5 40 00\ne8 24 9f ff ff\n'
p138
S'.text:00000000004078e0\n.text:00000000004078e1\n.text:00000000004078e3\n.text:00000000004078e5\n.text:00000000004078e7\n.text:00000000004078e9\n.text:00000000004078ea\n.text:00000000004078ee\n.text:00000000004078f1\n.text:00000000004078f4\n.text:00000000004078f7\n.text:00000000004078fa\n.text:00000000004078fe\n.text:0000000000407904\n.text:0000000000407909\n.text:000000000040790e\n.text:0000000000407911\n.text:0000000000407918\n.text:000000000040791d\n.text:0000000000407920\n.text:0000000000407923\n.text:0000000000407930\n.text:0000000000407933\n.text:0000000000407936\n.text:000000000040793b\n.text:000000000040793d\n.text:0000000000407940\n.text:0000000000407945\n.text:0000000000407949\n.text:000000000040794e\n.text:0000000000407950\n.text:0000000000407956\n.text:0000000000407959\n.text:000000000040795c\n.text:000000000040795f\n.text:0000000000407964\n.text:0000000000407968\n.text:000000000040796c\n.text:000000000040796f\n.text:0000000000407971\n.text:0000000000407974\n.text:0000000000407976\n.text:0000000000407978\n.text:000000000040797b\n.text:0000000000407981\n.text:0000000000407986\n.text:0000000000407989\n.text:000000000040798b\n.text:0000000000407990\n.text:0000000000407993\n.text:0000000000407999\n.text:000000000040799c\n.text:000000000040799e\n.text:00000000004079a4\n.text:00000000004079a7\n.text:00000000004079ac\n.text:00000000004079af\n.text:00000000004079b5\n.text:00000000004079bd\n.text:00000000004079bf\n.text:00000000004079c1\n.text:00000000004079c3\n.text:00000000004079c6\n.text:00000000004079cc\n.text:00000000004079d0\n.text:00000000004079d4\n.text:00000000004079d6\n.text:00000000004079dc\n.text:00000000004079df\n.text:00000000004079e4\n.text:00000000004079e7\n.text:00000000004079e9\n.text:00000000004079ee\n.text:00000000004079f1\n.text:00000000004079f6\n.text:00000000004079fb\n.text:00000000004079fe\n.text:0000000000407a00\n.text:0000000000407a04\n.text:0000000000407a07\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a0e\n.text:0000000000407a11\n.text:0000000000407a13\n.text:0000000000407a15\n.text:0000000000407a19\n.text:0000000000407a1c\n.text:0000000000407a21\n.text:0000000000407a23\n.text:0000000000407a28\n.text:0000000000407a2a\n.text:0000000000407a2f\n.text:0000000000407a34\n.text:0000000000407a38\n.text:0000000000407a3b\n.text:0000000000407a3e\n.text:0000000000407a41\n.text:0000000000407a43\n.text:0000000000407a45\n.text:0000000000407a4c\n.text:0000000000407a4f\n.text:0000000000407a54\n.text:0000000000407a59\n.text:0000000000407a5e\n.text:0000000000407a62\n.text:0000000000407a67\n.text:0000000000407a6a\n.text:0000000000407a6d\n.text:0000000000407a72\n.text:0000000000407a75\n.text:0000000000407a7a\n.text:0000000000407a7f\n.text:0000000000407a81\n.text:0000000000407a84\n.text:0000000000407a89\n.text:0000000000407a8e\n.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a98\n.text:0000000000407a9d\n.text:0000000000407a9f\n.text:0000000000407aa2\n.text:0000000000407aa7\n.text:0000000000407aa9\n.text:0000000000407aac\n.text:0000000000407ab1\n.text:0000000000407ab6\n.text:0000000000407ab8\n.text:0000000000407abb\n.text:0000000000407ac0\n.text:0000000000407ac5\n.text:0000000000407ac7\n.text:0000000000407aca\n.text:0000000000407acf\n.text:0000000000407ad4\n.text:0000000000407ad6\n.text:0000000000407ad9\n.text:0000000000407ade\n.text:0000000000407ae3\n.text:0000000000407ae5\n.text:0000000000407ae8\n.text:0000000000407aed\n.text:0000000000407aef\n.text:0000000000407af2\n.text:0000000000407af7\n.text:0000000000407afc\n.text:0000000000407afe\n.text:0000000000407b02\n.text:0000000000407b06\n.text:0000000000407b0a\n.text:0000000000407b0c\n.text:0000000000407b0f\n.text:0000000000407b13\n.text:0000000000407b16\n.text:0000000000407b1a\n.text:0000000000407b1f\n.text:0000000000407b22\n.text:0000000000407b24\n.text:0000000000407b28\n.text:0000000000407b29\n.text:0000000000407b2b\n.text:0000000000407b2d\n.text:0000000000407b2f\n.text:0000000000407b31\n.text:0000000000407b32\n.text:0000000000407b33\n.text:0000000000407b38\n.text:0000000000407b3d\n.text:0000000000407b42\n.text:0000000000407b47\n'
p139
tp140
sS'setlocale'
p141
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060d1f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060d1f0]\n'
p144
S'ff 25 ca b5 20 00\n'
p145
S'.plt:0000000000401c20\n'
p146
tp147
sS'c_toupper'
p148
(S'\n__stdcall c_toupper()\n'
p149
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p151
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p152
S'.text:0000000000408050\n.text:0000000000408053\n.text:0000000000408056\n.text:0000000000408059\n.text:000000000040805c\n'
p153
tp154
sS'fcntl'
p155
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060d080)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060d080]\n'
p158
S'ff 25 3a b7 20 00\n'
p159
S'.plt:0000000000401940\n'
p160
tp161
sS'mbsinit'
p162
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060d280)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060d280]\n'
p165
S'ff 25 3a b5 20 00\n'
p166
S'.plt:0000000000401d40\n'
p167
tp168
sS'dcgettext'
p169
(S'\n__stdcall dcgettext()\n'
p170
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060d0b8)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060d0b8]\n'
p172
S'ff 25 02 b7 20 00\n'
p173
S'.plt:00000000004019b0\n'
p174
tp175
sS'wipefd'
p176
(S'\n__stdcall wipefd()\n'
p177
V\u000a_Bool wipefd(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  Options *flags;\u000a  ulong uVar5;\u000a  randint_source *s;\u000a  \u000a  uVar2 = rpl_fcntl(1,3);\u000a  if ((int)uVar2 < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar2 = *puVar3;\u000a    uVar4 = dcgettext(0,"%s: fcntl failed",5);\u000a    uVar5 = (ulong)uVar2;\u000a  }\u000a  else {\u000a    if ((uVar2 & 0x400) == 0) {\u000a      _Var1 = do_wipefd((char *)0x1,s,flags);\u000a      return _Var1;\u000a    }\u000a    uVar4 = dcgettext(0,"%s: cannot shred append-only file descriptor",5);\u000a    uVar5 = 0;\u000a  }\u000a  error(0,uVar5,uVar4);\u000a  return false;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R14,RDI\nMOV EDI,0x1\nMOV ESI,0x3\nXOR EAX,EAX\nCALL 0x00407c90\nTEST EAX,EAX\nJS 0x00402670\nTEST AH,0x4\nJNZ 0x00402693\nMOV EDI,0x1\nMOV RSI,R14\nMOV RDX,RBX\nMOV RCX,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004027d0\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40975b\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nJMP 0x004026ad\nXOR EDI,EDI\nMOV ESI,0x40976c\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401c70\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n49 89 d7\n48 89 f3\n49 89 fe\nbf 01 00 00 00\nbe 03 00 00 00\n31 c0\ne8 41 56 00 00\n85 c0\n78 1d\nf6 c4 04\n75 3b\nbf 01 00 00 00\n4c 89 f6\n48 89 da\n4c 89 f9\n5b\n41 5e\n41 5f\ne9 60 01 00 00\ne8 2b f2 ff ff\n8b 18\n31 ff\nbe 5b 97 40 00\nba 05 00 00 00\ne8 28 f3 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\neb 1a\n31 ff\nbe 6c 97 40 00\nba 05 00 00 00\ne8 0c f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 b8 f5 ff ff\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402634\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263b\n.text:000000000040263e\n.text:0000000000402643\n.text:0000000000402648\n.text:000000000040264a\n.text:000000000040264f\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402656\n.text:0000000000402658\n.text:000000000040265d\n.text:0000000000402660\n.text:0000000000402663\n.text:0000000000402666\n.text:0000000000402667\n.text:0000000000402669\n.text:000000000040266b\n.text:0000000000402670\n.text:0000000000402675\n.text:0000000000402677\n.text:0000000000402679\n.text:000000000040267e\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268b\n.text:000000000040268d\n.text:000000000040268f\n.text:0000000000402691\n.text:0000000000402693\n.text:0000000000402695\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a7\n.text:00000000004026a9\n.text:00000000004026ab\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b3\n.text:00000000004026b8\n.text:00000000004026ba\n.text:00000000004026bb\n.text:00000000004026bd\n.text:00000000004026bf\n'
p181
tp182
sS'human_readable'
p183
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p184
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = ".";\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep =\u000a              \u000a       "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a       + 0x1d7;\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_00404265:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_004044f6;\u000aLAB_004044e0:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_004044f6;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_004044f6;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_004044e0;\u000aLAB_004044f6:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_00404547;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_00404547:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_00404571;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_00404571:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x00404452;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_00404265;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_004099e0 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_004099e0 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_004099e0 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      __sprintf_chk(buf,1,0xffffffffffffffff);\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x00404452:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x00401930\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x004019d0\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x409819\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x004019d0\nCMP RAX,0x11\nMOV ECX,0x4093fa\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x0040422d\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x00404293\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x00404293\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x00404265\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x00404293\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x00404293\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x0040445d\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x00404467\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404547\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x4099e0 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x4099e0 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x4099e0 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x00404334\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x00404700\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x409a00\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401d70\nMOV RDI,R12\nCALL 0x004019d0\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0040442f\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP word ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x00404369\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x00404350\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x00404700\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x409a06\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401d70\nMOV RDI,R12\nCALL 0x004019d0\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x004043e4\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x0040442f\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x0040442f\nFLD dword ptr [0x004099e8]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00404700\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x409a00\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d70\nMOV RDI,R12\nCALL 0x004019d0\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x00401c60\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x0040460b\nJMP 0x0040462b\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404547\nXOR EBP,EBP\nNOP dword ptr [RAX]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x004044b4\nCMP R9,R12\nJBE 0x00404470\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x004044d1\nCMP EAX,0x1\nJNZ 0x004044d8\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x004044e0\nJMP 0x004044f6\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404547\nTEST EAX,EAX\nJNZ 0x004044f6\nTEST EBX,EBX\nJZ 0x004044f6\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x004044f6\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x0040453a\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x00404507\nTEST ECX,ECX\nJNZ 0x00404507\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00404547\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401b30\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x00404545\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x0040456d\nCMP AL,0x1\nJNZ 0x004045b7\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x00404571\nJMP 0x004045b7\nADD ECX,EBX\nJLE 0x004045b7\nINC R12\nCMP EBP,0x7\nJG 0x004045b7\nTEST R13D,R13D\nJZ 0x004045b7\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x004045b7\nINC EBP\nTEST R8B,0x8\nJNZ 0x004045b1\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401b30\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x004045d0\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x0040462b\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x004047d0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x004046df\nTEST EBP,EBP\nJNS 0x00404677\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x00404677\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x00404672\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x00404660\nJMP 0x00404677\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x0040469e\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x0040469e\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x004046c0\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x004046b0\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x004046b9\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x409a60 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x004046df\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x004046d7\nTEST EBP,EBP\nJZ 0x004046d7\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p186
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 d7 d7 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 69 d8 ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 19 98 40 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 35 d8 ff ff\n48 83 f8 11\nb9 fa 93 40 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 e6 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 de 01 00 00\n4c 8b 7c 24 10\ne9 b4 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 e0 99 40 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 e0 99 40 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 e0 99 40 00\nde f2\nde c9\n41 f6 c0 10\n75 49\ndb 3c 24\n8b 7c 24 24\ne8 09 04 00 00\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 00 9a 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 53 da ff ff\n4c 89 e7\ne8 ab d6 ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 fb 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n66 0f 1f 84 00 00 00 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 7d 03 00 00\ndb 3c 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 06 9a 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 ca d9 ff ff\n4c 89 e7\ne8 22 d6 ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 53\n41 80 7c 04 ff 30\n75 4b\nd9 05 fe 55 00 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 00 03 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 00 9a 40 00\n31 c0\n4c 89 e7\ne8 49 d9 ff ff\n4c 89 e7\ne8 a1 d5 ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 1d d8 ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 b3 01 00 00\ne9 ce 01 00 00\n4c 8b 7c 24 10\ne9 e0 00 00 00\n31 ed\n0f 1f 80 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 ff d5 ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 84 d5 ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 60 9a 40 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p187
S'.text:0000000000404110\n.text:0000000000404111\n.text:0000000000404113\n.text:0000000000404115\n.text:0000000000404117\n.text:0000000000404119\n.text:000000000040411a\n.text:0000000000404121\n.text:0000000000404124\n.text:0000000000404127\n.text:000000000040412a\n.text:000000000040412d\n.text:000000000040412f\n.text:0000000000404132\n.text:0000000000404136\n.text:000000000040413a\n.text:000000000040413c\n.text:000000000040413f\n.text:0000000000404143\n.text:0000000000404148\n.text:000000000040414d\n.text:0000000000404150\n.text:0000000000404154\n.text:0000000000404159\n.text:000000000040415c\n.text:000000000040415f\n.text:0000000000404162\n.text:0000000000404167\n.text:000000000040416b\n.text:000000000040416f\n.text:0000000000404174\n.text:0000000000404178\n.text:000000000040417d\n.text:0000000000404182\n.text:0000000000404186\n.text:000000000040418b\n.text:000000000040418f\n.text:0000000000404193\n.text:0000000000404196\n.text:000000000040419b\n.text:000000000040419f\n.text:00000000004041a4\n.text:00000000004041a8\n.text:00000000004041b0\n.text:00000000004041b5\n.text:00000000004041b8\n.text:00000000004041bd\n.text:00000000004041c2\n.text:00000000004041c7\n.text:00000000004041cc\n.text:00000000004041ce\n.text:00000000004041d1\n.text:00000000004041d6\n.text:00000000004041dc\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e4\n.text:00000000004041e7\n.text:00000000004041ed\n.text:00000000004041ef\n.text:00000000004041f2\n.text:00000000004041f5\n.text:00000000004041f8\n.text:00000000004041fa\n.text:00000000004041fd\n.text:0000000000404200\n.text:0000000000404203\n.text:0000000000404206\n.text:000000000040420a\n.text:000000000040420c\n.text:000000000040420f\n.text:0000000000404212\n.text:0000000000404214\n.text:0000000000404217\n.text:000000000040421a\n.text:000000000040421d\n.text:000000000040421f\n.text:0000000000404222\n.text:0000000000404225\n.text:0000000000404228\n.text:000000000040422b\n.text:000000000040422d\n.text:000000000040422f\n.text:0000000000404232\n.text:0000000000404235\n.text:0000000000404238\n.text:000000000040423d\n.text:000000000040423f\n.text:0000000000404241\n.text:0000000000404243\n.text:0000000000404246\n.text:0000000000404249\n.text:000000000040424c\n.text:000000000040424f\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404258\n.text:000000000040425b\n.text:000000000040425e\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404268\n.text:000000000040426c\n.text:0000000000404271\n.text:0000000000404277\n.text:000000000040427b\n.text:000000000040427e\n.text:0000000000404280\n.text:0000000000404283\n.text:0000000000404289\n.text:000000000040428e\n.text:0000000000404293\n.text:0000000000404298\n.text:000000000040429a\n.text:000000000040429d\n.text:00000000004042a0\n.text:00000000004042a4\n.text:00000000004042ab\n.text:00000000004042b0\n.text:00000000004042b2\n.text:00000000004042b5\n.text:00000000004042b8\n.text:00000000004042bc\n.text:00000000004042c3\n.text:00000000004042cb\n.text:00000000004042cd\n.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042da\n.text:00000000004042e1\n.text:00000000004042e3\n.text:00000000004042e5\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042ee\n.text:00000000004042f2\n.text:00000000004042f7\n.text:00000000004042fa\n.text:00000000004042fd\n.text:0000000000404302\n.text:0000000000404309\n.text:000000000040430e\n.text:0000000000404310\n.text:0000000000404315\n.text:0000000000404318\n.text:000000000040431d\n.text:0000000000404320\n.text:0000000000404325\n.text:000000000040432a\n.text:000000000040432f\n.text:0000000000404334\n.text:0000000000404338\n.text:000000000040433d\n.text:000000000040433f\n.text:0000000000404341\n.text:0000000000404345\n.text:0000000000404347\n.text:0000000000404350\n.text:0000000000404352\n.text:0000000000404354\n.text:0000000000404356\n.text:0000000000404358\n.text:000000000040435a\n.text:000000000040435d\n.text:000000000040435f\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404367\n.text:0000000000404369\n.text:000000000040436b\n.text:000000000040436d\n.text:000000000040436f\n.text:0000000000404371\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437c\n.text:000000000040437e\n.text:0000000000404383\n.text:0000000000404386\n.text:000000000040438b\n.text:0000000000404392\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439e\n.text:00000000004043a1\n.text:00000000004043a6\n.text:00000000004043a9\n.text:00000000004043ae\n.text:00000000004043b2\n.text:00000000004043b6\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c5\n.text:00000000004043ca\n.text:00000000004043cc\n.text:00000000004043d0\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043dc\n.text:00000000004043e2\n.text:00000000004043e4\n.text:00000000004043ea\n.text:00000000004043ec\n.text:00000000004043f0\n.text:00000000004043f4\n.text:00000000004043f6\n.text:00000000004043f9\n.text:00000000004043fb\n.text:0000000000404400\n.text:0000000000404404\n.text:0000000000404406\n.text:0000000000404409\n.text:000000000040440c\n.text:0000000000404411\n.text:0000000000404418\n.text:000000000040441d\n.text:000000000040441f\n.text:0000000000404422\n.text:0000000000404427\n.text:000000000040442a\n.text:000000000040442f\n.text:0000000000404432\n.text:0000000000404435\n.text:0000000000404438\n.text:000000000040443b\n.text:000000000040443e\n.text:0000000000404443\n.text:0000000000404446\n.text:0000000000404449\n.text:000000000040444e\n.text:0000000000404452\n.text:0000000000404458\n.text:000000000040445d\n.text:0000000000404462\n.text:0000000000404467\n.text:0000000000404469\n.text:0000000000404470\n.text:0000000000404472\n.text:0000000000404475\n.text:0000000000404478\n.text:000000000040447b\n.text:000000000040447e\n.text:0000000000404480\n.text:0000000000404482\n.text:0000000000404484\n.text:0000000000404487\n.text:0000000000404489\n.text:000000000040448b\n.text:000000000040448e\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404495\n.text:0000000000404497\n.text:0000000000404499\n.text:000000000040449c\n.text:000000000040449f\n.text:00000000004044a1\n.text:00000000004044a3\n.text:00000000004044a6\n.text:00000000004044a8\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044af\n.text:00000000004044b2\n.text:00000000004044b4\n.text:00000000004044b8\n.text:00000000004044bc\n.text:00000000004044be\n.text:00000000004044c1\n.text:00000000004044c3\n.text:00000000004044c5\n.text:00000000004044c8\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044cf\n.text:00000000004044d1\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044da\n.text:00000000004044dc\n.text:00000000004044de\n.text:00000000004044e0\n.text:00000000004044e2\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044e9\n.text:00000000004044ec\n.text:00000000004044ee\n.text:00000000004044f2\n.text:00000000004044f4\n.text:00000000004044f6\n.text:00000000004044fa\n.text:00000000004044fc\n.text:00000000004044fe\n.text:0000000000404500\n.text:0000000000404505\n.text:0000000000404507\n.text:000000000040450a\n.text:000000000040450f\n.text:0000000000404516\n.text:000000000040451c\n.text:0000000000404521\n.text:0000000000404524\n.text:0000000000404527\n.text:000000000040452c\n.text:0000000000404531\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453a\n.text:0000000000404540\n.text:0000000000404545\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454c\n.text:000000000040454e\n.text:0000000000404550\n.text:0000000000404552\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455b\n.text:000000000040455d\n.text:0000000000404560\n.text:0000000000404564\n.text:0000000000404566\n.text:0000000000404569\n.text:000000000040456b\n.text:000000000040456d\n.text:000000000040456f\n.text:0000000000404571\n.text:0000000000404574\n.text:0000000000404577\n.text:0000000000404579\n.text:000000000040457c\n.text:000000000040457e\n.text:0000000000404582\n.text:0000000000404585\n.text:0000000000404587\n.text:0000000000404589\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404594\n.text:0000000000404597\n.text:000000000040459c\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a7\n.text:00000000004045ac\n.text:00000000004045b1\n.text:00000000004045b7\n.text:00000000004045bc\n.text:00000000004045c6\n.text:00000000004045c9\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d6\n.text:00000000004045d8\n.text:00000000004045db\n.text:00000000004045e0\n.text:00000000004045e3\n.text:00000000004045e6\n.text:00000000004045e8\n.text:00000000004045ec\n.text:00000000004045f0\n.text:00000000004045f3\n.text:00000000004045f7\n.text:00000000004045fb\n.text:00000000004045fe\n.text:0000000000404600\n.text:0000000000404605\n.text:0000000000404609\n.text:000000000040460b\n.text:000000000040460e\n.text:0000000000404611\n.text:0000000000404614\n.text:0000000000404619\n.text:000000000040461e\n.text:0000000000404623\n.text:0000000000404628\n.text:000000000040462b\n.text:0000000000404630\n.text:0000000000404634\n.text:0000000000404637\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404641\n.text:0000000000404643\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464b\n.text:000000000040464d\n.text:0000000000404652\n.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404665\n.text:0000000000404667\n.text:000000000040466b\n.text:000000000040466e\n.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404677\n.text:000000000040467a\n.text:000000000040467f\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404687\n.text:0000000000404689\n.text:000000000040468b\n.text:0000000000404694\n.text:000000000040469b\n.text:000000000040469e\n.text:00000000004046a0\n.text:00000000004046a2\n.text:00000000004046a7\n.text:00000000004046a9\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b9\n.text:00000000004046bd\n.text:00000000004046c0\n.text:00000000004046c2\n.text:00000000004046c4\n.text:00000000004046c9\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046cf\n.text:00000000004046d4\n.text:00000000004046d7\n.text:00000000004046dc\n.text:00000000004046df\n.text:00000000004046e4\n.text:00000000004046e7\n.text:00000000004046ee\n.text:00000000004046ef\n.text:00000000004046f1\n.text:00000000004046f3\n.text:00000000004046f5\n.text:00000000004046f7\n.text:00000000004046f8\n'
p188
tp189
sS'quotearg_free'
p190
(S'\n__stdcall quotearg_free()\n'
p191
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060d2c8]\nCMP dword ptr [0x0060d2d0],0x2\nJC 0x004059da\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401880\nINC RBX\nMOV EAX,dword ptr [0x0060d2d0]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004059c0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60d3d0\nCMP RDI,RAX\nJZ 0x00405a03\nCALL 0x00401880\nMOV qword ptr [0x0060d2d8],0x100\nMOV qword ptr [0x0060d2e0],0x60d3d0\nMOV EAX,0x60d2d8\nCMP R14,RAX\nJZ 0x00405a20\nMOV RDI,R14\nCALL 0x00401880\nMOV qword ptr [0x0060d2c8],0x60d2d8\nMOV dword ptr [0x0060d2d0],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n4c 8b 35 1c 79 20 00\n83 3d 1d 79 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 b8 be ff ff\n48 ff c3\n8b 05 ff 78 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 d0 d3 60 00\n48 39 c7\n74 1b\ne8 93 be ff ff\n48 c7 05 e0 78 20 00 00 01 00 00\n48 c7 05 dd 78 20 00 d0 d3 60 00\nb8 d8 d2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 6b be ff ff\n48 c7 05 a8 78 20 00 d8 d2 60 00\nc7 05 a6 78 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:00000000004059a0\n.text:00000000004059a2\n.text:00000000004059a4\n.text:00000000004059a5\n.text:00000000004059ac\n.text:00000000004059b3\n.text:00000000004059b5\n.text:00000000004059b9\n.text:00000000004059be\n.text:00000000004059c0\n.text:00000000004059c3\n.text:00000000004059c8\n.text:00000000004059cb\n.text:00000000004059d1\n.text:00000000004059d5\n.text:00000000004059d8\n.text:00000000004059da\n.text:00000000004059de\n.text:00000000004059e3\n.text:00000000004059e6\n.text:00000000004059e8\n.text:00000000004059ed\n.text:00000000004059f8\n.text:0000000000405a03\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a0d\n.text:0000000000405a10\n.text:0000000000405a15\n.text:0000000000405a20\n.text:0000000000405a2a\n.text:0000000000405a2b\n.text:0000000000405a2d\n.text:0000000000405a2f\n'
p195
tp196
sS'quotearg_mem'
p197
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00405c00\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p201
S'.text:0000000000405c20\n.text:0000000000405c23\n.text:0000000000405c26\n.text:0000000000405c28\n.text:0000000000405c2b\n.text:0000000000405c2e\n'
p202
tp203
sS'deregister_tm_clones'
p204
(S'\n__stdcall deregister_tm_clones()\n'
p205
V\u000a/* WARNING: Removing unreachable block (ram,0x00401dc5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401dcf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p206
S'MOV EAX,0x60d327\nPUSH RBP\nSUB RAX,0x60d320\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401de0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401de0\nPOP RBP\nMOV EDI,0x60d320\nJMP RAX\nPOP RBP\nRET\n'
p207
S'b8 27 d3 60 00\n55\n48 2d 20 d3 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 20 d3 60 00\nff e0\n5d\nc3\n'
p208
S'.text:0000000000401db0\n.text:0000000000401db5\n.text:0000000000401db6\n.text:0000000000401dbc\n.text:0000000000401dc0\n.text:0000000000401dc3\n.text:0000000000401dc5\n.text:0000000000401dca\n.text:0000000000401dcd\n.text:0000000000401dcf\n.text:0000000000401dd0\n.text:0000000000401dd5\n.text:0000000000401de0\n.text:0000000000401de1\n'
p209
tp210
sS'ptr_align'
p211
(S'\n__stdcall ptr_align(void * ptr, size_t alignment)\n'
p212
V\u000avoid * ptr_align(void *ptr,size_t alignment)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (long)ptr + (alignment - 1);\u000a  return (void *)(uVar1 - uVar1 % alignment);\u000a}\u000a\u000a
p213
S'LEA RCX,[RDI + RSI*0x1 + -0x1]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nSUB RCX,RDX\nMOV RAX,RCX\nRET\n'
p214
S'48 8d 4c 37 ff\n31 d2\n48 89 c8\n48 f7 f6\n48 29 d1\n48 89 c8\nc3\n'
p215
S'.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034a7\n.text:00000000004034aa\n.text:00000000004034ad\n.text:00000000004034b0\n.text:00000000004034b3\n'
p216
tp217
sS'randint_free'
p218
(S'\n__stdcall randint_free(void * __ptr)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid randint_free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060d020)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP 0x00401880\n'
p221
S'e9 bb b3 ff ff\n'
p222
S'.text:00000000004064c0\n'
p223
tp224
sS'adjust_value'
p225
(S'\n__stdcall adjust_value()\n'
p226
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p227
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x004047cc\nFLD tword ptr [0x004099f0]\nFUCOMIP ST0,ST1\nJBE 0x004047cc\nFLD dword ptr [0x004099ec]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x4099e0 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x4099e0 + RDX*0x4]\nRET\n'
p228
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d dd 52 00 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 cb 52 00 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 e0 99 40 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 e0 99 40 00\nc3\n'
p229
S'.text:0000000000404700\n.text:0000000000404704\n.text:0000000000404707\n.text:000000000040470d\n.text:0000000000404713\n.text:0000000000404715\n.text:000000000040471b\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404725\n.text:0000000000404729\n.text:000000000040472e\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473e\n.text:0000000000404742\n.text:0000000000404746\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404756\n.text:000000000040475a\n.text:000000000040475f\n.text:0000000000404761\n.text:0000000000404765\n.text:0000000000404769\n.text:0000000000404773\n.text:0000000000404778\n.text:000000000040477a\n.text:000000000040477c\n.text:000000000040477e\n.text:0000000000404784\n.text:0000000000404786\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404791\n.text:0000000000404794\n.text:0000000000404797\n.text:000000000040479b\n.text:00000000004047a2\n.text:00000000004047a4\n.text:00000000004047a6\n.text:00000000004047a9\n.text:00000000004047ac\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b4\n.text:00000000004047b6\n.text:00000000004047b9\n.text:00000000004047be\n.text:00000000004047c1\n.text:00000000004047c5\n.text:00000000004047cc\n'
p230
tp231
sS'quotearg_custom'
p232
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p233
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00405e40\n'
p235
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p236
S'.text:0000000000405ec0\n.text:0000000000405ec3\n.text:0000000000405ec6\n.text:0000000000405ec9\n.text:0000000000405ecb\n.text:0000000000405ece\n.text:0000000000405ed1\n.text:0000000000405ed4\n'
p237
tp238
sS'free'
p239
(S'\n__stdcall free(void * __ptr)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060d020)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060d020]\n'
p242
S'ff 25 9a b7 20 00\n'
p243
S'.plt:0000000000401880\n'
p244
tp245
sS'close'
p246
(S'\n__stdcall close(int __fd)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060d138)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060d138]\n'
p249
S'ff 25 82 b6 20 00\n'
p250
S'.plt:0000000000401ab0\n'
p251
tp252
sS'fdatasync'
p253
(S'\n__stdcall fdatasync(int __fildes)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdatasync(int __fildes)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fdatasync_0060d038)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060d038]\n'
p256
S'ff 25 82 b7 20 00\n'
p257
S'.plt:00000000004018b0\n'
p258
tp259
sS'getenv'
p260
(S'\n__stdcall getenv(char * __name)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060d018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060d018]\n'
p263
S'ff 25 a2 b7 20 00\n'
p264
S'.plt:0000000000401870\n'
p265
tp266
sS'fopen'
p267
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060d238)();\u000a  return pFVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060d238]\n'
p270
S'ff 25 82 b5 20 00\n'
p271
S'.plt:0000000000401cb0\n'
p272
tp273
sS'rpl_fseeko'
p274
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p275
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060d230)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00407ec8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00407ec8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00407eda\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401ca0\nMOV RDI,RBX\nCALL 0x00401b50\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401a50\nCMP RAX,-0x1\nJZ 0x00407f03\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00407f08\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p277
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 c6 9d ff ff\n48 89 df\ne8 6e 9c ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 61 9b ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p278
S'.text:0000000000407ea0\n.text:0000000000407ea1\n.text:0000000000407ea3\n.text:0000000000407ea4\n.text:0000000000407ea7\n.text:0000000000407eaa\n.text:0000000000407ead\n.text:0000000000407eb1\n.text:0000000000407eb5\n.text:0000000000407eb7\n.text:0000000000407ebb\n.text:0000000000407ebf\n.text:0000000000407ec1\n.text:0000000000407ec6\n.text:0000000000407ec8\n.text:0000000000407ecb\n.text:0000000000407ece\n.text:0000000000407ed1\n.text:0000000000407ed2\n.text:0000000000407ed4\n.text:0000000000407ed5\n.text:0000000000407eda\n.text:0000000000407edd\n.text:0000000000407ee2\n.text:0000000000407ee4\n.text:0000000000407ee7\n.text:0000000000407eea\n.text:0000000000407eef\n.text:0000000000407ef3\n.text:0000000000407ef5\n.text:0000000000407ef8\n.text:0000000000407eff\n.text:0000000000407f01\n.text:0000000000407f03\n.text:0000000000407f08\n.text:0000000000407f09\n.text:0000000000407f0b\n.text:0000000000407f0c\n'
p279
tp280
sS'quote_n_mem'
p281
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p282
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'MOV ECX,0x60d2e8\nJMP 0x00405a40\n'
p284
S'b9 e8 d2 60 00\ne9 36 fb ff ff\n'
p285
S'.text:0000000000405f00\n.text:0000000000405f05\n'
p286
tp287
sS'genpattern'
p288
(S'\n__stdcall genpattern(int * dest, size_t num, randint_source * s)\n'
p289
V\u000avoid genpattern(int *dest,size_t num,randint_source *s)\u000a\u000a{\u000a  int *piVar1;\u000a  randint rVar2;\u000a  int iVar3;\u000a  int *__src;\u000a  long lVar4;\u000a  randint choices;\u000a  long lVar5;\u000a  ulong uVar6;\u000a  int *__dest;\u000a  ulong uVar7;\u000a  size_t sVar8;\u000a  \u000a  if (num != 0) {\u000a    lVar5 = 0;\u000a    __src = patterns;\u000a    __dest = dest;\u000a    uVar7 = num;\u000a    while( true ) {\u000a      while( true ) {\u000a        do {\u000a          piVar1 = __src;\u000a          iVar3 = *piVar1;\u000a          choices = SEXT48(iVar3);\u000a          __src = patterns;\u000a        } while (choices == 0);\u000a        __src = piVar1 + 1;\u000a        if (-1 < iVar3) break;\u000a        if (uVar7 < -choices || uVar7 + choices == 0) {\u000a          lVar5 = lVar5 + uVar7;\u000a          goto joined_r0x00402d39;\u000a        }\u000a        lVar5 = lVar5 + -choices;\u000a        uVar7 = uVar7 + choices;\u000a      }\u000a      if (uVar7 < choices) break;\u000a      memcpy(__dest,__src,choices * 4);\u000a      __dest = __dest + choices;\u000a      __src = __src + choices;\u000a      uVar7 = uVar7 - choices;\u000a    }\u000a    if ((uVar7 < 2) || (uVar7 * 3 < choices)) {\u000a      lVar5 = lVar5 + uVar7;\u000a    }\u000a    else {\u000a      do {\u000a        if ((choices == uVar7) || (rVar2 = randint_choose(s,choices), rVar2 < uVar7)) {\u000a          *__dest = *__src;\u000a          __dest = __dest + 1;\u000a          uVar7 = uVar7 - 1;\u000a        }\u000a        __src = __src + 1;\u000a        choices = choices - 1;\u000a      } while (uVar7 != 0);\u000a    }\u000ajoined_r0x00402d39:\u000a    if (num != 0) {\u000a      lVar4 = num - lVar5;\u000a      uVar6 = lVar5 - 1;\u000a      lVar5 = 0;\u000a      sVar8 = 0;\u000a      uVar7 = uVar6;\u000a      __dest = dest;\u000a      do {\u000a        if (uVar6 < uVar7) {\u000a          choices = randint_choose(s,lVar4 + lVar5);\u000a          iVar3 = *__dest;\u000a          *__dest = dest[choices + sVar8];\u000a          __src = dest + choices + sVar8;\u000a        }\u000a        else {\u000a          uVar7 = uVar7 + (num - 1);\u000a          dest[lVar4] = *__dest;\u000a          lVar4 = lVar4 + 1;\u000a          iVar3 = -1;\u000a          __src = __dest;\u000a        }\u000a        *__src = iVar3;\u000a        uVar7 = uVar7 - uVar6;\u000a        sVar8 = sVar8 + 1;\u000a        __dest = __dest + 1;\u000a        lVar5 = lVar5 + -1;\u000a      } while (num != sVar8);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p290
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x18],RDX\nTEST RSI,RSI\nJZ 0x00402d1a\nMOV EBX,0x408870\nXOR R12D,R12D\nMOV R13,RDI\nMOV R15,RSI\nMOV qword ptr [RSP + 0x10],RSI\nMOV qword ptr [RSP + 0x8],RDI\nJMP 0x00402bd6\nLEA RDX,[RBP*0x4]\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00401b30\nLEA RBX,[RBX + RBP*0x4]\nLEA R13,[R13 + RBP*0x4]\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x8]\nMOV R14,R15\nJMP 0x00402be6\nADD R12,RBP\nMOV R14,RAX\nMOV RAX,RBX\nNOP dword ptr [RAX]\nMOV RBX,RAX\nMOVSXD RBP,dword ptr [RBX]\nTEST RBP,RBP\nMOV EAX,0x408870\nJZ 0x00402bf0\nADD RBX,0x4\nTEST EBP,EBP\nJNS 0x00402c20\nNEG RBP\nMOV RAX,R14\nSUB RAX,RBP\nJA 0x00402be0\nJMP 0x00402c8c\nMOV R15,R14\nSUB R15,RBP\nJNC 0x00402bb0\nCMP R14,0x2\nJC 0x00402d29\nLEA RAX,[R14 + R14*0x2]\nCMP RAX,RBP\nJC 0x00402d29\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX]\nCMP RBP,R14\nJZ 0x00402c71\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,RBP\nCALL 0x00403450\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x10]\nCMP RAX,R14\nJNC 0x00402c7e\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [R13],EAX\nADD R13,0x4\nDEC R14\nADD RBX,0x4\nDEC RBP\nTEST R14,R14\nJNZ 0x00402c50\nJMP 0x00402c8f\nADD R12,R14\nTEST RSI,RSI\nJZ 0x00402d1a\nMOV RBX,RSI\nSUB RBX,R12\nDEC R12\nLEA RAX,[RSI + -0x1]\nMOV qword ptr [RSP + 0x20],RAX\nXOR EBP,EBP\nMOV R15,RDI\nMOV R13,R12\nXOR R14D,R14D\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP R13,R12\nJBE 0x00402cf0\nLEA RSI,[RBX + RBP*0x1]\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00403450\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x10]\nADD RAX,R14\nMOV ECX,dword ptr [R15]\nLEA RDX,[RDI + RAX*0x4]\nMOV EAX,dword ptr [RDI + RAX*0x4]\nMOV dword ptr [R15],EAX\nJMP 0x00402d06\nADD R13,qword ptr [RSP + 0x20]\nMOV EAX,dword ptr [R15]\nMOV dword ptr [RDI + RBX*0x4],EAX\nINC RBX\nMOV ECX,0xffffffff\nMOV RDX,R15\nMOV dword ptr [RDX],ECX\nSUB R13,R12\nINC R14\nADD R15,0x4\nDEC RBP\nCMP RSI,R14\nJNZ 0x00402cc0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nADD R12,R14\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x8]\nTEST RSI,RSI\nJNZ 0x00402c98\nJMP 0x00402d1a\n'
p291
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 54 24 18\n48 85 f6\n0f 84 8e 01 00 00\nbb 70 88 40 00\n45 31 e4\n49 89 fd\n49 89 f7\n48 89 74 24 10\n48 89 7c 24 08\neb 30\n48 8d 14 ad 00 00 00 00\n4c 89 ef\n48 89 de\ne8 6d ef ff ff\n48 8d 1c ab\n4d 8d 6c ad 00\n48 8b 74 24 10\n48 8b 7c 24 08\n4d 89 fe\neb 0b\n49 01 ec\n49 89 c6\n48 89 d8\n0f 1f 80 00 00 00 00\n48 89 c3\n48 63 2b\n48 85 ed\nb8 70 88 40 00\n74 f0\n48 83 c3 04\n85 ed\n79 18\n48 f7 dd\n4c 89 f0\n48 29 e8\n77 cd\neb 77\n4d 89 f7\n49 29 ef\n73 88\n49 83 fe 02\n0f 82 f7 00 00 00\n4b 8d 04 76\n48 39 e8\n0f 82 ea 00 00 00\n48 8b 74 24 10\n48 8b 7c 24 08\n0f 1f 80 00 00 00 00\n4c 39 f5\n74 1c\n48 8b 7c 24 18\n48 89 ee\ne8 ee 07 00 00\n48 8b 7c 24 08\n48 8b 74 24 10\n4c 39 f0\n73 0d\n8b 03\n41 89 45 00\n49 83 c5 04\n49 ff ce\n48 83 c3 04\n48 ff cd\n4d 85 f6\n75 c6\neb 03\n4d 01 f4\n48 85 f6\n0f 84 82 00 00 00\n48 89 f3\n4c 29 e3\n49 ff cc\n48 8d 46 ff\n48 89 44 24 20\n31 ed\n49 89 ff\n4d 89 e5\n45 31 f6\n66 66 2e 0f 1f 84 00 00 00 00 00\n4d 39 e5\n76 2b\n48 8d 34 2b\n48 8b 7c 24 18\ne8 7d 07 00 00\n48 8b 7c 24 08\n48 8b 74 24 10\n4c 01 f0\n41 8b 0f\n48 8d 14 87\n8b 04 87\n41 89 07\neb 17\n4c 03 6c 24 20\n41 8b 07\n89 04 9f\n48 ff c3\nb9 ff ff ff ff\n4c 89 fa\n89 0a\n4d 29 e5\n49 ff c6\n49 83 c7 04\n48 ff cd\n4c 39 f6\n75 a6\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 01 f4\n48 8b 74 24 10\n48 8b 7c 24 08\n48 85 f6\n0f 85 59 ff ff ff\neb d9\n'
p292
S'.text:0000000000402b70\n.text:0000000000402b71\n.text:0000000000402b73\n.text:0000000000402b75\n.text:0000000000402b77\n.text:0000000000402b79\n.text:0000000000402b7a\n.text:0000000000402b7e\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b8c\n.text:0000000000402b91\n.text:0000000000402b94\n.text:0000000000402b97\n.text:0000000000402b9a\n.text:0000000000402b9f\n.text:0000000000402ba4\n.text:0000000000402bb0\n.text:0000000000402bb8\n.text:0000000000402bbb\n.text:0000000000402bbe\n.text:0000000000402bc3\n.text:0000000000402bc7\n.text:0000000000402bcc\n.text:0000000000402bd1\n.text:0000000000402bd6\n.text:0000000000402bd9\n.text:0000000000402be0\n.text:0000000000402be3\n.text:0000000000402be6\n.text:0000000000402be9\n.text:0000000000402bf0\n.text:0000000000402bf3\n.text:0000000000402bf6\n.text:0000000000402bf9\n.text:0000000000402bfe\n.text:0000000000402c00\n.text:0000000000402c04\n.text:0000000000402c06\n.text:0000000000402c08\n.text:0000000000402c0b\n.text:0000000000402c0e\n.text:0000000000402c11\n.text:0000000000402c13\n.text:0000000000402c20\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c28\n.text:0000000000402c2c\n.text:0000000000402c32\n.text:0000000000402c36\n.text:0000000000402c39\n.text:0000000000402c3f\n.text:0000000000402c44\n.text:0000000000402c49\n.text:0000000000402c50\n.text:0000000000402c53\n.text:0000000000402c55\n.text:0000000000402c5a\n.text:0000000000402c5d\n.text:0000000000402c62\n.text:0000000000402c67\n.text:0000000000402c6c\n.text:0000000000402c6f\n.text:0000000000402c71\n.text:0000000000402c73\n.text:0000000000402c77\n.text:0000000000402c7b\n.text:0000000000402c7e\n.text:0000000000402c82\n.text:0000000000402c85\n.text:0000000000402c88\n.text:0000000000402c8a\n.text:0000000000402c8c\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c98\n.text:0000000000402c9b\n.text:0000000000402c9e\n.text:0000000000402ca1\n.text:0000000000402ca5\n.text:0000000000402caa\n.text:0000000000402cac\n.text:0000000000402caf\n.text:0000000000402cb2\n.text:0000000000402cb5\n.text:0000000000402cc0\n.text:0000000000402cc3\n.text:0000000000402cc5\n.text:0000000000402cc9\n.text:0000000000402cce\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdd\n.text:0000000000402ce0\n.text:0000000000402ce3\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402ced\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cf8\n.text:0000000000402cfb\n.text:0000000000402cfe\n.text:0000000000402d03\n.text:0000000000402d06\n.text:0000000000402d08\n.text:0000000000402d0b\n.text:0000000000402d0e\n.text:0000000000402d12\n.text:0000000000402d15\n.text:0000000000402d18\n.text:0000000000402d1a\n.text:0000000000402d1e\n.text:0000000000402d1f\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d25\n.text:0000000000402d27\n.text:0000000000402d28\n.text:0000000000402d29\n.text:0000000000402d2c\n.text:0000000000402d31\n.text:0000000000402d36\n.text:0000000000402d39\n.text:0000000000402d3f\n'
p293
tp294
sS'xstrdup'
p295
(S'\n__stdcall xstrdup(char * string)\n'
p296
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004019d0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00407760\n'
p298
S'53\n48 89 fb\ne8 37 a2 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p299
S'.text:0000000000407790\n.text:0000000000407791\n.text:0000000000407794\n.text:0000000000407799\n.text:000000000040779d\n.text:00000000004077a0\n.text:00000000004077a1\n'
p300
tp301
sS'c_ispunct'
p302
(S'\n__stdcall c_ispunct()\n'
p303
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p304
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407fe2\nMOV AL,0x1\nJMP qword ptr [0x40a608 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p305
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 08 a6 40 00\nc3\n31 c0\nc3\n'
p306
S'.text:0000000000407fd0\n.text:0000000000407fd3\n.text:0000000000407fd6\n.text:0000000000407fd8\n.text:0000000000407fda\n.text:0000000000407fe1\n.text:0000000000407fe2\n.text:0000000000407fe4\n'
p307
tp308
sS'fstat'
p309
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p310
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060d1c8)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401bd0\n'
p312
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 71 96 ff ff\n'
p313
S'.text:0000000000408550\n.text:0000000000408553\n.text:0000000000408555\n.text:000000000040855a\n'
p314
tp315
sS'fscanf'
p316
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060d128)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060d128]\n'
p319
S'ff 25 92 b6 20 00\n'
p320
S'.plt:0000000000401a90\n'
p321
tp322
sS'ignorable_sync_errno'
p323
(S'\n__stdcall ignorable_sync_errno()\n'
p324
V\u000a_Bool ignorable_sync_errno(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0xe) {\u000a    return (_Bool)((byte)(0x3001 >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p325
S'ADD EDI,-0x9\nCMP EDI,0xd\nJA 0x00403745\nMOV EAX,0x3001\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p326
S'83 c7 f7\n83 ff 0d\n77 0d\nb8 01 30 00 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p327
S'.text:0000000000403730\n.text:0000000000403733\n.text:0000000000403736\n.text:0000000000403738\n.text:000000000040373d\n.text:000000000040373f\n.text:0000000000403741\n.text:0000000000403744\n.text:0000000000403745\n.text:0000000000403747\n'
p328
tp329
sS'memcpy'
p330
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060d178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060d178]\n'
p333
S'ff 25 42 b6 20 00\n'
p334
S'.plt:0000000000401b30\n'
p335
tp336
sS'close_stdout_set_ignore_EPIPE'
p337
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p338
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p339
S'MOV byte ptr [0x0060d380],DIL\nRET\n'
p340
S'40 88 3d 59 95 20 00\nc3\n'
p341
S'.text:0000000000403e20\n.text:0000000000403e27\n'
p342
tp343
sS'iswprint'
p344
(S'\n__stdcall iswprint(wint_t __wc)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060d288)();\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060d288]\n'
p347
S'ff 25 32 b5 20 00\n'
p348
S'.plt:0000000000401d50\n'
p349
tp350
sS'ftruncate'
p351
(S'\n__stdcall ftruncate(int __fd, __off_t __length)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ftruncate(int __fd,__off_t __length)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ftruncate_0060d100)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060d100]\n'
p354
S'ff 25 ba b6 20 00\n'
p355
S'.plt:0000000000401a40\n'
p356
tp357
sS'isaac_refill'
p358
(S'\n__stdcall isaac_refill(isaac_state * s, isaac_word * result)\n'
p359
V\u000avoid isaac_refill(isaac_state *s,isaac_word *result)\u000a\u000a{\u000a  isaac_state *piVar1;\u000a  isaac_word x;\u000a  isaac_state *piVar2;\u000a  isaac_word iVar3;\u000a  ulong uVar4;\u000a  isaac_word iVar5;\u000a  ulong a;\u000a  isaac_word *piVar6;\u000a  isaac_word *piVar7;\u000a  ulong a_00;\u000a  isaac_word *local_48;\u000a  \u000a  uVar4 = s->a;\u000a  x = s->c + 1;\u000a  iVar5 = s->b + x;\u000a  s->c = x;\u000a  piVar1 = (isaac_state *)(s->m + 0x80);\u000a  piVar2 = (isaac_state *)(s->m + 4);\u000a  if ((isaac_state *)(s->m + 4) < piVar1) {\u000a    piVar2 = piVar1;\u000a  }\u000a  a_00 = (long)piVar2->m + ~(ulong)s;\u000a  local_48 = (isaac_word *)((long)result + (a_00 & 0xffffffffffffffe0) + 0x20);\u000a  piVar2 = s;\u000a  do {\u000a    a = ~(uVar4 << 0x15 ^ uVar4) + piVar2->m[0x80];\u000a    x = piVar2->m[0];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a;\u000a    piVar2->m[0] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *result = iVar5;\u000a    x = just(a);\u000a    a = (x >> 5 ^ a) + piVar2->m[0x81];\u000a    x = piVar2->m[1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[1] = iVar5;\u000a    a = (a * 0x1000 ^ a) + piVar2->m[0x82];\u000a    x = piVar2->m[2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[2] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[2] = iVar5;\u000a    x = just(a);\u000a    uVar4 = (x >> 0x21 ^ a) + piVar2->m[0x83];\u000a    x = piVar2->m[3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a = iVar5 + uVar4 + iVar3;\u000a    piVar2->m[3] = a;\u000a    iVar5 = ind((isaac_word *)s,a >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[3] = iVar5;\u000a    piVar2 = (isaac_state *)(piVar2->m + 4);\u000a    result = result + 4;\u000a  } while (piVar2 < piVar1);\u000a  piVar6 = (isaac_word *)((long)s->m + (a_00 & 0xffffffffffffffe0) + 0x38);\u000a  do {\u000a    a_00 = ~(uVar4 << 0x15 ^ uVar4) + piVar6[-0x83];\u000a    x = piVar6[-3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a_00;\u000a    piVar6[-3] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *local_48 = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 5 ^ a_00) + piVar6[-0x82];\u000a    x = piVar6[-2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    piVar6[-2] = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[1] = iVar5;\u000a    a_00 = (uVar4 * 0x1000 ^ uVar4) + piVar6[-0x81];\u000a    x = piVar6[-1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a_00 + iVar3;\u000a    piVar6[-1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[2] = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 0x21 ^ a_00) + piVar6[-0x80];\u000a    x = *piVar6;\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    *piVar6 = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[3] = iVar5;\u000a    piVar7 = piVar6 + 1;\u000a    local_48 = local_48 + 4;\u000a    piVar6 = piVar6 + 4;\u000a  } while (piVar7 < &s->a);\u000a  s->a = uVar4;\u000a  s->b = iVar5;\u000a  return;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBP,RSI\nMOV R14,RDI\nMOV RBX,qword ptr [0x800 + R14]\nMOV RAX,qword ptr [0x810 + R14]\nINC RAX\nMOV R12,qword ptr [0x808 + R14]\nADD R12,RAX\nMOV qword ptr [0x810 + R14],RAX\nLEA RCX,[0x400 + R14]\nLEA RAX,[R14 + 0x20]\nCMP RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nCMOVA RAX,RCX\nMOV RCX,R14\nNOT RCX\nADD RCX,RAX\nSHR RCX,0x5\nLEA RAX,[RCX*0x4]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RCX,0x5\nLEA RAX,[RBP + RCX*0x1 + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,qword ptr [RSP + 0x8]\nNOP\nMOV qword ptr [RSP],RBP\nMOV R13,RBX\nSHL R13,0x15\nXOR R13,RBX\nNOT R13\nADD R13,qword ptr [0x400 + R14]\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406d70\nADD RAX,R12\nADD RAX,R13\nMOV qword ptr [R14],RAX\nSHR RAX,0x8\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x00406d70\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x00406d80\nMOV RBX,RAX\nMOV qword ptr [RBP],RBX\nMOV RDI,R13\nCALL 0x00406d80\nMOV RBP,RAX\nSHR RBP,0x5\nXOR RBP,R13\nADD RBP,qword ptr [0x408 + R14]\nMOV R12,qword ptr [R14 + 0x8]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00406d70\nADD RBX,RBP\nADD RBX,RAX\nMOV qword ptr [R14 + 0x8],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406d70\nADD R12,RAX\nMOV RDI,R12\nCALL 0x00406d80\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x8],RBX\nMOV R12,RBP\nSHL R12,0xc\nXOR R12,RBP\nADD R12,qword ptr [0x410 + R14]\nMOV RBP,qword ptr [R14 + 0x10]\nMOV RDI,R15\nMOV RSI,RBP\nCALL 0x00406d70\nADD RBX,R12\nADD RBX,RAX\nMOV qword ptr [R14 + 0x10],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406d70\nADD RBP,RAX\nMOV RDI,RBP\nCALL 0x00406d80\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x10],RBP\nMOV RDI,R12\nCALL 0x00406d80\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R12\nADD RBX,qword ptr [0x418 + R14]\nMOV R12,qword ptr [R14 + 0x18]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00406d70\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R14 + 0x18],RBP\nSHR RBP,0x8\nMOV RDI,R15\nMOV RSI,RBP\nMOV RBP,qword ptr [RSP]\nCALL 0x00406d70\nADD R12,RAX\nMOV RDI,R12\nCALL 0x00406d80\nMOV R12,RAX\nMOV qword ptr [RBP + 0x18],R12\nADD R14,0x20\nADD RBP,0x20\nCMP R14,qword ptr [RSP + 0x20]\nJC 0x00406a50\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[0x800 + RCX]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nLEA R13,[RCX + RAX*0x8 + 0x38]\nMOV R14,qword ptr [RSP + 0x8]\nNOP\nMOV R15,RBX\nSHL R15,0x15\nXOR R15,RBX\nNOT R15\nADD R15,qword ptr [-0x418 + R13]\nMOV RBX,qword ptr [R13 + -0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406d70\nADD RAX,R12\nADD RAX,R15\nMOV qword ptr [R13 + -0x18],RAX\nSHR RAX,0x8\nMOV RDI,R14\nMOV RSI,RAX\nCALL 0x00406d70\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x00406d80\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],RBP\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x00406d80\nMOV RBX,RAX\nSHR RBX,0x5\nXOR RBX,R15\nADD RBX,qword ptr [-0x410 + R13]\nMOV R15,qword ptr [R13 + -0x10]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00406d70\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13 + -0x10],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00406d70\nADD R15,RAX\nMOV RDI,R15\nCALL 0x00406d80\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x8],RBP\nMOV qword ptr [RSP + 0x10],R12\nMOV R15,RBX\nSHL R15,0xc\nXOR R15,RBX\nADD R15,qword ptr [-0x408 + R13]\nMOV RBX,qword ptr [R13 + -0x8]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406d70\nADD RBP,R15\nADD RBP,RAX\nMOV qword ptr [R13 + -0x8],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00406d70\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x00406d80\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x10],RBP\nMOV RDI,R15\nCALL 0x00406d80\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R15\nADD RBX,qword ptr [-0x400 + R13]\nMOV R15,qword ptr [R13]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00406d70\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00406d70\nADD R15,RAX\nMOV RDI,R15\nCALL 0x00406d80\nMOV R12,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + 0x18],R12\nLEA RAX,[R13 + 0x20]\nADD R13,0x8\nADD RCX,0x20\nMOV qword ptr [RSP + 0x10],RCX\nCMP R13,qword ptr [RSP]\nMOV R13,RAX\nJC 0x00406bd0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x800 + RAX],RBX\nMOV qword ptr [0x808 + RAX],R12\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p361
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 f5\n49 89 fe\n49 8b 9e 00 08 00 00\n49 8b 86 10 08 00 00\n48 ff c0\n4d 8b a6 08 08 00 00\n49 01 c4\n49 89 86 10 08 00 00\n49 8d 8e 00 04 00 00\n49 8d 46 20\n48 39 c1\n48 89 4c 24 20\n48 0f 47 c1\n4c 89 f1\n48 f7 d1\n48 01 c1\n48 c1 e9 05\n48 8d 04 8d 00 00 00 00\n48 89 44 24 18\n48 c1 e1 05\n48 8d 44 0d 20\n48 89 44 24 10\n4c 89 74 24 08\n4c 8b 7c 24 08\n90\n48 89 2c 24\n49 89 dd\n49 c1 e5 15\n49 31 dd\n49 f7 d5\n4d 03 ae 00 04 00 00\n49 8b 1e\n4c 89 ff\n48 89 de\ne8 fa 02 00 00\n4c 01 e0\n4c 01 e8\n49 89 06\n48 c1 e8 08\n4c 89 ff\n48 89 c6\ne8 e2 02 00 00\n48 01 c3\n48 89 df\ne8 e7 02 00 00\n48 89 c3\n48 89 5d 00\n4c 89 ef\ne8 d8 02 00 00\n48 89 c5\n48 c1 ed 05\n4c 31 ed\n49 03 ae 08 04 00 00\n4d 8b 66 08\n4c 89 ff\n4c 89 e6\ne8 a8 02 00 00\n48 01 eb\n48 01 c3\n49 89 5e 08\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 8f 02 00 00\n49 01 c4\n4c 89 e7\ne8 94 02 00 00\n48 89 c3\n48 8b 04 24\n48 89 58 08\n49 89 ec\n49 c1 e4 0c\n49 31 ec\n4d 03 a6 10 04 00 00\n49 8b 6e 10\n4c 89 ff\n48 89 ee\ne8 59 02 00 00\n4c 01 e3\n48 01 c3\n49 89 5e 10\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 40 02 00 00\n48 01 c5\n48 89 ef\ne8 45 02 00 00\n48 89 c5\n48 8b 04 24\n48 89 68 10\n4c 89 e7\ne8 32 02 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 e3\n49 03 9e 18 04 00 00\n4d 8b 66 18\n4c 89 ff\n4c 89 e6\ne8 02 02 00 00\n48 01 dd\n48 01 c5\n49 89 6e 18\n48 c1 ed 08\n4c 89 ff\n48 89 ee\n48 8b 2c 24\ne8 e5 01 00 00\n49 01 c4\n4c 89 e7\ne8 ea 01 00 00\n49 89 c4\n4c 89 65 18\n49 83 c6 20\n48 83 c5 20\n4c 3b 74 24 20\n0f 82 a0 fe ff ff\n48 8b 4c 24 08\n48 8d 81 00 08 00 00\n48 89 04 24\n48 8b 44 24 18\n4c 8d 6c c1 38\n4c 8b 74 24 08\n90\n49 89 df\n49 c1 e7 15\n49 31 df\n49 f7 d7\n4d 03 bd e8 fb ff ff\n49 8b 5d e8\n4c 89 f7\n48 89 de\ne8 7d 01 00 00\n4c 01 e0\n4c 01 f8\n49 89 45 e8\n48 c1 e8 08\n4c 89 f7\n48 89 c6\ne8 64 01 00 00\n48 01 c3\n48 89 df\ne8 69 01 00 00\n48 89 c5\n48 8b 44 24 10\n48 89 28\n49 89 c4\n4c 89 ff\ne8 53 01 00 00\n48 89 c3\n48 c1 eb 05\n4c 31 fb\n49 03 9d f0 fb ff ff\n4d 8b 7d f0\n4c 89 f7\n4c 89 fe\ne8 23 01 00 00\n48 01 dd\n48 01 c5\n49 89 6d f0\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 0a 01 00 00\n49 01 c7\n4c 89 ff\ne8 0f 01 00 00\n48 89 c5\n49 89 6c 24 08\n4c 89 64 24 10\n49 89 df\n49 c1 e7 0c\n49 31 df\n4d 03 bd f8 fb ff ff\n49 8b 5d f8\n4c 89 f7\n48 89 de\ne8 d2 00 00 00\n4c 01 fd\n48 01 c5\n49 89 6d f8\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 b9 00 00 00\n48 01 c3\n48 89 df\ne8 be 00 00 00\n48 89 c5\n49 89 6c 24 10\n4c 89 ff\ne8 ae 00 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 fb\n49 03 9d 00 fc ff ff\n4d 8b 7d 00\n4c 89 f7\n4c 89 fe\ne8 7e 00 00 00\n48 01 dd\n48 01 c5\n49 89 6d 00\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 65 00 00 00\n49 01 c7\n4c 89 ff\ne8 6a 00 00 00\n49 89 c4\n48 8b 4c 24 10\n4c 89 61 18\n49 8d 45 20\n49 83 c5 08\n48 83 c1 20\n48 89 4c 24 10\n4c 3b 2c 24\n49 89 c5\n0f 82 90 fe ff ff\n48 8b 44 24 08\n48 89 98 00 08 00 00\n4c 89 a0 08 08 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p362
S'.text:00000000004069d0\n.text:00000000004069d1\n.text:00000000004069d3\n.text:00000000004069d5\n.text:00000000004069d7\n.text:00000000004069d9\n.text:00000000004069da\n.text:00000000004069de\n.text:00000000004069e1\n.text:00000000004069e4\n.text:00000000004069eb\n.text:00000000004069f2\n.text:00000000004069f5\n.text:00000000004069fc\n.text:00000000004069ff\n.text:0000000000406a06\n.text:0000000000406a0d\n.text:0000000000406a11\n.text:0000000000406a14\n.text:0000000000406a19\n.text:0000000000406a1d\n.text:0000000000406a20\n.text:0000000000406a23\n.text:0000000000406a26\n.text:0000000000406a2a\n.text:0000000000406a32\n.text:0000000000406a37\n.text:0000000000406a3b\n.text:0000000000406a40\n.text:0000000000406a45\n.text:0000000000406a4a\n.text:0000000000406a4f\n.text:0000000000406a50\n.text:0000000000406a54\n.text:0000000000406a57\n.text:0000000000406a5b\n.text:0000000000406a5e\n.text:0000000000406a61\n.text:0000000000406a68\n.text:0000000000406a6b\n.text:0000000000406a6e\n.text:0000000000406a71\n.text:0000000000406a76\n.text:0000000000406a79\n.text:0000000000406a7c\n.text:0000000000406a7f\n.text:0000000000406a83\n.text:0000000000406a86\n.text:0000000000406a89\n.text:0000000000406a8e\n.text:0000000000406a91\n.text:0000000000406a94\n.text:0000000000406a99\n.text:0000000000406a9c\n.text:0000000000406aa0\n.text:0000000000406aa3\n.text:0000000000406aa8\n.text:0000000000406aab\n.text:0000000000406aaf\n.text:0000000000406ab2\n.text:0000000000406ab9\n.text:0000000000406abd\n.text:0000000000406ac0\n.text:0000000000406ac3\n.text:0000000000406ac8\n.text:0000000000406acb\n.text:0000000000406ace\n.text:0000000000406ad2\n.text:0000000000406ad6\n.text:0000000000406ad9\n.text:0000000000406adc\n.text:0000000000406ae1\n.text:0000000000406ae4\n.text:0000000000406ae7\n.text:0000000000406aec\n.text:0000000000406aef\n.text:0000000000406af3\n.text:0000000000406af7\n.text:0000000000406afa\n.text:0000000000406afe\n.text:0000000000406b01\n.text:0000000000406b08\n.text:0000000000406b0c\n.text:0000000000406b0f\n.text:0000000000406b12\n.text:0000000000406b17\n.text:0000000000406b1a\n.text:0000000000406b1d\n.text:0000000000406b21\n.text:0000000000406b25\n.text:0000000000406b28\n.text:0000000000406b2b\n.text:0000000000406b30\n.text:0000000000406b33\n.text:0000000000406b36\n.text:0000000000406b3b\n.text:0000000000406b3e\n.text:0000000000406b42\n.text:0000000000406b46\n.text:0000000000406b49\n.text:0000000000406b4e\n.text:0000000000406b51\n.text:0000000000406b55\n.text:0000000000406b58\n.text:0000000000406b5f\n.text:0000000000406b63\n.text:0000000000406b66\n.text:0000000000406b69\n.text:0000000000406b6e\n.text:0000000000406b71\n.text:0000000000406b74\n.text:0000000000406b78\n.text:0000000000406b7c\n.text:0000000000406b7f\n.text:0000000000406b82\n.text:0000000000406b86\n.text:0000000000406b8b\n.text:0000000000406b8e\n.text:0000000000406b91\n.text:0000000000406b96\n.text:0000000000406b99\n.text:0000000000406b9d\n.text:0000000000406ba1\n.text:0000000000406ba5\n.text:0000000000406baa\n.text:0000000000406bb0\n.text:0000000000406bb5\n.text:0000000000406bbc\n.text:0000000000406bc0\n.text:0000000000406bc5\n.text:0000000000406bca\n.text:0000000000406bcf\n.text:0000000000406bd0\n.text:0000000000406bd3\n.text:0000000000406bd7\n.text:0000000000406bda\n.text:0000000000406bdd\n.text:0000000000406be4\n.text:0000000000406be8\n.text:0000000000406beb\n.text:0000000000406bee\n.text:0000000000406bf3\n.text:0000000000406bf6\n.text:0000000000406bf9\n.text:0000000000406bfd\n.text:0000000000406c01\n.text:0000000000406c04\n.text:0000000000406c07\n.text:0000000000406c0c\n.text:0000000000406c0f\n.text:0000000000406c12\n.text:0000000000406c17\n.text:0000000000406c1a\n.text:0000000000406c1f\n.text:0000000000406c22\n.text:0000000000406c25\n.text:0000000000406c28\n.text:0000000000406c2d\n.text:0000000000406c30\n.text:0000000000406c34\n.text:0000000000406c37\n.text:0000000000406c3e\n.text:0000000000406c42\n.text:0000000000406c45\n.text:0000000000406c48\n.text:0000000000406c4d\n.text:0000000000406c50\n.text:0000000000406c53\n.text:0000000000406c57\n.text:0000000000406c5b\n.text:0000000000406c5e\n.text:0000000000406c61\n.text:0000000000406c66\n.text:0000000000406c69\n.text:0000000000406c6c\n.text:0000000000406c71\n.text:0000000000406c74\n.text:0000000000406c79\n.text:0000000000406c7e\n.text:0000000000406c81\n.text:0000000000406c85\n.text:0000000000406c88\n.text:0000000000406c8f\n.text:0000000000406c93\n.text:0000000000406c96\n.text:0000000000406c99\n.text:0000000000406c9e\n.text:0000000000406ca1\n.text:0000000000406ca4\n.text:0000000000406ca8\n.text:0000000000406cac\n.text:0000000000406caf\n.text:0000000000406cb2\n.text:0000000000406cb7\n.text:0000000000406cba\n.text:0000000000406cbd\n.text:0000000000406cc2\n.text:0000000000406cc5\n.text:0000000000406cca\n.text:0000000000406ccd\n.text:0000000000406cd2\n.text:0000000000406cd5\n.text:0000000000406cd9\n.text:0000000000406cdc\n.text:0000000000406ce3\n.text:0000000000406ce7\n.text:0000000000406cea\n.text:0000000000406ced\n.text:0000000000406cf2\n.text:0000000000406cf5\n.text:0000000000406cf8\n.text:0000000000406cfc\n.text:0000000000406d00\n.text:0000000000406d03\n.text:0000000000406d06\n.text:0000000000406d0b\n.text:0000000000406d0e\n.text:0000000000406d11\n.text:0000000000406d16\n.text:0000000000406d19\n.text:0000000000406d1e\n.text:0000000000406d22\n.text:0000000000406d26\n.text:0000000000406d2a\n.text:0000000000406d2e\n.text:0000000000406d33\n.text:0000000000406d37\n.text:0000000000406d3a\n.text:0000000000406d40\n.text:0000000000406d45\n.text:0000000000406d4c\n.text:0000000000406d53\n.text:0000000000406d57\n.text:0000000000406d58\n.text:0000000000406d5a\n.text:0000000000406d5c\n.text:0000000000406d5e\n.text:0000000000406d60\n.text:0000000000406d61\n'
p363
tp364
sS'c_isspace'
p365
(S'\n__stdcall c_isspace()\n'
p366
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p367
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00408005\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p368
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p369
S'.text:0000000000407ff0\n.text:0000000000407ff3\n.text:0000000000407ff6\n.text:0000000000407ff8\n.text:0000000000407ffd\n.text:0000000000407fff\n.text:0000000000408001\n.text:0000000000408004\n.text:0000000000408005\n.text:0000000000408007\n'
p370
tp371
sS'open'
p372
(S'\n__stdcall open(char * __file, int __oflag)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060d228)();\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060d228]\n'
p375
S'ff 25 92 b5 20 00\n'
p376
S'.plt:0000000000401c90\n'
p377
tp378
sS'quotearg_n_custom_mem'
p379
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p380
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060d3c0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060d3b0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d3a0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d390]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404bb0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405a40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p382
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 57 75 20 00\n48 89 44 24 30\n0f 10 05 3b 75 20 00\n0f 29 44 24 20\n0f 10 05 1f 75 20 00\n0f 29 44 24 10\n0f 10 05 03 75 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p383
S'.text:0000000000405e50\n.text:0000000000405e51\n.text:0000000000405e53\n.text:0000000000405e55\n.text:0000000000405e56\n.text:0000000000405e5a\n.text:0000000000405e5d\n.text:0000000000405e60\n.text:0000000000405e62\n.text:0000000000405e69\n.text:0000000000405e6e\n.text:0000000000405e75\n.text:0000000000405e7a\n.text:0000000000405e81\n.text:0000000000405e86\n.text:0000000000405e8d\n.text:0000000000405e91\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9c\n.text:0000000000405e9e\n.text:0000000000405ea1\n.text:0000000000405ea4\n.text:0000000000405ea7\n.text:0000000000405eac\n.text:0000000000405eb0\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb5\n.text:0000000000405eb6\n'
p384
tp385
sS'_init'
p386
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p387
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060cff8;\u000a  if (PTR___gmon_start___0060cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060cff8]\nTEST RAX,RAX\nJZ 0x00401852\nCALL RAX\nADD RSP,0x8\nRET\n'
p389
S'48 83 ec 08\n48 8b 05 ad b7 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p390
S'.init:0000000000401840\n.init:0000000000401844\n.init:000000000040184b\n.init:000000000040184e\n.init:0000000000401850\n.init:0000000000401852\n.init:0000000000401856\n'
p391
tp392
sS'set_quoting_flags'
p393
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p394
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'TEST RDI,RDI\nMOV ECX,0x60d390\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p396
S'48 85 ff\nb9 90 d3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p397
S'.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b98\n.text:0000000000404b9c\n.text:0000000000404b9f\n.text:0000000000404ba2\n'
p398
tp399
sS'realloc'
p400
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060d1d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060d1d8]\n'
p403
S'ff 25 e2 b5 20 00\n'
p404
S'.plt:0000000000401bf0\n'
p405
tp406
sS'localeconv'
p407
(S'\n__stdcall localeconv()\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0060d078)();\u000a  return plVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060d078]\n'
p410
S'ff 25 42 b7 20 00\n'
p411
S'.plt:0000000000401930\n'
p412
tp413
sS'__fprintf_chk'
p414
(S'\n__stdcall __fprintf_chk()\n'
p415
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060d278)();\u000a  return;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060d278]\n'
p417
S'ff 25 42 b5 20 00\n'
p418
S'.plt:0000000000401d30\n'
p419
tp420
sS'get_charset_aliases'
p421
(S'\n__stdcall get_charset_aliases()\n'
p422
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a         + 0x1d7;\u000a    return \u000a           "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a           + 0x1d7;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00408404_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00408404_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00408404_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00408404_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00408404_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00408404_caseD_9;\u000a      case -1:\u000a        goto switchD_00408404_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040845d:\u000a  __s = \u000a        "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a        + 0x1d7;\u000aLAB_00408463:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00408404_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408463;\u000a  }\u000a  goto LAB_0040845d;\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060d4d8]\nTEST R15,R15\nJNZ 0x00408472\nMOV EDI,0x40aa34\nCALL 0x00401870\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408228\nCMP byte ptr [RBX],0x0\nJNZ 0x0040822d\nMOV EBX,0x40aa44\nMOV RDI,RBX\nCALL 0x004019d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408247\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408249\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401b90\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040829d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401b30\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004082a8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004082c5\nMOV R15D,0x4093fa\nJMP 0x0040846b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401c90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040845d\nMOV ESI,0x40a047\nMOV EDI,EBP\nCALL 0x00401c10\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408424\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004083f0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004018f0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004018f0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004083f0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401bc0\nMOV ESI,0x40aa53\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401a90\nCMP EAX,0x2\nJL 0x00408444\nMOV RDI,R12\nCALL 0x004019d0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004019d0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004083cd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401bf0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408314\nJMP 0x0040842d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401b90\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408314\nJMP 0x0040842d\nMOV RDI,RBX\nCALL 0x00401910\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408357\nJMP qword ptr [0x40a8f8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401910\nCMP EAX,-0x1\nJZ 0x00408444\nCMP EAX,0xa\nJNZ 0x00408410\nJMP 0x004083f0\nMOV EDI,EBP\nCALL 0x00401ab0\nJMP 0x0040845d\nMOV RDI,R15\nCALL 0x00401880\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00407c10\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040845d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408463\nMOV R15D,0x4093fa\nMOV RDI,R13\nCALL 0x00401880\nMOV qword ptr [0x0060d4d8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p424
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d d0 52 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 34 aa 40 00\ne8 55 96 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 44 aa 40 00\n48 89 df\ne8 9b 97 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 99 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 98 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf fa 93 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc 99 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 47 a0 40 00\n89 ef\ne8 26 99 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 bb 95 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 ab 95 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 5f 98 ff ff\nbe 53 aa 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 1a 97 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 49 96 ff ff\n49 89 c4\n48 89 ef\ne8 3e 96 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 36 98 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 97 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 18 95 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd f8 a8 40 00\n48 89 df\ne8 f8 94 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 85 96 ff ff\neb 30\n4c 89 ff\ne8 4b 94 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 c4 f7 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf fa 93 40 00\n4c 89 ef\ne8 15 94 ff ff\n4c 89 3d 66 50 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p425
S'.text:00000000004081f0\n.text:00000000004081f1\n.text:00000000004081f3\n.text:00000000004081f5\n.text:00000000004081f7\n.text:00000000004081f9\n.text:00000000004081fa\n.text:0000000000408201\n.text:0000000000408208\n.text:000000000040820b\n.text:0000000000408211\n.text:0000000000408216\n.text:000000000040821b\n.text:000000000040821e\n.text:0000000000408221\n.text:0000000000408223\n.text:0000000000408226\n.text:0000000000408228\n.text:000000000040822d\n.text:0000000000408230\n.text:0000000000408235\n.text:0000000000408238\n.text:000000000040823b\n.text:000000000040823d\n.text:0000000000408242\n.text:0000000000408245\n.text:0000000000408247\n.text:0000000000408249\n.text:000000000040824d\n.text:0000000000408252\n.text:0000000000408257\n.text:000000000040825a\n.text:000000000040825d\n.text:000000000040825f\n.text:0000000000408262\n.text:0000000000408265\n.text:0000000000408268\n.text:000000000040826d\n.text:0000000000408270\n.text:0000000000408273\n.text:0000000000408276\n.text:0000000000408278\n.text:000000000040827e\n.text:0000000000408288\n.text:000000000040828d\n.text:0000000000408297\n.text:000000000040829b\n.text:000000000040829d\n.text:00000000004082a3\n.text:00000000004082a8\n.text:00000000004082b2\n.text:00000000004082b7\n.text:00000000004082c1\n.text:00000000004082c5\n.text:00000000004082ca\n.text:00000000004082cc\n.text:00000000004082cf\n.text:00000000004082d4\n.text:00000000004082d6\n.text:00000000004082d8\n.text:00000000004082de\n.text:00000000004082e3\n.text:00000000004082e5\n.text:00000000004082ea\n.text:00000000004082ed\n.text:00000000004082f0\n.text:00000000004082f6\n.text:00000000004082fb\n.text:0000000000408300\n.text:0000000000408302\n.text:0000000000408307\n.text:000000000040830a\n.text:000000000040830f\n.text:0000000000408314\n.text:0000000000408319\n.text:000000000040831c\n.text:000000000040831f\n.text:0000000000408322\n.text:0000000000408325\n.text:0000000000408328\n.text:000000000040832d\n.text:0000000000408330\n.text:0000000000408335\n.text:0000000000408338\n.text:000000000040833d\n.text:0000000000408340\n.text:0000000000408345\n.text:000000000040834a\n.text:000000000040834d\n.text:0000000000408352\n.text:0000000000408357\n.text:0000000000408359\n.text:000000000040835c\n.text:0000000000408361\n.text:0000000000408366\n.text:0000000000408368\n.text:000000000040836b\n.text:000000000040836e\n.text:0000000000408371\n.text:0000000000408376\n.text:0000000000408379\n.text:000000000040837f\n.text:0000000000408382\n.text:0000000000408387\n.text:000000000040838a\n.text:000000000040838d\n.text:0000000000408392\n.text:0000000000408395\n.text:000000000040839a\n.text:000000000040839f\n.text:00000000004083a2\n.text:00000000004083a4\n.text:00000000004083a8\n.text:00000000004083ad\n.text:00000000004083b2\n.text:00000000004083b5\n.text:00000000004083ba\n.text:00000000004083bd\n.text:00000000004083c2\n.text:00000000004083c5\n.text:00000000004083cb\n.text:00000000004083cd\n.text:00000000004083d2\n.text:00000000004083d6\n.text:00000000004083db\n.text:00000000004083de\n.text:00000000004083e1\n.text:00000000004083e7\n.text:00000000004083f0\n.text:00000000004083f3\n.text:00000000004083f8\n.text:00000000004083fb\n.text:00000000004083fe\n.text:0000000000408404\n.text:0000000000408410\n.text:0000000000408413\n.text:0000000000408418\n.text:000000000040841b\n.text:000000000040841d\n.text:0000000000408420\n.text:0000000000408422\n.text:0000000000408424\n.text:0000000000408426\n.text:000000000040842b\n.text:000000000040842d\n.text:0000000000408430\n.text:0000000000408435\n.text:0000000000408437\n.text:000000000040843c\n.text:000000000040843f\n.text:0000000000408444\n.text:0000000000408447\n.text:000000000040844c\n.text:0000000000408451\n.text:0000000000408454\n.text:0000000000408456\n.text:000000000040845b\n.text:000000000040845d\n.text:0000000000408463\n.text:0000000000408466\n.text:000000000040846b\n.text:0000000000408472\n.text:0000000000408475\n.text:000000000040847c\n.text:000000000040847d\n.text:000000000040847f\n.text:0000000000408481\n.text:0000000000408483\n.text:0000000000408485\n.text:0000000000408486\n'
p426
tp427
sS'nl_langinfo'
p428
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060d1b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060d1b8]\n'
p431
S'ff 25 02 b6 20 00\n'
p432
S'.plt:0000000000401bb0\n'
p433
tp434
sS'x2realloc'
p435
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p436
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'MOV EDX,0x1\nJMP 0x00407690\n'
p438
S'ba 01 00 00 00\neb 89\n'
p439
S'.text:0000000000407700\n.text:0000000000407705\n'
p440
tp441
sS'strlen'
p442
(S'\n__stdcall strlen(char * __s)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060d0c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060d0c8]\n'
p445
S'ff 25 f2 b6 20 00\n'
p446
S'.plt:00000000004019d0\n'
p447
tp448
sS'memcmp'
p449
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060d150)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060d150]\n'
p452
S'ff 25 6a b6 20 00\n'
p453
S'.plt:0000000000401ae0\n'
p454
tp455
sS'quotearg_n_style_mem'
p456
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p457
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00405c70\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405a40\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000405cd0\n.text:0000000000405cd1\n.text:0000000000405cd3\n.text:0000000000405cd5\n.text:0000000000405cd6\n.text:0000000000405cda\n.text:0000000000405cdd\n.text:0000000000405ce0\n.text:0000000000405ce2\n.text:0000000000405ce5\n.text:0000000000405ce8\n.text:0000000000405ced\n.text:0000000000405cef\n.text:0000000000405cf2\n.text:0000000000405cf5\n.text:0000000000405cf8\n.text:0000000000405cfd\n.text:0000000000405d01\n.text:0000000000405d02\n.text:0000000000405d04\n.text:0000000000405d06\n.text:0000000000405d07\n'
p461
tp462
sS'_exit'
p463
(S'\n__stdcall _exit(int __status)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060d050)();\u000a  return;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060d050]\n'
p466
S'ff 25 6a b7 20 00\n'
p467
S'.plt:00000000004018e0\n'
p468
tp469
sS'passname'
p470
(S'\n__stdcall passname(uchar * data, char * name)\n'
p471
V\u000avoid passname(uchar *data,char *name)\u000a\u000a{\u000a  ulong in_RAX;\u000a  \u000a  if (data != (uchar *)0x0) {\u000a    __sprintf_chk(name,1,0xffffffffffffffff,"%02x%02x%02x",(ulong)*data,(ulong)data[1],\u000a                  in_RAX & 0xffffffff00000000 | (ulong)data[2]);\u000a    return;\u000a  }\u000a  name[6] = 0;\u000a  *(undefined2 *)(name + 4) = 0x6d6f;\u000a  *(undefined4 *)name = 0x646e6172;\u000a  return;\u000a}\u000a\u000a
p472
S'MOV R10,RSI\nTEST RDI,RDI\nJZ 0x00403676\nPUSH RAX\nMOVZX R8D,byte ptr [RDI]\nMOVZX R9D,byte ptr [RDI + 0x1]\nMOVZX EAX,byte ptr [RDI + 0x2]\nMOV dword ptr [RSP],EAX\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40989c\nXOR EAX,EAX\nMOV RDI,R10\nCALL 0x00401d70\nPOP RAX\nRET\nMOV byte ptr [R10 + 0x6],0x0\nMOV word ptr [R10 + 0x4],0x6d6f\nMOV dword ptr [R10],0x646e6172\nRET\n'
p473
S'49 89 f2\n48 85 ff\n74 2e\n50\n44 0f b6 07\n44 0f b6 4f 01\n0f b6 47 02\n89 04 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 9c 98 40 00\n31 c0\n4c 89 d7\ne8 fc e6 ff ff\n58\nc3\n41 c6 42 06 00\n66 41 c7 42 04 6f 6d\n41 c7 02 72 61 6e 64\nc3\n'
p474
S'.text:0000000000403640\n.text:0000000000403643\n.text:0000000000403646\n.text:0000000000403648\n.text:0000000000403649\n.text:000000000040364d\n.text:0000000000403652\n.text:0000000000403656\n.text:0000000000403659\n.text:000000000040365e\n.text:0000000000403665\n.text:000000000040366a\n.text:000000000040366c\n.text:000000000040366f\n.text:0000000000403674\n.text:0000000000403675\n.text:0000000000403676\n.text:000000000040367b\n.text:0000000000403682\n.text:0000000000403689\n'
p475
tp476
sS'xdectoumax'
p477
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p478
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p479
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x004077e0\nPOP RCX\nRET\n'
p480
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p481
S'.text:00000000004078b0\n.text:00000000004078b1\n.text:00000000004078b4\n.text:00000000004078b7\n.text:00000000004078ba\n.text:00000000004078bd\n.text:00000000004078c1\n.text:00000000004078c6\n.text:00000000004078c9\n.text:00000000004078cc\n.text:00000000004078d1\n.text:00000000004078d2\n'
p482
tp483
sS'bkm_scale_by_power'
p484
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p485
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p486
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00407bb1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00407b50\nOR EBP,EAX\nDEC EBX\nJNZ 0x00407ba0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p487
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p488
S'.text:0000000000407b80\n.text:0000000000407b81\n.text:0000000000407b83\n.text:0000000000407b85\n.text:0000000000407b86\n.text:0000000000407b87\n.text:0000000000407b89\n.text:0000000000407b8c\n.text:0000000000407b8f\n.text:0000000000407b91\n.text:0000000000407b93\n.text:0000000000407b95\n.text:0000000000407ba0\n.text:0000000000407ba3\n.text:0000000000407ba6\n.text:0000000000407bab\n.text:0000000000407bad\n.text:0000000000407baf\n.text:0000000000407bb1\n.text:0000000000407bb3\n.text:0000000000407bb7\n.text:0000000000407bb8\n.text:0000000000407bba\n.text:0000000000407bbc\n.text:0000000000407bbd\n'
p489
tp490
sS'argmatch_valid'
p491
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p492
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00403ca7:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00403ca7;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_004099c6,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060d1a0)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x4099a9\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d360]\nMOV RDI,RAX\nCALL 0x00401af0\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060d360]\nJZ 0x00403d0a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00403ca7\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401ae0\nTEST EAX,EAX\nJZ 0x00403cd0\nMOV RDI,RBX\nCALL 0x00405f30\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4099be\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d30\nMOV RBP,R13\nJMP 0x00403cef\nMOV RDI,RBX\nCALL 0x00405f30\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4099c6\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d30\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060d360]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00403c90\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401b80\n'
p494
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe a9 99 40 00\nba 05 00 00 00\ne8 4b dd ff ff\n48 8b 35 f4 96 20 00\n48 89 c7\ne8 7c de ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 db 96 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 3d de ff ff\n85 c0\n74 29\n48 89 df\ne8 81 22 00 00\n48 89 c1\nbe 01 00 00 00\nba be 99 40 00\n31 c0\n4c 89 e7\ne8 6a e0 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 58 22 00 00\n48 89 c1\nbe 01 00 00 00\nba c6 99 40 00\n31 c0\n4c 89 e7\ne8 41 e0 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 5e 96 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 5b de ff ff\n'
p495
S'.text:0000000000403c40\n.text:0000000000403c41\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c47\n.text:0000000000403c49\n.text:0000000000403c4a\n.text:0000000000403c4b\n.text:0000000000403c4e\n.text:0000000000403c51\n.text:0000000000403c54\n.text:0000000000403c56\n.text:0000000000403c5b\n.text:0000000000403c60\n.text:0000000000403c65\n.text:0000000000403c6c\n.text:0000000000403c6f\n.text:0000000000403c74\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c7e\n.text:0000000000403c85\n.text:0000000000403c8b\n.text:0000000000403c8d\n.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca3\n.text:0000000000403ca5\n.text:0000000000403ca7\n.text:0000000000403caa\n.text:0000000000403caf\n.text:0000000000403cb2\n.text:0000000000403cb7\n.text:0000000000403cbc\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc6\n.text:0000000000403cc9\n.text:0000000000403cd0\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdb\n.text:0000000000403ce0\n.text:0000000000403ce5\n.text:0000000000403ce7\n.text:0000000000403cea\n.text:0000000000403cef\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403d02\n.text:0000000000403d05\n.text:0000000000403d08\n.text:0000000000403d0a\n.text:0000000000403d0f\n.text:0000000000403d12\n.text:0000000000403d16\n.text:0000000000403d17\n.text:0000000000403d19\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d1f\n.text:0000000000403d20\n'
p496
tp497
sS'xrealloc'
p498
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p499
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p500
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00407677\nTEST RBX,RBX\nJNZ 0x00407677\nCALL 0x00401880\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401bf0\nTEST RBX,RBX\nJZ 0x00407689\nTEST RAX,RAX\nJZ 0x0040768b\nPOP RBX\nRET\nCALL 0x004077b0\n'
p501
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 0d a2 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 71 a5 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p502
S'.text:0000000000407660\n.text:0000000000407661\n.text:0000000000407664\n.text:0000000000407667\n.text:0000000000407669\n.text:000000000040766c\n.text:000000000040766e\n.text:0000000000407673\n.text:0000000000407675\n.text:0000000000407676\n.text:0000000000407677\n.text:000000000040767a\n.text:000000000040767f\n.text:0000000000407682\n.text:0000000000407684\n.text:0000000000407687\n.text:0000000000407689\n.text:000000000040768a\n.text:000000000040768b\n'
p503
tp504
sS'incname'
p505
(S'\n__stdcall incname(char * name, size_t len)\n'
p506
V\u000a_Bool incname(char *name,size_t len)\u000a\u000a{\u000a  char cVar1;\u000a  void *pvVar2;\u000a  char cVar3;\u000a  \u000a  while( true ) {\u000a    if (len == 0) {\u000a      return false;\u000a    }\u000a    pvVar2 = memchr("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.",\u000a                    (int)name[len - 1],0x41);\u000a    if (pvVar2 == (void *)0x0) break;\u000a    cVar1 = *(char *)((long)pvVar2 + 1);\u000a    cVar3 = '0';\u000a    if (cVar1 != 0) {\u000a      cVar3 = cVar1;\u000a    }\u000a    name[len - 1] = cVar3;\u000a    len = len - 1;\u000a    if (cVar1 != 0) {\u000a      return true;\u000a    }\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("p","src/shred.c",0x40b,"_Bool incname(char *, size_t)");\u000a}\u000a\u000a
p507
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nNOP word ptr [RAX + RAX*0x1]\nTEST RBX,RBX\nJZ 0x00403a9d\nMOVSX ESI,byte ptr [R14 + RBX*0x1 + -0x1]\nMOV EDI,0x408950\nMOV EDX,0x41\nCALL 0x00401ac0\nTEST RAX,RAX\nJZ 0x00403aa7\nLEA RCX,[RBX + -0x1]\nMOVZX EAX,byte ptr [RAX + 0x1]\nTEST AL,AL\nMOV DL,0x30\nJZ 0x00403a8f\nMOV EDX,EAX\nMOV byte ptr [R14 + RBX*0x1 + -0x1],DL\nMOV RBX,RCX\nJZ 0x00403a60\nMOV AL,0x1\nJMP 0x00403a9f\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40973c\nMOV ESI,0x409942\nMOV EDX,0x40b\nMOV ECX,0x40994e\nCALL 0x00401a70\n'
p508
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n66 0f 1f 44 00 00\n48 85 db\n74 38\n41 0f be 74 1e ff\nbf 50 89 40 00\nba 41 00 00 00\ne8 46 e0 ff ff\n48 85 c0\n74 28\n48 8d 4b ff\n0f b6 40 01\n84 c0\nb2 30\n74 02\n89 c2\n41 88 54 1e ff\n48 89 cb\n74 c7\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\nbf 3c 97 40 00\nbe 42 99 40 00\nba 0b 04 00 00\nb9 4e 99 40 00\ne8 b0 df ff ff\n'
p509
S'.text:0000000000403a50\n.text:0000000000403a52\n.text:0000000000403a53\n.text:0000000000403a54\n.text:0000000000403a57\n.text:0000000000403a5a\n.text:0000000000403a60\n.text:0000000000403a63\n.text:0000000000403a65\n.text:0000000000403a6b\n.text:0000000000403a70\n.text:0000000000403a75\n.text:0000000000403a7a\n.text:0000000000403a7d\n.text:0000000000403a7f\n.text:0000000000403a83\n.text:0000000000403a87\n.text:0000000000403a89\n.text:0000000000403a8b\n.text:0000000000403a8d\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a97\n.text:0000000000403a99\n.text:0000000000403a9b\n.text:0000000000403a9d\n.text:0000000000403a9f\n.text:0000000000403aa3\n.text:0000000000403aa4\n.text:0000000000403aa6\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403ab1\n.text:0000000000403ab6\n.text:0000000000403abb\n'
p510
tp511
sS'do_wipefd'
p512
(S'\n__stdcall do_wipefd(char * qname, randint_source * s, Options * flags)\n'
p513
V\u000a_Bool do_wipefd(char *qname,randint_source *s,Options *flags)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int __fd;\u000a  undefined8 uVar3;\u000a  int *dest;\u000a  randread_source *n;\u000a  uint *puVar4;\u000a  long in_RCX;\u000a  undefined uVar5;\u000a  ulong uVar6;\u000a  FILE *pFVar7;\u000a  char *pcVar8;\u000a  FILE *pFVar9;\u000a  FILE *pFVar10;\u000a  ulong k;\u000a  off_t pass_size;\u000a  FILE *local_f8;\u000a  FILE *local_c8;\u000a  undefined local_c0 [24];\u000a  uint local_a8;\u000a  FILE *local_90;\u000a  FILE *local_88;\u000a  \u000a  __fd = (int)qname;\u000a  iVar1 = fstat(__fd,(stat *)(&local_c8 + 8));\u000a  if (iVar1 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar2 = *puVar4;\u000a    uVar3 = dcgettext(0,"%s: fstat failed",5);\u000a    uVar6 = (ulong)uVar2;\u000a    goto LAB_00402893;\u000a  }\u000a  if (((local_a8 & 0xf000) == 0x2000) && (iVar1 = isatty(__fd), iVar1 != 0)) {\u000aLAB_00402877:\u000a    pcVar8 = "%s: invalid file type";\u000a  }\u000a  else {\u000a    uVar2 = local_a8 & 0xf000;\u000a    if (uVar2 != 0x8000) {\u000a      if ((uVar2 != 0x1000) && (uVar2 != 0xc000)) goto LAB_004028c0;\u000a      goto LAB_00402877;\u000a    }\u000a    if (-1 < (long)local_90) {\u000aLAB_004028c0:\u000a      dest = (int *)xnmalloc(*(size_t *)(in_RCX + 8),4);\u000a      local_f8 = *(FILE **)(in_RCX + 0x10);\u000a      if (local_f8 == (FILE *)0xffffffffffffffff) {\u000a        if ((local_a8 & 0xf000) != 0x8000) {\u000a          pFVar9 = (FILE *)lseek(__fd,0,2);\u000a          pFVar7 = (FILE *)0x0;\u000a          local_f8 = (FILE *)0xffffffffffffffff;\u000a          if (0 < (long)pFVar9) {\u000a            pFVar7 = (FILE *)0x0;\u000a            local_f8 = pFVar9;\u000a          }\u000a          goto LAB_00402981;\u000a        }\u000a        if (*(char *)(in_RCX + 0x1d) == 0) {\u000a          pFVar9 = (FILE *)0x200;\u000a          if (local_88 < (FILE *)0x2000000000000001) {\u000a            pFVar9 = local_88;\u000a          }\u000a          if ((long)local_88 < 1) {\u000a            pFVar9 = (FILE *)0x200;\u000a          }\u000a          pFVar7 = (FILE *)0x0;\u000a          if ((long)local_90 < (long)pFVar9) {\u000a            pFVar7 = local_90;\u000a          }\u000a          if (local_90 == (FILE *)0x0) {\u000a            pFVar7 = local_90;\u000a          }\u000a          if ((long)local_90 % (long)pFVar9 == 0) {\u000a            local_f8 = local_90;\u000a          }\u000a          else {\u000a            pFVar10 = (FILE *)0x200;\u000a            if (local_88 < (FILE *)0x2000000000000001) {\u000a              pFVar10 = local_88;\u000a            }\u000a            if ((long)local_88 < 1) {\u000a              pFVar10 = (FILE *)0x200;\u000a            }\u000a            pFVar10 = (FILE *)((long)pFVar10 - (long)local_90 % (long)pFVar9);\u000a            pFVar9 = (FILE *)(0x7fffffffffffffff - (long)local_90);\u000a            if ((long)pFVar10 <= (long)(FILE *)(0x7fffffffffffffff - (long)local_90)) {\u000a              pFVar9 = pFVar10;\u000a            }\u000a            local_f8 = (FILE *)((long)&pFVar9->_flags + (long)&local_90->_flags);\u000a          }\u000a          goto LAB_00402981;\u000a        }\u000a        local_f8 = local_90;\u000a      }\u000a      else {\u000a        if ((local_a8 & 0xf000) == 0x8000) {\u000a          pFVar9 = (FILE *)0x200;\u000a          if (local_88 < (FILE *)0x2000000000000001) {\u000a            pFVar9 = local_88;\u000a          }\u000a          if ((long)local_88 < 1) {\u000a            pFVar9 = (FILE *)0x200;\u000a          }\u000a          if ((long)local_f8 < (long)pFVar9) {\u000a            pFVar9 = local_f8;\u000a          }\u000a          pFVar7 = (FILE *)0x0;\u000a          if ((long)local_90 < (long)pFVar9) {\u000a            pFVar7 = local_90;\u000a          }\u000a          goto LAB_00402981;\u000a        }\u000a      }\u000a      pFVar7 = (FILE *)0x0;\u000aLAB_00402981:\u000a      genpattern(dest,*(size_t *)(in_RCX + 8),(randint_source *)flags);\u000a      n = randint_get_source((randint_source *)flags);\u000a      uVar5 = 1;\u000a      if (pFVar7 != (FILE *)0x0) goto LAB_004029ce;\u000a      do {\u000a        pFVar7 = local_f8;\u000a        if (local_f8 == (FILE *)0x0) {\u000a          if (((*(int *)(in_RCX + 0x18) != 0) && (__fd = ftruncate(__fd,0), __fd != 0)) &&\u000a             ((local_a8 & 0xf000) == 0x8000)) {\u000a            puVar4 = (uint *)__errno_location();\u000a            uVar2 = *puVar4;\u000a            uVar5 = 0;\u000a            uVar3 = dcgettext(0,"%s: error truncating",5);\u000a            error(0,(ulong)uVar2,uVar3,s);\u000a          }\u000aLAB_00402abf:\u000a          free(dest);\u000a          return (_Bool)uVar5;\u000a        }\u000a        local_f8 = (FILE *)0x0;\u000aLAB_004029ce:\u000a        uVar6 = 0;\u000a        local_c8 = pFVar7;\u000a        while (uVar6 < (ulong)*(byte *)(in_RCX + 0x1e) + *(ulong *)(in_RCX + 8)) {\u000a          k = 0;\u000a          if (uVar6 < *(ulong *)(in_RCX + 8)) {\u000a            k = (ulong)(uint)dest[uVar6];\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          iVar1 = dopass((stat *)((ulong)qname & 0xffffffff),&local_c8 + 8,(off_t *)s,\u000a                         (randread_source *)&local_c8,k,(ulong)n);\u000a          if ((iVar1 != 0) && (uVar5 = 0, iVar1 < 0)) {\u000a            uVar5 = 0;\u000a            goto LAB_00402abf;\u000a          }\u000a        }\u000a      } while( true );\u000a    }\u000a    pcVar8 = "%s: file has negative size";\u000a  }\u000a  uVar3 = dcgettext(0,pcVar8,5);\u000a  uVar6 = 0;\u000aLAB_00402893:\u000a  error(0,uVar6,uVar3,s);\u000a  return false;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xc8\nMOV RBX,RCX\nMOV R12,RDX\nMOV qword ptr [RSP + 0x8],RSI\nMOV EBP,EDI\nCMP byte ptr [RBX + 0x1c],0x0\nJZ 0x004027fe\nMOVZX EAX,byte ptr [RBX + 0x1e]\nADD RAX,qword ptr [RBX + 0x8]\nJMP 0x00402800\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nLEA RSI,[RSP + 0x38]\nMOV EDI,EBP\nCALL 0x00408550\nTEST EAX,EAX\nJZ 0x0040283a\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x409799\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nJMP 0x00402893\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x50]\nCMP EAX,0x2000\nJNZ 0x00402855\nMOV EDI,EBP\nCALL 0x00401920\nTEST EAX,EAX\nJNZ 0x00402877\nMOVZX EAX,word ptr [RSP + 0x50]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x004028b4\nMOVZX EAX,AX\nCMP EAX,0x1000\nJZ 0x00402877\nCMP EAX,0xc000\nJNZ 0x004028c0\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4097aa\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x00401c70\nMOV EAX,EBP\nADD RSP,0xc8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP qword ptr [RSP + 0x68],0x0\nJS 0x00402951\nMOV R14,0x2000000000000001\nMOV RDI,qword ptr [RBX + 0x8]\nMOV ESI,0x4\nCALL 0x00407600\nMOV qword ptr [RSP + 0x20],RAX\nMOV RDI,qword ptr [RBX + 0x10]\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x50]\nCMP RDI,-0x1\nMOV dword ptr [RSP + 0x14],EBP\nJZ 0x00402933\nCMP EAX,0x8000\nMOV qword ptr [RSP],RDI\nJNZ 0x0040294d\nMOV RAX,qword ptr [RSP + 0x68]\nMOV RCX,qword ptr [RSP + 0x70]\nCMP RCX,R14\nMOV EDX,0x200\nMOV ESI,0x200\nCMOVC RSI,RCX\nTEST RCX,RCX\nCMOVLE RSI,RDX\nCMP RSI,RDI\nCMOVG RSI,RDI\nXOR EBP,EBP\nCMP RAX,RSI\nCMOVL RBP,RAX\nJMP 0x00402981\nCMP EAX,0x8000\nJNZ 0x0040295f\nMOV RDI,qword ptr [RSP + 0x68]\nCMP byte ptr [RBX + 0x1d],0x0\nJZ 0x00402ad9\nMOV qword ptr [RSP],RDI\nXOR EBP,EBP\nJMP 0x00402981\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4097c0\nJMP 0x00402880\nXOR ESI,ESI\nMOV EDX,0x2\nMOV EDI,EBP\nXOR EBP,EBP\nCALL 0x00401a50\nTEST RAX,RAX\nMOV RCX,-0x1\nCMOVG RCX,RAX\nMOV qword ptr [RSP],RCX\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RDX,R12\nCALL 0x00402b70\nMOV RDI,R12\nCALL 0x00406380\nMOV R13,RAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nLEA R12,[RSP + 0x38]\nLEA R15,[RSP + 0x30]\nTEST RBP,RBP\nJNZ 0x00402a47\nJMP 0x00402a50\nMOV RBP,RAX\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nMOV R14,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x30],RBP\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RBX + 0x8]\nMOVZX ECX,byte ptr [RBX + 0x1e]\nADD RCX,RAX\nCMP RBP,RCX\nJNC 0x00402a40\nXOR R8D,R8D\nCMP RBP,RAX\nJNC 0x00402a01\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R8D,dword ptr [RAX + RBP*0x4]\nINC RBP\nMOV EDI,dword ptr [RSP + 0x14]\nMOV RSI,R12\nMOV RDX,qword ptr [RSP + 0x8]\nMOV RCX,R15\nMOV R9,R13\nPUSH R14\nPUSH RBP\nCALL 0x00402d50\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004029e0\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x18],RCX\nTEST EAX,EAX\nJNS 0x004029e0\nJMP 0x00402abd\nXOR EBP,EBP\nTEST RBP,RBP\nJZ 0x00402a50\nXOR R14D,R14D\nJMP 0x004029ce\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJNZ 0x004029c0\nCMP dword ptr [RBX + 0x18],0x0\nJZ 0x00402ad2\nXOR ESI,ESI\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x00401a40\nTEST EAX,EAX\nJZ 0x00402b53\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x50]\nCMP EAX,0x8000\nMOV RBP,qword ptr [RSP + 0x18]\nJNZ 0x00402abf\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4097db\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x00401c70\nJMP 0x00402abf\nXOR EBP,EBP\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00401880\nAND BPL,0x1\nJMP 0x004028a0\nMOV RBP,qword ptr [RSP + 0x18]\nJMP 0x00402abf\nMOV RAX,qword ptr [RSP + 0x70]\nCMP RAX,R14\nMOV ECX,0x200\nMOV ESI,0x200\nCMOVC RSI,RAX\nTEST RAX,RAX\nCMOVLE RSI,RCX\nMOV RAX,RDI\nCQO\nIDIV RSI\nXOR EBP,EBP\nCMP RDI,RSI\nCMOVL RBP,RDI\nTEST RDI,RDI\nCMOVZ RBP,RDI\nTEST RDX,RDX\nJZ 0x00402b5d\nMOV RAX,qword ptr [RSP + 0x70]\nCMP RAX,R14\nMOV ECX,0x200\nMOV ESI,0x200\nCMOVC RSI,RAX\nTEST RAX,RAX\nCMOVLE RSI,RCX\nSUB RSI,RDX\nMOV RAX,0x7fffffffffffffff\nSUB RAX,RDI\nCMP RSI,RAX\nCMOVLE RAX,RSI\nADD RDI,RAX\nMOV qword ptr [RSP],RDI\nJMP 0x00402981\nMOV RBP,qword ptr [RSP + 0x18]\nJMP 0x00402abf\nMOV qword ptr [RSP],RDI\nJMP 0x00402981\n'
p515
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 00 00 00\n48 89 cb\n49 89 d4\n48 89 74 24 08\n89 fd\n80 7b 1c 00\n74 0a\n0f b6 43 1e\n48 03 43 08\neb 02\n31 c0\n48 89 44 24 28\n48 8d 74 24 38\n89 ef\ne8 3f 5d 00 00\n85 c0\n74 25\ne8 86 f0 ff ff\n8b 18\n31 ed\n31 ff\nbe 99 97 40 00\nba 05 00 00 00\ne8 81 f1 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\neb 59\nb8 00 f0 00 00\n23 44 24 50\n3d 00 20 00 00\n75 0b\n89 ef\ne8 cf f0 ff ff\n85 c0\n75 22\n0f b7 44 24 50\n25 00 f0 00 00\n3d 00 80 00 00\n74 4e\n0f b7 c0\n3d 00 10 00 00\n74 07\n3d 00 c0 00 00\n75 49\n31 ed\n31 ff\nbe aa 97 40 00\nba 05 00 00 00\ne8 26 f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 08\ne8 d0 f3 ff ff\n89 e8\n48 81 c4 c8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 83 7c 24 68 00\n0f 88 91 00 00 00\n49 be 01 00 00 00 00 00 00 20\n48 8b 7b 08\nbe 04 00 00 00\ne8 28 4d 00 00\n48 89 44 24 20\n48 8b 7b 10\nb8 00 f0 00 00\n23 44 24 50\n48 83 ff ff\n89 6c 24 14\n74 3f\n3d 00 80 00 00\n48 89 3c 24\n75 4e\n48 8b 44 24 68\n48 8b 4c 24 70\n4c 39 f1\nba 00 02 00 00\nbe 00 02 00 00\n48 0f 42 f1\n48 85 c9\n48 0f 4e f2\n48 39 fe\n48 0f 4f f7\n31 ed\n48 39 f0\n48 0f 4c e8\neb 4e\n3d 00 80 00 00\n75 25\n48 8b 7c 24 68\n80 7b 1d 00\n0f 84 90 01 00 00\n48 89 3c 24\n31 ed\neb 30\n31 ed\n31 ff\nbe c0 97 40 00\ne9 21 ff ff ff\n31 f6\nba 02 00 00 00\n89 ef\n31 ed\ne8 e1 f0 ff ff\n48 85 c0\n48 c7 c1 ff ff ff ff\n48 0f 4f c8\n48 89 0c 24\n48 8b 73 08\n48 8b 7c 24 20\n4c 89 e2\ne8 de 01 00 00\n4c 89 e7\ne8 e6 39 00 00\n49 89 c5\nb0 01\n48 89 44 24 18\n4c 8d 64 24 38\n4c 8d 7c 24 30\n48 85 ed\n0f 85 90 00 00 00\ne9 94 00 00 00\n48 89 c5\n31 c0\n48 89 04 24\n4c 8b 74 24 28\n48 89 6c 24 30\n31 ed\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 43 08\n0f b6 4b 1e\n48 01 c1\n48 39 cd\n73 50\n45 31 c0\n48 39 c5\n73 09\n48 8b 44 24 20\n44 8b 04 a8\n48 ff c5\n8b 7c 24 14\n4c 89 e6\n48 8b 54 24 08\n4c 89 f9\n4d 89 e9\n41 56\n55\ne8 32 03 00 00\n48 83 c4 10\n85 c0\n74 ba\n31 c9\n48 89 4c 24 18\n85 c0\n79 af\ne9 87 00 00 00\n31 ed\n48 85 ed\n74 09\n45 31 f6\neb 82\n48 8b 04 24\n48 85 c0\n0f 85 63 ff ff ff\n83 7b 18 00\n74 6f\n31 f6\n8b 7c 24 14\ne8 d2 ef ff ff\n85 c0\n0f 84 dd 00 00 00\nb8 00 f0 00 00\n23 44 24 50\n3d 00 80 00 00\n48 8b 6c 24 18\n75 34\ne8 10 ee ff ff\n8b 18\n31 ed\n31 ff\nbe db 97 40 00\nba 05 00 00 00\ne8 0b ef ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\n48 8b 4c 24 08\ne8 b5 f1 ff ff\neb 02\n31 ed\n48 8b 7c 24 20\ne8 b7 ed ff ff\n40 80 e5 01\ne9 ce fd ff ff\n48 8b 6c 24 18\neb e6\n48 8b 44 24 70\n4c 39 f0\nb9 00 02 00 00\nbe 00 02 00 00\n48 0f 42 f0\n48 85 c0\n48 0f 4e f1\n48 89 f8\n48 99\n48 f7 fe\n31 ed\n48 39 f7\n48 0f 4c ef\n48 85 ff\n48 0f 44 ef\n48 85 d2\n74 4a\n48 8b 44 24 70\n4c 39 f0\nb9 00 02 00 00\nbe 00 02 00 00\n48 0f 42 f0\n48 85 c0\n48 0f 4e f1\n48 29 d6\n48 b8 ff ff ff ff ff ff ff 7f\n48 29 f8\n48 39 c6\n48 0f 4e c6\n48 01 c7\n48 89 3c 24\ne9 2e fe ff ff\n48 8b 6c 24 18\ne9 62 ff ff ff\n48 89 3c 24\ne9 1b fe ff ff\n'
p516
S'.text:00000000004027d0\n.text:00000000004027d1\n.text:00000000004027d3\n.text:00000000004027d5\n.text:00000000004027d7\n.text:00000000004027d9\n.text:00000000004027da\n.text:00000000004027e1\n.text:00000000004027e4\n.text:00000000004027e7\n.text:00000000004027ec\n.text:00000000004027ee\n.text:00000000004027f2\n.text:00000000004027f4\n.text:00000000004027f8\n.text:00000000004027fc\n.text:00000000004027fe\n.text:0000000000402800\n.text:0000000000402805\n.text:000000000040280a\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402813\n.text:0000000000402815\n.text:000000000040281a\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402820\n.text:0000000000402825\n.text:000000000040282a\n.text:000000000040282f\n.text:0000000000402832\n.text:0000000000402834\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283a\n.text:000000000040283f\n.text:0000000000402843\n.text:0000000000402848\n.text:000000000040284a\n.text:000000000040284c\n.text:0000000000402851\n.text:0000000000402853\n.text:0000000000402855\n.text:000000000040285a\n.text:000000000040285f\n.text:0000000000402864\n.text:0000000000402866\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402870\n.text:0000000000402875\n.text:0000000000402877\n.text:0000000000402879\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402885\n.text:000000000040288a\n.text:000000000040288d\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402893\n.text:0000000000402896\n.text:000000000040289b\n.text:00000000004028a0\n.text:00000000004028a2\n.text:00000000004028a9\n.text:00000000004028aa\n.text:00000000004028ac\n.text:00000000004028ae\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b3\n.text:00000000004028b4\n.text:00000000004028ba\n.text:00000000004028c0\n.text:00000000004028ca\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028dd\n.text:00000000004028e1\n.text:00000000004028e6\n.text:00000000004028ea\n.text:00000000004028ee\n.text:00000000004028f2\n.text:00000000004028f4\n.text:00000000004028f9\n.text:00000000004028fd\n.text:00000000004028ff\n.text:0000000000402904\n.text:0000000000402909\n.text:000000000040290c\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291a\n.text:000000000040291d\n.text:0000000000402921\n.text:0000000000402924\n.text:0000000000402928\n.text:000000000040292a\n.text:000000000040292d\n.text:0000000000402931\n.text:0000000000402933\n.text:0000000000402938\n.text:000000000040293a\n.text:000000000040293f\n.text:0000000000402943\n.text:0000000000402949\n.text:000000000040294d\n.text:000000000040294f\n.text:0000000000402951\n.text:0000000000402953\n.text:0000000000402955\n.text:000000000040295a\n.text:000000000040295f\n.text:0000000000402961\n.text:0000000000402966\n.text:0000000000402968\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402972\n.text:0000000000402979\n.text:000000000040297d\n.text:0000000000402981\n.text:0000000000402985\n.text:000000000040298a\n.text:000000000040298d\n.text:0000000000402992\n.text:0000000000402995\n.text:000000000040299a\n.text:000000000040299d\n.text:000000000040299f\n.text:00000000004029a4\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b7\n.text:00000000004029c0\n.text:00000000004029c3\n.text:00000000004029c5\n.text:00000000004029c9\n.text:00000000004029ce\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029e0\n.text:00000000004029e4\n.text:00000000004029e8\n.text:00000000004029eb\n.text:00000000004029ee\n.text:00000000004029f0\n.text:00000000004029f3\n.text:00000000004029f6\n.text:00000000004029f8\n.text:00000000004029fd\n.text:0000000000402a01\n.text:0000000000402a04\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a10\n.text:0000000000402a13\n.text:0000000000402a16\n.text:0000000000402a18\n.text:0000000000402a19\n.text:0000000000402a1e\n.text:0000000000402a22\n.text:0000000000402a24\n.text:0000000000402a26\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a31\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a50\n.text:0000000000402a54\n.text:0000000000402a57\n.text:0000000000402a5d\n.text:0000000000402a61\n.text:0000000000402a63\n.text:0000000000402a65\n.text:0000000000402a69\n.text:0000000000402a6e\n.text:0000000000402a70\n.text:0000000000402a76\n.text:0000000000402a7b\n.text:0000000000402a7f\n.text:0000000000402a84\n.text:0000000000402a89\n.text:0000000000402a8b\n.text:0000000000402a90\n.text:0000000000402a92\n.text:0000000000402a94\n.text:0000000000402a96\n.text:0000000000402a9b\n.text:0000000000402aa0\n.text:0000000000402aa5\n.text:0000000000402aa8\n.text:0000000000402aaa\n.text:0000000000402aac\n.text:0000000000402aae\n.text:0000000000402ab1\n.text:0000000000402ab6\n.text:0000000000402abb\n.text:0000000000402abd\n.text:0000000000402abf\n.text:0000000000402ac4\n.text:0000000000402ac9\n.text:0000000000402acd\n.text:0000000000402ad2\n.text:0000000000402ad7\n.text:0000000000402ad9\n.text:0000000000402ade\n.text:0000000000402ae1\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402aef\n.text:0000000000402af2\n.text:0000000000402af6\n.text:0000000000402af9\n.text:0000000000402afb\n.text:0000000000402afe\n.text:0000000000402b00\n.text:0000000000402b03\n.text:0000000000402b07\n.text:0000000000402b0a\n.text:0000000000402b0e\n.text:0000000000402b11\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b1b\n.text:0000000000402b20\n.text:0000000000402b25\n.text:0000000000402b29\n.text:0000000000402b2c\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b3d\n.text:0000000000402b40\n.text:0000000000402b43\n.text:0000000000402b47\n.text:0000000000402b4a\n.text:0000000000402b4e\n.text:0000000000402b53\n.text:0000000000402b58\n.text:0000000000402b5d\n.text:0000000000402b61\n'
p517
tp518
sS'randread_set_handler_arg'
p519
(S'\n__stdcall randread_set_handler_arg(randread_source * s, void * handler_arg)\n'
p520
V\u000avoid randread_set_handler_arg(randread_source *s,void *handler_arg)\u000a\u000a{\u000a  s->handler_arg = handler_arg;\u000a  return;\u000a}\u000a\u000a
p521
S'MOV qword ptr [RDI + 0x10],RSI\nRET\n'
p522
S'48 89 77 10\nc3\n'
p523
S'.text:00000000004067a0\n.text:00000000004067a4\n'
p524
tp525
sS'dir_name'
p526
(S'\n__stdcall dir_name(char * file)\n'
p527
V\u000achar * dir_name(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mdir_name(file);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p528
S'PUSH RAX\nCALL 0x00403f50\nTEST RAX,RAX\nJZ 0x00403efd\nPOP RCX\nRET\nCALL 0x004077b0\n'
p529
S'50\ne8 5a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 ae 38 00 00\n'
p530
S'.text:0000000000403ef0\n.text:0000000000403ef1\n.text:0000000000403ef6\n.text:0000000000403ef9\n.text:0000000000403efb\n.text:0000000000403efc\n.text:0000000000403efd\n'
p531
tp532
sS'close_stdout'
p533
(S'\n__stdcall close_stdout()\n'
p534
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403e57;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_004099c8,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403e57:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060d328]\nCALL 0x00408060\nTEST EAX,EAX\nJZ 0x00403e57\nCMP byte ptr [0x0060d380],0x0\nJZ 0x00403e6c\nCALL 0x004018a0\nCMP dword ptr [RAX],0x20\nJNZ 0x00403e6c\nMOV RDI,qword ptr [0x0060d360]\nCALL 0x00408060\nTEST EAX,EAX\nJNZ 0x00403eb1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4099cb\nMOV EDX,0x5\nCALL 0x004019b0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d378]\nCALL 0x004018a0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403ebc\nXOR EDI,EDI\nMOV EDX,0x4099c8\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401c70\nMOV EDI,dword ptr [0x0060d2c0]\nCALL 0x004018e0\nMOV EDI,dword ptr [0x0060d2c0]\nCALL 0x004018e0\nMOV RDI,RBX\nCALL 0x00405dd0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4099d7\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401c70\nMOV EDI,dword ptr [0x0060d2c0]\nCALL 0x004018e0\n'
p536
S'55\n41 56\n53\n48 8b 3d ed 94 20 00\ne8 20 42 00 00\n85 c0\n74 13\n80 3d 35 95 20 00 00\n74 1f\ne8 4e da ff ff\n83 38 20\n75 15\n48 8b 3d 02 95 20 00\ne8 fd 41 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe cb 99 40 00\nba 05 00 00 00\ne8 33 db ff ff\n49 89 c6\n48 8b 1d f1 94 20 00\ne8 14 da ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba c8 99 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca dd ff ff\n8b 3d 14 94 20 00\ne8 2f da ff ff\n8b 3d 09 94 20 00\ne8 24 da ff ff\n48 89 df\ne8 0c 1f 00 00\n48 89 c1\n31 ff\nba d7 99 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 dd ff ff\n8b 3d e0 93 20 00\ne8 fb d9 ff ff\n'
p537
S'.text:0000000000403e30\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e34\n.text:0000000000403e3b\n.text:0000000000403e40\n.text:0000000000403e42\n.text:0000000000403e44\n.text:0000000000403e4b\n.text:0000000000403e4d\n.text:0000000000403e52\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e5e\n.text:0000000000403e63\n.text:0000000000403e65\n.text:0000000000403e67\n.text:0000000000403e68\n.text:0000000000403e6a\n.text:0000000000403e6b\n.text:0000000000403e6c\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e78\n.text:0000000000403e7d\n.text:0000000000403e80\n.text:0000000000403e87\n.text:0000000000403e8c\n.text:0000000000403e8f\n.text:0000000000403e91\n.text:0000000000403e93\n.text:0000000000403e95\n.text:0000000000403e9a\n.text:0000000000403e9c\n.text:0000000000403e9e\n.text:0000000000403ea1\n.text:0000000000403ea6\n.text:0000000000403eac\n.text:0000000000403eb1\n.text:0000000000403eb7\n.text:0000000000403ebc\n.text:0000000000403ebf\n.text:0000000000403ec4\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403ece\n.text:0000000000403ed0\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403eda\n.text:0000000000403ee0\n'
p538
tp539
sS'version_etc_ar'
p540
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p541
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p542
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00407470\nJMP 0x00407100\n'
p543
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p544
S'.text:0000000000407460\n.text:0000000000407467\n.text:0000000000407470\n.text:0000000000407476\n.text:000000000040747a\n.text:000000000040747c\n'
p545
tp546
sS'strtoumax'
p547
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060d248)();\u000a  return uVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x0060d248]\n'
p550
S'ff 25 72 b5 20 00\n'
p551
S'.plt:0000000000401cd0\n'
p552
tp553
sS'sync'
p554
(S'\n__stdcall sync()\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid sync(void)\u000a\u000a{\u000a  (*(code *)PTR_sync_0060d198)();\u000a  return;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060d198]\n'
p557
S'ff 25 22 b6 20 00\n'
p558
S'.plt:0000000000401b70\n'
p559
tp560
sS'c_isxdigit'
p561
(S'\n__stdcall c_isxdigit()\n'
p562
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p563
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040803b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p564
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p565
S'.text:0000000000408020\n.text:0000000000408023\n.text:0000000000408026\n.text:0000000000408028\n.text:0000000000408032\n.text:0000000000408034\n.text:0000000000408037\n.text:000000000040803a\n.text:000000000040803b\n.text:000000000040803d\n'
p566
tp567
sS'__libc_csu_fini'
p568
(S'\n__stdcall __libc_csu_fini()\n'
p569
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p570
S'RET\n'
p571
S'f3 c3\n'
p572
S'.text:0000000000408510\n'
p573
tp574
sS'getuid'
p575
(S'\n__stdcall getuid()\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t getuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getuid_0060d0d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060d0d8]\n'
p578
S'ff 25 e2 b6 20 00\n'
p579
S'.plt:00000000004019f0\n'
p580
tp581
sS'abort'
p582
(S'\n__stdcall abort()\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060d028)();\u000a  return;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060d028]\n'
p585
S'ff 25 92 b7 20 00\n'
p586
S'.plt:0000000000401890\n'
p587
tp588
sS'group_number'
p589
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p590
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x004019d0\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00401b30\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x00404833\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x00401b30\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x00404848\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401b30\nSUB R12,RBP\nJNZ 0x00404820\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p592
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 dc d1 ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 29 d3 ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 fd d2 ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 c8 d2 ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p593
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d7\n.text:00000000004047d9\n.text:00000000004047da\n.text:00000000004047de\n.text:00000000004047e1\n.text:00000000004047e4\n.text:00000000004047e7\n.text:00000000004047ec\n.text:00000000004047ef\n.text:00000000004047f4\n.text:00000000004047f7\n.text:00000000004047fc\n.text:00000000004047ff\n.text:0000000000404802\n.text:0000000000404807\n.text:000000000040480a\n.text:000000000040480d\n.text:0000000000404810\n.text:0000000000404817\n.text:0000000000404820\n.text:0000000000404823\n.text:0000000000404826\n.text:000000000040482b\n.text:000000000040482e\n.text:0000000000404833\n.text:0000000000404837\n.text:000000000040483a\n.text:000000000040483c\n.text:000000000040483e\n.text:0000000000404842\n.text:0000000000404845\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484f\n.text:0000000000404852\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404860\n.text:0000000000404863\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486d\n.text:0000000000404870\n.text:0000000000404874\n.text:0000000000404875\n.text:0000000000404877\n.text:0000000000404879\n.text:000000000040487b\n.text:000000000040487d\n.text:000000000040487e\n'
p594
tp595
sS'randint_all_free'
p596
(S'\n__stdcall randint_all_free(randint_source * s)\n'
p597
V\u000aint randint_all_free(randint_source *s)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  \u000a  iVar2 = randread_free(s->source);\u000a  piVar3 = __errno_location();\u000a  iVar1 = *piVar3;\u000a  randint_free(s);\u000a  *piVar3 = iVar1;\u000a  return iVar2;\u000a}\u000a\u000a
p598
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00406950\nMOV R14D,EAX\nCALL 0x004018a0\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x004064c0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p599
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 8b 3b\ne8 6e 04 00 00\n41 89 c6\ne8 b6 b3 ff ff\n48 89 c5\n44 8b 7d 00\n48 89 df\ne8 c7 ff ff ff\n44 89 7d 00\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p600
S'.text:00000000004064d0\n.text:00000000004064d1\n.text:00000000004064d3\n.text:00000000004064d5\n.text:00000000004064d6\n.text:00000000004064d7\n.text:00000000004064da\n.text:00000000004064dd\n.text:00000000004064e2\n.text:00000000004064e5\n.text:00000000004064ea\n.text:00000000004064ed\n.text:00000000004064f1\n.text:00000000004064f4\n.text:00000000004064f9\n.text:00000000004064fd\n.text:0000000000406500\n.text:0000000000406504\n.text:0000000000406505\n.text:0000000000406507\n.text:0000000000406509\n.text:000000000040650a\n'
p601
tp602
sS'version_etc'
p603
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p604
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p605
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407532\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00407490\nADD RSP,0xd8\nRET\n'
p606
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p607
S'.text:00000000004074f0\n.text:00000000004074f7\n.text:00000000004074f9\n.text:00000000004074fb\n.text:0000000000407500\n.text:0000000000407505\n.text:000000000040750a\n.text:0000000000407512\n.text:000000000040751a\n.text:0000000000407522\n.text:000000000040752a\n.text:0000000000407532\n.text:0000000000407537\n.text:000000000040753c\n.text:0000000000407541\n.text:0000000000407546\n.text:000000000040754e\n.text:0000000000407553\n.text:000000000040755b\n.text:0000000000407562\n.text:0000000000407565\n.text:000000000040756a\n.text:0000000000407571\n'
p608
tp609
sS'wipefile'
p610
(S'\n__stdcall wipefile(char * name, char * qname, randint_source * s, Options * flags)\n'
p611
V\u000a_Bool wipefile(char *name,char *qname,randint_source *s,Options *flags)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint __fd;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  int *piVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  \u000a  __fd = open_safer(name,0x101);\u000a  if (((int)__fd < 0) &&\u000a     ((((piVar4 = __errno_location(), *piVar4 != 0xd || (flags->force == false)) ||\u000a       (iVar2 = chmod(name,0x80), iVar2 != 0)) || (__fd = open_safer(name,0x101), (int)__fd < 0))))\u000a  {\u000a    puVar3 = (uint *)__errno_location();\u000a    __fd = *puVar3;\u000a    pcVar6 = "%s: failed to open for writing";\u000a  }\u000a  else {\u000a    _Var1 = do_wipefd((char *)(ulong)__fd,(randint_source *)qname,(Options *)s);\u000a    iVar2 = close(__fd);\u000a    if (iVar2 == 0) {\u000a      if (_Var1 == false) {\u000a        return false;\u000a      }\u000a      if (flags->remove_file == remove_none) {\u000a        return true;\u000a      }\u000a      _Var1 = wipename(name,qname,flags);\u000a      return _Var1;\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    __fd = *puVar3;\u000a    pcVar6 = "%s: failed to close";\u000a  }\u000a  uVar5 = dcgettext(0,pcVar6,5);\u000a  error(0,(ulong)__fd,uVar5,qname);\u000a  return false;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R12,RDX\nMOV R14,RSI\nMOV R13,RDI\nMOV ESI,0x101\nXOR EAX,EAX\nCALL 0x00404040\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00402718\nMOV EDI,EBP\nMOV RSI,R14\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x004027d0\nMOV EBX,EAX\nMOV EDI,EBP\nCALL 0x00401ab0\nTEST EAX,EAX\nJZ 0x00402778\nCALL 0x004018a0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4098ee\nJMP 0x00402749\nCALL 0x004018a0\nCMP dword ptr [RAX],0xd\nJNZ 0x00402739\nCMP byte ptr [R15],0x0\nJZ 0x00402739\nMOV ESI,0x80\nMOV RDI,R13\nCALL 0x00401c50\nTEST EAX,EAX\nJZ 0x004027a7\nCALL 0x004018a0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4098cf\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401c70\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST BL,BL\nJZ 0x0040279f\nCMP dword ptr [R15 + 0x18],0x0\nJZ 0x004027a3\nMOV RDI,R13\nMOV RSI,R14\nMOV RDX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403750\nXOR EBX,EBX\nJMP 0x00402767\nMOV BL,0x1\nJMP 0x00402767\nMOV ESI,0x101\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00404040\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x004026e9\nJMP 0x00402739\n'
p613
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n49 89 d4\n49 89 f6\n49 89 fd\nbe 01 01 00 00\n31 c0\ne8 5d 19 00 00\n89 c5\n85 ed\n78 2f\n89 ef\n4c 89 f6\n4c 89 e2\n4c 89 f9\ne8 d7 00 00 00\n89 c3\n89 ef\ne8 ae f3 ff ff\n85 c0\n74 72\ne8 95 f1 ff ff\n8b 28\n31 db\n31 ff\nbe ee 98 40 00\neb 31\ne8 83 f1 ff ff\n83 38 0d\n75 17\n41 80 3f 00\n74 11\nbe 80 00 00 00\n4c 89 ef\ne8 1b f5 ff ff\n85 c0\n74 6e\ne8 62 f1 ff ff\n8b 28\n31 db\n31 ff\nbe cf 98 40 00\nba 05 00 00 00\ne8 5d f2 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n4c 89 f1\ne8 09 f5 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n84 db\n74 23\n41 83 7f 18 00\n74 20\n4c 89 ef\n4c 89 f6\n4c 89 fa\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 b1 0f 00 00\n31 db\neb c4\nb3 01\neb c0\nbe 01 01 00 00\n31 c0\n4c 89 ef\ne8 8a 18 00 00\n89 c5\n85 ed\n0f 89 29 ff ff ff\ne9 74 ff ff ff\n'
p614
S'.text:00000000004026c0\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026ca\n.text:00000000004026cb\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d4\n.text:00000000004026d7\n.text:00000000004026dc\n.text:00000000004026de\n.text:00000000004026e3\n.text:00000000004026e5\n.text:00000000004026e7\n.text:00000000004026e9\n.text:00000000004026eb\n.text:00000000004026ee\n.text:00000000004026f1\n.text:00000000004026f4\n.text:00000000004026f9\n.text:00000000004026fb\n.text:00000000004026fd\n.text:0000000000402702\n.text:0000000000402704\n.text:0000000000402706\n.text:000000000040270b\n.text:000000000040270d\n.text:000000000040270f\n.text:0000000000402711\n.text:0000000000402716\n.text:0000000000402718\n.text:000000000040271d\n.text:0000000000402720\n.text:0000000000402722\n.text:0000000000402726\n.text:0000000000402728\n.text:000000000040272d\n.text:0000000000402730\n.text:0000000000402735\n.text:0000000000402737\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402744\n.text:0000000000402749\n.text:000000000040274e\n.text:0000000000402753\n.text:0000000000402756\n.text:0000000000402758\n.text:000000000040275a\n.text:000000000040275c\n.text:000000000040275f\n.text:0000000000402762\n.text:0000000000402767\n.text:0000000000402769\n.text:000000000040276d\n.text:000000000040276e\n.text:0000000000402770\n.text:0000000000402772\n.text:0000000000402774\n.text:0000000000402776\n.text:0000000000402777\n.text:0000000000402778\n.text:000000000040277a\n.text:000000000040277c\n.text:0000000000402781\n.text:0000000000402783\n.text:0000000000402786\n.text:0000000000402789\n.text:000000000040278c\n.text:0000000000402790\n.text:0000000000402791\n.text:0000000000402793\n.text:0000000000402795\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279a\n.text:000000000040279f\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a5\n.text:00000000004027a7\n.text:00000000004027ac\n.text:00000000004027ae\n.text:00000000004027b1\n.text:00000000004027b6\n.text:00000000004027b8\n.text:00000000004027ba\n.text:00000000004027c0\n'
p615
tp616
sS'randread_new'
p617
(S'\n__stdcall randread_new(char * name, size_t bytes_bound)\n'
p618
V\u000arandread_source * randread_new(char *name,size_t bytes_bound)\u000a\u000a{\u000a  FILE *source;\u000a  randread_source *prVar1;\u000a  size_t min_len;\u000a  size_t __n;\u000a  int entropy;\u000a  size_t max_len;\u000a  \u000a  if (bytes_bound != 0) {\u000a    if (name == (char *)0x0) {\u000a      prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a      *(undefined8 *)prVar1->buf = 0;\u000a      get_nonce((DRBG_CTX *)(isaac_state *)(prVar1->buf + 8),(uchar **)bytes_bound,entropy,min_len,\u000a                max_len);\u000a      isaac_seed((isaac_state *)(prVar1->buf + 8));\u000a    }\u000a    else {\u000a      source = fopen_safer(name,"rb");\u000a      if (source == (FILE *)0x0) {\u000a        prVar1 = (randread_source *)0x0;\u000a      }\u000a      else {\u000a        prVar1 = simple_new(source,name);\u000a        __n = 0x1000;\u000a        if (bytes_bound < 0x1000) {\u000a          __n = bytes_bound;\u000a        }\u000a        setvbuf((FILE *)source,(char *)prVar1->buf,0,__n);\u000a      }\u000a    }\u000a    return prVar1;\u000a  }\u000a  prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a  return prVar1;\u000a}\u000a\u000a
p619
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nTEST R15,R15\nJZ 0x0040656b\nTEST RBX,RBX\nJZ 0x0040657c\nMOV ESI,0x40a027\nMOV RDI,RBX\nCALL 0x004080d0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004065ad\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x004065c0\nMOV R14,RAX\nLEA RSI,[R14 + 0x18]\nCMP R15,0x1000\nMOV ECX,0x1000\nCMOVC RCX,R15\nXOR EDX,EDX\nMOV RDI,R12\nCALL 0x00401c40\nJMP 0x004065b0\nXOR EDI,EDI\nXOR ESI,ESI\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004065c0\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x004065c0\nMOV R14,RAX\nMOV qword ptr [R14 + 0x18],0x0\nMOV RBX,R14\nADD RBX,0x20\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x004065f0\nMOV RDI,RBX\nCALL 0x00406d90\nJMP 0x004065b0\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p620
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n48 89 fb\n4d 85 ff\n74 48\n48 85 db\n74 54\nbe 27 a0 40 00\n48 89 df\ne8 9b 1b 00 00\n49 89 c4\n4d 85 e4\n74 70\n4c 89 e7\n48 89 de\ne8 78 00 00 00\n49 89 c6\n49 8d 76 18\n49 81 ff 00 10 00 00\nb9 00 10 00 00\n49 0f 42 cf\n31 d2\n4c 89 e7\ne8 d7 b6 ff ff\neb 45\n31 ff\n31 f6\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\neb 44\n31 ff\n48 89 de\ne8 3a 00 00 00\n49 89 c6\n49 c7 46 18 00 00 00 00\n4c 89 f3\n48 83 c3 20\n48 89 df\n4c 89 fe\ne8 4d 00 00 00\n48 89 df\ne8 e5 07 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p621
S'.text:0000000000406510\n.text:0000000000406512\n.text:0000000000406514\n.text:0000000000406516\n.text:0000000000406517\n.text:0000000000406518\n.text:000000000040651b\n.text:000000000040651e\n.text:0000000000406521\n.text:0000000000406523\n.text:0000000000406526\n.text:0000000000406528\n.text:000000000040652d\n.text:0000000000406530\n.text:0000000000406535\n.text:0000000000406538\n.text:000000000040653b\n.text:000000000040653d\n.text:0000000000406540\n.text:0000000000406543\n.text:0000000000406548\n.text:000000000040654b\n.text:000000000040654f\n.text:0000000000406556\n.text:000000000040655b\n.text:000000000040655f\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406569\n.text:000000000040656b\n.text:000000000040656d\n.text:000000000040656f\n.text:0000000000406573\n.text:0000000000406574\n.text:0000000000406576\n.text:0000000000406578\n.text:000000000040657a\n.text:000000000040657c\n.text:000000000040657e\n.text:0000000000406581\n.text:0000000000406586\n.text:0000000000406589\n.text:0000000000406591\n.text:0000000000406594\n.text:0000000000406598\n.text:000000000040659b\n.text:000000000040659e\n.text:00000000004065a3\n.text:00000000004065a6\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065b0\n.text:00000000004065b3\n.text:00000000004065b7\n.text:00000000004065b8\n.text:00000000004065ba\n.text:00000000004065bc\n.text:00000000004065be\n'
p622
tp623
sS'default_block_size'
p624
(S'\n__stdcall default_block_size()\n'
p625
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p626
S'PUSH RAX\nMOV EDI,0x409a45\nCALL 0x00401870\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p627
S'50\nbf 45 9a 40 00\ne8 a5 ce ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p628
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c6\n.text:00000000004049cb\n.text:00000000004049ce\n.text:00000000004049d3\n.text:00000000004049d8\n.text:00000000004049dc\n.text:00000000004049dd\n'
p629
tp630
sS'lseek'
p631
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060d108)();\u000a  return _Var1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x0060d108]\n'
p634
S'ff 25 b2 b6 20 00\n'
p635
S'.plt:0000000000401a50\n'
p636
tp637
sS'quotearg_n_mem'
p638
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p639
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'MOV ECX,0x60d390\nJMP 0x00405a40\n'
p641
S'b9 90 d3 60 00\ne9 36 fe ff ff\n'
p642
S'.text:0000000000405c00\n.text:0000000000405c05\n'
p643
tp644
sS'__printf_chk'
p645
(S'\n__stdcall __printf_chk()\n'
p646
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060d1f8)();\u000a  return;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x0060d1f8]\n'
p648
S'ff 25 c2 b5 20 00\n'
p649
S'.plt:0000000000401c30\n'
p650
tp651
sS'ioctl'
p652
(S'\n__stdcall ioctl(int __fd, ulong __request)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ioctl(int __fd,ulong __request,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ioctl_0060d130)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060d130]\n'
p655
S'ff 25 8a b6 20 00\n'
p656
S'.plt:0000000000401aa0\n'
p657
tp658
sS'base_len'
p659
(S'\n__stdcall base_len(char * name)\n'
p660
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p661
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004019d0\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00404034\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00404020\nPOP RBX\nRET\n'
p662
S'53\n48 89 fb\ne8 b7 d9 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p663
S'.text:0000000000404010\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401c\n.text:0000000000404020\n.text:0000000000404023\n.text:0000000000404027\n.text:0000000000404029\n.text:000000000040402d\n.text:0000000000404032\n.text:0000000000404034\n.text:0000000000404035\n'
p664
tp665
sS'randint_genmax'
p666
(S'\n__stdcall randint_genmax(randint_source * s, randint genmax)\n'
p667
V\u000arandint randint_genmax(randint_source *s,randint genmax)\u000a\u000a{\u000a  ulong uVar1;\u000a  randread_source *s_00;\u000a  randint rVar2;\u000a  ulong x;\u000a  randint x_00;\u000a  ulong x_01;\u000a  ulong uVar3;\u000a  byte *buf_00;\u000a  ulong uVar4;\u000a  size_t size;\u000a  randread_source *source;\u000a  uchar buf [8];\u000a  byte local_38 [8];\u000a  \u000a  s_00 = s->source;\u000a  x_01 = s->randmax;\u000a  uVar1 = genmax + 1;\u000a  x = s->randnum;\u000a  while( true ) {\u000a    x_00 = x;\u000a    if (x_01 < genmax) {\u000a      size = 0;\u000a      x = x_01;\u000a      do {\u000a        rVar2 = shift_left(x);\u000a        x = rVar2 + 0xff;\u000a        size = size + 1;\u000a      } while (x < genmax);\u000a      buf_00 = local_38;\u000a      randread(s_00,buf_00,size);\u000a      do {\u000a        x_00 = shift_left(x_00);\u000a        x_00 = (ulong)*buf_00 + x_00;\u000a        rVar2 = shift_left(x_01);\u000a        x_01 = rVar2 + 0xff;\u000a        buf_00 = buf_00 + 1;\u000a      } while (x_01 < genmax);\u000a    }\u000a    uVar4 = x_01 - genmax;\u000a    if (uVar4 == 0) break;\u000a    uVar3 = x_01 - uVar4 % uVar1;\u000a    x_01 = uVar4 % uVar1 - 1;\u000a    x = x_00 % uVar1;\u000a    if (x_00 <= uVar3) {\u000a      s->randnum = x_00 / uVar1;\u000a      s->randmax = uVar4 / uVar1;\u000a      return x_00 % uVar1;\u000a    }\u000a  }\u000a  *(undefined4 *)&s->randnum = 0;\u000a  *(undefined4 *)((long)&s->randnum + 4) = 0;\u000a  *(undefined4 *)&s->randmax = 0;\u000a  *(undefined4 *)((long)&s->randmax + 4) = 0;\u000a  return x_00;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RSI\nMOV RAX,qword ptr [RDI]\nMOV qword ptr [RSP + 0x18],RAX\nMOV R15,qword ptr [RDI + 0x8]\nLEA RAX,[RDI + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [RSP + 0x10],RDI\nMOV RBX,qword ptr [RDI + 0x10]\nLEA R12,[R13 + 0x1]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RBX,R13\nJNC 0x0040643a\nMOV RAX,RBX\nXOR R14D,R14D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RAX\nCALL 0x004064b0\nADD RAX,0xff\nINC R14\nCMP RAX,R13\nJC 0x004063e0\nMOV RDI,qword ptr [RSP + 0x18]\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x004067b0\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x004064b0\nMOVZX R15D,byte ptr [RBP]\nADD R15,RAX\nMOV RDI,RBX\nCALL 0x004064b0\nMOV RBX,RAX\nADD RBX,0xff\nINC RBP\nCMP RBX,R13\nJC 0x00406410\nMOV RCX,R15\nMOV RSI,RBX\nSUB RSI,R13\nJZ 0x0040648f\nXOR EDX,EDX\nMOV RAX,RSI\nDIV R12\nMOV RDI,RDX\nSUB RBX,RDI\nXOR EDX,EDX\nMOV RAX,RCX\nDIV R12\nMOV R15,RDX\nDEC RDI\nCMP RCX,RBX\nMOV RBX,RDI\nJA 0x004063d0\nXOR EDX,EDX\nMOV RAX,RCX\nDIV R12\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + 0x8],RAX\nXOR EDX,EDX\nMOV RAX,RSI\nDIV R12\nMOV qword ptr [RCX + 0x10],RAX\nMOV RCX,R15\nJMP 0x0040649a\nXORPS XMM0,XMM0\nMOV RAX,qword ptr [RSP + 0x8]\nMOVUPS xmmword ptr [RAX],XMM0\nMOV RAX,RCX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f5\n48 8b 07\n48 89 44 24 18\n4c 8b 7f 08\n48 8d 47 08\n48 89 44 24 08\n48 89 7c 24 10\n48 8b 5f 10\n4d 8d 65 01\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 eb\n73 65\n48 89 d8\n45 31 f6\n0f 1f 44 00 00\n48 89 c7\ne8 c8 00 00 00\n48 05 ff 00 00 00\n49 ff c6\n4c 39 e8\n72 ea\n48 8b 7c 24 18\n48 8d 6c 24 20\n48 89 ee\n4c 89 f2\ne8 a5 03 00 00\n0f 1f 44 00 00\n4c 89 ff\ne8 98 00 00 00\n44 0f b6 7d 00\n49 01 c7\n48 89 df\ne8 88 00 00 00\n48 89 c3\n48 81 c3 ff 00 00 00\n48 ff c5\n4c 39 eb\n72 d6\n4c 89 f9\n48 89 de\n4c 29 ee\n74 4a\n31 d2\n48 89 f0\n49 f7 f4\n48 89 d7\n48 29 fb\n31 d2\n48 89 c8\n49 f7 f4\n49 89 d7\n48 ff cf\n48 39 d9\n48 89 fb\n0f 87 63 ff ff ff\n31 d2\n48 89 c8\n49 f7 f4\n48 8b 4c 24 10\n48 89 41 08\n31 d2\n48 89 f0\n49 f7 f4\n48 89 41 10\n4c 89 f9\neb 0b\n0f 57 c0\n48 8b 44 24 08\n0f 11 00\n48 89 c8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p670
S'.text:0000000000406390\n.text:0000000000406391\n.text:0000000000406393\n.text:0000000000406395\n.text:0000000000406397\n.text:0000000000406399\n.text:000000000040639a\n.text:000000000040639e\n.text:00000000004063a1\n.text:00000000004063a4\n.text:00000000004063a9\n.text:00000000004063ad\n.text:00000000004063b1\n.text:00000000004063b6\n.text:00000000004063bb\n.text:00000000004063bf\n.text:00000000004063c3\n.text:00000000004063d0\n.text:00000000004063d3\n.text:00000000004063d5\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063e0\n.text:00000000004063e3\n.text:00000000004063e8\n.text:00000000004063ee\n.text:00000000004063f1\n.text:00000000004063f4\n.text:00000000004063f6\n.text:00000000004063fb\n.text:0000000000406400\n.text:0000000000406403\n.text:0000000000406406\n.text:000000000040640b\n.text:0000000000406410\n.text:0000000000406413\n.text:0000000000406418\n.text:000000000040641d\n.text:0000000000406420\n.text:0000000000406423\n.text:0000000000406428\n.text:000000000040642b\n.text:0000000000406432\n.text:0000000000406435\n.text:0000000000406438\n.text:000000000040643a\n.text:000000000040643d\n.text:0000000000406440\n.text:0000000000406443\n.text:0000000000406445\n.text:0000000000406447\n.text:000000000040644a\n.text:000000000040644d\n.text:0000000000406450\n.text:0000000000406453\n.text:0000000000406455\n.text:0000000000406458\n.text:000000000040645b\n.text:000000000040645e\n.text:0000000000406461\n.text:0000000000406464\n.text:0000000000406467\n.text:000000000040646d\n.text:000000000040646f\n.text:0000000000406472\n.text:0000000000406475\n.text:000000000040647a\n.text:000000000040647e\n.text:0000000000406480\n.text:0000000000406483\n.text:0000000000406486\n.text:000000000040648a\n.text:000000000040648d\n.text:000000000040648f\n.text:0000000000406492\n.text:0000000000406497\n.text:000000000040649a\n.text:000000000040649d\n.text:00000000004064a1\n.text:00000000004064a2\n.text:00000000004064a4\n.text:00000000004064a6\n.text:00000000004064a8\n.text:00000000004064aa\n.text:00000000004064ab\n'
p671
tp672
sS'emit_ancillary_info'
p673
(S'\n__stdcall emit_ancillary_info()\n'
p674
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00408800;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("shred",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "shred";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"shred",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","shred");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4093fa;\u000a  if (__s2 == "shred") {\u000a    uVar3 = 0x4095eb;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p675
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x408800\nMOV ESI,0x4095cf\nNOP\nMOV EDI,0x4094a2\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x004020fb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x004020e0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4094a2\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40962e\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40952e\nMOV ECX,0x409645\nXOR EAX,EAX\nCALL 0x00401c30\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401c20\nTEST RAX,RAX\nJZ 0x00402184\nMOV ESI,0x40966c\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004018d0\nTEST EAX,EAX\nJZ 0x00402184\nXOR EDI,EDI\nMOV ESI,0x409670\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4094a2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x4096b5\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,RAX\nMOV R14D,0x4094a2\nMOV EDI,0x1\nMOV EDX,0x409645\nMOV ECX,0x4094a2\nXOR EAX,EAX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x4096d4\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4095eb\nMOV ECX,0x4093fa\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401c30\n'
p676
S'41 56\n53\n50\nbb 00 88 40 00\nbe cf 95 40 00\n66 90\nbf a2 94 40 00\ne8 36 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb a2 94 40 00\n48 0f 45 d8\n31 ff\nbe 2e 96 40 00\nba 05 00 00 00\ne8 94 f8 ff ff\n48 89 c6\nbf 01 00 00 00\nba 2e 95 40 00\nb9 45 96 40 00\n31 c0\ne8 fb fa ff ff\nbf 05 00 00 00\n31 f6\ne8 df fa ff ff\n48 85 c0\n74 3e\nbe 6c 96 40 00\nba 03 00 00 00\n48 89 c7\ne8 78 f7 ff ff\n85 c0\n74 28\n31 ff\nbe 70 96 40 00\nba 05 00 00 00\ne8 43 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba a2 94 40 00\n31 c0\n48 89 ce\ne8 ac fa ff ff\n31 ff\nbe b5 96 40 00\nba 05 00 00 00\ne8 1b f8 ff ff\n48 89 c6\n41 be a2 94 40 00\nbf 01 00 00 00\nba 45 96 40 00\nb9 a2 94 40 00\n31 c0\ne8 7c fa ff ff\n31 ff\nbe d4 96 40 00\nba 05 00 00 00\ne8 eb f7 ff ff\n48 89 c2\n4c 39 f3\nb8 eb 95 40 00\nb9 fa 93 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 3e fa ff ff\n'
p677
S'.text:00000000004020d0\n.text:00000000004020d2\n.text:00000000004020d3\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020de\n.text:00000000004020e0\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020ec\n.text:00000000004020ee\n.text:00000000004020f2\n.text:00000000004020f6\n.text:00000000004020f9\n.text:00000000004020fb\n.text:00000000004020ff\n.text:0000000000402102\n.text:0000000000402107\n.text:000000000040210b\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402117\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402129\n.text:000000000040212e\n.text:0000000000402130\n.text:0000000000402135\n.text:000000000040213a\n.text:000000000040213c\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402146\n.text:000000000040214b\n.text:0000000000402150\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215a\n.text:000000000040215c\n.text:000000000040215e\n.text:0000000000402163\n.text:0000000000402168\n.text:000000000040216d\n.text:0000000000402170\n.text:0000000000402175\n.text:000000000040217a\n.text:000000000040217c\n.text:000000000040217f\n.text:0000000000402184\n.text:0000000000402186\n.text:000000000040218b\n.text:0000000000402190\n.text:0000000000402195\n.text:0000000000402198\n.text:000000000040219e\n.text:00000000004021a3\n.text:00000000004021a8\n.text:00000000004021ad\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b6\n.text:00000000004021bb\n.text:00000000004021c0\n.text:00000000004021c5\n.text:00000000004021c8\n.text:00000000004021cb\n.text:00000000004021d0\n.text:00000000004021d5\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e0\n.text:00000000004021e3\n.text:00000000004021e6\n.text:00000000004021ea\n.text:00000000004021eb\n.text:00000000004021ed\n'
p678
tp679
sS'periodic_pattern'
p680
(S'\n__stdcall periodic_pattern()\n'
p681
V\u000a_Bool periodic_pattern(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint in_EDI;\u000a  \u000a  if (0 < (int)in_EDI) {\u000a    uVar1 = in_EDI >> 4 & 0xff;\u000a    return (_Bool)(uVar1 != (uint)(byte)((ulong)((in_EDI & 0xfff) << 0xc | in_EDI & 0xfff) >> 8) ||\u000a                  uVar1 != (in_EDI & 0xff));\u000a  }\u000a  return false;\u000a}\u000a\u000a
p682
S'TEST EDI,EDI\nJLE 0x0040348f\nMOV ECX,EDI\nAND ECX,0xfff\nMOV EAX,ECX\nSHL EAX,0xc\nOR EAX,ECX\nMOV ECX,EDI\nSHR ECX,0x4\nMOVZX ECX,CL\nMOVZX EAX,AH\nMOVZX EDX,DIL\nCMP ECX,EDX\nSETNZ DL\nCMP ECX,EAX\nSETNZ AL\nOR AL,DL\nRET\nXOR EAX,EAX\nRET\n'
p683
S'85 ff\n7e 2b\n89 f9\n81 e1 ff 0f 00 00\n89 c8\nc1 e0 0c\n09 c8\n89 f9\nc1 e9 04\n0f b6 c9\n0f b6 c4\n40 0f b6 d7\n39 d1\n0f 95 c2\n39 c1\n0f 95 c0\n08 d0\nc3\n31 c0\nc3\n'
p684
S'.text:0000000000403460\n.text:0000000000403462\n.text:0000000000403464\n.text:0000000000403466\n.text:000000000040346c\n.text:000000000040346e\n.text:0000000000403471\n.text:0000000000403473\n.text:0000000000403475\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347e\n.text:0000000000403482\n.text:0000000000403484\n.text:0000000000403487\n.text:0000000000403489\n.text:000000000040348c\n.text:000000000040348e\n.text:000000000040348f\n.text:0000000000403491\n'
p685
tp686
sS'version_etc_va'
p687
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p688
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p689
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004074c0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004074cc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004074e1\nINC R9\nCMP R9,0xa\nJC 0x004074a0\nMOV R8,RSP\nCALL 0x00407100\nADD RSP,0x58\nRET\n'
p690
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p691
S'.text:0000000000407490\n.text:0000000000407494\n.text:0000000000407497\n.text:00000000004074a0\n.text:00000000004074a3\n.text:00000000004074a7\n.text:00000000004074a9\n.text:00000000004074ac\n.text:00000000004074b0\n.text:00000000004074b4\n.text:00000000004074b7\n.text:00000000004074c0\n.text:00000000004074c4\n.text:00000000004074c8\n.text:00000000004074cc\n.text:00000000004074cf\n.text:00000000004074d3\n.text:00000000004074d6\n.text:00000000004074d8\n.text:00000000004074db\n.text:00000000004074df\n.text:00000000004074e1\n.text:00000000004074e4\n.text:00000000004074e9\n.text:00000000004074ed\n'
p692
tp693
sS'xzalloc'
p694
(S'\n__stdcall xzalloc(size_t s)\n'
p695
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p696
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00407620\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401a80\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p697
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 a3 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p698
S'.text:0000000000407710\n.text:0000000000407712\n.text:0000000000407713\n.text:0000000000407714\n.text:0000000000407717\n.text:000000000040771c\n.text:000000000040771f\n.text:0000000000407721\n.text:0000000000407724\n.text:0000000000407727\n.text:000000000040772c\n.text:000000000040772f\n.text:0000000000407733\n.text:0000000000407734\n.text:0000000000407736\n'
p699
tp700
sS'umaxtostr'
p701
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p702
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p703
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00404a00\nMOV RAX,RSI\nRET\n'
p704
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p705
S'.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e7\n.text:00000000004049eb\n.text:00000000004049f5\n.text:0000000000404a00\n.text:0000000000404a03\n.text:0000000000404a06\n.text:0000000000404a08\n.text:0000000000404a0b\n.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a17\n.text:0000000000404a1b\n.text:0000000000404a1f\n.text:0000000000404a22\n.text:0000000000404a26\n.text:0000000000404a2a\n.text:0000000000404a2d\n.text:0000000000404a2f\n.text:0000000000404a32\n'
p706
tp707
sS'isaac_seed'
p708
(S'\n__stdcall isaac_seed(isaac_state * s)\n'
p709
V\u000avoid isaac_seed(isaac_state *s)\u000a\u000a{\u000a  isaac_word iVar1;\u000a  isaac_word iVar2;\u000a  isaac_word iVar3;\u000a  isaac_word iVar4;\u000a  isaac_word iVar5;\u000a  isaac_word iVar6;\u000a  long lVar7;\u000a  isaac_word a;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  isaac_word a_00;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  long lVar14;\u000a  ulong uVar15;\u000a  long lVar16;\u000a  ulong uVar17;\u000a  isaac_word a_01;\u000a  \u000a  uVar9 = 0x647c4677a2884b7c;\u000a  uVar17 = 0xb9f8b322c73ac862;\u000a  uVar15 = 0x8c0ea5053d4712a0;\u000a  uVar8 = 0xb29b2e824a595524;\u000a  uVar13 = 0x82f053db8355e0ce;\u000a  a = 0x48fe4a0fa5a09315;\u000a  iVar5 = 0xae985bf2cbfc89ed;\u000a  a_00 = 0x98f5704f6c44c0ab;\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar11 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar11;\u000a    iVar5 = just(a_01);\u000a    uVar12 = a_00 + lVar10 ^ iVar5 >> 0x17;\u000a    a = (uVar8 + iVar2) - uVar12;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = iVar5 >> 0xe ^ a_01 + lVar16;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar11 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = iVar5 >> 0x11 ^ a + lVar14;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar12 - uVar8;\u000a    uVar13 = lVar10 * 0x4000 ^ lVar14 + a_01;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar12 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar12;\u000a    iVar5 = just(a_01);\u000a    uVar11 = iVar5 >> 0x17 ^ a_00 + lVar10;\u000a    a = (uVar8 + iVar2) - uVar11;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = a_01 + lVar16 ^ iVar5 >> 0xe;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar12 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = a + lVar14 ^ iVar5 >> 0x11;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar11 - uVar8;\u000a    uVar13 = lVar14 + a_01 ^ lVar10 * 0x4000;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  *(undefined4 *)&s->a = 0;\u000a  *(undefined4 *)((long)&s->a + 4) = 0;\u000a  *(undefined4 *)&s->b = 0;\u000a  *(undefined4 *)((long)&s->b + 4) = 0;\u000a  s->c = 0;\u000a  return;\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,0x647c4677a2884b7c\nMOV R15,-0x46074cdd38c5379e\nMOV R14,-0x73f15afac2b8ed60\nMOV RBX,-0x4d64d17db5a6aadc\nMOV R13,-0x7d0fac247caa1f32\nMOV RDX,0x48fe4a0fa5a09315\nMOV RAX,-0x5167a40d34037613\nMOV R12,-0x670a8fb093bb3f55\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x28],RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x00406d80\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RBP\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x00406d80\nSHR RAX,0x17\nXOR R12,RAX\nADD R15,R14\nMOV qword ptr [RSP + 0x30],R15\nSUB RBX,R12\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nMOV RBP,R14\nXOR RBP,qword ptr [RSP + 0x18]\nSUB R13,RBP\nMOV RDI,RBX\nCALL 0x00406d80\nMOV R15,RAX\nSHR R15,0xe\nXOR R15,qword ptr [RSP + 0x30]\nADD RBX,R13\nMOV qword ptr [RSP + 0x18],RBX\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nMOV qword ptr [RSP + 0x10],R13\nMOV R13,qword ptr [RSP + 0x8]\nSUB R13,R14\nCALL 0x00406d80\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RBX,RAX\nSHR RBX,0x11\nXOR RBX,qword ptr [RSP + 0x18]\nMOV RDX,qword ptr [RSP]\nMOV RAX,R13\nADD RDX,RAX\nSUB R12,RBX\nSHL R13,0xe\nXOR R13,qword ptr [RSP + 0x10]\nADD RAX,R12\nMOV qword ptr [RDI + RCX*0x8],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RAX\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nJL 0x00406e00\nXOR ECX,ECX\nNOP\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x00406d80\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x00406d80\nSHR RAX,0x17\nXOR RAX,R12\nADD R15,R14\nSUB RBX,RAX\nMOV R12,RAX\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nXOR R14,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP + 0x8],R14\nSUB R13,R14\nMOV RDI,RBX\nCALL 0x00406d80\nSHR RAX,0xe\nXOR R15,RAX\nADD RBX,R13\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nSUB RBP,R14\nCALL 0x00406d80\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nSHR RAX,0x11\nXOR RBX,RAX\nMOV RDX,qword ptr [RSP]\nADD RDX,RBP\nSUB R12,RBX\nMOV RAX,RBP\nSHL RAX,0xe\nXOR R13,RAX\nADD RBP,R12\nMOV RSI,qword ptr [RSP + 0x8]\nMOV qword ptr [RDI + RCX*0x8],RSI\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nMOV RAX,RBP\nMOV RBP,RSI\nJL 0x00406f50\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x800 + RDI],XMM0\nMOV qword ptr [0x810 + RDI],0x0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p711
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 bd 7c 4b 88 a2 77 46 7c 64\n49 bf 62 c8 3a c7 22 b3 f8 b9\n49 be a0 12 47 3d 05 a5 0e 8c\n48 bb 24 55 59 4a 82 2e 9b b2\n49 bd ce e0 55 83 db 53 f0 82\n48 ba 15 93 a0 a5 0f 4a fe 48\n48 b8 ed 89 fc cb f2 5b 98 ae\n49 bc ab c0 44 6c 4f 70 f5 98\n31 c9\n48 89 7c 24 28\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 40 ff ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n48 89 6c 24 08\n49 29 ee\n4c 89 ff\ne8 0c ff ff ff\n48 c1 e8 17\n49 31 c4\n4d 01 f7\n4c 89 7c 24 30\n4c 29 e3\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 89 f5\n48 33 6c 24 18\n49 29 ed\n48 89 df\ne8 da fe ff ff\n49 89 c7\n49 c1 ef 0e\n4c 33 7c 24 30\n4c 01 eb\n48 89 5c 24 18\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 89 6c 24 10\n4c 8b 6c 24 08\n4d 29 f5\ne8 9a fe ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 89 c3\n48 c1 eb 11\n48 33 5c 24 18\n48 8b 14 24\n4c 89 e8\n48 01 c2\n49 29 dc\n49 c1 e5 0e\n4c 33 6c 24 10\n4c 01 e0\n48 89 2c cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 44 cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n0f 8c b3 fe ff ff\n31 c9\n90\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 f0 fd ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n49 29 ee\n4c 89 ff\ne8 c1 fd ff ff\n48 c1 e8 17\n4c 31 e0\n4d 01 f7\n48 29 c3\n49 89 c4\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 33 74 24 18\n4c 89 74 24 08\n4d 29 f5\n48 89 df\ne8 8f fd ff ff\n48 c1 e8 0e\n49 31 c7\n4c 01 eb\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 29 f5\ne8 63 fd ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 c1 e8 11\n48 31 c3\n48 8b 14 24\n48 01 ea\n49 29 dc\n48 89 e8\n48 c1 e0 0e\n49 31 c5\n4c 01 e5\n48 8b 74 24 08\n48 89 34 cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 6c cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n48 89 e8\n48 89 f5\n0f 8c c8 fe ff ff\n0f 57 c0\n0f 11 87 00 08 00 00\n48 c7 87 10 08 00 00 00 00 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p712
S'.text:0000000000406d90\n.text:0000000000406d91\n.text:0000000000406d93\n.text:0000000000406d95\n.text:0000000000406d97\n.text:0000000000406d99\n.text:0000000000406d9a\n.text:0000000000406d9e\n.text:0000000000406da8\n.text:0000000000406db2\n.text:0000000000406dbc\n.text:0000000000406dc6\n.text:0000000000406dd0\n.text:0000000000406dda\n.text:0000000000406de4\n.text:0000000000406dee\n.text:0000000000406df0\n.text:0000000000406df5\n.text:0000000000406e00\n.text:0000000000406e05\n.text:0000000000406e09\n.text:0000000000406e0e\n.text:0000000000406e13\n.text:0000000000406e18\n.text:0000000000406e1d\n.text:0000000000406e22\n.text:0000000000406e26\n.text:0000000000406e2b\n.text:0000000000406e30\n.text:0000000000406e35\n.text:0000000000406e38\n.text:0000000000406e3b\n.text:0000000000406e40\n.text:0000000000406e44\n.text:0000000000406e48\n.text:0000000000406e4c\n.text:0000000000406e4f\n.text:0000000000406e52\n.text:0000000000406e56\n.text:0000000000406e5b\n.text:0000000000406e5f\n.text:0000000000406e64\n.text:0000000000406e69\n.text:0000000000406e6c\n.text:0000000000406e6f\n.text:0000000000406e74\n.text:0000000000406e78\n.text:0000000000406e7b\n.text:0000000000406e7e\n.text:0000000000406e83\n.text:0000000000406e86\n.text:0000000000406e8a\n.text:0000000000406e8f\n.text:0000000000406e93\n.text:0000000000406e96\n.text:0000000000406e9b\n.text:0000000000406e9e\n.text:0000000000406ea1\n.text:0000000000406ea6\n.text:0000000000406ea9\n.text:0000000000406ead\n.text:0000000000406eb2\n.text:0000000000406eb5\n.text:0000000000406eba\n.text:0000000000406ebe\n.text:0000000000406ec1\n.text:0000000000406ec5\n.text:0000000000406ec8\n.text:0000000000406ecc\n.text:0000000000406ed1\n.text:0000000000406ed4\n.text:0000000000406ed9\n.text:0000000000406ede\n.text:0000000000406ee1\n.text:0000000000406ee6\n.text:0000000000406eeb\n.text:0000000000406ef0\n.text:0000000000406ef3\n.text:0000000000406ef7\n.text:0000000000406efc\n.text:0000000000406f00\n.text:0000000000406f03\n.text:0000000000406f06\n.text:0000000000406f09\n.text:0000000000406f0d\n.text:0000000000406f12\n.text:0000000000406f15\n.text:0000000000406f19\n.text:0000000000406f1e\n.text:0000000000406f23\n.text:0000000000406f28\n.text:0000000000406f2d\n.text:0000000000406f32\n.text:0000000000406f37\n.text:0000000000406f3c\n.text:0000000000406f40\n.text:0000000000406f47\n.text:0000000000406f4d\n.text:0000000000406f4f\n.text:0000000000406f50\n.text:0000000000406f55\n.text:0000000000406f59\n.text:0000000000406f5e\n.text:0000000000406f63\n.text:0000000000406f68\n.text:0000000000406f6d\n.text:0000000000406f72\n.text:0000000000406f76\n.text:0000000000406f7b\n.text:0000000000406f80\n.text:0000000000406f85\n.text:0000000000406f88\n.text:0000000000406f8b\n.text:0000000000406f90\n.text:0000000000406f94\n.text:0000000000406f98\n.text:0000000000406f9c\n.text:0000000000406f9f\n.text:0000000000406fa2\n.text:0000000000406fa6\n.text:0000000000406fab\n.text:0000000000406faf\n.text:0000000000406fb4\n.text:0000000000406fb7\n.text:0000000000406fba\n.text:0000000000406fbf\n.text:0000000000406fc3\n.text:0000000000406fc6\n.text:0000000000406fc9\n.text:0000000000406fcc\n.text:0000000000406fcf\n.text:0000000000406fd3\n.text:0000000000406fd8\n.text:0000000000406fdc\n.text:0000000000406fe1\n.text:0000000000406fe6\n.text:0000000000406fe9\n.text:0000000000406fec\n.text:0000000000406ff1\n.text:0000000000406ff5\n.text:0000000000406ff8\n.text:0000000000406ffb\n.text:0000000000406fff\n.text:0000000000407002\n.text:0000000000407006\n.text:0000000000407009\n.text:000000000040700d\n.text:0000000000407012\n.text:0000000000407015\n.text:0000000000407018\n.text:000000000040701d\n.text:0000000000407022\n.text:0000000000407027\n.text:000000000040702b\n.text:000000000040702e\n.text:0000000000407032\n.text:0000000000407035\n.text:0000000000407038\n.text:000000000040703b\n.text:000000000040703f\n.text:0000000000407042\n.text:0000000000407045\n.text:000000000040704a\n.text:000000000040704e\n.text:0000000000407053\n.text:0000000000407058\n.text:000000000040705d\n.text:0000000000407062\n.text:0000000000407067\n.text:000000000040706c\n.text:0000000000407071\n.text:0000000000407075\n.text:000000000040707c\n.text:000000000040707f\n.text:0000000000407082\n.text:0000000000407088\n.text:000000000040708b\n.text:0000000000407092\n.text:000000000040709d\n.text:00000000004070a1\n.text:00000000004070a2\n.text:00000000004070a4\n.text:00000000004070a6\n.text:00000000004070a8\n.text:00000000004070aa\n.text:00000000004070ab\n'
p713
tp714
sS'just'
p715
(S'\n__stdcall just(isaac_word a)\n'
p716
V\u000aisaac_word just(isaac_word a)\u000a\u000a{\u000a  return a;\u000a}\u000a\u000a
p717
S'MOV RAX,RDI\nRET\n'
p718
S'48 89 f8\nc3\n'
p719
S'.text:0000000000406d80\n.text:0000000000406d83\n'
p720
tp721
sS'gettext_quote'
p722
(S'\n__stdcall gettext_quote(char * msgid)\n'
p723
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040a020;\u000a        pcVar2 = &DAT_0040a024;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p724
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004019b0\nCMP RAX,RBX\nJNZ 0x00405ff8\nCALL 0x00408160\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00406000\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00405fa8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40a010\nMOV EAX,0x40a014\nJMP 0x00405ff4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00406000\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00405fe6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40a020\nMOV EAX,0x40a024\nJMP 0x00405ff4\nCMP R14D,0x9\nMOV ECX,0x40a004\nMOV EAX,0x40a008\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p725
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 57 ba ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 f9 21 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 10 a0 40 00\nb8 14 a0 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 20 a0 40 00\nb8 24 a0 40 00\neb 0e\n41 83 fe 09\nb9 04 a0 40 00\nb8 08 a0 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p726
S'.text:0000000000405f40\n.text:0000000000405f41\n.text:0000000000405f43\n.text:0000000000405f44\n.text:0000000000405f47\n.text:0000000000405f4a\n.text:0000000000405f4c\n.text:0000000000405f51\n.text:0000000000405f54\n.text:0000000000405f59\n.text:0000000000405f5c\n.text:0000000000405f62\n.text:0000000000405f67\n.text:0000000000405f6a\n.text:0000000000405f6f\n.text:0000000000405f74\n.text:0000000000405f79\n.text:0000000000405f7f\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8a\n.text:0000000000405f8c\n.text:0000000000405f91\n.text:0000000000405f95\n.text:0000000000405f97\n.text:0000000000405f99\n.text:0000000000405f9c\n.text:0000000000405fa1\n.text:0000000000405fa6\n.text:0000000000405fa8\n.text:0000000000405fad\n.text:0000000000405fb2\n.text:0000000000405fb7\n.text:0000000000405fbd\n.text:0000000000405fc3\n.text:0000000000405fc6\n.text:0000000000405fc8\n.text:0000000000405fca\n.text:0000000000405fcf\n.text:0000000000405fd3\n.text:0000000000405fd5\n.text:0000000000405fd7\n.text:0000000000405fda\n.text:0000000000405fdf\n.text:0000000000405fe4\n.text:0000000000405fe6\n.text:0000000000405fea\n.text:0000000000405fef\n.text:0000000000405ff4\n.text:0000000000405ff8\n.text:0000000000405ff9\n.text:0000000000405ffb\n.text:0000000000405ffc\n'
p727
tp728
sS'getppid'
p729
(S'\n__stdcall getppid()\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getppid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getppid_0060d260)();\u000a  return _Var1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x0060d260]\n'
p732
S'ff 25 5a b5 20 00\n'
p733
S'.plt:0000000000401d00\n'
p734
tp735
sS'shift_left'
p736
(S'\n__stdcall shift_left(randint x)\n'
p737
V\u000arandint shift_left(randint x)\u000a\u000a{\u000a  return x << 8;\u000a}\u000a\u000a
p738
S'SHL RDI,0x8\nMOV RAX,RDI\nRET\n'
p739
S'48 c1 e7 08\n48 89 f8\nc3\n'
p740
S'.text:00000000004064b0\n.text:00000000004064b4\n.text:00000000004064b7\n'
p741
tp742
sS'fclose'
p743
(S'\n__stdcall fclose(FILE * __stream)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060d0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x0060d0a8]\n'
p746
S'ff 25 12 b7 20 00\n'
p747
S'.plt:0000000000401990\n'
p748
tp749
sS'__ctype_get_mb_cur_max'
p750
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060d0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060d0c0]\n'
p753
S'ff 25 fa b6 20 00\n'
p754
S'.plt:00000000004019c0\n'
p755
tp756
sS'lstat'
p757
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p758
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060d0d0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p759
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004019e0\n'
p760
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 70 94 ff ff\n'
p761
S'.text:0000000000408560\n.text:0000000000408563\n.text:0000000000408566\n.text:000000000040856b\n'
p762
tp763
sS'quotearg_n_style'
p764
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p765
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00405c70\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00405a40\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p767
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p768
S'.text:0000000000405c30\n.text:0000000000405c31\n.text:0000000000405c33\n.text:0000000000405c34\n.text:0000000000405c38\n.text:0000000000405c3b\n.text:0000000000405c3d\n.text:0000000000405c42\n.text:0000000000405c45\n.text:0000000000405c4a\n.text:0000000000405c51\n.text:0000000000405c53\n.text:0000000000405c56\n.text:0000000000405c59\n.text:0000000000405c5e\n.text:0000000000405c62\n.text:0000000000405c63\n.text:0000000000405c65\n.text:0000000000405c66\n'
p769
tp770
sS'dir_len'
p771
(S'\n__stdcall dir_len(char * file)\n'
p772
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p773
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x00403fb0\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00403f43\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00403f30\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p774
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p775
S'.text:0000000000403f10\n.text:0000000000403f12\n.text:0000000000403f13\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f21\n.text:0000000000403f26\n.text:0000000000403f29\n.text:0000000000403f2c\n.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f36\n.text:0000000000403f38\n.text:0000000000403f3c\n.text:0000000000403f41\n.text:0000000000403f43\n.text:0000000000403f47\n.text:0000000000403f48\n.text:0000000000403f4a\n'
p776
tp777
sS'quote_n'
p778
(S'\n__stdcall quote_n(char * arg)\n'
p779
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p780
S'MOV RDX,-0x1\nJMP 0x00405f00\n'
p781
S'48 c7 c2 ff ff ff ff\neb d7\n'
p782
S'.text:0000000000405f20\n.text:0000000000405f27\n'
p783
tp784
sS'quotearg_alloc'
p785
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p786
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p787
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004058b0\n'
p788
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p789
S'.text:00000000004058a0\n.text:00000000004058a3\n.text:00000000004058a5\n.text:00000000004058a8\n'
p790
tp791
sS'close_stdout_set_file_name'
p792
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p793
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p794
S'MOV qword ptr [0x0060d378],RDI\nRET\n'
p795
S'48 89 3d 61 95 20 00\nc3\n'
p796
S'.text:0000000000403e10\n.text:0000000000403e17\n'
p797
tp798
sS'time'
p799
(S'\n__stdcall time(time_t * __timer)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atime_t time(time_t *__timer)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = (*(code *)PTR_time_0060d180)();\u000a  return tVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060d180]\n'
p802
S'ff 25 3a b6 20 00\n'
p803
S'.plt:0000000000401b40\n'
p804
tp805
sS'__libc_csu_init'
p806
(S'\n__stdcall __libc_csu_init()\n'
p807
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ce08]\nPUSH RBP\nLEA RBP,[0x60ce10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401840\nTEST RBP,RBP\nJZ 0x004084f6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004084e0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 56 49 20 00\n55\n48 8d 2d 56 49 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 6f 93 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p810
S'.text:00000000004084a0\n.text:00000000004084a2\n.text:00000000004084a4\n.text:00000000004084a7\n.text:00000000004084a9\n.text:00000000004084ab\n.text:00000000004084b2\n.text:00000000004084b3\n.text:00000000004084ba\n.text:00000000004084bb\n.text:00000000004084be\n.text:00000000004084c1\n.text:00000000004084c4\n.text:00000000004084c8\n.text:00000000004084cc\n.text:00000000004084d1\n.text:00000000004084d4\n.text:00000000004084d6\n.text:00000000004084d8\n.text:00000000004084e0\n.text:00000000004084e3\n.text:00000000004084e6\n.text:00000000004084e9\n.text:00000000004084ed\n.text:00000000004084f1\n.text:00000000004084f4\n.text:00000000004084f6\n.text:00000000004084fa\n.text:00000000004084fb\n.text:00000000004084fc\n.text:00000000004084fe\n.text:0000000000408500\n.text:0000000000408502\n.text:0000000000408504\n'
p811
tp812
sS'argmatch_to_argument'
p813
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p814
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p815
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00403df1\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401ae0\nTEST EAX,EAX\nJZ 0x00403df4\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00403dd0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p816
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 02 dd ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p817
S'.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da4\n.text:0000000000403da6\n.text:0000000000403da8\n.text:0000000000403da9\n.text:0000000000403dac\n.text:0000000000403daf\n.text:0000000000403db2\n.text:0000000000403db5\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dbd\n.text:0000000000403dc1\n.text:0000000000403dd0\n.text:0000000000403dd3\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403dde\n.text:0000000000403de0\n.text:0000000000403de2\n.text:0000000000403de5\n.text:0000000000403de9\n.text:0000000000403dec\n.text:0000000000403def\n.text:0000000000403df1\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403df8\n.text:0000000000403dfa\n.text:0000000000403dfc\n.text:0000000000403dfe\n.text:0000000000403e00\n'
p818
tp819
sS'c_isdigit'
p820
(S'\n__stdcall c_isdigit()\n'
p821
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p822
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p823
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p824
S'.text:0000000000407f90\n.text:0000000000407f93\n.text:0000000000407f96\n.text:0000000000407f99\n'
p825
tp826
sS'usage'
p827
(S'\n__stdcall usage()\n'
p828
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... FILE...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Overwrite the specified FILE(s) repeatedly, in order to make it harder\u005cnfor even very expensive hardware probing to recover the data.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"\u005cnIf FILE is -, shred standard output.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    uVar1 = dcgettext(0,\u000a                      "  -f, --force    change permissions to allow writing if necessary\u005cn  -n, --iterations=N  overwrite N times instead of the default (%d)\u005cn      --random-source=FILE  get random bytes from FILE\u005cn  -s, --size=N   shred this many bytes (suffixes like K, M, G accepted)\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,3,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -u             truncate and remove file after overwriting\u005cn      --remove[=HOW]  like -u but give control on HOW to delete;  See below\u005cn  -v, --verbose  show progress\u005cn  -x, --exact    do not round file sizes up to the next full block;\u005cn                   this is the default for non-regular files\u005cn  -z, --zero     add a final overwrite with zeros to hide shredding\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnDelete FILE(s) if --remove (-u) is specified.  The default is not to remove\u005cnthe files because it is common to operate on device files like /dev/hda,\u005cnand those files usually should not be removed.\u005cnThe optional HOW parameter indicates how to remove a directory entry:\u005cn\u005c'unlink\u005c' => use a standard unlink call.\u005cn\u005c'wipe\u005c' => also first obfuscate bytes in the name.\u005cn\u005c'wipesync\u005c' => also sync each obfuscated byte to disk.\u005cnThe default mode is \u005c'wipesync\u005c', but note it can be expensive.\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "CAUTION: Note that shred relies on a very important assumption:\u005cnthat the file system overwrites data in place.  This is the traditional\u005cnway to do things, but many modern file system designs do not satisfy this\u005cnassumption.  The following are examples of file systems on which shred is\u005cnnot effective, or is not guaranteed to be effective in all file system modes:\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "* log-structured or journaled file systems, such as those supplied with\u005cnAIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)\u005cn\u005cn* file systems that write redundant data and carry on even if some writes\u005cnfail, such as RAID-based file systems\u005cn\u005cn* file systems that make snapshots, such as Network Appliance\u005c's NFS server\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "* file systems that cache in temporary locations, such as NFS\u005cnversion 3 clients\u005cn\u005cn* compressed file systems\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "In addition, file system backups and remote mirrors may contain copies\u005cnof the file that cannot be removed, and that will allow a shredded file\u005cnto be recovered later.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p829
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x0040204e\nXOR EDI,EDI\nMOV ESI,0x408991\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060d388]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x4089b0\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x408a36\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nCALL 0x004020a0\nXOR EDI,EDI\nMOV ESI,0x408a5d\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x3\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c30\nXOR EDI,EDI\nMOV ESI,0x408b63\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x408cd0\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x408cfd\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x408d33\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x408f0e\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x40907a\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x4091b6\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x409223\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nXOR EDI,EDI\nMOV ESI,0x4093fb\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nCALL 0x00401af0\nCALL 0x004020d0\nMOV EDI,EBX\nCALL 0x00401d10\nCALL 0x00402060\nMOV EDI,EBX\nCALL 0x00401d10\n'
p830
S'53\n89 fb\n85 db\n0f 85 c3 01 00 00\n31 ff\nbe 91 89 40 00\nba 05 00 00 00\ne8 14 fb ff ff\n48 89 c1\n48 8b 15 e2 b4 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 7b fd ff ff\n31 ff\nbe b0 89 40 00\nba 05 00 00 00\ne8 ea fa ff ff\n48 8b 35 5b b4 20 00\n48 89 c7\ne8 1b fc ff ff\n31 ff\nbe 36 8a 40 00\nba 05 00 00 00\ne8 ca fa ff ff\n48 8b 35 3b b4 20 00\n48 89 c7\ne8 fb fb ff ff\ne8 a6 01 00 00\n31 ff\nbe 5d 8a 40 00\nba 05 00 00 00\ne8 a5 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 03 00 00 00\n31 c0\n48 89 ce\ne8 0e fd ff ff\n31 ff\nbe 63 8b 40 00\nba 05 00 00 00\ne8 7d fa ff ff\n48 8b 35 ee b3 20 00\n48 89 c7\ne8 ae fb ff ff\n31 ff\nbe d0 8c 40 00\nba 05 00 00 00\ne8 5d fa ff ff\n48 8b 35 ce b3 20 00\n48 89 c7\ne8 8e fb ff ff\n31 ff\nbe fd 8c 40 00\nba 05 00 00 00\ne8 3d fa ff ff\n48 8b 35 ae b3 20 00\n48 89 c7\ne8 6e fb ff ff\n31 ff\nbe 33 8d 40 00\nba 05 00 00 00\ne8 1d fa ff ff\n48 8b 35 8e b3 20 00\n48 89 c7\ne8 4e fb ff ff\n31 ff\nbe 0e 8f 40 00\nba 05 00 00 00\ne8 fd f9 ff ff\n48 8b 35 6e b3 20 00\n48 89 c7\ne8 2e fb ff ff\n31 ff\nbe 7a 90 40 00\nba 05 00 00 00\ne8 dd f9 ff ff\n48 8b 35 4e b3 20 00\n48 89 c7\ne8 0e fb ff ff\n31 ff\nbe b6 91 40 00\nba 05 00 00 00\ne8 bd f9 ff ff\n48 8b 35 2e b3 20 00\n48 89 c7\ne8 ee fa ff ff\n31 ff\nbe 23 92 40 00\nba 05 00 00 00\ne8 9d f9 ff ff\n48 8b 35 0e b3 20 00\n48 89 c7\ne8 ce fa ff ff\n31 ff\nbe fb 93 40 00\nba 05 00 00 00\ne8 7d f9 ff ff\n48 8b 35 ee b2 20 00\n48 89 c7\ne8 ae fa ff ff\ne8 89 00 00 00\n89 df\ne8 c2 fc ff ff\ne8 0d 00 00 00\n89 df\ne8 b6 fc ff ff\n'
p831
S'.text:0000000000401e80\n.text:0000000000401e81\n.text:0000000000401e83\n.text:0000000000401e85\n.text:0000000000401e8b\n.text:0000000000401e8d\n.text:0000000000401e92\n.text:0000000000401e97\n.text:0000000000401e9c\n.text:0000000000401e9f\n.text:0000000000401ea6\n.text:0000000000401eab\n.text:0000000000401ead\n.text:0000000000401eb0\n.text:0000000000401eb5\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ec1\n.text:0000000000401ec6\n.text:0000000000401ecd\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401edc\n.text:0000000000401ee1\n.text:0000000000401ee6\n.text:0000000000401eed\n.text:0000000000401ef0\n.text:0000000000401ef5\n.text:0000000000401efa\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f0b\n.text:0000000000401f0e\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1a\n.text:0000000000401f1d\n.text:0000000000401f22\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f2e\n.text:0000000000401f33\n.text:0000000000401f3a\n.text:0000000000401f3d\n.text:0000000000401f42\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f5a\n.text:0000000000401f5d\n.text:0000000000401f62\n.text:0000000000401f64\n.text:0000000000401f69\n.text:0000000000401f6e\n.text:0000000000401f73\n.text:0000000000401f7a\n.text:0000000000401f7d\n.text:0000000000401f82\n.text:0000000000401f84\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f93\n.text:0000000000401f9a\n.text:0000000000401f9d\n.text:0000000000401fa2\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb3\n.text:0000000000401fba\n.text:0000000000401fbd\n.text:0000000000401fc2\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fce\n.text:0000000000401fd3\n.text:0000000000401fda\n.text:0000000000401fdd\n.text:0000000000401fe2\n.text:0000000000401fe4\n.text:0000000000401fe9\n.text:0000000000401fee\n.text:0000000000401ff3\n.text:0000000000401ffa\n.text:0000000000401ffd\n.text:0000000000402002\n.text:0000000000402004\n.text:0000000000402009\n.text:000000000040200e\n.text:0000000000402013\n.text:000000000040201a\n.text:000000000040201d\n.text:0000000000402022\n.text:0000000000402024\n.text:0000000000402029\n.text:000000000040202e\n.text:0000000000402033\n.text:000000000040203a\n.text:000000000040203d\n.text:0000000000402042\n.text:0000000000402047\n.text:0000000000402049\n.text:000000000040204e\n.text:0000000000402053\n.text:0000000000402055\n'
p832
tp833
sS'quoting_options_from_style'
p834
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p835
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p836
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00405cbd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401890\n'
p837
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ce bb ff ff\n'
p838
S'.text:0000000000405c70\n.text:0000000000405c74\n.text:0000000000405c77\n.text:0000000000405c7c\n.text:0000000000405c81\n.text:0000000000405c85\n.text:0000000000405c8d\n.text:0000000000405c90\n.text:0000000000405c92\n.text:0000000000405c94\n.text:0000000000405c98\n.text:0000000000405c9b\n.text:0000000000405c9f\n.text:0000000000405ca4\n.text:0000000000405ca9\n.text:0000000000405cad\n.text:0000000000405cb1\n.text:0000000000405cb5\n.text:0000000000405cb8\n.text:0000000000405cbc\n.text:0000000000405cbd\n'
p839
tp840
sS'strcpy'
p841
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060d058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060d058]\n'
p844
S'ff 25 62 b7 20 00\n'
p845
S'.plt:00000000004018f0\n'
p846
tp847
sS'mdir_name'
p848
(S'\n__stdcall mdir_name(char * file)\n'
p849
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p850
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00403f10\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401b90\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403f9e\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401b30\nTEST RBX,RBX\nJNZ 0x00403f97\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x00403fa1\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p851
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 1e dc ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 a8 db ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p852
S'.text:0000000000403f50\n.text:0000000000403f52\n.text:0000000000403f54\n.text:0000000000403f55\n.text:0000000000403f58\n.text:0000000000403f5d\n.text:0000000000403f60\n.text:0000000000403f62\n.text:0000000000403f65\n.text:0000000000403f68\n.text:0000000000403f6d\n.text:0000000000403f72\n.text:0000000000403f75\n.text:0000000000403f78\n.text:0000000000403f7a\n.text:0000000000403f7d\n.text:0000000000403f80\n.text:0000000000403f83\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f8d\n.text:0000000000403f92\n.text:0000000000403f97\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa5\n.text:0000000000403fa7\n.text:0000000000403fa9\n'
p853
tp854
sS'c_isgraph'
p855
(S'\n__stdcall c_isgraph()\n'
p856
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p857
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p858
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p859
S'.text:0000000000407fa0\n.text:0000000000407fa3\n.text:0000000000407fa6\n.text:0000000000407fa9\n'
p860
tp861
sS'write'
p862
(S'\n__stdcall write(int __fd, void * __buf, size_t __n)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t write(int __fd,void *__buf,size_t __n)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_write_0060d088)();\u000a  return sVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060d088]\n'
p865
S'ff 25 32 b7 20 00\n'
p866
S'.plt:0000000000401950\n'
p867
tp868
sS'dorewind'
p869
(S'\n__stdcall dorewind(stat * st)\n'
p870
V\u000a_Bool dorewind(stat *st)\u000a\u000a{\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  long in_RSI;\u000a  mtop op;\u000a  undefined2 local_10 [2];\u000a  undefined4 local_c;\u000a  \u000a  if ((*(uint *)(in_RSI + 0x18) & 0xf000) == 0x2000) {\u000a    local_10[0] = 6;\u000a    local_c = 1;\u000a    iVar1 = ioctl((int)st,0x40086d01,local_10);\u000a    if (iVar1 == 0) {\u000a      return true;\u000a    }\u000a  }\u000a  _Var2 = lseek((int)st,0,0);\u000a  if (0 < _Var2) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0x16;\u000a  }\u000a  return (_Bool)(_Var2 == 0);\u000a}\u000a\u000a
p871
S'PUSH RBX\nSUB RSP,0x10\nMOV EBX,EDI\nMOV EAX,0xf000\nAND EAX,dword ptr [RSI + 0x18]\nCMP EAX,0x2000\nJNZ 0x0040354c\nMOV word ptr [RSP + 0x8],0x6\nMOV dword ptr [RSP + 0xc],0x1\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x40086d01\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401aa0\nTEST EAX,EAX\nJZ 0x00403572\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EBX\nCALL 0x00401a50\nMOV RBX,RAX\nTEST RBX,RBX\nJLE 0x0040356a\nCALL 0x004018a0\nMOV dword ptr [RAX],0x16\nTEST RBX,RBX\nSETZ AL\nJMP 0x00403574\nMOV AL,0x1\nADD RSP,0x10\nPOP RBX\nRET\n'
p872
S'53\n48 83 ec 10\n89 fb\nb8 00 f0 00 00\n23 46 18\n3d 00 20 00 00\n75 26\n66 c7 44 24 08 06 00\nc7 44 24 0c 01 00 00 00\n48 8d 54 24 08\nbe 01 6d 08 40\n31 c0\n89 df\ne8 58 e5 ff ff\n85 c0\n74 26\n31 f6\n31 d2\n89 df\ne8 f9 e4 ff ff\n48 89 c3\n48 85 db\n7e 0b\ne8 3c e3 ff ff\nc7 00 16 00 00 00\n48 85 db\n0f 94 c0\neb 02\nb0 01\n48 83 c4 10\n5b\nc3\n'
p873
S'.text:0000000000403510\n.text:0000000000403511\n.text:0000000000403515\n.text:0000000000403517\n.text:000000000040351c\n.text:000000000040351f\n.text:0000000000403524\n.text:0000000000403526\n.text:000000000040352d\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353f\n.text:0000000000403541\n.text:0000000000403543\n.text:0000000000403548\n.text:000000000040354a\n.text:000000000040354c\n.text:000000000040354e\n.text:0000000000403550\n.text:0000000000403552\n.text:0000000000403557\n.text:000000000040355a\n.text:000000000040355d\n.text:000000000040355f\n.text:0000000000403564\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403570\n.text:0000000000403572\n.text:0000000000403574\n.text:0000000000403578\n.text:0000000000403579\n'
p874
tp875
sS'quotearg_buffer_restyled'
p876
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p877
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00404cec_caseD_7;\u000a  case 2:\u000a    goto switchD_00404cec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00404cec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00404cec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00404cec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00404cec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00404cec_caseD_7;\u000aswitchD_00404cec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00404cec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00404cec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004057b0;\u000aLAB_00404ed0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004057b9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004057c8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00404edb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00404f1f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00404f1f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004057c8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004056f5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00405600;\u000a    }\u000a    goto LAB_004057c8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040572a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004057c8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00405759;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00405218;\u000a  case '\u005ca':\u000a    goto joined_r0x00405108;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00405108;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00404f36_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00405108;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00405108;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00404f36_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00405108:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040566e;\u000a    }\u000a    goto LAB_004057c8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004057c8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004057c8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004057c8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004057c8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004057c8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00404f36_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004056c6;\u000a      goto joined_r0x004056b8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004051c1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004056b8;\u000a      goto LAB_004056c6;\u000a    }\u000a    goto LAB_004057c8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004057c8;\u000a  }\u000a  goto joined_r0x00405600;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040572a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00405759;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00405759:\u000a  if (1 < uVar10) {\u000aLAB_00405236:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004052f2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004051c1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004052f2:\u000a        if (bVar6 != 0) goto LAB_004057c8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00405218:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00405236;\u000ajoined_r0x00405600:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00405600:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00405627;\u000aLAB_00405660:\u000a    if (bVar22) goto LAB_00405665;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00405660;\u000aLAB_00405627:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00405665:\u000a      if (bVar6 != 0) goto LAB_004057c8;\u000aLAB_0040566e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004056b8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004056c6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004056b8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004056f5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00404ed0;\u000aLAB_004057b0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004057b9;\u000a  goto LAB_00404edb;\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004019c0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00405895\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x409ae0 + RAX*0x8]\nMOV EDI,0x40a006\nMOV ESI,R15D\nCALL 0x00405f40\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40a008\nMOV ESI,R15D\nCALL 0x00405f40\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00404d4d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00404d50\nNOP\nCMP R12,RSI\nJNC 0x00404d3e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00404d30\nJMP 0x00404d50\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004019d0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00404e1c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00404e1c\nMOV ECX,0x40a004\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00404e16\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00404db7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00404de4\nTEST RSI,RSI\nJZ 0x00404dd1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40a008\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00404df2\nMOV ECX,0x40a008\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00404e1c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040586c\nMOV ECX,0x40a004\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004057b0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004057b9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00404f1f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00404f1a\nCMP R11,-0x1\nJNZ 0x00404f1a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004019d0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00404f70\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004051cc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x409b38 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004057c8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00405620\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00405627\nJMP 0x00405660\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401ae0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00404fbd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00404f21\nJMP 0x004057c8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00404f21\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00404f4b\nCMP EBX,0x2\nJNZ 0x00404f4b\nTEST R13,R13\nJNZ 0x00404f4b\nJMP 0x004057c8\nCMP R11,-0x1\nJZ 0x004053a3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004053c3\nJMP 0x00404f4b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004053d4\nTEST R8B,R8B\nJNZ 0x004057c8\nCMP EBX,0x2\nJNZ 0x00405078\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405078\nCMP R12,RSI\nJNC 0x00405053\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405062\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405071\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405082\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00405548\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00405548\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00405548\nCMP RCX,RSI\nJNC 0x004050bc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004050cb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nJMP 0x00405620\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404f49\nJMP 0x0040512a\nMOV DL,0x74\nJMP 0x00405112\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404f49\nJMP 0x0040512a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404f49\nJMP 0x0040512a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004057c8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404f49\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040566e\nJMP 0x004057c8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00404f49\nTEST R8B,R8B\nJNZ 0x004057c8\nCMP R12,RSI\nJNC 0x0040515a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405169\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405178\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00404f49\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040555b\nCMP EBX,0x2\nJNZ 0x00404f49\nTEST R8B,R8B\nJZ 0x00404f49\nJMP 0x004057c8\nCMP EBX,0x2\nJNZ 0x004053f4\nTEST R8B,R8B\nJNZ 0x004057c8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004056c6\nJMP 0x004056e9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00405415\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401d60\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405608\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00405608\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004052f2\nJMP 0x004052c0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004052a9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004052a6\nCMP R12,RSI\nJNC 0x0040528b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040529a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004052e0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004052e0\nTEST BPL,0x1\nJZ 0x00405383\nCMP R12,RSI\nJNC 0x004052d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00405383\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004052c0\nTEST R8B,R8B\nJNZ 0x004057c8\nCMP EBX,0x2\nJNZ 0x0040533a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040533a\nCMP R12,RSI\nJNC 0x00405312\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405321\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405330\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00405344\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040535b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405375\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00405270\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004056c6\nJMP 0x004056e9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00404f4b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00404f4b\nJMP 0x004057c8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004056f5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nJMP 0x00405620\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00405112\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004056c6\nJMP 0x004056e9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00405437\nMOV RDI,R10\nCALL 0x004019d0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401a10\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040570f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00405707\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405716\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004054fe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004054f6\nBT RDI,RDX\nJC 0x00405862\nINC RCX\nCMP RCX,R14\nJC 0x004054e0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401d50\nTEST EAX,EAX\nJNZ 0x00405513\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401d40\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405455\nJMP 0x00405759\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nJMP 0x00405620\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00404f49\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00404f49\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00404f49\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00404f4b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00405792\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004057c8\nCMP R12,RSI\nJNC 0x004055be\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004055d1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004055e0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004055ef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nJMP 0x00405620\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00405660\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00405665\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004056c0\nJMP 0x00405665\nTEST BPL,BPL\nJZ 0x004056c0\nTEST R8B,R8B\nJNZ 0x004057c8\nCMP EBX,0x2\nJNZ 0x004056a8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004056a8\nCMP R12,RSI\nJNC 0x00405683\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405692\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004056a1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004056b2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004056f2\nJMP 0x004056ee\nTEST DIL,0x1\nJZ 0x004056e9\nAND AL,0x1\nJNZ 0x004056e9\nCMP R12,RSI\nJNC 0x004056d4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004056e3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004056f2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004057b0\nJMP 0x00404ed0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00405754\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040574c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00405788\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040572a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405759\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00405218\nJMP 0x00405236\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405759\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404f56\nJMP 0x00405620\nCMP R13,R11\nJNZ 0x00404edb\nTEST R8B,R8B\nJZ 0x00405822\nCMP EBX,0x2\nJNZ 0x00405822\nTEST R12,R12\nJNZ 0x00405822\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00404c60\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00405856\nTEST R8B,R8B\nJNZ 0x00405856\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00405856\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00405849\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00405840\nCMP R12,RSI\nJNC 0x0040580d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040580d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004057c8\nTEST RSI,RSI\nJZ 0x00405879\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40a004\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00404e1c\nCALL 0x00401890\n'
p879
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 32 cd ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 e0 9a 40 00\nbf 06 a0 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 08 a0 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 73 cc ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 04 a0 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 08 a0 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 08 a0 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 04 a0 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 d3 ca ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 38 9b 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 57 cb ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 77 cb ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 a1 c5 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 93 c5 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 49 c8 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 12 c8 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 04 a0 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 f6 bf ff ff\n'
p880
S'.text:0000000000404c60\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c67\n.text:0000000000404c69\n.text:0000000000404c6a\n.text:0000000000404c71\n.text:0000000000404c74\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7f\n.text:0000000000404c84\n.text:0000000000404c89\n.text:0000000000404c8e\n.text:0000000000404c96\n.text:0000000000404c9a\n.text:0000000000404ca0\n.text:0000000000404ca8\n.text:0000000000404cad\n.text:0000000000404cb5\n.text:0000000000404cba\n.text:0000000000404cbe\n.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc6\n.text:0000000000404cc9\n.text:0000000000404cce\n.text:0000000000404cd1\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce4\n.text:0000000000404ce7\n.text:0000000000404cec\n.text:0000000000404cf3\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d0a\n.text:0000000000404d0d\n.text:0000000000404d12\n.text:0000000000404d17\n.text:0000000000404d1c\n.text:0000000000404d1e\n.text:0000000000404d20\n.text:0000000000404d25\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2c\n.text:0000000000404d2e\n.text:0000000000404d30\n.text:0000000000404d33\n.text:0000000000404d35\n.text:0000000000404d3a\n.text:0000000000404d3e\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d49\n.text:0000000000404d4b\n.text:0000000000404d4d\n.text:0000000000404d50\n.text:0000000000404d55\n.text:0000000000404d58\n.text:0000000000404d5d\n.text:0000000000404d62\n.text:0000000000404d65\n.text:0000000000404d68\n.text:0000000000404d6b\n.text:0000000000404d6e\n.text:0000000000404d73\n.text:0000000000404d76\n.text:0000000000404d79\n.text:0000000000404d7e\n.text:0000000000404d81\n.text:0000000000404d83\n.text:0000000000404d86\n.text:0000000000404d88\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d97\n.text:0000000000404d9c\n.text:0000000000404d9f\n.text:0000000000404da5\n.text:0000000000404da7\n.text:0000000000404daa\n.text:0000000000404dad\n.text:0000000000404db0\n.text:0000000000404db2\n.text:0000000000404db4\n.text:0000000000404db7\n.text:0000000000404dba\n.text:0000000000404dbf\n.text:0000000000404dc2\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dce\n.text:0000000000404dd1\n.text:0000000000404dd6\n.text:0000000000404ddc\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de9\n.text:0000000000404def\n.text:0000000000404df2\n.text:0000000000404df5\n.text:0000000000404df8\n.text:0000000000404dfa\n.text:0000000000404dff\n.text:0000000000404e02\n.text:0000000000404e08\n.text:0000000000404e0d\n.text:0000000000404e13\n.text:0000000000404e16\n.text:0000000000404e19\n.text:0000000000404e1c\n.text:0000000000404e24\n.text:0000000000404e26\n.text:0000000000404e28\n.text:0000000000404e2b\n.text:0000000000404e2f\n.text:0000000000404e31\n.text:0000000000404e34\n.text:0000000000404e38\n.text:0000000000404e3a\n.text:0000000000404e3d\n.text:0000000000404e40\n.text:0000000000404e43\n.text:0000000000404e45\n.text:0000000000404e49\n.text:0000000000404e4b\n.text:0000000000404e4f\n.text:0000000000404e52\n.text:0000000000404e55\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5e\n.text:0000000000404e67\n.text:0000000000404e6a\n.text:0000000000404e6c\n.text:0000000000404e70\n.text:0000000000404e72\n.text:0000000000404e76\n.text:0000000000404e78\n.text:0000000000404e7b\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e84\n.text:0000000000404e88\n.text:0000000000404e8d\n.text:0000000000404e90\n.text:0000000000404e94\n.text:0000000000404e9c\n.text:0000000000404e9f\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404ea8\n.text:0000000000404eab\n.text:0000000000404ead\n.text:0000000000404eb2\n.text:0000000000404eb6\n.text:0000000000404ebb\n.text:0000000000404ec0\n.text:0000000000404ec4\n.text:0000000000404eca\n.text:0000000000404ed0\n.text:0000000000404ed5\n.text:0000000000404edb\n.text:0000000000404ee0\n.text:0000000000404ee2\n.text:0000000000404ee7\n.text:0000000000404eeb\n.text:0000000000404eed\n.text:0000000000404ef1\n.text:0000000000404ef3\n.text:0000000000404ef5\n.text:0000000000404ef8\n.text:0000000000404efd\n.text:0000000000404eff\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f0d\n.text:0000000000404f12\n.text:0000000000404f17\n.text:0000000000404f1a\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f21\n.text:0000000000404f26\n.text:0000000000404f2a\n.text:0000000000404f30\n.text:0000000000404f32\n.text:0000000000404f34\n.text:0000000000404f36\n.text:0000000000404f3e\n.text:0000000000404f43\n.text:0000000000404f49\n.text:0000000000404f4b\n.text:0000000000404f50\n.text:0000000000404f56\n.text:0000000000404f5f\n.text:0000000000404f65\n.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f75\n.text:0000000000404f79\n.text:0000000000404f81\n.text:0000000000404f84\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8e\n.text:0000000000404f90\n.text:0000000000404f95\n.text:0000000000404f98\n.text:0000000000404f9d\n.text:0000000000404fa0\n.text:0000000000404fa5\n.text:0000000000404fa9\n.text:0000000000404fae\n.text:0000000000404fb0\n.text:0000000000404fb2\n.text:0000000000404fb8\n.text:0000000000404fbd\n.text:0000000000404fc2\n.text:0000000000404fc5\n.text:0000000000404fca\n.text:0000000000404fce\n.text:0000000000404fd3\n.text:0000000000404fd8\n.text:0000000000404fda\n.text:0000000000404fdc\n.text:0000000000404fe1\n.text:0000000000404fe3\n.text:0000000000404fe6\n.text:0000000000404fec\n.text:0000000000404fef\n.text:0000000000404ff5\n.text:0000000000404ff8\n.text:0000000000404ffe\n.text:0000000000405003\n.text:0000000000405007\n.text:000000000040500d\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405017\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501f\n.text:0000000000405025\n.text:000000000040502a\n.text:000000000040502f\n.text:0000000000405035\n.text:0000000000405038\n.text:000000000040503e\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405045\n.text:0000000000405047\n.text:0000000000405049\n.text:000000000040504c\n.text:000000000040504e\n.text:0000000000405053\n.text:0000000000405058\n.text:000000000040505b\n.text:000000000040505d\n.text:0000000000405062\n.text:0000000000405067\n.text:000000000040506a\n.text:000000000040506c\n.text:0000000000405071\n.text:0000000000405075\n.text:0000000000405078\n.text:000000000040507b\n.text:000000000040507d\n.text:0000000000405082\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508c\n.text:000000000040508f\n.text:0000000000405095\n.text:0000000000405099\n.text:000000000040509c\n.text:00000000004050a2\n.text:00000000004050a6\n.text:00000000004050a9\n.text:00000000004050ac\n.text:00000000004050b2\n.text:00000000004050b5\n.text:00000000004050b7\n.text:00000000004050bc\n.text:00000000004050c1\n.text:00000000004050c4\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050cf\n.text:00000000004050d4\n.text:00000000004050da\n.text:00000000004050df\n.text:00000000004050e1\n.text:00000000004050e6\n.text:00000000004050ec\n.text:00000000004050ee\n.text:00000000004050f0\n.text:00000000004050f2\n.text:00000000004050f4\n.text:00000000004050f9\n.text:00000000004050ff\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405108\n.text:000000000040510e\n.text:0000000000405110\n.text:0000000000405112\n.text:0000000000405117\n.text:0000000000405119\n.text:000000000040511f\n.text:0000000000405124\n.text:000000000040512a\n.text:000000000040512d\n.text:0000000000405130\n.text:0000000000405136\n.text:000000000040513b\n.text:000000000040513e\n.text:0000000000405141\n.text:0000000000405147\n.text:000000000040514a\n.text:0000000000405150\n.text:0000000000405153\n.text:0000000000405155\n.text:000000000040515a\n.text:000000000040515f\n.text:0000000000405162\n.text:0000000000405164\n.text:0000000000405169\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405173\n.text:0000000000405178\n.text:000000000040517c\n.text:000000000040517e\n.text:0000000000405183\n.text:0000000000405186\n.text:0000000000405189\n.text:000000000040518f\n.text:0000000000405192\n.text:0000000000405198\n.text:000000000040519b\n.text:00000000004051a1\n.text:00000000004051a6\n.text:00000000004051a9\n.text:00000000004051af\n.text:00000000004051b2\n.text:00000000004051b8\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c1\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051d0\n.text:00000000004051d9\n.text:00000000004051df\n.text:00000000004051e4\n.text:00000000004051e9\n.text:00000000004051ee\n.text:00000000004051f1\n.text:00000000004051f6\n.text:00000000004051f9\n.text:00000000004051fc\n.text:0000000000405201\n.text:0000000000405206\n.text:000000000040520a\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405218\n.text:000000000040521a\n.text:000000000040521f\n.text:0000000000405225\n.text:0000000000405228\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405230\n.text:0000000000405236\n.text:000000000040523b\n.text:000000000040523e\n.text:0000000000405241\n.text:0000000000405244\n.text:0000000000405247\n.text:0000000000405249\n.text:000000000040524d\n.text:000000000040524f\n.text:0000000000405254\n.text:0000000000405259\n.text:000000000040525f\n.text:0000000000405270\n.text:0000000000405275\n.text:0000000000405277\n.text:000000000040527a\n.text:000000000040527c\n.text:000000000040527f\n.text:0000000000405281\n.text:0000000000405284\n.text:0000000000405286\n.text:000000000040528b\n.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405295\n.text:000000000040529a\n.text:000000000040529e\n.text:00000000004052a6\n.text:00000000004052a9\n.text:00000000004052ac\n.text:00000000004052ae\n.text:00000000004052b2\n.text:00000000004052c0\n.text:00000000004052c4\n.text:00000000004052ca\n.text:00000000004052cd\n.text:00000000004052cf\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052d9\n.text:00000000004052e0\n.text:00000000004052e3\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052f0\n.text:00000000004052f2\n.text:00000000004052f5\n.text:00000000004052fb\n.text:00000000004052fe\n.text:0000000000405300\n.text:0000000000405304\n.text:0000000000405306\n.text:0000000000405308\n.text:000000000040530b\n.text:000000000040530d\n.text:0000000000405312\n.text:0000000000405317\n.text:000000000040531a\n.text:000000000040531c\n.text:0000000000405321\n.text:0000000000405326\n.text:0000000000405329\n.text:000000000040532b\n.text:0000000000405330\n.text:0000000000405334\n.text:0000000000405336\n.text:000000000040533a\n.text:000000000040533d\n.text:000000000040533f\n.text:0000000000405344\n.text:0000000000405349\n.text:000000000040534c\n.text:000000000040534e\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405357\n.text:000000000040535b\n.text:0000000000405360\n.text:0000000000405363\n.text:0000000000405365\n.text:0000000000405368\n.text:000000000040536b\n.text:000000000040536e\n.text:0000000000405371\n.text:0000000000405375\n.text:0000000000405379\n.text:000000000040537d\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405387\n.text:000000000040538a\n.text:0000000000405390\n.text:0000000000405394\n.text:0000000000405398\n.text:000000000040539e\n.text:00000000004053a3\n.text:00000000004053a6\n.text:00000000004053a9\n.text:00000000004053ae\n.text:00000000004053b1\n.text:00000000004053b3\n.text:00000000004053b6\n.text:00000000004053bd\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053c9\n.text:00000000004053cf\n.text:00000000004053d4\n.text:00000000004053d9\n.text:00000000004053df\n.text:00000000004053e2\n.text:00000000004053e4\n.text:00000000004053e9\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f6\n.text:00000000004053fb\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405406\n.text:000000000040540a\n.text:0000000000405410\n.text:0000000000405415\n.text:0000000000405421\n.text:0000000000405425\n.text:0000000000405427\n.text:000000000040542a\n.text:000000000040542f\n.text:0000000000405434\n.text:0000000000405437\n.text:000000000040543b\n.text:0000000000405440\n.text:0000000000405442\n.text:0000000000405446\n.text:0000000000405448\n.text:0000000000405450\n.text:0000000000405455\n.text:000000000040545a\n.text:000000000040545e\n.text:0000000000405462\n.text:000000000040546a\n.text:000000000040546d\n.text:0000000000405472\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405489\n.text:000000000040548d\n.text:0000000000405497\n.text:000000000040549d\n.text:00000000004054a1\n.text:00000000004054a6\n.text:00000000004054ac\n.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b7\n.text:00000000004054b9\n.text:00000000004054be\n.text:00000000004054c3\n.text:00000000004054c7\n.text:00000000004054c9\n.text:00000000004054ce\n.text:00000000004054d3\n.text:00000000004054d7\n.text:00000000004054dc\n.text:00000000004054e0\n.text:00000000004054e4\n.text:00000000004054e7\n.text:00000000004054ea\n.text:00000000004054ec\n.text:00000000004054f0\n.text:00000000004054f6\n.text:00000000004054f9\n.text:00000000004054fc\n.text:00000000004054fe\n.text:0000000000405502\n.text:0000000000405507\n.text:0000000000405509\n.text:000000000040550b\n.text:0000000000405513\n.text:0000000000405518\n.text:000000000040551b\n.text:0000000000405523\n.text:0000000000405526\n.text:0000000000405529\n.text:000000000040552e\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405538\n.text:000000000040553d\n.text:0000000000405543\n.text:0000000000405548\n.text:000000000040554b\n.text:0000000000405550\n.text:0000000000405556\n.text:000000000040555b\n.text:0000000000405560\n.text:0000000000405566\n.text:000000000040556a\n.text:000000000040556d\n.text:0000000000405573\n.text:0000000000405579\n.text:000000000040557f\n.text:0000000000405584\n.text:0000000000405586\n.text:0000000000405589\n.text:000000000040558f\n.text:0000000000405593\n.text:0000000000405595\n.text:000000000040559f\n.text:00000000004055a3\n.text:00000000004055a9\n.text:00000000004055ac\n.text:00000000004055ae\n.text:00000000004055b4\n.text:00000000004055b7\n.text:00000000004055b9\n.text:00000000004055be\n.text:00000000004055c3\n.text:00000000004055c6\n.text:00000000004055ca\n.text:00000000004055cc\n.text:00000000004055d1\n.text:00000000004055d6\n.text:00000000004055d9\n.text:00000000004055db\n.text:00000000004055e0\n.text:00000000004055e5\n.text:00000000004055e8\n.text:00000000004055ea\n.text:00000000004055ef\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055f8\n.text:00000000004055fb\n.text:0000000000405600\n.text:0000000000405606\n.text:0000000000405608\n.text:000000000040560d\n.text:0000000000405612\n.text:0000000000405618\n.text:0000000000405620\n.text:0000000000405625\n.text:0000000000405627\n.text:000000000040562c\n.text:000000000040562f\n.text:0000000000405631\n.text:0000000000405634\n.text:0000000000405636\n.text:0000000000405639\n.text:000000000040563c\n.text:000000000040563f\n.text:0000000000405641\n.text:0000000000405649\n.text:000000000040564c\n.text:000000000040564e\n.text:0000000000405650\n.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405665\n.text:0000000000405668\n.text:000000000040566e\n.text:0000000000405671\n.text:0000000000405673\n.text:0000000000405675\n.text:0000000000405677\n.text:0000000000405679\n.text:000000000040567c\n.text:000000000040567e\n.text:0000000000405683\n.text:0000000000405688\n.text:000000000040568b\n.text:000000000040568d\n.text:0000000000405692\n.text:0000000000405697\n.text:000000000040569a\n.text:000000000040569c\n.text:00000000004056a1\n.text:00000000004056a5\n.text:00000000004056a8\n.text:00000000004056ab\n.text:00000000004056ad\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b8\n.text:00000000004056ba\n.text:00000000004056c0\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056c8\n.text:00000000004056ca\n.text:00000000004056cd\n.text:00000000004056cf\n.text:00000000004056d4\n.text:00000000004056d9\n.text:00000000004056dc\n.text:00000000004056de\n.text:00000000004056e3\n.text:00000000004056e7\n.text:00000000004056e9\n.text:00000000004056ec\n.text:00000000004056ee\n.text:00000000004056f2\n.text:00000000004056f5\n.text:00000000004056f8\n.text:00000000004056fc\n.text:0000000000405702\n.text:0000000000405707\n.text:000000000040570f\n.text:0000000000405714\n.text:0000000000405716\n.text:000000000040571e\n.text:0000000000405723\n.text:0000000000405725\n.text:000000000040572a\n.text:000000000040572f\n.text:0000000000405733\n.text:0000000000405735\n.text:000000000040573a\n.text:000000000040573d\n.text:0000000000405740\n.text:0000000000405742\n.text:000000000040574a\n.text:000000000040574c\n.text:0000000000405754\n.text:0000000000405759\n.text:000000000040575d\n.text:0000000000405762\n.text:0000000000405767\n.text:000000000040576b\n.text:0000000000405770\n.text:0000000000405775\n.text:0000000000405779\n.text:000000000040577d\n.text:0000000000405783\n.text:0000000000405788\n.text:0000000000405790\n.text:0000000000405792\n.text:0000000000405794\n.text:0000000000405798\n.text:000000000040579d\n.text:00000000004057a3\n.text:00000000004057b0\n.text:00000000004057b3\n.text:00000000004057b9\n.text:00000000004057bc\n.text:00000000004057be\n.text:00000000004057c1\n.text:00000000004057c3\n.text:00000000004057c6\n.text:00000000004057c8\n.text:00000000004057d0\n.text:00000000004057d6\n.text:00000000004057da\n.text:00000000004057dd\n.text:00000000004057e1\n.text:00000000004057e6\n.text:00000000004057ea\n.text:00000000004057ee\n.text:00000000004057f1\n.text:00000000004057f4\n.text:00000000004057f7\n.text:00000000004057fb\n.text:00000000004057ff\n.text:0000000000405801\n.text:0000000000405806\n.text:000000000040580a\n.text:000000000040580d\n.text:0000000000405810\n.text:0000000000405817\n.text:0000000000405818\n.text:000000000040581a\n.text:000000000040581c\n.text:000000000040581e\n.text:0000000000405820\n.text:0000000000405821\n.text:0000000000405822\n.text:000000000040582a\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405832\n.text:0000000000405834\n.text:0000000000405836\n.text:0000000000405838\n.text:000000000040583a\n.text:000000000040583d\n.text:0000000000405840\n.text:0000000000405843\n.text:0000000000405845\n.text:0000000000405849\n.text:000000000040584c\n.text:000000000040584f\n.text:0000000000405852\n.text:0000000000405854\n.text:0000000000405856\n.text:0000000000405859\n.text:000000000040585b\n.text:0000000000405860\n.text:0000000000405862\n.text:0000000000405867\n.text:000000000040586c\n.text:000000000040586f\n.text:0000000000405871\n.text:0000000000405876\n.text:0000000000405879\n.text:000000000040587e\n.text:0000000000405881\n.text:0000000000405887\n.text:000000000040588d\n.text:0000000000405890\n.text:0000000000405895\n'
p881
tp882
sS'simple_new'
p883
(S'\n__stdcall simple_new(FILE * source, void * handler_arg)\n'
p884
V\u000arandread_source * simple_new(FILE *source,void *handler_arg)\u000a\u000a{\u000a  randread_source *prVar1;\u000a  \u000a  prVar1 = (randread_source *)xmalloc(0x1038);\u000a  prVar1->source = source;\u000a  prVar1->handler = randread_error;\u000a  prVar1->handler_arg = handler_arg;\u000a  return prVar1;\u000a}\u000a\u000a
p885
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,0x1038\nCALL 0x00407620\nMOV qword ptr [RAX],RBX\nMOV qword ptr [RAX + 0x8],0x406970\nMOV qword ptr [RAX + 0x10],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p886
S'41 56\n53\n50\n49 89 f6\n48 89 fb\nbf 38 10 00 00\ne8 4c 10 00 00\n48 89 18\n48 c7 40 08 70 69 40 00\n4c 89 70 10\n48 83 c4 08\n5b\n41 5e\nc3\n'
p887
S'.text:00000000004065c0\n.text:00000000004065c2\n.text:00000000004065c3\n.text:00000000004065c4\n.text:00000000004065c7\n.text:00000000004065ca\n.text:00000000004065cf\n.text:00000000004065d4\n.text:00000000004065d7\n.text:00000000004065df\n.text:00000000004065e3\n.text:00000000004065e7\n.text:00000000004065e8\n.text:00000000004065ea\n'
p888
tp889
sS'getgid'
p890
(S'\n__stdcall getgid()\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getgid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getgid_0060d190)();\u000a  return _Var1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060d190]\n'
p893
S'ff 25 2a b6 20 00\n'
p894
S'.plt:0000000000401b60\n'
p895
tp896
sS'set_quoting_style'
p897
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p898
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p899
S'TEST RDI,RDI\nMOV EAX,0x60d390\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p900
S'48 85 ff\nb8 90 d3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p901
S'.text:0000000000404b40\n.text:0000000000404b43\n.text:0000000000404b48\n.text:0000000000404b4c\n.text:0000000000404b4e\n'
p902
tp903
sS'textdomain'
p904
(S'\n__stdcall textdomain()\n'
p905
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060d0a0)();\u000a  return;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060d0a0]\n'
p907
S'ff 25 1a b7 20 00\n'
p908
S'.plt:0000000000401980\n'
p909
tp910
sS'__strcpy_chk'
p911
(S'\n__stdcall __strcpy_chk()\n'
p912
V\u000avoid __strcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___strcpy_chk_0060d1e0)();\u000a  return;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0060d1e0]\n'
p914
S'ff 25 da b5 20 00\n'
p915
S'.plt:0000000000401c00\n'
p916
tp917
sS'xmemdup'
p918
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p919
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p920
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00407620\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401b30\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p921
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ac a3 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p922
S'.text:0000000000407760\n.text:0000000000407762\n.text:0000000000407764\n.text:0000000000407765\n.text:0000000000407768\n.text:000000000040776b\n.text:000000000040776e\n.text:0000000000407773\n.text:0000000000407776\n.text:0000000000407779\n.text:000000000040777c\n.text:000000000040777f\n.text:0000000000407784\n.text:0000000000407787\n.text:0000000000407788\n.text:000000000040778a\n.text:000000000040778c\n'
p923
tp924
sS'readisaac'
p925
(S'\n__stdcall readisaac(isaac * isaac, void * p, size_t size)\n'
p926
V\u000avoid readisaac(isaac *isaac,void *p,size_t size)\u000a\u000a{\u000a  isaac_state *s;\u000a  isaac_word *result;\u000a  ulong __n;\u000a  isaac_word *__src;\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  \u000a  __n = isaac->buffered;\u000a  result = (isaac_word *)isaac->data;\u000a  __src = (isaac_word *)((long)result + (0x800 - __n));\u000a  uVar1 = __n;\u000a  if (__n < size) {\u000a    s = &isaac->state;\u000a    uVar1 = 0x800;\u000a    do {\u000a      memcpy(p,__src,__n);\u000a      p = (void *)((long)p + __n);\u000a      size = size - __n;\u000a      if (((ulong)p & 7) == 0) {\u000a        sVar2 = 0;\u000a        goto LAB_00406910;\u000a      }\u000a      isaac_refill(s,result);\u000a      __n = 0x800;\u000a      __src = result;\u000a    } while (0x800 < size);\u000a  }\u000aLAB_004068da:\u000a  memcpy(p,__src,size);\u000a  sVar2 = uVar1 - size;\u000a  goto LAB_004068eb;\u000a  while( true ) {\u000a    isaac_refill(s,(isaac_word *)p);\u000a    p = (isaac_word *)p + 0x100;\u000a    size = size + 0xfffff800;\u000a    if (size == 0) break;\u000aLAB_00406910:\u000a    if (size < 0x800) {\u000a      isaac_refill(s,result);\u000a      __src = result;\u000a      uVar1 = 0x800;\u000a      goto LAB_004068da;\u000a    }\u000a  }\u000aLAB_004068eb:\u000a  isaac->buffered = sVar2;\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV RBX,RSI\nMOV RBP,qword ptr [RDI]\nLEA R12,[0x820 + RDI]\nMOV RSI,R12\nSUB RSI,RBP\nADD RSI,0x800\nCMP RBP,R15\nMOV qword ptr [RSP],RDI\nJNC 0x004068d4\nLEA R13,[RDI + 0x8]\nMOV R14D,0x800\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401b30\nADD RBX,RBP\nSUB R15,RBP\nTEST BL,0x7\nJZ 0x00406901\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x004069d0\nCMP R15,0x800\nMOV RSI,R12\nMOV EBP,0x800\nJA 0x004068a0\nJMP 0x004068da\nMOV R14,RBP\nMOV R12,RSI\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00401b30\nSUB R14,R15\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX],R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP R15,0x800\nJC 0x00406936\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x004069d0\nADD RBX,0x800\nADD R15,0xfffff800\nJNZ 0x00406910\nJMP 0x004068eb\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x004069d0\nMOV R14D,0x800\nJMP 0x004068da\n'
p928
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n48 89 f3\n48 8b 2f\n4c 8d a7 20 08 00 00\n4c 89 e6\n48 29 ee\n48 81 c6 00 08 00 00\n4c 39 fd\n48 89 3c 24\n73 43\n4c 8d 6f 08\n41 be 00 08 00 00\n0f 1f 44 00 00\n48 89 df\n48 89 ea\ne8 85 b2 ff ff\n48 01 eb\n49 29 ef\nf6 c3 07\n74 4b\n4c 89 ef\n4c 89 e6\ne8 0f 01 00 00\n49 81 ff 00 08 00 00\n4c 89 e6\nbd 00 08 00 00\n77 ce\neb 06\n49 89 ee\n49 89 f4\n48 89 df\n4c 89 e6\n4c 89 fa\ne8 48 b2 ff ff\n4d 29 fe\n48 8b 04 24\n4c 89 30\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 81 ff 00 08 00 00\n72 1d\n4c 89 ef\n48 89 de\ne8 ac 00 00 00\n48 81 c3 00 08 00 00\n49 81 c7 00 f8 ff ff\n75 dc\neb b5\n4c 89 ef\n4c 89 e6\ne8 8f 00 00 00\n41 be 00 08 00 00\neb 91\n'
p929
S'.text:0000000000406860\n.text:0000000000406861\n.text:0000000000406863\n.text:0000000000406865\n.text:0000000000406867\n.text:0000000000406869\n.text:000000000040686a\n.text:000000000040686b\n.text:000000000040686e\n.text:0000000000406871\n.text:0000000000406874\n.text:000000000040687b\n.text:000000000040687e\n.text:0000000000406881\n.text:0000000000406888\n.text:000000000040688b\n.text:000000000040688f\n.text:0000000000406891\n.text:0000000000406895\n.text:000000000040689b\n.text:00000000004068a0\n.text:00000000004068a3\n.text:00000000004068a6\n.text:00000000004068ab\n.text:00000000004068ae\n.text:00000000004068b1\n.text:00000000004068b4\n.text:00000000004068b6\n.text:00000000004068b9\n.text:00000000004068bc\n.text:00000000004068c1\n.text:00000000004068c8\n.text:00000000004068cb\n.text:00000000004068d0\n.text:00000000004068d2\n.text:00000000004068d4\n.text:00000000004068d7\n.text:00000000004068da\n.text:00000000004068dd\n.text:00000000004068e0\n.text:00000000004068e3\n.text:00000000004068e8\n.text:00000000004068eb\n.text:00000000004068ef\n.text:00000000004068f2\n.text:00000000004068f6\n.text:00000000004068f7\n.text:00000000004068f9\n.text:00000000004068fb\n.text:00000000004068fd\n.text:00000000004068ff\n.text:0000000000406900\n.text:0000000000406901\n.text:0000000000406904\n.text:0000000000406910\n.text:0000000000406917\n.text:0000000000406919\n.text:000000000040691c\n.text:000000000040691f\n.text:0000000000406924\n.text:000000000040692b\n.text:0000000000406932\n.text:0000000000406934\n.text:0000000000406936\n.text:0000000000406939\n.text:000000000040693c\n.text:0000000000406941\n.text:0000000000406947\n'
p930
tp931
sS'getpagesize'
p932
(S'\n__stdcall getpagesize()\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getpagesize(void)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getpagesize_0060d258)();\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0060d258]\n'
p935
S'ff 25 62 b5 20 00\n'
p936
S'.plt:0000000000401cf0\n'
p937
tp938
sS'get_quoting_style'
p939
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p940
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p941
S'TEST RDI,RDI\nMOV EAX,0x60d390\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p942
S'48 85 ff\nb8 90 d3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p943
S'.text:0000000000404b30\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3c\n.text:0000000000404b3e\n'
p944
tp945
sS'fread_unlocked'
p946
(S'\n__stdcall fread_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_unlocked_0060d098)();\u000a  return sVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060d098]\n'
p949
S'ff 25 22 b7 20 00\n'
p950
S'.plt:0000000000401970\n'
p951
tp952
sS'ferror_unlocked'
p953
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060d160)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060d160]\n'
p956
S'ff 25 5a b6 20 00\n'
p957
S'.plt:0000000000401b00\n'
p958
tp959
sS'exit'
p960
(S'\n__stdcall exit(int __status)\n'
p961
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060d268)();\u000a  return;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x0060d268]\n'
p963
S'ff 25 52 b5 20 00\n'
p964
S'.plt:0000000000401d10\n'
p965
tp966
sS'locale_charset'
p967
(S'\n__stdcall locale_charset()\n'
p968
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a         + 0x1d7;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004081dd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004081dd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401bb0\nTEST RAX,RAX\nMOV R14D,0x4093fa\nCMOVNZ R14,RAX\nCALL 0x004081f0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004081b5\nJMP 0x004081dd\nMOV RDI,RBX\nCALL 0x004019d0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004019d0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004081dd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x004081d0\nCMP BPL,0x2a\nJNZ 0x00408190\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408190\nMOV RDI,RBX\nCALL 0x004019d0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40aa20\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p970
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 9a ff ff\n48 85 c0\n41 be fa 93 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 38 98 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 2a 98 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 60 99 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 f8 97 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 20 aa 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p971
S'.text:0000000000408160\n.text:0000000000408161\n.text:0000000000408163\n.text:0000000000408164\n.text:0000000000408169\n.text:000000000040816e\n.text:0000000000408171\n.text:0000000000408177\n.text:000000000040817b\n.text:0000000000408180\n.text:0000000000408183\n.text:0000000000408186\n.text:0000000000408189\n.text:000000000040818b\n.text:0000000000408190\n.text:0000000000408193\n.text:0000000000408198\n.text:000000000040819c\n.text:00000000004081a1\n.text:00000000004081a6\n.text:00000000004081ab\n.text:00000000004081b0\n.text:00000000004081b3\n.text:00000000004081b5\n.text:00000000004081b8\n.text:00000000004081bb\n.text:00000000004081c0\n.text:00000000004081c2\n.text:00000000004081c4\n.text:00000000004081c8\n.text:00000000004081ca\n.text:00000000004081ce\n.text:00000000004081d0\n.text:00000000004081d3\n.text:00000000004081d8\n.text:00000000004081dd\n.text:00000000004081e1\n.text:00000000004081e6\n.text:00000000004081ea\n.text:00000000004081eb\n.text:00000000004081ed\n.text:00000000004081ee\n'
p972
tp973
sS'set_program_name'
p974
(S'\n__stdcall set_program_name(char * argv0)\n'
p975
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404ac1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401a30\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00404aab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x409ac8\nMOV EDX,0x7\nCALL 0x004018d0\nTEST EAX,EAX\nJNZ 0x00404aab\nMOV ESI,0x409ad0\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004018d0\nTEST EAX,EAX\nJNZ 0x00404aa8\nADD R14,0x3\nMOV qword ptr [0x0060d320],R14\nMOV RBX,R14\nMOV qword ptr [0x0060d388],RBX\nMOV qword ptr [0x0060d340],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060d360]\nMOV EDI,0x409a90\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401d20\nCALL 0x00401890\n'
p977
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 d7 cf ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe c8 9a 40 00\nba 07 00 00 00\ne8 4d ce ff ff\n85 c0\n75 24\nbe d0 9a 40 00\nba 03 00 00 00\n4c 89 f7\ne8 37 ce ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 78 88 20 00\n4c 89 f3\n48 89 1d d6 88 20 00\n48 89 1d 87 88 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 98 88 20 00\nbf 90 9a 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 44 d2 ff ff\ne8 af cd ff ff\n'
p978
S'.text:0000000000404a40\n.text:0000000000404a42\n.text:0000000000404a43\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a4a\n.text:0000000000404a4c\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a59\n.text:0000000000404a5c\n.text:0000000000404a60\n.text:0000000000404a64\n.text:0000000000404a67\n.text:0000000000404a6a\n.text:0000000000404a6e\n.text:0000000000404a70\n.text:0000000000404a74\n.text:0000000000404a79\n.text:0000000000404a7e\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a8c\n.text:0000000000404a91\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404aa1\n.text:0000000000404aa8\n.text:0000000000404aab\n.text:0000000000404ab2\n.text:0000000000404ab9\n.text:0000000000404abd\n.text:0000000000404abe\n.text:0000000000404ac0\n.text:0000000000404ac1\n.text:0000000000404ac8\n.text:0000000000404acd\n.text:0000000000404ad2\n.text:0000000000404ad7\n.text:0000000000404adc\n'
p979
tp980
sS'randint_get_source'
p981
(S'\n__stdcall randint_get_source(randint_source * s)\n'
p982
V\u000arandread_source * randint_get_source(randint_source *s)\u000a\u000a{\u000a  return s->source;\u000a}\u000a\u000a
p983
S'MOV RAX,qword ptr [RDI]\nRET\n'
p984
S'48 8b 07\nc3\n'
p985
S'.text:0000000000406380\n.text:0000000000406383\n'
p986
tp987
sS'quotearg_buffer'
p988
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p989
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60d390\nCMOVNZ RBP,R8\nCALL 0x004018a0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00404c60\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 90 d3 60 00\n49 0f 45 e8\ne8 98 cc ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404be9\n.text:0000000000404bea\n.text:0000000000404beb\n.text:0000000000404bee\n.text:0000000000404bf1\n.text:0000000000404bf4\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c03\n.text:0000000000404c08\n.text:0000000000404c0b\n.text:0000000000404c0d\n.text:0000000000404c11\n.text:0000000000404c15\n.text:0000000000404c19\n.text:0000000000404c1d\n.text:0000000000404c20\n.text:0000000000404c23\n.text:0000000000404c26\n.text:0000000000404c29\n.text:0000000000404c2c\n.text:0000000000404c2f\n.text:0000000000404c33\n.text:0000000000404c34\n.text:0000000000404c39\n.text:0000000000404c3d\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c47\n.text:0000000000404c48\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c50\n.text:0000000000404c51\n'
p993
tp994
sS'quotearg_colon'
p995
(S'\n__stdcall quotearg_colon(char * arg)\n'
p996
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p997
S'MOV ESI,0x3a\nJMP 0x00405dc0\n'
p998
S'be 3a 00 00 00\neb e9\n'
p999
S'.text:0000000000405dd0\n.text:0000000000405dd5\n'
p1000
tp1001
sS'rpl_fflush'
p1002
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1003
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060d1b0)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1004
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407e6d\nMOV RDI,RBX\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00407e6d\nMOV RDI,RBX\nCALL 0x00407e80\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401ba0\n'
p1005
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 7f 9d ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 2a 9d ff ff\n'
p1006
S'.text:0000000000407e50\n.text:0000000000407e51\n.text:0000000000407e54\n.text:0000000000407e57\n.text:0000000000407e59\n.text:0000000000407e5c\n.text:0000000000407e61\n.text:0000000000407e63\n.text:0000000000407e65\n.text:0000000000407e68\n.text:0000000000407e6d\n.text:0000000000407e70\n.text:0000000000407e71\n'
p1007
tp1008
sS'__assert_fail'
p1009
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060d118)();\u000a  return;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x0060d118]\n'
p1012
S'ff 25 a2 b6 20 00\n'
p1013
S'.plt:0000000000401a70\n'
p1014
tp1015
sS'bindtextdomain'
p1016
(S'\n__stdcall bindtextdomain()\n'
p1017
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060d0b0)();\u000a  return;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060d0b0]\n'
p1019
S'ff 25 0a b7 20 00\n'
p1020
S'.plt:00000000004019a0\n'
p1021
tp1022
sS'set_char_quoting'
p1023
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1024
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1025
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60d390\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1026
S'89 f1\n48 85 ff\nbe 90 d3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1027
S'.text:0000000000404b50\n.text:0000000000404b52\n.text:0000000000404b55\n.text:0000000000404b5a\n.text:0000000000404b5e\n.text:0000000000404b60\n.text:0000000000404b63\n.text:0000000000404b67\n.text:0000000000404b6c\n.text:0000000000404b6f\n.text:0000000000404b71\n.text:0000000000404b73\n.text:0000000000404b76\n.text:0000000000404b78\n.text:0000000000404b7b\n.text:0000000000404b7d\n.text:0000000000404b80\n.text:0000000000404b85\n'
p1028
tp1029
sS'quotearg_n'
p1030
(S'\n__stdcall quotearg_n(char * arg)\n'
p1031
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1032
S'MOV RDX,-0x1\nMOV ECX,0x60d390\nJMP 0x00405a40\n'
p1033
S'48 c7 c2 ff ff ff ff\nb9 90 d3 60 00\neb 02\n'
p1034
S'.text:0000000000405a30\n.text:0000000000405a37\n.text:0000000000405a3c\n'
p1035
tp1036
sS'close_stream'
p1037
(S'\n__stdcall close_stream(FILE * stream)\n'
p1038
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401900\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401b00\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00407c10\nTEST EBP,EBP\nJZ 0x0040809b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004080bf\nCALL 0x004018a0\nMOV dword ptr [RAX],0x0\nJMP 0x004080bf\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004080bf\nTEST CL,CL\nJNZ 0x004080bf\nCALL 0x004018a0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1040
S'55\n41 56\n53\n48 89 fb\ne8 94 98 ff ff\n49 89 c6\n48 89 df\ne8 89 9a ff ff\n89 c5\n48 89 df\ne8 8f fb ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 0d 98 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ee 97 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1041
S'.text:0000000000408060\n.text:0000000000408061\n.text:0000000000408063\n.text:0000000000408064\n.text:0000000000408067\n.text:000000000040806c\n.text:000000000040806f\n.text:0000000000408072\n.text:0000000000408077\n.text:0000000000408079\n.text:000000000040807c\n.text:0000000000408081\n.text:0000000000408083\n.text:0000000000408085\n.text:000000000040808a\n.text:000000000040808c\n.text:000000000040808e\n.text:0000000000408093\n.text:0000000000408099\n.text:000000000040809b\n.text:000000000040809d\n.text:00000000004080a0\n.text:00000000004080a2\n.text:00000000004080a4\n.text:00000000004080a7\n.text:00000000004080a9\n.text:00000000004080ab\n.text:00000000004080ad\n.text:00000000004080b2\n.text:00000000004080b4\n.text:00000000004080b7\n.text:00000000004080bc\n.text:00000000004080bf\n.text:00000000004080c1\n.text:00000000004080c2\n.text:00000000004080c4\n.text:00000000004080c5\n'
p1042
tp1043
sS'quotearg_colon_mem'
p1044
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1045
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV EDX,0x3a\nJMP 0x00405d50\n'
p1047
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1048
S'.text:0000000000405de0\n.text:0000000000405de5\n'
p1049
tp1050
sS'xcalloc'
p1051
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1052
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1053
S'PUSH RAX\nCALL 0x00407bc0\nTEST RAX,RAX\nJZ 0x0040774d\nPOP RCX\nRET\nCALL 0x004077b0\n'
p1054
S'50\ne8 7a 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1055
S'.text:0000000000407740\n.text:0000000000407741\n.text:0000000000407746\n.text:0000000000407749\n.text:000000000040774b\n.text:000000000040774c\n.text:000000000040774d\n'
p1056
tp1057
sS'dosync'
p1058
(S'\n__stdcall dosync(char * qname)\n'
p1059
V\u000aint dosync(char *qname)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  uint uVar5;\u000a  char *pcVar6;\u000a  \u000a  iVar2 = fdatasync((int)qname);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar5 = *puVar3;\u000a  _Var1 = ignorable_sync_errno();\u000a  if (_Var1 == false) {\u000a    pcVar6 = "%s: fdatasync failed";\u000a  }\u000a  else {\u000a    iVar2 = fsync((int)qname);\u000a    if (iVar2 == 0) {\u000a      return 0;\u000a    }\u000a    uVar5 = *puVar3;\u000a    _Var1 = ignorable_sync_errno();\u000a    if (_Var1 != false) {\u000a      sync();\u000a      return 0;\u000a    }\u000a    pcVar6 = "%s: fsync failed";\u000a  }\u000a  uVar4 = dcgettext(0,pcVar6,5);\u000a  error(0,(ulong)uVar5,uVar4);\u000a  *puVar3 = uVar5;\u000a  return -1;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV EBP,EDI\nCALL 0x004018b0\nXOR R12D,R12D\nTEST EAX,EAX\nJZ 0x00403716\nCALL 0x004018a0\nMOV R15,RAX\nMOV EBX,dword ptr [R15]\nMOV EDI,EBX\nCALL 0x00403730\nTEST AL,AL\nJZ 0x004036df\nMOV EDI,EBP\nCALL 0x00401c80\nTEST EAX,EAX\nJZ 0x00403716\nMOV EBX,dword ptr [R15]\nMOV EDI,EBX\nCALL 0x00403730\nTEST AL,AL\nJZ 0x004036e8\nCALL 0x00401b70\nJMP 0x00403716\nXOR EDI,EDI\nMOV ESI,0x4098a9\nJMP 0x004036ef\nXOR EDI,EDI\nMOV ESI,0x4098be\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401c70\nMOV dword ptr [R15],EBX\nMOV R12D,0xffffffff\nMOV EAX,R12D\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 54\n53\n49 89 f6\n89 fd\ne8 0e e2 ff ff\n45 31 e4\n85 c0\n74 6d\ne8 f2 e1 ff ff\n49 89 c7\n41 8b 1f\n89 df\ne8 75 00 00 00\n84 c0\n74 20\n89 ef\ne8 ba e5 ff ff\n85 c0\n74 4c\n41 8b 1f\n89 df\ne8 5c 00 00 00\n84 c0\n74 10\ne8 93 e4 ff ff\neb 37\n31 ff\nbe a9 98 40 00\neb 07\n31 ff\nbe be 98 40 00\nba 05 00 00 00\ne8 b7 e2 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\n4c 89 f1\ne8 63 e5 ff ff\n41 89 1f\n41 bc ff ff ff ff\n44 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000403690\n.text:0000000000403691\n.text:0000000000403693\n.text:0000000000403695\n.text:0000000000403697\n.text:0000000000403698\n.text:000000000040369b\n.text:000000000040369d\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036a7\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b1\n.text:00000000004036b4\n.text:00000000004036b6\n.text:00000000004036bb\n.text:00000000004036bd\n.text:00000000004036bf\n.text:00000000004036c1\n.text:00000000004036c6\n.text:00000000004036c8\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036cf\n.text:00000000004036d4\n.text:00000000004036d6\n.text:00000000004036d8\n.text:00000000004036dd\n.text:00000000004036df\n.text:00000000004036e1\n.text:00000000004036e6\n.text:00000000004036e8\n.text:00000000004036ea\n.text:00000000004036ef\n.text:00000000004036f4\n.text:00000000004036f9\n.text:00000000004036fc\n.text:00000000004036fe\n.text:0000000000403700\n.text:0000000000403702\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370d\n.text:0000000000403710\n.text:0000000000403716\n.text:0000000000403719\n.text:000000000040371a\n.text:000000000040371c\n.text:000000000040371e\n.text:0000000000403720\n.text:0000000000403721\n'
p1063
tp1064
sS'xnumtoumax'
p1065
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p1066
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x004078e0\nCMP EAX,0x3\nJZ 0x0040783e\nCMP EAX,0x1\nJZ 0x0040784b\nTEST EAX,EAX\nJNZ 0x00407856\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x00407821\nCMP RBX,R15\nJBE 0x00407891\nCALL 0x004018a0\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x00407856\nCALL 0x004018a0\nMOV dword ptr [RAX],0x0\nJMP 0x00407856\nCALL 0x004018a0\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00405f30\nMOV R8,RAX\nMOV EDX,0x4099d7\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401c70\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1068
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 7a a0 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 5d a0 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 50 a0 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 37 a0 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 b5 e6 ff ff\n49 89 c0\nba d7 99 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 df a3 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1069
S'.text:00000000004077e0\n.text:00000000004077e1\n.text:00000000004077e3\n.text:00000000004077e5\n.text:00000000004077e7\n.text:00000000004077e9\n.text:00000000004077ea\n.text:00000000004077eb\n.text:00000000004077ee\n.text:00000000004077f1\n.text:00000000004077f4\n.text:00000000004077f6\n.text:00000000004077f9\n.text:00000000004077fc\n.text:00000000004077fe\n.text:0000000000407800\n.text:0000000000407805\n.text:0000000000407808\n.text:000000000040780a\n.text:000000000040780d\n.text:000000000040780f\n.text:0000000000407811\n.text:0000000000407813\n.text:0000000000407817\n.text:000000000040781a\n.text:000000000040781c\n.text:000000000040781f\n.text:0000000000407821\n.text:0000000000407826\n.text:000000000040782d\n.text:0000000000407832\n.text:0000000000407837\n.text:000000000040783a\n.text:000000000040783c\n.text:000000000040783e\n.text:0000000000407843\n.text:0000000000407849\n.text:000000000040784b\n.text:0000000000407850\n.text:0000000000407856\n.text:000000000040785a\n.text:000000000040785c\n.text:0000000000407861\n.text:0000000000407864\n.text:0000000000407869\n.text:000000000040786b\n.text:000000000040786d\n.text:0000000000407870\n.text:0000000000407873\n.text:0000000000407876\n.text:000000000040787b\n.text:000000000040787e\n.text:0000000000407883\n.text:0000000000407885\n.text:0000000000407887\n.text:0000000000407889\n.text:000000000040788c\n.text:0000000000407891\n.text:0000000000407895\n.text:0000000000407899\n.text:000000000040789a\n.text:000000000040789c\n.text:000000000040789e\n.text:00000000004078a0\n.text:00000000004078a2\n.text:00000000004078a3\n'
p1070
tp1071
sS'known'
p1072
(S'\n__stdcall known(off_t size)\n'
p1073
V\u000a_Bool known(off_t size)\u000a\u000a{\u000a  return (_Bool)(-1 < size);\u000a}\u000a\u000a
p1074
S'TEST RDI,RDI\nSETNS AL\nRET\n'
p1075
S'48 85 ff\n0f 99 c0\nc3\n'
p1076
S'.text:0000000000403580\n.text:0000000000403583\n.text:0000000000403586\n'
p1077
tp1078
sS'clear_ungetc_buffer_preserving_position'
p1079
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1080
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1081
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00407e87\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00407ea0\n'
p1082
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1083
S'.text:0000000000407e80\n.text:0000000000407e84\n.text:0000000000407e86\n.text:0000000000407e87\n.text:0000000000407e89\n.text:0000000000407e8e\n'
p1084
tp1085
sS'fillpattern'
p1086
(S'\n__stdcall fillpattern(uchar * r, size_t size)\n'
p1087
V\u000avoid fillpattern(uchar *r,size_t size)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong in_RDX;\u000a  ulong __n;\u000a  \u000a  uVar1 = (uint)r & 0xfff;\u000a  *(char *)size = (char)(((ulong)r & 0xffffffff) >> 4);\u000a  *(undefined *)(size + 1) = (char)((ulong)(uVar1 << 0xc | uVar1) >> 8);\u000a  *(undefined *)(size + 2) = (char)r;\u000a  if (in_RDX < 8) {\u000a    __n = 3;\u000a  }\u000a  else {\u000a    __n = 3;\u000a    do {\u000a      memcpy((void *)(size + __n),(void *)size,__n);\u000a      __n = __n * 2;\u000a    } while (__n < in_RDX >> 1);\u000a  }\u000a  if (__n < in_RDX) {\u000a    memcpy((void *)(size + __n),(void *)size,in_RDX - __n);\u000a  }\u000a  if ((((ulong)r & 0x1000) != 0) && (in_RDX != 0)) {\u000a    __n = 0;\u000a    do {\u000a      *(byte *)(size + __n) = *(byte *)(size + __n) ^ 0x80;\u000a      __n = __n + 0x200;\u000a    } while (__n < in_RDX);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDX\nMOV RBP,RSI\nMOV ECX,EDI\nAND ECX,0xfff\nMOV EAX,ECX\nSHL EAX,0xc\nOR EAX,ECX\nMOV ECX,EDI\nSHR ECX,0x4\nMOV byte ptr [RBP],CL\nMOV byte ptr [RBP + 0x1],AH\nMOV R12D,EDI\nMOV byte ptr [RBP + 0x2],DIL\nCMP R14,0x8\nJC 0x004035ea\nMOV R15,R14\nSHR R15,1\nMOV EBX,0x3\nLEA RDI,[RBP + RBX*0x1]\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x00401b30\nADD RBX,RBX\nCMP RBX,R15\nJC 0x004035d0\nJMP 0x004035ef\nMOV EBX,0x3\nCMP RBX,R14\nJNC 0x00403607\nLEA RDI,[RBP + RBX*0x1]\nMOV RDX,R14\nSUB RDX,RBX\nMOV RSI,RBP\nCALL 0x00401b30\nMOV EAX,R12D\nTEST AH,0x10\nJZ 0x00403630\nTEST R14,R14\nJZ 0x00403630\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR byte ptr [RBP + RAX*0x1],0x80\nADD RAX,0x200\nCMP RAX,R14\nJC 0x00403620\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n41 54\n53\n49 89 d6\n48 89 f5\n89 f9\n81 e1 ff 0f 00 00\n89 c8\nc1 e0 0c\n09 c8\n89 f9\nc1 e9 04\n88 4d 00\n88 65 01\n41 89 fc\n40 88 7d 02\n49 83 fe 08\n72 25\n4d 89 f7\n49 d1 ef\nbb 03 00 00 00\n48 8d 7c 1d 00\n48 89 ee\n48 89 da\ne8 50 e5 ff ff\n48 01 db\n4c 39 fb\n72 e8\neb 05\nbb 03 00 00 00\n4c 39 f3\n73 13\n48 8d 7c 1d 00\n4c 89 f2\n48 29 da\n48 89 ee\ne8 29 e5 ff ff\n44 89 e0\nf6 c4 10\n74 21\n4d 85 f6\n74 1c\n31 c0\n66 2e 0f 1f 84 00 00 00 00 00\n80 74 05 00 80\n48 05 00 02 00 00\n4c 39 f0\n72 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:0000000000403590\n.text:0000000000403591\n.text:0000000000403593\n.text:0000000000403595\n.text:0000000000403597\n.text:0000000000403598\n.text:000000000040359b\n.text:000000000040359e\n.text:00000000004035a0\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035ad\n.text:00000000004035af\n.text:00000000004035b2\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035bb\n.text:00000000004035bf\n.text:00000000004035c3\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035cb\n.text:00000000004035d0\n.text:00000000004035d5\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e6\n.text:00000000004035e8\n.text:00000000004035ea\n.text:00000000004035ef\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f9\n.text:00000000004035fc\n.text:00000000004035ff\n.text:0000000000403602\n.text:0000000000403607\n.text:000000000040360a\n.text:000000000040360d\n.text:000000000040360f\n.text:0000000000403612\n.text:0000000000403614\n.text:0000000000403616\n.text:0000000000403620\n.text:0000000000403625\n.text:000000000040362b\n.text:000000000040362e\n.text:0000000000403630\n.text:0000000000403631\n.text:0000000000403633\n.text:0000000000403635\n.text:0000000000403637\n.text:0000000000403638\n'
p1091
tp1092
sS'xnmalloc'
p1093
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1094
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1095
S'MOV RAX,RDI\nMUL RSI\nJO 0x00407611\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00407620\nPUSH RAX\nCALL 0x004077b0\n'
p1096
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1097
S'.text:0000000000407600\n.text:0000000000407603\n.text:0000000000407606\n.text:0000000000407608\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407611\n.text:0000000000407612\n'
p1098
tp1099
sS'FUN_00401860'
p1100
(S'\n__stdcall FUN_00401860()\n'
p1101
V\u000avoid FUN_00401860(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060d010)();\u000a  return;\u000a}\u000a\u000a
p1102
S'PUSH qword ptr [0x0060d008]\nJMP qword ptr [0x0060d010]\n'
p1103
S'ff 35 a2 b7 20 00\nff 25 a4 b7 20 00\n'
p1104
S'.plt:0000000000401860\n.plt:0000000000401866\n'
p1105
tp1106
sS'quotearg_char'
p1107
(S'\n__stdcall quotearg_char(char * arg)\n'
p1108
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1109
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00405d50\n'
p1110
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1111
S'.text:0000000000405dc0\n.text:0000000000405dc2\n.text:0000000000405dc9\n.text:0000000000405dcb\n'
p1112
tp1113
sS'malloc'
p1114
(S'\n__stdcall malloc(size_t __size)\n'
p1115
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060d1a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x0060d1a8]\n'
p1117
S'ff 25 12 b6 20 00\n'
p1118
S'.plt:0000000000401b90\n'
p1119
tp1120
sS'argmatch_invalid'
p1121
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1122
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1123
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x409971\nMOV ESI,0x40998c\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004019b0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00405c30\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00405f20\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c70\n'
p1124
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 71 99 40 00\nbe 8c 99 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 b4 dd ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 22 20 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 02 23 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 30 e0 ff ff\n'
p1125
S'.text:0000000000403bd0\n.text:0000000000403bd2\n.text:0000000000403bd4\n.text:0000000000403bd6\n.text:0000000000403bd7\n.text:0000000000403bd8\n.text:0000000000403bdb\n.text:0000000000403bde\n.text:0000000000403be2\n.text:0000000000403be7\n.text:0000000000403bec\n.text:0000000000403bf0\n.text:0000000000403bf2\n.text:0000000000403bf7\n.text:0000000000403bfc\n.text:0000000000403bff\n.text:0000000000403c01\n.text:0000000000403c06\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c11\n.text:0000000000403c16\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c2a\n.text:0000000000403c2d\n.text:0000000000403c30\n.text:0000000000403c34\n.text:0000000000403c35\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3b\n'
p1126
tp1127
sS'c_tolower'
p1128
(S'\n__stdcall c_tolower()\n'
p1129
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1130
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1131
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1132
S'.text:0000000000408040\n.text:0000000000408043\n.text:0000000000408046\n.text:0000000000408049\n.text:000000000040804c\n'
p1133
tp1134
sS'getopt_long'
p1135
(S'\n__stdcall getopt_long()\n'
p1136
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060d0e0)();\u000a  return;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060d0e0]\n'
p1138
S'ff 25 da b6 20 00\n'
p1139
S'.plt:0000000000401a00\n'
p1140
tp1141
sS'randint_all_new'
p1142
(S'\n__stdcall randint_all_new(char * name, size_t bytes_bound)\n'
p1143
V\u000arandint_source * randint_all_new(char *name,size_t bytes_bound)\u000a\u000a{\u000a  randread_source *source;\u000a  randint_source *prVar1;\u000a  \u000a  source = randread_new(name,bytes_bound);\u000a  if (source != (randread_source *)0x0) {\u000a    prVar1 = randint_new(source);\u000a    return prVar1;\u000a  }\u000a  return (randint_source *)0x0;\u000a}\u000a\u000a
p1144
S'PUSH RAX\nCALL 0x00406510\nTEST RAX,RAX\nJZ 0x00406371\nMOV RDI,RAX\nPOP RAX\nJMP 0x00406340\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1145
S'50\ne8 aa 01 00 00\n48 85 c0\n74 06\n48 89 c7\n58\neb cf\n31 c0\n59\nc3\n'
p1146
S'.text:0000000000406360\n.text:0000000000406361\n.text:0000000000406366\n.text:0000000000406369\n.text:000000000040636b\n.text:000000000040636e\n.text:000000000040636f\n.text:0000000000406371\n.text:0000000000406373\n.text:0000000000406374\n'
p1147
tp1148
sS'quotearg_style'
p1149
(S'\n__stdcall quotearg_style(char * arg)\n'
p1150
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1151
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00405c30\n'
p1152
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1153
S'.text:0000000000405d10\n.text:0000000000405d13\n.text:0000000000405d15\n.text:0000000000405d17\n.text:0000000000405d19\n.text:0000000000405d1c\n'
p1154
tp1155
sS'__argmatch_die'
p1156
(S'\n__stdcall __argmatch_die()\n'
p1157
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1158
S'MOV EDI,0x1\nJMP 0x00401e80\n'
p1159
S'bf 01 00 00 00\ne9 b6 e3 ff ff\n'
p1160
S'.text:0000000000403ac0\n.text:0000000000403ac5\n'
p1161
tp1162
sS'emit_try_help'
p1163
(S'\n__stdcall emit_try_help()\n'
p1164
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1165
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d360]\nXOR EDI,EDI\nMOV ESI,0x40955d\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060d388]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401d30\n'
p1166
S'53\n48 8b 1d f8 b2 20 00\n31 ff\nbe 5d 95 40 00\nba 05 00 00 00\ne8 37 f9 ff ff\n48 89 c2\n48 8b 0d 05 b3 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fc ff ff\n'
p1167
S'.text:0000000000402060\n.text:0000000000402061\n.text:0000000000402068\n.text:000000000040206a\n.text:000000000040206f\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207c\n.text:0000000000402083\n.text:0000000000402088\n.text:000000000040208a\n.text:000000000040208d\n.text:000000000040208e\n'
p1168
tp1169
sS'rename'
p1170
(S'\n__stdcall rename(char * __old, char * __new)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rename(char *__old,char *__new)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rename_0060d240)();\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060d240]\n'
p1173
S'ff 25 7a b5 20 00\n'
p1174
S'.plt:0000000000401cc0\n'
p1175
tp1176
sS'strrchr'
p1177
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060d0f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x0060d0f8]\n'
p1180
S'ff 25 c2 b6 20 00\n'
p1181
S'.plt:0000000000401a30\n'
p1182
tp1183
sS'quotearg_alloc_mem'
p1184
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1185
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60d390\nCMOVNZ R12,RCX\nCALL 0x004018a0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00404c60\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004076f0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00404c60\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040598a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1187
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 90 d3 60 00\n4c 0f 45 e1\ne8 b8 bf ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 b1 1d 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1188
S'.text:00000000004058b0\n.text:00000000004058b1\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058b7\n.text:00000000004058b9\n.text:00000000004058ba\n.text:00000000004058be\n.text:00000000004058c1\n.text:00000000004058c6\n.text:00000000004058c9\n.text:00000000004058ce\n.text:00000000004058d1\n.text:00000000004058d6\n.text:00000000004058d9\n.text:00000000004058df\n.text:00000000004058e3\n.text:00000000004058e8\n.text:00000000004058ed\n.text:00000000004058ef\n.text:00000000004058f3\n.text:00000000004058f5\n.text:00000000004058f8\n.text:00000000004058fc\n.text:0000000000405901\n.text:0000000000405905\n.text:000000000040590a\n.text:000000000040590e\n.text:0000000000405910\n.text:0000000000405912\n.text:0000000000405915\n.text:0000000000405918\n.text:000000000040591b\n.text:0000000000405920\n.text:0000000000405925\n.text:0000000000405927\n.text:000000000040592c\n.text:0000000000405930\n.text:0000000000405933\n.text:0000000000405937\n.text:000000000040593a\n.text:000000000040593f\n.text:0000000000405942\n.text:0000000000405946\n.text:000000000040594a\n.text:000000000040594d\n.text:0000000000405950\n.text:0000000000405955\n.text:000000000040595a\n.text:000000000040595d\n.text:0000000000405962\n.text:0000000000405967\n.text:0000000000405969\n.text:000000000040596e\n.text:0000000000405973\n.text:0000000000405977\n.text:000000000040597a\n.text:000000000040597e\n.text:0000000000405983\n.text:0000000000405985\n.text:0000000000405987\n.text:000000000040598a\n.text:000000000040598d\n.text:0000000000405991\n.text:0000000000405992\n.text:0000000000405994\n.text:0000000000405996\n.text:0000000000405998\n.text:000000000040599a\n.text:000000000040599b\n'
p1189
tp1190
sS'bkm_scale'
p1191
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1192
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1193
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1194
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1195
S'.text:0000000000407b50\n.text:0000000000407b53\n.text:0000000000407b5a\n.text:0000000000407b61\n.text:0000000000407b63\n.text:0000000000407b66\n.text:0000000000407b69\n.text:0000000000407b6d\n.text:0000000000407b70\n.text:0000000000407b74\n.text:0000000000407b76\n.text:0000000000407b79\n.text:0000000000407b7c\n'
p1196
tp1197
sS'memchr'
p1198
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1199
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060d140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1200
S'JMP qword ptr [0x0060d140]\n'
p1201
S'ff 25 7a b6 20 00\n'
p1202
S'.plt:0000000000401ac0\n'
p1203
tp1204
sS'quotearg_style_mem'
p1205
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1206
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1207
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00405cd0\n'
p1208
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1209
S'.text:0000000000405d30\n.text:0000000000405d33\n.text:0000000000405d36\n.text:0000000000405d38\n.text:0000000000405d3a\n.text:0000000000405d3c\n.text:0000000000405d3f\n.text:0000000000405d42\n'
p1210
tp1211
sS'xalloc_die'
p1212
(S'\n__stdcall xalloc_die()\n'
p1213
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_004099c8,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1214
S'PUSH RBX\nMOV EBX,dword ptr [0x0060d2c0]\nXOR EDI,EDI\nMOV ESI,0x40a3bf\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4099c8\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401c70\nCALL 0x00401890\n'
p1215
S'53\n8b 1d 09 5b 20 00\n31 ff\nbe bf a3 40 00\nba 05 00 00 00\ne8 e8 a1 ff ff\n48 89 c1\n31 f6\nba c8 99 40 00\n31 c0\n89 df\ne8 95 a4 ff ff\ne8 b0 a0 ff ff\n'
p1216
S'.text:00000000004077b0\n.text:00000000004077b1\n.text:00000000004077b7\n.text:00000000004077b9\n.text:00000000004077be\n.text:00000000004077c3\n.text:00000000004077c8\n.text:00000000004077cb\n.text:00000000004077cd\n.text:00000000004077d2\n.text:00000000004077d4\n.text:00000000004077d6\n.text:00000000004077db\n'
p1217
tp1218
sS'open_safer'
p1219
(S'\n__stdcall open_safer(char * file)\n'
p1220
V\u000a/* WARNING: Removing unreachable block (ram,0x004040de) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x004040ec */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1221
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404082\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x004040ee\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004040de\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004040ec\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401c90\nMOV EDI,EAX\nCALL 0x004070b0\nADD RSP,0xd8\nRET\n'
p1222
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 9b db ff ff\n89 c7\ne8 b4 2f 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1223
S'.text:0000000000404040\n.text:0000000000404047\n.text:0000000000404049\n.text:000000000040404b\n.text:0000000000404050\n.text:0000000000404055\n.text:000000000040405a\n.text:0000000000404062\n.text:000000000040406a\n.text:0000000000404072\n.text:000000000040407a\n.text:0000000000404082\n.text:0000000000404087\n.text:000000000040408c\n.text:0000000000404091\n.text:0000000000404096\n.text:0000000000404098\n.text:000000000040409c\n.text:000000000040409e\n.text:00000000004040a3\n.text:00000000004040a8\n.text:00000000004040b0\n.text:00000000004040b5\n.text:00000000004040bd\n.text:00000000004040c4\n.text:00000000004040c8\n.text:00000000004040cc\n.text:00000000004040ce\n.text:00000000004040d1\n.text:00000000004040d6\n.text:00000000004040d9\n.text:00000000004040dc\n.text:00000000004040de\n.text:00000000004040e3\n.text:00000000004040e7\n.text:00000000004040ec\n.text:00000000004040ee\n.text:00000000004040f0\n.text:00000000004040f5\n.text:00000000004040f7\n.text:00000000004040fc\n.text:0000000000404103\n'
p1224
tp1225
sS'__sprintf_chk'
p1226
(S'\n__stdcall __sprintf_chk()\n'
p1227
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060d298)();\u000a  return;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060d298]\n'
p1229
S'ff 25 22 b5 20 00\n'
p1230
S'.plt:0000000000401d70\n'
p1231
tp1232
sS'fopen_safer'
p1233
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1234
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00401cb0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040814b\nMOV RDI,RBX\nCALL 0x00401b50\nCMP EAX,0x2\nJA 0x0040814d\nMOV EDI,EAX\nCALL 0x00408490\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408133\nMOV RDI,RBX\nCALL 0x00407c10\nTEST EAX,EAX\nJNZ 0x0040811c\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401c10\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040814d\nCALL 0x004018a0\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401ab0\nMOV dword ptr [RBX],R14D\nJMP 0x0040814b\nCALL 0x004018a0\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00407c10\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1236
S'55\n41 56\n53\n49 89 f6\ne8 d4 9b ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 64 9a ff ff\n83 f8 02\n77 5c\n89 c7\ne8 98 03 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 0a fb ff ff\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 fc 9a ff ff\n48 89 c3\n48 85 db\n75 31\ne8 7f 97 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 82 99 ff ff\n44 89 33\neb 18\ne8 68 97 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 c9 fa ff ff\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1237
S'.text:00000000004080d0\n.text:00000000004080d1\n.text:00000000004080d3\n.text:00000000004080d4\n.text:00000000004080d7\n.text:00000000004080dc\n.text:00000000004080df\n.text:00000000004080e2\n.text:00000000004080e4\n.text:00000000004080e7\n.text:00000000004080ec\n.text:00000000004080ef\n.text:00000000004080f1\n.text:00000000004080f3\n.text:00000000004080f8\n.text:00000000004080fa\n.text:00000000004080fc\n.text:00000000004080fe\n.text:0000000000408101\n.text:0000000000408106\n.text:0000000000408108\n.text:000000000040810a\n.text:000000000040810c\n.text:000000000040810f\n.text:0000000000408114\n.text:0000000000408117\n.text:000000000040811a\n.text:000000000040811c\n.text:0000000000408121\n.text:0000000000408124\n.text:0000000000408127\n.text:0000000000408129\n.text:000000000040812e\n.text:0000000000408131\n.text:0000000000408133\n.text:0000000000408138\n.text:000000000040813b\n.text:000000000040813f\n.text:0000000000408142\n.text:0000000000408147\n.text:000000000040814b\n.text:000000000040814d\n.text:0000000000408150\n.text:0000000000408151\n.text:0000000000408153\n.text:0000000000408154\n'
p1238
tp1239
sS'quotearg_n_custom'
p1240
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1241
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV R8,-0x1\nJMP 0x00405e50\n'
p1243
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1244
S'.text:0000000000405e40\n.text:0000000000405e47\n'
p1245
tp1246
sS'fd_safer'
p1247
(S'\n__stdcall fd_safer()\n'
p1248
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x004070e4\nMOV EDI,EBX\nCALL 0x00408490\nMOV R14D,EAX\nCALL 0x004018a0\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401ab0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x004070e6\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1250
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 cb 13 00 00\n41 89 c6\ne8 d3 a7 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 d5 a9 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1251
S'.text:00000000004070b0\n.text:00000000004070b1\n.text:00000000004070b3\n.text:00000000004070b5\n.text:00000000004070b6\n.text:00000000004070b7\n.text:00000000004070b9\n.text:00000000004070bc\n.text:00000000004070be\n.text:00000000004070c0\n.text:00000000004070c5\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d0\n.text:00000000004070d4\n.text:00000000004070d6\n.text:00000000004070db\n.text:00000000004070df\n.text:00000000004070e2\n.text:00000000004070e4\n.text:00000000004070e6\n.text:00000000004070ea\n.text:00000000004070eb\n.text:00000000004070ed\n.text:00000000004070ef\n.text:00000000004070f0\n'
p1252
tp1253
sS'__freading'
p1254
(S'\n__stdcall __freading()\n'
p1255
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060d1d0)();\u000a  return;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0060d1d0]\n'
p1257
S'ff 25 ea b5 20 00\n'
p1258
S'.plt:0000000000401be0\n'
p1259
tp1260
sS'fputs_unlocked'
p1261
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060d158)();\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060d158]\n'
p1264
S'ff 25 62 b6 20 00\n'
p1265
S'.plt:0000000000401af0\n'
p1266
tp1267
sS'main'
p1268
(S'\n__stdcall main(char * * argv)\n'
p1269
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  char *err;\u000a  uintmax_t uVar4;\u000a  ptrdiff_t pVar5;\u000a  uint *puVar6;\u000a  char *string;\u000a  undefined8 uVar7;\u000a  byte bVar8;\u000a  char **ppcVar9;\u000a  char **in_RSI;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  uint uVar12;\u000a  remove_method rVar13;\u000a  undefined local_6b;\u000a  undefined local_6a;\u000a  undefined local_69;\u000a  uint local_68;\u000a  undefined4 uStack100;\u000a  uintmax_t local_60;\u000a  uintmax_t local_58;\u000a  remove_method local_50;\u000a  undefined4 local_4c;\u000a  char *local_48;\u000a  uintmax_t local_40;\u000a  char **local_38;\u000a  \u000a  local_58 = 0;\u000a  local_50 = remove_none;\u000a  local_4c = 0;\u000a  local_68 = 0;\u000a  uStack100 = 0;\u000a  local_60 = 0;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a              + 0x1d7);\u000a  bindtextdomain(0x409532,"/usr/local/share/locale");\u000a  textdomain(0x409532);\u000a  atexit(close_stdout);\u000a  local_60 = 3;\u000a  local_58 = 0xffffffffffffffff;\u000a  local_6b = local_4c._2_1_;\u000a  local_6a = local_4c._1_1_;\u000a  local_69 = local_4c._0_1_;\u000a  local_40 = 0xffffffffffffffff;\u000a  uVar4 = 3;\u000a  local_48 = (char *)0x0;\u000a  rVar13 = local_50;\u000a  do {\u000a    _Var2 = local_68._0_1_;\u000a    iVar3 = getopt_long((ulong)argv & 0xffffffff,in_RSI,"fn:s:uvxz",long_opts,0);\u000a    string = optarg;\u000a    if (iVar3 < 0x66) {\u000a      if (iVar3 == -1) {\u000a        local_4c = CONCAT31(CONCAT21(CONCAT11(local_4c._3_1_,local_6b),local_6a),local_69);\u000a        local_58 = local_40;\u000a        local_68 = local_68 & 0xffffff00 | (uint)_Var2;\u000a        lVar10 = (long)optind;\u000a        uVar12 = (int)((ulong)argv & 0xffffffff) - optind;\u000a        local_60 = uVar4;\u000a        local_50 = rVar13;\u000a        if (uVar12 != 0) {\u000a          local_60 = uVar4;\u000a          local_50 = rVar13;\u000a          randint_source = randint_all_new(local_48,0xffffffffffffffff);\u000a          if (randint_source == (randint_source *)0x0) {\u000a            puVar6 = (uint *)__errno_location();\u000a            uVar1 = *puVar6;\u000a            string = quotearg_n_style_colon((char *)0x0);\u000a            error(1,(ulong)uVar1,&DAT_004099c8,string);\u000a          }\u000a          atexit(clear_random_data);\u000a          if ((int)uVar12 < 1) {\u000a            uVar12 = 0;\u000a          }\u000a          else {\u000a            ppcVar9 = in_RSI + lVar10;\u000a            uVar11 = (ulong)uVar12;\u000a            bVar8 = 1;\u000a            do {\u000a              string = quotearg_n_style_colon((char *)0x0);\u000a              string = xstrdup(string);\u000a              if ((**ppcVar9 == '-') && ((*ppcVar9)[1] == 0)) {\u000a                _Var2 = wipefd();\u000a              }\u000a              else {\u000a                _Var2 = wipefile(*ppcVar9,string,randint_source,(Options *)&local_68);\u000a              }\u000a              bVar8 = bVar8 & _Var2;\u000a              free(string);\u000a              ppcVar9 = ppcVar9 + 1;\u000a              uVar11 = uVar11 - 1;\u000a            } while (uVar11 != 0);\u000a            uVar12 = (uint)(bVar8 ^ 1);\u000a          }\u000a          return (int)uVar12;\u000a        }\u000a        goto LAB_004025f0;\u000a      }\u000a      if (iVar3 != -0x83) {\u000a        if (iVar3 != -0x82) goto switchD_004022f2_caseD_67;\u000a        usage(0);\u000a      }\u000a      version_etc(stdout,"shred","GNU coreutils",Version,"Colin Plumb",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    local_68._0_1_ = (_Bool)1;\u000a    switch(iVar3) {\u000a    case 0x66:\u000a      break;\u000a    default:\u000aswitchD_004022f2_caseD_67:\u000a      usage(1);\u000aLAB_004025f0:\u000a      uVar7 = dcgettext(0,"missing file operand",5);\u000a      error(0,0,uVar7,uVar7);\u000a      usage(1);\u000a      iVar3 = randint_all_free(randint_source);\u000a      return iVar3;\u000a    case 0x6e:\u000a      err = (char *)dcgettext(0,"invalid number of passes",5);\u000a      uVar4 = xdectoumax(string,0,0x3fffffffffffffff,\u000a                                                  \u000a                         "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a                         + 0x1d7,err);\u000a      local_68._0_1_ = _Var2;\u000a      break;\u000a    case 0x73:\u000a      local_38 = in_RSI;\u000a      dcgettext(0,"invalid file size",5);\u000a      local_40 = xnumtoumax(string,0,0,(char *)0x7fffffffffffffff,"cbBkKMGTPEZY0");\u000a      in_RSI = local_38;\u000a      local_68._0_1_ = _Var2;\u000a      break;\u000a    case 0x75:\u000a      rVar13 = remove_wipesync;\u000a      local_68._0_1_ = _Var2;\u000a      if (optarg != (char *)0x0) {\u000a        pVar5 = __xargmatch_internal\u000a                          ("--remove",optarg,remove_args,(char *)remove_methods,4,argmatch_die);\u000a        rVar13 = remove_methods[pVar5];\u000a        local_68._0_1_ = _Var2;\u000a      }\u000a      break;\u000a    case 0x76:\u000a      local_69 = 1;\u000a      local_68._0_1_ = _Var2;\u000a      break;\u000a    case 0x78:\u000a      local_6a = 1;\u000a      local_68._0_1_ = _Var2;\u000a      break;\u000a    case 0x7a:\u000a      local_6b = 1;\u000a      local_68._0_1_ = _Var2;\u000a      break;\u000a    case 0x80:\u000a      if ((local_48 != (char *)0x0) && (iVar3 = strcmp(local_48,optarg), iVar3 != 0)) {\u000a        uVar7 = dcgettext(0,"multiple random sources specified",5);\u000a        error(1,0,uVar7);\u000a      }\u000a      local_48 = optarg;\u000a      local_68._0_1_ = _Var2;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV RBX,RSI\nMOV R14D,EDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOV RDI,qword ptr [RBX]\nCALL 0x00404a40\nMOV EDI,0x6\nMOV ESI,0x4093fa\nCALL 0x00401c20\nMOV EDI,0x409532\nMOV ESI,0x4094a8\nCALL 0x004019a0\nMOV EDI,0x409532\nCALL 0x00401980\nMOV EDI,0x403e30\nCALL 0x00408520\nMOV qword ptr [RSP + 0x18],0x3\nMOV qword ptr [RSP + 0x20],-0x1\nMOV AL,byte ptr [RSP + 0x2e]\nMOV byte ptr [RSP + 0xd],AL\nMOV AL,byte ptr [RSP + 0x2d]\nMOV byte ptr [RSP + 0xe],AL\nMOV AL,byte ptr [RSP + 0x2c]\nMOV byte ptr [RSP + 0xf],AL\nMOV qword ptr [RSP + 0x38],-0x1\nMOV R15D,dword ptr [RSP + 0x28]\nMOV RBP,qword ptr [RSP + 0x18]\nMOV CL,byte ptr [RSP + 0x10]\nMOV R12,0x3fffffffffffffff\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x30],RAX\nJMP 0x004022c0\nMOV byte ptr [RSP + 0xd],0x1\nMOV ECX,R13D\nNOP word ptr [RAX + RAX*0x1]\nMOV R13D,ECX\nMOV EDX,0x4094c0\nMOV ECX,0x408670\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,RBX\nCALL 0x00401a00\nCMP EAX,0x65\nJLE 0x00402455\nADD EAX,-0x66\nCMP EAX,0x1a\nJA 0x004025e6\nMOV CL,0x1\nJMP qword ptr [0x408590 + RAX*0x8]\nMOV RBP,qword ptr [0x0060d338]\nXOR EDI,EDI\nMOV ESI,0x4094ca\nMOV EDX,0x5\nCALL 0x004019b0\nXOR ESI,ESI\nMOV ECX,0x4093fa\nXOR R9D,R9D\nMOV RDI,RBP\nMOV RDX,R12\nMOV R8,RAX\nCALL 0x004078b0\nMOV RBP,RAX\nMOV ECX,R13D\nJMP 0x004022c0\nMOV qword ptr [RSP + 0x40],RBX\nMOV EBX,R14D\nMOV R14,R12\nMOV R12D,R15D\nMOV R15,RBP\nMOV RBP,qword ptr [0x0060d338]\nXOR EDI,EDI\nMOV ESI,0x40951c\nMOV EDX,0x5\nCALL 0x004019b0\nMOV dword ptr [RSP],0x0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV R8D,0x40950e\nMOV RDI,RBP\nMOV RBP,R15\nMOV R15D,R12D\nMOV R12,R14\nMOV R14D,EBX\nMOV RBX,qword ptr [RSP + 0x40]\nMOV RCX,0x7fffffffffffffff\nMOV R9,RAX\nCALL 0x004077e0\nMOV qword ptr [RSP + 0x38],RAX\nMOV ECX,R13D\nJMP 0x004022c0\nMOV RSI,qword ptr [0x0060d338]\nMOV R15D,0x3\nTEST RSI,RSI\nMOV ECX,R13D\nJZ 0x004022c0\nMOV R9,qword ptr [0x0060d2b8]\nMOV EDI,0x409505\nMOV EDX,0x4087e0\nMOV ECX,0x4087d0\nMOV R8D,0x4\nCALL 0x00403d30\nMOV R15D,dword ptr [0x4087d0 + RAX*0x4]\nMOV ECX,R13D\nJMP 0x004022c0\nMOV byte ptr [RSP + 0xf],0x1\nMOV ECX,R13D\nJMP 0x004022c0\nMOV byte ptr [RSP + 0xe],0x1\nMOV ECX,R13D\nJMP 0x004022c0\nMOV RDI,qword ptr [RSP + 0x30]\nTEST RDI,RDI\nJZ 0x00402441\nMOV RSI,qword ptr [0x0060d338]\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x00402441\nXOR EDI,EDI\nMOV ESI,0x4094e3\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401c70\nMOV RAX,qword ptr [0x0060d338]\nMOV qword ptr [RSP + 0x30],RAX\nMOV ECX,R13D\nJMP 0x004022c0\nCMP EAX,-0x1\nJNZ 0x004025a2\nMOV AL,byte ptr [RSP + 0xd]\nMOV byte ptr [RSP + 0x2e],AL\nMOV AL,byte ptr [RSP + 0xe]\nMOV byte ptr [RSP + 0x2d],AL\nMOV AL,byte ptr [RSP + 0xf]\nMOV byte ptr [RSP + 0x2c],AL\nMOV RAX,qword ptr [RSP + 0x38]\nMOV qword ptr [RSP + 0x20],RAX\nMOV dword ptr [RSP + 0x28],R15D\nMOV qword ptr [RSP + 0x18],RBP\nMOV byte ptr [RSP + 0x10],R13B\nMOVSXD R12,dword ptr [0x0060d330]\nSUB R14D,R12D\nJZ 0x004025f0\nMOV RSI,-0x1\nMOV RBP,qword ptr [RSP + 0x30]\nMOV RDI,RBP\nCALL 0x00406360\nMOV qword ptr [0x0060d370],RAX\nTEST RAX,RAX\nJNZ 0x004024ed\nCALL 0x004018a0\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBP\nCALL 0x00405df0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4099c8\nXOR EAX,EAX\nMOV ESI,R15D\nCALL 0x00401c70\nMOV EDI,0x402620\nCALL 0x00408520\nTEST R14D,R14D\nJLE 0x00402591\nLEA RBP,[RBX + R12*0x8]\nMOV R12D,R14D\nMOV BL,0x1\nLEA R14,[RSP + 0x10]\nNOP\nMOV RDX,qword ptr [RBP]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00405df0\nMOV RDI,RAX\nCALL 0x00407790\nMOV R15,RAX\nMOV RAX,qword ptr [RBP]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402560\nMOV RDX,qword ptr [0x0060d370]\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00402567\nMOV RDI,R15\nMOV RSI,RDX\nMOV RDX,R14\nCALL 0x00402630\nJMP 0x00402576\nMOV RDX,qword ptr [0x0060d370]\nMOV RDI,qword ptr [RBP]\nMOV RSI,R15\nMOV RCX,R14\nCALL 0x004026c0\nAND BL,AL\nMOV RDI,R15\nCALL 0x00401880\nADD RBP,0x8\nDEC R12\nJNZ 0x00402510\nXOR BL,0x1\nMOVZX EAX,BL\nJMP 0x00402593\nXOR EAX,EAX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x004025b7\nCMP EAX,0xffffff7e\nJNZ 0x004025e6\nXOR EDI,EDI\nCALL 0x00401e80\nMOV RDI,qword ptr [0x0060d328]\nMOV RCX,qword ptr [0x0060d2b0]\nMOV ESI,0x4094a2\nMOV EDX,0x40952e\nMOV R8D,0x40953c\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x004074f0\nXOR EDI,EDI\nCALL 0x00401d10\nMOV EDI,0x1\nCALL 0x00401e80\nXOR EDI,EDI\nMOV ESI,0x409548\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401c70\nMOV EDI,0x1\nCALL 0x00401e80\nNOP dword ptr [RAX]\n'
p1271
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n48 89 f3\n41 89 fe\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n48 8b 3b\ne8 17 28 00 00\nbf 06 00 00 00\nbe fa 93 40 00\ne8 e8 f9 ff ff\nbf 32 95 40 00\nbe a8 94 40 00\ne8 59 f7 ff ff\nbf 32 95 40 00\ne8 2f f7 ff ff\nbf 30 3e 40 00\ne8 c5 62 00 00\n48 c7 44 24 18 03 00 00 00\n48 c7 44 24 20 ff ff ff ff\n8a 44 24 2e\n88 44 24 0d\n8a 44 24 2d\n88 44 24 0e\n8a 44 24 2c\n88 44 24 0f\n48 c7 44 24 38 ff ff ff ff\n44 8b 7c 24 28\n48 8b 6c 24 18\n8a 4c 24 10\n49 bc ff ff ff ff ff ff ff 3f\n31 c0\n48 89 44 24 30\neb 11\nc6 44 24 0d 01\n44 89 e9\n66 0f 1f 84 00 00 00 00 00\n41 89 cd\nba c0 94 40 00\nb9 70 86 40 00\n45 31 c0\n44 89 f7\n48 89 de\ne8 25 f7 ff ff\n83 f8 65\n0f 8e 71 01 00 00\n83 c0 9a\n83 f8 1a\n0f 87 f6 02 00 00\nb1 01\nff 24 c5 90 85 40 00\n48 8b 2d 38 b0 20 00\n31 ff\nbe ca 94 40 00\nba 05 00 00 00\ne8 9f f6 ff ff\n31 f6\nb9 fa 93 40 00\n45 31 c9\n48 89 ef\n4c 89 e2\n49 89 c0\ne8 87 55 00 00\n48 89 c5\n44 89 e9\neb 8f\n48 89 5c 24 40\n44 89 f3\n4d 89 e6\n45 89 fc\n49 89 ef\n48 8b 2d ef af 20 00\n31 ff\nbe 1c 95 40 00\nba 05 00 00 00\ne8 56 f6 ff ff\nc7 04 24 00 00 00 00\n31 f6\n31 d2\n41 b8 0e 95 40 00\n48 89 ef\n4c 89 fd\n45 89 e7\n4d 89 f4\n41 89 de\n48 8b 5c 24 40\n48 b9 ff ff ff ff ff ff ff 7f\n49 89 c1\ne8 4f 54 00 00\n48 89 44 24 38\n44 89 e9\ne9 22 ff ff ff\n48 8b 35 93 af 20 00\n41 bf 03 00 00 00\n48 85 f6\n44 89 e9\n0f 84 09 ff ff ff\n4c 8b 0d fa ae 20 00\nbf 05 95 40 00\nba e0 87 40 00\nb9 d0 87 40 00\n41 b8 04 00 00 00\ne8 58 19 00 00\n44 8b 3c 85 d0 87 40 00\n44 89 e9\ne9 d8 fe ff ff\nc6 44 24 0f 01\n44 89 e9\ne9 cb fe ff ff\nc6 44 24 0e 01\n44 89 e9\ne9 be fe ff ff\n48 8b 7c 24 30\n48 85 ff\n74 35\n48 8b 35 25 af 20 00\ne8 08 f7 ff ff\n85 c0\n74 25\n31 ff\nbe e3 94 40 00\nba 05 00 00 00\ne8 83 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 2f f8 ff ff\n48 8b 05 f0 ae 20 00\n48 89 44 24 30\n44 89 e9\ne9 6b fe ff ff\n83 f8 ff\n0f 85 44 01 00 00\n8a 44 24 0d\n88 44 24 2e\n8a 44 24 0e\n88 44 24 2d\n8a 44 24 0f\n88 44 24 2c\n48 8b 44 24 38\n48 89 44 24 20\n44 89 7c 24 28\n48 89 6c 24 18\n44 88 6c 24 10\n4c 63 25 9a ae 20 00\n45 29 e6\n0f 84 51 01 00 00\n48 c7 c6 ff ff ff ff\n48 8b 6c 24 30\n48 89 ef\ne8 ad 3e 00 00\n48 89 05 b6 ae 20 00\n48 85 c0\n75 2e\ne8 dc f3 ff ff\n44 8b 38\n31 ff\nbe 03 00 00 00\n48 89 ea\ne8 1a 39 00 00\n48 89 c1\nbf 01 00 00 00\nba c8 99 40 00\n31 c0\n44 89 fe\ne8 83 f7 ff ff\nbf 20 26 40 00\ne8 29 60 00 00\n45 85 f6\n0f 8e 91 00 00 00\n4a 8d 2c e3\n45 89 f4\nb3 01\n4c 8d 74 24 10\n66 90\n48 8b 55 00\n31 ff\nbe 03 00 00 00\ne8 d0 38 00 00\n48 89 c7\ne8 68 52 00 00\n49 89 c7\n48 8b 45 00\n80 38 2d\n75 2c\n48 8b 15 35 ae 20 00\n80 78 01 00\n75 26\n4c 89 ff\n48 89 d6\n4c 89 f2\ne8 e1 00 00 00\neb 25\n48 8b 15 09 ae 20 00\n48 8b 7d 00\n4c 89 fe\n4c 89 f1\ne8 4a 01 00 00\n20 c3\n4c 89 ff\ne8 00 f3 ff ff\n48 83 c5 08\n49 ff cc\n75 87\n80 f3 01\n0f b6 c3\neb 02\n31 c0\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 36\n31 ff\ne8 c9 f8 ff ff\n48 8b 3d 6a ad 20 00\n48 8b 0d eb ac 20 00\nbe a2 94 40 00\nba 2e 95 40 00\n41 b8 3c 95 40 00\n45 31 c9\n31 c0\ne8 11 4f 00 00\n31 ff\ne8 2a f7 ff ff\nbf 01 00 00 00\ne8 90 f8 ff ff\n31 ff\nbe 48 95 40 00\nba 05 00 00 00\ne8 af f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 5e f6 ff ff\nbf 01 00 00 00\ne8 64 f8 ff ff\n0f 1f 40 00\n'
p1272
S'.text:0000000000402200\n.text:0000000000402201\n.text:0000000000402203\n.text:0000000000402205\n.text:0000000000402207\n.text:0000000000402209\n.text:000000000040220a\n.text:000000000040220e\n.text:0000000000402211\n.text:0000000000402214\n.text:0000000000402217\n.text:000000000040221c\n.text:0000000000402221\n.text:0000000000402224\n.text:0000000000402229\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402247\n.text:000000000040224c\n.text:0000000000402251\n.text:0000000000402256\n.text:000000000040225b\n.text:0000000000402264\n.text:000000000040226d\n.text:0000000000402271\n.text:0000000000402275\n.text:0000000000402279\n.text:000000000040227d\n.text:0000000000402281\n.text:0000000000402285\n.text:000000000040228e\n.text:0000000000402293\n.text:0000000000402298\n.text:000000000040229c\n.text:00000000004022a6\n.text:00000000004022a8\n.text:00000000004022ad\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b7\n.text:00000000004022c0\n.text:00000000004022c3\n.text:00000000004022c8\n.text:00000000004022cd\n.text:00000000004022d0\n.text:00000000004022d3\n.text:00000000004022d6\n.text:00000000004022db\n.text:00000000004022de\n.text:00000000004022e4\n.text:00000000004022e7\n.text:00000000004022ea\n.text:00000000004022f0\n.text:00000000004022f2\n.text:00000000004022f9\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402307\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402318\n.text:000000000040231b\n.text:000000000040231e\n.text:0000000000402321\n.text:0000000000402324\n.text:0000000000402329\n.text:000000000040232c\n.text:000000000040232f\n.text:0000000000402331\n.text:0000000000402336\n.text:0000000000402339\n.text:000000000040233c\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402349\n.text:000000000040234b\n.text:0000000000402350\n.text:0000000000402355\n.text:000000000040235a\n.text:0000000000402361\n.text:0000000000402363\n.text:0000000000402365\n.text:000000000040236b\n.text:000000000040236e\n.text:0000000000402371\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237f\n.text:0000000000402389\n.text:000000000040238c\n.text:0000000000402391\n.text:0000000000402396\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a5\n.text:00000000004023ab\n.text:00000000004023ae\n.text:00000000004023b1\n.text:00000000004023b7\n.text:00000000004023be\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023cd\n.text:00000000004023d3\n.text:00000000004023d8\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e8\n.text:00000000004023ed\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023fa\n.text:00000000004023fd\n.text:0000000000402402\n.text:0000000000402407\n.text:000000000040240a\n.text:000000000040240c\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241a\n.text:000000000040241c\n.text:000000000040241e\n.text:0000000000402423\n.text:0000000000402428\n.text:000000000040242d\n.text:0000000000402430\n.text:0000000000402435\n.text:0000000000402437\n.text:0000000000402439\n.text:000000000040243c\n.text:0000000000402441\n.text:0000000000402448\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402455\n.text:0000000000402458\n.text:000000000040245e\n.text:0000000000402462\n.text:0000000000402466\n.text:000000000040246a\n.text:000000000040246e\n.text:0000000000402472\n.text:0000000000402476\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402485\n.text:000000000040248a\n.text:000000000040248f\n.text:0000000000402496\n.text:0000000000402499\n.text:000000000040249f\n.text:00000000004024a6\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024ba\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c4\n.text:00000000004024c7\n.text:00000000004024c9\n.text:00000000004024ce\n.text:00000000004024d1\n.text:00000000004024d6\n.text:00000000004024d9\n.text:00000000004024de\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024e8\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024fa\n.text:0000000000402500\n.text:0000000000402504\n.text:0000000000402507\n.text:0000000000402509\n.text:000000000040250e\n.text:0000000000402510\n.text:0000000000402514\n.text:0000000000402516\n.text:000000000040251b\n.text:0000000000402520\n.text:0000000000402523\n.text:0000000000402528\n.text:000000000040252b\n.text:000000000040252f\n.text:0000000000402532\n.text:0000000000402534\n.text:000000000040253b\n.text:000000000040253f\n.text:0000000000402541\n.text:0000000000402544\n.text:0000000000402547\n.text:000000000040254a\n.text:000000000040254f\n.text:0000000000402560\n.text:0000000000402567\n.text:000000000040256b\n.text:000000000040256e\n.text:0000000000402571\n.text:0000000000402576\n.text:0000000000402578\n.text:000000000040257b\n.text:0000000000402580\n.text:0000000000402584\n.text:0000000000402587\n.text:0000000000402589\n.text:000000000040258c\n.text:000000000040258f\n.text:0000000000402591\n.text:0000000000402593\n.text:0000000000402597\n.text:0000000000402598\n.text:000000000040259a\n.text:000000000040259c\n.text:000000000040259e\n.text:00000000004025a0\n.text:00000000004025a1\n.text:00000000004025a2\n.text:00000000004025a7\n.text:00000000004025a9\n.text:00000000004025ae\n.text:00000000004025b0\n.text:00000000004025b2\n.text:00000000004025b7\n.text:00000000004025be\n.text:00000000004025c5\n.text:00000000004025ca\n.text:00000000004025cf\n.text:00000000004025d5\n.text:00000000004025d8\n.text:00000000004025da\n.text:00000000004025df\n.text:00000000004025e1\n.text:00000000004025e6\n.text:00000000004025eb\n.text:00000000004025f0\n.text:00000000004025f2\n.text:00000000004025f7\n.text:00000000004025fc\n.text:0000000000402601\n.text:0000000000402604\n.text:0000000000402606\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260d\n.text:0000000000402612\n.text:0000000000402617\n.text:000000000040261c\n'
p1273
tp1274
sS'xcharalloc'
p1275
(S'\n__stdcall xcharalloc(size_t n)\n'
p1276
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1277
S'JMP 0x00407620\n'
p1278
S'e9 2b ff ff ff\n'
p1279
S'.text:00000000004076f0\n'
p1280
tp1281
sS'c_isupper'
p1282
(S'\n__stdcall c_isupper()\n'
p1283
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1284
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1285
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1286
S'.text:0000000000408010\n.text:0000000000408013\n.text:0000000000408016\n.text:0000000000408019\n'
p1287
tp1288
sS'isatty'
p1289
(S'\n__stdcall isatty(int __fd)\n'
p1290
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0060d070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x0060d070]\n'
p1292
S'ff 25 4a b7 20 00\n'
p1293
S'.plt:0000000000401920\n'
p1294
tp1295
sS'randread_set_handler'
p1296
(S'\n__stdcall randread_set_handler(randread_source * s, anon_subr_void_void_ptr * handler)\n'
p1297
V\u000avoid randread_set_handler(randread_source *s,void (*handler)(void *))\u000a\u000a{\u000a  s->handler = handler;\u000a  return;\u000a}\u000a\u000a
p1298
S'MOV qword ptr [RDI + 0x8],RSI\nRET\n'
p1299
S'48 89 77 08\nc3\n'
p1300
S'.text:0000000000406790\n.text:0000000000406794\n'
p1301
tp1302
sS'c_isalnum'
p1303
(S'\n__stdcall c_isalnum()\n'
p1304
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1305
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00407f2b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00407f2b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00407f2a\nXOR EAX,EAX\nRET\n'
p1306
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1307
S'.text:0000000000407f10\n.text:0000000000407f12\n.text:0000000000407f15\n.text:0000000000407f18\n.text:0000000000407f1a\n.text:0000000000407f24\n.text:0000000000407f28\n.text:0000000000407f2a\n.text:0000000000407f2b\n.text:0000000000407f2e\n.text:0000000000407f31\n.text:0000000000407f33\n.text:0000000000407f35\n'
p1308
tp1309
sS'human_options'
p1310
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p1311
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p1312
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x004048b0\nCMP qword ptr [RBX],0x0\nJNZ 0x004048a5\nCALL 0x004049c0\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p1313
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p1314
S'.text:0000000000404880\n.text:0000000000404881\n.text:0000000000404884\n.text:0000000000404887\n.text:000000000040488a\n.text:000000000040488d\n.text:0000000000404892\n.text:0000000000404896\n.text:0000000000404898\n.text:000000000040489d\n.text:00000000004048a0\n.text:00000000004048a5\n.text:00000000004048a6\n'
p1315
tp1316
sS'__errno_location'
p1317
(S'\n__stdcall __errno_location()\n'
p1318
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060d030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x0060d030]\n'
p1320
S'ff 25 8a b7 20 00\n'
p1321
S'.plt:00000000004018a0\n'
p1322
tp1323
sS'x2nrealloc'
p1324
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1325
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1326
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004076bc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004076e9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004076da\nTEST RCX,RCX\nJNZ 0x004076da\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00407660\nPUSH RAX\nCALL 0x004077b0\n'
p1327
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1328
S'.text:0000000000407690\n.text:0000000000407693\n.text:0000000000407696\n.text:0000000000407699\n.text:000000000040769b\n.text:00000000004076a5\n.text:00000000004076a7\n.text:00000000004076aa\n.text:00000000004076ad\n.text:00000000004076af\n.text:00000000004076b2\n.text:00000000004076b5\n.text:00000000004076ba\n.text:00000000004076bc\n.text:00000000004076bf\n.text:00000000004076c1\n.text:00000000004076c6\n.text:00000000004076c8\n.text:00000000004076cb\n.text:00000000004076cd\n.text:00000000004076d4\n.text:00000000004076d7\n.text:00000000004076da\n.text:00000000004076dd\n.text:00000000004076e1\n.text:00000000004076e4\n.text:00000000004076e9\n.text:00000000004076ea\n'
p1329
tp1330
sS'quotearg_n_options'
p1331
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1332
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004018a0\nTEST R12D,R12D\nJS 0x00405bf1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060d2c8]\nCMP dword ptr [0x0060d2d0],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00405b0b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60d2d8\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00407660\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060d2c8],R15\nJNZ 0x00405ad2\nMOVUPS XMM0,xmmword ptr [0x0060d2d8]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060d2d0]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401a80\nMOV dword ptr [0x0060d2d0],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00404c60\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00405b6d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00405bdb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60d3d0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00405b98\nCALL 0x00401880\nMOV RDI,R15\nCALL 0x004076f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00404c60\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401890\n'
p1334
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 41 be ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 4e 78 20 00\n44 39 25 4f 78 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd d8 d2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 a8 1b 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 03 78 20 00\n75 0b\n0f 10 05 0a 78 20 00\n41 0f 11 07\n8b 05 f8 77 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 8d bf ff ff\n89 1d d7 77 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 d0 d3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 e8 bc ff ff\n4c 89 ff\ne8 50 1b 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 9a bc ff ff\n'
p1335
S'.text:0000000000405a40\n.text:0000000000405a41\n.text:0000000000405a43\n.text:0000000000405a45\n.text:0000000000405a47\n.text:0000000000405a49\n.text:0000000000405a4a\n.text:0000000000405a4e\n.text:0000000000405a51\n.text:0000000000405a54\n.text:0000000000405a57\n.text:0000000000405a5a\n.text:0000000000405a5f\n.text:0000000000405a62\n.text:0000000000405a68\n.text:0000000000405a6d\n.text:0000000000405a6f\n.text:0000000000405a73\n.text:0000000000405a7a\n.text:0000000000405a81\n.text:0000000000405a86\n.text:0000000000405a8b\n.text:0000000000405a90\n.text:0000000000405a92\n.text:0000000000405a97\n.text:0000000000405a9a\n.text:0000000000405a9d\n.text:0000000000405aa3\n.text:0000000000405aa5\n.text:0000000000405aa8\n.text:0000000000405aac\n.text:0000000000405aaf\n.text:0000000000405ab3\n.text:0000000000405ab8\n.text:0000000000405abb\n.text:0000000000405abe\n.text:0000000000405ac5\n.text:0000000000405ac7\n.text:0000000000405ace\n.text:0000000000405ad2\n.text:0000000000405ad8\n.text:0000000000405adb\n.text:0000000000405adf\n.text:0000000000405ae2\n.text:0000000000405ae5\n.text:0000000000405ae9\n.text:0000000000405aeb\n.text:0000000000405aee\n.text:0000000000405af3\n.text:0000000000405af9\n.text:0000000000405afc\n.text:0000000000405b01\n.text:0000000000405b06\n.text:0000000000405b0b\n.text:0000000000405b0e\n.text:0000000000405b12\n.text:0000000000405b16\n.text:0000000000405b1b\n.text:0000000000405b1f\n.text:0000000000405b23\n.text:0000000000405b27\n.text:0000000000405b2b\n.text:0000000000405b2f\n.text:0000000000405b34\n.text:0000000000405b37\n.text:0000000000405b3a\n.text:0000000000405b3d\n.text:0000000000405b42\n.text:0000000000405b45\n.text:0000000000405b48\n.text:0000000000405b4b\n.text:0000000000405b4c\n.text:0000000000405b51\n.text:0000000000405b55\n.text:0000000000405b58\n.text:0000000000405b5b\n.text:0000000000405b5d\n.text:0000000000405b62\n.text:0000000000405b66\n.text:0000000000405b6b\n.text:0000000000405b6d\n.text:0000000000405b71\n.text:0000000000405b76\n.text:0000000000405b79\n.text:0000000000405b7c\n.text:0000000000405b81\n.text:0000000000405b86\n.text:0000000000405b89\n.text:0000000000405b8e\n.text:0000000000405b91\n.text:0000000000405b93\n.text:0000000000405b98\n.text:0000000000405b9b\n.text:0000000000405ba0\n.text:0000000000405ba3\n.text:0000000000405ba6\n.text:0000000000405bab\n.text:0000000000405bae\n.text:0000000000405bb2\n.text:0000000000405bb5\n.text:0000000000405bb8\n.text:0000000000405bbd\n.text:0000000000405bc2\n.text:0000000000405bc7\n.text:0000000000405bca\n.text:0000000000405bcd\n.text:0000000000405bce\n.text:0000000000405bd3\n.text:0000000000405bd7\n.text:0000000000405bdb\n.text:0000000000405bdf\n.text:0000000000405be2\n.text:0000000000405be6\n.text:0000000000405be7\n.text:0000000000405be9\n.text:0000000000405beb\n.text:0000000000405bed\n.text:0000000000405bef\n.text:0000000000405bf0\n.text:0000000000405bf1\n'
p1336
tp1337
sS'strcmp'
p1338
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1339
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060d170)();\u000a  return iVar1;\u000a}\u000a\u000a
p1340
S'JMP qword ptr [0x0060d170]\n'
p1341
S'ff 25 4a b6 20 00\n'
p1342
S'.plt:0000000000401b20\n'
p1343
tp1344
sS'set_custom_quoting'
p1345
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1346
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1347
S'TEST RDI,RDI\nMOV EAX,0x60d390\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00404bd5\nTEST RDX,RDX\nJZ 0x00404bd5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401890\n'
p1348
S'48 85 ff\nb8 90 d3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 b5 cc ff ff\n'
p1349
S'.text:0000000000404bb0\n.text:0000000000404bb3\n.text:0000000000404bb8\n.text:0000000000404bbc\n.text:0000000000404bc2\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bca\n.text:0000000000404bcc\n.text:0000000000404bd0\n.text:0000000000404bd4\n.text:0000000000404bd5\n.text:0000000000404bd6\n'
p1350
tp1351
sS'read'
p1352
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060d148)();\u000a  return sVar1;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060d148]\n'
p1355
S'ff 25 72 b6 20 00\n'
p1356
S'.plt:0000000000401ad0\n'
p1357
tp1358
sS'c_isalpha'
p1359
(S'\n__stdcall c_isalpha()\n'
p1360
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1361
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00407f5b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1362
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1363
S'.text:0000000000407f40\n.text:0000000000407f43\n.text:0000000000407f46\n.text:0000000000407f48\n.text:0000000000407f52\n.text:0000000000407f54\n.text:0000000000407f57\n.text:0000000000407f5a\n.text:0000000000407f5b\n.text:0000000000407f5d\n'
p1364
tp1365
sS'quotearg_custom_mem'
p1366
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1367
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1368
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00405e50\n'
p1369
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1370
S'.text:0000000000405ee0\n.text:0000000000405ee3\n.text:0000000000405ee6\n.text:0000000000405ee9\n.text:0000000000405eec\n.text:0000000000405eee\n.text:0000000000405ef1\n'
p1371
tp1372
sS'wipename'
p1373
(S'\n__stdcall wipename(char * oldname, char * qoldname, Options * flags)\n'
p1374
V\u000a_Bool wipename(char *oldname,char *qoldname,Options *flags)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  uint __fd;\u000a  int iVar4;\u000a  char *name;\u000a  char *name_00;\u000a  size_t __n;\u000a  char *file;\u000a  char *string;\u000a  undefined8 uVar5;\u000a  uint *puVar6;\u000a  char *pcVar7;\u000a  char *qdir;\u000a  stat st;\u000a  undefined local_100;\u000a  stat local_c0;\u000a  \u000a  name = xstrdup(oldname);\u000a  name_00 = last_component(name);\u000a  __n = base_len(name_00);\u000a  file = dir_name(name);\u000a  string = quotearg_n_style_colon((char *)0x0);\u000a  string = xstrdup(string);\u000a  __fd = 0xffffffff;\u000a  if (flags->remove_file == remove_wipesync) {\u000a    __fd = open_safer(file,0x10900);\u000a  }\u000a  if (flags->verbose != false) {\u000a    uVar5 = dcgettext(0,"%s: removing",5);\u000a    error(0,0,uVar5,qoldname);\u000a  }\u000a  local_100 = 1;\u000a  if ((__n != 0) && (flags->remove_file != remove_unlink)) {\u000a    local_100 = 1;\u000a    bVar2 = true;\u000a    do {\u000a      memset(name_00,0x30,__n);\u000a      name_00[__n] = 0;\u000a      do {\u000a        iVar4 = lstat(name,&local_c0);\u000a        if (iVar4 < 0) {\u000a          iVar4 = rename(oldname,name);\u000a          if (iVar4 == 0) {\u000a            if ((-1 < (int)__fd) && (iVar4 = dosync((char *)(ulong)__fd), iVar4 != 0)) {\u000a              local_100 = 0;\u000a            }\u000a            if (flags->verbose != false) {\u000a              pcVar7 = oldname;\u000a              if (bVar2) {\u000a                pcVar7 = qoldname;\u000a              }\u000a              bVar2 = false;\u000a              uVar5 = dcgettext(0,"%s: renamed to %s",5);\u000a              error(0,0,uVar5,pcVar7,name);\u000a            }\u000a            memcpy(name_00 + -(long)name + (long)oldname,name_00,__n + 1);\u000a          }\u000a          break;\u000a        }\u000a        _Var3 = incname(name_00,__n);\u000a      } while (_Var3 != false);\u000a      __n = __n - 1;\u000a    } while ((__n != 0) && (flags->remove_file != remove_unlink));\u000a  }\u000a  iVar4 = unlink(oldname);\u000a  if (iVar4 == 0) {\u000a    if (flags->verbose != false) {\u000a      uVar5 = dcgettext(0,"%s: removed",5);\u000a      error(0,0,uVar5,qoldname);\u000a    }\u000a  }\u000a  else {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    local_100 = 0;\u000a    uVar5 = dcgettext(0,"%s: failed to remove",5);\u000a    error(0,(ulong)uVar1,uVar5,qoldname);\u000a  }\u000a  if (-1 < (int)__fd) {\u000a    iVar4 = dosync((char *)(ulong)__fd);\u000a    if (iVar4 != 0) {\u000a      local_100 = 0;\u000a    }\u000a    iVar4 = close(__fd);\u000a    if (iVar4 != 0) {\u000a      puVar6 = (uint *)__errno_location();\u000a      __fd = *puVar6;\u000a      local_100 = 0;\u000a      uVar5 = dcgettext(0,"%s: failed to close",5);\u000a      error(0,(ulong)__fd,uVar5,string);\u000a    }\u000a  }\u000a  free(name);\u000a  free(file);\u000a  free(string);\u000a  return (_Bool)local_100;\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV RBP,RDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV qword ptr [RSP + 0x20],RDI\nCALL 0x00407790\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x00403fb0\nMOV R12,RAX\nMOV RDI,R12\nCALL 0x00404010\nMOV R13,RAX\nMOV RDI,RBX\nCALL 0x00403ef0\nXOR EDI,EDI\nMOV ESI,0x3\nMOV qword ptr [RSP + 0x30],RAX\nMOV RDX,RAX\nCALL 0x00405df0\nMOV RDI,RAX\nCALL 0x00407790\nMOV qword ptr [RSP + 0x18],RAX\nMOV R15D,0xffffffff\nMOV R14,RBP\nCMP dword ptr [RBP + 0x18],0x3\nJNZ 0x004037d8\nMOV ESI,0x10900\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00404040\nMOV R15D,EAX\nCMP byte ptr [R14 + 0x1c],0x0\nJZ 0x00403806\nXOR EDI,EDI\nMOV ESI,0x409902\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00401c70\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nTEST R13,R13\nJZ 0x00403940\nCMP dword ptr [R14 + 0x18],0x1\nJZ 0x00403940\nMOV RAX,R12\nSUB RAX,RBX\nADD RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RSP + 0x40],RAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nLEA RBP,[RSP + 0x48]\nMOV AL,0x1\nMOV qword ptr [RSP + 0x38],RAX\nMOV dword ptr [RSP + 0x2c],R15D\nNOP dword ptr [RAX]\nMOV ESI,0x30\nMOV RDI,R12\nMOV RDX,R13\nCALL 0x00401a80\nMOV byte ptr [R12 + R13*0x1],0x0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x00408560\nTEST EAX,EAX\nJS 0x004038a0\nMOV RDI,R12\nMOV RSI,R13\nCALL 0x00403a50\nTEST AL,AL\nJNZ 0x00403870\nJMP 0x00403930\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,RBX\nCALL 0x00401cc0\nTEST EAX,EAX\nJNZ 0x00403930\nTEST R15D,R15D\nJS 0x004038ce\nMOV EDI,R15D\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00403690\nTEST EAX,EAX\nJZ 0x004038ce\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nCMP byte ptr [R14 + 0x1c],0x0\nJZ 0x00403919\nTEST byte ptr [RSP + 0x38],0x1\nMOV R15,qword ptr [RSP + 0x20]\nCMOVNZ R15,qword ptr [RSP + 0x10]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],RAX\nXOR EDI,EDI\nMOV ESI,0x40990f\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R15\nMOV R15D,dword ptr [RSP + 0x2c]\nMOV R8,RBX\nCALL 0x00401c70\nLEA RDX,[R13 + 0x1]\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,R12\nCALL 0x00401b30\nNOP word ptr [RAX + RAX*0x1]\nDEC R13\nJZ 0x00403940\nCMP dword ptr [R14 + 0x18],0x1\nJNZ 0x00403850\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x004018c0\nTEST EAX,EAX\nJZ 0x0040398a\nCALL 0x004018a0\nMOV R12D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x409921\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00401c70\nTEST R15D,R15D\nJNS 0x004039c2\nJMP 0x00403a13\nCMP byte ptr [R14 + 0x1c],0x0\nJZ 0x004039b8\nXOR EDI,EDI\nMOV ESI,0x409936\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00401c70\nMOV RBP,qword ptr [RSP + 0x8]\nTEST R15D,R15D\nJS 0x00403a13\nMOV EDI,R15D\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00403690\nTEST EAX,EAX\nJZ 0x004039d5\nXOR EBP,EBP\nMOV EDI,R15D\nCALL 0x00401ab0\nTEST EAX,EAX\nJZ 0x00403a13\nCALL 0x004018a0\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4098ee\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x18]\nCALL 0x00401c70\nMOV RDI,RBX\nCALL 0x00401880\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00401880\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00401880\nAND BPL,0x1\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1376
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n48 89 d5\n48 89 74 24 10\n48 89 7c 24 20\ne8 1d 40 00 00\n48 89 c3\n48 89 df\ne8 32 08 00 00\n49 89 c4\n4c 89 e7\ne8 87 08 00 00\n49 89 c5\n48 89 df\ne8 5c 07 00 00\n31 ff\nbe 03 00 00 00\n48 89 44 24 30\n48 89 c2\ne8 48 26 00 00\n48 89 c7\ne8 e0 3f 00 00\n48 89 44 24 18\n41 bf ff ff ff ff\n49 89 ee\n83 7d 18 03\n75 14\nbe 00 09 01 00\n31 c0\n48 8b 7c 24 30\ne8 6b 08 00 00\n41 89 c7\n41 80 7e 1c 00\n74 27\n31 ff\nbe 02 99 40 00\nba 05 00 00 00\ne8 c0 e1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 10\ne8 6a e4 ff ff\nb0 01\n48 89 44 24 08\n4d 85 ed\n0f 84 2a 01 00 00\n41 83 7e 18 01\n0f 84 1f 01 00 00\n4c 89 e0\n48 29 d8\n48 03 44 24 20\n48 89 44 24 40\nb0 01\n48 89 44 24 08\n48 8d 6c 24 48\nb0 01\n48 89 44 24 38\n44 89 7c 24 2c\n0f 1f 80 00 00 00 00\nbe 30 00 00 00\n4c 89 e7\n4c 89 ea\ne8 20 e2 ff ff\n43 c6 04 2c 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\n48 89 ee\ne8 e5 4c 00 00\n85 c0\n78 21\n4c 89 e7\n4c 89 ee\ne8 c6 01 00 00\n84 c0\n75 e2\ne9 9d 00 00 00\n48 8b 7c 24 20\n48 89 de\ne8 13 e4 ff ff\n85 c0\n75 7f\n45 85 ff\n78 18\n44 89 ff\n48 8b 74 24 18\ne8 cd fd ff ff\n85 c0\n74 07\n31 c0\n48 89 44 24 08\n41 80 7e 1c 00\n74 44\nf6 44 24 38 01\n4c 8b 7c 24 20\n4c 0f 45 7c 24 10\n31 c0\n48 89 44 24 38\n31 ff\nbe 0f 99 40 00\nba 05 00 00 00\ne8 b3 e0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f9\n44 8b 7c 24 2c\n49 89 d8\ne8 57 e3 ff ff\n49 8d 55 01\n48 8b 7c 24 40\n4c 89 e6\ne8 06 e2 ff ff\n66 0f 1f 44 00 00\n49 ff cd\n74 0b\n41 83 7e 18 01\n0f 85 10 ff ff ff\n48 8b 7c 24 20\ne8 76 df ff ff\n85 c0\n74 3c\ne8 4d df ff ff\n44 8b 20\n31 ed\n31 ff\nbe 21 99 40 00\nba 05 00 00 00\ne8 47 e0 ff ff\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 ca\n48 8b 4c 24 10\ne8 f0 e2 ff ff\n45 85 ff\n79 3d\ne9 89 00 00 00\n41 80 7e 1c 00\n74 27\n31 ff\nbe 36 99 40 00\nba 05 00 00 00\ne8 0e e0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 10\ne8 b8 e2 ff ff\n48 8b 6c 24 08\n45 85 ff\n78 51\n44 89 ff\n48 8b 74 24 18\ne8 c1 fc ff ff\n85 c0\n74 02\n31 ed\n44 89 ff\ne8 d3 e0 ff ff\n85 c0\n74 32\ne8 ba de ff ff\n44 8b 30\n31 ed\n31 ff\nbe ee 98 40 00\nba 05 00 00 00\ne8 b4 df ff ff\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ca\n48 8b 4c 24 18\ne8 5d e2 ff ff\n48 89 df\ne8 65 de ff ff\n48 8b 7c 24 30\ne8 5b de ff ff\n48 8b 7c 24 18\ne8 51 de ff ff\n40 80 e5 01\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1377
S'.text:0000000000403750\n.text:0000000000403751\n.text:0000000000403753\n.text:0000000000403755\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375a\n.text:0000000000403761\n.text:0000000000403764\n.text:0000000000403769\n.text:000000000040376e\n.text:0000000000403773\n.text:0000000000403776\n.text:0000000000403779\n.text:000000000040377e\n.text:0000000000403781\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378f\n.text:0000000000403794\n.text:0000000000403796\n.text:000000000040379b\n.text:00000000004037a0\n.text:00000000004037a3\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037b0\n.text:00000000004037b5\n.text:00000000004037bb\n.text:00000000004037be\n.text:00000000004037c2\n.text:00000000004037c4\n.text:00000000004037c9\n.text:00000000004037cb\n.text:00000000004037d0\n.text:00000000004037d5\n.text:00000000004037d8\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e1\n.text:00000000004037e6\n.text:00000000004037eb\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f5\n.text:00000000004037f7\n.text:00000000004037f9\n.text:00000000004037fc\n.text:0000000000403801\n.text:0000000000403806\n.text:0000000000403808\n.text:000000000040380d\n.text:0000000000403810\n.text:0000000000403816\n.text:000000000040381b\n.text:0000000000403821\n.text:0000000000403824\n.text:0000000000403827\n.text:000000000040382c\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403838\n.text:000000000040383d\n.text:000000000040383f\n.text:0000000000403844\n.text:0000000000403849\n.text:0000000000403850\n.text:0000000000403855\n.text:0000000000403858\n.text:000000000040385b\n.text:0000000000403860\n.text:0000000000403865\n.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403876\n.text:000000000040387b\n.text:000000000040387d\n.text:000000000040387f\n.text:0000000000403882\n.text:0000000000403885\n.text:000000000040388a\n.text:000000000040388c\n.text:000000000040388e\n.text:00000000004038a0\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038ad\n.text:00000000004038af\n.text:00000000004038b1\n.text:00000000004038b4\n.text:00000000004038b6\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c3\n.text:00000000004038c5\n.text:00000000004038c7\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d5\n.text:00000000004038da\n.text:00000000004038df\n.text:00000000004038e5\n.text:00000000004038e7\n.text:00000000004038ec\n.text:00000000004038ee\n.text:00000000004038f3\n.text:00000000004038f8\n.text:00000000004038fd\n.text:0000000000403900\n.text:0000000000403902\n.text:0000000000403904\n.text:0000000000403906\n.text:0000000000403909\n.text:000000000040390c\n.text:0000000000403911\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391d\n.text:0000000000403922\n.text:0000000000403925\n.text:000000000040392a\n.text:0000000000403930\n.text:0000000000403933\n.text:0000000000403935\n.text:000000000040393a\n.text:0000000000403940\n.text:0000000000403945\n.text:000000000040394a\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403953\n.text:0000000000403956\n.text:0000000000403958\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403964\n.text:0000000000403969\n.text:000000000040396c\n.text:000000000040396e\n.text:0000000000403970\n.text:0000000000403973\n.text:0000000000403976\n.text:000000000040397b\n.text:0000000000403980\n.text:0000000000403983\n.text:0000000000403985\n.text:000000000040398a\n.text:000000000040398f\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403998\n.text:000000000040399d\n.text:00000000004039a2\n.text:00000000004039a5\n.text:00000000004039a7\n.text:00000000004039a9\n.text:00000000004039ab\n.text:00000000004039ae\n.text:00000000004039b3\n.text:00000000004039b8\n.text:00000000004039bd\n.text:00000000004039c0\n.text:00000000004039c2\n.text:00000000004039c5\n.text:00000000004039ca\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039d5\n.text:00000000004039d8\n.text:00000000004039dd\n.text:00000000004039df\n.text:00000000004039e1\n.text:00000000004039e6\n.text:00000000004039e9\n.text:00000000004039eb\n.text:00000000004039ed\n.text:00000000004039f2\n.text:00000000004039f7\n.text:00000000004039fc\n.text:00000000004039ff\n.text:0000000000403a01\n.text:0000000000403a03\n.text:0000000000403a06\n.text:0000000000403a09\n.text:0000000000403a0e\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a1b\n.text:0000000000403a20\n.text:0000000000403a25\n.text:0000000000403a2a\n.text:0000000000403a2f\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a3c\n.text:0000000000403a3d\n.text:0000000000403a3f\n.text:0000000000403a41\n.text:0000000000403a43\n.text:0000000000403a45\n.text:0000000000403a46\n'
p1378
tp1379
sS'rpl_calloc'
p1380
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1381
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060d168)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1382
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00407bfb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00407c00\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00407c00\nPUSH RAX\nCALL 0x004018a0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401b10\n'
p1383
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af 9c ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 05 9f ff ff\n'
p1384
S'.text:0000000000407bc0\n.text:0000000000407bc3\n.text:0000000000407bc8\n.text:0000000000407bca\n.text:0000000000407bcd\n.text:0000000000407bd2\n.text:0000000000407bd4\n.text:0000000000407bd7\n.text:0000000000407bdb\n.text:0000000000407bdd\n.text:0000000000407be0\n.text:0000000000407be3\n.text:0000000000407be6\n.text:0000000000407be9\n.text:0000000000407beb\n.text:0000000000407bec\n.text:0000000000407bf1\n.text:0000000000407bf7\n.text:0000000000407bf9\n.text:0000000000407bfa\n.text:0000000000407bfb\n.text:0000000000407c00\n.text:0000000000407c03\n.text:0000000000407c06\n'
p1385
tp1386
sS'memset'
p1387
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060d120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x0060d120]\n'
p1390
S'ff 25 9a b6 20 00\n'
p1391
S'.plt:0000000000401a80\n'
p1392
tp1393
sS'getc_unlocked'
p1394
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1395
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060d068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x0060d068]\n'
p1397
S'ff 25 52 b7 20 00\n'
p1398
S'.plt:0000000000401910\n'
p1399
tp1400
sS'readsource'
p1401
(S'\n__stdcall readsource(randread_source * s, uchar * p, size_t size)\n'
p1402
V\u000avoid readsource(randread_source *s,uchar *p,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  size_t __n;\u000a  \u000a  sVar2 = fread_unlocked(p,1,size,(FILE *)s->source);\u000a  piVar3 = __errno_location();\u000a  __n = size - sVar2;\u000a  while (__n != 0) {\u000a    p = p + sVar2;\u000a    iVar4 = *piVar3;\u000a    iVar1 = ferror_unlocked((FILE *)s->source);\u000a    if (iVar1 == 0) {\u000a      iVar4 = iVar1;\u000a    }\u000a    *piVar3 = iVar4;\u000a    (*s->handler)(s->handler_arg);\u000a    sVar2 = fread_unlocked(p,1,__n,(FILE *)s->source);\u000a    __n = __n - sVar2;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1403
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nCALL 0x00401970\nMOV RBX,RAX\nCALL 0x004018a0\nMOV R12,RAX\nSUB R13,RBX\nJZ 0x0040684b\nNOP word ptr CS:[RAX + RAX*0x1]\nADD R14,RBX\nMOV EBX,dword ptr [R12]\nMOV RDI,qword ptr [R15]\nCALL 0x00401b00\nTEST EAX,EAX\nCMOVZ EBX,EAX\nMOV dword ptr [R12],EBX\nMOV RDI,qword ptr [R15 + 0x10]\nCALL qword ptr [R15 + 0x8]\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nMOV RDX,R13\nCALL 0x00401970\nMOV RBX,RAX\nSUB R13,RBX\nJNZ 0x00406810\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1404
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\ne8 7e b1 ff ff\n48 89 c3\ne8 a6 b0 ff ff\n49 89 c4\n49 29 dd\n74 49\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 01 de\n41 8b 1c 24\n49 8b 3f\ne8 e1 b2 ff ff\n85 c0\n0f 44 d8\n41 89 1c 24\n49 8b 7f 10\n41 ff 57 08\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\n4c 89 ea\ne8 2d b1 ff ff\n48 89 c3\n49 29 dd\n75 c5\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1405
S'.text:00000000004067d0\n.text:00000000004067d2\n.text:00000000004067d4\n.text:00000000004067d6\n.text:00000000004067d8\n.text:00000000004067d9\n.text:00000000004067dc\n.text:00000000004067df\n.text:00000000004067e2\n.text:00000000004067e5\n.text:00000000004067ea\n.text:00000000004067ed\n.text:00000000004067f2\n.text:00000000004067f5\n.text:00000000004067fa\n.text:00000000004067fd\n.text:0000000000406800\n.text:0000000000406802\n.text:0000000000406810\n.text:0000000000406813\n.text:0000000000406817\n.text:000000000040681a\n.text:000000000040681f\n.text:0000000000406821\n.text:0000000000406824\n.text:0000000000406828\n.text:000000000040682c\n.text:0000000000406830\n.text:0000000000406833\n.text:0000000000406838\n.text:000000000040683b\n.text:000000000040683e\n.text:0000000000406843\n.text:0000000000406846\n.text:0000000000406849\n.text:000000000040684b\n.text:000000000040684c\n.text:000000000040684e\n.text:0000000000406850\n.text:0000000000406852\n.text:0000000000406854\n'
p1406
tp1407
sS'memmove'
p1408
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1409
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060d210)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1410
S'JMP qword ptr [0x0060d210]\n'
p1411
S'ff 25 aa b5 20 00\n'
p1412
S'.plt:0000000000401c60\n'
p1413
tp1414
sS'c_isascii'
p1415
(S'\n__stdcall c_isascii()\n'
p1416
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1417
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1418
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1419
S'.text:0000000000407f60\n.text:0000000000407f66\n.text:0000000000407f69\n'
p1420
tp1421
sS'__xargmatch_internal'
p1422
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1423
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00403ad0\nTEST RAX,RAX\nJNS 0x00403d89\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00403bd0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00403c40\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d35\n.text:0000000000403d37\n.text:0000000000403d39\n.text:0000000000403d3a\n.text:0000000000403d3b\n.text:0000000000403d3e\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d47\n.text:0000000000403d4a\n.text:0000000000403d4d\n.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d56\n.text:0000000000403d59\n.text:0000000000403d5e\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d66\n.text:0000000000403d69\n.text:0000000000403d6c\n.text:0000000000403d71\n.text:0000000000403d74\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d7f\n.text:0000000000403d82\n.text:0000000000403d89\n.text:0000000000403d8d\n.text:0000000000403d8e\n.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d96\n.text:0000000000403d97\n'
p1427
tp1428
sS'dup_safer'
p1429
(S'\n__stdcall dup_safer()\n'
p1430
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1431
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00407c90\n'
p1432
S'31 f6\nba 03 00 00 00\n31 c0\ne9 f2 f7 ff ff\n'
p1433
S'.text:0000000000408490\n.text:0000000000408492\n.text:0000000000408497\n.text:0000000000408499\n'
p1434
tp1435
sS'randint_choose'
p1436
(S'\n__stdcall randint_choose(randint_source * s, randint choices)\n'
p1437
V\u000arandint randint_choose(randint_source *s,randint choices)\u000a\u000a{\u000a  randint rVar1;\u000a  \u000a  rVar1 = randint_genmax(s,choices - 1);\u000a  return rVar1;\u000a}\u000a\u000a
p1438
S'DEC RSI\nJMP 0x00406390\n'
p1439
S'48 ff ce\ne9 38 2f 00 00\n'
p1440
S'.text:0000000000403450\n.text:0000000000403453\n'
p1441
tp1442
sS'setvbuf'
p1443
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p1444
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_0060d200)();\u000a  return iVar1;\u000a}\u000a\u000a
p1445
S'JMP qword ptr [0x0060d200]\n'
p1446
S'ff 25 ba b5 20 00\n'
p1447
S'.plt:0000000000401c40\n'
p1448
tp1449
sS'__ctype_b_loc'
p1450
(S'\n__stdcall __ctype_b_loc()\n'
p1451
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060d290)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1452
S'JMP qword ptr [0x0060d290]\n'
p1453
S'ff 25 2a b5 20 00\n'
p1454
S'.plt:0000000000401d60\n'
p1455
tp1456
sS'quotearg'
p1457
(S'\n__stdcall quotearg(char * arg)\n'
p1458
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1459
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00405a30\n'
p1460
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1461
S'.text:0000000000405c10\n.text:0000000000405c13\n.text:0000000000405c15\n.text:0000000000405c18\n'
p1462
tp1463
sS'_start'
p1464
(S'\n__stdcall _start()\n'
p1465
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1466
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x408510\nMOV RCX,0x4084a0\nMOV RDI,0x402200\nCALL qword ptr [0x0060cff0]\nHLT\n'
p1467
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 10 85 40 00\n48 c7 c1 a0 84 40 00\n48 c7 c7 00 22 40 00\nff 15 46 b2 20 00\nf4\n'
p1468
S'.text:0000000000401d80\n.text:0000000000401d82\n.text:0000000000401d85\n.text:0000000000401d86\n.text:0000000000401d89\n.text:0000000000401d8d\n.text:0000000000401d8e\n.text:0000000000401d8f\n.text:0000000000401d96\n.text:0000000000401d9d\n.text:0000000000401da4\n.text:0000000000401daa\n'
p1469
tp1470
sS'c_iscntrl'
p1471
(S'\n__stdcall c_iscntrl()\n'
p1472
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1473
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00407f88\nRET\nCMP EDI,0x7f\nJZ 0x00407f87\nXOR EAX,EAX\nRET\n'
p1474
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1475
S'.text:0000000000407f80\n.text:0000000000407f82\n.text:0000000000407f85\n.text:0000000000407f87\n.text:0000000000407f88\n.text:0000000000407f8b\n.text:0000000000407f8d\n.text:0000000000407f8f\n'
p1476
tp1477
sS'humblock'
p1478
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p1479
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_0040492a;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_0040492a:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x004048ea\nMOV EDI,0x409a0c\nCALL 0x00401870\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x004048ea\nMOV EDI,0x409a17\nCALL 0x00401870\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00404986\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x409a70\nMOV EDX,0x409a88\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00403ad0\nTEST EAX,EAX\nJS 0x00404931\nCDQE\nOR EBP,dword ptr [0x409a88 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x00404952\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x409a21\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x004078e0\nTEST EAX,EAX\nJZ 0x0040495d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x0040492a\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x0040498f\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x00404970\nJMP 0x0040492a\nXOR EBP,EBP\nCALL 0x004049c0\nJMP 0x00404927\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x004049b0\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x0040492a\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x0040492a\n'
p1481
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf 0c 9a 40 00\ne8 a4 cf ff ff\n48 89 c7\n48 85 ff\n75 16\nbf 17 9a 40 00\ne8 92 cf ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe 70 9a 40 00\nba 88 9a 40 00\nb9 04 00 00 00\n48 89 df\ne8 bb f1 ff ff\n85 c0\n78 18\n48 98\n0b 2c 85 88 9a 40 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 21 9a 40 00\n48 89 df\n4c 89 f9\ne8 99 2f 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p1482
S'.text:00000000004048b0\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b5\n.text:00000000004048b6\n.text:00000000004048b7\n.text:00000000004048ba\n.text:00000000004048bd\n.text:00000000004048c0\n.text:00000000004048c2\n.text:00000000004048c7\n.text:00000000004048cc\n.text:00000000004048cf\n.text:00000000004048d2\n.text:00000000004048d4\n.text:00000000004048d9\n.text:00000000004048de\n.text:00000000004048e1\n.text:00000000004048e4\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048ef\n.text:00000000004048f3\n.text:00000000004048f7\n.text:00000000004048fb\n.text:00000000004048fe\n.text:0000000000404903\n.text:0000000000404908\n.text:000000000040490d\n.text:0000000000404910\n.text:0000000000404915\n.text:0000000000404917\n.text:0000000000404919\n.text:000000000040491b\n.text:0000000000404922\n.text:0000000000404927\n.text:000000000040492a\n.text:000000000040492d\n.text:000000000040492f\n.text:0000000000404931\n.text:0000000000404934\n.text:0000000000404936\n.text:000000000040493c\n.text:000000000040493f\n.text:0000000000404942\n.text:0000000000404947\n.text:0000000000404949\n.text:000000000040494b\n.text:0000000000404952\n.text:0000000000404956\n.text:0000000000404957\n.text:0000000000404959\n.text:000000000040495b\n.text:000000000040495c\n.text:000000000040495d\n.text:000000000040495f\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404969\n.text:0000000000404970\n.text:0000000000404973\n.text:0000000000404975\n.text:0000000000404979\n.text:000000000040497c\n.text:000000000040497f\n.text:0000000000404982\n.text:0000000000404984\n.text:0000000000404986\n.text:0000000000404988\n.text:000000000040498d\n.text:000000000040498f\n.text:0000000000404991\n.text:0000000000404997\n.text:000000000040499d\n.text:00000000004049a1\n.text:00000000004049a4\n.text:00000000004049a6\n.text:00000000004049aa\n.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b5\n'
p1483
tp1484
sS'c_isblank'
p1485
(S'\n__stdcall c_isblank()\n'
p1486
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1487
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1488
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1489
S'.text:0000000000407f70\n.text:0000000000407f73\n.text:0000000000407f76\n.text:0000000000407f79\n.text:0000000000407f7c\n.text:0000000000407f7e\n'
p1490
tp1491
sS'randread_free'
p1492
(S'\n__stdcall randread_free(randread_source * s)\n'
p1493
V\u000aint randread_free(randread_source *s)\u000a\u000a{\u000a  FILE *fp;\u000a  int iVar1;\u000a  \u000a  fp = s->source;\u000a  free(s);\u000a  if (fp != (FILE *)0x0) {\u000a    iVar1 = rpl_fclose(fp);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1494
S'PUSH RBX\nMOV RBX,qword ptr [RDI]\nCALL 0x00401880\nTEST RBX,RBX\nJZ 0x00406967\nMOV RDI,RBX\nPOP RBX\nJMP 0x00407c10\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1495
S'53\n48 8b 1f\ne8 27 af ff ff\n48 85 db\n74 09\n48 89 df\n5b\ne9 a9 12 00 00\n31 c0\n5b\nc3\n'
p1496
S'.text:0000000000406950\n.text:0000000000406951\n.text:0000000000406954\n.text:0000000000406959\n.text:000000000040695c\n.text:000000000040695e\n.text:0000000000406961\n.text:0000000000406962\n.text:0000000000406967\n.text:0000000000406969\n.text:000000000040696a\n'
p1497
tp1498
sS'atexit'
p1499
(S'\n__stdcall atexit(__func * __func)\n'
p1500
V\u000a/* WARNING: Removing unreachable block (ram,0x00408540) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060d250)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1501
S'MOV RAX,0x60d2a8\nTEST RAX,RAX\nJZ 0x00408540\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401ce0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401ce0\n'
p1502
S'48 c7 c0 a8 d2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 aa 97 ff ff\n31 d2\n31 f6\ne9 97 97 ff ff\n'
p1503
S'.text:0000000000408520\n.text:0000000000408527\n.text:000000000040852a\n.text:000000000040852c\n.text:000000000040852f\n.text:0000000000408531\n.text:0000000000408540\n.text:0000000000408542\n.text:0000000000408544\n'
p1504
tp1505
sS'fdopen'
p1506
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1507
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060d1e8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1508
S'JMP qword ptr [0x0060d1e8]\n'
p1509
S'ff 25 d2 b5 20 00\n'
p1510
S'.plt:0000000000401c10\n'
p1511
tp1512
sS'error'
p1513
(S'\n__stdcall error()\n'
p1514
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060d218)();\u000a  return;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0060d218]\n'
p1516
S'ff 25 a2 b5 20 00\n'
p1517
S'.plt:0000000000401c70\n'
p1518
tp1519
sS'strcaseeq6'
p1520
(S'\n__stdcall strcaseeq6()\n'
p1521
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1522
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004062d2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004062d9\nJMP 0x004062ee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004062ee\nTEST BPL,BPL\nJZ 0x004062e9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00406300\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1523
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 51 1d 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1524
S'.text:00000000004062b0\n.text:00000000004062b1\n.text:00000000004062b2\n.text:00000000004062b3\n.text:00000000004062b5\n.text:00000000004062b8\n.text:00000000004062ba\n.text:00000000004062bf\n.text:00000000004062c3\n.text:00000000004062c5\n.text:00000000004062c7\n.text:00000000004062ca\n.text:00000000004062cc\n.text:00000000004062ce\n.text:00000000004062d0\n.text:00000000004062d2\n.text:00000000004062d4\n.text:00000000004062d7\n.text:00000000004062d9\n.text:00000000004062dc\n.text:00000000004062de\n.text:00000000004062e1\n.text:00000000004062e5\n.text:00000000004062e6\n.text:00000000004062e7\n.text:00000000004062e9\n.text:00000000004062ee\n.text:00000000004062f2\n.text:00000000004062f3\n.text:00000000004062f4\n'
p1525
tp1526
sS'strcaseeq5'
p1527
(S'\n__stdcall strcaseeq5()\n'
p1528
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1529
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00406286\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040628d\nJMP 0x004062a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004062a4\nTEST BPL,BPL\nJZ 0x0040629f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004062b0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1530
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 9d 1d 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1531
S'.text:0000000000406260\n.text:0000000000406261\n.text:0000000000406263\n.text:0000000000406264\n.text:0000000000406267\n.text:0000000000406269\n.text:000000000040626c\n.text:000000000040626e\n.text:0000000000406273\n.text:0000000000406277\n.text:0000000000406279\n.text:000000000040627b\n.text:000000000040627e\n.text:0000000000406280\n.text:0000000000406282\n.text:0000000000406284\n.text:0000000000406286\n.text:0000000000406288\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406290\n.text:0000000000406292\n.text:0000000000406296\n.text:0000000000406299\n.text:000000000040629a\n.text:000000000040629c\n.text:000000000040629d\n.text:000000000040629f\n.text:00000000004062a4\n.text:00000000004062a5\n.text:00000000004062a7\n.text:00000000004062a8\n'
p1532
tp1533
sS'fsync'
p1534
(S'\n__stdcall fsync(int __fd)\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fsync(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fsync_0060d220)();\u000a  return iVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x0060d220]\n'
p1537
S'ff 25 9a b5 20 00\n'
p1538
S'.plt:0000000000401c80\n'
p1539
tp1540
sS'strcaseeq7'
p1541
(S'\n__stdcall strcaseeq7()\n'
p1542
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1543
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00406322\nTEST ECX,0xffffffdf\nJNZ 0x00406326\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040632a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1544
S'53\n48 89 fb\n31 ff\ne8 05 1d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1545
S'.text:0000000000406300\n.text:0000000000406301\n.text:0000000000406304\n.text:0000000000406306\n.text:000000000040630b\n.text:000000000040630f\n.text:0000000000406311\n.text:0000000000406313\n.text:0000000000406319\n.text:000000000040631b\n.text:0000000000406320\n.text:0000000000406321\n.text:0000000000406322\n.text:0000000000406324\n.text:0000000000406326\n.text:0000000000406328\n.text:0000000000406329\n.text:000000000040632a\n.text:000000000040632f\n.text:0000000000406330\n'
p1546
tp1547
sS'clear_random_data'
p1548
(S'\n__stdcall clear_random_data()\n'
p1549
V\u000avoid clear_random_data(void)\u000a\u000a{\u000a  randint_all_free(randint_source);\u000a  return;\u000a}\u000a\u000a
p1550
S'MOV RDI,qword ptr [0x0060d370]\nJMP 0x004064d0\n'
p1551
S'48 8b 3d 49 ad 20 00\ne9 a4 3e 00 00\n'
p1552
S'.text:0000000000402620\n.text:0000000000402627\n'
p1553
tp1554
sS'randread'
p1555
(S'\n__stdcall randread(randread_source * s, void * buf, size_t size)\n'
p1556
V\u000avoid randread(randread_source *s,void *buf,size_t size)\u000a\u000a{\u000a  if (s->source != (FILE *)0x0) {\u000a    readsource(s,(uchar *)buf,size);\u000a    return;\u000a  }\u000a  readisaac((isaac *)s->buf,buf,size);\u000a  return;\u000a}\u000a\u000a
p1557
S'CMP qword ptr [RDI],0x0\nJZ 0x004067b8\nJMP 0x004067d0\nADD RDI,0x18\nJMP 0x00406860\n'
p1558
S'48 83 3f 00\n74 02\neb 18\n48 83 c7 18\ne9 9f 00 00 00\n'
p1559
S'.text:00000000004067b0\n.text:00000000004067b4\n.text:00000000004067b6\n.text:00000000004067b8\n.text:00000000004067bc\n'
p1560
tp1561
sS'get_nonce'
p1562
(S'\n__stdcall get_nonce(DRBG_CTX * ctx, uchar * * pout, int entropy, size_t min_len, size_t max_len)\n'
p1563
V\u000asize_t get_nonce(DRBG_CTX *ctx,uchar **pout,int entropy,size_t min_len,size_t max_len)\u000a\u000a{\u000a  int __fd;\u000a  ulong uVar1;\u000a  undefined4 extraout_var;\u000a  void *pvVar2;\u000a  undefined4 in_register_00000014;\u000a  uchar **__nbytes;\u000a  size_t __n;\u000a  timeval v;\u000a  __gid_t local_30 [4];\u000a  \u000a  uVar1 = 0;\u000a  __fd = open("/dev/urandom",0,CONCAT44(in_register_00000014,entropy));\u000a  if (-1 < __fd) {\u000a    __nbytes = (uchar **)0x800;\u000a    if (pout < (uchar **)0x800) {\u000a      __nbytes = pout;\u000a    }\u000a    uVar1 = read(__fd,ctx,(size_t)__nbytes);\u000a    __fd = close(__fd);\u000a    if ((long)uVar1 < 1) {\u000a      uVar1 = 0;\u000a    }\u000a    else {\u000a      if (0x7ff < uVar1) {\u000a        return CONCAT44(extraout_var,__fd);\u000a      }\u000a    }\u000a  }\u000a  __n = 0x10;\u000a  if (0x800 - uVar1 < 0x10) {\u000a    __n = 0x800 - uVar1;\u000a  }\u000a  gettimeofday((timeval *)local_30,(__timezone_ptr_t)0x0);\u000a  pvVar2 = memcpy(ctx + uVar1,(timeval *)local_30,__n);\u000a  uVar1 = __n + uVar1;\u000a  if (uVar1 < 0x800) {\u000a    __n = 4;\u000a    if (0x800 - uVar1 < 4) {\u000a      __n = 0x800 - uVar1;\u000a    }\u000a    local_30[0] = getpid();\u000a    pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a    uVar1 = __n + uVar1;\u000a    if (uVar1 < 0x800) {\u000a      __n = 4;\u000a      if (0x800 - uVar1 < 4) {\u000a        __n = 0x800 - uVar1;\u000a      }\u000a      local_30[0] = getppid();\u000a      pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a      uVar1 = __n + uVar1;\u000a      if (uVar1 < 0x800) {\u000a        __n = 4;\u000a        if (0x800 - uVar1 < 4) {\u000a          __n = 0x800 - uVar1;\u000a        }\u000a        local_30[0] = getuid();\u000a        pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        uVar1 = __n + uVar1;\u000a        if (uVar1 < 0x800) {\u000a          __n = 4;\u000a          if (0x800 - uVar1 < 4) {\u000a            __n = 0x800 - uVar1;\u000a          }\u000a          local_30[0] = getgid();\u000a          pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return (size_t)pvVar2;\u000a}\u000a\u000a
p1564
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV R14,RDI\nXOR R15D,R15D\nMOV EDI,0x40a049\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401c90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00406651\nCMP RBX,0x800\nMOV EDX,0x800\nCMOVC RDX,RBX\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401ad0\nMOV R15,RAX\nMOV EDI,EBP\nCALL 0x00401ab0\nTEST R15,R15\nJLE 0x0040664e\nCMP R15,0x7ff\nJBE 0x00406651\nJMP 0x0040677c\nXOR R15D,R15D\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x10\nMOV EBX,0x10\nCMOVC RBX,RAX\nLEA RBP,[RSP + 0x8]\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x00401a60\nLEA RDI,[R14 + R15*0x1]\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x00401b30\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x0040677c\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x00401960\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x00401b30\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x0040677c\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x00401d00\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + R15*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,RBX\nCALL 0x00401b30\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x0040677c\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x004019f0\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x00401b30\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x0040677c\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x00401b60\nMOV dword ptr [RSP + 0x8],EAX\nADD R14,R15\nLEA RSI,[RSP + 0x8]\nMOV RDI,R14\nMOV RDX,RBX\nCALL 0x00401b30\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1565
S'55\n41 57\n41 56\n53\n48 83 ec 18\n48 89 f3\n49 89 fe\n45 31 ff\nbf 49 a0 40 00\n31 f6\n31 c0\ne8 7f b6 ff ff\n89 c5\n85 ed\n78 3a\n48 81 fb 00 08 00 00\nba 00 08 00 00\n48 0f 42 d3\n89 ef\n4c 89 f6\ne8 9f b4 ff ff\n49 89 c7\n89 ef\ne8 75 b4 ff ff\n4d 85 ff\n7e 0e\n49 81 ff ff 07 00 00\n76 08\ne9 2e 01 00 00\n45 31 ff\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 10\nbb 10 00 00 00\n48 0f 42 d8\n48 8d 6c 24 08\n31 f6\n48 89 ef\ne8 eb b3 ff ff\n4b 8d 3c 3e\n48 89 ee\n48 89 da\ne8 ac b4 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n0f 87 e8 00 00 00\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 b1 b2 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 6c b4 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n0f 87 a8 00 00 00\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 12 b6 ff ff\n89 44 24 08\n4b 8d 3c 3e\n48 8d 74 24 08\n48 89 da\ne8 2d b4 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n77 6d\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 c6 b2 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 f1 b3 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n77 31\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 fb b3 ff ff\n89 44 24 08\n4d 01 fe\n48 8d 74 24 08\n4c 89 f7\n48 89 da\ne8 b4 b3 ff ff\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1566
S'.text:00000000004065f0\n.text:00000000004065f1\n.text:00000000004065f3\n.text:00000000004065f5\n.text:00000000004065f6\n.text:00000000004065fa\n.text:00000000004065fd\n.text:0000000000406600\n.text:0000000000406603\n.text:0000000000406608\n.text:000000000040660a\n.text:000000000040660c\n.text:0000000000406611\n.text:0000000000406613\n.text:0000000000406615\n.text:0000000000406617\n.text:000000000040661e\n.text:0000000000406623\n.text:0000000000406627\n.text:0000000000406629\n.text:000000000040662c\n.text:0000000000406631\n.text:0000000000406634\n.text:0000000000406636\n.text:000000000040663b\n.text:000000000040663e\n.text:0000000000406640\n.text:0000000000406647\n.text:0000000000406649\n.text:000000000040664e\n.text:0000000000406651\n.text:0000000000406656\n.text:0000000000406659\n.text:000000000040665d\n.text:0000000000406662\n.text:0000000000406666\n.text:000000000040666b\n.text:000000000040666d\n.text:0000000000406670\n.text:0000000000406675\n.text:0000000000406679\n.text:000000000040667c\n.text:000000000040667f\n.text:0000000000406684\n.text:0000000000406687\n.text:000000000040668e\n.text:0000000000406694\n.text:0000000000406699\n.text:000000000040669c\n.text:00000000004066a0\n.text:00000000004066a6\n.text:00000000004066aa\n.text:00000000004066af\n.text:00000000004066b3\n.text:00000000004066b7\n.text:00000000004066bc\n.text:00000000004066bf\n.text:00000000004066c4\n.text:00000000004066c7\n.text:00000000004066ce\n.text:00000000004066d4\n.text:00000000004066d9\n.text:00000000004066dc\n.text:00000000004066e0\n.text:00000000004066e5\n.text:00000000004066e9\n.text:00000000004066ee\n.text:00000000004066f2\n.text:00000000004066f6\n.text:00000000004066fb\n.text:00000000004066fe\n.text:0000000000406703\n.text:0000000000406706\n.text:000000000040670d\n.text:000000000040670f\n.text:0000000000406714\n.text:0000000000406717\n.text:000000000040671b\n.text:0000000000406721\n.text:0000000000406725\n.text:000000000040672a\n.text:000000000040672e\n.text:0000000000406732\n.text:0000000000406737\n.text:000000000040673a\n.text:000000000040673f\n.text:0000000000406742\n.text:0000000000406749\n.text:000000000040674b\n.text:0000000000406750\n.text:0000000000406753\n.text:0000000000406757\n.text:000000000040675c\n.text:0000000000406760\n.text:0000000000406765\n.text:0000000000406769\n.text:000000000040676c\n.text:0000000000406771\n.text:0000000000406774\n.text:0000000000406777\n.text:000000000040677c\n.text:0000000000406780\n.text:0000000000406781\n.text:0000000000406783\n.text:0000000000406785\n.text:0000000000406786\n'
p1567
tp1568
sS'chmod'
p1569
(S'\n__stdcall chmod(char * __file, __mode_t __mode)\n'
p1570
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chmod(char *__file,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chmod_0060d208)();\u000a  return iVar1;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060d208]\n'
p1572
S'ff 25 b2 b5 20 00\n'
p1573
S'.plt:0000000000401c50\n'
p1574
tp1575
sS'emit_mandatory_arg_note'
p1576
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1577
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1578
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409584\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RSI,qword ptr [0x0060d328]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401af0\n'
p1579
S'50\n31 ff\nbe 84 95 40 00\nba 05 00 00 00\ne8 fe f8 ff ff\n48 8b 35 6f b2 20 00\n48 89 c7\n58\ne9 2e fa ff ff\n'
p1580
S'.text:00000000004020a0\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a8\n.text:00000000004020ad\n.text:00000000004020b2\n.text:00000000004020b9\n.text:00000000004020bc\n.text:00000000004020bd\n'
p1581
tp1582
sS'strcaseeq0'
p1583
(S'\n__stdcall strcaseeq0()\n'
p1584
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1585
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00406035\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040603c\nJMP 0x00406070\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406070\nTEST BPL,BPL\nJZ 0x0040606b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00406080\nJMP 0x00406070\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1586
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ed 1f 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1587
S'.text:0000000000406000\n.text:0000000000406001\n.text:0000000000406003\n.text:0000000000406005\n.text:0000000000406007\n.text:0000000000406009\n.text:000000000040600a\n.text:000000000040600b\n.text:000000000040600e\n.text:0000000000406011\n.text:0000000000406014\n.text:0000000000406017\n.text:0000000000406019\n.text:000000000040601c\n.text:000000000040601e\n.text:0000000000406023\n.text:0000000000406026\n.text:0000000000406028\n.text:000000000040602a\n.text:000000000040602d\n.text:000000000040602f\n.text:0000000000406031\n.text:0000000000406033\n.text:0000000000406035\n.text:0000000000406037\n.text:000000000040603a\n.text:000000000040603c\n.text:000000000040603f\n.text:0000000000406041\n.text:0000000000406045\n.text:000000000040604a\n.text:000000000040604d\n.text:0000000000406051\n.text:0000000000406055\n.text:0000000000406059\n.text:000000000040605d\n.text:0000000000406061\n.text:0000000000406064\n.text:0000000000406069\n.text:000000000040606b\n.text:0000000000406070\n.text:0000000000406074\n.text:0000000000406075\n.text:0000000000406077\n.text:0000000000406079\n.text:000000000040607b\n.text:000000000040607d\n.text:000000000040607e\n'
p1588
tp1589
sS'strcaseeq2'
p1590
(S'\n__stdcall strcaseeq2()\n'
p1591
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1592
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00406146\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040614d\nJMP 0x0040617a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040617a\nTEST BPL,BPL\nJZ 0x00406175\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406190\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1593
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 1e 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1594
S'.text:0000000000406110\n.text:0000000000406111\n.text:0000000000406113\n.text:0000000000406115\n.text:0000000000406117\n.text:0000000000406119\n.text:000000000040611a\n.text:000000000040611b\n.text:000000000040611e\n.text:0000000000406121\n.text:0000000000406124\n.text:0000000000406127\n.text:0000000000406129\n.text:000000000040612c\n.text:000000000040612e\n.text:0000000000406133\n.text:0000000000406137\n.text:0000000000406139\n.text:000000000040613b\n.text:000000000040613e\n.text:0000000000406140\n.text:0000000000406142\n.text:0000000000406144\n.text:0000000000406146\n.text:0000000000406148\n.text:000000000040614b\n.text:000000000040614d\n.text:0000000000406150\n.text:0000000000406152\n.text:0000000000406156\n.text:000000000040615a\n.text:000000000040615e\n.text:0000000000406162\n.text:0000000000406165\n.text:0000000000406169\n.text:000000000040616a\n.text:000000000040616c\n.text:000000000040616e\n.text:0000000000406170\n.text:0000000000406172\n.text:0000000000406173\n.text:0000000000406175\n.text:000000000040617a\n.text:000000000040617e\n.text:000000000040617f\n.text:0000000000406181\n.text:0000000000406183\n.text:0000000000406185\n.text:0000000000406187\n.text:0000000000406188\n'
p1595
tp1596
sS'strcaseeq1'
p1597
(S'\n__stdcall strcaseeq1()\n'
p1598
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004060bd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004060c4\nJMP 0x004060f7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004060f7\nTEST BPL,BPL\nJZ 0x004060f2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406110\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1600
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 66 1f 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1601
S'.text:0000000000406080\n.text:0000000000406081\n.text:0000000000406083\n.text:0000000000406085\n.text:0000000000406087\n.text:0000000000406089\n.text:000000000040608a\n.text:000000000040608b\n.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406096\n.text:0000000000406099\n.text:000000000040609b\n.text:000000000040609e\n.text:00000000004060a3\n.text:00000000004060a5\n.text:00000000004060aa\n.text:00000000004060ae\n.text:00000000004060b0\n.text:00000000004060b2\n.text:00000000004060b5\n.text:00000000004060b7\n.text:00000000004060b9\n.text:00000000004060bb\n.text:00000000004060bd\n.text:00000000004060bf\n.text:00000000004060c2\n.text:00000000004060c4\n.text:00000000004060c7\n.text:00000000004060c9\n.text:00000000004060cd\n.text:00000000004060d1\n.text:00000000004060d5\n.text:00000000004060db\n.text:00000000004060df\n.text:00000000004060e2\n.text:00000000004060e6\n.text:00000000004060e7\n.text:00000000004060e9\n.text:00000000004060eb\n.text:00000000004060ed\n.text:00000000004060ef\n.text:00000000004060f0\n.text:00000000004060f2\n.text:00000000004060f7\n.text:00000000004060fb\n.text:00000000004060fc\n.text:00000000004060fe\n.text:0000000000406100\n.text:0000000000406102\n.text:0000000000406104\n.text:0000000000406105\n'
p1602
tp1603
sS'strcaseeq4'
p1604
(S'\n__stdcall strcaseeq4()\n'
p1605
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1606
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040622c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406233\nJMP 0x00406254\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406254\nTEST BPL,BPL\nJZ 0x0040624f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406260\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1607
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 f7 1d 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1608
S'.text:0000000000406200\n.text:0000000000406201\n.text:0000000000406203\n.text:0000000000406205\n.text:0000000000406206\n.text:0000000000406207\n.text:000000000040620a\n.text:000000000040620d\n.text:000000000040620f\n.text:0000000000406212\n.text:0000000000406214\n.text:0000000000406219\n.text:000000000040621d\n.text:000000000040621f\n.text:0000000000406221\n.text:0000000000406224\n.text:0000000000406226\n.text:0000000000406228\n.text:000000000040622a\n.text:000000000040622c\n.text:000000000040622e\n.text:0000000000406231\n.text:0000000000406233\n.text:0000000000406236\n.text:0000000000406238\n.text:000000000040623c\n.text:0000000000406240\n.text:0000000000406243\n.text:0000000000406247\n.text:0000000000406248\n.text:000000000040624a\n.text:000000000040624c\n.text:000000000040624d\n.text:000000000040624f\n.text:0000000000406254\n.text:0000000000406258\n.text:0000000000406259\n.text:000000000040625b\n.text:000000000040625d\n.text:000000000040625e\n'
p1609
tp1610
sS'ind'
p1611
(S'\n__stdcall ind(isaac_word * m, isaac_word x)\n'
p1612
V\u000aisaac_word ind(isaac_word *m,isaac_word x)\u000a\u000a{\u000a  return *(isaac_word *)((long)m + (ulong)((uint)x & 0x7f8));\u000a}\u000a\u000a
p1613
S'AND ESI,0x7f8\nMOV RAX,qword ptr [RDI + RSI*0x1]\nRET\n'
p1614
S'81 e6 f8 07 00 00\n48 8b 04 37\nc3\n'
p1615
S'.text:0000000000406d70\n.text:0000000000406d76\n.text:0000000000406d7a\n'
p1616
tp1617
sS'strcaseeq3'
p1618
(S'\n__stdcall strcaseeq3()\n'
p1619
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1620
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408010\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004061c0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004061c7\nJMP 0x004061ea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004061ea\nTEST BPL,BPL\nJZ 0x004061e5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406200\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1621
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 63 1e 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1622
S'.text:0000000000406190\n.text:0000000000406191\n.text:0000000000406193\n.text:0000000000406195\n.text:0000000000406197\n.text:0000000000406198\n.text:000000000040619b\n.text:000000000040619e\n.text:00000000004061a1\n.text:00000000004061a3\n.text:00000000004061a6\n.text:00000000004061a8\n.text:00000000004061ad\n.text:00000000004061b1\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061b8\n.text:00000000004061ba\n.text:00000000004061bc\n.text:00000000004061be\n.text:00000000004061c0\n.text:00000000004061c2\n.text:00000000004061c5\n.text:00000000004061c7\n.text:00000000004061ca\n.text:00000000004061cc\n.text:00000000004061d0\n.text:00000000004061d4\n.text:00000000004061d8\n.text:00000000004061db\n.text:00000000004061dc\n.text:00000000004061de\n.text:00000000004061e0\n.text:00000000004061e2\n.text:00000000004061e3\n.text:00000000004061e5\n.text:00000000004061ea\n.text:00000000004061eb\n.text:00000000004061ed\n.text:00000000004061ef\n.text:00000000004061f1\n.text:00000000004061f2\n'
p1623
tp1624
sS'last_component'
p1625
(S'\n__stdcall last_component(char * name)\n'
p1626
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1627
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00403fc0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00403fe6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00403fe0\nTEST CL,CL\nJZ 0x00404007\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x00403ffd\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00403fe0\nMOV RAX,RDI\nRET\n'
p1628
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1629
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fc0\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fca\n.text:0000000000403fcc\n.text:0000000000403fcf\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe6\n.text:0000000000403fe9\n.text:0000000000403feb\n.text:0000000000403fee\n.text:0000000000403ff0\n.text:0000000000403ff2\n.text:0000000000403ff4\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffb\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404003\n.text:0000000000404005\n.text:0000000000404007\n.text:000000000040400a\n'
p1630
tp1631
sS'register_tm_clones'
p1632
(S'\n__stdcall register_tm_clones()\n'
p1633
V\u000a/* WARNING: Removing unreachable block (ram,0x00401e13) */\u000a/* WARNING: Removing unreachable block (ram,0x00401e1d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1634
S'MOV ESI,0x60d320\nPUSH RBP\nSUB RSI,0x60d320\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401e28\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e28\nPOP RBP\nMOV EDI,0x60d320\nJMP RAX\nPOP RBP\nRET\n'
p1635
S'be 20 d3 60 00\n55\n48 81 ee 20 d3 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 20 d3 60 00\nff e0\n5d\nc3\n'
p1636
S'.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401df6\n.text:0000000000401dfd\n.text:0000000000401e01\n.text:0000000000401e04\n.text:0000000000401e07\n.text:0000000000401e0b\n.text:0000000000401e0e\n.text:0000000000401e11\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1b\n.text:0000000000401e1d\n.text:0000000000401e1e\n.text:0000000000401e23\n.text:0000000000401e28\n.text:0000000000401e29\n'
p1637
tp1638
sS'c_islower'
p1639
(S'\n__stdcall c_islower()\n'
p1640
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1641
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1642
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1643
S'.text:0000000000407fb0\n.text:0000000000407fb3\n.text:0000000000407fb6\n.text:0000000000407fb9\n'
p1644
tp1645
sS'argmatch'
p1646
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1647
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1648
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x004019d0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00403b97\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004018d0\nTEST EAX,EAX\nJNZ 0x00403b80\nMOV RDI,R15\nCALL 0x004019d0\nCMP RAX,RBX\nJZ 0x00403bb9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00403b75\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00403b6c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401ae0\nTEST EAX,EAX\nJZ 0x00403b80\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00403b80\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00403b20\nJMP 0x00403ba7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1649
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 e1 de ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 a2 dd ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 96 de ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 78 df ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1650
S'.text:0000000000403ad0\n.text:0000000000403ad1\n.text:0000000000403ad3\n.text:0000000000403ad5\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403ada\n.text:0000000000403ade\n.text:0000000000403ae1\n.text:0000000000403ae4\n.text:0000000000403ae7\n.text:0000000000403aea\n.text:0000000000403aef\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403afb\n.text:0000000000403afe\n.text:0000000000403b04\n.text:0000000000403b0d\n.text:0000000000403b0f\n.text:0000000000403b14\n.text:0000000000403b19\n.text:0000000000403b1b\n.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b26\n.text:0000000000403b29\n.text:0000000000403b2e\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b3a\n.text:0000000000403b3d\n.text:0000000000403b3f\n.text:0000000000403b45\n.text:0000000000403b47\n.text:0000000000403b4c\n.text:0000000000403b4f\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b5a\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b63\n.text:0000000000403b68\n.text:0000000000403b6a\n.text:0000000000403b6c\n.text:0000000000403b6e\n.text:0000000000403b73\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b80\n.text:0000000000403b85\n.text:0000000000403b8a\n.text:0000000000403b8d\n.text:0000000000403b90\n.text:0000000000403b93\n.text:0000000000403b95\n.text:0000000000403b97\n.text:0000000000403ba0\n.text:0000000000403ba2\n.text:0000000000403ba7\n.text:0000000000403bac\n.text:0000000000403bb3\n.text:0000000000403bb9\n.text:0000000000403bbc\n.text:0000000000403bc0\n.text:0000000000403bc1\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc7\n.text:0000000000403bc9\n.text:0000000000403bca\n'
p1651
tp1652
sS'fwrite'
p1653
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1654
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060d270)();\u000a  return sVar1;\u000a}\u000a\u000a
p1655
S'JMP qword ptr [0x0060d270]\n'
p1656
S'ff 25 4a b5 20 00\n'
p1657
S'.plt:0000000000401d20\n'
p1658
tp1659
sS'dopass'
p1660
(S'\n__stdcall dopass(stat * st, char * qname, off_t * sizep, randread_source * s, ulong k, ulong n)\n'
p1661
V\u000aint dopass(stat *st,char *qname,off_t *sizep,randread_source *s,ulong k,ulong n)\u000a\u000a{\u000a  size_t __n;\u000a  byte bVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint uVar4;\u000a  void *ptr;\u000a  uchar *buf;\u000a  long extraout_RAX;\u000a  undefined8 uVar5;\u000a  time_t tVar6;\u000a  char *__s2;\u000a  ulong uVar7;\u000a  char *pcVar8;\u000a  ssize_t sVar9;\u000a  int *piVar10;\u000a  uint *puVar11;\u000a  __off_t _Var12;\u000a  bool bVar13;\u000a  FILE *n_00;\u000a  FILE *pFVar14;\u000a  uchar *data;\u000a  FILE *size;\u000a  off_t *poVar15;\u000a  FILE *pFVar16;\u000a  undefined8 in_stack_00000008;\u000a  long in_stack_00000010;\u000a  char pass_string [7];\u000a  char *previous_human_offset;\u000a  char offset_buf [652];\u000a  char size_buf [652];\u000a  char previous_offset_buf [652];\u000a  undefined8 uVar17;\u000a  byte local_858;\u000a  FILE *local_840;\u000a  char local_82f [7];\u000a  char *local_828;\u000a  off_t *local_820;\u000a  long local_818;\u000a  time_t local_810;\u000a  FILE *local_808;\u000a  randread_source *local_800;\u000a  randread_source *local_7f8;\u000a  uint *local_7f0;\u000a  char local_7e8 [656];\u000a  char local_558 [656];\u000a  char local_2c8 [664];\u000a  \u000a  st = (stat *)((ulong)st & 0xffffffff);\u000a  local_840 = s->source;\u000a  local_820 = sizep;\u000a  local_800 = s;\u000a  local_7f8 = (randread_source *)n;\u000a  iVar3 = getpagesize();\u000a  _Var2 = periodic_pattern();\u000a  local_808 = (FILE *)0x10000;\u000a  if (_Var2 != false) {\u000a    local_808 = (FILE *)0xf000;\u000a  }\u000a  __n = (((ulong)local_808 | 2) / 3) * 3;\u000a  ptr = xmalloc(((long)iVar3 - 1U) + __n);\u000a  buf = (uchar *)ptr_align(ptr,(long)iVar3);\u000a  bVar13 = local_840 < local_808 && 0 < (long)local_840;\u000a  if (local_840 >= local_808 || 0 >= (long)local_840) {\u000a    direct_mode(st,1);\u000a  }\u000a  _Var2 = dorewind(st);\u000a  poVar15 = local_820;\u000a  if (_Var2 == false) {\u000a    puVar11 = (uint *)__errno_location();\u000a    uVar4 = *puVar11;\u000a    uVar5 = dcgettext(0,"%s: cannot rewind",5);\u000a    error(0,(ulong)uVar4,uVar5);\u000a    bVar13 = true;\u000a    local_858 = 0;\u000a  }\u000a  else {\u000a    if ((int)k < 0) {\u000a      data = (uchar *)0x0;\u000a    }\u000a    else {\u000a      known((off_t)local_840);\u000a      fillpattern((uchar *)(k & 0xffffffff),(size_t)buf);\u000a      data = buf;\u000a    }\u000a    passname(data,local_82f);\u000a    local_818 = extraout_RAX;\u000a    if (in_stack_00000010 != 0) {\u000a      uVar17 = 0x402edd;\u000a      uVar5 = dcgettext(0,"%s: pass %lu/%lu (%s)...",5);\u000a      error(0,0,uVar5,poVar15,in_stack_00000008,in_stack_00000010,local_82f,uVar17);\u000a      tVar6 = time((time_t *)0x0);\u000a      local_818 = tVar6 + 5;\u000a    }\u000a    local_810 = 0;\u000a    n_00 = (FILE *)0x0;\u000a    pcVar8 = \u000a             "In the case of ext3 file systems, the above disclaimer applies\u005cn(and shred is thus of limited effectiveness) only in data=journal mode,\u005cnwhich journals file data in addition to just metadata.  In both the\u005cndata=ordered (default) and data=writeback modes, shred works as usual.\u005cnExt3 journaling modes can be changed by adding the data=something option\u005cnto the mount options for a particular file system in the /etc/fstab file,\u005cnas documented in the mount man page (man mount).\u005cn\u005cn"\u000a             + 0x1d7;\u000a    bVar1 = 0;\u000a    do {\u000a      do {\u000a        do {\u000a          local_828 = pcVar8;\u000a          _Var2 = known((off_t)local_840);\u000a          size = local_808;\u000a          if (((_Var2 != false) &&\u000a              (pFVar16 = (FILE *)((long)local_840 - (long)n_00), size = local_808,\u000a              pFVar16 < local_808)) &&\u000a             (((long)local_840 < (long)n_00 || (size = pFVar16, pFVar16 == (FILE *)0x0)))) {\u000a            iVar3 = dosync((char *)st);\u000a            if (iVar3 == 0) {\u000a              bVar13 = false;\u000a              local_858 = bVar1;\u000a            }\u000a            else {\u000a              piVar10 = __errno_location();\u000a              bVar13 = *piVar10 != 5;\u000a              local_858 = 1;\u000a              if (bVar13) {\u000a                local_858 = bVar1;\u000a              }\u000a            }\u000a            goto LAB_004033d2;\u000a          }\u000a          if ((int)k < 0) {\u000a            randread(local_7f8,buf,(size_t)size);\u000a          }\u000a          if (size == (FILE *)0x0) {\u000a            pFVar16 = (FILE *)0x0;\u000a            local_858 = bVar1;\u000a          }\u000a          else {\u000a            pFVar16 = (FILE *)0x0;\u000a            local_858 = bVar1;\u000a            do {\u000a              sVar9 = write((int)st,buf + (long)pFVar16,(size_t)((long)size - (long)pFVar16));\u000a              if (sVar9 < 1) {\u000a                if ((_Var2 == false) &&\u000a                   ((sVar9 == 0 || (piVar10 = __errno_location(), *piVar10 == 0x1c)))) {\u000a                  if (pFVar16 <= (FILE *)(0x7fffffffffffffffU - (long)n_00)) {\u000a                    local_840 = (FILE *)((long)&n_00->_flags + (long)&pFVar16->_flags);\u000a                    local_800->source = local_840;\u000a                  }\u000a                  break;\u000a                }\u000a                puVar11 = (uint *)__errno_location();\u000a                uVar4 = *puVar11;\u000a                if ((bVar13) || (*puVar11 != 0x16)) {\u000a                  local_7f0 = puVar11;\u000a                  uVar5 = dcgettext(0,"%s: error writing at offset %s",5);\u000a                  pcVar8 = umaxtostr((long)&n_00->_flags + (long)&pFVar16->_flags,local_7e8);\u000a                  poVar15 = local_820;\u000a                  error(0,(ulong)uVar4,uVar5,local_820,pcVar8);\u000a                  if (((byte)(uVar4 != 5 | _Var2 ^ 1U) != 0) ||\u000a                     (pFVar14 = (FILE *)((ulong)pFVar16 | 0x1ff), size <= pFVar14))\u000a                  goto LAB_004033c0;\u000a                  _Var12 = lseek((int)st,(long)&pFVar14->_flags + (long)&n_00->_flags + 1,0);\u000a                  if (_Var12 == -1) {\u000a                    uVar4 = *local_7f0;\u000a                    uVar5 = dcgettext(0,"%s: lseek failed",5);\u000a                    uVar7 = (ulong)uVar4;\u000a                    goto LAB_004033b5;\u000a                  }\u000a                  sVar9 = (long)pFVar14 + (1 - (long)pFVar16);\u000a                  local_858 = 1;\u000a                }\u000a                else {\u000a                  direct_mode(st,0);\u000a                  bVar13 = true;\u000a                  sVar9 = 0;\u000a                }\u000a              }\u000a              pFVar16 = (FILE *)((long)&pFVar16->_flags + sVar9);\u000a            } while (pFVar16 < size);\u000a          }\u000a          if ((FILE *)(0x7fffffffffffffffU - (long)n_00) < pFVar16) {\u000a            uVar5 = dcgettext(0,"%s: file too large",5);\u000a            uVar7 = 0;\u000aLAB_004033b5:\u000a            error(0,uVar7,uVar5);\u000a            goto LAB_004033c0;\u000a          }\u000a          n_00 = (FILE *)((long)&pFVar16->_flags + (long)&n_00->_flags);\u000a          pcVar8 = local_828;\u000a          bVar1 = local_858;\u000a        } while (((in_stack_00000010 == 0) ||\u000a                 (((n_00 != local_840 || (*local_828 == 0)) &&\u000a                  (local_810 = time((time_t *)0x0), pcVar8 = local_828, bVar1 = local_858,\u000a                  local_810 < local_818)))) ||\u000a                ((__s2 = human_readable((uintmax_t)n_00,local_7e8,0x1b2,1), n_00 != local_840 &&\u000a                 (iVar3 = strcmp(local_828,__s2), pcVar8 = local_828, bVar1 = local_858, iVar3 == 0)\u000a                 )));\u000a        _Var2 = known((off_t)local_840);\u000a        if (_Var2 == false) {\u000a          uVar5 = dcgettext(0,"%s: pass %lu/%lu (%s)...%s",5);\u000a          error(0,0,uVar5,poVar15,in_stack_00000008,in_stack_00000010,local_82f,__s2);\u000a        }\u000a        else {\u000a          if (local_840 == (FILE *)0x0) {\u000a            uVar7 = 100;\u000a          }\u000a          else {\u000a            if (n_00 < (FILE *)0x28f5c28f5c28f5d) {\u000a              uVar7 = (ulong)((long)n_00 * 100) / (ulong)local_840;\u000a            }\u000a            else {\u000a              uVar7 = (ulong)n_00 /\u000a                      ((long)local_840 / 100 + ((long)local_840 >> 0x3f) +\u000a                      SUB168(SEXT816((long)local_840) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0));\u000a            }\u000a          }\u000a          pcVar8 = human_readable((uintmax_t)local_840,local_558,0x1b0,1);\u000a          if (n_00 == local_840) {\u000a            __s2 = pcVar8;\u000a          }\u000a          uVar5 = dcgettext(0,"%s: pass %lu/%lu (%s)...%s/%s %d%%",5);\u000a          poVar15 = local_820;\u000a          error(0,0,uVar5,local_820,in_stack_00000008,in_stack_00000010,local_82f,__s2,pcVar8,uVar7)\u000a          ;\u000a        }\u000a        __strcpy_chk(local_2c8,__s2,0x28c);\u000a        local_818 = local_810 + 5;\u000a        iVar3 = dosync((char *)st);\u000a        pcVar8 = local_2c8;\u000a        bVar1 = local_858;\u000a      } while (iVar3 == 0);\u000a      piVar10 = __errno_location();\u000a      local_828 = local_2c8;\u000a      pcVar8 = local_2c8;\u000a      bVar1 = 1;\u000a    } while (*piVar10 == 5);\u000aLAB_004033c0:\u000a    bVar13 = true;\u000a  }\u000aLAB_004033d2:\u000a  memset(buf,0,__n);\u000a  free(ptr);\u000a  uVar4 = 0xffffffff;\u000a  if (!bVar13) {\u000a    uVar4 = (uint)local_858;\u000a  }\u000a  return (int)uVar4;\u000a}\u000a\u000a
p1662
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x848\nMOV qword ptr [0x80 + RSP],R9\nMOV EBP,R8D\nMOV qword ptr [RSP + 0x58],RDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV R12D,EDI\nMOV qword ptr [RSP + 0x78],RCX\nMOV R15,qword ptr [RCX]\nCALL 0x00401cf0\nMOVSXD RBX,EAX\nMOV dword ptr [RSP + 0x44],EBP\nMOV EDI,EBP\nCALL 0x00403460\nTEST AL,AL\nMOV EAX,0xf000\nMOV R14D,0x10000\nCMOVNZ R14,RAX\nMOV RAX,R14\nOR RAX,0x2\nMOV RCX,-0x5555555555555555\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nMOV qword ptr [RSP + 0x28],RAX\nLEA RDI,[RBX + RAX*0x1 + -0x1]\nCALL 0x00407620\nMOV qword ptr [RSP + 0x30],RAX\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x004034a0\nMOV R13,RAX\nTEST R15,R15\nSETG AL\nMOV qword ptr [RSP + 0x38],R15\nMOV qword ptr [RSP + 0x70],R14\nCMP R15,R14\nSETC CL\nAND CL,AL\nMOV byte ptr [RSP + 0xd],CL\nJNZ 0x00402e0d\nMOV ESI,0x1\nMOV EDI,R12D\nCALL 0x004034c0\nMOV dword ptr [RSP + 0x1c],R12D\nMOV EDI,R12D\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00403510\nTEST AL,AL\nJZ 0x00402e71\nMOV RBP,qword ptr [0x888 + RSP]\nMOV R15D,dword ptr [RSP + 0x44]\nTEST R15D,R15D\nMOV R14,qword ptr [RSP + 0x58]\nMOV R12,qword ptr [RSP + 0x28]\nJS 0x00402eb3\nMOV RBX,qword ptr [RSP + 0x38]\nMOV RDI,RBX\nCALL 0x00403580\nTEST AL,AL\nMOV RDX,R12\nCMOVNZ RDX,RBX\nCMP RBX,R12\nCMOVNC RDX,R12\nMOV EDI,R15D\nMOV RSI,R13\nCALL 0x00403590\nLEA RSI,[RSP + 0x49]\nMOV RDI,R13\nJMP 0x00402eba\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4097f0\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x00401c70\nMOV R14B,0x1\nMOV RBX,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x30]\nJMP 0x004033d2\nLEA RSI,[RSP + 0x49]\nXOR EDI,EDI\nCALL 0x00403640\nMOV RBX,qword ptr [0x880 + RSP]\nTEST RBP,RBP\nJZ 0x00402f13\nXOR EDI,EDI\nMOV ESI,0x409802\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nSUB RSP,0x8\nLEA R10,[RSP + 0x51]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nMOV R8,RBX\nMOV R9,RBP\nPUSH R10\nCALL 0x00401c70\nADD RSP,0x10\nXOR EDI,EDI\nCALL 0x00401b40\nADD RAX,0x5\nJMP 0x00402f13\nMOV qword ptr [RSP + 0x60],RAX\nMOV EAX,0x4093fa\nMOV qword ptr [RSP + 0x50],RAX\nXOR ECX,ECX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x68],RAX\nXOR EBX,EBX\nMOV EBP,dword ptr [RSP + 0x1c]\nMOV R15,qword ptr [RSP + 0x38]\nJMP 0x00403120\nMOV qword ptr [RSP + 0x50],R12\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403120\nMOV EDX,0x1b2\nMOV ECX,0x1\nMOV R8D,0x1\nMOV RDI,RBX\nLEA RSI,[0x90 + RSP]\nCALL 0x00404110\nMOV R12,RAX\nCMP RBX,R15\nJZ 0x00402f88\nMOV RDI,qword ptr [RSP + 0x50]\nMOV RSI,R12\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x00403004\nMOV RDI,R15\nCALL 0x00403580\nTEST AL,AL\nMOV qword ptr [RSP + 0x10],RBX\nJZ 0x00402fbb\nTEST R15,R15\nJZ 0x00403012\nMOV RAX,0x28f5c28f5c28f5c\nCMP RBX,RAX\nJA 0x0040301a\nIMUL RAX,RBX,0x64\nXOR EDX,EDX\nDIV R15\nJMP 0x00403046\nXOR EDI,EDI\nMOV ESI,0x40985e\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EAX,0x0\nMOV RDX,RCX\nMOV RCX,R14\nMOV R8,qword ptr [0x880 + RSP]\nMOV R9,qword ptr [0x888 + RSP]\nPUSH R12\nLEA RBP,[RSP + 0x51]\nPUSH RBP\nCALL 0x00401c70\nADD RSP,0x10\nJMP 0x004030bf\nMOV RCX,qword ptr [RSP + 0x20]\nMOV EBP,dword ptr [RSP + 0x1c]\nJMP 0x00403120\nMOV R14D,0x64\nJMP 0x00403049\nMOV RAX,R15\nMOV RCX,-0x5c28f5c28f5c28f5\nIMUL RCX\nMOV RCX,RDX\nADD RCX,R15\nMOV RAX,RCX\nSHR RAX,0x3f\nSAR RCX,0x6\nADD RCX,RAX\nXOR EDX,EDX\nMOV RAX,RBX\nDIV RCX\nMOV R14,RAX\nMOV EDX,0x1b0\nMOV ECX,0x1\nMOV R8D,0x1\nMOV RDI,R15\nLEA RSI,[0x320 + RSP]\nCALL 0x00404110\nMOV RBP,RAX\nCMP RBX,R15\nCMOVZ R12,RBP\nXOR EDI,EDI\nMOV ESI,0x409879\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EAX,0x0\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x58]\nMOV R8,qword ptr [0x880 + RSP]\nMOV R9,qword ptr [0x888 + RSP]\nPUSH R14\nMOV R14,RCX\nPUSH RBP\nPUSH R12\nLEA RBP,[RSP + 0x61]\nPUSH RBP\nCALL 0x00401c70\nADD RSP,0x20\nMOV RSI,R12\nMOV EDX,0x28c\nLEA R12,[0x5b0 + RSP]\nMOV RDI,R12\nCALL 0x00401c00\nMOV RAX,qword ptr [RSP + 0x68]\nLEA RAX,[RAX + 0x5]\nMOV qword ptr [RSP + 0x60],RAX\nMOV EBP,dword ptr [RSP + 0x1c]\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00403690\nTEST EAX,EAX\nJZ 0x00402f3b\nCALL 0x004018a0\nMOV CL,0x1\nCMP dword ptr [RAX],0x5\nMOV qword ptr [RSP + 0x50],R12\nMOV RBX,qword ptr [RSP + 0x10]\nJNZ 0x004033c0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x20],RCX\nJMP 0x00403160\nMOV RAX,0x7fffffffffffffff\nMOV RBX,qword ptr [RSP + 0x10]\nSUB RAX,RBX\nCMP R15,RAX\nJA 0x00403318\nLEA RCX,[R15 + RBX*0x1]\nMOV RAX,qword ptr [RSP + 0x78]\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RAX],RCX\nJMP 0x00403318\nMOV qword ptr [RSP + 0x10],RBX\nMOV RDI,R15\nCALL 0x00403580\nMOV byte ptr [RSP + 0xe],AL\nTEST AL,AL\nMOV R12,qword ptr [RSP + 0x70]\nJZ 0x004031a3\nMOV RAX,R15\nSUB RAX,qword ptr [RSP + 0x10]\nMOV R12,qword ptr [RSP + 0x70]\nCMP RAX,R12\nJNC 0x004031a3\nCMP R15,qword ptr [RSP + 0x10]\nJL 0x0040340c\nTEST RAX,RAX\nMOV R12,RAX\nJZ 0x0040340c\nCMP dword ptr [RSP + 0x44],0x0\nJNS 0x004031bd\nMOV RDI,qword ptr [0x80 + RSP]\nMOV RSI,R13\nMOV RDX,R12\nCALL 0x004067b0\nMOV qword ptr [RSP + 0x38],R15\nTEST R12,R12\nJZ 0x00403310\nMOV AL,byte ptr [RSP + 0xe]\nXOR AL,0x1\nMOV byte ptr [RSP + 0xf],AL\nXOR R15D,R15D\nNOP dword ptr [RAX + RAX*0x1]\nLEA RSI,[R13 + R15*0x1]\nMOV RDX,R12\nSUB RDX,R15\nMOV EDI,EBP\nCALL 0x00401950\nMOV RBX,RAX\nTEST RBX,RBX\nJG 0x004032f5\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040321c\nTEST RBX,RBX\nJZ 0x00403127\nCALL 0x004018a0\nCMP dword ptr [RAX],0x1c\nJZ 0x00403127\nCALL 0x004018a0\nMOV EBX,dword ptr [RAX]\nTEST byte ptr [RSP + 0xd],0x1\nJNZ 0x00403250\nCMP dword ptr [RAX],0x16\nJNZ 0x00403250\nXOR ESI,ESI\nMOV EDI,EBP\nCALL 0x004034c0\nMOV byte ptr [RSP + 0xd],0x1\nXOR EBX,EBX\nJMP 0x004032f5\nMOV qword ptr [0x88 + RSP],RAX\nXOR EDI,EDI\nMOV ESI,0x40981b\nMOV EDX,0x5\nCALL 0x004019b0\nMOV R14,R13\nMOV R13,RAX\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RDI,[R15 + RAX*0x1]\nLEA RSI,[0x90 + RSP]\nCALL 0x004049e0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R13\nMOV R13,R14\nMOV R14,qword ptr [RSP + 0x58]\nMOV RCX,R14\nMOV R8,RBP\nCALL 0x00401c70\nCMP EBX,0x5\nSETNZ AL\nOR AL,byte ptr [RSP + 0xf]\nJNZ 0x004033c0\nMOV RBX,R15\nOR RBX,0x1ff\nCMP RBX,R12\nJNC 0x004033c0\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RSI,[RBX + RAX*0x1 + 0x1]\nXOR EDX,EDX\nMOV EBP,dword ptr [RSP + 0x1c]\nMOV EDI,EBP\nCALL 0x00401a50\nCMP RAX,-0x1\nJZ 0x00403375\nINC RBX\nSUB RBX,R15\nMOV AL,0x1\nMOV qword ptr [RSP + 0x20],RAX\nADD R15,RBX\nCMP R12,R15\nJA 0x004031e0\nJMP 0x00403313\nXOR R15D,R15D\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RAX,0x7fffffffffffffff\nSUB RAX,RBX\nCMP RAX,R15\nJC 0x0040339b\nADD RBX,R15\nMOV RAX,qword ptr [0x888 + RSP]\nTEST RAX,RAX\nMOV R15,qword ptr [RSP + 0x38]\nJZ 0x00403160\nCMP RBX,R15\nJNZ 0x00403356\nMOV RAX,qword ptr [RSP + 0x50]\nCMP byte ptr [RAX],0x0\nJNZ 0x00402f4f\nXOR EDI,EDI\nCALL 0x00401b40\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x68],RCX\nCMP qword ptr [RSP + 0x60],RAX\nJG 0x00403160\nJMP 0x00402f4f\nMOV RAX,qword ptr [0x88 + RSP]\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40983a\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nJMP 0x004033b5\nXOR EDI,EDI\nMOV ESI,0x40984b\nMOV EDX,0x5\nCALL 0x004019b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401c70\nMOV R14B,0x1\nMOV RBX,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x30]\nMOV RBP,qword ptr [RSP + 0x20]\nXOR ESI,ESI\nMOV RDI,R13\nMOV RDX,RBX\nCALL 0x00401a80\nMOV RDI,R15\nCALL 0x00401880\nAND BPL,0x1\nMOVZX ECX,BPL\nTEST R14B,R14B\nMOV EAX,0xffffffff\nCMOVZ EAX,ECX\nADD RSP,0x848\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00403690\nTEST EAX,EAX\nMOV RBX,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x30]\nJZ 0x00403440\nCALL 0x004018a0\nCMP dword ptr [RAX],0x5\nSETNZ R14B\nMOV AL,0x1\nMOV RCX,qword ptr [RSP + 0x20]\nJZ 0x0040343b\nMOV EAX,ECX\nMOV BPL,AL\nJMP 0x004033d2\nXOR R14D,R14D\nJMP 0x004033cd\n'
p1663
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 48 08 00 00\n4c 89 8c 24 80 00 00 00\n44 89 c5\n48 89 54 24 58\n48 89 74 24 10\n41 89 fc\n48 89 4c 24 78\n4c 8b 39\ne8 6a ef ff ff\n48 63 d8\n89 6c 24 44\n89 ef\ne8 cc 06 00 00\n84 c0\nb8 00 f0 00 00\n41 be 00 00 01 00\n4c 0f 45 f0\n4c 89 f0\n48 83 c8 02\n48 b9 ab aa aa aa aa aa aa aa\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n48 89 44 24 28\n48 8d 7c 03 ff\ne8 51 48 00 00\n48 89 44 24 30\n48 89 c7\n48 89 de\ne8 c1 06 00 00\n49 89 c5\n4d 85 ff\n0f 9f c0\n4c 89 7c 24 38\n4c 89 74 24 70\n4d 39 f7\n0f 92 c1\n20 c1\n88 4c 24 0d\n75 0d\nbe 01 00 00 00\n44 89 e7\ne8 b3 06 00 00\n44 89 64 24 1c\n44 89 e7\n48 8b 74 24 10\ne8 f1 06 00 00\n84 c0\n74 4e\n48 8b ac 24 88 08 00 00\n44 8b 7c 24 44\n45 85 ff\n4c 8b 74 24 58\n4c 8b 64 24 28\n78 74\n48 8b 5c 24 38\n48 89 df\ne8 34 07 00 00\n84 c0\n4c 89 e2\n48 0f 45 d3\n4c 39 e3\n49 0f 43 d4\n44 89 ff\n4c 89 ee\ne8 29 07 00 00\n48 8d 74 24 49\n4c 89 ef\neb 49\ne8 2a ea ff ff\n8b 18\n31 ed\n31 ff\nbe f0 97 40 00\nba 05 00 00 00\ne8 25 eb ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\n48 8b 4c 24 58\ne8 cf ed ff ff\n41 b6 01\n48 8b 5c 24 28\n4c 8b 7c 24 30\ne9 1f 05 00 00\n48 8d 74 24 49\n31 ff\ne8 81 07 00 00\n48 8b 9c 24 80 08 00 00\n48 85 ed\n74 47\n31 ff\nbe 02 98 40 00\nba 05 00 00 00\ne8 d3 ea ff ff\n48 89 c1\n48 83 ec 08\n4c 8d 54 24 51\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\n49 89 d8\n49 89 e9\n41 52\ne8 6e ed ff ff\n48 83 c4 10\n31 ff\ne8 33 ec ff ff\n48 83 c0 05\neb 00\n48 89 44 24 60\nb8 fa 93 40 00\n48 89 44 24 50\n31 c9\n31 c0\n48 89 44 24 68\n31 db\n8b 6c 24 1c\n4c 8b 7c 24 38\ne9 e5 01 00 00\n4c 89 64 24 50\n48 8b 4c 24 20\n48 8b 5c 24 10\ne9 d1 01 00 00\nba b2 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\n48 89 df\n48 8d b4 24 90 00 00 00\ne8 a1 11 00 00\n49 89 c4\n4c 39 fb\n74 11\n48 8b 7c 24 50\n4c 89 e6\ne8 9c eb ff ff\n85 c0\n74 7c\n4c 89 ff\ne8 f0 05 00 00\n84 c0\n48 89 5c 24 10\n74 22\n4d 85 ff\n74 74\n48 b8 5c 8f c2 f5 28 5c 8f 02\n48 39 c3\n77 6d\n48 6b c3 64\n31 d2\n49 f7 f7\ne9 8b 00 00 00\n31 ff\nbe 5e 98 40 00\nba 05 00 00 00\ne8 e4 e9 ff ff\n48 89 c1\n31 ff\n31 f6\nb8 00 00 00 00\n48 89 ca\n4c 89 f1\n4c 8b 84 24 80 08 00 00\n4c 8b 8c 24 88 08 00 00\n41 54\n48 8d 6c 24 51\n55\ne8 75 ec ff ff\n48 83 c4 10\ne9 bb 00 00 00\n48 8b 4c 24 20\n8b 6c 24 1c\ne9 0e 01 00 00\n41 be 64 00 00 00\neb 2f\n4c 89 f8\n48 b9 0b d7 a3 70 3d 0a d7 a3\n48 f7 e9\n48 89 d1\n4c 01 f9\n48 89 c8\n48 c1 e8 3f\n48 c1 f9 06\n48 01 c1\n31 d2\n48 89 d8\n48 f7 f1\n49 89 c6\nba b0 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\n4c 89 ff\n48 8d b4 24 20 03 00 00\ne8 a7 10 00 00\n48 89 c5\n4c 39 fb\n4c 0f 44 e5\n31 ff\nbe 79 98 40 00\nba 05 00 00 00\ne8 2c e9 ff ff\n48 89 c1\n31 ff\n31 f6\nb8 00 00 00 00\n48 89 ca\n48 8b 4c 24 58\n4c 8b 84 24 80 08 00 00\n4c 8b 8c 24 88 08 00 00\n41 56\n49 89 ce\n55\n41 54\n48 8d 6c 24 61\n55\ne8 b5 eb ff ff\n48 83 c4 20\n4c 89 e6\nba 8c 02 00 00\n4c 8d a4 24 b0 05 00 00\n4c 89 e7\ne8 29 eb ff ff\n48 8b 44 24 68\n48 8d 40 05\n48 89 44 24 60\n8b 6c 24 1c\n89 ef\n4c 89 f6\ne8 9d 05 00 00\n85 c0\n0f 84 40 fe ff ff\ne8 a0 e7 ff ff\nb1 01\n83 38 05\n4c 89 64 24 50\n48 8b 5c 24 10\n0f 85 ab 02 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 20\neb 39\n48 b8 ff ff ff ff ff ff ff 7f\n48 8b 5c 24 10\n48 29 d8\n49 39 c7\n0f 87 d6 01 00 00\n49 8d 0c 1f\n48 8b 44 24 78\n48 89 4c 24 38\n48 89 08\ne9 c0 01 00 00\n48 89 5c 24 10\n4c 89 ff\ne8 13 04 00 00\n88 44 24 0e\n84 c0\n4c 8b 64 24 70\n74 29\n4c 89 f8\n48 2b 44 24 10\n4c 8b 64 24 70\n4c 39 e0\n73 17\n4c 3b 7c 24 10\n0f 8c 75 02 00 00\n48 85 c0\n49 89 c4\n0f 84 69 02 00 00\n83 7c 24 44 00\n79 13\n48 8b bc 24 80 00 00 00\n4c 89 ee\n4c 89 e2\ne8 f3 35 00 00\n4c 89 7c 24 38\n4d 85 e4\n0f 84 45 01 00 00\n8a 44 24 0e\n34 01\n88 44 24 0f\n45 31 ff\n0f 1f 84 00 00 00 00 00\n4b 8d 74 3d 00\n4c 89 e2\n4c 29 fa\n89 ef\ne8 5e e7 ff ff\n48 89 c3\n48 85 db\n0f 8f f7 00 00 00\n80 7c 24 0e 00\n75 17\n48 85 db\n0f 84 19 ff ff ff\ne8 8d e6 ff ff\n83 38 1c\n0f 84 0b ff ff ff\ne8 7f e6 ff ff\n8b 18\nf6 44 24 0d 01\n75 26\n83 38 16\n75 21\n31 f6\n89 ef\ne8 88 02 00 00\nc6 44 24 0d 01\n31 db\ne9 b1 00 00 00\n48 89 84 24 88 00 00 00\n31 ff\nbe 1b 98 40 00\nba 05 00 00 00\ne8 47 e7 ff ff\n4d 89 ee\n49 89 c5\n48 8b 44 24 10\n49 8d 3c 07\n48 8d b4 24 90 00 00 00\ne8 5b 17 00 00\n48 89 c5\n31 ff\n31 c0\n89 de\n4c 89 ea\n4d 89 f5\n4c 8b 74 24 58\n4c 89 f1\n49 89 e8\ne8 cc e9 ff ff\n83 fb 05\n0f 95 c0\n0a 44 24 0f\n0f 85 0c 01 00 00\n4c 89 fb\n48 81 cb ff 01 00 00\n4c 39 e3\n0f 83 f9 00 00 00\n48 8b 44 24 10\n48 8d 74 03 01\n31 d2\n8b 6c 24 1c\n89 ef\ne8 72 e7 ff ff\n48 83 f8 ff\n0f 84 8d 00 00 00\n48 ff c3\n4c 29 fb\nb0 01\n48 89 44 24 20\n49 01 df\n4d 39 fc\n0f 87 df fe ff ff\neb 10\n45 31 ff\n48 8b 5c 24 10\n48 b8 ff ff ff ff ff ff ff 7f\n48 29 d8\n4c 39 f8\n72 71\n4c 01 fb\n48 8b 84 24 88 08 00 00\n48 85 c0\n4c 8b 7c 24 38\n0f 84 1d fe ff ff\n4c 39 fb\n75 0e\n48 8b 44 24 50\n80 38 00\n0f 85 f9 fb ff ff\n31 ff\ne8 e3 e7 ff ff\n48 89 c1\n48 89 4c 24 68\n48 39 44 24 60\n0f 8f f0 fd ff ff\ne9 da fb ff ff\n48 8b 84 24 88 00 00 00\n8b 18\n31 ff\nbe 3a 98 40 00\nba 05 00 00 00\ne8 20 e6 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\neb 1a\n31 ff\nbe 4b 98 40 00\nba 05 00 00 00\ne8 04 e6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 b0 e8 ff ff\n41 b6 01\n48 8b 5c 24 28\n4c 8b 7c 24 30\n48 8b 6c 24 20\n31 f6\n4c 89 ef\n48 89 da\ne8 a1 e6 ff ff\n4c 89 ff\ne8 99 e4 ff ff\n40 80 e5 01\n40 0f b6 cd\n45 84 f6\nb8 ff ff ff ff\n0f 44 c1\n48 81 c4 48 08 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n89 ef\n4c 89 f6\ne8 7a 02 00 00\n85 c0\n48 8b 5c 24 28\n4c 8b 7c 24 30\n74 1c\ne8 77 e4 ff ff\n83 38 05\n41 0f 95 c6\nb0 01\n48 8b 4c 24 20\n74 02\n89 c8\n40 88 c5\neb 92\n45 31 f6\neb 88\n'
p1664
S'.text:0000000000402d50\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d59\n.text:0000000000402d5a\n.text:0000000000402d61\n.text:0000000000402d69\n.text:0000000000402d6c\n.text:0000000000402d71\n.text:0000000000402d76\n.text:0000000000402d79\n.text:0000000000402d7e\n.text:0000000000402d81\n.text:0000000000402d86\n.text:0000000000402d89\n.text:0000000000402d8d\n.text:0000000000402d8f\n.text:0000000000402d94\n.text:0000000000402d96\n.text:0000000000402d9b\n.text:0000000000402da1\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402dac\n.text:0000000000402db6\n.text:0000000000402db9\n.text:0000000000402dbc\n.text:0000000000402dc0\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dcf\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dda\n.text:0000000000402ddf\n.text:0000000000402de2\n.text:0000000000402de5\n.text:0000000000402de8\n.text:0000000000402ded\n.text:0000000000402df2\n.text:0000000000402df5\n.text:0000000000402df8\n.text:0000000000402dfa\n.text:0000000000402dfe\n.text:0000000000402e00\n.text:0000000000402e05\n.text:0000000000402e08\n.text:0000000000402e0d\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e21\n.text:0000000000402e23\n.text:0000000000402e2b\n.text:0000000000402e30\n.text:0000000000402e33\n.text:0000000000402e38\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4c\n.text:0000000000402e4e\n.text:0000000000402e51\n.text:0000000000402e55\n.text:0000000000402e58\n.text:0000000000402e5c\n.text:0000000000402e5f\n.text:0000000000402e62\n.text:0000000000402e67\n.text:0000000000402e6c\n.text:0000000000402e6f\n.text:0000000000402e71\n.text:0000000000402e76\n.text:0000000000402e78\n.text:0000000000402e7a\n.text:0000000000402e7c\n.text:0000000000402e81\n.text:0000000000402e86\n.text:0000000000402e8b\n.text:0000000000402e8e\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e97\n.text:0000000000402e9c\n.text:0000000000402ea1\n.text:0000000000402ea4\n.text:0000000000402ea9\n.text:0000000000402eae\n.text:0000000000402eb3\n.text:0000000000402eb8\n.text:0000000000402eba\n.text:0000000000402ebf\n.text:0000000000402ec7\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ece\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee4\n.text:0000000000402ee9\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402eef\n.text:0000000000402ef2\n.text:0000000000402ef5\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402efd\n.text:0000000000402f02\n.text:0000000000402f06\n.text:0000000000402f08\n.text:0000000000402f0d\n.text:0000000000402f11\n.text:0000000000402f13\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f22\n.text:0000000000402f24\n.text:0000000000402f26\n.text:0000000000402f2b\n.text:0000000000402f2d\n.text:0000000000402f31\n.text:0000000000402f36\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f45\n.text:0000000000402f4a\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5f\n.text:0000000000402f62\n.text:0000000000402f6a\n.text:0000000000402f6f\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f77\n.text:0000000000402f7c\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f90\n.text:0000000000402f92\n.text:0000000000402f97\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9e\n.text:0000000000402fa8\n.text:0000000000402fab\n.text:0000000000402fad\n.text:0000000000402fb1\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fbb\n.text:0000000000402fbd\n.text:0000000000402fc2\n.text:0000000000402fc7\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd8\n.text:0000000000402fdb\n.text:0000000000402fde\n.text:0000000000402fe6\n.text:0000000000402fee\n.text:0000000000402ff0\n.text:0000000000402ff5\n.text:0000000000402ff6\n.text:0000000000402ffb\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403009\n.text:000000000040300d\n.text:0000000000403012\n.text:0000000000403018\n.text:000000000040301a\n.text:000000000040301d\n.text:0000000000403027\n.text:000000000040302a\n.text:000000000040302d\n.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403037\n.text:000000000040303b\n.text:000000000040303e\n.text:0000000000403040\n.text:0000000000403043\n.text:0000000000403046\n.text:0000000000403049\n.text:000000000040304e\n.text:0000000000403053\n.text:0000000000403059\n.text:000000000040305c\n.text:0000000000403064\n.text:0000000000403069\n.text:000000000040306c\n.text:000000000040306f\n.text:0000000000403073\n.text:0000000000403075\n.text:000000000040307a\n.text:000000000040307f\n.text:0000000000403084\n.text:0000000000403087\n.text:0000000000403089\n.text:000000000040308b\n.text:0000000000403090\n.text:0000000000403093\n.text:0000000000403098\n.text:00000000004030a0\n.text:00000000004030a8\n.text:00000000004030aa\n.text:00000000004030ad\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030b6\n.text:00000000004030bb\n.text:00000000004030bf\n.text:00000000004030c2\n.text:00000000004030c7\n.text:00000000004030cf\n.text:00000000004030d2\n.text:00000000004030d7\n.text:00000000004030dc\n.text:00000000004030e0\n.text:00000000004030e5\n.text:00000000004030e9\n.text:00000000004030eb\n.text:00000000004030ee\n.text:00000000004030f3\n.text:00000000004030f5\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403102\n.text:0000000000403105\n.text:000000000040310a\n.text:000000000040310f\n.text:0000000000403115\n.text:0000000000403120\n.text:0000000000403125\n.text:0000000000403127\n.text:0000000000403131\n.text:0000000000403136\n.text:0000000000403139\n.text:000000000040313c\n.text:0000000000403142\n.text:0000000000403146\n.text:000000000040314b\n.text:0000000000403150\n.text:0000000000403153\n.text:0000000000403160\n.text:0000000000403165\n.text:0000000000403168\n.text:000000000040316d\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403178\n.text:000000000040317a\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403187\n.text:000000000040318a\n.text:000000000040318c\n.text:0000000000403191\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319d\n.text:00000000004031a3\n.text:00000000004031a8\n.text:00000000004031aa\n.text:00000000004031b2\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031bd\n.text:00000000004031c2\n.text:00000000004031c5\n.text:00000000004031cb\n.text:00000000004031cf\n.text:00000000004031d1\n.text:00000000004031d5\n.text:00000000004031d8\n.text:00000000004031e0\n.text:00000000004031e5\n.text:00000000004031e8\n.text:00000000004031eb\n.text:00000000004031ed\n.text:00000000004031f2\n.text:00000000004031f5\n.text:00000000004031f8\n.text:00000000004031fe\n.text:0000000000403203\n.text:0000000000403205\n.text:0000000000403208\n.text:000000000040320e\n.text:0000000000403213\n.text:0000000000403216\n.text:000000000040321c\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403228\n.text:000000000040322a\n.text:000000000040322d\n.text:000000000040322f\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403238\n.text:000000000040323d\n.text:000000000040323f\n.text:0000000000403250\n.text:0000000000403258\n.text:000000000040325a\n.text:000000000040325f\n.text:0000000000403264\n.text:0000000000403269\n.text:000000000040326c\n.text:000000000040326f\n.text:0000000000403274\n.text:0000000000403278\n.text:0000000000403280\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328a\n.text:000000000040328c\n.text:000000000040328e\n.text:0000000000403291\n.text:0000000000403294\n.text:0000000000403299\n.text:000000000040329c\n.text:000000000040329f\n.text:00000000004032a4\n.text:00000000004032a7\n.text:00000000004032aa\n.text:00000000004032ae\n.text:00000000004032b4\n.text:00000000004032b7\n.text:00000000004032be\n.text:00000000004032c1\n.text:00000000004032c7\n.text:00000000004032cc\n.text:00000000004032d1\n.text:00000000004032d3\n.text:00000000004032d7\n.text:00000000004032d9\n.text:00000000004032de\n.text:00000000004032e2\n.text:00000000004032e8\n.text:00000000004032eb\n.text:00000000004032ee\n.text:00000000004032f0\n.text:00000000004032f5\n.text:00000000004032f8\n.text:00000000004032fb\n.text:0000000000403301\n.text:0000000000403310\n.text:0000000000403313\n.text:0000000000403318\n.text:0000000000403322\n.text:0000000000403325\n.text:0000000000403328\n.text:000000000040332a\n.text:000000000040332d\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333d\n.text:0000000000403343\n.text:0000000000403346\n.text:0000000000403348\n.text:000000000040334d\n.text:0000000000403350\n.text:0000000000403356\n.text:0000000000403358\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403365\n.text:000000000040336a\n.text:0000000000403370\n.text:0000000000403375\n.text:000000000040337d\n.text:000000000040337f\n.text:0000000000403381\n.text:0000000000403386\n.text:000000000040338b\n.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403395\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339b\n.text:000000000040339d\n.text:00000000004033a2\n.text:00000000004033a7\n.text:00000000004033ac\n.text:00000000004033af\n.text:00000000004033b1\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033c0\n.text:00000000004033c3\n.text:00000000004033c8\n.text:00000000004033cd\n.text:00000000004033d2\n.text:00000000004033d4\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033df\n.text:00000000004033e2\n.text:00000000004033e7\n.text:00000000004033eb\n.text:00000000004033ef\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033fa\n.text:0000000000403401\n.text:0000000000403402\n.text:0000000000403404\n.text:0000000000403406\n.text:0000000000403408\n.text:000000000040340a\n.text:000000000040340b\n.text:000000000040340c\n.text:000000000040340e\n.text:0000000000403411\n.text:0000000000403416\n.text:0000000000403418\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403424\n.text:0000000000403429\n.text:000000000040342c\n.text:0000000000403430\n.text:0000000000403432\n.text:0000000000403437\n.text:0000000000403439\n.text:000000000040343b\n.text:000000000040343e\n.text:0000000000403440\n.text:0000000000403443\n'
p1665
tp1666
sS'randread_error'
p1667
(S'\n__stdcall randread_error(void * file_name)\n'
p1668
V\u000avoid randread_error(void *file_name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  iVar2 = exit_failure;\u000a  if (file_name != (void *)0x0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar5 = "%s: read error";\u000a    if (uVar1 == 0) {\u000a      pcVar5 = "%s: end of file";\u000a    }\u000a    uVar4 = dcgettext(0,pcVar5,5);\u000a    pcVar5 = quote((char *)file_name);\u000a    error((ulong)(uint)iVar2,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004069c6\nMOV R14D,dword ptr [0x0060d2c0]\nCALL 0x004018a0\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nMOV EAX,0x40a02a\nMOV ESI,0x40a03a\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004019b0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00405f30\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBP\nMOV RDX,R15\nCALL 0x00401c70\nCALL 0x00401890\n'
p1670
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 85 db\n74 47\n44 8b 35 3a 69 20 00\ne8 15 af ff ff\n8b 28\n85 ed\nb8 2a a0 40 00\nbe 3a a0 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 07 b0 ff ff\n49 89 c7\n48 89 df\ne8 7c f5 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 ee\n4c 89 fa\ne8 aa b2 ff ff\ne8 c5 ae ff ff\n'
p1671
S'.text:0000000000406970\n.text:0000000000406971\n.text:0000000000406973\n.text:0000000000406975\n.text:0000000000406976\n.text:0000000000406977\n.text:000000000040697a\n.text:000000000040697d\n.text:000000000040697f\n.text:0000000000406986\n.text:000000000040698b\n.text:000000000040698d\n.text:000000000040698f\n.text:0000000000406994\n.text:0000000000406999\n.text:000000000040699d\n.text:000000000040699f\n.text:00000000004069a4\n.text:00000000004069a9\n.text:00000000004069ac\n.text:00000000004069af\n.text:00000000004069b4\n.text:00000000004069b7\n.text:00000000004069b9\n.text:00000000004069bc\n.text:00000000004069be\n.text:00000000004069c1\n.text:00000000004069c6\n'
p1672
tp1673
sS'unlink'
p1674
(S'\n__stdcall unlink(char * __name)\n'
p1675
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_0060d040)();\u000a  return iVar1;\u000a}\u000a\u000a
p1676
S'JMP qword ptr [0x0060d040]\n'
p1677
S'ff 25 7a b7 20 00\n'
p1678
S'.plt:00000000004018c0\n'
p1679
tp1680
sS'__do_global_dtors_aux'
p1681
(S'\n__stdcall __do_global_dtors_aux()\n'
p1682
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1683
S'CMP byte ptr [0x0060d368],0x0\nJNZ 0x00401e4a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401db0\nPOP RBP\nMOV byte ptr [0x0060d368],0x1\nRET\n'
p1684
S'80 3d 31 b5 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 1e b5 20 00 01\nf3 c3\n'
p1685
S'.text:0000000000401e30\n.text:0000000000401e37\n.text:0000000000401e39\n.text:0000000000401e3a\n.text:0000000000401e3d\n.text:0000000000401e42\n.text:0000000000401e43\n.text:0000000000401e4a\n'
p1686
tp1687
sS'c_isprint'
p1688
(S'\n__stdcall c_isprint()\n'
p1689
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1690
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1691
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1692
S'.text:0000000000407fc0\n.text:0000000000407fc3\n.text:0000000000407fc6\n.text:0000000000407fc9\n'
p1693
tp1694
sS'_fini'
p1695
(S'\n__stdcall _fini()\n'
p1696
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1697
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1698
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1699
S'.fini:0000000000408570\n.fini:0000000000408574\n.fini:0000000000408578\n'
p1700
tp1701
sS'getpid'
p1702
(S'\n__stdcall getpid()\n'
p1703
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getpid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getpid_0060d090)();\u000a  return _Var1;\u000a}\u000a\u000a
p1704
S'JMP qword ptr [0x0060d090]\n'
p1705
S'ff 25 2a b7 20 00\n'
p1706
S'.plt:0000000000401960\n'
p1707
tp1708
sS'rpl_fcntl'
p1709
(S'\n__stdcall rpl_fcntl()\n'
p1710
V\u000a/* WARNING: Removing unreachable block (ram,0x00407d4b) */\u000a/* WARNING: Removing unreachable block (ram,0x00407db4) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00407d59 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1711
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x00407cdb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00407d36\nCMP EAX,0x28\nJA 0x00407d4b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00407d59\nCMP EAX,0x28\nJA 0x00407db4\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00407dc2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060d4d0],0x0\nJS 0x00407dd3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401940\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00407da4\nCALL 0x004018a0\nCMP dword ptr [RAX],0x16\nJNZ 0x00407da4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00407c90\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00407e36\nMOV dword ptr [0x0060d4d0],R15D\nTEST EBP,EBP\nJNS 0x00407de7\nJMP 0x00407e36\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401940\nMOV EBP,EAX\nJMP 0x00407e36\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00407c90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407e36\nCMP dword ptr [0x0060d4d0],-0x1\nJNZ 0x00407e36\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401940\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x00407e1c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401940\nCMP EAX,-0x1\nJNZ 0x00407e36\nCALL 0x004018a0\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401ab0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1712
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 6e 57 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 d0 9b ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 1f 9b ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 25 57 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 71 9b ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d e2 56 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 42 9b ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 29 9b ff ff\n83 f8 ff\n75 1a\ne8 7f 9a ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 82 9c ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1713
S'.text:0000000000407c90\n.text:0000000000407c91\n.text:0000000000407c93\n.text:0000000000407c95\n.text:0000000000407c96\n.text:0000000000407c9d\n.text:0000000000407ca0\n.text:0000000000407ca2\n.text:0000000000407ca4\n.text:0000000000407ca9\n.text:0000000000407cae\n.text:0000000000407cb3\n.text:0000000000407cbb\n.text:0000000000407cc3\n.text:0000000000407ccb\n.text:0000000000407cd3\n.text:0000000000407cdb\n.text:0000000000407ce0\n.text:0000000000407ce5\n.text:0000000000407cea\n.text:0000000000407cef\n.text:0000000000407cf4\n.text:0000000000407cf9\n.text:0000000000407d01\n.text:0000000000407d06\n.text:0000000000407d0e\n.text:0000000000407d15\n.text:0000000000407d19\n.text:0000000000407d1f\n.text:0000000000407d21\n.text:0000000000407d24\n.text:0000000000407d26\n.text:0000000000407d2b\n.text:0000000000407d2e\n.text:0000000000407d31\n.text:0000000000407d34\n.text:0000000000407d36\n.text:0000000000407d39\n.text:0000000000407d3b\n.text:0000000000407d3e\n.text:0000000000407d43\n.text:0000000000407d46\n.text:0000000000407d49\n.text:0000000000407d4b\n.text:0000000000407d50\n.text:0000000000407d54\n.text:0000000000407d59\n.text:0000000000407d5b\n.text:0000000000407d62\n.text:0000000000407d64\n.text:0000000000407d66\n.text:0000000000407d69\n.text:0000000000407d6b\n.text:0000000000407d70\n.text:0000000000407d72\n.text:0000000000407d78\n.text:0000000000407d7a\n.text:0000000000407d7c\n.text:0000000000407d81\n.text:0000000000407d84\n.text:0000000000407d86\n.text:0000000000407d88\n.text:0000000000407d8a\n.text:0000000000407d8d\n.text:0000000000407d8f\n.text:0000000000407d94\n.text:0000000000407d96\n.text:0000000000407d9c\n.text:0000000000407d9e\n.text:0000000000407da4\n.text:0000000000407dab\n.text:0000000000407dad\n.text:0000000000407daf\n.text:0000000000407db4\n.text:0000000000407db9\n.text:0000000000407dbd\n.text:0000000000407dc2\n.text:0000000000407dc5\n.text:0000000000407dc7\n.text:0000000000407dca\n.text:0000000000407dcf\n.text:0000000000407dd1\n.text:0000000000407dd3\n.text:0000000000407dd5\n.text:0000000000407dd7\n.text:0000000000407dda\n.text:0000000000407ddc\n.text:0000000000407de1\n.text:0000000000407de3\n.text:0000000000407de5\n.text:0000000000407de7\n.text:0000000000407dee\n.text:0000000000407df0\n.text:0000000000407df5\n.text:0000000000407df7\n.text:0000000000407df9\n.text:0000000000407dfe\n.text:0000000000407e00\n.text:0000000000407e02\n.text:0000000000407e04\n.text:0000000000407e07\n.text:0000000000407e0c\n.text:0000000000407e0e\n.text:0000000000407e10\n.text:0000000000407e12\n.text:0000000000407e17\n.text:0000000000407e1a\n.text:0000000000407e1c\n.text:0000000000407e21\n.text:0000000000407e24\n.text:0000000000407e27\n.text:0000000000407e29\n.text:0000000000407e2e\n.text:0000000000407e31\n.text:0000000000407e36\n.text:0000000000407e38\n.text:0000000000407e3f\n.text:0000000000407e40\n.text:0000000000407e42\n.text:0000000000407e44\n.text:0000000000407e45\n'
p1714
tp1715
sS'__fpending'
p1716
(S'\n__stdcall __fpending()\n'
p1717
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060d060)();\u000a  return;\u000a}\u000a\u000a
p1718
S'JMP qword ptr [0x0060d060]\n'
p1719
S'ff 25 5a b7 20 00\n'
p1720
S'.plt:0000000000401900\n'
p1721
tp1722
s.