(dp0
S'exceeds'
p1
(S'\n__stdcall exceeds(char * env_var_name, size_t quantity)\n'
p2
V\u000aint exceeds(char *env_var_name,size_t quantity)\u000a\u000a{\u000a  uint uVar1;\u000a  strtol_error sVar2;\u000a  char *s;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  ulong limit;\u000a  char *tmp;\u000a  ulong local_30;\u000a  char *local_28;\u000a  \u000a  s = getenv(env_var_name);\u000a  if (s != (char *)0x0) {\u000a    sVar2 = xstrtoul(s,&local_28,(ulong *)0xa,(char *)&local_30);\u000a    if (sVar2 != LONGINT_OK) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"Environment variable %s is not set to a valid decimal number",5);\u000a      error(1,(ulong)uVar1,uVar4,env_var_name);\u000a      return 0;\u000a    }\u000a    if (local_30 < quantity) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p3
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00401910\nTEST RAX,RAX\nJZ 0x00404ac9\nXOR R14D,R14D\nLEA RSI,[RSP + 0x10]\nLEA RCX,[RSP + 0x8]\nMOV EDX,0xa\nXOR R8D,R8D\nMOV RDI,RAX\nCALL 0x004083d0\nTEST EAX,EAX\nJZ 0x00404abc\nCALL 0x00401940\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40b28e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401d20\nJMP 0x00404acc\nCMP qword ptr [RSP + 0x8],R15\nMOV R14D,0x1\nJC 0x00404acc\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4
S'55\n41 57\n41 56\n53\n48 83 ec 18\n49 89 f7\n48 89 fb\ne8 ab ce ff ff\n48 85 c0\n74 5f\n45 31 f6\n48 8d 74 24 10\n48 8d 4c 24 08\nba 0a 00 00 00\n45 31 c0\n48 89 c7\ne8 49 39 00 00\n85 c0\n74 31\ne8 b0 ce ff ff\n8b 28\n31 ff\nbe 8e b2 40 00\nba 05 00 00 00\ne8 cd cf ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\n48 89 d9\ne8 66 d2 ff ff\neb 10\n4c 39 7c 24 08\n41 be 01 00 00 00\n72 03\n45 31 f6\n44 89 f0\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p5
S'.text:0000000000404a50\n.text:0000000000404a51\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a56\n.text:0000000000404a5a\n.text:0000000000404a5d\n.text:0000000000404a60\n.text:0000000000404a65\n.text:0000000000404a68\n.text:0000000000404a6a\n.text:0000000000404a6d\n.text:0000000000404a72\n.text:0000000000404a77\n.text:0000000000404a7c\n.text:0000000000404a7f\n.text:0000000000404a82\n.text:0000000000404a87\n.text:0000000000404a89\n.text:0000000000404a8b\n.text:0000000000404a90\n.text:0000000000404a92\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9e\n.text:0000000000404aa3\n.text:0000000000404aa6\n.text:0000000000404aab\n.text:0000000000404aad\n.text:0000000000404aaf\n.text:0000000000404ab2\n.text:0000000000404ab5\n.text:0000000000404aba\n.text:0000000000404abc\n.text:0000000000404ac1\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404acf\n.text:0000000000404ad3\n.text:0000000000404ad4\n.text:0000000000404ad6\n.text:0000000000404ad8\n.text:0000000000404ad9\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060f1f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060f1f0]\n'
p11
S'ff 25 2a d5 20 00\n'
p12
S'.plt:0000000000401cc0\n'
p13
tp14
sS'version_etc_arn'
p15
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p16
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    fprintf((FILE *)stream,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    fprintf((FILE *)stream,"%s (%s) %s\u005cn",command_name,package,version);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040bc3b,5);\u000a  fprintf((FILE *)stream,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    __s = (char *)dcgettext(0,"Written by %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors);\u000a    return;\u000a  case 2:\u000a    __s = (char *)dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3]);\u000a    return;\u000a  case 5:\u000a    uVar1 = 0x407f07;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],uVar1);\u000a    break;\u000a  case 6:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5]);\u000a    break;\u000a  case 7:\u000a    uVar1 = 0x407f86;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],uVar1);\u000a    break;\u000a  case 8:\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7]);\u000a    break;\u000a  case 9:\u000a    uVar1 = 0x408015;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a    break;\u000a  default:\u000a    uVar1 = 0x407e1a;\u000a    __s = (char *)dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    fprintf((FILE *)stream,__s,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a            authors[6],authors[7],authors[8],uVar1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV RBX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV R14,RDI\nTEST RDX,RDX\nJZ 0x00407d73\nMOV ESI,0x40bc28\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401c10\nJMP 0x00407d88\nMOV ESI,0x40bc34\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40bc3b\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV ESI,0x40bef0\nMOV ECX,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40bc3f\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401b30\nCMP R12,0x9\nJA 0x00407e09\nJMP qword ptr [0x40bbd8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40bd0a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [R15]\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RCX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40be49\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x38\nJMP 0x00408050\nXOR EDI,EDI\nMOV ESI,0x40bd1a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40bd31\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40bd4d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40bd6d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x18\nJMP 0x00408050\nXOR EDI,EDI\nMOV ESI,0x40bd91\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x18\nJMP 0x00408050\nXOR EDI,EDI\nMOV ESI,0x40bdb9\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x28\nJMP 0x00408050\nXOR EDI,EDI\nMOV ESI,0x40bde5\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x28\nJMP 0x00408050\nXOR EDI,EDI\nMOV ESI,0x40be15\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,RAX\nMOV RDX,qword ptr [R15]\nMOV RCX,qword ptr [R15 + 0x8]\nMOV R8,qword ptr [R15 + 0x10]\nMOV R9,qword ptr [R15 + 0x18]\nSUB RSP,0x8\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nCALL 0x00401c10\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401930\n'
p18
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n48 89 cb\n48 89 d1\n48 89 f2\n49 89 fe\n48 85 d2\n74 14\nbe 28 bc 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9f 9e ff ff\neb 15\nbe 34 bc 40 00\n31 c0\n4c 89 f7\n48 89 ca\n48 89 d9\ne8 88 9e ff ff\n31 ff\nbe 3b bc 40 00\nba 05 00 00 00\ne8 d7 9c ff ff\n48 89 c2\nbe f0 be 40 00\nb9 e0 07 00 00\n31 c0\n4c 89 f7\ne8 60 9e ff ff\n31 ff\nbe 3f bc 40 00\nba 05 00 00 00\ne8 af 9c ff ff\n48 89 c7\n4c 89 f6\ne8 64 9d ff ff\n49 83 fc 09\n77 37\n42 ff 24 e5 d8 bb 40 00\n31 ff\nbe 0a bd 40 00\nba 05 00 00 00\ne8 85 9c ff ff\n48 89 c1\n49 8b 17\n31 c0\n4c 89 f7\n48 89 ce\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 07 9e ff ff\n31 ff\nbe 49 be 40 00\nba 05 00 00 00\ne8 56 9c ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 bf 9d ff ff\n48 83 c4 38\ne9 f6 01 00 00\n31 ff\nbe 1a bd 40 00\nba 05 00 00 00\ne8 05 9c ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 86 9d ff ff\n31 ff\nbe 31 bd 40 00\nba 05 00 00 00\ne8 d5 9b ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 52 9d ff ff\n31 ff\nbe 4d bd 40 00\nba 05 00 00 00\ne8 a1 9b ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a 9d ff ff\n31 ff\nbe 6d bd 40 00\nba 05 00 00 00\ne8 69 9b ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\n31 c0\n4c 89 f7\n41 ff 77 20\ne8 e5 9c ff ff\n48 83 c4 18\ne9 1c 01 00 00\n31 ff\nbe 91 bd 40 00\nba 05 00 00 00\ne8 2b 9b ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\ne8 a4 9c ff ff\n48 83 c4 18\ne9 db 00 00 00\n31 ff\nbe b9 bd 40 00\nba 05 00 00 00\ne8 ea 9a ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 5b 9c ff ff\n48 83 c4 28\ne9 92 00 00 00\n31 ff\nbe e5 bd 40 00\nba 05 00 00 00\ne8 a1 9a ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 12 9c ff ff\n48 83 c4 28\neb 4c\n31 ff\nbe 15 be 40 00\nba 05 00 00 00\ne8 5b 9a ff ff\n48 89 c6\n49 8b 17\n49 8b 4f 08\n4d 8b 47 10\n4d 8b 4f 18\n48 83 ec 08\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\ne8 c4 9b ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 d3 98 ff ff\n'
p19
S'.text:0000000000407d40\n.text:0000000000407d42\n.text:0000000000407d44\n.text:0000000000407d46\n.text:0000000000407d47\n.text:0000000000407d48\n.text:0000000000407d4b\n.text:0000000000407d4e\n.text:0000000000407d51\n.text:0000000000407d54\n.text:0000000000407d57\n.text:0000000000407d5a\n.text:0000000000407d5d\n.text:0000000000407d5f\n.text:0000000000407d64\n.text:0000000000407d66\n.text:0000000000407d69\n.text:0000000000407d6c\n.text:0000000000407d71\n.text:0000000000407d73\n.text:0000000000407d78\n.text:0000000000407d7a\n.text:0000000000407d7d\n.text:0000000000407d80\n.text:0000000000407d83\n.text:0000000000407d88\n.text:0000000000407d8a\n.text:0000000000407d8f\n.text:0000000000407d94\n.text:0000000000407d99\n.text:0000000000407d9c\n.text:0000000000407da1\n.text:0000000000407da6\n.text:0000000000407da8\n.text:0000000000407dab\n.text:0000000000407db0\n.text:0000000000407db2\n.text:0000000000407db7\n.text:0000000000407dbc\n.text:0000000000407dc1\n.text:0000000000407dc4\n.text:0000000000407dc7\n.text:0000000000407dcc\n.text:0000000000407dd0\n.text:0000000000407dd2\n.text:0000000000407dda\n.text:0000000000407ddc\n.text:0000000000407de1\n.text:0000000000407de6\n.text:0000000000407deb\n.text:0000000000407dee\n.text:0000000000407df1\n.text:0000000000407df3\n.text:0000000000407df6\n.text:0000000000407df9\n.text:0000000000407dfd\n.text:0000000000407dfe\n.text:0000000000407e00\n.text:0000000000407e02\n.text:0000000000407e04\n.text:0000000000407e09\n.text:0000000000407e0b\n.text:0000000000407e10\n.text:0000000000407e15\n.text:0000000000407e1a\n.text:0000000000407e1d\n.text:0000000000407e20\n.text:0000000000407e24\n.text:0000000000407e28\n.text:0000000000407e2c\n.text:0000000000407e30\n.text:0000000000407e35\n.text:0000000000407e38\n.text:0000000000407e3c\n.text:0000000000407e40\n.text:0000000000407e44\n.text:0000000000407e48\n.text:0000000000407e4c\n.text:0000000000407e51\n.text:0000000000407e55\n.text:0000000000407e5a\n.text:0000000000407e5c\n.text:0000000000407e61\n.text:0000000000407e66\n.text:0000000000407e6b\n.text:0000000000407e6e\n.text:0000000000407e71\n.text:0000000000407e75\n.text:0000000000407e77\n.text:0000000000407e7a\n.text:0000000000407e7e\n.text:0000000000407e7f\n.text:0000000000407e81\n.text:0000000000407e83\n.text:0000000000407e85\n.text:0000000000407e8a\n.text:0000000000407e8c\n.text:0000000000407e91\n.text:0000000000407e96\n.text:0000000000407e9b\n.text:0000000000407e9e\n.text:0000000000407ea1\n.text:0000000000407ea5\n.text:0000000000407ea9\n.text:0000000000407eab\n.text:0000000000407eae\n.text:0000000000407eb2\n.text:0000000000407eb3\n.text:0000000000407eb5\n.text:0000000000407eb7\n.text:0000000000407eb9\n.text:0000000000407ebe\n.text:0000000000407ec0\n.text:0000000000407ec5\n.text:0000000000407eca\n.text:0000000000407ecf\n.text:0000000000407ed2\n.text:0000000000407ed5\n.text:0000000000407ed9\n.text:0000000000407edd\n.text:0000000000407ee1\n.text:0000000000407ee3\n.text:0000000000407ee6\n.text:0000000000407eea\n.text:0000000000407eeb\n.text:0000000000407eed\n.text:0000000000407eef\n.text:0000000000407ef1\n.text:0000000000407ef6\n.text:0000000000407ef8\n.text:0000000000407efd\n.text:0000000000407f02\n.text:0000000000407f07\n.text:0000000000407f0a\n.text:0000000000407f0d\n.text:0000000000407f11\n.text:0000000000407f15\n.text:0000000000407f19\n.text:0000000000407f1d\n.text:0000000000407f1f\n.text:0000000000407f22\n.text:0000000000407f26\n.text:0000000000407f2b\n.text:0000000000407f2f\n.text:0000000000407f34\n.text:0000000000407f36\n.text:0000000000407f3b\n.text:0000000000407f40\n.text:0000000000407f45\n.text:0000000000407f48\n.text:0000000000407f4b\n.text:0000000000407f4f\n.text:0000000000407f53\n.text:0000000000407f57\n.text:0000000000407f5c\n.text:0000000000407f5f\n.text:0000000000407f63\n.text:0000000000407f67\n.text:0000000000407f6c\n.text:0000000000407f70\n.text:0000000000407f75\n.text:0000000000407f77\n.text:0000000000407f7c\n.text:0000000000407f81\n.text:0000000000407f86\n.text:0000000000407f89\n.text:0000000000407f8c\n.text:0000000000407f90\n.text:0000000000407f94\n.text:0000000000407f98\n.text:0000000000407f9c\n.text:0000000000407fa1\n.text:0000000000407fa4\n.text:0000000000407fa8\n.text:0000000000407fac\n.text:0000000000407fb0\n.text:0000000000407fb5\n.text:0000000000407fb9\n.text:0000000000407fbe\n.text:0000000000407fc0\n.text:0000000000407fc5\n.text:0000000000407fca\n.text:0000000000407fcf\n.text:0000000000407fd2\n.text:0000000000407fd5\n.text:0000000000407fd9\n.text:0000000000407fdd\n.text:0000000000407fe1\n.text:0000000000407fe6\n.text:0000000000407fe9\n.text:0000000000407fed\n.text:0000000000407ff1\n.text:0000000000407ff5\n.text:0000000000407ff9\n.text:0000000000407ffe\n.text:0000000000408002\n.text:0000000000408004\n.text:0000000000408006\n.text:000000000040800b\n.text:0000000000408010\n.text:0000000000408015\n.text:0000000000408018\n.text:000000000040801b\n.text:000000000040801f\n.text:0000000000408023\n.text:0000000000408027\n.text:000000000040802b\n.text:0000000000408030\n.text:0000000000408033\n.text:0000000000408037\n.text:000000000040803b\n.text:000000000040803f\n.text:0000000000408043\n.text:0000000000408047\n.text:000000000040804c\n.text:0000000000408050\n.text:0000000000408051\n.text:0000000000408053\n.text:0000000000408055\n.text:0000000000408057\n.text:0000000000408058\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060f0f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x0060f0f0]\n'
p25
S'ff 25 2a d6 20 00\n'
p26
S'.plt:0000000000401ac0\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060f040)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060f040]\n'
p32
S'ff 25 da d6 20 00\n'
p33
S'.plt:0000000000401960\n'
p34
tp35
sS'xnrealloc'
p36
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p37
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p38
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00408244\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00408250\nPUSH RAX\nCALL 0x004083a0\n'
p39
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p40
S'.text:0000000000408230\n.text:0000000000408233\n.text:0000000000408236\n.text:0000000000408239\n.text:000000000040823b\n.text:000000000040823f\n.text:0000000000408242\n.text:0000000000408244\n.text:0000000000408245\n'
p41
tp42
sS'quote'
p43
(S'\n__stdcall quote(char * arg)\n'
p44
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004077f0\n'
p46
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p47
S'.text:0000000000407800\n.text:0000000000407803\n.text:0000000000407805\n.text:0000000000407808\n'
p48
tp49
sS'emit_bug_reporting_address'
p50
(S'\n__stdcall emit_bug_reporting_address()\n'
p51
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  printf(__format,"bug-findutils@gnu.org");\u000a  __format = (char *)dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  printf(__format,"GNU findutils","http://www.gnu.org/software/findutils/");\u000a  __format = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",\u000a                               5);\u000a  fputs(__format,stdout);\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40be85\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV ESI,0x40b541\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401ad0\nXOR EDI,EDI\nMOV ESI,0x40be9a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV ESI,0x40b3b1\nMOV EDX,0x40b4eb\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401ad0\nXOR EDI,EDI\nMOV ESI,0x40beae\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401b30\n'
p53
S'50\n31 ff\nbe 85 be 40 00\nba 05 00 00 00\ne8 de 98 ff ff\n48 89 c1\nbe 41 b5 40 00\n31 c0\n48 89 cf\ne8 2c 99 ff ff\n31 ff\nbe 9a be 40 00\nba 05 00 00 00\ne8 bb 98 ff ff\n48 89 c1\nbe b1 b3 40 00\nba eb b4 40 00\n31 c0\n48 89 cf\ne8 04 99 ff ff\n31 ff\nbe ae be 40 00\nba 05 00 00 00\ne8 93 98 ff ff\n48 8b 35 64 71 20 00\n48 89 c7\n58\ne9 43 99 ff ff\n'
p54
S'.text:0000000000408180\n.text:0000000000408181\n.text:0000000000408183\n.text:0000000000408188\n.text:000000000040818d\n.text:0000000000408192\n.text:0000000000408195\n.text:000000000040819a\n.text:000000000040819c\n.text:000000000040819f\n.text:00000000004081a4\n.text:00000000004081a6\n.text:00000000004081ab\n.text:00000000004081b0\n.text:00000000004081b5\n.text:00000000004081b8\n.text:00000000004081bd\n.text:00000000004081c2\n.text:00000000004081c4\n.text:00000000004081c7\n.text:00000000004081cc\n.text:00000000004081ce\n.text:00000000004081d3\n.text:00000000004081d8\n.text:00000000004081dd\n.text:00000000004081e4\n.text:00000000004081e7\n.text:00000000004081e8\n'
p55
tp56
sS'clone_quoting_options'
p57
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p58
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401940\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60f510\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00408350\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p60
S'55\n41 56\n53\n48 89 fb\ne8 74 b5 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 10 f5 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 65 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p61
S'.text:00000000004063c0\n.text:00000000004063c1\n.text:00000000004063c3\n.text:00000000004063c4\n.text:00000000004063c7\n.text:00000000004063cc\n.text:00000000004063cf\n.text:00000000004063d2\n.text:00000000004063d5\n.text:00000000004063da\n.text:00000000004063de\n.text:00000000004063e3\n.text:00000000004063e6\n.text:00000000004063eb\n.text:00000000004063ee\n.text:00000000004063ef\n.text:00000000004063f1\n.text:00000000004063f2\n'
p62
tp63
sS'xmalloc'
p64
(S'\n__stdcall xmalloc(size_t n)\n'
p65
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401c80\nTEST RBX,RBX\nJZ 0x00408223\nTEST RAX,RAX\nJZ 0x00408225\nPOP RBX\nRET\nCALL 0x004083a0\n'
p67
S'53\n48 89 fb\ne8 67 9a ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p68
S'.text:0000000000408210\n.text:0000000000408211\n.text:0000000000408214\n.text:0000000000408219\n.text:000000000040821c\n.text:000000000040821e\n.text:0000000000408221\n.text:0000000000408223\n.text:0000000000408224\n.text:0000000000408225\n'
p69
tp70
sS'quotearg_char_mem'
p71
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p72
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060f540]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060f530]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f520]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f510]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00406420\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407310\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p74
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 08 7f 20 00\n48 89 4c 24 30\n0f 10 05 ec 7e 20 00\n0f 29 44 24 20\n0f 10 05 d0 7e 20 00\n0f 29 44 24 10\n0f 10 05 b4 7e 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p75
S'.text:0000000000407620\n.text:0000000000407622\n.text:0000000000407624\n.text:0000000000407625\n.text:0000000000407629\n.text:000000000040762b\n.text:000000000040762e\n.text:0000000000407631\n.text:0000000000407638\n.text:000000000040763d\n.text:0000000000407644\n.text:0000000000407649\n.text:0000000000407650\n.text:0000000000407655\n.text:000000000040765c\n.text:0000000000407660\n.text:0000000000407663\n.text:0000000000407668\n.text:000000000040766b\n.text:000000000040766d\n.text:0000000000407672\n.text:0000000000407674\n.text:0000000000407677\n.text:000000000040767a\n.text:000000000040767d\n.text:0000000000407682\n.text:0000000000407686\n.text:0000000000407687\n.text:0000000000407689\n.text:000000000040768b\n'
p76
tp77
sS'frame_dummy'
p78
(S'\n__stdcall frame_dummy()\n'
p79
V\u000a/* WARNING: Removing unreachable block (ram,0x00401f1a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p80
S'MOV EDI,0x60ee18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401f10\nJMP 0x00401ea0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401f0b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401ea0\n'
p81
S'bf 18 ee 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p82
S'.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f09\n.text:0000000000401f0b\n.text:0000000000401f10\n.text:0000000000401f15\n.text:0000000000401f18\n.text:0000000000401f1a\n.text:0000000000401f1b\n.text:0000000000401f1e\n.text:0000000000401f20\n.text:0000000000401f21\n'
p83
tp84
sS'get_input_delimiter'
p85
(S'\n__stdcall get_input_delimiter(char * s)\n'
p86
V\u000achar get_input_delimiter(char *s)\u000a\u000a{\u000a  char cVar1;\u000a  size_t sVar2;\u000a  undefined8 uVar3;\u000a  \u000a  sVar2 = strlen(s);\u000a  cVar1 = *s;\u000a  if (sVar2 != 1) {\u000a    if (cVar1 == '\u005c\u005c') {\u000a      cVar1 = '\u005ca';\u000a      switch(s[1]) {\u000a      case '\u005c\u005c':\u000a        cVar1 = '\u005c\u005c';\u000a        break;\u000a      default:\u000a        cVar1 = get_char_oct_or_hex_escape(s);\u000a        return cVar1;\u000a      case 'a':\u000a        break;\u000a      case 'b':\u000a        cVar1 = '\u005cb';\u000a        break;\u000a      case 'f':\u000a        cVar1 = '\u005cf';\u000a        break;\u000a      case 'n':\u000a        cVar1 = '\u005cn';\u000a        break;\u000a      case 'r':\u000a        cVar1 = '\u005cr';\u000a        break;\u000a      case 't':\u000a        cVar1 = '\u005ct';\u000a        break;\u000a      case 'v':\u000a        cVar1 = '\u005cv';\u000a      }\u000a    }\u000a    else {\u000a      cVar1 = 0;\u000a      uVar3 = dcgettext(0,\u000a                        "Invalid input delimiter specification %s: the delimiter must be either a single character or an escape sequence starting with \u005c\u005c."\u000a                        ,5);\u000a      error(1,0,uVar3,s);\u000a    }\u000a  }\u000a  return cVar1;\u000a}\u000a\u000a
p87
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401a90\nCMP RAX,0x1\nMOV R14B,byte ptr [RBX]\nJZ 0x00403441\nCMP R14B,0x5c\nJNZ 0x00403416\nMOVSX EAX,byte ptr [RBX + 0x1]\nADD EAX,-0x5c\nCMP EAX,0x1a\nJA 0x0040344c\nMOV R14B,0x7\nJMP qword ptr [0x409630 + RAX*0x8]\nMOV R14B,0x5c\nJMP 0x00403441\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x409e9e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401d20\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00403990\nMOV R14B,0x8\nJMP 0x00403441\nMOV R14B,0xc\nJMP 0x00403441\nMOV R14B,0xd\nJMP 0x00403441\nMOV R14B,0x9\nJMP 0x00403441\nMOV R14B,0xb\nJMP 0x00403441\nMOV R14B,0xa\nJMP 0x00403441\n'
p88
S'41 56\n53\n50\n48 89 fb\ne8 a4 e6 ff ff\n48 83 f8 01\n44 8a 33\n74 4c\n41 80 fe 5c\n75 1b\n0f be 43 01\n83 c0 a4\n83 f8 1a\n77 45\n41 b6 07\nff 24 c5 30 96 40 00\n41 b6 5c\neb 2b\n45 31 f6\n31 ff\nbe 9e 9e 40 00\nba 05 00 00 00\ne8 46 e6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 df e8 ff ff\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n48 89 df\n48 83 c4 08\n5b\n41 5e\ne9 35 05 00 00\n41 b6 08\neb e1\n41 b6 0c\neb dc\n41 b6 0d\neb d7\n41 b6 09\neb d2\n41 b6 0b\neb cd\n41 b6 0a\neb c8\n'
p89
S'.text:00000000004033e0\n.text:00000000004033e2\n.text:00000000004033e3\n.text:00000000004033e4\n.text:00000000004033e7\n.text:00000000004033ec\n.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f5\n.text:00000000004033f9\n.text:00000000004033fb\n.text:00000000004033ff\n.text:0000000000403402\n.text:0000000000403405\n.text:0000000000403407\n.text:000000000040340a\n.text:0000000000403411\n.text:0000000000403414\n.text:0000000000403416\n.text:0000000000403419\n.text:000000000040341b\n.text:0000000000403420\n.text:0000000000403425\n.text:000000000040342a\n.text:000000000040342d\n.text:0000000000403432\n.text:0000000000403434\n.text:0000000000403436\n.text:0000000000403439\n.text:000000000040343c\n.text:0000000000403441\n.text:0000000000403444\n.text:0000000000403448\n.text:0000000000403449\n.text:000000000040344b\n.text:000000000040344c\n.text:000000000040344f\n.text:0000000000403453\n.text:0000000000403454\n.text:0000000000403456\n.text:000000000040345b\n.text:000000000040345e\n.text:0000000000403460\n.text:0000000000403463\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346a\n.text:000000000040346d\n.text:000000000040346f\n.text:0000000000403472\n.text:0000000000403474\n.text:0000000000403477\n'
p90
tp91
sS'read_string'
p92
(S'\n__stdcall read_string()\n'
p93
V\u000aint read_string(void)\u000a\u000a{\u000a  long lVar1;\u000a  int iVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  int iVar5;\u000a  char *pcVar6;\u000a  \u000a  pcVar4 = linebuf;\u000a  iVar5 = -1;\u000a  if (read_string_eof == 0) {\u000a    lVar1 = bc_ctl.arg_max - bc_state.cmd_initial_argv_chars;\u000a    iVar2 = _IO_getc((_IO_FILE *)input_stream);\u000a    if (iVar2 != -1) {\u000a      pcVar6 = pcVar4 + lVar1 + -1;\u000a      do {\u000a        if (iVar2 == (int)input_delimiter) {\u000a          lineno = lineno + 1;\u000a          goto LAB_0040338c;\u000a        }\u000a        if (pcVar6 <= pcVar4) {\u000a          exec_if_possible();\u000a          uVar3 = dcgettext(0,"argument line too long",5);\u000a          error(1,0,uVar3,uVar3);\u000a        }\u000a        *pcVar4 = (char)iVar2;\u000a        pcVar4 = pcVar4 + 1;\u000a        iVar2 = _IO_getc((_IO_FILE *)input_stream);\u000a      } while (iVar2 != -1);\u000a    }\u000a    read_string_eof = 1;\u000a    if (pcVar4 != linebuf) {\u000aLAB_0040338c:\u000a      *pcVar4 = 0;\u000a      iVar5 = ((int)pcVar4 + 1) - (int)linebuf;\u000a      if (bc_ctl.replace_pat == (char *)0x0) {\u000a        bc_push_arg(&bc_ctl,&bc_state,linebuf,(long)iVar5,(char *)0x0,0);\u000a      }\u000a    }\u000a  }\u000a  return iVar5;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,0xffffffff\nMOV AL,byte ptr [0x0060f495]\nTEST AL,AL\nJNZ 0x004033ce\nMOV RBX,qword ptr [0x0060f420]\nMOV R15,qword ptr [0x0060f3b0]\nADD R15,RBX\nSUB R15,qword ptr [0x0060f450]\nMOV RDI,qword ptr [0x0060f410]\nCALL 0x00401ca0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x00403373\nDEC R15\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [0x0060f3f0]\nCMP EBP,EAX\nJZ 0x00403385\nCMP RBX,R15\nJC 0x0040335a\nCALL 0x00403af0\nXOR EDI,EDI\nMOV ESI,0x40a1b2\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV byte ptr [RBX],BPL\nINC RBX\nMOV RDI,qword ptr [0x0060f410]\nCALL 0x00401ca0\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x00403320\nMOV byte ptr [0x0060f495],0x1\nCMP RBX,qword ptr [0x0060f420]\nJNZ 0x0040338c\nJMP 0x004033ce\nINC qword ptr [0x0060f480]\nMOV byte ptr [RBX],0x0\nINC RBX\nMOV RDX,qword ptr [0x0060f420]\nMOV R14,RBX\nSUB R14,RDX\nCMP qword ptr [0x0060f3c8],0x0\nJNZ 0x004033ce\nMOVSXD RCX,R14D\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p95
S'55\n41 57\n41 56\n53\n50\n41 be ff ff ff ff\n8a 05 b2 c1 20 00\n84 c0\n0f 85 e3 00 00 00\n48 8b 1d 2e c1 20 00\n4c 8b 3d b7 c0 20 00\n49 01 df\n4c 2b 3d 4d c1 20 00\n48 8b 3d 06 c1 20 00\ne8 91 e9 ff ff\n89 c5\n83 fd ff\n74 5d\n49 ff cf\n0f 1f 80 00 00 00 00\n0f be 05 c9 c0 20 00\n39 c5\n74 5a\n4c 39 fb\n72 2a\ne8 bb 07 00 00\n31 ff\nbe b2 a1 40 00\nba 05 00 00 00\ne8 2a e7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 c6 e9 ff ff\n40 88 2b\n48 ff c3\n48 8b 3d a9 c0 20 00\ne8 34 e9 ff ff\n89 c5\n83 fd ff\n75 ad\nc6 05 1b c1 20 00 01\n48 3b 1d 9f c0 20 00\n75 09\neb 49\n48 ff 05 f4 c0 20 00\nc6 03 00\n48 ff c3\n48 8b 15 87 c0 20 00\n49 89 de\n49 29 d6\n48 83 3d 21 c0 20 00 00\n75 25\n49 63 ce\n0f b6 05 c5 c0 20 00\n83 f0 01\n89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 52 0f 00 00\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p96
S'.text:00000000004032d0\n.text:00000000004032d1\n.text:00000000004032d3\n.text:00000000004032d5\n.text:00000000004032d6\n.text:00000000004032d7\n.text:00000000004032dd\n.text:00000000004032e3\n.text:00000000004032e5\n.text:00000000004032eb\n.text:00000000004032f2\n.text:00000000004032f9\n.text:00000000004032fc\n.text:0000000000403303\n.text:000000000040330a\n.text:000000000040330f\n.text:0000000000403311\n.text:0000000000403314\n.text:0000000000403316\n.text:0000000000403319\n.text:0000000000403320\n.text:0000000000403327\n.text:0000000000403329\n.text:000000000040332b\n.text:000000000040332e\n.text:0000000000403330\n.text:0000000000403335\n.text:0000000000403337\n.text:000000000040333c\n.text:0000000000403341\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334e\n.text:0000000000403350\n.text:0000000000403352\n.text:0000000000403355\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403367\n.text:000000000040336c\n.text:000000000040336e\n.text:0000000000403371\n.text:0000000000403373\n.text:000000000040337a\n.text:0000000000403381\n.text:0000000000403383\n.text:0000000000403385\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403399\n.text:000000000040339c\n.text:000000000040339f\n.text:00000000004033a7\n.text:00000000004033a9\n.text:00000000004033ac\n.text:00000000004033b3\n.text:00000000004033b6\n.text:00000000004033b9\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c6\n.text:00000000004033c9\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d5\n.text:00000000004033d6\n.text:00000000004033d8\n.text:00000000004033da\n.text:00000000004033db\n'
p97
tp98
sS'bc_do_exec'
p99
(S'\n__stdcall bc_do_exec(buildcmd_control * ctl, buildcmd_state * state)\n'
p100
V\u000avoid bc_do_exec(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  int iVar1;\u000a  char **working_args;\u000a  size_t sVar2;\u000a  size_t limit;\u000a  undefined8 uVar3;\u000a  size_t done;\u000a  \u000a  bc_args_complete(ctl,state);\u000a  limit = state->cmd_argc;\u000a  if (limit == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->cmd_argc > 0","buildcmd.c",0x10f,\u000a                  "void bc_do_exec(struct buildcmd_control *, struct buildcmd_state *)");\u000a  }\u000a  if (state->cmd_argv[limit - 1] == (char *)0x0) {\u000a    working_args = (char **)xmalloc(limit * 8 + 8);\u000a    limit = state->cmd_argc;\u000a    done = 0;\u000a    do {\u000a      sVar2 = copy_args(ctl,state,working_args,limit,done);\u000a      iVar1 = (*ctl->exec_callback)(ctl,state->usercontext,(int)sVar2,working_args);\u000a      if (iVar1 == 0) {\u000a        if (ctl->initial_argc + 1 < limit) {\u000a          limit = update_limit(ctl,state,0);\u000a        }\u000a        else {\u000a          uVar3 = dcgettext(0,"can\u005c't call exec() due to argument size restrictions",5);\u000a          error(1,0,uVar3,uVar3);\u000a        }\u000a      }\u000a      else {\u000a        limit = update_limit(ctl,state,1);\u000a        done = (sVar2 + done) - ctl->initial_argc;\u000a      }\u000a    } while (done + 1 < state->cmd_argc - ctl->initial_argc);\u000a    free(working_args);\u000a    bc_clear_args(ctl,state);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("state->cmd_argv[state->cmd_argc-1] == NULL","buildcmd.c",0x110,\u000a                "void bc_do_exec(struct buildcmd_control *, struct buildcmd_state *)");\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00404680\nMOV RAX,qword ptr [R14]\nTEST RAX,RAX\nJZ 0x00404645\nMOV RCX,qword ptr [R14 + 0x8]\nCMP qword ptr [RCX + RAX*0x8 + -0x8],0x0\nJNZ 0x0040465e\nLEA RDI,[0x8 + RAX*0x8]\nCALL 0x00408210\nMOV R15,RAX\nMOV R12,qword ptr [R14]\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nMOV RCX,R12\nMOV R8,R13\nCALL 0x004046a0\nMOV RBP,RAX\nMOV RSI,qword ptr [R14 + 0x30]\nMOV RDI,RBX\nMOV EDX,EBP\nMOV RCX,R15\nCALL qword ptr [RBX + 0x40]\nTEST EAX,EAX\nJZ 0x004045c0\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00404730\nMOV R12,RAX\nADD RBP,R13\nSUB RBP,qword ptr [RBX + 0x38]\nMOV R13,RBP\nJMP 0x00404610\nMOV RAX,qword ptr [RBX + 0x38]\nINC RAX\nCMP R12,RAX\nJBE 0x004045e1\nXOR EDX,EDX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00404730\nMOV R12,RAX\nJMP 0x00404610\nXOR EDI,EDI\nMOV ESI,0x40afda\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RAX,[R13 + 0x1]\nMOV RCX,qword ptr [R14]\nSUB RCX,qword ptr [RBX + 0x38]\nCMP RAX,RCX\nJC 0x00404570\nMOV RDI,R15\nCALL 0x00401920\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004047c0\nMOV EDI,0x40af4c\nMOV ESI,0x40af60\nMOV EDX,0x10f\nMOV ECX,0x40af6b\nCALL 0x00401b20\nMOV EDI,0x40afaf\nMOV ESI,0x40af60\nMOV EDX,0x110\nMOV ECX,0x40af6b\nCALL 0x00401b20\n'
p102
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n48 89 fb\ne8 4a 01 00 00\n49 8b 06\n48 85 c0\n0f 84 03 01 00 00\n49 8b 4e 08\n48 83 7c c1 f8 00\n0f 85 0c 01 00 00\n48 8d 3c c5 08 00 00 00\ne8 b1 3c 00 00\n49 89 c7\n4d 8b 26\n45 31 ed\n0f 1f 84 00 00 00 00 00\n48 89 df\n4c 89 f6\n4c 89 fa\n4c 89 e1\n4d 89 e8\ne8 1c 01 00 00\n48 89 c5\n49 8b 76 30\n48 89 df\n89 ea\n4c 89 f9\nff 53 40\n85 c0\n74 26\nba 01 00 00 00\n48 89 df\n4c 89 f6\n4c 89 e1\ne8 83 01 00 00\n49 89 c4\n4c 01 ed\n48 2b 6b 38\n49 89 ed\neb 54\n48 8b 43 38\n48 ff c0\n49 39 c4\n76 15\n31 d2\n48 89 df\n4c 89 f6\n4c 89 e1\ne8 54 01 00 00\n49 89 c4\neb 2f\n31 ff\nbe da af 40 00\nba 05 00 00 00\ne8 7e d4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1a d7 ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n49 8d 45 01\n49 8b 0e\n48 2b 4b 38\n48 39 c8\n0f 82 4c ff ff ff\n4c 89 ff\ne8 f4 d2 ff ff\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 7b 01 00 00\nbf 4c af 40 00\nbe 60 af 40 00\nba 0f 01 00 00\nb9 6b af 40 00\ne8 c2 d4 ff ff\nbf af af 40 00\nbe 60 af 40 00\nba 10 01 00 00\nb9 6b af 40 00\ne8 a9 d4 ff ff\n'
p103
S'.text:0000000000404520\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404525\n.text:0000000000404527\n.text:0000000000404529\n.text:000000000040452a\n.text:000000000040452b\n.text:000000000040452e\n.text:0000000000404531\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453c\n.text:0000000000404542\n.text:0000000000404546\n.text:000000000040454c\n.text:0000000000404552\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404562\n.text:0000000000404565\n.text:0000000000404568\n.text:0000000000404570\n.text:0000000000404573\n.text:0000000000404576\n.text:0000000000404579\n.text:000000000040457c\n.text:000000000040457f\n.text:0000000000404584\n.text:0000000000404587\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404590\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459a\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045ad\n.text:00000000004045b0\n.text:00000000004045b3\n.text:00000000004045b7\n.text:00000000004045ba\n.text:00000000004045c0\n.text:00000000004045c4\n.text:00000000004045c7\n.text:00000000004045ca\n.text:00000000004045cc\n.text:00000000004045ce\n.text:00000000004045d1\n.text:00000000004045d4\n.text:00000000004045d7\n.text:00000000004045dc\n.text:00000000004045df\n.text:00000000004045e1\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045fa\n.text:00000000004045fc\n.text:00000000004045fe\n.text:0000000000404601\n.text:0000000000404606\n.text:0000000000404610\n.text:0000000000404614\n.text:0000000000404617\n.text:000000000040461b\n.text:000000000040461e\n.text:0000000000404624\n.text:0000000000404627\n.text:000000000040462c\n.text:000000000040462f\n.text:0000000000404632\n.text:0000000000404636\n.text:0000000000404637\n.text:0000000000404639\n.text:000000000040463b\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404640\n.text:0000000000404645\n.text:000000000040464a\n.text:000000000040464f\n.text:0000000000404654\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404663\n.text:0000000000404668\n.text:000000000040466d\n.text:0000000000404672\n'
p104
tp105
sS'execvp'
p106
(S'\n__stdcall execvp(char * __file, char * * __argv)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint execvp(char *__file,char **__argv)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_execvp_0060f260)();\u000a  return iVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x0060f260]\n'
p109
S'ff 25 ba d4 20 00\n'
p110
S'.plt:0000000000401da0\n'
p111
tp112
sS'quotearg_n_style_colon'
p113
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p114
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00407540\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00406420\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00407310\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p116
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p117
S'.text:00000000004076c0\n.text:00000000004076c1\n.text:00000000004076c3\n.text:00000000004076c4\n.text:00000000004076c8\n.text:00000000004076cb\n.text:00000000004076cd\n.text:00000000004076d2\n.text:00000000004076d5\n.text:00000000004076da\n.text:00000000004076df\n.text:00000000004076e4\n.text:00000000004076e7\n.text:00000000004076ec\n.text:00000000004076f3\n.text:00000000004076f5\n.text:00000000004076f8\n.text:00000000004076fb\n.text:0000000000407700\n.text:0000000000407704\n.text:0000000000407705\n.text:0000000000407707\n.text:0000000000407708\n'
p118
tp119
sS'mbuiter_multi_next'
p120
(S'\n__stdcall mbuiter_multi_next(mbuiter_multi * iter)\n'
p121
V\u000avoid mbuiter_multi_next(mbuiter_multi *iter)\u000a\u000a{\u000a  wchar_t *pwc;\u000a  char *string;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t maxlen;\u000a  size_t n;\u000a  \u000a  if (iter->next_done != false) {\u000a    return;\u000a  }\u000a  if (iter->in_shift == false) {\u000a    _Var1 = is_basic();\u000a    if (_Var1 != false) {\u000a      (iter->cur).bytes = 1;\u000a      (iter->cur).wc = (int)*(iter->cur).ptr;\u000a      (iter->cur).wc_valid = true;\u000a      goto LAB_00406266;\u000a    }\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("mbsinit (&iter->state)","./mbuiter.h",0x96,\u000a                    "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a    }\u000a    iter->in_shift = true;\u000a  }\u000a  pwc = &(iter->cur).wc;\u000a  string = (iter->cur).ptr;\u000a  maxlen = __ctype_get_mb_cur_max();\u000a  n = strnlen1(string,maxlen);\u000a  n = rpl_mbrtowc(pwc,string,n,(mbstate_t *)(mbstate_t *)&iter->state);\u000a  (iter->cur).bytes = n;\u000a  if (n == 0xfffffffffffffffe) {\u000a    maxlen = strlen((iter->cur).ptr);\u000a    (iter->cur).bytes = maxlen;\u000a    (iter->cur).wc_valid = false;\u000a  }\u000a  else {\u000a    if (n == 0) {\u000a      (iter->cur).bytes = 1;\u000a      if (*(iter->cur).ptr != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("*iter->cur.ptr == \u005c'\u005c\u005c0\u005c'","./mbuiter.h",0xb2,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a      if (*pwc != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("iter->cur.wc == 0","./mbuiter.h",0xb3,\u000a                      "void mbuiter_multi_next(struct mbuiter_multi *)");\u000a      }\u000a    }\u000a    else {\u000a      if (n == 0xffffffffffffffff) {\u000a        (iter->cur).bytes = 1;\u000a        (iter->cur).wc_valid = false;\u000a        goto LAB_00406266;\u000a      }\u000a    }\u000a    (iter->cur).wc_valid = true;\u000a    iVar2 = mbsinit((mbstate_t *)&iter->state);\u000a    if (iVar2 != 0) {\u000a      iter->in_shift = false;\u000a    }\u000a  }\u000aLAB_00406266:\u000a  iter->next_done = true;\u000a  return;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [RBX + 0xc],0x0\nJNZ 0x0040626a\nCMP byte ptr [RBX],0x0\nJNZ 0x004061d9\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EDI,byte ptr [RAX]\nCALL 0x00409060\nTEST AL,AL\nJZ 0x004061c5\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nMOVSX EAX,byte ptr [RAX]\nMOV dword ptr [RBX + 0x24],EAX\nMOV byte ptr [RBX + 0x20],0x1\nJMP 0x00406266\nLEA RDI,[RBX + 0x4]\nCALL 0x00401df0\nTEST EAX,EAX\nJZ 0x00406276\nMOV byte ptr [RBX],0x1\nLEA R14,[RBX + 0x24]\nMOV R12,qword ptr [RBX + 0x10]\nCALL 0x00401a80\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00407ca0\nLEA R15,[RBX + 0x4]\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RAX\nMOV RCX,R15\nCALL 0x00408960\nMOV qword ptr [RBX + 0x18],RAX\nCMP RAX,-0x2\nJZ 0x00406229\nTEST RAX,RAX\nJZ 0x0040623c\nCMP RAX,-0x1\nJNZ 0x00406253\nMOV qword ptr [RBX + 0x18],0x1\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00406266\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00401a90\nMOV qword ptr [RBX + 0x18],RAX\nMOV byte ptr [RBX + 0x20],0x0\nJMP 0x00406266\nMOV qword ptr [RBX + 0x18],0x1\nMOV RAX,qword ptr [RBX + 0x10]\nCMP byte ptr [RAX],0x0\nJNZ 0x0040628f\nCMP dword ptr [R14],0x0\nJNZ 0x004062a8\nMOV byte ptr [RBX + 0x20],0x1\nMOV RDI,R15\nCALL 0x00401df0\nTEST EAX,EAX\nJZ 0x00406266\nMOV byte ptr [RBX],0x0\nMOV byte ptr [RBX + 0xc],0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b5d0\nMOV ESI,0x40b5e7\nMOV EDX,0x96\nMOV ECX,0x40b5f3\nCALL 0x00401b20\nMOV EDI,0x40b623\nMOV ESI,0x40b5e7\nMOV EDX,0xb2\nMOV ECX,0x40b5f3\nCALL 0x00401b20\nMOV EDI,0x40b63a\nMOV ESI,0x40b5e7\nMOV EDX,0xb3\nMOV ECX,0x40b5f3\nCALL 0x00401b20\n'
p123
S'41 57\n41 56\n41 54\n53\n50\n48 89 fb\n80 7b 0c 00\n0f 85 d5 00 00 00\n80 3b 00\n75 3f\n48 8b 43 10\n0f be 38\ne8 ba 2e 00 00\n84 c0\n74 1b\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n0f be 00\n89 43 24\nc6 43 20 01\ne9 a1 00 00 00\n48 8d 7b 04\ne8 22 bc ff ff\n85 c0\n0f 84 a0 00 00 00\nc6 03 01\n4c 8d 73 24\n4c 8b 63 10\ne8 9a b8 ff ff\n4c 89 e7\n48 89 c6\ne8 af 1a 00 00\n4c 8d 7b 04\n4c 89 f7\n4c 89 e6\n48 89 c2\n4c 89 f9\ne8 5a 27 00 00\n48 89 43 18\n48 83 f8 fe\n74 19\n48 85 c0\n74 27\n48 83 f8 ff\n75 38\n48 c7 43 18 01 00 00 00\nc6 43 20 00\neb 3d\n48 8b 7b 10\ne8 5e b8 ff ff\n48 89 43 18\nc6 43 20 00\neb 2a\n48 c7 43 18 01 00 00 00\n48 8b 43 10\n80 38 00\n75 42\n41 83 3e 00\n75 55\nc6 43 20 01\n4c 89 ff\ne8 91 bb ff ff\n85 c0\n74 03\nc6 03 00\nc6 43 0c 01\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf d0 b5 40 00\nbe e7 b5 40 00\nba 96 00 00 00\nb9 f3 b5 40 00\ne8 91 b8 ff ff\nbf 23 b6 40 00\nbe e7 b5 40 00\nba b2 00 00 00\nb9 f3 b5 40 00\ne8 78 b8 ff ff\nbf 3a b6 40 00\nbe e7 b5 40 00\nba b3 00 00 00\nb9 f3 b5 40 00\ne8 5f b8 ff ff\n'
p124
S'.text:0000000000406180\n.text:0000000000406182\n.text:0000000000406184\n.text:0000000000406186\n.text:0000000000406187\n.text:0000000000406188\n.text:000000000040618b\n.text:000000000040618f\n.text:0000000000406195\n.text:0000000000406198\n.text:000000000040619a\n.text:000000000040619e\n.text:00000000004061a1\n.text:00000000004061a6\n.text:00000000004061a8\n.text:00000000004061aa\n.text:00000000004061b2\n.text:00000000004061b6\n.text:00000000004061b9\n.text:00000000004061bc\n.text:00000000004061c0\n.text:00000000004061c5\n.text:00000000004061c9\n.text:00000000004061ce\n.text:00000000004061d0\n.text:00000000004061d6\n.text:00000000004061d9\n.text:00000000004061dd\n.text:00000000004061e1\n.text:00000000004061e6\n.text:00000000004061e9\n.text:00000000004061ec\n.text:00000000004061f1\n.text:00000000004061f5\n.text:00000000004061f8\n.text:00000000004061fb\n.text:00000000004061fe\n.text:0000000000406201\n.text:0000000000406206\n.text:000000000040620a\n.text:000000000040620e\n.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406215\n.text:0000000000406219\n.text:000000000040621b\n.text:0000000000406223\n.text:0000000000406227\n.text:0000000000406229\n.text:000000000040622d\n.text:0000000000406232\n.text:0000000000406236\n.text:000000000040623a\n.text:000000000040623c\n.text:0000000000406244\n.text:0000000000406248\n.text:000000000040624b\n.text:000000000040624d\n.text:0000000000406251\n.text:0000000000406253\n.text:0000000000406257\n.text:000000000040625a\n.text:000000000040625f\n.text:0000000000406261\n.text:0000000000406263\n.text:0000000000406266\n.text:000000000040626a\n.text:000000000040626e\n.text:000000000040626f\n.text:0000000000406271\n.text:0000000000406273\n.text:0000000000406275\n.text:0000000000406276\n.text:000000000040627b\n.text:0000000000406280\n.text:0000000000406285\n.text:000000000040628a\n.text:000000000040628f\n.text:0000000000406294\n.text:0000000000406299\n.text:000000000040629e\n.text:00000000004062a3\n.text:00000000004062a8\n.text:00000000004062ad\n.text:00000000004062b2\n.text:00000000004062b7\n.text:00000000004062bc\n'
p125
tp126
sS'cb_exec_noop'
p127
(S'\n__stdcall cb_exec_noop(buildcmd_control * ctl, void * usercontext, char * * argv)\n'
p128
V\u000aint cb_exec_noop(buildcmd_control *ctl,void *usercontext,char **argv)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p129
S'XOR EAX,EAX\nRET\n'
p130
S'31 c0\nc3\n'
p131
S'.text:0000000000404920\n.text:0000000000404922\n'
p132
tp133
sS'safe_atoi'
p134
(S'\n__stdcall safe_atoi(char * s)\n'
p135
V\u000aint safe_atoi(char *s)\u000a\u000a{\u000a  uint uVar1;\u000a  char *in_RAX;\u000a  uint *puVar2;\u000a  long lVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  undefined8 uVar6;\u000a  ulong uVar7;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  puVar2 = (uint *)__errno_location();\u000a  *puVar2 = 0;\u000a  lVar3 = strtol(s,&local_38,10);\u000a  if (lVar3 + 0x8000000000000001U < 2) {\u000a    error(1,(ulong)*puVar2,0x40b41a,s);\u000a  }\u000a  if (lVar3 - 0x80000000U >> 0x20 == 0) {\u000a    if (*local_38 != 0) {\u000a      uVar1 = *puVar2;\u000a      uVar6 = dcgettext(0,"Unexpected suffix %s on %s",5);\u000a      pcVar4 = quotearg_n_style((char *)0x0);\u000a      pcVar5 = quotearg_n_style((char *)0x1);\u000a      error(1,(ulong)uVar1,uVar6,pcVar4,pcVar5);\u000a      goto LAB_00405212;\u000a    }\u000a    if (local_38 != s) goto LAB_00405212;\u000a    uVar1 = *puVar2;\u000a    uVar6 = dcgettext(0,"Expected an integer: %s",5);\u000a    s = quotearg_n_style((char *)0x0);\u000a    uVar7 = (ulong)uVar1;\u000a  }\u000a  else {\u000a    *puVar2 = 0x22;\u000a    uVar7 = 0x22;\u000a    uVar6 = 0x40b41a;\u000a  }\u000a  error(1,uVar7,uVar6,s);\u000aLAB_00405212:\u000a  return (int)lVar3;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15D,ESI\nMOV RBX,RDI\nCALL 0x00401940\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00401c30\nMOV R14,RAX\nMOV RAX,-0x7fffffffffffffff\nADD RAX,R14\nCMP RAX,0x1\nJA 0x0040517d\nMOV ESI,dword ptr [RBP]\nMOV EDI,0x1\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401d20\nMOV RAX,R14\nSUB RAX,0x80000000\nSHR RAX,0x20\nJZ 0x004051ae\nMOV dword ptr [RBP],0x22\nMOV EDI,0x1\nMOV ESI,0x22\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401d20\nJMP 0x00405212\nMOV RAX,qword ptr [RSP]\nCMP byte ptr [RAX],0x0\nJZ 0x0040520d\nMOV R12D,dword ptr [RBP]\nXOR EDI,EDI\nMOV ESI,0x40b3ea\nMOV EDX,0x5\nCALL 0x00401a70\nMOV R13,RAX\nMOV RDX,qword ptr [RSP]\nXOR EDI,EDI\nMOV ESI,R15D\nCALL 0x00407500\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00407500\nMOV RBX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,R13\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401d20\nJMP 0x00405212\nCMP RAX,RBX\nJZ 0x00405224\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12D,dword ptr [RBP]\nXOR EDI,EDI\nMOV ESI,0x40b405\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00407500\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nJMP 0x004051a7\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f7\n48 89 fb\ne8 0a c8 ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 e6\nba 0a 00 00 00\n48 89 df\ne8 e0 ca ff ff\n49 89 c6\n48 b8 01 00 00 00 00 00 00 80\n4c 01 f0\n48 83 f8 01\n77 17\n8b 75 00\nbf 01 00 00 00\nba 1a b4 40 00\n31 c0\n48 89 d9\ne8 a3 cb ff ff\n4c 89 f0\n48 2d 00 00 00 80\n48 c1 e8 20\n74 22\nc7 45 00 22 00 00 00\nbf 01 00 00 00\nbe 22 00 00 00\nba 1a b4 40 00\n31 c0\n48 89 d9\ne8 74 cb ff ff\neb 64\n48 8b 04 24\n80 38 00\n74 56\n44 8b 65 00\n31 ff\nbe ea b3 40 00\nba 05 00 00 00\ne8 a4 c8 ff ff\n49 89 c5\n48 8b 14 24\n31 ff\n44 89 fe\ne8 23 23 00 00\n48 89 c5\nbf 01 00 00 00\n44 89 fe\n48 89 da\ne8 10 23 00 00\n48 89 c3\nbf 01 00 00 00\n31 c0\n44 89 e6\n4c 89 ea\n48 89 e9\n49 89 d8\ne8 15 cb ff ff\neb 05\n48 39 d8\n74 12\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n44 8b 65 00\n31 ff\nbe 05 b4 40 00\nba 05 00 00 00\ne8 37 c8 ff ff\n48 89 c5\n31 ff\n44 89 fe\n48 89 da\ne8 b7 22 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 ea\ne9 49 ff ff ff\n'
p138
S'.text:0000000000405120\n.text:0000000000405121\n.text:0000000000405123\n.text:0000000000405125\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512a\n.text:000000000040512b\n.text:000000000040512e\n.text:0000000000405131\n.text:0000000000405136\n.text:0000000000405139\n.text:0000000000405140\n.text:0000000000405143\n.text:0000000000405148\n.text:000000000040514b\n.text:0000000000405150\n.text:0000000000405153\n.text:000000000040515d\n.text:0000000000405160\n.text:0000000000405164\n.text:0000000000405166\n.text:0000000000405169\n.text:000000000040516e\n.text:0000000000405173\n.text:0000000000405175\n.text:0000000000405178\n.text:000000000040517d\n.text:0000000000405180\n.text:0000000000405186\n.text:000000000040518a\n.text:000000000040518c\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a4\n.text:00000000004051a7\n.text:00000000004051ac\n.text:00000000004051ae\n.text:00000000004051b2\n.text:00000000004051b5\n.text:00000000004051b7\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c2\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051cf\n.text:00000000004051d3\n.text:00000000004051d5\n.text:00000000004051d8\n.text:00000000004051dd\n.text:00000000004051e0\n.text:00000000004051e5\n.text:00000000004051e8\n.text:00000000004051eb\n.text:00000000004051f0\n.text:00000000004051f3\n.text:00000000004051f8\n.text:00000000004051fa\n.text:00000000004051fd\n.text:0000000000405200\n.text:0000000000405203\n.text:0000000000405206\n.text:000000000040520b\n.text:000000000040520d\n.text:0000000000405210\n.text:0000000000405212\n.text:0000000000405215\n.text:0000000000405219\n.text:000000000040521a\n.text:000000000040521c\n.text:000000000040521e\n.text:0000000000405220\n.text:0000000000405222\n.text:0000000000405223\n.text:0000000000405224\n.text:0000000000405228\n.text:000000000040522a\n.text:000000000040522f\n.text:0000000000405234\n.text:0000000000405239\n.text:000000000040523c\n.text:000000000040523e\n.text:0000000000405241\n.text:0000000000405244\n.text:0000000000405249\n.text:000000000040524c\n.text:0000000000405251\n.text:0000000000405253\n.text:0000000000405256\n.text:0000000000405259\n'
p139
tp140
sS'quote_mem'
p141
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p142
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004077d0\n'
p144
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p145
S'.text:00000000004077e0\n.text:00000000004077e3\n.text:00000000004077e6\n.text:00000000004077e8\n.text:00000000004077eb\n.text:00000000004077ee\n'
p146
tp147
sS'fileno'
p148
(S'\n__stdcall fileno(FILE * __stream)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060f1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060f1b8]\n'
p151
S'ff 25 62 d5 20 00\n'
p152
S'.plt:0000000000401c50\n'
p153
tp154
sS'sigemptyset'
p155
(S'\n__stdcall sigemptyset(sigset_t * __set)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigemptyset(sigset_t *__set)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigemptyset_0060f1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060f1a0]\n'
p158
S'ff 25 7a d5 20 00\n'
p159
S'.plt:0000000000401c20\n'
p160
tp161
sS'mbrtowc'
p162
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060f0e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060f0e8]\n'
p165
S'ff 25 32 d6 20 00\n'
p166
S'.plt:0000000000401ab0\n'
p167
tp168
sS'setlocale'
p169
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060f210)();\u000a  return pcVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060f210]\n'
p172
S'ff 25 0a d5 20 00\n'
p173
S'.plt:0000000000401d00\n'
p174
tp175
sS'xextendbuf'
p176
(S'\n__stdcall xextendbuf(void * existing, size_t wanted, size_t * allocated)\n'
p177
V\u000avoid * xextendbuf(void *existing,size_t wanted,size_t *allocated)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = extendbuf(existing,wanted,allocated);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a  free(existing);\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p178
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004052b0\nTEST RAX,RAX\nJZ 0x004053b0\nPOP RBX\nRET\nMOV RDI,RBX\nCALL 0x00401920\nCALL 0x004083a0\n'
p179
S'53\n48 89 fb\ne8 07 ff ff ff\n48 85 c0\n74 02\n5b\nc3\n48 89 df\ne8 68 c5 ff ff\ne8 e3 2f 00 00\n'
p180
S'.text:00000000004053a0\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a9\n.text:00000000004053ac\n.text:00000000004053ae\n.text:00000000004053af\n.text:00000000004053b0\n.text:00000000004053b3\n.text:00000000004053b8\n'
p181
tp182
sS'c_toupper'
p183
(S'\n__stdcall c_toupper()\n'
p184
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p186
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p187
S'.text:0000000000408b00\n.text:0000000000408b03\n.text:0000000000408b06\n.text:0000000000408b09\n.text:0000000000408b0c\n'
p188
tp189
sS'fcntl'
p190
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060f088)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060f088]\n'
p193
S'ff 25 92 d6 20 00\n'
p194
S'.plt:00000000004019f0\n'
p195
tp196
sS'mbsinit'
p197
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060f288)();\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060f288]\n'
p200
S'ff 25 92 d4 20 00\n'
p201
S'.plt:0000000000401df0\n'
p202
tp203
sS'dcgettext'
p204
(S'\n__stdcall dcgettext()\n'
p205
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060f0c8)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060f0c8]\n'
p207
S'ff 25 52 d6 20 00\n'
p208
S'.plt:0000000000401a70\n'
p209
tp210
sS'set_cloexec_flag'
p211
(S'\n__stdcall set_cloexec_flag()\n'
p212
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x004086b0\nTEST EAX,EAX\nJS 0x00405409\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x0040540e\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004086b0\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x00405410\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p214
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 d7 32 00 00\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 af 32 00 00\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p215
S'.text:00000000004053c0\n.text:00000000004053c1\n.text:00000000004053c3\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d2\n.text:00000000004053d4\n.text:00000000004053d9\n.text:00000000004053db\n.text:00000000004053dd\n.text:00000000004053df\n.text:00000000004053e2\n.text:00000000004053e4\n.text:00000000004053e7\n.text:00000000004053ea\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f1\n.text:00000000004053f3\n.text:00000000004053f8\n.text:00000000004053fa\n.text:00000000004053fc\n.text:0000000000405401\n.text:0000000000405404\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540e\n.text:0000000000405410\n.text:0000000000405411\n.text:0000000000405413\n.text:0000000000405414\n'
p216
tp217
sS'quotearg_free'
p218
(S'\n__stdcall quotearg_free()\n'
p219
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060f2d0]\nCMP dword ptr [0x0060f2d8],0x2\nJC 0x004072aa\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401920\nINC RBX\nMOV EAX,dword ptr [0x0060f2d8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00407290\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60f550\nCMP RDI,RAX\nJZ 0x004072d3\nCALL 0x00401920\nMOV qword ptr [0x0060f2e0],0x100\nMOV qword ptr [0x0060f2e8],0x60f550\nMOV EAX,0x60f2e0\nCMP R14,RAX\nJZ 0x004072f0\nMOV RDI,R14\nCALL 0x00401920\nMOV qword ptr [0x0060f2d0],0x60f2e0\nMOV dword ptr [0x0060f2d8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p221
S'41 57\n41 56\n53\n4c 8b 35 54 80 20 00\n83 3d 55 80 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 88 a6 ff ff\n48 ff c3\n8b 05 37 80 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 50 f5 60 00\n48 39 c7\n74 1b\ne8 63 a6 ff ff\n48 c7 05 18 80 20 00 00 01 00 00\n48 c7 05 15 80 20 00 50 f5 60 00\nb8 e0 f2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 3b a6 ff ff\n48 c7 05 e0 7f 20 00 e0 f2 60 00\nc7 05 de 7f 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p222
S'.text:0000000000407270\n.text:0000000000407272\n.text:0000000000407274\n.text:0000000000407275\n.text:000000000040727c\n.text:0000000000407283\n.text:0000000000407285\n.text:0000000000407289\n.text:000000000040728e\n.text:0000000000407290\n.text:0000000000407293\n.text:0000000000407298\n.text:000000000040729b\n.text:00000000004072a1\n.text:00000000004072a5\n.text:00000000004072a8\n.text:00000000004072aa\n.text:00000000004072ae\n.text:00000000004072b3\n.text:00000000004072b6\n.text:00000000004072b8\n.text:00000000004072bd\n.text:00000000004072c8\n.text:00000000004072d3\n.text:00000000004072d8\n.text:00000000004072db\n.text:00000000004072dd\n.text:00000000004072e0\n.text:00000000004072e5\n.text:00000000004072f0\n.text:00000000004072fa\n.text:00000000004072fb\n.text:00000000004072fd\n.text:00000000004072ff\n'
p223
tp224
sS'mbslen'
p225
(S'\n__stdcall mbslen(char * string)\n'
p226
V\u000asize_t mbslen(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  mbuiter_multi local_50;\u000a  \u000a  sVar1 = __ctype_get_mb_cur_max();\u000a  if (1 < sVar1) {\u000a    local_50.in_shift = false;\u000a    local_50.state = 0;\u000a    local_50.next_done = false;\u000a    local_50.cur.ptr = string;\u000a    mbuiter_multi_next(&local_50);\u000a    if ((local_50.cur.wc_valid == false) || (local_50.cur.wc != 0)) {\u000a      sVar2 = 0;\u000a      do {\u000a        do {\u000a          sVar2 = sVar2 + 1;\u000a          local_50.cur.ptr = local_50.cur.ptr + local_50.cur.bytes;\u000a          local_50.next_done = false;\u000a          mbuiter_multi_next(&local_50);\u000a        } while (local_50.cur.wc_valid == false);\u000a      } while (local_50.cur.wc != 0);\u000a    }\u000a    else {\u000a      sVar2 = 0;\u000a    }\u000a    return sVar2;\u000a  }\u000a  sVar1 = strlen(string);\u000a  return sVar1;\u000a}\u000a\u000a
p227
S'PUSH R14\nPUSH RBX\nSUB RSP,0x48\nMOV RBX,RDI\nCALL 0x00401a80\nCMP RAX,0x2\nJC 0x004090ca\nMOV qword ptr [RSP + 0x18],RBX\nMOV byte ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0xc],0x0\nMOV byte ptr [RSP + 0x14],0x0\nLEA RDI,[RSP + 0x8]\nCALL 0x00406180\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x004090d9\nMOV EAX,dword ptr [RSP + 0x2c]\nTEST EAX,EAX\nJNZ 0x004090d9\nXOR EBX,EBX\nJMP 0x00409109\nMOV RDI,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nJMP 0x00401a90\nXOR EBX,EBX\nLEA R14,[RSP + 0x8]\nINC RBX\nMOV RAX,qword ptr [RSP + 0x20]\nADD qword ptr [RSP + 0x18],RAX\nMOV byte ptr [RSP + 0x14],0x0\nMOV RDI,R14\nCALL 0x00406180\nMOV EAX,dword ptr [RSP + 0x2c]\nCMP byte ptr [RSP + 0x28],0x0\nJZ 0x004090e0\nTEST EAX,EAX\nJNZ 0x004090e0\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R14\nRET\n'
p228
S'41 56\n53\n48 83 ec 48\n48 89 fb\ne8 f1 89 ff ff\n48 83 f8 02\n72 35\n48 89 5c 24 18\nc6 44 24 08 00\n48 c7 44 24 0c 00 00 00 00\nc6 44 24 14 00\n48 8d 7c 24 08\ne8 c9 d0 ff ff\n80 7c 24 28 00\n74 1b\n8b 44 24 2c\n85 c0\n75 13\n31 db\neb 3f\n48 89 df\n48 83 c4 48\n5b\n41 5e\ne9 b7 89 ff ff\n31 db\n4c 8d 74 24 08\n48 ff c3\n48 8b 44 24 20\n48 01 44 24 18\nc6 44 24 14 00\n4c 89 f7\ne8 86 d0 ff ff\n8b 44 24 2c\n80 7c 24 28 00\n74 db\n85 c0\n75 d7\n48 89 d8\n48 83 c4 48\n5b\n41 5e\nc3\n'
p229
S'.text:0000000000409080\n.text:0000000000409082\n.text:0000000000409083\n.text:0000000000409087\n.text:000000000040908a\n.text:000000000040908f\n.text:0000000000409093\n.text:0000000000409095\n.text:000000000040909a\n.text:000000000040909f\n.text:00000000004090a8\n.text:00000000004090ad\n.text:00000000004090b2\n.text:00000000004090b7\n.text:00000000004090bc\n.text:00000000004090be\n.text:00000000004090c2\n.text:00000000004090c4\n.text:00000000004090c6\n.text:00000000004090c8\n.text:00000000004090ca\n.text:00000000004090cd\n.text:00000000004090d1\n.text:00000000004090d2\n.text:00000000004090d4\n.text:00000000004090d9\n.text:00000000004090db\n.text:00000000004090e0\n.text:00000000004090e3\n.text:00000000004090e8\n.text:00000000004090ed\n.text:00000000004090f2\n.text:00000000004090f5\n.text:00000000004090fa\n.text:00000000004090fe\n.text:0000000000409103\n.text:0000000000409105\n.text:0000000000409107\n.text:0000000000409109\n.text:000000000040910c\n.text:0000000000409110\n.text:0000000000409111\n.text:0000000000409113\n'
p230
tp231
sS'quotearg_mem'
p232
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p233
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004074d0\n'
p235
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p236
S'.text:00000000004074f0\n.text:00000000004074f3\n.text:00000000004074f6\n.text:00000000004074f8\n.text:00000000004074fb\n.text:00000000004074fe\n'
p237
tp238
sS'deregister_tm_clones'
p239
(S'\n__stdcall deregister_tm_clones()\n'
p240
V\u000a/* WARNING: Removing unreachable block (ram,0x00401e75) */\u000a/* WARNING: Removing unreachable block (ram,0x00401e7f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p241
S'MOV EAX,0x60f32f\nPUSH RBP\nSUB RAX,0x60f328\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401e90\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e90\nPOP RBP\nMOV EDI,0x60f328\nJMP RAX\nPOP RBP\nRET\n'
p242
S'b8 2f f3 60 00\n55\n48 2d 28 f3 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 28 f3 60 00\nff e0\n5d\nc3\n'
p243
S'.text:0000000000401e60\n.text:0000000000401e65\n.text:0000000000401e66\n.text:0000000000401e6c\n.text:0000000000401e70\n.text:0000000000401e73\n.text:0000000000401e75\n.text:0000000000401e7a\n.text:0000000000401e7d\n.text:0000000000401e7f\n.text:0000000000401e80\n.text:0000000000401e85\n.text:0000000000401e90\n.text:0000000000401e91\n'
p244
tp245
sS'set_slot_var'
p246
(S'\n__stdcall set_slot_var()\n'
p247
V\u000avoid set_slot_var(uint uParm1)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  undefined8 uVar3;\u000a  uint *puVar4;\u000a  \u000a  iVar2 = snprintf((char *)0x0,0,"%u",(ulong)uParm1);\u000a  if (iVar2 < 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("size > 0","xargs.c",0x473,"void set_slot_var(unsigned int)");\u000a  }\u000a  __s = (char *)malloc((long)(iVar2 + 1));\u000a  if (__s != (char *)0x0) {\u000a    snprintf(__s,(long)(iVar2 + 1),"%u",(ulong)uParm1);\u000a    if (slot_var_name != (char *)0x0) {\u000a      iVar2 = setenv(slot_var_name,__s,1);\u000a      if (iVar2 < 0) {\u000a        puVar4 = (uint *)__errno_location();\u000a        uVar1 = *puVar4;\u000a        uVar3 = dcgettext(0,"failed to set environment variable %s",5);\u000a        error(0,(ulong)uVar1,uVar3,slot_var_name);\u000a      }\u000a    }\u000a    free(__s);\u000a    return;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar1 = *puVar4;\u000a  uVar3 = dcgettext(0,"unable to allocate memory",5);\u000a  error(0,(ulong)uVar1,uVar3,uVar3);\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDI\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x40a3ad\nXOR EAX,EAX\nMOV ECX,R14D\nCALL 0x00401af0\nTEST EAX,EAX\nJLE 0x0040416f\nINC EAX\nMOVSXD RBP,EAX\nMOV RDI,RBP\nCALL 0x00401c80\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404142\nMOV EDX,0x40a3ad\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RBP\nMOV ECX,R14D\nCALL 0x00401af0\nMOV RDI,qword ptr [0x0060f408]\nTEST RDI,RDI\nJZ 0x00404136\nMOV EDX,0x1\nMOV RSI,RBX\nCALL 0x00401a00\nTEST EAX,EAX\nJNS 0x00404136\nCALL 0x00401940\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a3f3\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060f408]\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401d20\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401920\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a3d9\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401d20\nMOV EDI,0x40a3b0\nMOV ESI,0x4099bb\nMOV EDX,0x473\nMOV ECX,0x40a3b9\nCALL 0x00401b20\n'
p249
S'55\n41 56\n53\n41 89 fe\n31 ff\n31 f6\nba ad a3 40 00\n31 c0\n44 89 f1\ne8 36 da ff ff\n85 c0\n0f 8e ad 00 00 00\nff c0\n48 63 e8\n48 89 ef\ne8 b1 db ff ff\n48 89 c3\n48 85 db\n74 6b\nba ad a3 40 00\n31 c0\n48 89 df\n48 89 ee\n44 89 f1\ne8 04 da ff ff\n48 8b 3d 15 b3 20 00\n48 85 ff\n74 3e\nba 01 00 00 00\n48 89 de\ne8 fb d8 ff ff\n85 c0\n79 2d\ne8 32 d8 ff ff\n8b 28\n31 ff\nbe f3 a3 40 00\nba 05 00 00 00\ne8 4f d9 ff ff\n48 89 c2\n48 8b 0d dd b2 20 00\n31 ff\n31 c0\n89 ee\ne8 ea db ff ff\n48 89 df\n5b\n41 5e\n5d\ne9 de d7 ff ff\ne8 f9 d7 ff ff\n8b 18\n31 ff\nbe d9 a3 40 00\nba 05 00 00 00\ne8 16 d9 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\n5b\n41 5e\n5d\ne9 b1 db ff ff\nbf b0 a3 40 00\nbe bb 99 40 00\nba 73 04 00 00\nb9 b9 a3 40 00\ne8 98 d9 ff ff\n'
p250
S'.text:00000000004040a0\n.text:00000000004040a1\n.text:00000000004040a3\n.text:00000000004040a4\n.text:00000000004040a7\n.text:00000000004040a9\n.text:00000000004040ab\n.text:00000000004040b0\n.text:00000000004040b2\n.text:00000000004040b5\n.text:00000000004040ba\n.text:00000000004040bc\n.text:00000000004040c2\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040cf\n.text:00000000004040d2\n.text:00000000004040d5\n.text:00000000004040d7\n.text:00000000004040dc\n.text:00000000004040de\n.text:00000000004040e1\n.text:00000000004040e4\n.text:00000000004040e7\n.text:00000000004040ec\n.text:00000000004040f3\n.text:00000000004040f6\n.text:00000000004040f8\n.text:00000000004040fd\n.text:0000000000404100\n.text:0000000000404105\n.text:0000000000404107\n.text:0000000000404109\n.text:000000000040410e\n.text:0000000000404110\n.text:0000000000404112\n.text:0000000000404117\n.text:000000000040411c\n.text:0000000000404121\n.text:0000000000404124\n.text:000000000040412b\n.text:000000000040412d\n.text:000000000040412f\n.text:0000000000404131\n.text:0000000000404136\n.text:0000000000404139\n.text:000000000040413a\n.text:000000000040413c\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404147\n.text:0000000000404149\n.text:000000000040414b\n.text:0000000000404150\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415d\n.text:000000000040415f\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404166\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416a\n.text:000000000040416f\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417e\n.text:0000000000404183\n'
p251
tp252
sS'quotearg_custom'
p253
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p254
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00407710\n'
p256
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p257
S'.text:0000000000407790\n.text:0000000000407793\n.text:0000000000407796\n.text:0000000000407799\n.text:000000000040779b\n.text:000000000040779e\n.text:00000000004077a1\n.text:00000000004077a4\n'
p258
tp259
sS'free'
p260
(S'\n__stdcall free(void * __ptr)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060f020)();\u000a  return;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060f020]\n'
p263
S'ff 25 fa d6 20 00\n'
p264
S'.plt:0000000000401920\n'
p265
tp266
sS'close'
p267
(S'\n__stdcall close(int __fd)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060f148)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060f148]\n'
p270
S'ff 25 d2 d5 20 00\n'
p271
S'.plt:0000000000401b70\n'
p272
tp273
sS'display_findutils_version'
p274
(S'\n__stdcall display_findutils_version(char * official_name)\n'
p275
V\u000avoid display_findutils_version(char *official_name)\u000a\u000a{\u000a  char *version;\u000a  FILE *stream;\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  undefined8 uVar3;\u000a  \u000a  rpl_fflush(stderr);\u000a  stream = stdout;\u000a  version = version_string;\u000a  uVar1 = dcgettext(0,"Eric B. Decker",5);\u000a  uVar2 = dcgettext(0,"James Youngman",5);\u000a  uVar3 = dcgettext(0,"Kevin Dalley",5);\u000a  version_etc(stream,official_name,"GNU findutils",version,uVar1,uVar2,uVar3,0);\u000a  return;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RDI,qword ptr [0x0060f380]\nCALL 0x00408870\nMOV R12,qword ptr [0x0060f348]\nMOV R15,qword ptr [0x0060f2c0]\nXOR EDI,EDI\nMOV ESI,0x40b3bf\nMOV EDX,0x5\nCALL 0x00401a70\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x40b3ce\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x40b3dd\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBX,RAX\nMOV EDX,0x40b3b1\nMOV EAX,0x0\nMOV RDI,R12\nMOV RSI,R14\nMOV RCX,R15\nMOV R8,R13\nMOV R9,RBP\nPUSH 0x0\nPUSH RBX\nCALL 0x004080f0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p277
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 8b 3d eb a2 20 00\ne8 d6 37 00 00\n4c 8b 25 a7 a2 20 00\n4c 8b 3d 18 a2 20 00\n31 ff\nbe bf b3 40 00\nba 05 00 00 00\ne8 b7 c9 ff ff\n49 89 c5\n31 ff\nbe ce b3 40 00\nba 05 00 00 00\ne8 a3 c9 ff ff\n48 89 c5\n31 ff\nbe dd b3 40 00\nba 05 00 00 00\ne8 8f c9 ff ff\n48 89 c3\nba b1 b3 40 00\nb8 00 00 00 00\n4c 89 e7\n4c 89 f6\n4c 89 f9\n4d 89 e8\n49 89 e9\n6a 00\n53\ne8 eb 2f 00 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p278
S'.text:0000000000405080\n.text:0000000000405081\n.text:0000000000405083\n.text:0000000000405085\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508a\n.text:000000000040508b\n.text:000000000040508e\n.text:0000000000405095\n.text:000000000040509a\n.text:00000000004050a1\n.text:00000000004050a8\n.text:00000000004050aa\n.text:00000000004050af\n.text:00000000004050b4\n.text:00000000004050b9\n.text:00000000004050bc\n.text:00000000004050be\n.text:00000000004050c3\n.text:00000000004050c8\n.text:00000000004050cd\n.text:00000000004050d0\n.text:00000000004050d2\n.text:00000000004050d7\n.text:00000000004050dc\n.text:00000000004050e1\n.text:00000000004050e4\n.text:00000000004050e9\n.text:00000000004050ee\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fa\n.text:00000000004050fd\n.text:00000000004050ff\n.text:0000000000405100\n.text:0000000000405105\n.text:0000000000405109\n.text:000000000040510a\n.text:000000000040510c\n.text:000000000040510e\n.text:0000000000405110\n.text:0000000000405112\n.text:0000000000405113\n'
p279
tp280
sS'getenv'
p281
(S'\n__stdcall getenv(char * __name)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060f018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x0060f018]\n'
p284
S'ff 25 02 d7 20 00\n'
p285
S'.plt:0000000000401910\n'
p286
tp287
sS'add_proc'
p288
(S'\n__stdcall add_proc()\n'
p289
V\u000auint add_proc(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  pid_t *ppVar2;\u000a  ulong uVar3;\u000a  size_t sVar4;\u000a  uint uVar5;\u000a  pid_t in_EDI;\u000a  \u000a  if (pids_alloc == 0) {\u000a    sVar4 = 0;\u000a    sVar1 = 0;\u000aLAB_0040400f:\u000a    if (sVar4 != sVar1) goto LAB_00404060;\u000a  }\u000a  else {\u000a    sVar4 = 0;\u000a    do {\u000a      sVar1 = pids_alloc;\u000a      if (pids[sVar4] == 0) goto LAB_0040400f;\u000a      sVar4 = (size_t)((int)sVar4 + 1);\u000a    } while (sVar4 < pids_alloc);\u000a    if (sVar4 != pids_alloc) goto LAB_00404060;\u000a  }\u000a  ppVar2 = (pid_t *)x2nrealloc(pids,&pids_alloc,4);\u000a  sVar1 = pids_alloc;\u000a  pids = ppVar2;\u000a  if (sVar4 < pids_alloc) {\u000a    uVar5 = (uint)sVar4;\u000a    uVar3 = sVar4;\u000a    pids = ppVar2;\u000a    do {\u000a      uVar5 = uVar5 + 1;\u000a      ppVar2[uVar3] = 0;\u000a      uVar3 = (ulong)uVar5;\u000a    } while (uVar3 < sVar1);\u000a  }\u000aLAB_00404060:\u000a  if (pids[sVar4] != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 == pids[i]","xargs.c",0x58b,"unsigned int add_proc(pid_t)");\u000a  }\u000a  pids[sVar4] = in_EDI;\u000a  procs_executing = procs_executing + 1;\u000a  procs_executed = 1;\u000a  return (uint)sVar4;\u000a}\u000a\u000a
p290
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060f4a8]\nTEST RAX,RAX\nJZ 0x0040400b\nMOV RDX,qword ptr [0x0060f4b0]\nMOV RCX,qword ptr [0x0060f4a8]\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RDX + RBX*0x4],0x0\nJZ 0x0040400f\nLEA EBX,[RBX + 0x1]\nCMP RBX,RCX\nMOV RAX,RCX\nJC 0x00403ff0\nMOV RAX,RCX\nCMP RBX,RAX\nJZ 0x00404014\nJMP 0x00404060\nXOR EBX,EBX\nXOR EAX,EAX\nCMP RBX,RAX\nJNZ 0x00404060\nMOV RDI,qword ptr [0x0060f4b0]\nMOV ESI,0x60f4a8\nMOV EDX,0x4\nCALL 0x00408280\nMOV qword ptr [0x0060f4b0],RAX\nMOV EAX,EBX\nCMP RAX,qword ptr [0x0060f4a8]\nJNC 0x00404060\nMOV RCX,qword ptr [0x0060f4b0]\nMOV RDX,qword ptr [0x0060f4a8]\nLEA ESI,[RBX + 0x1]\nNOP dword ptr [RAX]\nMOV dword ptr [RCX + RAX*0x4],0x0\nMOV EAX,ESI\nINC ESI\nCMP RAX,RDX\nJC 0x00404050\nMOV RAX,qword ptr [0x0060f4b0]\nCMP dword ptr [RAX + RBX*0x4],0x0\nJNZ 0x00404087\nMOV dword ptr [RAX + RBX*0x4],EBP\nINC qword ptr [0x0060f498]\nMOV byte ptr [0x0060f488],0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x40a419\nMOV ESI,0x4099bb\nMOV EDX,0x58b\nMOV ECX,0x40a426\nCALL 0x00401b20\n'
p291
S'55\n53\n50\n89 fd\n48 8b 05 dc b4 20 00\n48 85 c0\n74 3a\n48 8b 15 d8 b4 20 00\n48 8b 0d c9 b4 20 00\n31 db\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 3c 9a 00\n74 19\n8d 5b 01\n48 39 cb\n48 89 c8\n72 ef\n48 89 c8\n48 39 c3\n74 0b\neb 55\n31 db\n31 c0\n48 39 c3\n75 4c\n48 8b 3d 95 b4 20 00\nbe a8 f4 60 00\nba 04 00 00 00\ne8 56 42 00 00\n48 89 05 7f b4 20 00\n89 d8\n48 3b 05 6e b4 20 00\n73 24\n48 8b 0d 6d b4 20 00\n48 8b 15 5e b4 20 00\n8d 73 01\n0f 1f 00\nc7 04 81 00 00 00 00\n89 f0\nff c6\n48 39 d0\n72 f0\n48 8b 05 49 b4 20 00\n83 3c 98 00\n75 1a\n89 2c 98\n48 ff 05 21 b4 20 00\nc6 05 0a b4 20 00 01\n89 d8\n48 83 c4 08\n5b\n5d\nc3\nbf 19 a4 40 00\nbe bb 99 40 00\nba 8b 05 00 00\nb9 26 a4 40 00\ne8 80 da ff ff\n'
p292
S'.text:0000000000403fc0\n.text:0000000000403fc1\n.text:0000000000403fc2\n.text:0000000000403fc3\n.text:0000000000403fc5\n.text:0000000000403fcc\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd8\n.text:0000000000403fdf\n.text:0000000000403fe1\n.text:0000000000403ff0\n.text:0000000000403ff4\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffc\n.text:0000000000403fff\n.text:0000000000404001\n.text:0000000000404004\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400b\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404012\n.text:0000000000404014\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404025\n.text:000000000040402a\n.text:0000000000404031\n.text:0000000000404033\n.text:000000000040403a\n.text:000000000040403c\n.text:0000000000404043\n.text:000000000040404a\n.text:000000000040404d\n.text:0000000000404050\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405b\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404067\n.text:000000000040406b\n.text:000000000040406d\n.text:0000000000404070\n.text:0000000000404077\n.text:000000000040407e\n.text:0000000000404080\n.text:0000000000404084\n.text:0000000000404085\n.text:0000000000404086\n.text:0000000000404087\n.text:000000000040408c\n.text:0000000000404091\n.text:0000000000404096\n.text:000000000040409b\n'
p293
tp294
sS'rpl_fseeko'
p295
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p296
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060f238)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00408918\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00408918\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040892a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401d50\nMOV RDI,RBX\nCALL 0x00401c50\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401b10\nCMP RAX,-0x1\nJZ 0x00408953\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00408958\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p298
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 26 94 ff ff\n48 89 df\ne8 1e 93 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 d1 91 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p299
S'.text:00000000004088f0\n.text:00000000004088f1\n.text:00000000004088f3\n.text:00000000004088f4\n.text:00000000004088f7\n.text:00000000004088fa\n.text:00000000004088fd\n.text:0000000000408901\n.text:0000000000408905\n.text:0000000000408907\n.text:000000000040890b\n.text:000000000040890f\n.text:0000000000408911\n.text:0000000000408916\n.text:0000000000408918\n.text:000000000040891b\n.text:000000000040891e\n.text:0000000000408921\n.text:0000000000408922\n.text:0000000000408924\n.text:0000000000408925\n.text:000000000040892a\n.text:000000000040892d\n.text:0000000000408932\n.text:0000000000408934\n.text:0000000000408937\n.text:000000000040893a\n.text:000000000040893f\n.text:0000000000408943\n.text:0000000000408945\n.text:0000000000408948\n.text:000000000040894f\n.text:0000000000408951\n.text:0000000000408953\n.text:0000000000408958\n.text:0000000000408959\n.text:000000000040895b\n.text:000000000040895c\n'
p300
tp301
sS'quote_n_mem'
p302
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p303
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV ECX,0x60f2f0\nJMP 0x00407310\n'
p305
S'b9 f0 f2 60 00\ne9 36 fb ff ff\n'
p306
S'.text:00000000004077d0\n.text:00000000004077d5\n'
p307
tp308
sS'xstrdup'
p309
(S'\n__stdcall xstrdup(char * string)\n'
p310
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p311
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a90\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00408350\n'
p312
S'53\n48 89 fb\ne8 07 97 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p313
S'.text:0000000000408380\n.text:0000000000408381\n.text:0000000000408384\n.text:0000000000408389\n.text:000000000040838d\n.text:0000000000408390\n.text:0000000000408391\n'
p314
tp315
sS'c_ispunct'
p316
(S'\n__stdcall c_ispunct()\n'
p317
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p318
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00408a92\nMOV AL,0x1\nJMP qword ptr [0x40c168 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p319
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 68 c1 40 00\nc3\n31 c0\nc3\n'
p320
S'.text:0000000000408a80\n.text:0000000000408a83\n.text:0000000000408a86\n.text:0000000000408a88\n.text:0000000000408a8a\n.text:0000000000408a91\n.text:0000000000408a92\n.text:0000000000408a94\n'
p321
tp322
sS'mbsstr'
p323
(S'\n__stdcall mbsstr(char * haystack, char * needle)\n'
p324
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * mbsstr(char *haystack,char *needle)\u000a\u000a{\u000a  uchar *puVar1;\u000a  uchar *puVar2;\u000a  uchar uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  size_t needle_len;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  char *__string;\u000a  bool bVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  char *result;\u000a  mbui_iterator_t iter_needle;\u000a  mbuiter_multi local_178;\u000a  uint local_138;\u000a  undefined8 local_134;\u000a  uint local_12c;\u000a  char *local_128;\u000a  undefined4 local_120;\u000a  undefined4 uStack284;\u000a  undefined4 local_118;\u000a  int local_114;\u000a  undefined4 uStack272;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  uint local_f8;\u000a  int iStack244;\u000a  undefined4 uStack240;\u000a  uint local_ec;\u000a  char *local_e8;\u000a  undefined4 local_e0;\u000a  undefined4 uStack220;\u000a  undefined4 local_d8;\u000a  int local_d4;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  char *local_b8;\u000a  uint local_b0;\u000a  int iStack172;\u000a  undefined4 uStack168;\u000a  _Bool local_a4;\u000a  char *local_a0;\u000a  size_t local_98;\u000a  _Bool local_90;\u000a  int local_8c;\u000a  mbuiter_multi local_70;\u000a  \u000a  needle_len = __ctype_get_mb_cur_max();\u000a  if (needle_len < 2) {\u000a    uVar3 = *needle;\u000a    if (uVar3 != 0) {\u000a      if (*haystack != 0) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar7 = 0;\u000a        uVar6 = 0;\u000a        __string = needle;\u000a        do {\u000a          if ((((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) &&\u000a             (((__string == (char *)0x0 ||\u000a               (local_b8 = __string, needle_len = strnlen(__string,uVar7 - uVar9), uVar9 = uVar7,\u000a               local_b8[needle_len] == 0)) ||\u000a              (__string = local_b8 + needle_len, uVar9 = uVar7, __string == (char *)0x0)))) {\u000a            needle_len = strlen(needle);\u000a            _Var4 = knuth_morris_pratt((uchar *)haystack,(uchar *)needle,needle_len,\u000a                                       (uchar **)&local_b0);\u000a            if (_Var4 != false) {\u000a              return (char *)CONCAT44(iStack172,local_b0);\u000a            }\u000a            bVar8 = false;\u000a            __string = (char *)0x0;\u000a          }\u000a          if (*haystack == uVar3) {\u000a            lVar10 = 1;\u000a            do {\u000a              puVar1 = (uchar *)(needle + lVar10);\u000a              if (*puVar1 == 0) {\u000a                return (char *)(uchar *)haystack;\u000a              }\u000a              puVar2 = (uchar *)haystack + lVar10;\u000a              if (*puVar2 == 0) {\u000a                return (char *)0x0;\u000a              }\u000a              lVar10 = lVar10 + 1;\u000a            } while (*puVar2 == *puVar1);\u000a            uVar7 = uVar7 + lVar10;\u000a          }\u000a          else {\u000a            uVar7 = uVar7 + 1;\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          puVar1 = (uchar *)haystack + 1;\u000a          haystack = (char *)((uchar *)haystack + 1);\u000a          if (*puVar1 == 0) {\u000a            return (char *)0x0;\u000a          }\u000a        } while( true );\u000a      }\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  else {\u000a    local_b0 = local_b0 & 0xffffff00;\u000a    iStack172 = 0;\u000a    uStack168 = 0;\u000a    local_a4 = false;\u000a    local_a0 = needle;\u000a    mbuiter_multi_next((mbuiter_multi *)&local_b0);\u000a    if ((local_90 == false) || (local_8c != 0)) {\u000a      local_70.in_shift = false;\u000a      local_70.state = 0;\u000a      local_70.next_done = false;\u000a      local_138 = local_138 & 0xffffff00;\u000a      local_134 = 0;\u000a      local_12c = local_12c & 0xffffff00;\u000a      local_128 = haystack;\u000a      local_70.cur.ptr = needle;\u000a      mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a      if ((local_118._0_1_ == false) || (local_114 != 0)) {\u000a        bVar8 = true;\u000a        uVar9 = 0;\u000a        uVar6 = 0;\u000a        uVar7 = 0;\u000a        do {\u000a          if (((9 < uVar6) && (bVar8)) && (uVar6 * 5 <= uVar7)) {\u000a            if (uVar7 != uVar9) {\u000a              lVar10 = uVar9 - uVar7;\u000a              do {\u000a                mbuiter_multi_next(&local_70);\u000a                if ((local_70.cur.wc_valid != false) && (local_70.cur.wc == 0)) break;\u000a                local_70.cur.ptr = local_70.cur.ptr + local_70.cur.bytes;\u000a                local_70.next_done = false;\u000a                lVar10 = lVar10 + 1;\u000a              } while (lVar10 != 0);\u000a            }\u000a            mbuiter_multi_next(&local_70);\u000a            uVar9 = uVar7;\u000a            if ((local_70.cur.wc_valid != false) && (uVar9 = uVar7, local_70.cur.wc == 0)) {\u000a              _Var4 = knuth_morris_pratt_multibyte(haystack,needle,(char **)&local_f8);\u000a              if (_Var4 != false) {\u000a                return (char *)CONCAT44(iStack244,local_f8);\u000a              }\u000a              bVar8 = false;\u000a              uVar9 = uVar7;\u000a            }\u000a          }\u000a          uVar11 = uVar7 + 1;\u000a          if ((local_118._0_1_ == false) || (local_90 == false)) {\u000a            if ((CONCAT44(uStack284,local_120) == local_98) &&\u000a               (iVar5 = memcmp(local_128,local_a0,CONCAT44(uStack284,local_120)), iVar5 == 0))\u000a            goto LAB_0040594d;\u000a          }\u000a          else {\u000a            if (local_114 == local_8c) {\u000aLAB_0040594d:\u000a              local_c8 = local_108;\u000a              uStack196 = uStack260;\u000a              uStack192 = uStack256;\u000a              uStack188 = uStack252;\u000a              local_d8 = local_118;\u000a              local_d4 = local_114;\u000a              uStack208 = uStack272;\u000a              uStack204 = uStack268;\u000a              local_e0 = local_120;\u000a              uStack220 = uStack284;\u000a              local_f8 = local_138;\u000a              iStack244 = (int)local_134;\u000a              uStack240 = local_134._4_4_;\u000a              local_e8 = local_128 + CONCAT44(uStack284,local_120);\u000a              local_ec = local_12c & 0xffffff00;\u000a              local_178.in_shift = false;\u000a              local_178.state = 0;\u000a              local_178.next_done = false;\u000a              local_178.cur.ptr = needle;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                abort();\u000a              }\u000a              local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a              local_178.next_done = false;\u000a              mbuiter_multi_next(&local_178);\u000a              if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                return local_128;\u000a              }\u000a              uVar11 = uVar7 + 2;\u000a              do {\u000a                mbuiter_multi_next((mbuiter_multi *)&local_f8);\u000a                if ((local_d8._0_1_ != false) && (local_d4 == 0)) goto LAB_00405b13;\u000a                if ((local_178.cur.wc_valid == false) || (local_d8._0_1_ == false)) {\u000a                  if ((CONCAT44(uStack220,local_e0) != local_178.cur.bytes) ||\u000a                     (iVar5 = memcmp(local_e8,local_178.cur.ptr,CONCAT44(uStack220,local_e0)),\u000a                     iVar5 != 0)) break;\u000a                }\u000a                else {\u000a                  if (local_d4 != local_178.cur.wc) break;\u000a                }\u000a                local_e8 = local_e8 + CONCAT44(uStack220,local_e0);\u000a                local_ec = local_ec & 0xffffff00;\u000a                local_178.cur.ptr = local_178.cur.ptr + local_178.cur.bytes;\u000a                local_178.next_done = false;\u000a                mbuiter_multi_next(&local_178);\u000a                uVar11 = uVar11 + 1;\u000a                if ((local_178.cur.wc_valid != false) && (local_178.cur.wc == 0)) {\u000a                  return local_128;\u000a                }\u000a              } while( true );\u000a            }\u000a          }\u000a          uVar6 = uVar6 + 1;\u000a          local_128 = local_128 + CONCAT44(uStack284,local_120);\u000a          local_12c = local_12c & 0xffffff00;\u000a          mbuiter_multi_next((mbuiter_multi *)&local_138);\u000a          uVar7 = uVar11;\u000a        } while ((local_118._0_1_ == false) || (uVar7 = uVar11, local_114 != 0));\u000a      }\u000aLAB_00405b13:\u000a      haystack = (char *)0x0;\u000a    }\u000a  }\u000a  return haystack;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x158\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00401a80\nCMP RAX,0x2\nJC 0x00405b1b\nMOV qword ptr [0xe8 + RSP],RBX\nMOV byte ptr [0xd8 + RSP],0x0\nMOV qword ptr [0xdc + RSP],0x0\nMOV byte ptr [0xe4 + RSP],0x0\nLEA RDI,[0xd8 + RSP]\nCALL 0x00406180\nCMP byte ptr [0xf8 + RSP],0x0\nJZ 0x004057b0\nMOV EAX,dword ptr [0xfc + RSP]\nTEST EAX,EAX\nJZ 0x00405c21\nMOV qword ptr [0x128 + RSP],RBX\nMOV byte ptr [0x118 + RSP],0x0\nMOV qword ptr [0x11c + RSP],0x0\nMOV byte ptr [0x124 + RSP],0x0\nMOV qword ptr [RSP + 0x60],R14\nMOV byte ptr [RSP + 0x50],0x0\nMOV qword ptr [RSP + 0x54],0x0\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00406180\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00405809\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJZ 0x00405b13\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nXOR R15D,R15D\nXOR EBP,EBP\nMOV R13,R15\nCMP RBP,0xa\nJC 0x004058f1\nMOV R15,RBX\nMOV RBX,RBP\nMOV EAX,dword ptr [RSP + 0xc]\nAND AL,0x1\nLEA RBP,[0x118 + RSP]\nJZ 0x004058eb\nLEA RAX,[RBX + RBX*0x4]\nCMP R13,RAX\nJC 0x004058eb\nCMP R13,R12\nJZ 0x0040589a\nSUB R12,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nCALL 0x00406180\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x0040587d\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nJZ 0x0040589a\nMOV RAX,qword ptr [0x130 + RSP]\nADD qword ptr [0x128 + RSP],RAX\nMOV byte ptr [0x124 + RSP],0x0\nINC R12\nJNZ 0x00405860\nMOV RDI,RBP\nCALL 0x00406180\nCMP byte ptr [0x138 + RSP],0x0\nJZ 0x004058e8\nMOV EAX,dword ptr [0x13c + RSP]\nTEST EAX,EAX\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nJNZ 0x004058f1\nMOV RDI,R14\nMOV RSI,RBX\nLEA RDX,[0x90 + RSP]\nCALL 0x00405c60\nTEST AL,AL\nJNZ 0x00405c43\nMOV dword ptr [RSP + 0xc],0x0\nMOV R12,R13\nJMP 0x004058f1\nMOV R12,R13\nMOV RBP,RBX\nMOV RBX,R15\nLEA R15,[R13 + 0x1]\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00405920\nMOV AL,byte ptr [0xf8 + RSP]\nTEST AL,AL\nJZ 0x00405920\nMOV EAX,dword ptr [RSP + 0x74]\nCMP EAX,dword ptr [0xfc + RSP]\nJZ 0x0040594d\nJMP 0x00405ae0\nMOV RDX,qword ptr [RSP + 0x68]\nCMP RDX,qword ptr [0xf0 + RSP]\nJNZ 0x00405ae0\nMOV RDI,qword ptr [RSP + 0x60]\nMOV RSI,qword ptr [0xe8 + RSP]\nCALL 0x00401bc0\nTEST EAX,EAX\nJNZ 0x00405ae0\nMOVUPS XMM0,xmmword ptr [RSP + 0x50]\nMOVUPS XMM1,xmmword ptr [RSP + 0x60]\nMOVUPS XMM2,xmmword ptr [RSP + 0x70]\nMOVUPS XMM3,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [0xc0 + RSP],XMM3\nMOVAPS xmmword ptr [0xb0 + RSP],XMM2\nMOVAPS xmmword ptr [0xa0 + RSP],XMM1\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV qword ptr [RSP + 0x20],RBX\nMOV byte ptr [RSP + 0x10],0x0\nMOV qword ptr [RSP + 0x14],0x0\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406180\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x004059d1\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x00405c4d\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406180\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x004059fd\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJZ 0x00405c1c\nADD R13,0x2\nMOV R15,R13\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RDI,[0x90 + RSP]\nCALL 0x00406180\nMOVZX ECX,byte ptr [0xb0 + RSP]\nMOV EAX,dword ptr [0xb4 + RSP]\nTEST CL,CL\nJZ 0x00405a38\nTEST EAX,EAX\nJZ 0x00405b13\nTEST CL,CL\nSETZ CL\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00405a60\nTEST CL,CL\nJNZ 0x00405a60\nCMP EAX,dword ptr [RSP + 0x34]\nJZ 0x00405a85\nJMP 0x00405ae0\nMOV RDX,qword ptr [0xa8 + RSP]\nCMP RDX,qword ptr [RSP + 0x28]\nJNZ 0x00405ae0\nMOV RDI,qword ptr [0xa0 + RSP]\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00401bc0\nTEST EAX,EAX\nJNZ 0x00405ae0\nMOV RAX,qword ptr [0xa8 + RSP]\nADD qword ptr [0xa0 + RSP],RAX\nMOV byte ptr [0x9c + RSP],0x0\nMOV RAX,qword ptr [RSP + 0x28]\nADD qword ptr [RSP + 0x20],RAX\nMOV byte ptr [RSP + 0x1c],0x0\nLEA RDI,[RSP + 0x10]\nCALL 0x00406180\nINC R15\nCMP byte ptr [RSP + 0x30],0x0\nJZ 0x00405a10\nMOV EAX,dword ptr [RSP + 0x34]\nTEST EAX,EAX\nJNZ 0x00405a10\nJMP 0x00405c1c\nINC RBP\nMOV RAX,qword ptr [RSP + 0x68]\nADD qword ptr [RSP + 0x60],RAX\nMOV byte ptr [RSP + 0x5c],0x0\nLEA RDI,[RSP + 0x50]\nCALL 0x00406180\nCMP byte ptr [RSP + 0x70],0x0\nJZ 0x00405817\nMOV EAX,dword ptr [RSP + 0x74]\nTEST EAX,EAX\nJNZ 0x00405817\nXOR R14D,R14D\nJMP 0x00405c21\nMOV R12B,byte ptr [RBX]\nTEST R12B,R12B\nJZ 0x00405c21\nCMP byte ptr [R14],0x0\nJZ 0x00405c17\nMOV R8B,0x1\nXOR R15D,R15D\nMOV RDI,RBX\nXOR R9D,R9D\nXOR EBP,EBP\nXOR R13D,R13D\nCMP R13,0xa\nJC 0x00405bce\nMOV EAX,R8D\nAND AL,0x1\nJZ 0x00405bce\nLEA RAX,[R13 + R13*0x4]\nCMP RBP,RAX\nJC 0x00405bce\nTEST RDI,RDI\nJZ 0x00405b9e\nMOV byte ptr [RSP + 0xc],R12B\nMOV RSI,RBP\nSUB RSI,R9\nMOV R12,R8\nMOV qword ptr [0xd0 + RSP],RDI\nCALL 0x00401b60\nMOV RDI,qword ptr [0xd0 + RSP]\nMOV R8,R12\nMOV R12B,byte ptr [RSP + 0xc]\nCMP byte ptr [RDI + RAX*0x1],0x0\nMOV R9,RBP\nJZ 0x00405b9e\nADD RDI,RAX\nMOV R9,RBP\nJNZ 0x00405bce\nMOV R15,R9\nMOV RDI,RBX\nCALL 0x00401a90\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nLEA RCX,[0xd8 + RSP]\nCALL 0x00406020\nTEST AL,AL\nJNZ 0x00405c39\nXOR R8D,R8D\nXOR EDI,EDI\nMOV R9,R15\nXOR R15D,R15D\nCMP byte ptr [R14],R12B\nJNZ 0x00405c00\nMOV EAX,0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RBX + RAX*0x1]\nTEST CL,CL\nJZ 0x00405c21\nMOVZX EDX,byte ptr [R14 + RAX*0x1]\nTEST DL,DL\nJZ 0x00405c24\nINC RAX\nCMP DL,CL\nJZ 0x00405be0\nADD RBP,RAX\nJMP 0x00405c03\nINC RBP\nINC R13\nCMP byte ptr [R14 + 0x1],0x0\nLEA R14,[R14 + 0x1]\nJNZ 0x00405b42\nJMP 0x00405c24\nXOR R15D,R15D\nJMP 0x00405c24\nMOV R14,qword ptr [RSP + 0x60]\nMOV R15,R14\nMOV RAX,R15\nADD RSP,0x158\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15,qword ptr [0xd8 + RSP]\nJMP 0x00405c24\nMOV R14,qword ptr [0x90 + RSP]\nJMP 0x00405c21\nCALL 0x00401930\n'
p326
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 58 01 00 00\n48 89 f3\n49 89 fe\ne8 24 c3 ff ff\n48 83 f8 02\n0f 82 b5 03 00 00\n48 89 9c 24 e8 00 00 00\nc6 84 24 d8 00 00 00 00\n48 c7 84 24 dc 00 00 00 00 00 00 00\nc6 84 24 e4 00 00 00 00\n48 8d bc 24 d8 00 00 00\ne8 e9 09 00 00\n80 bc 24 f8 00 00 00 00\n74 0f\n8b 84 24 fc 00 00 00\n85 c0\n0f 84 71 04 00 00\n48 89 9c 24 28 01 00 00\nc6 84 24 18 01 00 00 00\n48 c7 84 24 1c 01 00 00 00 00 00 00\nc6 84 24 24 01 00 00 00\n4c 89 74 24 60\nc6 44 24 50 00\n48 c7 44 24 54 00 00 00 00\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 8a 09 00 00\n80 7c 24 70 00\n74 0c\n8b 44 24 74\n85 c0\n0f 84 0a 03 00 00\nb0 01\n89 44 24 0c\n45 31 e4\n45 31 ff\n31 ed\n4d 89 fd\n48 83 fd 0a\n0f 82 cd 00 00 00\n49 89 df\n48 89 eb\n8b 44 24 0c\n24 01\n48 8d ac 24 18 01 00 00\n0f 84 ad 00 00 00\n48 8d 04 9b\n49 39 c5\n0f 82 a0 00 00 00\n4d 39 e5\n74 4a\n4d 29 ec\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\ne8 18 09 00 00\n80 bc 24 38 01 00 00 00\n74 0b\n8b 84 24 3c 01 00 00\n85 c0\n74 1d\n48 8b 84 24 30 01 00 00\n48 01 84 24 28 01 00 00\nc6 84 24 24 01 00 00 00\n49 ff c4\n75 c6\n48 89 ef\ne8 de 08 00 00\n80 bc 24 38 01 00 00 00\n74 3c\n8b 84 24 3c 01 00 00\n85 c0\n4d 89 ec\n48 89 dd\n4c 89 fb\n75 31\n4c 89 f7\n48 89 de\n48 8d 94 24 90 00 00 00\ne8 8d 03 00 00\n84 c0\n0f 85 68 03 00 00\nc7 44 24 0c 00 00 00 00\n4d 89 ec\neb 09\n4d 89 ec\n48 89 dd\n4c 89 fb\n4d 8d 7d 01\n80 7c 24 70 00\n74 24\n8a 84 24 f8 00 00 00\n84 c0\n74 19\n8b 44 24 74\n3b 84 24 fc 00 00 00\n74 39\ne9 c7 01 00 00\n48 8b 54 24 68\n48 3b 94 24 f0 00 00 00\n0f 85 ad 01 00 00\n48 8b 7c 24 60\n48 8b b4 24 e8 00 00 00\ne8 7b c2 ff ff\n85 c0\n0f 85 93 01 00 00\n0f 10 44 24 50\n0f 10 4c 24 60\n0f 10 54 24 70\n0f 10 9c 24 80 00 00 00\n0f 29 9c 24 c0 00 00 00\n0f 29 94 24 b0 00 00 00\n0f 29 8c 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 89 5c 24 20\nc6 44 24 10 00\n48 c7 44 24 14 00 00 00 00\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 c2 07 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 7c 02 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 96 07 00 00\n80 7c 24 30 00\n74 0c\n8b 44 24 34\n85 c0\n0f 84 1f 02 00 00\n49 83 c5 02\n4d 89 ef\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d bc 24 90 00 00 00\ne8 63 07 00 00\n0f b6 8c 24 b0 00 00 00\n8b 84 24 b4 00 00 00\n84 c9\n74 08\n85 c0\n0f 84 db 00 00 00\n84 c9\n0f 94 c1\n80 7c 24 30 00\n74 1c\n84 c9\n75 18\n3b 44 24 34\n74 37\ne9 8d 00 00 00\n48 8b 94 24 a8 00 00 00\n48 3b 54 24 28\n75 71\n48 8b bc 24 a0 00 00 00\n48 8b 74 24 20\ne8 3f c1 ff ff\n85 c0\n75 5b\n48 8b 84 24 a8 00 00 00\n48 01 84 24 a0 00 00 00\nc6 84 24 9c 00 00 00 00\n48 8b 44 24 28\n48 01 44 24 20\nc6 44 24 1c 00\n48 8d 7c 24 10\ne8 ca 06 00 00\n49 ff c7\n80 7c 24 30 00\n0f 84 4c ff ff ff\n8b 44 24 34\n85 c0\n0f 85 40 ff ff ff\ne9 47 01 00 00\n48 ff c5\n48 8b 44 24 68\n48 01 44 24 60\nc6 44 24 5c 00\n48 8d 7c 24 50\ne8 84 06 00 00\n80 7c 24 70 00\n0f 84 10 fd ff ff\n8b 44 24 74\n85 c0\n0f 85 04 fd ff ff\n45 31 f6\ne9 06 01 00 00\n44 8a 23\n45 84 e4\n0f 84 fa 00 00 00\n41 80 3e 00\n0f 84 e6 00 00 00\n41 b0 01\n45 31 ff\n48 89 df\n45 31 c9\n31 ed\n45 31 ed\n49 83 fd 0a\n0f 82 82 00 00 00\n44 89 c0\n24 01\n74 7b\n4b 8d 44 ad 00\n48 39 c5\n72 71\n48 85 ff\n74 3c\n44 88 64 24 0c\n48 89 ee\n4c 29 ce\n4d 89 c4\n48 89 bc 24 d0 00 00 00\ne8 e3 bf ff ff\n48 8b bc 24 d0 00 00 00\n4d 89 e0\n44 8a 64 24 0c\n80 3c 07 00\n49 89 e9\n74 08\n48 01 c7\n49 89 e9\n75 30\n4d 89 cf\n48 89 df\ne8 e7 be ff ff\n4c 89 f7\n48 89 de\n48 89 c2\n48 8d 8c 24 d8 00 00 00\ne8 61 04 00 00\n84 c0\n75 76\n45 31 c0\n31 ff\n4d 89 f9\n45 31 ff\n45 38 26\n75 2d\nb8 01 00 00 00\n0f 1f 84 00 00 00 00 00\n0f b6 0c 03\n84 c9\n74 39\n41 0f b6 14 06\n84 d2\n74 33\n48 ff c0\n38 ca\n74 e8\n48 01 c5\neb 06\n48 ff c5\n49 ff c5\n41 80 7e 01 00\n4d 8d 76 01\n0f 85 2d ff ff ff\neb 0d\n45 31 ff\neb 08\n4c 8b 74 24 60\n4d 89 f7\n4c 89 f8\n48 81 c4 58 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8b bc 24 d8 00 00 00\neb e1\n4c 8b b4 24 90 00 00 00\neb d4\ne8 de bc ff ff\n'
p327
S'.text:0000000000405740\n.text:0000000000405741\n.text:0000000000405743\n.text:0000000000405745\n.text:0000000000405747\n.text:0000000000405749\n.text:000000000040574a\n.text:0000000000405751\n.text:0000000000405754\n.text:0000000000405757\n.text:000000000040575c\n.text:0000000000405760\n.text:0000000000405766\n.text:000000000040576e\n.text:0000000000405776\n.text:0000000000405782\n.text:000000000040578a\n.text:0000000000405792\n.text:0000000000405797\n.text:000000000040579f\n.text:00000000004057a1\n.text:00000000004057a8\n.text:00000000004057aa\n.text:00000000004057b0\n.text:00000000004057b8\n.text:00000000004057c0\n.text:00000000004057cc\n.text:00000000004057d4\n.text:00000000004057d9\n.text:00000000004057de\n.text:00000000004057e7\n.text:00000000004057ec\n.text:00000000004057f1\n.text:00000000004057f6\n.text:00000000004057fb\n.text:00000000004057fd\n.text:0000000000405801\n.text:0000000000405803\n.text:0000000000405809\n.text:000000000040580b\n.text:000000000040580f\n.text:0000000000405812\n.text:0000000000405815\n.text:0000000000405817\n.text:000000000040581a\n.text:000000000040581e\n.text:0000000000405824\n.text:0000000000405827\n.text:000000000040582a\n.text:000000000040582e\n.text:0000000000405830\n.text:0000000000405838\n.text:000000000040583e\n.text:0000000000405842\n.text:0000000000405845\n.text:000000000040584b\n.text:000000000040584e\n.text:0000000000405850\n.text:0000000000405853\n.text:0000000000405860\n.text:0000000000405863\n.text:0000000000405868\n.text:0000000000405870\n.text:0000000000405872\n.text:0000000000405879\n.text:000000000040587b\n.text:000000000040587d\n.text:0000000000405885\n.text:000000000040588d\n.text:0000000000405895\n.text:0000000000405898\n.text:000000000040589a\n.text:000000000040589d\n.text:00000000004058a2\n.text:00000000004058aa\n.text:00000000004058ac\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058b8\n.text:00000000004058bb\n.text:00000000004058be\n.text:00000000004058c0\n.text:00000000004058c3\n.text:00000000004058c6\n.text:00000000004058ce\n.text:00000000004058d3\n.text:00000000004058d5\n.text:00000000004058db\n.text:00000000004058e3\n.text:00000000004058e6\n.text:00000000004058e8\n.text:00000000004058eb\n.text:00000000004058ee\n.text:00000000004058f1\n.text:00000000004058f5\n.text:00000000004058fa\n.text:00000000004058fc\n.text:0000000000405903\n.text:0000000000405905\n.text:0000000000405907\n.text:000000000040590b\n.text:0000000000405912\n.text:0000000000405914\n.text:0000000000405920\n.text:0000000000405925\n.text:000000000040592d\n.text:0000000000405933\n.text:0000000000405938\n.text:0000000000405940\n.text:0000000000405945\n.text:0000000000405947\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405957\n.text:000000000040595c\n.text:0000000000405964\n.text:000000000040596c\n.text:0000000000405974\n.text:000000000040597c\n.text:0000000000405984\n.text:000000000040598c\n.text:0000000000405994\n.text:000000000040599c\n.text:00000000004059a1\n.text:00000000004059a6\n.text:00000000004059af\n.text:00000000004059b4\n.text:00000000004059b9\n.text:00000000004059be\n.text:00000000004059c3\n.text:00000000004059c5\n.text:00000000004059c9\n.text:00000000004059cb\n.text:00000000004059d1\n.text:00000000004059d6\n.text:00000000004059db\n.text:00000000004059e0\n.text:00000000004059e5\n.text:00000000004059ea\n.text:00000000004059ef\n.text:00000000004059f1\n.text:00000000004059f5\n.text:00000000004059f7\n.text:00000000004059fd\n.text:0000000000405a01\n.text:0000000000405a04\n.text:0000000000405a10\n.text:0000000000405a18\n.text:0000000000405a1d\n.text:0000000000405a25\n.text:0000000000405a2c\n.text:0000000000405a2e\n.text:0000000000405a30\n.text:0000000000405a32\n.text:0000000000405a38\n.text:0000000000405a3a\n.text:0000000000405a3d\n.text:0000000000405a42\n.text:0000000000405a44\n.text:0000000000405a46\n.text:0000000000405a48\n.text:0000000000405a4c\n.text:0000000000405a4e\n.text:0000000000405a60\n.text:0000000000405a68\n.text:0000000000405a6d\n.text:0000000000405a6f\n.text:0000000000405a77\n.text:0000000000405a7c\n.text:0000000000405a81\n.text:0000000000405a83\n.text:0000000000405a85\n.text:0000000000405a8d\n.text:0000000000405a95\n.text:0000000000405a9d\n.text:0000000000405aa2\n.text:0000000000405aa7\n.text:0000000000405aac\n.text:0000000000405ab1\n.text:0000000000405ab6\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac4\n.text:0000000000405ac8\n.text:0000000000405aca\n.text:0000000000405ad0\n.text:0000000000405ae0\n.text:0000000000405ae3\n.text:0000000000405ae8\n.text:0000000000405aed\n.text:0000000000405af2\n.text:0000000000405af7\n.text:0000000000405afc\n.text:0000000000405b01\n.text:0000000000405b07\n.text:0000000000405b0b\n.text:0000000000405b0d\n.text:0000000000405b13\n.text:0000000000405b16\n.text:0000000000405b1b\n.text:0000000000405b1e\n.text:0000000000405b21\n.text:0000000000405b27\n.text:0000000000405b2b\n.text:0000000000405b31\n.text:0000000000405b34\n.text:0000000000405b37\n.text:0000000000405b3a\n.text:0000000000405b3d\n.text:0000000000405b3f\n.text:0000000000405b42\n.text:0000000000405b46\n.text:0000000000405b4c\n.text:0000000000405b4f\n.text:0000000000405b51\n.text:0000000000405b53\n.text:0000000000405b58\n.text:0000000000405b5b\n.text:0000000000405b5d\n.text:0000000000405b60\n.text:0000000000405b62\n.text:0000000000405b67\n.text:0000000000405b6a\n.text:0000000000405b6d\n.text:0000000000405b70\n.text:0000000000405b78\n.text:0000000000405b7d\n.text:0000000000405b85\n.text:0000000000405b88\n.text:0000000000405b8d\n.text:0000000000405b91\n.text:0000000000405b94\n.text:0000000000405b96\n.text:0000000000405b99\n.text:0000000000405b9c\n.text:0000000000405b9e\n.text:0000000000405ba1\n.text:0000000000405ba4\n.text:0000000000405ba9\n.text:0000000000405bac\n.text:0000000000405baf\n.text:0000000000405bb2\n.text:0000000000405bba\n.text:0000000000405bbf\n.text:0000000000405bc1\n.text:0000000000405bc3\n.text:0000000000405bc6\n.text:0000000000405bc8\n.text:0000000000405bcb\n.text:0000000000405bce\n.text:0000000000405bd1\n.text:0000000000405bd3\n.text:0000000000405bd8\n.text:0000000000405be0\n.text:0000000000405be4\n.text:0000000000405be6\n.text:0000000000405be8\n.text:0000000000405bed\n.text:0000000000405bef\n.text:0000000000405bf1\n.text:0000000000405bf4\n.text:0000000000405bf6\n.text:0000000000405bf8\n.text:0000000000405bfb\n.text:0000000000405c00\n.text:0000000000405c03\n.text:0000000000405c06\n.text:0000000000405c0b\n.text:0000000000405c0f\n.text:0000000000405c15\n.text:0000000000405c17\n.text:0000000000405c1a\n.text:0000000000405c1c\n.text:0000000000405c21\n.text:0000000000405c24\n.text:0000000000405c27\n.text:0000000000405c2e\n.text:0000000000405c2f\n.text:0000000000405c31\n.text:0000000000405c33\n.text:0000000000405c35\n.text:0000000000405c37\n.text:0000000000405c38\n.text:0000000000405c39\n.text:0000000000405c41\n.text:0000000000405c43\n.text:0000000000405c4b\n.text:0000000000405c4d\n'
p328
tp329
sS'fdopendir'
p330
(S'\n__stdcall fdopendir(int __fd)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0060f248)();\u000a  return pDVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060f248]\n'
p333
S'ff 25 d2 d4 20 00\n'
p334
S'.plt:0000000000401d70\n'
p335
tp336
sS'knuth_morris_pratt_multibyte'
p337
(S'\n__stdcall knuth_morris_pratt_multibyte(char * haystack, char * needle, char * * resultp)\n'
p338
V\u000a_Bool knuth_morris_pratt_multibyte(char *haystack,char *needle,char **resultp)\u000a\u000a{\u000a  undefined8 *puVar1;\u000a  char cVar2;\u000a  long __n;\u000a  undefined8 __s1;\u000a  undefined8 __s2;\u000a  bool bVar3;\u000a  undefined uVar4;\u000a  int iVar5;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  undefined *puVar8;\u000a  size_t n;\u000a  ulong uVar9;\u000a  undefined *new_mbc;\u000a  undefined *p;\u000a  undefined auStack216 [8];\u000a  char *local_d0;\u000a  undefined local_c8 [4];\u000a  undefined8 local_c4;\u000a  undefined local_bc;\u000a  char *local_b8;\u000a  long local_b0;\u000a  char local_a8;\u000a  int local_a4;\u000a  undefined *local_88;\u000a  char **local_80;\u000a  undefined local_78 [4];\u000a  undefined8 local_74;\u000a  undefined local_6c;\u000a  char *local_68;\u000a  long local_60;\u000a  char local_58;\u000a  int local_54;\u000a  ulong local_38;\u000a  \u000a  puVar8 = auStack216;\u000a  local_38 = mbslen(needle);\u000a  if (local_38 < 0x492492492492493) {\u000a    n = local_38 * 0x38;\u000a    if (n < 0xfb0) {\u000a      uVar9 = n + 0x1f & 0xfffffffffffffff0;\u000a      puVar8 = auStack216 + -uVar9;\u000a      p = local_c8 + -uVar9;\u000a    }\u000a    else {\u000a      p = (undefined *)mmalloca(n);\u000a      if (p == (undefined *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    lVar7 = local_38 * 0x30;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x405d0e;\u000a    local_d0 = haystack;\u000a    local_80 = resultp;\u000a    local_68 = needle;\u000a    mbuiter_multi_next(local_78,puVar8[-8]);\u000a    if ((local_58 == 0) || (local_54 != 0)) {\u000a      new_mbc = p;\u000a      do {\u000a        do {\u000a          *(undefined8 *)(puVar8 + -8) = 0x405d3b;\u000a          mb_copy(new_mbc,&local_68,puVar8[-8]);\u000a          local_68 = local_68 + local_60;\u000a          local_6c = 0;\u000a          *(undefined8 *)(puVar8 + -8) = 0x405d4f;\u000a          mbuiter_multi_next(local_78,puVar8[-8]);\u000a          new_mbc = new_mbc + 0x30;\u000a        } while (local_58 == 0);\u000a      } while (local_54 != 0);\u000a    }\u000a    new_mbc = p + lVar7;\u000a    *(undefined8 *)(p + lVar7 + 8) = 1;\u000a    local_88 = new_mbc;\u000a    if (2 < local_38) {\u000a      uVar9 = 2;\u000a      lVar7 = 0;\u000a      local_88 = new_mbc;\u000a      do {\u000a        puVar1 = (undefined8 *)(p + uVar9 * 0x30 + -0x30);\u000a        cVar2 = p[uVar9 * 0x30 + -0x20];\u000a        if (cVar2 != 0) goto LAB_00405db9;\u000aLAB_00405de0:\u000a        __n = puVar1[1];\u000a        if (__n != *(long *)(p + lVar7 * 0x30 + 8)) goto LAB_00405e08;\u000a        __s1 = *puVar1;\u000a        __s2 = *(undefined8 *)(p + lVar7 * 0x30);\u000a        *(undefined8 *)(puVar8 + -8) = 0x405e00;\u000a        iVar5 = memcmp(__s1,__s2,__n,puVar8[-8]);\u000a        new_mbc = local_88;\u000a        if (iVar5 != 0) goto LAB_00405e08;\u000aLAB_00405e20:\u000a        lVar7 = lVar7 + 1;\u000a        uVar6 = uVar9 - lVar7;\u000aLAB_00405e29:\u000a        *(ulong *)(new_mbc + uVar9 * 8) = uVar6;\u000a        uVar9 = uVar9 + 1;\u000a        if (uVar9 == local_38) break;\u000a      } while( true );\u000a    }\u000a    *local_80 = (char *)0x0;\u000a    local_68 = local_d0;\u000a    local_78[0] = 0;\u000a    local_74 = 0;\u000a    local_6c = 0;\u000a    local_b8 = local_d0;\u000a    local_c8[0] = 0;\u000a    local_c4 = 0;\u000a    local_bc = 0;\u000a    *(undefined8 *)(puVar8 + -8) = 0x405e8c;\u000a    mbuiter_multi_next(local_c8,puVar8[-8]);\u000a    bVar3 = local_a8 != 0;\u000a    if ((local_a8 == 0) || (local_a4 != 0)) {\u000a      uVar9 = 0;\u000a      do {\u000a        lVar7 = uVar9 * 0x30;\u000a        if ((p[lVar7 + 0x10] == 0) || ((bool)(bVar3 ^ 1))) {\u000a          __n = *(long *)(p + lVar7 + 8);\u000a          if (__n == local_b0) {\u000a            __s1 = *(undefined8 *)(p + lVar7);\u000a            *(undefined8 *)(puVar8 + -8) = 0x405f0e;\u000a            iVar5 = memcmp(__s1,local_b8,__n,puVar8[-8]);\u000a            if (iVar5 == 0) goto LAB_00405f60;\u000a          }\u000aLAB_00405f12:\u000a          if (uVar9 == 0) {\u000a            *(undefined8 *)(puVar8 + -8) = 0x405f88;\u000a            mbuiter_multi_next(local_78,puVar8[-8]);\u000a            if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a              *(undefined8 *)(puVar8 + -8) = 0x406013;\u000a              abort(puVar8[-8]);\u000a            }\u000a            local_68 = local_68 + local_60;\u000a            local_6c = 0;\u000a            local_b8 = local_b8 + local_b0;\u000a            local_bc = 0;\u000a            uVar9 = 0;\u000a          }\u000a          else {\u000a            lVar7 = *(long *)(local_88 + uVar9 * 8);\u000a            uVar9 = uVar9 - lVar7;\u000a            while (lVar7 != 0) {\u000a              *(undefined8 *)(puVar8 + -8) = 0x405f38;\u000a              mbuiter_multi_next(local_78,puVar8[-8]);\u000a              if ((local_58 != 0) && (local_54 == 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                *(undefined8 *)(puVar8 + -8) = 0x40600e;\u000a                abort(puVar8[-8]);\u000a              }\u000a              local_68 = local_68 + local_60;\u000a              local_6c = 0;\u000a              lVar7 = lVar7 + -1;\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if (*(int *)(p + lVar7 + 0x14) != local_a4) goto LAB_00405f12;\u000aLAB_00405f60:\u000a          uVar9 = uVar9 + 1;\u000a          local_b8 = local_b8 + local_b0;\u000a          local_bc = 0;\u000a          if (uVar9 == local_38) {\u000a            *local_80 = local_68;\u000a            break;\u000a          }\u000a        }\u000a        *(undefined8 *)(puVar8 + -8) = 0x405fc1;\u000a        mbuiter_multi_next(local_c8,puVar8[-8]);\u000a        bVar3 = local_a8 != 0;\u000a      } while ((local_a8 == 0) || (local_a4 != 0));\u000a    }\u000a    *(undefined8 *)(puVar8 + -8) = 0x405ff8;\u000a    freea(p,puVar8[-8]);\u000a    uVar4 = 1;\u000a  }\u000a  else {\u000a    uVar4 = 0;\u000a  }\u000a  return (_Bool)uVar4;\u000aLAB_00405e08:\u000a  while( true ) {\u000a    if (lVar7 == 0) {\u000a      lVar7 = 0;\u000a      uVar6 = uVar9;\u000a      goto LAB_00405e29;\u000a    }\u000a    lVar7 = lVar7 - *(long *)(new_mbc + lVar7 * 8);\u000a    if (cVar2 == 0) break;\u000aLAB_00405db9:\u000a    if (p[lVar7 * 0x30 + 0x10] == 0) break;\u000a    if (*(int *)((long)puVar1 + 0x14) == *(int *)(p + lVar7 * 0x30 + 0x14)) goto LAB_00405e20;\u000a  }\u000a  goto LAB_00405de0;\u000a}\u000a\u000a
p339
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R14,RDX\nMOV R13,RSI\nMOV R12,RDI\nMOV RDI,R13\nCALL 0x00409080\nMOV RBX,RAX\nMOV RAX,0x492492492492492\nCMP RBX,RAX\nJBE 0x00405c9e\nXOR EAX,EAX\nJMP 0x00405ffa\nIMUL RDI,RBX,0x38\nCMP RDI,0xfaf\nJA 0x00405cc9\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA R15,[RAX + RDI*0x1 + 0x10]\nJMP 0x00405cda\nCALL 0x00408ef0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00405fe1\nMOV qword ptr [-0xc8 + RBP],R12\nMOV qword ptr [RBP + -0x78],R14\nMOV qword ptr [RBP + -0x30],RBX\nLEA RBX,[RBX + RBX*0x2]\nSHL RBX,0x4\nMOV qword ptr [RBP + -0x60],R13\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nLEA RDI,[RBP + -0x70]\nCALL 0x00406180\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00405d1b\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00405d60\nLEA R13,[RBP + -0x60]\nLEA R14,[RBP + -0x70]\nMOV R12,R15\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,R12\nMOV RSI,R13\nCALL 0x00409010\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RDI,R14\nCALL 0x00406180\nMOV EAX,dword ptr [RBP + -0x4c]\nADD R12,0x30\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00405d30\nTEST EAX,EAX\nJNZ 0x00405d30\nLEA RSI,[R15 + RBX*0x1]\nMOV qword ptr [R15 + RBX*0x1 + 0x8],0x1\nCMP qword ptr [RBP + -0x30],0x3\nMOV qword ptr [RBP + -0x80],RSI\nJC 0x00405e3a\nMOV R12D,0x2\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RAX,[R12 + R12*0x2]\nSHL RAX,0x4\nLEA R13,[R15 + RAX*0x1 + -0x30]\nMOVZX R14D,byte ptr [R15 + RAX*0x1 + -0x20]\nTEST R14B,R14B\nJNZ 0x00405db9\nJMP 0x00405de0\nSUB RBX,qword ptr [RSI + RBX*0x8]\nTEST R14B,R14B\nJZ 0x00405de0\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP byte ptr [R15 + RAX*0x1 + 0x10],0x0\nJZ 0x00405de0\nMOV ECX,dword ptr [R13 + 0x14]\nCMP ECX,dword ptr [R15 + RAX*0x1 + 0x14]\nJNZ 0x00405e08\nJMP 0x00405e20\nMOV RDX,qword ptr [R13 + 0x8]\nLEA RAX,[RBX + RBX*0x2]\nSHL RAX,0x4\nCMP RDX,qword ptr [R15 + RAX*0x1 + 0x8]\nJNZ 0x00405e08\nMOV RDI,qword ptr [R13]\nMOV RSI,qword ptr [R15 + RAX*0x1]\nCALL 0x00401bc0\nMOV RSI,qword ptr [RBP + -0x80]\nTEST EAX,EAX\nJZ 0x00405e20\nTEST RBX,RBX\nJNZ 0x00405db0\nXOR EBX,EBX\nMOV RAX,R12\nJMP 0x00405e29\nINC RBX\nMOV RAX,R12\nSUB RAX,RBX\nMOV qword ptr [RSI + R12*0x8],RAX\nINC R12\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x00405d90\nMOV RAX,qword ptr [RBP + -0x78]\nMOV qword ptr [RAX],0x0\nMOV RAX,qword ptr [-0xc8 + RBP]\nMOV qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x70],0x0\nMOV qword ptr [RBP + -0x6c],0x0\nMOV byte ptr [RBP + -0x64],0x0\nMOV qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xc0 + RBP],0x0\nMOV qword ptr [-0xbc + RBP],0x0\nMOV byte ptr [-0xb4 + RBP],0x0\nLEA RDI,[-0xc0 + RBP]\nCALL 0x00406180\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x00405ea6\nTEST EAX,EAX\nJZ 0x00405ff0\nXOR R12D,R12D\nLEA R14,[-0xc0 + RBP]\nLEA R13,[RBP + -0x70]\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RSI,[R12 + R12*0x2]\nSHL RSI,0x4\nCMP byte ptr [R15 + RSI*0x1 + 0x10],0x0\nJZ 0x00405ef0\nXOR CL,0x1\nTEST CL,0x1\nJNZ 0x00405ef0\nCMP dword ptr [R15 + RSI*0x1 + 0x14],EAX\nJNZ 0x00405f12\nJMP 0x00405f60\nMOV RDX,qword ptr [R15 + RSI*0x1 + 0x8]\nCMP RDX,qword ptr [-0xa8 + RBP]\nJNZ 0x00405f12\nMOV RDI,qword ptr [R15 + RSI*0x1]\nMOV RSI,qword ptr [-0xb0 + RBP]\nCALL 0x00401bc0\nTEST EAX,EAX\nJZ 0x00405f60\nTEST R12,R12\nJZ 0x00405f80\nMOV RAX,qword ptr [RBP + -0x80]\nMOV RBX,qword ptr [RAX + R12*0x8]\nSUB R12,RBX\nTEST RBX,RBX\nJZ 0x00405fb9\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R13\nCALL 0x00406180\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00405f49\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x00406009\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nDEC RBX\nJNZ 0x00405f30\nJMP 0x00405fb9\nINC R12\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nCMP R12,qword ptr [RBP + -0x30]\nJNZ 0x00405fb9\nJMP 0x00405fe5\nMOV RDI,R13\nCALL 0x00406180\nCMP byte ptr [RBP + -0x50],0x0\nJZ 0x00405f95\nMOV EAX,dword ptr [RBP + -0x4c]\nTEST EAX,EAX\nJZ 0x0040600e\nMOV RAX,qword ptr [RBP + -0x58]\nADD qword ptr [RBP + -0x60],RAX\nMOV byte ptr [RBP + -0x64],0x0\nMOV RAX,qword ptr [-0xa8 + RBP]\nADD qword ptr [-0xb0 + RBP],RAX\nMOV byte ptr [-0xb4 + RBP],0x0\nXOR R12D,R12D\nMOV RDI,R14\nCALL 0x00406180\nCMP byte ptr [-0xa0 + RBP],0x0\nSETNZ CL\nMOV EAX,dword ptr [-0x9c + RBP]\nJZ 0x00405ec0\nTEST EAX,EAX\nJNZ 0x00405ec0\nJMP 0x00405ff0\nXOR EAX,EAX\nJMP 0x00405ffa\nMOV RAX,qword ptr [RBP + -0x60]\nMOV RCX,qword ptr [RBP + -0x78]\nMOV qword ptr [RCX],RAX\nMOV RDI,R15\nCALL 0x00408f70\nMOV AL,0x1\nLEA RSP,[RBP + -0x28]\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401930\nCALL 0x00401930\n'
p340
S'55\n48 89 e5\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 d6\n49 89 f5\n49 89 fc\n4c 89 ef\ne8 fb 33 00 00\n48 89 c3\n48 b8 92 24 49 92 24 49 92 04\n48 39 c3\n76 07\n31 c0\ne9 5c 03 00 00\n48 6b fb 38\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n4c 8d 7c 38 10\neb 11\ne8 22 32 00 00\n49 89 c7\n4d 85 ff\n0f 84 07 03 00 00\n4c 89 a5 38 ff ff ff\n4c 89 75 88\n48 89 5d d0\n48 8d 1c 5b\n48 c1 e3 04\n4c 89 6d a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 8d 7d 90\ne8 72 04 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 45\n4c 8d 6d a0\n4c 8d 75 90\n4d 89 fc\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 e7\n4c 89 ee\ne8 d5 32 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n4c 89 f7\ne8 31 04 00 00\n8b 45 b4\n49 83 c4 30\n80 7d b0 00\n74 d4\n85 c0\n75 d0\n49 8d 34 1f\n49 c7 44 1f 08 01 00 00 00\n48 83 7d d0 03\n48 89 75 80\n0f 82 be 00 00 00\n41 bc 02 00 00 00\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 04 64\n48 c1 e0 04\n4d 8d 6c 07 d0\n45 0f b6 74 07 e0\n45 84 f6\n75 11\neb 36\n48 2b 1c de\n45 84 f6\n74 27\n48 8d 04 5b\n48 c1 e0 04\n41 80 7c 07 10 00\n74 17\n41 8b 4d 14\n41 3b 4c 07 14\n75 34\neb 4a\n49 8b 55 08\n48 8d 04 5b\n48 c1 e0 04\n49 3b 54 07 08\n75 15\n49 8b 7d 00\n49 8b 34 07\ne8 c0 bd ff ff\n48 8b 75 80\n85 c0\n74 18\n48 85 db\n75 a3\n31 db\n4c 89 e0\neb 15\n48 ff c3\n4c 89 e0\n48 29 d8\n4a 89 04 e6\n49 ff c4\n4c 3b 65 d0\n0f 85 56 ff ff ff\n48 8b 45 88\n48 c7 00 00 00 00 00\n48 8b 85 38 ff ff ff\n48 89 45 a0\nc6 45 90 00\n48 c7 45 94 00 00 00 00\nc6 45 9c 00\n48 89 85 50 ff ff ff\nc6 85 40 ff ff ff 00\n48 c7 85 44 ff ff ff 00 00 00 00\nc6 85 4c ff ff ff 00\n48 8d bd 40 ff ff ff\ne8 f4 02 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n74 08\n85 c0\n0f 84 4a 01 00 00\n45 31 e4\n4c 8d b5 40 ff ff ff\n4c 8d 6d 90\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 34 64\n48 c1 e6 04\n41 80 7c 37 10 00\n74 20\n80 f1 01\nf6 c1 01\n75 18\n41 39 44 37 14\n75 33\neb 7f\n49 8b 54 37 08\n48 3b 95 58 ff ff ff\n75 14\n49 8b 3c 37\n48 8b b5 50 ff ff ff\ne8 b2 bc ff ff\n85 c0\n74 4e\n4d 85 e4\n74 69\n48 8b 45 80\n4a 8b 1c e0\n49 29 dc\n48 85 db\n0f 84 8e 00 00 00\n0f 1f 44 00 00\n4c 89 ef\ne8 48 02 00 00\n80 7d b0 00\n74 0b\n8b 45 b4\n85 c0\n0f 84 c0 00 00 00\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 ff cb\n75 d6\neb 5d\n49 ff c4\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n4c 3b 65 d0\n75 3b\neb 65\n4c 89 ef\ne8 f8 01 00 00\n80 7d b0 00\n74 07\n8b 45 b4\n85 c0\n74 79\n48 8b 45 a8\n48 01 45 a0\nc6 45 9c 00\n48 8b 85 58 ff ff ff\n48 01 85 50 ff ff ff\nc6 85 4c ff ff ff 00\n45 31 e4\n4c 89 f7\ne8 bf 01 00 00\n80 bd 60 ff ff ff 00\n0f 95 c1\n8b 85 64 ff ff ff\n0f 84 e9 fe ff ff\n85 c0\n0f 85 e1 fe ff ff\neb 0f\n31 c0\neb 15\n48 8b 45 a0\n48 8b 4d 88\n48 89 01\n4c 89 ff\ne8 78 2f 00 00\nb0 01\n48 8d 65 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 22 b9 ff ff\ne8 1d b9 ff ff\n'
p341
S'.text:0000000000405c60\n.text:0000000000405c61\n.text:0000000000405c64\n.text:0000000000405c66\n.text:0000000000405c68\n.text:0000000000405c6a\n.text:0000000000405c6c\n.text:0000000000405c6d\n.text:0000000000405c74\n.text:0000000000405c77\n.text:0000000000405c7a\n.text:0000000000405c7d\n.text:0000000000405c80\n.text:0000000000405c85\n.text:0000000000405c88\n.text:0000000000405c92\n.text:0000000000405c95\n.text:0000000000405c97\n.text:0000000000405c99\n.text:0000000000405c9e\n.text:0000000000405ca2\n.text:0000000000405ca9\n.text:0000000000405cab\n.text:0000000000405cae\n.text:0000000000405cb2\n.text:0000000000405cb6\n.text:0000000000405cb9\n.text:0000000000405cbc\n.text:0000000000405cbf\n.text:0000000000405cc2\n.text:0000000000405cc7\n.text:0000000000405cc9\n.text:0000000000405cce\n.text:0000000000405cd1\n.text:0000000000405cd4\n.text:0000000000405cda\n.text:0000000000405ce1\n.text:0000000000405ce5\n.text:0000000000405ce9\n.text:0000000000405ced\n.text:0000000000405cf1\n.text:0000000000405cf5\n.text:0000000000405cf9\n.text:0000000000405d01\n.text:0000000000405d05\n.text:0000000000405d09\n.text:0000000000405d0e\n.text:0000000000405d12\n.text:0000000000405d14\n.text:0000000000405d17\n.text:0000000000405d19\n.text:0000000000405d1b\n.text:0000000000405d1f\n.text:0000000000405d23\n.text:0000000000405d26\n.text:0000000000405d30\n.text:0000000000405d33\n.text:0000000000405d36\n.text:0000000000405d3b\n.text:0000000000405d3f\n.text:0000000000405d43\n.text:0000000000405d47\n.text:0000000000405d4a\n.text:0000000000405d4f\n.text:0000000000405d52\n.text:0000000000405d56\n.text:0000000000405d5a\n.text:0000000000405d5c\n.text:0000000000405d5e\n.text:0000000000405d60\n.text:0000000000405d64\n.text:0000000000405d6d\n.text:0000000000405d72\n.text:0000000000405d76\n.text:0000000000405d7c\n.text:0000000000405d82\n.text:0000000000405d84\n.text:0000000000405d90\n.text:0000000000405d94\n.text:0000000000405d98\n.text:0000000000405d9d\n.text:0000000000405da3\n.text:0000000000405da6\n.text:0000000000405da8\n.text:0000000000405db0\n.text:0000000000405db4\n.text:0000000000405db7\n.text:0000000000405db9\n.text:0000000000405dbd\n.text:0000000000405dc1\n.text:0000000000405dc7\n.text:0000000000405dc9\n.text:0000000000405dcd\n.text:0000000000405dd2\n.text:0000000000405dd4\n.text:0000000000405de0\n.text:0000000000405de4\n.text:0000000000405de8\n.text:0000000000405dec\n.text:0000000000405df1\n.text:0000000000405df3\n.text:0000000000405df7\n.text:0000000000405dfb\n.text:0000000000405e00\n.text:0000000000405e04\n.text:0000000000405e06\n.text:0000000000405e08\n.text:0000000000405e0b\n.text:0000000000405e0d\n.text:0000000000405e0f\n.text:0000000000405e12\n.text:0000000000405e20\n.text:0000000000405e23\n.text:0000000000405e26\n.text:0000000000405e29\n.text:0000000000405e2d\n.text:0000000000405e30\n.text:0000000000405e34\n.text:0000000000405e3a\n.text:0000000000405e3e\n.text:0000000000405e45\n.text:0000000000405e4c\n.text:0000000000405e50\n.text:0000000000405e54\n.text:0000000000405e5c\n.text:0000000000405e60\n.text:0000000000405e67\n.text:0000000000405e6e\n.text:0000000000405e79\n.text:0000000000405e80\n.text:0000000000405e87\n.text:0000000000405e8c\n.text:0000000000405e93\n.text:0000000000405e96\n.text:0000000000405e9c\n.text:0000000000405e9e\n.text:0000000000405ea0\n.text:0000000000405ea6\n.text:0000000000405ea9\n.text:0000000000405eb0\n.text:0000000000405eb4\n.text:0000000000405ec0\n.text:0000000000405ec4\n.text:0000000000405ec8\n.text:0000000000405ece\n.text:0000000000405ed0\n.text:0000000000405ed3\n.text:0000000000405ed6\n.text:0000000000405ed8\n.text:0000000000405edd\n.text:0000000000405edf\n.text:0000000000405ef0\n.text:0000000000405ef5\n.text:0000000000405efc\n.text:0000000000405efe\n.text:0000000000405f02\n.text:0000000000405f09\n.text:0000000000405f0e\n.text:0000000000405f10\n.text:0000000000405f12\n.text:0000000000405f15\n.text:0000000000405f17\n.text:0000000000405f1b\n.text:0000000000405f1f\n.text:0000000000405f22\n.text:0000000000405f25\n.text:0000000000405f2b\n.text:0000000000405f30\n.text:0000000000405f33\n.text:0000000000405f38\n.text:0000000000405f3c\n.text:0000000000405f3e\n.text:0000000000405f41\n.text:0000000000405f43\n.text:0000000000405f49\n.text:0000000000405f4d\n.text:0000000000405f51\n.text:0000000000405f55\n.text:0000000000405f58\n.text:0000000000405f5a\n.text:0000000000405f60\n.text:0000000000405f63\n.text:0000000000405f6a\n.text:0000000000405f71\n.text:0000000000405f78\n.text:0000000000405f7c\n.text:0000000000405f7e\n.text:0000000000405f80\n.text:0000000000405f83\n.text:0000000000405f88\n.text:0000000000405f8c\n.text:0000000000405f8e\n.text:0000000000405f91\n.text:0000000000405f93\n.text:0000000000405f95\n.text:0000000000405f99\n.text:0000000000405f9d\n.text:0000000000405fa1\n.text:0000000000405fa8\n.text:0000000000405faf\n.text:0000000000405fb6\n.text:0000000000405fb9\n.text:0000000000405fbc\n.text:0000000000405fc1\n.text:0000000000405fc8\n.text:0000000000405fcb\n.text:0000000000405fd1\n.text:0000000000405fd7\n.text:0000000000405fd9\n.text:0000000000405fdf\n.text:0000000000405fe1\n.text:0000000000405fe3\n.text:0000000000405fe5\n.text:0000000000405fe9\n.text:0000000000405fed\n.text:0000000000405ff0\n.text:0000000000405ff3\n.text:0000000000405ff8\n.text:0000000000405ffa\n.text:0000000000405ffe\n.text:0000000000405fff\n.text:0000000000406001\n.text:0000000000406003\n.text:0000000000406005\n.text:0000000000406007\n.text:0000000000406008\n.text:0000000000406009\n.text:000000000040600e\n'
p342
tp343
sS'fprintf'
p344
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_0060f198)();\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060f198]\n'
p347
S'ff 25 82 d5 20 00\n'
p348
S'.plt:0000000000401c10\n'
p349
tp350
sS'extendbuf'
p351
(S'\n__stdcall extendbuf(void * existing, size_t wanted, size_t * allocated)\n'
p352
V\u000avoid * extendbuf(void *existing,size_t wanted,size_t *allocated)\u000a\u000a{\u000a  int iVar1;\u000a  size_t current;\u000a  int *piVar2;\u000a  size_t __size;\u000a  \u000a  piVar2 = __errno_location();\u000a  if (wanted == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("wanted > 0u","extendbuf.c",0x47,"void *extendbuf(void *, size_t, size_t *)");\u000a  }\u000a  iVar1 = *piVar2;\u000a  current = *allocated;\u000a  __size = decide_size(current,wanted);\u000a  if (current == 0) {\u000a    if (existing != (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("NULL == existing","extendbuf.c",0x4f,\u000a                    "void *extendbuf(void *, size_t, size_t *)");\u000a    }\u000a    *allocated = __size;\u000a    existing = malloc(__size);\u000a  }\u000a  else {\u000a    if (__size != current) {\u000a      *allocated = __size;\u000a      existing = realloc(existing,__size);\u000a    }\u000a  }\u000a  if (existing == (void *)0x0) {\u000a    existing = (void *)0x0;\u000a  }\u000a  else {\u000a    *piVar2 = iVar1;\u000a  }\u000a  return existing;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R13,RSI\nMOV R12,RDI\nCALL 0x00401940\nMOV R14,RAX\nTEST R13,R13\nJZ 0x00405336\nMOV EBP,dword ptr [R14]\nMOV RBX,qword ptr [R15]\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x00405370\nTEST RBX,RBX\nJZ 0x00405304\nCMP RAX,RBX\nJZ 0x00405317\nMOV qword ptr [R15],RAX\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00401ce0\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x0040531c\nJMP 0x00405321\nTEST R12,R12\nJNZ 0x0040534f\nMOV qword ptr [R15],RAX\nMOV RDI,RAX\nCALL 0x00401c80\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00405321\nMOV dword ptr [R14],EBP\nJMP 0x00405324\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b557\nMOV ESI,0x40b563\nMOV EDX,0x47\nMOV ECX,0x40b56f\nCALL 0x00401b20\nMOV EDI,0x40b599\nMOV ESI,0x40b563\nMOV EDX,0x4f\nMOV ECX,0x40b56f\nCALL 0x00401b20\n'
p354
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n49 89 f5\n49 89 fc\ne8 77 c6 ff ff\n49 89 c6\n4d 85 ed\n74 65\n41 8b 2e\n49 8b 1f\n48 89 df\n4c 89 ee\ne8 8e 00 00 00\n48 85 db\n74 1d\n48 39 d8\n74 2b\n49 89 07\n4c 89 e7\n48 89 c6\ne8 e6 c9 ff ff\n49 89 c4\n4d 85 e4\n75 1a\neb 1d\n4d 85 e4\n75 46\n49 89 07\n48 89 c7\ne8 6c c9 ff ff\n49 89 c4\n4d 85 e4\n74 05\n41 89 2e\neb 03\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 57 b5 40 00\nbe 63 b5 40 00\nba 47 00 00 00\nb9 6f b5 40 00\ne8 d1 c7 ff ff\nbf 99 b5 40 00\nbe 63 b5 40 00\nba 4f 00 00 00\nb9 6f b5 40 00\ne8 b8 c7 ff ff\n'
p355
S'.text:00000000004052b0\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052b9\n.text:00000000004052ba\n.text:00000000004052bb\n.text:00000000004052be\n.text:00000000004052c1\n.text:00000000004052c4\n.text:00000000004052c9\n.text:00000000004052cc\n.text:00000000004052cf\n.text:00000000004052d1\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052da\n.text:00000000004052dd\n.text:00000000004052e2\n.text:00000000004052e5\n.text:00000000004052e7\n.text:00000000004052ea\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f2\n.text:00000000004052f5\n.text:00000000004052fa\n.text:00000000004052fd\n.text:0000000000405300\n.text:0000000000405302\n.text:0000000000405304\n.text:0000000000405307\n.text:0000000000405309\n.text:000000000040530c\n.text:000000000040530f\n.text:0000000000405314\n.text:0000000000405317\n.text:000000000040531a\n.text:000000000040531c\n.text:000000000040531f\n.text:0000000000405321\n.text:0000000000405324\n.text:0000000000405327\n.text:000000000040532b\n.text:000000000040532c\n.text:000000000040532e\n.text:0000000000405330\n.text:0000000000405332\n.text:0000000000405334\n.text:0000000000405335\n.text:0000000000405336\n.text:000000000040533b\n.text:0000000000405340\n.text:0000000000405345\n.text:000000000040534a\n.text:000000000040534f\n.text:0000000000405354\n.text:0000000000405359\n.text:000000000040535e\n.text:0000000000405363\n'
p356
tp357
sS'fscanf'
p358
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060f138)();\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0060f138]\n'
p361
S'ff 25 e2 d5 20 00\n'
p362
S'.plt:0000000000401b50\n'
p363
tp364
sS'memcpy'
p365
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060f1b0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060f1b0]\n'
p368
S'ff 25 6a d5 20 00\n'
p369
S'.plt:0000000000401c40\n'
p370
tp371
sS'close_stdout_set_ignore_EPIPE'
p372
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p373
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p374
S'MOV byte ptr [0x0060f4f8],DIL\nRET\n'
p375
S'40 88 3d d1 9f 20 00\nc3\n'
p376
S'.text:0000000000405520\n.text:0000000000405527\n'
p377
tp378
sS'_IO_getc'
p379
(S'\n__stdcall _IO_getc(_IO_FILE * __fp)\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_getc(_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_getc_0060f1e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060f1e0]\n'
p382
S'ff 25 3a d5 20 00\n'
p383
S'.plt:0000000000401ca0\n'
p384
tp385
sS'iswprint'
p386
(S'\n__stdcall iswprint(wint_t __wc)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060f290)();\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x0060f290]\n'
p389
S'ff 25 8a d4 20 00\n'
p390
S'.plt:0000000000401e00\n'
p391
tp392
sS'c_isspace'
p393
(S'\n__stdcall c_isspace()\n'
p394
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p395
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00408ab5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p396
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p397
S'.text:0000000000408aa0\n.text:0000000000408aa3\n.text:0000000000408aa6\n.text:0000000000408aa8\n.text:0000000000408aad\n.text:0000000000408aaf\n.text:0000000000408ab1\n.text:0000000000408ab4\n.text:0000000000408ab5\n.text:0000000000408ab7\n'
p398
tp399
sS'find_first_leak_callback'
p400
(S'\n__stdcall find_first_leak_callback(void * context)\n'
p401
V\u000aint find_first_leak_callback(void *context)\u000a\u000a{\u000a  int *piVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  ulong uVar5;\u000a  long *in_RSI;\u000a  \u000a  iVar2 = (int)context;\u000a  iVar3 = fd_is_cloexec();\u000a  iVar4 = 0;\u000a  if (iVar3 == 0) {\u000a    uVar5 = in_RSI[2];\u000a    if (uVar5 < (ulong)in_RSI[1]) {\u000a      do {\u000a        piVar1 = (int *)(*in_RSI + uVar5 * 4);\u000a        if (iVar2 <= *piVar1) {\u000a          if (*piVar1 == iVar2) {\u000a            return 0;\u000a          }\u000a          break;\u000a        }\u000a        uVar5 = uVar5 + 1;\u000a        in_RSI[2] = uVar5;\u000a      } while (uVar5 < (ulong)in_RSI[1]);\u000a    }\u000a    *(int *)(in_RSI + 3) = iVar2;\u000a    iVar4 = -1;\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p402
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00405000\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nJNZ 0x0040506e\nMOV RCX,qword ptr [RBX + 0x10]\nCMP RCX,qword ptr [RBX + 0x8]\nJNC 0x00405066\nMOV RDX,qword ptr [RBX]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RDX + RCX*0x4],EBP\nJGE 0x00405064\nINC RCX\nMOV qword ptr [RBX + 0x10],RCX\nCMP RCX,qword ptr [RBX + 0x8]\nJC 0x00405050\nJMP 0x00405066\nJZ 0x0040506e\nMOV dword ptr [RBX + 0x18],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p403
S'55\n53\n50\n48 89 f3\n89 fd\ne8 d3 ff ff ff\n89 c1\n31 c0\n85 c9\n75 39\n48 8b 4b 10\n48 3b 4b 08\n73 27\n48 8b 13\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n39 2c 8a\n7d 0f\n48 ff c1\n48 89 4b 10\n48 3b 4b 08\n72 ee\neb 02\n74 08\n89 6b 18\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n'
p404
S'.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405022\n.text:0000000000405023\n.text:0000000000405026\n.text:0000000000405028\n.text:000000000040502d\n.text:000000000040502f\n.text:0000000000405031\n.text:0000000000405033\n.text:0000000000405035\n.text:0000000000405039\n.text:000000000040503d\n.text:000000000040503f\n.text:0000000000405042\n.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405058\n.text:000000000040505c\n.text:0000000000405060\n.text:0000000000405062\n.text:0000000000405064\n.text:0000000000405066\n.text:0000000000405069\n.text:000000000040506e\n.text:0000000000405072\n.text:0000000000405073\n.text:0000000000405074\n'
p405
tp406
sS'open'
p407
(S'\n__stdcall open(char * __file, int __oflag)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060f230)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060f230]\n'
p410
S'ff 25 ea d4 20 00\n'
p411
S'.plt:0000000000401d40\n'
p412
tp413
sS'quotearg_n_custom_mem'
p414
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p415
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060f540]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060f530]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f520]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f510]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406480\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407310\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p417
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 07 7e 20 00\n48 89 44 24 30\n0f 10 05 eb 7d 20 00\n0f 29 44 24 20\n0f 10 05 cf 7d 20 00\n0f 29 44 24 10\n0f 10 05 b3 7d 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p418
S'.text:0000000000407720\n.text:0000000000407721\n.text:0000000000407723\n.text:0000000000407725\n.text:0000000000407726\n.text:000000000040772a\n.text:000000000040772d\n.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407739\n.text:000000000040773e\n.text:0000000000407745\n.text:000000000040774a\n.text:0000000000407751\n.text:0000000000407756\n.text:000000000040775d\n.text:0000000000407761\n.text:0000000000407764\n.text:0000000000407767\n.text:000000000040776c\n.text:000000000040776e\n.text:0000000000407771\n.text:0000000000407774\n.text:0000000000407777\n.text:000000000040777c\n.text:0000000000407780\n.text:0000000000407781\n.text:0000000000407783\n.text:0000000000407785\n.text:0000000000407786\n'
p419
tp420
sS'_init'
p421
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p422
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060eff8;\u000a  if (PTR___gmon_start___0060eff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060eff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060eff8]\nTEST RAX,RAX\nJZ 0x004018fa\nCALL RAX\nADD RSP,0x8\nRET\n'
p424
S'48 83 ec 08\n48 8b 05 05 d7 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p425
S'.init:00000000004018e8\n.init:00000000004018ec\n.init:00000000004018f3\n.init:00000000004018f6\n.init:00000000004018f8\n.init:00000000004018fa\n.init:00000000004018fe\n'
p426
tp427
sS'close_stdin_set_file_name'
p428
(S'\n__stdcall close_stdin_set_file_name(char * file)\n'
p429
V\u000avoid close_stdin_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p430
S'MOV qword ptr [0x0060f4e8],RDI\nRET\n'
p431
S'48 89 3d b1 a0 20 00\nc3\n'
p432
S'.text:0000000000405430\n.text:0000000000405437\n'
p433
tp434
sS'set_quoting_flags'
p435
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p436
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'TEST RDI,RDI\nMOV ECX,0x60f510\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p438
S'48 85 ff\nb9 10 f5 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p439
S'.text:0000000000406460\n.text:0000000000406463\n.text:0000000000406468\n.text:000000000040646c\n.text:000000000040646f\n.text:0000000000406472\n'
p440
tp441
sS'realloc'
p442
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060f200)();\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060f200]\n'
p445
S'ff 25 1a d5 20 00\n'
p446
S'.plt:0000000000401ce0\n'
p447
tp448
sS'get_proc_max_fd'
p449
(S'\n__stdcall get_proc_max_fd()\n'
p450
V\u000aint get_proc_max_fd(void)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  DIR *__dirp;\u000a  uint *puVar4;\u000a  dirent *pdVar5;\u000a  char *pcVar6;\u000a  int iVar7;\u000a  \u000a  __dirp = opendir_safer("/proc/self/fd");\u000a  if (__dirp != (DIR *)0x0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    *puVar4 = 0;\u000a    pdVar5 = readdir((DIR *)__dirp);\u000a    if (pdVar5 == (dirent *)0x0) {\u000a      iVar7 = -1;\u000a      bVar2 = false;\u000a    }\u000a    else {\u000a      bVar2 = false;\u000a      iVar7 = -1;\u000a      do {\u000a        if ((pdVar5->d_name[0] == '.') &&\u000a           ((pdVar5->d_name[1] == 0 || ((pdVar5->d_name[1] == '.' && (pdVar5->d_name[2] == 0)))))) {\u000a          *puVar4 = 0;\u000a          pdVar5 = readdir((DIR *)__dirp);\u000a        }\u000a        else {\u000a          iVar3 = safe_atoi(pdVar5->d_name);\u000a          if (iVar7 <= iVar3) {\u000a            iVar7 = iVar3;\u000a          }\u000a          *puVar4 = 0;\u000a          pdVar5 = readdir((DIR *)__dirp);\u000a          bVar2 = true;\u000a        }\u000a      } while (pdVar5 != (dirent *)0x0);\u000a    }\u000a    uVar1 = *puVar4;\u000a    if (uVar1 == 0) {\u000a      closedir((DIR *)__dirp);\u000a      if (bVar2) {\u000a        return iVar7;\u000a      }\u000a    }\u000a    else {\u000a      pcVar6 = quotearg_n_style((char *)0x0);\u000a      error(0,(ulong)uVar1,0x40b41a,pcVar6);\u000a      closedir((DIR *)__dirp);\u000a    }\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EDI,0x40b399\nCALL 0x004055f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404fea\nCALL 0x00401940\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00401c60\nTEST RAX,RAX\nJZ 0x00404f9f\nXOR R15D,R15D\nMOV R14D,0xffffffff\nJMP 0x00404f70\nADD RAX,0x13\nXOR ESI,ESI\nMOV RDI,RAX\nCALL 0x00405120\nCMP EAX,R14D\nCMOVGE R14D,EAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00401c60\nMOV R15D,0x1\nJMP 0x00404f98\nCMP byte ptr [RAX + 0x13],0x2e\nJNZ 0x00404f44\nMOVZX ECX,byte ptr [RAX + 0x14]\nTEST CL,CL\nJZ 0x00404f89\nCMP CL,0x2e\nJNZ 0x00404f44\nCMP byte ptr [RAX + 0x15],0x0\nJNZ 0x00404f44\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00401c60\nTEST RAX,RAX\nJNZ 0x00404f70\nJMP 0x00404fa8\nMOV R14D,0xffffffff\nXOR R15D,R15D\nMOV EBP,dword ptr [RBP]\nTEST EBP,EBP\nJZ 0x00404fdd\nXOR EDI,EDI\nMOV ESI,0x8\nMOV EDX,0x40b399\nCALL 0x00407500\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401d20\nMOV RDI,RBX\nCALL 0x00401b90\nJMP 0x00404fea\nMOV RDI,RBX\nCALL 0x00401b90\nTEST R15D,R15D\nJNZ 0x00404ff0\nMOV R14D,0xffffffff\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p452
S'55\n41 57\n41 56\n53\n50\nbf 99 b3 40 00\ne8 df 06 00 00\n48 89 c3\n48 85 db\n0f 84 cd 00 00 00\ne8 1e ca ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 df\ne8 2c cd ff ff\n48 85 c0\n74 66\n45 31 ff\n41 be ff ff ff ff\neb 2c\n48 83 c0 13\n31 f6\n48 89 c7\ne8 ce 01 00 00\n44 39 f0\n44 0f 4d f0\nc7 45 00 00 00 00 00\n48 89 df\ne8 f8 cc ff ff\n41 bf 01 00 00 00\neb 28\n80 78 13 2e\n75 ce\n0f b6 48 14\n84 c9\n74 0b\n80 f9 2e\n75 c1\n80 78 15 00\n75 bb\nc7 45 00 00 00 00 00\n48 89 df\ne8 c8 cc ff ff\n48 85 c0\n75 d3\neb 09\n41 be ff ff ff ff\n45 31 ff\n8b 6d 00\n85 ed\n74 2e\n31 ff\nbe 08 00 00 00\nba 99 b3 40 00\ne8 40 25 00 00\n48 89 c1\n31 ff\nba 1a b4 40 00\n31 c0\n89 ee\ne8 4d cd ff ff\n48 89 df\ne8 b5 cb ff ff\neb 0d\n48 89 df\ne8 ab cb ff ff\n45 85 ff\n75 06\n41 be ff ff ff ff\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p453
S'.text:0000000000404f00\n.text:0000000000404f01\n.text:0000000000404f03\n.text:0000000000404f05\n.text:0000000000404f06\n.text:0000000000404f07\n.text:0000000000404f0c\n.text:0000000000404f11\n.text:0000000000404f14\n.text:0000000000404f17\n.text:0000000000404f1d\n.text:0000000000404f22\n.text:0000000000404f25\n.text:0000000000404f2c\n.text:0000000000404f2f\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f39\n.text:0000000000404f3c\n.text:0000000000404f42\n.text:0000000000404f44\n.text:0000000000404f48\n.text:0000000000404f4a\n.text:0000000000404f4d\n.text:0000000000404f52\n.text:0000000000404f55\n.text:0000000000404f59\n.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f68\n.text:0000000000404f6e\n.text:0000000000404f70\n.text:0000000000404f74\n.text:0000000000404f76\n.text:0000000000404f7a\n.text:0000000000404f7c\n.text:0000000000404f7e\n.text:0000000000404f81\n.text:0000000000404f83\n.text:0000000000404f87\n.text:0000000000404f89\n.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f98\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404f9f\n.text:0000000000404fa5\n.text:0000000000404fa8\n.text:0000000000404fab\n.text:0000000000404fad\n.text:0000000000404faf\n.text:0000000000404fb1\n.text:0000000000404fb6\n.text:0000000000404fbb\n.text:0000000000404fc0\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fca\n.text:0000000000404fcc\n.text:0000000000404fce\n.text:0000000000404fd3\n.text:0000000000404fd6\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe0\n.text:0000000000404fe5\n.text:0000000000404fe8\n.text:0000000000404fea\n.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff7\n.text:0000000000404ff8\n.text:0000000000404ffa\n.text:0000000000404ffc\n.text:0000000000404ffd\n'
p454
tp455
sS'get_charset_aliases'
p456
(S'\n__stdcall get_charset_aliases()\n'
p457
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *__stream;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    __stream = fdopen(__fd,"r");\u000a    if (__stream != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00408e64_caseD_9:\u000a      __fd = getc_unlocked(__stream);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,__stream);\u000a        __fd = fscanf(__stream,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00408e64_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00408e64_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00408e64_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked(__stream);\u000a          if (__fd == -1) goto switchD_00408e64_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00408e64_caseD_9;\u000a      case -1:\u000a        goto switchD_00408e64_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00408ebd:\u000a  __s = "";\u000aLAB_00408ec3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00408e64_caseD_ffffffff:\u000a  fclose(__stream);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408ec3;\u000a  }\u000a  goto LAB_00408ebd;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060f658]\nTEST R15,R15\nJNZ 0x00408ed2\nMOV EDI,0x40c59c\nCALL 0x00401910\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408c88\nCMP byte ptr [RBX],0x0\nJNZ 0x00408c8d\nMOV EBX,0x40c5ac\nMOV RDI,RBX\nCALL 0x00401a90\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408ca7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408ca9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401c80\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00408cfd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401c40\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00408d08\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00408d25\nMOV R15D,0x40a59d\nJMP 0x00408ecb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401d40\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408ebd\nMOV ESI,0x409e8f\nMOV EDI,EBP\nCALL 0x00401cf0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408e84\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00408e50\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401980\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401980\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00408e50\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401cc0\nMOV ESI,0x40c5bb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401b50\nCMP EAX,0x2\nJL 0x00408ea4\nMOV RDI,R12\nCALL 0x00401a90\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401a90\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408e2d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401ce0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408d74\nJMP 0x00408e8d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401c80\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408d74\nJMP 0x00408e8d\nMOV RDI,RBX\nCALL 0x004019b0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408db7\nJMP qword ptr [0x40c460 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004019b0\nCMP EAX,-0x1\nJZ 0x00408ea4\nCMP EAX,0xa\nJNZ 0x00408e70\nJMP 0x00408e50\nMOV EDI,EBP\nCALL 0x00401b70\nJMP 0x00408ebd\nMOV RDI,R15\nCALL 0x00401920\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00401a40\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408ebd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408ec3\nMOV R15D,0x40a59d\nMOV RDI,R13\nCALL 0x00401920\nMOV qword ptr [0x0060f658],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d f0 69 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 9c c5 40 00\ne8 95 8c ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb ac c5 40 00\n48 89 df\ne8 fb 8d ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 c9 8f ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 73 8f ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 9d a5 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 0c 90 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 8f 9e 40 00\n89 ef\ne8 a6 8f ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 eb 8b ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 db 8b ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 ff 8e ff ff\nbe bb c5 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 7a 8d ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 a9 8c ff ff\n49 89 c4\n48 89 ef\ne8 9e 8c ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 c6 8e ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 45 8e ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 58 8b ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 60 c4 40 00\n48 89 df\ne8 38 8b ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 e5 8c ff ff\neb 30\n4c 89 ff\ne8 8b 8a ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 94 8b ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 9d a5 40 00\n4c 89 ef\ne8 55 8a ff ff\n4c 89 3d 86 67 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000408c50\n.text:0000000000408c51\n.text:0000000000408c53\n.text:0000000000408c55\n.text:0000000000408c57\n.text:0000000000408c59\n.text:0000000000408c5a\n.text:0000000000408c61\n.text:0000000000408c68\n.text:0000000000408c6b\n.text:0000000000408c71\n.text:0000000000408c76\n.text:0000000000408c7b\n.text:0000000000408c7e\n.text:0000000000408c81\n.text:0000000000408c83\n.text:0000000000408c86\n.text:0000000000408c88\n.text:0000000000408c8d\n.text:0000000000408c90\n.text:0000000000408c95\n.text:0000000000408c98\n.text:0000000000408c9b\n.text:0000000000408c9d\n.text:0000000000408ca2\n.text:0000000000408ca5\n.text:0000000000408ca7\n.text:0000000000408ca9\n.text:0000000000408cad\n.text:0000000000408cb2\n.text:0000000000408cb7\n.text:0000000000408cba\n.text:0000000000408cbd\n.text:0000000000408cbf\n.text:0000000000408cc2\n.text:0000000000408cc5\n.text:0000000000408cc8\n.text:0000000000408ccd\n.text:0000000000408cd0\n.text:0000000000408cd3\n.text:0000000000408cd6\n.text:0000000000408cd8\n.text:0000000000408cde\n.text:0000000000408ce8\n.text:0000000000408ced\n.text:0000000000408cf7\n.text:0000000000408cfb\n.text:0000000000408cfd\n.text:0000000000408d03\n.text:0000000000408d08\n.text:0000000000408d12\n.text:0000000000408d17\n.text:0000000000408d21\n.text:0000000000408d25\n.text:0000000000408d2a\n.text:0000000000408d2c\n.text:0000000000408d2f\n.text:0000000000408d34\n.text:0000000000408d36\n.text:0000000000408d38\n.text:0000000000408d3e\n.text:0000000000408d43\n.text:0000000000408d45\n.text:0000000000408d4a\n.text:0000000000408d4d\n.text:0000000000408d50\n.text:0000000000408d56\n.text:0000000000408d5b\n.text:0000000000408d60\n.text:0000000000408d62\n.text:0000000000408d67\n.text:0000000000408d6a\n.text:0000000000408d6f\n.text:0000000000408d74\n.text:0000000000408d79\n.text:0000000000408d7c\n.text:0000000000408d7f\n.text:0000000000408d82\n.text:0000000000408d85\n.text:0000000000408d88\n.text:0000000000408d8d\n.text:0000000000408d90\n.text:0000000000408d95\n.text:0000000000408d98\n.text:0000000000408d9d\n.text:0000000000408da0\n.text:0000000000408da5\n.text:0000000000408daa\n.text:0000000000408dad\n.text:0000000000408db2\n.text:0000000000408db7\n.text:0000000000408db9\n.text:0000000000408dbc\n.text:0000000000408dc1\n.text:0000000000408dc6\n.text:0000000000408dc8\n.text:0000000000408dcb\n.text:0000000000408dce\n.text:0000000000408dd1\n.text:0000000000408dd6\n.text:0000000000408dd9\n.text:0000000000408ddf\n.text:0000000000408de2\n.text:0000000000408de7\n.text:0000000000408dea\n.text:0000000000408ded\n.text:0000000000408df2\n.text:0000000000408df5\n.text:0000000000408dfa\n.text:0000000000408dff\n.text:0000000000408e02\n.text:0000000000408e04\n.text:0000000000408e08\n.text:0000000000408e0d\n.text:0000000000408e12\n.text:0000000000408e15\n.text:0000000000408e1a\n.text:0000000000408e1d\n.text:0000000000408e22\n.text:0000000000408e25\n.text:0000000000408e2b\n.text:0000000000408e2d\n.text:0000000000408e32\n.text:0000000000408e36\n.text:0000000000408e3b\n.text:0000000000408e3e\n.text:0000000000408e41\n.text:0000000000408e47\n.text:0000000000408e50\n.text:0000000000408e53\n.text:0000000000408e58\n.text:0000000000408e5b\n.text:0000000000408e5e\n.text:0000000000408e64\n.text:0000000000408e70\n.text:0000000000408e73\n.text:0000000000408e78\n.text:0000000000408e7b\n.text:0000000000408e7d\n.text:0000000000408e80\n.text:0000000000408e82\n.text:0000000000408e84\n.text:0000000000408e86\n.text:0000000000408e8b\n.text:0000000000408e8d\n.text:0000000000408e90\n.text:0000000000408e95\n.text:0000000000408e97\n.text:0000000000408e9c\n.text:0000000000408e9f\n.text:0000000000408ea4\n.text:0000000000408ea7\n.text:0000000000408eac\n.text:0000000000408eb1\n.text:0000000000408eb4\n.text:0000000000408eb6\n.text:0000000000408ebb\n.text:0000000000408ebd\n.text:0000000000408ec3\n.text:0000000000408ec6\n.text:0000000000408ecb\n.text:0000000000408ed2\n.text:0000000000408ed5\n.text:0000000000408edc\n.text:0000000000408edd\n.text:0000000000408edf\n.text:0000000000408ee1\n.text:0000000000408ee3\n.text:0000000000408ee5\n.text:0000000000408ee6\n'
p461
tp462
sS'nl_langinfo'
p463
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060f1e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060f1e8]\n'
p466
S'ff 25 32 d5 20 00\n'
p467
S'.plt:0000000000401cb0\n'
p468
tp469
sS'x2realloc'
p470
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p471
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p472
S'MOV EDX,0x1\nJMP 0x00408280\n'
p473
S'ba 01 00 00 00\neb 89\n'
p474
S'.text:00000000004082f0\n.text:00000000004082f5\n'
p475
tp476
sS'strlen'
p477
(S'\n__stdcall strlen(char * __s)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060f0d8)();\u000a  return sVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0060f0d8]\n'
p480
S'ff 25 42 d6 20 00\n'
p481
S'.plt:0000000000401a90\n'
p482
tp483
sS'memcmp'
p484
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060f170)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060f170]\n'
p487
S'ff 25 aa d5 20 00\n'
p488
S'.plt:0000000000401bc0\n'
p489
tp490
sS'bc_args_exceed_testing_limit'
p491
(S'\n__stdcall bc_args_exceed_testing_limit(char * * argv)\n'
p492
V\u000a_Bool bc_args_exceed_testing_limit(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  size_t quantity;\u000a  char *__s;\u000a  size_t quantity_00;\u000a  bool bVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    quantity_00 = 0;\u000a    quantity = 0;\u000a  }\u000a  else {\u000a    quantity = 0;\u000a    quantity_00 = 0;\u000a    do {\u000a      sVar2 = strlen(__s);\u000a      quantity_00 = quantity_00 + sVar2;\u000a      __s = argv[quantity + 1];\u000a      quantity = quantity + 1;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  iVar1 = exceeds("__GNU_FINDUTILS_EXEC_ARG_COUNT_LIMIT",quantity);\u000a  bVar3 = true;\u000a  if (iVar1 == 0) {\u000a    iVar1 = exceeds("__GNU_FINDUTILS_EXEC_ARG_LENGTH_LIMIT",quantity_00);\u000a    bVar3 = iVar1 != 0;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p493
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV RDI,qword ptr [R15]\nTEST RDI,RDI\nJZ 0x00404a17\nXOR EBX,EBX\nXOR R14D,R14D\nNOP dword ptr CS:[RAX + RAX*0x1]\nCALL 0x00401a90\nADD R14,RAX\nMOV RDI,qword ptr [R15 + RBX*0x8 + 0x8]\nINC RBX\nTEST RDI,RDI\nJNZ 0x00404a00\nJMP 0x00404a1c\nXOR R14D,R14D\nXOR EBX,EBX\nMOV EDI,0x40b1bc\nMOV RSI,RBX\nCALL 0x00404a50\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJNZ 0x00404a43\nMOV EDI,0x40b1e1\nMOV RSI,R14\nCALL 0x00404a50\nTEST EAX,EAX\nSETNZ AL\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p494
S'41 57\n41 56\n53\n49 89 ff\n49 8b 3f\n48 85 ff\n74 27\n31 db\n45 31 f6\n66 66 2e 0f 1f 84 00 00 00 00 00\ne8 8b d0 ff ff\n49 01 c6\n49 8b 7c df 08\n48 ff c3\n48 85 ff\n75 eb\neb 05\n45 31 f6\n31 db\nbf bc b1 40 00\n48 89 de\ne8 27 00 00 00\n89 c1\nb0 01\n85 c9\n75 12\nbf e1 b1 40 00\n4c 89 f6\ne8 12 00 00 00\n85 c0\n0f 95 c0\n5b\n41 5e\n41 5f\nc3\n'
p495
S'.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e4\n.text:00000000004049e5\n.text:00000000004049e8\n.text:00000000004049eb\n.text:00000000004049ee\n.text:00000000004049f0\n.text:00000000004049f2\n.text:00000000004049f5\n.text:0000000000404a00\n.text:0000000000404a05\n.text:0000000000404a08\n.text:0000000000404a0d\n.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a17\n.text:0000000000404a1a\n.text:0000000000404a1c\n.text:0000000000404a21\n.text:0000000000404a24\n.text:0000000000404a29\n.text:0000000000404a2b\n.text:0000000000404a2d\n.text:0000000000404a2f\n.text:0000000000404a31\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a44\n.text:0000000000404a46\n.text:0000000000404a48\n'
p496
tp497
sS'quotearg_n_style_mem'
p498
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p499
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00407540\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00407310\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:00000000004075a0\n.text:00000000004075a1\n.text:00000000004075a3\n.text:00000000004075a5\n.text:00000000004075a6\n.text:00000000004075aa\n.text:00000000004075ad\n.text:00000000004075b0\n.text:00000000004075b2\n.text:00000000004075b5\n.text:00000000004075b8\n.text:00000000004075bd\n.text:00000000004075bf\n.text:00000000004075c2\n.text:00000000004075c5\n.text:00000000004075c8\n.text:00000000004075cd\n.text:00000000004075d1\n.text:00000000004075d2\n.text:00000000004075d4\n.text:00000000004075d6\n.text:00000000004075d7\n'
p503
tp504
sS'_exit'
p505
(S'\n__stdcall _exit(int __status)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060f048)();\u000a  return;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060f048]\n'
p508
S'ff 25 d2 d6 20 00\n'
p509
S'.plt:0000000000401970\n'
p510
tp511
sS'bkm_scale_by_power'
p512
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p513
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x004086a1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00408640\nOR EBP,EAX\nDEC EBX\nJNZ 0x00408690\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p515
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p516
S'.text:0000000000408670\n.text:0000000000408671\n.text:0000000000408673\n.text:0000000000408675\n.text:0000000000408676\n.text:0000000000408677\n.text:0000000000408679\n.text:000000000040867c\n.text:000000000040867f\n.text:0000000000408681\n.text:0000000000408683\n.text:0000000000408685\n.text:0000000000408690\n.text:0000000000408693\n.text:0000000000408696\n.text:000000000040869b\n.text:000000000040869d\n.text:000000000040869f\n.text:00000000004086a1\n.text:00000000004086a3\n.text:00000000004086a7\n.text:00000000004086a8\n.text:00000000004086aa\n.text:00000000004086ac\n.text:00000000004086ad\n'
p517
tp518
sS'xrealloc'
p519
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p520
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p521
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00408267\nTEST RBX,RBX\nJNZ 0x00408267\nCALL 0x00401920\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401ce0\nTEST RBX,RBX\nJZ 0x00408279\nTEST RAX,RAX\nJZ 0x0040827b\nPOP RBX\nRET\nCALL 0x004083a0\n'
p522
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 bd 96 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 71 9a ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p523
S'.text:0000000000408250\n.text:0000000000408251\n.text:0000000000408254\n.text:0000000000408257\n.text:0000000000408259\n.text:000000000040825c\n.text:000000000040825e\n.text:0000000000408263\n.text:0000000000408265\n.text:0000000000408266\n.text:0000000000408267\n.text:000000000040826a\n.text:000000000040826f\n.text:0000000000408272\n.text:0000000000408274\n.text:0000000000408277\n.text:0000000000408279\n.text:000000000040827a\n.text:000000000040827b\n'
p524
tp525
sS'signal'
p526
(S'\n__stdcall signal(int __sig, __sighandler_t __handler)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__sighandler_t signal(int __sig,__sighandler_t __handler)\u000a\u000a{\u000a  __sighandler_t pVar1;\u000a  \u000a  pVar1 = (__sighandler_t)(*(code *)PTR_signal_0060f188)();\u000a  return pVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0060f188]\n'
p529
S'ff 25 92 d5 20 00\n'
p530
S'.plt:0000000000401bf0\n'
p531
tp532
sS'decrement_proc_max'
p533
(S'\n__stdcall decrement_proc_max()\n'
p534
V\u000avoid decrement_proc_max(void)\u000a\u000a{\u000a  if (1 < proc_max) {\u000a    proc_max = proc_max + -1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p535
S'MOV EAX,dword ptr [0x0060f2b8]\nCMP EAX,0x2\nJL 0x00403931\nDEC dword ptr [0x0060f2b8]\nRET\n'
p536
S'8b 05 92 b9 20 00\n83 f8 02\n7c 06\nff 0d 87 b9 20 00\nc3\n'
p537
S'.text:0000000000403920\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392b\n.text:0000000000403931\n'
p538
tp539
sS'FUN_00401900'
p540
(S'\n__stdcall FUN_00401900()\n'
p541
V\u000avoid FUN_00401900(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060f010)();\u000a  return;\u000a}\u000a\u000a
p542
S'PUSH qword ptr [0x0060f008]\nJMP qword ptr [0x0060f010]\n'
p543
S'ff 35 02 d7 20 00\nff 25 04 d7 20 00\n'
p544
S'.plt:0000000000401900\n.plt:0000000000401906\n'
p545
tp546
sS'freea'
p547
(S'\n__stdcall freea(void * p)\n'
p548
V\u000avoid freea(void *p)\u000a\u000a{\u000a  void **ppvVar1;\u000a  void *pvVar2;\u000a  void **ppvVar3;\u000a  \u000a  if ((p != (void *)0x0) && (*(int *)((long)p + -4) == 0x1415fb4a)) {\u000a    if (mmalloca_results[(ulong)p % 0x101] != (void *)0x0) {\u000a      ppvVar3 = mmalloca_results + (ulong)p % 0x101;\u000a      pvVar2 = mmalloca_results[(ulong)p % 0x101];\u000a      do {\u000a        if (pvVar2 == p) {\u000a          *ppvVar3 = *(void **)((long)p + -0x10);\u000a          free((void *)((long)p + -0x10));\u000a          return;\u000a        }\u000a        ppvVar1 = (void **)((long)pvVar2 + -0x10);\u000a        ppvVar3 = (void **)((long)pvVar2 + -0x10);\u000a        pvVar2 = *ppvVar1;\u000a      } while (*ppvVar1 != (void *)0x0);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p549
S'TEST RDI,RDI\nJZ 0x00408fd5\nCMP dword ptr [RDI + -0x4],0x1415fb4a\nJNZ 0x00408fd5\nMOV RCX,-0xff00ff00ff00ff\nMOV RAX,RDI\nMUL RCX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nMOV RCX,RDI\nSUB RCX,RAX\nMOV RAX,qword ptr [0x60f660 + RCX*0x8]\nTEST RAX,RAX\nJZ 0x00408fd5\nLEA RCX,[0x60f660 + RCX*0x8]\nNOP word ptr [RAX + RAX*0x1]\nCMP RAX,RDI\nJZ 0x00408fd6\nMOV RCX,RAX\nMOV RAX,qword ptr [RAX + -0x10]\nADD RCX,-0x10\nTEST RAX,RAX\nJNZ 0x00408fc0\nRET\nMOV RAX,qword ptr [RDI + -0x10]\nADD RDI,-0x10\nMOV qword ptr [RCX],RAX\nJMP 0x00401920\n'
p550
S'48 85 ff\n74 60\n81 7f fc 4a fb 15 14\n75 57\n48 b9 01 ff 00 ff 00 ff 00 ff\n48 89 f8\n48 f7 e1\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 89 f9\n48 29 c1\n48 8b 04 cd 60 f6 60 00\n48 85 c0\n74 26\n48 8d 0c cd 60 f6 60 00\n66 0f 1f 84 00 00 00 00 00\n48 39 f8\n74 11\n48 89 c1\n48 8b 40 f0\n48 83 c1 f0\n48 85 c0\n75 eb\nc3\n48 8b 47 f0\n48 83 c7 f0\n48 89 01\ne9 3a 89 ff ff\n'
p551
S'.text:0000000000408f70\n.text:0000000000408f73\n.text:0000000000408f75\n.text:0000000000408f7c\n.text:0000000000408f7e\n.text:0000000000408f88\n.text:0000000000408f8b\n.text:0000000000408f8e\n.text:0000000000408f92\n.text:0000000000408f95\n.text:0000000000408f99\n.text:0000000000408f9c\n.text:0000000000408f9f\n.text:0000000000408fa2\n.text:0000000000408faa\n.text:0000000000408fad\n.text:0000000000408faf\n.text:0000000000408fb7\n.text:0000000000408fc0\n.text:0000000000408fc3\n.text:0000000000408fc5\n.text:0000000000408fc8\n.text:0000000000408fcc\n.text:0000000000408fd0\n.text:0000000000408fd3\n.text:0000000000408fd5\n.text:0000000000408fd6\n.text:0000000000408fda\n.text:0000000000408fde\n.text:0000000000408fe1\n'
p552
tp553
sS'close_stdout'
p554
(S'\n__stdcall close_stdout()\n'
p555
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00405557;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40b41a,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00405557:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p556
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060f348]\nCALL 0x00408b10\nTEST EAX,EAX\nJZ 0x00405557\nCMP byte ptr [0x0060f4f8],0x0\nJZ 0x0040556c\nCALL 0x00401940\nCMP dword ptr [RAX],0x20\nJNZ 0x0040556c\nMOV RDI,qword ptr [0x0060f380]\nCALL 0x00408b10\nTEST EAX,EAX\nJNZ 0x004055b1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40b5c4\nMOV EDX,0x5\nCALL 0x00401a70\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060f4f0]\nCALL 0x00401940\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004055bc\nXOR EDI,EDI\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401d20\nMOV EDI,dword ptr [0x0060f2c8]\nCALL 0x00401970\nMOV EDI,dword ptr [0x0060f2c8]\nCALL 0x00401970\nMOV RDI,RBX\nCALL 0x004076a0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40b5bd\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401d20\nMOV EDI,dword ptr [0x0060f2c8]\nCALL 0x00401970\n'
p557
S'55\n41 56\n53\n48 8b 3d 0d 9e 20 00\ne8 d0 35 00 00\n85 c0\n74 13\n80 3d ad 9f 20 00 00\n74 1f\ne8 ee c3 ff ff\n83 38 20\n75 15\n48 8b 3d 22 9e 20 00\ne8 ad 35 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe c4 b5 40 00\nba 05 00 00 00\ne8 f3 c4 ff ff\n49 89 c6\n48 8b 1d 69 9f 20 00\ne8 b4 c3 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 1a b4 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 7a c7 ff ff\n8b 3d 1c 9d 20 00\ne8 bf c3 ff ff\n8b 3d 11 9d 20 00\ne8 b4 c3 ff ff\n48 89 df\ne8 dc 20 00 00\n48 89 c1\n31 ff\nba bd b5 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 46 c7 ff ff\n8b 3d e8 9c 20 00\ne8 8b c3 ff ff\n'
p558
S'.text:0000000000405530\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405534\n.text:000000000040553b\n.text:0000000000405540\n.text:0000000000405542\n.text:0000000000405544\n.text:000000000040554b\n.text:000000000040554d\n.text:0000000000405552\n.text:0000000000405555\n.text:0000000000405557\n.text:000000000040555e\n.text:0000000000405563\n.text:0000000000405565\n.text:0000000000405567\n.text:0000000000405568\n.text:000000000040556a\n.text:000000000040556b\n.text:000000000040556c\n.text:000000000040556e\n.text:0000000000405573\n.text:0000000000405578\n.text:000000000040557d\n.text:0000000000405580\n.text:0000000000405587\n.text:000000000040558c\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405593\n.text:0000000000405595\n.text:000000000040559a\n.text:000000000040559c\n.text:000000000040559e\n.text:00000000004055a1\n.text:00000000004055a6\n.text:00000000004055ac\n.text:00000000004055b1\n.text:00000000004055b7\n.text:00000000004055bc\n.text:00000000004055bf\n.text:00000000004055c4\n.text:00000000004055c7\n.text:00000000004055c9\n.text:00000000004055ce\n.text:00000000004055d0\n.text:00000000004055d2\n.text:00000000004055d5\n.text:00000000004055da\n.text:00000000004055e0\n'
p559
tp560
sS'version_etc_ar'
p561
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p562
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p563
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00408070\nJMP 0x00407d40\n'
p564
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 bf fc ff ff\n'
p565
S'.text:0000000000408060\n.text:0000000000408067\n.text:0000000000408070\n.text:0000000000408076\n.text:000000000040807a\n.text:000000000040807c\n'
p566
tp567
sS'exec_if_possible'
p568
(S'\n__stdcall exec_if_possible()\n'
p569
V\u000avoid exec_if_possible(void)\u000a\u000a{\u000a  if ((((bc_ctl.replace_pat == (char *)0x0) && (initial_args == 1)) &&\u000a      (bc_state.cmd_argc != bc_ctl.initial_argc)) && (bc_ctl.exit_if_size_exceeded == 0)) {\u000a    bc_do_exec(&bc_ctl,&bc_state);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p570
S'CMP qword ptr [0x0060f3c8],0x0\nJNZ 0x00403b2c\nCMP byte ptr [0x0060f478],0x1\nJNZ 0x00403b2c\nMOV RAX,qword ptr [0x0060f428]\nCMP RAX,qword ptr [0x0060f3d0]\nJZ 0x00403b2c\nMOV EAX,dword ptr [0x0060f398]\nTEST EAX,EAX\nJNZ 0x00403b2c\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nJMP 0x00404520\nRET\n'
p571
S'48 83 3d d0 b8 20 00 00\n75 32\n80 3d 77 b9 20 00 01\n75 29\n48 8b 05 1e b9 20 00\n48 3b 05 bf b8 20 00\n74 19\n8b 05 7f b8 20 00\n85 c0\n75 0f\nbf 98 f3 60 00\nbe 28 f4 60 00\ne9 f4 09 00 00\nc3\n'
p572
S'.text:0000000000403af0\n.text:0000000000403af8\n.text:0000000000403afa\n.text:0000000000403b01\n.text:0000000000403b03\n.text:0000000000403b0a\n.text:0000000000403b11\n.text:0000000000403b13\n.text:0000000000403b19\n.text:0000000000403b1b\n.text:0000000000403b1d\n.text:0000000000403b22\n.text:0000000000403b27\n.text:0000000000403b2c\n'
p573
tp574
sS'mbuiter_multi_copy'
p575
(S'\n__stdcall mbuiter_multi_copy(mbuiter_multi * new_iter, mbuiter_multi * old_iter)\n'
p576
V\u000avoid mbuiter_multi_copy(mbuiter_multi *new_iter,mbuiter_multi *old_iter)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = old_iter->in_shift;\u000a  new_iter->in_shift = _Var1;\u000a  if (_Var1 == false) {\u000a    new_iter->state = (mbstate_t)0x0;\u000a  }\u000a  else {\u000a    new_iter->state = old_iter->state;\u000a  }\u000a  new_iter->next_done = old_iter->next_done;\u000a  mb_copy((mbchar_t *)&new_iter->cur,(mbchar_t *)&old_iter->cur);\u000a  return;\u000a}\u000a\u000a
p577
S'MOV AL,byte ptr [RSI]\nTEST AL,AL\nMOV byte ptr [RDI],AL\nJZ 0x004062f2\nMOV RAX,qword ptr [RSI + 0x4]\nMOV qword ptr [RDI + 0x4],RAX\nJMP 0x004062fa\nMOV qword ptr [RDI + 0x4],0x0\nMOV AL,byte ptr [RSI + 0xc]\nMOV byte ptr [RDI + 0xc],AL\nADD RDI,0x10\nADD RSI,0x10\nJMP 0x00409010\n'
p578
S'8a 06\n84 c0\n88 07\n74 0a\n48 8b 46 04\n48 89 47 04\neb 08\n48 c7 47 04 00 00 00 00\n8a 46 0c\n88 47 0c\n48 83 c7 10\n48 83 c6 10\ne9 03 2d 00 00\n'
p579
S'.text:00000000004062e0\n.text:00000000004062e2\n.text:00000000004062e4\n.text:00000000004062e6\n.text:00000000004062e8\n.text:00000000004062ec\n.text:00000000004062f0\n.text:00000000004062f2\n.text:00000000004062fa\n.text:00000000004062fd\n.text:0000000000406300\n.text:0000000000406304\n.text:0000000000406308\n'
p580
tp581
sS'is_basic'
p582
(S'\n__stdcall is_basic()\n'
p583
V\u000a_Bool is_basic(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)((*(uint *)((long)is_basic_table + (ulong)(in_EDI >> 3 & 0x1c)) >> (in_EDI & 0x1f) &\u000a                 1) != 0);\u000a}\u000a\u000a
p584
S'MOV EAX,EDI\nSHR EAX,0x3\nAND EAX,0x1c\nMOV EAX,dword ptr [0x40c5d0 + RAX]\nBT EAX,EDI\nSETC AL\nRET\n'
p585
S'89 f8\nc1 e8 03\n83 e0 1c\n8b 80 d0 c5 40 00\n0f a3 f8\n0f 92 c0\nc3\n'
p586
S'.text:0000000000409060\n.text:0000000000409062\n.text:0000000000409065\n.text:0000000000409068\n.text:000000000040906e\n.text:0000000000409071\n.text:0000000000409074\n'
p587
tp588
sS'c_isxdigit'
p589
(S'\n__stdcall c_isxdigit()\n'
p590
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p591
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00408aeb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p592
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p593
S'.text:0000000000408ad0\n.text:0000000000408ad3\n.text:0000000000408ad6\n.text:0000000000408ad8\n.text:0000000000408ae2\n.text:0000000000408ae4\n.text:0000000000408ae7\n.text:0000000000408aea\n.text:0000000000408aeb\n.text:0000000000408aed\n'
p594
tp595
sS'ferror'
p596
(S'\n__stdcall ferror(FILE * __stream)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0060f060)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060f060]\n'
p599
S'ff 25 ba d6 20 00\n'
p600
S'.plt:00000000004019a0\n'
p601
tp602
sS'bc_args_complete'
p603
(S'\n__stdcall bc_args_complete(buildcmd_control * ctl, buildcmd_state * state)\n'
p604
V\u000avoid bc_args_complete(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  bc_push_arg(ctl,state,"do_not_care",0,(char *)0x0,0);\u000a  return;\u000a}\u000a\u000a
p605
S'PUSH RAX\nMOV dword ptr [RSP],0x0\nMOV EDX,0x40b282\nXOR ECX,ECX\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nPOP RAX\nRET\n'
p606
S'50\nc7 04 24 00 00 00 00\nba 82 b2 40 00\n31 c9\n45 31 c0\n45 31 c9\ne8 86 fc ff ff\n58\nc3\n'
p607
S'.text:0000000000404680\n.text:0000000000404681\n.text:0000000000404688\n.text:000000000040468d\n.text:000000000040468f\n.text:0000000000404692\n.text:0000000000404695\n.text:000000000040469a\n.text:000000000040469b\n'
p608
tp609
sS'__libc_csu_fini'
p610
(S'\n__stdcall __libc_csu_fini()\n'
p611
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p612
S'RET\n'
p613
S'f3 c3\n'
p614
S'.text:0000000000409190\n'
p615
tp616
sS'abort'
p617
(S'\n__stdcall abort()\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060f028)();\u000a  return;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060f028]\n'
p620
S'ff 25 f2 d6 20 00\n'
p621
S'.plt:0000000000401930\n'
p622
tp623
sS'opendir'
p624
(S'\n__stdcall opendir(char * __name)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * opendir(char *__name)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_opendir_0060f0b8)();\u000a  return pDVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060f0b8]\n'
p627
S'ff 25 62 d6 20 00\n'
p628
S'.plt:0000000000401a50\n'
p629
tp630
sS'closedir'
p631
(S'\n__stdcall closedir(DIR * __dirp)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0060f158)();\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x0060f158]\n'
p634
S'ff 25 c2 d5 20 00\n'
p635
S'.plt:0000000000401b90\n'
p636
tp637
sS'version_etc'
p638
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p639
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p640
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00408132\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00408090\nADD RSP,0xd8\nRET\n'
p641
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p642
S'.text:00000000004080f0\n.text:00000000004080f7\n.text:00000000004080f9\n.text:00000000004080fb\n.text:0000000000408100\n.text:0000000000408105\n.text:000000000040810a\n.text:0000000000408112\n.text:000000000040811a\n.text:0000000000408122\n.text:000000000040812a\n.text:0000000000408132\n.text:0000000000408137\n.text:000000000040813c\n.text:0000000000408141\n.text:0000000000408146\n.text:000000000040814e\n.text:0000000000408153\n.text:000000000040815b\n.text:0000000000408162\n.text:0000000000408165\n.text:000000000040816a\n.text:0000000000408171\n'
p643
tp644
sS'find_first_leaked_fd'
p645
(S'\n__stdcall find_first_leaked_fd(int * prev_non_cloexec_fds, size_t n)\n'
p646
V\u000aint find_first_leaked_fd(int *prev_non_cloexec_fds,size_t n)\u000a\u000a{\u000a  get_max_fd();\u000a  visit_open_fds();\u000a  return -1;\u000a}\u000a\u000a
p647
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00404b30\nLEA EDI,[RAX + 0x1]\nCMP EAX,0x7fffffff\nCMOVZ EDI,EAX\nMOV qword ptr [RSP + 0x8],RBX\nMOV qword ptr [RSP + 0x10],R14\nMOV qword ptr [RSP + 0x18],0x0\nMOV dword ptr [RSP + 0x20],0xffffffff\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x405020\nCALL 0x00404b80\nMOV EAX,dword ptr [RSP + 0x20]\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p648
S'41 56\n53\n48 83 ec 28\n49 89 f6\n48 89 fb\ne8 7e fc ff ff\n8d 78 01\n3d ff ff ff 7f\n0f 44 f8\n48 89 5c 24 08\n4c 89 74 24 10\n48 c7 44 24 18 00 00 00 00\nc7 44 24 20 ff ff ff ff\n48 8d 54 24 08\nbe 20 50 40 00\ne8 99 fc ff ff\n8b 44 24 20\n48 83 c4 28\n5b\n41 5e\nc3\n'
p649
S'.text:0000000000404ea0\n.text:0000000000404ea2\n.text:0000000000404ea3\n.text:0000000000404ea7\n.text:0000000000404eaa\n.text:0000000000404ead\n.text:0000000000404eb2\n.text:0000000000404eb5\n.text:0000000000404eba\n.text:0000000000404ebd\n.text:0000000000404ec2\n.text:0000000000404ec7\n.text:0000000000404ed0\n.text:0000000000404ed8\n.text:0000000000404edd\n.text:0000000000404ee2\n.text:0000000000404ee7\n.text:0000000000404eeb\n.text:0000000000404eef\n.text:0000000000404ef0\n.text:0000000000404ef2\n'
p650
tp651
sS'freadahead'
p652
(S'\n__stdcall freadahead(FILE * fp)\n'
p653
V\u000asize_t freadahead(FILE *fp)\u000a\u000a{\u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return 0;\u000a  }\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr);\u000a  }\u000a  return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr +\u000a                 (long)(fp->_IO_save_end + -(long)fp->_IO_save_base));\u000a}\u000a\u000a
p654
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x004088cd\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x10]\nSUB RAX,qword ptr [RDI + 0x8]\nTEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004088e1\nXOR ECX,ECX\nADD RAX,RCX\nRET\nMOV RCX,qword ptr [RDI + 0x58]\nSUB RCX,qword ptr [RDI + 0x48]\nADD RAX,RCX\nRET\n'
p655
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 10\n48 2b 47 08\nf6 47 01 01\n75 06\n31 c9\n48 01 c8\nc3\n48 8b 4f 58\n48 2b 4f 48\n48 01 c8\nc3\n'
p656
S'.text:00000000004088c0\n.text:00000000004088c4\n.text:00000000004088c8\n.text:00000000004088ca\n.text:00000000004088cc\n.text:00000000004088cd\n.text:00000000004088d1\n.text:00000000004088d5\n.text:00000000004088d9\n.text:00000000004088db\n.text:00000000004088dd\n.text:00000000004088e0\n.text:00000000004088e1\n.text:00000000004088e5\n.text:00000000004088e9\n.text:00000000004088ec\n'
p657
tp658
sS'bc_init_controlinfo'
p659
(S'\n__stdcall bc_init_controlinfo(buildcmd_control * ctl, size_t headroom)\n'
p660
V\u000aBC_INIT_STATUS bc_init_controlinfo(buildcmd_control *ctl,size_t headroom)\u000a\u000a{\u000a  BC_INIT_STATUS BVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  ulong uVar4;\u000a  \u000a  sVar2 = bc_size_of_environment();\u000a  ctl->posix_arg_size_min = 0x1000;\u000a  sVar3 = bc_get_arg_max();\u000a  ctl->posix_arg_size_max = sVar3;\u000a  ctl->exit_if_size_exceeded = 0;\u000a  BVar1 = BC_INIT_ENV_TOO_BIG;\u000a  if ((sVar2 <= sVar3) && (BVar1 = BC_INIT_CANNOT_ACCOMODATE_HEADROOM, sVar2 + headroom < sVar3)) {\u000a    uVar4 = (sVar3 - sVar2) - headroom;\u000a    ctl->posix_arg_size_max = uVar4;\u000a    sVar2 = (uVar4 >> 3) - 2;\u000a    ctl->max_arg_count = sVar2;\u000a    if (sVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("ctl->max_arg_count > 0","buildcmd.c",0x210,\u000a                    "enum BC_INIT_STATUS bc_init_controlinfo(struct buildcmd_control *, size_t)");\u000a    }\u000a    *(undefined4 *)&ctl->rplen = 0;\u000a    *(undefined4 *)((long)&ctl->rplen + 4) = 0;\u000a    *(undefined4 *)&ctl->replace_pat = 0;\u000a    *(undefined4 *)((long)&ctl->replace_pat + 4) = 0;\u000a    ctl->initial_argc = 0;\u000a    ctl->exec_callback = cb_exec_noop;\u000a    *(undefined4 *)&ctl->lines_per_exec = 0;\u000a    *(undefined4 *)((long)&ctl->lines_per_exec + 4) = 0;\u000a    *(undefined4 *)&ctl->args_per_exec = 0;\u000a    *(undefined4 *)((long)&ctl->args_per_exec + 4) = 0;\u000a    ctl->arg_max = ctl->posix_arg_size_max;\u000a    BVar1 = BC_INIT_OK;\u000a  }\u000a  return BVar1;\u000a}\u000a\u000a
p661
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00404830\nMOV R15,RAX\nMOV qword ptr [RBX + 0x10],0x1000\nCALL 0x00404810\nMOV RCX,RAX\nMOV qword ptr [RBX + 0x8],RCX\nMOV dword ptr [RBX],0x0\nMOV EAX,0x1\nMOV RDX,RCX\nSUB RDX,R15\nJC 0x00404901\nADD R15,R14\nMOV EAX,0x2\nCMP R15,RCX\nJNC 0x00404901\nSUB RDX,R14\nMOV qword ptr [RBX + 0x8],RDX\nSHR RDX,0x3\nADD RDX,-0x2\nMOV qword ptr [RBX + 0x20],RDX\nJZ 0x00404907\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x28],XMM0\nMOV qword ptr [RBX + 0x38],0x0\nMOV qword ptr [RBX + 0x40],0x404920\nMOVUPS xmmword ptr [RBX + 0x48],XMM0\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [RBX + 0x18],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b0e2\nMOV ESI,0x40af60\nMOV EDX,0x210\nMOV ECX,0x40b0f9\nCALL 0x00401b20\n'
p662
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\ne8 a0 ff ff ff\n49 89 c7\n48 c7 43 10 00 10 00 00\ne8 70 ff ff ff\n48 89 c1\n48 89 4b 08\nc7 03 00 00 00 00\nb8 01 00 00 00\n48 89 ca\n4c 29 fa\n72 47\n4d 01 f7\nb8 02 00 00 00\n49 39 cf\n73 3a\n4c 29 f2\n48 89 53 08\n48 c1 ea 03\n48 83 c2 fe\n48 89 53 20\n74 2b\n0f 57 c0\n0f 11 43 28\n48 c7 43 38 00 00 00 00\n48 c7 43 40 20 49 40 00\n0f 11 43 48\n48 8b 43 08\n48 89 43 18\n31 c0\n5b\n41 5e\n41 5f\nc3\nbf e2 b0 40 00\nbe 60 af 40 00\nba 10 02 00 00\nb9 f9 b0 40 00\ne8 00 d2 ff ff\n'
p663
S'.text:0000000000404880\n.text:0000000000404882\n.text:0000000000404884\n.text:0000000000404885\n.text:0000000000404888\n.text:000000000040488b\n.text:0000000000404890\n.text:0000000000404893\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a3\n.text:00000000004048a7\n.text:00000000004048ad\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048b8\n.text:00000000004048ba\n.text:00000000004048bd\n.text:00000000004048c2\n.text:00000000004048c5\n.text:00000000004048c7\n.text:00000000004048ca\n.text:00000000004048ce\n.text:00000000004048d2\n.text:00000000004048d6\n.text:00000000004048da\n.text:00000000004048dc\n.text:00000000004048df\n.text:00000000004048e3\n.text:00000000004048eb\n.text:00000000004048f3\n.text:00000000004048f7\n.text:00000000004048fb\n.text:00000000004048ff\n.text:0000000000404901\n.text:0000000000404902\n.text:0000000000404904\n.text:0000000000404906\n.text:0000000000404907\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404916\n.text:000000000040491b\n'
p664
tp665
sS'mb_width_aux'
p666
(S'\n__stdcall mb_width_aux()\n'
p667
V\u000aint mb_width_aux(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  wint_t __wc;\u000a  \u000a  uVar1 = wcwidth(__wc);\u000a  if ((int)uVar1 < 0) {\u000a    iVar2 = iswcntrl(__wc);\u000a    uVar1 = (uint)(iVar2 == 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p668
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00401c70\nTEST EAX,EAX\nJNS 0x0040900c\nMOV EDI,EBX\nCALL 0x004019e0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nPOP RBX\nRET\n'
p669
S'53\n89 fb\ne8 78 8c ff ff\n85 c0\n79 10\n89 df\ne8 dd 89 ff ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n5b\nc3\n'
p670
S'.text:0000000000408ff0\n.text:0000000000408ff1\n.text:0000000000408ff3\n.text:0000000000408ff8\n.text:0000000000408ffa\n.text:0000000000408ffc\n.text:0000000000408ffe\n.text:0000000000409003\n.text:0000000000409005\n.text:0000000000409007\n.text:0000000000409009\n.text:000000000040900c\n.text:000000000040900d\n'
p671
tp672
sS'lseek'
p673
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060f118)();\u000a  return _Var1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x0060f118]\n'
p676
S'ff 25 02 d6 20 00\n'
p677
S'.plt:0000000000401b10\n'
p678
tp679
sS'opendir_safer'
p680
(S'\n__stdcall opendir_safer(char * name)\n'
p681
V\u000aDIR * opendir_safer(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  DIR *__dirp;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  \u000a  __dirp = opendir(name);\u000a  if (__dirp == (DIR *)0x0) {\u000a    return (DIR *)0x0;\u000a  }\u000a  uVar1 = dirfd(__dirp);\u000a  if (2 < uVar1) {\u000a    return (DIR *)__dirp;\u000a  }\u000a  __fd = dup_safer();\u000a  if (__fd < 0) {\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a  }\u000a  else {\u000a    pDVar2 = fdopendir(__fd);\u000a    piVar3 = __errno_location();\u000a    iVar4 = *piVar3;\u000a    if (pDVar2 != (DIR *)0x0) goto LAB_0040564d;\u000a    close(__fd);\u000a  }\u000a  pDVar2 = (DIR *)0x0;\u000aLAB_0040564d:\u000a  closedir(__dirp);\u000a  piVar3 = __errno_location();\u000a  *piVar3 = iVar4;\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x00401a50\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040563e\nMOV RDI,RBX\nCALL 0x00401c00\nCMP EAX,0x2\nJA 0x00405660\nMOV EDI,EAX\nCALL 0x00407ce0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405642\nMOV EDI,EBP\nCALL 0x00401d70\nMOV R14,RAX\nCALL 0x00401940\nMOV R15D,dword ptr [RAX]\nTEST R14,R14\nJNZ 0x0040564d\nMOV EDI,EBP\nCALL 0x00401b70\nJMP 0x0040564a\nXOR EBX,EBX\nJMP 0x00405660\nCALL 0x00401940\nMOV R15D,dword ptr [RAX]\nXOR R14D,R14D\nMOV RDI,RBX\nCALL 0x00401b90\nCALL 0x00401940\nMOV dword ptr [RAX],R15D\nMOV RBX,R14\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p683
S'55\n41 57\n41 56\n53\n50\ne8 54 c4 ff ff\n48 89 c3\n48 85 db\n74 3a\n48 89 df\ne8 f4 c5 ff ff\n83 f8 02\n77 4f\n89 c7\ne8 c8 26 00 00\n89 c5\n85 ed\n78 24\n89 ef\ne8 4b c7 ff ff\n49 89 c6\ne8 13 c3 ff ff\n44 8b 38\n4d 85 f6\n75 18\n89 ef\ne8 34 c5 ff ff\neb 0c\n31 db\neb 1e\ne8 f9 c2 ff ff\n44 8b 38\n45 31 f6\n48 89 df\ne8 3b c5 ff ff\ne8 e6 c2 ff ff\n44 89 38\n4c 89 f3\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p684
S'.text:00000000004055f0\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055f6\n.text:00000000004055f7\n.text:00000000004055fc\n.text:00000000004055ff\n.text:0000000000405602\n.text:0000000000405604\n.text:0000000000405607\n.text:000000000040560c\n.text:000000000040560f\n.text:0000000000405611\n.text:0000000000405613\n.text:0000000000405618\n.text:000000000040561a\n.text:000000000040561c\n.text:000000000040561e\n.text:0000000000405620\n.text:0000000000405625\n.text:0000000000405628\n.text:000000000040562d\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405635\n.text:0000000000405637\n.text:000000000040563c\n.text:000000000040563e\n.text:0000000000405640\n.text:0000000000405642\n.text:0000000000405647\n.text:000000000040564a\n.text:000000000040564d\n.text:0000000000405650\n.text:0000000000405655\n.text:000000000040565a\n.text:000000000040565d\n.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405667\n.text:0000000000405668\n.text:000000000040566a\n.text:000000000040566c\n.text:000000000040566d\n'
p685
tp686
sS'wcwidth'
p687
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0060f1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x0060f1c8]\n'
p690
S'ff 25 52 d5 20 00\n'
p691
S'.plt:0000000000401c70\n'
p692
tp693
sS'quotearg_n_mem'
p694
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p695
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p696
S'MOV ECX,0x60f510\nJMP 0x00407310\n'
p697
S'b9 10 f5 60 00\ne9 36 fe ff ff\n'
p698
S'.text:00000000004074d0\n.text:00000000004074d5\n'
p699
tp700
sS'calloc'
p701
(S'\n__stdcall calloc(size_t __nmemb, size_t __size)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * calloc(size_t __nmemb,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060f178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x0060f178]\n'
p704
S'ff 25 a2 d5 20 00\n'
p705
S'.plt:0000000000401bd0\n'
p706
tp707
sS'printf'
p708
(S'\n__stdcall printf(char * __format)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_0060f0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060f0f8]\n'
p711
S'ff 25 22 d6 20 00\n'
p712
S'.plt:0000000000401ad0\n'
p713
tp714
sS'copy_args'
p715
(S'\n__stdcall copy_args(buildcmd_control * ctl, buildcmd_state * state, char * * working_args, size_t limit, size_t done)\n'
p716
V\u000asize_t copy_args(buildcmd_control *ctl,buildcmd_state *state,char **working_args,size_t limit,\u000a                size_t done)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  bool bVar4;\u000a  \u000a  if (ctl->initial_argc == 0) {\u000a    uVar2 = 0;\u000a  }\u000a  else {\u000a    uVar3 = ctl->initial_argc;\u000a    uVar2 = 0;\u000a    do {\u000a      working_args[uVar2] = state->cmd_argv[uVar2];\u000a      uVar2 = uVar2 + 1;\u000a    } while (uVar2 < uVar3);\u000a  }\u000a  if ((uVar2 < limit) && (uVar2 + done < state->cmd_argc)) {\u000a    uVar1 = state->cmd_argc;\u000a    uVar3 = uVar2 + 1 + done;\u000a    do {\u000a      working_args[uVar2] = state->cmd_argv[uVar3 - 1];\u000a      uVar2 = uVar2 + 1;\u000a      if (limit <= uVar2) break;\u000a      bVar4 = uVar3 < uVar1;\u000a      uVar3 = uVar3 + 1;\u000a    } while (bVar4);\u000a  }\u000a  if (uVar2 < ctl->initial_argc) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("dst_pos >= ctl->initial_argc","buildcmd.c",0xfc,\u000a                                    \u000a                  "size_t copy_args(struct buildcmd_control *, struct buildcmd_state *, char **, size_t, size_t)"\u000a                 );\u000a  }\u000a  working_args[uVar2] = (char *)0x0;\u000a  return uVar2;\u000a}\u000a\u000a
p717
S'CMP qword ptr [RDI + 0x38],0x0\nJZ 0x004046c6\nMOV R9,qword ptr [RDI + 0x38]\nXOR EAX,EAX\nNOP dword ptr [RAX]\nMOV R10,qword ptr [RSI + 0x8]\nMOV R10,qword ptr [R10 + RAX*0x8]\nMOV qword ptr [RDX + RAX*0x8],R10\nINC RAX\nCMP RAX,R9\nJC 0x004046b0\nJMP 0x004046c8\nXOR EAX,EAX\nCMP RAX,RCX\nJNC 0x004046fe\nLEA R9,[RAX + R8*0x1]\nCMP R9,qword ptr [RSI]\nJNC 0x004046fe\nMOV R9,qword ptr [RSI]\nLEA R8,[RAX + R8*0x1 + 0x1]\nNOP\nMOV R10,qword ptr [RSI + 0x8]\nMOV R10,qword ptr [R10 + R8*0x8 + -0x8]\nMOV qword ptr [RDX + RAX*0x8],R10\nINC RAX\nCMP RAX,RCX\nJNC 0x004046fe\nCMP R8,R9\nLEA R8,[R8 + 0x1]\nJC 0x004046e0\nCMP RAX,qword ptr [RDI + 0x38]\nJC 0x0040470d\nMOV qword ptr [RDX + RAX*0x8],0x0\nRET\nPUSH RAX\nMOV EDI,0x40b207\nMOV ESI,0x40af60\nMOV EDX,0xfc\nMOV ECX,0x40b224\nCALL 0x00401b20\n'
p718
S'48 83 7f 38 00\n74 1f\n4c 8b 4f 38\n31 c0\n0f 1f 00\n4c 8b 56 08\n4d 8b 14 c2\n4c 89 14 c2\n48 ff c0\n4c 39 c8\n72 ec\neb 02\n31 c0\n48 39 c8\n73 31\n4e 8d 0c 00\n4c 3b 0e\n73 28\n4c 8b 0e\n4e 8d 44 00 01\n66 90\n4c 8b 56 08\n4f 8b 54 c2 f8\n4c 89 14 c2\n48 ff c0\n48 39 c8\n73 09\n4d 39 c8\n4d 8d 40 01\n72 e2\n48 3b 47 38\n72 09\n48 c7 04 c2 00 00 00 00\nc3\n50\nbf 07 b2 40 00\nbe 60 af 40 00\nba fc 00 00 00\nb9 24 b2 40 00\ne8 f9 d3 ff ff\n'
p719
S'.text:00000000004046a0\n.text:00000000004046a5\n.text:00000000004046a7\n.text:00000000004046ab\n.text:00000000004046ad\n.text:00000000004046b0\n.text:00000000004046b4\n.text:00000000004046b8\n.text:00000000004046bc\n.text:00000000004046bf\n.text:00000000004046c2\n.text:00000000004046c4\n.text:00000000004046c6\n.text:00000000004046c8\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d1\n.text:00000000004046d4\n.text:00000000004046d6\n.text:00000000004046d9\n.text:00000000004046de\n.text:00000000004046e0\n.text:00000000004046e4\n.text:00000000004046e9\n.text:00000000004046ed\n.text:00000000004046f0\n.text:00000000004046f3\n.text:00000000004046f5\n.text:00000000004046f8\n.text:00000000004046fc\n.text:00000000004046fe\n.text:0000000000404702\n.text:0000000000404704\n.text:000000000040470c\n.text:000000000040470d\n.text:000000000040470e\n.text:0000000000404713\n.text:0000000000404718\n.text:000000000040471d\n.text:0000000000404722\n'
p720
tp721
sS'version_etc_va'
p722
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p723
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p724
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004080c0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004080cc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004080e1\nINC R9\nCMP R9,0xa\nJC 0x004080a0\nMOV R8,RSP\nCALL 0x00407d40\nADD RSP,0x58\nRET\n'
p725
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 57 fc ff ff\n48 83 c4 58\nc3\n'
p726
S'.text:0000000000408090\n.text:0000000000408094\n.text:0000000000408097\n.text:00000000004080a0\n.text:00000000004080a3\n.text:00000000004080a7\n.text:00000000004080a9\n.text:00000000004080ac\n.text:00000000004080b0\n.text:00000000004080b4\n.text:00000000004080b7\n.text:00000000004080c0\n.text:00000000004080c4\n.text:00000000004080c8\n.text:00000000004080cc\n.text:00000000004080cf\n.text:00000000004080d3\n.text:00000000004080d6\n.text:00000000004080d8\n.text:00000000004080db\n.text:00000000004080df\n.text:00000000004080e1\n.text:00000000004080e4\n.text:00000000004080e9\n.text:00000000004080ed\n'
p727
tp728
sS'bc_push_arg'
p729
(S'\n__stdcall bc_push_arg(buildcmd_control * ctl, buildcmd_state * state, char * arg, size_t len, char * prefix, size_t pfxlen)\n'
p730
V\u000avoid bc_push_arg(buildcmd_control *ctl,buildcmd_state *state,char *arg,size_t len,char *prefix,\u000a                size_t pfxlen)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  undefined8 uVar5;\u000a  char **ppcVar6;\u000a  uint in_stack_00000008;\u000a  \u000a  if (arg != (char *)0x0) {\u000a    if (arg != "do_not_care") {\u000a      uVar4 = pfxlen + len + state->cmd_argv_chars;\u000a      if (ctl->arg_max <= uVar4 && uVar4 != ctl->arg_max) {\u000a        if ((in_stack_00000008 != 0) || (state->cmd_argc == ctl->initial_argc)) {\u000a          uVar5 = dcgettext(0,"cannot fit single argument within argument list size limit",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        if ((ctl->replace_pat != (char *)0x0) ||\u000a           ((ctl->exit_if_size_exceeded != 0 &&\u000a            ((ctl->lines_per_exec != 0 || (ctl->args_per_exec != 0)))))) {\u000a          uVar5 = dcgettext(0,"argument list too long",5);\u000a          error(1,0,uVar5,uVar5);\u000a        }\u000a        bc_do_exec(ctl,state);\u000a      }\u000a      iVar3 = bc_argc_limit_reached\u000a                        ((buildcmd_control *)(ulong)in_stack_00000008,(buildcmd_state *)ctl);\u000a      if (iVar3 != 0) {\u000a        bc_do_exec(ctl,state);\u000a      }\u000a    }\u000a    if (in_stack_00000008 == 0) {\u000a      state->todo = 1;\u000a    }\u000a    uVar4 = state->cmd_argv_alloc;\u000a    if (uVar4 <= state->cmd_argc) {\u000a      if (state->cmd_argv == (char **)0x0) {\u000a        state->cmd_argv_alloc = 0x40;\u000a        ppcVar6 = (char **)xmalloc(0x200);\u000a      }\u000a      else {\u000a        state->cmd_argv_alloc = uVar4 * 2;\u000a        ppcVar6 = (char **)xrealloc(state->cmd_argv,uVar4 << 4);\u000a      }\u000a      state->cmd_argv = ppcVar6;\u000a    }\u000a    sVar1 = state->cmd_argc;\u000a    state->cmd_argc = sVar1 + 1;\u000a    if (arg == "do_not_care") {\u000a      state->cmd_argv[sVar1] = (char *)0x0;\u000a    }\u000a    else {\u000a      sVar2 = state->cmd_argv_chars;\u000a      state->cmd_argv[sVar1] = state->argbuf + sVar2;\u000a      if (prefix != (char *)0x0) {\u000a        strcpy(state->argbuf + sVar2,prefix);\u000a        state->cmd_argv_chars = state->cmd_argv_chars + pfxlen;\u000a      }\u000a      strcpy(state->argbuf + state->cmd_argv_chars,arg);\u000a      state->cmd_argv_chars = state->cmd_argv_chars + len;\u000a      iVar3 = bc_argc_limit_reached\u000a                        ((buildcmd_control *)(ulong)in_stack_00000008,(buildcmd_state *)ctl);\u000a      if (iVar3 != 0) {\u000a        bc_do_exec(ctl,state);\u000a      }\u000a    }\u000a    if (in_stack_00000008 != 0) {\u000a      state->cmd_initial_argv_chars = state->cmd_argv_chars;\u000a    }\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("arg != NULL","buildcmd.c",0x15f,\u000a                                \u000a                "void bc_push_arg(struct buildcmd_control *, struct buildcmd_state *, const char *, size_t, const char *, size_t, int)"\u000a               );\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],R9\nMOV R13,R8\nMOV R15,RCX\nMOV RBP,RDX\nMOV RBX,RSI\nMOV R12,RDI\nTEST RBP,RBP\nJZ 0x00404505\nMOV R14D,dword ptr [RSP + 0x40]\nMOV EAX,0x40b282\nCMP RBP,RAX\nJZ 0x004043fa\nMOV RAX,qword ptr [RSP]\nLEA RAX,[RAX + R15*0x1]\nADD RAX,qword ptr [RBX + 0x20]\nCMP RAX,qword ptr [R12 + 0x18]\nJBE 0x004043dd\nTEST R14D,R14D\nJNZ 0x0040437c\nMOV RAX,qword ptr [RBX]\nCMP RAX,qword ptr [R12 + 0x38]\nJNZ 0x004043a1\nXOR EDI,EDI\nMOV ESI,0x40b090\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nCMP qword ptr [R12 + 0x30],0x0\nJZ 0x004044dd\nXOR EDI,EDI\nMOV ESI,0x40b0cb\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00404520\nMOV EDI,R14D\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004047e0\nTEST EAX,EAX\nJZ 0x004043fa\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00404520\nTEST R14D,R14D\nJNZ 0x00404406\nMOV dword ptr [RBX + 0x38],0x1\nMOV RSI,qword ptr [RBX + 0x10]\nCMP qword ptr [RBX],RSI\nJC 0x00404441\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x0040442b\nLEA RAX,[RSI + RSI*0x1]\nMOV qword ptr [RBX + 0x10],RAX\nSHL RSI,0x4\nCALL 0x00408250\nJMP 0x0040443d\nMOV qword ptr [RBX + 0x10],0x40\nMOV EDI,0x200\nCALL 0x00408210\nMOV qword ptr [RBX + 0x8],RAX\nMOV EDX,0x40b282\nMOV RAX,qword ptr [RBX]\nMOV RCX,qword ptr [RBX + 0x8]\nLEA RSI,[RAX + 0x1]\nMOV qword ptr [RBX],RSI\nCMP RBP,RDX\nJZ 0x004044b9\nMOV RDI,qword ptr [RBX + 0x20]\nMOV RDX,qword ptr [RBX + 0x18]\nADD RDX,RDI\nMOV qword ptr [RCX + RAX*0x8],RDX\nTEST R13,R13\nJZ 0x00404481\nADD RDI,qword ptr [RBX + 0x18]\nMOV RSI,R13\nCALL 0x00401980\nMOV RAX,qword ptr [RSP]\nADD qword ptr [RBX + 0x20],RAX\nMOV RDI,qword ptr [RBX + 0x18]\nADD RDI,qword ptr [RBX + 0x20]\nMOV RSI,RBP\nCALL 0x00401980\nADD qword ptr [RBX + 0x20],R15\nMOV EDI,R14D\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004047e0\nTEST EAX,EAX\nJZ 0x004044c1\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00404520\nTEST R14D,R14D\nJNZ 0x004044c6\nJMP 0x004044ce\nMOV qword ptr [RCX + RAX*0x8],0x0\nTEST R14D,R14D\nJZ 0x004044ce\nMOV RAX,qword ptr [RBX + 0x20]\nMOV qword ptr [RBX + 0x28],RAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP dword ptr [R12],0x0\nJZ 0x004043d2\nCMP qword ptr [R12 + 0x48],0x0\nJNZ 0x004043ad\nCMP qword ptr [R12 + 0x50],0x0\nJNZ 0x004043ad\nJMP 0x004043d2\nMOV EDI,0x40b00e\nMOV ESI,0x40af60\nMOV EDX,0x15f\nMOV ECX,0x40b01a\nCALL 0x00401b20\n'
p732
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 0c 24\n4d 89 c5\n49 89 cf\n48 89 d5\n48 89 f3\n49 89 fc\n48 85 ed\n0f 84 be 01 00 00\n44 8b 74 24 40\nb8 82 b2 40 00\n48 39 c5\n0f 84 a0 00 00 00\n48 8b 04 24\n4a 8d 04 38\n48 03 43 20\n49 3b 44 24 18\n76 70\n45 85 f6\n75 0a\n48 8b 03\n49 3b 44 24 38\n75 25\n31 ff\nbe 90 b0 40 00\nba 05 00 00 00\ne8 e3 d6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 7f d9 ff ff\n49 83 7c 24 30 00\n0f 84 30 01 00 00\n31 ff\nbe cb b0 40 00\nba 05 00 00 00\ne8 b2 d6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4e d9 ff ff\n4c 89 e7\n48 89 de\ne8 43 01 00 00\n44 89 f7\n4c 89 e6\n48 89 da\ne8 f5 03 00 00\n85 c0\n74 0b\n4c 89 e7\n48 89 de\ne8 26 01 00 00\n45 85 f6\n75 07\nc7 43 38 01 00 00 00\n48 8b 73 10\n48 39 33\n72 32\n48 8b 7b 08\n48 85 ff\n74 13\n48 8d 04 36\n48 89 43 10\n48 c1 e6 04\ne8 27 3e 00 00\neb 12\n48 c7 43 10 40 00 00 00\nbf 00 02 00 00\ne8 d3 3d 00 00\n48 89 43 08\nba 82 b2 40 00\n48 8b 03\n48 8b 4b 08\n48 8d 70 01\n48 89 33\n48 39 d5\n74 60\n48 8b 7b 20\n48 8b 53 18\n48 01 fa\n48 89 14 c1\n4d 85 ed\n74 14\n48 03 7b 18\n4c 89 ee\ne8 07 d5 ff ff\n48 8b 04 24\n48 01 43 20\n48 8b 7b 18\n48 03 7b 20\n48 89 ee\ne8 ef d4 ff ff\n4c 01 7b 20\n44 89 f7\n4c 89 e6\n48 89 da\ne8 3d 03 00 00\n85 c0\n74 1a\n4c 89 e7\n48 89 de\ne8 6e 00 00 00\n45 85 f6\n75 0f\neb 15\n48 c7 04 c1 00 00 00 00\n45 85 f6\n74 08\n48 8b 43 20\n48 89 43 28\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 83 3c 24 00\n0f 84 ea fe ff ff\n49 83 7c 24 48 00\n0f 85 b9 fe ff ff\n49 83 7c 24 50 00\n0f 85 ad fe ff ff\ne9 cd fe ff ff\nbf 0e b0 40 00\nbe 60 af 40 00\nba 5f 01 00 00\nb9 1a b0 40 00\ne8 02 d6 ff ff\n'
p733
S'.text:0000000000404320\n.text:0000000000404321\n.text:0000000000404323\n.text:0000000000404325\n.text:0000000000404327\n.text:0000000000404329\n.text:000000000040432a\n.text:000000000040432b\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404335\n.text:0000000000404338\n.text:000000000040433b\n.text:000000000040433e\n.text:0000000000404341\n.text:0000000000404347\n.text:000000000040434c\n.text:0000000000404351\n.text:0000000000404354\n.text:000000000040435a\n.text:000000000040435e\n.text:0000000000404362\n.text:0000000000404366\n.text:000000000040436b\n.text:000000000040436d\n.text:0000000000404370\n.text:0000000000404372\n.text:0000000000404375\n.text:000000000040437a\n.text:000000000040437c\n.text:000000000040437e\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438d\n.text:0000000000404390\n.text:0000000000404395\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439c\n.text:00000000004043a1\n.text:00000000004043a7\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b4\n.text:00000000004043b9\n.text:00000000004043be\n.text:00000000004043c1\n.text:00000000004043c6\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cd\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043d8\n.text:00000000004043dd\n.text:00000000004043e0\n.text:00000000004043e3\n.text:00000000004043e6\n.text:00000000004043eb\n.text:00000000004043ed\n.text:00000000004043ef\n.text:00000000004043f2\n.text:00000000004043f5\n.text:00000000004043fa\n.text:00000000004043fd\n.text:00000000004043ff\n.text:0000000000404406\n.text:000000000040440a\n.text:000000000040440d\n.text:000000000040440f\n.text:0000000000404413\n.text:0000000000404416\n.text:0000000000404418\n.text:000000000040441c\n.text:0000000000404420\n.text:0000000000404424\n.text:0000000000404429\n.text:000000000040442b\n.text:0000000000404433\n.text:0000000000404438\n.text:000000000040443d\n.text:0000000000404441\n.text:0000000000404446\n.text:0000000000404449\n.text:000000000040444d\n.text:0000000000404451\n.text:0000000000404454\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445d\n.text:0000000000404461\n.text:0000000000404464\n.text:0000000000404468\n.text:000000000040446b\n.text:000000000040446d\n.text:0000000000404471\n.text:0000000000404474\n.text:0000000000404479\n.text:000000000040447d\n.text:0000000000404481\n.text:0000000000404485\n.text:0000000000404489\n.text:000000000040448c\n.text:0000000000404491\n.text:0000000000404495\n.text:0000000000404498\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a3\n.text:00000000004044a5\n.text:00000000004044a7\n.text:00000000004044aa\n.text:00000000004044ad\n.text:00000000004044b2\n.text:00000000004044b5\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044c1\n.text:00000000004044c4\n.text:00000000004044c6\n.text:00000000004044ca\n.text:00000000004044ce\n.text:00000000004044d2\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d7\n.text:00000000004044d9\n.text:00000000004044db\n.text:00000000004044dc\n.text:00000000004044dd\n.text:00000000004044e2\n.text:00000000004044e8\n.text:00000000004044ee\n.text:00000000004044f4\n.text:00000000004044fa\n.text:0000000000404500\n.text:0000000000404505\n.text:000000000040450a\n.text:000000000040450f\n.text:0000000000404514\n.text:0000000000404519\n'
p734
tp735
sS'xzalloc'
p736
(S'\n__stdcall xzalloc(size_t s)\n'
p737
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p738
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00408210\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401b40\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p739
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 24 98 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p740
S'.text:0000000000408300\n.text:0000000000408302\n.text:0000000000408303\n.text:0000000000408304\n.text:0000000000408307\n.text:000000000040830c\n.text:000000000040830f\n.text:0000000000408311\n.text:0000000000408314\n.text:0000000000408317\n.text:000000000040831c\n.text:000000000040831f\n.text:0000000000408323\n.text:0000000000408324\n.text:0000000000408326\n'
p741
tp742
sS'gettext_quote'
p743
(S'\n__stdcall gettext_quote(char * msgid)\n'
p744
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040bbce;\u000a        pcVar2 = &DAT_0040bbd2;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401a70\nCMP RAX,RBX\nJNZ 0x004078c8\nCALL 0x00408bc0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004078d0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00407878\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40bbbe\nMOV EAX,0x40bbc2\nJMP 0x004078c4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004078d0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004078b6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40bbce\nMOV EAX,0x40bbd2\nJMP 0x004078c4\nCMP R14D,0x9\nMOV ECX,0x40bbb4\nMOV EAX,0x40b638\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p746
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 47 a2 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 89 13 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 be bb 40 00\nb8 c2 bb 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ce bb 40 00\nb8 d2 bb 40 00\neb 0e\n41 83 fe 09\nb9 b4 bb 40 00\nb8 38 b6 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p747
S'.text:0000000000407810\n.text:0000000000407811\n.text:0000000000407813\n.text:0000000000407814\n.text:0000000000407817\n.text:000000000040781a\n.text:000000000040781c\n.text:0000000000407821\n.text:0000000000407824\n.text:0000000000407829\n.text:000000000040782c\n.text:0000000000407832\n.text:0000000000407837\n.text:000000000040783a\n.text:000000000040783f\n.text:0000000000407844\n.text:0000000000407849\n.text:000000000040784f\n.text:0000000000407855\n.text:0000000000407858\n.text:000000000040785a\n.text:000000000040785c\n.text:0000000000407861\n.text:0000000000407865\n.text:0000000000407867\n.text:0000000000407869\n.text:000000000040786c\n.text:0000000000407871\n.text:0000000000407876\n.text:0000000000407878\n.text:000000000040787d\n.text:0000000000407882\n.text:0000000000407887\n.text:000000000040788d\n.text:0000000000407893\n.text:0000000000407896\n.text:0000000000407898\n.text:000000000040789a\n.text:000000000040789f\n.text:00000000004078a3\n.text:00000000004078a5\n.text:00000000004078a7\n.text:00000000004078aa\n.text:00000000004078af\n.text:00000000004078b4\n.text:00000000004078b6\n.text:00000000004078ba\n.text:00000000004078bf\n.text:00000000004078c4\n.text:00000000004078c8\n.text:00000000004078c9\n.text:00000000004078cb\n.text:00000000004078cc\n'
p748
tp749
sS'fclose'
p750
(S'\n__stdcall fclose(FILE * __stream)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060f0b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060f0b0]\n'
p753
S'ff 25 6a d6 20 00\n'
p754
S'.plt:0000000000401a40\n'
p755
tp756
sS'__ctype_get_mb_cur_max'
p757
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060f0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x0060f0d0]\n'
p760
S'ff 25 4a d6 20 00\n'
p761
S'.plt:0000000000401a80\n'
p762
tp763
sS'quotearg_n_style'
p764
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p765
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407540\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00407310\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p767
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p768
S'.text:0000000000407500\n.text:0000000000407501\n.text:0000000000407503\n.text:0000000000407504\n.text:0000000000407508\n.text:000000000040750b\n.text:000000000040750d\n.text:0000000000407512\n.text:0000000000407515\n.text:000000000040751a\n.text:0000000000407521\n.text:0000000000407523\n.text:0000000000407526\n.text:0000000000407529\n.text:000000000040752e\n.text:0000000000407532\n.text:0000000000407533\n.text:0000000000407535\n.text:0000000000407536\n'
p769
tp770
sS'fork'
p771
(S'\n__stdcall fork()\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t fork(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_fork_0060f298)();\u000a  return _Var1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x0060f298]\n'
p774
S'ff 25 82 d4 20 00\n'
p775
S'.plt:0000000000401e10\n'
p776
tp777
sS'quote_n'
p778
(S'\n__stdcall quote_n(char * arg)\n'
p779
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p780
S'MOV RDX,-0x1\nJMP 0x004077d0\n'
p781
S'48 c7 c2 ff ff ff ff\neb d7\n'
p782
S'.text:00000000004077f0\n.text:00000000004077f7\n'
p783
tp784
sS'prep_child_for_exec'
p785
(S'\n__stdcall prep_child_for_exec()\n'
p786
V\u000avoid prep_child_for_exec(void)\u000a\u000a{\u000a  uint uVar1;\u000a  char "/dev/null" [10];\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  \u000a  complain_about_leaky_fds();\u000a  add_proc();\u000a  set_slot_var();\u000a  if (keep_stdin == 0) {\u000a    close(0);\u000a    iVar2 = open("/dev/null",0);\u000a    if (iVar2 < 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      pcVar4 = quotearg_n_style((char *)0x0);\u000a      error(0,(ulong)uVar1,0x40b41a,pcVar4);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p787
S'PUSH RBX\nCALL 0x00404e40\nXOR EDI,EDI\nCALL 0x00403fc0\nMOV EDI,EAX\nCALL 0x004040a0\nMOV AL,byte ptr [0x0060f418]\nTEST AL,AL\nJNZ 0x00403f87\nXOR EDI,EDI\nCALL 0x00401b70\nMOV EDI,0x409950\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401d40\nTEST EAX,EAX\nJS 0x00403f89\nPOP RBX\nRET\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x8\nMOV EDX,0x409950\nCALL 0x00407500\nMOV RCX,RAX\nMOV EDI,0x0\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV ESI,EBX\nPOP RBX\nJMP 0x00401d20\n'
p788
S'53\ne8 ea 0e 00 00\n31 ff\ne8 63 00 00 00\n89 c7\ne8 3c 01 00 00\n8a 05 ae b4 20 00\n84 c0\n75 19\n31 ff\ne8 fb db ff ff\nbf 50 99 40 00\n31 f6\n31 c0\ne8 bd dd ff ff\n85 c0\n78 02\n5b\nc3\ne8 b2 d9 ff ff\n8b 18\n31 ff\nbe 08 00 00 00\nba 50 99 40 00\ne8 5f 35 00 00\n48 89 c1\nbf 00 00 00 00\nba 1a b4 40 00\n31 c0\n89 de\n5b\ne9 68 dd ff ff\n'
p789
S'.text:0000000000403f50\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f58\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f64\n.text:0000000000403f6a\n.text:0000000000403f6c\n.text:0000000000403f6e\n.text:0000000000403f70\n.text:0000000000403f75\n.text:0000000000403f7a\n.text:0000000000403f7c\n.text:0000000000403f7e\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f87\n.text:0000000000403f88\n.text:0000000000403f89\n.text:0000000000403f8e\n.text:0000000000403f90\n.text:0000000000403f92\n.text:0000000000403f97\n.text:0000000000403f9c\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fae\n.text:0000000000403fb0\n.text:0000000000403fb2\n.text:0000000000403fb3\n'
p790
tp791
sS'quotearg_alloc'
p792
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p793
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p794
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00407180\n'
p795
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p796
S'.text:0000000000407170\n.text:0000000000407173\n.text:0000000000407175\n.text:0000000000407178\n'
p797
tp798
sS'close_stdout_set_file_name'
p799
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p800
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p801
S'MOV qword ptr [0x0060f4f0],RDI\nRET\n'
p802
S'48 89 3d d9 9f 20 00\nc3\n'
p803
S'.text:0000000000405510\n.text:0000000000405517\n'
p804
tp805
sS'__libc_csu_init'
p806
(S'\n__stdcall __libc_csu_init()\n'
p807
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ee08]\nPUSH RBP\nLEA RBP,[0x60ee10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004018e8\nTEST RBP,RBP\nJZ 0x00409176\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00409160\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 5c 20 00\n55\n48 8d 2d d6 5c 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 97 87 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p810
S'.text:0000000000409120\n.text:0000000000409122\n.text:0000000000409124\n.text:0000000000409127\n.text:0000000000409129\n.text:000000000040912b\n.text:0000000000409132\n.text:0000000000409133\n.text:000000000040913a\n.text:000000000040913b\n.text:000000000040913e\n.text:0000000000409141\n.text:0000000000409144\n.text:0000000000409148\n.text:000000000040914c\n.text:0000000000409151\n.text:0000000000409154\n.text:0000000000409156\n.text:0000000000409158\n.text:0000000000409160\n.text:0000000000409163\n.text:0000000000409166\n.text:0000000000409169\n.text:000000000040916d\n.text:0000000000409171\n.text:0000000000409174\n.text:0000000000409176\n.text:000000000040917a\n.text:000000000040917b\n.text:000000000040917c\n.text:000000000040917e\n.text:0000000000409180\n.text:0000000000409182\n.text:0000000000409184\n'
p811
tp812
sS'getrlimit'
p813
(S'\n__stdcall getrlimit(__rlimit_resource_t __resource, rlimit * __rlimits)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getrlimit(__rlimit_resource_t __resource,rlimit *__rlimits)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getrlimit_0060f280)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060f280]\n'
p816
S'ff 25 9a d4 20 00\n'
p817
S'.plt:0000000000401de0\n'
p818
tp819
sS'c_isdigit'
p820
(S'\n__stdcall c_isdigit()\n'
p821
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p822
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p823
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p824
S'.text:0000000000408a40\n.text:0000000000408a43\n.text:0000000000408a46\n.text:0000000000408a49\n'
p825
tp826
sS'usage'
p827
(S'\n__stdcall usage()\n'
p828
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  FILE *__stream;\u000a  FILE *__stream_00;\u000a  char *__format;\u000a  \u000a  __stream_00 = stderr;\u000a  __stream = stdout;\u000a  if (iParm1 == 0) {\u000a    __format = (char *)dcgettext(0,"Usage: %s [OPTION]... COMMAND [INITIAL-ARGS]...\u005cn",5);\u000a    fprintf((FILE *)__stream,__format,program_name);\u000a    __format = (char *)dcgettext(0,\u000a                                 "Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.\u005cn\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "Mandatory and optional arguments to long options are also\u005cnmandatory or optional for the corresponding short option.\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -0, --null                   items are separated by a null, not whitespace;\u005cn                                 disables quote and backslash processing and\u005cn                                 logical EOF processing\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -a, --arg-file=FILE          read arguments from FILE, not standard input\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -d, --delimiter=CHARACTER    items in input stream are separated by CHARACTER,\u005cn                                 not by whitespace; disables quote and backslash\u005cn                                 processing and logical EOF processing\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -E END                       set logical EOF string; if END occurs as a line\u005cn                                 of input, the rest of the input is ignored\u005cn                                 (ignored if -0 or -d was specified)\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -e, --eof[=END]              equivalent to -E END if END is specified;\u005cn                                 otherwise, there is no end-of-file string\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,"  -I R                         same as --replace=R\u005cn",5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -i, --replace[=R]            replace R in INITIAL-ARGS with names read\u005cn                                 from standard input; if R is unspecified,\u005cn                                 assume {}\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -L, --max-lines=MAX-LINES    use at most MAX-LINES non-blank input lines per\u005cn                                 command line\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -l[MAX-LINES]                similar to -L but defaults to at most one non-\u005cn                                 blank input line if MAX-LINES is not specified\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -n, --max-args=MAX-ARGS      use at most MAX-ARGS arguments per command line\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -P, --max-procs=MAX-PROCS    run at most MAX-PROCS processes at a time\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,"  -p, --interactive            prompt before running commands\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "      --process-slot-var=VAR   set environment variable VAR in child processes\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -r, --no-run-if-empty        if there are no arguments, then do not run COMMAND;\u005cn                                 if this option is not given, COMMAND will be\u005cn                                 run at least once\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -s, --max-chars=MAX-CHARS    limit length of command line to MAX-CHARS\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "      --show-limits            show limits on command-line length\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -t, --verbose                print commands before executing them\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "  -x, --exit                   exit if the size (see -s) is exceeded\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,"      --help                   display this help and exit\u005cn",5);\u000a    fputs(__format,(FILE *)stdout);\u000a    __format = (char *)dcgettext(0,\u000a                                 "      --version                output version information and exit\u005cn\u005cn"\u000a                                 ,5);\u000a    fputs(__format,(FILE *)stdout);\u000a    explain_how_to_report_bugs(stdout,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  __format = (char *)dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  fprintf(__stream_00,__format,program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nTEST EBP,EBP\nJNZ 0x00403796\nMOV RBX,qword ptr [0x0060f348]\nXOR EDI,EDI\nMOV ESI,0x40a51f\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f500]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40a550\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a59e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a613\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a6e7\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a734\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a81e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a8ff\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a994\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40a9c8\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40aa88\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ab06\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40aba5\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40abf5\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ac3f\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ac7e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40acce\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ada3\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40aded\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ae30\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40ae75\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40aebb\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x40aef6\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RSI,qword ptr [0x0060f348]\nMOV RDI,RAX\nCALL 0x00401b30\nMOV RDI,qword ptr [0x0060f348]\nMOV RSI,qword ptr [0x0060f500]\nCALL 0x00405260\nMOV EDI,EBP\nCALL 0x00401dc0\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x40a4f8\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f500]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nMOV EDI,EBP\nCALL 0x00401dc0\n'
p830
S'55\n53\n50\n89 fd\n85 ed\n0f 85 09 03 00 00\n48 8b 1d b4 be 20 00\n31 ff\nbe 1f a5 40 00\nba 05 00 00 00\ne8 cb e5 ff ff\n48 89 c1\n48 8b 15 51 c0 20 00\n31 c0\n48 89 df\n48 89 ce\ne8 54 e7 ff ff\n31 ff\nbe 50 a5 40 00\nba 05 00 00 00\ne8 a3 e5 ff ff\n48 8b 35 74 be 20 00\n48 89 c7\ne8 54 e6 ff ff\n31 ff\nbe 9e a5 40 00\nba 05 00 00 00\ne8 83 e5 ff ff\n48 8b 35 54 be 20 00\n48 89 c7\ne8 34 e6 ff ff\n31 ff\nbe 13 a6 40 00\nba 05 00 00 00\ne8 63 e5 ff ff\n48 8b 35 34 be 20 00\n48 89 c7\ne8 14 e6 ff ff\n31 ff\nbe e7 a6 40 00\nba 05 00 00 00\ne8 43 e5 ff ff\n48 8b 35 14 be 20 00\n48 89 c7\ne8 f4 e5 ff ff\n31 ff\nbe 34 a7 40 00\nba 05 00 00 00\ne8 23 e5 ff ff\n48 8b 35 f4 bd 20 00\n48 89 c7\ne8 d4 e5 ff ff\n31 ff\nbe 1e a8 40 00\nba 05 00 00 00\ne8 03 e5 ff ff\n48 8b 35 d4 bd 20 00\n48 89 c7\ne8 b4 e5 ff ff\n31 ff\nbe ff a8 40 00\nba 05 00 00 00\ne8 e3 e4 ff ff\n48 8b 35 b4 bd 20 00\n48 89 c7\ne8 94 e5 ff ff\n31 ff\nbe 94 a9 40 00\nba 05 00 00 00\ne8 c3 e4 ff ff\n48 8b 35 94 bd 20 00\n48 89 c7\ne8 74 e5 ff ff\n31 ff\nbe c8 a9 40 00\nba 05 00 00 00\ne8 a3 e4 ff ff\n48 8b 35 74 bd 20 00\n48 89 c7\ne8 54 e5 ff ff\n31 ff\nbe 88 aa 40 00\nba 05 00 00 00\ne8 83 e4 ff ff\n48 8b 35 54 bd 20 00\n48 89 c7\ne8 34 e5 ff ff\n31 ff\nbe 06 ab 40 00\nba 05 00 00 00\ne8 63 e4 ff ff\n48 8b 35 34 bd 20 00\n48 89 c7\ne8 14 e5 ff ff\n31 ff\nbe a5 ab 40 00\nba 05 00 00 00\ne8 43 e4 ff ff\n48 8b 35 14 bd 20 00\n48 89 c7\ne8 f4 e4 ff ff\n31 ff\nbe f5 ab 40 00\nba 05 00 00 00\ne8 23 e4 ff ff\n48 8b 35 f4 bc 20 00\n48 89 c7\ne8 d4 e4 ff ff\n31 ff\nbe 3f ac 40 00\nba 05 00 00 00\ne8 03 e4 ff ff\n48 8b 35 d4 bc 20 00\n48 89 c7\ne8 b4 e4 ff ff\n31 ff\nbe 7e ac 40 00\nba 05 00 00 00\ne8 e3 e3 ff ff\n48 8b 35 b4 bc 20 00\n48 89 c7\ne8 94 e4 ff ff\n31 ff\nbe ce ac 40 00\nba 05 00 00 00\ne8 c3 e3 ff ff\n48 8b 35 94 bc 20 00\n48 89 c7\ne8 74 e4 ff ff\n31 ff\nbe a3 ad 40 00\nba 05 00 00 00\ne8 a3 e3 ff ff\n48 8b 35 74 bc 20 00\n48 89 c7\ne8 54 e4 ff ff\n31 ff\nbe ed ad 40 00\nba 05 00 00 00\ne8 83 e3 ff ff\n48 8b 35 54 bc 20 00\n48 89 c7\ne8 34 e4 ff ff\n31 ff\nbe 30 ae 40 00\nba 05 00 00 00\ne8 63 e3 ff ff\n48 8b 35 34 bc 20 00\n48 89 c7\ne8 14 e4 ff ff\n31 ff\nbe 75 ae 40 00\nba 05 00 00 00\ne8 43 e3 ff ff\n48 8b 35 14 bc 20 00\n48 89 c7\ne8 f4 e3 ff ff\n31 ff\nbe bb ae 40 00\nba 05 00 00 00\ne8 23 e3 ff ff\n48 8b 35 f4 bb 20 00\n48 89 c7\ne8 d4 e3 ff ff\n31 ff\nbe f6 ae 40 00\nba 05 00 00 00\ne8 03 e3 ff ff\n48 8b 35 d4 bb 20 00\n48 89 c7\ne8 b4 e3 ff ff\n48 8b 3d c5 bb 20 00\n48 8b 35 76 bd 20 00\ne8 d1 1a 00 00\n89 ef\ne8 2a e6 ff ff\n48 8b 1d e3 bb 20 00\n31 ff\nbe f8 a4 40 00\nba 05 00 00 00\ne8 c2 e2 ff ff\n48 89 c1\n48 8b 15 48 bd 20 00\n31 c0\n48 89 df\n48 89 ce\ne8 4b e4 ff ff\n89 ef\ne8 f4 e5 ff ff\n'
p831
S'.text:0000000000403480\n.text:0000000000403481\n.text:0000000000403482\n.text:0000000000403483\n.text:0000000000403485\n.text:0000000000403487\n.text:000000000040348d\n.text:0000000000403494\n.text:0000000000403496\n.text:000000000040349b\n.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034a8\n.text:00000000004034af\n.text:00000000004034b1\n.text:00000000004034b4\n.text:00000000004034b7\n.text:00000000004034bc\n.text:00000000004034be\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034cd\n.text:00000000004034d4\n.text:00000000004034d7\n.text:00000000004034dc\n.text:00000000004034de\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034f4\n.text:00000000004034f7\n.text:00000000004034fc\n.text:00000000004034fe\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350d\n.text:0000000000403514\n.text:0000000000403517\n.text:000000000040351c\n.text:000000000040351e\n.text:0000000000403523\n.text:0000000000403528\n.text:000000000040352d\n.text:0000000000403534\n.text:0000000000403537\n.text:000000000040353c\n.text:000000000040353e\n.text:0000000000403543\n.text:0000000000403548\n.text:000000000040354d\n.text:0000000000403554\n.text:0000000000403557\n.text:000000000040355c\n.text:000000000040355e\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356d\n.text:0000000000403574\n.text:0000000000403577\n.text:000000000040357c\n.text:000000000040357e\n.text:0000000000403583\n.text:0000000000403588\n.text:000000000040358d\n.text:0000000000403594\n.text:0000000000403597\n.text:000000000040359c\n.text:000000000040359e\n.text:00000000004035a3\n.text:00000000004035a8\n.text:00000000004035ad\n.text:00000000004035b4\n.text:00000000004035b7\n.text:00000000004035bc\n.text:00000000004035be\n.text:00000000004035c3\n.text:00000000004035c8\n.text:00000000004035cd\n.text:00000000004035d4\n.text:00000000004035d7\n.text:00000000004035dc\n.text:00000000004035de\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035ed\n.text:00000000004035f4\n.text:00000000004035f7\n.text:00000000004035fc\n.text:00000000004035fe\n.text:0000000000403603\n.text:0000000000403608\n.text:000000000040360d\n.text:0000000000403614\n.text:0000000000403617\n.text:000000000040361c\n.text:000000000040361e\n.text:0000000000403623\n.text:0000000000403628\n.text:000000000040362d\n.text:0000000000403634\n.text:0000000000403637\n.text:000000000040363c\n.text:000000000040363e\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364d\n.text:0000000000403654\n.text:0000000000403657\n.text:000000000040365c\n.text:000000000040365e\n.text:0000000000403663\n.text:0000000000403668\n.text:000000000040366d\n.text:0000000000403674\n.text:0000000000403677\n.text:000000000040367c\n.text:000000000040367e\n.text:0000000000403683\n.text:0000000000403688\n.text:000000000040368d\n.text:0000000000403694\n.text:0000000000403697\n.text:000000000040369c\n.text:000000000040369e\n.text:00000000004036a3\n.text:00000000004036a8\n.text:00000000004036ad\n.text:00000000004036b4\n.text:00000000004036b7\n.text:00000000004036bc\n.text:00000000004036be\n.text:00000000004036c3\n.text:00000000004036c8\n.text:00000000004036cd\n.text:00000000004036d4\n.text:00000000004036d7\n.text:00000000004036dc\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e8\n.text:00000000004036ed\n.text:00000000004036f4\n.text:00000000004036f7\n.text:00000000004036fc\n.text:00000000004036fe\n.text:0000000000403703\n.text:0000000000403708\n.text:000000000040370d\n.text:0000000000403714\n.text:0000000000403717\n.text:000000000040371c\n.text:000000000040371e\n.text:0000000000403723\n.text:0000000000403728\n.text:000000000040372d\n.text:0000000000403734\n.text:0000000000403737\n.text:000000000040373c\n.text:000000000040373e\n.text:0000000000403743\n.text:0000000000403748\n.text:000000000040374d\n.text:0000000000403754\n.text:0000000000403757\n.text:000000000040375c\n.text:000000000040375e\n.text:0000000000403763\n.text:0000000000403768\n.text:000000000040376d\n.text:0000000000403774\n.text:0000000000403777\n.text:000000000040377c\n.text:0000000000403783\n.text:000000000040378a\n.text:000000000040378f\n.text:0000000000403791\n.text:0000000000403796\n.text:000000000040379d\n.text:000000000040379f\n.text:00000000004037a4\n.text:00000000004037a9\n.text:00000000004037ae\n.text:00000000004037b1\n.text:00000000004037b8\n.text:00000000004037ba\n.text:00000000004037bd\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037c7\n'
p832
tp833
sS'quoting_options_from_style'
p834
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p835
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p836
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040758d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401930\n'
p837
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 9e a3 ff ff\n'
p838
S'.text:0000000000407540\n.text:0000000000407544\n.text:0000000000407547\n.text:000000000040754c\n.text:0000000000407551\n.text:0000000000407555\n.text:000000000040755d\n.text:0000000000407560\n.text:0000000000407562\n.text:0000000000407564\n.text:0000000000407568\n.text:000000000040756b\n.text:000000000040756f\n.text:0000000000407574\n.text:0000000000407579\n.text:000000000040757d\n.text:0000000000407581\n.text:0000000000407585\n.text:0000000000407588\n.text:000000000040758c\n.text:000000000040758d\n'
p839
tp840
sS'strcpy'
p841
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060f050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060f050]\n'
p844
S'ff 25 ca d6 20 00\n'
p845
S'.plt:0000000000401980\n'
p846
tp847
sS'wait_for_proc_all'
p848
(S'\n__stdcall wait_for_proc_all()\n'
p849
V\u000aundefined8 wait_for_proc_all(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  undefined8 in_RAX;\u000a  \u000a  _Var1 = getpid();\u000a  if (_Var1 != parent) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("getpid () == parent","xargs.c",0x60b,"void wait_for_proc_all(void)");\u000a  }\u000a  if (wait_for_proc_all_waiting == 0) {\u000a    wait_for_proc_all_waiting = 1;\u000a    wait_for_proc(1,0);\u000a    wait_for_proc_all_waiting = 0;\u000a    if (original_exit_value != child_error) {\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(child_error);\u000a    }\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p850
S'PUSH RAX\nCALL 0x00401a20\nCMP EAX,dword ptr [0x0060f390]\nJNZ 0x00402f92\nMOV AL,byte ptr [0x0060f4c0]\nTEST AL,AL\nJNZ 0x00402f90\nMOV byte ptr [0x0060f4c0],0x1\nMOV EDI,0x1\nXOR ESI,ESI\nCALL 0x00403b30\nMOV byte ptr [0x0060f4c0],0x0\nMOV EAX,dword ptr [0x0060f394]\nCMP EAX,dword ptr [0x0060f48c]\nJNZ 0x00402fab\nPOP RAX\nRET\nMOV EDI,0x40a443\nMOV ESI,0x4099bb\nMOV EDX,0x60b\nMOV ECX,0x40a457\nCALL 0x00401b20\nMOV EDI,dword ptr [0x0060f48c]\nCALL 0x00401970\n'
p851
S'50\ne8 ca ea ff ff\n3b 05 34 c4 20 00\n75 34\n8a 05 5c c5 20 00\n84 c0\n75 28\nc6 05 51 c5 20 00 01\nbf 01 00 00 00\n31 f6\ne8 b5 0b 00 00\nc6 05 3e c5 20 00 00\n8b 05 0c c4 20 00\n3b 05 fe c4 20 00\n75 1b\n58\nc3\nbf 43 a4 40 00\nbe bb 99 40 00\nba 0b 06 00 00\nb9 57 a4 40 00\ne8 75 eb ff ff\n8b 3d db c4 20 00\ne8 ba e9 ff ff\n'
p852
S'.text:0000000000402f50\n.text:0000000000402f51\n.text:0000000000402f56\n.text:0000000000402f5c\n.text:0000000000402f5e\n.text:0000000000402f64\n.text:0000000000402f66\n.text:0000000000402f68\n.text:0000000000402f6f\n.text:0000000000402f74\n.text:0000000000402f76\n.text:0000000000402f7b\n.text:0000000000402f82\n.text:0000000000402f88\n.text:0000000000402f8e\n.text:0000000000402f90\n.text:0000000000402f91\n.text:0000000000402f92\n.text:0000000000402f97\n.text:0000000000402f9c\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402fab\n.text:0000000000402fb1\n'
p853
tp854
sS'print_args'
p855
(S'\n__stdcall print_args()\n'
p856
V\u000a_Bool print_args(void)\u000a\u000a{\u000a  FILE *tty_stream;\u000a  int iVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  ulong uVar6;\u000a  char in_DIL;\u000a  \u000a  if (bc_state.cmd_argc != 1) {\u000a    uVar6 = 0;\u000a    do {\u000a      iVar1 = fprintf((FILE *)stderr,"%s ",bc_state.cmd_argv[uVar6]);\u000a      if (iVar1 < 0) {\u000a        puVar4 = (uint *)__errno_location();\u000a        uVar3 = *puVar4;\u000a        uVar5 = dcgettext(0,"Failed to write to stderr",5);\u000a        error(1,(ulong)uVar3,uVar5,uVar5);\u000a      }\u000a      uVar6 = uVar6 + 1;\u000a    } while (uVar6 < bc_state.cmd_argc - 1);\u000a  }\u000a  if (in_DIL == 0) {\u000a    _IO_putc(10,(_IO_FILE *)stderr);\u000a  }\u000a  else {\u000a    if ((tty_stream == (FILE *)0x0) &&\u000a       (tty_stream = fopen_cloexec_for_read_only("/dev/tty"), tty_stream == (FILE *)0x0)) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar3 = *puVar4;\u000a      uVar5 = dcgettext(0,"failed to open /dev/tty for reading",5);\u000a      error(1,(ulong)uVar3,uVar5,uVar5);\u000a    }\u000a    fwrite(&DAT_0040a38e,4,1,(FILE *)stderr);\u000a    iVar1 = rpl_fflush(stderr);\u000a    if (iVar1 != 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar3 = *puVar4;\u000a      uVar5 = dcgettext(0,"Failed to write to stderr",5);\u000a      error(1,(ulong)uVar3,uVar5,uVar5);\u000a    }\u000a    uVar2 = _IO_getc((_IO_FILE *)tty_stream);\u000a    uVar3 = uVar2;\u000a    while (uVar3 != 0xffffffff) {\u000a      if (uVar3 == 10) goto LAB_00403f34;\u000a      uVar3 = _IO_getc((_IO_FILE *)tty_stream);\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar3 = *puVar4;\u000a    uVar5 = dcgettext(0,"Failed to read from stdin",5);\u000a    error(1,(ulong)uVar3,uVar5,uVar5);\u000aLAB_00403f34:\u000a    if ((uVar2 | 0x20) == 0x79) {\u000a      return true;\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDI\nCMP qword ptr [0x0060f428],0x1\nJNZ 0x00403dce\nTEST R14B,R14B\nJNZ 0x00403e35\nMOV RSI,qword ptr [0x0060f380]\nMOV EDI,0xa\nCALL 0x00401ae0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EBX,EBX\nMOV RDI,qword ptr [0x0060f380]\nMOV RAX,qword ptr [0x0060f430]\nMOV RDX,qword ptr [RAX + RBX*0x8]\nMOV ESI,0x40a343\nXOR EAX,EAX\nCALL 0x00401c10\nTEST EAX,EAX\nJNS 0x00403e1e\nCALL 0x00401940\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a347\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401d20\nINC RBX\nMOV RAX,qword ptr [0x0060f428]\nDEC RAX\nCMP RBX,RAX\nJC 0x00403dd0\nJMP 0x00403db1\nCMP qword ptr [0x0060f4b8],0x0\nJNZ 0x00403e81\nMOV EDI,0x40a361\nCALL 0x00403940\nMOV qword ptr [0x0060f4b8],RAX\nTEST RAX,RAX\nJNZ 0x00403e81\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a36a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV RCX,qword ptr [0x0060f380]\nMOV EDI,0x40a38e\nMOV ESI,0x4\nMOV EDX,0x1\nCALL 0x00401dd0\nMOV RDI,qword ptr [0x0060f380]\nCALL 0x00408870\nTEST EAX,EAX\nJZ 0x00403ed8\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a347\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV RDI,qword ptr [0x0060f4b8]\nCALL 0x00401ca0\nMOV EBX,EAX\nCMP EAX,-0x1\nJNZ 0x00403f01\nJMP 0x00403f08\nMOV RDI,qword ptr [0x0060f4b8]\nCALL 0x00401ca0\nCMP EAX,-0x1\nJZ 0x00403f08\nCMP EAX,0xa\nJNZ 0x00403ef0\nJMP 0x00403f34\nCALL 0x00401940\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a393\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401d20\nOR EBX,0x20\nMOV AL,0x1\nCMP EBX,0x79\nJNZ 0x00403dc7\nJMP 0x00403dc9\n'
p858
S'55\n41 56\n53\n41 89 fe\n48 83 3d 79 b6 20 00 01\n75 1d\n45 84 f6\n75 7f\n48 8b 35 c3 b5 20 00\nbf 0a 00 00 00\ne8 19 dd ff ff\n31 c0\n5b\n41 5e\n5d\nc3\n31 db\n48 8b 3d a9 b5 20 00\n48 8b 05 52 b6 20 00\n48 8b 14 d8\nbe 43 a3 40 00\n31 c0\ne8 22 de ff ff\n85 c0\n79 2c\ne8 49 db ff ff\n8b 28\n31 ff\nbe 47 a3 40 00\nba 05 00 00 00\ne8 66 dc ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 02 df ff ff\n48 ff c3\n48 8b 05 00 b6 20 00\n48 ff c8\n48 39 c3\n72 a0\ne9 7c ff ff ff\n48 83 3d 7b b6 20 00 00\n75 42\nbf 61 a3 40 00\ne8 f7 fa ff ff\n48 89 05 68 b6 20 00\n48 85 c0\n75 2c\ne8 e6 da ff ff\n8b 18\n31 ff\nbe 6a a3 40 00\nba 05 00 00 00\ne8 03 dc ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 9f de ff ff\n48 8b 0d f8 b4 20 00\nbf 8e a3 40 00\nbe 04 00 00 00\nba 01 00 00 00\ne8 34 df ff ff\n48 8b 3d dd b4 20 00\ne8 c8 49 00 00\n85 c0\n74 2c\ne8 8f da ff ff\n8b 18\n31 ff\nbe 47 a3 40 00\nba 05 00 00 00\ne8 ac db ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 48 de ff ff\n48 8b 3d d9 b5 20 00\ne8 bc dd ff ff\n89 c3\n83 f8 ff\n75 16\neb 1b\n48 8b 3d c1 b5 20 00\ne8 a4 dd ff ff\n83 f8 ff\n74 07\n83 f8 0a\n75 ea\neb 2c\ne8 33 da ff ff\n8b 28\n31 ff\nbe 93 a3 40 00\nba 05 00 00 00\ne8 50 db ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 ec dd ff ff\n83 cb 20\nb0 01\n83 fb 79\n0f 85 85 fe ff ff\ne9 82 fe ff ff\n'
p859
S'.text:0000000000403da0\n.text:0000000000403da1\n.text:0000000000403da3\n.text:0000000000403da4\n.text:0000000000403da7\n.text:0000000000403daf\n.text:0000000000403db1\n.text:0000000000403db4\n.text:0000000000403db6\n.text:0000000000403dbd\n.text:0000000000403dc2\n.text:0000000000403dc7\n.text:0000000000403dc9\n.text:0000000000403dca\n.text:0000000000403dcc\n.text:0000000000403dcd\n.text:0000000000403dce\n.text:0000000000403dd0\n.text:0000000000403dd7\n.text:0000000000403dde\n.text:0000000000403de2\n.text:0000000000403de7\n.text:0000000000403de9\n.text:0000000000403dee\n.text:0000000000403df0\n.text:0000000000403df2\n.text:0000000000403df7\n.text:0000000000403df9\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e05\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e12\n.text:0000000000403e14\n.text:0000000000403e16\n.text:0000000000403e19\n.text:0000000000403e1e\n.text:0000000000403e21\n.text:0000000000403e28\n.text:0000000000403e2b\n.text:0000000000403e2e\n.text:0000000000403e30\n.text:0000000000403e35\n.text:0000000000403e3d\n.text:0000000000403e3f\n.text:0000000000403e44\n.text:0000000000403e49\n.text:0000000000403e50\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e5a\n.text:0000000000403e5c\n.text:0000000000403e5e\n.text:0000000000403e63\n.text:0000000000403e68\n.text:0000000000403e6d\n.text:0000000000403e70\n.text:0000000000403e75\n.text:0000000000403e77\n.text:0000000000403e79\n.text:0000000000403e7c\n.text:0000000000403e81\n.text:0000000000403e88\n.text:0000000000403e8d\n.text:0000000000403e92\n.text:0000000000403e97\n.text:0000000000403e9c\n.text:0000000000403ea3\n.text:0000000000403ea8\n.text:0000000000403eaa\n.text:0000000000403eac\n.text:0000000000403eb1\n.text:0000000000403eb3\n.text:0000000000403eb5\n.text:0000000000403eba\n.text:0000000000403ebf\n.text:0000000000403ec4\n.text:0000000000403ec7\n.text:0000000000403ecc\n.text:0000000000403ece\n.text:0000000000403ed0\n.text:0000000000403ed3\n.text:0000000000403ed8\n.text:0000000000403edf\n.text:0000000000403ee4\n.text:0000000000403ee6\n.text:0000000000403ee9\n.text:0000000000403eeb\n.text:0000000000403ef0\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f01\n.text:0000000000403f04\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f1b\n.text:0000000000403f20\n.text:0000000000403f23\n.text:0000000000403f28\n.text:0000000000403f2a\n.text:0000000000403f2c\n.text:0000000000403f2f\n.text:0000000000403f34\n.text:0000000000403f37\n.text:0000000000403f39\n.text:0000000000403f3c\n.text:0000000000403f42\n'
p860
tp861
sS'get_max_fd'
p862
(S'\n__stdcall get_max_fd()\n'
p863
V\u000aint get_max_fd(void)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  rlimit local_18;\u000a  \u000a  iVar1 = get_proc_max_fd();\u000a  if (iVar1 < 0) {\u000a    lVar3 = sysconf(4);\u000a    iVar1 = 0x14;\u000a    if (lVar3 != -1) {\u000a      iVar1 = (int)lVar3;\u000a    }\u000a    iVar2 = getrlimit(RLIMIT_NOFILE,&local_18);\u000a    if ((iVar2 == 0) && (local_18.rlim_cur != 0xffffffffffffffff)) {\u000a      iVar1 = (int)local_18.rlim_cur;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'PUSH RBX\nSUB RSP,0x10\nCALL 0x00404f00\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00404b74\nMOV EDI,0x4\nCALL 0x00401d60\nCMP RAX,-0x1\nMOV EBX,0x14\nCMOVNZ RBX,RAX\nMOV RSI,RSP\nMOV EDI,0x7\nCALL 0x00401de0\nTEST EAX,EAX\nJNZ 0x00404b74\nMOV RAX,qword ptr [RSP]\nCMP RAX,-0x1\nJZ 0x00404b74\nMOV EBX,EAX\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p865
S'53\n48 83 ec 10\ne8 c6 03 00 00\n89 c3\n85 db\n79 34\nbf 04 00 00 00\ne8 16 d2 ff ff\n48 83 f8 ff\nbb 14 00 00 00\n48 0f 45 d8\n48 89 e6\nbf 07 00 00 00\ne8 7c d2 ff ff\n85 c0\n75 0c\n48 8b 04 24\n48 83 f8 ff\n74 02\n89 c3\n89 d8\n48 83 c4 10\n5b\nc3\n'
p866
S'.text:0000000000404b30\n.text:0000000000404b31\n.text:0000000000404b35\n.text:0000000000404b3a\n.text:0000000000404b3c\n.text:0000000000404b3e\n.text:0000000000404b40\n.text:0000000000404b45\n.text:0000000000404b4a\n.text:0000000000404b4e\n.text:0000000000404b53\n.text:0000000000404b57\n.text:0000000000404b5a\n.text:0000000000404b5f\n.text:0000000000404b64\n.text:0000000000404b66\n.text:0000000000404b68\n.text:0000000000404b6c\n.text:0000000000404b70\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b7a\n.text:0000000000404b7b\n'
p867
tp868
sS'rpl_mbrtowc'
p869
(S'\n__stdcall rpl_mbrtowc(wchar_t * pwc, char * s, size_t n, mbstate_t * ps)\n'
p870
V\u000asize_t rpl_mbrtowc(wchar_t *pwc,char *s,size_t n,mbstate_t *ps)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t sVar2;\u000a  uint *__pwc;\u000a  uint local_24;\u000a  \u000a  __pwc = &local_24;\u000a  if (pwc != (wchar_t *)0x0) {\u000a    __pwc = (uint *)pwc;\u000a  }\u000a  sVar2 = mbrtowc((wchar_t *)__pwc,s,n,(mbstate_t *)ps);\u000a  if ((n != 0) && (0xfffffffffffffffd < sVar2)) {\u000a    _Var1 = hard_locale();\u000a    if (_Var1 == false) {\u000a      *__pwc = (uint)(byte)*s;\u000a      sVar2 = 1;\u000a    }\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p871
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDX\nMOV R14,RSI\nTEST RDI,RDI\nLEA RBX,[RSP + 0x4]\nCMOVNZ RBX,RDI\nMOV RDI,RBX\nCALL 0x00401ab0\nMOV R15,RAX\nTEST R12,R12\nJZ 0x004089a7\nCMP R15,-0x2\nJC 0x004089a7\nXOR EDI,EDI\nCALL 0x00408b80\nTEST AL,AL\nJNZ 0x004089a7\nMOVZX EAX,byte ptr [R14]\nMOV dword ptr [RBX],EAX\nMOV R15D,0x1\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p872
S'41 57\n41 56\n41 54\n53\n50\n49 89 d4\n49 89 f6\n48 85 ff\n48 8d 5c 24 04\n48 0f 45 df\n48 89 df\ne8 2e 91 ff ff\n49 89 c7\n4d 85 e4\n74 1d\n49 83 ff fe\n72 17\n31 ff\ne8 e9 01 00 00\n84 c0\n75 0c\n41 0f b6 06\n89 03\n41 bf 01 00 00 00\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p873
S'.text:0000000000408960\n.text:0000000000408962\n.text:0000000000408964\n.text:0000000000408966\n.text:0000000000408967\n.text:0000000000408968\n.text:000000000040896b\n.text:000000000040896e\n.text:0000000000408971\n.text:0000000000408976\n.text:000000000040897a\n.text:000000000040897d\n.text:0000000000408982\n.text:0000000000408985\n.text:0000000000408988\n.text:000000000040898a\n.text:000000000040898e\n.text:0000000000408990\n.text:0000000000408992\n.text:0000000000408997\n.text:0000000000408999\n.text:000000000040899b\n.text:000000000040899f\n.text:00000000004089a1\n.text:00000000004089a7\n.text:00000000004089aa\n.text:00000000004089ae\n.text:00000000004089af\n.text:00000000004089b1\n.text:00000000004089b3\n.text:00000000004089b5\n'
p874
tp875
sS'_IO_putc'
p876
(S'\n__stdcall _IO_putc(int __c, _IO_FILE * __fp)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_putc(int __c,_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_putc_0060f100)();\u000a  return iVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x0060f100]\n'
p879
S'ff 25 1a d6 20 00\n'
p880
S'.plt:0000000000401ae0\n'
p881
tp882
sS'c_isgraph'
p883
(S'\n__stdcall c_isgraph()\n'
p884
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p885
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p886
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p887
S'.text:0000000000408a50\n.text:0000000000408a53\n.text:0000000000408a56\n.text:0000000000408a59\n'
p888
tp889
sS'sysconf'
p890
(S'\n__stdcall sysconf(int __name)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along sysconf(int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_sysconf_0060f240)();\u000a  return lVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060f240]\n'
p893
S'ff 25 da d4 20 00\n'
p894
S'.plt:0000000000401d60\n'
p895
tp896
sS'write'
p897
(S'\n__stdcall write(int __fd, void * __buf, size_t __n)\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t write(int __fd,void *__buf,size_t __n)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_write_0060f098)();\u000a  return sVar1;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x0060f098]\n'
p900
S'ff 25 82 d6 20 00\n'
p901
S'.plt:0000000000401a10\n'
p902
tp903
sS'quotearg_buffer_restyled'
p904
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p905
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004065bc_caseD_7;\u000a  case 2:\u000a    goto switchD_004065bc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004065bc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004065bc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004065bc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004065bc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004065bc_caseD_7;\u000aswitchD_004065bc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004065bc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004065bc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00407080;\u000aLAB_004067a0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00407089:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00407098:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004067ab:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004067ef:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004067ef;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00407098;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00406fc5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00406ed0;\u000a    }\u000a    goto LAB_00407098;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = rpl_mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00406ffa;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00407098;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit((mbstate_t *)&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00407029;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00406ae8;\u000a  case '\u005ca':\u000a    goto joined_r0x004069d8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004069d8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00406806_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004069d8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004069d8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00406806_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004069d8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00406f3e;\u000a    }\u000a    goto LAB_00407098;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00407098;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00407098;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00407098;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00407098;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00407098;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00406806_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00406f96;\u000a      goto joined_r0x00406f88;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00406a91:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00406f88;\u000a      goto LAB_00406f96;\u000a    }\u000a    goto LAB_00407098;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00407098;\u000a  }\u000a  goto joined_r0x00406ed0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00406ffa:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00407029;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00407029:\u000a  if (1 < uVar10) {\u000aLAB_00406b06:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00406bc2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00406a91;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00406bc2:\u000a        if (bVar6 != 0) goto LAB_00407098;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00406ae8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00406b06;\u000ajoined_r0x00406ed0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00406ed0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00406ef7;\u000aLAB_00406f30:\u000a    if (bVar22) goto LAB_00406f35;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00406f30;\u000aLAB_00406ef7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00406f35:\u000a      if (bVar6 != 0) goto LAB_00407098;\u000aLAB_00406f3e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00406f88;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00406f96:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00406f88:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00406fc5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004067a0;\u000aLAB_00407080:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00407089;\u000a  goto LAB_004067ab;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401a80\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00407165\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40b690 + RAX*0x8]\nMOV EDI,0x40bbb6\nMOV ESI,R15D\nCALL 0x00407810\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40b638\nMOV ESI,R15D\nCALL 0x00407810\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040661d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00406620\nNOP\nCMP R12,RSI\nJNC 0x0040660e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00406600\nJMP 0x00406620\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401a90\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004066ec\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004066ec\nMOV ECX,0x40bbb4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004066e6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00406687\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004066b4\nTEST RSI,RSI\nJZ 0x004066a1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40b638\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004066c2\nMOV ECX,0x40b638\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004066ec\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040713c\nMOV ECX,0x40bbb4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00407080\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00407089\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004067ef\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004067ea\nCMP R11,-0x1\nJNZ 0x004067ea\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401a90\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00406840\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00406a9c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40b6e8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00407098\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00406ef0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00406ef7\nJMP 0x00406f30\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401bc0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040688d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004067f1\nJMP 0x00407098\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004067f1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040681b\nCMP EBX,0x2\nJNZ 0x0040681b\nTEST R13,R13\nJNZ 0x0040681b\nJMP 0x00407098\nCMP R11,-0x1\nJZ 0x00406c73\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00406c93\nJMP 0x0040681b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406ca4\nTEST R8B,R8B\nJNZ 0x00407098\nCMP EBX,0x2\nJNZ 0x00406948\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00406948\nCMP R12,RSI\nJNC 0x00406923\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406932\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406941\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00406952\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00406e18\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00406e18\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00406e18\nCMP RCX,RSI\nJNC 0x0040698c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040699b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nJMP 0x00406ef0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406819\nJMP 0x004069fa\nMOV DL,0x74\nJMP 0x004069e2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406819\nJMP 0x004069fa\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406819\nJMP 0x004069fa\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00407098\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406819\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00406f3e\nJMP 0x00407098\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00406819\nTEST R8B,R8B\nJNZ 0x00407098\nCMP R12,RSI\nJNC 0x00406a2a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406a39\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406a48\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00406819\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00406e2b\nCMP EBX,0x2\nJNZ 0x00406819\nTEST R8B,R8B\nJZ 0x00406819\nJMP 0x00407098\nCMP EBX,0x2\nJNZ 0x00406cc4\nTEST R8B,R8B\nJNZ 0x00407098\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00406f96\nJMP 0x00406fb9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00406ce5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401e20\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406ed8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00406ed8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00406bc2\nJMP 0x00406b90\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00406b79\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00406b76\nCMP R12,RSI\nJNC 0x00406b5b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00406b6a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00406bb0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00406bb0\nTEST BPL,0x1\nJZ 0x00406c53\nCMP R12,RSI\nJNC 0x00406ba4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00406c53\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00406b90\nTEST R8B,R8B\nJNZ 0x00407098\nCMP EBX,0x2\nJNZ 0x00406c0a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00406c0a\nCMP R12,RSI\nJNC 0x00406be2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406bf1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406c00\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00406c14\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406c2b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406c45\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00406b40\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00406f96\nJMP 0x00406fb9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040681b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040681b\nJMP 0x00407098\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00406fc5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nJMP 0x00406ef0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004069e2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00406f96\nJMP 0x00406fb9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00406d07\nMOV RDI,R10\nCALL 0x00401a90\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00408960\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00406fdf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00406fd7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00406fe6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00406dce\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00406dc6\nBT RDI,RDX\nJC 0x00407132\nINC RCX\nCMP RCX,R14\nJC 0x00406db0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401e00\nTEST EAX,EAX\nJNZ 0x00406de3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401df0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00406d25\nJMP 0x00407029\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nJMP 0x00406ef0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00406819\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00406819\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00406819\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040681b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00407062\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00407098\nCMP R12,RSI\nJNC 0x00406e8e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00406ea1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406eb0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00406ebf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nJMP 0x00406ef0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00406f30\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00406f35\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00406f90\nJMP 0x00406f35\nTEST BPL,BPL\nJZ 0x00406f90\nTEST R8B,R8B\nJNZ 0x00407098\nCMP EBX,0x2\nJNZ 0x00406f78\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00406f78\nCMP R12,RSI\nJNC 0x00406f53\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406f62\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406f71\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00406f82\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00406fc2\nJMP 0x00406fbe\nTEST DIL,0x1\nJZ 0x00406fb9\nAND AL,0x1\nJNZ 0x00406fb9\nCMP R12,RSI\nJNC 0x00406fa4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406fb3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00406fc2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00407080\nJMP 0x004067a0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00407024\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040701c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00407058\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00406ffa\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00407029\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00406ae8\nJMP 0x00406b06\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00407029\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00406826\nJMP 0x00406ef0\nCMP R13,R11\nJNZ 0x004067ab\nTEST R8B,R8B\nJZ 0x004070f2\nCMP EBX,0x2\nJNZ 0x004070f2\nTEST R12,R12\nJNZ 0x004070f2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00406530\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00407126\nTEST R8B,R8B\nJNZ 0x00407126\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00407126\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00407119\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00407110\nCMP R12,RSI\nJNC 0x004070dd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004070dd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00407098\nTEST RSI,RSI\nJZ 0x00407149\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40bbb4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004066ec\nCALL 0x00401930\n'
p907
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 22 b5 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 90 b6 40 00\nbf b6 bb 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 38 b6 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 63 b4 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 b4 bb 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 38 b6 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 38 b6 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 b4 bb 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 c3 b2 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd e8 b6 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 67 b3 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 67 b3 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 91 ad ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 13 1c 00 00\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 29 b0 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 f2 af ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 b4 bb 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 c6 a7 ff ff\n'
p908
S'.text:0000000000406530\n.text:0000000000406531\n.text:0000000000406533\n.text:0000000000406535\n.text:0000000000406537\n.text:0000000000406539\n.text:000000000040653a\n.text:0000000000406541\n.text:0000000000406544\n.text:0000000000406547\n.text:000000000040654a\n.text:000000000040654f\n.text:0000000000406554\n.text:0000000000406559\n.text:000000000040655e\n.text:0000000000406566\n.text:000000000040656a\n.text:0000000000406570\n.text:0000000000406578\n.text:000000000040657d\n.text:0000000000406585\n.text:000000000040658a\n.text:000000000040658e\n.text:0000000000406590\n.text:0000000000406593\n.text:0000000000406596\n.text:0000000000406599\n.text:000000000040659e\n.text:00000000004065a1\n.text:00000000004065a4\n.text:00000000004065a7\n.text:00000000004065aa\n.text:00000000004065ac\n.text:00000000004065af\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065bc\n.text:00000000004065c3\n.text:00000000004065c8\n.text:00000000004065cb\n.text:00000000004065d0\n.text:00000000004065d5\n.text:00000000004065da\n.text:00000000004065dd\n.text:00000000004065e2\n.text:00000000004065e7\n.text:00000000004065ec\n.text:00000000004065ee\n.text:00000000004065f0\n.text:00000000004065f5\n.text:00000000004065f7\n.text:00000000004065fa\n.text:00000000004065fc\n.text:00000000004065fe\n.text:0000000000406600\n.text:0000000000406603\n.text:0000000000406605\n.text:000000000040660a\n.text:000000000040660e\n.text:0000000000406614\n.text:0000000000406617\n.text:0000000000406619\n.text:000000000040661b\n.text:000000000040661d\n.text:0000000000406620\n.text:0000000000406625\n.text:0000000000406628\n.text:000000000040662d\n.text:0000000000406632\n.text:0000000000406635\n.text:0000000000406638\n.text:000000000040663b\n.text:000000000040663e\n.text:0000000000406643\n.text:0000000000406646\n.text:0000000000406649\n.text:000000000040664e\n.text:0000000000406651\n.text:0000000000406653\n.text:0000000000406656\n.text:0000000000406658\n.text:000000000040665a\n.text:000000000040665d\n.text:0000000000406662\n.text:0000000000406667\n.text:000000000040666c\n.text:000000000040666f\n.text:0000000000406675\n.text:0000000000406677\n.text:000000000040667a\n.text:000000000040667d\n.text:0000000000406680\n.text:0000000000406682\n.text:0000000000406684\n.text:0000000000406687\n.text:000000000040668a\n.text:000000000040668f\n.text:0000000000406692\n.text:0000000000406694\n.text:0000000000406697\n.text:0000000000406699\n.text:000000000040669e\n.text:00000000004066a1\n.text:00000000004066a6\n.text:00000000004066ac\n.text:00000000004066b2\n.text:00000000004066b4\n.text:00000000004066b9\n.text:00000000004066bf\n.text:00000000004066c2\n.text:00000000004066c5\n.text:00000000004066c8\n.text:00000000004066ca\n.text:00000000004066cf\n.text:00000000004066d2\n.text:00000000004066d8\n.text:00000000004066dd\n.text:00000000004066e3\n.text:00000000004066e6\n.text:00000000004066e9\n.text:00000000004066ec\n.text:00000000004066f4\n.text:00000000004066f6\n.text:00000000004066f8\n.text:00000000004066fb\n.text:00000000004066ff\n.text:0000000000406701\n.text:0000000000406704\n.text:0000000000406708\n.text:000000000040670a\n.text:000000000040670d\n.text:0000000000406710\n.text:0000000000406713\n.text:0000000000406715\n.text:0000000000406719\n.text:000000000040671b\n.text:000000000040671f\n.text:0000000000406722\n.text:0000000000406725\n.text:0000000000406728\n.text:000000000040672a\n.text:000000000040672e\n.text:0000000000406737\n.text:000000000040673a\n.text:000000000040673c\n.text:0000000000406740\n.text:0000000000406742\n.text:0000000000406746\n.text:0000000000406748\n.text:000000000040674b\n.text:000000000040674f\n.text:0000000000406751\n.text:0000000000406754\n.text:0000000000406758\n.text:000000000040675d\n.text:0000000000406760\n.text:0000000000406764\n.text:000000000040676c\n.text:000000000040676f\n.text:0000000000406772\n.text:0000000000406774\n.text:0000000000406778\n.text:000000000040677b\n.text:000000000040677d\n.text:0000000000406782\n.text:0000000000406786\n.text:000000000040678b\n.text:0000000000406790\n.text:0000000000406794\n.text:000000000040679a\n.text:00000000004067a0\n.text:00000000004067a5\n.text:00000000004067ab\n.text:00000000004067b0\n.text:00000000004067b2\n.text:00000000004067b7\n.text:00000000004067bb\n.text:00000000004067bd\n.text:00000000004067c1\n.text:00000000004067c3\n.text:00000000004067c5\n.text:00000000004067c8\n.text:00000000004067cd\n.text:00000000004067cf\n.text:00000000004067d4\n.text:00000000004067d9\n.text:00000000004067dd\n.text:00000000004067e2\n.text:00000000004067e7\n.text:00000000004067ea\n.text:00000000004067ed\n.text:00000000004067ef\n.text:00000000004067f1\n.text:00000000004067f6\n.text:00000000004067fa\n.text:0000000000406800\n.text:0000000000406802\n.text:0000000000406804\n.text:0000000000406806\n.text:000000000040680e\n.text:0000000000406813\n.text:0000000000406819\n.text:000000000040681b\n.text:0000000000406820\n.text:0000000000406826\n.text:000000000040682f\n.text:0000000000406835\n.text:0000000000406840\n.text:0000000000406842\n.text:0000000000406845\n.text:0000000000406849\n.text:0000000000406851\n.text:0000000000406854\n.text:0000000000406859\n.text:000000000040685b\n.text:000000000040685e\n.text:0000000000406860\n.text:0000000000406865\n.text:0000000000406868\n.text:000000000040686d\n.text:0000000000406870\n.text:0000000000406875\n.text:0000000000406879\n.text:000000000040687e\n.text:0000000000406880\n.text:0000000000406882\n.text:0000000000406888\n.text:000000000040688d\n.text:0000000000406892\n.text:0000000000406895\n.text:000000000040689a\n.text:000000000040689e\n.text:00000000004068a3\n.text:00000000004068a8\n.text:00000000004068aa\n.text:00000000004068ac\n.text:00000000004068b1\n.text:00000000004068b3\n.text:00000000004068b6\n.text:00000000004068bc\n.text:00000000004068bf\n.text:00000000004068c5\n.text:00000000004068c8\n.text:00000000004068ce\n.text:00000000004068d3\n.text:00000000004068d7\n.text:00000000004068dd\n.text:00000000004068e0\n.text:00000000004068e3\n.text:00000000004068e7\n.text:00000000004068ea\n.text:00000000004068ec\n.text:00000000004068ef\n.text:00000000004068f5\n.text:00000000004068fa\n.text:00000000004068ff\n.text:0000000000406905\n.text:0000000000406908\n.text:000000000040690e\n.text:0000000000406911\n.text:0000000000406913\n.text:0000000000406915\n.text:0000000000406917\n.text:0000000000406919\n.text:000000000040691c\n.text:000000000040691e\n.text:0000000000406923\n.text:0000000000406928\n.text:000000000040692b\n.text:000000000040692d\n.text:0000000000406932\n.text:0000000000406937\n.text:000000000040693a\n.text:000000000040693c\n.text:0000000000406941\n.text:0000000000406945\n.text:0000000000406948\n.text:000000000040694b\n.text:000000000040694d\n.text:0000000000406952\n.text:0000000000406957\n.text:0000000000406959\n.text:000000000040695c\n.text:000000000040695f\n.text:0000000000406965\n.text:0000000000406969\n.text:000000000040696c\n.text:0000000000406972\n.text:0000000000406976\n.text:0000000000406979\n.text:000000000040697c\n.text:0000000000406982\n.text:0000000000406985\n.text:0000000000406987\n.text:000000000040698c\n.text:0000000000406991\n.text:0000000000406994\n.text:0000000000406996\n.text:000000000040699b\n.text:000000000040699f\n.text:00000000004069a4\n.text:00000000004069aa\n.text:00000000004069af\n.text:00000000004069b1\n.text:00000000004069b6\n.text:00000000004069bc\n.text:00000000004069be\n.text:00000000004069c0\n.text:00000000004069c2\n.text:00000000004069c4\n.text:00000000004069c9\n.text:00000000004069cf\n.text:00000000004069d1\n.text:00000000004069d3\n.text:00000000004069d8\n.text:00000000004069de\n.text:00000000004069e0\n.text:00000000004069e2\n.text:00000000004069e7\n.text:00000000004069e9\n.text:00000000004069ef\n.text:00000000004069f4\n.text:00000000004069fa\n.text:00000000004069fd\n.text:0000000000406a00\n.text:0000000000406a06\n.text:0000000000406a0b\n.text:0000000000406a0e\n.text:0000000000406a11\n.text:0000000000406a17\n.text:0000000000406a1a\n.text:0000000000406a20\n.text:0000000000406a23\n.text:0000000000406a25\n.text:0000000000406a2a\n.text:0000000000406a2f\n.text:0000000000406a32\n.text:0000000000406a34\n.text:0000000000406a39\n.text:0000000000406a3e\n.text:0000000000406a41\n.text:0000000000406a43\n.text:0000000000406a48\n.text:0000000000406a4c\n.text:0000000000406a4e\n.text:0000000000406a53\n.text:0000000000406a56\n.text:0000000000406a59\n.text:0000000000406a5f\n.text:0000000000406a62\n.text:0000000000406a68\n.text:0000000000406a6b\n.text:0000000000406a71\n.text:0000000000406a76\n.text:0000000000406a79\n.text:0000000000406a7f\n.text:0000000000406a82\n.text:0000000000406a88\n.text:0000000000406a8b\n.text:0000000000406a8d\n.text:0000000000406a91\n.text:0000000000406a97\n.text:0000000000406a9c\n.text:0000000000406aa0\n.text:0000000000406aa9\n.text:0000000000406aaf\n.text:0000000000406ab4\n.text:0000000000406ab9\n.text:0000000000406abe\n.text:0000000000406ac1\n.text:0000000000406ac6\n.text:0000000000406ac9\n.text:0000000000406acc\n.text:0000000000406ad1\n.text:0000000000406ad6\n.text:0000000000406ada\n.text:0000000000406adf\n.text:0000000000406ae4\n.text:0000000000406ae8\n.text:0000000000406aea\n.text:0000000000406aef\n.text:0000000000406af5\n.text:0000000000406af8\n.text:0000000000406afa\n.text:0000000000406afd\n.text:0000000000406b00\n.text:0000000000406b06\n.text:0000000000406b0b\n.text:0000000000406b0e\n.text:0000000000406b11\n.text:0000000000406b14\n.text:0000000000406b17\n.text:0000000000406b19\n.text:0000000000406b1d\n.text:0000000000406b1f\n.text:0000000000406b24\n.text:0000000000406b29\n.text:0000000000406b2f\n.text:0000000000406b40\n.text:0000000000406b45\n.text:0000000000406b47\n.text:0000000000406b4a\n.text:0000000000406b4c\n.text:0000000000406b4f\n.text:0000000000406b51\n.text:0000000000406b54\n.text:0000000000406b56\n.text:0000000000406b5b\n.text:0000000000406b60\n.text:0000000000406b63\n.text:0000000000406b65\n.text:0000000000406b6a\n.text:0000000000406b6e\n.text:0000000000406b76\n.text:0000000000406b79\n.text:0000000000406b7c\n.text:0000000000406b7e\n.text:0000000000406b82\n.text:0000000000406b90\n.text:0000000000406b94\n.text:0000000000406b9a\n.text:0000000000406b9d\n.text:0000000000406b9f\n.text:0000000000406ba4\n.text:0000000000406ba7\n.text:0000000000406ba9\n.text:0000000000406bb0\n.text:0000000000406bb3\n.text:0000000000406bb8\n.text:0000000000406bbb\n.text:0000000000406bc0\n.text:0000000000406bc2\n.text:0000000000406bc5\n.text:0000000000406bcb\n.text:0000000000406bce\n.text:0000000000406bd0\n.text:0000000000406bd4\n.text:0000000000406bd6\n.text:0000000000406bd8\n.text:0000000000406bdb\n.text:0000000000406bdd\n.text:0000000000406be2\n.text:0000000000406be7\n.text:0000000000406bea\n.text:0000000000406bec\n.text:0000000000406bf1\n.text:0000000000406bf6\n.text:0000000000406bf9\n.text:0000000000406bfb\n.text:0000000000406c00\n.text:0000000000406c04\n.text:0000000000406c06\n.text:0000000000406c0a\n.text:0000000000406c0d\n.text:0000000000406c0f\n.text:0000000000406c14\n.text:0000000000406c19\n.text:0000000000406c1c\n.text:0000000000406c1e\n.text:0000000000406c21\n.text:0000000000406c24\n.text:0000000000406c27\n.text:0000000000406c2b\n.text:0000000000406c30\n.text:0000000000406c33\n.text:0000000000406c35\n.text:0000000000406c38\n.text:0000000000406c3b\n.text:0000000000406c3e\n.text:0000000000406c41\n.text:0000000000406c45\n.text:0000000000406c49\n.text:0000000000406c4d\n.text:0000000000406c51\n.text:0000000000406c53\n.text:0000000000406c57\n.text:0000000000406c5a\n.text:0000000000406c60\n.text:0000000000406c64\n.text:0000000000406c68\n.text:0000000000406c6e\n.text:0000000000406c73\n.text:0000000000406c76\n.text:0000000000406c79\n.text:0000000000406c7e\n.text:0000000000406c81\n.text:0000000000406c83\n.text:0000000000406c86\n.text:0000000000406c8d\n.text:0000000000406c93\n.text:0000000000406c95\n.text:0000000000406c99\n.text:0000000000406c9f\n.text:0000000000406ca4\n.text:0000000000406ca9\n.text:0000000000406caf\n.text:0000000000406cb2\n.text:0000000000406cb4\n.text:0000000000406cb9\n.text:0000000000406cbf\n.text:0000000000406cc4\n.text:0000000000406cc6\n.text:0000000000406ccb\n.text:0000000000406cd1\n.text:0000000000406cd3\n.text:0000000000406cd6\n.text:0000000000406cda\n.text:0000000000406ce0\n.text:0000000000406ce5\n.text:0000000000406cf1\n.text:0000000000406cf5\n.text:0000000000406cf7\n.text:0000000000406cfa\n.text:0000000000406cff\n.text:0000000000406d04\n.text:0000000000406d07\n.text:0000000000406d0b\n.text:0000000000406d10\n.text:0000000000406d12\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d20\n.text:0000000000406d25\n.text:0000000000406d2a\n.text:0000000000406d2e\n.text:0000000000406d32\n.text:0000000000406d3a\n.text:0000000000406d3d\n.text:0000000000406d42\n.text:0000000000406d45\n.text:0000000000406d48\n.text:0000000000406d4d\n.text:0000000000406d50\n.text:0000000000406d53\n.text:0000000000406d59\n.text:0000000000406d5d\n.text:0000000000406d67\n.text:0000000000406d6d\n.text:0000000000406d71\n.text:0000000000406d76\n.text:0000000000406d7c\n.text:0000000000406d80\n.text:0000000000406d83\n.text:0000000000406d87\n.text:0000000000406d89\n.text:0000000000406d8e\n.text:0000000000406d93\n.text:0000000000406d97\n.text:0000000000406d99\n.text:0000000000406d9e\n.text:0000000000406da3\n.text:0000000000406da7\n.text:0000000000406dac\n.text:0000000000406db0\n.text:0000000000406db4\n.text:0000000000406db7\n.text:0000000000406dba\n.text:0000000000406dbc\n.text:0000000000406dc0\n.text:0000000000406dc6\n.text:0000000000406dc9\n.text:0000000000406dcc\n.text:0000000000406dce\n.text:0000000000406dd2\n.text:0000000000406dd7\n.text:0000000000406dd9\n.text:0000000000406ddb\n.text:0000000000406de3\n.text:0000000000406de8\n.text:0000000000406deb\n.text:0000000000406df3\n.text:0000000000406df6\n.text:0000000000406df9\n.text:0000000000406dfe\n.text:0000000000406e01\n.text:0000000000406e03\n.text:0000000000406e08\n.text:0000000000406e0d\n.text:0000000000406e13\n.text:0000000000406e18\n.text:0000000000406e1b\n.text:0000000000406e20\n.text:0000000000406e26\n.text:0000000000406e2b\n.text:0000000000406e30\n.text:0000000000406e36\n.text:0000000000406e3a\n.text:0000000000406e3d\n.text:0000000000406e43\n.text:0000000000406e49\n.text:0000000000406e4f\n.text:0000000000406e54\n.text:0000000000406e56\n.text:0000000000406e59\n.text:0000000000406e5f\n.text:0000000000406e63\n.text:0000000000406e65\n.text:0000000000406e6f\n.text:0000000000406e73\n.text:0000000000406e79\n.text:0000000000406e7c\n.text:0000000000406e7e\n.text:0000000000406e84\n.text:0000000000406e87\n.text:0000000000406e89\n.text:0000000000406e8e\n.text:0000000000406e93\n.text:0000000000406e96\n.text:0000000000406e9a\n.text:0000000000406e9c\n.text:0000000000406ea1\n.text:0000000000406ea6\n.text:0000000000406ea9\n.text:0000000000406eab\n.text:0000000000406eb0\n.text:0000000000406eb5\n.text:0000000000406eb8\n.text:0000000000406eba\n.text:0000000000406ebf\n.text:0000000000406ec3\n.text:0000000000406ec5\n.text:0000000000406ec8\n.text:0000000000406ecb\n.text:0000000000406ed0\n.text:0000000000406ed6\n.text:0000000000406ed8\n.text:0000000000406edd\n.text:0000000000406ee2\n.text:0000000000406ee8\n.text:0000000000406ef0\n.text:0000000000406ef5\n.text:0000000000406ef7\n.text:0000000000406efc\n.text:0000000000406eff\n.text:0000000000406f01\n.text:0000000000406f04\n.text:0000000000406f06\n.text:0000000000406f09\n.text:0000000000406f0c\n.text:0000000000406f0f\n.text:0000000000406f11\n.text:0000000000406f19\n.text:0000000000406f1c\n.text:0000000000406f1e\n.text:0000000000406f20\n.text:0000000000406f30\n.text:0000000000406f33\n.text:0000000000406f35\n.text:0000000000406f38\n.text:0000000000406f3e\n.text:0000000000406f41\n.text:0000000000406f43\n.text:0000000000406f45\n.text:0000000000406f47\n.text:0000000000406f49\n.text:0000000000406f4c\n.text:0000000000406f4e\n.text:0000000000406f53\n.text:0000000000406f58\n.text:0000000000406f5b\n.text:0000000000406f5d\n.text:0000000000406f62\n.text:0000000000406f67\n.text:0000000000406f6a\n.text:0000000000406f6c\n.text:0000000000406f71\n.text:0000000000406f75\n.text:0000000000406f78\n.text:0000000000406f7b\n.text:0000000000406f7d\n.text:0000000000406f82\n.text:0000000000406f85\n.text:0000000000406f88\n.text:0000000000406f8a\n.text:0000000000406f90\n.text:0000000000406f94\n.text:0000000000406f96\n.text:0000000000406f98\n.text:0000000000406f9a\n.text:0000000000406f9d\n.text:0000000000406f9f\n.text:0000000000406fa4\n.text:0000000000406fa9\n.text:0000000000406fac\n.text:0000000000406fae\n.text:0000000000406fb3\n.text:0000000000406fb7\n.text:0000000000406fb9\n.text:0000000000406fbc\n.text:0000000000406fbe\n.text:0000000000406fc2\n.text:0000000000406fc5\n.text:0000000000406fc8\n.text:0000000000406fcc\n.text:0000000000406fd2\n.text:0000000000406fd7\n.text:0000000000406fdf\n.text:0000000000406fe4\n.text:0000000000406fe6\n.text:0000000000406fee\n.text:0000000000406ff3\n.text:0000000000406ff5\n.text:0000000000406ffa\n.text:0000000000406fff\n.text:0000000000407003\n.text:0000000000407005\n.text:000000000040700a\n.text:000000000040700d\n.text:0000000000407010\n.text:0000000000407012\n.text:000000000040701a\n.text:000000000040701c\n.text:0000000000407024\n.text:0000000000407029\n.text:000000000040702d\n.text:0000000000407032\n.text:0000000000407037\n.text:000000000040703b\n.text:0000000000407040\n.text:0000000000407045\n.text:0000000000407049\n.text:000000000040704d\n.text:0000000000407053\n.text:0000000000407058\n.text:0000000000407060\n.text:0000000000407062\n.text:0000000000407064\n.text:0000000000407068\n.text:000000000040706d\n.text:0000000000407073\n.text:0000000000407080\n.text:0000000000407083\n.text:0000000000407089\n.text:000000000040708c\n.text:000000000040708e\n.text:0000000000407091\n.text:0000000000407093\n.text:0000000000407096\n.text:0000000000407098\n.text:00000000004070a0\n.text:00000000004070a6\n.text:00000000004070aa\n.text:00000000004070ad\n.text:00000000004070b1\n.text:00000000004070b6\n.text:00000000004070ba\n.text:00000000004070be\n.text:00000000004070c1\n.text:00000000004070c4\n.text:00000000004070c7\n.text:00000000004070cb\n.text:00000000004070cf\n.text:00000000004070d1\n.text:00000000004070d6\n.text:00000000004070da\n.text:00000000004070dd\n.text:00000000004070e0\n.text:00000000004070e7\n.text:00000000004070e8\n.text:00000000004070ea\n.text:00000000004070ec\n.text:00000000004070ee\n.text:00000000004070f0\n.text:00000000004070f1\n.text:00000000004070f2\n.text:00000000004070fa\n.text:00000000004070fd\n.text:00000000004070ff\n.text:0000000000407102\n.text:0000000000407104\n.text:0000000000407106\n.text:0000000000407108\n.text:000000000040710a\n.text:000000000040710d\n.text:0000000000407110\n.text:0000000000407113\n.text:0000000000407115\n.text:0000000000407119\n.text:000000000040711c\n.text:000000000040711f\n.text:0000000000407122\n.text:0000000000407124\n.text:0000000000407126\n.text:0000000000407129\n.text:000000000040712b\n.text:0000000000407130\n.text:0000000000407132\n.text:0000000000407137\n.text:000000000040713c\n.text:000000000040713f\n.text:0000000000407141\n.text:0000000000407146\n.text:0000000000407149\n.text:000000000040714e\n.text:0000000000407151\n.text:0000000000407157\n.text:000000000040715d\n.text:0000000000407160\n.text:0000000000407165\n'
p909
tp910
sS'hard_locale'
p911
(S'\n__stdcall hard_locale()\n'
p912
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p913
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401d00\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00408bad\nCMP byte ptr [RAX],0x43\nJNZ 0x00408b9a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00408bab\nMOV ESI,0x40c45a\nMOV RDI,RAX\nCALL 0x00401be0\nTEST EAX,EAX\nJNZ 0x00408bad\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p914
S'53\n31 f6\ne8 78 91 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 5a c4 40 00\n48 89 c7\ne8 39 90 ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p915
S'.text:0000000000408b80\n.text:0000000000408b81\n.text:0000000000408b83\n.text:0000000000408b88\n.text:0000000000408b8a\n.text:0000000000408b8d\n.text:0000000000408b8f\n.text:0000000000408b92\n.text:0000000000408b94\n.text:0000000000408b98\n.text:0000000000408b9a\n.text:0000000000408b9f\n.text:0000000000408ba2\n.text:0000000000408ba7\n.text:0000000000408ba9\n.text:0000000000408bab\n.text:0000000000408bad\n.text:0000000000408baf\n.text:0000000000408bb0\n'
p916
tp917
sS'bc_argc_limit_reached'
p918
(S'\n__stdcall bc_argc_limit_reached(buildcmd_control * ctl, buildcmd_state * state)\n'
p919
V\u000aint bc_argc_limit_reached(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t *in_RDX;\u000a  \u000a  if ((((int)ctl != 0) || (state[1].cmd_argc == 0)) ||\u000a     (uVar1 = 1, *in_RDX - *(long *)&state->todo != state[1].cmd_argc)) {\u000a    uVar1 = (uint)(*in_RDX == state->cmd_argv_chars);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p920
S'TEST EDI,EDI\nJZ 0x004047f1\nMOV RCX,qword ptr [RDX]\nXOR EAX,EAX\nCMP RCX,qword ptr [RSI + 0x20]\nSETZ AL\nRET\nMOV RCX,qword ptr [RSI + 0x50]\nTEST RCX,RCX\nJZ 0x004047e4\nMOV RDI,qword ptr [RDX]\nSUB RDI,qword ptr [RSI + 0x38]\nMOV EAX,0x1\nCMP RDI,RCX\nJNZ 0x004047e4\nJMP 0x004047f0\n'
p921
S'85 ff\n74 0d\n48 8b 0a\n31 c0\n48 3b 4e 20\n0f 94 c0\nc3\n48 8b 4e 50\n48 85 c9\n74 ea\n48 8b 3a\n48 2b 7e 38\nb8 01 00 00 00\n48 39 cf\n75 d9\neb e3\n'
p922
S'.text:00000000004047e0\n.text:00000000004047e2\n.text:00000000004047e4\n.text:00000000004047e7\n.text:00000000004047e9\n.text:00000000004047ed\n.text:00000000004047f0\n.text:00000000004047f1\n.text:00000000004047f5\n.text:00000000004047f8\n.text:00000000004047fa\n.text:00000000004047fd\n.text:0000000000404801\n.text:0000000000404806\n.text:0000000000404809\n.text:000000000040480b\n'
p923
tp924
sS'set_quoting_style'
p925
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p926
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p927
S'TEST RDI,RDI\nMOV EAX,0x60f510\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p928
S'48 85 ff\nb8 10 f5 60 00\n48 0f 45 c7\n89 30\nc3\n'
p929
S'.text:0000000000406410\n.text:0000000000406413\n.text:0000000000406418\n.text:000000000040641c\n.text:000000000040641e\n'
p930
tp931
sS'o_cloexec_works'
p932
(S'\n__stdcall o_cloexec_works()\n'
p933
V\u000a_Bool o_cloexec_works(void)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  bVar2 = false;\u000a  __fd = open_safer("/",0x80000);\u000a  if (-1 < __fd) {\u000a    iVar1 = fd_is_cloexec();\u000a    bVar2 = iVar1 != 0;\u000a    close(__fd);\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p934
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nXOR EBX,EBX\nMOV EDI,0x40b68a\nMOV ESI,0x80000\nXOR EAX,EAX\nCALL 0x00405670\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404dff\nMOV EDI,EBP\nCALL 0x00405000\nTEST EAX,EAX\nSETNZ BL\nMOV EDI,EBP\nCALL 0x00401b70\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p935
S'55\n53\n50\n31 db\nbf 8a b6 40 00\nbe 00 00 08 00\n31 c0\ne8 8a 08 00 00\n89 c5\n85 ed\n78 13\n89 ef\ne8 0d 02 00 00\n85 c0\n0f 95 c3\n89 ef\ne8 71 cd ff ff\n89 d8\n48 83 c4 08\n5b\n5d\nc3\n'
p936
S'.text:0000000000404dd0\n.text:0000000000404dd1\n.text:0000000000404dd2\n.text:0000000000404dd3\n.text:0000000000404dd5\n.text:0000000000404dda\n.text:0000000000404ddf\n.text:0000000000404de1\n.text:0000000000404de6\n.text:0000000000404de8\n.text:0000000000404dea\n.text:0000000000404dec\n.text:0000000000404dee\n.text:0000000000404df3\n.text:0000000000404df5\n.text:0000000000404df8\n.text:0000000000404dfa\n.text:0000000000404dff\n.text:0000000000404e01\n.text:0000000000404e05\n.text:0000000000404e06\n.text:0000000000404e07\n'
p937
tp938
sS'textdomain'
p939
(S'\n__stdcall textdomain()\n'
p940
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060f0a8)();\u000a  return;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x0060f0a8]\n'
p942
S'ff 25 72 d6 20 00\n'
p943
S'.plt:0000000000401a30\n'
p944
tp945
sS'xmemdup'
p946
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p947
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p948
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00408210\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401c40\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p949
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 cc 98 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p950
S'.text:0000000000408350\n.text:0000000000408352\n.text:0000000000408354\n.text:0000000000408355\n.text:0000000000408358\n.text:000000000040835b\n.text:000000000040835e\n.text:0000000000408363\n.text:0000000000408366\n.text:0000000000408369\n.text:000000000040836c\n.text:000000000040836f\n.text:0000000000408374\n.text:0000000000408377\n.text:0000000000408378\n.text:000000000040837a\n.text:000000000040837c\n'
p951
tp952
sS'explain_how_to_report_bugs'
p953
(S'\n__stdcall explain_how_to_report_bugs(FILE * f, char * program_name)\n'
p954
V\u000aint explain_how_to_report_bugs(FILE *f,char *program_name)\u000a\u000a{\u000a  int iVar1;\u000a  char *__format;\u000a  \u000a  __format = (char *)dcgettext(0,\u000a                               "Please see also the documentation at %s.\u005cnYou can report (and track progress on fixing) bugs in the \u005c"%s\u005c"\u005cnprogram via the %s bug-reporting page at\u005cn%s or, if\u005cnyou have no web access, by sending email to <%s>.\u005cn"\u000a                               ,5);\u000a  iVar1 = fprintf((FILE *)f,__format,"http://www.gnu.org/software/findutils/",program_name,\u000a                  "GNU findutils","https://savannah.gnu.org/bugs/?group=findutils",\u000a                  "bug-findutils@gnu.org");\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40b41d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV qword ptr [RSP],0x40b541\nMOV EDX,0x40b4eb\nMOV R8D,0x40b3b1\nMOV R9D,0x40b512\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nMOV RCX,R14\nCALL 0x00401c10\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p956
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 ff\nbe 1d b4 40 00\nba 05 00 00 00\ne8 f5 c7 ff ff\n48 89 c1\n48 c7 04 24 41 b5 40 00\nba eb b4 40 00\n41 b8 b1 b3 40 00\n41 b9 12 b5 40 00\n31 c0\n48 89 df\n48 89 ce\n4c 89 f1\ne8 69 c9 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p957
S'.text:0000000000405260\n.text:0000000000405262\n.text:0000000000405263\n.text:0000000000405264\n.text:0000000000405267\n.text:000000000040526a\n.text:000000000040526c\n.text:0000000000405271\n.text:0000000000405276\n.text:000000000040527b\n.text:000000000040527e\n.text:0000000000405286\n.text:000000000040528b\n.text:0000000000405291\n.text:0000000000405297\n.text:0000000000405299\n.text:000000000040529c\n.text:000000000040529f\n.text:00000000004052a2\n.text:00000000004052a7\n.text:00000000004052ab\n.text:00000000004052ac\n.text:00000000004052ae\n'
p958
tp959
sS'get_quoting_style'
p960
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p961
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p962
S'TEST RDI,RDI\nMOV EAX,0x60f510\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p963
S'48 85 ff\nb8 10 f5 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p964
S'.text:0000000000406400\n.text:0000000000406403\n.text:0000000000406408\n.text:000000000040640c\n.text:000000000040640e\n'
p965
tp966
sS'exit'
p967
(S'\n__stdcall exit(int __status)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060f270)();\u000a  return;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060f270]\n'
p970
S'ff 25 aa d4 20 00\n'
p971
S'.plt:0000000000401dc0\n'
p972
tp973
sS'locale_charset'
p974
(S'\n__stdcall locale_charset()\n'
p975
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00408c3d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00408c3d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p976
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401cb0\nTEST RAX,RAX\nMOV R14D,0x40a59d\nCMOVNZ R14,RAX\nCALL 0x00408c50\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00408c15\nJMP 0x00408c3d\nMOV RDI,RBX\nCALL 0x00401a90\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401a90\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00408c3d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00408c30\nCMP BPL,0x2a\nJNZ 0x00408bf0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408bf0\nMOV RDI,RBX\nCALL 0x00401a90\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40c588\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p977
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 e2 90 ff ff\n48 85 c0\n41 be 9d a5 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 98 8e ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 8a 8e ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 c0 8f ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 58 8e ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 88 c5 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p978
S'.text:0000000000408bc0\n.text:0000000000408bc1\n.text:0000000000408bc3\n.text:0000000000408bc4\n.text:0000000000408bc9\n.text:0000000000408bce\n.text:0000000000408bd1\n.text:0000000000408bd7\n.text:0000000000408bdb\n.text:0000000000408be0\n.text:0000000000408be3\n.text:0000000000408be6\n.text:0000000000408be9\n.text:0000000000408beb\n.text:0000000000408bf0\n.text:0000000000408bf3\n.text:0000000000408bf8\n.text:0000000000408bfc\n.text:0000000000408c01\n.text:0000000000408c06\n.text:0000000000408c0b\n.text:0000000000408c10\n.text:0000000000408c13\n.text:0000000000408c15\n.text:0000000000408c18\n.text:0000000000408c1b\n.text:0000000000408c20\n.text:0000000000408c22\n.text:0000000000408c24\n.text:0000000000408c28\n.text:0000000000408c2a\n.text:0000000000408c2e\n.text:0000000000408c30\n.text:0000000000408c33\n.text:0000000000408c38\n.text:0000000000408c3d\n.text:0000000000408c41\n.text:0000000000408c46\n.text:0000000000408c4a\n.text:0000000000408c4b\n.text:0000000000408c4d\n.text:0000000000408c4e\n'
p979
tp980
sS'set_program_name'
p981
(S'\n__stdcall set_program_name(char * argv0)\n'
p982
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00406391\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401b00\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040637b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40b684\nMOV EDX,0x7\nCALL 0x00401960\nTEST EAX,EAX\nJNZ 0x0040637b\nMOV ESI,0x40b68c\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401960\nTEST EAX,EAX\nJNZ 0x00406378\nADD R14,0x3\nMOV qword ptr [0x0060f340],R14\nMOV RBX,R14\nMOV qword ptr [0x0060f500],RBX\nMOV qword ptr [0x0060f370],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060f380]\nMOV EDI,0x40b64c\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401dd0\nCALL 0x00401930\n'
p984
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 d7 b7 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 84 b6 40 00\nba 07 00 00 00\ne8 0d b6 ff ff\n85 c0\n75 24\nbe 8c b6 40 00\nba 03 00 00 00\n4c 89 f7\ne8 f7 b5 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 c8 8f 20 00\n4c 89 f3\n48 89 1d 7e 91 20 00\n48 89 1d e7 8f 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d e8 8f 20 00\nbf 4c b6 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 24 ba ff ff\ne8 7f b5 ff ff\n'
p985
S'.text:0000000000406310\n.text:0000000000406312\n.text:0000000000406313\n.text:0000000000406314\n.text:0000000000406317\n.text:000000000040631a\n.text:000000000040631c\n.text:0000000000406321\n.text:0000000000406324\n.text:0000000000406329\n.text:000000000040632c\n.text:0000000000406330\n.text:0000000000406334\n.text:0000000000406337\n.text:000000000040633a\n.text:000000000040633e\n.text:0000000000406340\n.text:0000000000406344\n.text:0000000000406349\n.text:000000000040634e\n.text:0000000000406353\n.text:0000000000406355\n.text:0000000000406357\n.text:000000000040635c\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406369\n.text:000000000040636b\n.text:000000000040636d\n.text:0000000000406371\n.text:0000000000406378\n.text:000000000040637b\n.text:0000000000406382\n.text:0000000000406389\n.text:000000000040638d\n.text:000000000040638e\n.text:0000000000406390\n.text:0000000000406391\n.text:0000000000406398\n.text:000000000040639d\n.text:00000000004063a2\n.text:00000000004063a7\n.text:00000000004063ac\n'
p986
tp987
sS'quotearg_buffer'
p988
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p989
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60f510\nCMOVNZ RBP,R8\nCALL 0x00401940\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00406530\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 10 f5 60 00\n49 0f 45 e8\ne8 68 b4 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:00000000004064b0\n.text:00000000004064b1\n.text:00000000004064b3\n.text:00000000004064b5\n.text:00000000004064b7\n.text:00000000004064b9\n.text:00000000004064ba\n.text:00000000004064bb\n.text:00000000004064be\n.text:00000000004064c1\n.text:00000000004064c4\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064cf\n.text:00000000004064d3\n.text:00000000004064d8\n.text:00000000004064db\n.text:00000000004064dd\n.text:00000000004064e1\n.text:00000000004064e5\n.text:00000000004064e9\n.text:00000000004064ed\n.text:00000000004064f0\n.text:00000000004064f3\n.text:00000000004064f6\n.text:00000000004064f9\n.text:00000000004064fc\n.text:00000000004064ff\n.text:0000000000406503\n.text:0000000000406504\n.text:0000000000406509\n.text:000000000040650d\n.text:0000000000406511\n.text:0000000000406513\n.text:0000000000406517\n.text:0000000000406518\n.text:000000000040651a\n.text:000000000040651c\n.text:000000000040651e\n.text:0000000000406520\n.text:0000000000406521\n'
p993
tp994
sS'parse_num'
p995
(S'\n__stdcall parse_num(char * str, long min, long max)\n'
p996
V\u000along parse_num(char *str,long min,long max)\u000a\u000a{\u000a  FILE *__stream;\u000a  char *__format;\u000a  FILE *pFVar1;\u000a  ulong uVar2;\u000a  FILE *in_RCX;\u000a  int in_R8D;\u000a  char *local_30;\u000a  \u000a  uVar2 = min & 0xffffffff;\u000a  pFVar1 = (FILE *)strtol(str,&local_30,10);\u000a  __stream = stderr;\u000a  if ((local_30 != str) && (*local_30 == 0)) {\u000a    if ((long)pFVar1 < max) {\u000a      __format = (char *)dcgettext(0,"%s: value %s for -%c option should be >= %ld\u005cn",5);\u000a      fprintf(__stream,__format,program_name,str,uVar2,max);\u000a      if (in_R8D == 0) {\u000a        return max;\u000a      }\u000a      pFVar1 = (FILE *)usage(1);\u000a      in_RCX = __stream;\u000a    }\u000a    __stream = stderr;\u000a    if ((-1 < (long)in_RCX) && ((long)in_RCX < (long)pFVar1)) {\u000a      __format = (char *)dcgettext(0,"%s: value %s for -%c option should be <= %ld\u005cn",5);\u000a      fprintf(__stream,__format,program_name,str,uVar2,in_RCX);\u000a      pFVar1 = in_RCX;\u000a      if (in_R8D != 0) goto LAB_004038f4;\u000a    }\u000a    return (long)pFVar1;\u000a  }\u000a  __format = (char *)dcgettext(0,"%s: invalid number \u005c"%s\u005c" for -%c option\u005cn",5);\u000a  fprintf(__stream,__format,program_name,str,uVar2);\u000aLAB_004038f4:\u000a  usage(1);\u000a  uVar2 = (ulong)(uint)proc_max;\u000a  if (proc_max != 0x7fffffff) {\u000a    proc_max = proc_max + 1;\u000a  }\u000a  stop_waiting = 1;\u000a  return uVar2;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R15D,R8D\nMOV R12,RCX\nMOV RBP,RDX\nMOV R14D,ESI\nMOV RBX,RDI\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nCALL 0x00401c30\nMOV RCX,qword ptr [RSP + 0x8]\nCMP RCX,RBX\nJZ 0x004038bf\nCMP byte ptr [RCX],0x0\nJNZ 0x004038bf\nCMP RAX,RBP\nJGE 0x0040385d\nMOV R12,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x40a49c\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f500]\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,RCX\nMOV RCX,RBX\nMOV R8D,R14D\nMOV R9,RBP\nCALL 0x00401c10\nTEST R15D,R15D\nJZ 0x004038af\nMOV EDI,0x1\nCALL 0x00403480\nTEST R12,R12\nJS 0x004038ac\nCMP RAX,R12\nMOV RBP,RAX\nJLE 0x004038af\nMOV RBP,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x40a4ca\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f500]\nXOR EAX,EAX\nMOV RDI,RBP\nMOV RSI,RCX\nMOV RCX,RBX\nMOV R8D,R14D\nMOV R9,R12\nCALL 0x00401c10\nTEST R15D,R15D\nMOV RBP,R12\nJZ 0x004038af\nJMP 0x004038f4\nMOV RBP,RAX\nMOV RAX,RBP\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBP,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x40a474\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f500]\nXOR EAX,EAX\nMOV RDI,RBP\nMOV RSI,RCX\nMOV RCX,RBX\nMOV R8D,R14D\nCALL 0x00401c10\nMOV EDI,0x1\nCALL 0x00403480\nNOP\n'
p998
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n45 89 c7\n49 89 cc\n48 89 d5\n41 89 f6\n48 89 fb\n48 8d 74 24 08\nba 0a 00 00 00\ne8 36 e4 ff ff\n48 8b 4c 24 08\n48 39 d9\n0f 84 b7 00 00 00\n80 39 00\n0f 85 ae 00 00 00\n48 39 e8\n7d 47\n4c 8b 25 63 bb 20 00\n31 ff\nbe 9c a4 40 00\nba 05 00 00 00\ne8 42 e2 ff ff\n48 89 c1\n48 8b 15 c8 bc 20 00\n31 c0\n4c 89 e7\n48 89 ce\n48 89 d9\n45 89 f0\n49 89 e9\ne8 c2 e3 ff ff\n45 85 ff\n74 5c\nbf 01 00 00 00\ne8 23 fc ff ff\n4d 85 e4\n78 4a\n4c 39 e0\n48 89 c5\n7e 45\n48 8b 2d 0f bb 20 00\n31 ff\nbe ca a4 40 00\nba 05 00 00 00\ne8 ee e1 ff ff\n48 89 c1\n48 8b 15 74 bc 20 00\n31 c0\n48 89 ef\n48 89 ce\n48 89 d9\n45 89 f0\n4d 89 e1\ne8 6e e3 ff ff\n45 85 ff\n4c 89 e5\n74 05\neb 48\n48 89 c5\n48 89 e8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 2d ba ba 20 00\n31 ff\nbe 74 a4 40 00\nba 05 00 00 00\ne8 99 e1 ff ff\n48 89 c1\n48 8b 15 1f bc 20 00\n31 c0\n48 89 ef\n48 89 ce\n48 89 d9\n45 89 f0\ne8 1c e3 ff ff\nbf 01 00 00 00\ne8 82 fb ff ff\n66 90\n'
p999
S'.text:00000000004037d0\n.text:00000000004037d1\n.text:00000000004037d3\n.text:00000000004037d5\n.text:00000000004037d7\n.text:00000000004037d8\n.text:00000000004037dc\n.text:00000000004037df\n.text:00000000004037e2\n.text:00000000004037e5\n.text:00000000004037e8\n.text:00000000004037eb\n.text:00000000004037f0\n.text:00000000004037f5\n.text:00000000004037fa\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403808\n.text:000000000040380b\n.text:0000000000403811\n.text:0000000000403814\n.text:0000000000403816\n.text:000000000040381d\n.text:000000000040381f\n.text:0000000000403824\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403831\n.text:0000000000403838\n.text:000000000040383a\n.text:000000000040383d\n.text:0000000000403840\n.text:0000000000403843\n.text:0000000000403846\n.text:0000000000403849\n.text:000000000040384e\n.text:0000000000403851\n.text:0000000000403853\n.text:0000000000403858\n.text:000000000040385d\n.text:0000000000403860\n.text:0000000000403862\n.text:0000000000403865\n.text:0000000000403868\n.text:000000000040386a\n.text:0000000000403871\n.text:0000000000403873\n.text:0000000000403878\n.text:000000000040387d\n.text:0000000000403882\n.text:0000000000403885\n.text:000000000040388c\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403894\n.text:0000000000403897\n.text:000000000040389a\n.text:000000000040389d\n.text:00000000004038a2\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038aa\n.text:00000000004038ac\n.text:00000000004038af\n.text:00000000004038b2\n.text:00000000004038b6\n.text:00000000004038b7\n.text:00000000004038b9\n.text:00000000004038bb\n.text:00000000004038bd\n.text:00000000004038be\n.text:00000000004038bf\n.text:00000000004038c6\n.text:00000000004038c8\n.text:00000000004038cd\n.text:00000000004038d2\n.text:00000000004038d7\n.text:00000000004038da\n.text:00000000004038e1\n.text:00000000004038e3\n.text:00000000004038e6\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038ef\n.text:00000000004038f4\n.text:00000000004038f9\n.text:00000000004038fe\n'
p1000
tp1001
sS'quotearg_colon'
p1002
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1003
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1004
S'MOV ESI,0x3a\nJMP 0x00407690\n'
p1005
S'be 3a 00 00 00\neb e9\n'
p1006
S'.text:00000000004076a0\n.text:00000000004076a5\n'
p1007
tp1008
sS'close_stdin'
p1009
(S'\n__stdcall close_stdin()\n'
p1010
V\u000avoid close_stdin(void)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *fp;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  bool bVar6;\u000a  \u000a  fp = stdin;\u000a  sVar3 = freadahead(stdin);\u000a  bVar6 = false;\u000a  if (sVar3 != 0) {\u000a    iVar2 = rpl_fseeko(fp,0);\u000a    bVar6 = false;\u000a    if (iVar2 == 0) {\u000a      iVar2 = rpl_fflush(stdin);\u000a      bVar6 = iVar2 != 0;\u000a    }\u000a  }\u000a  iVar2 = close_stream(stdin);\u000a  if ((!bVar6) && (iVar2 == 0)) {\u000a    close_stdout();\u000a    return;\u000a  }\u000a  uVar4 = dcgettext(0,"error closing file",5);\u000a  arg = file_name;\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  if (arg == (char *)0x0) {\u000a    error(0,(ulong)uVar1,0x40b41a,uVar4);\u000a  }\u000a  else {\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a  }\u000a  close_stdout();\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,qword ptr [0x0060f350]\nMOV RDI,RBX\nCALL 0x004088c0\nXOR EBP,EBP\nTEST RAX,RAX\nJZ 0x0040547f\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004088f0\nTEST EAX,EAX\nJNZ 0x0040547f\nMOV RDI,qword ptr [0x0060f350]\nCALL 0x00408870\nTEST EAX,EAX\nSETNZ BPL\nMOV RDI,qword ptr [0x0060f350]\nCALL 0x00408b10\nTEST BPL,BPL\nJNZ 0x0040549d\nTEST EAX,EAX\nJNZ 0x0040549d\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00405530\nXOR EDI,EDI\nMOV ESI,0x40b5aa\nMOV EDX,0x5\nCALL 0x00401a70\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060f4e8]\nCALL 0x00401940\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004054d9\nXOR EDI,EDI\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401d20\nJMP 0x004054f7\nMOV RDI,RBX\nCALL 0x004076a0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40b5bd\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401d20\nCALL 0x00405530\nMOV EDI,dword ptr [0x0060f2c8]\nCALL 0x00401970\n'
p1012
S'55\n41 56\n53\n48 8b 1d 05 9f 20 00\n48 89 df\ne8 6d 34 00 00\n31 ed\n48 85 c0\n74 25\n31 f6\nba 01 00 00 00\n48 89 df\ne8 87 34 00 00\n85 c0\n75 12\n48 8b 3d dc 9e 20 00\ne8 f7 33 00 00\n85 c0\n40 0f 95 c5\n48 8b 3d ca 9e 20 00\ne8 85 36 00 00\n40 84 ed\n75 0d\n85 c0\n75 09\n5b\n41 5e\n5d\ne9 93 00 00 00\n31 ff\nbe aa b5 40 00\nba 05 00 00 00\ne8 c2 c5 ff ff\n49 89 c6\n48 8b 1d 30 a0 20 00\ne8 83 c4 ff ff\n48 85 db\n8b 28\n75 15\n31 ff\nba 1a b4 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 49 c8 ff ff\neb 1e\n48 89 df\ne8 bf 21 00 00\n48 89 c1\n31 ff\nba bd b5 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 29 c8 ff ff\ne8 34 00 00 00\n8b 3d c6 9d 20 00\ne8 69 c4 ff ff\n'
p1013
S'.text:0000000000405440\n.text:0000000000405441\n.text:0000000000405443\n.text:0000000000405444\n.text:000000000040544b\n.text:000000000040544e\n.text:0000000000405453\n.text:0000000000405455\n.text:0000000000405458\n.text:000000000040545a\n.text:000000000040545c\n.text:0000000000405461\n.text:0000000000405464\n.text:0000000000405469\n.text:000000000040546b\n.text:000000000040546d\n.text:0000000000405474\n.text:0000000000405479\n.text:000000000040547b\n.text:000000000040547f\n.text:0000000000405486\n.text:000000000040548b\n.text:000000000040548e\n.text:0000000000405490\n.text:0000000000405492\n.text:0000000000405494\n.text:0000000000405495\n.text:0000000000405497\n.text:0000000000405498\n.text:000000000040549d\n.text:000000000040549f\n.text:00000000004054a4\n.text:00000000004054a9\n.text:00000000004054ae\n.text:00000000004054b1\n.text:00000000004054b8\n.text:00000000004054bd\n.text:00000000004054c0\n.text:00000000004054c2\n.text:00000000004054c4\n.text:00000000004054c6\n.text:00000000004054cb\n.text:00000000004054cd\n.text:00000000004054cf\n.text:00000000004054d2\n.text:00000000004054d7\n.text:00000000004054d9\n.text:00000000004054dc\n.text:00000000004054e1\n.text:00000000004054e4\n.text:00000000004054e6\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054ef\n.text:00000000004054f2\n.text:00000000004054f7\n.text:00000000004054fc\n.text:0000000000405502\n'
p1014
tp1015
sS'rpl_fflush'
p1016
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1017
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060f1d8)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040888d\nMOV RDI,RBX\nCALL 0x00401cd0\nTEST EAX,EAX\nJZ 0x0040888d\nMOV RDI,RBX\nCALL 0x004088a0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401c90\n'
p1019
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 4f 94 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 fa 93 ff ff\n'
p1020
S'.text:0000000000408870\n.text:0000000000408871\n.text:0000000000408874\n.text:0000000000408877\n.text:0000000000408879\n.text:000000000040887c\n.text:0000000000408881\n.text:0000000000408883\n.text:0000000000408885\n.text:0000000000408888\n.text:000000000040888d\n.text:0000000000408890\n.text:0000000000408891\n'
p1021
tp1022
sS'__assert_fail'
p1023
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1024
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060f120)();\u000a  return;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0060f120]\n'
p1026
S'ff 25 fa d5 20 00\n'
p1027
S'.plt:0000000000401b20\n'
p1028
tp1029
sS'update_limit'
p1030
(S'\n__stdcall update_limit(buildcmd_control * ctl, buildcmd_state * state, size_t limit)\n'
p1031
V\u000asize_t update_limit(buildcmd_control *ctl,buildcmd_state *state,size_t limit)\u000a\u000a{\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  ulong in_RCX;\u000a  char cVar3;\u000a  ulong uVar4;\u000a  \u000a  cVar3 = (char)limit;\u000a  if (cVar3 == 0) {\u000a    if (in_RCX <= state->smallest_failed_arg_count - 1) {\u000a      state->smallest_failed_arg_count = in_RCX;\u000a    }\u000a  }\u000a  else {\u000a    if (state->largest_successful_arg_count < in_RCX) {\u000a      state->largest_successful_arg_count = in_RCX;\u000a    }\u000a  }\u000a  uVar1 = state->largest_successful_arg_count;\u000a  if ((uVar1 == 0) ||\u000a     (uVar4 = state->smallest_failed_arg_count - uVar1,\u000a     state->smallest_failed_arg_count < uVar1 || uVar4 == 0)) {\u000a    if (cVar3 == 0) {\u000a      uVar4 = in_RCX >> 1;\u000a    }\u000a    else {\u000a      uVar4 = in_RCX + 1;\u000a      if (in_RCX == 0xffffffffffffffff) {\u000a        uVar4 = in_RCX;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    uVar4 = uVar4 >> 1;\u000a    if (cVar3 == 0) {\u000a      if (uVar4 == 0) {\u000a        uVar4 = in_RCX - 1;\u000a      }\u000a      else {\u000a        uVar4 = in_RCX - uVar4;\u000a      }\u000a    }\u000a    else {\u000a      if (uVar4 == 0) {\u000a        uVar4 = in_RCX + 1;\u000a      }\u000a      else {\u000a        uVar4 = uVar4 + in_RCX;\u000a      }\u000a    }\u000a  }\u000a  if ((ctl->initial_argc != 0) && (uVar1 = ctl->initial_argc + 1, uVar4 <= uVar1)) {\u000a    uVar4 = uVar1;\u000a  }\u000a  sVar2 = 1;\u000a  if (uVar4 != 0) {\u000a    sVar2 = uVar4;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1032
S'TEST DL,DL\nJZ 0x00404740\nCMP qword ptr [RSI + 0x40],RCX\nJNC 0x00404750\nMOV qword ptr [RSI + 0x40],RCX\nJMP 0x00404750\nMOV RAX,qword ptr [RSI + 0x48]\nDEC RAX\nCMP RAX,RCX\nJC 0x00404750\nMOV qword ptr [RSI + 0x48],RCX\nMOV RAX,qword ptr [RSI + 0x40]\nTEST RAX,RAX\nJZ 0x00404773\nMOV RSI,qword ptr [RSI + 0x48]\nSUB RSI,RAX\nJBE 0x00404773\nSHR RSI,1\nTEST DL,DL\nJZ 0x0040478a\nTEST RSI,RSI\nJZ 0x00404794\nADD RSI,RCX\nJMP 0x0040479f\nTEST DL,DL\nJZ 0x00404785\nLEA RSI,[RCX + 0x1]\nCMP RCX,-0x1\nCMOVZ RSI,RCX\nJMP 0x0040479f\nSHR RCX,1\nJMP 0x0040479c\nTEST RSI,RSI\nJZ 0x00404799\nSUB RCX,RSI\nJMP 0x0040479c\nINC RCX\nJMP 0x0040479c\nDEC RCX\nMOV RSI,RCX\nMOV RAX,qword ptr [RDI + 0x38]\nTEST RAX,RAX\nJZ 0x004047b2\nINC RAX\nCMP RSI,RAX\nCMOVBE RSI,RAX\nTEST RSI,RSI\nMOV EAX,0x1\nCMOVNZ RAX,RSI\nRET\n'
p1033
S'84 d2\n74 0c\n48 39 4e 40\n73 16\n48 89 4e 40\neb 10\n48 8b 46 48\n48 ff c8\n48 39 c8\n72 04\n48 89 4e 48\n48 8b 46 40\n48 85 c0\n74 1a\n48 8b 76 48\n48 29 c6\n76 11\n48 d1 ee\n84 d2\n74 21\n48 85 f6\n74 26\n48 01 ce\neb 2c\n84 d2\n74 0e\n48 8d 71 01\n48 83 f9 ff\n48 0f 44 f1\neb 1a\n48 d1 e9\neb 12\n48 85 f6\n74 0a\n48 29 f1\neb 08\n48 ff c1\neb 03\n48 ff c9\n48 89 ce\n48 8b 47 38\n48 85 c0\n74 0a\n48 ff c0\n48 39 c6\n48 0f 46 f0\n48 85 f6\nb8 01 00 00 00\n48 0f 45 c6\nc3\n'
p1034
S'.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404734\n.text:0000000000404738\n.text:000000000040473a\n.text:000000000040473e\n.text:0000000000404740\n.text:0000000000404744\n.text:0000000000404747\n.text:000000000040474a\n.text:000000000040474c\n.text:0000000000404750\n.text:0000000000404754\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475d\n.text:0000000000404760\n.text:0000000000404762\n.text:0000000000404765\n.text:0000000000404767\n.text:0000000000404769\n.text:000000000040476c\n.text:000000000040476e\n.text:0000000000404771\n.text:0000000000404773\n.text:0000000000404775\n.text:0000000000404777\n.text:000000000040477b\n.text:000000000040477f\n.text:0000000000404783\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478a\n.text:000000000040478d\n.text:000000000040478f\n.text:0000000000404792\n.text:0000000000404794\n.text:0000000000404797\n.text:0000000000404799\n.text:000000000040479c\n.text:000000000040479f\n.text:00000000004047a3\n.text:00000000004047a6\n.text:00000000004047a8\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b2\n.text:00000000004047b5\n.text:00000000004047ba\n.text:00000000004047be\n'
p1035
tp1036
sS'strnlen'
p1037
(S'\n__stdcall strnlen(char * __string, size_t __maxlen)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strnlen(char *__string,size_t __maxlen)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strnlen_0060f140)();\u000a  return sVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060f140]\n'
p1040
S'ff 25 da d5 20 00\n'
p1041
S'.plt:0000000000401b60\n'
p1042
tp1043
sS'bindtextdomain'
p1044
(S'\n__stdcall bindtextdomain()\n'
p1045
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060f0c0)();\u000a  return;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060f0c0]\n'
p1047
S'ff 25 5a d6 20 00\n'
p1048
S'.plt:0000000000401a60\n'
p1049
tp1050
sS'visit_open_fds'
p1051
(S'\n__stdcall visit_open_fds()\n'
p1052
V\u000aint visit_open_fds(void)\u000a\u000a{\u000a  uint in_EAX;\u000a  long lVar1;\u000a  code *in_RSI;\u000a  int in_EDI;\u000a  int iVar2;\u000a  int iVar3;\u000a  pollfd pf [64];\u000a  pollfd local_238 [65];\u000a  \u000a  if (0 < in_EDI) {\u000a    iVar3 = 0;\u000a    do {\u000a      iVar2 = in_EDI - iVar3;\u000a      if (0x40 < iVar2) {\u000a        iVar2 = 0x40;\u000a      }\u000a      if (iVar3 < in_EDI) {\u000a        lVar1 = 0;\u000a        do {\u000a          local_238[lVar1].events = 5;\u000a          local_238[lVar1].revents = 0;\u000a          local_238[lVar1].fd = iVar3 + (int)lVar1;\u000a          lVar1 = lVar1 + 1;\u000a        } while (lVar1 < (long)iVar2);\u000a      }\u000a      in_EAX = poll(local_238,(long)iVar2,0);\u000a      if (in_EAX == 0xffffffff) {\u000a        return -1;\u000a      }\u000a      if (0 < in_EDI - iVar3) {\u000a        lVar1 = 0;\u000a        do {\u000a          in_EAX = (uint)(ushort)local_238[lVar1].revents;\u000a          if ((local_238[lVar1].revents != 0x20) &&\u000a             (in_EAX = (*in_RSI)((ulong)(uint)local_238[lVar1].fd), in_EAX != 0)) {\u000a            return in_EAX;\u000a          }\u000a          lVar1 = lVar1 + 1;\u000a        } while (lVar1 < (long)iVar2);\u000a      }\u000a      iVar3 = iVar3 + iVar2;\u000a    } while (iVar3 < in_EDI);\u000a  }\u000a  return (int)in_EAX;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x218\nMOV qword ptr [RSP + 0x8],RDX\nMOV R13,RSI\nMOV dword ptr [RSP + 0x4],EDI\nTEST EDI,EDI\nJLE 0x00404c40\nXOR R14D,R14D\nMOV R15D,dword ptr [RSP + 0x4]\nMOV R12D,R15D\nSUB R12D,R14D\nCMP R12D,0x41\nMOV ECX,0x40\nCMOVGE R12D,ECX\nSUB R15D,R14D\nJLE 0x00404bed\nMOV EAX,R14D\nMOVSXD RCX,R12D\nXOR EDX,EDX\nNOP dword ptr [RAX]\nMOV word ptr [RSP + RDX*0x8 + 0x14],0x5\nMOV word ptr [RSP + RDX*0x8 + 0x16],0x0\nLEA ESI,[RAX + RDX*0x1]\nMOV dword ptr [RSP + RDX*0x8 + 0x10],ESI\nINC RDX\nCMP RDX,RCX\nJL 0x00404bd0\nMOVSXD RBP,R12D\nXOR EDX,EDX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBP\nCALL 0x00401d10\nCMP EAX,-0x1\nJZ 0x00404c40\nTEST R15D,R15D\nJLE 0x00404c32\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,word ptr [RSP + RBX*0x8 + 0x16]\nCMP EAX,0x20\nJZ 0x00404c2a\nMOV EDI,dword ptr [RSP + RBX*0x8 + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nCALL R13\nTEST EAX,EAX\nJNZ 0x00404c40\nINC RBX\nCMP RBX,RBP\nJL 0x00404c10\nADD R14D,R12D\nCMP R14D,dword ptr [RSP + 0x4]\nJL 0x00404ba8\nADD RSP,0x218\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 02 00 00\n48 89 54 24 08\n49 89 f5\n89 7c 24 04\n85 ff\n0f 8e 9b 00 00 00\n45 31 f6\n44 8b 7c 24 04\n45 89 fc\n45 29 f4\n41 83 fc 41\nb9 40 00 00 00\n44 0f 4d e1\n45 29 f7\n7e 28\n44 89 f0\n49 63 cc\n31 d2\n0f 1f 00\n66 c7 44 d4 14 05 00\n66 c7 44 d4 16 00 00\n8d 34 10\n89 74 d4 10\n48 ff c2\n48 39 ca\n7c e3\n49 63 ec\n31 d2\n48 8d 7c 24 10\n48 89 ee\ne8 11 d1 ff ff\n83 f8 ff\n74 3c\n45 85 ff\n7e 29\n31 db\n0f 1f 44 00 00\n0f b7 44 dc 16\n83 f8 20\n74 10\n8b 7c dc 10\n48 8b 74 24 08\n41 ff d5\n85 c0\n75 16\n48 ff c3\n48 39 eb\n7c de\n45 01 e6\n44 3b 74 24 04\n0f 8c 68 ff ff ff\n48 81 c4 18 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:0000000000404b80\n.text:0000000000404b81\n.text:0000000000404b83\n.text:0000000000404b85\n.text:0000000000404b87\n.text:0000000000404b89\n.text:0000000000404b8a\n.text:0000000000404b91\n.text:0000000000404b96\n.text:0000000000404b99\n.text:0000000000404b9d\n.text:0000000000404b9f\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bad\n.text:0000000000404bb0\n.text:0000000000404bb3\n.text:0000000000404bb7\n.text:0000000000404bbc\n.text:0000000000404bc0\n.text:0000000000404bc3\n.text:0000000000404bc5\n.text:0000000000404bc8\n.text:0000000000404bcb\n.text:0000000000404bcd\n.text:0000000000404bd0\n.text:0000000000404bd7\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be5\n.text:0000000000404be8\n.text:0000000000404beb\n.text:0000000000404bed\n.text:0000000000404bf0\n.text:0000000000404bf2\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c02\n.text:0000000000404c04\n.text:0000000000404c07\n.text:0000000000404c09\n.text:0000000000404c0b\n.text:0000000000404c10\n.text:0000000000404c15\n.text:0000000000404c18\n.text:0000000000404c1a\n.text:0000000000404c1e\n.text:0000000000404c23\n.text:0000000000404c26\n.text:0000000000404c28\n.text:0000000000404c2a\n.text:0000000000404c2d\n.text:0000000000404c30\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c3a\n.text:0000000000404c40\n.text:0000000000404c47\n.text:0000000000404c48\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c50\n.text:0000000000404c51\n'
p1056
tp1057
sS'set_char_quoting'
p1058
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1059
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1060
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60f510\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1061
S'89 f1\n48 85 ff\nbe 10 f5 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1062
S'.text:0000000000406420\n.text:0000000000406422\n.text:0000000000406425\n.text:000000000040642a\n.text:000000000040642e\n.text:0000000000406430\n.text:0000000000406433\n.text:0000000000406437\n.text:000000000040643c\n.text:000000000040643f\n.text:0000000000406441\n.text:0000000000406443\n.text:0000000000406446\n.text:0000000000406448\n.text:000000000040644b\n.text:000000000040644d\n.text:0000000000406450\n.text:0000000000406455\n'
p1063
tp1064
sS'quotearg_n'
p1065
(S'\n__stdcall quotearg_n(char * arg)\n'
p1066
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1067
S'MOV RDX,-0x1\nMOV ECX,0x60f510\nJMP 0x00407310\n'
p1068
S'48 c7 c2 ff ff ff ff\nb9 10 f5 60 00\neb 02\n'
p1069
S'.text:0000000000407300\n.text:0000000000407307\n.text:000000000040730c\n'
p1070
tp1071
sS'fd_is_cloexec'
p1072
(S'\n__stdcall fd_is_cloexec()\n'
p1073
V\u000aint fd_is_cloexec(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  uVar1 = rpl_fcntl(in_RDI,1);\u000a  return (int)(uVar1 & 1);\u000a}\u000a\u000a
p1074
S'PUSH RAX\nMOV ESI,0x1\nXOR EAX,EAX\nCALL 0x004086b0\nAND EAX,0x1\nPOP RCX\nRET\n'
p1075
S'50\nbe 01 00 00 00\n31 c0\ne8 a3 36 00 00\n83 e0 01\n59\nc3\n'
p1076
S'.text:0000000000405000\n.text:0000000000405001\n.text:0000000000405006\n.text:0000000000405008\n.text:000000000040500d\n.text:0000000000405010\n.text:0000000000405011\n'
p1077
tp1078
sS'close_stream'
p1079
(S'\n__stdcall close_stream(FILE * stream)\n'
p1080
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror((FILE *)stream);\u000a  iVar2 = fclose((FILE *)stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401990\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004019a0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00401a40\nTEST EBP,EBP\nJZ 0x00408b4b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00408b6f\nCALL 0x00401940\nMOV dword ptr [RAX],0x0\nJMP 0x00408b6f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00408b6f\nTEST CL,CL\nJNZ 0x00408b6f\nCALL 0x00401940\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1082
S'55\n41 56\n53\n48 89 fb\ne8 74 8e ff ff\n49 89 c6\n48 89 df\ne8 79 8e ff ff\n89 c5\n48 89 df\ne8 0f 8f ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 fd 8d ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 de 8d ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1083
S'.text:0000000000408b10\n.text:0000000000408b11\n.text:0000000000408b13\n.text:0000000000408b14\n.text:0000000000408b17\n.text:0000000000408b1c\n.text:0000000000408b1f\n.text:0000000000408b22\n.text:0000000000408b27\n.text:0000000000408b29\n.text:0000000000408b2c\n.text:0000000000408b31\n.text:0000000000408b33\n.text:0000000000408b35\n.text:0000000000408b3a\n.text:0000000000408b3c\n.text:0000000000408b3e\n.text:0000000000408b43\n.text:0000000000408b49\n.text:0000000000408b4b\n.text:0000000000408b4d\n.text:0000000000408b50\n.text:0000000000408b52\n.text:0000000000408b54\n.text:0000000000408b57\n.text:0000000000408b59\n.text:0000000000408b5b\n.text:0000000000408b5d\n.text:0000000000408b62\n.text:0000000000408b64\n.text:0000000000408b67\n.text:0000000000408b6c\n.text:0000000000408b6f\n.text:0000000000408b71\n.text:0000000000408b72\n.text:0000000000408b74\n.text:0000000000408b75\n'
p1084
tp1085
sS'forget_non_cloexec_fds'
p1086
(S'\n__stdcall forget_non_cloexec_fds()\n'
p1087
V\u000aundefined8 forget_non_cloexec_fds(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  free(non_cloexec_fds);\u000a  non_cloexec_fds = (int *)0x0;\u000a  num_cloexec_fds = 0;\u000a  return in_RAX;\u000a}\u000a\u000a
p1088
S'PUSH RAX\nMOV RDI,qword ptr [0x0060f4d0]\nCALL 0x00401920\nMOV qword ptr [0x0060f4d0],0x0\nMOV qword ptr [0x0060f4d8],0x0\nPOP RAX\nRET\n'
p1089
S'50\n48 8b 3d b8 a6 20 00\ne8 03 cb ff ff\n48 c7 05 a8 a6 20 00 00 00 00 00\n48 c7 05 a5 a6 20 00 00 00 00 00\n58\nc3\n'
p1090
S'.text:0000000000404e10\n.text:0000000000404e11\n.text:0000000000404e18\n.text:0000000000404e1d\n.text:0000000000404e28\n.text:0000000000404e33\n.text:0000000000404e34\n'
p1091
tp1092
sS'quotearg_colon_mem'
p1093
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1094
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1095
S'MOV EDX,0x3a\nJMP 0x00407620\n'
p1096
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1097
S'.text:00000000004076b0\n.text:00000000004076b5\n'
p1098
tp1099
sS'setenv'
p1100
(S'\n__stdcall setenv(char * __name, char * __value, int __replace)\n'
p1101
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setenv(char *__name,char *__value,int __replace)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setenv_0060f090)();\u000a  return iVar1;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x0060f090]\n'
p1103
S'ff 25 8a d6 20 00\n'
p1104
S'.plt:0000000000401a00\n'
p1105
tp1106
sS'remember_non_cloexec_fds'
p1107
(S'\n__stdcall remember_non_cloexec_fds()\n'
p1108
V\u000avoid remember_non_cloexec_fds(void)\u000a\u000a{\u000a  get_max_fd();\u000a  visit_open_fds();\u000a  non_cloexec_fds = (int *)0x0;\u000a  num_cloexec_fds = 0;\u000a  return;\u000a}\u000a\u000a
p1109
S'SUB RSP,0x18\nCALL 0x00404b30\nLEA EDI,[RAX + 0x1]\nCMP EAX,0x7fffffff\nCMOVZ EDI,EAX\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RSP + 0x10],0x0\nMOV RDX,RSP\nMOV ESI,0x404c60\nCALL 0x00404b80\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [0x0060f4d0],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0060f4d8],RAX\nADD RSP,0x18\nRET\n'
p1110
S'48 83 ec 18\ne8 47 00 00 00\n8d 78 01\n3d ff ff ff 7f\n0f 44 f8\n0f 57 c0\n0f 29 04 24\n48 c7 44 24 10 00 00 00 00\n48 89 e2\nbe 60 4c 40 00\ne8 6f 00 00 00\n48 8b 04 24\n48 89 05 b4 a9 20 00\n48 8b 44 24 08\n48 89 05 b0 a9 20 00\n48 83 c4 18\nc3\n'
p1111
S'.text:0000000000404ae0\n.text:0000000000404ae4\n.text:0000000000404ae9\n.text:0000000000404aec\n.text:0000000000404af1\n.text:0000000000404af4\n.text:0000000000404af7\n.text:0000000000404afb\n.text:0000000000404b04\n.text:0000000000404b07\n.text:0000000000404b0c\n.text:0000000000404b11\n.text:0000000000404b15\n.text:0000000000404b1c\n.text:0000000000404b21\n.text:0000000000404b28\n.text:0000000000404b2c\n'
p1112
tp1113
sS'bc_clear_args'
p1114
(S'\n__stdcall bc_clear_args(buildcmd_control * ctl, buildcmd_state * state)\n'
p1115
V\u000avoid bc_clear_args(buildcmd_control *ctl,buildcmd_state *state)\u000a\u000a{\u000a  state->cmd_argc = ctl->initial_argc;\u000a  state->cmd_argv_chars = state->cmd_initial_argv_chars;\u000a  *(undefined8 *)&state->todo = 0xffffffff00000000;\u000a  return;\u000a}\u000a\u000a
p1116
S'MOV RAX,qword ptr [RDI + 0x38]\nMOV qword ptr [RSI],RAX\nMOV RAX,qword ptr [RSI + 0x28]\nMOV qword ptr [RSI + 0x20],RAX\nMOV RAX,-0x100000000\nMOV qword ptr [RSI + 0x38],RAX\nRET\n'
p1117
S'48 8b 47 38\n48 89 06\n48 8b 46 28\n48 89 46 20\n48 b8 00 00 00 00 ff ff ff ff\n48 89 46 38\nc3\n'
p1118
S'.text:00000000004047c0\n.text:00000000004047c4\n.text:00000000004047c7\n.text:00000000004047cb\n.text:00000000004047cf\n.text:00000000004047d9\n.text:00000000004047dd\n'
p1119
tp1120
sS'xcalloc'
p1121
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1122
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1123
S'PUSH RAX\nCALL 0x00401bd0\nTEST RAX,RAX\nJZ 0x0040833d\nPOP RCX\nRET\nCALL 0x004083a0\n'
p1124
S'50\ne8 9a 98 ff ff\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1125
S'.text:0000000000408330\n.text:0000000000408331\n.text:0000000000408336\n.text:0000000000408339\n.text:000000000040833b\n.text:000000000040833c\n.text:000000000040833d\n'
p1126
tp1127
sS'noop'
p1128
(S'\n__stdcall noop()\n'
p1129
V\u000avoid noop(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1130
S'RET\n'
p1131
S'c3\n'
p1132
S'.text:0000000000402f40\n'
p1133
tp1134
sS'readdir'
p1135
(S'\n__stdcall readdir(DIR * __dirp)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0060f1c0)();\u000a  return pdVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060f1c0]\n'
p1138
S'ff 25 5a d5 20 00\n'
p1139
S'.plt:0000000000401c60\n'
p1140
tp1141
sS'strtol'
p1142
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0060f1a8)();\u000a  return lVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060f1a8]\n'
p1145
S'ff 25 72 d5 20 00\n'
p1146
S'.plt:0000000000401c30\n'
p1147
tp1148
sS'clear_ungetc_buffer_preserving_position'
p1149
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1150
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1151
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004088a7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004088f0\n'
p1152
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 3d 00 00 00\n'
p1153
S'.text:00000000004088a0\n.text:00000000004088a4\n.text:00000000004088a6\n.text:00000000004088a7\n.text:00000000004088a9\n.text:00000000004088ae\n'
p1154
tp1155
sS'xnmalloc'
p1156
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1157
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1158
S'MOV RAX,RDI\nMUL RSI\nJO 0x00408201\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00408210\nPUSH RAX\nCALL 0x004083a0\n'
p1159
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1160
S'.text:00000000004081f0\n.text:00000000004081f3\n.text:00000000004081f6\n.text:00000000004081f8\n.text:00000000004081fc\n.text:00000000004081ff\n.text:0000000000408201\n.text:0000000000408202\n'
p1161
tp1162
sS'quotearg_char'
p1163
(S'\n__stdcall quotearg_char(char * arg)\n'
p1164
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1165
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00407620\n'
p1166
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1167
S'.text:0000000000407690\n.text:0000000000407692\n.text:0000000000407699\n.text:000000000040769b\n'
p1168
tp1169
sS'malloc'
p1170
(S'\n__stdcall malloc(size_t __size)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060f1d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060f1d0]\n'
p1173
S'ff 25 4a d5 20 00\n'
p1174
S'.plt:0000000000401c80\n'
p1175
tp1176
sS'read_line'
p1177
(S'\n__stdcall read_line()\n'
p1178
V\u000aint read_line(void)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  ushort **ppuVar6;\u000a  undefined8 uVar7;\u000a  undefined8 uVar8;\u000a  char *pcVar9;\u000a  uint uVar10;\u000a  int iVar11;\u000a  char *pcVar12;\u000a  char *pcVar13;\u000a  bool bVar14;\u000a  uint local_3c;\u000a  \u000a  pcVar12 = linebuf;\u000a  iVar5 = -1;\u000a  if (read_line_eof == 0) {\u000a    lVar2 = bc_ctl.arg_max - bc_state.cmd_initial_argv_chars;\u000a    uVar3 = _IO_getc((_IO_FILE *)input_stream);\u000a    if (uVar3 == 0xffffffff) {\u000a      iVar4 = 1;\u000a      local_3c = 0;\u000a      bVar1 = true;\u000a    }\u000a    else {\u000a      pcVar13 = pcVar12 + lVar2 + -1;\u000a      bVar1 = true;\u000a      uVar10 = 0xffffffff;\u000a      iVar4 = 1;\u000a      local_3c = 0;\u000a      bVar14 = false;\u000a      do {\u000a        switch(iVar4) {\u000a        case 0:\u000aswitchD_00402c0d_caseD_0:\u000a          if (uVar3 == 10) {\u000a            if ((0x7f < uVar10) ||\u000a               (ppuVar6 = __ctype_b_loc(), (*(byte *)(*ppuVar6 + (long)(int)uVar10) & 1) == 0)) {\u000a              lineno = lineno + 1;\u000a            }\u000a            if ((bVar14) || (iVar4 = 1, pcVar12 != linebuf)) {\u000a              *pcVar12 = 0;\u000a              uVar3 = ((int)pcVar12 + 1) - (int)linebuf;\u000a              if ((eof_str != (char *)0x0) &&\u000a                 ((*eof_str == *linebuf && (iVar5 = strcmp(eof_str,linebuf), iVar5 == 0)))) {\u000a                read_line_eof = 1;\u000a                return ~-(uint)!bVar1 | uVar3;\u000a              }\u000a              if (bc_ctl.replace_pat != (char *)0x0) {\u000a                return uVar3;\u000a              }\u000a              bc_push_arg(&bc_ctl,&bc_state,linebuf,(long)(int)uVar3,(char *)0x0,0);\u000a              return uVar3;\u000a            }\u000a          }\u000a          else {\u000a            if (((uVar3 < 0x80) && (bc_ctl.replace_pat == (char *)0x0)) &&\u000a               (ppuVar6 = __ctype_b_loc(), (*(byte *)(*ppuVar6 + (long)(int)uVar3) & 1) != 0)) {\u000a              *pcVar12 = 0;\u000a              uVar10 = ((int)pcVar12 + 1) - (int)linebuf;\u000a              if (((eof_str != (char *)0x0) && (*eof_str == *linebuf)) &&\u000a                 (iVar5 = strcmp(eof_str,linebuf), iVar5 == 0)) {\u000a                read_line_eof = 1;\u000a                return ~-(uint)!bVar1 | uVar10;\u000a              }\u000a              bVar1 = false;\u000a              bc_push_arg(&bc_ctl,&bc_state,linebuf,(long)(int)uVar10,(char *)0x0,0);\u000a              iVar4 = 1;\u000a              pcVar12 = linebuf;\u000a              goto LAB_00402ba5;\u000a            }\u000aLAB_00402bbf:\u000a            bVar14 = true;\u000a            if (uVar3 != 0x22) {\u000a              if (uVar3 == 0x5c) {\u000a                iVar4 = 3;\u000a                uVar3 = 0x5c;\u000a                break;\u000a              }\u000a              iVar4 = 0;\u000a              if (uVar3 != 0x27) goto switchD_00402c0d_caseD_4;\u000a            }\u000a            iVar4 = 2;\u000a            local_3c = uVar3;\u000a          }\u000a          break;\u000a        case 1:\u000a          if (uVar3 < 0x80) {\u000a            ppuVar6 = __ctype_b_loc();\u000a            iVar4 = 1;\u000a            if ((3 < uVar3 - 10) && (((*ppuVar6)[(long)(int)uVar3] & 1) == 0))\u000a            goto switchD_00402c0d_caseD_0;\u000a          }\u000a          else {\u000a            iVar4 = 1;\u000a            if (2 < uVar3 - 0xb) goto LAB_00402bbf;\u000a          }\u000a          break;\u000a        case 2:\u000a          if (uVar3 == 10) {\u000a            exec_if_possible();\u000a            uVar7 = dcgettext(0,\u000a                              "unmatched %s quote; by default quotes are special to xargs unless you use the -0 option"\u000a                              ,5);\u000a            pcVar9 = "single";\u000a            if (local_3c == 0x22) {\u000a              pcVar9 = "double";\u000a            }\u000a            dcgettext(0,pcVar9,5);\u000a            error(1,0,uVar7);\u000a          }\u000a          iVar4 = 2;\u000a          if (uVar3 != local_3c) goto switchD_00402c0d_caseD_4;\u000a          iVar4 = 0;\u000aLAB_00402ba5:\u000a          bVar14 = true;\u000a          break;\u000a        case 3:\u000a          iVar4 = 0;\u000a        default:\u000aswitchD_00402c0d_caseD_4:\u000a          if ((uVar3 == 0) && ((nullwarning_given & 1) == 0)) {\u000a            uVar7 = dcgettext(0,\u000a                              "WARNING: a NUL character occurred in the input.  It cannot be passed through in the argument list.  Did you mean to use the --null option?"\u000a                              ,5);\u000a            error(0,0,uVar7);\u000a            nullwarning_given = 1;\u000a          }\u000a          if (pcVar13 <= pcVar12) {\u000a            exec_if_possible();\u000a            uVar7 = dcgettext(0,"argument line too long",5);\u000a            error(1,0,uVar7);\u000a          }\u000a          *pcVar12 = (char)uVar3;\u000a          pcVar12 = pcVar12 + 1;\u000a        }\u000a        uVar10 = uVar3;\u000a        uVar3 = _IO_getc((_IO_FILE *)input_stream);\u000a      } while (uVar3 != 0xffffffff);\u000a    }\u000a    read_line_eof = 1;\u000a    iVar5 = -1;\u000a    if (pcVar12 != linebuf) {\u000a      *pcVar12 = 0;\u000a      iVar11 = ((int)pcVar12 + 1) - (int)linebuf;\u000a      if (iVar4 == 2) {\u000a        exec_if_possible();\u000a        uVar7 = dcgettext(0,\u000a                          "unmatched %s quote; by default quotes are special to xargs unless you use the -0 option"\u000a                          ,5);\u000a        pcVar12 = "single";\u000a        if (local_3c == 0x22) {\u000a          pcVar12 = "double";\u000a        }\u000a        uVar8 = dcgettext(0,pcVar12,5);\u000a        error(1,0,uVar7,uVar8);\u000a      }\u000a      if (((((!bVar1) || (eof_str == (char *)0x0)) || (*eof_str != *linebuf)) ||\u000a          (iVar4 = strcmp(eof_str,linebuf), iVar5 = -1, iVar4 != 0)) &&\u000a         (iVar5 = iVar11, bc_ctl.replace_pat == (char *)0x0)) {\u000a        bc_push_arg(&bc_ctl,&bc_state,linebuf,(long)iVar11,(char *)0x0,0);\u000a        iVar5 = iVar11;\u000a      }\u000a    }\u000a  }\u000a  return iVar5;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV EBP,0xffffffff\nMOV AL,byte ptr [0x0060f490]\nTEST AL,AL\nJNZ 0x00402e8b\nMOV R12,qword ptr [0x0060f420]\nMOV R13,qword ptr [0x0060f3b0]\nADD R13,R12\nSUB R13,qword ptr [0x0060f450]\nMOV RDI,qword ptr [0x0060f410]\nCALL 0x00401ca0\nMOV EBX,EAX\nCMP EBX,-0x1\nJZ 0x00402d9a\nDEC R13\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV EBP,0xffffffff\nMOV R15D,0x1\nMOV dword ptr [RSP + 0xc],0x0\nXOR R14D,R14D\nJMP 0x00402c00\nCMP EBX,0x7f\nJA 0x00402bbf\nMOV RAX,qword ptr [0x0060f3c8]\nTEST RAX,RAX\nJNZ 0x00402bbf\nCALL 0x00401e20\nMOV RAX,qword ptr [RAX]\nMOVSXD RCX,EBX\nTEST byte ptr [RAX + RCX*0x2],0x1\nJZ 0x00402bbf\nMOV byte ptr [R12],0x0\nINC R12\nMOV RSI,qword ptr [0x0060f420]\nSUB R12,RSI\nMOV RDI,qword ptr [0x0060f3f8]\nTEST RDI,RDI\nJZ 0x00402b65\nMOVZX EAX,byte ptr [RDI]\nCMP AL,byte ptr [RSI]\nJNZ 0x00402b65\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00402f1d\nMOV RDX,qword ptr [0x0060f420]\nMOVSXD RCX,R12D\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nMOV R12,qword ptr [0x0060f420]\nMOV R15D,0x1\nMOV R14B,0x1\nJMP 0x00402d7f\nLEA EAX,[RBX + -0xb]\nMOV R15D,0x1\nCMP EAX,0x3\nJC 0x00402d7f\nMOV R14B,0x1\nCMP EBX,0x22\nJZ 0x00402bd8\nCMP EBX,0x5c\nJZ 0x00402be9\nXOR R15D,R15D\nCMP EBX,0x27\nJNZ 0x00402d13\nMOV R15D,0x2\nMOV EAX,EBX\nMOV dword ptr [RSP + 0xc],EAX\nJMP 0x00402d7f\nMOV R15D,0x3\nMOV EBX,0x5c\nJMP 0x00402d7f\nCMP R15D,0x3\nJA 0x00402d13\nMOV EAX,R15D\nJMP qword ptr [0x409610 + RAX*0x8]\nCMP EBX,0xa\nJNZ 0x00402b05\nCMP EBP,0x7f\nJA 0x00402c33\nCALL 0x00401e20\nMOV RAX,qword ptr [RAX]\nMOVSXD RCX,EBP\nTEST byte ptr [RAX + RCX*0x2],0x1\nJNZ 0x00402c3a\nINC qword ptr [0x0060f480]\nTEST R14B,0x1\nJNZ 0x00402e9c\nMOV R15D,0x1\nCMP R12,qword ptr [0x0060f420]\nJZ 0x00402d7f\nJMP 0x00402e9c\nCMP EBX,0x7f\nJA 0x00402bad\nCALL 0x00401e20\nLEA ECX,[RBX + -0xa]\nCMP ECX,0x4\nMOV R15D,0x1\nJC 0x00402d7f\nMOV RAX,qword ptr [RAX]\nMOVSXD RCX,EBX\nMOVZX EAX,word ptr [RAX + RCX*0x2]\nAND EAX,0x1\nTEST AX,AX\nJZ 0x00402c14\nJMP 0x00402d7f\nCMP EBX,0xa\nJNZ 0x00402cf1\nCALL 0x00403af0\nXOR EDI,EDI\nMOV ESI,0x40a0c1\nMOV EDX,0x5\nCALL 0x00401a70\nMOV R15,RAX\nCMP dword ptr [RSP + 0xc],0x22\nMOV ESI,0x40a120\nMOV EAX,0x40a119\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401d20\nMOV R15D,0x2\nCMP EBX,dword ptr [RSP + 0xc]\nJNZ 0x00402d13\nXOR R15D,R15D\nJMP 0x00402ba5\nXOR R15D,R15D\nTEST EBX,EBX\nJNZ 0x00402d49\nTEST byte ptr [0x0060f494],0x1\nJNZ 0x00402d49\nXOR EDI,EDI\nMOV ESI,0x40a127\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV byte ptr [0x0060f494],0x1\nCMP R12,R13\nJC 0x00402d78\nCALL 0x00403af0\nXOR EDI,EDI\nMOV ESI,0x40a1b2\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV byte ptr [R12],BL\nINC R12\nMOV EBP,EBX\nMOV RDI,qword ptr [0x0060f410]\nCALL 0x00401ca0\nMOV EBX,EAX\nCMP EBX,-0x1\nJNZ 0x00402c00\nJMP 0x00402daf\nMOV R15D,0x1\nMOV dword ptr [RSP + 0xc],0x0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV byte ptr [0x0060f490],0x1\nCMP R12,qword ptr [0x0060f420]\nMOV EBP,0xffffffff\nJZ 0x00402e8b\nMOV byte ptr [R12],0x0\nINC R12\nSUB R12,qword ptr [0x0060f420]\nCMP R15D,0x2\nJNZ 0x00402e29\nCALL 0x00403af0\nXOR EDI,EDI\nMOV ESI,0x40a0c1\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBX,RAX\nCMP dword ptr [RSP + 0xc],0x22\nMOV EAX,0x40a119\nMOV ESI,0x40a120\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401d20\nCMP byte ptr [RSP + 0x10],0x0\nJZ 0x00402e52\nMOV RDI,qword ptr [0x0060f3f8]\nTEST RDI,RDI\nJZ 0x00402e52\nMOV AL,byte ptr [RDI]\nMOV RSI,qword ptr [0x0060f420]\nCMP AL,byte ptr [RSI]\nJNZ 0x00402e52\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00402e8b\nCMP qword ptr [0x0060f3c8],0x0\nJNZ 0x00402e88\nMOV RDX,qword ptr [0x0060f420]\nMOVSXD RCX,R12D\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nMOV EBP,R12D\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV byte ptr [R12],0x0\nINC R12\nMOV RSI,qword ptr [0x0060f420]\nMOV RBP,R12\nSUB RBP,RSI\nMOV RDI,qword ptr [0x0060f3f8]\nTEST RDI,RDI\nJZ 0x00402ecc\nMOV AL,byte ptr [RDI]\nCMP AL,byte ptr [RSI]\nJNZ 0x00402ecc\nCALL 0x00401be0\nTEST EAX,EAX\nJZ 0x00402f04\nCMP qword ptr [0x0060f3c8],0x0\nJNZ 0x00402e8b\nMOV RDX,qword ptr [0x0060f420]\nMOVSXD RCX,EBP\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nJMP 0x00402e8b\nMOV byte ptr [0x0060f490],0x1\nCMP byte ptr [RSP + 0x10],0x1\nSBB EAX,EAX\nNOT EAX\nOR EAX,EBP\nMOV EBP,EAX\nJMP 0x00402e8b\nMOV byte ptr [0x0060f490],0x1\nCMP byte ptr [RSP + 0x10],0x1\nSBB EBP,EBP\nNOT EBP\nOR EBP,R12D\nJMP 0x00402e8b\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\nbd ff ff ff ff\n8a 05 e7 c9 20 00\n84 c0\n0f 85 da 03 00 00\n4c 8b 25 68 c9 20 00\n4c 8b 2d f1 c8 20 00\n4d 01 e5\n4c 2b 2d 87 c9 20 00\n48 8b 3d 40 c9 20 00\ne8 cb f1 ff ff\n89 c3\n83 fb ff\n0f 84 ba 02 00 00\n49 ff cd\nb0 01\n48 89 44 24 10\nbd ff ff ff ff\n41 bf 01 00 00 00\nc7 44 24 0c 00 00 00 00\n45 31 f6\ne9 fb 00 00 00\n83 fb 7f\n0f 87 b1 00 00 00\n48 8b 05 b3 c8 20 00\n48 85 c0\n0f 85 a1 00 00 00\ne8 fd f2 ff ff\n48 8b 00\n48 63 cb\nf6 04 48 01\n0f 84 8c 00 00 00\n41 c6 04 24 00\n49 ff c4\n48 8b 35 de c8 20 00\n49 29 f4\n48 8b 3d ac c8 20 00\n48 85 ff\n74 14\n0f b6 07\n3a 06\n75 0d\ne8 83 f0 ff ff\n85 c0\n0f 84 b8 03 00 00\n48 8b 15 b4 c8 20 00\n49 63 cc\n0f b6 05 02 c9 20 00\n83 f0 01\n89 04 24\n31 c0\n48 89 44 24 10\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 88 17 00 00\n4c 8b 25 81 c8 20 00\n41 bf 01 00 00 00\n41 b6 01\ne9 d2 01 00 00\n8d 43 f5\n41 bf 01 00 00 00\n83 f8 03\n0f 82 c0 01 00 00\n41 b6 01\n83 fb 22\n74 11\n83 fb 5c\n74 1d\n45 31 ff\n83 fb 27\n0f 85 3b 01 00 00\n41 bf 02 00 00 00\n89 d8\n89 44 24 0c\ne9 96 01 00 00\n41 bf 03 00 00 00\nbb 5c 00 00 00\ne9 86 01 00 00\n41 83 ff 03\n0f 87 09 01 00 00\n44 89 f8\nff 24 c5 10 96 40 00\n83 fb 0a\n0f 85 e8 fe ff ff\n83 fd 7f\n77 11\ne8 f9 f1 ff ff\n48 8b 00\n48 63 cd\nf6 04 48 01\n75 07\n48 ff 05 46 c8 20 00\n41 f6 c6 01\n0f 85 58 02 00 00\n41 bf 01 00 00 00\n4c 3b 25 cf c7 20 00\n0f 84 28 01 00 00\ne9 40 02 00 00\n83 fb 7f\n0f 87 44 ff ff ff\ne8 b2 f1 ff ff\n8d 4b f6\n83 f9 04\n41 bf 01 00 00 00\n0f 82 ff 00 00 00\n48 8b 00\n48 63 cb\n0f b7 04 48\n83 e0 01\n66 85 c0\n74 82\ne9 e8 00 00 00\n83 fb 0a\n75 4c\ne8 46 0e 00 00\n31 ff\nbe c1 a0 40 00\nba 05 00 00 00\ne8 b5 ed ff ff\n49 89 c7\n83 7c 24 0c 22\nbe 20 a1 40 00\nb8 19 a1 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 93 ed ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 2f f0 ff ff\n41 bf 02 00 00 00\n3b 5c 24 0c\n75 16\n45 31 ff\ne9 a0 fe ff ff\n45 31 ff\n85 db\n75 32\nf6 05 76 c7 20 00 01\n75 29\n31 ff\nbe 27 a1 40 00\nba 05 00 00 00\ne8 3f ed ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 de ef ff ff\nc6 05 4b c7 20 00 01\n4d 39 ec\n72 2a\ne8 9d 0d 00 00\n31 ff\nbe b2 a1 40 00\nba 05 00 00 00\ne8 0c ed ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 a8 ef ff ff\n41 88 1c 24\n49 ff c4\n89 dd\n48 8b 3d 88 c6 20 00\ne8 13 ef ff ff\n89 c3\n83 fb ff\n0f 85 68 fe ff ff\neb 15\n41 bf 01 00 00 00\nc7 44 24 0c 00 00 00 00\nb0 01\n48 89 44 24 10\nc6 05 da c6 20 00 01\n4c 3b 25 63 c6 20 00\nbd ff ff ff ff\n0f 84 c3 00 00 00\n41 c6 04 24 00\n49 ff c4\n4c 2b 25 49 c6 20 00\n41 83 ff 02\n75 4c\ne8 0e 0d 00 00\n31 ff\nbe c1 a0 40 00\nba 05 00 00 00\ne8 7d ec ff ff\n48 89 c3\n83 7c 24 0c 22\nb8 19 a1 40 00\nbe 20 a1 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 5b ec ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 f7 ee ff ff\n80 7c 24 10 00\n74 22\n48 8b 3d c1 c5 20 00\n48 85 ff\n74 16\n8a 07\n48 8b 35 db c5 20 00\n3a 06\n75 09\ne8 92 ed ff ff\n85 c0\n74 39\n48 83 3d 6e c5 20 00 00\n75 2c\n48 8b 15 bd c5 20 00\n49 63 cc\n0f b6 05 0b c6 20 00\n83 f0 01\n89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 98 14 00 00\n44 89 e5\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 c6 04 24 00\n49 ff c4\n48 8b 35 75 c5 20 00\n4c 89 e5\n48 29 f5\n48 8b 3d 40 c5 20 00\n48 85 ff\n74 0f\n8a 07\n3a 06\n75 09\ne8 18 ed ff ff\n85 c0\n74 38\n48 83 3d f4 c4 20 00 00\n75 b5\n48 8b 15 43 c5 20 00\n48 63 cd\n0f b6 05 91 c5 20 00\n83 f0 01\n89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 1e 14 00 00\neb 87\nc6 05 85 c5 20 00 01\n80 7c 24 10 01\n19 c0\nf7 d0\n09 e8\n89 c5\ne9 6e ff ff ff\nc6 05 6c c5 20 00 01\n80 7c 24 10 01\n19 ed\nf7 d5\n44 09 e5\ne9 56 ff ff ff\n'
p1181
S'.text:0000000000402a90\n.text:0000000000402a91\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a97\n.text:0000000000402a99\n.text:0000000000402a9a\n.text:0000000000402a9e\n.text:0000000000402aa3\n.text:0000000000402aa9\n.text:0000000000402aab\n.text:0000000000402ab1\n.text:0000000000402ab8\n.text:0000000000402abf\n.text:0000000000402ac2\n.text:0000000000402ac9\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402ad7\n.text:0000000000402ada\n.text:0000000000402ae0\n.text:0000000000402ae3\n.text:0000000000402ae5\n.text:0000000000402aea\n.text:0000000000402aef\n.text:0000000000402af5\n.text:0000000000402afd\n.text:0000000000402b00\n.text:0000000000402b05\n.text:0000000000402b08\n.text:0000000000402b0e\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1e\n.text:0000000000402b23\n.text:0000000000402b26\n.text:0000000000402b29\n.text:0000000000402b2d\n.text:0000000000402b33\n.text:0000000000402b38\n.text:0000000000402b3b\n.text:0000000000402b42\n.text:0000000000402b45\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b5d\n.text:0000000000402b5f\n.text:0000000000402b65\n.text:0000000000402b6c\n.text:0000000000402b6f\n.text:0000000000402b76\n.text:0000000000402b79\n.text:0000000000402b7c\n.text:0000000000402b7e\n.text:0000000000402b83\n.text:0000000000402b88\n.text:0000000000402b8d\n.text:0000000000402b90\n.text:0000000000402b93\n.text:0000000000402b98\n.text:0000000000402b9f\n.text:0000000000402ba5\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402bb0\n.text:0000000000402bb6\n.text:0000000000402bb9\n.text:0000000000402bbf\n.text:0000000000402bc2\n.text:0000000000402bc5\n.text:0000000000402bc7\n.text:0000000000402bca\n.text:0000000000402bcc\n.text:0000000000402bcf\n.text:0000000000402bd2\n.text:0000000000402bd8\n.text:0000000000402bde\n.text:0000000000402be0\n.text:0000000000402be4\n.text:0000000000402be9\n.text:0000000000402bef\n.text:0000000000402bf4\n.text:0000000000402c00\n.text:0000000000402c04\n.text:0000000000402c0a\n.text:0000000000402c0d\n.text:0000000000402c14\n.text:0000000000402c17\n.text:0000000000402c1d\n.text:0000000000402c20\n.text:0000000000402c22\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2d\n.text:0000000000402c31\n.text:0000000000402c33\n.text:0000000000402c3a\n.text:0000000000402c3e\n.text:0000000000402c44\n.text:0000000000402c4a\n.text:0000000000402c51\n.text:0000000000402c57\n.text:0000000000402c60\n.text:0000000000402c63\n.text:0000000000402c69\n.text:0000000000402c6e\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c7a\n.text:0000000000402c80\n.text:0000000000402c83\n.text:0000000000402c86\n.text:0000000000402c8a\n.text:0000000000402c8d\n.text:0000000000402c90\n.text:0000000000402c92\n.text:0000000000402ca0\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402caa\n.text:0000000000402cac\n.text:0000000000402cb1\n.text:0000000000402cb6\n.text:0000000000402cbb\n.text:0000000000402cbe\n.text:0000000000402cc3\n.text:0000000000402cc8\n.text:0000000000402ccd\n.text:0000000000402cd1\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdd\n.text:0000000000402ce0\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402ce9\n.text:0000000000402cec\n.text:0000000000402cf1\n.text:0000000000402cf7\n.text:0000000000402cfb\n.text:0000000000402cfd\n.text:0000000000402d00\n.text:0000000000402d10\n.text:0000000000402d13\n.text:0000000000402d15\n.text:0000000000402d17\n.text:0000000000402d1e\n.text:0000000000402d20\n.text:0000000000402d22\n.text:0000000000402d27\n.text:0000000000402d2c\n.text:0000000000402d31\n.text:0000000000402d34\n.text:0000000000402d36\n.text:0000000000402d38\n.text:0000000000402d3a\n.text:0000000000402d3d\n.text:0000000000402d42\n.text:0000000000402d49\n.text:0000000000402d4c\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d5a\n.text:0000000000402d5f\n.text:0000000000402d64\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d6e\n.text:0000000000402d70\n.text:0000000000402d73\n.text:0000000000402d78\n.text:0000000000402d7c\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d88\n.text:0000000000402d8d\n.text:0000000000402d8f\n.text:0000000000402d92\n.text:0000000000402d98\n.text:0000000000402d9a\n.text:0000000000402da0\n.text:0000000000402da8\n.text:0000000000402daa\n.text:0000000000402daf\n.text:0000000000402db6\n.text:0000000000402dbd\n.text:0000000000402dc2\n.text:0000000000402dc8\n.text:0000000000402dcd\n.text:0000000000402dd0\n.text:0000000000402dd7\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402de2\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402dfb\n.text:0000000000402e00\n.text:0000000000402e05\n.text:0000000000402e09\n.text:0000000000402e0b\n.text:0000000000402e10\n.text:0000000000402e15\n.text:0000000000402e18\n.text:0000000000402e1d\n.text:0000000000402e1f\n.text:0000000000402e21\n.text:0000000000402e24\n.text:0000000000402e29\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3c\n.text:0000000000402e3e\n.text:0000000000402e45\n.text:0000000000402e47\n.text:0000000000402e49\n.text:0000000000402e4e\n.text:0000000000402e50\n.text:0000000000402e52\n.text:0000000000402e5a\n.text:0000000000402e5c\n.text:0000000000402e63\n.text:0000000000402e66\n.text:0000000000402e6d\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e78\n.text:0000000000402e7d\n.text:0000000000402e80\n.text:0000000000402e83\n.text:0000000000402e88\n.text:0000000000402e8b\n.text:0000000000402e8d\n.text:0000000000402e91\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e96\n.text:0000000000402e98\n.text:0000000000402e9a\n.text:0000000000402e9b\n.text:0000000000402e9c\n.text:0000000000402ea1\n.text:0000000000402ea4\n.text:0000000000402eab\n.text:0000000000402eae\n.text:0000000000402eb1\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ebd\n.text:0000000000402ebf\n.text:0000000000402ec1\n.text:0000000000402ec3\n.text:0000000000402ec8\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ed4\n.text:0000000000402ed6\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee7\n.text:0000000000402eea\n.text:0000000000402eed\n.text:0000000000402ef2\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efd\n.text:0000000000402f02\n.text:0000000000402f04\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f12\n.text:0000000000402f14\n.text:0000000000402f16\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f24\n.text:0000000000402f29\n.text:0000000000402f2b\n.text:0000000000402f2d\n.text:0000000000402f30\n'
p1182
tp1183
sS'c_tolower'
p1184
(S'\n__stdcall c_tolower()\n'
p1185
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1186
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1187
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1188
S'.text:0000000000408af0\n.text:0000000000408af3\n.text:0000000000408af6\n.text:0000000000408af9\n.text:0000000000408afc\n'
p1189
tp1190
sS'open_cloexec'
p1191
(S'\n__stdcall open_cloexec(char * path)\n'
p1192
V\u000a/* WARNING: Removing unreachable block (ram,0x00404d66) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff48 : 0x00404d74 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_cloexec(char *path,...)\u000a\u000a{\u000a  _Bool cloexec_works;\u000a  int iVar1;\u000a  uint uVar2;\u000a  uint in_ESI;\u000a  va_list ap;\u000a  uint local_b8;\u000a  \u000a  uVar2 = 0;\u000a  if ((in_ESI & 0x40) != 0) {\u000a    uVar2 = local_b8;\u000a  }\u000a  if (open_cloexec_cloexec_status_known == 0) {\u000a    cloexec_works = o_cloexec_works();\u000a    open_cloexec_cloexec_status_known = 1;\u000a  }\u000a  iVar1 = open_safer(path,(ulong)(in_ESI | 0x80000),(ulong)uVar2);\u000a  if ((-1 < iVar1) && (cloexec_works == false)) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xd0\nMOV EBX,ESI\nMOV R14,RDI\nTEST AL,AL\nJZ 0x00404d0b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EBP,EBP\nTEST BL,0x40\nJZ 0x00404d76\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xf0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00404d66\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00404d74\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EBP,dword ptr [RAX]\nMOV AL,byte ptr [0x0060f4e1]\nTEST AL,AL\nJNZ 0x00404d92\nCALL 0x00404dd0\nMOV byte ptr [0x0060f4e0],AL\nMOV byte ptr [0x0060f4e1],0x1\nOR EBX,0x80000\nXOR EAX,EAX\nMOV RDI,R14\nMOV ESI,EBX\nMOV EDX,EBP\nCALL 0x00405670\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00404dc2\nMOV AL,byte ptr [0x0060f4e0]\nTEST AL,AL\nJNZ 0x00404dc2\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x004053c0\nMOV EAX,EBX\nADD RSP,0xd0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1194
S'55\n41 56\n53\n48 81 ec d0 00 00 00\n89 f3\n49 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 ed\nf6 c3 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 f0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 28\n8a 05 65 a7 20 00\n84 c0\n75 12\ne8 4b 00 00 00\n88 05 55 a7 20 00\nc6 05 4f a7 20 00 01\n81 cb 00 00 08 00\n31 c0\n4c 89 f7\n89 de\n89 ea\ne8 ca 08 00 00\n89 c3\n85 db\n78 16\n8a 05 2e a7 20 00\n84 c0\n75 0c\nbe 01 00 00 00\n89 df\ne8 fe 05 00 00\n89 d8\n48 81 c4 d0 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1195
S'.text:0000000000404cc0\n.text:0000000000404cc1\n.text:0000000000404cc3\n.text:0000000000404cc4\n.text:0000000000404ccb\n.text:0000000000404ccd\n.text:0000000000404cd0\n.text:0000000000404cd2\n.text:0000000000404cd4\n.text:0000000000404cd9\n.text:0000000000404cde\n.text:0000000000404ce3\n.text:0000000000404ceb\n.text:0000000000404cf3\n.text:0000000000404cfb\n.text:0000000000404d03\n.text:0000000000404d0b\n.text:0000000000404d10\n.text:0000000000404d15\n.text:0000000000404d1a\n.text:0000000000404d1f\n.text:0000000000404d21\n.text:0000000000404d24\n.text:0000000000404d26\n.text:0000000000404d2b\n.text:0000000000404d30\n.text:0000000000404d38\n.text:0000000000404d3d\n.text:0000000000404d45\n.text:0000000000404d4c\n.text:0000000000404d50\n.text:0000000000404d54\n.text:0000000000404d56\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d61\n.text:0000000000404d64\n.text:0000000000404d66\n.text:0000000000404d6b\n.text:0000000000404d6f\n.text:0000000000404d74\n.text:0000000000404d76\n.text:0000000000404d7c\n.text:0000000000404d7e\n.text:0000000000404d80\n.text:0000000000404d85\n.text:0000000000404d8b\n.text:0000000000404d92\n.text:0000000000404d98\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404d9f\n.text:0000000000404da1\n.text:0000000000404da6\n.text:0000000000404da8\n.text:0000000000404daa\n.text:0000000000404dac\n.text:0000000000404db2\n.text:0000000000404db4\n.text:0000000000404db6\n.text:0000000000404dbb\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dc4\n.text:0000000000404dcb\n.text:0000000000404dcc\n.text:0000000000404dce\n.text:0000000000404dcf\n'
p1196
tp1197
sS'mbuiter_multi_reloc'
p1198
(S'\n__stdcall mbuiter_multi_reloc(mbuiter_multi * iter, ptrdiff_t ptrdiff)\n'
p1199
V\u000avoid mbuiter_multi_reloc(mbuiter_multi *iter,ptrdiff_t ptrdiff)\u000a\u000a{\u000a  (iter->cur).ptr = (iter->cur).ptr + ptrdiff;\u000a  return;\u000a}\u000a\u000a
p1200
S'ADD qword ptr [RDI + 0x10],RSI\nRET\n'
p1201
S'48 01 77 10\nc3\n'
p1202
S'.text:00000000004062d0\n.text:00000000004062d4\n'
p1203
tp1204
sS'getopt_long'
p1205
(S'\n__stdcall getopt_long()\n'
p1206
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060f0e0)();\u000a  return;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x0060f0e0]\n'
p1208
S'ff 25 3a d6 20 00\n'
p1209
S'.plt:0000000000401aa0\n'
p1210
tp1211
sS'quotearg_style'
p1212
(S'\n__stdcall quotearg_style(char * arg)\n'
p1213
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00407500\n'
p1215
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1216
S'.text:00000000004075e0\n.text:00000000004075e3\n.text:00000000004075e5\n.text:00000000004075e7\n.text:00000000004075e9\n.text:00000000004075ec\n'
p1217
tp1218
sS'dup_cloexec'
p1219
(S'\n__stdcall dup_cloexec()\n'
p1220
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1221
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x004086b0\n'
p1222
S'be 06 04 00 00\n31 d2\n31 c0\ne9 82 32 00 00\n'
p1223
S'.text:0000000000405420\n.text:0000000000405425\n.text:0000000000405427\n.text:0000000000405429\n'
p1224
tp1225
sS'bc_size_of_environment'
p1226
(S'\n__stdcall bc_size_of_environment()\n'
p1227
V\u000asize_t bc_size_of_environment(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  char **ppcVar2;\u000a  char *__s;\u000a  size_t sVar3;\u000a  \u000a  __s = *environ;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 0;\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    ppcVar2 = environ;\u000a    do {\u000a      ppcVar2 = ppcVar2 + 1;\u000a      sVar1 = strlen(__s);\u000a      sVar3 = sVar3 + 1 + sVar1;\u000a      __s = *ppcVar2;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1228
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,qword ptr [0x0060f360]\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x00404868\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nCALL 0x00401a90\nLEA R14,[R14 + RAX*0x1 + 0x1]\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x00404850\nJMP 0x0040486b\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1229
S'41 56\n53\n50\n48 8b 1d 25 ab 20 00\n48 8b 3b\n48 85 ff\n74 25\n48 83 c3 08\n45 31 f6\n66 0f 1f 44 00 00\ne8 3b d2 ff ff\n4d 8d 74 06 01\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 ea\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1230
S'.text:0000000000404830\n.text:0000000000404832\n.text:0000000000404833\n.text:0000000000404834\n.text:000000000040483b\n.text:000000000040483e\n.text:0000000000404841\n.text:0000000000404843\n.text:0000000000404847\n.text:000000000040484a\n.text:0000000000404850\n.text:0000000000404855\n.text:000000000040485a\n.text:000000000040485d\n.text:0000000000404861\n.text:0000000000404864\n.text:0000000000404866\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404872\n.text:0000000000404873\n.text:0000000000404875\n'
p1231
tp1232
sS'mb_copy'
p1233
(S'\n__stdcall mb_copy(mbchar_t * new_mbc, mbchar_t * old_mbc)\n'
p1234
V\u000avoid mb_copy(mbchar_t *new_mbc,mbchar_t *old_mbc)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *__dest;\u000a  \u000a  __dest = old_mbc->ptr;\u000a  if (__dest == old_mbc->buf) {\u000a    __dest = new_mbc->buf;\u000a    memcpy(__dest,old_mbc->buf,old_mbc->bytes);\u000a  }\u000a  new_mbc->ptr = __dest;\u000a  new_mbc->bytes = old_mbc->bytes;\u000a  _Var1 = old_mbc->wc_valid;\u000a  new_mbc->wc_valid = _Var1;\u000a  if (_Var1 != false) {\u000a    new_mbc->wc = old_mbc->wc;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1235
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBX]\nLEA RSI,[RBX + 0x18]\nCMP R15,RSI\nJNZ 0x00409037\nLEA R15,[R14 + 0x18]\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RDI,R15\nCALL 0x00401c40\nMOV qword ptr [R14],R15\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [R14 + 0x8],RAX\nMOV AL,byte ptr [RBX + 0x10]\nTEST AL,AL\nMOV byte ptr [R14 + 0x10],AL\nJZ 0x00409054\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [R14 + 0x14],EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1236
S'41 57\n41 56\n53\n48 89 f3\n49 89 fe\n4c 8b 3b\n48 8d 73 18\n49 39 f7\n75 10\n4d 8d 7e 18\n48 8b 53 08\n4c 89 ff\ne8 09 8c ff ff\n4d 89 3e\n48 8b 43 08\n49 89 46 08\n8a 43 10\n84 c0\n41 88 46 10\n74 07\n8b 43 14\n41 89 46 14\n5b\n41 5e\n41 5f\nc3\n'
p1237
S'.text:0000000000409010\n.text:0000000000409012\n.text:0000000000409014\n.text:0000000000409015\n.text:0000000000409018\n.text:000000000040901b\n.text:000000000040901e\n.text:0000000000409022\n.text:0000000000409025\n.text:0000000000409027\n.text:000000000040902b\n.text:000000000040902f\n.text:0000000000409032\n.text:0000000000409037\n.text:000000000040903a\n.text:000000000040903e\n.text:0000000000409042\n.text:0000000000409045\n.text:0000000000409047\n.text:000000000040904b\n.text:000000000040904d\n.text:0000000000409050\n.text:0000000000409054\n.text:0000000000409055\n.text:0000000000409057\n.text:0000000000409059\n'
p1238
tp1239
sS'strrchr'
p1240
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060f110)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060f110]\n'
p1243
S'ff 25 0a d6 20 00\n'
p1244
S'.plt:0000000000401b00\n'
p1245
tp1246
sS'quotearg_alloc_mem'
p1247
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1248
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60f510\nCMOVNZ R12,RCX\nCALL 0x00401940\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00406530\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004082e0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00406530\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040725a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1250
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 10 f5 60 00\n4c 0f 45 e1\ne8 88 a7 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 d1 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1251
S'.text:0000000000407180\n.text:0000000000407181\n.text:0000000000407183\n.text:0000000000407185\n.text:0000000000407187\n.text:0000000000407189\n.text:000000000040718a\n.text:000000000040718e\n.text:0000000000407191\n.text:0000000000407196\n.text:0000000000407199\n.text:000000000040719e\n.text:00000000004071a1\n.text:00000000004071a6\n.text:00000000004071a9\n.text:00000000004071af\n.text:00000000004071b3\n.text:00000000004071b8\n.text:00000000004071bd\n.text:00000000004071bf\n.text:00000000004071c3\n.text:00000000004071c5\n.text:00000000004071c8\n.text:00000000004071cc\n.text:00000000004071d1\n.text:00000000004071d5\n.text:00000000004071da\n.text:00000000004071de\n.text:00000000004071e0\n.text:00000000004071e2\n.text:00000000004071e5\n.text:00000000004071e8\n.text:00000000004071eb\n.text:00000000004071f0\n.text:00000000004071f5\n.text:00000000004071f7\n.text:00000000004071fc\n.text:0000000000407200\n.text:0000000000407203\n.text:0000000000407207\n.text:000000000040720a\n.text:000000000040720f\n.text:0000000000407212\n.text:0000000000407216\n.text:000000000040721a\n.text:000000000040721d\n.text:0000000000407220\n.text:0000000000407225\n.text:000000000040722a\n.text:000000000040722d\n.text:0000000000407232\n.text:0000000000407237\n.text:0000000000407239\n.text:000000000040723e\n.text:0000000000407243\n.text:0000000000407247\n.text:000000000040724a\n.text:000000000040724e\n.text:0000000000407253\n.text:0000000000407255\n.text:0000000000407257\n.text:000000000040725a\n.text:000000000040725d\n.text:0000000000407261\n.text:0000000000407262\n.text:0000000000407264\n.text:0000000000407266\n.text:0000000000407268\n.text:000000000040726a\n.text:000000000040726b\n'
p1252
tp1253
sS'fputs'
p1254
(S'\n__stdcall fputs(char * __s, FILE * __stream)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_0060f128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0060f128]\n'
p1257
S'ff 25 f2 d5 20 00\n'
p1258
S'.plt:0000000000401b30\n'
p1259
tp1260
sS'bkm_scale'
p1261
(S'\n__stdcall bkm_scale(ulong * x)\n'
p1262
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1263
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1264
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1265
S'.text:0000000000408640\n.text:0000000000408643\n.text:000000000040864a\n.text:0000000000408651\n.text:0000000000408653\n.text:0000000000408656\n.text:0000000000408659\n.text:000000000040865d\n.text:0000000000408660\n.text:0000000000408664\n.text:0000000000408666\n.text:0000000000408669\n.text:000000000040866c\n'
p1266
tp1267
sS'memchr'
p1268
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060f160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060f160]\n'
p1271
S'ff 25 ba d5 20 00\n'
p1272
S'.plt:0000000000401ba0\n'
p1273
tp1274
sS'bc_use_sensible_arg_max'
p1275
(S'\n__stdcall bc_use_sensible_arg_max(buildcmd_control * ctl)\n'
p1276
V\u000avoid bc_use_sensible_arg_max(buildcmd_control *ctl)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = ctl->posix_arg_size_max;\u000a  if (0x1ffff < ctl->posix_arg_size_max) {\u000a    uVar1 = 0x20000;\u000a    if (0x20000 < ctl->posix_arg_size_min) {\u000a      uVar1 = ctl->posix_arg_size_min;\u000a    }\u000a  }\u000a  ctl->arg_max = uVar1;\u000a  return;\u000a}\u000a\u000a
p1277
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,0x20000\nJC 0x00404950\nMOV RCX,qword ptr [RDI + 0x10]\nCMP RCX,0x20000\nMOV EAX,0x20000\nCMOVA RAX,RCX\nMOV qword ptr [RDI + 0x18],RAX\nRET\n'
p1278
S'48 8b 47 08\n48 3d 00 00 02 00\n72 14\n48 8b 4f 10\n48 81 f9 00 00 02 00\nb8 00 00 02 00\n48 0f 47 c1\n48 89 47 18\nc3\n'
p1279
S'.text:0000000000404930\n.text:0000000000404934\n.text:000000000040493a\n.text:000000000040493c\n.text:0000000000404940\n.text:0000000000404947\n.text:000000000040494c\n.text:0000000000404950\n.text:0000000000404954\n'
p1280
tp1281
sS'quotearg_style_mem'
p1282
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1283
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1284
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004075a0\n'
p1285
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1286
S'.text:0000000000407600\n.text:0000000000407603\n.text:0000000000407606\n.text:0000000000407608\n.text:000000000040760a\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407612\n'
p1287
tp1288
sS'xalloc_die'
p1289
(S'\n__stdcall xalloc_die()\n'
p1290
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40b41a,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1291
S'PUSH RBX\nMOV EBX,dword ptr [0x0060f2c8]\nXOR EDI,EDI\nMOV ESI,0x40bf1f\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40b41a\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401d20\nCALL 0x00401930\n'
p1292
S'53\n8b 1d 21 6f 20 00\n31 ff\nbe 1f bf 40 00\nba 05 00 00 00\ne8 b8 96 ff ff\n48 89 c1\n31 f6\nba 1a b4 40 00\n31 c0\n89 df\ne8 55 99 ff ff\ne8 60 95 ff ff\n'
p1293
S'.text:00000000004083a0\n.text:00000000004083a1\n.text:00000000004083a7\n.text:00000000004083a9\n.text:00000000004083ae\n.text:00000000004083b3\n.text:00000000004083b8\n.text:00000000004083bb\n.text:00000000004083bd\n.text:00000000004083c2\n.text:00000000004083c4\n.text:00000000004083c6\n.text:00000000004083cb\n'
p1294
tp1295
sS'open_safer'
p1296
(S'\n__stdcall open_safer(char * file)\n'
p1297
V\u000a/* WARNING: Removing unreachable block (ram,0x0040570e) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x0040571c */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1298
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004056b2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x0040571e\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x0040570e\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x0040571c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401d40\nMOV EDI,EAX\nCALL 0x00407cf0\nADD RSP,0xd8\nRET\n'
p1299
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 1b c6 ff ff\n89 c7\ne8 c4 25 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1300
S'.text:0000000000405670\n.text:0000000000405677\n.text:0000000000405679\n.text:000000000040567b\n.text:0000000000405680\n.text:0000000000405685\n.text:000000000040568a\n.text:0000000000405692\n.text:000000000040569a\n.text:00000000004056a2\n.text:00000000004056aa\n.text:00000000004056b2\n.text:00000000004056b7\n.text:00000000004056bc\n.text:00000000004056c1\n.text:00000000004056c6\n.text:00000000004056c8\n.text:00000000004056cc\n.text:00000000004056ce\n.text:00000000004056d3\n.text:00000000004056d8\n.text:00000000004056e0\n.text:00000000004056e5\n.text:00000000004056ed\n.text:00000000004056f4\n.text:00000000004056f8\n.text:00000000004056fc\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570c\n.text:000000000040570e\n.text:0000000000405713\n.text:0000000000405717\n.text:000000000040571c\n.text:000000000040571e\n.text:0000000000405720\n.text:0000000000405725\n.text:0000000000405727\n.text:000000000040572c\n.text:0000000000405733\n'
p1301
tp1302
sS'quotearg_n_custom'
p1303
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1304
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1305
S'MOV R8,-0x1\nJMP 0x00407720\n'
p1306
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1307
S'.text:0000000000407710\n.text:0000000000407717\n'
p1308
tp1309
sS'waitpid'
p1310
(S'\n__stdcall waitpid(__pid_t __pid, int * __stat_loc, int __options)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_waitpid_0060f228)();\u000a  return _Var1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x0060f228]\n'
p1313
S'ff 25 f2 d4 20 00\n'
p1314
S'.plt:0000000000401d30\n'
p1315
tp1316
sS'fd_safer'
p1317
(S'\n__stdcall fd_safer()\n'
p1318
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00407d24\nMOV EDI,EBX\nCALL 0x00407ce0\nMOV R14D,EAX\nCALL 0x00401940\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401b70\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00407d26\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 33 9c ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 55 9e ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000407cf0\n.text:0000000000407cf1\n.text:0000000000407cf3\n.text:0000000000407cf5\n.text:0000000000407cf6\n.text:0000000000407cf7\n.text:0000000000407cf9\n.text:0000000000407cfc\n.text:0000000000407cfe\n.text:0000000000407d00\n.text:0000000000407d05\n.text:0000000000407d08\n.text:0000000000407d0d\n.text:0000000000407d10\n.text:0000000000407d14\n.text:0000000000407d16\n.text:0000000000407d1b\n.text:0000000000407d1f\n.text:0000000000407d22\n.text:0000000000407d24\n.text:0000000000407d26\n.text:0000000000407d2a\n.text:0000000000407d2b\n.text:0000000000407d2d\n.text:0000000000407d2f\n.text:0000000000407d30\n'
p1322
tp1323
sS'__freading'
p1324
(S'\n__stdcall __freading()\n'
p1325
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060f1f8)();\u000a  return;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x0060f1f8]\n'
p1327
S'ff 25 22 d5 20 00\n'
p1328
S'.plt:0000000000401cd0\n'
p1329
tp1330
sS'iswcntrl'
p1331
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p1332
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0060f080)();\u000a  return iVar1;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x0060f080]\n'
p1334
S'ff 25 9a d6 20 00\n'
p1335
S'.plt:00000000004019e0\n'
p1336
tp1337
sS'main'
p1338
(S'\n__stdcall main(char * * argv)\n'
p1339
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined4 *__s;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  FILE *__stream;\u000a  bool bVar4;\u000a  FILE *pFVar5;\u000a  int iVar6;\u000a  BC_INIT_STATUS BVar7;\u000a  undefined4 uVar8;\u000a  int iVar9;\u000a  uint *puVar10;\u000a  undefined8 uVar11;\u000a  long min;\u000a  size_t sVar12;\u000a  char *argv0;\u000a  void *pvVar13;\u000a  size_t sVar14;\u000a  size_t sVar15;\u000a  ulong uVar16;\u000a  size_t *psVar17;\u000a  undefined4 **ppuVar18;\u000a  code *pcVar19;\u000a  undefined4 **in_RSI;\u000a  size_t *psVar20;\u000a  char default_cmd [5];\u000a  int option_index;\u000a  char *default_arglist [1];\u000a  code *local_f8;\u000a  char *local_f0;\u000a  undefined4 local_e8;\u000a  undefined local_e4;\u000a  ulong local_e0;\u000a  undefined4 *local_d0;\u000a  code *local_c8;\u000a  undefined local_c0 [128];\u000a  undefined4 local_40;\u000a  \u000a  iVar9 = (int)((ulong)argv & 0xffffffff);\u000a  local_e4 = 0;\u000a  local_e8 = 0x6f686365;\u000a  argv0 = (char *)*in_RSI;\u000a  if ((undefined4 *)argv0 == (undefined4 *)0x0) {\u000a    argv0 = "xargs";\u000a  }\u000a  set_program_name(argv0);\u000a  remember_non_cloexec_fds();\u000a  parent = getpid();\u000a  original_exit_value = 0;\u000a  setlocale(6,"");\u000a  bindtextdomain(0x40b3b5,"/usr/local/share/locale");\u000a  textdomain(0x40b3b5);\u000a  iVar6 = atexit(close_stdin);\u000a  if ((iVar6 != 0) || (iVar6 = atexit(wait_for_proc_all), iVar6 != 0)) {\u000a    puVar10 = (uint *)__errno_location();\u000a    uVar1 = *puVar10;\u000a    uVar11 = dcgettext(0,"The atexit library function failed",5);\u000a    error(1,(ulong)uVar1,uVar11);\u000a  }\u000a  BVar7 = bc_init_controlinfo(&bc_ctl,0x800);\u000a  if (BVar7 + ~BC_INIT_OK < 2) {\u000a    pcVar19 = fail_due_to_env_size;\u000a  }\u000a  else {\u000a    min = sysconf(0);\u000a    if (0 < min) {\u000a      if (min < 0x801) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("val > XARGS_POSIX_HEADROOM","xargs.c",0x1d9,"int main(int, char **)");\u000a      }\u000a      bc_ctl.arg_max = smaller_of(bc_ctl.arg_max,min + 0xfffff800);\u000a    }\u000a    if (bc_ctl.arg_max < 0x800) {\u000aLAB_00402a3e:\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("bc_ctl.arg_max >= LINE_MAX","xargs.c",0x1f5,"int main(int, char **)");\u000a    }\u000a    bc_ctl.exec_callback = xargs_do_exec;\u000a    bc_use_sensible_arg_max(&bc_ctl);\u000a    pcVar19 = noop;\u000a  }\u000a  local_f0 = "-";\u000a  local_f8 = read_line;\u000a  bVar3 = true;\u000a  uVar16 = (ulong)BVar7;\u000a  sVar12 = bc_ctl.arg_max;\u000a  bVar4 = (bool)0;\u000aswitchD_004020ed_caseD_53:\u000a  bVar2 = bVar4;\u000a  bc_ctl.arg_max = sVar12;\u000a  uVar8 = getopt_long((ulong)argv & 0xffffffff);\u000a  sVar12 = bc_ctl.arg_max;\u000a  bVar4 = (bool)1;\u000a  switch(uVar8) {\u000a  case 0x30:\u000a    input_delimiter = 0;\u000a    goto LAB_004021a7;\u000a  case 0x45:\u000a  case 0x65:\u000a    if (optarg == (char *)0x0) {\u000a      eof_str = (char *)0x0;\u000a      sVar12 = bc_ctl.arg_max;\u000a      bVar4 = bVar2;\u000a    }\u000a    else {\u000a      sVar12 = bc_ctl.arg_max;\u000a      eof_str = optarg;\u000a      bVar4 = bVar2;\u000a      if (*optarg == 0) {\u000a        eof_str = (char *)0x0;\u000a        sVar12 = bc_ctl.arg_max;\u000a        bVar4 = bVar2;\u000a      }\u000a    }\u000a    break;\u000a  case 0x49:\u000a  case 0x69:\u000a    bc_ctl.replace_pat = optarg;\u000a    if (optarg == (char *)0x0) {\u000a      bc_ctl.replace_pat = "{}";\u000a    }\u000a    bc_ctl.lines_per_exec = 0;\u000a    bc_ctl.args_per_exec = 0;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x4c:\u000a    min = 0x4c;\u000aLAB_004021ce:\u000a    bc_ctl.lines_per_exec = parse_num(optarg,min,1);\u000a    goto LAB_004021e5;\u000a  case 0x50:\u000a    min = parse_num(optarg,0x50,0);\u000a    proc_max = (sig_atomic_t)min;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x61:\u000a    local_f0 = optarg;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 100:\u000a    input_delimiter = get_input_delimiter(optarg);\u000aLAB_004021a7:\u000a    local_f8 = read_string;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x68:\u000a    usage(0);\u000a  default:\u000a    usage(1);\u000a    goto LAB_00402a3e;\u000a  case 0x6c:\u000a    if (optarg != (char *)0x0) {\u000a      min = 0x6c;\u000a      goto LAB_004021ce;\u000a    }\u000a    bc_ctl.lines_per_exec = 1;\u000aLAB_004021e5:\u000a    bc_ctl.args_per_exec = 0;\u000aLAB_004020a3:\u000a    bc_ctl.replace_pat = (char *)0x0;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x6e:\u000a    bc_ctl.args_per_exec = parse_num(optarg,0x6e,1);\u000a    bc_ctl.lines_per_exec = 0;\u000a    if ((bc_ctl.args_per_exec != 1) || (bc_ctl.replace_pat == (char *)0x0)) goto LAB_004020a3;\u000a    bc_ctl.args_per_exec = 0;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x70:\u000a    query_before_executing = 1;\u000a  case 0x74:\u000a    print_command = 1;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x72:\u000a    bVar3 = false;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x73:\u000a    local_e0 = uVar16;\u000a    (*pcVar19)();\u000a    sVar12 = parse_num(optarg,0x73,1);\u000a    uVar16 = local_e0;\u000a    bVar4 = bVar2;\u000a    if (bc_ctl.posix_arg_size_max < sVar12) {\u000a      uVar11 = dcgettext(0,"warning: value %ld for -s option is too large, using %ld instead",5);\u000a      error(0,0,uVar11,sVar12,bc_ctl.posix_arg_size_max);\u000a      uVar16 = local_e0;\u000a      sVar12 = bc_ctl.posix_arg_size_max;\u000a      bVar4 = bVar2;\u000a    }\u000a    break;\u000a  case 0x76:\u000a    display_findutils_version("xargs");\u000a    return 0;\u000a  case 0x78:\u000a    bc_ctl.exit_if_size_exceeded = 1;\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a    break;\u000a  case 0x80:\u000a    break;\u000a  case 0xffffffff:\u000a    if ((local_f8 == read_string) && (eof_str != (char *)0x0)) {\u000a      uVar11 = dcgettext(0,"warning: the -E option has no effect if -0 or -d is used.\u005cn",5);\u000a      error(0,0,uVar11,uVar11);\u000a    }\u000a    (*pcVar19)();\u000a    if ((int)uVar16 == 0) {\u000a      local_c8 = increment_proc_max;\u000a      sigemptyset((sigset_t *)(&local_c8 + 8));\u000a      local_40 = 0;\u000a      iVar6 = sigaction(10,(sigaction *)&local_c8,(sigaction *)0x0);\u000a      if (iVar6 != 0) {\u000a        puVar10 = (uint *)__errno_location();\u000a        uVar1 = *puVar10;\u000a        uVar11 = dcgettext(0,"Cannot set SIGUSR1 signal handler",5);\u000a        error(0,(ulong)uVar1,uVar11,uVar11);\u000a      }\u000a      local_c8 = decrement_proc_max;\u000a      sigemptyset((sigset_t *)(&local_c8 + 8));\u000a      local_40 = 0;\u000a      iVar6 = sigaction(0xc,(sigaction *)&local_c8,(sigaction *)0x0);\u000a      if (iVar6 != 0) {\u000a        puVar10 = (uint *)__errno_location();\u000a        uVar1 = *puVar10;\u000a        uVar11 = dcgettext(0,"Cannot set SIGUSR2 signal handler",5);\u000a        error(0,(ulong)uVar1,uVar11,uVar11);\u000a      }\u000a      if ((*local_f0 != '-') || (__stream = stderr, pFVar5 = stdin, local_f0[1] != 0)) {\u000a        keep_stdin = 1;\u000a        input_stream = fopen_cloexec_for_read_only(local_f0);\u000a        __stream = stderr;\u000a        pFVar5 = input_stream;\u000a        if (input_stream == (FILE *)0x0) {\u000a          puVar10 = (uint *)__errno_location();\u000a          uVar1 = *puVar10;\u000a          uVar11 = dcgettext(0,"Cannot open input file %s",5);\u000a          argv0 = quotearg_n_style((char *)0x0);\u000a          error(1,(ulong)uVar1,uVar11,argv0);\u000a          __stream = stderr;\u000a          pFVar5 = input_stream;\u000a        }\u000a      }\u000a      input_stream = pFVar5;\u000a      if ((bc_ctl.replace_pat != (char *)0x0) || (bc_ctl.lines_per_exec != 0)) {\u000a        bc_ctl.exit_if_size_exceeded = 1;\u000a      }\u000a      if (optind == iVar9) {\u000a        optind = 0;\u000a        in_RSI = &local_d0;\u000a        local_d0 = &local_e8;\u000a        iVar9 = 1;\u000a      }\u000a      stderr = __stream;\u000a      if (bVar2) {\u000a        stderr = __stream;\u000a        argv0 = (char *)dcgettext(0,"Your environment variables take up %lu bytes\u005cn",5);\u000a        sVar12 = bc_size_of_environment();\u000a        fprintf(__stream,argv0,sVar12,sVar12);\u000a        __stream = stderr;\u000a        argv0 = (char *)dcgettext(0,"POSIX upper limit on argument length (this system): %lu\u005cn",5);\u000a        fprintf(__stream,argv0,bc_ctl.posix_arg_size_max);\u000a        __stream = stderr;\u000a        argv0 = (char *)dcgettext(0,\u000a                                  "POSIX smallest allowable upper limit on argument length (all systems): %lu\u005cn"\u000a                                  ,5);\u000a        fprintf(__stream,argv0,bc_ctl.posix_arg_size_min);\u000a        __stream = stderr;\u000a        argv0 = (char *)dcgettext(0,"Maximum length of command we could actually use: %lu\u005cn",5);\u000a        sVar12 = bc_ctl.posix_arg_size_max;\u000a        sVar15 = bc_size_of_environment();\u000a        fprintf(__stream,argv0,sVar12 - sVar15);\u000a        __stream = stderr;\u000a        argv0 = (char *)dcgettext(0,"Size of command buffer we are actually using: %lu\u005cn",5);\u000a        fprintf(__stream,argv0,bc_ctl.arg_max);\u000a        __stream = stderr;\u000a        argv0 = (char *)dcgettext(0,"Maximum parallelism (--max-procs must be no greater): %lu\u005cn",5)\u000a        ;\u000a        fprintf(__stream,argv0,0x7fffffff);\u000a        iVar6 = isatty(0);\u000a        __stream = stderr;\u000a        if (iVar6 != 0) {\u000a          argv0 = (char *)dcgettext(0,\u000a                                    "\u005cnExecution of xargs will continue now, and it will try to read its input and run commands; if this is not what you wanted to happen, please type the end-of-file keystroke.\u005cn"\u000a                                    ,5);\u000a          fprintf(__stream,argv0);\u000a          __stream = stderr;\u000a          if (bVar3) {\u000a            argv0 = (char *)dcgettext(0,\u000a                                      "Warning: %s will be run at least once.  If you do not want that to happen, then press the interrupt keystroke.\u005cn"\u000a                                      ,5);\u000a            fprintf(__stream,argv0,in_RSI[(long)optind]);\u000a          }\u000a        }\u000a      }\u000a      linebuf = (char *)xmalloc(bc_ctl.arg_max + 1);\u000a      bc_state.argbuf = (char *)xmalloc(bc_ctl.arg_max + 1);\u000a      signal(0x11,(__sighandler_t)0x0);\u000a      if (bc_ctl.replace_pat == (char *)0x0) {\u000a        while (optind < iVar9) {\u000a          __s = in_RSI[(long)optind];\u000a          sVar14 = strlen((char *)__s);\u000a          bc_push_arg(&bc_ctl,&bc_state,(char *)__s,sVar14 + 1,(char *)0x0,0);\u000a          optind = optind + 1;\u000a        }\u000a        initial_args = 1;\u000a        bc_ctl.initial_argc = bc_state.cmd_argc;\u000a        bc_state.cmd_initial_argv_chars = bc_state.cmd_argv_chars;\u000a        while (iVar9 = (*local_f8)(), iVar9 != -1) {\u000a          if (bc_ctl.lines_per_exec - 1 < lineno) {\u000a            bc_do_exec(&bc_ctl,&bc_state);\u000a            lineno = 0;\u000a          }\u000a        }\u000a        if ((bc_state.cmd_argc != bc_ctl.initial_argc) || ((bVar3 && (procs_executed == 0)))) {\u000a          bc_do_exec(&bc_ctl,&bc_state);\u000a        }\u000a      }\u000a      else {\u000a        pvVar13 = xmalloc((long)iVar9 * 8);\u000a        min = (long)optind;\u000a        if (optind < iVar9) {\u000a          ppuVar18 = in_RSI + min;\u000a          psVar17 = (size_t *)((long)pvVar13 + min * 8);\u000a          min = (long)iVar9 - min;\u000a          do {\u000a            sVar14 = strlen((char *)*ppuVar18);\u000a            *psVar17 = sVar14;\u000a            ppuVar18 = ppuVar18 + 1;\u000a            psVar17 = psVar17 + 1;\u000a            min = min + -1;\u000a          } while (min != 0);\u000a        }\u000a        bc_ctl.rplen = strlen(bc_ctl.replace_pat);\u000a        iVar6 = (*local_f8)();\u000a        if (iVar6 != -1) {\u000a          do {\u000a            bc_clear_args(&bc_ctl,&bc_state);\u000a            bc_state.cmd_argv_chars = 0;\u000a            bc_push_arg(&bc_ctl,&bc_state,(char *)in_RSI[(long)optind],\u000a                        *(long *)((long)pvVar13 + (long)optind * 8) + 1,(char *)0x0,0);\u000a            initial_args = 1;\u000a            min = (long)optind + 1;\u000a            if ((int)min < iVar9) {\u000a              ppuVar18 = in_RSI + min;\u000a              psVar20 = (size_t *)((long)pvVar13 + min * 8);\u000a              iVar6 = (iVar9 + -1) - optind;\u000a              do {\u000a                bc_do_insert(&bc_ctl,&bc_state,(char *)*ppuVar18,*psVar20,(char *)0x0,0,\u000a                             (size_t)linebuf);\u000a                ppuVar18 = ppuVar18 + 1;\u000a                psVar20 = psVar20 + 1;\u000a                iVar6 = iVar6 + -1;\u000a              } while (iVar6 != 0);\u000a            }\u000a            bc_do_exec(&bc_ctl,&bc_state);\u000a            iVar6 = (*local_f8)();\u000a          } while (iVar6 != -1);\u000a        }\u000a      }\u000a      original_exit_value = child_error;\u000a      return child_error;\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("BC_INIT_OK == bcstatus","xargs.c",0x2a1,"int main(int, char **)");\u000a  }\u000a  argv0 = strchr(optarg,0x3d);\u000a  if (argv0 != (char *)0x0) {\u000a    uVar11 = dcgettext(0,"option --%s may not be set to a value which includes `=\u005c'",5);\u000a    error(1,0,uVar11);\u000a  }\u000a  slot_var_name = optarg;\u000a  iVar6 = unsetenv(optarg);\u000a  sVar12 = bc_ctl.arg_max;\u000a  bVar4 = bVar2;\u000a  if (iVar6 != 0) {\u000a    puVar10 = (uint *)__errno_location();\u000a    uVar1 = *puVar10;\u000a    local_e0 = uVar16;\u000a    uVar11 = dcgettext(0,"failed to unset environment variable %s",5);\u000a    uVar16 = local_e0;\u000a    error(1,(ulong)uVar1,uVar11);\u000a    sVar12 = bc_ctl.arg_max;\u000a    bVar4 = bVar2;\u000a  }\u000a  goto switchD_004020ed_caseD_53;\u000a}\u000a\u000a
p1340
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xe8\nMOV R15,RSI\nMOV R14D,EDI\nMOV byte ptr [RSP + 0x34],0x0\nMOV dword ptr [RSP + 0x30],0x6f686365\nMOV RDI,qword ptr [R15]\nTEST RDI,RDI\nJNZ 0x00401f61\nMOV EDI,0x40995f\nCALL 0x00406310\nCALL 0x00404ae0\nCALL 0x00401a20\nMOV dword ptr [0x0060f390],EAX\nMOV dword ptr [0x0060f394],0x0\nMOV EDI,0x6\nMOV ESI,0x40a59d\nCALL 0x00401d00\nMOV EDI,0x40b3b5\nMOV ESI,0x409965\nCALL 0x00401a60\nMOV EDI,0x40b3b5\nCALL 0x00401a30\nMOV EDI,0x405440\nCALL 0x004091a0\nTEST EAX,EAX\nJNZ 0x00401fc4\nMOV EDI,0x402f50\nCALL 0x004091a0\nTEST EAX,EAX\nJZ 0x00401ff0\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40997d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV EDI,0x60f398\nMOV ESI,0x800\nCALL 0x00404880\nMOV EBX,EAX\nLEA EAX,[RBX + -0x1]\nCMP EAX,0x2\nJNC 0x00402010\nMOV EBP,0x402fc0\nJMP 0x0040207e\nXOR EDI,EDI\nCALL 0x00401d60\nTEST RAX,RAX\nJLE 0x00402051\nCMP RAX,0x800\nJLE 0x00402a70\nMOV RDI,qword ptr [0x0060f3b0]\nADD RAX,0xfffff800\nMOV RSI,RAX\nCALL 0x00402ff0\nMOV qword ptr [0x0060f3b0],RAX\nCMP RAX,0x7ff\nJA 0x00402064\nJMP 0x00402a3e\nMOV RAX,qword ptr [0x0060f3b0]\nCMP RAX,0x7ff\nJBE 0x00402a3e\nMOV qword ptr [0x0060f3d8],0x403000\nMOV EDI,0x60f398\nCALL 0x00404930\nMOV EBP,0x402f40\nMOV EAX,0x40b68e\nMOV qword ptr [RSP + 0x28],RAX\nMOV EAX,0x402a90\nMOV qword ptr [RSP + 0x20],RAX\nMOV dword ptr [RSP + 0x1c],0x1\nLEA R13,[RSP + 0x44]\nXOR ECX,ECX\nJMP 0x004020c0\nMOV qword ptr [0x0060f3c8],0x0\nMOV ECX,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R12D,ECX\nMOV EDX,0x4099f5\nMOV ECX,0x409710\nMOV EDI,R14D\nMOV RSI,R15\nMOV R8,R13\nCALL 0x00401aa0\nINC EAX\nCMP EAX,0x81\nJA 0x00402a34\nMOV ECX,0x1\nJMP qword ptr [0x409200 + RAX*0x8]\nMOV RAX,qword ptr [0x0060f368]\nTEST RAX,RAX\nJZ 0x004023c4\nCMP byte ptr [RAX],0x0\nMOV ECX,0x0\nCMOVZ RAX,RCX\nJMP 0x004023c6\nMOV RAX,qword ptr [0x0060f368]\nTEST RAX,RAX\nMOV ECX,0x409a15\nCMOVZ RAX,RCX\nMOV qword ptr [0x0060f3c8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x0060f3e0],XMM0\nMOV ECX,R12D\nJMP 0x004020c0\nMOV byte ptr [0x0060f3f0],0x0\nJMP 0x004021a7\nMOV RDI,qword ptr [0x0060f368]\nMOV ESI,0x4c\nJMP 0x004021ce\nMOV RDI,qword ptr [0x0060f368]\nMOV ESI,0x50\nXOR EDX,EDX\nMOV ECX,0x7fffffff\nMOV R8D,0x1\nCALL 0x004037d0\nMOV dword ptr [0x0060f2b8],EAX\nMOV ECX,R12D\nJMP 0x004020c0\nMOV RAX,qword ptr [0x0060f368]\nMOV qword ptr [RSP + 0x28],RAX\nMOV ECX,R12D\nJMP 0x004020c0\nMOV RDI,qword ptr [0x0060f368]\nCALL 0x004033e0\nMOV byte ptr [0x0060f3f0],AL\nMOV EAX,0x4032d0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,R12D\nJMP 0x004020c0\nMOV RDI,qword ptr [0x0060f368]\nTEST RDI,RDI\nJZ 0x004023d5\nMOV ESI,0x6c\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV R8D,0x1\nCALL 0x004037d0\nMOV qword ptr [0x0060f3e0],RAX\nMOV qword ptr [0x0060f3e8],0x0\nJMP 0x004020a3\nMOV RDI,qword ptr [0x0060f368]\nMOV ESI,0x6e\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV R8D,0x1\nCALL 0x004037d0\nMOV qword ptr [0x0060f3e8],RAX\nMOV qword ptr [0x0060f3e0],0x0\nCMP RAX,0x1\nJNZ 0x004020a3\nMOV RAX,qword ptr [0x0060f3c8]\nTEST RAX,RAX\nJZ 0x004020a3\nMOV qword ptr [0x0060f3e8],0x0\nMOV ECX,R12D\nJMP 0x004020c0\nMOV byte ptr [0x0060f401],0x1\nMOV byte ptr [0x0060f400],0x1\nMOV ECX,R12D\nJMP 0x004020c0\nMOV dword ptr [RSP + 0x1c],0x0\nMOV ECX,R12D\nJMP 0x004020c0\nMOV qword ptr [RSP + 0x38],RBX\nMOV RBX,RBP\nCALL RBP\nMOV RDI,qword ptr [0x0060f368]\nMOV RCX,qword ptr [0x0060f3a0]\nMOV ESI,0x73\nMOV EDX,0x1\nXOR R8D,R8D\nCALL 0x004037d0\nMOV RBP,RAX\nCMP RBP,qword ptr [0x0060f3a0]\nJBE 0x004022ed\nXOR EDI,EDI\nMOV ESI,0x409a18\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV R8,qword ptr [0x0060f3a0]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBP\nCALL 0x00401d20\nMOV RBP,qword ptr [0x0060f3a0]\nMOV qword ptr [0x0060f3b0],RBP\nMOV ECX,R12D\nMOV RBP,RBX\nMOV RBX,qword ptr [RSP + 0x38]\nJMP 0x004020c0\nMOV dword ptr [0x0060f398],0x1\nMOV ECX,R12D\nJMP 0x004020c0\nMOV RDI,qword ptr [0x0060f368]\nMOV ESI,0x3d\nCALL 0x00401ac0\nTEST RAX,RAX\nJZ 0x0040235e\nXOR EDI,EDI\nMOV ESI,0x409a59\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOVSXD RAX,dword ptr [RSP + 0x44]\nSHL RAX,0x5\nMOV RCX,qword ptr [0x409710 + RAX]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401d20\nMOV RDI,qword ptr [0x0060f368]\nMOV qword ptr [0x0060f408],RDI\nCALL 0x00401d80\nTEST EAX,EAX\nMOV ECX,R12D\nJZ 0x004020c0\nCALL 0x00401940\nMOV qword ptr [RSP + 0x38],RBX\nMOV RBX,RBP\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409a92\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060f408]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RBP,RBX\nMOV RBX,qword ptr [RSP + 0x38]\nCALL 0x00401d20\nMOV ECX,R12D\nJMP 0x004020c0\nXOR EAX,EAX\nMOV qword ptr [0x0060f3f8],RAX\nMOV ECX,R12D\nJMP 0x004020c0\nMOV EAX,0x1\nJMP 0x004021e5\nMOV EAX,0x4032d0\nCMP qword ptr [RSP + 0x20],RAX\nJNZ 0x00402419\nMOV RAX,qword ptr [0x0060f3f8]\nTEST RAX,RAX\nJZ 0x00402419\nXOR EDI,EDI\nMOV ESI,0x409aba\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nCALL RBP\nTEST EBX,EBX\nMOV RBP,qword ptr [RSP + 0x28]\nJNZ 0x00402a57\nMOV qword ptr [RSP + 0x50],0x403900\nLEA R13,[RSP + 0x58]\nMOV RDI,R13\nCALL 0x00401c20\nMOV dword ptr [0xd8 + RSP],0x0\nLEA RSI,[RSP + 0x50]\nMOV EDI,0xa\nXOR EDX,EDX\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x00402487\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409b0c\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV qword ptr [RSP + 0x50],0x403920\nMOV RDI,R13\nCALL 0x00401c20\nMOV dword ptr [0xd8 + RSP],0x0\nLEA RSI,[RSP + 0x50]\nMOV EDI,0xc\nXOR EDX,EDX\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x004024e1\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409b2e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nCMP byte ptr [RBP],0x2d\nJNZ 0x004024ed\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x00402565\nMOV byte ptr [0x0060f418],0x1\nMOV RDI,RBP\nCALL 0x00403940\nMOV qword ptr [0x0060f410],RAX\nTEST RAX,RAX\nJNZ 0x00402573\nCALL 0x00401940\nMOV R13D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409b50\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,RBP\nCALL 0x00407500\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R13D\nMOV RDX,RBX\nCALL 0x00401d20\nCMP qword ptr [0x0060f3c8],0x0\nJZ 0x0040257d\nJMP 0x00402589\nMOV EDI,0x40995f\nCALL 0x00405080\nXOR EAX,EAX\nJMP 0x0040287a\nMOV RAX,qword ptr [0x0060f350]\nMOV qword ptr [0x0060f410],RAX\nCMP qword ptr [0x0060f3c8],0x0\nJNZ 0x00402589\nMOV RAX,qword ptr [0x0060f3e0]\nTEST RAX,RAX\nJZ 0x00402593\nMOV dword ptr [0x0060f398],0x1\nCMP dword ptr [0x0060f358],R14D\nJNZ 0x004025bb\nMOV dword ptr [0x0060f358],0x0\nLEA R15,[RSP + 0x48]\nLEA RAX,[RSP + 0x30]\nMOV qword ptr [RSP + 0x48],RAX\nMOV R14D,0x1\nTEST R12D,R12D\nJNZ 0x0040288c\nMOV RDI,qword ptr [0x0060f3b0]\nINC RDI\nCALL 0x00408210\nMOV qword ptr [0x0060f420],RAX\nMOV RDI,qword ptr [0x0060f3b0]\nINC RDI\nCALL 0x00408210\nMOV qword ptr [0x0060f440],RAX\nMOV EDI,0x11\nXOR ESI,ESI\nCALL 0x00401bf0\nCMP qword ptr [0x0060f3c8],0x0\nJZ 0x0040277e\nMOV qword ptr [RSP + 0x28],R14\nMOVSXD R14,R14D\nLEA RDI,[R14*0x8]\nCALL 0x00408210\nMOV R13,RAX\nMOVSXD RAX,dword ptr [0x0060f358]\nCMP EAX,R14D\nJGE 0x00402659\nLEA RBP,[R15 + RAX*0x8]\nLEA RBX,[R13 + RAX*0x8]\nSUB R14,RAX\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBP]\nCALL 0x00401a90\nMOV qword ptr [RBX],RAX\nADD RBP,0x8\nADD RBX,0x8\nDEC R14\nJNZ 0x00402640\nMOV RDI,qword ptr [0x0060f3c8]\nCALL 0x00401a90\nMOV qword ptr [0x0060f3c0],RAX\nCALL qword ptr [RSP + 0x20]\nMOV EBP,EAX\nCMP EBP,-0x1\nMOV RBX,qword ptr [RSP + 0x28]\nJZ 0x00402868\nLEA EAX,[RBX + -0x1]\nMOV dword ptr [RSP + 0x1c],EAX\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nCALL 0x004047c0\nMOV qword ptr [0x0060f448],0x0\nMOVSXD RAX,dword ptr [0x0060f358]\nMOV RDX,qword ptr [R15 + RAX*0x8]\nMOV RCX,qword ptr [R13 + RAX*0x8]\nINC RCX\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404320\nMOV byte ptr [0x0060f478],0x1\nMOVSXD RAX,dword ptr [0x0060f358]\nLEA RCX,[RAX + 0x1]\nCMP ECX,EBX\nJGE 0x00402756\nMOVSXD RBP,EBP\nDEC RBP\nLEA RBX,[R15 + RCX*0x8]\nLEA R14,[R13 + RCX*0x8]\nMOV R12D,dword ptr [RSP + 0x1c]\nSUB R12D,EAX\nNOP dword ptr [RAX]\nMOV RDX,qword ptr [RBX]\nMOV RCX,qword ptr [R14]\nMOV RAX,qword ptr [0x0060f420]\nMOVZX ESI,byte ptr [0x0060f478]\nXOR ESI,0x1\nMOV dword ptr [RSP + 0x10],ESI\nMOV qword ptr [RSP + 0x8],RBP\nMOV qword ptr [RSP],RAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nCALL 0x00404190\nADD RBX,0x8\nADD R14,0x8\nDEC R12D\nJNZ 0x00402710\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nCALL 0x00404520\nCALL qword ptr [RSP + 0x20]\nMOV EBP,EAX\nCMP EBP,-0x1\nMOV RBX,qword ptr [RSP + 0x28]\nJNZ 0x00402690\nJMP 0x00402868\nMOV EAX,dword ptr [0x0060f358]\nCMP EAX,R14D\nJGE 0x004027da\nNOP dword ptr [RAX]\nCDQE\nMOV RBX,qword ptr [R15 + RAX*0x8]\nMOV RDI,RBX\nCALL 0x00401a90\nLEA RCX,[RAX + 0x1]\nMOVZX EAX,byte ptr [0x0060f478]\nXOR EAX,0x1\nMOV dword ptr [RSP],EAX\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDX,RBX\nCALL 0x00404320\nMOV EAX,dword ptr [0x0060f358]\nINC EAX\nMOV dword ptr [0x0060f358],EAX\nCMP EAX,R14D\nJL 0x00402790\nMOV byte ptr [0x0060f478],0x1\nMOV RAX,qword ptr [0x0060f428]\nMOV RCX,qword ptr [0x0060f448]\nMOV qword ptr [0x0060f450],RCX\nMOV qword ptr [0x0060f3d0],RAX\nJMP 0x0040281a\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nCALL 0x00404520\nMOV qword ptr [0x0060f480],0x0\nCALL qword ptr [RSP + 0x20]\nCMP EAX,-0x1\nJZ 0x00402838\nMOV RAX,qword ptr [0x0060f3e0]\nDEC RAX\nCMP RAX,qword ptr [0x0060f480]\nJNC 0x0040281a\nJMP 0x00402800\nMOV RAX,qword ptr [0x0060f428]\nCMP RAX,qword ptr [0x0060f3d0]\nJNZ 0x00402859\nCMP dword ptr [RSP + 0x1c],0x0\nJZ 0x00402868\nMOV AL,byte ptr [0x0060f488]\nTEST AL,AL\nJNZ 0x00402868\nMOV EDI,0x60f398\nMOV ESI,0x60f428\nCALL 0x00404520\nMOV EAX,dword ptr [0x0060f48c]\nMOV dword ptr [0x0060f394],EAX\nMOV EAX,dword ptr [0x0060f48c]\nADD RSP,0xe8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409b6a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBP,RAX\nCALL 0x00404830\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RBP\nMOV RDX,RCX\nCALL 0x00401c10\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409b98\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f3a0]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409bd1\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f3a8]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nMOV R13,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409c1d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RBP,RAX\nMOV RBX,qword ptr [0x0060f3a0]\nCALL 0x00404830\nSUB RBX,RAX\nXOR EAX,EAX\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x00401c10\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409c53\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f3b0]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409c86\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDX,0x7fffffff\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nXOR EDI,EDI\nCALL 0x004019c0\nTEST EAX,EAX\nJZ 0x004025c4\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409cc1\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nCMP dword ptr [RSP + 0x1c],0x0\nJZ 0x004025c4\nMOV RBX,qword ptr [0x0060f380]\nXOR EDI,EDI\nMOV ESI,0x409d6e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOVSXD RAX,dword ptr [0x0060f358]\nMOV RDX,qword ptr [R15 + RAX*0x8]\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nJMP 0x004025c4\nXOR EDI,EDI\nCALL 0x00403480\nMOV EDI,0x1\nCALL 0x00403480\nMOV EDI,0x4099da\nMOV ESI,0x4099bb\nMOV EDX,0x1f5\nMOV ECX,0x4099c3\nCALL 0x00401b20\nMOV EDI,0x409af5\nMOV ESI,0x4099bb\nMOV EDX,0x2a1\nMOV ECX,0x4099c3\nCALL 0x00401b20\nMOV EDI,0x4099a0\nMOV ESI,0x4099bb\nMOV EDX,0x1d9\nMOV ECX,0x4099c3\nCALL 0x00401b20\n'
p1341
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec e8 00 00 00\n49 89 f7\n41 89 fe\nc6 44 24 34 00\nc7 44 24 30 65 63 68 6f\n49 8b 3f\n48 85 ff\n75 05\nbf 5f 99 40 00\ne8 aa 43 00 00\ne8 75 2b 00 00\ne8 b0 fa ff ff\n89 05 1a d4 20 00\nc7 05 14 d4 20 00 00 00 00 00\nbf 06 00 00 00\nbe 9d a5 40 00\ne8 71 fd ff ff\nbf b5 b3 40 00\nbe 65 99 40 00\ne8 c2 fa ff ff\nbf b5 b3 40 00\ne8 88 fa ff ff\nbf 40 54 40 00\ne8 ee 71 00 00\n85 c0\n75 0e\nbf 50 2f 40 00\ne8 e0 71 00 00\n85 c0\n74 2c\ne8 77 f9 ff ff\n8b 18\n31 ff\nbe 7d 99 40 00\nba 05 00 00 00\ne8 94 fa ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 30 fd ff ff\nbf 98 f3 60 00\nbe 00 08 00 00\ne8 81 28 00 00\n89 c3\n8d 43 ff\n83 f8 02\n73 07\nbd c0 2f 40 00\neb 6e\n31 ff\ne8 49 fd ff ff\n48 85 c0\n7e 35\n48 3d 00 08 00 00\n0f 8e 48 0a 00 00\n48 8b 3d 81 d3 20 00\n48 05 00 f8 ff ff\n48 89 c6\ne8 b3 0f 00 00\n48 89 05 6c d3 20 00\n48 3d ff 07 00 00\n77 18\ne9 ed 09 00 00\n48 8b 05 58 d3 20 00\n48 3d ff 07 00 00\n0f 86 da 09 00 00\n48 c7 05 69 d3 20 00 00 30 40 00\nbf 98 f3 60 00\ne8 b7 28 00 00\nbd 40 2f 40 00\nb8 8e b6 40 00\n48 89 44 24 28\nb8 90 2a 40 00\n48 89 44 24 20\nc7 44 24 1c 01 00 00 00\n4c 8d 6c 24 44\n31 c9\neb 1d\n48 c7 05 1a d3 20 00 00 00 00 00\n44 89 e1\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 89 cc\nba f5 99 40 00\nb9 10 97 40 00\n44 89 f7\n4c 89 fe\n4d 89 e8\ne8 c5 f9 ff ff\nff c0\n3d 81 00 00 00\n0f 87 4c 09 00 00\nb9 01 00 00 00\nff 24 c5 00 92 40 00\n48 8b 05 6d d2 20 00\n48 85 c0\n0f 84 c0 02 00 00\n80 38 00\nb9 00 00 00 00\n48 0f 44 c1\ne9 b1 02 00 00\n48 8b 05 4c d2 20 00\n48 85 c0\nb9 15 9a 40 00\n48 0f 44 c1\n48 89 05 99 d2 20 00\n0f 57 c0\n0f 11 05 a7 d2 20 00\n44 89 e1\neb 82\nc6 05 ab d2 20 00 00\neb 60\n48 8b 3d 1a d2 20 00\nbe 4c 00 00 00\neb 79\n48 8b 3d 0c d2 20 00\nbe 50 00 00 00\n31 d2\nb9 ff ff ff 7f\n41 b8 01 00 00 00\ne8 5d 16 00 00\n89 05 3f d1 20 00\n44 89 e1\ne9 3f ff ff ff\n48 8b 05 e0 d1 20 00\n48 89 44 24 28\n44 89 e1\ne9 2b ff ff ff\n48 8b 3d cc d1 20 00\ne8 3f 12 00 00\n88 05 49 d2 20 00\nb8 d0 32 40 00\n48 89 44 24 20\n44 89 e1\ne9 07 ff ff ff\n48 8b 3d a8 d1 20 00\n48 85 ff\n0f 84 0c 02 00 00\nbe 6c 00 00 00\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n41 b8 01 00 00 00\ne8 eb 15 00 00\n48 89 05 f4 d1 20 00\n48 c7 05 f1 d1 20 00 00 00 00 00\ne9 a7 fe ff ff\n48 8b 3d 65 d1 20 00\nbe 6e 00 00 00\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n41 b8 01 00 00 00\ne8 b1 15 00 00\n48 89 05 c2 d1 20 00\n48 c7 05 af d1 20 00 00 00 00 00\n48 83 f8 01\n0f 85 68 fe ff ff\n48 8b 05 86 d1 20 00\n48 85 c0\n0f 84 58 fe ff ff\n48 c7 05 92 d1 20 00 00 00 00 00\n44 89 e1\ne9 62 fe ff ff\nc6 05 9c d1 20 00 01\nc6 05 94 d1 20 00 01\n44 89 e1\ne9 4c fe ff ff\nc7 44 24 1c 00 00 00 00\n44 89 e1\ne9 3c fe ff ff\n48 89 5c 24 38\n48 89 eb\nff d5\n48 8b 3d d3 d0 20 00\n48 8b 0d 04 d1 20 00\nbe 73 00 00 00\nba 01 00 00 00\n45 31 c0\ne8 22 15 00 00\n48 89 c5\n48 3b 2d e8 d0 20 00\n76 33\n31 ff\nbe 18 9a 40 00\nba 05 00 00 00\ne8 a5 f7 ff ff\n48 89 c1\n4c 8b 05 cb d0 20 00\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 e9\ne8 3a fa ff ff\n48 8b 2d b3 d0 20 00\n48 89 2d bc d0 20 00\n44 89 e1\n48 89 dd\n48 8b 5c 24 38\ne9 bc fd ff ff\nc7 05 8a d0 20 00 01 00 00 00\n44 89 e1\ne9 aa fd ff ff\n48 8b 3d 4b d0 20 00\nbe 3d 00 00 00\ne8 99 f7 ff ff\n48 85 c0\n74 32\n31 ff\nbe 59 9a 40 00\nba 05 00 00 00\ne8 33 f7 ff ff\n48 89 c2\n48 63 44 24 44\n48 c1 e0 05\n48 8b 88 10 97 40 00\nbf 01 00 00 00\n31 f6\n31 c0\ne8 c2 f9 ff ff\n48 8b 3d 03 d0 20 00\n48 89 3d 9c d0 20 00\ne8 0f fa ff ff\n85 c0\n44 89 e1\n0f 84 44 fd ff ff\ne8 bf f5 ff ff\n48 89 5c 24 38\n48 89 eb\n8b 28\n31 ff\nbe 92 9a 40 00\nba 05 00 00 00\ne8 d4 f6 ff ff\n48 89 c2\n48 8b 0d 62 d0 20 00\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 dd\n48 8b 5c 24 38\ne8 64 f9 ff ff\n44 89 e1\ne9 fc fc ff ff\n31 c0\n48 89 05 2b d0 20 00\n44 89 e1\ne9 eb fc ff ff\nb8 01 00 00 00\ne9 06 fe ff ff\nb8 d0 32 40 00\n48 39 44 24 20\n75 2e\n48 8b 05 06 d0 20 00\n48 85 c0\n74 22\n31 ff\nbe ba 9a 40 00\nba 05 00 00 00\ne8 68 f6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 07 f9 ff ff\nff d5\n85 db\n48 8b 6c 24 28\n0f 85 2f 06 00 00\n48 c7 44 24 50 00 39 40 00\n4c 8d 6c 24 58\n4c 89 ef\ne8 e2 f7 ff ff\nc7 84 24 d8 00 00 00 00 00 00 00\n48 8d 74 24 50\nbf 0a 00 00 00\n31 d2\ne8 76 f5 ff ff\n85 c0\n74 29\ne8 dd f4 ff ff\n8b 18\n31 ff\nbe 0c 9b 40 00\nba 05 00 00 00\ne8 fa f5 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 99 f8 ff ff\n48 c7 44 24 50 20 39 40 00\n4c 89 ef\ne8 88 f7 ff ff\nc7 84 24 d8 00 00 00 00 00 00 00\n48 8d 74 24 50\nbf 0c 00 00 00\n31 d2\ne8 1c f5 ff ff\n85 c0\n74 29\ne8 83 f4 ff ff\n8b 18\n31 ff\nbe 2e 9b 40 00\nba 05 00 00 00\ne8 a0 f5 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 3f f8 ff ff\n80 7d 00 2d\n75 06\n80 7d 01 00\n74 78\nc6 05 24 cf 20 00 01\n48 89 ef\ne8 44 14 00 00\n48 89 05 0d cf 20 00\n48 85 c0\n75 6b\ne8 33 f4 ff ff\n44 8b 28\n31 ff\nbe 50 9b 40 00\nba 05 00 00 00\ne8 4f f5 ff ff\n48 89 c3\n31 ff\nbe 08 00 00 00\n48 89 ea\ne8 cd 4f 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 ee\n48 89 da\ne8 d8 f7 ff ff\n48 83 3d 78 ce 20 00 00\n74 2b\neb 35\nbf 5f 99 40 00\ne8 22 2b 00 00\n31 c0\ne9 15 03 00 00\n48 8b 05 e4 cd 20 00\n48 89 05 9d ce 20 00\n48 83 3d 4d ce 20 00 00\n75 0c\n48 8b 05 5c ce 20 00\n48 85 c0\n74 0a\nc7 05 05 ce 20 00 01 00 00 00\n44 39 35 be cd 20 00\n75 1f\nc7 05 b2 cd 20 00 00 00 00 00\n4c 8d 7c 24 48\n48 8d 44 24 30\n48 89 44 24 48\n41 be 01 00 00 00\n45 85 e4\n0f 85 c8 02 00 00\n48 8b 3d e5 cd 20 00\n48 ff c7\ne8 3d 5c 00 00\n48 89 05 46 ce 20 00\n48 8b 3d cf cd 20 00\n48 ff c7\ne8 27 5c 00 00\n48 89 05 50 ce 20 00\nbf 11 00 00 00\n31 f6\ne8 f4 f5 ff ff\n48 83 3d c4 cd 20 00 00\n0f 84 74 01 00 00\n4c 89 74 24 28\n4d 63 f6\n4a 8d 3c f5 00 00 00 00\ne8 f1 5b 00 00\n49 89 c5\n48 63 05 2f cd 20 00\n44 39 f0\n7d 2b\n49 8d 2c c7\n49 8d 5c c5 00\n49 29 c6\n66 0f 1f 44 00 00\n48 8b 7d 00\ne8 47 f4 ff ff\n48 89 03\n48 83 c5 08\n48 83 c3 08\n49 ff ce\n75 e7\n48 8b 3d 68 cd 20 00\ne8 2b f4 ff ff\n48 89 05 54 cd 20 00\nff 54 24 20\n89 c5\n83 fd ff\n48 8b 5c 24 28\n0f 84 e8 01 00 00\n8d 43 ff\n89 44 24 1c\n66 0f 1f 84 00 00 00 00 00\nbf 98 f3 60 00\nbe 28 f4 60 00\ne8 21 21 00 00\n48 c7 05 9e cd 20 00 00 00 00 00\n48 63 05 a7 cc 20 00\n49 8b 14 c7\n49 8b 4c c5 00\n48 ff c1\n0f b6 05 b4 cd 20 00\n83 f0 01\n89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 41 1c 00 00\nc6 05 92 cd 20 00 01\n48 63 05 6b cc 20 00\n48 8d 48 01\n39 d9\n7d 61\n48 63 ed\n48 ff cd\n49 8d 1c cf\n4d 8d 74 cd 00\n44 8b 64 24 1c\n41 29 c4\n0f 1f 40 00\n48 8b 13\n49 8b 0e\n48 8b 05 03 cd 20 00\n0f b6 35 54 cd 20 00\n83 f6 01\n89 74 24 10\n48 89 6c 24 08\n48 89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\ne8 47 1a 00 00\n48 83 c3 08\n49 83 c6 08\n41 ff cc\n75 ba\nbf 98 f3 60 00\nbe 28 f4 60 00\ne8 bb 1d 00 00\nff 54 24 20\n89 c5\n83 fd ff\n48 8b 5c 24 28\n0f 85 17 ff ff ff\ne9 ea 00 00 00\n8b 05 d4 cb 20 00\n44 39 f0\n7d 51\n0f 1f 80 00 00 00 00\n48 98\n49 8b 1c c7\n48 89 df\ne8 f2 f2 ff ff\n48 8d 48 01\n0f b6 05 cf cc 20 00\n83 f0 01\n89 04 24\nbf 98 f3 60 00\nbe 28 f4 60 00\n45 31 c0\n45 31 c9\n48 89 da\ne8 59 1b 00 00\n8b 05 8b cb 20 00\nff c0\n89 05 83 cb 20 00\n44 39 f0\n7c b6\nc6 05 97 cc 20 00 01\n48 8b 05 40 cc 20 00\n48 8b 0d 59 cc 20 00\n48 89 0d 5a cc 20 00\n48 89 05 d3 cb 20 00\neb 1b\nbf 98 f3 60 00\nbe 28 f4 60 00\ne8 11 1d 00 00\n48 c7 05 66 cc 20 00 00 00 00 00\nff 54 24 20\n83 f8 ff\n74 15\n48 8b 05 b6 cb 20 00\n48 ff c8\n48 3b 05 4c cc 20 00\n73 e4\neb c8\n48 8b 05 e9 cb 20 00\n48 3b 05 8a cb 20 00\n75 11\n83 7c 24 1c 00\n74 19\n8a 05 33 cc 20 00\n84 c0\n75 0f\nbf 98 f3 60 00\nbe 28 f4 60 00\ne8 b8 1c 00 00\n8b 05 1e cc 20 00\n89 05 20 cb 20 00\n8b 05 12 cc 20 00\n48 81 c4 e8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 1d ed ca 20 00\n31 ff\nbe 6a 9b 40 00\nba 05 00 00 00\ne8 cc f1 ff ff\n48 89 c5\ne8 84 1f 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ee\n48 89 ca\ne8 51 f3 ff ff\n48 8b 1d ba ca 20 00\n31 ff\nbe 98 9b 40 00\nba 05 00 00 00\ne8 99 f1 ff ff\n48 89 c1\n48 8b 15 bf ca 20 00\n31 c0\n48 89 df\n48 89 ce\ne8 22 f3 ff ff\n48 8b 1d 8b ca 20 00\n31 ff\nbe d1 9b 40 00\nba 05 00 00 00\ne8 6a f1 ff ff\n48 89 c1\n48 8b 15 98 ca 20 00\n31 c0\n48 89 df\n48 89 ce\ne8 f3 f2 ff ff\n4c 8b 2d 5c ca 20 00\n31 ff\nbe 1d 9c 40 00\nba 05 00 00 00\ne8 3b f1 ff ff\n48 89 c5\n48 8b 1d 61 ca 20 00\ne8 ec 1e 00 00\n48 29 c3\n31 c0\n4c 89 ef\n48 89 ee\n48 89 da\ne8 b9 f2 ff ff\n48 8b 1d 22 ca 20 00\n31 ff\nbe 53 9c 40 00\nba 05 00 00 00\ne8 01 f1 ff ff\n48 89 c1\n48 8b 15 37 ca 20 00\n31 c0\n48 89 df\n48 89 ce\ne8 8a f2 ff ff\n48 8b 1d f3 c9 20 00\n31 ff\nbe 86 9c 40 00\nba 05 00 00 00\ne8 d2 f0 ff ff\n48 89 c1\nba ff ff ff 7f\n31 c0\n48 89 df\n48 89 ce\ne8 5d f2 ff ff\n31 ff\ne8 06 f0 ff ff\n85 c0\n0f 84 02 fc ff ff\n48 8b 1d b7 c9 20 00\n31 ff\nbe c1 9c 40 00\nba 05 00 00 00\ne8 96 f0 ff ff\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 26 f2 ff ff\n83 7c 24 1c 00\n0f 84 cf fb ff ff\n48 8b 1d 84 c9 20 00\n31 ff\nbe 6e 9d 40 00\nba 05 00 00 00\ne8 63 f0 ff ff\n48 89 c1\n48 63 05 41 c9 20 00\n49 8b 14 c7\n31 c0\n48 89 df\n48 89 ce\ne8 e8 f1 ff ff\ne9 97 fb ff ff\n31 ff\ne8 4c 0a 00 00\nbf 01 00 00 00\ne8 42 0a 00 00\nbf da 99 40 00\nbe bb 99 40 00\nba f5 01 00 00\nb9 c3 99 40 00\ne8 c9 f0 ff ff\nbf f5 9a 40 00\nbe bb 99 40 00\nba a1 02 00 00\nb9 c3 99 40 00\ne8 b0 f0 ff ff\nbf a0 99 40 00\nbe bb 99 40 00\nba d9 01 00 00\nb9 c3 99 40 00\ne8 97 f0 ff ff\n'
p1342
S'.text:0000000000401f30\n.text:0000000000401f31\n.text:0000000000401f33\n.text:0000000000401f35\n.text:0000000000401f37\n.text:0000000000401f39\n.text:0000000000401f3a\n.text:0000000000401f41\n.text:0000000000401f44\n.text:0000000000401f47\n.text:0000000000401f4c\n.text:0000000000401f54\n.text:0000000000401f57\n.text:0000000000401f5a\n.text:0000000000401f5c\n.text:0000000000401f61\n.text:0000000000401f66\n.text:0000000000401f6b\n.text:0000000000401f70\n.text:0000000000401f76\n.text:0000000000401f80\n.text:0000000000401f85\n.text:0000000000401f8a\n.text:0000000000401f8f\n.text:0000000000401f94\n.text:0000000000401f99\n.text:0000000000401f9e\n.text:0000000000401fa3\n.text:0000000000401fa8\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb4\n.text:0000000000401fb6\n.text:0000000000401fbb\n.text:0000000000401fc0\n.text:0000000000401fc2\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fcb\n.text:0000000000401fcd\n.text:0000000000401fd2\n.text:0000000000401fd7\n.text:0000000000401fdc\n.text:0000000000401fdf\n.text:0000000000401fe4\n.text:0000000000401fe6\n.text:0000000000401fe8\n.text:0000000000401feb\n.text:0000000000401ff0\n.text:0000000000401ff5\n.text:0000000000401ffa\n.text:0000000000401fff\n.text:0000000000402001\n.text:0000000000402004\n.text:0000000000402007\n.text:0000000000402009\n.text:000000000040200e\n.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402017\n.text:000000000040201a\n.text:000000000040201c\n.text:0000000000402022\n.text:0000000000402028\n.text:000000000040202f\n.text:0000000000402035\n.text:0000000000402038\n.text:000000000040203d\n.text:0000000000402044\n.text:000000000040204a\n.text:000000000040204c\n.text:0000000000402051\n.text:0000000000402058\n.text:000000000040205e\n.text:0000000000402064\n.text:000000000040206f\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207e\n.text:0000000000402083\n.text:0000000000402088\n.text:000000000040208d\n.text:0000000000402092\n.text:000000000040209a\n.text:000000000040209f\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020ae\n.text:00000000004020b1\n.text:00000000004020c0\n.text:00000000004020c3\n.text:00000000004020c8\n.text:00000000004020cd\n.text:00000000004020d0\n.text:00000000004020d3\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020e2\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f4\n.text:00000000004020fb\n.text:00000000004020fe\n.text:0000000000402104\n.text:0000000000402107\n.text:000000000040210c\n.text:0000000000402110\n.text:0000000000402115\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402128\n.text:000000000040212f\n.text:0000000000402132\n.text:0000000000402139\n.text:000000000040213c\n.text:000000000040213e\n.text:0000000000402145\n.text:0000000000402147\n.text:000000000040214e\n.text:0000000000402153\n.text:0000000000402155\n.text:000000000040215c\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402168\n.text:000000000040216e\n.text:0000000000402173\n.text:0000000000402179\n.text:000000000040217c\n.text:0000000000402181\n.text:0000000000402188\n.text:000000000040218d\n.text:0000000000402190\n.text:0000000000402195\n.text:000000000040219c\n.text:00000000004021a1\n.text:00000000004021a7\n.text:00000000004021ac\n.text:00000000004021b1\n.text:00000000004021b4\n.text:00000000004021b9\n.text:00000000004021c0\n.text:00000000004021c3\n.text:00000000004021c9\n.text:00000000004021ce\n.text:00000000004021d3\n.text:00000000004021da\n.text:00000000004021e0\n.text:00000000004021e5\n.text:00000000004021ec\n.text:00000000004021f7\n.text:00000000004021fc\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220d\n.text:0000000000402214\n.text:000000000040221a\n.text:000000000040221f\n.text:0000000000402226\n.text:0000000000402231\n.text:0000000000402235\n.text:000000000040223b\n.text:0000000000402242\n.text:0000000000402245\n.text:000000000040224b\n.text:0000000000402256\n.text:0000000000402259\n.text:000000000040225e\n.text:0000000000402265\n.text:000000000040226c\n.text:000000000040226f\n.text:0000000000402274\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402289\n.text:000000000040228c\n.text:000000000040228e\n.text:0000000000402295\n.text:000000000040229c\n.text:00000000004022a1\n.text:00000000004022a6\n.text:00000000004022a9\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b8\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022c1\n.text:00000000004022c6\n.text:00000000004022cb\n.text:00000000004022ce\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022de\n.text:00000000004022e1\n.text:00000000004022e6\n.text:00000000004022ed\n.text:00000000004022f4\n.text:00000000004022f7\n.text:00000000004022fa\n.text:00000000004022ff\n.text:0000000000402304\n.text:000000000040230e\n.text:0000000000402311\n.text:0000000000402316\n.text:000000000040231d\n.text:0000000000402322\n.text:0000000000402327\n.text:000000000040232a\n.text:000000000040232c\n.text:000000000040232e\n.text:0000000000402333\n.text:0000000000402338\n.text:000000000040233d\n.text:0000000000402340\n.text:0000000000402345\n.text:0000000000402349\n.text:0000000000402350\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235e\n.text:0000000000402365\n.text:000000000040236c\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402376\n.text:000000000040237c\n.text:0000000000402381\n.text:0000000000402386\n.text:0000000000402389\n.text:000000000040238b\n.text:000000000040238d\n.text:0000000000402392\n.text:0000000000402397\n.text:000000000040239c\n.text:000000000040239f\n.text:00000000004023a6\n.text:00000000004023ab\n.text:00000000004023ad\n.text:00000000004023af\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023bc\n.text:00000000004023bf\n.text:00000000004023c4\n.text:00000000004023c6\n.text:00000000004023cd\n.text:00000000004023d0\n.text:00000000004023d5\n.text:00000000004023da\n.text:00000000004023df\n.text:00000000004023e4\n.text:00000000004023e9\n.text:00000000004023eb\n.text:00000000004023f2\n.text:00000000004023f5\n.text:00000000004023f7\n.text:00000000004023f9\n.text:00000000004023fe\n.text:0000000000402403\n.text:0000000000402408\n.text:000000000040240b\n.text:000000000040240d\n.text:000000000040240f\n.text:0000000000402411\n.text:0000000000402414\n.text:0000000000402419\n.text:000000000040241b\n.text:000000000040241d\n.text:0000000000402422\n.text:0000000000402428\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243e\n.text:0000000000402449\n.text:000000000040244e\n.text:0000000000402453\n.text:0000000000402455\n.text:000000000040245a\n.text:000000000040245c\n.text:000000000040245e\n.text:0000000000402463\n.text:0000000000402465\n.text:0000000000402467\n.text:000000000040246c\n.text:0000000000402471\n.text:0000000000402476\n.text:0000000000402479\n.text:000000000040247b\n.text:000000000040247d\n.text:000000000040247f\n.text:0000000000402482\n.text:0000000000402487\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402498\n.text:00000000004024a3\n.text:00000000004024a8\n.text:00000000004024ad\n.text:00000000004024af\n.text:00000000004024b4\n.text:00000000004024b6\n.text:00000000004024b8\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c1\n.text:00000000004024c6\n.text:00000000004024cb\n.text:00000000004024d0\n.text:00000000004024d3\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024d9\n.text:00000000004024dc\n.text:00000000004024e1\n.text:00000000004024e5\n.text:00000000004024e7\n.text:00000000004024eb\n.text:00000000004024ed\n.text:00000000004024f4\n.text:00000000004024f7\n.text:00000000004024fc\n.text:0000000000402503\n.text:0000000000402506\n.text:0000000000402508\n.text:000000000040250d\n.text:0000000000402510\n.text:0000000000402512\n.text:0000000000402517\n.text:000000000040251c\n.text:0000000000402521\n.text:0000000000402524\n.text:0000000000402526\n.text:000000000040252b\n.text:000000000040252e\n.text:0000000000402533\n.text:0000000000402536\n.text:000000000040253b\n.text:000000000040253d\n.text:0000000000402540\n.text:0000000000402543\n.text:0000000000402548\n.text:0000000000402550\n.text:0000000000402552\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255e\n.text:0000000000402560\n.text:0000000000402565\n.text:000000000040256c\n.text:0000000000402573\n.text:000000000040257b\n.text:000000000040257d\n.text:0000000000402584\n.text:0000000000402587\n.text:0000000000402589\n.text:0000000000402593\n.text:000000000040259a\n.text:000000000040259c\n.text:00000000004025a6\n.text:00000000004025ab\n.text:00000000004025b0\n.text:00000000004025b5\n.text:00000000004025bb\n.text:00000000004025be\n.text:00000000004025c4\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d3\n.text:00000000004025da\n.text:00000000004025e1\n.text:00000000004025e4\n.text:00000000004025e9\n.text:00000000004025f0\n.text:00000000004025f5\n.text:00000000004025f7\n.text:00000000004025fc\n.text:0000000000402604\n.text:000000000040260a\n.text:000000000040260f\n.text:0000000000402612\n.text:000000000040261a\n.text:000000000040261f\n.text:0000000000402622\n.text:0000000000402629\n.text:000000000040262c\n.text:000000000040262e\n.text:0000000000402632\n.text:0000000000402637\n.text:000000000040263a\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264c\n.text:0000000000402650\n.text:0000000000402654\n.text:0000000000402657\n.text:0000000000402659\n.text:0000000000402660\n.text:0000000000402665\n.text:000000000040266c\n.text:0000000000402670\n.text:0000000000402672\n.text:0000000000402675\n.text:000000000040267a\n.text:0000000000402680\n.text:0000000000402683\n.text:0000000000402687\n.text:0000000000402690\n.text:0000000000402695\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026aa\n.text:00000000004026b1\n.text:00000000004026b5\n.text:00000000004026ba\n.text:00000000004026bd\n.text:00000000004026c4\n.text:00000000004026c7\n.text:00000000004026ca\n.text:00000000004026cf\n.text:00000000004026d4\n.text:00000000004026d7\n.text:00000000004026da\n.text:00000000004026df\n.text:00000000004026e6\n.text:00000000004026ed\n.text:00000000004026f1\n.text:00000000004026f3\n.text:00000000004026f5\n.text:00000000004026f8\n.text:00000000004026fb\n.text:00000000004026ff\n.text:0000000000402704\n.text:0000000000402709\n.text:000000000040270c\n.text:0000000000402710\n.text:0000000000402713\n.text:0000000000402716\n.text:000000000040271d\n.text:0000000000402724\n.text:0000000000402727\n.text:000000000040272b\n.text:0000000000402730\n.text:0000000000402734\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402741\n.text:0000000000402744\n.text:0000000000402749\n.text:000000000040274d\n.text:0000000000402751\n.text:0000000000402754\n.text:0000000000402756\n.text:000000000040275b\n.text:0000000000402760\n.text:0000000000402765\n.text:0000000000402769\n.text:000000000040276b\n.text:000000000040276e\n.text:0000000000402773\n.text:0000000000402779\n.text:000000000040277e\n.text:0000000000402784\n.text:0000000000402787\n.text:0000000000402789\n.text:0000000000402790\n.text:0000000000402792\n.text:0000000000402796\n.text:0000000000402799\n.text:000000000040279e\n.text:00000000004027a2\n.text:00000000004027a9\n.text:00000000004027ac\n.text:00000000004027af\n.text:00000000004027b4\n.text:00000000004027b9\n.text:00000000004027bc\n.text:00000000004027bf\n.text:00000000004027c2\n.text:00000000004027c7\n.text:00000000004027cd\n.text:00000000004027cf\n.text:00000000004027d5\n.text:00000000004027d8\n.text:00000000004027da\n.text:00000000004027e1\n.text:00000000004027e8\n.text:00000000004027ef\n.text:00000000004027f6\n.text:00000000004027fd\n.text:0000000000402800\n.text:0000000000402805\n.text:000000000040280a\n.text:000000000040280f\n.text:000000000040281a\n.text:000000000040281e\n.text:0000000000402821\n.text:0000000000402823\n.text:000000000040282a\n.text:000000000040282d\n.text:0000000000402834\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283f\n.text:0000000000402846\n.text:0000000000402848\n.text:000000000040284d\n.text:000000000040284f\n.text:0000000000402855\n.text:0000000000402857\n.text:0000000000402859\n.text:000000000040285e\n.text:0000000000402863\n.text:0000000000402868\n.text:000000000040286e\n.text:0000000000402874\n.text:000000000040287a\n.text:0000000000402881\n.text:0000000000402882\n.text:0000000000402884\n.text:0000000000402886\n.text:0000000000402888\n.text:000000000040288a\n.text:000000000040288b\n.text:000000000040288c\n.text:0000000000402893\n.text:0000000000402895\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a4\n.text:00000000004028a7\n.text:00000000004028ac\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b4\n.text:00000000004028b7\n.text:00000000004028ba\n.text:00000000004028bf\n.text:00000000004028c6\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028da\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e6\n.text:00000000004028e9\n.text:00000000004028ee\n.text:00000000004028f5\n.text:00000000004028f7\n.text:00000000004028fc\n.text:0000000000402901\n.text:0000000000402906\n.text:0000000000402909\n.text:0000000000402910\n.text:0000000000402912\n.text:0000000000402915\n.text:0000000000402918\n.text:000000000040291d\n.text:0000000000402924\n.text:0000000000402926\n.text:000000000040292b\n.text:0000000000402930\n.text:0000000000402935\n.text:0000000000402938\n.text:000000000040293f\n.text:0000000000402944\n.text:0000000000402947\n.text:0000000000402949\n.text:000000000040294c\n.text:000000000040294f\n.text:0000000000402952\n.text:0000000000402957\n.text:000000000040295e\n.text:0000000000402960\n.text:0000000000402965\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402972\n.text:0000000000402979\n.text:000000000040297b\n.text:000000000040297e\n.text:0000000000402981\n.text:0000000000402986\n.text:000000000040298d\n.text:000000000040298f\n.text:0000000000402994\n.text:0000000000402999\n.text:000000000040299e\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029a8\n.text:00000000004029ab\n.text:00000000004029ae\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029ba\n.text:00000000004029bc\n.text:00000000004029c2\n.text:00000000004029c9\n.text:00000000004029cb\n.text:00000000004029d0\n.text:00000000004029d5\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029df\n.text:00000000004029e2\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f5\n.text:00000000004029fc\n.text:00000000004029fe\n.text:0000000000402a03\n.text:0000000000402a08\n.text:0000000000402a0d\n.text:0000000000402a10\n.text:0000000000402a17\n.text:0000000000402a1b\n.text:0000000000402a1d\n.text:0000000000402a20\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a34\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a43\n.text:0000000000402a48\n.text:0000000000402a4d\n.text:0000000000402a52\n.text:0000000000402a57\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a66\n.text:0000000000402a6b\n.text:0000000000402a70\n.text:0000000000402a75\n.text:0000000000402a7a\n.text:0000000000402a7f\n.text:0000000000402a84\n'
p1343
tp1344
sS'poll'
p1345
(S'\n__stdcall poll(pollfd * __fds, nfds_t __nfds, int __timeout)\n'
p1346
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint poll(pollfd *__fds,nfds_t __nfds,int __timeout)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_poll_0060f218)();\u000a  return iVar1;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x0060f218]\n'
p1348
S'ff 25 02 d5 20 00\n'
p1349
S'.plt:0000000000401d10\n'
p1350
tp1351
sS'xcharalloc'
p1352
(S'\n__stdcall xcharalloc(size_t n)\n'
p1353
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1354
S'JMP 0x00408210\n'
p1355
S'e9 2b ff ff ff\n'
p1356
S'.text:00000000004082e0\n'
p1357
tp1358
sS'c_isupper'
p1359
(S'\n__stdcall c_isupper()\n'
p1360
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1361
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1362
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1363
S'.text:0000000000408ac0\n.text:0000000000408ac3\n.text:0000000000408ac6\n.text:0000000000408ac9\n'
p1364
tp1365
sS'get_char_oct_or_hex_escape'
p1366
(S'\n__stdcall get_char_oct_or_hex_escape(char * s)\n'
p1367
V\u000a/* WARNING: Removing unreachable block (ram,0x00403a42) */\u000a\u000achar get_char_oct_or_hex_escape(char *s)\u000a\u000a{\u000a  byte bVar1;\u000a  ushort **ppuVar2;\u000a  int *piVar3;\u000a  ulong uVar4;\u000a  undefined8 uVar5;\u000a  char *__nptr;\u000a  int __base;\u000a  char *local_28;\u000a  \u000a  if (*s == '\u005c\u005c') {\u000a    bVar1 = s[1];\u000a    if (bVar1 == 0x78) {\u000a      __nptr = s + 2;\u000a      __base = 0x10;\u000a    }\u000a    else {\u000a      ppuVar2 = __ctype_b_loc();\u000a      __base = 8;\u000a      if ((*(byte *)((long)*ppuVar2 + (ulong)bVar1 * 2 + 1) & 8) == 0) {\u000a        __nptr = (char *)0x0;\u000a        uVar5 = dcgettext(0,"Invalid escape sequence %s in input delimiter specification.",5);\u000a        error(1,0,uVar5,s);\u000a      }\u000a      else {\u000a        __nptr = s + 1;\u000a      }\u000a    }\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a    local_28 = (char *)0x0;\u000a    uVar4 = strtoul(__nptr,&local_28,__base);\u000a    if ((uVar4 == 0xffffffffffffffff) || (0xff < uVar4)) {\u000a      if (__base == 0x10) {\u000a        __nptr = \u000a        "Invalid escape sequence %s in input delimiter specification; character values must not exceed %lx."\u000a        ;\u000a      }\u000a      else {\u000a        __nptr = \u000a        "Invalid escape sequence %s in input delimiter specification; character values must not exceed %lo."\u000a        ;\u000a      }\u000a      uVar5 = dcgettext(0,__nptr,5);\u000a      error(1,0,uVar5,s,0xff);\u000a    }\u000a    if (*local_28 != 0) {\u000a      uVar5 = dcgettext(0,\u000a                        "Invalid escape sequence %s in input delimiter specification; trailing characters %s not recognised."\u000a                        ,5);\u000a      error(1,0,uVar5,s,local_28);\u000a    }\u000a    return (char)uVar4;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("\u005c'\u005c\u005c\u005c\u005c\u005c' == s[0]","xargs.c",0xef,"char get_char_oct_or_hex_escape(const char *)");\u000a}\u000a\u000a
p1368
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP byte ptr [R14],0x5c\nJNZ 0x00403ac8\nMOVZX EBX,byte ptr [R14 + 0x1]\nCMP RBX,0x78\nJNZ 0x004039bb\nLEA RBX,[R14 + 0x2]\nMOV R15D,0x10\nJMP 0x00403a00\nCALL 0x00401e20\nMOV RAX,qword ptr [RAX]\nMOV R15D,0x8\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x8\nJNZ 0x004039fc\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x409f5a\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401d20\nJMP 0x00403a00\nLEA RBX,[R14 + 0x1]\nCALL 0x00401940\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV qword ptr [RSP],0x0\nMOV RSI,RSP\nMOV RDI,RBX\nMOV EDX,R15D\nCALL 0x00401d90\nMOV RBX,RAX\nCMP RBX,-0x1\nJZ 0x00403a39\nCMP RBX,0x100\nJNC 0x00403a48\nJMP 0x00403a86\nCMP RBX,0xff\nJA 0x00403a48\nCMP dword ptr [RBP],0x22\nJNZ 0x00403a86\nXOR EDI,EDI\nCMP R15D,0x10\nJNZ 0x00403a57\nMOV ESI,0x409f97\nJMP 0x00403a5c\nMOV ESI,0x409ffa\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x0\nMOV R8D,0xff\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401d20\nMOV RAX,qword ptr [RSP]\nCMP byte ptr [RAX],0x0\nJZ 0x00403abb\nXOR EDI,EDI\nMOV ESI,0x40a05d\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV R8,qword ptr [RSP]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00401d20\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x409f1f\nMOV ESI,0x4099bb\nMOV EDX,0xef\nMOV ECX,0x409f2c\nCALL 0x00401b20\n'
p1369
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n41 80 3e 5c\n0f 85 24 01 00 00\n41 0f b6 5e 01\n48 83 fb 78\n75 0c\n49 8d 5e 02\n41 bf 10 00 00 00\neb 45\ne8 60 e4 ff ff\n48 8b 00\n41 bf 08 00 00 00\nf6 44 58 01 08\n75 2c\n31 db\n31 ff\nbe 5a 9f 40 00\nba 05 00 00 00\ne8 8d e0 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 26 e3 ff ff\neb 04\n49 8d 5e 01\ne8 3b df ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 c7 04 24 00 00 00 00\n48 89 e6\n48 89 df\n44 89 fa\ne8 6b e3 ff ff\n48 89 c3\n48 83 fb ff\n74 0b\n48 81 fb 00 01 00 00\n73 11\neb 4d\n48 81 fb ff 00 00 00\n77 06\n83 7d 00 22\n75 3e\n31 ff\n41 83 ff 10\n75 07\nbe 97 9f 40 00\neb 05\nbe fa 9f 40 00\nba 05 00 00 00\ne8 0a e0 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 00 00 00 00\n41 b8 ff 00 00 00\n31 c0\n48 89 ca\n4c 89 f1\ne8 9a e2 ff ff\n48 8b 04 24\n80 38 00\n74 2c\n31 ff\nbe 5d a0 40 00\nba 05 00 00 00\ne8 d0 df ff ff\n48 89 c1\n4c 8b 04 24\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 65 e2 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\nbf 1f 9f 40 00\nbe bb 99 40 00\nba ef 00 00 00\nb9 2c 9f 40 00\ne8 3f e0 ff ff\n'
p1370
S'.text:0000000000403990\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403995\n.text:0000000000403996\n.text:0000000000403997\n.text:000000000040399a\n.text:000000000040399e\n.text:00000000004039a4\n.text:00000000004039a9\n.text:00000000004039ad\n.text:00000000004039af\n.text:00000000004039b3\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c9\n.text:00000000004039ce\n.text:00000000004039d0\n.text:00000000004039d2\n.text:00000000004039d4\n.text:00000000004039d9\n.text:00000000004039de\n.text:00000000004039e3\n.text:00000000004039e6\n.text:00000000004039eb\n.text:00000000004039ed\n.text:00000000004039ef\n.text:00000000004039f2\n.text:00000000004039f5\n.text:00000000004039fa\n.text:00000000004039fc\n.text:0000000000403a00\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0f\n.text:0000000000403a17\n.text:0000000000403a1a\n.text:0000000000403a1d\n.text:0000000000403a20\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2c\n.text:0000000000403a2e\n.text:0000000000403a35\n.text:0000000000403a37\n.text:0000000000403a39\n.text:0000000000403a40\n.text:0000000000403a42\n.text:0000000000403a46\n.text:0000000000403a48\n.text:0000000000403a4a\n.text:0000000000403a4e\n.text:0000000000403a50\n.text:0000000000403a55\n.text:0000000000403a57\n.text:0000000000403a5c\n.text:0000000000403a61\n.text:0000000000403a66\n.text:0000000000403a69\n.text:0000000000403a6e\n.text:0000000000403a73\n.text:0000000000403a79\n.text:0000000000403a7b\n.text:0000000000403a7e\n.text:0000000000403a81\n.text:0000000000403a86\n.text:0000000000403a8a\n.text:0000000000403a8d\n.text:0000000000403a8f\n.text:0000000000403a91\n.text:0000000000403a96\n.text:0000000000403a9b\n.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403aae\n.text:0000000000403ab0\n.text:0000000000403ab3\n.text:0000000000403ab6\n.text:0000000000403abb\n.text:0000000000403abd\n.text:0000000000403ac1\n.text:0000000000403ac2\n.text:0000000000403ac4\n.text:0000000000403ac6\n.text:0000000000403ac7\n.text:0000000000403ac8\n.text:0000000000403acd\n.text:0000000000403ad2\n.text:0000000000403ad7\n.text:0000000000403adc\n'
p1371
tp1372
sS'isatty'
p1373
(S'\n__stdcall isatty(int __fd)\n'
p1374
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0060f070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1375
S'JMP qword ptr [0x0060f070]\n'
p1376
S'ff 25 aa d6 20 00\n'
p1377
S'.plt:00000000004019c0\n'
p1378
tp1379
sS'c_isalnum'
p1380
(S'\n__stdcall c_isalnum()\n'
p1381
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1382
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004089db\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004089db\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004089da\nXOR EAX,EAX\nRET\n'
p1383
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1384
S'.text:00000000004089c0\n.text:00000000004089c2\n.text:00000000004089c5\n.text:00000000004089c8\n.text:00000000004089ca\n.text:00000000004089d4\n.text:00000000004089d8\n.text:00000000004089da\n.text:00000000004089db\n.text:00000000004089de\n.text:00000000004089e1\n.text:00000000004089e3\n.text:00000000004089e5\n'
p1385
tp1386
sS'__errno_location'
p1387
(S'\n__stdcall __errno_location()\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060f030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x0060f030]\n'
p1390
S'ff 25 ea d6 20 00\n'
p1391
S'.plt:0000000000401940\n'
p1392
tp1393
sS'pipe'
p1394
(S'\n__stdcall pipe(int * __pipedes)\n'
p1395
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pipe(int *__pipedes)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pipe_0060f150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x0060f150]\n'
p1397
S'ff 25 ca d5 20 00\n'
p1398
S'.plt:0000000000401b80\n'
p1399
tp1400
sS'x2nrealloc'
p1401
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1402
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1403
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004082ac\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004082d9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004082ca\nTEST RCX,RCX\nJNZ 0x004082ca\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00408250\nPUSH RAX\nCALL 0x004083a0\n'
p1404
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1405
S'.text:0000000000408280\n.text:0000000000408283\n.text:0000000000408286\n.text:0000000000408289\n.text:000000000040828b\n.text:0000000000408295\n.text:0000000000408297\n.text:000000000040829a\n.text:000000000040829d\n.text:000000000040829f\n.text:00000000004082a2\n.text:00000000004082a5\n.text:00000000004082aa\n.text:00000000004082ac\n.text:00000000004082af\n.text:00000000004082b1\n.text:00000000004082b6\n.text:00000000004082b8\n.text:00000000004082bb\n.text:00000000004082bd\n.text:00000000004082c4\n.text:00000000004082c7\n.text:00000000004082ca\n.text:00000000004082cd\n.text:00000000004082d1\n.text:00000000004082d4\n.text:00000000004082d9\n.text:00000000004082da\n'
p1406
tp1407
sS'increment_proc_max'
p1408
(S'\n__stdcall increment_proc_max()\n'
p1409
V\u000avoid increment_proc_max(void)\u000a\u000a{\u000a  if (proc_max != 0x7fffffff) {\u000a    proc_max = proc_max + 1;\u000a  }\u000a  stop_waiting = 1;\u000a  return;\u000a}\u000a\u000a
p1410
S'MOV EAX,dword ptr [0x0060f2b8]\nCMP EAX,0x7fffffff\nJZ 0x00403913\nINC dword ptr [0x0060f2b8]\nMOV dword ptr [0x0060f4a0],0x1\nRET\n'
p1411
S'8b 05 b2 b9 20 00\n3d ff ff ff 7f\n74 06\nff 05 a5 b9 20 00\nc7 05 83 bb 20 00 01 00 00 00\nc3\n'
p1412
S'.text:0000000000403900\n.text:0000000000403906\n.text:000000000040390b\n.text:000000000040390d\n.text:0000000000403913\n.text:000000000040391d\n'
p1413
tp1414
sS'safe_read'
p1415
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p1416
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1417
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401bb0\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x00407c84\nCALL 0x00401940\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00407c30\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x00407c87\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00407c30\nJMP 0x00407c87\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1418
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 72 9f ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 f5 9c ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1419
S'.text:0000000000407c10\n.text:0000000000407c11\n.text:0000000000407c13\n.text:0000000000407c15\n.text:0000000000407c17\n.text:0000000000407c19\n.text:0000000000407c1a\n.text:0000000000407c1b\n.text:0000000000407c1e\n.text:0000000000407c21\n.text:0000000000407c24\n.text:0000000000407c2a\n.text:0000000000407c30\n.text:0000000000407c33\n.text:0000000000407c36\n.text:0000000000407c39\n.text:0000000000407c3e\n.text:0000000000407c41\n.text:0000000000407c44\n.text:0000000000407c46\n.text:0000000000407c4b\n.text:0000000000407c4d\n.text:0000000000407c50\n.text:0000000000407c52\n.text:0000000000407c55\n.text:0000000000407c58\n.text:0000000000407c5f\n.text:0000000000407c62\n.text:0000000000407c64\n.text:0000000000407c67\n.text:0000000000407c6b\n.text:0000000000407c6d\n.text:0000000000407c71\n.text:0000000000407c78\n.text:0000000000407c7a\n.text:0000000000407c7d\n.text:0000000000407c80\n.text:0000000000407c82\n.text:0000000000407c84\n.text:0000000000407c87\n.text:0000000000407c8a\n.text:0000000000407c8e\n.text:0000000000407c8f\n.text:0000000000407c91\n.text:0000000000407c93\n.text:0000000000407c95\n.text:0000000000407c97\n.text:0000000000407c98\n'
p1420
tp1421
sS'bc_do_insert'
p1422
(S'\n__stdcall bc_do_insert(buildcmd_control * ctl, buildcmd_state * state, char * arg, size_t arglen, char * prefix, size_t pfxlen, size_t lblen)\n'
p1423
V\u000avoid bc_do_insert(buildcmd_control *ctl,buildcmd_state *state,char *arg,size_t arglen,char *prefix,\u000a                 size_t pfxlen,size_t lblen)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *insertbuf;\u000a  char *pcVar2;\u000a  undefined8 uVar3;\u000a  char *__n;\u000a  char *__dest;\u000a  char *pcVar4;\u000a  bool bVar5;\u000a  long in_stack_00000010;\u000a  char *local_58;\u000a  \u000a  sVar1 = ctl->arg_max;\u000a  if (insertbuf == (char *)0x0) {\u000a    insertbuf = (char *)xmalloc(sVar1 + 1);\u000a  }\u000a  pcVar4 = (char *)(sVar1 - 1);\u000a  __dest = insertbuf;\u000a  local_58 = (char *)arglen;\u000a  do {\u000a    pcVar2 = mbsstr(arg,ctl->replace_pat);\u000a    __n = pcVar2 + -(long)arg;\u000a    if (pcVar2 == (char *)0x0) {\u000a      __n = local_58;\u000a    }\u000a    bVar5 = pcVar4 < __n;\u000a    pcVar4 = pcVar4 + -(long)__n;\u000a    if (bVar5 || pcVar4 == (char *)0x0) {\u000aLAB_004042ae:\u000a      if (*arg != 0) {\u000a        uVar3 = dcgettext(0,"command too long",5);\u000a        error(1,0,uVar3,uVar3);\u000a      }\u000a      break;\u000a    }\u000a    strncpy(__dest,arg,(size_t)__n);\u000a    __dest = __dest + (long)__n;\u000a    arg = arg + (long)__n;\u000a    local_58 = local_58 + -(long)__n;\u000a    if (pcVar2 != (char *)0x0) {\u000a      bVar5 = pcVar4 < (char *)(in_stack_00000010 + pfxlen);\u000a      pcVar4 = pcVar4 + -(long)(char *)(in_stack_00000010 + pfxlen);\u000a      if (bVar5 || pcVar4 == (char *)0x0) goto LAB_004042ae;\u000a      if (prefix != (char *)0x0) {\u000a        strcpy(__dest,prefix);\u000a        __dest = __dest + pfxlen;\u000a      }\u000a      strcpy(__dest,(char *)lblen);\u000a      __dest = __dest + in_stack_00000010;\u000a      arg = arg + ctl->rplen;\u000a      local_58 = local_58 + -ctl->rplen;\u000a    }\u000a  } while (*arg != 0);\u000a  *__dest = 0;\u000a  bc_push_arg(ctl,state,insertbuf,(size_t)(__dest + (1 - (long)insertbuf)),(char *)0x0,0);\u000a  return;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,R9\nMOV qword ptr [RSP + 0x30],R8\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV RAX,qword ptr [RSP + 0x78]\nMOV qword ptr [RSP + 0x18],RDI\nMOV R15,qword ptr [RDI + 0x18]\nCMP qword ptr [0x0060f4c8],0x0\nJNZ 0x004041e1\nLEA RDI,[R15 + 0x1]\nMOV R14,RAX\nCALL 0x00408210\nMOV qword ptr [0x0060f4c8],RAX\nMOV RAX,R14\nDEC R15\nMOV R12,qword ptr [0x0060f4c8]\nLEA RAX,[RAX + RBP*0x1]\nMOV qword ptr [RSP + 0x28],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,RBP\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RAX + 0x30]\nMOV RDI,RBX\nCALL 0x00405740\nMOV R13,RAX\nMOV RBP,R13\nSUB RBP,RBX\nTEST R13,R13\nCMOVZ RBP,qword ptr [RSP + 0x10]\nSUB R15,RBP\nJBE 0x004042ae\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401950\nMOV RCX,qword ptr [RSP + 0x10]\nADD R12,RBP\nADD RBX,RBP\nSUB RCX,RBP\nTEST R13,R13\nMOV qword ptr [RSP + 0x10],RCX\nJZ 0x004042a0\nSUB R15,qword ptr [RSP + 0x28]\nMOV RBP,R14\nMOV RAX,qword ptr [RSP + 0x30]\nJBE 0x004042ae\nTEST RAX,RAX\nJZ 0x00404277\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00401980\nADD R12,RBP\nMOV RDI,R12\nMOV RSI,qword ptr [RSP + 0x70]\nCALL 0x00401980\nADD R12,qword ptr [RSP + 0x78]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX + 0x28]\nADD RBX,RAX\nSUB qword ptr [RSP + 0x10],RAX\nJMP 0x004042a3\nMOV RBP,R14\nCMP byte ptr [RBX],0x0\nJNZ 0x00404200\nJMP 0x004042d8\nCMP byte ptr [RBX],0x0\nJZ 0x004042d8\nXOR EDI,EDI\nMOV ESI,0x40af3b\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV byte ptr [R12],0x0\nINC R12\nMOV RDX,qword ptr [0x0060f4c8]\nSUB R12,RDX\nMOV EAX,dword ptr [0x80 + RSP]\nMOV dword ptr [RSP],EAX\nXOR R8D,R8D\nXOR R9D,R9D\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RCX,R12\nCALL 0x00404320\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n4c 89 cd\n4c 89 44 24 30\n48 89 4c 24 10\n48 89 d3\n48 89 74 24 20\n48 8b 44 24 78\n48 89 7c 24 18\n4c 8b 7f 18\n48 83 3d ff b2 20 00 00\n75 16\n49 8d 7f 01\n49 89 c6\ne8 39 40 00 00\n48 89 05 ea b2 20 00\n4c 89 f0\n49 ff cf\n4c 8b 25 dd b2 20 00\n48 8d 04 28\n48 89 44 24 28\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 ee\n48 8b 44 24 18\n48 8b 70 30\n48 89 df\ne8 2c 15 00 00\n49 89 c5\n4c 89 ed\n48 29 dd\n4d 85 ed\n48 0f 44 6c 24 10\n49 29 ef\n0f 86 7f 00 00 00\n4c 89 e7\n48 89 de\n48 89 ea\ne8 13 d7 ff ff\n48 8b 4c 24 10\n49 01 ec\n48 01 eb\n48 29 e9\n4d 85 ed\n48 89 4c 24 10\n74 4b\n4c 2b 7c 24 28\n4c 89 f5\n48 8b 44 24 30\n76 4a\n48 85 c0\n74 0e\n4c 89 e7\n48 89 c6\ne8 0c d7 ff ff\n49 01 ec\n4c 89 e7\n48 8b 74 24 70\ne8 fc d6 ff ff\n4c 03 64 24 78\n48 8b 44 24 18\n48 8b 40 28\n48 01 c3\n48 29 44 24 10\neb 07\n4c 89 f5\n80 3b 00\n0f 85 54 ff ff ff\neb 2a\n80 3b 00\n74 25\n31 ff\nbe 3b af 40 00\nba 05 00 00 00\ne8 ac d7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 48 da ff ff\n41 c6 04 24 00\n49 ff c4\n48 8b 15 e1 b1 20 00\n49 29 d4\n8b 84 24 80 00 00 00\n89 04 24\n45 31 c0\n45 31 c9\n48 8b 7c 24 18\n48 8b 74 24 20\n4c 89 e1\ne8 14 00 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:0000000000404190\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404195\n.text:0000000000404197\n.text:0000000000404199\n.text:000000000040419a\n.text:000000000040419e\n.text:00000000004041a1\n.text:00000000004041a6\n.text:00000000004041ab\n.text:00000000004041ae\n.text:00000000004041b3\n.text:00000000004041b8\n.text:00000000004041bd\n.text:00000000004041c1\n.text:00000000004041c9\n.text:00000000004041cb\n.text:00000000004041cf\n.text:00000000004041d2\n.text:00000000004041d7\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e4\n.text:00000000004041eb\n.text:00000000004041ef\n.text:00000000004041f4\n.text:0000000000404200\n.text:0000000000404203\n.text:0000000000404208\n.text:000000000040420c\n.text:000000000040420f\n.text:0000000000404214\n.text:0000000000404217\n.text:000000000040421a\n.text:000000000040421d\n.text:0000000000404220\n.text:0000000000404226\n.text:0000000000404229\n.text:000000000040422f\n.text:0000000000404232\n.text:0000000000404235\n.text:0000000000404238\n.text:000000000040423d\n.text:0000000000404242\n.text:0000000000404245\n.text:0000000000404248\n.text:000000000040424b\n.text:000000000040424e\n.text:0000000000404253\n.text:0000000000404255\n.text:000000000040425a\n.text:000000000040425d\n.text:0000000000404262\n.text:0000000000404264\n.text:0000000000404267\n.text:0000000000404269\n.text:000000000040426c\n.text:000000000040426f\n.text:0000000000404274\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427f\n.text:0000000000404284\n.text:0000000000404289\n.text:000000000040428e\n.text:0000000000404292\n.text:0000000000404295\n.text:000000000040429a\n.text:00000000004042a0\n.text:00000000004042a3\n.text:00000000004042a6\n.text:00000000004042ac\n.text:00000000004042ae\n.text:00000000004042b1\n.text:00000000004042b3\n.text:00000000004042b5\n.text:00000000004042ba\n.text:00000000004042bf\n.text:00000000004042c4\n.text:00000000004042c7\n.text:00000000004042cc\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d8\n.text:00000000004042dd\n.text:00000000004042e0\n.text:00000000004042e7\n.text:00000000004042ea\n.text:00000000004042f1\n.text:00000000004042f4\n.text:00000000004042f7\n.text:00000000004042fa\n.text:00000000004042ff\n.text:0000000000404304\n.text:0000000000404307\n.text:000000000040430c\n.text:0000000000404310\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431a\n'
p1427
tp1428
sS'quotearg_n_options'
p1429
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1430
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1431
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401940\nTEST R12D,R12D\nJS 0x004074c1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060f2d0]\nCMP dword ptr [0x0060f2d8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004073db\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60f2e0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00408250\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060f2d0],R15\nJNZ 0x004073a2\nMOVUPS XMM0,xmmword ptr [0x0060f2e0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060f2d8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401b40\nMOV dword ptr [0x0060f2d8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00406530\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040743d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004074ab\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60f550\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00407468\nCALL 0x00401920\nMOV RDI,R15\nCALL 0x004082e0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00406530\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401930\n'
p1432
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 11 a6 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 86 7f 20 00\n44 39 25 87 7f 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd e0 f2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 c8 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 3b 7f 20 00\n75 0b\n0f 10 05 42 7f 20 00\n41 0f 11 07\n8b 05 30 7f 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d a7 ff ff\n89 1d 0f 7f 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 50 f5 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 b8 a4 ff ff\n4c 89 ff\ne8 70 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 6a a4 ff ff\n'
p1433
S'.text:0000000000407310\n.text:0000000000407311\n.text:0000000000407313\n.text:0000000000407315\n.text:0000000000407317\n.text:0000000000407319\n.text:000000000040731a\n.text:000000000040731e\n.text:0000000000407321\n.text:0000000000407324\n.text:0000000000407327\n.text:000000000040732a\n.text:000000000040732f\n.text:0000000000407332\n.text:0000000000407338\n.text:000000000040733d\n.text:000000000040733f\n.text:0000000000407343\n.text:000000000040734a\n.text:0000000000407351\n.text:0000000000407356\n.text:000000000040735b\n.text:0000000000407360\n.text:0000000000407362\n.text:0000000000407367\n.text:000000000040736a\n.text:000000000040736d\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407378\n.text:000000000040737c\n.text:000000000040737f\n.text:0000000000407383\n.text:0000000000407388\n.text:000000000040738b\n.text:000000000040738e\n.text:0000000000407395\n.text:0000000000407397\n.text:000000000040739e\n.text:00000000004073a2\n.text:00000000004073a8\n.text:00000000004073ab\n.text:00000000004073af\n.text:00000000004073b2\n.text:00000000004073b5\n.text:00000000004073b9\n.text:00000000004073bb\n.text:00000000004073be\n.text:00000000004073c3\n.text:00000000004073c9\n.text:00000000004073cc\n.text:00000000004073d1\n.text:00000000004073d6\n.text:00000000004073db\n.text:00000000004073de\n.text:00000000004073e2\n.text:00000000004073e6\n.text:00000000004073eb\n.text:00000000004073ef\n.text:00000000004073f3\n.text:00000000004073f7\n.text:00000000004073fb\n.text:00000000004073ff\n.text:0000000000407404\n.text:0000000000407407\n.text:000000000040740a\n.text:000000000040740d\n.text:0000000000407412\n.text:0000000000407415\n.text:0000000000407418\n.text:000000000040741b\n.text:000000000040741c\n.text:0000000000407421\n.text:0000000000407425\n.text:0000000000407428\n.text:000000000040742b\n.text:000000000040742d\n.text:0000000000407432\n.text:0000000000407436\n.text:000000000040743b\n.text:000000000040743d\n.text:0000000000407441\n.text:0000000000407446\n.text:0000000000407449\n.text:000000000040744c\n.text:0000000000407451\n.text:0000000000407456\n.text:0000000000407459\n.text:000000000040745e\n.text:0000000000407461\n.text:0000000000407463\n.text:0000000000407468\n.text:000000000040746b\n.text:0000000000407470\n.text:0000000000407473\n.text:0000000000407476\n.text:000000000040747b\n.text:000000000040747e\n.text:0000000000407482\n.text:0000000000407485\n.text:0000000000407488\n.text:000000000040748d\n.text:0000000000407492\n.text:0000000000407497\n.text:000000000040749a\n.text:000000000040749d\n.text:000000000040749e\n.text:00000000004074a3\n.text:00000000004074a7\n.text:00000000004074ab\n.text:00000000004074af\n.text:00000000004074b2\n.text:00000000004074b6\n.text:00000000004074b7\n.text:00000000004074b9\n.text:00000000004074bb\n.text:00000000004074bd\n.text:00000000004074bf\n.text:00000000004074c0\n.text:00000000004074c1\n'
p1434
tp1435
sS'strcmp'
p1436
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1437
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060f180)();\u000a  return iVar1;\u000a}\u000a\u000a
p1438
S'JMP qword ptr [0x0060f180]\n'
p1439
S'ff 25 9a d5 20 00\n'
p1440
S'.plt:0000000000401be0\n'
p1441
tp1442
sS'knuth_morris_pratt'
p1443
(S'\n__stdcall knuth_morris_pratt(uchar * haystack, uchar * needle, size_t needle_len, uchar * * resultp)\n'
p1444
V\u000a_Bool knuth_morris_pratt(uchar *haystack,uchar *needle,size_t needle_len,uchar **resultp)\u000a\u000a{\u000a  uchar uVar1;\u000a  size_t n;\u000a  long lVar2;\u000a  size_t sVar3;\u000a  long lVar4;\u000a  undefined *puVar5;\u000a  ulong uVar6;\u000a  undefined *p;\u000a  uchar *puVar7;\u000a  \u000a  puVar5 = &stack0xffffffffffffffd8;\u000a  if (needle_len >> 0x3d != 0) {\u000a    return false;\u000a  }\u000a  n = needle_len * 8;\u000a  if (n < 0xfb0) {\u000a    uVar6 = n + 0x1f & 0xfffffffffffffff0;\u000a    puVar5 = &stack0xffffffffffffffd8 + -uVar6;\u000a    p = &stack0xffffffffffffffe8 + -uVar6;\u000a  }\u000a  else {\u000a    p = (undefined *)mmalloca(n);\u000a    if (p == (undefined *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  *(undefined8 *)(p + 8) = 1;\u000a  if (2 < needle_len) {\u000a    n = 2;\u000a    lVar2 = 0;\u000a    do {\u000a      uVar1 = needle[lVar2];\u000a      while (needle[n - 1] != uVar1) {\u000a        if (lVar2 == 0) {\u000a          lVar2 = 0;\u000a          sVar3 = n;\u000a          goto LAB_004060d9;\u000a        }\u000a        lVar2 = lVar2 - *(long *)(p + lVar2 * 8);\u000a        uVar1 = needle[lVar2];\u000a      }\u000a      lVar2 = lVar2 + 1;\u000a      sVar3 = n - lVar2;\u000aLAB_004060d9:\u000a      *(size_t *)(p + n * 8) = sVar3;\u000a      n = n + 1;\u000a    } while (n != needle_len);\u000a  }\u000a  *resultp = (uchar *)0x0;\u000a  lVar2 = 0;\u000a  puVar7 = haystack;\u000a  do {\u000a    lVar4 = 0;\u000a    while( true ) {\u000a      if (haystack[lVar4] == 0) goto LAB_00406163;\u000a      if (needle[lVar4 + lVar2] != haystack[lVar4]) break;\u000a      lVar4 = lVar4 + 1;\u000a      if ((lVar2 - needle_len) + lVar4 == 0) {\u000a        *resultp = puVar7;\u000aLAB_00406163:\u000a        *(undefined8 *)(puVar5 + -8) = 0x406168;\u000a        freea(p,puVar5[-8]);\u000a        return true;\u000a      }\u000a    }\u000a    if (lVar2 + lVar4 == 0) {\u000a      puVar7 = puVar7 + 1;\u000a      haystack = haystack + lVar4 + 1;\u000a      lVar2 = 0;\u000a    }\u000a    else {\u000a      haystack = haystack + lVar4;\u000a      puVar7 = puVar7 + *(long *)(p + lVar4 * 8 + lVar2 * 8);\u000a      lVar2 = (lVar2 - *(long *)(p + lVar4 * 8 + lVar2 * 8)) + lVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1445
S'PUSH RBP\nMOV RBP,RSP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV RAX,R12\nSHR RAX,0x3d\nJZ 0x00406047\nXOR EAX,EAX\nJMP 0x0040616a\nLEA RDI,[R12*0x8]\nCMP RDI,0xfaf\nJA 0x00406076\nMOV RAX,RSP\nADD RDI,0x1f\nAND RDI,-0x10\nMOV RCX,RAX\nSUB RCX,RDI\nMOV RSP,RCX\nNEG RDI\nLEA RDI,[RAX + RDI*0x1 + 0x10]\nJMP 0x00406087\nCALL 0x00408ef0\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00406177\nMOV qword ptr [RDI + 0x8],0x1\nCMP R12,0x3\nJC 0x004060e5\nMOV EAX,0x2\nXOR ECX,ECX\nNOP dword ptr [RAX]\nMOV DL,byte ptr [RBX + RAX*0x1 + -0x1]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJNZ 0x004060b9\nJMP 0x004060d0\nSUB RCX,qword ptr [RDI + RCX*0x8]\nCMP DL,byte ptr [RBX + RCX*0x1]\nJZ 0x004060d0\nTEST RCX,RCX\nJNZ 0x004060b0\nXOR ECX,ECX\nMOV RDX,RAX\nJMP 0x004060d9\nINC RCX\nMOV RDX,RAX\nSUB RDX,RCX\nMOV qword ptr [RDI + RAX*0x8],RDX\nINC RAX\nCMP RAX,R12\nJNZ 0x004060a0\nMOV qword ptr [R14],0x0\nNEG R12\nXOR R8D,R8D\nMOV R9,R15\nJMP 0x00406139\nINC RDX\nMOV RAX,RSI\nADD RAX,RDX\nJNZ 0x00406150\nJMP 0x00406160\nMOV RAX,R8\nADD RAX,RDX\nJNZ 0x00406125\nINC R15\nLEA R9,[R9 + RDX*0x1 + 0x1]\nXOR R8D,R8D\nJMP 0x00406139\nADD R9,RDX\nLEA RAX,[RDI + R8*0x8]\nMOV RAX,qword ptr [RAX + RDX*0x8]\nADD R15,RAX\nSUB R8,RAX\nADD R8,RDX\nLEA RSI,[R12 + R8*0x1]\nLEA RCX,[RBX + R8*0x1]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [R9 + RDX*0x1]\nTEST AL,AL\nJZ 0x00406163\nCMP byte ptr [RCX + RDX*0x1],AL\nJZ 0x00406100\nJMP 0x00406110\nMOV qword ptr [R14],R15\nCALL 0x00408f70\nMOV AL,0x1\nLEA RSP,[RBP + -0x20]\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x0040616a\n'
p1446
S'55\n48 89 e5\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 ff\n4c 89 e0\n48 c1 e8 3d\n74 07\n31 c0\ne9 23 01 00 00\n4a 8d 3c e5 00 00 00 00\n48 81 ff af 0f 00 00\n77 1e\n48 89 e0\n48 83 c7 1f\n48 83 e7 f0\n48 89 c1\n48 29 f9\n48 89 cc\n48 f7 df\n48 8d 7c 38 10\neb 11\ne8 75 2e 00 00\n48 89 c7\n48 85 ff\n0f 84 f0 00 00 00\n48 c7 47 08 01 00 00 00\n49 83 fc 03\n72 50\nb8 02 00 00 00\n31 c9\n0f 1f 40 00\n8a 54 03 ff\n3a 14 0b\n75 10\neb 25\n48 2b 0c cf\n3a 14 0b\n74 17\n48 85 c9\n75 f2\n31 c9\n48 89 c2\neb 14\n48 ff c1\n48 89 c2\n48 29 ca\n48 89 14 c7\n48 ff c0\n4c 39 e0\n75 bb\n49 c7 06 00 00 00 00\n49 f7 dc\n45 31 c0\n4d 89 f9\neb 42\n48 ff c2\n48 89 f0\n48 01 d0\n75 45\neb 53\n4c 89 c0\n48 01 d0\n75 0d\n49 ff c7\n4d 8d 4c 11 01\n45 31 c0\neb 14\n49 01 d1\n4a 8d 04 c7\n48 8b 04 d0\n49 01 c7\n49 29 c0\n49 01 d0\n4b 8d 34 04\n4a 8d 0c 03\n31 d2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 04 11\n84 c0\n74 0a\n38 04 11\n74 a2\neb b0\n4d 89 3e\ne8 08 2e 00 00\nb0 01\n48 8d 65 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ef\n'
p1447
S'.text:0000000000406020\n.text:0000000000406021\n.text:0000000000406024\n.text:0000000000406026\n.text:0000000000406028\n.text:000000000040602a\n.text:000000000040602b\n.text:000000000040602e\n.text:0000000000406031\n.text:0000000000406034\n.text:0000000000406037\n.text:000000000040603a\n.text:000000000040603e\n.text:0000000000406040\n.text:0000000000406042\n.text:0000000000406047\n.text:000000000040604f\n.text:0000000000406056\n.text:0000000000406058\n.text:000000000040605b\n.text:000000000040605f\n.text:0000000000406063\n.text:0000000000406066\n.text:0000000000406069\n.text:000000000040606c\n.text:000000000040606f\n.text:0000000000406074\n.text:0000000000406076\n.text:000000000040607b\n.text:000000000040607e\n.text:0000000000406081\n.text:0000000000406087\n.text:000000000040608f\n.text:0000000000406093\n.text:0000000000406095\n.text:000000000040609a\n.text:000000000040609c\n.text:00000000004060a0\n.text:00000000004060a4\n.text:00000000004060a7\n.text:00000000004060a9\n.text:00000000004060b0\n.text:00000000004060b4\n.text:00000000004060b7\n.text:00000000004060b9\n.text:00000000004060bc\n.text:00000000004060be\n.text:00000000004060c0\n.text:00000000004060c3\n.text:00000000004060d0\n.text:00000000004060d3\n.text:00000000004060d6\n.text:00000000004060d9\n.text:00000000004060dd\n.text:00000000004060e0\n.text:00000000004060e3\n.text:00000000004060e5\n.text:00000000004060ec\n.text:00000000004060ef\n.text:00000000004060f2\n.text:00000000004060f5\n.text:0000000000406100\n.text:0000000000406103\n.text:0000000000406106\n.text:0000000000406109\n.text:000000000040610b\n.text:0000000000406110\n.text:0000000000406113\n.text:0000000000406116\n.text:0000000000406118\n.text:000000000040611b\n.text:0000000000406120\n.text:0000000000406123\n.text:0000000000406125\n.text:0000000000406128\n.text:000000000040612c\n.text:0000000000406130\n.text:0000000000406133\n.text:0000000000406136\n.text:0000000000406139\n.text:000000000040613d\n.text:0000000000406141\n.text:0000000000406143\n.text:0000000000406150\n.text:0000000000406155\n.text:0000000000406157\n.text:0000000000406159\n.text:000000000040615c\n.text:000000000040615e\n.text:0000000000406160\n.text:0000000000406163\n.text:0000000000406168\n.text:000000000040616a\n.text:000000000040616e\n.text:000000000040616f\n.text:0000000000406171\n.text:0000000000406173\n.text:0000000000406175\n.text:0000000000406176\n.text:0000000000406177\n.text:0000000000406179\n'
p1448
tp1449
sS'fail_due_to_env_size'
p1450
(S'\n__stdcall fail_due_to_env_size()\n'
p1451
V\u000avoid fail_due_to_env_size(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = dcgettext(0,"environment is too large for exec",5);\u000a  error(1,0,uVar1,in_RAX);\u000a  return;\u000a}\u000a\u000a
p1452
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409dde\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nPOP RCX\nJMP 0x00401d20\n'
p1453
S'50\n31 ff\nbe de 9d 40 00\nba 05 00 00 00\ne8 9e ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n59\ne9 39 ed ff ff\n'
p1454
S'.text:0000000000402fc0\n.text:0000000000402fc1\n.text:0000000000402fc3\n.text:0000000000402fc8\n.text:0000000000402fcd\n.text:0000000000402fd2\n.text:0000000000402fd5\n.text:0000000000402fda\n.text:0000000000402fdc\n.text:0000000000402fde\n.text:0000000000402fe1\n.text:0000000000402fe2\n'
p1455
tp1456
sS'wait_for_proc'
p1457
(S'\n__stdcall wait_for_proc()\n'
p1458
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid wait_for_proc(byte bParm1,uint uParm2)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  size_t sVar5;\u000a  ulong uVar6;\u000a  uint uVar7;\u000a  undefined4 local_38;\u000a  uint local_34;\u000a  \u000a  if (procs_executing != 0) {\u000a    uVar7 = 0;\u000a    local_34 = uParm2;\u000a    do {\u000a      uVar6 = (ulong)(local_34 <= uVar7 & (bParm1 ^ 1));\u000a      stop_waiting = 0;\u000a      do {\u000a        iVar1 = waitpid(-1,&local_38,(int)uVar6);\u000a        if (iVar1 == -1) {\u000a          puVar3 = (uint *)__errno_location();\u000a          do {\u000a            uVar2 = *puVar3;\u000a            if (uVar2 != 4) {\u000a              uVar4 = dcgettext(0,"error waiting for child process",5);\u000a              error(1,(ulong)uVar2,uVar4);\u000a            }\u000a            uVar2 = 1;\u000a            if (bParm1 != 0) {\u000a              uVar2 = (uint)uVar6;\u000a            }\u000a            if (stop_waiting != 0) {\u000a              uVar6 = (ulong)uVar2;\u000a            }\u000a            iVar1 = waitpid(-1,&local_38,(int)uVar6);\u000a          } while (iVar1 == -1);\u000a        }\u000a        if (iVar1 == 0) {\u000aLAB_00403d5c:\u000a          if ((char)uVar6 != 0) {\u000a            return;\u000a          }\u000a          uVar4 = dcgettext(0,"WARNING: Lost track of %lu child processes",5);\u000a          error(0,0,uVar4,procs_executing);\u000a          return;\u000a        }\u000a        if (pids_alloc == 0) {\u000a          sVar5 = 0;\u000a        }\u000a        else {\u000a          sVar5 = 0;\u000a          do {\u000a            if (iVar1 == pids[sVar5]) break;\u000a            sVar5 = (size_t)((int)sVar5 + 1);\u000a          } while (sVar5 < pids_alloc);\u000a          if (iVar1 == 0) goto LAB_00403d5c;\u000a        }\u000a      } while (sVar5 == pids_alloc);\u000a      pids[sVar5] = 0;\u000a      procs_executing = procs_executing - 1;\u000a      if ((local_38 & 0xff00) == 0xff00) {\u000a        uVar4 = dcgettext(0,"%s: exited with status 255; aborting",5);\u000a        error(0x7c,0,uVar4);\u000a      }\u000a      if ((char)local_38 == 0x7f) {\u000a        uVar4 = dcgettext(0,"%s: stopped by signal %d",5);\u000a        error(0x7d,0,uVar4,*bc_state.cmd_argv,(ulong)(local_38 >> 8) & 0xff);\u000a      }\u000a      if (0 < (int)((local_38 & 0x7f) * 0x1000000 + 0x1000000) >> 0x19) {\u000a        uVar4 = dcgettext(0,"%s: terminated by signal %d",5);\u000a        error(0x7d,0,uVar4,*bc_state.cmd_argv,(ulong)(local_38 & 0x7f));\u000a      }\u000a      if (local_38._1_1_ != 0) {\u000a        child_error = 0x7b;\u000a      }\u000a      uVar7 = uVar7 + 1;\u000a    } while (procs_executing != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12D,EDI\nCMP qword ptr [0x0060f498],0x0\nJZ 0x00403d87\nMOV EBX,R12D\nXOR BL,0x1\nLEA R15,[RSP + 0x10]\nXOR R14D,R14D\nMOV dword ptr [RSP + 0x14],ESI\nMOV byte ptr [RSP + 0xf],BL\nCMP R14D,ESI\nSETNC AL\nAND AL,BL\nMOVZX EBX,AL\nMOV dword ptr [0x0060f4a0],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0xffffffff\nMOV RSI,R15\nMOV EDX,EBX\nCALL 0x00401d30\nCMP EAX,-0x1\nJNZ 0x00403bf7\nCALL 0x00401940\nMOV R13,RAX\nNOP dword ptr [RAX]\nMOV EBP,dword ptr [R13]\nCMP EBP,0x4\nJZ 0x00403bce\nXOR EDI,EDI\nMOV ESI,0x40a29e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401d20\nTEST R12B,R12B\nMOV EAX,0x1\nCMOVNZ EAX,EBX\nCMP dword ptr [0x0060f4a0],0x0\nCMOVNZ EBX,EAX\nMOV EDI,0xffffffff\nMOV RSI,R15\nMOV EDX,EBX\nCALL 0x00401d30\nCMP EAX,-0x1\nJZ 0x00403ba0\nTEST EAX,EAX\nJZ 0x00403d5c\nCMP qword ptr [0x0060f4a8],0x0\nJZ 0x00403c40\nMOV RDX,qword ptr [0x0060f4b0]\nMOV RSI,qword ptr [0x0060f4a8]\nXOR ECX,ECX\nNOP dword ptr [RAX]\nCMP EAX,dword ptr [RDX + RCX*0x4]\nJZ 0x00403c2d\nLEA ECX,[RCX + 0x1]\nCMP RCX,RSI\nJC 0x00403c20\nTEST EAX,EAX\nJNZ 0x00403c42\nJMP 0x00403d5c\nXOR ECX,ECX\nMOV EAX,ECX\nCMP RAX,qword ptr [0x0060f4a8]\nJZ 0x00403b80\nMOV RCX,qword ptr [0x0060f4b0]\nMOV dword ptr [RCX + RAX*0x4],0x0\nDEC qword ptr [0x0060f498]\nMOV EAX,dword ptr [RSP + 0x10]\nMOV ECX,0xff00\nAND EAX,ECX\nCMP EAX,0xff00\nJNZ 0x00403ca4\nXOR EDI,EDI\nMOV ESI,0x40a2e9\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0060f430]\nMOV RCX,qword ptr [RAX]\nMOV EDI,0x7c\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401d20\nCMP byte ptr [RSP + 0x10],0x7f\nMOV BL,byte ptr [RSP + 0xf]\nJNZ 0x00403ce9\nXOR EDI,EDI\nMOV ESI,0x40a30e\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0060f430]\nMOV RCX,qword ptr [RAX]\nMOV EAX,dword ptr [RSP + 0x10]\nMOVZX EBX,AH\nMOV EDI,0x7d\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8D,EBX\nMOV BL,byte ptr [RSP + 0xf]\nCALL 0x00401d20\nMOV EAX,dword ptr [RSP + 0x10]\nAND EAX,0x7f\nSHL EAX,0x18\nADD EAX,0x1000000\nSAR EAX,0x19\nTEST EAX,EAX\nJLE 0x00403d34\nXOR EDI,EDI\nMOV ESI,0x40a327\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0060f430]\nMOV RCX,qword ptr [RAX]\nMOV R8D,dword ptr [RSP + 0x10]\nAND R8D,0x7f\nMOV EDI,0x7d\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401d20\nCMP byte ptr [RSP + 0x11],0x0\nJZ 0x00403d45\nMOV dword ptr [0x0060f48c],0x7b\nINC R14D\nCMP qword ptr [0x0060f498],0x0\nMOV ESI,dword ptr [RSP + 0x14]\nJNZ 0x00403b65\nJMP 0x00403d87\nTEST BL,0x1\nJNZ 0x00403d87\nXOR EDI,EDI\nMOV ESI,0x40a2be\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060f498]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401d20\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1460
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 fc\n48 83 3d 4f b9 20 00 00\n0f 84 38 02 00 00\n44 89 e3\n80 f3 01\n4c 8d 7c 24 10\n45 31 f6\n89 74 24 14\n88 5c 24 0f\n41 39 f6\n0f 93 c0\n20 d8\n0f b6 d8\nc7 05 26 b9 20 00 00 00 00 00\n66 0f 1f 44 00 00\nbf ff ff ff ff\n4c 89 fe\n89 da\ne8 a1 e1 ff ff\n83 f8 ff\n75 63\ne8 a7 dd ff ff\n49 89 c5\n0f 1f 40 00\n41 8b 6d 00\n83 fd 04\n74 25\n31 ff\nbe 9e a2 40 00\nba 05 00 00 00\ne8 b6 de ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 52 e1 ff ff\n45 84 e4\nb8 01 00 00 00\n0f 45 c3\n83 3d c0 b8 20 00 00\n0f 45 d8\nbf ff ff ff ff\n4c 89 fe\n89 da\ne8 3e e1 ff ff\n83 f8 ff\n74 a9\n85 c0\n0f 84 5d 01 00 00\n48 83 3d a1 b8 20 00 00\n74 37\n48 8b 15 a0 b8 20 00\n48 8b 35 91 b8 20 00\n31 c9\n0f 1f 80 00 00 00 00\n3b 04 8a\n74 08\n8d 49 01\n48 39 f1\n72 f3\n85 c0\n75 11\ne9 26 01 00 00\n31 c9\n89 c8\n48 3b 05 5d b8 20 00\n0f 84 2f ff ff ff\n48 8b 0d 58 b8 20 00\nc7 04 81 00 00 00 00\n48 ff 0d 32 b8 20 00\n8b 44 24 10\nb9 00 ff 00 00\n21 c8\n3d 00 ff 00 00\n75 2c\n31 ff\nbe e9 a2 40 00\nba 05 00 00 00\ne8 e7 dd ff ff\n48 89 c2\n48 8b 05 9d b7 20 00\n48 8b 08\nbf 7c 00 00 00\n31 f6\n31 c0\ne8 7c e0 ff ff\n80 7c 24 10 7f\n8a 5c 24 0f\n75 3a\n31 ff\nbe 0e a3 40 00\nba 05 00 00 00\ne8 b0 dd ff ff\n48 89 c2\n48 8b 05 66 b7 20 00\n48 8b 08\n8b 44 24 10\n0f b6 dc\nbf 7d 00 00 00\n31 f6\n31 c0\n41 89 d8\n8a 5c 24 0f\ne8 37 e0 ff ff\n8b 44 24 10\n83 e0 7f\nc1 e0 18\n05 00 00 00 01\nc1 f8 19\n85 c0\n7e 35\n31 ff\nbe 27 a3 40 00\nba 05 00 00 00\ne8 60 dd ff ff\n48 89 c2\n48 8b 05 16 b7 20 00\n48 8b 08\n44 8b 44 24 10\n41 83 e0 7f\nbf 7d 00 00 00\n31 f6\n31 c0\ne8 ec df ff ff\n80 7c 24 11 00\n74 0a\nc7 05 47 b7 20 00 7b 00 00 00\n41 ff c6\n48 83 3d 48 b7 20 00 00\n8b 74 24 14\n0f 85 0b fe ff ff\neb 2b\nf6 c3 01\n75 26\n31 ff\nbe be a2 40 00\nba 05 00 00 00\ne8 fe dc ff ff\n48 89 c2\n48 8b 0d 1c b7 20 00\n31 ff\n31 f6\n31 c0\ne8 99 df ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1461
S'.text:0000000000403b30\n.text:0000000000403b31\n.text:0000000000403b33\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b39\n.text:0000000000403b3a\n.text:0000000000403b3e\n.text:0000000000403b41\n.text:0000000000403b49\n.text:0000000000403b4f\n.text:0000000000403b52\n.text:0000000000403b55\n.text:0000000000403b5a\n.text:0000000000403b5d\n.text:0000000000403b61\n.text:0000000000403b65\n.text:0000000000403b68\n.text:0000000000403b6b\n.text:0000000000403b6d\n.text:0000000000403b70\n.text:0000000000403b7a\n.text:0000000000403b80\n.text:0000000000403b85\n.text:0000000000403b88\n.text:0000000000403b8a\n.text:0000000000403b8f\n.text:0000000000403b92\n.text:0000000000403b94\n.text:0000000000403b99\n.text:0000000000403b9c\n.text:0000000000403ba0\n.text:0000000000403ba4\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403bab\n.text:0000000000403bb0\n.text:0000000000403bb5\n.text:0000000000403bba\n.text:0000000000403bbd\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc6\n.text:0000000000403bc9\n.text:0000000000403bce\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bd9\n.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bff\n.text:0000000000403c07\n.text:0000000000403c09\n.text:0000000000403c10\n.text:0000000000403c17\n.text:0000000000403c19\n.text:0000000000403c20\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c28\n.text:0000000000403c2b\n.text:0000000000403c2d\n.text:0000000000403c2f\n.text:0000000000403c31\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c44\n.text:0000000000403c4b\n.text:0000000000403c51\n.text:0000000000403c58\n.text:0000000000403c5f\n.text:0000000000403c66\n.text:0000000000403c6a\n.text:0000000000403c6f\n.text:0000000000403c71\n.text:0000000000403c76\n.text:0000000000403c78\n.text:0000000000403c7a\n.text:0000000000403c7f\n.text:0000000000403c84\n.text:0000000000403c89\n.text:0000000000403c8c\n.text:0000000000403c93\n.text:0000000000403c96\n.text:0000000000403c9b\n.text:0000000000403c9d\n.text:0000000000403c9f\n.text:0000000000403ca4\n.text:0000000000403ca9\n.text:0000000000403cad\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb6\n.text:0000000000403cbb\n.text:0000000000403cc0\n.text:0000000000403cc3\n.text:0000000000403cca\n.text:0000000000403ccd\n.text:0000000000403cd1\n.text:0000000000403cd4\n.text:0000000000403cd9\n.text:0000000000403cdb\n.text:0000000000403cdd\n.text:0000000000403ce0\n.text:0000000000403ce4\n.text:0000000000403ce9\n.text:0000000000403ced\n.text:0000000000403cf0\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403cfd\n.text:0000000000403cff\n.text:0000000000403d01\n.text:0000000000403d06\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d1a\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d26\n.text:0000000000403d2b\n.text:0000000000403d2d\n.text:0000000000403d2f\n.text:0000000000403d34\n.text:0000000000403d39\n.text:0000000000403d3b\n.text:0000000000403d45\n.text:0000000000403d48\n.text:0000000000403d50\n.text:0000000000403d54\n.text:0000000000403d5a\n.text:0000000000403d5c\n.text:0000000000403d5f\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d68\n.text:0000000000403d6d\n.text:0000000000403d72\n.text:0000000000403d75\n.text:0000000000403d7c\n.text:0000000000403d7e\n.text:0000000000403d80\n.text:0000000000403d82\n.text:0000000000403d87\n.text:0000000000403d8b\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d95\n'
p1462
tp1463
sS'decide_size'
p1464
(S'\n__stdcall decide_size(size_t current, size_t wanted)\n'
p1465
V\u000asize_t decide_size(size_t current,size_t wanted)\u000a\u000a{\u000a  ulong uVar1;\u000a  bool bVar2;\u000a  \u000a  uVar1 = 0x10;\u000a  if (current != 0) {\u000a    uVar1 = current;\u000a  }\u000a  do {\u000a    if (wanted <= uVar1) {\u000a      return uVar1;\u000a    }\u000a    bVar2 = uVar1 <= uVar1 * 2;\u000a    uVar1 = uVar1 * 2;\u000a  } while (bVar2);\u000a  return wanted;\u000a}\u000a\u000a
p1466
S'TEST RDI,RDI\nMOV EAX,0x10\nCMOVNZ RAX,RDI\nNOP dword ptr [RAX]\nCMP RAX,RSI\nJNC 0x00405394\nLEA RCX,[RAX + RAX*0x1]\nCMP RCX,RAX\nMOV RAX,RCX\nJNC 0x00405380\nMOV RAX,RSI\nRET\n'
p1467
S'48 85 ff\nb8 10 00 00 00\n48 0f 45 c7\n0f 1f 40 00\n48 39 f0\n73 0f\n48 8d 0c 00\n48 39 c1\n48 89 c8\n73 ef\n48 89 f0\nc3\n'
p1468
S'.text:0000000000405370\n.text:0000000000405373\n.text:0000000000405378\n.text:000000000040537c\n.text:0000000000405380\n.text:0000000000405383\n.text:0000000000405385\n.text:0000000000405389\n.text:000000000040538c\n.text:000000000040538f\n.text:0000000000405391\n.text:0000000000405394\n'
p1469
tp1470
sS'read'
p1471
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1472
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060f168)();\u000a  return sVar1;\u000a}\u000a\u000a
p1473
S'JMP qword ptr [0x0060f168]\n'
p1474
S'ff 25 b2 d5 20 00\n'
p1475
S'.plt:0000000000401bb0\n'
p1476
tp1477
sS'set_custom_quoting'
p1478
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1479
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1480
S'TEST RDI,RDI\nMOV EAX,0x60f510\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004064a5\nTEST RDX,RDX\nJZ 0x004064a5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401930\n'
p1481
S'48 85 ff\nb8 10 f5 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 85 b4 ff ff\n'
p1482
S'.text:0000000000406480\n.text:0000000000406483\n.text:0000000000406488\n.text:000000000040648c\n.text:0000000000406492\n.text:0000000000406495\n.text:0000000000406497\n.text:000000000040649a\n.text:000000000040649c\n.text:00000000004064a0\n.text:00000000004064a4\n.text:00000000004064a5\n.text:00000000004064a6\n'
p1483
tp1484
sS'c_isalpha'
p1485
(S'\n__stdcall c_isalpha()\n'
p1486
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1487
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00408a0b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1488
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1489
S'.text:00000000004089f0\n.text:00000000004089f3\n.text:00000000004089f6\n.text:00000000004089f8\n.text:0000000000408a02\n.text:0000000000408a04\n.text:0000000000408a07\n.text:0000000000408a0a\n.text:0000000000408a0b\n.text:0000000000408a0d\n'
p1490
tp1491
sS'smaller_of'
p1492
(S'\n__stdcall smaller_of(size_t a, size_t b)\n'
p1493
V\u000asize_t smaller_of(size_t a,size_t b)\u000a\u000a{\u000a  if (a < b) {\u000a    b = a;\u000a  }\u000a  return b;\u000a}\u000a\u000a
p1494
S'CMP RDI,RSI\nCMOVC RSI,RDI\nMOV RAX,RSI\nRET\n'
p1495
S'48 39 f7\n48 0f 42 f7\n48 89 f0\nc3\n'
p1496
S'.text:0000000000402ff0\n.text:0000000000402ff3\n.text:0000000000402ff7\n.text:0000000000402ffa\n'
p1497
tp1498
sS'quotearg_custom_mem'
p1499
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1500
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1501
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00407720\n'
p1502
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1503
S'.text:00000000004077b0\n.text:00000000004077b3\n.text:00000000004077b6\n.text:00000000004077b9\n.text:00000000004077bc\n.text:00000000004077be\n.text:00000000004077c1\n'
p1504
tp1505
sS'complain_about_leaky_fds'
p1506
(S'\n__stdcall complain_about_leaky_fds()\n'
p1507
V\u000avoid complain_about_leaky_fds(void)\u000a\u000a{\u000a  uint uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = find_first_leaked_fd(non_cloexec_fds,num_cloexec_fds);\u000a  if ((int)uVar1 < 0) {\u000a    return;\u000a  }\u000a  uVar2 = dcgettext(0,\u000a                    "File descriptor %d will leak; please report this as a bug, remembering to include a detailed description of the simplest way to reproduce this problem."\u000a                    ,5);\u000a  error(0,0,uVar2,(ulong)uVar1);\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("no_leaks","fdleak.c",0x185,"void complain_about_leaky_fds(void)");\u000a}\u000a\u000a
p1508
S'PUSH RBX\nMOV RDI,qword ptr [0x0060f4d0]\nMOV RSI,qword ptr [0x0060f4d8]\nCALL 0x00404ea0\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00404e5c\nPOP RBX\nRET\nXOR EDI,EDI\nMOV ESI,0x40b2cb\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nCALL 0x00401d20\nMOV EDI,0x40b363\nMOV ESI,0x40b36c\nMOV EDX,0x185\nMOV ECX,0x40b375\nCALL 0x00401b20\n'
p1509
S'53\n48 8b 3d 88 a6 20 00\n48 8b 35 89 a6 20 00\ne8 4c 00 00 00\n89 c3\n85 db\n79 02\n5b\nc3\n31 ff\nbe cb b2 40 00\nba 05 00 00 00\ne8 03 cc ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n89 d9\ne8 a0 ce ff ff\nbf 63 b3 40 00\nbe 6c b3 40 00\nba 85 01 00 00\nb9 75 b3 40 00\ne8 87 cc ff ff\n'
p1510
S'.text:0000000000404e40\n.text:0000000000404e41\n.text:0000000000404e48\n.text:0000000000404e4f\n.text:0000000000404e54\n.text:0000000000404e56\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5b\n.text:0000000000404e5c\n.text:0000000000404e5e\n.text:0000000000404e63\n.text:0000000000404e68\n.text:0000000000404e6d\n.text:0000000000404e70\n.text:0000000000404e72\n.text:0000000000404e74\n.text:0000000000404e76\n.text:0000000000404e79\n.text:0000000000404e7b\n.text:0000000000404e80\n.text:0000000000404e85\n.text:0000000000404e8a\n.text:0000000000404e8f\n.text:0000000000404e94\n'
p1511
tp1512
sS'sigaction'
p1513
(S'\n__stdcall sigaction(int __sig, sigaction * __act, sigaction * __oact)\n'
p1514
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaction(int __sig,sigaction *__act,sigaction *__oact)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaction_0060f078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0060f078]\n'
p1516
S'ff 25 a2 d6 20 00\n'
p1517
S'.plt:00000000004019d0\n'
p1518
tp1519
sS'memset'
p1520
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1521
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060f130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0060f130]\n'
p1523
S'ff 25 ea d5 20 00\n'
p1524
S'.plt:0000000000401b40\n'
p1525
tp1526
sS'getc_unlocked'
p1527
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1528
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060f068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1529
S'JMP qword ptr [0x0060f068]\n'
p1530
S'ff 25 b2 d6 20 00\n'
p1531
S'.plt:00000000004019b0\n'
p1532
tp1533
sS'fopen_cloexec_for_read_only'
p1534
(S'\n__stdcall fopen_cloexec_for_read_only(char * file_name)\n'
p1535
V\u000aFILE * fopen_cloexec_for_read_only(char *file_name)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  int *piVar2;\u000a  FILE *pFVar3;\u000a  \u000a  pFVar3 = (FILE *)0x0;\u000a  __fd = open_cloexec(file_name,0);\u000a  if (-1 < __fd) {\u000a    pFVar3 = (FILE *)fdopen(__fd,"r");\u000a    if (pFVar3 == (FILE *)0x0) {\u000a      piVar2 = __errno_location();\u000a      iVar1 = *piVar2;\u000a      close(__fd);\u000a      *piVar2 = iVar1;\u000a      pFVar3 = (FILE *)0x0;\u000a    }\u000a  }\u000a  return pFVar3;\u000a}\u000a\u000a
p1536
S'PUSH RBP\nPUSH R14\nPUSH RBX\nXOR EBX,EBX\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00404cc0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403980\nMOV ESI,0x409e8f\nMOV EDI,EBP\nCALL 0x00401cf0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00403980\nCALL 0x00401940\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401b70\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1537
S'55\n41 56\n53\n31 db\n31 f6\n31 c0\ne8 71 13 00 00\n89 c5\n85 ed\n78 2b\nbe 8f 9e 40 00\n89 ef\ne8 8f e3 ff ff\n48 89 c3\n48 85 db\n75 17\ne8 d2 df ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 f5 e1 ff ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1538
S'.text:0000000000403940\n.text:0000000000403941\n.text:0000000000403943\n.text:0000000000403944\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394f\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403955\n.text:000000000040395a\n.text:000000000040395c\n.text:0000000000403961\n.text:0000000000403964\n.text:0000000000403967\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403971\n.text:0000000000403974\n.text:0000000000403976\n.text:000000000040397b\n.text:000000000040397e\n.text:0000000000403980\n.text:0000000000403983\n.text:0000000000403984\n.text:0000000000403986\n.text:0000000000403987\n'
p1539
tp1540
sS'c_isascii'
p1541
(S'\n__stdcall c_isascii()\n'
p1542
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1543
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1544
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1545
S'.text:0000000000408a10\n.text:0000000000408a16\n.text:0000000000408a19\n'
p1546
tp1547
sS'dup_safer'
p1548
(S'\n__stdcall dup_safer()\n'
p1549
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1550
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x004086b0\n'
p1551
S'31 f6\nba 03 00 00 00\n31 c0\ne9 c2 09 00 00\n'
p1552
S'.text:0000000000407ce0\n.text:0000000000407ce2\n.text:0000000000407ce7\n.text:0000000000407ce9\n'
p1553
tp1554
sS'dirfd'
p1555
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p1556
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0060f190)();\u000a  return iVar1;\u000a}\u000a\u000a
p1557
S'JMP qword ptr [0x0060f190]\n'
p1558
S'ff 25 8a d5 20 00\n'
p1559
S'.plt:0000000000401c00\n'
p1560
tp1561
sS'bc_get_arg_max'
p1562
(S'\n__stdcall bc_get_arg_max()\n'
p1563
V\u000asize_t bc_get_arg_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = sysconf(0);\u000a  if ((long)sVar1 < 1) {\u000a    sVar1 = 0x7fffffffffffffff;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p1564
S'PUSH RAX\nXOR EDI,EDI\nCALL 0x00401d60\nTEST RAX,RAX\nMOV RCX,0x7fffffffffffffff\nCMOVLE RAX,RCX\nPOP RCX\nRET\n'
p1565
S'50\n31 ff\ne8 48 d5 ff ff\n48 85 c0\n48 b9 ff ff ff ff ff ff ff 7f\n48 0f 4e c1\n59\nc3\n'
p1566
S'.text:0000000000404810\n.text:0000000000404811\n.text:0000000000404813\n.text:0000000000404818\n.text:000000000040481b\n.text:0000000000404825\n.text:0000000000404829\n.text:000000000040482a\n'
p1567
tp1568
sS'__ctype_b_loc'
p1569
(S'\n__stdcall __ctype_b_loc()\n'
p1570
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060f2a0)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060f2a0]\n'
p1572
S'ff 25 7a d4 20 00\n'
p1573
S'.plt:0000000000401e20\n'
p1574
tp1575
sS'quotearg'
p1576
(S'\n__stdcall quotearg(char * arg)\n'
p1577
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1578
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00407300\n'
p1579
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1580
S'.text:00000000004074e0\n.text:00000000004074e3\n.text:00000000004074e5\n.text:00000000004074e8\n'
p1581
tp1582
sS'_start'
p1583
(S'\n__stdcall _start()\n'
p1584
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060eff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1585
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x409190\nMOV RCX,0x409120\nMOV RDI,0x401f30\nCALL qword ptr [0x0060eff0]\nHLT\n'
p1586
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 90 91 40 00\n48 c7 c1 20 91 40 00\n48 c7 c7 30 1f 40 00\nff 15 96 d1 20 00\nf4\n'
p1587
S'.text:0000000000401e30\n.text:0000000000401e32\n.text:0000000000401e35\n.text:0000000000401e36\n.text:0000000000401e39\n.text:0000000000401e3d\n.text:0000000000401e3e\n.text:0000000000401e3f\n.text:0000000000401e46\n.text:0000000000401e4d\n.text:0000000000401e54\n.text:0000000000401e5a\n'
p1588
tp1589
sS'c_iscntrl'
p1590
(S'\n__stdcall c_iscntrl()\n'
p1591
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1592
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00408a38\nRET\nCMP EDI,0x7f\nJZ 0x00408a37\nXOR EAX,EAX\nRET\n'
p1593
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1594
S'.text:0000000000408a30\n.text:0000000000408a32\n.text:0000000000408a35\n.text:0000000000408a37\n.text:0000000000408a38\n.text:0000000000408a3b\n.text:0000000000408a3d\n.text:0000000000408a3f\n'
p1595
tp1596
sS'c_isblank'
p1597
(S'\n__stdcall c_isblank()\n'
p1598
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1599
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1600
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1601
S'.text:0000000000408a20\n.text:0000000000408a23\n.text:0000000000408a26\n.text:0000000000408a29\n.text:0000000000408a2c\n.text:0000000000408a2e\n'
p1602
tp1603
sS'atexit'
p1604
(S'\n__stdcall atexit(__func * __func)\n'
p1605
V\u000a/* WARNING: Removing unreachable block (ram,0x004091c0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060f268)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1606
S'MOV RAX,0x60f2b0\nTEST RAX,RAX\nJZ 0x004091c0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401db0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401db0\n'
p1607
S'48 c7 c0 b0 f2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 fa 8b ff ff\n31 d2\n31 f6\ne9 e7 8b ff ff\n'
p1608
S'.text:00000000004091a0\n.text:00000000004091a7\n.text:00000000004091aa\n.text:00000000004091ac\n.text:00000000004091af\n.text:00000000004091b1\n.text:00000000004091c0\n.text:00000000004091c2\n.text:00000000004091c4\n'
p1609
tp1610
sS'fdopen'
p1611
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1612
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060f208)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1613
S'JMP qword ptr [0x0060f208]\n'
p1614
S'ff 25 12 d5 20 00\n'
p1615
S'.plt:0000000000401cf0\n'
p1616
tp1617
sS'error'
p1618
(S'\n__stdcall error()\n'
p1619
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060f220)();\u000a  return;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0060f220]\n'
p1621
S'ff 25 fa d4 20 00\n'
p1622
S'.plt:0000000000401d20\n'
p1623
tp1624
sS'strcaseeq6'
p1625
(S'\n__stdcall strcaseeq6()\n'
p1626
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1627
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00407ba2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407ba9\nJMP 0x00407bbe\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407bbe\nTEST BPL,BPL\nJZ 0x00407bb9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00407bd0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1628
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 31 0f 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1629
S'.text:0000000000407b80\n.text:0000000000407b81\n.text:0000000000407b82\n.text:0000000000407b83\n.text:0000000000407b85\n.text:0000000000407b88\n.text:0000000000407b8a\n.text:0000000000407b8f\n.text:0000000000407b93\n.text:0000000000407b95\n.text:0000000000407b97\n.text:0000000000407b9a\n.text:0000000000407b9c\n.text:0000000000407b9e\n.text:0000000000407ba0\n.text:0000000000407ba2\n.text:0000000000407ba4\n.text:0000000000407ba7\n.text:0000000000407ba9\n.text:0000000000407bac\n.text:0000000000407bae\n.text:0000000000407bb1\n.text:0000000000407bb5\n.text:0000000000407bb6\n.text:0000000000407bb7\n.text:0000000000407bb9\n.text:0000000000407bbe\n.text:0000000000407bc2\n.text:0000000000407bc3\n.text:0000000000407bc4\n'
p1630
tp1631
sS'strcaseeq5'
p1632
(S'\n__stdcall strcaseeq5()\n'
p1633
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1634
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00407b56\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407b5d\nJMP 0x00407b74\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407b74\nTEST BPL,BPL\nJZ 0x00407b6f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00407b80\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1635
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 7d 0f 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1636
S'.text:0000000000407b30\n.text:0000000000407b31\n.text:0000000000407b33\n.text:0000000000407b34\n.text:0000000000407b37\n.text:0000000000407b39\n.text:0000000000407b3c\n.text:0000000000407b3e\n.text:0000000000407b43\n.text:0000000000407b47\n.text:0000000000407b49\n.text:0000000000407b4b\n.text:0000000000407b4e\n.text:0000000000407b50\n.text:0000000000407b52\n.text:0000000000407b54\n.text:0000000000407b56\n.text:0000000000407b58\n.text:0000000000407b5b\n.text:0000000000407b5d\n.text:0000000000407b60\n.text:0000000000407b62\n.text:0000000000407b66\n.text:0000000000407b69\n.text:0000000000407b6a\n.text:0000000000407b6c\n.text:0000000000407b6d\n.text:0000000000407b6f\n.text:0000000000407b74\n.text:0000000000407b75\n.text:0000000000407b77\n.text:0000000000407b78\n'
p1637
tp1638
sS'strcaseeq7'
p1639
(S'\n__stdcall strcaseeq7()\n'
p1640
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1641
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00407bf2\nTEST ECX,0xffffffdf\nJNZ 0x00407bf6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00407bfa\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1642
S'53\n48 89 fb\n31 ff\ne8 e5 0e 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1643
S'.text:0000000000407bd0\n.text:0000000000407bd1\n.text:0000000000407bd4\n.text:0000000000407bd6\n.text:0000000000407bdb\n.text:0000000000407bdf\n.text:0000000000407be1\n.text:0000000000407be3\n.text:0000000000407be9\n.text:0000000000407beb\n.text:0000000000407bf0\n.text:0000000000407bf1\n.text:0000000000407bf2\n.text:0000000000407bf4\n.text:0000000000407bf6\n.text:0000000000407bf8\n.text:0000000000407bf9\n.text:0000000000407bfa\n.text:0000000000407bff\n.text:0000000000407c00\n'
p1644
tp1645
sS'strtoul'
p1646
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060f258)();\u000a  return uVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x0060f258]\n'
p1649
S'ff 25 c2 d4 20 00\n'
p1650
S'.plt:0000000000401d90\n'
p1651
tp1652
sS'strcaseeq0'
p1653
(S'\n__stdcall strcaseeq0()\n'
p1654
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1655
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00407905\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040790c\nJMP 0x00407940\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407940\nTEST BPL,BPL\nJZ 0x0040793b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00407950\nJMP 0x00407940\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1656
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 11 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1657
S'.text:00000000004078d0\n.text:00000000004078d1\n.text:00000000004078d3\n.text:00000000004078d5\n.text:00000000004078d7\n.text:00000000004078d9\n.text:00000000004078da\n.text:00000000004078db\n.text:00000000004078de\n.text:00000000004078e1\n.text:00000000004078e4\n.text:00000000004078e7\n.text:00000000004078e9\n.text:00000000004078ec\n.text:00000000004078ee\n.text:00000000004078f3\n.text:00000000004078f6\n.text:00000000004078f8\n.text:00000000004078fa\n.text:00000000004078fd\n.text:00000000004078ff\n.text:0000000000407901\n.text:0000000000407903\n.text:0000000000407905\n.text:0000000000407907\n.text:000000000040790a\n.text:000000000040790c\n.text:000000000040790f\n.text:0000000000407911\n.text:0000000000407915\n.text:000000000040791a\n.text:000000000040791d\n.text:0000000000407921\n.text:0000000000407925\n.text:0000000000407929\n.text:000000000040792d\n.text:0000000000407931\n.text:0000000000407934\n.text:0000000000407939\n.text:000000000040793b\n.text:0000000000407940\n.text:0000000000407944\n.text:0000000000407945\n.text:0000000000407947\n.text:0000000000407949\n.text:000000000040794b\n.text:000000000040794d\n.text:000000000040794e\n'
p1658
tp1659
sS'strnlen1'
p1660
(S'\n__stdcall strnlen1(char * string, size_t maxlen)\n'
p1661
V\u000asize_t strnlen1(char *string,size_t maxlen)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  \u000a  pvVar1 = memchr(string,0,maxlen);\u000a  sVar2 = (1 - (long)string) + (long)pvVar1;\u000a  if (pvVar1 == (void *)0x0) {\u000a    sVar2 = maxlen;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1662
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nXOR ESI,ESI\nMOV RDX,R14\nCALL 0x00401ba0\nMOV ECX,0x1\nSUB RCX,RBX\nADD RCX,RAX\nTEST RAX,RAX\nCMOVZ RCX,R14\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1663
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n31 f6\n4c 89 f2\ne8 ec 9e ff ff\nb9 01 00 00 00\n48 29 d9\n48 01 c1\n48 85 c0\n49 0f 44 ce\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1664
S'.text:0000000000407ca0\n.text:0000000000407ca2\n.text:0000000000407ca3\n.text:0000000000407ca4\n.text:0000000000407ca7\n.text:0000000000407caa\n.text:0000000000407cac\n.text:0000000000407caf\n.text:0000000000407cb4\n.text:0000000000407cb9\n.text:0000000000407cbc\n.text:0000000000407cbf\n.text:0000000000407cc2\n.text:0000000000407cc6\n.text:0000000000407cc9\n.text:0000000000407ccd\n.text:0000000000407cce\n.text:0000000000407cd0\n'
p1665
tp1666
sS'strcaseeq2'
p1667
(S'\n__stdcall strcaseeq2()\n'
p1668
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00407a16\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407a1d\nJMP 0x00407a4a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407a4a\nTEST BPL,BPL\nJZ 0x00407a45\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407a60\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1670
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 10 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1671
S'.text:00000000004079e0\n.text:00000000004079e1\n.text:00000000004079e3\n.text:00000000004079e5\n.text:00000000004079e7\n.text:00000000004079e9\n.text:00000000004079ea\n.text:00000000004079eb\n.text:00000000004079ee\n.text:00000000004079f1\n.text:00000000004079f4\n.text:00000000004079f7\n.text:00000000004079f9\n.text:00000000004079fc\n.text:00000000004079fe\n.text:0000000000407a03\n.text:0000000000407a07\n.text:0000000000407a09\n.text:0000000000407a0b\n.text:0000000000407a0e\n.text:0000000000407a10\n.text:0000000000407a12\n.text:0000000000407a14\n.text:0000000000407a16\n.text:0000000000407a18\n.text:0000000000407a1b\n.text:0000000000407a1d\n.text:0000000000407a20\n.text:0000000000407a22\n.text:0000000000407a26\n.text:0000000000407a2a\n.text:0000000000407a2e\n.text:0000000000407a32\n.text:0000000000407a35\n.text:0000000000407a39\n.text:0000000000407a3a\n.text:0000000000407a3c\n.text:0000000000407a3e\n.text:0000000000407a40\n.text:0000000000407a42\n.text:0000000000407a43\n.text:0000000000407a45\n.text:0000000000407a4a\n.text:0000000000407a4e\n.text:0000000000407a4f\n.text:0000000000407a51\n.text:0000000000407a53\n.text:0000000000407a55\n.text:0000000000407a57\n.text:0000000000407a58\n'
p1672
tp1673
sS'strcaseeq1'
p1674
(S'\n__stdcall strcaseeq1()\n'
p1675
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1676
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040798d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407994\nJMP 0x004079c7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004079c7\nTEST BPL,BPL\nJZ 0x004079c2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004079e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1677
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 46 11 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1678
S'.text:0000000000407950\n.text:0000000000407951\n.text:0000000000407953\n.text:0000000000407955\n.text:0000000000407957\n.text:0000000000407959\n.text:000000000040795a\n.text:000000000040795b\n.text:0000000000407960\n.text:0000000000407963\n.text:0000000000407966\n.text:0000000000407969\n.text:000000000040796b\n.text:000000000040796e\n.text:0000000000407973\n.text:0000000000407975\n.text:000000000040797a\n.text:000000000040797e\n.text:0000000000407980\n.text:0000000000407982\n.text:0000000000407985\n.text:0000000000407987\n.text:0000000000407989\n.text:000000000040798b\n.text:000000000040798d\n.text:000000000040798f\n.text:0000000000407992\n.text:0000000000407994\n.text:0000000000407997\n.text:0000000000407999\n.text:000000000040799d\n.text:00000000004079a1\n.text:00000000004079a5\n.text:00000000004079ab\n.text:00000000004079af\n.text:00000000004079b2\n.text:00000000004079b6\n.text:00000000004079b7\n.text:00000000004079b9\n.text:00000000004079bb\n.text:00000000004079bd\n.text:00000000004079bf\n.text:00000000004079c0\n.text:00000000004079c2\n.text:00000000004079c7\n.text:00000000004079cb\n.text:00000000004079cc\n.text:00000000004079ce\n.text:00000000004079d0\n.text:00000000004079d2\n.text:00000000004079d4\n.text:00000000004079d5\n'
p1679
tp1680
sS'strcaseeq4'
p1681
(S'\n__stdcall strcaseeq4()\n'
p1682
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1683
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00407afc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407b03\nJMP 0x00407b24\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407b24\nTEST BPL,BPL\nJZ 0x00407b1f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407b30\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1684
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 d7 0f 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1685
S'.text:0000000000407ad0\n.text:0000000000407ad1\n.text:0000000000407ad3\n.text:0000000000407ad5\n.text:0000000000407ad6\n.text:0000000000407ad7\n.text:0000000000407ada\n.text:0000000000407add\n.text:0000000000407adf\n.text:0000000000407ae2\n.text:0000000000407ae4\n.text:0000000000407ae9\n.text:0000000000407aed\n.text:0000000000407aef\n.text:0000000000407af1\n.text:0000000000407af4\n.text:0000000000407af6\n.text:0000000000407af8\n.text:0000000000407afa\n.text:0000000000407afc\n.text:0000000000407afe\n.text:0000000000407b01\n.text:0000000000407b03\n.text:0000000000407b06\n.text:0000000000407b08\n.text:0000000000407b0c\n.text:0000000000407b10\n.text:0000000000407b13\n.text:0000000000407b17\n.text:0000000000407b18\n.text:0000000000407b1a\n.text:0000000000407b1c\n.text:0000000000407b1d\n.text:0000000000407b1f\n.text:0000000000407b24\n.text:0000000000407b28\n.text:0000000000407b29\n.text:0000000000407b2b\n.text:0000000000407b2d\n.text:0000000000407b2e\n'
p1686
tp1687
sS'snprintf'
p1688
(S'\n__stdcall snprintf(char * __s, size_t __maxlen, char * __format)\n'
p1689
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint snprintf(char *__s,size_t __maxlen,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_snprintf_0060f108)();\u000a  return iVar1;\u000a}\u000a\u000a
p1690
S'JMP qword ptr [0x0060f108]\n'
p1691
S'ff 25 12 d6 20 00\n'
p1692
S'.plt:0000000000401af0\n'
p1693
tp1694
sS'remember_fd_if_non_cloexec'
p1695
(S'\n__stdcall remember_fd_if_non_cloexec(void * context)\n'
p1696
V\u000aint remember_fd_if_non_cloexec(void *context)\u000a\u000a{\u000a  void *pvVar1;\u000a  int iVar2;\u000a  void *pvVar3;\u000a  void **in_RSI;\u000a  int iVar4;\u000a  \u000a  iVar2 = fd_is_cloexec();\u000a  iVar4 = 0;\u000a  if (iVar2 == 0) {\u000a    pvVar3 = extendbuf(*in_RSI,(long)in_RSI[1] * 4 + 4,(size_t *)(in_RSI + 2));\u000a    if (pvVar3 == (void *)0x0) {\u000a      iVar4 = -1;\u000a    }\u000a    else {\u000a      *in_RSI = pvVar3;\u000a      pvVar1 = in_RSI[1];\u000a      *(undefined4 *)((long)pvVar3 + (long)pvVar1 * 4) = (int)context;\u000a      in_RSI[1] = (void *)((long)pvVar1 + 1);\u000a      iVar4 = 0;\u000a    }\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p1697
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00405000\nXOR R14D,R14D\nTEST EAX,EAX\nJNZ 0x00404cab\nMOV RDI,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nLEA RSI,[0x4 + RAX*0x4]\nLEA RDX,[RBX + 0x10]\nCALL 0x004052b0\nTEST RAX,RAX\nJZ 0x00404ca5\nMOV qword ptr [RBX],RAX\nMOV RCX,qword ptr [RBX + 0x8]\nMOV dword ptr [RAX + RCX*0x4],EBP\nINC RCX\nMOV qword ptr [RBX + 0x8],RCX\nJMP 0x00404cab\nMOV R14D,0xffffffff\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1698
S'55\n41 56\n53\n48 89 f3\n89 fd\ne8 92 03 00 00\n45 31 f6\n85 c0\n75 36\n48 8b 3b\n48 8b 43 08\n48 8d 34 85 04 00 00 00\n48 8d 53 10\ne8 23 06 00 00\n48 85 c0\n74 13\n48 89 03\n48 8b 4b 08\n89 2c 88\n48 ff c1\n48 89 4b 08\neb 06\n41 be ff ff ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p1699
S'.text:0000000000404c60\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c64\n.text:0000000000404c67\n.text:0000000000404c69\n.text:0000000000404c6e\n.text:0000000000404c71\n.text:0000000000404c73\n.text:0000000000404c75\n.text:0000000000404c78\n.text:0000000000404c7c\n.text:0000000000404c84\n.text:0000000000404c88\n.text:0000000000404c8d\n.text:0000000000404c90\n.text:0000000000404c92\n.text:0000000000404c95\n.text:0000000000404c99\n.text:0000000000404c9c\n.text:0000000000404c9f\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404cab\n.text:0000000000404cae\n.text:0000000000404caf\n.text:0000000000404cb1\n.text:0000000000404cb2\n'
p1700
tp1701
sS'strcaseeq3'
p1702
(S'\n__stdcall strcaseeq3()\n'
p1703
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408ac0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00407a90\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407a97\nJMP 0x00407aba\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407aba\nTEST BPL,BPL\nJZ 0x00407ab5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407ad0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1705
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 43 10 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1706
S'.text:0000000000407a60\n.text:0000000000407a61\n.text:0000000000407a63\n.text:0000000000407a65\n.text:0000000000407a67\n.text:0000000000407a68\n.text:0000000000407a6b\n.text:0000000000407a6e\n.text:0000000000407a71\n.text:0000000000407a73\n.text:0000000000407a76\n.text:0000000000407a78\n.text:0000000000407a7d\n.text:0000000000407a81\n.text:0000000000407a83\n.text:0000000000407a85\n.text:0000000000407a88\n.text:0000000000407a8a\n.text:0000000000407a8c\n.text:0000000000407a8e\n.text:0000000000407a90\n.text:0000000000407a92\n.text:0000000000407a95\n.text:0000000000407a97\n.text:0000000000407a9a\n.text:0000000000407a9c\n.text:0000000000407aa0\n.text:0000000000407aa4\n.text:0000000000407aa8\n.text:0000000000407aab\n.text:0000000000407aac\n.text:0000000000407aae\n.text:0000000000407ab0\n.text:0000000000407ab2\n.text:0000000000407ab3\n.text:0000000000407ab5\n.text:0000000000407aba\n.text:0000000000407abb\n.text:0000000000407abd\n.text:0000000000407abf\n.text:0000000000407ac1\n.text:0000000000407ac2\n'
p1707
tp1708
sS'register_tm_clones'
p1709
(S'\n__stdcall register_tm_clones()\n'
p1710
V\u000a/* WARNING: Removing unreachable block (ram,0x00401ec3) */\u000a/* WARNING: Removing unreachable block (ram,0x00401ecd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1711
S'MOV ESI,0x60f328\nPUSH RBP\nSUB RSI,0x60f328\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401ed8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401ed8\nPOP RBP\nMOV EDI,0x60f328\nJMP RAX\nPOP RBP\nRET\n'
p1712
S'be 28 f3 60 00\n55\n48 81 ee 28 f3 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 28 f3 60 00\nff e0\n5d\nc3\n'
p1713
S'.text:0000000000401ea0\n.text:0000000000401ea5\n.text:0000000000401ea6\n.text:0000000000401ead\n.text:0000000000401eb1\n.text:0000000000401eb4\n.text:0000000000401eb7\n.text:0000000000401ebb\n.text:0000000000401ebe\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401ecb\n.text:0000000000401ecd\n.text:0000000000401ece\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401ed9\n'
p1714
tp1715
sS'xstrtoul'
p1716
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1717
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  byte *pbVar7;\u000a  strtol_error sVar8;\u000a  strtol_error sVar9;\u000a  uint uVar10;\u000a  char *__s;\u000a  long lVar11;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar7 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar7;\u000a    pbVar7 = pbVar7 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar8 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar8 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar8 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar9 = sVar8;\u000a    if (__s == (char *)0x0) goto LAB_0040860a;\u000a  }\u000a  cVar2 = **__endptr;\u000a  sVar9 = sVar8;\u000a  if (cVar2 == 0) goto LAB_0040860a;\u000a  pcVar6 = strchr(__s,(int)cVar2);\u000a  if (pcVar6 == (char *)0x0) goto switchD_0040855d_caseD_43;\u000a  lVar11 = 1;\u000a  uVar10 = (int)cVar2 - 0x45;\u000a  if ((uVar10 < 0x30) && ((0x814400308945U >> ((ulong)uVar10 & 0x1f) & 1) != 0)) {\u000a    pcVar6 = strchr(__s,0x30);\u000a    if (pcVar6 == (char *)0x0) {\u000aLAB_00408539:\u000a      lVar11 = 1;\u000a    }\u000a    else {\u000a      cVar2 = (*__endptr)[1];\u000a      if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a        lVar11 = 2;\u000a      }\u000a      else {\u000a        if (cVar2 != 'i') goto LAB_00408539;\u000a        lVar11 = (ulong)((*__endptr)[2] == 'B') * 2 + 1;\u000a      }\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004085ec;\u000a  default:\u000aswitchD_0040855d_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    break;\u000a  case 'P':\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    break;\u000a  case 'Y':\u000a    break;\u000a  case 'Z':\u000a    break;\u000a  case 'b':\u000a    goto LAB_004085ec;\u000a  case 'c':\u000a    goto switchD_0040855d_caseD_63;\u000a  case 'w':\u000aLAB_004085ec:\u000a    sVar3 = bkm_scale(&local_48);\u000a    goto switchD_0040855d_caseD_63;\u000a  }\u000a  sVar3 = bkm_scale_by_power(&local_48);\u000aswitchD_0040855d_caseD_63:\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar9 = sVar3 | sVar8 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar9 = sVar3 | sVar8;\u000a  }\u000aLAB_0040860a:\u000a  *local_40 = local_48;\u000a  return sVar9;\u000a}\u000a\u000a
p1718
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00408627\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401940\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nCALL 0x00401e20\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00408420\nTEST RBX,RBX\nLEA R15,[RSP + 0x10]\nCMOVNZ R15,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00408616\nMOV RDI,RBP\nMOV RSI,R15\nMOV EDX,R14D\nCALL 0x00401d90\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R15]\nCMP RAX,RBP\nJZ 0x00408480\nMOV EAX,dword ptr [R12]\nTEST EAX,EAX\nJZ 0x004084b1\nCMP EAX,0x22\nJNZ 0x00408616\nMOV EBX,0x1\nTEST R13,R13\nJNZ 0x004084bc\nJMP 0x0040860a\nTEST R13,R13\nJZ 0x00408616\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00408616\nMOV RDI,R13\nCALL 0x00401ac0\nTEST RAX,RAX\nJZ 0x00408616\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004084bc\nXOR EBX,EBX\nTEST R13,R13\nJZ 0x0040860a\nMOV RAX,qword ptr [R15]\nMOVSX EBP,byte ptr [RAX]\nTEST EBP,EBP\nJZ 0x0040860a\nMOV RDI,R13\nMOV ESI,EBP\nCALL 0x00401ac0\nTEST RAX,RAX\nJZ 0x0040856e\nMOV R14D,0x400\nMOV R12D,0x1\nADD EBP,-0x45\nCMP EBP,0x2f\nJA 0x0040854d\nMOV RAX,0x814400308945\nBT RAX,RBP\nJNC 0x0040854d\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00401ac0\nTEST RAX,RAX\nJZ 0x00408539\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX + 0x1]\nCMP ECX,0x42\nJZ 0x00408541\nCMP ECX,0x44\nJZ 0x00408541\nCMP ECX,0x69\nJNZ 0x00408539\nXOR ECX,ECX\nCMP byte ptr [RAX + 0x2],0x42\nSETZ CL\nLEA R12,[RCX + RCX*0x1 + 0x1]\nJMP 0x0040854d\nMOV R12D,0x1\nJMP 0x0040854d\nMOV R14D,0x3e8\nMOV R12D,0x2\nMOV RAX,qword ptr [R15]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040856e\nXOR EAX,EAX\nJMP qword ptr [0x40bf30 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nJMP 0x004085d0\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00408616\nMOV RDI,RSP\nMOV EDX,0x1\nJMP 0x004085d0\nMOV RDI,RSP\nMOV EDX,0x2\nJMP 0x004085d0\nMOV RDI,RSP\nMOV EDX,0x4\nJMP 0x004085d0\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004085ec\nMOV RDI,RSP\nMOV EDX,0x6\nJMP 0x004085d0\nMOV RDI,RSP\nMOV EDX,0x5\nJMP 0x004085d0\nMOV RDI,RSP\nMOV EDX,0x8\nJMP 0x004085d0\nMOV RDI,RSP\nMOV EDX,0x7\nMOV ESI,R14D\nCALL 0x00408670\nJMP 0x004085f1\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004085ec\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00408640\nOR EAX,EBX\nMOV RCX,qword ptr [R15]\nLEA RDX,[RCX + R12*0x1]\nMOV qword ptr [R15],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + R12*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40c0e0\nMOV ESI,0x40c106\nMOV EDX,0x60\nMOV ECX,0x40c112\nCALL 0x00401b20\n'
p1719
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 33 02 00 00\n48 89 4c 24 08\ne8 42 95 ff ff\n49 89 c4\n41 c7 04 24 00 00 00 00\ne8 12 9a ff ff\n48 8b 08\n48 89 ea\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 7c 24 10\n4c 0f 45 fb\nbb 04 00 00 00\n3c 2d\n0f 84 d0 01 00 00\n48 89 ef\n4c 89 fe\n44 89 f2\ne8 3c 99 ff ff\n48 89 04 24\n49 8b 07\n48 39 e8\n74 20\n41 8b 04 24\n85 c0\n74 49\n83 f8 22\n0f 85 a5 01 00 00\nbb 01 00 00 00\n4d 85 ed\n75 41\ne9 8a 01 00 00\n4d 85 ed\n0f 84 8d 01 00 00\n0f be 30\n85 f6\n0f 84 82 01 00 00\n4c 89 ef\ne8 24 96 ff ff\n48 85 c0\n0f 84 71 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 ed\n0f 84 4e 01 00 00\n49 8b 07\n0f be 28\n85 ed\n0f 84 40 01 00 00\n4c 89 ef\n89 ee\ne8 ec 95 ff ff\n48 85 c0\n0f 84 91 00 00 00\n41 be 00 04 00 00\n41 bc 01 00 00 00\n83 c5 bb\n83 fd 2f\n77 5c\n48 b8 45 89 30 00 44 81 00 00\n48 0f a3 e8\n73 4c\nbe 30 00 00 00\n4c 89 ef\ne8 b2 95 ff ff\n48 85 c0\n74 26\n49 8b 07\n0f be 48 01\n83 f9 42\n74 22\n83 f9 44\n74 1d\n83 f9 69\n75 10\n31 c9\n80 78 02 42\n0f 94 c1\n4c 8d 64 09 01\neb 14\n41 bc 01 00 00 00\neb 0c\n41 be e8 03 00 00\n41 bc 02 00 00 00\n49 8b 07\n0f be 08\n83 c1 be\n83 f9 35\n77 13\n31 c0\nff 24 cd 30 bf 40 00\n48 89 e7\nba 03 00 00 00\neb 62\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 94 00 00 00\n48 89 e7\nba 01 00 00 00\neb 44\n48 89 e7\nba 02 00 00 00\neb 3a\n48 89 e7\nba 04 00 00 00\neb 30\n48 89 e7\nbe 00 04 00 00\neb 42\n48 89 e7\nba 06 00 00 00\neb 1c\n48 89 e7\nba 05 00 00 00\neb 12\n48 89 e7\nba 08 00 00 00\neb 08\n48 89 e7\nba 07 00 00 00\n44 89 f6\ne8 98 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 4f 00 00 00\n09 d8\n49 8b 0f\n4a 8d 14 21\n49 89 17\n89 c3\n83 cb 02\n42 80 3c 21 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf e0 c0 40 00\nbe 06 c1 40 00\nba 60 00 00 00\nb9 12 c1 40 00\ne8 e0 94 ff ff\n'
p1720
S'.text:00000000004083d0\n.text:00000000004083d1\n.text:00000000004083d3\n.text:00000000004083d5\n.text:00000000004083d7\n.text:00000000004083d9\n.text:00000000004083da\n.text:00000000004083de\n.text:00000000004083e1\n.text:00000000004083e4\n.text:00000000004083e7\n.text:00000000004083ea\n.text:00000000004083ee\n.text:00000000004083f4\n.text:00000000004083f9\n.text:00000000004083fe\n.text:0000000000408401\n.text:0000000000408409\n.text:000000000040840e\n.text:0000000000408411\n.text:0000000000408414\n.text:0000000000408420\n.text:0000000000408423\n.text:0000000000408426\n.text:000000000040842b\n.text:000000000040842d\n.text:0000000000408430\n.text:0000000000408435\n.text:0000000000408439\n.text:000000000040843e\n.text:0000000000408440\n.text:0000000000408446\n.text:0000000000408449\n.text:000000000040844c\n.text:000000000040844f\n.text:0000000000408454\n.text:0000000000408458\n.text:000000000040845b\n.text:000000000040845e\n.text:0000000000408460\n.text:0000000000408464\n.text:0000000000408466\n.text:0000000000408468\n.text:000000000040846b\n.text:0000000000408471\n.text:0000000000408476\n.text:0000000000408479\n.text:000000000040847b\n.text:0000000000408480\n.text:0000000000408483\n.text:0000000000408489\n.text:000000000040848c\n.text:000000000040848e\n.text:0000000000408494\n.text:0000000000408497\n.text:000000000040849c\n.text:000000000040849f\n.text:00000000004084a5\n.text:00000000004084ad\n.text:00000000004084af\n.text:00000000004084b1\n.text:00000000004084b3\n.text:00000000004084b6\n.text:00000000004084bc\n.text:00000000004084bf\n.text:00000000004084c2\n.text:00000000004084c4\n.text:00000000004084ca\n.text:00000000004084cd\n.text:00000000004084cf\n.text:00000000004084d4\n.text:00000000004084d7\n.text:00000000004084dd\n.text:00000000004084e3\n.text:00000000004084e9\n.text:00000000004084ec\n.text:00000000004084ef\n.text:00000000004084f1\n.text:00000000004084fb\n.text:00000000004084ff\n.text:0000000000408501\n.text:0000000000408506\n.text:0000000000408509\n.text:000000000040850e\n.text:0000000000408511\n.text:0000000000408513\n.text:0000000000408516\n.text:000000000040851a\n.text:000000000040851d\n.text:000000000040851f\n.text:0000000000408522\n.text:0000000000408524\n.text:0000000000408527\n.text:0000000000408529\n.text:000000000040852b\n.text:000000000040852f\n.text:0000000000408532\n.text:0000000000408537\n.text:0000000000408539\n.text:000000000040853f\n.text:0000000000408541\n.text:0000000000408547\n.text:000000000040854d\n.text:0000000000408550\n.text:0000000000408553\n.text:0000000000408556\n.text:0000000000408559\n.text:000000000040855b\n.text:000000000040855d\n.text:0000000000408564\n.text:0000000000408567\n.text:000000000040856c\n.text:000000000040856e\n.text:0000000000408572\n.text:0000000000408577\n.text:000000000040857a\n.text:000000000040857d\n.text:0000000000408582\n.text:0000000000408585\n.text:000000000040858a\n.text:000000000040858c\n.text:000000000040858f\n.text:0000000000408594\n.text:0000000000408596\n.text:0000000000408599\n.text:000000000040859e\n.text:00000000004085a0\n.text:00000000004085a3\n.text:00000000004085a8\n.text:00000000004085aa\n.text:00000000004085ad\n.text:00000000004085b2\n.text:00000000004085b4\n.text:00000000004085b7\n.text:00000000004085bc\n.text:00000000004085be\n.text:00000000004085c1\n.text:00000000004085c6\n.text:00000000004085c8\n.text:00000000004085cb\n.text:00000000004085d0\n.text:00000000004085d3\n.text:00000000004085d8\n.text:00000000004085da\n.text:00000000004085dd\n.text:00000000004085e2\n.text:00000000004085e4\n.text:00000000004085e7\n.text:00000000004085ec\n.text:00000000004085f1\n.text:00000000004085f3\n.text:00000000004085f6\n.text:00000000004085fa\n.text:00000000004085fd\n.text:00000000004085ff\n.text:0000000000408602\n.text:0000000000408607\n.text:000000000040860a\n.text:000000000040860e\n.text:0000000000408613\n.text:0000000000408616\n.text:0000000000408618\n.text:000000000040861c\n.text:000000000040861d\n.text:000000000040861f\n.text:0000000000408621\n.text:0000000000408623\n.text:0000000000408625\n.text:0000000000408626\n.text:0000000000408627\n.text:000000000040862c\n.text:0000000000408631\n.text:0000000000408636\n.text:000000000040863b\n'
p1721
tp1722
sS'c_islower'
p1723
(S'\n__stdcall c_islower()\n'
p1724
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1725
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1726
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1727
S'.text:0000000000408a60\n.text:0000000000408a63\n.text:0000000000408a66\n.text:0000000000408a69\n'
p1728
tp1729
sS'fwrite'
p1730
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1731
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060f278)();\u000a  return sVar1;\u000a}\u000a\u000a
p1732
S'JMP qword ptr [0x0060f278]\n'
p1733
S'ff 25 a2 d4 20 00\n'
p1734
S'.plt:0000000000401dd0\n'
p1735
tp1736
sS'xargs_do_exec'
p1737
(S'\n__stdcall xargs_do_exec(buildcmd_control * ctl, void * usercontext, char * * argv)\n'
p1738
V\u000aint xargs_do_exec(buildcmd_control *ctl,void *usercontext,char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  __pid_t __pid;\u000a  uint *__buf;\u000a  undefined8 uVar4;\u000a  int *piVar5;\u000a  size_t sVar6;\u000a  char **argv_00;\u000a  char **extraout_RDX;\u000a  int fd [2];\u000a  int childstatus;\u000a  uint local_28;\u000a  uint local_24;\u000a  int local_20;\u000a  int local_1c;\u000a  \u000a  if (proc_max != 0) {\u000a    while ((ulong)(long)proc_max <= procs_executing) {\u000a      wait_for_proc(0,1,argv);\u000a      argv = extraout_RDX;\u000a    }\u000a  }\u000a  if (query_before_executing == 1) {\u000a    _Var2 = print_args();\u000a    if (_Var2 == false) {\u000a      return 1;\u000a    }\u000a    if (query_before_executing == 0) goto LAB_00403066;\u000a  }\u000a  else {\u000aLAB_00403066:\u000a    if (print_command == 1) {\u000a      print_args();\u000a    }\u000a  }\u000a  wait_for_proc(0,0);\u000a  iVar3 = pipe((int *)&local_28);\u000a  if (iVar3 != 0) {\u000a    __buf = (uint *)__errno_location();\u000a    uVar1 = *__buf;\u000a    uVar4 = dcgettext(0,"could not create pipe before fork",5);\u000a    error(1,(ulong)uVar1,uVar4,uVar4);\u000a  }\u000a  rpl_fcntl((ulong)local_24,2,1);\u000a  __pid = fork();\u000a  if (__pid < 0) {\u000a    piVar5 = __errno_location();\u000a    do {\u000a      if ((*piVar5 != 0xb) || (procs_executing == 0)) break;\u000a      wait_for_proc(0,1);\u000a      __pid = fork();\u000a    } while (__pid < 0);\u000a  }\u000a  if (__pid != 0) {\u000a    if (__pid != -1) {\u000a      close(local_24);\u000a      sVar6 = safe_read((void *)(ulong)local_28,(size_t)&local_20);\u000a      if (sVar6 == 4) {\u000a        close(local_28);\u000a        iVar3 = 0;\u000a        waitpid(__pid,&local_1c,0);\u000a        if (local_20 != 7) {\u000a          if (local_20 == 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a            exit(0x7f);\u000a          }\u000a                    /* WARNING: Subroutine does not return */\u000a          exit(0x7e);\u000a        }\u000a      }\u000a      else {\u000a        if (sVar6 == 0) {\u000a          add_proc();\u000a        }\u000a        else {\u000a          if (sVar6 == 0xffffffffffffffff) {\u000a            close(local_28);\u000a            __buf = (uint *)__errno_location();\u000a            uVar1 = *__buf;\u000a            uVar4 = dcgettext(0,\u000a                              "errno-buffer safe_read failed in xargs_do_exec (this is probably a bug, please report it)"\u000a                              ,5);\u000a            error(0,(ulong)uVar1,uVar4,uVar4);\u000a          }\u000a          else {\u000a            __buf = (uint *)__errno_location();\u000a            uVar1 = *__buf;\u000a            uVar4 = dcgettext(0,\u000a                              "read returned unexpected value %zu; this is probably a bug, please report it"\u000a                              ,5);\u000a            error(1,(ulong)uVar1,uVar4,sVar6);\u000a          }\u000a        }\u000a        close(local_28);\u000a        iVar3 = 1;\u000a      }\u000a      return iVar3;\u000a    }\u000a    __buf = (uint *)__errno_location();\u000a    uVar1 = *__buf;\u000a    uVar4 = dcgettext(0,"cannot fork",5);\u000a    error(1,(ulong)uVar1,uVar4,uVar4);\u000a  }\u000a  close(local_28);\u000a  child_error = 0;\u000a  prep_child_for_exec();\u000a  _Var2 = bc_args_exceed_testing_limit(argv_00);\u000a  __buf = (uint *)__errno_location();\u000a  if (_Var2 == false) {\u000a    execvp(*argv_00,argv_00);\u000a    if (*__buf == 0) goto LAB_00403283;\u000a  }\u000a  else {\u000a    *__buf = 7;\u000a  }\u000a  write(local_24,__buf,4);\u000aLAB_00403283:\u000a  close(local_24);\u000a  if (*__buf != 7) {\u000a    error(0,(ulong)*__buf,0x40b41a,*argv_00);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit((uint)(*__buf == 2) | 0x7e);\u000a}\u000a\u000a
p1739
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RCX\nCMP dword ptr [0x0060f2b8],0x0\nJNZ 0x0040302c\nJMP 0x0040303c\nXOR EDI,EDI\nMOV ESI,0x1\nCALL 0x00403b30\nMOVSXD RAX,dword ptr [0x0060f2b8]\nCMP qword ptr [0x0060f498],RAX\nJNC 0x00403020\nCMP byte ptr [0x0060f401],0x1\nJNZ 0x00403066\nMOV EBX,0x1\nMOV EDI,0x1\nCALL 0x00403da0\nTEST AL,AL\nJZ 0x004031f4\nMOV AL,byte ptr [0x0060f401]\nTEST AL,AL\nJNZ 0x00403076\nCMP byte ptr [0x0060f400],0x1\nJNZ 0x00403076\nXOR EDI,EDI\nCALL 0x00403da0\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00403b30\nMOV RDI,RSP\nCALL 0x00401b80\nTEST EAX,EAX\nJZ 0x004030b7\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a1c9\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV EDI,dword ptr [RSP + 0x4]\nMOV ESI,0x2\nMOV EDX,0x1\nXOR EAX,EAX\nCALL 0x004086b0\nCALL 0x00401e10\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x00403108\nCALL 0x00401940\nMOV RBX,RAX\nNOP\nCMP dword ptr [RBX],0xb\nJNZ 0x00403108\nMOV RAX,qword ptr [0x0060f498]\nTEST RAX,RAX\nJZ 0x00403108\nXOR EDI,EDI\nMOV ESI,0x1\nCALL 0x00403b30\nCALL 0x00401e10\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004030e0\nTEST EBP,EBP\nJZ 0x0040322b\nCMP EBP,-0x1\nJZ 0x004031ff\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401b70\nMOV EDI,dword ptr [RSP]\nLEA RSI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00407c10\nMOV RBX,RAX\nCMP RBX,0x4\nJZ 0x00403184\nTEST RBX,RBX\nJZ 0x0040317b\nCMP RBX,-0x1\nJNZ 0x004031b8\nMOV EDI,dword ptr [RSP]\nCALL 0x00401b70\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a1f7\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nJMP 0x004031e7\nMOV EDI,EBP\nCALL 0x00403fc0\nJMP 0x004031e7\nMOV EDI,dword ptr [RSP]\nCALL 0x00401b70\nLEA RSI,[RSP + 0xc]\nXOR EBX,EBX\nXOR EDX,EDX\nMOV EDI,EBP\nCALL 0x00401d30\nMOV EAX,dword ptr [RSP + 0x8]\nCMP EAX,0x7\nJZ 0x004031f4\nCMP EAX,0x2\nJNZ 0x004032b7\nMOV EDI,0x7f\nCALL 0x00401dc0\nCALL 0x00401940\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a251\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401d20\nMOV EDI,dword ptr [RSP]\nCALL 0x00401b70\nMOV EBX,0x1\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401940\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a1eb\nMOV EDX,0x5\nCALL 0x00401a70\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401d20\nMOV EDI,dword ptr [RSP]\nCALL 0x00401b70\nMOV dword ptr [0x0060f48c],0x0\nCALL 0x00403f50\nMOV RDI,R14\nCALL 0x004049e0\nMOV EBX,EAX\nCALL 0x00401940\nMOV RBP,RAX\nTEST BL,BL\nJZ 0x00403261\nMOV dword ptr [RBP],0x7\nJMP 0x00403272\nMOV RDI,qword ptr [R14]\nMOV RSI,R14\nCALL 0x00401da0\nCMP dword ptr [RBP],0x0\nJZ 0x00403283\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,0x4\nMOV RSI,RBP\nCALL 0x00401a10\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401b70\nMOV ESI,dword ptr [RBP]\nCMP ESI,0x7\nJZ 0x004032a5\nMOV RCX,qword ptr [R14]\nXOR EDI,EDI\nMOV EDX,0x40b41a\nXOR EAX,EAX\nCALL 0x00401d20\nXOR EDI,EDI\nCMP dword ptr [RBP],0x2\nSETZ DIL\nOR EDI,0x7e\nCALL 0x00401970\nMOV EDI,0x7e\nCALL 0x00401dc0\n'
p1740
S'55\n41 56\n53\n48 83 ec 10\n49 89 ce\n83 3d a6 c2 20 00 00\n75 18\neb 26\n31 ff\nbe 01 00 00 00\ne8 04 0b 00 00\n48 63 05 85 c2 20 00\n48 39 05 5e c4 20 00\n73 e4\n80 3d be c3 20 00 01\n75 21\nbb 01 00 00 00\nbf 01 00 00 00\ne8 4c 0d 00 00\n84 c0\n0f 84 98 01 00 00\n8a 05 9f c3 20 00\n84 c0\n75 10\n80 3d 93 c3 20 00 01\n75 07\n31 ff\ne8 2a 0d 00 00\n31 ff\n31 f6\ne8 b1 0a 00 00\n48 89 e7\ne8 f9 ea ff ff\n85 c0\n74 2c\ne8 b0 e8 ff ff\n8b 18\n31 ff\nbe c9 a1 40 00\nba 05 00 00 00\ne8 cd e9 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 69 ec ff ff\n8b 7c 24 04\nbe 02 00 00 00\nba 01 00 00 00\n31 c0\ne8 e4 55 00 00\ne8 3f ed ff ff\n89 c5\n85 ed\n79 31\ne8 64 e8 ff ff\n48 89 c3\n90\n83 3b 0b\n75 23\n48 8b 05 ac c3 20 00\n48 85 c0\n74 17\n31 ff\nbe 01 00 00 00\ne8 33 0a 00 00\ne8 0e ed ff ff\n89 c5\n85 ed\n78 d8\n85 ed\n0f 84 1b 01 00 00\n83 fd ff\n0f 84 e6 00 00 00\n8b 7c 24 04\ne8 4e ea ff ff\n8b 3c 24\n48 8d 74 24 08\nba 04 00 00 00\ne8 dc 4a 00 00\n48 89 c3\n48 83 fb 04\n74 47\n48 85 db\n74 39\n48 83 fb ff\n75 70\n8b 3c 24\ne8 20 ea ff ff\ne8 eb e7 ff ff\n8b 18\n31 ff\nbe f7 a1 40 00\nba 05 00 00 00\ne8 08 e9 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 a7 eb ff ff\neb 6c\n89 ef\ne8 3e 0e 00 00\neb 63\n8b 3c 24\ne8 e4 e9 ff ff\n48 8d 74 24 0c\n31 db\n31 d2\n89 ef\ne8 94 eb ff ff\n8b 44 24 08\n83 f8 07\n74 4f\n83 f8 02\n0f 85 09 01 00 00\nbf 7f 00 00 00\ne8 08 ec ff ff\ne8 83 e7 ff ff\n8b 28\n31 ff\nbe 51 a2 40 00\nba 05 00 00 00\ne8 a0 e8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\n48 89 d9\ne8 39 eb ff ff\n8b 3c 24\ne8 81 e9 ff ff\nbb 01 00 00 00\n89 d8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\ne8 3c e7 ff ff\n8b 18\n31 ff\nbe eb a1 40 00\nba 05 00 00 00\ne8 59 e8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 f5 ea ff ff\n8b 3c 24\ne8 3d e9 ff ff\nc7 05 4f c2 20 00 00 00 00 00\ne8 0e 0d 00 00\n4c 89 f7\ne8 96 17 00 00\n89 c3\ne8 ef e6 ff ff\n48 89 c5\n84 db\n74 09\nc7 45 00 07 00 00 00\neb 11\n49 8b 3e\n4c 89 f6\ne8 34 eb ff ff\n83 7d 00 00\n74 11\n8b 7c 24 04\nba 04 00 00 00\n48 89 ee\ne8 8d e7 ff ff\n8b 7c 24 04\ne8 e4 e8 ff ff\n8b 75 00\n83 fe 07\n74 11\n49 8b 0e\n31 ff\nba 1a b4 40 00\n31 c0\ne8 7b ea ff ff\n31 ff\n83 7d 00 02\n40 0f 94 c7\n83 cf 7e\ne8 b9 e6 ff ff\nbf 7e 00 00 00\ne8 ff ea ff ff\n'
p1741
S'.text:0000000000403000\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403004\n.text:0000000000403008\n.text:000000000040300b\n.text:0000000000403012\n.text:0000000000403014\n.text:0000000000403020\n.text:0000000000403022\n.text:0000000000403027\n.text:000000000040302c\n.text:0000000000403033\n.text:000000000040303a\n.text:000000000040303c\n.text:0000000000403043\n.text:0000000000403045\n.text:000000000040304a\n.text:000000000040304f\n.text:0000000000403054\n.text:0000000000403056\n.text:000000000040305c\n.text:0000000000403062\n.text:0000000000403064\n.text:0000000000403066\n.text:000000000040306d\n.text:000000000040306f\n.text:0000000000403071\n.text:0000000000403076\n.text:0000000000403078\n.text:000000000040307a\n.text:000000000040307f\n.text:0000000000403082\n.text:0000000000403087\n.text:0000000000403089\n.text:000000000040308b\n.text:0000000000403090\n.text:0000000000403092\n.text:0000000000403094\n.text:0000000000403099\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030af\n.text:00000000004030b2\n.text:00000000004030b7\n.text:00000000004030bb\n.text:00000000004030c0\n.text:00000000004030c5\n.text:00000000004030c7\n.text:00000000004030cc\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030d7\n.text:00000000004030dc\n.text:00000000004030df\n.text:00000000004030e0\n.text:00000000004030e3\n.text:00000000004030e5\n.text:00000000004030ec\n.text:00000000004030ef\n.text:00000000004030f1\n.text:00000000004030f3\n.text:00000000004030f8\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403104\n.text:0000000000403106\n.text:0000000000403108\n.text:000000000040310a\n.text:0000000000403110\n.text:0000000000403113\n.text:0000000000403119\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403125\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403134\n.text:0000000000403137\n.text:000000000040313b\n.text:000000000040313d\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403146\n.text:0000000000403148\n.text:000000000040314b\n.text:0000000000403150\n.text:0000000000403155\n.text:0000000000403157\n.text:0000000000403159\n.text:000000000040315e\n.text:0000000000403163\n.text:0000000000403168\n.text:000000000040316b\n.text:000000000040316d\n.text:000000000040316f\n.text:0000000000403171\n.text:0000000000403174\n.text:0000000000403179\n.text:000000000040317b\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403184\n.text:0000000000403187\n.text:000000000040318c\n.text:0000000000403191\n.text:0000000000403193\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319c\n.text:00000000004031a0\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031a8\n.text:00000000004031ae\n.text:00000000004031b3\n.text:00000000004031b8\n.text:00000000004031bd\n.text:00000000004031bf\n.text:00000000004031c1\n.text:00000000004031c6\n.text:00000000004031cb\n.text:00000000004031d0\n.text:00000000004031d3\n.text:00000000004031d8\n.text:00000000004031da\n.text:00000000004031dc\n.text:00000000004031df\n.text:00000000004031e2\n.text:00000000004031e7\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f4\n.text:00000000004031f6\n.text:00000000004031fa\n.text:00000000004031fb\n.text:00000000004031fd\n.text:00000000004031fe\n.text:00000000004031ff\n.text:0000000000403204\n.text:0000000000403206\n.text:0000000000403208\n.text:000000000040320d\n.text:0000000000403212\n.text:0000000000403217\n.text:000000000040321a\n.text:000000000040321f\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403226\n.text:000000000040322b\n.text:000000000040322e\n.text:0000000000403233\n.text:000000000040323d\n.text:0000000000403242\n.text:0000000000403245\n.text:000000000040324a\n.text:000000000040324c\n.text:0000000000403251\n.text:0000000000403254\n.text:0000000000403256\n.text:0000000000403258\n.text:000000000040325f\n.text:0000000000403261\n.text:0000000000403264\n.text:0000000000403267\n.text:000000000040326c\n.text:0000000000403270\n.text:0000000000403272\n.text:0000000000403276\n.text:000000000040327b\n.text:000000000040327e\n.text:0000000000403283\n.text:0000000000403287\n.text:000000000040328c\n.text:000000000040328f\n.text:0000000000403292\n.text:0000000000403294\n.text:0000000000403297\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a0\n.text:00000000004032a5\n.text:00000000004032a7\n.text:00000000004032ab\n.text:00000000004032af\n.text:00000000004032b2\n.text:00000000004032b7\n.text:00000000004032bc\n'
p1742
tp1743
sS'bc_init_state'
p1744
(S'\n__stdcall bc_init_state(buildcmd_control * ctl, buildcmd_state * state, void * context)\n'
p1745
V\u000avoid bc_init_state(buildcmd_control *ctl,buildcmd_state *state,void *context)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  state->cmd_argv_chars = 0;\u000a  *(undefined4 *)&state->cmd_argc = 0;\u000a  *(undefined4 *)((long)&state->cmd_argc + 4) = 0;\u000a  *(undefined4 *)&state->cmd_argv = 0;\u000a  *(undefined4 *)((long)&state->cmd_argv + 4) = 0;\u000a  state->cmd_argv_alloc = 0;\u000a  *(undefined4 *)&state->largest_successful_arg_count = 0;\u000a  *(undefined4 *)((long)&state->largest_successful_arg_count + 4) = 0;\u000a  *(undefined4 *)&state->smallest_failed_arg_count = 0;\u000a  *(undefined4 *)((long)&state->smallest_failed_arg_count + 4) = 0;\u000a  if (ctl->arg_max < 0x7ffffffffffff800) {\u000a    pcVar1 = (char *)xmalloc(ctl->arg_max + 1);\u000a    state->argbuf = pcVar1;\u000a    state->todo = 0;\u000a    *(undefined4 *)&state->cmd_argv_chars = 0;\u000a    *(undefined4 *)((long)&state->cmd_argv_chars + 4) = 0;\u000a    *(undefined4 *)&state->cmd_initial_argv_chars = 0;\u000a    *(undefined4 *)((long)&state->cmd_initial_argv_chars + 4) = 0;\u000a    state->dir_fd = -1;\u000a    state->usercontext = context;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("ctl->arg_max <= (LONG_MAX - 2048L)","buildcmd.c",0x246,\u000a                                \u000a                "void bc_init_state(const struct buildcmd_control *, struct buildcmd_state *, void *)"\u000a               );\u000a}\u000a\u000a
p1746
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV RBX,RSI\nMOV qword ptr [RBX + 0x20],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x10],0x0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOV RDI,qword ptr [RDI + 0x18]\nMOV RAX,0x7ffffffffffff800\nCMP RDI,RAX\nJNC 0x004049c7\nLEA R15,[RBX + 0x20]\nINC RDI\nCALL 0x00408210\nMOV qword ptr [RBX + 0x18],RAX\nMOV dword ptr [RBX + 0x38],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15],XMM0\nMOV dword ptr [RBX + 0x3c],0xffffffff\nMOV qword ptr [RBX + 0x30],R14\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b144\nMOV ESI,0x40af60\nMOV EDX,0x246\nMOV ECX,0x40b167\nCALL 0x00401b20\n'
p1747
S'41 57\n41 56\n53\n49 89 d6\n48 89 f3\n48 c7 43 20 00 00 00 00\n0f 57 c0\n0f 11 03\n48 c7 43 10 00 00 00 00\n0f 11 43 40\n48 8b 7f 18\n48 b8 00 f8 ff ff ff ff ff 7f\n48 39 c7\n73 2f\n4c 8d 7b 20\n48 ff c7\ne8 6c 38 00 00\n48 89 43 18\nc7 43 38 00 00 00 00\n0f 57 c0\n41 0f 11 07\nc7 43 3c ff ff ff ff\n4c 89 73 30\n5b\n41 5e\n41 5f\nc3\nbf 44 b1 40 00\nbe 60 af 40 00\nba 46 02 00 00\nb9 67 b1 40 00\ne8 40 d1 ff ff\n'
p1748
S'.text:0000000000404960\n.text:0000000000404962\n.text:0000000000404964\n.text:0000000000404965\n.text:0000000000404968\n.text:000000000040496b\n.text:0000000000404973\n.text:0000000000404976\n.text:0000000000404979\n.text:0000000000404981\n.text:0000000000404985\n.text:0000000000404989\n.text:0000000000404993\n.text:0000000000404996\n.text:0000000000404998\n.text:000000000040499c\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a8\n.text:00000000004049af\n.text:00000000004049b2\n.text:00000000004049b6\n.text:00000000004049bd\n.text:00000000004049c1\n.text:00000000004049c2\n.text:00000000004049c4\n.text:00000000004049c6\n.text:00000000004049c7\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d6\n.text:00000000004049db\n'
p1749
tp1750
sS'__do_global_dtors_aux'
p1751
(S'\n__stdcall __do_global_dtors_aux()\n'
p1752
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1753
S'CMP byte ptr [0x0060f388],0x0\nJNZ 0x00401efa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401e60\nPOP RBP\nMOV byte ptr [0x0060f388],0x1\nRET\n'
p1754
S'80 3d a1 d4 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 8e d4 20 00 01\nf3 c3\n'
p1755
S'.text:0000000000401ee0\n.text:0000000000401ee7\n.text:0000000000401ee9\n.text:0000000000401eea\n.text:0000000000401eed\n.text:0000000000401ef2\n.text:0000000000401ef3\n.text:0000000000401efa\n'
p1756
tp1757
sS'c_isprint'
p1758
(S'\n__stdcall c_isprint()\n'
p1759
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1760
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1761
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1762
S'.text:0000000000408a70\n.text:0000000000408a73\n.text:0000000000408a76\n.text:0000000000408a79\n'
p1763
tp1764
sS'strncpy'
p1765
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p1766
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_0060f038)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1767
S'JMP qword ptr [0x0060f038]\n'
p1768
S'ff 25 e2 d6 20 00\n'
p1769
S'.plt:0000000000401950\n'
p1770
tp1771
sS'_fini'
p1772
(S'\n__stdcall _fini()\n'
p1773
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1774
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1775
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1776
S'.fini:00000000004091cc\n.fini:00000000004091d0\n.fini:00000000004091d4\n'
p1777
tp1778
sS'getpid'
p1779
(S'\n__stdcall getpid()\n'
p1780
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getpid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getpid_0060f0a0)();\u000a  return _Var1;\u000a}\u000a\u000a
p1781
S'JMP qword ptr [0x0060f0a0]\n'
p1782
S'ff 25 7a d6 20 00\n'
p1783
S'.plt:0000000000401a20\n'
p1784
tp1785
sS'unsetenv'
p1786
(S'\n__stdcall unsetenv(char * __name)\n'
p1787
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unsetenv(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unsetenv_0060f250)();\u000a  return iVar1;\u000a}\u000a\u000a
p1788
S'JMP qword ptr [0x0060f250]\n'
p1789
S'ff 25 ca d4 20 00\n'
p1790
S'.plt:0000000000401d80\n'
p1791
tp1792
sS'rpl_fcntl'
p1793
(S'\n__stdcall rpl_fcntl()\n'
p1794
V\u000a/* WARNING: Removing unreachable block (ram,0x0040876b) */\u000a/* WARNING: Removing unreachable block (ram,0x004087d4) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00408779 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1795
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004086fb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00408756\nCMP EAX,0x28\nJA 0x0040876b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00408779\nCMP EAX,0x28\nJA 0x004087d4\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004087e2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060f650],0x0\nJS 0x004087f3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004019f0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x004087c4\nCALL 0x00401940\nCMP dword ptr [RAX],0x16\nJNZ 0x004087c4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004086b0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00408856\nMOV dword ptr [0x0060f650],R15D\nTEST EBP,EBP\nJNS 0x00408807\nJMP 0x00408856\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004019f0\nMOV EBP,EAX\nJMP 0x00408856\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004086b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408856\nCMP dword ptr [0x0060f650],-0x1\nJNZ 0x00408856\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004019f0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x0040883c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004019f0\nCMP EAX,-0x1\nJNZ 0x00408856\nCALL 0x00401940\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401b70\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1796
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d ce 6e 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 60 92 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 91 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 85 6e 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 01 92 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 42 6e 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 d2 91 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 b9 91 ff ff\n83 f8 ff\n75 1a\ne8 ff 90 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 22 93 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1797
S'.text:00000000004086b0\n.text:00000000004086b1\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086b6\n.text:00000000004086bd\n.text:00000000004086c0\n.text:00000000004086c2\n.text:00000000004086c4\n.text:00000000004086c9\n.text:00000000004086ce\n.text:00000000004086d3\n.text:00000000004086db\n.text:00000000004086e3\n.text:00000000004086eb\n.text:00000000004086f3\n.text:00000000004086fb\n.text:0000000000408700\n.text:0000000000408705\n.text:000000000040870a\n.text:000000000040870f\n.text:0000000000408714\n.text:0000000000408719\n.text:0000000000408721\n.text:0000000000408726\n.text:000000000040872e\n.text:0000000000408735\n.text:0000000000408739\n.text:000000000040873f\n.text:0000000000408741\n.text:0000000000408744\n.text:0000000000408746\n.text:000000000040874b\n.text:000000000040874e\n.text:0000000000408751\n.text:0000000000408754\n.text:0000000000408756\n.text:0000000000408759\n.text:000000000040875b\n.text:000000000040875e\n.text:0000000000408763\n.text:0000000000408766\n.text:0000000000408769\n.text:000000000040876b\n.text:0000000000408770\n.text:0000000000408774\n.text:0000000000408779\n.text:000000000040877b\n.text:0000000000408782\n.text:0000000000408784\n.text:0000000000408786\n.text:0000000000408789\n.text:000000000040878b\n.text:0000000000408790\n.text:0000000000408792\n.text:0000000000408798\n.text:000000000040879a\n.text:000000000040879c\n.text:00000000004087a1\n.text:00000000004087a4\n.text:00000000004087a6\n.text:00000000004087a8\n.text:00000000004087aa\n.text:00000000004087ad\n.text:00000000004087af\n.text:00000000004087b4\n.text:00000000004087b6\n.text:00000000004087bc\n.text:00000000004087be\n.text:00000000004087c4\n.text:00000000004087cb\n.text:00000000004087cd\n.text:00000000004087cf\n.text:00000000004087d4\n.text:00000000004087d9\n.text:00000000004087dd\n.text:00000000004087e2\n.text:00000000004087e5\n.text:00000000004087e7\n.text:00000000004087ea\n.text:00000000004087ef\n.text:00000000004087f1\n.text:00000000004087f3\n.text:00000000004087f5\n.text:00000000004087f7\n.text:00000000004087fa\n.text:00000000004087fc\n.text:0000000000408801\n.text:0000000000408803\n.text:0000000000408805\n.text:0000000000408807\n.text:000000000040880e\n.text:0000000000408810\n.text:0000000000408815\n.text:0000000000408817\n.text:0000000000408819\n.text:000000000040881e\n.text:0000000000408820\n.text:0000000000408822\n.text:0000000000408824\n.text:0000000000408827\n.text:000000000040882c\n.text:000000000040882e\n.text:0000000000408830\n.text:0000000000408832\n.text:0000000000408837\n.text:000000000040883a\n.text:000000000040883c\n.text:0000000000408841\n.text:0000000000408844\n.text:0000000000408847\n.text:0000000000408849\n.text:000000000040884e\n.text:0000000000408851\n.text:0000000000408856\n.text:0000000000408858\n.text:000000000040885f\n.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408864\n.text:0000000000408865\n'
p1798
tp1799
sS'mmalloca'
p1800
(S'\n__stdcall mmalloca(size_t n)\n'
p1801
V\u000avoid * mmalloca(size_t n)\u000a\u000a{\u000a  void **ppvVar1;\u000a  long lVar2;\u000a  void **ppvVar3;\u000a  \u000a  if (0xffffffffffffffef < n) {\u000a    return (void *)0x0;\u000a  }\u000a  ppvVar3 = (void **)malloc(n + 0x10);\u000a  if (ppvVar3 != (void **)0x0) {\u000a    ppvVar1 = ppvVar3 + 2;\u000a    *(undefined4 *)((long)ppvVar3 + 0xc) = 0x1415fb4a;\u000a    lVar2 = (long)ppvVar3 + ((ulong)ppvVar1 / 0x101) * -0x101 + 0x10;\u000a    *ppvVar3 = mmalloca_results[lVar2];\u000a    *(void ***)(mmalloca_results + lVar2) = ppvVar1;\u000a    return ppvVar1;\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p1802
S'CMP RDI,-0x11\nJA 0x00408f55\nPUSH RAX\nADD RDI,0x10\nCALL 0x00401c80\nMOV RSI,RAX\nTEST RSI,RSI\nLEA RSP,[RSP + 0x8]\nJZ 0x00408f5b\nLEA RCX,[RSI + 0x10]\nMOV dword ptr [RSI + 0xc],0x1415fb4a\nMOV RDX,-0xff00ff00ff00ff\nMOV RAX,RCX\nMUL RDX\nSHR RDX,0x8\nMOV RAX,RDX\nSHL RAX,0x8\nADD RAX,RDX\nNEG RAX\nLEA RAX,[RSI + RAX*0x1 + 0x10]\nMOV RDX,qword ptr [0x60f660 + RAX*0x8]\nMOV qword ptr [RSI],RDX\nMOV qword ptr [0x60f660 + RAX*0x8],RCX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p1803
S'48 83 ff ef\n77 5f\n50\n48 83 c7 10\ne8 80 8d ff ff\n48 89 c6\n48 85 f6\n48 8d 64 24 08\n74 4e\n48 8d 4e 10\nc7 46 0c 4a fb 15 14\n48 ba 01 ff 00 ff 00 ff 00 ff\n48 89 c8\n48 f7 e2\n48 c1 ea 08\n48 89 d0\n48 c1 e0 08\n48 01 d0\n48 f7 d8\n48 8d 44 06 10\n48 8b 14 c5 60 f6 60 00\n48 89 16\n48 89 0c c5 60 f6 60 00\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p1804
S'.text:0000000000408ef0\n.text:0000000000408ef4\n.text:0000000000408ef6\n.text:0000000000408ef7\n.text:0000000000408efb\n.text:0000000000408f00\n.text:0000000000408f03\n.text:0000000000408f06\n.text:0000000000408f0b\n.text:0000000000408f0d\n.text:0000000000408f11\n.text:0000000000408f18\n.text:0000000000408f22\n.text:0000000000408f25\n.text:0000000000408f28\n.text:0000000000408f2c\n.text:0000000000408f2f\n.text:0000000000408f33\n.text:0000000000408f36\n.text:0000000000408f39\n.text:0000000000408f3e\n.text:0000000000408f46\n.text:0000000000408f49\n.text:0000000000408f51\n.text:0000000000408f54\n.text:0000000000408f55\n.text:0000000000408f57\n.text:0000000000408f5a\n.text:0000000000408f5b\n.text:0000000000408f5d\n.text:0000000000408f60\n'
p1805
tp1806
sS'__fpending'
p1807
(S'\n__stdcall __fpending()\n'
p1808
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060f058)();\u000a  return;\u000a}\u000a\u000a
p1809
S'JMP qword ptr [0x0060f058]\n'
p1810
S'ff 25 c2 d6 20 00\n'
p1811
S'.plt:0000000000401990\n'
p1812
tp1813
s.