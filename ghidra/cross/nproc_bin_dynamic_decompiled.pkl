(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x606e08]\nPUSH RBP\nLEA RBP,[0x606e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401280\nTEST RBP,RBP\nJZ 0x004047e6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004047d0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 66 26 20 00\n55\n48 8d 2d 66 26 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 bf ca ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000404790\n.text:0000000000404792\n.text:0000000000404794\n.text:0000000000404797\n.text:0000000000404799\n.text:000000000040479b\n.text:00000000004047a2\n.text:00000000004047a3\n.text:00000000004047aa\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b4\n.text:00000000004047b8\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c4\n.text:00000000004047c6\n.text:00000000004047c8\n.text:00000000004047d0\n.text:00000000004047d3\n.text:00000000004047d6\n.text:00000000004047d9\n.text:00000000004047dd\n.text:00000000004047e1\n.text:00000000004047e4\n.text:00000000004047e6\n.text:00000000004047ea\n.text:00000000004047eb\n.text:00000000004047ec\n.text:00000000004047ee\n.text:00000000004047f0\n.text:00000000004047f2\n.text:00000000004047f4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00607130)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00607130]\n'
p11
S'ff 25 4a 5c 20 00\n'
p12
S'.plt:00000000004014e0\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e6\n.text:00000000004041e9\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004052cb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4037f7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x403878;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40390c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00403688\nMOV EDX,0x4052b8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004015d0\nJMP 0x0040369d\nMOV EDX,0x4052c4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004015d0\nXOR EDI,EDI\nMOV ESI,0x4052cb\nMOV EDX,0x5\nCALL 0x00401380\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4055a0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004015d0\nXOR EDI,EDI\nMOV ESI,0x4052cf\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401450\nCMP R12,0x9\nJA 0x00403726\nJMP qword ptr [0x405268 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40539a\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015d0\nXOR EDI,EDI\nMOV ESI,0x4054d9\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x38\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x4053aa\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015d0\nXOR EDI,EDI\nMOV ESI,0x4053c1\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015d0\nXOR EDI,EDI\nMOV ESI,0x4053dd\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x18\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x4053fd\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x18\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x405421\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x28\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x405449\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x28\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x405475\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x38\nJMP 0x00403997\nXOR EDI,EDI\nMOV ESI,0x4054a5\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015d0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004012d0\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba b8 52 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 4a df ff ff\neb 15\nba c4 52 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 33 df ff ff\n31 ff\nbe cb 52 40 00\nba 05 00 00 00\ne8 d2 dc ff ff\n48 89 c1\nbe 01 00 00 00\nba a0 55 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 05 df ff ff\n31 ff\nbe cf 52 40 00\nba 05 00 00 00\ne8 a4 dc ff ff\n48 89 c7\n4c 89 f6\ne8 69 dd ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 68 52 40 00\n31 ff\nbe 9a 53 40 00\nba 05 00 00 00\ne8 7a dc ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa de ff ff\n31 ff\nbe d9 54 40 00\nba 05 00 00 00\ne8 49 dc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 61 de ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe aa 53 40 00\nba 05 00 00 00\ne8 f7 db ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 23 de ff ff\n31 ff\nbe c1 53 40 00\nba 05 00 00 00\ne8 c2 db ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea dd ff ff\n31 ff\nbe dd 53 40 00\nba 05 00 00 00\ne8 89 db ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 b4 dd ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe fd 53 40 00\nba 05 00 00 00\ne8 4a db ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 72 dd ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 21 54 40 00\nba 05 00 00 00\ne8 08 db ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 28 dd ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 49 54 40 00\nba 05 00 00 00\ne8 be da ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 de dc ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 75 54 40 00\nba 05 00 00 00\ne8 74 da ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8c dc ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe a5 54 40 00\nba 05 00 00 00\ne8 25 da ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3d dc ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 2c d9 ff ff\n'
p26
S'.text:0000000000403650\n.text:0000000000403652\n.text:0000000000403654\n.text:0000000000403656\n.text:0000000000403657\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365e\n.text:0000000000403661\n.text:0000000000403664\n.text:0000000000403667\n.text:000000000040366a\n.text:000000000040366f\n.text:0000000000403672\n.text:0000000000403674\n.text:0000000000403679\n.text:000000000040367b\n.text:000000000040367e\n.text:0000000000403681\n.text:0000000000403686\n.text:0000000000403688\n.text:000000000040368d\n.text:000000000040368f\n.text:0000000000403692\n.text:0000000000403695\n.text:0000000000403698\n.text:000000000040369d\n.text:000000000040369f\n.text:00000000004036a4\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b1\n.text:00000000004036b6\n.text:00000000004036bb\n.text:00000000004036c1\n.text:00000000004036c3\n.text:00000000004036c6\n.text:00000000004036cb\n.text:00000000004036cd\n.text:00000000004036d2\n.text:00000000004036d7\n.text:00000000004036dc\n.text:00000000004036df\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036eb\n.text:00000000004036ed\n.text:00000000004036f5\n.text:00000000004036f7\n.text:00000000004036fc\n.text:0000000000403701\n.text:0000000000403706\n.text:0000000000403709\n.text:000000000040370c\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403716\n.text:000000000040371a\n.text:000000000040371b\n.text:000000000040371d\n.text:000000000040371f\n.text:0000000000403721\n.text:0000000000403726\n.text:0000000000403728\n.text:000000000040372d\n.text:0000000000403732\n.text:0000000000403737\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403741\n.text:0000000000403745\n.text:000000000040374a\n.text:000000000040374f\n.text:0000000000403752\n.text:0000000000403756\n.text:000000000040375a\n.text:000000000040375e\n.text:0000000000403762\n.text:0000000000403766\n.text:000000000040376a\n.text:000000000040376f\n.text:0000000000403773\n.text:0000000000403778\n.text:000000000040377a\n.text:000000000040377f\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378f\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379a\n.text:000000000040379d\n.text:00000000004037a1\n.text:00000000004037a2\n.text:00000000004037a4\n.text:00000000004037a6\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037af\n.text:00000000004037b4\n.text:00000000004037b9\n.text:00000000004037be\n.text:00000000004037c1\n.text:00000000004037c4\n.text:00000000004037c8\n.text:00000000004037cc\n.text:00000000004037d1\n.text:00000000004037d3\n.text:00000000004037d6\n.text:00000000004037da\n.text:00000000004037db\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e1\n.text:00000000004037e6\n.text:00000000004037e8\n.text:00000000004037ed\n.text:00000000004037f2\n.text:00000000004037f7\n.text:00000000004037fa\n.text:00000000004037fd\n.text:0000000000403801\n.text:0000000000403805\n.text:0000000000403809\n.text:000000000040380e\n.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403817\n.text:000000000040381c\n.text:0000000000403820\n.text:0000000000403825\n.text:0000000000403827\n.text:000000000040382c\n.text:0000000000403831\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383c\n.text:0000000000403840\n.text:0000000000403844\n.text:0000000000403849\n.text:000000000040384e\n.text:0000000000403851\n.text:0000000000403855\n.text:0000000000403859\n.text:000000000040385e\n.text:0000000000403862\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386e\n.text:0000000000403873\n.text:0000000000403878\n.text:000000000040387b\n.text:000000000040387e\n.text:0000000000403882\n.text:0000000000403886\n.text:000000000040388a\n.text:000000000040388f\n.text:0000000000403894\n.text:0000000000403897\n.text:000000000040389b\n.text:000000000040389f\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ac\n.text:00000000004038b1\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cc\n.text:00000000004038d0\n.text:00000000004038d5\n.text:00000000004038da\n.text:00000000004038dd\n.text:00000000004038e1\n.text:00000000004038e5\n.text:00000000004038e9\n.text:00000000004038ed\n.text:00000000004038f2\n.text:00000000004038f6\n.text:00000000004038fb\n.text:00000000004038fd\n.text:0000000000403902\n.text:0000000000403907\n.text:000000000040390c\n.text:000000000040390f\n.text:0000000000403912\n.text:0000000000403916\n.text:000000000040391a\n.text:000000000040391e\n.text:0000000000403923\n.text:0000000000403928\n.text:000000000040392b\n.text:000000000040392f\n.text:0000000000403933\n.text:0000000000403937\n.text:000000000040393b\n.text:000000000040393f\n.text:0000000000403944\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394c\n.text:0000000000403951\n.text:0000000000403956\n.text:000000000040395b\n.text:000000000040395e\n.text:0000000000403961\n.text:0000000000403965\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403973\n.text:0000000000403976\n.text:000000000040397a\n.text:000000000040397e\n.text:0000000000403982\n.text:0000000000403986\n.text:000000000040398a\n.text:000000000040398e\n.text:0000000000403993\n.text:0000000000403997\n.text:0000000000403998\n.text:000000000040399a\n.text:000000000040399c\n.text:000000000040399e\n.text:000000000040399f\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Print the number of processing units available to the current process,\u005cnwhich may be less than the number of online processors\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "     --all       print the number of installed processors\u005cn     --ignore=N  if possible, exclude N processing units\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004017e1\nXOR EDI,EDI\nMOV ESI,0x404854\nMOV EDX,0x5\nCALL 0x00401380\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006072c0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401530\nXOR EDI,EDI\nMOV ESI,0x40486b\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,qword ptr [0x00607268]\nMOV RDI,RAX\nCALL 0x00401450\nXOR EDI,EDI\nMOV ESI,0x4048eb\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,qword ptr [0x00607268]\nMOV RDI,RAX\nCALL 0x00401450\nXOR EDI,EDI\nMOV ESI,0x40495f\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,qword ptr [0x00607268]\nMOV RDI,RAX\nCALL 0x00401450\nXOR EDI,EDI\nMOV ESI,0x40498c\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,qword ptr [0x00607268]\nMOV RDI,RAX\nCALL 0x00401450\nCALL 0x00401830\nMOV EDI,EBX\nCALL 0x004015b0\nCALL 0x004017f0\nMOV EDI,EBX\nCALL 0x004015b0\n'
p32
S'53\n89 fb\n85 db\n0f 85 b6 00 00 00\n31 ff\nbe 54 48 40 00\nba 05 00 00 00\ne8 44 fc ff ff\n48 89 c1\n48 8b 15 7a 5b 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 db fd ff ff\n31 ff\nbe 6b 48 40 00\nba 05 00 00 00\ne8 1a fc ff ff\n48 8b 35 fb 5a 20 00\n48 89 c7\ne8 db fc ff ff\n31 ff\nbe eb 48 40 00\nba 05 00 00 00\ne8 fa fb ff ff\n48 8b 35 db 5a 20 00\n48 89 c7\ne8 bb fc ff ff\n31 ff\nbe 5f 49 40 00\nba 05 00 00 00\ne8 da fb ff ff\n48 8b 35 bb 5a 20 00\n48 89 c7\ne8 9b fc ff ff\n31 ff\nbe 8c 49 40 00\nba 05 00 00 00\ne8 ba fb ff ff\n48 8b 35 9b 5a 20 00\n48 89 c7\ne8 7b fc ff ff\ne8 56 00 00 00\n89 df\ne8 cf fd ff ff\ne8 0a 00 00 00\n89 df\ne8 c3 fd ff ff\n'
p33
S'.text:0000000000401720\n.text:0000000000401721\n.text:0000000000401723\n.text:0000000000401725\n.text:000000000040172b\n.text:000000000040172d\n.text:0000000000401732\n.text:0000000000401737\n.text:000000000040173c\n.text:000000000040173f\n.text:0000000000401746\n.text:000000000040174b\n.text:000000000040174d\n.text:0000000000401750\n.text:0000000000401755\n.text:0000000000401757\n.text:000000000040175c\n.text:0000000000401761\n.text:0000000000401766\n.text:000000000040176d\n.text:0000000000401770\n.text:0000000000401775\n.text:0000000000401777\n.text:000000000040177c\n.text:0000000000401781\n.text:0000000000401786\n.text:000000000040178d\n.text:0000000000401790\n.text:0000000000401795\n.text:0000000000401797\n.text:000000000040179c\n.text:00000000004017a1\n.text:00000000004017a6\n.text:00000000004017ad\n.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b7\n.text:00000000004017bc\n.text:00000000004017c1\n.text:00000000004017c6\n.text:00000000004017cd\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017da\n.text:00000000004017dc\n.text:00000000004017e1\n.text:00000000004017e6\n.text:00000000004017e8\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00402fcd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004012d0\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 fe e2 ff ff\n'
p40
S'.text:0000000000402f80\n.text:0000000000402f84\n.text:0000000000402f87\n.text:0000000000402f8c\n.text:0000000000402f91\n.text:0000000000402f95\n.text:0000000000402f9d\n.text:0000000000402fa0\n.text:0000000000402fa2\n.text:0000000000402fa4\n.text:0000000000402fa8\n.text:0000000000402fab\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fb9\n.text:0000000000402fbd\n.text:0000000000402fc1\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fcc\n.text:0000000000402fcd\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006070a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006070a8]\n'
p46
S'ff 25 d2 5c 20 00\n'
p47
S'.plt:00000000004013d0\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004046b9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004046b9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004014a0\nTEST EAX,EAX\nJS 0x004046b9\nMOV RDI,RBX\nCALL 0x004014f0\nTEST EAX,EAX\nJZ 0x00404687\nMOV RDI,RBX\nCALL 0x004014a0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004013f0\nCMP RAX,-0x1\nJZ 0x004046b9\nMOV RDI,RBX\nCALL 0x004046d0\nTEST EAX,EAX\nJZ 0x004046b9\nCALL 0x004012e0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401350\nTEST EBP,EBP\nJZ 0x004046b2\nCALL 0x004012e0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401350\n'
p53
S'55\n53\n50\n48 89 fb\ne8 45 ce ff ff\n85 c0\n78 5a\n48 89 df\ne8 89 ce ff ff\n85 c0\n74 1c\n48 89 df\ne8 2d ce ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 6f cd ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 48 cc ff ff\n8b 28\n48 89 df\ne8 ae cc ff ff\n85 ed\n74 0c\ne8 35 cc ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 89 cc ff ff\n'
p54
S'.text:0000000000404650\n.text:0000000000404651\n.text:0000000000404652\n.text:0000000000404653\n.text:0000000000404656\n.text:000000000040465b\n.text:000000000040465d\n.text:000000000040465f\n.text:0000000000404662\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466b\n.text:000000000040466e\n.text:0000000000404673\n.text:0000000000404675\n.text:000000000040467a\n.text:000000000040467c\n.text:0000000000404681\n.text:0000000000404685\n.text:0000000000404687\n.text:000000000040468a\n.text:000000000040468f\n.text:0000000000404691\n.text:0000000000404693\n.text:0000000000404698\n.text:000000000040469a\n.text:000000000040469d\n.text:00000000004046a2\n.text:00000000004046a4\n.text:00000000004046a6\n.text:00000000004046ab\n.text:00000000004046ad\n.text:00000000004046b2\n.text:00000000004046b6\n.text:00000000004046b7\n.text:00000000004046b8\n.text:00000000004046b9\n.text:00000000004046bc\n.text:00000000004046c0\n.text:00000000004046c1\n.text:00000000004046c2\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00607048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00607048]\n'
p60
S'ff 25 32 5d 20 00\n'
p61
S'.plt:0000000000401310\n'
p62
tp63
sS'FUN_004012a0'
p64
(S'\n__stdcall FUN_004012a0()\n'
p65
V\u000avoid FUN_004012a0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00607010)();\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH qword ptr [0x00607008]\nJMP qword ptr [0x00607010]\n'
p67
S'ff 35 62 5d 20 00\nff 25 64 5d 20 00\n'
p68
S'.plt:00000000004012a0\n.plt:00000000004012a6\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00607038)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00607038]\n'
p74
S'ff 25 42 5d 20 00\n'
p75
S'.plt:00000000004012f0\n'
p76
tp77
sS'xnrealloc'
p78
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p79
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p80
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00403ba4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00403bb0\nPUSH RAX\nCALL 0x00403d00\n'
p81
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p82
S'.text:0000000000403b90\n.text:0000000000403b93\n.text:0000000000403b96\n.text:0000000000403b99\n.text:0000000000403b9b\n.text:0000000000403b9f\n.text:0000000000403ba2\n.text:0000000000403ba4\n.text:0000000000403ba5\n'
p83
tp84
sS'quote'
p85
(S'\n__stdcall quote(char * arg)\n'
p86
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403230\n'
p88
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p89
S'.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403245\n.text:0000000000403248\n'
p90
tp91
sS'emit_bug_reporting_address'
p92
(S'\n__stdcall emit_bug_reporting_address()\n'
p93
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405515\nMOV EDX,0x5\nCALL 0x00401380\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40552a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401530\nXOR EDI,EDI\nMOV ESI,0x405540\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4049e0\nMOV ECX,0x404ac2\nXOR EAX,EAX\nCALL 0x00401530\nXOR EDI,EDI\nMOV ESI,0x405554\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,qword ptr [0x00607268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401450\n'
p95
S'50\n31 ff\nbe 15 55 40 00\nba 05 00 00 00\ne8 9e d8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 2a 55 40 00\n31 c0\n48 89 ce\ne8 37 da ff ff\n31 ff\nbe 40 55 40 00\nba 05 00 00 00\ne8 76 d8 ff ff\n48 89 c6\nbf 01 00 00 00\nba e0 49 40 00\nb9 c2 4a 40 00\n31 c0\ne8 0d da ff ff\n31 ff\nbe 54 55 40 00\nba 05 00 00 00\ne8 4c d8 ff ff\n48 8b 35 2d 37 20 00\n48 89 c7\n58\ne9 0c d9 ff ff\n'
p96
S'.text:0000000000403ad0\n.text:0000000000403ad1\n.text:0000000000403ad3\n.text:0000000000403ad8\n.text:0000000000403add\n.text:0000000000403ae2\n.text:0000000000403ae5\n.text:0000000000403aea\n.text:0000000000403aef\n.text:0000000000403af1\n.text:0000000000403af4\n.text:0000000000403af9\n.text:0000000000403afb\n.text:0000000000403b00\n.text:0000000000403b05\n.text:0000000000403b0a\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b17\n.text:0000000000403b1c\n.text:0000000000403b1e\n.text:0000000000403b23\n.text:0000000000403b25\n.text:0000000000403b2a\n.text:0000000000403b2f\n.text:0000000000403b34\n.text:0000000000403b3b\n.text:0000000000403b3e\n.text:0000000000403b3f\n'
p97
tp98
sS'clone_quoting_options'
p99
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p100
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004012e0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6072d0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00403cb0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 89 fb\ne8 d4 f4 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 d0 72 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000401e00\n.text:0000000000401e01\n.text:0000000000401e03\n.text:0000000000401e04\n.text:0000000000401e07\n.text:0000000000401e0c\n.text:0000000000401e0f\n.text:0000000000401e12\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1e\n.text:0000000000401e23\n.text:0000000000401e26\n.text:0000000000401e2b\n.text:0000000000401e2e\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e32\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014b0\nTEST RBX,RBX\nJZ 0x00403b83\nTEST RAX,RAX\nJZ 0x00403b85\nPOP RBX\nRET\nCALL 0x00403d00\n'
p109
S'53\n48 89 fb\ne8 37 d9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:0000000000403b70\n.text:0000000000403b71\n.text:0000000000403b74\n.text:0000000000403b79\n.text:0000000000403b7c\n.text:0000000000403b7e\n.text:0000000000403b81\n.text:0000000000403b83\n.text:0000000000403b84\n.text:0000000000403b85\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00607300]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006072f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006072e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006072d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00401e60\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00402d50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 88 42 20 00\n48 89 4c 24 30\n0f 10 05 6c 42 20 00\n0f 29 44 24 20\n0f 10 05 50 42 20 00\n0f 29 44 24 10\n0f 10 05 34 42 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:0000000000403060\n.text:0000000000403062\n.text:0000000000403064\n.text:0000000000403065\n.text:0000000000403069\n.text:000000000040306b\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403078\n.text:000000000040307d\n.text:0000000000403084\n.text:0000000000403089\n.text:0000000000403090\n.text:0000000000403095\n.text:000000000040309c\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a8\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030b2\n.text:00000000004030b4\n.text:00000000004030b7\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030c2\n.text:00000000004030c6\n.text:00000000004030c7\n.text:00000000004030c9\n.text:00000000004030cb\n'
p118
tp119
sS'c_isgraph'
p120
(S'\n__stdcall c_isgraph()\n'
p121
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p122
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p123
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p124
S'.text:00000000004041f0\n.text:00000000004041f3\n.text:00000000004041f6\n.text:00000000004041f9\n'
p125
tp126
sS'sysconf'
p127
(S'\n__stdcall sysconf(int __name)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along sysconf(int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_sysconf_00607178)();\u000a  return lVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x00607178]\n'
p130
S'ff 25 02 5c 20 00\n'
p131
S'.plt:0000000000401570\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x0040170a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x606e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401700\nJMP 0x00401690\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016fb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401690\n'
p137
S'bf 18 6e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:00000000004016f0\n.text:00000000004016f5\n.text:00000000004016f9\n.text:00000000004016fb\n.text:0000000000401700\n.text:0000000000401705\n.text:0000000000401708\n.text:000000000040170a\n.text:000000000040170b\n.text:000000000040170e\n.text:0000000000401710\n.text:0000000000401711\n'
p139
tp140
sS'quotearg_buffer_restyled'
p141
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p142
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00401ffc_caseD_7;\u000a  case 2:\u000a    goto switchD_00401ffc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00401ffc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00401ffc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00401ffc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00401ffc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00401ffc_caseD_7;\u000aswitchD_00401ffc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00401ffc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00401ffc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00402ac0;\u000aLAB_004021e0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00402ac9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00402ad8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004021eb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040222f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040222f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00402ad8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00402a05;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00402910;\u000a    }\u000a    goto LAB_00402ad8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00402a3a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00402ad8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00402a69;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00402528;\u000a  case '\u005ca':\u000a    goto joined_r0x00402418;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00402418;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402246_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00402418;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00402418;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402246_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00402418:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040297e;\u000a    }\u000a    goto LAB_00402ad8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00402ad8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00402ad8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00402ad8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00402ad8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00402ad8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402246_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004029d6;\u000a      goto joined_r0x004029c8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004024d1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004029c8;\u000a      goto LAB_004029d6;\u000a    }\u000a    goto LAB_00402ad8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00402ad8;\u000a  }\u000a  goto joined_r0x00402910;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00402a3a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00402a69;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00402a69:\u000a  if (1 < uVar10) {\u000aLAB_00402546:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00402602;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004024d1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00402602:\u000a        if (bVar6 != 0) goto LAB_00402ad8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00402528:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00402546;\u000ajoined_r0x00402910:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00402910:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00402937;\u000aLAB_00402970:\u000a    if (bVar22) goto LAB_00402975;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00402970;\u000aLAB_00402937:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00402975:\u000a      if (bVar6 != 0) goto LAB_00402ad8;\u000aLAB_0040297e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004029c8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004029d6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004029c8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00402a05:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004021e0;\u000aLAB_00402ac0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00402ac9;\u000a  goto LAB_004021eb;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401390\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00402ba5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x404d20 + RAX*0x8]\nMOV EDI,0x405246\nMOV ESI,R15D\nCALL 0x00403250\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x405248\nMOV ESI,R15D\nCALL 0x00403250\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040205d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402060\nNOP\nCMP R12,RSI\nJNC 0x0040204e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402040\nJMP 0x00402060\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004013a0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040212c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040212c\nMOV ECX,0x405244\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402126\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004020c7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004020f4\nTEST RSI,RSI\nJZ 0x004020e1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x405248\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402102\nMOV ECX,0x405248\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040212c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00402b7c\nMOV ECX,0x405244\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00402ac0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00402ac9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040222f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040222a\nCMP R11,-0x1\nJNZ 0x0040222a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004013a0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402280\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004024dc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x404d78 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00402ad8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00402930\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00402937\nJMP 0x00402970\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401440\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004022cd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402231\nJMP 0x00402ad8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402231\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040225b\nCMP EBX,0x2\nJNZ 0x0040225b\nTEST R13,R13\nJNZ 0x0040225b\nJMP 0x00402ad8\nCMP R11,-0x1\nJZ 0x004026b3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004026d3\nJMP 0x0040225b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004026e4\nTEST R8B,R8B\nJNZ 0x00402ad8\nCMP EBX,0x2\nJNZ 0x00402388\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402388\nCMP R12,RSI\nJNC 0x00402363\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402372\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402381\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402392\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00402858\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00402858\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00402858\nCMP RCX,RSI\nJNC 0x004023cc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004023db\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nJMP 0x00402930\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402259\nJMP 0x0040243a\nMOV DL,0x74\nJMP 0x00402422\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402259\nJMP 0x0040243a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402259\nJMP 0x0040243a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00402ad8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402259\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040297e\nJMP 0x00402ad8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402259\nTEST R8B,R8B\nJNZ 0x00402ad8\nCMP R12,RSI\nJNC 0x0040246a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402479\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402488\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402259\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040286b\nCMP EBX,0x2\nJNZ 0x00402259\nTEST R8B,R8B\nJZ 0x00402259\nJMP 0x00402ad8\nCMP EBX,0x2\nJNZ 0x00402704\nTEST R8B,R8B\nJNZ 0x00402ad8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004029d6\nJMP 0x004029f9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00402725\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401610\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402918\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00402918\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00402602\nJMP 0x004025d0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004025b9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004025b6\nCMP R12,RSI\nJNC 0x0040259b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004025aa\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004025f0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004025f0\nTEST BPL,0x1\nJZ 0x00402693\nCMP R12,RSI\nJNC 0x004025e4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00402693\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004025d0\nTEST R8B,R8B\nJNZ 0x00402ad8\nCMP EBX,0x2\nJNZ 0x0040264a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040264a\nCMP R12,RSI\nJNC 0x00402622\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402631\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402640\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00402654\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040266b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402685\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00402580\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004029d6\nJMP 0x004029f9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040225b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040225b\nJMP 0x00402ad8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00402a05\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nJMP 0x00402930\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00402422\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004029d6\nJMP 0x004029f9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00402747\nMOV RDI,R10\nCALL 0x004013a0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004013c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00402a1f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00402a17\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00402a26\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040280e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00402806\nBT RDI,RDX\nJC 0x00402b72\nINC RCX\nCMP RCX,R14\nJC 0x004027f0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401600\nTEST EAX,EAX\nJNZ 0x00402823\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004015f0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00402765\nJMP 0x00402a69\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nJMP 0x00402930\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402259\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402259\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402259\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040225b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00402aa2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00402ad8\nCMP R12,RSI\nJNC 0x004028ce\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004028e1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004028f0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004028ff\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nJMP 0x00402930\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00402970\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00402975\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004029d0\nJMP 0x00402975\nTEST BPL,BPL\nJZ 0x004029d0\nTEST R8B,R8B\nJNZ 0x00402ad8\nCMP EBX,0x2\nJNZ 0x004029b8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004029b8\nCMP R12,RSI\nJNC 0x00402993\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004029a2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004029b1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004029c2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00402a02\nJMP 0x004029fe\nTEST DIL,0x1\nJZ 0x004029f9\nAND AL,0x1\nJNZ 0x004029f9\nCMP R12,RSI\nJNC 0x004029e4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004029f3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00402a02\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00402ac0\nJMP 0x004021e0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00402a64\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00402a5c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00402a98\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00402a3a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00402a69\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00402528\nJMP 0x00402546\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00402a69\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402266\nJMP 0x00402930\nCMP R13,R11\nJNZ 0x004021eb\nTEST R8B,R8B\nJZ 0x00402b32\nCMP EBX,0x2\nJNZ 0x00402b32\nTEST R12,R12\nJNZ 0x00402b32\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00401f70\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00402b66\nTEST R8B,R8B\nJNZ 0x00402b66\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00402b66\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00402b59\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00402b50\nCMP R12,RSI\nJNC 0x00402b1d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00402b1d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00402ad8\nTEST RSI,RSI\nJZ 0x00402b89\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x405244\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040212c\nCALL 0x004012d0\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 f2 f3 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 20 4d 40 00\nbf 46 52 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 48 52 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 33 f3 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 44 52 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 48 52 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 48 52 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 44 52 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 93 f1 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 78 4d 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 a7 f1 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 17 f1 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 61 ec ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 33 ec ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 e9 ed ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 b2 ed ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 44 52 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 26 e7 ff ff\n'
p145
S'.text:0000000000401f70\n.text:0000000000401f71\n.text:0000000000401f73\n.text:0000000000401f75\n.text:0000000000401f77\n.text:0000000000401f79\n.text:0000000000401f7a\n.text:0000000000401f81\n.text:0000000000401f84\n.text:0000000000401f87\n.text:0000000000401f8a\n.text:0000000000401f8f\n.text:0000000000401f94\n.text:0000000000401f99\n.text:0000000000401f9e\n.text:0000000000401fa6\n.text:0000000000401faa\n.text:0000000000401fb0\n.text:0000000000401fb8\n.text:0000000000401fbd\n.text:0000000000401fc5\n.text:0000000000401fca\n.text:0000000000401fce\n.text:0000000000401fd0\n.text:0000000000401fd3\n.text:0000000000401fd6\n.text:0000000000401fd9\n.text:0000000000401fde\n.text:0000000000401fe1\n.text:0000000000401fe4\n.text:0000000000401fe7\n.text:0000000000401fea\n.text:0000000000401fec\n.text:0000000000401fef\n.text:0000000000401ff4\n.text:0000000000401ff7\n.text:0000000000401ffc\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402015\n.text:000000000040201a\n.text:000000000040201d\n.text:0000000000402022\n.text:0000000000402027\n.text:000000000040202c\n.text:000000000040202e\n.text:0000000000402030\n.text:0000000000402035\n.text:0000000000402037\n.text:000000000040203a\n.text:000000000040203c\n.text:000000000040203e\n.text:0000000000402040\n.text:0000000000402043\n.text:0000000000402045\n.text:000000000040204a\n.text:000000000040204e\n.text:0000000000402054\n.text:0000000000402057\n.text:0000000000402059\n.text:000000000040205b\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402068\n.text:000000000040206d\n.text:0000000000402072\n.text:0000000000402075\n.text:0000000000402078\n.text:000000000040207b\n.text:000000000040207e\n.text:0000000000402083\n.text:0000000000402086\n.text:0000000000402089\n.text:000000000040208e\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402096\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209d\n.text:00000000004020a2\n.text:00000000004020a7\n.text:00000000004020ac\n.text:00000000004020af\n.text:00000000004020b5\n.text:00000000004020b7\n.text:00000000004020ba\n.text:00000000004020bd\n.text:00000000004020c0\n.text:00000000004020c2\n.text:00000000004020c4\n.text:00000000004020c7\n.text:00000000004020ca\n.text:00000000004020cf\n.text:00000000004020d2\n.text:00000000004020d4\n.text:00000000004020d7\n.text:00000000004020d9\n.text:00000000004020de\n.text:00000000004020e1\n.text:00000000004020e6\n.text:00000000004020ec\n.text:00000000004020f2\n.text:00000000004020f4\n.text:00000000004020f9\n.text:00000000004020ff\n.text:0000000000402102\n.text:0000000000402105\n.text:0000000000402108\n.text:000000000040210a\n.text:000000000040210f\n.text:0000000000402112\n.text:0000000000402118\n.text:000000000040211d\n.text:0000000000402123\n.text:0000000000402126\n.text:0000000000402129\n.text:000000000040212c\n.text:0000000000402134\n.text:0000000000402136\n.text:0000000000402138\n.text:000000000040213b\n.text:000000000040213f\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402148\n.text:000000000040214a\n.text:000000000040214d\n.text:0000000000402150\n.text:0000000000402153\n.text:0000000000402155\n.text:0000000000402159\n.text:000000000040215b\n.text:000000000040215f\n.text:0000000000402162\n.text:0000000000402165\n.text:0000000000402168\n.text:000000000040216a\n.text:000000000040216e\n.text:0000000000402177\n.text:000000000040217a\n.text:000000000040217c\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402186\n.text:0000000000402188\n.text:000000000040218b\n.text:000000000040218f\n.text:0000000000402191\n.text:0000000000402194\n.text:0000000000402198\n.text:000000000040219d\n.text:00000000004021a0\n.text:00000000004021a4\n.text:00000000004021ac\n.text:00000000004021af\n.text:00000000004021b2\n.text:00000000004021b4\n.text:00000000004021b8\n.text:00000000004021bb\n.text:00000000004021bd\n.text:00000000004021c2\n.text:00000000004021c6\n.text:00000000004021cb\n.text:00000000004021d0\n.text:00000000004021d4\n.text:00000000004021da\n.text:00000000004021e0\n.text:00000000004021e5\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fb\n.text:00000000004021fd\n.text:0000000000402201\n.text:0000000000402203\n.text:0000000000402205\n.text:0000000000402208\n.text:000000000040220d\n.text:000000000040220f\n.text:0000000000402214\n.text:0000000000402219\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402227\n.text:000000000040222a\n.text:000000000040222d\n.text:000000000040222f\n.text:0000000000402231\n.text:0000000000402236\n.text:000000000040223a\n.text:0000000000402240\n.text:0000000000402242\n.text:0000000000402244\n.text:0000000000402246\n.text:000000000040224e\n.text:0000000000402253\n.text:0000000000402259\n.text:000000000040225b\n.text:0000000000402260\n.text:0000000000402266\n.text:000000000040226f\n.text:0000000000402275\n.text:0000000000402280\n.text:0000000000402282\n.text:0000000000402285\n.text:0000000000402289\n.text:0000000000402291\n.text:0000000000402294\n.text:0000000000402299\n.text:000000000040229b\n.text:000000000040229e\n.text:00000000004022a0\n.text:00000000004022a5\n.text:00000000004022a8\n.text:00000000004022ad\n.text:00000000004022b0\n.text:00000000004022b5\n.text:00000000004022b9\n.text:00000000004022be\n.text:00000000004022c0\n.text:00000000004022c2\n.text:00000000004022c8\n.text:00000000004022cd\n.text:00000000004022d2\n.text:00000000004022d5\n.text:00000000004022da\n.text:00000000004022de\n.text:00000000004022e3\n.text:00000000004022e8\n.text:00000000004022ea\n.text:00000000004022ec\n.text:00000000004022f1\n.text:00000000004022f3\n.text:00000000004022f6\n.text:00000000004022fc\n.text:00000000004022ff\n.text:0000000000402305\n.text:0000000000402308\n.text:000000000040230e\n.text:0000000000402313\n.text:0000000000402317\n.text:000000000040231d\n.text:0000000000402320\n.text:0000000000402323\n.text:0000000000402327\n.text:000000000040232a\n.text:000000000040232c\n.text:000000000040232f\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402345\n.text:0000000000402348\n.text:000000000040234e\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235c\n.text:000000000040235e\n.text:0000000000402363\n.text:0000000000402368\n.text:000000000040236b\n.text:000000000040236d\n.text:0000000000402372\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237c\n.text:0000000000402381\n.text:0000000000402385\n.text:0000000000402388\n.text:000000000040238b\n.text:000000000040238d\n.text:0000000000402392\n.text:0000000000402397\n.text:0000000000402399\n.text:000000000040239c\n.text:000000000040239f\n.text:00000000004023a5\n.text:00000000004023a9\n.text:00000000004023ac\n.text:00000000004023b2\n.text:00000000004023b6\n.text:00000000004023b9\n.text:00000000004023bc\n.text:00000000004023c2\n.text:00000000004023c5\n.text:00000000004023c7\n.text:00000000004023cc\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023db\n.text:00000000004023df\n.text:00000000004023e4\n.text:00000000004023ea\n.text:00000000004023ef\n.text:00000000004023f1\n.text:00000000004023f6\n.text:00000000004023fc\n.text:00000000004023fe\n.text:0000000000402400\n.text:0000000000402402\n.text:0000000000402404\n.text:0000000000402409\n.text:000000000040240f\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241e\n.text:0000000000402420\n.text:0000000000402422\n.text:0000000000402427\n.text:0000000000402429\n.text:000000000040242f\n.text:0000000000402434\n.text:000000000040243a\n.text:000000000040243d\n.text:0000000000402440\n.text:0000000000402446\n.text:000000000040244b\n.text:000000000040244e\n.text:0000000000402451\n.text:0000000000402457\n.text:000000000040245a\n.text:0000000000402460\n.text:0000000000402463\n.text:0000000000402465\n.text:000000000040246a\n.text:000000000040246f\n.text:0000000000402472\n.text:0000000000402474\n.text:0000000000402479\n.text:000000000040247e\n.text:0000000000402481\n.text:0000000000402483\n.text:0000000000402488\n.text:000000000040248c\n.text:000000000040248e\n.text:0000000000402493\n.text:0000000000402496\n.text:0000000000402499\n.text:000000000040249f\n.text:00000000004024a2\n.text:00000000004024a8\n.text:00000000004024ab\n.text:00000000004024b1\n.text:00000000004024b6\n.text:00000000004024b9\n.text:00000000004024bf\n.text:00000000004024c2\n.text:00000000004024c8\n.text:00000000004024cb\n.text:00000000004024cd\n.text:00000000004024d1\n.text:00000000004024d7\n.text:00000000004024dc\n.text:00000000004024e0\n.text:00000000004024e9\n.text:00000000004024ef\n.text:00000000004024f4\n.text:00000000004024f9\n.text:00000000004024fe\n.text:0000000000402501\n.text:0000000000402506\n.text:0000000000402509\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402516\n.text:000000000040251a\n.text:000000000040251f\n.text:0000000000402524\n.text:0000000000402528\n.text:000000000040252a\n.text:000000000040252f\n.text:0000000000402535\n.text:0000000000402538\n.text:000000000040253a\n.text:000000000040253d\n.text:0000000000402540\n.text:0000000000402546\n.text:000000000040254b\n.text:000000000040254e\n.text:0000000000402551\n.text:0000000000402554\n.text:0000000000402557\n.text:0000000000402559\n.text:000000000040255d\n.text:000000000040255f\n.text:0000000000402564\n.text:0000000000402569\n.text:000000000040256f\n.text:0000000000402580\n.text:0000000000402585\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258c\n.text:000000000040258f\n.text:0000000000402591\n.text:0000000000402594\n.text:0000000000402596\n.text:000000000040259b\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a5\n.text:00000000004025aa\n.text:00000000004025ae\n.text:00000000004025b6\n.text:00000000004025b9\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c2\n.text:00000000004025d0\n.text:00000000004025d4\n.text:00000000004025da\n.text:00000000004025dd\n.text:00000000004025df\n.text:00000000004025e4\n.text:00000000004025e7\n.text:00000000004025e9\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fb\n.text:0000000000402600\n.text:0000000000402602\n.text:0000000000402605\n.text:000000000040260b\n.text:000000000040260e\n.text:0000000000402610\n.text:0000000000402614\n.text:0000000000402616\n.text:0000000000402618\n.text:000000000040261b\n.text:000000000040261d\n.text:0000000000402622\n.text:0000000000402627\n.text:000000000040262a\n.text:000000000040262c\n.text:0000000000402631\n.text:0000000000402636\n.text:0000000000402639\n.text:000000000040263b\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402646\n.text:000000000040264a\n.text:000000000040264d\n.text:000000000040264f\n.text:0000000000402654\n.text:0000000000402659\n.text:000000000040265c\n.text:000000000040265e\n.text:0000000000402661\n.text:0000000000402664\n.text:0000000000402667\n.text:000000000040266b\n.text:0000000000402670\n.text:0000000000402673\n.text:0000000000402675\n.text:0000000000402678\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402681\n.text:0000000000402685\n.text:0000000000402689\n.text:000000000040268d\n.text:0000000000402691\n.text:0000000000402693\n.text:0000000000402697\n.text:000000000040269a\n.text:00000000004026a0\n.text:00000000004026a4\n.text:00000000004026a8\n.text:00000000004026ae\n.text:00000000004026b3\n.text:00000000004026b6\n.text:00000000004026b9\n.text:00000000004026be\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c6\n.text:00000000004026cd\n.text:00000000004026d3\n.text:00000000004026d5\n.text:00000000004026d9\n.text:00000000004026df\n.text:00000000004026e4\n.text:00000000004026e9\n.text:00000000004026ef\n.text:00000000004026f2\n.text:00000000004026f4\n.text:00000000004026f9\n.text:00000000004026ff\n.text:0000000000402704\n.text:0000000000402706\n.text:000000000040270b\n.text:0000000000402711\n.text:0000000000402713\n.text:0000000000402716\n.text:000000000040271a\n.text:0000000000402720\n.text:0000000000402725\n.text:0000000000402731\n.text:0000000000402735\n.text:0000000000402737\n.text:000000000040273a\n.text:000000000040273f\n.text:0000000000402744\n.text:0000000000402747\n.text:000000000040274b\n.text:0000000000402750\n.text:0000000000402752\n.text:0000000000402756\n.text:0000000000402758\n.text:0000000000402760\n.text:0000000000402765\n.text:000000000040276a\n.text:000000000040276e\n.text:0000000000402772\n.text:000000000040277a\n.text:000000000040277d\n.text:0000000000402782\n.text:0000000000402785\n.text:0000000000402788\n.text:000000000040278d\n.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402799\n.text:000000000040279d\n.text:00000000004027a7\n.text:00000000004027ad\n.text:00000000004027b1\n.text:00000000004027b6\n.text:00000000004027bc\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c7\n.text:00000000004027c9\n.text:00000000004027ce\n.text:00000000004027d3\n.text:00000000004027d7\n.text:00000000004027d9\n.text:00000000004027de\n.text:00000000004027e3\n.text:00000000004027e7\n.text:00000000004027ec\n.text:00000000004027f0\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027fa\n.text:00000000004027fc\n.text:0000000000402800\n.text:0000000000402806\n.text:0000000000402809\n.text:000000000040280c\n.text:000000000040280e\n.text:0000000000402812\n.text:0000000000402817\n.text:0000000000402819\n.text:000000000040281b\n.text:0000000000402823\n.text:0000000000402828\n.text:000000000040282b\n.text:0000000000402833\n.text:0000000000402836\n.text:0000000000402839\n.text:000000000040283e\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402848\n.text:000000000040284d\n.text:0000000000402853\n.text:0000000000402858\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402866\n.text:000000000040286b\n.text:0000000000402870\n.text:0000000000402876\n.text:000000000040287a\n.text:000000000040287d\n.text:0000000000402883\n.text:0000000000402889\n.text:000000000040288f\n.text:0000000000402894\n.text:0000000000402896\n.text:0000000000402899\n.text:000000000040289f\n.text:00000000004028a3\n.text:00000000004028a5\n.text:00000000004028af\n.text:00000000004028b3\n.text:00000000004028b9\n.text:00000000004028bc\n.text:00000000004028be\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d6\n.text:00000000004028da\n.text:00000000004028dc\n.text:00000000004028e1\n.text:00000000004028e6\n.text:00000000004028e9\n.text:00000000004028eb\n.text:00000000004028f0\n.text:00000000004028f5\n.text:00000000004028f8\n.text:00000000004028fa\n.text:00000000004028ff\n.text:0000000000402903\n.text:0000000000402905\n.text:0000000000402908\n.text:000000000040290b\n.text:0000000000402910\n.text:0000000000402916\n.text:0000000000402918\n.text:000000000040291d\n.text:0000000000402922\n.text:0000000000402928\n.text:0000000000402930\n.text:0000000000402935\n.text:0000000000402937\n.text:000000000040293c\n.text:000000000040293f\n.text:0000000000402941\n.text:0000000000402944\n.text:0000000000402946\n.text:0000000000402949\n.text:000000000040294c\n.text:000000000040294f\n.text:0000000000402951\n.text:0000000000402959\n.text:000000000040295c\n.text:000000000040295e\n.text:0000000000402960\n.text:0000000000402970\n.text:0000000000402973\n.text:0000000000402975\n.text:0000000000402978\n.text:000000000040297e\n.text:0000000000402981\n.text:0000000000402983\n.text:0000000000402985\n.text:0000000000402987\n.text:0000000000402989\n.text:000000000040298c\n.text:000000000040298e\n.text:0000000000402993\n.text:0000000000402998\n.text:000000000040299b\n.text:000000000040299d\n.text:00000000004029a2\n.text:00000000004029a7\n.text:00000000004029aa\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b5\n.text:00000000004029b8\n.text:00000000004029bb\n.text:00000000004029bd\n.text:00000000004029c2\n.text:00000000004029c5\n.text:00000000004029c8\n.text:00000000004029ca\n.text:00000000004029d0\n.text:00000000004029d4\n.text:00000000004029d6\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029df\n.text:00000000004029e4\n.text:00000000004029e9\n.text:00000000004029ec\n.text:00000000004029ee\n.text:00000000004029f3\n.text:00000000004029f7\n.text:00000000004029f9\n.text:00000000004029fc\n.text:00000000004029fe\n.text:0000000000402a02\n.text:0000000000402a05\n.text:0000000000402a08\n.text:0000000000402a0c\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a26\n.text:0000000000402a2e\n.text:0000000000402a33\n.text:0000000000402a35\n.text:0000000000402a3a\n.text:0000000000402a3f\n.text:0000000000402a43\n.text:0000000000402a45\n.text:0000000000402a4a\n.text:0000000000402a4d\n.text:0000000000402a50\n.text:0000000000402a52\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6d\n.text:0000000000402a72\n.text:0000000000402a77\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a89\n.text:0000000000402a8d\n.text:0000000000402a93\n.text:0000000000402a98\n.text:0000000000402aa0\n.text:0000000000402aa2\n.text:0000000000402aa4\n.text:0000000000402aa8\n.text:0000000000402aad\n.text:0000000000402ab3\n.text:0000000000402ac0\n.text:0000000000402ac3\n.text:0000000000402ac9\n.text:0000000000402acc\n.text:0000000000402ace\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad6\n.text:0000000000402ad8\n.text:0000000000402ae0\n.text:0000000000402ae6\n.text:0000000000402aea\n.text:0000000000402aed\n.text:0000000000402af1\n.text:0000000000402af6\n.text:0000000000402afa\n.text:0000000000402afe\n.text:0000000000402b01\n.text:0000000000402b04\n.text:0000000000402b07\n.text:0000000000402b0b\n.text:0000000000402b0f\n.text:0000000000402b11\n.text:0000000000402b16\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b20\n.text:0000000000402b27\n.text:0000000000402b28\n.text:0000000000402b2a\n.text:0000000000402b2c\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b31\n.text:0000000000402b32\n.text:0000000000402b3a\n.text:0000000000402b3d\n.text:0000000000402b3f\n.text:0000000000402b42\n.text:0000000000402b44\n.text:0000000000402b46\n.text:0000000000402b48\n.text:0000000000402b4a\n.text:0000000000402b4d\n.text:0000000000402b50\n.text:0000000000402b53\n.text:0000000000402b55\n.text:0000000000402b59\n.text:0000000000402b5c\n.text:0000000000402b5f\n.text:0000000000402b62\n.text:0000000000402b64\n.text:0000000000402b66\n.text:0000000000402b69\n.text:0000000000402b6b\n.text:0000000000402b70\n.text:0000000000402b72\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b7f\n.text:0000000000402b81\n.text:0000000000402b86\n.text:0000000000402b89\n.text:0000000000402b8e\n.text:0000000000402b91\n.text:0000000000402b97\n.text:0000000000402b9d\n.text:0000000000402ba0\n.text:0000000000402ba5\n'
p146
tp147
sS'set_quoting_style'
p148
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p149
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p150
S'TEST RDI,RDI\nMOV EAX,0x6072d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p151
S'48 85 ff\nb8 d0 72 60 00\n48 0f 45 c7\n89 30\nc3\n'
p152
S'.text:0000000000401e50\n.text:0000000000401e53\n.text:0000000000401e58\n.text:0000000000401e5c\n.text:0000000000401e5e\n'
p153
tp154
sS'quotearg_n_style_colon'
p155
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p156
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00402f80\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00401e60\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00402d50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p158
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p159
S'.text:0000000000403100\n.text:0000000000403101\n.text:0000000000403103\n.text:0000000000403104\n.text:0000000000403108\n.text:000000000040310b\n.text:000000000040310d\n.text:0000000000403112\n.text:0000000000403115\n.text:000000000040311a\n.text:000000000040311f\n.text:0000000000403124\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403133\n.text:0000000000403135\n.text:0000000000403138\n.text:000000000040313b\n.text:0000000000403140\n.text:0000000000403144\n.text:0000000000403145\n.text:0000000000403147\n.text:0000000000403148\n'
p160
tp161
sS'textdomain'
p162
(S'\n__stdcall textdomain()\n'
p163
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00607060)();\u000a  return;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x00607060]\n'
p165
S'ff 25 1a 5d 20 00\n'
p166
S'.plt:0000000000401340\n'
p167
tp168
sS'xmemdup'
p169
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p170
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p171
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00403b70\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401490\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p172
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 bc d7 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p173
S'.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb4\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbb\n.text:0000000000403cbe\n.text:0000000000403cc3\n.text:0000000000403cc6\n.text:0000000000403cc9\n.text:0000000000403ccc\n.text:0000000000403ccf\n.text:0000000000403cd4\n.text:0000000000403cd7\n.text:0000000000403cd8\n.text:0000000000403cda\n.text:0000000000403cdc\n'
p174
tp175
sS'get_quoting_style'
p176
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p177
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x6072d0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p179
S'48 85 ff\nb8 d0 72 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p180
S'.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e4c\n.text:0000000000401e4e\n'
p181
tp182
sS'ferror_unlocked'
p183
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_006070f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x006070f0]\n'
p186
S'ff 25 8a 5c 20 00\n'
p187
S'.plt:0000000000401460\n'
p188
tp189
sS'exit'
p190
(S'\n__stdcall exit(int __status)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00607198)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00607198]\n'
p193
S'ff 25 e2 5b 20 00\n'
p194
S'.plt:00000000004015b0\n'
p195
tp196
sS'quote_mem'
p197
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403210\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p201
S'.text:0000000000403220\n.text:0000000000403223\n.text:0000000000403226\n.text:0000000000403228\n.text:000000000040322b\n.text:000000000040322e\n'
p202
tp203
sS'locale_charset'
p204
(S'\n__stdcall locale_charset()\n'
p205
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040439d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040439d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004014d0\nTEST RAX,RAX\nMOV R14D,0x405399\nCMOVNZ R14,RAX\nCALL 0x004043b0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00404375\nJMP 0x0040439d\nMOV RDI,RBX\nCALL 0x004013a0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004013a0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040439d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401480\nTEST EAX,EAX\nJZ 0x00404390\nCMP BPL,0x2a\nJNZ 0x00404350\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00404350\nMOV RDI,RBX\nCALL 0x004013a0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x405c30\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p207
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 a2 d1 ff ff\n48 85 c0\n41 be 99 53 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 48 d0 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 3a d0 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 00 d1 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 08 d0 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 30 5c 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p208
S'.text:0000000000404320\n.text:0000000000404321\n.text:0000000000404323\n.text:0000000000404324\n.text:0000000000404329\n.text:000000000040432e\n.text:0000000000404331\n.text:0000000000404337\n.text:000000000040433b\n.text:0000000000404340\n.text:0000000000404343\n.text:0000000000404346\n.text:0000000000404349\n.text:000000000040434b\n.text:0000000000404350\n.text:0000000000404353\n.text:0000000000404358\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404366\n.text:000000000040436b\n.text:0000000000404370\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437b\n.text:0000000000404380\n.text:0000000000404382\n.text:0000000000404384\n.text:0000000000404388\n.text:000000000040438a\n.text:000000000040438e\n.text:0000000000404390\n.text:0000000000404393\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a1\n.text:00000000004043a6\n.text:00000000004043aa\n.text:00000000004043ab\n.text:00000000004043ad\n.text:00000000004043ae\n'
p209
tp210
sS'set_program_name'
p211
(S'\n__stdcall set_program_name(char * argv0)\n'
p212
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00401dd1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004013e0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00401dbb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x404d10\nMOV EDX,0x7\nCALL 0x004012f0\nTEST EAX,EAX\nJNZ 0x00401dbb\nMOV ESI,0x404d18\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004012f0\nTEST EAX,EAX\nJNZ 0x00401db8\nADD R14,0x3\nMOV qword ptr [0x00607260],R14\nMOV RBX,R14\nMOV qword ptr [0x006072c0],RBX\nMOV qword ptr [0x00607280],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006072a0]\nMOV EDI,0x404cd8\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004015c0\nCALL 0x004012d0\n'
p214
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 77 f6 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 10 4d 40 00\nba 07 00 00 00\ne8 5d f5 ff ff\n85 c0\n75 24\nbe 18 4d 40 00\nba 03 00 00 00\n4c 89 f7\ne8 47 f5 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 a8 54 20 00\n4c 89 f3\n48 89 1d fe 54 20 00\n48 89 1d b7 54 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d c8 54 20 00\nbf d8 4c 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 d4 f7 ff ff\ne8 df f4 ff ff\n'
p215
S'.text:0000000000401d50\n.text:0000000000401d52\n.text:0000000000401d53\n.text:0000000000401d54\n.text:0000000000401d57\n.text:0000000000401d5a\n.text:0000000000401d5c\n.text:0000000000401d61\n.text:0000000000401d64\n.text:0000000000401d69\n.text:0000000000401d6c\n.text:0000000000401d70\n.text:0000000000401d74\n.text:0000000000401d77\n.text:0000000000401d7a\n.text:0000000000401d7e\n.text:0000000000401d80\n.text:0000000000401d84\n.text:0000000000401d89\n.text:0000000000401d8e\n.text:0000000000401d93\n.text:0000000000401d95\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da4\n.text:0000000000401da9\n.text:0000000000401dab\n.text:0000000000401dad\n.text:0000000000401db1\n.text:0000000000401db8\n.text:0000000000401dbb\n.text:0000000000401dc2\n.text:0000000000401dc9\n.text:0000000000401dcd\n.text:0000000000401dce\n.text:0000000000401dd0\n.text:0000000000401dd1\n.text:0000000000401dd8\n.text:0000000000401ddd\n.text:0000000000401de2\n.text:0000000000401de7\n.text:0000000000401dec\n'
p216
tp217
sS'fileno'
p218
(S'\n__stdcall fileno(FILE * __stream)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00607110)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x00607110]\n'
p221
S'ff 25 6a 5c 20 00\n'
p222
S'.plt:00000000004014a0\n'
p223
tp224
sS'quotearg_buffer'
p225
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p226
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6072d0\nCMOVNZ RBP,R8\nCALL 0x004012e0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00401f70\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p228
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd d0 72 60 00\n49 0f 45 e8\ne8 c8 f3 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p229
S'.text:0000000000401ef0\n.text:0000000000401ef1\n.text:0000000000401ef3\n.text:0000000000401ef5\n.text:0000000000401ef7\n.text:0000000000401ef9\n.text:0000000000401efa\n.text:0000000000401efb\n.text:0000000000401efe\n.text:0000000000401f01\n.text:0000000000401f04\n.text:0000000000401f07\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f21\n.text:0000000000401f25\n.text:0000000000401f29\n.text:0000000000401f2d\n.text:0000000000401f30\n.text:0000000000401f33\n.text:0000000000401f36\n.text:0000000000401f39\n.text:0000000000401f3c\n.text:0000000000401f3f\n.text:0000000000401f43\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f4d\n.text:0000000000401f51\n.text:0000000000401f53\n.text:0000000000401f57\n.text:0000000000401f58\n.text:0000000000401f5a\n.text:0000000000401f5c\n.text:0000000000401f5e\n.text:0000000000401f60\n.text:0000000000401f61\n'
p230
tp231
sS'quotearg_colon'
p232
(S'\n__stdcall quotearg_colon(char * arg)\n'
p233
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV ESI,0x3a\nJMP 0x004030d0\n'
p235
S'be 3a 00 00 00\neb e9\n'
p236
S'.text:00000000004030e0\n.text:00000000004030e5\n'
p237
tp238
sS'mbrtowc'
p239
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006070a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x006070a0]\n'
p242
S'ff 25 da 5c 20 00\n'
p243
S'.plt:00000000004013c0\n'
p244
tp245
sS'xstrtoumax'
p246
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p247
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404066;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404066;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00403f95_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00403f73:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00403f73;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404047;\u000a  default:\u000aswitchD_00403f95_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404047;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404047:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404066:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404083\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004012e0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401610\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00403e80\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404072\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401580\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00403ee0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00403f11\nCMP EAX,0x22\nJNZ 0x00404072\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00403f1c\nJMP 0x00404066\nTEST R12,R12\nJZ 0x00404072\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404072\nMOV RDI,R12\nCALL 0x004013d0\nTEST RAX,RAX\nJZ 0x00404072\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00403f1c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404066\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404066\nMOV RDI,R12\nCALL 0x004013d0\nTEST RAX,RAX\nJZ 0x00403fae\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004013d0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00403f73\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00403f7a\nCMP EAX,0x44\nJZ 0x00403f7a\nCMP EAX,0x69\nJNZ 0x00403f73\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00403f84\nMOV EBP,0x1\nJMP 0x00403f84\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00403fae\nXOR EAX,EAX\nJMP qword ptr [0x4055e0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404072\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404047\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x004040d0\nJMP 0x0040404c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404047\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004040a0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x405790\nMOV ESI,0x4057b6\nMOV EDX,0x60\nMOV ECX,0x4057c6\nCALL 0x00401400\n'
p249
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 82 d4 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 a3 d7 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 cc d6 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 d4 d4 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 9c d4 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 8a d4 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd e0 55 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 90 57 40 00\nbe b6 57 40 00\nba 60 00 00 00\nb9 c6 57 40 00\ne8 64 d3 ff ff\n'
p250
S'.text:0000000000403e30\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e35\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3a\n.text:0000000000403e3e\n.text:0000000000403e41\n.text:0000000000403e44\n.text:0000000000403e47\n.text:0000000000403e4a\n.text:0000000000403e4e\n.text:0000000000403e54\n.text:0000000000403e59\n.text:0000000000403e5e\n.text:0000000000403e61\n.text:0000000000403e68\n.text:0000000000403e6d\n.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e80\n.text:0000000000403e83\n.text:0000000000403e86\n.text:0000000000403e8b\n.text:0000000000403e8d\n.text:0000000000403e90\n.text:0000000000403e95\n.text:0000000000403e99\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea6\n.text:0000000000403ea9\n.text:0000000000403eac\n.text:0000000000403eaf\n.text:0000000000403eb4\n.text:0000000000403eb8\n.text:0000000000403ebc\n.text:0000000000403ebf\n.text:0000000000403ec1\n.text:0000000000403ec4\n.text:0000000000403ec6\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ed1\n.text:0000000000403ed6\n.text:0000000000403ed9\n.text:0000000000403edb\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403eee\n.text:0000000000403ef4\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f05\n.text:0000000000403f0d\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f1c\n.text:0000000000403f20\n.text:0000000000403f24\n.text:0000000000403f26\n.text:0000000000403f2c\n.text:0000000000403f2f\n.text:0000000000403f34\n.text:0000000000403f37\n.text:0000000000403f39\n.text:0000000000403f3e\n.text:0000000000403f41\n.text:0000000000403f46\n.text:0000000000403f4b\n.text:0000000000403f4e\n.text:0000000000403f50\n.text:0000000000403f54\n.text:0000000000403f57\n.text:0000000000403f59\n.text:0000000000403f5c\n.text:0000000000403f5e\n.text:0000000000403f61\n.text:0000000000403f63\n.text:0000000000403f65\n.text:0000000000403f69\n.text:0000000000403f6c\n.text:0000000000403f71\n.text:0000000000403f73\n.text:0000000000403f78\n.text:0000000000403f7a\n.text:0000000000403f7f\n.text:0000000000403f84\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f8e\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f9c\n.text:0000000000403f9f\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fae\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbd\n.text:0000000000403fc2\n.text:0000000000403fc5\n.text:0000000000403fca\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd9\n.text:0000000000403fde\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe8\n.text:0000000000403fed\n.text:0000000000403fef\n.text:0000000000403ff2\n.text:0000000000403ff7\n.text:0000000000403ff9\n.text:0000000000403ffc\n.text:0000000000404001\n.text:0000000000404006\n.text:0000000000404008\n.text:000000000040400b\n.text:0000000000404010\n.text:0000000000404015\n.text:0000000000404017\n.text:000000000040401a\n.text:000000000040401f\n.text:0000000000404024\n.text:0000000000404026\n.text:0000000000404029\n.text:000000000040402e\n.text:0000000000404033\n.text:0000000000404035\n.text:0000000000404038\n.text:000000000040403d\n.text:000000000040403f\n.text:0000000000404042\n.text:0000000000404047\n.text:000000000040404c\n.text:000000000040404e\n.text:0000000000404052\n.text:0000000000404056\n.text:000000000040405a\n.text:000000000040405c\n.text:000000000040405f\n.text:0000000000404063\n.text:0000000000404066\n.text:000000000040406a\n.text:000000000040406f\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404078\n.text:0000000000404079\n.text:000000000040407b\n.text:000000000040407d\n.text:000000000040407f\n.text:0000000000404081\n.text:0000000000404082\n.text:0000000000404083\n.text:0000000000404088\n.text:000000000040408d\n.text:0000000000404092\n.text:0000000000404097\n'
p251
tp252
sS'rpl_fflush'
p253
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p254
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00607120)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004046ed\nMOV RDI,RBX\nCALL 0x004014f0\nTEST EAX,EAX\nJZ 0x004046ed\nMOV RDI,RBX\nCALL 0x00404700\nMOV RDI,RBX\nPOP RBX\nJMP 0x004014c0\n'
p256
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 0f ce ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ca cd ff ff\n'
p257
S'.text:00000000004046d0\n.text:00000000004046d1\n.text:00000000004046d4\n.text:00000000004046d7\n.text:00000000004046d9\n.text:00000000004046dc\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e5\n.text:00000000004046e8\n.text:00000000004046ed\n.text:00000000004046f0\n.text:00000000004046f1\n'
p258
tp259
sS'__assert_fail'
p260
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006070c0)();\u000a  return;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x006070c0]\n'
p263
S'ff 25 ba 5c 20 00\n'
p264
S'.plt:0000000000401400\n'
p265
tp266
sS'setlocale'
p267
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00607150)();\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x00607150]\n'
p270
S'ff 25 2a 5c 20 00\n'
p271
S'.plt:0000000000401520\n'
p272
tp273
sS'c_toupper'
p274
(S'\n__stdcall c_toupper()\n'
p275
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p277
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p278
S'.text:00000000004042a0\n.text:00000000004042a3\n.text:00000000004042a6\n.text:00000000004042a9\n.text:00000000004042ac\n'
p279
tp280
sS'bindtextdomain'
p281
(S'\n__stdcall bindtextdomain()\n'
p282
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00607078)();\u000a  return;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x00607078]\n'
p284
S'ff 25 02 5d 20 00\n'
p285
S'.plt:0000000000401370\n'
p286
tp287
sS'set_char_quoting'
p288
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p289
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p290
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6072d0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p291
S'89 f1\n48 85 ff\nbe d0 72 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p292
S'.text:0000000000401e60\n.text:0000000000401e62\n.text:0000000000401e65\n.text:0000000000401e6a\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e73\n.text:0000000000401e77\n.text:0000000000401e7c\n.text:0000000000401e7f\n.text:0000000000401e81\n.text:0000000000401e83\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8b\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e95\n'
p293
tp294
sS'quotearg_n'
p295
(S'\n__stdcall quotearg_n(char * arg)\n'
p296
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p297
S'MOV RDX,-0x1\nMOV ECX,0x6072d0\nJMP 0x00402d50\n'
p298
S'48 c7 c2 ff ff ff ff\nb9 d0 72 60 00\neb 02\n'
p299
S'.text:0000000000402d40\n.text:0000000000402d47\n.text:0000000000402d4c\n'
p300
tp301
sS'mbsinit'
p302
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006071b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x006071b8]\n'
p305
S'ff 25 c2 5b 20 00\n'
p306
S'.plt:00000000004015f0\n'
p307
tp308
sS'dcgettext'
p309
(S'\n__stdcall dcgettext()\n'
p310
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00607080)();\u000a  return;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00607080]\n'
p312
S'ff 25 fa 5c 20 00\n'
p313
S'.plt:0000000000401380\n'
p314
tp315
sS'close_stream'
p316
(S'\n__stdcall close_stream(FILE * stream)\n'
p317
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401320\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401460\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404650\nTEST EBP,EBP\nJZ 0x004042eb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040430f\nCALL 0x004012e0\nMOV dword ptr [RAX],0x0\nJMP 0x0040430f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040430f\nTEST CL,CL\nJNZ 0x0040430f\nCALL 0x004012e0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p319
S'55\n41 56\n53\n48 89 fb\ne8 64 d0 ff ff\n49 89 c6\n48 89 df\ne8 99 d1 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 fd cf ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 de cf ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p320
S'.text:00000000004042b0\n.text:00000000004042b1\n.text:00000000004042b3\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042bc\n.text:00000000004042bf\n.text:00000000004042c2\n.text:00000000004042c7\n.text:00000000004042c9\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d3\n.text:00000000004042d5\n.text:00000000004042da\n.text:00000000004042dc\n.text:00000000004042de\n.text:00000000004042e3\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042ed\n.text:00000000004042f0\n.text:00000000004042f2\n.text:00000000004042f4\n.text:00000000004042f7\n.text:00000000004042f9\n.text:00000000004042fb\n.text:00000000004042fd\n.text:0000000000404302\n.text:0000000000404304\n.text:0000000000404307\n.text:000000000040430c\n.text:000000000040430f\n.text:0000000000404311\n.text:0000000000404312\n.text:0000000000404314\n.text:0000000000404315\n'
p321
tp322
sS'quotearg_colon_mem'
p323
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p324
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'MOV EDX,0x3a\nJMP 0x00403060\n'
p326
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p327
S'.text:00000000004030f0\n.text:00000000004030f5\n'
p328
tp329
sS'quotearg_free'
p330
(S'\n__stdcall quotearg_free()\n'
p331
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p332
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006071f0]\nCMP dword ptr [0x006071f8],0x2\nJC 0x00402cea\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004012c0\nINC RBX\nMOV EAX,dword ptr [0x006071f8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00402cd0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x607310\nCMP RDI,RAX\nJZ 0x00402d13\nCALL 0x004012c0\nMOV qword ptr [0x00607200],0x100\nMOV qword ptr [0x00607208],0x607310\nMOV EAX,0x607200\nCMP R14,RAX\nJZ 0x00402d30\nMOV RDI,R14\nCALL 0x004012c0\nMOV qword ptr [0x006071f0],0x607200\nMOV dword ptr [0x006071f8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p333
S'41 57\n41 56\n53\n4c 8b 35 34 45 20 00\n83 3d 35 45 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 e5 ff ff\n48 ff c3\n8b 05 17 45 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 10 73 60 00\n48 39 c7\n74 1b\ne8 c3 e5 ff ff\n48 c7 05 f8 44 20 00 00 01 00 00\n48 c7 05 f5 44 20 00 10 73 60 00\nb8 00 72 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b e5 ff ff\n48 c7 05 c0 44 20 00 00 72 60 00\nc7 05 be 44 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p334
S'.text:0000000000402cb0\n.text:0000000000402cb2\n.text:0000000000402cb4\n.text:0000000000402cb5\n.text:0000000000402cbc\n.text:0000000000402cc3\n.text:0000000000402cc5\n.text:0000000000402cc9\n.text:0000000000402cce\n.text:0000000000402cd0\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdb\n.text:0000000000402ce1\n.text:0000000000402ce5\n.text:0000000000402ce8\n.text:0000000000402cea\n.text:0000000000402cee\n.text:0000000000402cf3\n.text:0000000000402cf6\n.text:0000000000402cf8\n.text:0000000000402cfd\n.text:0000000000402d08\n.text:0000000000402d13\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1d\n.text:0000000000402d20\n.text:0000000000402d25\n.text:0000000000402d30\n.text:0000000000402d3a\n.text:0000000000402d3b\n.text:0000000000402d3d\n.text:0000000000402d3f\n'
p335
tp336
sS'quotearg_mem'
p337
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p338
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00402f10\n'
p340
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p341
S'.text:0000000000402f30\n.text:0000000000402f33\n.text:0000000000402f36\n.text:0000000000402f38\n.text:0000000000402f3b\n.text:0000000000402f3e\n'
p342
tp343
sS'xcalloc'
p344
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p345
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p346
S'PUSH RAX\nCALL 0x00404110\nTEST RAX,RAX\nJZ 0x00403c9d\nPOP RCX\nRET\nCALL 0x00403d00\n'
p347
S'50\ne8 7a 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p348
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c96\n.text:0000000000403c99\n.text:0000000000403c9b\n.text:0000000000403c9c\n.text:0000000000403c9d\n'
p349
tp350
sS'deregister_tm_clones'
p351
(S'\n__stdcall deregister_tm_clones()\n'
p352
V\u000a/* WARNING: Removing unreachable block (ram,0x00401665) */\u000a/* WARNING: Removing unreachable block (ram,0x0040166f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p353
S'MOV EAX,0x60724f\nPUSH RBP\nSUB RAX,0x607248\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401680\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401680\nPOP RBP\nMOV EDI,0x607248\nJMP RAX\nPOP RBP\nRET\n'
p354
S'b8 4f 72 60 00\n55\n48 2d 48 72 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 48 72 60 00\nff e0\n5d\nc3\n'
p355
S'.text:0000000000401650\n.text:0000000000401655\n.text:0000000000401656\n.text:000000000040165c\n.text:0000000000401660\n.text:0000000000401663\n.text:0000000000401665\n.text:000000000040166a\n.text:000000000040166d\n.text:000000000040166f\n.text:0000000000401670\n.text:0000000000401675\n.text:0000000000401680\n.text:0000000000401681\n'
p356
tp357
sS'xnumtoumax'
p358
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p359
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x00403e30\nCMP EAX,0x3\nJZ 0x00403d8e\nCMP EAX,0x1\nJZ 0x00403d9b\nTEST EAX,EAX\nJNZ 0x00403da6\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x00403d71\nCMP RBX,R15\nJBE 0x00403de1\nCALL 0x004012e0\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x00403da6\nCALL 0x004012e0\nMOV dword ptr [RAX],0x0\nJMP 0x00403da6\nCALL 0x004012e0\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x004012e0\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00403240\nMOV R8,RAX\nMOV EDX,0x404cc1\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401540\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p361
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 6a d5 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 4d d5 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 40 d5 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 27 d5 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 75 f4 ff ff\n49 89 c0\nba c1 4c 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 5f d7 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p362
S'.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d35\n.text:0000000000403d37\n.text:0000000000403d39\n.text:0000000000403d3a\n.text:0000000000403d3b\n.text:0000000000403d3e\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d46\n.text:0000000000403d49\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d55\n.text:0000000000403d58\n.text:0000000000403d5a\n.text:0000000000403d5d\n.text:0000000000403d5f\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d67\n.text:0000000000403d6a\n.text:0000000000403d6c\n.text:0000000000403d6f\n.text:0000000000403d71\n.text:0000000000403d76\n.text:0000000000403d7d\n.text:0000000000403d82\n.text:0000000000403d87\n.text:0000000000403d8a\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d93\n.text:0000000000403d99\n.text:0000000000403d9b\n.text:0000000000403da0\n.text:0000000000403da6\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403db1\n.text:0000000000403db4\n.text:0000000000403db9\n.text:0000000000403dbb\n.text:0000000000403dbd\n.text:0000000000403dc0\n.text:0000000000403dc3\n.text:0000000000403dc6\n.text:0000000000403dcb\n.text:0000000000403dce\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403ddc\n.text:0000000000403de1\n.text:0000000000403de5\n.text:0000000000403de9\n.text:0000000000403dea\n.text:0000000000403dec\n.text:0000000000403dee\n.text:0000000000403df0\n.text:0000000000403df2\n.text:0000000000403df3\n'
p363
tp364
sS'clear_ungetc_buffer_preserving_position'
p365
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p366
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p367
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404707\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404720\n'
p368
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p369
S'.text:0000000000404700\n.text:0000000000404704\n.text:0000000000404706\n.text:0000000000404707\n.text:0000000000404709\n.text:000000000040470e\n'
p370
tp371
sS'xnmalloc'
p372
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p373
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p374
S'MOV RAX,RDI\nMUL RSI\nJO 0x00403b61\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00403b70\nPUSH RAX\nCALL 0x00403d00\n'
p375
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p376
S'.text:0000000000403b50\n.text:0000000000403b53\n.text:0000000000403b56\n.text:0000000000403b58\n.text:0000000000403b5c\n.text:0000000000403b5f\n.text:0000000000403b61\n.text:0000000000403b62\n'
p377
tp378
sS'quotearg_custom'
p379
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p380
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403150\n'
p382
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p383
S'.text:00000000004031d0\n.text:00000000004031d3\n.text:00000000004031d6\n.text:00000000004031d9\n.text:00000000004031db\n.text:00000000004031de\n.text:00000000004031e1\n.text:00000000004031e4\n'
p384
tp385
sS'free'
p386
(S'\n__stdcall free(void * __ptr)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00607020)();\u000a  return;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x00607020]\n'
p389
S'ff 25 5a 5d 20 00\n'
p390
S'.plt:00000000004012c0\n'
p391
tp392
sS'close'
p393
(S'\n__stdcall close(int __fd)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006070d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x006070d8]\n'
p396
S'ff 25 a2 5c 20 00\n'
p397
S'.plt:0000000000401430\n'
p398
tp399
sS'getenv'
p400
(S'\n__stdcall getenv(char * __name)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00607018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00607018]\n'
p403
S'ff 25 62 5d 20 00\n'
p404
S'.plt:00000000004012b0\n'
p405
tp406
sS'quotearg_char'
p407
(S'\n__stdcall quotearg_char(char * arg)\n'
p408
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403060\n'
p410
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p411
S'.text:00000000004030d0\n.text:00000000004030d2\n.text:00000000004030d9\n.text:00000000004030db\n'
p412
tp413
sS'malloc'
p414
(S'\n__stdcall malloc(size_t __size)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00607118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00607118]\n'
p417
S'ff 25 62 5c 20 00\n'
p418
S'.plt:00000000004014b0\n'
p419
tp420
sS'c_tolower'
p421
(S'\n__stdcall c_tolower()\n'
p422
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p424
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p425
S'.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404296\n.text:0000000000404299\n.text:000000000040429c\n'
p426
tp427
sS'rpl_fseeko'
p428
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p429
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00607170)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404748\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404748\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040475a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401560\nMOV RDI,RBX\nCALL 0x004014a0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004013f0\nCMP RAX,-0x1\nJZ 0x00404783\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404788\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p431
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 06 ce ff ff\n48 89 df\ne8 3e cd ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 81 cc ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p432
S'.text:0000000000404720\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404724\n.text:0000000000404727\n.text:000000000040472a\n.text:000000000040472d\n.text:0000000000404731\n.text:0000000000404735\n.text:0000000000404737\n.text:000000000040473b\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404746\n.text:0000000000404748\n.text:000000000040474b\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404752\n.text:0000000000404754\n.text:0000000000404755\n.text:000000000040475a\n.text:000000000040475d\n.text:0000000000404762\n.text:0000000000404764\n.text:0000000000404767\n.text:000000000040476a\n.text:000000000040476f\n.text:0000000000404773\n.text:0000000000404775\n.text:0000000000404778\n.text:000000000040477f\n.text:0000000000404781\n.text:0000000000404783\n.text:0000000000404788\n.text:0000000000404789\n.text:000000000040478b\n.text:000000000040478c\n'
p433
tp434
sS'getopt_long'
p435
(S'\n__stdcall getopt_long()\n'
p436
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00607098)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00607098]\n'
p438
S'ff 25 e2 5c 20 00\n'
p439
S'.plt:00000000004013b0\n'
p440
tp441
sS'quote_n_mem'
p442
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p443
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'MOV ECX,0x607210\nJMP 0x00402d50\n'
p445
S'b9 10 72 60 00\ne9 36 fb ff ff\n'
p446
S'.text:0000000000403210\n.text:0000000000403215\n'
p447
tp448
sS'xstrdup'
p449
(S'\n__stdcall xstrdup(char * string)\n'
p450
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p451
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004013a0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00403cb0\n'
p452
S'53\n48 89 fb\ne8 b7 d6 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p453
S'.text:0000000000403ce0\n.text:0000000000403ce1\n.text:0000000000403ce4\n.text:0000000000403ce9\n.text:0000000000403ced\n.text:0000000000403cf0\n.text:0000000000403cf1\n'
p454
tp455
sS'c_ispunct'
p456
(S'\n__stdcall c_ispunct()\n'
p457
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p458
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404232\nMOV AL,0x1\nJMP qword ptr [0x405818 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p459
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 18 58 40 00\nc3\n31 c0\nc3\n'
p460
S'.text:0000000000404220\n.text:0000000000404223\n.text:0000000000404226\n.text:0000000000404228\n.text:000000000040422a\n.text:0000000000404231\n.text:0000000000404232\n.text:0000000000404234\n'
p461
tp462
sS'quotearg_style'
p463
(S'\n__stdcall quotearg_style(char * arg)\n'
p464
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00402f40\n'
p466
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p467
S'.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403025\n.text:0000000000403027\n.text:0000000000403029\n.text:000000000040302c\n'
p468
tp469
sS'fscanf'
p470
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006070d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x006070d0]\n'
p473
S'ff 25 aa 5c 20 00\n'
p474
S'.plt:0000000000401420\n'
p475
tp476
sS'emit_try_help'
p477
(S'\n__stdcall emit_try_help()\n'
p478
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p479
S'PUSH RBX\nMOV RBX,qword ptr [0x006072a0]\nXOR EDI,EDI\nMOV ESI,0x404a25\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006072c0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004015d0\n'
p480
S'53\n48 8b 1d a8 5a 20 00\n31 ff\nbe 25 4a 40 00\nba 05 00 00 00\ne8 77 fb ff ff\n48 89 c2\n48 8b 0d ad 5a 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 ad fd ff ff\n'
p481
S'.text:00000000004017f0\n.text:00000000004017f1\n.text:00000000004017f8\n.text:00000000004017fa\n.text:00000000004017ff\n.text:0000000000401804\n.text:0000000000401809\n.text:000000000040180c\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181a\n.text:000000000040181d\n.text:000000000040181e\n'
p482
tp483
sS'memcpy'
p484
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00607108)();\u000a  return pvVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x00607108]\n'
p487
S'ff 25 72 5c 20 00\n'
p488
S'.plt:0000000000401490\n'
p489
tp490
sS'strrchr'
p491
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006070b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x006070b0]\n'
p494
S'ff 25 ca 5c 20 00\n'
p495
S'.plt:00000000004013e0\n'
p496
tp497
sS'close_stdout_set_ignore_EPIPE'
p498
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p499
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p500
S'MOV byte ptr [0x006072b8],DIL\nRET\n'
p501
S'40 88 3d a1 57 20 00\nc3\n'
p502
S'.text:0000000000401b10\n.text:0000000000401b17\n'
p503
tp504
sS'quotearg_alloc_mem'
p505
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p506
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p507
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6072d0\nCMOVNZ R12,RCX\nCALL 0x004012e0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00401f70\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00403c40\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00401f70\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00402c9a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p508
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc d0 72 60 00\n4c 0f 45 e1\ne8 e8 e6 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p509
S'.text:0000000000402bc0\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bc7\n.text:0000000000402bc9\n.text:0000000000402bca\n.text:0000000000402bce\n.text:0000000000402bd1\n.text:0000000000402bd6\n.text:0000000000402bd9\n.text:0000000000402bde\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402be9\n.text:0000000000402bef\n.text:0000000000402bf3\n.text:0000000000402bf8\n.text:0000000000402bfd\n.text:0000000000402bff\n.text:0000000000402c03\n.text:0000000000402c05\n.text:0000000000402c08\n.text:0000000000402c0c\n.text:0000000000402c11\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c22\n.text:0000000000402c25\n.text:0000000000402c28\n.text:0000000000402c2b\n.text:0000000000402c30\n.text:0000000000402c35\n.text:0000000000402c37\n.text:0000000000402c3c\n.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c52\n.text:0000000000402c56\n.text:0000000000402c5a\n.text:0000000000402c5d\n.text:0000000000402c60\n.text:0000000000402c65\n.text:0000000000402c6a\n.text:0000000000402c6d\n.text:0000000000402c72\n.text:0000000000402c77\n.text:0000000000402c79\n.text:0000000000402c7e\n.text:0000000000402c83\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8e\n.text:0000000000402c93\n.text:0000000000402c95\n.text:0000000000402c97\n.text:0000000000402c9a\n.text:0000000000402c9d\n.text:0000000000402ca1\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca6\n.text:0000000000402ca8\n.text:0000000000402caa\n.text:0000000000402cab\n'
p510
tp511
sS'iswprint'
p512
(S'\n__stdcall iswprint(wint_t __wc)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006071c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x006071c0]\n'
p515
S'ff 25 ba 5b 20 00\n'
p516
S'.plt:0000000000401600\n'
p517
tp518
sS'bkm_scale'
p519
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p520
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p521
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p522
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p523
S'.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040aa\n.text:00000000004040b1\n.text:00000000004040b3\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040bd\n.text:00000000004040c0\n.text:00000000004040c4\n.text:00000000004040c6\n.text:00000000004040c9\n.text:00000000004040cc\n'
p524
tp525
sS'quotearg_style_mem'
p526
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p527
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00402fe0\n'
p529
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p530
S'.text:0000000000403040\n.text:0000000000403043\n.text:0000000000403046\n.text:0000000000403048\n.text:000000000040304a\n.text:000000000040304c\n.text:000000000040304f\n.text:0000000000403052\n'
p531
tp532
sS'xalloc_die'
p533
(S'\n__stdcall xalloc_die()\n'
p534
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x404cc5,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV EBX,dword ptr [0x006071e8]\nXOR EDI,EDI\nMOV ESI,0x4055cf\nMOV EDX,0x5\nCALL 0x00401380\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x404cc5\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401540\nCALL 0x004012d0\n'
p536
S'53\n8b 1d e1 34 20 00\n31 ff\nbe cf 55 40 00\nba 05 00 00 00\ne8 68 d6 ff ff\n48 89 c1\n31 f6\nba c5 4c 40 00\n31 c0\n89 df\ne8 15 d8 ff ff\ne8 a0 d5 ff ff\n'
p537
S'.text:0000000000403d00\n.text:0000000000403d01\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d26\n.text:0000000000403d2b\n'
p538
tp539
sS'sched_getaffinity'
p540
(S'\n__stdcall sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sched_getaffinity(__pid_t __pid,size_t __cpusetsize,cpu_set_t *__cpuset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sched_getaffinity_006071b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x006071b0]\n'
p543
S'ff 25 ca 5b 20 00\n'
p544
S'.plt:00000000004015e0\n'
p545
tp546
sS'c_isspace'
p547
(S'\n__stdcall c_isspace()\n'
p548
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p549
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404255\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p550
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p551
S'.text:0000000000404240\n.text:0000000000404243\n.text:0000000000404246\n.text:0000000000404248\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404251\n.text:0000000000404254\n.text:0000000000404255\n.text:0000000000404257\n'
p552
tp553
sS'quotearg_n_custom'
p554
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p555
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'MOV R8,-0x1\nJMP 0x00403160\n'
p557
S'49 c7 c0 ff ff ff ff\neb 07\n'
p558
S'.text:0000000000403150\n.text:0000000000403157\n'
p559
tp560
sS'open'
p561
(S'\n__stdcall open(char * __file, int __oflag)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00607168)();\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x00607168]\n'
p564
S'ff 25 12 5c 20 00\n'
p565
S'.plt:0000000000401550\n'
p566
tp567
sS'quotearg_n_custom_mem'
p568
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p569
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00607300]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006072f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006072e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006072d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00401ec0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00402d50\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 87 41 20 00\n48 89 44 24 30\n0f 10 05 6b 41 20 00\n0f 29 44 24 20\n0f 10 05 4f 41 20 00\n0f 29 44 24 10\n0f 10 05 33 41 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000403160\n.text:0000000000403161\n.text:0000000000403163\n.text:0000000000403165\n.text:0000000000403166\n.text:000000000040316a\n.text:000000000040316d\n.text:0000000000403170\n.text:0000000000403172\n.text:0000000000403179\n.text:000000000040317e\n.text:0000000000403185\n.text:000000000040318a\n.text:0000000000403191\n.text:0000000000403196\n.text:000000000040319d\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031a7\n.text:00000000004031ac\n.text:00000000004031ae\n.text:00000000004031b1\n.text:00000000004031b4\n.text:00000000004031b7\n.text:00000000004031bc\n.text:00000000004031c0\n.text:00000000004031c1\n.text:00000000004031c3\n.text:00000000004031c5\n.text:00000000004031c6\n'
p573
tp574
sS'_init'
p575
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p576
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00606ff8;\u000a  if (PTR___gmon_start___00606ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00606ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00606ff8]\nTEST RAX,RAX\nJZ 0x00401292\nCALL RAX\nADD RSP,0x8\nRET\n'
p578
S'48 83 ec 08\n48 8b 05 6d 5d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p579
S'.init:0000000000401280\n.init:0000000000401284\n.init:000000000040128b\n.init:000000000040128e\n.init:0000000000401290\n.init:0000000000401292\n.init:0000000000401296\n'
p580
tp581
sS'__freading'
p582
(S'\n__stdcall __freading()\n'
p583
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00607138)();\u000a  return;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x00607138]\n'
p585
S'ff 25 42 5c 20 00\n'
p586
S'.plt:00000000004014f0\n'
p587
tp588
sS'set_quoting_flags'
p589
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p590
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'TEST RDI,RDI\nMOV ECX,0x6072d0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p592
S'48 85 ff\nb9 d0 72 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p593
S'.text:0000000000401ea0\n.text:0000000000401ea3\n.text:0000000000401ea8\n.text:0000000000401eac\n.text:0000000000401eaf\n.text:0000000000401eb2\n'
p594
tp595
sS'fputs_unlocked'
p596
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006070e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006070e8]\n'
p599
S'ff 25 92 5c 20 00\n'
p600
S'.plt:0000000000401450\n'
p601
tp602
sS'main'
p603
(S'\n__stdcall main(char * * argv)\n'
p604
V\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  char *err;\u000a  uintmax_t uVar2;\u000a  ulong uVar3;\u000a  undefined8 uVar4;\u000a  long lVar5;\u000a  char **in_RSI;\u000a  char *n_str;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x4049e4,"/usr/local/share/locale");\u000a  textdomain(0x4049e4);\u000a  atexit(close_stdout);\u000a  uVar2 = 0;\u000a  while( true ) {\u000a    iVar1 = getopt_long((ulong)argv & 0xffffffff);\u000a    n_str = optarg;\u000a    if (iVar1 < 0x80) break;\u000a    if (iVar1 != 0x80) {\u000a      if (iVar1 != 0x81) goto LAB_00401aee;\u000a      err = (char *)dcgettext(0,"invalid number",5);\u000a      uVar2 = xdectoumax(n_str,0,0xffffffffffffffff,\u000a                                                  \u000a                         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                         + 0xca,err);\u000a    }\u000a  }\u000a  if (iVar1 == -1) {\u000a    if (optind == (int)((ulong)argv & 0xffffffff)) {\u000a      uVar3 = num_processors();\u000a      lVar5 = 1;\u000a      if (uVar2 <= uVar3 && uVar3 - uVar2 != 0) {\u000a        lVar5 = uVar3 - uVar2;\u000a      }\u000a      __printf_chk(1,&DAT_00404a20,lVar5);\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == -0x83) goto LAB_00401abf;\u000a    if (iVar1 != -0x82) {\u000aLAB_00401aee:\u000a      n_str = (char *)0x1;\u000a      iVar1 = usage();\u000a      file_name = n_str;\u000a      return iVar1;\u000a    }\u000a    usage(0);\u000a  }\u000a  uVar4 = dcgettext(0,"extra operand %s",5);\u000a  n_str = quote(in_RSI[(long)optind]);\u000a  error(0,0,uVar4,n_str);\u000a  usage(1);\u000aLAB_00401abf:\u000a  version_etc(stdout,"nproc","GNU coreutils",Version,"Giuseppe Scrivano",0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV R12D,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00401d50\nMOV EDI,0x6\nMOV ESI,0x405399\nCALL 0x00401520\nMOV EDI,0x4049e4\nMOV ESI,0x4049c8\nCALL 0x00401370\nMOV EDI,0x4049e4\nCALL 0x00401340\nMOV EDI,0x401b20\nCALL 0x00404810\nMOV EBX,0x2\nXOR R15D,R15D\nJMP 0x00401a02\nCMP EAX,0x81\nJNZ 0x00401aee\nMOV RBP,qword ptr [0x00607278]\nXOR EDI,EDI\nMOV ESI,0x404a00\nMOV EDX,0x5\nCALL 0x00401380\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV ECX,0x405399\nXOR R9D,R9D\nMOV RDI,RBP\nMOV R8,RAX\nCALL 0x00403e00\nMOV R15,RAX\nMOV EBP,EBX\nMOV EBX,EBP\nXOR EBP,EBP\nMOV EDX,0x405399\nMOV ECX,0x404ba0\nXOR R8D,R8D\nMOV EDI,R12D\nMOV RSI,R14\nCALL 0x004013b0\nCMP EAX,0x7f\nJLE 0x00401a2e\nCMP EAX,0x80\nJNZ 0x004019c0\nJMP 0x00401a04\nCMP EAX,-0x1\nJNZ 0x00401a6b\nCMP dword ptr [0x00607270],R12D\nJNZ 0x00401a80\nMOV EDI,EBX\nCALL 0x00401be0\nSUB RAX,R15\nMOV EDX,0x1\nCMOVA RDX,RAX\nMOV EDI,0x1\nMOV ESI,0x404a20\nXOR EAX,EAX\nCALL 0x00401530\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401abf\nCMP EAX,0xffffff7e\nJNZ 0x00401aee\nXOR EDI,EDI\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x404a0f\nMOV EDX,0x5\nCALL 0x00401380\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x00607270]\nMOV RDI,qword ptr [R14 + RAX*0x8]\nCALL 0x00403240\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401540\nMOV EDI,0x1\nCALL 0x00401720\nMOV RDI,qword ptr [0x00607268]\nMOV RCX,qword ptr [0x006071e0]\nMOV ESI,0x4049c2\nMOV EDX,0x4049e0\nMOV R8D,0x4049ee\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00403a40\nXOR EDI,EDI\nCALL 0x004015b0\nMOV EDI,0x1\nCALL 0x00401720\nNOP dword ptr [RAX + RAX*0x1]\n'
p606
S'55\n41 57\n41 56\n41 54\n53\n49 89 f6\n41 89 fc\n49 8b 3e\ne8 da 03 00 00\nbf 06 00 00 00\nbe 99 53 40 00\ne8 9b fb ff ff\nbf e4 49 40 00\nbe c8 49 40 00\ne8 dc f9 ff ff\nbf e4 49 40 00\ne8 a2 f9 ff ff\nbf 20 1b 40 00\ne8 68 2e 00 00\nbb 02 00 00 00\n45 31 ff\neb 50\n3d 81 00 00 00\n0f 85 23 01 00 00\n48 8b 2d a6 58 20 00\n31 ff\nbe 00 4a 40 00\nba 05 00 00 00\ne8 9d f9 ff ff\n31 f6\n48 c7 c2 ff ff ff ff\nb9 99 53 40 00\n45 31 c9\n48 89 ef\n49 89 c0\ne8 01 24 00 00\n49 89 c7\n89 dd\n89 eb\n31 ed\nba 99 53 40 00\nb9 a0 4b 40 00\n45 31 c0\n44 89 e7\n4c 89 f6\ne8 90 f9 ff ff\n83 f8 7f\n7e 09\n3d 80 00 00 00\n75 94\neb d6\n83 f8 ff\n75 38\n44 39 25 36 58 20 00\n75 44\n89 df\ne8 9d 01 00 00\n4c 29 f8\nba 01 00 00 00\n48 0f 47 d0\nbf 01 00 00 00\nbe 20 4a 40 00\n31 c0\ne8 d0 fa ff ff\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 4d\n3d 7e ff ff ff\n75 75\n31 ff\ne8 a0 fc ff ff\n31 ff\nbe 0f 4a 40 00\nba 05 00 00 00\ne8 ef f8 ff ff\n48 89 c3\n48 63 05 d5 57 20 00\n49 8b 3c c6\ne8 9c 17 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 8b fa ff ff\nbf 01 00 00 00\ne8 61 fc ff ff\n48 8b 3d a2 57 20 00\n48 8b 0d 13 57 20 00\nbe c2 49 40 00\nba e0 49 40 00\n41 b8 ee 49 40 00\n45 31 c9\n31 c0\ne8 59 1f 00 00\n31 ff\ne8 c2 fa ff ff\nbf 01 00 00 00\ne8 28 fc ff ff\n0f 1f 84 00 00 00 00 00\n'
p607
S'.text:0000000000401960\n.text:0000000000401961\n.text:0000000000401963\n.text:0000000000401965\n.text:0000000000401967\n.text:0000000000401968\n.text:000000000040196b\n.text:000000000040196e\n.text:0000000000401971\n.text:0000000000401976\n.text:000000000040197b\n.text:0000000000401980\n.text:0000000000401985\n.text:000000000040198a\n.text:000000000040198f\n.text:0000000000401994\n.text:0000000000401999\n.text:000000000040199e\n.text:00000000004019a3\n.text:00000000004019a8\n.text:00000000004019ad\n.text:00000000004019b0\n.text:00000000004019c0\n.text:00000000004019c5\n.text:00000000004019cb\n.text:00000000004019d2\n.text:00000000004019d4\n.text:00000000004019d9\n.text:00000000004019de\n.text:00000000004019e3\n.text:00000000004019e5\n.text:00000000004019ec\n.text:00000000004019f1\n.text:00000000004019f4\n.text:00000000004019f7\n.text:00000000004019fa\n.text:00000000004019ff\n.text:0000000000401a02\n.text:0000000000401a04\n.text:0000000000401a06\n.text:0000000000401a08\n.text:0000000000401a0d\n.text:0000000000401a12\n.text:0000000000401a15\n.text:0000000000401a18\n.text:0000000000401a1b\n.text:0000000000401a20\n.text:0000000000401a23\n.text:0000000000401a25\n.text:0000000000401a2a\n.text:0000000000401a2c\n.text:0000000000401a2e\n.text:0000000000401a31\n.text:0000000000401a33\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a3e\n.text:0000000000401a43\n.text:0000000000401a46\n.text:0000000000401a4b\n.text:0000000000401a4f\n.text:0000000000401a54\n.text:0000000000401a59\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a62\n.text:0000000000401a63\n.text:0000000000401a65\n.text:0000000000401a67\n.text:0000000000401a69\n.text:0000000000401a6a\n.text:0000000000401a6b\n.text:0000000000401a70\n.text:0000000000401a72\n.text:0000000000401a77\n.text:0000000000401a79\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a82\n.text:0000000000401a87\n.text:0000000000401a8c\n.text:0000000000401a91\n.text:0000000000401a94\n.text:0000000000401a9b\n.text:0000000000401a9f\n.text:0000000000401aa4\n.text:0000000000401aa7\n.text:0000000000401aa9\n.text:0000000000401aab\n.text:0000000000401aad\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abf\n.text:0000000000401ac6\n.text:0000000000401acd\n.text:0000000000401ad2\n.text:0000000000401ad7\n.text:0000000000401add\n.text:0000000000401ae0\n.text:0000000000401ae2\n.text:0000000000401ae7\n.text:0000000000401ae9\n.text:0000000000401aee\n.text:0000000000401af3\n.text:0000000000401af8\n'
p608
tp609
sS'realloc'
p610
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p611
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00607140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x00607140]\n'
p613
S'ff 25 3a 5c 20 00\n'
p614
S'.plt:0000000000401500\n'
p615
tp616
sS'xcharalloc'
p617
(S'\n__stdcall xcharalloc(size_t n)\n'
p618
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p619
S'JMP 0x00403b70\n'
p620
S'e9 2b ff ff ff\n'
p621
S'.text:0000000000403c40\n'
p622
tp623
sS'c_isupper'
p624
(S'\n__stdcall c_isupper()\n'
p625
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p626
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p627
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p628
S'.text:0000000000404260\n.text:0000000000404263\n.text:0000000000404266\n.text:0000000000404269\n'
p629
tp630
sS'__fprintf_chk'
p631
(S'\n__stdcall __fprintf_chk()\n'
p632
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006071a8)();\u000a  return;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x006071a8]\n'
p634
S'ff 25 d2 5b 20 00\n'
p635
S'.plt:00000000004015d0\n'
p636
tp637
sS'get_charset_aliases'
p638
(S'\n__stdcall get_charset_aliases()\n'
p639
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004045c4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004045c4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004045c4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004045c4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004045c4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004045c4_caseD_9;\u000a      case -1:\u000a        goto switchD_004045c4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040461d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00404623:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004045c4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00404623;\u000a  }\u000a  goto LAB_0040461d;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00607410]\nTEST R15,R15\nJNZ 0x00404632\nMOV EDI,0x405c44\nCALL 0x004012b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004043e8\nCMP byte ptr [RBX],0x0\nJNZ 0x004043ed\nMOV EBX,0x405c54\nMOV RDI,RBX\nCALL 0x004013a0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00404407\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00404409\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004014b0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040445d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401490\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00404468\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00404485\nMOV R15D,0x405399\nJMP 0x0040462b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401550\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040461d\nMOV ESI,0x404a0d\nMOV EDI,EBP\nCALL 0x00401510\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004045e4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004045b0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401310\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401310\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004045b0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004014e0\nMOV ESI,0x405c63\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401420\nCMP EAX,0x2\nJL 0x00404604\nMOV RDI,R12\nCALL 0x004013a0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004013a0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040458d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401500\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004044d4\nJMP 0x004045ed\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004014b0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004044d4\nJMP 0x004045ed\nMOV RDI,RBX\nCALL 0x00401330\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00404517\nJMP qword ptr [0x405b08 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401330\nCMP EAX,-0x1\nJZ 0x00404604\nCMP EAX,0xa\nJNZ 0x004045d0\nJMP 0x004045b0\nMOV EDI,EBP\nCALL 0x00401430\nJMP 0x0040461d\nMOV RDI,R15\nCALL 0x004012c0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404650\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040461d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00404623\nMOV R15D,0x405399\nMOV RDI,R13\nCALL 0x004012c0\nMOV qword ptr [0x00607410],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p641
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 48 30 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 44 5c 40 00\ne8 d5 ce ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 54 5c 40 00\n48 89 df\ne8 ab cf ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 d0 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 63 d0 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 99 53 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc d0 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 0d 4a 40 00\n89 ef\ne8 66 d0 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 1b ce ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 0b ce ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 bf cf ff ff\nbe 63 5c 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 ea ce ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 59 ce ff ff\n49 89 c4\n48 89 ef\ne8 4e ce ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 86 cf ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 cf ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 78 cd ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 08 5b 40 00\n48 89 df\ne8 58 cd ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 45 ce ff ff\neb 30\n4c 89 ff\ne8 cb cc ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 99 53 40 00\n4c 89 ef\ne8 95 cc ff ff\n4c 89 3d de 2d 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p642
S'.text:00000000004043b0\n.text:00000000004043b1\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043b9\n.text:00000000004043ba\n.text:00000000004043c1\n.text:00000000004043c8\n.text:00000000004043cb\n.text:00000000004043d1\n.text:00000000004043d6\n.text:00000000004043db\n.text:00000000004043de\n.text:00000000004043e1\n.text:00000000004043e3\n.text:00000000004043e6\n.text:00000000004043e8\n.text:00000000004043ed\n.text:00000000004043f0\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fb\n.text:00000000004043fd\n.text:0000000000404402\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440d\n.text:0000000000404412\n.text:0000000000404417\n.text:000000000040441a\n.text:000000000040441d\n.text:000000000040441f\n.text:0000000000404422\n.text:0000000000404425\n.text:0000000000404428\n.text:000000000040442d\n.text:0000000000404430\n.text:0000000000404433\n.text:0000000000404436\n.text:0000000000404438\n.text:000000000040443e\n.text:0000000000404448\n.text:000000000040444d\n.text:0000000000404457\n.text:000000000040445b\n.text:000000000040445d\n.text:0000000000404463\n.text:0000000000404468\n.text:0000000000404472\n.text:0000000000404477\n.text:0000000000404481\n.text:0000000000404485\n.text:000000000040448a\n.text:000000000040448c\n.text:000000000040448f\n.text:0000000000404494\n.text:0000000000404496\n.text:0000000000404498\n.text:000000000040449e\n.text:00000000004044a3\n.text:00000000004044a5\n.text:00000000004044aa\n.text:00000000004044ad\n.text:00000000004044b0\n.text:00000000004044b6\n.text:00000000004044bb\n.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c7\n.text:00000000004044ca\n.text:00000000004044cf\n.text:00000000004044d4\n.text:00000000004044d9\n.text:00000000004044dc\n.text:00000000004044df\n.text:00000000004044e2\n.text:00000000004044e5\n.text:00000000004044e8\n.text:00000000004044ed\n.text:00000000004044f0\n.text:00000000004044f5\n.text:00000000004044f8\n.text:00000000004044fd\n.text:0000000000404500\n.text:0000000000404505\n.text:000000000040450a\n.text:000000000040450d\n.text:0000000000404512\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451c\n.text:0000000000404521\n.text:0000000000404526\n.text:0000000000404528\n.text:000000000040452b\n.text:000000000040452e\n.text:0000000000404531\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453f\n.text:0000000000404542\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454d\n.text:0000000000404552\n.text:0000000000404555\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404562\n.text:0000000000404564\n.text:0000000000404568\n.text:000000000040456d\n.text:0000000000404572\n.text:0000000000404575\n.text:000000000040457a\n.text:000000000040457d\n.text:0000000000404582\n.text:0000000000404585\n.text:000000000040458b\n.text:000000000040458d\n.text:0000000000404592\n.text:0000000000404596\n.text:000000000040459b\n.text:000000000040459e\n.text:00000000004045a1\n.text:00000000004045a7\n.text:00000000004045b0\n.text:00000000004045b3\n.text:00000000004045b8\n.text:00000000004045bb\n.text:00000000004045be\n.text:00000000004045c4\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d8\n.text:00000000004045db\n.text:00000000004045dd\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e4\n.text:00000000004045e6\n.text:00000000004045eb\n.text:00000000004045ed\n.text:00000000004045f0\n.text:00000000004045f5\n.text:00000000004045f7\n.text:00000000004045fc\n.text:00000000004045ff\n.text:0000000000404604\n.text:0000000000404607\n.text:000000000040460c\n.text:0000000000404611\n.text:0000000000404614\n.text:0000000000404616\n.text:000000000040461b\n.text:000000000040461d\n.text:0000000000404623\n.text:0000000000404626\n.text:000000000040462b\n.text:0000000000404632\n.text:0000000000404635\n.text:000000000040463c\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404641\n.text:0000000000404643\n.text:0000000000404645\n.text:0000000000404646\n'
p643
tp644
sS'nl_langinfo'
p645
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00607128)();\u000a  return pcVar1;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x00607128]\n'
p648
S'ff 25 52 5c 20 00\n'
p649
S'.plt:00000000004014d0\n'
p650
tp651
sS'c_isalnum'
p652
(S'\n__stdcall c_isalnum()\n'
p653
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p654
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040417b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040417b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040417a\nXOR EAX,EAX\nRET\n'
p655
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p656
S'.text:0000000000404160\n.text:0000000000404162\n.text:0000000000404165\n.text:0000000000404168\n.text:000000000040416a\n.text:0000000000404174\n.text:0000000000404178\n.text:000000000040417a\n.text:000000000040417b\n.text:000000000040417e\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404185\n'
p657
tp658
sS'x2realloc'
p659
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p660
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p661
S'MOV EDX,0x1\nJMP 0x00403be0\n'
p662
S'ba 01 00 00 00\neb 89\n'
p663
S'.text:0000000000403c50\n.text:0000000000403c55\n'
p664
tp665
sS'strlen'
p666
(S'\n__stdcall strlen(char * __s)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00607090)();\u000a  return sVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x00607090]\n'
p669
S'ff 25 ea 5c 20 00\n'
p670
S'.plt:00000000004013a0\n'
p671
tp672
sS'memcmp'
p673
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006070e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x006070e0]\n'
p676
S'ff 25 9a 5c 20 00\n'
p677
S'.plt:0000000000401440\n'
p678
tp679
sS'quotearg_n_style_mem'
p680
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p681
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402f80\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00402d50\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p683
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p684
S'.text:0000000000402fe0\n.text:0000000000402fe1\n.text:0000000000402fe3\n.text:0000000000402fe5\n.text:0000000000402fe6\n.text:0000000000402fea\n.text:0000000000402fed\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff5\n.text:0000000000402ff8\n.text:0000000000402ffd\n.text:0000000000402fff\n.text:0000000000403002\n.text:0000000000403005\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403011\n.text:0000000000403012\n.text:0000000000403014\n.text:0000000000403016\n.text:0000000000403017\n'
p685
tp686
sS'_exit'
p687
(S'\n__stdcall _exit(int __status)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00607040)();\u000a  return;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00607040]\n'
p690
S'ff 25 3a 5d 20 00\n'
p691
S'.plt:0000000000401300\n'
p692
tp693
sS'xdectoumax'
p694
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p695
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p696
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00403d30\nPOP RCX\nRET\n'
p697
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p698
S'.text:0000000000403e00\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e07\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e11\n.text:0000000000403e16\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e21\n.text:0000000000403e22\n'
p699
tp700
sS'__errno_location'
p701
(S'\n__stdcall __errno_location()\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00607030)();\u000a  return piVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00607030]\n'
p704
S'ff 25 4a 5d 20 00\n'
p705
S'.plt:00000000004012e0\n'
p706
tp707
sS'bkm_scale_by_power'
p708
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p709
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00404101\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004040a0\nOR EBP,EAX\nDEC EBX\nJNZ 0x004040f0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p711
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p712
S'.text:00000000004040d0\n.text:00000000004040d1\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d6\n.text:00000000004040d7\n.text:00000000004040d9\n.text:00000000004040dc\n.text:00000000004040df\n.text:00000000004040e1\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040f0\n.text:00000000004040f3\n.text:00000000004040f6\n.text:00000000004040fb\n.text:00000000004040fd\n.text:00000000004040ff\n.text:0000000000404101\n.text:0000000000404103\n.text:0000000000404107\n.text:0000000000404108\n.text:000000000040410a\n.text:000000000040410c\n.text:000000000040410d\n'
p713
tp714
sS'x2nrealloc'
p715
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p716
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p717
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00403c0c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00403c39\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00403c2a\nTEST RCX,RCX\nJNZ 0x00403c2a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00403bb0\nPUSH RAX\nCALL 0x00403d00\n'
p718
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p719
S'.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be6\n.text:0000000000403be9\n.text:0000000000403beb\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bfa\n.text:0000000000403bfd\n.text:0000000000403bff\n.text:0000000000403c02\n.text:0000000000403c05\n.text:0000000000403c0a\n.text:0000000000403c0c\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c16\n.text:0000000000403c18\n.text:0000000000403c1b\n.text:0000000000403c1d\n.text:0000000000403c24\n.text:0000000000403c27\n.text:0000000000403c2a\n.text:0000000000403c2d\n.text:0000000000403c31\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c3a\n'
p720
tp721
sS'xrealloc'
p722
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p723
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p724
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00403bc7\nTEST RBX,RBX\nJNZ 0x00403bc7\nCALL 0x004012c0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401500\nTEST RBX,RBX\nJZ 0x00403bd9\nTEST RAX,RAX\nJZ 0x00403bdb\nPOP RBX\nRET\nCALL 0x00403d00\n'
p725
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 fd d6 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 31 d9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p726
S'.text:0000000000403bb0\n.text:0000000000403bb1\n.text:0000000000403bb4\n.text:0000000000403bb7\n.text:0000000000403bb9\n.text:0000000000403bbc\n.text:0000000000403bbe\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc6\n.text:0000000000403bc7\n.text:0000000000403bca\n.text:0000000000403bcf\n.text:0000000000403bd2\n.text:0000000000403bd4\n.text:0000000000403bd7\n.text:0000000000403bd9\n.text:0000000000403bda\n.text:0000000000403bdb\n'
p727
tp728
sS'quotearg_n_options'
p729
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p730
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004012e0\nTEST R12D,R12D\nJS 0x00402f01\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006071f0]\nCMP dword ptr [0x006071f8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00402e1b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x607200\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00403bb0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006071f0],R15\nJNZ 0x00402de2\nMOVUPS XMM0,xmmword ptr [0x00607200]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006071f8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401410\nMOV dword ptr [0x006071f8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00401f70\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00402e7d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00402eeb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x607310\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00402ea8\nCALL 0x004012c0\nMOV RDI,R15\nCALL 0x00403c40\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00401f70\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004012d0\n'
p732
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 71 e5 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 66 44 20 00\n44 39 25 67 44 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 00 72 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 1b 44 20 00\n75 0b\n0f 10 05 22 44 20 00\n41 0f 11 07\n8b 05 10 44 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 0d e6 ff ff\n89 1d ef 43 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 10 73 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 e4 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ca e3 ff ff\n'
p733
S'.text:0000000000402d50\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d59\n.text:0000000000402d5a\n.text:0000000000402d5e\n.text:0000000000402d61\n.text:0000000000402d64\n.text:0000000000402d67\n.text:0000000000402d6a\n.text:0000000000402d6f\n.text:0000000000402d72\n.text:0000000000402d78\n.text:0000000000402d7d\n.text:0000000000402d7f\n.text:0000000000402d83\n.text:0000000000402d8a\n.text:0000000000402d91\n.text:0000000000402d96\n.text:0000000000402d9b\n.text:0000000000402da0\n.text:0000000000402da2\n.text:0000000000402da7\n.text:0000000000402daa\n.text:0000000000402dad\n.text:0000000000402db3\n.text:0000000000402db5\n.text:0000000000402db8\n.text:0000000000402dbc\n.text:0000000000402dbf\n.text:0000000000402dc3\n.text:0000000000402dc8\n.text:0000000000402dcb\n.text:0000000000402dce\n.text:0000000000402dd5\n.text:0000000000402dd7\n.text:0000000000402dde\n.text:0000000000402de2\n.text:0000000000402de8\n.text:0000000000402deb\n.text:0000000000402def\n.text:0000000000402df2\n.text:0000000000402df5\n.text:0000000000402df9\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e03\n.text:0000000000402e09\n.text:0000000000402e0c\n.text:0000000000402e11\n.text:0000000000402e16\n.text:0000000000402e1b\n.text:0000000000402e1e\n.text:0000000000402e22\n.text:0000000000402e26\n.text:0000000000402e2b\n.text:0000000000402e2f\n.text:0000000000402e33\n.text:0000000000402e37\n.text:0000000000402e3b\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4a\n.text:0000000000402e4d\n.text:0000000000402e52\n.text:0000000000402e55\n.text:0000000000402e58\n.text:0000000000402e5b\n.text:0000000000402e5c\n.text:0000000000402e61\n.text:0000000000402e65\n.text:0000000000402e68\n.text:0000000000402e6b\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e76\n.text:0000000000402e7b\n.text:0000000000402e7d\n.text:0000000000402e81\n.text:0000000000402e86\n.text:0000000000402e89\n.text:0000000000402e8c\n.text:0000000000402e91\n.text:0000000000402e96\n.text:0000000000402e99\n.text:0000000000402e9e\n.text:0000000000402ea1\n.text:0000000000402ea3\n.text:0000000000402ea8\n.text:0000000000402eab\n.text:0000000000402eb0\n.text:0000000000402eb3\n.text:0000000000402eb6\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ed2\n.text:0000000000402ed7\n.text:0000000000402eda\n.text:0000000000402edd\n.text:0000000000402ede\n.text:0000000000402ee3\n.text:0000000000402ee7\n.text:0000000000402eeb\n.text:0000000000402eef\n.text:0000000000402ef2\n.text:0000000000402ef6\n.text:0000000000402ef7\n.text:0000000000402ef9\n.text:0000000000402efb\n.text:0000000000402efd\n.text:0000000000402eff\n.text:0000000000402f00\n.text:0000000000402f01\n'
p734
tp735
sS'strcmp'
p736
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00607100)();\u000a  return iVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00607100]\n'
p739
S'ff 25 7a 5c 20 00\n'
p740
S'.plt:0000000000401480\n'
p741
tp742
sS'num_processors'
p743
(S'\n__stdcall num_processors()\n'
p744
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aulong num_processors(void)\u000a\u000a{\u000a  char cVar1;\u000a  _Bool _Var2;\u000a  char *in_RAX;\u000a  char *__nptr;\u000a  ulong uVar3;\u000a  int in_EDI;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  if (in_EDI != 1) {\u000a    if (in_EDI != 2) {\u000a      uVar3 = sysconf(0x53);\u000a      if ((uVar3 == 1) && (uVar3 = num_processors_via_affinity_mask(), uVar3 == 0)) {\u000a        return 1;\u000a      }\u000a      goto LAB_00401cdf;\u000a    }\u000a    local_18 = in_RAX;\u000a    __nptr = getenv("OMP_NUM_THREADS");\u000a    if (__nptr != (char *)0x0) {\u000a      cVar1 = *__nptr;\u000a      while ((cVar1 != 0 && (_Var2 = c_isspace(), _Var2 != false))) {\u000a        cVar1 = __nptr[1];\u000a        __nptr = __nptr + 1;\u000a      }\u000a      _Var2 = c_isdigit();\u000a      if (_Var2 != false) {\u000a        local_18 = (char *)0x0;\u000a        uVar3 = strtoul(__nptr,&local_18,10);\u000a        if (local_18 != (char *)0x0) {\u000a          cVar1 = *local_18;\u000a          __nptr = local_18;\u000a          while (cVar1 != 0) {\u000a            _Var2 = c_isspace();\u000a            if (_Var2 == false) {\u000a              cVar1 = *__nptr;\u000a              goto joined_r0x00401cc9;\u000a            }\u000a            cVar1 = __nptr[1];\u000a            __nptr = __nptr + 1;\u000a          }\u000a          cVar1 = *__nptr;\u000ajoined_r0x00401cc9:\u000a          local_18 = __nptr;\u000a          if (cVar1 == 0) {\u000a            if (uVar3 == 0) {\u000a              return 1;\u000a            }\u000a            return uVar3;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  uVar3 = num_processors_via_affinity_mask();\u000a  if (uVar3 != 0) {\u000a    return uVar3;\u000a  }\u000a  uVar3 = sysconf(0x54);\u000aLAB_00401cdf:\u000a  if ((long)uVar3 < 1) {\u000a    return 1;\u000a  }\u000a  return uVar3;\u000a}\u000a\u000a
p745
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP EDI,0x1\nJZ 0x00401ccb\nCMP EDI,0x2\nJNZ 0x00401ca6\nMOV EDI,0x404cc8\nCALL 0x004012b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00401ccb\nMOV AL,byte ptr [RBX]\nTEST AL,AL\nJNZ 0x00401c2b\nJMP 0x00401c37\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nTEST AL,AL\nJZ 0x00401c37\nMOVSX EDI,AL\nCALL 0x00404240\nTEST AL,AL\nJNZ 0x00401c20\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004041e0\nTEST AL,AL\nJZ 0x00401ccb\nMOV qword ptr [RSP],0x0\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00401590\nMOV R14,RAX\nCMP qword ptr [RSP],0x0\nJZ 0x00401ccb\nMOV RAX,qword ptr [RSP]\nMOV AL,byte ptr [RAX]\nTEST AL,AL\nJZ 0x00401c9b\nMOV RBX,qword ptr [RSP]\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EDI,AL\nCALL 0x00404240\nTEST AL,AL\nJZ 0x00401cc2\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nTEST AL,AL\nJNZ 0x00401c80\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RSP]\nCMP byte ptr [RBX],0x0\nJNZ 0x00401ccb\nJMP 0x00401cf1\nMOV EDI,0x53\nCALL 0x00401570\nCMP RAX,0x1\nJNZ 0x00401cdf\nCALL 0x00401d00\nTEST RAX,RAX\nJNZ 0x00401cdf\nJMP 0x00401ce4\nMOV qword ptr [RSP],RBX\nCMP byte ptr [RBX],0x0\nJZ 0x00401cf1\nCALL 0x00401d00\nTEST RAX,RAX\nJNZ 0x00401ce9\nMOV EDI,0x54\nCALL 0x00401570\nTEST RAX,RAX\nJG 0x00401ce9\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nTEST R14,R14\nMOV EAX,0x1\nCMOVNZ RAX,R14\nJMP 0x00401ce9\n'
p746
S'41 56\n53\n50\n83 ff 01\n0f 84 de 00 00 00\n83 ff 02\n0f 85 b0 00 00 00\nbf c8 4c 40 00\ne8 b0 f6 ff ff\n48 89 c3\n48 85 db\n0f 84 bf 00 00 00\n8a 03\n84 c0\n75 19\neb 23\n0f b6 43 01\n48 ff c3\n84 c0\n74 0c\n0f be f8\ne8 0d 26 00 00\n84 c0\n75 e9\n0f be 3b\ne8 a1 25 00 00\n84 c0\n0f 84 84 00 00 00\n48 c7 04 24 00 00 00 00\n48 89 e6\nba 0a 00 00 00\n48 89 df\ne8 31 f9 ff ff\n49 89 c6\n48 83 3c 24 00\n74 62\n48 8b 04 24\n8a 00\n84 c0\n74 28\n48 8b 1c 24\n66 0f 1f 84 00 00 00 00 00\n0f be f8\ne8 b8 25 00 00\n84 c0\n74 36\n0f b6 43 01\n48 ff c3\n84 c0\n75 e9\n48 89 1c 24\n48 8b 1c 24\n80 3b 00\n75 27\neb 4b\nbf 53 00 00 00\ne8 c0 f8 ff ff\n48 83 f8 01\n75 29\ne8 45 00 00 00\n48 85 c0\n75 1f\neb 22\n48 89 1c 24\n80 3b 00\n74 26\ne8 30 00 00 00\n48 85 c0\n75 14\nbf 54 00 00 00\ne8 91 f8 ff ff\n48 85 c0\n7f 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n4d 85 f6\nb8 01 00 00 00\n49 0f 45 c6\neb ea\n'
p747
S'.text:0000000000401be0\n.text:0000000000401be2\n.text:0000000000401be3\n.text:0000000000401be4\n.text:0000000000401be7\n.text:0000000000401bed\n.text:0000000000401bf0\n.text:0000000000401bf6\n.text:0000000000401bfb\n.text:0000000000401c00\n.text:0000000000401c03\n.text:0000000000401c06\n.text:0000000000401c0c\n.text:0000000000401c0e\n.text:0000000000401c10\n.text:0000000000401c12\n.text:0000000000401c20\n.text:0000000000401c24\n.text:0000000000401c27\n.text:0000000000401c29\n.text:0000000000401c2b\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c35\n.text:0000000000401c37\n.text:0000000000401c3a\n.text:0000000000401c3f\n.text:0000000000401c41\n.text:0000000000401c47\n.text:0000000000401c4f\n.text:0000000000401c52\n.text:0000000000401c57\n.text:0000000000401c5a\n.text:0000000000401c5f\n.text:0000000000401c62\n.text:0000000000401c67\n.text:0000000000401c69\n.text:0000000000401c6d\n.text:0000000000401c6f\n.text:0000000000401c71\n.text:0000000000401c73\n.text:0000000000401c77\n.text:0000000000401c80\n.text:0000000000401c83\n.text:0000000000401c88\n.text:0000000000401c8a\n.text:0000000000401c8c\n.text:0000000000401c90\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c97\n.text:0000000000401c9b\n.text:0000000000401c9f\n.text:0000000000401ca2\n.text:0000000000401ca4\n.text:0000000000401ca6\n.text:0000000000401cab\n.text:0000000000401cb0\n.text:0000000000401cb4\n.text:0000000000401cb6\n.text:0000000000401cbb\n.text:0000000000401cbe\n.text:0000000000401cc0\n.text:0000000000401cc2\n.text:0000000000401cc6\n.text:0000000000401cc9\n.text:0000000000401ccb\n.text:0000000000401cd0\n.text:0000000000401cd3\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdf\n.text:0000000000401ce2\n.text:0000000000401ce4\n.text:0000000000401ce9\n.text:0000000000401ced\n.text:0000000000401cee\n.text:0000000000401cf0\n.text:0000000000401cf1\n.text:0000000000401cf4\n.text:0000000000401cf9\n.text:0000000000401cfd\n'
p748
tp749
sS'set_custom_quoting'
p750
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p751
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p752
S'TEST RDI,RDI\nMOV EAX,0x6072d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00401ee5\nTEST RDX,RDX\nJZ 0x00401ee5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004012d0\n'
p753
S'48 85 ff\nb8 d0 72 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 e5 f3 ff ff\n'
p754
S'.text:0000000000401ec0\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401ecc\n.text:0000000000401ed2\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401eda\n.text:0000000000401edc\n.text:0000000000401ee0\n.text:0000000000401ee4\n.text:0000000000401ee5\n.text:0000000000401ee6\n'
p755
tp756
sS'c_isalpha'
p757
(S'\n__stdcall c_isalpha()\n'
p758
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p759
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004041ab\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p760
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p761
S'.text:0000000000404190\n.text:0000000000404193\n.text:0000000000404196\n.text:0000000000404198\n.text:00000000004041a2\n.text:00000000004041a4\n.text:00000000004041a7\n.text:00000000004041aa\n.text:00000000004041ab\n.text:00000000004041ad\n'
p762
tp763
sS'quotearg_custom_mem'
p764
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p765
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403160\n'
p767
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p768
S'.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f6\n.text:00000000004031f9\n.text:00000000004031fc\n.text:00000000004031fe\n.text:0000000000403201\n'
p769
tp770
sS'close_stdout'
p771
(S'\n__stdcall close_stdout()\n'
p772
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00401b47;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x404cc5,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00401b47:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00607268]\nCALL 0x004042b0\nTEST EAX,EAX\nJZ 0x00401b47\nCMP byte ptr [0x006072b8],0x0\nJZ 0x00401b5c\nCALL 0x004012e0\nCMP dword ptr [RAX],0x20\nJNZ 0x00401b5c\nMOV RDI,qword ptr [0x006072a0]\nCALL 0x004042b0\nTEST EAX,EAX\nJNZ 0x00401ba1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x404cb5\nMOV EDX,0x5\nCALL 0x00401380\nMOV R14,RAX\nMOV RBX,qword ptr [0x006072b0]\nCALL 0x004012e0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00401bac\nXOR EDI,EDI\nMOV EDX,0x404cc5\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401540\nMOV EDI,dword ptr [0x006071e8]\nCALL 0x00401300\nMOV EDI,dword ptr [0x006071e8]\nCALL 0x00401300\nMOV RDI,RBX\nCALL 0x004030e0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x404cc1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401540\nMOV EDI,dword ptr [0x006071e8]\nCALL 0x00401300\n'
p774
S'55\n41 56\n53\n48 8b 3d 3d 57 20 00\ne8 80 27 00 00\n85 c0\n74 13\n80 3d 7d 57 20 00 00\n74 1f\ne8 9e f7 ff ff\n83 38 20\n75 15\n48 8b 3d 52 57 20 00\ne8 5d 27 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe b5 4c 40 00\nba 05 00 00 00\ne8 13 f8 ff ff\n49 89 c6\n48 8b 1d 39 57 20 00\ne8 64 f7 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba c5 4c 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 aa f9 ff ff\n8b 3d 4c 56 20 00\ne8 5f f7 ff ff\n8b 3d 41 56 20 00\ne8 54 f7 ff ff\n48 89 df\ne8 2c 15 00 00\n48 89 c1\n31 ff\nba c1 4c 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 76 f9 ff ff\n8b 3d 18 56 20 00\ne8 2b f7 ff ff\n'
p775
S'.text:0000000000401b20\n.text:0000000000401b21\n.text:0000000000401b23\n.text:0000000000401b24\n.text:0000000000401b2b\n.text:0000000000401b30\n.text:0000000000401b32\n.text:0000000000401b34\n.text:0000000000401b3b\n.text:0000000000401b3d\n.text:0000000000401b42\n.text:0000000000401b45\n.text:0000000000401b47\n.text:0000000000401b4e\n.text:0000000000401b53\n.text:0000000000401b55\n.text:0000000000401b57\n.text:0000000000401b58\n.text:0000000000401b5a\n.text:0000000000401b5b\n.text:0000000000401b5c\n.text:0000000000401b5e\n.text:0000000000401b63\n.text:0000000000401b68\n.text:0000000000401b6d\n.text:0000000000401b70\n.text:0000000000401b77\n.text:0000000000401b7c\n.text:0000000000401b7f\n.text:0000000000401b81\n.text:0000000000401b83\n.text:0000000000401b85\n.text:0000000000401b8a\n.text:0000000000401b8c\n.text:0000000000401b8e\n.text:0000000000401b91\n.text:0000000000401b96\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba7\n.text:0000000000401bac\n.text:0000000000401baf\n.text:0000000000401bb4\n.text:0000000000401bb7\n.text:0000000000401bb9\n.text:0000000000401bbe\n.text:0000000000401bc0\n.text:0000000000401bc2\n.text:0000000000401bc5\n.text:0000000000401bca\n.text:0000000000401bd0\n'
p776
tp777
sS'version_etc_ar'
p778
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p779
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p780
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004039c0\nJMP 0x00403650\n'
p781
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p782
S'.text:00000000004039b0\n.text:00000000004039b7\n.text:00000000004039c0\n.text:00000000004039c6\n.text:00000000004039ca\n.text:00000000004039cc\n'
p783
tp784
sS'strtoumax'
p785
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_00607180)();\u000a  return uVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00607180]\n'
p788
S'ff 25 fa 5b 20 00\n'
p789
S'.plt:0000000000401580\n'
p790
tp791
sS'num_processors_via_affinity_mask'
p792
(S'\n__stdcall num_processors_via_affinity_mask()\n'
p793
V\u000aulong num_processors_via_affinity_mask(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined local_80 [128];\u000a  \u000a  iVar1 = sched_getaffinity(0,0x80,(cpu_set_t *)local_80);\u000a  if (iVar1 == 0) {\u000a    iVar1 = __sched_cpucount(0x80,(cpu_set_t *)local_80);\u000a    if (iVar1 != 0) {\u000a      return (long)iVar1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p794
S'SUB RSP,0x88\nLEA RDX,[RSP + 0x8]\nXOR EDI,EDI\nMOV ESI,0x80\nCALL 0x004015e0\nTEST EAX,EAX\nJZ 0x00401d26\nXOR EAX,EAX\nADD RSP,0x88\nRET\nLEA RSI,[RSP + 0x8]\nMOV EDI,0x80\nCALL 0x00401360\nTEST EAX,EAX\nJZ 0x00401d1c\nCDQE\nADD RSP,0x88\nRET\n'
p795
S'48 81 ec 88 00 00 00\n48 8d 54 24 08\n31 ff\nbe 80 00 00 00\ne8 c8 f8 ff ff\n85 c0\n74 0a\n31 c0\n48 81 c4 88 00 00 00\nc3\n48 8d 74 24 08\nbf 80 00 00 00\ne8 2b f6 ff ff\n85 c0\n74 e3\n48 98\n48 81 c4 88 00 00 00\nc3\n'
p796
S'.text:0000000000401d00\n.text:0000000000401d07\n.text:0000000000401d0c\n.text:0000000000401d0e\n.text:0000000000401d13\n.text:0000000000401d18\n.text:0000000000401d1a\n.text:0000000000401d1c\n.text:0000000000401d1e\n.text:0000000000401d25\n.text:0000000000401d26\n.text:0000000000401d2b\n.text:0000000000401d30\n.text:0000000000401d35\n.text:0000000000401d37\n.text:0000000000401d39\n.text:0000000000401d3b\n.text:0000000000401d42\n'
p797
tp798
sS'rpl_calloc'
p799
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p800
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_006070f8)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p801
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040414b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404150\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404150\nPUSH RAX\nCALL 0x004012e0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401470\n'
p802
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 9f d1 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 15 d3 ff ff\n'
p803
S'.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404118\n.text:000000000040411a\n.text:000000000040411d\n.text:0000000000404122\n.text:0000000000404124\n.text:0000000000404127\n.text:000000000040412b\n.text:000000000040412d\n.text:0000000000404130\n.text:0000000000404133\n.text:0000000000404136\n.text:0000000000404139\n.text:000000000040413b\n.text:000000000040413c\n.text:0000000000404141\n.text:0000000000404147\n.text:0000000000404149\n.text:000000000040414a\n.text:000000000040414b\n.text:0000000000404150\n.text:0000000000404153\n.text:0000000000404156\n'
p804
tp805
sS'memset'
p806
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006070c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x006070c8]\n'
p809
S'ff 25 b2 5c 20 00\n'
p810
S'.plt:0000000000401410\n'
p811
tp812
sS'c_isxdigit'
p813
(S'\n__stdcall c_isxdigit()\n'
p814
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p815
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040428b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p816
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p817
S'.text:0000000000404270\n.text:0000000000404273\n.text:0000000000404276\n.text:0000000000404278\n.text:0000000000404282\n.text:0000000000404284\n.text:0000000000404287\n.text:000000000040428a\n.text:000000000040428b\n.text:000000000040428d\n'
p818
tp819
sS'__libc_csu_fini'
p820
(S'\n__stdcall __libc_csu_fini()\n'
p821
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p822
S'RET\n'
p823
S'f3 c3\n'
p824
S'.text:0000000000404800\n'
p825
tp826
sS'getc_unlocked'
p827
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00607058)();\u000a  return iVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x00607058]\n'
p830
S'ff 25 22 5d 20 00\n'
p831
S'.plt:0000000000401330\n'
p832
tp833
sS'abort'
p834
(S'\n__stdcall abort()\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00607028)();\u000a  return;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x00607028]\n'
p837
S'ff 25 52 5d 20 00\n'
p838
S'.plt:00000000004012d0\n'
p839
tp840
sS'c_isascii'
p841
(S'\n__stdcall c_isascii()\n'
p842
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p843
S'CMP EDI,0x80\nSETC AL\nRET\n'
p844
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p845
S'.text:00000000004041b0\n.text:00000000004041b6\n.text:00000000004041b9\n'
p846
tp847
sS'version_etc'
p848
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p849
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p850
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00403a82\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004039e0\nADD RSP,0xd8\nRET\n'
p851
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p852
S'.text:0000000000403a40\n.text:0000000000403a47\n.text:0000000000403a49\n.text:0000000000403a4b\n.text:0000000000403a50\n.text:0000000000403a55\n.text:0000000000403a5a\n.text:0000000000403a62\n.text:0000000000403a6a\n.text:0000000000403a72\n.text:0000000000403a7a\n.text:0000000000403a82\n.text:0000000000403a87\n.text:0000000000403a8c\n.text:0000000000403a91\n.text:0000000000403a96\n.text:0000000000403a9e\n.text:0000000000403aa3\n.text:0000000000403aab\n.text:0000000000403ab2\n.text:0000000000403ab5\n.text:0000000000403aba\n.text:0000000000403ac1\n'
p853
tp854
sS'__sched_cpucount'
p855
(S'\n__stdcall __sched_cpucount(size_t __setsize, cpu_set_t * __setp)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint __sched_cpucount(size_t __setsize,cpu_set_t *__setp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___sched_cpucount_00607070)();\u000a  return iVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x00607070]\n'
p858
S'ff 25 0a 5d 20 00\n'
p859
S'.plt:0000000000401360\n'
p860
tp861
sS'__ctype_b_loc'
p862
(S'\n__stdcall __ctype_b_loc()\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006071c8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x006071c8]\n'
p865
S'ff 25 b2 5b 20 00\n'
p866
S'.plt:0000000000401610\n'
p867
tp868
sS'lseek'
p869
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006070b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x006070b8]\n'
p872
S'ff 25 c2 5c 20 00\n'
p873
S'.plt:00000000004013f0\n'
p874
tp875
sS'quotearg'
p876
(S'\n__stdcall quotearg(char * arg)\n'
p877
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00402d40\n'
p879
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p880
S'.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f25\n.text:0000000000402f28\n'
p881
tp882
sS'_start'
p883
(S'\n__stdcall _start()\n'
p884
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00606ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p885
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x404800\nMOV RCX,0x404790\nMOV RDI,0x401960\nCALL qword ptr [0x00606ff0]\nHLT\n'
p886
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 00 48 40 00\n48 c7 c1 90 47 40 00\n48 c7 c7 60 19 40 00\nff 15 a6 59 20 00\nf4\n'
p887
S'.text:0000000000401620\n.text:0000000000401622\n.text:0000000000401625\n.text:0000000000401626\n.text:0000000000401629\n.text:000000000040162d\n.text:000000000040162e\n.text:000000000040162f\n.text:0000000000401636\n.text:000000000040163d\n.text:0000000000401644\n.text:000000000040164a\n'
p888
tp889
sS'c_iscntrl'
p890
(S'\n__stdcall c_iscntrl()\n'
p891
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p892
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004041d8\nRET\nCMP EDI,0x7f\nJZ 0x004041d7\nXOR EAX,EAX\nRET\n'
p893
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p894
S'.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d5\n.text:00000000004041d7\n.text:00000000004041d8\n.text:00000000004041db\n.text:00000000004041dd\n.text:00000000004041df\n'
p895
tp896
sS'c_isblank'
p897
(S'\n__stdcall c_isblank()\n'
p898
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p899
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p900
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p901
S'.text:00000000004041c0\n.text:00000000004041c3\n.text:00000000004041c6\n.text:00000000004041c9\n.text:00000000004041cc\n.text:00000000004041ce\n'
p902
tp903
sS'quotearg_n_mem'
p904
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p905
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p906
S'MOV ECX,0x6072d0\nJMP 0x00402d50\n'
p907
S'b9 d0 72 60 00\ne9 36 fe ff ff\n'
p908
S'.text:0000000000402f10\n.text:0000000000402f15\n'
p909
tp910
sS'atexit'
p911
(S'\n__stdcall atexit(__func * __func)\n'
p912
V\u000a/* WARNING: Removing unreachable block (ram,0x00404830) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00607190)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'MOV RAX,0x6071d8\nTEST RAX,RAX\nJZ 0x00404830\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004015a0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004015a0\n'
p914
S'48 c7 c0 d8 71 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 7a cd ff ff\n31 d2\n31 f6\ne9 67 cd ff ff\n'
p915
S'.text:0000000000404810\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481c\n.text:000000000040481f\n.text:0000000000404821\n.text:0000000000404830\n.text:0000000000404832\n.text:0000000000404834\n'
p916
tp917
sS'__printf_chk'
p918
(S'\n__stdcall __printf_chk()\n'
p919
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00607158)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00607158]\n'
p921
S'ff 25 22 5c 20 00\n'
p922
S'.plt:0000000000401530\n'
p923
tp924
sS'fdopen'
p925
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00607148)();\u000a  return pFVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x00607148]\n'
p928
S'ff 25 32 5c 20 00\n'
p929
S'.plt:0000000000401510\n'
p930
tp931
sS'error'
p932
(S'\n__stdcall error()\n'
p933
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00607160)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00607160]\n'
p935
S'ff 25 1a 5c 20 00\n'
p936
S'.plt:0000000000401540\n'
p937
tp938
sS'strcaseeq6'
p939
(S'\n__stdcall strcaseeq6()\n'
p940
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p941
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004035e2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004035e9\nJMP 0x004035fe\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004035fe\nTEST BPL,BPL\nJZ 0x004035f9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00403610\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p942
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 91 0c 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p943
S'.text:00000000004035c0\n.text:00000000004035c1\n.text:00000000004035c2\n.text:00000000004035c3\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035ca\n.text:00000000004035cf\n.text:00000000004035d3\n.text:00000000004035d5\n.text:00000000004035d7\n.text:00000000004035da\n.text:00000000004035dc\n.text:00000000004035de\n.text:00000000004035e0\n.text:00000000004035e2\n.text:00000000004035e4\n.text:00000000004035e7\n.text:00000000004035e9\n.text:00000000004035ec\n.text:00000000004035ee\n.text:00000000004035f1\n.text:00000000004035f5\n.text:00000000004035f6\n.text:00000000004035f7\n.text:00000000004035f9\n.text:00000000004035fe\n.text:0000000000403602\n.text:0000000000403603\n.text:0000000000403604\n'
p944
tp945
sS'strcaseeq5'
p946
(S'\n__stdcall strcaseeq5()\n'
p947
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00403596\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040359d\nJMP 0x004035b4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004035b4\nTEST BPL,BPL\nJZ 0x004035af\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004035c0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p949
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 dd 0c 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p950
S'.text:0000000000403570\n.text:0000000000403571\n.text:0000000000403573\n.text:0000000000403574\n.text:0000000000403577\n.text:0000000000403579\n.text:000000000040357c\n.text:000000000040357e\n.text:0000000000403583\n.text:0000000000403587\n.text:0000000000403589\n.text:000000000040358b\n.text:000000000040358e\n.text:0000000000403590\n.text:0000000000403592\n.text:0000000000403594\n.text:0000000000403596\n.text:0000000000403598\n.text:000000000040359b\n.text:000000000040359d\n.text:00000000004035a0\n.text:00000000004035a2\n.text:00000000004035a6\n.text:00000000004035a9\n.text:00000000004035aa\n.text:00000000004035ac\n.text:00000000004035ad\n.text:00000000004035af\n.text:00000000004035b4\n.text:00000000004035b5\n.text:00000000004035b7\n.text:00000000004035b8\n'
p951
tp952
sS'emit_ancillary_info'
p953
(S'\n__stdcall emit_ancillary_info()\n'
p954
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00404c40;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("nproc",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "nproc";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"nproc",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","nproc");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x405399;\u000a  if (__s2 == "nproc") {\u000a    uVar3 = 0x404a68;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p955
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x404c40\nMOV ESI,0x404a4c\nNOP\nMOV EDI,0x4049c2\nCALL 0x00401480\nTEST EAX,EAX\nJZ 0x0040185b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401840\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4049c2\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x404aab\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4049e0\nMOV ECX,0x404ac2\nXOR EAX,EAX\nCALL 0x00401530\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401520\nTEST RAX,RAX\nJZ 0x004018e4\nMOV ESI,0x404ae9\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004012f0\nTEST EAX,EAX\nJZ 0x004018e4\nXOR EDI,EDI\nMOV ESI,0x404aed\nMOV EDX,0x5\nCALL 0x00401380\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4049c2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401530\nXOR EDI,EDI\nMOV ESI,0x404b32\nMOV EDX,0x5\nCALL 0x00401380\nMOV RSI,RAX\nMOV R14D,0x4049c2\nMOV EDI,0x1\nMOV EDX,0x404ac2\nMOV ECX,0x4049c2\nXOR EAX,EAX\nCALL 0x00401530\nXOR EDI,EDI\nMOV ESI,0x404b51\nMOV EDX,0x5\nCALL 0x00401380\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x404a68\nMOV ECX,0x405399\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401530\n'
p956
S'41 56\n53\n50\nbb 40 4c 40 00\nbe 4c 4a 40 00\n66 90\nbf c2 49 40 00\ne8 36 fc ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb c2 49 40 00\n48 0f 45 d8\n31 ff\nbe ab 4a 40 00\nba 05 00 00 00\ne8 04 fb ff ff\n48 89 c6\nbf 01 00 00 00\nba e0 49 40 00\nb9 c2 4a 40 00\n31 c0\ne8 9b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 7f fc ff ff\n48 85 c0\n74 3e\nbe e9 4a 40 00\nba 03 00 00 00\n48 89 c7\ne8 38 fa ff ff\n85 c0\n74 28\n31 ff\nbe ed 4a 40 00\nba 05 00 00 00\ne8 b3 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba c2 49 40 00\n31 c0\n48 89 ce\ne8 4c fc ff ff\n31 ff\nbe 32 4b 40 00\nba 05 00 00 00\ne8 8b fa ff ff\n48 89 c6\n41 be c2 49 40 00\nbf 01 00 00 00\nba c2 4a 40 00\nb9 c2 49 40 00\n31 c0\ne8 1c fc ff ff\n31 ff\nbe 51 4b 40 00\nba 05 00 00 00\ne8 5b fa ff ff\n48 89 c2\n4c 39 f3\nb8 68 4a 40 00\nb9 99 53 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 de fb ff ff\n'
p957
S'.text:0000000000401830\n.text:0000000000401832\n.text:0000000000401833\n.text:0000000000401834\n.text:0000000000401839\n.text:000000000040183e\n.text:0000000000401840\n.text:0000000000401845\n.text:000000000040184a\n.text:000000000040184c\n.text:000000000040184e\n.text:0000000000401852\n.text:0000000000401856\n.text:0000000000401859\n.text:000000000040185b\n.text:000000000040185f\n.text:0000000000401862\n.text:0000000000401867\n.text:000000000040186b\n.text:000000000040186d\n.text:0000000000401872\n.text:0000000000401877\n.text:000000000040187c\n.text:000000000040187f\n.text:0000000000401884\n.text:0000000000401889\n.text:000000000040188e\n.text:0000000000401890\n.text:0000000000401895\n.text:000000000040189a\n.text:000000000040189c\n.text:00000000004018a1\n.text:00000000004018a4\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018b0\n.text:00000000004018b3\n.text:00000000004018b8\n.text:00000000004018ba\n.text:00000000004018bc\n.text:00000000004018be\n.text:00000000004018c3\n.text:00000000004018c8\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018dc\n.text:00000000004018df\n.text:00000000004018e4\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018f0\n.text:00000000004018f5\n.text:00000000004018f8\n.text:00000000004018fe\n.text:0000000000401903\n.text:0000000000401908\n.text:000000000040190d\n.text:000000000040190f\n.text:0000000000401914\n.text:0000000000401916\n.text:000000000040191b\n.text:0000000000401920\n.text:0000000000401925\n.text:0000000000401928\n.text:000000000040192b\n.text:0000000000401930\n.text:0000000000401935\n.text:0000000000401939\n.text:000000000040193e\n.text:0000000000401940\n.text:0000000000401943\n.text:0000000000401946\n.text:000000000040194a\n.text:000000000040194b\n.text:000000000040194d\n'
p958
tp959
sS'strcaseeq7'
p960
(S'\n__stdcall strcaseeq7()\n'
p961
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p962
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00403632\nTEST ECX,0xffffffdf\nJNZ 0x00403636\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040363a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p963
S'53\n48 89 fb\n31 ff\ne8 45 0c 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p964
S'.text:0000000000403610\n.text:0000000000403611\n.text:0000000000403614\n.text:0000000000403616\n.text:000000000040361b\n.text:000000000040361f\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403629\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403631\n.text:0000000000403632\n.text:0000000000403634\n.text:0000000000403636\n.text:0000000000403638\n.text:0000000000403639\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403640\n'
p965
tp966
sS'version_etc_va'
p967
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p968
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p969
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00403a10\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00403a1c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00403a31\nINC R9\nCMP R9,0xa\nJC 0x004039f0\nMOV R8,RSP\nCALL 0x00403650\nADD RSP,0x58\nRET\n'
p970
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p971
S'.text:00000000004039e0\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039f0\n.text:00000000004039f3\n.text:00000000004039f7\n.text:00000000004039f9\n.text:00000000004039fc\n.text:0000000000403a00\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a10\n.text:0000000000403a14\n.text:0000000000403a18\n.text:0000000000403a1c\n.text:0000000000403a1f\n.text:0000000000403a23\n.text:0000000000403a26\n.text:0000000000403a28\n.text:0000000000403a2b\n.text:0000000000403a2f\n.text:0000000000403a31\n.text:0000000000403a34\n.text:0000000000403a39\n.text:0000000000403a3d\n'
p972
tp973
sS'xzalloc'
p974
(S'\n__stdcall xzalloc(size_t s)\n'
p975
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p976
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00403b70\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401410\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p977
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 94 d7 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p978
S'.text:0000000000403c60\n.text:0000000000403c62\n.text:0000000000403c63\n.text:0000000000403c64\n.text:0000000000403c67\n.text:0000000000403c6c\n.text:0000000000403c6f\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c7c\n.text:0000000000403c7f\n.text:0000000000403c83\n.text:0000000000403c84\n.text:0000000000403c86\n'
p979
tp980
sS'strtoul'
p981
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_00607188)();\u000a  return uVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x00607188]\n'
p984
S'ff 25 f2 5b 20 00\n'
p985
S'.plt:0000000000401590\n'
p986
tp987
sS'strcaseeq0'
p988
(S'\n__stdcall strcaseeq0()\n'
p989
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403345\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040334c\nJMP 0x00403380\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403380\nTEST BPL,BPL\nJZ 0x0040337b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403390\nJMP 0x00403380\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 2d 0f 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:0000000000403310\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403315\n.text:0000000000403317\n.text:0000000000403319\n.text:000000000040331a\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403324\n.text:0000000000403327\n.text:0000000000403329\n.text:000000000040332c\n.text:000000000040332e\n.text:0000000000403333\n.text:0000000000403336\n.text:0000000000403338\n.text:000000000040333a\n.text:000000000040333d\n.text:000000000040333f\n.text:0000000000403341\n.text:0000000000403343\n.text:0000000000403345\n.text:0000000000403347\n.text:000000000040334a\n.text:000000000040334c\n.text:000000000040334f\n.text:0000000000403351\n.text:0000000000403355\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403361\n.text:0000000000403365\n.text:0000000000403369\n.text:000000000040336d\n.text:0000000000403371\n.text:0000000000403374\n.text:0000000000403379\n.text:000000000040337b\n.text:0000000000403380\n.text:0000000000403384\n.text:0000000000403385\n.text:0000000000403387\n.text:0000000000403389\n.text:000000000040338b\n.text:000000000040338d\n.text:000000000040338e\n'
p993
tp994
sS'strcaseeq2'
p995
(S'\n__stdcall strcaseeq2()\n'
p996
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00403456\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040345d\nJMP 0x0040348a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040348a\nTEST BPL,BPL\nJZ 0x00403485\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004034a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 0e 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p999
S'.text:0000000000403420\n.text:0000000000403421\n.text:0000000000403423\n.text:0000000000403425\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342a\n.text:000000000040342b\n.text:000000000040342e\n.text:0000000000403431\n.text:0000000000403434\n.text:0000000000403437\n.text:0000000000403439\n.text:000000000040343c\n.text:000000000040343e\n.text:0000000000403443\n.text:0000000000403447\n.text:0000000000403449\n.text:000000000040344b\n.text:000000000040344e\n.text:0000000000403450\n.text:0000000000403452\n.text:0000000000403454\n.text:0000000000403456\n.text:0000000000403458\n.text:000000000040345b\n.text:000000000040345d\n.text:0000000000403460\n.text:0000000000403462\n.text:0000000000403466\n.text:000000000040346a\n.text:000000000040346e\n.text:0000000000403472\n.text:0000000000403475\n.text:0000000000403479\n.text:000000000040347a\n.text:000000000040347c\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403482\n.text:0000000000403483\n.text:0000000000403485\n.text:000000000040348a\n.text:000000000040348e\n.text:000000000040348f\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403495\n.text:0000000000403497\n.text:0000000000403498\n'
p1000
tp1001
sS'strcaseeq1'
p1002
(S'\n__stdcall strcaseeq1()\n'
p1003
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004033cd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004033d4\nJMP 0x00403407\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403407\nTEST BPL,BPL\nJZ 0x00403402\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403420\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1005
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 a6 0e 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1006
S'.text:0000000000403390\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403395\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339a\n.text:000000000040339b\n.text:00000000004033a0\n.text:00000000004033a3\n.text:00000000004033a6\n.text:00000000004033a9\n.text:00000000004033ab\n.text:00000000004033ae\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033c0\n.text:00000000004033c2\n.text:00000000004033c5\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033cb\n.text:00000000004033cd\n.text:00000000004033cf\n.text:00000000004033d2\n.text:00000000004033d4\n.text:00000000004033d7\n.text:00000000004033d9\n.text:00000000004033dd\n.text:00000000004033e1\n.text:00000000004033e5\n.text:00000000004033eb\n.text:00000000004033ef\n.text:00000000004033f2\n.text:00000000004033f6\n.text:00000000004033f7\n.text:00000000004033f9\n.text:00000000004033fb\n.text:00000000004033fd\n.text:00000000004033ff\n.text:0000000000403400\n.text:0000000000403402\n.text:0000000000403407\n.text:000000000040340b\n.text:000000000040340c\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403412\n.text:0000000000403414\n.text:0000000000403415\n'
p1007
tp1008
sS'strcaseeq4'
p1009
(S'\n__stdcall strcaseeq4()\n'
p1010
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040353c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403543\nJMP 0x00403564\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403564\nTEST BPL,BPL\nJZ 0x0040355f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403570\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1012
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 37 0d 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1013
S'.text:0000000000403510\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403516\n.text:0000000000403517\n.text:000000000040351a\n.text:000000000040351d\n.text:000000000040351f\n.text:0000000000403522\n.text:0000000000403524\n.text:0000000000403529\n.text:000000000040352d\n.text:000000000040352f\n.text:0000000000403531\n.text:0000000000403534\n.text:0000000000403536\n.text:0000000000403538\n.text:000000000040353a\n.text:000000000040353c\n.text:000000000040353e\n.text:0000000000403541\n.text:0000000000403543\n.text:0000000000403546\n.text:0000000000403548\n.text:000000000040354c\n.text:0000000000403550\n.text:0000000000403553\n.text:0000000000403557\n.text:0000000000403558\n.text:000000000040355a\n.text:000000000040355c\n.text:000000000040355d\n.text:000000000040355f\n.text:0000000000403564\n.text:0000000000403568\n.text:0000000000403569\n.text:000000000040356b\n.text:000000000040356d\n.text:000000000040356e\n'
p1014
tp1015
sS'strcaseeq3'
p1016
(S'\n__stdcall strcaseeq3()\n'
p1017
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404260\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004034d0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004034d7\nJMP 0x004034fa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004034fa\nTEST BPL,BPL\nJZ 0x004034f5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403510\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1019
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 a3 0d 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1020
S'.text:00000000004034a0\n.text:00000000004034a1\n.text:00000000004034a3\n.text:00000000004034a5\n.text:00000000004034a7\n.text:00000000004034a8\n.text:00000000004034ab\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b3\n.text:00000000004034b6\n.text:00000000004034b8\n.text:00000000004034bd\n.text:00000000004034c1\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034c8\n.text:00000000004034ca\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d0\n.text:00000000004034d2\n.text:00000000004034d5\n.text:00000000004034d7\n.text:00000000004034da\n.text:00000000004034dc\n.text:00000000004034e0\n.text:00000000004034e4\n.text:00000000004034e8\n.text:00000000004034eb\n.text:00000000004034ec\n.text:00000000004034ee\n.text:00000000004034f0\n.text:00000000004034f2\n.text:00000000004034f3\n.text:00000000004034f5\n.text:00000000004034fa\n.text:00000000004034fb\n.text:00000000004034fd\n.text:00000000004034ff\n.text:0000000000403501\n.text:0000000000403502\n'
p1021
tp1022
sS'register_tm_clones'
p1023
(S'\n__stdcall register_tm_clones()\n'
p1024
V\u000a/* WARNING: Removing unreachable block (ram,0x004016b3) */\u000a/* WARNING: Removing unreachable block (ram,0x004016bd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1025
S'MOV ESI,0x607248\nPUSH RBP\nSUB RSI,0x607248\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004016c8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016c8\nPOP RBP\nMOV EDI,0x607248\nJMP RAX\nPOP RBP\nRET\n'
p1026
S'be 48 72 60 00\n55\n48 81 ee 48 72 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 48 72 60 00\nff e0\n5d\nc3\n'
p1027
S'.text:0000000000401690\n.text:0000000000401695\n.text:0000000000401696\n.text:000000000040169d\n.text:00000000004016a1\n.text:00000000004016a4\n.text:00000000004016a7\n.text:00000000004016ab\n.text:00000000004016ae\n.text:00000000004016b1\n.text:00000000004016b3\n.text:00000000004016b8\n.text:00000000004016bb\n.text:00000000004016bd\n.text:00000000004016be\n.text:00000000004016c3\n.text:00000000004016c8\n.text:00000000004016c9\n'
p1028
tp1029
sS'gettext_quote'
p1030
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1031
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00405260;\u000a        pcVar2 = &DAT_00405264;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401380\nCMP RAX,RBX\nJNZ 0x00403308\nCALL 0x00404320\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403310\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004032b8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x405250\nMOV EAX,0x405254\nJMP 0x00403304\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403310\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004032f6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x405260\nMOV EAX,0x405264\nJMP 0x00403304\nCMP R14D,0x9\nMOV ECX,0x405244\nMOV EAX,0x405248\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1033
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 17 e1 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 a9 10 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 50 52 40 00\nb8 54 52 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 60 52 40 00\nb8 64 52 40 00\neb 0e\n41 83 fe 09\nb9 44 52 40 00\nb8 48 52 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1034
S'.text:0000000000403250\n.text:0000000000403251\n.text:0000000000403253\n.text:0000000000403254\n.text:0000000000403257\n.text:000000000040325a\n.text:000000000040325c\n.text:0000000000403261\n.text:0000000000403264\n.text:0000000000403269\n.text:000000000040326c\n.text:0000000000403272\n.text:0000000000403277\n.text:000000000040327a\n.text:000000000040327f\n.text:0000000000403284\n.text:0000000000403289\n.text:000000000040328f\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329a\n.text:000000000040329c\n.text:00000000004032a1\n.text:00000000004032a5\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032ac\n.text:00000000004032b1\n.text:00000000004032b6\n.text:00000000004032b8\n.text:00000000004032bd\n.text:00000000004032c2\n.text:00000000004032c7\n.text:00000000004032cd\n.text:00000000004032d3\n.text:00000000004032d6\n.text:00000000004032d8\n.text:00000000004032da\n.text:00000000004032df\n.text:00000000004032e3\n.text:00000000004032e5\n.text:00000000004032e7\n.text:00000000004032ea\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f6\n.text:00000000004032fa\n.text:00000000004032ff\n.text:0000000000403304\n.text:0000000000403308\n.text:0000000000403309\n.text:000000000040330b\n.text:000000000040330c\n'
p1035
tp1036
sS'c_islower'
p1037
(S'\n__stdcall c_islower()\n'
p1038
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1039
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1040
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1041
S'.text:0000000000404200\n.text:0000000000404203\n.text:0000000000404206\n.text:0000000000404209\n'
p1042
tp1043
sS'fclose'
p1044
(S'\n__stdcall fclose(FILE * __stream)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00607068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x00607068]\n'
p1047
S'ff 25 12 5d 20 00\n'
p1048
S'.plt:0000000000401350\n'
p1049
tp1050
sS'__ctype_get_mb_cur_max'
p1051
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00607088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x00607088]\n'
p1054
S'ff 25 f2 5c 20 00\n'
p1055
S'.plt:0000000000401390\n'
p1056
tp1057
sS'quotearg_n_style'
p1058
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1059
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00402f80\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00402d50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1061
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1062
S'.text:0000000000402f40\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f44\n.text:0000000000402f48\n.text:0000000000402f4b\n.text:0000000000402f4d\n.text:0000000000402f52\n.text:0000000000402f55\n.text:0000000000402f5a\n.text:0000000000402f61\n.text:0000000000402f63\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f6e\n.text:0000000000402f72\n.text:0000000000402f73\n.text:0000000000402f75\n.text:0000000000402f76\n'
p1063
tp1064
sS'fwrite'
p1065
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006071a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x006071a0]\n'
p1068
S'ff 25 da 5b 20 00\n'
p1069
S'.plt:00000000004015c0\n'
p1070
tp1071
sS'quote_n'
p1072
(S'\n__stdcall quote_n(char * arg)\n'
p1073
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1074
S'MOV RDX,-0x1\nJMP 0x00403210\n'
p1075
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1076
S'.text:0000000000403230\n.text:0000000000403237\n'
p1077
tp1078
sS'quotearg_alloc'
p1079
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1080
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1081
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00402bc0\n'
p1082
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1083
S'.text:0000000000402bb0\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bb8\n'
p1084
tp1085
sS'__do_global_dtors_aux'
p1086
(S'\n__stdcall __do_global_dtors_aux()\n'
p1087
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1088
S'CMP byte ptr [0x006072a8],0x0\nJNZ 0x004016ea\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401650\nPOP RBP\nMOV byte ptr [0x006072a8],0x1\nRET\n'
p1089
S'80 3d d1 5b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 be 5b 20 00 01\nf3 c3\n'
p1090
S'.text:00000000004016d0\n.text:00000000004016d7\n.text:00000000004016d9\n.text:00000000004016da\n.text:00000000004016dd\n.text:00000000004016e2\n.text:00000000004016e3\n.text:00000000004016ea\n'
p1091
tp1092
sS'close_stdout_set_file_name'
p1093
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1094
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1095
S'MOV qword ptr [0x006072b0],RDI\nRET\n'
p1096
S'48 89 3d a9 57 20 00\nc3\n'
p1097
S'.text:0000000000401b00\n.text:0000000000401b07\n'
p1098
tp1099
sS'c_isprint'
p1100
(S'\n__stdcall c_isprint()\n'
p1101
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1102
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1103
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1104
S'.text:0000000000404210\n.text:0000000000404213\n.text:0000000000404216\n.text:0000000000404219\n'
p1105
tp1106
sS'_fini'
p1107
(S'\n__stdcall _fini()\n'
p1108
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1109
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1110
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1111
S'.fini:000000000040483c\n.fini:0000000000404840\n.fini:0000000000404844\n'
p1112
tp1113
sS'__fpending'
p1114
(S'\n__stdcall __fpending()\n'
p1115
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00607050)();\u000a  return;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x00607050]\n'
p1117
S'ff 25 2a 5d 20 00\n'
p1118
S'.plt:0000000000401320\n'
p1119
tp1120
s.