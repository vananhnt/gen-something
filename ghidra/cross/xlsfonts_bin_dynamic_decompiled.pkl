(dp0
S'fflush'
p1
(S'\n__stdcall fflush(FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_006040a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x006040a8]\n'
p4
S'ff 25 a2 33 20 00\n'
p5
S'.plt:0000000000400d00\n'
p6
tp7
sS'__libc_csu_init'
p8
(S'\n__stdcall __libc_csu_init()\n'
p9
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x603df8]\nPUSH RBP\nLEA RBP,[0x603e00]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00400bb8\nTEST RBP,RBP\nJZ 0x004023f6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004023e0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p11
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 46 1a 20 00\n55\n48 8d 2d 46 1a 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 e7 e7 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p12
S'.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a4\n.text:00000000004023a7\n.text:00000000004023a9\n.text:00000000004023ab\n.text:00000000004023b2\n.text:00000000004023b3\n.text:00000000004023ba\n.text:00000000004023bb\n.text:00000000004023be\n.text:00000000004023c1\n.text:00000000004023c4\n.text:00000000004023c8\n.text:00000000004023cc\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023d8\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023e9\n.text:00000000004023ed\n.text:00000000004023f1\n.text:00000000004023f4\n.text:00000000004023f6\n.text:00000000004023fa\n.text:00000000004023fb\n.text:00000000004023fc\n.text:00000000004023fe\n.text:0000000000402400\n.text:0000000000402402\n.text:0000000000402404\n'
p13
tp14
sS'_init'
p15
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p16
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00603ff8;\u000a  if (PTR___gmon_start___00603ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00603ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00603ff8]\nTEST RAX,RAX\nJZ 0x00400bca\nCALL RAX\nADD RSP,0x8\nRET\n'
p18
S'48 83 ec 08\n48 8b 05 35 34 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p19
S'.init:0000000000400bb8\n.init:0000000000400bbc\n.init:0000000000400bc3\n.init:0000000000400bc6\n.init:0000000000400bc8\n.init:0000000000400bca\n.init:0000000000400bce\n'
p20
tp21
sS'XUnloadFont'
p22
(S'\n__stdcall XUnloadFont()\n'
p23
V\u000avoid XUnloadFont(void)\u000a\u000a{\u000a  (*(code *)PTR_XUnloadFont_00604028)();\u000a  return;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x00604028]\n'
p25
S'ff 25 22 34 20 00\n'
p26
S'.plt:0000000000400c00\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage(char * errmsg)\n'
p30
V\u000avoid usage(char *errmsg)\u000a\u000a{\u000a  if (errmsg != (char *)0x0) {\u000a    fprintf(stderr,"%s: %s\u005cn\u005cn",program_name);\u000a  }\u000a  fprintf(stderr,"usage:  %s [-options] [-fn pattern]\u005cn%s",program_name,\u000a                    \u000a          "where options include:\u005cn    -l[l[l]]                 give long info about each font\u005cn    -m                       give character min and max bounds\u005cn    -C                       force columns\u005cn    -1                       force single column\u005cn    -u                       keep output unsorted\u005cn    -o                       use OpenFont/QueryFont instead of ListFonts\u005cn    -w width                 maximum width for multiple columns\u005cn    -n columns               number of columns if multi column\u005cn    -display displayname     X server to contact\u005cn    -d displayname           (alias for -display displayname)\u005cn    -v                       print program version\u005cn\u005cn"\u000a         );\u000a  Close_Display();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p31
S'PUSH RAX\nMOV RCX,RDI\nTEST RCX,RCX\nJZ 0x004011b3\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x4027b0\nXOR EAX,EAX\nCALL 0x00400ce0\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x4027b9\nMOV ECX,0x4027e0\nXOR EAX,EAX\nCALL 0x00400ce0\nCALL 0x00401070\nMOV EDI,0x1\nCALL 0x00400d90\n'
p32
S'50\n48 89 f9\n48 85 c9\n74 1a\n48 8b 3d c0 2f 20 00\n48 8b 15 71 2f 20 00\nbe b0 27 40 00\n31 c0\ne8 2d fb ff ff\n48 8b 3d a6 2f 20 00\n48 8b 15 57 2f 20 00\nbe b9 27 40 00\nb9 e0 27 40 00\n31 c0\ne8 0e fb ff ff\ne8 99 fe ff ff\nbf 01 00 00 00\ne8 af fb ff ff\n'
p33
S'.text:0000000000401190\n.text:0000000000401191\n.text:0000000000401194\n.text:0000000000401197\n.text:0000000000401199\n.text:00000000004011a0\n.text:00000000004011a7\n.text:00000000004011ac\n.text:00000000004011ae\n.text:00000000004011b3\n.text:00000000004011ba\n.text:00000000004011c1\n.text:00000000004011c6\n.text:00000000004011cb\n.text:00000000004011cd\n.text:00000000004011d2\n.text:00000000004011d7\n.text:00000000004011dc\n'
p34
tp35
sS'main'
p36
(S'\n__stdcall main(char * * argv)\n'
p37
V\u000aint main(char **argv)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  bool bVar2;\u000a  undefined4 *puVar3;\u000a  int iVar4;\u000a  int extraout_EAX;\u000a  int iVar5;\u000a  long lVar6;\u000a  size_t sVar7;\u000a  ulong uVar8;\u000a  long lVar9;\u000a  char *__format;\u000a  char cVar10;\u000a  int *unaff_RBX;\u000a  FontList *pFVar11;\u000a  char **argv_00;\u000a  undefined *puVar12;\u000a  char **ppcVar13;\u000a  char *pcVar14;\u000a  long lVar15;\u000a  uint uVar16;\u000a  long lVar17;\u000a  int *piVar18;\u000a  undefined4 *puStack16616;\u000a  char *pcStack16608;\u000a  long lStack16600;\u000a  long lStack16592;\u000a  ulong uStack16584;\u000a  ulong uStack16576;\u000a  undefined4 uStack16568;\u000a  undefined4 uStack16564;\u000a  undefined4 uStack16560;\u000a  undefined4 uStack16556;\u000a  undefined8 uStack16552;\u000a  undefined4 uStack8376;\u000a  undefined4 uStack8372;\u000a  undefined4 uStack8368;\u000a  undefined4 uStack8364;\u000a  undefined8 uStack8360;\u000a  int *piStack176;\u000a  long *plStack168;\u000a  char ***pppcStack160;\u000a  char *pcStack152;\u000a  int *piStack144;\u000a  char **ppcStack136;\u000a  int iStack116;\u000a  long lStack112;\u000a  char **ppcStack104;\u000a  int *piStack96;\u000a  undefined8 uStack88;\u000a  undefined8 uStack80;\u000a  char **ppcStack72;\u000a  int *piStack64;\u000a  int iStack56;\u000a  int local_34;\u000a  \u000a  local_34 = (int)argv;\u000a  program_name = *argv_00;\u000a  piStack64 = (int *)0x401216;\u000a  Setup_Display_And_Screen(&iStack56 + 1,argv_00);\u000a  local_34 = local_34 + -1;\u000a  if (local_34 != 0) {\u000a    piVar18 = (int *)0x0;\u000a    plStack168 = (long *)0x200000000;\u000a    do {\u000a      while( true ) {\u000a        ppcStack72 = argv_00 + 1;\u000a        iVar5 = (int)piVar18;\u000a        if (*argv_00[1] == '-') break;\u000a        piStack64 = (int *)0x40123e;\u000a        get_list(argv_00[1]);\u000a        argv_00 = ppcStack72;\u000aLAB_00401382:\u000a        piVar18 = (int *)(ulong)(iVar5 + 1);\u000a        local_34 = local_34 + -1;\u000a        if (local_34 == 0) goto LAB_004013a0;\u000a      }\u000a      if (0 < iVar5) {\u000aLAB_00401410:\u000a        piStack64 = (int *)0x40141a;\u000a        usage("options may not be specified after font names");\u000a        iVar4 = local_34;\u000aLAB_0040141a:\u000a        local_34 = iVar4;\u000a        piStack64 = (int *)0x401424;\u000a        usage("-n requires an argument");\u000a        iVar4 = local_34;\u000aLAB_00401424:\u000a        local_34 = iVar4;\u000a        piStack64 = (int *)0x40142e;\u000a        usage("-w requires an argument");\u000aLAB_0040142e:\u000a        pcStack152 = "-fn requires an argument";\u000a        piStack64 = (int *)0x401438;\u000a        usage("-fn requires an argument");\u000a        uStack80 = 0x100000000;\u000a        uStack88 = 0x200000000;\u000a        iStack116 = nnames + 1;\u000a        ppcVar13 = ppcStack72;\u000a        piStack144 = piVar18;\u000a        ppcStack104 = (char **)pcStack152;\u000a        piStack96 = unaff_RBX;\u000a        piStack64 = piVar18;\u000a        if (open_instead_of_list != 0) goto LAB_0040146c;\u000a        piStack144 = &iStack116;\u000a        plStack168 = &lStack112;\u000a        ppcStack104 = (char **)pcStack152;\u000a        piStack96 = unaff_RBX;\u000a        piStack64 = piVar18;\u000a        goto LAB_00401570;\u000a      }\u000a      __format = *ppcStack72;\u000a      unaff_RBX = (int *)((ulong)unaff_RBX & 0xffffffffffffff00 | (ulong)(byte)__format[1]);\u000a      if (__format[1] == 0) {\u000aLAB_004013ef:\u000a        piStack64 = (int *)0x401409;\u000a        fprintf(stderr,"%s: unrecognized argument %s\u005cn\u005cn",program_name);\u000a        piStack64 = (int *)0x401410;\u000a        usage((char *)0x0);\u000a        goto LAB_00401410;\u000a      }\u000a      lVar6 = 0;\u000a      lVar9 = 0x200000000;\u000a      do {\u000a        cVar10 = (char)unaff_RBX;\u000a        unaff_RBX = (int *)(ulong)(uint)(int)cVar10;\u000a        switch((int)cVar10) {\u000a        case 0x31:\u000a          columns = 1;\u000a          break;\u000a        default:\u000a          piStack64 = (int *)0x4013e8;\u000a          fprintf(stderr,"%s: unrecognized argument -%c\u005cn\u005cn",program_name);\u000a          piStack64 = (int *)0x4013ef;\u000a          usage((char *)0x0);\u000a          goto LAB_004013ef;\u000a        case 0x43:\u000a          columns = 0;\u000a          break;\u000a        case 0x66:\u000a          if (__format[lVar9 >> 0x20] != 'n') goto LAB_004013ef;\u000a          iVar4 = local_34 + -1;\u000a          bVar2 = local_34 < 2;\u000a          local_34 = iVar4;\u000a          if (bVar2) goto LAB_0040142e;\u000a          ppcVar13 = argv_00 + 2;\u000a          argv_00 = argv_00 + 2;\u000a          piStack64 = (int *)0x40137f;\u000a          local_34 = iVar4;\u000a          get_list(*ppcVar13);\u000a          goto LAB_00401382;\u000a        case 0x6c:\u000a          long_list = long_list + 1;\u000a          break;\u000a        case 0x6d:\u000a          min_max = min_max + 1;\u000a          break;\u000a        case 0x6e:\u000a          iVar4 = local_34 + -1;\u000a          if (1 < local_34) {\u000a            unaff_RBX = &columns;\u000a            goto LAB_00401329;\u000a          }\u000a          goto LAB_0040141a;\u000a        case 0x6f:\u000a          open_instead_of_list = 1;\u000a          break;\u000a        case 0x75:\u000a          sort_output = 1;\u000a          break;\u000a        case 0x76:\u000a          piStack64 = (int *)0x4013c5;\u000a          puts("xlsfonts 1.0.5");\u000a                    /* WARNING: Subroutine does not return */\u000a          piStack64 = (int *)0x4013cc;\u000a          exit(0);\u000a        case 0x77:\u000a          iVar4 = local_34 + -1;\u000a          if (local_34 < 2) goto LAB_00401424;\u000a          unaff_RBX = &max_output_line_width;\u000aLAB_00401329:\u000a          local_34 = local_34 + -1;\u000a          piStack64 = (int *)0x401336;\u000a          iVar4 = atoi(argv_00[2]);\u000a          *unaff_RBX = iVar4;\u000a          ppcStack72 = argv_00 + 2;\u000a          goto LAB_0040133b;\u000a        }\u000a        __format = *ppcStack72;\u000a        lVar15 = lVar6 + 2;\u000a        unaff_RBX = (int *)(ulong)(byte)__format[lVar15];\u000a        lVar9 = lVar9 + 0x100000000;\u000a        lVar6 = lVar6 + 1;\u000a      } while (__format[lVar15] != 0);\u000a      if ((int)lVar6 == 0) goto LAB_004013ef;\u000aLAB_0040133b:\u000a      argv_00 = ppcStack72;\u000a      local_34 = local_34 + -1;\u000a    } while (local_34 != 0);\u000a    if (iVar5 != 0) goto LAB_004013a0;\u000a  }\u000a  piStack64 = (int *)0x4013a0;\u000a  get_list("*");\u000aLAB_004013a0:\u000a  piStack64 = (int *)0x4013a5;\u000a  show_fonts();\u000a  piStack64 = (int *)0x4013aa;\u000a  Close_Display();\u000a  return 0;\u000a  while( true ) {\u000a    if (iStack116 < nnames) goto LAB_004014ad;\u000a    if (long_list == 1) {\u000a      ppcStack136 = (char **)0x4015d9;\u000a      XFreeFontInfo(pppcStack160,lStack112);\u000a    }\u000a    else {\u000a      ppcStack136 = (char **)0x4015e8;\u000a      XFreeFontNames(pppcStack160);\u000a    }\u000a    nnames = iStack116 * 2;\u000a    ppcVar13 = (char **)pcStack152;\u000a    if (open_instead_of_list != 0) break;\u000aLAB_00401570:\u000a    if (long_list == 1) {\u000a      ppcStack136 = (char **)0x401594;\u000a      pppcStack160 = (char ***)XListFontsWithInfo(dpy,pcStack152);\u000a    }\u000a    else {\u000a      ppcStack136 = (char **)0x4015ab;\u000a      pppcStack160 = (char ***)XListFonts(dpy,pcStack152,(ulong)(uint)nnames);\u000a    }\u000a    if (pppcStack160 == (char ***)0x0) goto LAB_00401608;\u000a  }\u000aLAB_0040146c:\u000a  ppcStack136 = (char **)0x40147d;\u000a  lStack112 = XLoadQueryFont(dpy,ppcStack104);\u000a  if (lStack112 == 0) {\u000aLAB_00401608:\u000a    ppcStack136 = (char **)0x401627;\u000a    iVar5 = fprintf(stderr,"%s: pattern \u005c"%s\u005c" unmatched\u005cn",program_name,ppcStack104);\u000a  }\u000a  else {\u000a    iStack116 = 1;\u000a    ppcStack136 = (char **)0x4014a8;\u000a    XUnloadFont(dpy,*(undefined8 *)(lStack112 + 8));\u000a    pppcStack160 = &ppcStack104;\u000a    pcStack152 = (char *)ppcVar13;\u000aLAB_004014ad:\u000a    ppcStack136 = (char **)0x4014cc;\u000a    font_list = (FontList *)realloc(font_list,((long)font_cnt + (long)iStack116) * 0x10);\u000a    iVar4 = long_list;\u000a    iVar5 = (int)font_list;\u000a    if (font_list == (FontList *)0x0) {\u000a      ppcStack136 = (char **)0x401641;\u000a      Fatal_Error("Out of memory!");\u000a      iVar5 = extraout_EAX;\u000a      if ((long)font_cnt != 0) {\u000a        piStack176 = unaff_RBX;\u000a        ppcStack136 = argv_00;\u000a        if (sort_output == 0) {\u000a          piStack176 = unaff_RBX;\u000a          ppcStack136 = argv_00;\u000a          qsort(font_list,(long)font_cnt,0x10,compare);\u000a        }\u000a        if (long_list < 2) {\u000a          if (long_list == 1) {\u000a            printf("DIR  ");\u000a            printf("MIN  ");\u000a            printf("MAX ");\u000a            printf("EXIST ");\u000a            printf("DFLT ");\u000a            printf("PROP ");\u000a            printf("ASC ");\u000a            printf("DESC ");\u000a            printf("NAME");\u000a            iVar5 = putchar(10);\u000a            if (0 < font_cnt) {\u000a              lVar6 = 0;\u000a              lVar9 = 0;\u000a              do {\u000a                lVar15 = *(long *)((long)&font_list->info + lVar6);\u000a                if (lVar15 == 0) {\u000a                  lVar15 = *(long *)((long)&font_list->name + lVar6);\u000a                  if (lVar15 == 0) {\u000a                    lVar15 = 0x402ddb;\u000a                  }\u000a                  fprintf(stderr,"%s:  no font information for font \u005c"%s\u005c".\u005cn",program_name,lVar15);\u000a                }\u000a                else {\u000a                  puVar12 = &DAT_00402bbe;\u000a                  if (*(int *)(lVar15 + 0x10) == 1) {\u000a                    puVar12 = &DAT_00402bba;\u000a                  }\u000a                  if (*(int *)(lVar15 + 0x10) == 0) {\u000a                    puVar12 = &DAT_00402bb6;\u000a                  }\u000a                  printf("%-4s",puVar12);\u000a                  if ((*(int *)(lVar15 + 0x1c) == 0) && (*(int *)(lVar15 + 0x20) == 0)) {\u000a                    printf(" %3d ",(ulong)*(uint *)(lVar15 + 0x14));\u000a                    uVar16 = *(uint *)(lVar15 + 0x18);\u000a                    __format = " %3d ";\u000a                  }\u000a                  else {\u000a                    printf("*%3d ",(ulong)*(uint *)(lVar15 + 0x1c));\u000a                    uVar16 = *(uint *)(lVar15 + 0x20);\u000a                    __format = "*%3d ";\u000a                  }\u000a                  printf(__format,(ulong)uVar16);\u000a                  puVar12 = &DAT_00402bdc;\u000a                  if (*(int *)(lVar15 + 0x24) != 0) {\u000a                    puVar12 = &DAT_00402bd8;\u000a                  }\u000a                  printf("%5s ",puVar12);\u000a                  printf("%4d ",(ulong)*(uint *)(lVar15 + 0x28));\u000a                  printf("%4d ",(ulong)*(uint *)(lVar15 + 0x2c));\u000a                  printf("%3d ",(ulong)*(uint *)(lVar15 + 0x58));\u000a                  printf("%4d ",(ulong)*(uint *)(lVar15 + 0x5c));\u000a                  puts(*(char **)((long)&font_list->name + lVar6));\u000a                  if (min_max != 0) {\u000a                    puStack16616 = &uStack16568;\u000a                    uStack8360 = 0x28203d2029642c;\u000a                    uStack8376 = DAT_00402be6;\u000a                    uStack8372 = DAT_00402bea;\u000a                    uStack8368 = DAT_00402bee;\u000a                    uStack8364 = ",w,a,d) = ("._0_4_;\u000a                    uStack16552 = 0x28203d2029642c;\u000a                    uStack16568 = DAT_00402bfe;\u000a                    uStack16564 = DAT_00402c02;\u000a                    uStack16560 = DAT_00402c06;\u000a                    uStack16556 = ",w,a,d) = ("._0_4_;\u000a                    sVar7 = strlen((char *)&uStack8376);\u000a                    puVar3 = puStack16616;\u000a                    pcStack16608 = (char *)((long)&uStack8376 + sVar7);\u000a                    sVar7 = strlen((char *)puStack16616);\u000a                    puStack16616 = (undefined4 *)(sVar7 + (long)puVar3);\u000a                    copy_number(&pcStack16608,(char **)&puStack16616);\u000a                    *(undefined *)puStack16616 = 0x2c;\u000a                    *pcStack16608 = ',';\u000a                    puStack16616 = (undefined4 *)((long)puStack16616 + 1);\u000a                    pcStack16608 = pcStack16608 + 1;\u000a                    copy_number(&pcStack16608,(char **)&puStack16616);\u000a                    *(undefined *)puStack16616 = 0x2c;\u000a                    *pcStack16608 = ',';\u000a                    puStack16616 = (undefined4 *)((long)puStack16616 + 1);\u000a                    pcStack16608 = pcStack16608 + 1;\u000a                    copy_number(&pcStack16608,(char **)&puStack16616);\u000a                    *(undefined *)puStack16616 = 0x2c;\u000a                    *pcStack16608 = ',';\u000a                    puStack16616 = (undefined4 *)((long)puStack16616 + 1);\u000a                    pcStack16608 = pcStack16608 + 1;\u000a                    copy_number(&pcStack16608,(char **)&puStack16616);\u000a                    *(undefined *)puStack16616 = 0x2c;\u000a                    *pcStack16608 = ',';\u000a                    puStack16616 = (undefined4 *)((long)puStack16616 + 1);\u000a                    pcStack16608 = pcStack16608 + 1;\u000a                    copy_number(&pcStack16608,(char **)&puStack16616);\u000a                    *(undefined *)puStack16616 = 0x29;\u000a                    *pcStack16608 = ')';\u000a                    *(undefined *)((long)puStack16616 + 1) = 0;\u000a                    pcStack16608[1] = 0;\u000a                    puts((char *)&uStack8376);\u000a                    puts((char *)&uStack16568);\u000a                  }\u000a                }\u000a                lVar9 = lVar9 + 1;\u000a                lVar6 = lVar6 + 0x10;\u000a                iVar5 = font_cnt;\u000a              } while (lVar9 < (long)font_cnt);\u000a            }\u000a          }\u000a          else {\u000a            iVar5 = columns;\u000a            if (((columns == 0) && (iVar5 = isatty(1), iVar5 != 0)) || (1 < columns)) {\u000a              iVar5 = font_cnt;\u000a              if (font_cnt < 1) {\u000aLAB_00401c68:\u000a                ppcVar13 = (char **)(ulong)(uint)iVar5;\u000a                __format = "all %d fontnames listed are zero length";\u000a                Fatal_Error("all %d fontnames listed are zero length");\u000a                __format = *(char **)__format;\u000a                pcVar14 = *ppcVar13;\u000a                cVar10 = *__format;\u000a                while ((int)cVar10 != 0) {\u000a                  __format = __format + 1;\u000a                  if ((cVar10 != *pcVar14) || (*pcVar14 == 0)) break;\u000a                  pcVar14 = pcVar14 + 1;\u000a                  cVar10 = *__format;\u000a                }\u000a                return (int)cVar10 - (int)*pcVar14;\u000a              }\u000a              lVar9 = (long)font_cnt;\u000a              lVar6 = 0;\u000a              uVar16 = 0;\u000a              pFVar11 = font_list;\u000a              do {\u000a                sVar7 = strlen(pFVar11->name);\u000a                if ((int)uVar16 <= (int)(uint)sVar7) {\u000a                  uVar16 = (uint)sVar7;\u000a                }\u000a                lVar6 = lVar6 + 1;\u000a                pFVar11 = pFVar11 + 1;\u000a              } while (lVar6 < lVar9);\u000a              if (uVar16 == 0) goto LAB_00401c68;\u000a              if (columns == 0) {\u000a                iVar5 = 1;\u000a                if ((int)(uVar16 * 2 + 3) <= max_output_line_width) {\u000a                  uVar16 = uVar16 + 3;\u000a                  iVar5 = (max_output_line_width + 3) / (int)uVar16;\u000a                }\u000a              }\u000a              else {\u000a                uVar16 = uVar16 + 3;\u000a                iVar5 = columns;\u000a              }\u000a              columns = iVar5;\u000a              if (1 < iVar5) {\u000a                columns = iVar5;\u000a                if (font_cnt < iVar5) {\u000a                  columns = font_cnt;\u000a                }\u000a                uStack16584 = (long)(font_cnt + -1 + columns) / (long)columns & 0xffffffff;\u000a                iVar5 = (int)uStack16584;\u000a                if (iVar5 < 1) {\u000a                  return iVar5;\u000a                }\u000a                lVar6 = (long)iVar5;\u000a                lStack16592 = -lVar6;\u000a                lStack16600 = 0;\u000a                uStack16576 = 0;\u000a                do {\u000a                  uVar8 = (ulong)(uint)columns;\u000a                  if (0 < columns) {\u000a                    lVar17 = 0;\u000a                    lVar9 = lStack16600;\u000a                    lVar15 = lStack16592;\u000a                    do {\u000a                      lVar15 = lVar15 + lVar6;\u000a                      if ((long)font_cnt <= lVar15) break;\u000a                      iVar5 = (int)lVar17;\u000a                      lVar17 = lVar17 + 1;\u000a                      uVar1 = *(undefined8 *)((long)&font_list->name + lVar9);\u000a                      if (iVar5 + 1 == (int)uVar8) {\u000a                        printf("%s",uVar1);\u000a                      }\u000a                      else {\u000a                        printf("%-*s",(ulong)uVar16,uVar1);\u000a                      }\u000a                      lVar9 = lVar9 + lVar6 * 0x10;\u000a                      uVar8 = SEXT48(columns);\u000a                    } while (lVar17 < (long)uVar8);\u000a                  }\u000a                  putchar(10);\u000a                  uStack16576 = uStack16576 + 1;\u000a                  lStack16592 = lStack16592 + 1;\u000a                  lStack16600 = lStack16600 + 0x10;\u000a                  if (uStack16576 == uStack16584) {\u000a                    return (int)uStack16576;\u000a                  }\u000a                } while( true );\u000a              }\u000a            }\u000a            if (0 < font_cnt) {\u000a              lVar6 = 0;\u000a              lVar9 = 0;\u000a              do {\u000a                puts(*(char **)((long)&font_list->name + lVar6));\u000a                lVar9 = lVar9 + 1;\u000a                lVar6 = lVar6 + 0x10;\u000a                iVar5 = font_cnt;\u000a              } while (lVar9 < (long)font_cnt);\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          iVar5 = long_list;\u000a          if (0 < font_cnt) {\u000a            lVar6 = 0;\u000a            lVar9 = 0;\u000a            do {\u000a              do_query_font(dpy,*(char **)((long)&font_list->name + lVar6));\u000a              lVar9 = lVar9 + 1;\u000a              lVar6 = lVar6 + 0x10;\u000a              iVar5 = font_cnt;\u000a            } while (lVar9 < (long)font_cnt);\u000a          }\u000a        }\u000a      }\u000a      return iVar5;\u000a    }\u000a    if (0 < iStack116) {\u000a      lVar9 = (long)font_cnt << 4;\u000a      lVar6 = 0;\u000a      lVar15 = 0;\u000a      do {\u000a        *(char ***)((long)&font_list->name + lVar9) = pppcStack160[lVar15];\u000a        lVar17 = lStack112 + lVar6;\u000a        if (iVar4 != 1) {\u000a          lVar17 = 0;\u000a        }\u000a        *(long *)((long)&font_list->info + lVar9) = lVar17;\u000a        lVar15 = lVar15 + 1;\u000a        lVar6 = lVar6 + 0x60;\u000a        iVar5 = (int)lVar6;\u000a        lVar9 = lVar9 + 0x10;\u000a      } while (lVar15 < (long)iStack116);\u000a      font_cnt = font_cnt + (int)lVar15;\u000a    }\u000a  }\u000a  return iVar5;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV dword ptr [RSP + 0x4],EDI\nMOV RAX,qword ptr [R14]\nMOV qword ptr [0x00604118],RAX\nLEA RDI,[RSP + 0x4]\nCALL 0x00400ec0\nDEC dword ptr [RSP + 0x4]\nJZ 0x00401396\nXOR R15D,R15D\nMOV R12,0x200000000\nMOV R13,0x100000000\nJMP 0x00401250\nCALL 0x00401440\nJMP 0x00401382\nMOV RBP,R14\nLEA R14,[RBP + 0x8]\nMOV RDI,qword ptr [RBP + 0x8]\nCMP byte ptr [RDI],0x2d\nJNZ 0x00401239\nTEST R15D,R15D\nJG 0x00401410\nMOV RCX,qword ptr [R14]\nMOV BL,byte ptr [RCX + 0x1]\nTEST BL,BL\nJZ 0x004013ef\nXOR EAX,EAX\nMOV RDX,R12\nMOVSX EBX,BL\nLEA ESI,[RBX + -0x31]\nCMP ESI,0x46\nJA 0x004013cc\nJMP qword ptr [0x402490 + RSI*0x8]\nMOV dword ptr [0x00604188],0x1\nJMP 0x004012d0\nMOV dword ptr [0x00604188],0x0\nJMP 0x004012d0\nINC dword ptr [0x00604180]\nJMP 0x004012d0\nINC dword ptr [0x00604184]\nJMP 0x004012d0\nMOV byte ptr [0x0060418c],0x1\nJMP 0x004012d0\nMOV byte ptr [0x00604190],0x1\nNOP word ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [R14]\nMOVZX EBX,byte ptr [RCX + RAX*0x1 + 0x2]\nADD RDX,R13\nINC RAX\nTEST BL,BL\nJNZ 0x0040127c\nTEST EAX,EAX\nJNZ 0x0040133b\nJMP 0x004013ef\nMOV EAX,dword ptr [RSP + 0x4]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x4],ECX\nCMP EAX,0x1\nJLE 0x0040141a\nMOV EBX,0x604188\nJMP 0x00401329\nMOV EAX,dword ptr [RSP + 0x4]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x4],ECX\nCMP EAX,0x1\nJLE 0x00401424\nMOV EBX,0x604120\nMOV RDI,qword ptr [RBP + 0x10]\nADD RBP,0x10\nCALL 0x00400d70\nMOV dword ptr [RBX],EAX\nMOV R14,RBP\nDEC dword ptr [RSP + 0x4]\nMOV RBP,R14\nJNZ 0x00401253\nJMP 0x00401391\nSAR RDX,0x20\nCMP byte ptr [RCX + RDX*0x1],0x6e\nJNZ 0x004013ef\nMOV EAX,dword ptr [RSP + 0x4]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x4],ECX\nCMP EAX,0x1\nJLE 0x0040142e\nMOV RDI,qword ptr [RBP + 0x10]\nADD RBP,0x10\nCALL 0x00401440\nMOV R14,RBP\nINC R15D\nDEC dword ptr [RSP + 0x4]\nJNZ 0x00401250\nJMP 0x004013a0\nTEST R15D,R15D\nJNZ 0x004013a0\nMOV EDI,0x402b31\nCALL 0x00401440\nCALL 0x00401650\nCALL 0x00401070\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x402b02\nCALL 0x00400c10\nXOR EDI,EDI\nCALL 0x00400d90\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x402b11\nXOR EAX,EAX\nMOV ECX,EBX\nCALL 0x00400ce0\nXOR EDI,EDI\nCALL 0x00401190\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x402a9a\nXOR EAX,EAX\nCALL 0x00400ce0\nXOR EDI,EDI\nCALL 0x00401190\nMOV EDI,0x402a6c\nCALL 0x00401190\nMOV EDI,0x402aea\nCALL 0x00401190\nMOV EDI,0x402ad2\nCALL 0x00401190\nMOV EDI,0x402ab9\nCALL 0x00401190\nNOP dword ptr [RAX + RAX*0x1]\n'
p39
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n89 7c 24 04\n49 8b 06\n48 89 05 0c 2f 20 00\n48 8d 7c 24 04\ne8 aa fc ff ff\nff 4c 24 04\n0f 84 76 01 00 00\n45 31 ff\n49 bc 00 00 00 00 02 00 00 00\n49 bd 00 00 00 00 01 00 00 00\neb 17\ne8 02 02 00 00\ne9 3f 01 00 00\n4c 89 f5\n4c 8d 75 08\n48 8b 7d 08\n80 3f 2d\n75 d9\n45 85 ff\n0f 8f a7 01 00 00\n49 8b 0e\n8a 59 01\n84 db\n0f 84 78 01 00 00\n31 c0\n4c 89 e2\n0f be db\n8d 73 cf\n83 fe 46\n0f 87 41 01 00 00\nff 24 f5 90 24 40 00\nc7 05 ec 2e 20 00 01 00 00 00\neb 32\nc7 05 e0 2e 20 00 00 00 00 00\neb 26\nff 05 d0 2e 20 00\neb 1e\nff 05 cc 2e 20 00\neb 16\nc6 05 cb 2e 20 00 01\neb 0d\nc6 05 c6 2e 20 00 01\n66 0f 1f 44 00 00\n49 8b 0e\n0f b6 5c 01 02\n4c 01 ea\n48 ff c0\n84 db\n75 9a\n85 c0\n75 55\ne9 04 01 00 00\n8b 44 24 04\n8d 48 ff\n89 4c 24 04\n83 f8 01\n0f 8e 16 01 00 00\nbb 88 41 60 00\neb 1e\n8b 44 24 04\n8d 48 ff\n89 4c 24 04\n83 f8 01\n0f 8e 00 01 00 00\nbb 20 41 60 00\n48 8b 7d 10\n48 83 c5 10\ne8 3a fa ff ff\n89 03\n49 89 ee\nff 4c 24 04\n4c 89 f5\n0f 85 0b ff ff ff\neb 47\n48 c1 fa 20\n80 3c 11 6e\n0f 85 91 00 00 00\n8b 44 24 04\n8d 48 ff\n89 4c 24 04\n83 f8 01\n0f 8e bc 00 00 00\n48 8b 7d 10\n48 83 c5 10\ne8 c1 00 00 00\n49 89 ee\n41 ff c7\nff 4c 24 04\n0f 85 c1 fe ff ff\neb 0f\n45 85 ff\n75 0a\nbf 31 2b 40 00\ne8 a0 00 00 00\ne8 ab 02 00 00\ne8 c6 fc ff ff\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 02 2b 40 00\ne8 4b f8 ff ff\n31 ff\ne8 c4 f9 ff ff\n48 8b 3d 8d 2d 20 00\n48 8b 15 3e 2d 20 00\nbe 11 2b 40 00\n31 c0\n89 d9\ne8 f8 f8 ff ff\n31 ff\ne8 a1 fd ff ff\n48 8b 3d 6a 2d 20 00\n48 8b 15 1b 2d 20 00\nbe 9a 2a 40 00\n31 c0\ne8 d7 f8 ff ff\n31 ff\ne8 80 fd ff ff\nbf 6c 2a 40 00\ne8 76 fd ff ff\nbf ea 2a 40 00\ne8 6c fd ff ff\nbf d2 2a 40 00\ne8 62 fd ff ff\nbf b9 2a 40 00\ne8 58 fd ff ff\n0f 1f 84 00 00 00 00 00\n'
p40
S'.text:00000000004011f0\n.text:00000000004011f1\n.text:00000000004011f3\n.text:00000000004011f5\n.text:00000000004011f7\n.text:00000000004011f9\n.text:00000000004011fa\n.text:00000000004011fb\n.text:00000000004011fe\n.text:0000000000401202\n.text:0000000000401205\n.text:000000000040120c\n.text:0000000000401211\n.text:0000000000401216\n.text:000000000040121a\n.text:0000000000401220\n.text:0000000000401223\n.text:000000000040122d\n.text:0000000000401237\n.text:0000000000401239\n.text:000000000040123e\n.text:0000000000401250\n.text:0000000000401253\n.text:0000000000401257\n.text:000000000040125b\n.text:000000000040125e\n.text:0000000000401260\n.text:0000000000401263\n.text:0000000000401269\n.text:000000000040126c\n.text:000000000040126f\n.text:0000000000401271\n.text:0000000000401277\n.text:0000000000401279\n.text:000000000040127c\n.text:000000000040127f\n.text:0000000000401282\n.text:0000000000401285\n.text:000000000040128b\n.text:0000000000401292\n.text:000000000040129c\n.text:000000000040129e\n.text:00000000004012a8\n.text:00000000004012aa\n.text:00000000004012b0\n.text:00000000004012b2\n.text:00000000004012b8\n.text:00000000004012ba\n.text:00000000004012c1\n.text:00000000004012c3\n.text:00000000004012ca\n.text:00000000004012d0\n.text:00000000004012d3\n.text:00000000004012d8\n.text:00000000004012db\n.text:00000000004012de\n.text:00000000004012e0\n.text:00000000004012e2\n.text:00000000004012e4\n.text:00000000004012e6\n.text:00000000004012f0\n.text:00000000004012f4\n.text:00000000004012f7\n.text:00000000004012fb\n.text:00000000004012fe\n.text:0000000000401304\n.text:0000000000401309\n.text:0000000000401310\n.text:0000000000401314\n.text:0000000000401317\n.text:000000000040131b\n.text:000000000040131e\n.text:0000000000401324\n.text:0000000000401329\n.text:000000000040132d\n.text:0000000000401331\n.text:0000000000401336\n.text:0000000000401338\n.text:000000000040133b\n.text:000000000040133f\n.text:0000000000401342\n.text:0000000000401348\n.text:0000000000401350\n.text:0000000000401354\n.text:0000000000401358\n.text:000000000040135e\n.text:0000000000401362\n.text:0000000000401365\n.text:0000000000401369\n.text:000000000040136c\n.text:0000000000401372\n.text:0000000000401376\n.text:000000000040137a\n.text:000000000040137f\n.text:0000000000401382\n.text:0000000000401385\n.text:0000000000401389\n.text:000000000040138f\n.text:0000000000401391\n.text:0000000000401394\n.text:0000000000401396\n.text:000000000040139b\n.text:00000000004013a0\n.text:00000000004013a5\n.text:00000000004013aa\n.text:00000000004013ac\n.text:00000000004013b0\n.text:00000000004013b1\n.text:00000000004013b3\n.text:00000000004013b5\n.text:00000000004013b7\n.text:00000000004013b9\n.text:00000000004013ba\n.text:00000000004013bb\n.text:00000000004013c0\n.text:00000000004013c5\n.text:00000000004013c7\n.text:00000000004013cc\n.text:00000000004013d3\n.text:00000000004013da\n.text:00000000004013df\n.text:00000000004013e1\n.text:00000000004013e3\n.text:00000000004013e8\n.text:00000000004013ea\n.text:00000000004013ef\n.text:00000000004013f6\n.text:00000000004013fd\n.text:0000000000401402\n.text:0000000000401404\n.text:0000000000401409\n.text:000000000040140b\n.text:0000000000401410\n.text:0000000000401415\n.text:000000000040141a\n.text:000000000040141f\n.text:0000000000401424\n.text:0000000000401429\n.text:000000000040142e\n.text:0000000000401433\n.text:0000000000401438\n'
p41
tp42
sS'realloc'
p43
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_006040d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006040d0]\n'
p46
S'ff 25 7a 33 20 00\n'
p47
S'.plt:0000000000400d50\n'
p48
tp49
sS'isatty'
p50
(S'\n__stdcall isatty(int __fd)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_00604040)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00604040]\n'
p53
S'ff 25 0a 34 20 00\n'
p54
S'.plt:0000000000400c30\n'
p55
tp56
sS'sprintf'
p57
(S'\n__stdcall sprintf(char * __s, char * __format)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sprintf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sprintf_006040e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x006040e8]\n'
p60
S'ff 25 62 33 20 00\n'
p61
S'.plt:0000000000400d80\n'
p62
tp63
sS'strlen'
p64
(S'\n__stdcall strlen(char * __s)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00604048)();\u000a  return sVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00604048]\n'
p67
S'ff 25 02 34 20 00\n'
p68
S'.plt:0000000000400c40\n'
p69
tp70
sS'vfprintf'
p71
(S'\n__stdcall vfprintf(FILE * __s, char * __format, __gnuc_va_list __arg)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_vfprintf_006040d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x006040d8]\n'
p74
S'ff 25 72 33 20 00\n'
p75
S'.plt:0000000000400d60\n'
p76
tp77
sS'PrintProperty'
p78
(S'\n__stdcall PrintProperty(XFontProp * prop)\n'
p79
V\u000avoid PrintProperty(XFontProp *prop)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  size_t sVar2;\u000a  int iVar3;\u000a  long lVar4;\u000a  ulong uVar5;\u000a  char *__s;\u000a  char *__s_00;\u000a  char nosuch [40];\u000a  char local_48 [40];\u000a  \u000a  uVar1 = XSetErrorHandler(IgnoreError);\u000a  __s_00 = (char *)XGetAtomName(dpy,prop->name);\u000a  if (__s_00 == (char *)0x0) {\u000a    local_48[0] = 0;\u000a    sprintf(local_48,"No such atom = %ld",prop->name);\u000a    __s_00 = local_48;\u000a  }\u000a  printf("      %s",__s_00);\u000a  sVar2 = strlen(__s_00);\u000a  iVar3 = (int)sVar2 + -1;\u000a  do {\u000a    putchar(0x20);\u000a    iVar3 = iVar3 + 1;\u000a  } while (iVar3 < 0x15);\u000a  lVar4 = -0xd8;\u000a  do {\u000a    iVar3 = strcmp(*(char **)((long)stringValued + lVar4 + 0xd8),__s_00);\u000a    if (iVar3 == 0) {\u000a      __s = (char *)XGetAtomName(dpy,prop->card32);\u000a      if (__s != (char *)0x0) {\u000a        puts(__s);\u000a        XFree(__s);\u000a        goto LAB_0040235e;\u000a      }\u000a      uVar5 = prop->card32;\u000a      __s = "%ld (expected string value)\u005cn";\u000a      goto LAB_00402357;\u000a    }\u000a    lVar4 = lVar4 + 8;\u000a  } while (lVar4 != 0);\u000a  uVar5 = prop->card32;\u000a  __s = "%ld\u005cn";\u000aLAB_00402357:\u000a  printf(__s,uVar5);\u000aLAB_0040235e:\u000a  if (__s_00 != local_48) {\u000a    XFree(__s_00);\u000a  }\u000a  XSetErrorHandler(uVar1);\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15,RDI\nMOV EDI,0x402390\nCALL 0x00400cf0\nMOV R14,RAX\nMOV RDI,qword ptr [0x00604170]\nMOV RSI,qword ptr [R15]\nCALL 0x00400d40\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x004022bb\nMOV R12,RSP\nMOV byte ptr [RSP],0x0\nMOV RDX,qword ptr [R15]\nMOV ESI,0x402f40\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00400d80\nMOV EDI,0x402f53\nXOR EAX,EAX\nMOV RSI,R12\nCALL 0x00400c60\nMOV RDI,R12\nCALL 0x00400c40\nMOV RBX,RAX\nDEC EBX\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0x20\nCALL 0x00400bf0\nINC EBX\nCMP EBX,0x15\nJL 0x004022e0\nMOV RBX,-0xd8\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x4027a8 + RBX]\nMOV RSI,R12\nCALL 0x00400cc0\nTEST EAX,EAX\nJZ 0x00402324\nADD RBX,0x8\nJNZ 0x00402300\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDI,0x402f5c\nJMP 0x00402357\nMOV RDI,qword ptr [0x00604170]\nMOV RSI,qword ptr [R15 + 0x8]\nCALL 0x00400d40\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040234e\nMOV RDI,RBX\nCALL 0x00400c10\nMOV RDI,RBX\nCALL 0x00400c70\nJMP 0x0040235e\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDI,0x402f61\nXOR EAX,EAX\nCALL 0x00400c60\nMOV RAX,RSP\nCMP R12,RAX\nJZ 0x0040236e\nMOV RDI,R12\nCALL 0x00400c70\nMOV RDI,R14\nCALL 0x00400cf0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n41 54\n53\n48 83 ec 28\n49 89 ff\nbf 90 23 40 00\ne8 68 ea ff ff\n49 89 c6\n48 8b 3d de 1e 20 00\n49 8b 37\ne8 a6 ea ff ff\n49 89 c4\n4d 85 e4\n75 19\n49 89 e4\nc6 04 24 00\n49 8b 17\nbe 40 2f 40 00\n31 c0\n4c 89 e7\ne8 c5 ea ff ff\nbf 53 2f 40 00\n31 c0\n4c 89 e6\ne8 96 e9 ff ff\n4c 89 e7\ne8 6e e9 ff ff\n48 89 c3\nff cb\n66 0f 1f 84 00 00 00 00 00\nbf 20 00 00 00\ne8 06 e9 ff ff\nff c3\n83 fb 15\n7c ef\n48 c7 c3 28 ff ff ff\n0f 1f 84 00 00 00 00 00\n48 8b bb a8 27 40 00\n4c 89 e6\ne8 b1 e9 ff ff\n85 c0\n74 11\n48 83 c3 08\n75 e7\n49 8b 77 08\nbf 5c 2f 40 00\neb 33\n48 8b 3d 45 1e 20 00\n49 8b 77 08\ne8 0c ea ff ff\n48 89 c3\n48 85 db\n74 12\n48 89 df\ne8 cc e8 ff ff\n48 89 df\ne8 24 e9 ff ff\neb 10\n49 8b 77 08\nbf 61 2f 40 00\n31 c0\ne8 02 e9 ff ff\n48 89 e0\n49 39 c4\n74 08\n4c 89 e7\ne8 02 e9 ff ff\n4c 89 f7\ne8 7a e9 ff ff\n48 83 c4 28\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p82
S'.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402274\n.text:0000000000402276\n.text:0000000000402277\n.text:000000000040227b\n.text:000000000040227e\n.text:0000000000402283\n.text:0000000000402288\n.text:000000000040228b\n.text:0000000000402292\n.text:0000000000402295\n.text:000000000040229a\n.text:000000000040229d\n.text:00000000004022a0\n.text:00000000004022a2\n.text:00000000004022a5\n.text:00000000004022a9\n.text:00000000004022ac\n.text:00000000004022b1\n.text:00000000004022b3\n.text:00000000004022b6\n.text:00000000004022bb\n.text:00000000004022c0\n.text:00000000004022c2\n.text:00000000004022c5\n.text:00000000004022ca\n.text:00000000004022cd\n.text:00000000004022d2\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022e0\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ec\n.text:00000000004022ef\n.text:00000000004022f1\n.text:00000000004022f8\n.text:0000000000402300\n.text:0000000000402307\n.text:000000000040230a\n.text:000000000040230f\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402317\n.text:0000000000402319\n.text:000000000040231d\n.text:0000000000402322\n.text:0000000000402324\n.text:000000000040232b\n.text:000000000040232f\n.text:0000000000402334\n.text:0000000000402337\n.text:000000000040233a\n.text:000000000040233c\n.text:000000000040233f\n.text:0000000000402344\n.text:0000000000402347\n.text:000000000040234c\n.text:000000000040234e\n.text:0000000000402352\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235e\n.text:0000000000402361\n.text:0000000000402364\n.text:0000000000402366\n.text:0000000000402369\n.text:000000000040236e\n.text:0000000000402371\n.text:0000000000402376\n.text:000000000040237a\n.text:000000000040237b\n.text:000000000040237d\n.text:000000000040237f\n.text:0000000000402381\n'
p83
tp84
sS'putchar'
p85
(S'\n__stdcall putchar(int __c)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_00604020)();\u000a  return iVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00604020]\n'
p88
S'ff 25 2a 34 20 00\n'
p89
S'.plt:0000000000400bf0\n'
p90
tp91
sS'IgnoreError'
p92
(S'\n__stdcall IgnoreError(Display * disp, XErrorEvent * event)\n'
p93
V\u000aint IgnoreError(Display *disp,XErrorEvent *event)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p94
S'XOR EAX,EAX\nRET\n'
p95
S'31 c0\nc3\n'
p96
S'.text:0000000000402390\n.text:0000000000402392\n'
p97
tp98
sS'XKeysymToString'
p99
(S'\n__stdcall XKeysymToString()\n'
p100
V\u000avoid XKeysymToString(void)\u000a\u000a{\u000a  (*(code *)PTR_XKeysymToString_00604100)();\u000a  return;\u000a}\u000a\u000a
p101
S'JMP qword ptr [0x00604100]\n'
p102
S'ff 25 4a 33 20 00\n'
p103
S'.plt:0000000000400db0\n'
p104
tp105
sS'XFree'
p106
(S'\n__stdcall XFree()\n'
p107
V\u000avoid XFree(void)\u000a\u000a{\u000a  (*(code *)PTR_XFree_00604060)();\u000a  return;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x00604060]\n'
p109
S'ff 25 ea 33 20 00\n'
p110
S'.plt:0000000000400c70\n'
p111
tp112
sS'XListFontsWithInfo'
p113
(S'\n__stdcall XListFontsWithInfo()\n'
p114
V\u000avoid XListFontsWithInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XListFontsWithInfo_00604080)();\u000a  return;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00604080]\n'
p116
S'ff 25 ca 33 20 00\n'
p117
S'.plt:0000000000400cb0\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x00400eaa) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x603e08\nCMP qword ptr [RDI],0x0\nJNZ 0x00400ea0\nJMP 0x00400e30\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400e9b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00400e30\n'
p123
S'bf 08 3e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:0000000000400e90\n.text:0000000000400e95\n.text:0000000000400e99\n.text:0000000000400e9b\n.text:0000000000400ea0\n.text:0000000000400ea5\n.text:0000000000400ea8\n.text:0000000000400eaa\n.text:0000000000400eab\n.text:0000000000400eae\n.text:0000000000400eb0\n.text:0000000000400eb1\n'
p125
tp126
sS'do_query_font'
p127
(S'\n__stdcall do_query_font(Display * dpy, char * name)\n'
p128
V\u000avoid do_query_font(Display *dpy,char *name)\u000a\u000a{\u000a  XFontStruct *fs;\u000a  long lVar1;\u000a  char *pcVar2;\u000a  undefined *puVar3;\u000a  long lVar4;\u000a  \u000a  fs = (XFontStruct *)XLoadQueryFont();\u000a  if (fs != (XFontStruct *)0x0) {\u000a    pcVar2 = "(nil)";\u000a    if (name != (char *)0x0) {\u000a      pcVar2 = name;\u000a    }\u000a    printf("name:  %s\u005cn",pcVar2);\u000a    pcVar2 = "right to left";\u000a    if (fs->direction == 0) {\u000a      pcVar2 = "left to right";\u000a    }\u000a    printf("  direction:\u005ct\u005ct%s\u005cn",pcVar2);\u000a    if (fs->min_byte1 == 0) {\u000a      pcVar2 = "matrix";\u000a      if (fs->max_byte1 == 0) {\u000a        pcVar2 = "linear";\u000a      }\u000a    }\u000a    else {\u000a      pcVar2 = "matrix";\u000a    }\u000a    printf("  indexing:\u005ct\u005ct%s\u005cn",pcVar2);\u000a    printf("  rows:\u005ct\u005ct\u005ct0x%02x thru 0x%02x (%d thru %d)\u005cn",(ulong)fs->min_byte1,\u000a           (ulong)fs->max_byte1,(ulong)fs->min_byte1,(ulong)fs->max_byte1);\u000a    printf("  columns:\u005ct\u005ct0x%02x thru 0x%02x (%d thru %d)\u005cn",(ulong)fs->min_char_or_byte2,\u000a           (ulong)fs->max_char_or_byte2,(ulong)fs->min_char_or_byte2,(ulong)fs->max_char_or_byte2);\u000a    puVar3 = &DAT_00402d3d;\u000a    if (fs->all_chars_exist != 0) {\u000a      puVar3 = &DAT_00402d39;\u000a    }\u000a    printf("  all chars exist:\u005ct%s\u005cn",puVar3);\u000a    printf("  default char:\u005ct\u005ct0x%04x (%d)\u005cn",(ulong)fs->default_char,(ulong)fs->default_char);\u000a    printf("  ascent:\u005ct\u005ct%d\u005cn",(ulong)(uint)fs->ascent);\u000a    printf("  descent:\u005ct\u005ct%d\u005cn",(ulong)(uint)fs->descent);\u000a    ComputeFontType(fs);\u000a    printf("  bounds:\u005ct\u005ct%s","width left  right  asc  desc   attr   keysym\u005cn");\u000a    printf("\u005ct%3s\u005ct\u005ct%4d  %4d  %4d  %4d  %4d  0x%04x\u005cn",&DAT_00402db2,\u000a           (ulong)(uint)(int)(fs->min_bounds).width,(ulong)(uint)(int)(fs->min_bounds).lbearing,\u000a           (ulong)(uint)(int)(fs->min_bounds).rbearing,(ulong)(uint)(int)(fs->min_bounds).ascent,\u000a           (ulong)(uint)(int)(fs->min_bounds).descent,(ulong)(fs->min_bounds).attributes);\u000a    printf("\u005ct%3s\u005ct\u005ct%4d  %4d  %4d  %4d  %4d  0x%04x\u005cn",&DAT_00402db6,\u000a           (ulong)(uint)(int)(fs->max_bounds).width,(ulong)(uint)(int)(fs->max_bounds).lbearing,\u000a           (ulong)(uint)(int)(fs->max_bounds).rbearing,(ulong)(uint)(int)(fs->max_bounds).ascent,\u000a           (ulong)(uint)(int)(fs->max_bounds).descent,(ulong)(fs->max_bounds).attributes);\u000a    if ((fs->per_char != (XCharStruct *)0x0) && (2 < long_list)) {\u000a      print_character_metrics(fs);\u000a    }\u000a    printf("  properties:\u005ct\u005ct%d\u005cn",(ulong)(uint)fs->n_properties);\u000a    if (0 < fs->n_properties) {\u000a      lVar4 = 0;\u000a      lVar1 = 0;\u000a      do {\u000a        PrintProperty((XFontProp *)((long)&fs->properties->name + lVar4));\u000a        lVar1 = lVar1 + 1;\u000a        lVar4 = lVar4 + 0x10;\u000a      } while (lVar1 < (long)fs->n_properties);\u000a    }\u000a    putchar(10);\u000a    XFreeFontInfo(0,fs,1);\u000a    return;\u000a  }\u000a  fprintf(stderr,"%s:  unable to get info about font \u005c"%s\u005c"\u005cn",program_name,name);\u000a  return;\u000a}\u000a\u000a
p129
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00400c80\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00401d0a\nTEST R14,R14\nMOV ESI,0x402c77\nCMOVNZ RSI,R14\nMOV EDI,0x402c6c\nXOR EAX,EAX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x10],0x0\nMOV EAX,0x402c8f\nMOV ESI,0x402c9d\nCMOVZ RSI,RAX\nMOV EDI,0x402c7d\nXOR EAX,EAX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x1c],0x0\nJZ 0x00401d2c\nMOV ESI,0x402cc3\nJMP 0x00401d3f\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x402c43\nXOR EAX,EAX\nMOV RCX,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00400ce0\nCMP dword ptr [R15 + 0x20],0x0\nMOV EAX,0x402cbc\nMOV ESI,0x402cc3\nCMOVZ RSI,RAX\nMOV EDI,0x402cab\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x1c]\nMOV EDX,dword ptr [R15 + 0x20]\nMOV EDI,0x402cca\nXOR EAX,EAX\nMOV ECX,ESI\nMOV R8D,EDX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x14]\nMOV EDX,dword ptr [R15 + 0x18]\nMOV EDI,0x402cf5\nXOR EAX,EAX\nMOV ECX,ESI\nMOV R8D,EDX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x24],0x0\nMOV EAX,0x402d39\nMOV ESI,0x402d3d\nCMOVNZ RSI,RAX\nMOV EDI,0x402d22\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x28]\nMOV EDI,0x402d40\nXOR EAX,EAX\nMOV EDX,ESI\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x58]\nMOV EDI,0x402d5e\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x5c]\nMOV EDI,0x402d6d\nXOR EAX,EAX\nCALL 0x00400c60\nMOV RDI,R15\nCALL 0x00401fa0\nMOV EDI,0x402d7d\nMOV ESI,0x402ec4\nXOR EAX,EAX\nCALL 0x00400c60\nMOVSX EDX,word ptr [R15 + 0x3c]\nMOVSX ECX,word ptr [R15 + 0x38]\nMOVSX R8D,word ptr [R15 + 0x3a]\nMOVSX R9D,word ptr [R15 + 0x3e]\nMOVSX R10D,word ptr [R15 + 0x40]\nMOVZX EBX,word ptr [R15 + 0x42]\nMOV EDI,0x402d8b\nMOV ESI,0x402db2\nMOV EAX,0x0\nPUSH RBX\nPUSH R10\nCALL 0x00400c60\nADD RSP,0x10\nMOVSX EDX,word ptr [R15 + 0x48]\nMOVSX ECX,word ptr [R15 + 0x44]\nMOVSX R8D,word ptr [R15 + 0x46]\nMOVSX R9D,word ptr [R15 + 0x4a]\nMOVSX R10D,word ptr [R15 + 0x4c]\nMOVZX EBX,word ptr [R15 + 0x4e]\nMOV EDI,0x402d8b\nMOV ESI,0x402db6\nMOV EAX,0x0\nPUSH RBX\nPUSH R10\nCALL 0x00400c60\nADD RSP,0x10\nCMP qword ptr [R15 + 0x50],0x0\nJZ 0x00401e71\nCMP dword ptr [0x00604180],0x3\nJL 0x00401e71\nMOV RDI,R15\nCALL 0x00402140\nMOV ESI,dword ptr [R15 + 0x2c]\nMOV EDI,0x402dba\nXOR EAX,EAX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x2c],0x0\nJLE 0x00401eac\nXOR R14D,R14D\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [R15 + 0x30]\nADD RDI,R14\nCALL 0x00402270\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x2c]\nADD R14,0x10\nCMP RBX,RAX\nJL 0x00401e90\nMOV EDI,0xa\nCALL 0x00400bf0\nXOR EDI,EDI\nMOV EDX,0x1\nMOV RSI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00400d30\n'
p130
S'41 57\n41 56\n53\n49 89 f6\ne8 c3 ef ff ff\n49 89 c7\n4d 85 ff\n74 45\n4d 85 f6\nbe 77 2c 40 00\n49 0f 45 f6\nbf 6c 2c 40 00\n31 c0\ne8 83 ef ff ff\n41 83 7f 10 00\nb8 8f 2c 40 00\nbe 9d 2c 40 00\n48 0f 44 f0\nbf 7d 2c 40 00\n31 c0\ne8 64 ef ff ff\n41 83 7f 1c 00\n74 29\nbe c3 2c 40 00\neb 35\n48 8b 3d 4f 24 20 00\n48 8b 15 00 24 20 00\nbe 43 2c 40 00\n31 c0\n4c 89 f1\n5b\n41 5e\n41 5f\ne9 b4 ef ff ff\n41 83 7f 20 00\nb8 bc 2c 40 00\nbe c3 2c 40 00\n48 0f 44 f0\nbf ab 2c 40 00\n31 c0\ne8 15 ef ff ff\n41 8b 77 1c\n41 8b 57 20\nbf ca 2c 40 00\n31 c0\n89 f1\n41 89 d0\ne8 fc ee ff ff\n41 8b 77 14\n41 8b 57 18\nbf f5 2c 40 00\n31 c0\n89 f1\n41 89 d0\ne8 e3 ee ff ff\n41 83 7f 24 00\nb8 39 2d 40 00\nbe 3d 2d 40 00\n48 0f 45 f0\nbf 22 2d 40 00\n31 c0\ne8 c4 ee ff ff\n41 8b 77 28\nbf 40 2d 40 00\n31 c0\n89 f2\ne8 b2 ee ff ff\n41 8b 77 58\nbf 5e 2d 40 00\n31 c0\ne8 a2 ee ff ff\n41 8b 77 5c\nbf 6d 2d 40 00\n31 c0\ne8 92 ee ff ff\n4c 89 ff\ne8 ca 01 00 00\nbf 7d 2d 40 00\nbe c4 2e 40 00\n31 c0\ne8 79 ee ff ff\n41 0f bf 57 3c\n41 0f bf 4f 38\n45 0f bf 47 3a\n45 0f bf 4f 3e\n45 0f bf 57 40\n41 0f b7 5f 42\nbf 8b 2d 40 00\nbe b2 2d 40 00\nb8 00 00 00 00\n53\n41 52\ne8 44 ee ff ff\n48 83 c4 10\n41 0f bf 57 48\n41 0f bf 4f 44\n45 0f bf 47 46\n45 0f bf 4f 4a\n45 0f bf 57 4c\n41 0f b7 5f 4e\nbf 8b 2d 40 00\nbe b6 2d 40 00\nb8 00 00 00 00\n53\n41 52\ne8 0b ee ff ff\n48 83 c4 10\n49 83 7f 50 00\n74 11\n83 3d 19 23 20 00 03\n7c 08\n4c 89 ff\ne8 cf 02 00 00\n41 8b 77 2c\nbf ba 2d 40 00\n31 c0\ne8 df ed ff ff\n41 83 7f 2c 00\n7e 24\n45 31 f6\n31 db\n0f 1f 00\n49 8b 7f 30\n4c 01 f7\ne8 d4 03 00 00\n48 ff c3\n49 63 47 2c\n49 83 c6 10\n48 39 c3\n7c e4\nbf 0a 00 00 00\ne8 3a ed ff ff\n31 ff\nba 01 00 00 00\n4c 89 fe\n5b\n41 5e\n41 5f\ne9 66 ee ff ff\n'
p131
S'.text:0000000000401cb0\n.text:0000000000401cb2\n.text:0000000000401cb4\n.text:0000000000401cb5\n.text:0000000000401cb8\n.text:0000000000401cbd\n.text:0000000000401cc0\n.text:0000000000401cc3\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401ccd\n.text:0000000000401cd1\n.text:0000000000401cd6\n.text:0000000000401cd8\n.text:0000000000401cdd\n.text:0000000000401ce2\n.text:0000000000401ce7\n.text:0000000000401cec\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d03\n.text:0000000000401d08\n.text:0000000000401d0a\n.text:0000000000401d11\n.text:0000000000401d18\n.text:0000000000401d1d\n.text:0000000000401d1f\n.text:0000000000401d22\n.text:0000000000401d23\n.text:0000000000401d25\n.text:0000000000401d27\n.text:0000000000401d2c\n.text:0000000000401d31\n.text:0000000000401d36\n.text:0000000000401d3b\n.text:0000000000401d3f\n.text:0000000000401d44\n.text:0000000000401d46\n.text:0000000000401d4b\n.text:0000000000401d4f\n.text:0000000000401d53\n.text:0000000000401d58\n.text:0000000000401d5a\n.text:0000000000401d5c\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d68\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d73\n.text:0000000000401d75\n.text:0000000000401d78\n.text:0000000000401d7d\n.text:0000000000401d82\n.text:0000000000401d87\n.text:0000000000401d8c\n.text:0000000000401d90\n.text:0000000000401d95\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da0\n.text:0000000000401da5\n.text:0000000000401da7\n.text:0000000000401da9\n.text:0000000000401dae\n.text:0000000000401db2\n.text:0000000000401db7\n.text:0000000000401db9\n.text:0000000000401dbe\n.text:0000000000401dc2\n.text:0000000000401dc7\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd1\n.text:0000000000401dd6\n.text:0000000000401ddb\n.text:0000000000401de0\n.text:0000000000401de2\n.text:0000000000401de7\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df6\n.text:0000000000401dfb\n.text:0000000000401e00\n.text:0000000000401e05\n.text:0000000000401e0a\n.text:0000000000401e0f\n.text:0000000000401e14\n.text:0000000000401e15\n.text:0000000000401e17\n.text:0000000000401e1c\n.text:0000000000401e20\n.text:0000000000401e25\n.text:0000000000401e2a\n.text:0000000000401e2f\n.text:0000000000401e34\n.text:0000000000401e39\n.text:0000000000401e3e\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e4d\n.text:0000000000401e4e\n.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e59\n.text:0000000000401e5e\n.text:0000000000401e60\n.text:0000000000401e67\n.text:0000000000401e69\n.text:0000000000401e6c\n.text:0000000000401e71\n.text:0000000000401e75\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e81\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8b\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e94\n.text:0000000000401e97\n.text:0000000000401e9c\n.text:0000000000401e9f\n.text:0000000000401ea3\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401eac\n.text:0000000000401eb1\n.text:0000000000401eb6\n.text:0000000000401eb8\n.text:0000000000401ebd\n.text:0000000000401ec0\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec5\n'
p132
tp133
sS'strcmp'
p134
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00604088)();\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x00604088]\n'
p137
S'ff 25 c2 33 20 00\n'
p138
S'.plt:0000000000400cc0\n'
p139
tp140
sS'show_fonts'
p141
(S'\n__stdcall show_fonts()\n'
p142
V\u000aulong show_fonts(void)\u000a\u000a{\u000a  char cVar1;\u000a  undefined8 uVar2;\u000a  undefined4 *puVar3;\u000a  int iVar4;\u000a  undefined8 in_RAX;\u000a  undefined4 extraout_var;\u000a  size_t sVar5;\u000a  undefined4 extraout_var_00;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  char *__format;\u000a  long lVar8;\u000a  long lVar9;\u000a  FontList *pFVar10;\u000a  undefined *puVar11;\u000a  char **ppcVar12;\u000a  char *pcVar13;\u000a  uint uVar14;\u000a  long lVar15;\u000a  char max [8192];\u000a  char min [8192];\u000a  undefined4 *local_4068;\u000a  char *local_4060;\u000a  long local_4058;\u000a  long local_4050;\u000a  ulong local_4048;\u000a  ulong local_4040;\u000a  undefined4 local_4038;\u000a  undefined4 uStack16436;\u000a  undefined4 uStack16432;\u000a  undefined4 uStack16428;\u000a  undefined8 local_4028;\u000a  undefined4 local_2038;\u000a  undefined4 uStack8244;\u000a  undefined4 uStack8240;\u000a  undefined4 uStack8236;\u000a  undefined8 local_2028;\u000a  \u000a  if ((long)font_cnt == 0) {\u000a    return in_RAX;\u000a  }\u000a  if (sort_output == 0) {\u000a    qsort(font_list,(long)font_cnt,0x10,compare);\u000a  }\u000a  if (1 < long_list) {\u000a    if (font_cnt < 1) {\u000a      return (ulong)(uint)long_list;\u000a    }\u000a    lVar8 = 0;\u000a    lVar9 = 0;\u000a    do {\u000a      do_query_font(dpy,*(char **)((long)&font_list->name + lVar8));\u000a      lVar9 = lVar9 + 1;\u000a      lVar8 = lVar8 + 0x10;\u000a    } while (lVar9 < (long)font_cnt);\u000a    return (long)font_cnt;\u000a  }\u000a  if (long_list == 1) {\u000a    printf("DIR  ");\u000a    printf("MIN  ");\u000a    printf("MAX ");\u000a    printf("EXIST ");\u000a    printf("DFLT ");\u000a    printf("PROP ");\u000a    printf("ASC ");\u000a    printf("DESC ");\u000a    printf("NAME");\u000a    iVar4 = putchar(10);\u000a    if (font_cnt < 1) {\u000a      return CONCAT44(extraout_var,iVar4);\u000a    }\u000a    lVar8 = 0;\u000a    lVar9 = 0;\u000a    do {\u000a      lVar7 = *(long *)((long)&font_list->info + lVar8);\u000a      if (lVar7 == 0) {\u000a        lVar7 = *(long *)((long)&font_list->name + lVar8);\u000a        if (lVar7 == 0) {\u000a          lVar7 = 0x402ddb;\u000a        }\u000a        fprintf(stderr,"%s:  no font information for font \u005c"%s\u005c".\u005cn",program_name,lVar7);\u000a      }\u000a      else {\u000a        puVar11 = &DAT_00402bbe;\u000a        if (*(int *)(lVar7 + 0x10) == 1) {\u000a          puVar11 = &DAT_00402bba;\u000a        }\u000a        if (*(int *)(lVar7 + 0x10) == 0) {\u000a          puVar11 = &DAT_00402bb6;\u000a        }\u000a        printf("%-4s",puVar11);\u000a        if ((*(int *)(lVar7 + 0x1c) == 0) && (*(int *)(lVar7 + 0x20) == 0)) {\u000a          printf(" %3d ",(ulong)*(uint *)(lVar7 + 0x14));\u000a          uVar14 = *(uint *)(lVar7 + 0x18);\u000a          __format = " %3d ";\u000a        }\u000a        else {\u000a          printf("*%3d ",(ulong)*(uint *)(lVar7 + 0x1c));\u000a          uVar14 = *(uint *)(lVar7 + 0x20);\u000a          __format = "*%3d ";\u000a        }\u000a        printf(__format,(ulong)uVar14);\u000a        puVar11 = &DAT_00402bdc;\u000a        if (*(int *)(lVar7 + 0x24) != 0) {\u000a          puVar11 = &DAT_00402bd8;\u000a        }\u000a        printf("%5s ",puVar11);\u000a        printf("%4d ",(ulong)*(uint *)(lVar7 + 0x28));\u000a        printf("%4d ",(ulong)*(uint *)(lVar7 + 0x2c));\u000a        printf("%3d ",(ulong)*(uint *)(lVar7 + 0x58));\u000a        printf("%4d ",(ulong)*(uint *)(lVar7 + 0x5c));\u000a        puts(*(char **)((long)&font_list->name + lVar8));\u000a        if (min_max != 0) {\u000a          local_4068 = &local_4038;\u000a          local_2028 = 0x28203d2029642c;\u000a          local_2038 = DAT_00402be6;\u000a          uStack8244 = DAT_00402bea;\u000a          uStack8240 = DAT_00402bee;\u000a          uStack8236 = ",w,a,d) = ("._0_4_;\u000a          local_4028 = 0x28203d2029642c;\u000a          local_4038 = DAT_00402bfe;\u000a          uStack16436 = DAT_00402c02;\u000a          uStack16432 = DAT_00402c06;\u000a          uStack16428 = ",w,a,d) = ("._0_4_;\u000a          sVar5 = strlen((char *)&local_2038);\u000a          puVar3 = local_4068;\u000a          local_4060 = (char *)((long)&local_2038 + sVar5);\u000a          sVar5 = strlen((char *)local_4068);\u000a          local_4068 = (undefined4 *)(sVar5 + (long)puVar3);\u000a          copy_number(&local_4060,(char **)&local_4068);\u000a          *(undefined *)local_4068 = 0x2c;\u000a          *local_4060 = ',';\u000a          local_4068 = (undefined4 *)((long)local_4068 + 1);\u000a          local_4060 = local_4060 + 1;\u000a          copy_number(&local_4060,(char **)&local_4068);\u000a          *(undefined *)local_4068 = 0x2c;\u000a          *local_4060 = ',';\u000a          local_4068 = (undefined4 *)((long)local_4068 + 1);\u000a          local_4060 = local_4060 + 1;\u000a          copy_number(&local_4060,(char **)&local_4068);\u000a          *(undefined *)local_4068 = 0x2c;\u000a          *local_4060 = ',';\u000a          local_4068 = (undefined4 *)((long)local_4068 + 1);\u000a          local_4060 = local_4060 + 1;\u000a          copy_number(&local_4060,(char **)&local_4068);\u000a          *(undefined *)local_4068 = 0x2c;\u000a          *local_4060 = ',';\u000a          local_4068 = (undefined4 *)((long)local_4068 + 1);\u000a          local_4060 = local_4060 + 1;\u000a          copy_number(&local_4060,(char **)&local_4068);\u000a          *(undefined *)local_4068 = 0x29;\u000a          *local_4060 = ')';\u000a          *(undefined *)((long)local_4068 + 1) = 0;\u000a          local_4060[1] = 0;\u000a          puts((char *)&local_2038);\u000a          puts((char *)&local_4038);\u000a        }\u000a      }\u000a      lVar9 = lVar9 + 1;\u000a      lVar8 = lVar8 + 0x10;\u000a    } while (lVar9 < (long)font_cnt);\u000a    return (long)font_cnt;\u000a  }\u000a  uVar6 = (ulong)(uint)columns;\u000a  if (columns == 0) {\u000a    iVar4 = isatty(1);\u000a    uVar6 = CONCAT44(extraout_var_00,iVar4);\u000a    if (iVar4 == 0) goto joined_r0x00401a75;\u000a  }\u000a  else {\u000ajoined_r0x00401a75:\u000a    if (columns < 2) goto LAB_00401b1b;\u000a  }\u000a  iVar4 = font_cnt;\u000a  if (0 < font_cnt) {\u000a    lVar9 = (long)font_cnt;\u000a    lVar8 = 0;\u000a    uVar14 = 0;\u000a    pFVar10 = font_list;\u000a    do {\u000a      sVar5 = strlen(pFVar10->name);\u000a      if ((int)uVar14 <= (int)(uint)sVar5) {\u000a        uVar14 = (uint)sVar5;\u000a      }\u000a      lVar8 = lVar8 + 1;\u000a      pFVar10 = pFVar10 + 1;\u000a    } while (lVar8 < lVar9);\u000a    if (uVar14 != 0) {\u000a      if (columns == 0) {\u000a        uVar6 = 1;\u000a        if ((int)(uVar14 * 2 + 3) <= max_output_line_width) {\u000a          uVar14 = uVar14 + 3;\u000a          uVar6 = (long)(max_output_line_width + 3) / (long)(int)uVar14 & 0xffffffff;\u000a        }\u000a        columns = (int)uVar6;\u000a      }\u000a      else {\u000a        uVar14 = uVar14 + 3;\u000a        uVar6 = (ulong)(uint)columns;\u000a      }\u000a      if (1 < columns) {\u000a        if (font_cnt < columns) {\u000a          columns = font_cnt;\u000a        }\u000a        local_4048 = (long)(font_cnt + -1 + columns) / (long)columns & 0xffffffff;\u000a        if ((int)local_4048 < 1) {\u000a          return local_4048;\u000a        }\u000a        lVar8 = (long)(int)local_4048;\u000a        local_4050 = -lVar8;\u000a        local_4058 = 0;\u000a        local_4040 = 0;\u000a        do {\u000a          uVar6 = (ulong)(uint)columns;\u000a          if (0 < columns) {\u000a            lVar15 = 0;\u000a            lVar9 = local_4058;\u000a            lVar7 = local_4050;\u000a            do {\u000a              lVar7 = lVar7 + lVar8;\u000a              if ((long)font_cnt <= lVar7) break;\u000a              iVar4 = (int)lVar15;\u000a              lVar15 = lVar15 + 1;\u000a              uVar2 = *(undefined8 *)((long)&font_list->name + lVar9);\u000a              if (iVar4 + 1 == (int)uVar6) {\u000a                printf("%s",uVar2);\u000a              }\u000a              else {\u000a                printf("%-*s",(ulong)uVar14,uVar2);\u000a              }\u000a              lVar9 = lVar9 + lVar8 * 0x10;\u000a              uVar6 = SEXT48(columns);\u000a            } while (lVar15 < (long)uVar6);\u000a          }\u000a          putchar(10);\u000a          local_4040 = local_4040 + 1;\u000a          local_4050 = local_4050 + 1;\u000a          local_4058 = local_4058 + 0x10;\u000a          if (local_4040 == local_4048) {\u000a            return local_4040;\u000a          }\u000a        } while( true );\u000a      }\u000aLAB_00401b1b:\u000a      if (0 < font_cnt) {\u000a        lVar8 = 0;\u000a        lVar9 = 0;\u000a        do {\u000a          puts(*(char **)((long)&font_list->name + lVar8));\u000a          lVar9 = lVar9 + 1;\u000a          uVar6 = SEXT48(font_cnt);\u000a          lVar8 = lVar8 + 0x10;\u000a        } while (lVar9 < (long)uVar6);\u000a      }\u000a      return uVar6;\u000a    }\u000a  }\u000a  ppcVar12 = (char **)(ulong)(uint)iVar4;\u000a  __format = "all %d fontnames listed are zero length";\u000a  Fatal_Error("all %d fontnames listed are zero length");\u000a  __format = *(char **)__format;\u000a  pcVar13 = *ppcVar12;\u000a  cVar1 = *__format;\u000a  while ((int)cVar1 != 0) {\u000a    __format = __format + 1;\u000a    if ((cVar1 != *pcVar13) || (*pcVar13 == 0)) break;\u000a    pcVar13 = pcVar13 + 1;\u000a    cVar1 = *__format;\u000a  }\u000a  return (ulong)(uint)((int)cVar1 - (int)*pcVar13);\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x4038\nMOVSXD RSI,dword ptr [0x006041a0]\nTEST RSI,RSI\nJZ 0x00401c56\nMOV AL,byte ptr [0x00604190]\nTEST AL,AL\nJNZ 0x00401691\nMOV RDI,qword ptr [0x00604198]\nMOV EDX,0x10\nMOV ECX,0x401c80\nCALL 0x00400c20\nMOV EAX,dword ptr [0x00604180]\nCMP EAX,0x2\nJL 0x004016df\nCMP dword ptr [0x006041a0],0x0\nJLE 0x00401c56\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [0x00604170]\nMOV RAX,qword ptr [0x00604198]\nMOV RSI,qword ptr [RAX + RBX*0x1]\nCALL 0x00401cb0\nINC RBP\nMOVSXD RAX,dword ptr [0x006041a0]\nADD RBX,0x10\nCMP RBP,RAX\nJL 0x004016b0\nJMP 0x00401c56\nCMP EAX,0x1\nJNZ 0x00401a4c\nMOV EDI,0x402b5e\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b64\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b6a\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b6f\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b76\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b7c\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b82\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x402b87\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0x403065\nXOR EAX,EAX\nCALL 0x00400c60\nMOV EDI,0xa\nCALL 0x00400bf0\nCMP dword ptr [0x006041a0],0x0\nJLE 0x00401c56\nXOR R13D,R13D\nXOR R14D,R14D\nJMP 0x004017c0\nMOV ESI,dword ptr [R15 + 0x14]\nMOV EDI,0x402bc7\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x18]\nMOV EDI,0x402bc7\nJMP 0x00401828\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV RCX,qword ptr [RAX + R13*0x1]\nTEST RCX,RCX\nMOV EAX,0x402ddb\nCMOVZ RCX,RAX\nMOV ESI,0x402b8d\nXOR EAX,EAX\nCALL 0x00400ce0\nJMP 0x00401a30\nMOV RAX,qword ptr [0x00604198]\nMOV R15,qword ptr [RAX + R13*0x1 + 0x8]\nTEST R15,R15\nJZ 0x00401791\nMOV EAX,dword ptr [R15 + 0x10]\nCMP EAX,0x1\nMOV ESI,0x402bbe\nMOV ECX,0x402bba\nCMOVZ RSI,RCX\nTEST EAX,EAX\nMOV EAX,0x402bb6\nCMOVZ RSI,RAX\nMOV EDI,0x402bc2\nXOR EAX,EAX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x1c],0x0\nJNZ 0x0040180f\nCMP dword ptr [R15 + 0x20],0x0\nJZ 0x00401773\nMOV ESI,dword ptr [R15 + 0x1c]\nMOV EDI,0x402bcd\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x20]\nMOV EDI,0x402bcd\nXOR EAX,EAX\nCALL 0x00400c60\nCMP dword ptr [R15 + 0x24],0x0\nMOV ESI,0x402bdc\nMOV EAX,0x402bd8\nCMOVNZ RSI,RAX\nMOV EDI,0x402bd3\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x28]\nMOV EDI,0x402be1\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x2c]\nMOV EDI,0x402be1\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x58]\nMOV EDI,0x402bc8\nXOR EAX,EAX\nCALL 0x00400c60\nMOV ESI,dword ptr [R15 + 0x5c]\nMOV EDI,0x402be1\nXOR EAX,EAX\nCALL 0x00400c60\nMOV RAX,qword ptr [0x00604198]\nMOV RDI,qword ptr [RAX + R13*0x1]\nCALL 0x00400c10\nCMP dword ptr [0x00604184],0x0\nJZ 0x00401a30\nLEA R12,[RSP + 0x30]\nMOV qword ptr [RSP],R12\nMOV RAX,0x28203d2029642c\nMOV qword ptr [0x2040 + RSP],RAX\nMOVUPS XMM0,xmmword ptr [0x00402be6]\nMOVAPS xmmword ptr [0x2030 + RSP],XMM0\nMOV qword ptr [RSP + 0x40],RAX\nMOVUPS XMM0,xmmword ptr [0x00402bfe]\nMOVAPS xmmword ptr [RSP + 0x30],XMM0\nLEA RBX,[0x2030 + RSP]\nMOV RDI,RBX\nCALL 0x00400c40\nLEA RAX,[0x2030 + RSP + RAX*0x1]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RBP,qword ptr [RSP]\nMOV RDI,RBP\nCALL 0x00400c40\nADD RAX,RBP\nMOV qword ptr [RSP],RAX\nMOVSX EDX,word ptr [R15 + 0x38]\nMOVSX ECX,word ptr [R15 + 0x44]\nLEA RBP,[RSP + 0x8]\nMOV RDI,RBP\nMOV R12,RSP\nMOV RSI,R12\nCALL 0x00401ed0\nMOV RAX,qword ptr [RSP]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP],RCX\nMOV byte ptr [RAX],0x2c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV byte ptr [RAX],0x2c\nMOVSX EDX,word ptr [R15 + 0x3a]\nMOVSX ECX,word ptr [R15 + 0x46]\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x00401ed0\nMOV RAX,qword ptr [RSP]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP],RCX\nMOV byte ptr [RAX],0x2c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV byte ptr [RAX],0x2c\nMOVSX EDX,word ptr [R15 + 0x3c]\nMOVSX ECX,word ptr [R15 + 0x48]\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x00401ed0\nMOV RAX,qword ptr [RSP]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP],RCX\nMOV byte ptr [RAX],0x2c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV byte ptr [RAX],0x2c\nMOVSX EDX,word ptr [R15 + 0x3e]\nMOVSX ECX,word ptr [R15 + 0x4a]\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x00401ed0\nMOV RAX,qword ptr [RSP]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP],RCX\nMOV byte ptr [RAX],0x2c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV byte ptr [RAX],0x2c\nMOVSX EDX,word ptr [R15 + 0x40]\nMOVSX ECX,word ptr [R15 + 0x4c]\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x00401ed0\nMOV RAX,qword ptr [RSP]\nMOV byte ptr [RAX],0x29\nMOV RCX,qword ptr [RSP + 0x8]\nMOV byte ptr [RCX],0x29\nMOV byte ptr [RAX + 0x1],0x0\nMOV byte ptr [RCX + 0x1],0x0\nMOV RDI,RBX\nCALL 0x00400c10\nLEA RDI,[RSP + 0x30]\nCALL 0x00400c10\nINC R14\nMOVSXD RAX,dword ptr [0x006041a0]\nADD R13,0x10\nCMP R14,RAX\nJL 0x004017c0\nJMP 0x00401c56\nMOV EAX,dword ptr [0x00604188]\nTEST EAX,EAX\nJZ 0x00401a60\nCMP EAX,0x2\nJGE 0x00401a7b\nJMP 0x00401b1b\nMOV EDI,0x1\nCALL 0x00400c30\nTEST EAX,EAX\nJNZ 0x00401a7b\nCMP dword ptr [0x00604188],0x1\nJLE 0x00401b1b\nMOV R14D,dword ptr [0x006041a0]\nTEST R14D,R14D\nJLE 0x00401c68\nMOV RBP,qword ptr [0x00604198]\nMOV R14D,dword ptr [0x006041a0]\nMOVSXD R15,R14D\nXOR EBX,EBX\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RBP]\nCALL 0x00400c40\nCMP EAX,R12D\nCMOVGE R12D,EAX\nINC RBX\nADD RBP,0x10\nCMP RBX,R15\nJL 0x00401ab0\nTEST R12D,R12D\nJZ 0x00401c68\nCMP dword ptr [0x00604188],0x0\nJZ 0x00401aef\nADD R12D,0x3\nMOV EAX,dword ptr [0x00604188]\nCMP EAX,0x1\nJLE 0x00401b1b\nJMP 0x00401b58\nLEA EDX,[R12 + R12*0x1 + 0x3]\nMOV ECX,dword ptr [0x00604120]\nMOV EAX,0x1\nCMP EDX,ECX\nJG 0x00401b10\nADD R12D,0x3\nADD ECX,0x3\nMOV EAX,ECX\nCDQ\nIDIV R12D\nMOV dword ptr [0x00604188],EAX\nCMP EAX,0x1\nJG 0x00401b58\nCMP dword ptr [0x006041a0],0x0\nJLE 0x00401c56\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x00604198]\nMOV RDI,qword ptr [RAX + RBX*0x1]\nCALL 0x00400c10\nINC RBP\nMOVSXD RAX,dword ptr [0x006041a0]\nADD RBX,0x10\nCMP RBP,RAX\nJL 0x00401b30\nJMP 0x00401c56\nMOV ECX,dword ptr [0x006041a0]\nCMP ECX,EAX\nJGE 0x00401b68\nMOV dword ptr [0x00604188],ECX\nMOV ESI,dword ptr [0x00604188]\nLEA EAX,[RCX + RSI*0x1 + -0x1]\nCDQ\nIDIV ESI\nTEST EAX,EAX\nJLE 0x00401c56\nMOVSXD RBX,EAX\nMOV EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV RAX,RBX\nNEG RAX\nMOV qword ptr [RSP + 0x18],RAX\nMOV RBP,RBX\nSHL RBP,0x4\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x28],RAX\nMOV EAX,dword ptr [0x00604188]\nTEST EAX,EAX\nJLE 0x00401c2e\nMOV R13,qword ptr [RSP + 0x10]\nMOV R15,qword ptr [RSP + 0x18]\nXOR R14D,R14D\nNOP dword ptr [RAX]\nMOVSXD RCX,dword ptr [0x006041a0]\nADD R15,RBX\nCMP R15,RCX\nJGE 0x00401c2e\nMOV ECX,R14D\nINC R14\nLEA ECX,[RCX + 0x1]\nMOV RDX,qword ptr [0x00604198]\nMOV RDX,qword ptr [RDX + R13*0x1]\nCMP ECX,EAX\nJNZ 0x00401c10\nMOV EDI,0x402d88\nXOR EAX,EAX\nMOV RSI,RDX\nCALL 0x00400c60\nJMP 0x00401c1f\nMOV EDI,0x402c3e\nXOR EAX,EAX\nMOV ESI,R12D\nCALL 0x00400c60\nADD R13,RBP\nMOVSXD RAX,dword ptr [0x00604188]\nCMP R14,RAX\nJL 0x00401bd0\nMOV EDI,0xa\nCALL 0x00400bf0\nMOV RAX,qword ptr [RSP + 0x28]\nINC RAX\nINC qword ptr [RSP + 0x18]\nADD qword ptr [RSP + 0x10],0x10\nCMP RAX,qword ptr [RSP + 0x20]\nJNZ 0x00401bb0\nADD RSP,0x4038\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x402c16\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004010a0\nNOP word ptr [RAX + RAX*0x1]\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 40 00 00\n48 63 35 38 2b 20 00\n48 85 f6\n0f 84 e5 05 00 00\n8a 05 19 2b 20 00\n84 c0\n75 16\n48 8b 3d 16 2b 20 00\nba 10 00 00 00\nb9 80 1c 40 00\ne8 8f f5 ff ff\n8b 05 e9 2a 20 00\n83 f8 02\n7c 43\n83 3d fd 2a 20 00 00\n0f 8e ad 05 00 00\n31 db\n31 ed\n0f 1f 00\n48 8b 3d b9 2a 20 00\n48 8b 05 da 2a 20 00\n48 8b 34 18\ne8 e9 05 00 00\n48 ff c5\n48 63 05 cf 2a 20 00\n48 83 c3 10\n48 39 c5\n7c d6\ne9 77 05 00 00\n83 f8 01\n0f 85 64 03 00 00\nbf 5e 2b 40 00\n31 c0\ne8 6c f5 ff ff\nbf 64 2b 40 00\n31 c0\ne8 60 f5 ff ff\nbf 6a 2b 40 00\n31 c0\ne8 54 f5 ff ff\nbf 6f 2b 40 00\n31 c0\ne8 48 f5 ff ff\nbf 76 2b 40 00\n31 c0\ne8 3c f5 ff ff\nbf 7c 2b 40 00\n31 c0\ne8 30 f5 ff ff\nbf 82 2b 40 00\n31 c0\ne8 24 f5 ff ff\nbf 87 2b 40 00\n31 c0\ne8 18 f5 ff ff\nbf 65 30 40 00\n31 c0\ne8 0c f5 ff ff\nbf 0a 00 00 00\ne8 92 f4 ff ff\n83 3d 3b 2a 20 00 00\n0f 8e eb 04 00 00\n45 31 ed\n45 31 f6\neb 4d\n41 8b 77 14\nbf c7 2b 40 00\n31 c0\ne8 dd f4 ff ff\n41 8b 77 18\nbf c7 2b 40 00\ne9 97 00 00 00\n48 8b 3d c8 29 20 00\n48 8b 15 79 29 20 00\n4a 8b 0c 28\n48 85 c9\nb8 db 2d 40 00\n48 0f 44 c8\nbe 8d 2b 40 00\n31 c0\ne8 25 f5 ff ff\ne9 70 02 00 00\n48 8b 05 d1 29 20 00\n4e 8b 7c 28 08\n4d 85 ff\n74 c0\n41 8b 47 10\n83 f8 01\nbe be 2b 40 00\nb9 ba 2b 40 00\n48 0f 44 f1\n85 c0\nb8 b6 2b 40 00\n48 0f 44 f0\nbf c2 2b 40 00\n31 c0\ne8 63 f4 ff ff\n41 83 7f 1c 00\n75 0b\n41 83 7f 20 00\n0f 84 64 ff ff ff\n41 8b 77 1c\nbf cd 2b 40 00\n31 c0\ne8 41 f4 ff ff\n41 8b 77 20\nbf cd 2b 40 00\n31 c0\ne8 31 f4 ff ff\n41 83 7f 24 00\nbe dc 2b 40 00\nb8 d8 2b 40 00\n48 0f 45 f0\nbf d3 2b 40 00\n31 c0\ne8 12 f4 ff ff\n41 8b 77 28\nbf e1 2b 40 00\n31 c0\ne8 02 f4 ff ff\n41 8b 77 2c\nbf e1 2b 40 00\n31 c0\ne8 f2 f3 ff ff\n41 8b 77 58\nbf c8 2b 40 00\n31 c0\ne8 e2 f3 ff ff\n41 8b 77 5c\nbf e1 2b 40 00\n31 c0\ne8 d2 f3 ff ff\n48 8b 05 03 29 20 00\n4a 8b 3c 28\ne8 72 f3 ff ff\n83 3d df 28 20 00 00\n0f 84 85 01 00 00\n4c 8d 64 24 30\n4c 89 24 24\n48 b8 2c 64 29 20 3d 20 28 00\n48 89 84 24 40 20 00 00\n0f 10 05 19 13 00 00\n0f 29 84 24 30 20 00 00\n48 89 44 24 40\n0f 10 05 1d 13 00 00\n0f 29 44 24 30\n48 8d 9c 24 30 20 00 00\n48 89 df\ne8 4a f3 ff ff\n48 8d 84 04 30 20 00 00\n48 89 44 24 08\n48 8b 2c 24\n48 89 ef\ne8 31 f3 ff ff\n48 01 e8\n48 89 04 24\n41 0f bf 57 38\n41 0f bf 4f 44\n48 8d 6c 24 08\n48 89 ef\n49 89 e4\n4c 89 e6\ne8 9d 05 00 00\n48 8b 04 24\n48 8d 48 01\n48 89 0c 24\nc6 00 2c\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\nc6 00 2c\n41 0f bf 57 3a\n41 0f bf 4f 46\n48 89 ef\n4c 89 e6\ne8 68 05 00 00\n48 8b 04 24\n48 8d 48 01\n48 89 0c 24\nc6 00 2c\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\nc6 00 2c\n41 0f bf 57 3c\n41 0f bf 4f 48\n48 89 ef\n4c 89 e6\ne8 33 05 00 00\n48 8b 04 24\n48 8d 48 01\n48 89 0c 24\nc6 00 2c\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\nc6 00 2c\n41 0f bf 57 3e\n41 0f bf 4f 4a\n48 89 ef\n4c 89 e6\ne8 fe 04 00 00\n48 8b 04 24\n48 8d 48 01\n48 89 0c 24\nc6 00 2c\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\nc6 00 2c\n41 0f bf 57 40\n41 0f bf 4f 4c\n48 89 ef\n4c 89 e6\ne8 c9 04 00 00\n48 8b 04 24\nc6 00 29\n48 8b 4c 24 08\nc6 01 29\nc6 40 01 00\nc6 41 01 00\n48 89 df\ne8 ea f1 ff ff\n48 8d 7c 24 30\ne8 e0 f1 ff ff\n49 ff c6\n48 63 05 66 27 20 00\n49 83 c5 10\n49 39 c6\n0f 8c 79 fd ff ff\ne9 0a 02 00 00\n8b 05 36 27 20 00\n85 c0\n74 0a\n83 f8 02\n7d 20\ne9 bb 00 00 00\nbf 01 00 00 00\ne8 c6 f1 ff ff\n85 c0\n75 0d\n83 3d 13 27 20 00 01\n0f 8e a0 00 00 00\n44 8b 35 1e 27 20 00\n45 85 f6\n0f 8e dd 01 00 00\n48 8b 2d 06 27 20 00\n44 8b 35 07 27 20 00\n4d 63 fe\n31 db\n45 31 e4\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 7d 00\ne8 87 f1 ff ff\n44 39 e0\n44 0f 4d e0\n48 ff c3\n48 83 c5 10\n4c 39 fb\n7c e4\n45 85 e4\n0f 84 93 01 00 00\n83 3d ac 26 20 00 00\n74 11\n41 83 c4 03\n8b 05 a0 26 20 00\n83 f8 01\n7e 2e\neb 69\n43 8d 54 24 03\n8b 0d 26 26 20 00\nb8 01 00 00 00\n39 ca\n7f 0d\n41 83 c4 03\n83 c1 03\n89 c8\n99\n41 f7 fc\n89 05 72 26 20 00\n83 f8 01\n7f 3d\n83 3d 7e 26 20 00 00\n0f 8e 2e 01 00 00\n31 db\n31 ed\n0f 1f 40 00\n48 8b 05 61 26 20 00\n48 8b 3c 18\ne8 d0 f0 ff ff\n48 ff c5\n48 63 05 56 26 20 00\n48 83 c3 10\n48 39 c5\n7c dd\ne9 fe 00 00 00\n8b 0d 42 26 20 00\n39 c1\n7d 06\n89 0d 20 26 20 00\n8b 35 1a 26 20 00\n8d 44 31 ff\n99\nf7 fe\n85 c0\n0f 8e d9 00 00 00\n48 63 d8\n89 c0\n48 89 44 24 20\n48 89 d8\n48 f7 d8\n48 89 44 24 18\n48 89 dd\n48 c1 e5 04\n31 c0\n48 89 44 24 10\n31 c0\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 44 24 28\n8b 05 cd 25 20 00\n85 c0\n7e 6f\n4c 8b 6c 24 10\n4c 8b 7c 24 18\n45 31 f6\n0f 1f 40 00\n48 63 0d c9 25 20 00\n49 01 df\n49 39 cf\n7d 4f\n44 89 f1\n49 ff c6\n8d 49 01\n48 8b 15 a9 25 20 00\n4a 8b 14 2a\n39 c1\n75 19\nbf 88 2d 40 00\n31 c0\n48 89 d6\ne8 5a f0 ff ff\neb 17\nbf 3e 2c 40 00\n31 c0\n44 89 e6\ne8 41 f0 ff ff\n49 01 ed\n48 63 05 5f 25 20 00\n49 39 c6\n7c a2\nbf 0a 00 00 00\ne8 b8 ef ff ff\n48 8b 44 24 28\n48 ff c0\n48 ff 44 24 18\n48 83 44 24 10 10\n48 3b 44 24 20\n0f 85 5a ff ff ff\n48 81 c4 38 40 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 16 2c 40 00\n31 c0\n44 89 f6\ne8 29 f4 ff ff\n66 0f 1f 84 00 00 00 00 00\n'
p145
S'.text:0000000000401650\n.text:0000000000401651\n.text:0000000000401653\n.text:0000000000401655\n.text:0000000000401657\n.text:0000000000401659\n.text:000000000040165a\n.text:0000000000401661\n.text:0000000000401668\n.text:000000000040166b\n.text:0000000000401671\n.text:0000000000401677\n.text:0000000000401679\n.text:000000000040167b\n.text:0000000000401682\n.text:0000000000401687\n.text:000000000040168c\n.text:0000000000401691\n.text:0000000000401697\n.text:000000000040169a\n.text:000000000040169c\n.text:00000000004016a3\n.text:00000000004016a9\n.text:00000000004016ab\n.text:00000000004016ad\n.text:00000000004016b0\n.text:00000000004016b7\n.text:00000000004016be\n.text:00000000004016c2\n.text:00000000004016c7\n.text:00000000004016ca\n.text:00000000004016d1\n.text:00000000004016d5\n.text:00000000004016d8\n.text:00000000004016da\n.text:00000000004016df\n.text:00000000004016e2\n.text:00000000004016e8\n.text:00000000004016ed\n.text:00000000004016ef\n.text:00000000004016f4\n.text:00000000004016f9\n.text:00000000004016fb\n.text:0000000000401700\n.text:0000000000401705\n.text:0000000000401707\n.text:000000000040170c\n.text:0000000000401711\n.text:0000000000401713\n.text:0000000000401718\n.text:000000000040171d\n.text:000000000040171f\n.text:0000000000401724\n.text:0000000000401729\n.text:000000000040172b\n.text:0000000000401730\n.text:0000000000401735\n.text:0000000000401737\n.text:000000000040173c\n.text:0000000000401741\n.text:0000000000401743\n.text:0000000000401748\n.text:000000000040174d\n.text:000000000040174f\n.text:0000000000401754\n.text:0000000000401759\n.text:000000000040175e\n.text:0000000000401765\n.text:000000000040176b\n.text:000000000040176e\n.text:0000000000401771\n.text:0000000000401773\n.text:0000000000401777\n.text:000000000040177c\n.text:000000000040177e\n.text:0000000000401783\n.text:0000000000401787\n.text:000000000040178c\n.text:0000000000401791\n.text:0000000000401798\n.text:000000000040179f\n.text:00000000004017a3\n.text:00000000004017a6\n.text:00000000004017ab\n.text:00000000004017af\n.text:00000000004017b4\n.text:00000000004017b6\n.text:00000000004017bb\n.text:00000000004017c0\n.text:00000000004017c7\n.text:00000000004017cc\n.text:00000000004017cf\n.text:00000000004017d1\n.text:00000000004017d5\n.text:00000000004017d8\n.text:00000000004017dd\n.text:00000000004017e2\n.text:00000000004017e6\n.text:00000000004017e8\n.text:00000000004017ed\n.text:00000000004017f1\n.text:00000000004017f6\n.text:00000000004017f8\n.text:00000000004017fd\n.text:0000000000401802\n.text:0000000000401804\n.text:0000000000401809\n.text:000000000040180f\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181a\n.text:000000000040181f\n.text:0000000000401823\n.text:0000000000401828\n.text:000000000040182a\n.text:000000000040182f\n.text:0000000000401834\n.text:0000000000401839\n.text:000000000040183e\n.text:0000000000401842\n.text:0000000000401847\n.text:0000000000401849\n.text:000000000040184e\n.text:0000000000401852\n.text:0000000000401857\n.text:0000000000401859\n.text:000000000040185e\n.text:0000000000401862\n.text:0000000000401867\n.text:0000000000401869\n.text:000000000040186e\n.text:0000000000401872\n.text:0000000000401877\n.text:0000000000401879\n.text:000000000040187e\n.text:0000000000401882\n.text:0000000000401887\n.text:0000000000401889\n.text:000000000040188e\n.text:0000000000401895\n.text:0000000000401899\n.text:000000000040189e\n.text:00000000004018a5\n.text:00000000004018ab\n.text:00000000004018b0\n.text:00000000004018b4\n.text:00000000004018be\n.text:00000000004018c6\n.text:00000000004018cd\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018ee\n.text:00000000004018f1\n.text:00000000004018f6\n.text:00000000004018fe\n.text:0000000000401903\n.text:0000000000401907\n.text:000000000040190a\n.text:000000000040190f\n.text:0000000000401912\n.text:0000000000401916\n.text:000000000040191b\n.text:0000000000401920\n.text:0000000000401925\n.text:0000000000401928\n.text:000000000040192b\n.text:000000000040192e\n.text:0000000000401933\n.text:0000000000401937\n.text:000000000040193b\n.text:000000000040193f\n.text:0000000000401942\n.text:0000000000401947\n.text:000000000040194b\n.text:0000000000401950\n.text:0000000000401953\n.text:0000000000401958\n.text:000000000040195d\n.text:0000000000401960\n.text:0000000000401963\n.text:0000000000401968\n.text:000000000040196c\n.text:0000000000401970\n.text:0000000000401974\n.text:0000000000401977\n.text:000000000040197c\n.text:0000000000401980\n.text:0000000000401985\n.text:0000000000401988\n.text:000000000040198d\n.text:0000000000401992\n.text:0000000000401995\n.text:0000000000401998\n.text:000000000040199d\n.text:00000000004019a1\n.text:00000000004019a5\n.text:00000000004019a9\n.text:00000000004019ac\n.text:00000000004019b1\n.text:00000000004019b5\n.text:00000000004019ba\n.text:00000000004019bd\n.text:00000000004019c2\n.text:00000000004019c7\n.text:00000000004019ca\n.text:00000000004019cd\n.text:00000000004019d2\n.text:00000000004019d6\n.text:00000000004019da\n.text:00000000004019de\n.text:00000000004019e1\n.text:00000000004019e6\n.text:00000000004019ea\n.text:00000000004019ef\n.text:00000000004019f2\n.text:00000000004019f7\n.text:00000000004019fc\n.text:00000000004019ff\n.text:0000000000401a02\n.text:0000000000401a07\n.text:0000000000401a0b\n.text:0000000000401a0e\n.text:0000000000401a13\n.text:0000000000401a16\n.text:0000000000401a1a\n.text:0000000000401a1e\n.text:0000000000401a21\n.text:0000000000401a26\n.text:0000000000401a2b\n.text:0000000000401a30\n.text:0000000000401a33\n.text:0000000000401a3a\n.text:0000000000401a3e\n.text:0000000000401a41\n.text:0000000000401a47\n.text:0000000000401a4c\n.text:0000000000401a52\n.text:0000000000401a54\n.text:0000000000401a56\n.text:0000000000401a59\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a6a\n.text:0000000000401a6c\n.text:0000000000401a6e\n.text:0000000000401a75\n.text:0000000000401a7b\n.text:0000000000401a82\n.text:0000000000401a85\n.text:0000000000401a8b\n.text:0000000000401a92\n.text:0000000000401a99\n.text:0000000000401a9c\n.text:0000000000401a9e\n.text:0000000000401aa1\n.text:0000000000401ab0\n.text:0000000000401ab4\n.text:0000000000401ab9\n.text:0000000000401abc\n.text:0000000000401ac0\n.text:0000000000401ac3\n.text:0000000000401ac7\n.text:0000000000401aca\n.text:0000000000401acc\n.text:0000000000401acf\n.text:0000000000401ad5\n.text:0000000000401adc\n.text:0000000000401ade\n.text:0000000000401ae2\n.text:0000000000401ae8\n.text:0000000000401aeb\n.text:0000000000401aed\n.text:0000000000401aef\n.text:0000000000401af4\n.text:0000000000401afa\n.text:0000000000401aff\n.text:0000000000401b01\n.text:0000000000401b03\n.text:0000000000401b07\n.text:0000000000401b0a\n.text:0000000000401b0c\n.text:0000000000401b0d\n.text:0000000000401b10\n.text:0000000000401b16\n.text:0000000000401b19\n.text:0000000000401b1b\n.text:0000000000401b22\n.text:0000000000401b28\n.text:0000000000401b2a\n.text:0000000000401b2c\n.text:0000000000401b30\n.text:0000000000401b37\n.text:0000000000401b3b\n.text:0000000000401b40\n.text:0000000000401b43\n.text:0000000000401b4a\n.text:0000000000401b4e\n.text:0000000000401b51\n.text:0000000000401b53\n.text:0000000000401b58\n.text:0000000000401b5e\n.text:0000000000401b60\n.text:0000000000401b62\n.text:0000000000401b68\n.text:0000000000401b6e\n.text:0000000000401b72\n.text:0000000000401b73\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b7d\n.text:0000000000401b80\n.text:0000000000401b82\n.text:0000000000401b87\n.text:0000000000401b8a\n.text:0000000000401b8d\n.text:0000000000401b92\n.text:0000000000401b95\n.text:0000000000401b99\n.text:0000000000401b9b\n.text:0000000000401ba0\n.text:0000000000401ba2\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bbb\n.text:0000000000401bbd\n.text:0000000000401bbf\n.text:0000000000401bc4\n.text:0000000000401bc9\n.text:0000000000401bcc\n.text:0000000000401bd0\n.text:0000000000401bd7\n.text:0000000000401bda\n.text:0000000000401bdd\n.text:0000000000401bdf\n.text:0000000000401be2\n.text:0000000000401be5\n.text:0000000000401be8\n.text:0000000000401bef\n.text:0000000000401bf3\n.text:0000000000401bf5\n.text:0000000000401bf7\n.text:0000000000401bfc\n.text:0000000000401bfe\n.text:0000000000401c01\n.text:0000000000401c06\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c17\n.text:0000000000401c1a\n.text:0000000000401c1f\n.text:0000000000401c22\n.text:0000000000401c29\n.text:0000000000401c2c\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c38\n.text:0000000000401c3d\n.text:0000000000401c40\n.text:0000000000401c45\n.text:0000000000401c4b\n.text:0000000000401c50\n.text:0000000000401c56\n.text:0000000000401c5d\n.text:0000000000401c5e\n.text:0000000000401c60\n.text:0000000000401c62\n.text:0000000000401c64\n.text:0000000000401c66\n.text:0000000000401c67\n.text:0000000000401c68\n.text:0000000000401c6d\n.text:0000000000401c6f\n.text:0000000000401c72\n.text:0000000000401c77\n'
p146
tp147
sS'copy_number'
p148
(S'\n__stdcall copy_number(char * * pp1, char * * pp2)\n'
p149
V\u000avoid copy_number(char **pp1,char **pp2)\u000a\u000a{\u000a  char *__s;\u000a  char *__s_00;\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  ulong in_RCX;\u000a  ulong in_RDX;\u000a  char *__s_01;\u000a  \u000a  __s = *pp1;\u000a  __s_00 = *pp2;\u000a  sprintf(__s,"%d");\u000a  sprintf(__s_00,"%d",in_RCX & 0xffffffff);\u000a  sVar1 = strlen(__s);\u000a  sVar2 = strlen(__s_00);\u000a  __s_01 = __s_00;\u000a  if (sVar2 < sVar1) {\u000a    __s_01 = __s;\u000a  }\u000a  sVar1 = strlen(__s_01);\u000a  sprintf(__s,"%*d",sVar1 & 0xffffffff,in_RDX & 0xffffffff);\u000a  sprintf(__s_00,"%*d",sVar1 & 0xffffffff,in_RCX & 0xffffffff);\u000a  sVar1 = strlen(__s);\u000a  sVar2 = strlen(__s_00);\u000a  *pp1 = __s + sVar1;\u000a  *pp2 = __s_00 + sVar2;\u000a  return;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13D,ECX\nMOV R15D,EDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV qword ptr [RSP + 0x8],RDI\nMOV RBX,qword ptr [RDI]\nMOV R12,qword ptr [RSI]\nMOV ESI,0x4030d6\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00400d80\nMOV ESI,0x4030d6\nXOR EAX,EAX\nMOV RDI,R12\nMOV EDX,R13D\nCALL 0x00400d80\nMOV RDI,RBX\nCALL 0x00400c40\nMOV R14,RAX\nMOV RDI,R12\nCALL 0x00400c40\nCMP R14,RAX\nMOV RDI,R12\nCMOVA RDI,RBX\nCALL 0x00400c40\nMOV RBP,RAX\nMOV ESI,0x4030d9\nXOR EAX,EAX\nMOV RDI,RBX\nMOV EDX,EBP\nMOV ECX,R15D\nCALL 0x00400d80\nMOV ESI,0x4030d9\nXOR EAX,EAX\nMOV RDI,R12\nMOV EDX,EBP\nMOV ECX,R13D\nCALL 0x00400d80\nMOV RDI,RBX\nCALL 0x00400c40\nMOV RBP,RAX\nADD RBP,RBX\nMOV RDI,R12\nCALL 0x00400c40\nADD RAX,R12\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RBP\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p151
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 cd\n41 89 d7\n48 89 74 24 10\n48 89 7c 24 08\n48 8b 1f\n4c 8b 26\nbe d6 30 40 00\n31 c0\n48 89 df\ne8 7d ee ff ff\nbe d6 30 40 00\n31 c0\n4c 89 e7\n44 89 ea\ne8 6b ee ff ff\n48 89 df\ne8 23 ed ff ff\n49 89 c6\n4c 89 e7\ne8 18 ed ff ff\n49 39 c6\n4c 89 e7\n48 0f 47 fb\ne8 09 ed ff ff\n48 89 c5\nbe d9 30 40 00\n31 c0\n48 89 df\n89 ea\n44 89 f9\ne8 32 ee ff ff\nbe d9 30 40 00\n31 c0\n4c 89 e7\n89 ea\n44 89 e9\ne8 1e ee ff ff\n48 89 df\ne8 d6 ec ff ff\n48 89 c5\n48 01 dd\n4c 89 e7\ne8 c8 ec ff ff\n4c 01 e0\n48 8b 4c 24 08\n48 89 29\n48 8b 4c 24 10\n48 89 01\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p152
S'.text:0000000000401ed0\n.text:0000000000401ed1\n.text:0000000000401ed3\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401ed9\n.text:0000000000401eda\n.text:0000000000401ede\n.text:0000000000401ee1\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401eee\n.text:0000000000401ef1\n.text:0000000000401ef4\n.text:0000000000401ef9\n.text:0000000000401efb\n.text:0000000000401efe\n.text:0000000000401f03\n.text:0000000000401f08\n.text:0000000000401f0a\n.text:0000000000401f0d\n.text:0000000000401f10\n.text:0000000000401f15\n.text:0000000000401f18\n.text:0000000000401f1d\n.text:0000000000401f20\n.text:0000000000401f23\n.text:0000000000401f28\n.text:0000000000401f2b\n.text:0000000000401f2e\n.text:0000000000401f32\n.text:0000000000401f37\n.text:0000000000401f3a\n.text:0000000000401f3f\n.text:0000000000401f41\n.text:0000000000401f44\n.text:0000000000401f46\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f55\n.text:0000000000401f58\n.text:0000000000401f5a\n.text:0000000000401f5d\n.text:0000000000401f62\n.text:0000000000401f65\n.text:0000000000401f6a\n.text:0000000000401f6d\n.text:0000000000401f70\n.text:0000000000401f73\n.text:0000000000401f78\n.text:0000000000401f7b\n.text:0000000000401f80\n.text:0000000000401f83\n.text:0000000000401f88\n.text:0000000000401f8b\n.text:0000000000401f8f\n.text:0000000000401f90\n.text:0000000000401f92\n.text:0000000000401f94\n.text:0000000000401f96\n.text:0000000000401f98\n.text:0000000000401f99\n'
p153
tp154
sS'Setup_Display_And_Screen'
p155
(S'\n__stdcall Setup_Display_And_Screen(int * argc, char * * argv)\n'
p156
V\u000avoid Setup_Display_And_Screen(int *argc,char **argv)\u000a\u000a{\u000a  char *display_name;\u000a  \u000a  display_name = Get_Display_Name(argc,argv);\u000a  dpy = Open_Display(display_name);\u000a  screen = XDefaultScreen(dpy);\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH RAX\nCALL 0x00400ef0\nMOV RDI,RAX\nCALL 0x00401020\nMOV qword ptr [0x00604170],RAX\nMOV RDI,RAX\nCALL 0x00400c90\nMOV dword ptr [0x00604178],EAX\nPOP RAX\nRET\n'
p158
S'50\ne8 2a 00 00 00\n48 89 c7\ne8 52 01 00 00\n48 89 05 9b 32 20 00\n48 89 c7\ne8 b3 fd ff ff\n89 05 95 32 20 00\n58\nc3\n'
p159
S'.text:0000000000400ec0\n.text:0000000000400ec1\n.text:0000000000400ec6\n.text:0000000000400ec9\n.text:0000000000400ece\n.text:0000000000400ed5\n.text:0000000000400ed8\n.text:0000000000400edd\n.text:0000000000400ee3\n.text:0000000000400ee4\n'
p160
tp161
sS'XSetErrorHandler'
p162
(S'\n__stdcall XSetErrorHandler()\n'
p163
V\u000avoid XSetErrorHandler(void)\u000a\u000a{\u000a  (*(code *)PTR_XSetErrorHandler_006040a0)();\u000a  return;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x006040a0]\n'
p165
S'ff 25 aa 33 20 00\n'
p166
S'.plt:0000000000400cf0\n'
p167
tp168
sS'XFreeFontNames'
p169
(S'\n__stdcall XFreeFontNames()\n'
p170
V\u000avoid XFreeFontNames(void)\u000a\u000a{\u000a  (*(code *)PTR_XFreeFontNames_00604018)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00604018]\n'
p172
S'ff 25 32 34 20 00\n'
p173
S'.plt:0000000000400be0\n'
p174
tp175
sS'get_list'
p176
(S'\n__stdcall get_list(char * pattern)\n'
p177
V\u000avoid get_list(char *pattern)\u000a\u000a{\u000a  char cVar1;\u000a  undefined8 uVar2;\u000a  undefined4 *puVar3;\u000a  int iVar4;\u000a  long lVar5;\u000a  size_t sVar6;\u000a  ulong uVar7;\u000a  long lVar8;\u000a  char *__format;\u000a  FontList *pFVar9;\u000a  undefined *puVar10;\u000a  char **ppcVar11;\u000a  char *pcVar12;\u000a  long lVar13;\u000a  uint uVar14;\u000a  long *unaff_R12;\u000a  char *unaff_R14;\u000a  long lVar15;\u000a  int *unaff_R15;\u000a  undefined4 *puStack16560;\u000a  char *pcStack16552;\u000a  long lStack16544;\u000a  long lStack16536;\u000a  ulong uStack16528;\u000a  ulong uStack16520;\u000a  undefined4 uStack16512;\u000a  undefined4 uStack16508;\u000a  undefined4 uStack16504;\u000a  undefined4 uStack16500;\u000a  undefined8 uStack16496;\u000a  undefined4 uStack8320;\u000a  undefined4 uStack8316;\u000a  undefined4 uStack8312;\u000a  undefined4 uStack8308;\u000a  undefined8 uStack8304;\u000a  long *plStack112;\u000a  char **ppcStack104;\u000a  char *pcStack96;\u000a  int *piStack88;\u000a  int local_3c;\u000a  long local_38;\u000a  char *local_30;\u000a  \u000a  local_3c = nnames + 1;\u000a  local_30 = pattern;\u000a  if (open_instead_of_list == 0) {\u000a    unaff_R15 = &local_3c;\u000a    unaff_R12 = &local_38;\u000a    local_30 = pattern;\u000a    do {\u000a      if (long_list == 1) {\u000a        ppcStack104 = (char **)XListFontsWithInfo(dpy,pattern);\u000a      }\u000a      else {\u000a        ppcStack104 = (char **)XListFonts(dpy,pattern,(ulong)(uint)nnames);\u000a      }\u000a      if (ppcStack104 == (char **)0x0) goto LAB_00401608;\u000a      if (local_3c < nnames) goto LAB_004014ad;\u000a      if (long_list == 1) {\u000a        XFreeFontInfo(ppcStack104,local_38);\u000a      }\u000a      else {\u000a        XFreeFontNames(ppcStack104);\u000a      }\u000a      nnames = local_3c * 2;\u000a      unaff_R14 = pattern;\u000a    } while (open_instead_of_list == 0);\u000a  }\u000a  local_38 = XLoadQueryFont(dpy,local_30);\u000a  if (local_38 == 0) {\u000aLAB_00401608:\u000a    fprintf(stderr,"%s: pattern \u005c"%s\u005c" unmatched\u005cn",program_name,local_30);\u000a  }\u000a  else {\u000a    local_3c = 1;\u000a    XUnloadFont(dpy,*(undefined8 *)(local_38 + 8));\u000a    ppcStack104 = &local_30;\u000a    pattern = unaff_R14;\u000aLAB_004014ad:\u000a    font_list = (FontList *)realloc(font_list,((long)font_cnt + (long)local_3c) * 0x10);\u000a    iVar4 = long_list;\u000a    if (font_list == (FontList *)0x0) {\u000a      Fatal_Error("Out of memory!");\u000a      if ((long)font_cnt != 0) {\u000a        plStack112 = unaff_R12;\u000a        pcStack96 = pattern;\u000a        piStack88 = unaff_R15;\u000a        if (sort_output == 0) {\u000a          plStack112 = unaff_R12;\u000a          pcStack96 = pattern;\u000a          piStack88 = unaff_R15;\u000a          qsort(font_list,(long)font_cnt,0x10,compare);\u000a        }\u000a        if (long_list < 2) {\u000a          if (long_list == 1) {\u000a            printf("DIR  ");\u000a            printf("MIN  ");\u000a            printf("MAX ");\u000a            printf("EXIST ");\u000a            printf("DFLT ");\u000a            printf("PROP ");\u000a            printf("ASC ");\u000a            printf("DESC ");\u000a            printf("NAME");\u000a            putchar(10);\u000a            if (0 < font_cnt) {\u000a              lVar5 = 0;\u000a              lVar8 = 0;\u000a              do {\u000a                lVar13 = *(long *)((long)&font_list->info + lVar5);\u000a                if (lVar13 == 0) {\u000a                  lVar13 = *(long *)((long)&font_list->name + lVar5);\u000a                  if (lVar13 == 0) {\u000a                    lVar13 = 0x402ddb;\u000a                  }\u000a                  fprintf(stderr,"%s:  no font information for font \u005c"%s\u005c".\u005cn",program_name,lVar13);\u000a                }\u000a                else {\u000a                  puVar10 = &DAT_00402bbe;\u000a                  if (*(int *)(lVar13 + 0x10) == 1) {\u000a                    puVar10 = &DAT_00402bba;\u000a                  }\u000a                  if (*(int *)(lVar13 + 0x10) == 0) {\u000a                    puVar10 = &DAT_00402bb6;\u000a                  }\u000a                  printf("%-4s",puVar10);\u000a                  if ((*(int *)(lVar13 + 0x1c) == 0) && (*(int *)(lVar13 + 0x20) == 0)) {\u000a                    printf(" %3d ",(ulong)*(uint *)(lVar13 + 0x14));\u000a                    uVar14 = *(uint *)(lVar13 + 0x18);\u000a                    __format = " %3d ";\u000a                  }\u000a                  else {\u000a                    printf("*%3d ",(ulong)*(uint *)(lVar13 + 0x1c));\u000a                    uVar14 = *(uint *)(lVar13 + 0x20);\u000a                    __format = "*%3d ";\u000a                  }\u000a                  printf(__format,(ulong)uVar14);\u000a                  puVar10 = &DAT_00402bdc;\u000a                  if (*(int *)(lVar13 + 0x24) != 0) {\u000a                    puVar10 = &DAT_00402bd8;\u000a                  }\u000a                  printf("%5s ",puVar10);\u000a                  printf("%4d ",(ulong)*(uint *)(lVar13 + 0x28));\u000a                  printf("%4d ",(ulong)*(uint *)(lVar13 + 0x2c));\u000a                  printf("%3d ",(ulong)*(uint *)(lVar13 + 0x58));\u000a                  printf("%4d ",(ulong)*(uint *)(lVar13 + 0x5c));\u000a                  puts(*(char **)((long)&font_list->name + lVar5));\u000a                  if (min_max != 0) {\u000a                    puStack16560 = &uStack16512;\u000a                    uStack8304 = 0x28203d2029642c;\u000a                    uStack8320 = DAT_00402be6;\u000a                    uStack8316 = DAT_00402bea;\u000a                    uStack8312 = DAT_00402bee;\u000a                    uStack8308 = ",w,a,d) = ("._0_4_;\u000a                    uStack16496 = 0x28203d2029642c;\u000a                    uStack16512 = DAT_00402bfe;\u000a                    uStack16508 = DAT_00402c02;\u000a                    uStack16504 = DAT_00402c06;\u000a                    uStack16500 = ",w,a,d) = ("._0_4_;\u000a                    sVar6 = strlen((char *)&uStack8320);\u000a                    puVar3 = puStack16560;\u000a                    pcStack16552 = (char *)((long)&uStack8320 + sVar6);\u000a                    sVar6 = strlen((char *)puStack16560);\u000a                    puStack16560 = (undefined4 *)(sVar6 + (long)puVar3);\u000a                    copy_number(&pcStack16552,(char **)&puStack16560);\u000a                    *(undefined *)puStack16560 = 0x2c;\u000a                    *pcStack16552 = ',';\u000a                    puStack16560 = (undefined4 *)((long)puStack16560 + 1);\u000a                    pcStack16552 = pcStack16552 + 1;\u000a                    copy_number(&pcStack16552,(char **)&puStack16560);\u000a                    *(undefined *)puStack16560 = 0x2c;\u000a                    *pcStack16552 = ',';\u000a                    puStack16560 = (undefined4 *)((long)puStack16560 + 1);\u000a                    pcStack16552 = pcStack16552 + 1;\u000a                    copy_number(&pcStack16552,(char **)&puStack16560);\u000a                    *(undefined *)puStack16560 = 0x2c;\u000a                    *pcStack16552 = ',';\u000a                    puStack16560 = (undefined4 *)((long)puStack16560 + 1);\u000a                    pcStack16552 = pcStack16552 + 1;\u000a                    copy_number(&pcStack16552,(char **)&puStack16560);\u000a                    *(undefined *)puStack16560 = 0x2c;\u000a                    *pcStack16552 = ',';\u000a                    puStack16560 = (undefined4 *)((long)puStack16560 + 1);\u000a                    pcStack16552 = pcStack16552 + 1;\u000a                    copy_number(&pcStack16552,(char **)&puStack16560);\u000a                    *(undefined *)puStack16560 = 0x29;\u000a                    *pcStack16552 = ')';\u000a                    *(undefined *)((long)puStack16560 + 1) = 0;\u000a                    pcStack16552[1] = 0;\u000a                    puts((char *)&uStack8320);\u000a                    puts((char *)&uStack16512);\u000a                  }\u000a                }\u000a                lVar8 = lVar8 + 1;\u000a                lVar5 = lVar5 + 0x10;\u000a              } while (lVar8 < (long)font_cnt);\u000a            }\u000a          }\u000a          else {\u000a            if (((columns == 0) && (iVar4 = isatty(1), iVar4 != 0)) || (1 < columns)) {\u000a              iVar4 = font_cnt;\u000a              if (font_cnt < 1) {\u000aLAB_00401c68:\u000a                ppcVar11 = (char **)(ulong)(uint)iVar4;\u000a                __format = "all %d fontnames listed are zero length";\u000a                Fatal_Error("all %d fontnames listed are zero length");\u000a                __format = *(char **)__format;\u000a                pcVar12 = *ppcVar11;\u000a                cVar1 = *__format;\u000a                while( true ) {\u000a                  if (cVar1 == 0) {\u000a                    return;\u000a                  }\u000a                  __format = __format + 1;\u000a                  if (cVar1 != *pcVar12) break;\u000a                  if (*pcVar12 == 0) {\u000a                    return;\u000a                  }\u000a                  pcVar12 = pcVar12 + 1;\u000a                  cVar1 = *__format;\u000a                }\u000a                return;\u000a              }\u000a              lVar8 = (long)font_cnt;\u000a              lVar5 = 0;\u000a              uVar14 = 0;\u000a              pFVar9 = font_list;\u000a              do {\u000a                sVar6 = strlen(pFVar9->name);\u000a                if ((int)uVar14 <= (int)(uint)sVar6) {\u000a                  uVar14 = (uint)sVar6;\u000a                }\u000a                lVar5 = lVar5 + 1;\u000a                pFVar9 = pFVar9 + 1;\u000a              } while (lVar5 < lVar8);\u000a              if (uVar14 == 0) goto LAB_00401c68;\u000a              if (columns == 0) {\u000a                columns = 1;\u000a                if ((int)(uVar14 * 2 + 3) <= max_output_line_width) {\u000a                  uVar14 = uVar14 + 3;\u000a                  columns = (max_output_line_width + 3) / (int)uVar14;\u000a                }\u000a              }\u000a              else {\u000a                uVar14 = uVar14 + 3;\u000a              }\u000a              if (1 < columns) {\u000a                if (font_cnt < columns) {\u000a                  columns = font_cnt;\u000a                }\u000a                uStack16528 = (long)(font_cnt + -1 + columns) / (long)columns & 0xffffffff;\u000a                if ((int)uStack16528 < 1) {\u000a                  return;\u000a                }\u000a                lVar5 = (long)(int)uStack16528;\u000a                lStack16536 = -lVar5;\u000a                lStack16544 = 0;\u000a                uStack16520 = 0;\u000a                do {\u000a                  uVar7 = (ulong)(uint)columns;\u000a                  if (0 < columns) {\u000a                    lVar15 = 0;\u000a                    lVar8 = lStack16544;\u000a                    lVar13 = lStack16536;\u000a                    do {\u000a                      lVar13 = lVar13 + lVar5;\u000a                      if ((long)font_cnt <= lVar13) break;\u000a                      iVar4 = (int)lVar15;\u000a                      lVar15 = lVar15 + 1;\u000a                      uVar2 = *(undefined8 *)((long)&font_list->name + lVar8);\u000a                      if (iVar4 + 1 == (int)uVar7) {\u000a                        printf("%s",uVar2);\u000a                      }\u000a                      else {\u000a                        printf("%-*s",(ulong)uVar14,uVar2);\u000a                      }\u000a                      lVar8 = lVar8 + lVar5 * 0x10;\u000a                      uVar7 = SEXT48(columns);\u000a                    } while (lVar15 < (long)uVar7);\u000a                  }\u000a                  putchar(10);\u000a                  uStack16520 = uStack16520 + 1;\u000a                  lStack16536 = lStack16536 + 1;\u000a                  lStack16544 = lStack16544 + 0x10;\u000a                  if (uStack16520 == uStack16528) {\u000a                    return;\u000a                  }\u000a                } while( true );\u000a              }\u000a            }\u000a            if (0 < font_cnt) {\u000a              lVar5 = 0;\u000a              lVar8 = 0;\u000a              do {\u000a                puts(*(char **)((long)&font_list->name + lVar5));\u000a                lVar8 = lVar8 + 1;\u000a                lVar5 = lVar5 + 0x10;\u000a              } while (lVar8 < (long)font_cnt);\u000a            }\u000a          }\u000a        }\u000a        else {\u000a          if (0 < font_cnt) {\u000a            lVar5 = 0;\u000a            lVar8 = 0;\u000a            do {\u000a              do_query_font(dpy,*(char **)((long)&font_list->name + lVar5));\u000a              lVar8 = lVar8 + 1;\u000a              lVar5 = lVar5 + 0x10;\u000a            } while (lVar8 < (long)font_cnt);\u000a          }\u000a        }\u000a      }\u000a      return;\u000a    }\u000a    if (0 < local_3c) {\u000a      lVar8 = (long)font_cnt << 4;\u000a      lVar5 = 0;\u000a      lVar13 = 0;\u000a      do {\u000a        *(char **)((long)&font_list->name + lVar8) = ppcStack104[lVar13];\u000a        lVar15 = local_38 + lVar5;\u000a        if (iVar4 != 1) {\u000a          lVar15 = 0;\u000a        }\u000a        *(long *)((long)&font_list->info + lVar8) = lVar15;\u000a        lVar13 = lVar13 + 1;\u000a        lVar5 = lVar5 + 0x60;\u000a        lVar8 = lVar8 + 0x10;\u000a      } while (lVar13 < (long)local_3c);\u000a      font_cnt = font_cnt + (int)lVar13;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV qword ptr [RSP + 0x18],RDI\nMOV EAX,dword ptr [0x00604124]\nINC EAX\nMOV dword ptr [RSP + 0xc],EAX\nMOV AL,byte ptr [0x0060418c]\nTEST AL,AL\nJZ 0x0040155b\nMOV RDI,qword ptr [0x00604170]\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00400c80\nMOV qword ptr [RSP + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00401608\nMOV dword ptr [RSP + 0xc],0x1\nMOV RDI,qword ptr [0x00604170]\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RAX + 0x8]\nCALL 0x00400c00\nLEA R13,[RSP + 0x18]\nMOV RDI,qword ptr [0x00604198]\nMOVSXD RAX,dword ptr [RSP + 0xc]\nMOVSXD RSI,dword ptr [0x006041a0]\nADD RSI,RAX\nSHL RSI,0x4\nCALL 0x00400d50\nMOV qword ptr [0x00604198],RAX\nTEST RAX,RAX\nJZ 0x00401635\nCMP dword ptr [RSP + 0xc],0x0\nJLE 0x00401627\nMOV R10D,dword ptr [0x00604180]\nMOVSXD RDX,dword ptr [0x006041a0]\nMOV R8D,EDX\nMOVSXD RSI,dword ptr [RSP + 0xc]\nSHL RDX,0x4\nXOR R9D,R9D\nXOR EAX,EAX\nXOR EDI,EDI\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [R13 + RDI*0x8]\nMOV RBX,qword ptr [0x00604198]\nMOV qword ptr [RBX + RDX*0x1],RCX\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nCMP R10D,0x1\nCMOVNZ RCX,R9\nMOV RBX,qword ptr [0x00604198]\nMOV qword ptr [RBX + RDX*0x1 + 0x8],RCX\nINC RDI\nADD RAX,0x60\nADD RDX,0x10\nCMP RDI,RSI\nJL 0x00401510\nADD R8D,EDI\nMOV dword ptr [0x006041a0],R8D\nJMP 0x00401627\nMOV R14,qword ptr [RSP + 0x18]\nLEA R15,[RSP + 0xc]\nLEA R12,[RSP + 0x10]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x00604170]\nMOV EDX,dword ptr [0x00604124]\nCMP dword ptr [0x00604180],0x1\nJNZ 0x004015a0\nMOV RSI,R14\nMOV RCX,R15\nMOV R8,R12\nCALL 0x00400cb0\nJMP 0x004015ab\nMOV RSI,R14\nMOV RCX,R15\nCALL 0x00400c50\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00401608\nMOV EDX,dword ptr [RSP + 0xc]\nCMP EDX,dword ptr [0x00604124]\nJL 0x004014ad\nCMP dword ptr [0x00604180],0x1\nJNZ 0x004015e0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,R13\nCALL 0x00400d30\nJMP 0x004015e8\nMOV RDI,R13\nCALL 0x00400be0\nMOV EAX,dword ptr [RSP + 0xc]\nADD EAX,EAX\nMOV dword ptr [0x00604124],EAX\nMOVZX EAX,byte ptr [0x0060418c]\nTEST AL,AL\nJZ 0x00401570\nJMP 0x0040146c\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV ESI,0x402b33\nXOR EAX,EAX\nCALL 0x00400ce0\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x402b4f\nXOR EAX,EAX\nCALL 0x004010a0\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p179
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 20\n48 89 7c 24 18\n8b 05 cc 2c 20 00\nff c0\n89 44 24 0c\n8a 05 28 2d 20 00\n84 c0\n0f 84 ef 00 00 00\n48 8b 3d fd 2c 20 00\n48 8b 74 24 18\ne8 03 f8 ff ff\n48 89 44 24 10\n48 85 c0\n0f 84 7d 01 00 00\nc7 44 24 0c 01 00 00 00\n48 8b 3d d6 2c 20 00\n48 8b 44 24 10\n48 8b 70 08\ne8 58 f7 ff ff\n4c 8d 6c 24 18\n48 8b 3d e4 2c 20 00\n48 63 44 24 0c\n48 63 35 e0 2c 20 00\n48 01 c6\n48 c1 e6 04\ne8 84 f8 ff ff\n48 89 05 c5 2c 20 00\n48 85 c0\n0f 84 59 01 00 00\n83 7c 24 0c 00\n0f 8e 40 01 00 00\n44 8b 15 92 2c 20 00\n48 63 15 ab 2c 20 00\n41 89 d0\n48 63 74 24 0c\n48 c1 e2 04\n45 31 c9\n31 c0\n31 ff\n0f 1f 84 00 00 00 00 00\n49 8b 4c fd 00\n48 8b 1d 7c 2c 20 00\n48 89 0c 13\n48 8b 4c 24 10\n48 01 c1\n41 83 fa 01\n49 0f 45 c9\n48 8b 1d 61 2c 20 00\n48 89 4c 13 08\n48 ff c7\n48 83 c0 60\n48 83 c2 10\n48 39 f7\n7c c4\n41 01 f8\n44 89 05 4a 2c 20 00\ne9 cc 00 00 00\n4c 8b 74 24 18\n4c 8d 7c 24 0c\n4c 8d 64 24 10\n66 0f 1f 44 00 00\n48 8b 3d f9 2b 20 00\n8b 15 a7 2b 20 00\n83 3d fc 2b 20 00 01\n75 1a\n4c 89 f6\n4c 89 f9\n4d 89 e0\ne8 1c f7 ff ff\neb 15\n4c 89 f6\n4c 89 f9\ne8 a5 f6 ff ff\n49 89 c5\n4d 85 ed\n74 55\n8b 54 24 0c\n3b 15 67 2b 20 00\n0f 8c ea fe ff ff\n83 3d b6 2b 20 00 01\n75 14\n48 8b 74 24 10\n4c 89 ef\ne8 57 f7 ff ff\neb 0d\n4c 89 ef\ne8 f8 f5 ff ff\n8b 44 24 0c\n01 c0\n89 05 30 2b 20 00\n0f b6 05 91 2b 20 00\n84 c0\n0f 84 6d ff ff ff\ne9 64 fe ff ff\n48 8b 3d 51 2b 20 00\n48 8b 15 02 2b 20 00\n48 8b 4c 24 18\nbe 33 2b 40 00\n31 c0\ne8 b9 f6 ff ff\n48 83 c4 20\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 4f 2b 40 00\n31 c0\ne8 5f fa ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p180
S'.text:0000000000401440\n.text:0000000000401442\n.text:0000000000401444\n.text:0000000000401446\n.text:0000000000401448\n.text:0000000000401449\n.text:000000000040144d\n.text:0000000000401452\n.text:0000000000401458\n.text:000000000040145a\n.text:000000000040145e\n.text:0000000000401464\n.text:0000000000401466\n.text:000000000040146c\n.text:0000000000401473\n.text:0000000000401478\n.text:000000000040147d\n.text:0000000000401482\n.text:0000000000401485\n.text:000000000040148b\n.text:0000000000401493\n.text:000000000040149a\n.text:000000000040149f\n.text:00000000004014a3\n.text:00000000004014a8\n.text:00000000004014ad\n.text:00000000004014b4\n.text:00000000004014b9\n.text:00000000004014c0\n.text:00000000004014c3\n.text:00000000004014c7\n.text:00000000004014cc\n.text:00000000004014d3\n.text:00000000004014d6\n.text:00000000004014dc\n.text:00000000004014e1\n.text:00000000004014e7\n.text:00000000004014ee\n.text:00000000004014f5\n.text:00000000004014f8\n.text:00000000004014fd\n.text:0000000000401501\n.text:0000000000401504\n.text:0000000000401506\n.text:0000000000401508\n.text:0000000000401510\n.text:0000000000401515\n.text:000000000040151c\n.text:0000000000401520\n.text:0000000000401525\n.text:0000000000401528\n.text:000000000040152c\n.text:0000000000401530\n.text:0000000000401537\n.text:000000000040153c\n.text:000000000040153f\n.text:0000000000401543\n.text:0000000000401547\n.text:000000000040154a\n.text:000000000040154c\n.text:000000000040154f\n.text:0000000000401556\n.text:000000000040155b\n.text:0000000000401560\n.text:0000000000401565\n.text:000000000040156a\n.text:0000000000401570\n.text:0000000000401577\n.text:000000000040157d\n.text:0000000000401584\n.text:0000000000401586\n.text:0000000000401589\n.text:000000000040158c\n.text:000000000040158f\n.text:0000000000401594\n.text:00000000004015a0\n.text:00000000004015a3\n.text:00000000004015a6\n.text:00000000004015ab\n.text:00000000004015ae\n.text:00000000004015b1\n.text:00000000004015b3\n.text:00000000004015b7\n.text:00000000004015bd\n.text:00000000004015c3\n.text:00000000004015ca\n.text:00000000004015cc\n.text:00000000004015d1\n.text:00000000004015d4\n.text:00000000004015d9\n.text:00000000004015e0\n.text:00000000004015e3\n.text:00000000004015e8\n.text:00000000004015ec\n.text:00000000004015ee\n.text:00000000004015f4\n.text:00000000004015fb\n.text:00000000004015fd\n.text:0000000000401603\n.text:0000000000401608\n.text:000000000040160f\n.text:0000000000401616\n.text:000000000040161b\n.text:0000000000401620\n.text:0000000000401622\n.text:0000000000401627\n.text:000000000040162b\n.text:000000000040162c\n.text:000000000040162e\n.text:0000000000401630\n.text:0000000000401632\n.text:0000000000401634\n.text:0000000000401635\n.text:000000000040163a\n.text:000000000040163c\n.text:0000000000401641\n'
p181
tp182
sS'XFreeFontInfo'
p183
(S'\n__stdcall XFreeFontInfo()\n'
p184
V\u000avoid XFreeFontInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XFreeFontInfo_006040c0)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x006040c0]\n'
p186
S'ff 25 8a 33 20 00\n'
p187
S'.plt:0000000000400d30\n'
p188
tp189
sS'exit'
p190
(S'\n__stdcall exit(int __status)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006040f0)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x006040f0]\n'
p193
S'ff 25 5a 33 20 00\n'
p194
S'.plt:0000000000400d90\n'
p195
tp196
sS'__libc_csu_fini'
p197
(S'\n__stdcall __libc_csu_fini()\n'
p198
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p199
S'RET\n'
p200
S'f3 c3\n'
p201
S'.text:0000000000402410\n'
p202
tp203
sS'Get_Display_Name'
p204
(S'\n__stdcall Get_Display_Name(int * pargc, char * * argv)\n'
p205
V\u000achar * Get_Display_Name(int *pargc,char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  FILE *__stream;\u000a  int iVar3;\u000a  char *pcVar4;\u000a  undefined8 uVar5;\u000a  char **ppcVar6;\u000a  char *pcVar7;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  char **ppcVar8;\u000a  uint uVar9;\u000a  ulong uVar10;\u000a  long lVar11;\u000a  char *__s1;\u000a  char *local_40;\u000a  \u000a  iVar1 = *pargc;\u000a  ppcVar8 = argv + 1;\u000a  if ((long)iVar1 < 2) {\u000a    local_40 = (char *)0x0;\u000a  }\u000a  else {\u000a    uVar9 = 1;\u000a    local_40 = (char *)0x0;\u000a    do {\u000a      lVar11 = (long)(int)uVar9;\u000a      __s1 = argv[lVar11];\u000a      iVar3 = strcmp(__s1,"-display");\u000a      if ((iVar3 == 0) || (((*__s1 == '-' && (__s1[1] == 'd')) && (__s1[2] == 0)))) {\u000a        uVar9 = uVar9 + 1;\u000a        uVar10 = (ulong)uVar9;\u000a        if (iVar1 <= (int)uVar9) {\u000a          pcVar7 = "-display requires an argument";\u000a          usage("-display requires an argument");\u000a          pcVar4 = (char *)XOpenDisplay();\u000a          __stream = stderr;\u000a          pcVar2 = program_name;\u000a          if (pcVar4 == (char *)0x0) {\u000a            uVar5 = XDisplayName(pcVar7);\u000a            fprintf(__stream,"%s:  unable to open display \u005c'%s\u005c'\u005cn",pcVar2,uVar5,in_R8,in_R9,__s1,\u000a                    uVar10,lVar11);\u000a                    /* WARNING: Subroutine does not return */\u000a            exit(1);\u000a          }\u000a          return pcVar4;\u000a        }\u000a        local_40 = argv[(long)(int)uVar9];\u000a        *pargc = *pargc + -2;\u000a      }\u000a      else {\u000a        if ((*__s1 == '-') && (__s1[1] == 0)) {\u000a          if ((int)uVar9 < iVar1) {\u000a            argv = argv + lVar11;\u000a            lVar11 = (long)iVar1 - lVar11;\u000a            ppcVar6 = ppcVar8;\u000a            do {\u000a              *ppcVar6 = *argv;\u000a              ppcVar6 = ppcVar6 + 1;\u000a              argv = argv + 1;\u000a              lVar11 = lVar11 + -1;\u000a            } while (lVar11 != 0);\u000a            ppcVar8 = ppcVar8 + (ulong)((iVar1 + -1) - uVar9) + 1;\u000a          }\u000a          break;\u000a        }\u000a        *ppcVar8 = __s1;\u000a        ppcVar8 = ppcVar8 + 1;\u000a      }\u000a      uVar9 = uVar9 + 1;\u000a    } while ((int)uVar9 < iVar1);\u000a  }\u000a  *ppcVar8 = (char *)0x0;\u000a  return local_40;\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RSI\nMOV qword ptr [RSP + 0x10],RDI\nMOVSXD RBP,dword ptr [RDI]\nLEA R13,[R12 + 0x8]\nCMP RBP,0x2\nJL 0x00400faa\nMOV R14D,0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSXD R15,R14D\nMOV RBX,qword ptr [R12 + R15*0x8]\nMOV ESI,0x402440\nMOV RDI,RBX\nCALL 0x00400cc0\nTEST EAX,EAX\nJZ 0x00400f80\nCMP byte ptr [RBX],0x2d\nJNZ 0x00400f60\nCMP byte ptr [RBX + 0x1],0x64\nJNZ 0x00400f60\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00400f80\nNOP dword ptr [RAX]\nCMP byte ptr [RBX],0x2d\nJNZ 0x00400f6b\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00400fcd\nMOV qword ptr [R13],RBX\nADD R13,0x8\nJMP 0x00400fa0\nINC R14D\nCMP R14D,EBP\nJGE 0x0040100a\nMOVSXD RAX,R14D\nMOV RAX,qword ptr [R12 + RAX*0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nADD dword ptr [RAX],-0x2\nINC R14D\nCMP R14D,EBP\nJL 0x00400f30\nJMP 0x00400fb1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [R13],0x0\nMOV RAX,qword ptr [RSP + 0x8]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP R14D,EBP\nJGE 0x00400fb1\nLEA EAX,[RBP + -0x1]\nSUB EAX,R14D\nINC RAX\nLEA RCX,[R12 + R15*0x8]\nSUB RBP,R15\nMOV RDX,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RCX]\nMOV qword ptr [RDX],RSI\nADD RDX,0x8\nADD RCX,0x8\nDEC RBP\nJNZ 0x00400ff0\nLEA R13,[R13 + RAX*0x8]\nJMP 0x00400fb1\nMOV EDI,0x40244c\nCALL 0x00401190\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p207
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f4\n48 89 7c 24 10\n48 63 2f\n4d 8d 6c 24 08\n48 83 fd 02\n0f 8c 92 00 00 00\n41 be 01 00 00 00\n31 c0\n48 89 44 24 08\n66 66 2e 0f 1f 84 00 00 00 00 00\n4d 63 fe\n4b 8b 1c fc\nbe 40 24 40 00\n48 89 df\ne8 7c fd ff ff\n85 c0\n74 38\n80 3b 2d\n75 13\n80 7b 01 64\n75 0d\n80 7b 02 00\n74 27\n0f 1f 80 00 00 00 00\n80 3b 2d\n75 06\n80 7b 01 00\n74 62\n49 89 5d 00\n49 83 c5 08\neb 2b\n41 ff c6\n41 39 ee\n0f 8d 7e 00 00 00\n49 63 c6\n49 8b 04 c4\n48 89 44 24 08\n48 8b 44 24 10\n83 00 fe\n41 ff c6\n41 39 ee\n7c 88\neb 07\n31 c0\n48 89 44 24 08\n49 c7 45 00 00 00 00 00\n48 8b 44 24 08\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 39 ee\n7d df\n8d 45 ff\n44 29 f0\n48 ff c0\n4b 8d 0c fc\n4c 29 fd\n4c 89 ea\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 31\n48 89 32\n48 83 c2 08\n48 83 c1 08\n48 ff cd\n75 ed\n4d 8d 6c c5 00\neb a7\nbf 4c 24 40 00\ne8 7c 01 00 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p208
S'.text:0000000000400ef0\n.text:0000000000400ef1\n.text:0000000000400ef3\n.text:0000000000400ef5\n.text:0000000000400ef7\n.text:0000000000400ef9\n.text:0000000000400efa\n.text:0000000000400efe\n.text:0000000000400f01\n.text:0000000000400f06\n.text:0000000000400f09\n.text:0000000000400f0e\n.text:0000000000400f12\n.text:0000000000400f18\n.text:0000000000400f1e\n.text:0000000000400f20\n.text:0000000000400f25\n.text:0000000000400f30\n.text:0000000000400f33\n.text:0000000000400f37\n.text:0000000000400f3c\n.text:0000000000400f3f\n.text:0000000000400f44\n.text:0000000000400f46\n.text:0000000000400f48\n.text:0000000000400f4b\n.text:0000000000400f4d\n.text:0000000000400f51\n.text:0000000000400f53\n.text:0000000000400f57\n.text:0000000000400f59\n.text:0000000000400f60\n.text:0000000000400f63\n.text:0000000000400f65\n.text:0000000000400f69\n.text:0000000000400f6b\n.text:0000000000400f6f\n.text:0000000000400f73\n.text:0000000000400f80\n.text:0000000000400f83\n.text:0000000000400f86\n.text:0000000000400f8c\n.text:0000000000400f8f\n.text:0000000000400f93\n.text:0000000000400f98\n.text:0000000000400f9d\n.text:0000000000400fa0\n.text:0000000000400fa3\n.text:0000000000400fa6\n.text:0000000000400fa8\n.text:0000000000400faa\n.text:0000000000400fac\n.text:0000000000400fb1\n.text:0000000000400fb9\n.text:0000000000400fbe\n.text:0000000000400fc2\n.text:0000000000400fc3\n.text:0000000000400fc5\n.text:0000000000400fc7\n.text:0000000000400fc9\n.text:0000000000400fcb\n.text:0000000000400fcc\n.text:0000000000400fcd\n.text:0000000000400fd0\n.text:0000000000400fd2\n.text:0000000000400fd5\n.text:0000000000400fd8\n.text:0000000000400fdb\n.text:0000000000400fdf\n.text:0000000000400fe2\n.text:0000000000400fe5\n.text:0000000000400ff0\n.text:0000000000400ff3\n.text:0000000000400ff6\n.text:0000000000400ffa\n.text:0000000000400ffe\n.text:0000000000401001\n.text:0000000000401003\n.text:0000000000401008\n.text:000000000040100a\n.text:000000000040100f\n.text:0000000000401014\n'
p209
tp210
sS'print_character_metrics'
p211
(S'\n__stdcall print_character_metrics(XFontStruct * info)\n'
p212
V\u000avoid print_character_metrics(XFontStruct *info)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  int iVar5;\u000a  XCharStruct *pXVar6;\u000a  undefined *puVar7;\u000a  undefined8 uVar8;\u000a  \u000a  pXVar6 = info->per_char;\u000a  puts("  character metrics:");\u000a  uVar3 = info->min_byte1;\u000a  if (uVar3 < info->max_byte1 || uVar3 == info->max_byte1) {\u000a    uVar4 = uVar3 << 8 | info->min_char_or_byte2;\u000a    do {\u000a      uVar1 = info->min_char_or_byte2;\u000a      if (uVar1 < info->max_char_or_byte2 || uVar1 == info->max_char_or_byte2) {\u000a        iVar5 = 0;\u000a        do {\u000a          uVar8 = 0x4021c4;\u000a          puVar7 = (undefined *)XKeysymToString((ulong)(uVar4 + iVar5));\u000a          if (puVar7 == (undefined *)0x0) {\u000a            puVar7 = &DAT_00402f3e;\u000a          }\u000a          printf("\u005ct0x%02x%02x (%u)\u005ct%4d  %4d  %4d  %4d  %4d  0x%04x  %s\u005cn",(ulong)uVar3,\u000a                 (ulong)(uVar1 + iVar5),(ulong)(uVar4 + iVar5),(ulong)(uint)(int)pXVar6->width,\u000a                 (ulong)(uint)(int)pXVar6->lbearing,(ulong)(uint)(int)pXVar6->rbearing,\u000a                 (ulong)(uint)(int)pXVar6->ascent,(ulong)(uint)(int)pXVar6->descent,\u000a                 (ulong)pXVar6->attributes,puVar7,uVar8);\u000a          pXVar6 = pXVar6 + 1;\u000a          uVar2 = uVar1 + 1 + iVar5;\u000a          iVar5 = iVar5 + 1;\u000a        } while (uVar2 < info->max_char_or_byte2 || uVar2 == info->max_char_or_byte2);\u000a      }\u000a      uVar4 = uVar4 + 0x100;\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < info->max_byte1 || uVar3 == info->max_byte1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RDI\nMOV RBX,qword ptr [R12 + 0x50]\nMOV EDI,0x403150\nCALL 0x00400c10\nMOV EAX,dword ptr [R12 + 0x1c]\nCMP EAX,dword ptr [R12 + 0x20]\nJA 0x0040225d\nMOV ECX,EAX\nSHL ECX,0x8\nOR ECX,dword ptr [R12 + 0x14]\nNOP word ptr [RAX + RAX*0x1]\nMOV EDX,dword ptr [R12 + 0x14]\nCMP EDX,dword ptr [R12 + 0x18]\nMOV dword ptr [RSP + 0x8],EAX\nJA 0x00402246\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x18],RCX\nMOV qword ptr [RSP + 0x10],RDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA R13D,[RCX + R15*0x1]\nLEA EAX,[RDX + R15*0x1]\nMOV dword ptr [RSP + 0xc],EAX\nMOV RDI,R13\nCALL 0x00400db0\nMOV RBP,RAX\nMOVSX R8D,word ptr [RBX + 0x4]\nMOVSX R9D,word ptr [RBX]\nMOVSX EAX,word ptr [RBX + 0x2]\nMOV qword ptr [RSP + 0x20],RAX\nMOVSX R11D,word ptr [RBX + 0x6]\nMOVSX R14D,word ptr [RBX + 0x8]\nMOVZX R10D,word ptr [RBX + 0xa]\nTEST RBP,RBP\nMOV EAX,0x402f3e\nCMOVZ RBP,RAX\nSUB RSP,0x8\nMOV EDI,0x402f08\nMOV EAX,0x0\nMOV ESI,dword ptr [RSP + 0x10]\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,R13D\nPUSH RBP\nPUSH R10\nPUSH R14\nPUSH R11\nPUSH qword ptr [RSP + 0x48]\nCALL 0x00400c60\nMOV RDX,qword ptr [RSP + 0x40]\nADD RSP,0x30\nADD RBX,0xc\nLEA EAX,[RDX + R15*0x1 + 0x1]\nLEA ECX,[R15 + 0x1]\nCMP EAX,dword ptr [R12 + 0x18]\nMOV R15D,ECX\nMOV RCX,qword ptr [RSP + 0x18]\nJBE 0x004021b0\nADD ECX,0x100\nMOV EAX,dword ptr [RSP + 0x8]\nINC EAX\nCMP EAX,dword ptr [R12 + 0x20]\nJBE 0x00402180\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p214
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 fc\n49 8b 5c 24 50\nbf 50 31 40 00\ne8 b0 ea ff ff\n41 8b 44 24 1c\n41 3b 44 24 20\n0f 87 ed 00 00 00\n89 c1\nc1 e1 08\n41 0b 4c 24 14\n66 0f 1f 44 00 00\n41 8b 54 24 14\n41 3b 54 24 18\n89 44 24 08\n0f 87 b2 00 00 00\n45 31 ff\n48 89 4c 24 18\n48 89 54 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n46 8d 2c 39\n42 8d 04 3a\n89 44 24 0c\n4c 89 ef\ne8 ec eb ff ff\n48 89 c5\n44 0f bf 43 04\n44 0f bf 0b\n0f bf 43 02\n48 89 44 24 20\n44 0f bf 5b 06\n44 0f bf 73 08\n44 0f b7 53 0a\n48 85 ed\nb8 3e 2f 40 00\n48 0f 44 e8\n48 83 ec 08\nbf 08 2f 40 00\nb8 00 00 00 00\n8b 74 24 10\n8b 54 24 14\n44 89 e9\n55\n41 52\n41 56\n41 53\nff 74 24 48\ne8 43 ea ff ff\n48 8b 54 24 40\n48 83 c4 30\n48 83 c3 0c\n42 8d 44 3a 01\n41 8d 4f 01\n41 3b 44 24 18\n41 89 cf\n48 8b 4c 24 18\n0f 86 6a ff ff ff\n81 c1 00 01 00 00\n8b 44 24 08\nff c0\n41 3b 44 24 20\n0f 86 23 ff ff ff\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p215
S'.text:0000000000402140\n.text:0000000000402141\n.text:0000000000402143\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214a\n.text:000000000040214e\n.text:0000000000402151\n.text:0000000000402156\n.text:000000000040215b\n.text:0000000000402160\n.text:0000000000402165\n.text:000000000040216a\n.text:0000000000402170\n.text:0000000000402172\n.text:0000000000402175\n.text:000000000040217a\n.text:0000000000402180\n.text:0000000000402185\n.text:000000000040218a\n.text:000000000040218e\n.text:0000000000402194\n.text:0000000000402197\n.text:000000000040219c\n.text:00000000004021a1\n.text:00000000004021b0\n.text:00000000004021b4\n.text:00000000004021b8\n.text:00000000004021bc\n.text:00000000004021bf\n.text:00000000004021c4\n.text:00000000004021c7\n.text:00000000004021cc\n.text:00000000004021d0\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f4\n.text:00000000004021f8\n.text:00000000004021fd\n.text:0000000000402202\n.text:0000000000402206\n.text:000000000040220a\n.text:000000000040220d\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402212\n.text:0000000000402214\n.text:0000000000402218\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402226\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223b\n.text:0000000000402240\n.text:0000000000402246\n.text:000000000040224c\n.text:0000000000402250\n.text:0000000000402252\n.text:0000000000402257\n.text:000000000040225d\n.text:0000000000402261\n.text:0000000000402262\n.text:0000000000402264\n.text:0000000000402266\n.text:0000000000402268\n.text:000000000040226a\n.text:000000000040226b\n'
p216
tp217
sS'Fatal_Error'
p218
(S'\n__stdcall Fatal_Error(char * msg)\n'
p219
V\u000avoid Fatal_Error(char *msg,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  fflush(stdout);\u000a  fflush(stderr);\u000a  fprintf(stderr,"%s: error: ",program_name);\u000a  local_c8 = local_b8;\u000a  local_d0 = &args[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  vfprintf(stderr,msg,&local_d8);\u000a  fputc(10,stderr);\u000a  Close_Display();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p220
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x004010e6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV RDI,qword ptr [0x00604140]\nCALL 0x00400d00\nMOV RDI,qword ptr [0x00604160]\nCALL 0x00400d00\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,qword ptr [0x00604118]\nMOV ESI,0x402434\nXOR EAX,EAX\nCALL 0x00400ce0\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RDI,qword ptr [0x00604160]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x00400d60\nMOV RSI,qword ptr [0x00604160]\nMOV EDI,0xa\nCALL 0x00400ca0\nCALL 0x00401070\nMOV EDI,0x1\nCALL 0x00400d90\n'
p221
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8b 3d 3a 30 20 00\ne8 f5 fb ff ff\n48 8b 3d 4e 30 20 00\ne8 e9 fb ff ff\n48 8b 3d 42 30 20 00\n48 8b 15 f3 2f 20 00\nbe 34 24 40 00\n31 c0\ne8 af fb ff ff\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 8b 3d 02 30 20 00\n48 89 e2\n48 89 de\ne8 f7 fb ff ff\n48 8b 35 f0 2f 20 00\nbf 0a 00 00 00\ne8 26 fb ff ff\ne8 f1 fe ff ff\nbf 01 00 00 00\ne8 07 fc ff ff\n'
p222
S'.text:00000000004010a0\n.text:00000000004010a1\n.text:00000000004010a8\n.text:00000000004010ab\n.text:00000000004010ad\n.text:00000000004010af\n.text:00000000004010b4\n.text:00000000004010b9\n.text:00000000004010be\n.text:00000000004010c6\n.text:00000000004010ce\n.text:00000000004010d6\n.text:00000000004010de\n.text:00000000004010e6\n.text:00000000004010eb\n.text:00000000004010f0\n.text:00000000004010f5\n.text:00000000004010fa\n.text:00000000004010ff\n.text:0000000000401106\n.text:000000000040110b\n.text:0000000000401112\n.text:0000000000401117\n.text:000000000040111e\n.text:0000000000401125\n.text:000000000040112a\n.text:000000000040112c\n.text:0000000000401131\n.text:0000000000401136\n.text:000000000040113b\n.text:0000000000401143\n.text:0000000000401148\n.text:0000000000401150\n.text:0000000000401157\n.text:000000000040115e\n.text:0000000000401161\n.text:0000000000401164\n.text:0000000000401169\n.text:0000000000401170\n.text:0000000000401175\n.text:000000000040117a\n.text:000000000040117f\n.text:0000000000401184\n'
p223
tp224
sS'compare'
p225
(S'\n__stdcall compare(void * arg1, void * arg2)\n'
p226
V\u000aint compare(void *arg1,void *arg2)\u000a\u000a{\u000a  char cVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = *(char **)arg1;\u000a  pcVar3 = *(char **)arg2;\u000a  cVar1 = *pcVar2;\u000a  while ((int)cVar1 != 0) {\u000a    pcVar2 = pcVar2 + 1;\u000a    if ((cVar1 != *pcVar3) || (*pcVar3 == 0)) break;\u000a    pcVar3 = pcVar3 + 1;\u000a    cVar1 = *pcVar2;\u000a  }\u000a  return (int)cVar1 - (int)*pcVar3;\u000a}\u000a\u000a
p227
S'MOV RDX,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nMOVSX EAX,byte ptr [RDX]\nTEST EAX,EAX\nJZ 0x00401ca8\nINC RDX\nMOVZX ECX,byte ptr [RSI]\nCMP AL,CL\nJNZ 0x00401ca8\nTEST CL,CL\nJZ 0x00401ca8\nINC RSI\nMOVSX EAX,byte ptr [RDX]\nINC RDX\nTEST EAX,EAX\nJNZ 0x00401c90\nMOVSX ECX,byte ptr [RSI]\nSUB EAX,ECX\nRET\n'
p228
S'48 8b 17\n48 8b 36\n0f be 02\n85 c0\n74 1b\n48 ff c2\n0f b6 0e\n38 c8\n75 11\n84 c9\n74 0d\n48 ff c6\n0f be 02\n48 ff c2\n85 c0\n75 e8\n0f be 0e\n29 c8\nc3\n'
p229
S'.text:0000000000401c80\n.text:0000000000401c83\n.text:0000000000401c86\n.text:0000000000401c89\n.text:0000000000401c8b\n.text:0000000000401c8d\n.text:0000000000401c90\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c97\n.text:0000000000401c99\n.text:0000000000401c9b\n.text:0000000000401c9e\n.text:0000000000401ca1\n.text:0000000000401ca4\n.text:0000000000401ca6\n.text:0000000000401ca8\n.text:0000000000401cab\n.text:0000000000401cad\n'
p230
tp231
sS'XLoadQueryFont'
p232
(S'\n__stdcall XLoadQueryFont()\n'
p233
V\u000avoid XLoadQueryFont(void)\u000a\u000a{\u000a  (*(code *)PTR_XLoadQueryFont_00604068)();\u000a  return;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00604068]\n'
p235
S'ff 25 e2 33 20 00\n'
p236
S'.plt:0000000000400c80\n'
p237
tp238
sS'XOpenDisplay'
p239
(S'\n__stdcall XOpenDisplay()\n'
p240
V\u000avoid XOpenDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XOpenDisplay_00604090)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x00604090]\n'
p242
S'ff 25 ba 33 20 00\n'
p243
S'.plt:0000000000400cd0\n'
p244
tp245
sS'_start'
p246
(S'\n__stdcall _start()\n'
p247
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00603ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p248
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x402410\nMOV RCX,0x4023a0\nMOV RDI,0x4011f0\nCALL qword ptr [0x00603ff0]\nHLT\n'
p249
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 10 24 40 00\n48 c7 c1 a0 23 40 00\n48 c7 c7 f0 11 40 00\nff 15 06 32 20 00\nf4\n'
p250
S'.text:0000000000400dc0\n.text:0000000000400dc2\n.text:0000000000400dc5\n.text:0000000000400dc6\n.text:0000000000400dc9\n.text:0000000000400dcd\n.text:0000000000400dce\n.text:0000000000400dcf\n.text:0000000000400dd6\n.text:0000000000400ddd\n.text:0000000000400de4\n.text:0000000000400dea\n'
p251
tp252
sS'fputc'
p253
(S'\n__stdcall fputc(int __c, FILE * __stream)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_00604078)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00604078]\n'
p256
S'ff 25 d2 33 20 00\n'
p257
S'.plt:0000000000400ca0\n'
p258
tp259
sS'printf'
p260
(S'\n__stdcall printf(char * __format)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_00604058)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x00604058]\n'
p263
S'ff 25 f2 33 20 00\n'
p264
S'.plt:0000000000400c60\n'
p265
tp266
sS'deregister_tm_clones'
p267
(S'\n__stdcall deregister_tm_clones()\n'
p268
V\u000a/* WARNING: Removing unreachable block (ram,0x00400e05) */\u000a/* WARNING: Removing unreachable block (ram,0x00400e0f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p269
S'MOV EAX,0x60412f\nPUSH RBP\nSUB RAX,0x604128\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00400e20\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400e20\nPOP RBP\nMOV EDI,0x604128\nJMP RAX\nPOP RBP\nRET\n'
p270
S'b8 2f 41 60 00\n55\n48 2d 28 41 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 28 41 60 00\nff e0\n5d\nc3\n'
p271
S'.text:0000000000400df0\n.text:0000000000400df5\n.text:0000000000400df6\n.text:0000000000400dfc\n.text:0000000000400e00\n.text:0000000000400e03\n.text:0000000000400e05\n.text:0000000000400e0a\n.text:0000000000400e0d\n.text:0000000000400e0f\n.text:0000000000400e10\n.text:0000000000400e15\n.text:0000000000400e20\n.text:0000000000400e21\n'
p272
tp273
sS'XDisplayName'
p274
(S'\n__stdcall XDisplayName()\n'
p275
V\u000avoid XDisplayName(void)\u000a\u000a{\u000a  (*(code *)PTR_XDisplayName_006040b8)();\u000a  return;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x006040b8]\n'
p277
S'ff 25 92 33 20 00\n'
p278
S'.plt:0000000000400d20\n'
p279
tp280
sS'XListFonts'
p281
(S'\n__stdcall XListFonts()\n'
p282
V\u000avoid XListFonts(void)\u000a\u000a{\u000a  (*(code *)PTR_XListFonts_00604050)();\u000a  return;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x00604050]\n'
p284
S'ff 25 fa 33 20 00\n'
p285
S'.plt:0000000000400c50\n'
p286
tp287
sS'atoi'
p288
(S'\n__stdcall atoi(char * __nptr)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint atoi(char *__nptr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_atoi_006040e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x006040e0]\n'
p291
S'ff 25 6a 33 20 00\n'
p292
S'.plt:0000000000400d70\n'
p293
tp294
sS'qsort'
p295
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_00604038)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x00604038]\n'
p298
S'ff 25 12 34 20 00\n'
p299
S'.plt:0000000000400c20\n'
p300
tp301
sS'register_tm_clones'
p302
(S'\n__stdcall register_tm_clones()\n'
p303
V\u000a/* WARNING: Removing unreachable block (ram,0x00400e53) */\u000a/* WARNING: Removing unreachable block (ram,0x00400e5d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p304
S'MOV ESI,0x604128\nPUSH RBP\nSUB RSI,0x604128\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00400e68\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400e68\nPOP RBP\nMOV EDI,0x604128\nJMP RAX\nPOP RBP\nRET\n'
p305
S'be 28 41 60 00\n55\n48 81 ee 28 41 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 28 41 60 00\nff e0\n5d\nc3\n'
p306
S'.text:0000000000400e30\n.text:0000000000400e35\n.text:0000000000400e36\n.text:0000000000400e3d\n.text:0000000000400e41\n.text:0000000000400e44\n.text:0000000000400e47\n.text:0000000000400e4b\n.text:0000000000400e4e\n.text:0000000000400e51\n.text:0000000000400e53\n.text:0000000000400e58\n.text:0000000000400e5b\n.text:0000000000400e5d\n.text:0000000000400e5e\n.text:0000000000400e63\n.text:0000000000400e68\n.text:0000000000400e69\n'
p307
tp308
sS'XDefaultScreen'
p309
(S'\n__stdcall XDefaultScreen()\n'
p310
V\u000avoid XDefaultScreen(void)\u000a\u000a{\u000a  (*(code *)PTR_XDefaultScreen_00604070)();\u000a  return;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00604070]\n'
p312
S'ff 25 da 33 20 00\n'
p313
S'.plt:0000000000400c90\n'
p314
tp315
sS'Open_Display'
p316
(S'\n__stdcall Open_Display(char * display_name)\n'
p317
V\u000aDisplay * Open_Display(char *display_name)\u000a\u000a{\u000a  char *pcVar1;\u000a  FILE *__stream;\u000a  Display *pDVar2;\u000a  undefined8 uVar3;\u000a  \u000a  pDVar2 = (Display *)XOpenDisplay();\u000a  __stream = stderr;\u000a  pcVar1 = program_name;\u000a  if (pDVar2 != (Display *)0x0) {\u000a    return pDVar2;\u000a  }\u000a  uVar3 = XDisplayName(display_name);\u000a  fprintf(__stream,"%s:  unable to open display \u005c'%s\u005c'\u005cn",pcVar1,uVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p318
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00400cd0\nTEST RAX,RAX\nJZ 0x00401038\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV R14,qword ptr [0x00604160]\nMOV R15,qword ptr [0x00604118]\nMOV RDI,RBX\nCALL 0x00400d20\nMOV RCX,RAX\nMOV ESI,0x40246a\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x00400ce0\nMOV EDI,0x1\nCALL 0x00400d90\n'
p319
S'41 57\n41 56\n53\n48 89 fb\ne8 a3 fc ff ff\n48 85 c0\n74 06\n5b\n41 5e\n41 5f\nc3\n4c 8b 35 21 31 20 00\n4c 8b 3d d2 30 20 00\n48 89 df\ne8 d2 fc ff ff\n48 89 c1\nbe 6a 24 40 00\n31 c0\n4c 89 f7\n4c 89 fa\ne8 7d fc ff ff\nbf 01 00 00 00\ne8 23 fd ff ff\n'
p320
S'.text:0000000000401020\n.text:0000000000401022\n.text:0000000000401024\n.text:0000000000401025\n.text:0000000000401028\n.text:000000000040102d\n.text:0000000000401030\n.text:0000000000401032\n.text:0000000000401033\n.text:0000000000401035\n.text:0000000000401037\n.text:0000000000401038\n.text:000000000040103f\n.text:0000000000401046\n.text:0000000000401049\n.text:000000000040104e\n.text:0000000000401051\n.text:0000000000401056\n.text:0000000000401058\n.text:000000000040105b\n.text:000000000040105e\n.text:0000000000401063\n.text:0000000000401068\n'
p321
tp322
sS'Close_Display'
p323
(S'\n__stdcall Close_Display()\n'
p324
V\u000avoid Close_Display(void)\u000a\u000a{\u000a  if (dpy != (Display *)0x0) {\u000a    XCloseDisplay();\u000a    dpy = (Display *)0x0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p325
S'MOV RDI,qword ptr [0x00604170]\nTEST RDI,RDI\nJZ 0x00401091\nPUSH RAX\nCALL 0x00400da0\nMOV qword ptr [0x00604170],0x0\nADD RSP,0x8\nRET\n'
p326
S'48 8b 3d f9 30 20 00\n48 85 ff\n74 15\n50\ne8 1e fd ff ff\n48 c7 05 e3 30 20 00 00 00 00 00\n48 83 c4 08\nc3\n'
p327
S'.text:0000000000401070\n.text:0000000000401077\n.text:000000000040107a\n.text:000000000040107c\n.text:000000000040107d\n.text:0000000000401082\n.text:000000000040108d\n.text:0000000000401091\n'
p328
tp329
sS'ComputeFontType'
p330
(S'\n__stdcall ComputeFontType(XFontStruct * fs)\n'
p331
V\u000avoid ComputeFontType(XFontStruct *fs)\u000a\u000a{\u000a  short sVar1;\u000a  short sVar2;\u000a  ulong uVar3;\u000a  long lVar4;\u000a  ulong *puVar5;\u000a  short *psVar6;\u000a  uint uVar7;\u000a  long lVar8;\u000a  char *pcVar9;\u000a  char *__s;\u000a  bool bVar10;\u000a  \u000a  uVar3 = XInternAtom(dpy,0x402e21,0);\u000a  printf("  font type:\u005ct\u005ct");\u000a  if ((fs->min_bounds).width != (fs->max_bounds).width) {\u000a    __s = "Proportional (min and max widths not equal)";\u000aLAB_00402127:\u000a    puts(__s);\u000a    return;\u000a  }\u000a  bVar10 = true;\u000a  if ((uVar3 != 0) && (0 < fs->n_properties)) {\u000a    puVar5 = &fs->properties->card32;\u000a    __s = "font width not equal to AVERAGE_WIDTH";\u000a    lVar8 = 0;\u000a    do {\u000a      if ((puVar5[-1] == uVar3) &&\u000a         (lVar4 = (long)(fs->max_bounds).width, (lVar4 << 0x21) + (lVar4 << 0x23) >> 0x20 != *puVar5\u000a         )) {\u000a        bVar10 = false;\u000a        goto LAB_00402033;\u000a      }\u000a      lVar8 = lVar8 + 1;\u000a      puVar5 = puVar5 + 2;\u000a    } while (lVar8 < (long)fs->n_properties);\u000a  }\u000a  __s = (char *)0x0;\u000aLAB_00402033:\u000a  if ((fs->per_char != (XCharStruct *)0x0) &&\u000a     (uVar7 = fs->min_char_or_byte2, uVar7 < fs->max_char_or_byte2 || uVar7 == fs->max_char_or_byte2\u000a     )) {\u000a    psVar6 = &fs->per_char->descent;\u000a    do {\u000a      sVar1 = psVar6[-2];\u000a      if (sVar1 != 0) {\u000a        if (sVar1 != (fs->max_bounds).width) {\u000a          __s = "Proportional (characters not all the same width)";\u000a          goto LAB_00402127;\u000a        }\u000a        if (bVar10) {\u000a          sVar2 = psVar6[-4];\u000a          if (sVar1 < 0) {\u000a            if (((sVar2 < sVar1) || (psVar6[-3] < sVar2)) || (0 < psVar6[-3])) goto LAB_004020b0;\u000a          }\u000a          else {\u000a            if (((sVar2 < 0) || (psVar6[-3] < sVar2)) || (sVar1 < psVar6[-3])) {\u000aLAB_004020b0:\u000a              bVar10 = false;\u000a              __s = "ink outside bounding box";\u000a            }\u000a          }\u000a          if ((fs->ascent < (int)psVar6[-1]) || (fs->descent < (int)*psVar6)) {\u000a            bVar10 = false;\u000a            __s = "characters not all same ascent or descent";\u000a          }\u000a        }\u000a        else {\u000a          bVar10 = false;\u000a        }\u000a      }\u000a      uVar7 = uVar7 + 1;\u000a      psVar6 = psVar6 + 6;\u000a    } while (uVar7 < fs->max_char_or_byte2 || uVar7 == fs->max_char_or_byte2);\u000a  }\u000a  pcVar9 = "Monospaced";\u000a  if (bVar10) {\u000a    pcVar9 = "Character Cell";\u000a  }\u000a  printf("%s",pcVar9);\u000a  if (__s != (char *)0x0) {\u000a    printf(" (%s)",__s);\u000a  }\u000a  putchar(10);\u000a  return;\u000a}\u000a\u000a
p332
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [0x00604170]\nMOV ESI,0x402e21\nXOR EDX,EDX\nCALL 0x00400d10\nMOV R15,RAX\nMOV EDI,0x402dcd\nXOR EAX,EAX\nCALL 0x00400c60\nMOVZX EAX,word ptr [RBX + 0x3c]\nCMP AX,word ptr [RBX + 0x48]\nJNZ 0x00402122\nMOV R8D,0x1\nTEST R15,R15\nJZ 0x00402030\nCMP dword ptr [RBX + 0x2c],0x0\nJLE 0x00402030\nMOV RCX,qword ptr [RBX + 0x30]\nADD RCX,0x8\nMOV R14D,0x402e09\nXOR EDX,EDX\nNOP dword ptr [RAX]\nCMP qword ptr [RCX + -0x8],R15\nJNZ 0x00402020\nMOVSX RAX,word ptr [RBX + 0x48]\nSHL RAX,0x21\nLEA RAX,[RAX + RAX*0x4]\nSAR RAX,0x20\nCMP RAX,qword ptr [RCX]\nJNZ 0x00402131\nINC RDX\nMOVSXD RAX,dword ptr [RBX + 0x2c]\nADD RCX,0x10\nCMP RDX,RAX\nJL 0x00402000\nXOR R14D,R14D\nMOV RCX,qword ptr [RBX + 0x50]\nTEST RCX,RCX\nJZ 0x004020e2\nMOV EDX,dword ptr [RBX + 0x14]\nCMP EDX,dword ptr [RBX + 0x18]\nJA 0x004020e2\nADD RCX,0x8\nMOVZX ESI,word ptr [RCX + -0x4]\nTEST SI,SI\nJZ 0x004020d3\nCMP SI,word ptr [RBX + 0x48]\nJNZ 0x00402139\nTEST R8D,R8D\nJZ 0x00402090\nMOVZX EDI,word ptr [RCX + -0x8]\nTEST SI,SI\nJS 0x00402095\nTEST DI,DI\nJS 0x004020b0\nMOVZX EAX,word ptr [RCX + -0x6]\nCMP DI,AX\nJG 0x004020b0\nCMP AX,SI\nJLE 0x004020b9\nJMP 0x004020b0\nXOR R8D,R8D\nJMP 0x004020d3\nCMP SI,DI\nJG 0x004020b0\nMOVZX EAX,word ptr [RCX + -0x6]\nCMP DI,AX\nJG 0x004020b0\nTEST AX,AX\nJLE 0x004020b9\nNOP dword ptr [RAX + RAX*0x1]\nXOR R8D,R8D\nMOV R14D,0x402e61\nMOVSX EAX,word ptr [RCX + -0x2]\nCMP EAX,dword ptr [RBX + 0x58]\nJG 0x004020ca\nMOVSX EAX,word ptr [RCX]\nCMP EAX,dword ptr [RBX + 0x5c]\nJLE 0x004020d3\nXOR R8D,R8D\nMOV R14D,0x402e7a\nINC EDX\nADD RCX,0xc\nCMP EDX,dword ptr [RBX + 0x18]\nJBE 0x00402050\nTEST R8D,R8D\nMOV EAX,0x402ea4\nMOV ESI,0x402eb3\nCMOVNZ RSI,RAX\nMOV EDI,0x402d88\nXOR EAX,EAX\nCALL 0x00400c60\nTEST R14,R14\nJZ 0x00402113\nMOV EDI,0x402ebe\nXOR EAX,EAX\nMOV RSI,R14\nCALL 0x00400c60\nMOV EDI,0xa\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00400bf0\nMOV EDI,0x403120\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00400c10\nXOR R8D,R8D\nJMP 0x00402033\nMOV EDI,0x4030e0\nJMP 0x00402127\n'
p333
S'41 57\n41 56\n53\n48 89 fb\n48 8b 3d c1 21 20 00\nbe 21 2e 40 00\n31 d2\ne8 55 ed ff ff\n49 89 c7\nbf cd 2d 40 00\n31 c0\ne8 96 ec ff ff\n0f b7 43 3c\n66 3b 43 48\n0f 85 4a 01 00 00\n41 b8 01 00 00 00\n4d 85 ff\n74 4d\n83 7b 2c 00\n7e 47\n48 8b 4b 30\n48 83 c1 08\n41 be 09 2e 40 00\n31 d2\n0f 1f 80 00 00 00 00\n4c 39 79 f8\n75 1a\n48 0f bf 43 48\n48 c1 e0 21\n48 8d 04 80\n48 c1 f8 20\n48 3b 01\n0f 85 11 01 00 00\n48 ff c2\n48 63 43 2c\n48 83 c1 10\n48 39 c2\n7c d0\n45 31 f6\n48 8b 4b 50\n48 85 c9\n0f 84 a2 00 00 00\n8b 53 14\n3b 53 18\n0f 87 96 00 00 00\n48 83 c1 08\n0f b7 71 fc\n66 85 f6\n74 7a\n66 3b 73 48\n0f 85 d6 00 00 00\n45 85 c0\n74 28\n0f b7 79 f8\n66 85 f6\n78 24\n66 85 ff\n78 3a\n0f b7 41 fa\n66 39 c7\n7f 31\n66 39 f0\n7e 35\neb 2a\n45 31 c0\neb 3e\n66 39 fe\n7f 16\n0f b7 41 fa\n66 39 c7\n7f 0d\n66 85 c0\n7e 11\n0f 1f 84 00 00 00 00 00\n45 31 c0\n41 be 61 2e 40 00\n0f bf 41 fe\n3b 43 58\n7f 08\n0f bf 01\n3b 43 5c\n7e 09\n45 31 c0\n41 be 7a 2e 40 00\nff c2\n48 83 c1 0c\n3b 53 18\n0f 86 6e ff ff ff\n45 85 c0\nb8 a4 2e 40 00\nbe b3 2e 40 00\n48 0f 45 f0\nbf 88 2d 40 00\n31 c0\ne8 61 eb ff ff\n4d 85 f6\n74 0f\nbf be 2e 40 00\n31 c0\n4c 89 f6\ne8 4d eb ff ff\nbf 0a 00 00 00\n5b\n41 5e\n41 5f\ne9 ce ea ff ff\nbf 20 31 40 00\n5b\n41 5e\n41 5f\ne9 df ea ff ff\n45 31 c0\ne9 fa fe ff ff\nbf e0 30 40 00\neb e7\n'
p334
S'.text:0000000000401fa0\n.text:0000000000401fa2\n.text:0000000000401fa4\n.text:0000000000401fa5\n.text:0000000000401fa8\n.text:0000000000401faf\n.text:0000000000401fb4\n.text:0000000000401fb6\n.text:0000000000401fbb\n.text:0000000000401fbe\n.text:0000000000401fc3\n.text:0000000000401fc5\n.text:0000000000401fca\n.text:0000000000401fce\n.text:0000000000401fd2\n.text:0000000000401fd8\n.text:0000000000401fde\n.text:0000000000401fe1\n.text:0000000000401fe3\n.text:0000000000401fe7\n.text:0000000000401fe9\n.text:0000000000401fed\n.text:0000000000401ff1\n.text:0000000000401ff7\n.text:0000000000401ff9\n.text:0000000000402000\n.text:0000000000402004\n.text:0000000000402006\n.text:000000000040200b\n.text:000000000040200f\n.text:0000000000402013\n.text:0000000000402017\n.text:000000000040201a\n.text:0000000000402020\n.text:0000000000402023\n.text:0000000000402027\n.text:000000000040202b\n.text:000000000040202e\n.text:0000000000402030\n.text:0000000000402033\n.text:0000000000402037\n.text:000000000040203a\n.text:0000000000402040\n.text:0000000000402043\n.text:0000000000402046\n.text:000000000040204c\n.text:0000000000402050\n.text:0000000000402054\n.text:0000000000402057\n.text:0000000000402059\n.text:000000000040205d\n.text:0000000000402063\n.text:0000000000402066\n.text:0000000000402068\n.text:000000000040206c\n.text:000000000040206f\n.text:0000000000402071\n.text:0000000000402074\n.text:0000000000402076\n.text:000000000040207a\n.text:000000000040207d\n.text:000000000040207f\n.text:0000000000402082\n.text:0000000000402084\n.text:0000000000402090\n.text:0000000000402093\n.text:0000000000402095\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209e\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a6\n.text:00000000004020a8\n.text:00000000004020b0\n.text:00000000004020b3\n.text:00000000004020b9\n.text:00000000004020bd\n.text:00000000004020c0\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020c8\n.text:00000000004020ca\n.text:00000000004020cd\n.text:00000000004020d3\n.text:00000000004020d5\n.text:00000000004020d9\n.text:00000000004020dc\n.text:00000000004020e2\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020ef\n.text:00000000004020f3\n.text:00000000004020f8\n.text:00000000004020fa\n.text:00000000004020ff\n.text:0000000000402102\n.text:0000000000402104\n.text:0000000000402109\n.text:000000000040210b\n.text:000000000040210e\n.text:0000000000402113\n.text:0000000000402118\n.text:0000000000402119\n.text:000000000040211b\n.text:000000000040211d\n.text:0000000000402122\n.text:0000000000402127\n.text:0000000000402128\n.text:000000000040212a\n.text:000000000040212c\n.text:0000000000402131\n.text:0000000000402134\n.text:0000000000402139\n.text:000000000040213e\n'
p335
tp336
sS'XCloseDisplay'
p337
(S'\n__stdcall XCloseDisplay()\n'
p338
V\u000avoid XCloseDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XCloseDisplay_006040f8)();\u000a  return;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x006040f8]\n'
p340
S'ff 25 52 33 20 00\n'
p341
S'.plt:0000000000400da0\n'
p342
tp343
sS'fprintf'
p344
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_00604098)();\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x00604098]\n'
p347
S'ff 25 b2 33 20 00\n'
p348
S'.plt:0000000000400ce0\n'
p349
tp350
sS'puts'
p351
(S'\n__stdcall puts(char * __s)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_00604030)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00604030]\n'
p354
S'ff 25 1a 34 20 00\n'
p355
S'.plt:0000000000400c10\n'
p356
tp357
sS'XInternAtom'
p358
(S'\n__stdcall XInternAtom()\n'
p359
V\u000avoid XInternAtom(void)\u000a\u000a{\u000a  (*(code *)PTR_XInternAtom_006040b0)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x006040b0]\n'
p361
S'ff 25 9a 33 20 00\n'
p362
S'.plt:0000000000400d10\n'
p363
tp364
sS'XGetAtomName'
p365
(S'\n__stdcall XGetAtomName()\n'
p366
V\u000avoid XGetAtomName(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetAtomName_006040c8)();\u000a  return;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x006040c8]\n'
p368
S'ff 25 82 33 20 00\n'
p369
S'.plt:0000000000400d40\n'
p370
tp371
sS'__do_global_dtors_aux'
p372
(S'\n__stdcall __do_global_dtors_aux()\n'
p373
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p374
S'CMP byte ptr [0x00604168],0x0\nJNZ 0x00400e8a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00400df0\nPOP RBP\nMOV byte ptr [0x00604168],0x1\nRET\n'
p375
S'80 3d f1 32 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 de 32 20 00 01\nf3 c3\n'
p376
S'.text:0000000000400e70\n.text:0000000000400e77\n.text:0000000000400e79\n.text:0000000000400e7a\n.text:0000000000400e7d\n.text:0000000000400e82\n.text:0000000000400e83\n.text:0000000000400e8a\n'
p377
tp378
sS'_fini'
p379
(S'\n__stdcall _fini()\n'
p380
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p381
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p382
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p383
S'.fini:0000000000402414\n.fini:0000000000402418\n.fini:000000000040241c\n'
p384
tp385
sS'FUN_00400bd0'
p386
(S'\n__stdcall FUN_00400bd0()\n'
p387
V\u000avoid FUN_00400bd0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00604010)();\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH qword ptr [0x00604008]\nJMP qword ptr [0x00604010]\n'
p389
S'ff 35 32 34 20 00\nff 25 34 34 20 00\n'
p390
S'.plt:0000000000400bd0\n.plt:0000000000400bd6\n'
p391
tp392
s.