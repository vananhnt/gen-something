(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a148)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060a148]\n'
p4
S'ff 25 82 8c 20 00\n'
p5
S'.plt:00000000004014c0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004076ab,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4050c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405148;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4051dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404f58\nMOV EDX,0x407698\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004015a0\nJMP 0x00404f6d\nMOV EDX,0x4076a4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4076ab\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x407980\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4076af\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401400\nCMP R12,0x9\nJA 0x00404ff6\nJMP qword ptr [0x407648 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40777a\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4078b9\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x38\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x40778a\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4077a1\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4077bd\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x18\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x4077dd\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x18\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x407801\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x28\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x407829\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x28\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x407855\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x38\nJMP 0x00405267\nXOR EDI,EDI\nMOV ESI,0x407885\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015a0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401280\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 98 76 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 4a c6 ff ff\neb 15\nba a4 76 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 33 c6 ff ff\n31 ff\nbe ab 76 40 00\nba 05 00 00 00\ne8 c2 c3 ff ff\n48 89 c1\nbe 01 00 00 00\nba 80 79 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 05 c6 ff ff\n31 ff\nbe af 76 40 00\nba 05 00 00 00\ne8 94 c3 ff ff\n48 89 c7\n4c 89 f6\ne8 49 c4 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 48 76 40 00\n31 ff\nbe 7a 77 40 00\nba 05 00 00 00\ne8 6a c3 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa c5 ff ff\n31 ff\nbe b9 78 40 00\nba 05 00 00 00\ne8 39 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 61 c5 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 8a 77 40 00\nba 05 00 00 00\ne8 e7 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 23 c5 ff ff\n31 ff\nbe a1 77 40 00\nba 05 00 00 00\ne8 b2 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea c4 ff ff\n31 ff\nbe bd 77 40 00\nba 05 00 00 00\ne8 79 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 b4 c4 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe dd 77 40 00\nba 05 00 00 00\ne8 3a c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 72 c4 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 01 78 40 00\nba 05 00 00 00\ne8 f8 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 28 c4 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 29 78 40 00\nba 05 00 00 00\ne8 ae c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 de c3 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 55 78 40 00\nba 05 00 00 00\ne8 64 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8c c3 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 85 78 40 00\nba 05 00 00 00\ne8 15 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3d c3 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 0c c0 ff ff\n'
p12
S'.text:0000000000404f20\n.text:0000000000404f22\n.text:0000000000404f24\n.text:0000000000404f26\n.text:0000000000404f27\n.text:0000000000404f28\n.text:0000000000404f2b\n.text:0000000000404f2e\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f3a\n.text:0000000000404f3f\n.text:0000000000404f42\n.text:0000000000404f44\n.text:0000000000404f49\n.text:0000000000404f4b\n.text:0000000000404f4e\n.text:0000000000404f51\n.text:0000000000404f56\n.text:0000000000404f58\n.text:0000000000404f5d\n.text:0000000000404f5f\n.text:0000000000404f62\n.text:0000000000404f65\n.text:0000000000404f68\n.text:0000000000404f6d\n.text:0000000000404f6f\n.text:0000000000404f74\n.text:0000000000404f79\n.text:0000000000404f7e\n.text:0000000000404f81\n.text:0000000000404f86\n.text:0000000000404f8b\n.text:0000000000404f91\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404fa2\n.text:0000000000404fa7\n.text:0000000000404fac\n.text:0000000000404faf\n.text:0000000000404fb2\n.text:0000000000404fb7\n.text:0000000000404fbb\n.text:0000000000404fbd\n.text:0000000000404fc5\n.text:0000000000404fc7\n.text:0000000000404fcc\n.text:0000000000404fd1\n.text:0000000000404fd6\n.text:0000000000404fd9\n.text:0000000000404fdc\n.text:0000000000404fe1\n.text:0000000000404fe3\n.text:0000000000404fe6\n.text:0000000000404fea\n.text:0000000000404feb\n.text:0000000000404fed\n.text:0000000000404fef\n.text:0000000000404ff1\n.text:0000000000404ff6\n.text:0000000000404ff8\n.text:0000000000404ffd\n.text:0000000000405002\n.text:0000000000405007\n.text:000000000040500a\n.text:000000000040500d\n.text:0000000000405011\n.text:0000000000405015\n.text:000000000040501a\n.text:000000000040501f\n.text:0000000000405022\n.text:0000000000405026\n.text:000000000040502a\n.text:000000000040502e\n.text:0000000000405032\n.text:0000000000405036\n.text:000000000040503a\n.text:000000000040503f\n.text:0000000000405043\n.text:0000000000405048\n.text:000000000040504a\n.text:000000000040504f\n.text:0000000000405054\n.text:0000000000405059\n.text:000000000040505c\n.text:000000000040505f\n.text:0000000000405063\n.text:0000000000405068\n.text:000000000040506a\n.text:000000000040506d\n.text:0000000000405071\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405076\n.text:0000000000405078\n.text:000000000040507d\n.text:000000000040507f\n.text:0000000000405084\n.text:0000000000405089\n.text:000000000040508e\n.text:0000000000405091\n.text:0000000000405094\n.text:0000000000405098\n.text:000000000040509c\n.text:00000000004050a1\n.text:00000000004050a3\n.text:00000000004050a6\n.text:00000000004050aa\n.text:00000000004050ab\n.text:00000000004050ad\n.text:00000000004050af\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050b8\n.text:00000000004050bd\n.text:00000000004050c2\n.text:00000000004050c7\n.text:00000000004050ca\n.text:00000000004050cd\n.text:00000000004050d1\n.text:00000000004050d5\n.text:00000000004050d9\n.text:00000000004050de\n.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e7\n.text:00000000004050ec\n.text:00000000004050f0\n.text:00000000004050f5\n.text:00000000004050f7\n.text:00000000004050fc\n.text:0000000000405101\n.text:0000000000405106\n.text:0000000000405109\n.text:000000000040510c\n.text:0000000000405110\n.text:0000000000405114\n.text:0000000000405119\n.text:000000000040511e\n.text:0000000000405121\n.text:0000000000405125\n.text:0000000000405129\n.text:000000000040512e\n.text:0000000000405132\n.text:0000000000405137\n.text:0000000000405139\n.text:000000000040513e\n.text:0000000000405143\n.text:0000000000405148\n.text:000000000040514b\n.text:000000000040514e\n.text:0000000000405152\n.text:0000000000405156\n.text:000000000040515a\n.text:000000000040515f\n.text:0000000000405164\n.text:0000000000405167\n.text:000000000040516b\n.text:000000000040516f\n.text:0000000000405173\n.text:0000000000405178\n.text:000000000040517c\n.text:0000000000405181\n.text:0000000000405183\n.text:0000000000405188\n.text:000000000040518d\n.text:0000000000405192\n.text:0000000000405195\n.text:0000000000405198\n.text:000000000040519c\n.text:00000000004051a0\n.text:00000000004051a5\n.text:00000000004051aa\n.text:00000000004051ad\n.text:00000000004051b1\n.text:00000000004051b5\n.text:00000000004051b9\n.text:00000000004051bd\n.text:00000000004051c2\n.text:00000000004051c6\n.text:00000000004051cb\n.text:00000000004051cd\n.text:00000000004051d2\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e2\n.text:00000000004051e6\n.text:00000000004051ea\n.text:00000000004051ee\n.text:00000000004051f3\n.text:00000000004051f8\n.text:00000000004051fb\n.text:00000000004051ff\n.text:0000000000405203\n.text:0000000000405207\n.text:000000000040520b\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405218\n.text:000000000040521a\n.text:000000000040521c\n.text:0000000000405221\n.text:0000000000405226\n.text:000000000040522b\n.text:000000000040522e\n.text:0000000000405231\n.text:0000000000405235\n.text:0000000000405239\n.text:000000000040523e\n.text:0000000000405243\n.text:0000000000405246\n.text:000000000040524a\n.text:000000000040524e\n.text:0000000000405252\n.text:0000000000405256\n.text:000000000040525a\n.text:000000000040525e\n.text:0000000000405263\n.text:0000000000405267\n.text:0000000000405268\n.text:000000000040526a\n.text:000000000040526c\n.text:000000000040526e\n.text:000000000040526f\n'
p13
tp14
sS'rpl_fclose'
p15
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p16
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405dc9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405dc9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401460\nTEST EAX,EAX\nJS 0x00405dc9\nMOV RDI,RBX\nCALL 0x004014e0\nTEST EAX,EAX\nJZ 0x00405d97\nMOV RDI,RBX\nCALL 0x00401460\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004013a0\nCMP RAX,-0x1\nJZ 0x00405dc9\nMOV RDI,RBX\nCALL 0x00405de0\nTEST EAX,EAX\nJZ 0x00405dc9\nCALL 0x00401290\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401320\nTEST EBP,EBP\nJZ 0x00405dc2\nCALL 0x00401290\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401320\n'
p18
S'55\n53\n50\n48 89 fb\ne8 f5 b6 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 b7 ff ff\n85 c0\n74 1c\n48 89 df\ne8 dd b6 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 0f b6 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 e8 b4 ff ff\n8b 28\n48 89 df\ne8 6e b5 ff ff\n85 ed\n74 0c\ne8 d5 b4 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 49 b5 ff ff\n'
p19
S'.text:0000000000405d60\n.text:0000000000405d61\n.text:0000000000405d62\n.text:0000000000405d63\n.text:0000000000405d66\n.text:0000000000405d6b\n.text:0000000000405d6d\n.text:0000000000405d6f\n.text:0000000000405d72\n.text:0000000000405d77\n.text:0000000000405d79\n.text:0000000000405d7b\n.text:0000000000405d7e\n.text:0000000000405d83\n.text:0000000000405d85\n.text:0000000000405d8a\n.text:0000000000405d8c\n.text:0000000000405d91\n.text:0000000000405d95\n.text:0000000000405d97\n.text:0000000000405d9a\n.text:0000000000405d9f\n.text:0000000000405da1\n.text:0000000000405da3\n.text:0000000000405da8\n.text:0000000000405daa\n.text:0000000000405dad\n.text:0000000000405db2\n.text:0000000000405db4\n.text:0000000000405db6\n.text:0000000000405dbb\n.text:0000000000405dbd\n.text:0000000000405dc2\n.text:0000000000405dc6\n.text:0000000000405dc7\n.text:0000000000405dc8\n.text:0000000000405dc9\n.text:0000000000405dcc\n.text:0000000000405dd0\n.text:0000000000405dd1\n.text:0000000000405dd2\n'
p20
tp21
sS'advance'
p22
(S'\n__stdcall advance()\n'
p23
V\u000aulong advance(undefined8 uParm1)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined7 extraout_var;\u000a  uint uVar2;\u000a  byte bVar3;\u000a  undefined7 uVar4;\u000a  \u000a  uVar4 = (undefined7)((ulong)uParm1 >> 8);\u000a  pos = pos + 1;\u000a  if ((pos < argc) || (bVar3 = (byte)uParm1 ^ 1, bVar3 != 0)) {\u000a    return (ulong)(uint)pos;\u000a  }\u000a  beyond();\u000a  if (pos < argc) {\u000a    _Var1 = or();\u000a    return CONCAT71(extraout_var,_Var1);\u000a  }\u000a  beyond();\u000a  if ((*(char *)CONCAT71(uVar4,bVar3) == '-') &&\u000a     (uVar2 = (int)*(char *)(CONCAT71(uVar4,bVar3) + 1) - 0x47, uVar2 < 0x34)) {\u000a    return (ulong)((uint)(0xb7b93fc0011a1 >> ((byte)uVar2 & 0x3f)) & 1);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p24
S'MOV EAX,dword ptr [0x0060a29c]\nINC EAX\nMOV dword ptr [0x0060a29c],EAX\nCMP EAX,dword ptr [0x0060a298]\nJL 0x00401fac\nXOR DIL,0x1\nJZ 0x00401fad\nRET\nPUSH RAX\nCALL 0x00402500\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p25
S'8b 05 06 83 20 00\nff c0\n89 05 fe 82 20 00\n3b 05 f4 82 20 00\n7c 06\n40 80 f7 01\n74 01\nc3\n50\ne8 4d 05 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p26
S'.text:0000000000401f90\n.text:0000000000401f96\n.text:0000000000401f98\n.text:0000000000401f9e\n.text:0000000000401fa4\n.text:0000000000401fa6\n.text:0000000000401faa\n.text:0000000000401fac\n.text:0000000000401fad\n.text:0000000000401fae\n.text:0000000000401fb3\n'
p27
tp28
sS'to_uchar'
p29
(S'\n__stdcall to_uchar()\n'
p30
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p31
S'MOV EAX,EDI\nRET\n'
p32
S'89 f8\nc3\n'
p33
S'.text:0000000000402650\n.text:0000000000402652\n'
p34
tp35
sS'strncmp'
p36
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a040)();\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060a040]\n'
p39
S'ff 25 8a 8d 20 00\n'
p40
S'.plt:00000000004012b0\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405474\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405480\nPUSH RAX\nCALL 0x004055d0\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p47
S'.text:0000000000405460\n.text:0000000000405463\n.text:0000000000405466\n.text:0000000000405469\n.text:000000000040546b\n.text:000000000040546f\n.text:0000000000405472\n.text:0000000000405474\n.text:0000000000405475\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404650\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404665\n.text:0000000000404668\n'
p55
tp56
sS'emit_bug_reporting_address'
p57
(S'\n__stdcall emit_bug_reporting_address()\n'
p58
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4078f5\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40790a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401520\nXOR EDI,EDI\nMOV ESI,0x407920\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406da6\nMOV ECX,0x406e90\nXOR EAX,EAX\nCALL 0x00401520\nXOR EDI,EDI\nMOV ESI,0x407934\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401400\n'
p60
S'50\n31 ff\nbe f5 78 40 00\nba 05 00 00 00\ne8 8e bf ff ff\n48 89 c1\nbf 01 00 00 00\nba 0a 79 40 00\n31 c0\n48 89 ce\ne8 57 c1 ff ff\n31 ff\nbe 20 79 40 00\nba 05 00 00 00\ne8 66 bf ff ff\n48 89 c6\nbf 01 00 00 00\nba a6 6d 40 00\nb9 90 6e 40 00\n31 c0\ne8 2d c1 ff ff\n31 ff\nbe 34 79 40 00\nba 05 00 00 00\ne8 3c bf ff ff\n48 8b 35 5d 4e 20 00\n48 89 c7\n58\ne9 ec bf ff ff\n'
p61
S'.text:00000000004053a0\n.text:00000000004053a1\n.text:00000000004053a3\n.text:00000000004053a8\n.text:00000000004053ad\n.text:00000000004053b2\n.text:00000000004053b5\n.text:00000000004053ba\n.text:00000000004053bf\n.text:00000000004053c1\n.text:00000000004053c4\n.text:00000000004053c9\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d5\n.text:00000000004053da\n.text:00000000004053dd\n.text:00000000004053e2\n.text:00000000004053e7\n.text:00000000004053ec\n.text:00000000004053ee\n.text:00000000004053f3\n.text:00000000004053f5\n.text:00000000004053fa\n.text:00000000004053ff\n.text:0000000000405404\n.text:000000000040540b\n.text:000000000040540e\n.text:000000000040540f\n'
p62
tp63
sS'clone_quoting_options'
p64
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p65
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401290\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a2c0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405580\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 fb\ne8 64 e0 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 c0 a2 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 35 23 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:0000000000403220\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403224\n.text:0000000000403227\n.text:000000000040322c\n.text:000000000040322f\n.text:0000000000403232\n.text:0000000000403235\n.text:000000000040323a\n.text:000000000040323e\n.text:0000000000403243\n.text:0000000000403246\n.text:000000000040324b\n.text:000000000040324e\n.text:000000000040324f\n.text:0000000000403251\n.text:0000000000403252\n'
p69
tp70
sS'get_stat_atime'
p71
(S'\n__stdcall get_stat_atime(stat * st)\n'
p72
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p73
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p74
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p75
S'.text:0000000000404ab0\n.text:0000000000404ab4\n.text:0000000000404ab8\n'
p76
tp77
sS'xmalloc'
p78
(S'\n__stdcall xmalloc(size_t n)\n'
p79
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401480\nTEST RBX,RBX\nJZ 0x00405453\nTEST RAX,RAX\nJZ 0x00405455\nPOP RBX\nRET\nCALL 0x004055d0\n'
p81
S'53\n48 89 fb\ne8 37 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p82
S'.text:0000000000405440\n.text:0000000000405441\n.text:0000000000405444\n.text:0000000000405449\n.text:000000000040544c\n.text:000000000040544e\n.text:0000000000405451\n.text:0000000000405453\n.text:0000000000405454\n.text:0000000000405455\n'
p83
tp84
sS'quotearg_char_mem'
p85
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p86
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a2f0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a2e0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2c0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403280\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404170\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p88
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 58 5e 20 00\n48 89 4c 24 30\n0f 10 05 3c 5e 20 00\n0f 29 44 24 20\n0f 10 05 20 5e 20 00\n0f 29 44 24 10\n0f 10 05 04 5e 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p89
S'.text:0000000000404480\n.text:0000000000404482\n.text:0000000000404484\n.text:0000000000404485\n.text:0000000000404489\n.text:000000000040448b\n.text:000000000040448e\n.text:0000000000404491\n.text:0000000000404498\n.text:000000000040449d\n.text:00000000004044a4\n.text:00000000004044a9\n.text:00000000004044b0\n.text:00000000004044b5\n.text:00000000004044bc\n.text:00000000004044c0\n.text:00000000004044c3\n.text:00000000004044c8\n.text:00000000004044cb\n.text:00000000004044cd\n.text:00000000004044d2\n.text:00000000004044d4\n.text:00000000004044d7\n.text:00000000004044da\n.text:00000000004044dd\n.text:00000000004044e2\n.text:00000000004044e6\n.text:00000000004044e7\n.text:00000000004044e9\n.text:00000000004044eb\n'
p90
tp91
sS'frame_dummy'
p92
(S'\n__stdcall frame_dummy()\n'
p93
V\u000a/* WARNING: Removing unreachable block (ram,0x004016ca) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p94
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x004016c0\nJMP 0x00401650\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016bb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401650\n'
p95
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p96
S'.text:00000000004016b0\n.text:00000000004016b5\n.text:00000000004016b9\n.text:00000000004016bb\n.text:00000000004016c0\n.text:00000000004016c5\n.text:00000000004016c8\n.text:00000000004016ca\n.text:00000000004016cb\n.text:00000000004016ce\n.text:00000000004016d0\n.text:00000000004016d1\n'
p97
tp98
sS'getegid'
p99
(S'\n__stdcall getegid()\n'
p100
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getegid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getegid_0060a150)();\u000a  return _Var1;\u000a}\u000a\u000a
p101
S'JMP qword ptr [0x0060a150]\n'
p102
S'ff 25 7a 8c 20 00\n'
p103
S'.plt:00000000004014d0\n'
p104
tp105
sS'quotearg_n_style_colon'
p106
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p107
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004043a0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403280\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404170\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:0000000000404520\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404524\n.text:0000000000404528\n.text:000000000040452b\n.text:000000000040452d\n.text:0000000000404532\n.text:0000000000404535\n.text:000000000040453a\n.text:000000000040453f\n.text:0000000000404544\n.text:0000000000404547\n.text:000000000040454c\n.text:0000000000404553\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455b\n.text:0000000000404560\n.text:0000000000404564\n.text:0000000000404565\n.text:0000000000404567\n.text:0000000000404568\n'
p111
tp112
sS'get_stat_birthtime_ns'
p113
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p114
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p115
S'XOR EAX,EAX\nRET\n'
p116
S'31 c0\nc3\n'
p117
S'.text:0000000000404aa0\n.text:0000000000404aa2\n'
p118
tp119
sS'quote_mem'
p120
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404630\n'
p123
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p124
S'.text:0000000000404640\n.text:0000000000404643\n.text:0000000000404646\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464e\n'
p125
tp126
sS'fileno'
p127
(S'\n__stdcall fileno(FILE * __stream)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a118)();\u000a  return iVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x0060a118]\n'
p130
S'ff 25 b2 8c 20 00\n'
p131
S'.plt:0000000000401460\n'
p132
tp133
sS'mbrtowc'
p134
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0060a0a8]\n'
p137
S'ff 25 22 8d 20 00\n'
p138
S'.plt:0000000000401380\n'
p139
tp140
sS'setlocale'
p141
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060a170]\n'
p144
S'ff 25 5a 8c 20 00\n'
p145
S'.plt:0000000000401510\n'
p146
tp147
sS'c_toupper'
p148
(S'\n__stdcall c_toupper()\n'
p149
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p151
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p152
S'.text:0000000000405930\n.text:0000000000405933\n.text:0000000000405936\n.text:0000000000405939\n.text:000000000040593c\n'
p153
tp154
sS'xvasprintf'
p155
(S'\n__stdcall xvasprintf(char * format, __va_list_tag * args)\n'
p156
V\u000achar * xvasprintf(char *format,__va_list_tag *args)\u000a\u000a{\u000a  int iVar1;\u000a  char *in_RAX;\u000a  char *pcVar2;\u000a  int *piVar3;\u000a  size_t argcount;\u000a  char *local_8;\u000a  \u000a  argcount = 0;\u000a  while (format[argcount * 2] == '%') {\u000a    if (format[argcount * 2 + 1] != 's') goto LAB_00405633;\u000a    argcount = argcount + 1;\u000a  }\u000a  if (format[argcount * 2] == 0) {\u000a    pcVar2 = xstrcat(argcount,args);\u000a    return pcVar2;\u000a  }\u000aLAB_00405633:\u000a  local_8 = in_RAX;\u000a  iVar1 = __vasprintf_chk(&local_8,1,format,args);\u000a  if (-1 < iVar1) {\u000a    return local_8;\u000a  }\u000a  piVar3 = __errno_location();\u000a  if (*piVar3 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p157
S'PUSH RAX\nMOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nJMP 0x00405613\nINC RDI\nMOVZX EDX,byte ptr [RCX + RDI*0x2]\nCMP DL,0x25\nJNZ 0x00405625\nCMP byte ptr [RCX + RDI*0x2 + 0x1],0x73\nJZ 0x00405610\nJMP 0x00405633\nTEST DL,DL\nJNZ 0x00405633\nMOV RSI,RAX\nCALL 0x00405670\nPOP RCX\nRET\nMOV RDI,RSP\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004014b0\nTEST EAX,EAX\nJS 0x00405650\nMOV RAX,qword ptr [RSP]\nPOP RCX\nRET\nCALL 0x00401290\nCMP dword ptr [RAX],0xc\nJZ 0x0040565e\nXOR EAX,EAX\nPOP RCX\nRET\nCALL 0x004055d0\n'
p158
S'50\n48 89 f0\n48 89 f9\n31 ff\neb 08\n48 ff c7\n0f b6 14 79\n80 fa 25\n75 09\n80 7c 79 01 73\n74 ed\neb 0e\n84 d2\n75 0a\n48 89 c6\ne8 3f 00 00 00\n59\nc3\n48 89 e7\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 6a be ff ff\n85 c0\n78 06\n48 8b 04 24\n59\nc3\ne8 3b bc ff ff\n83 38 0c\n74 04\n31 c0\n59\nc3\ne8 6d ff ff ff\n'
p159
S'.text:0000000000405600\n.text:0000000000405601\n.text:0000000000405604\n.text:0000000000405607\n.text:0000000000405609\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405617\n.text:000000000040561a\n.text:000000000040561c\n.text:0000000000405621\n.text:0000000000405623\n.text:0000000000405625\n.text:0000000000405627\n.text:0000000000405629\n.text:000000000040562c\n.text:0000000000405631\n.text:0000000000405632\n.text:0000000000405633\n.text:0000000000405636\n.text:000000000040563b\n.text:000000000040563e\n.text:0000000000405641\n.text:0000000000405646\n.text:0000000000405648\n.text:000000000040564a\n.text:000000000040564e\n.text:000000000040564f\n.text:0000000000405650\n.text:0000000000405655\n.text:0000000000405658\n.text:000000000040565a\n.text:000000000040565c\n.text:000000000040565d\n.text:000000000040565e\n'
p160
tp161
sS'mbsinit'
p162
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060a1c0]\n'
p165
S'ff 25 0a 8c 20 00\n'
p166
S'.plt:00000000004015b0\n'
p167
tp168
sS'dcgettext'
p169
(S'\n__stdcall dcgettext()\n'
p170
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a088)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060a088]\n'
p172
S'ff 25 42 8d 20 00\n'
p173
S'.plt:0000000000401340\n'
p174
tp175
sS'quotearg_free'
p176
(S'\n__stdcall quotearg_free()\n'
p177
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a1f8]\nCMP dword ptr [0x0060a200],0x2\nJC 0x0040410a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401270\nINC RBX\nMOV EAX,dword ptr [0x0060a200]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004040f0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a300\nCMP RDI,RAX\nJZ 0x00404133\nCALL 0x00401270\nMOV qword ptr [0x0060a208],0x100\nMOV qword ptr [0x0060a210],0x60a300\nMOV EAX,0x60a208\nCMP R14,RAX\nJZ 0x00404150\nMOV RDI,R14\nCALL 0x00401270\nMOV qword ptr [0x0060a1f8],0x60a208\nMOV dword ptr [0x0060a200],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n4c 8b 35 1c 61 20 00\n83 3d 1d 61 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 78 d1 ff ff\n48 ff c3\n8b 05 ff 60 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 00 a3 60 00\n48 39 c7\n74 1b\ne8 53 d1 ff ff\n48 c7 05 e0 60 20 00 00 01 00 00\n48 c7 05 dd 60 20 00 00 a3 60 00\nb8 08 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 2b d1 ff ff\n48 c7 05 a8 60 20 00 08 a2 60 00\nc7 05 a6 60 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:00000000004040d0\n.text:00000000004040d2\n.text:00000000004040d4\n.text:00000000004040d5\n.text:00000000004040dc\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040e9\n.text:00000000004040ee\n.text:00000000004040f0\n.text:00000000004040f3\n.text:00000000004040f8\n.text:00000000004040fb\n.text:0000000000404101\n.text:0000000000404105\n.text:0000000000404108\n.text:000000000040410a\n.text:000000000040410e\n.text:0000000000404113\n.text:0000000000404116\n.text:0000000000404118\n.text:000000000040411d\n.text:0000000000404128\n.text:0000000000404133\n.text:0000000000404138\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404140\n.text:0000000000404145\n.text:0000000000404150\n.text:000000000040415a\n.text:000000000040415b\n.text:000000000040415d\n.text:000000000040415f\n'
p181
tp182
sS'quotearg_mem'
p183
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p184
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404330\n'
p186
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p187
S'.text:0000000000404350\n.text:0000000000404353\n.text:0000000000404356\n.text:0000000000404358\n.text:000000000040435b\n.text:000000000040435e\n'
p188
tp189
sS'deregister_tm_clones'
p190
(S'\n__stdcall deregister_tm_clones()\n'
p191
V\u000a/* WARNING: Removing unreachable block (ram,0x00401625) */\u000a/* WARNING: Removing unreachable block (ram,0x0040162f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p192
S'MOV EAX,0x60a257\nPUSH RBP\nSUB RAX,0x60a250\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401640\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401640\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p193
S'b8 57 a2 60 00\n55\n48 2d 50 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p194
S'.text:0000000000401610\n.text:0000000000401615\n.text:0000000000401616\n.text:000000000040161c\n.text:0000000000401620\n.text:0000000000401623\n.text:0000000000401625\n.text:000000000040162a\n.text:000000000040162d\n.text:000000000040162f\n.text:0000000000401630\n.text:0000000000401635\n.text:0000000000401640\n.text:0000000000401641\n'
p195
tp196
sS'term'
p197
(S'\n__stdcall term()\n'
p198
V\u000a_Bool term(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long lVar2;\u000a  char *format;\u000a  char *pcVar3;\u000a  char *format_00;\u000a  byte bVar4;\u000a  undefined8 unaff_RBP;\u000a  int iVar5;\u000a  int iVar6;\u000a  \u000a  bVar4 = (byte)unaff_RBP;\u000a  if (pos < argc) {\u000a    bVar4 = 0;\u000a    do {\u000a      lVar2 = (long)pos;\u000a      if ((*argv[lVar2] != '!') || (argv[lVar2][1] != 0)) goto LAB_00402dd9;\u000a      advance(1);\u000a      bVar4 = bVar4 ^ 1;\u000a    } while (pos < argc);\u000a  }\u000a  lVar2 = beyond();\u000aLAB_00402dd9:\u000a  if ((*argv[lVar2] == '(') && (argv[lVar2][1] == 0)) {\u000a    advance();\u000a    iVar6 = pos + 1;\u000a    if (iVar6 < argc) {\u000a      iVar5 = 1;\u000a      do {\u000a        if (((*argv[(long)iVar6] == ')') && (argv[(long)iVar6][1] == 0)) || (iVar5 == 4)) break;\u000a        iVar6 = pos + 1 + iVar5;\u000a        iVar5 = iVar5 + 1;\u000a      } while (iVar6 < argc);\u000a    }\u000a    _Var1 = posixtest();\u000a    format_00 = argv[(long)pos];\u000a    if (format_00 == (char *)0x0) {\u000a      format = (char *)dcgettext(0,"%s expected",5);\u000a      format_00 = ")";\u000aLAB_00403015:\u000a      format_00 = quote(format_00);\u000a                    /* WARNING: Subroutine does not return */\u000a      test_syntax_error(format,format_00);\u000a    }\u000a    if ((*format_00 != ')') || (format_00[1] != 0)) {\u000a      format_00 = (char *)dcgettext(0,"%s expected, found %s",5);\u000a      format = quote_n((char *)0x0);\u000a      pcVar3 = quote_n((char *)0x1);\u000a                    /* WARNING: Subroutine does not return */\u000a      test_syntax_error(format_00,format,pcVar3,pcVar3);\u000a    }\u000a  }\u000a  else {\u000a    if ((((3 < argc - pos) &&\u000a         (((format_00 = argv[(long)pos], *format_00 == '-' && (format_00[1] == 'l')) &&\u000a          (format_00[2] == 0)))) && (_Var1 = binop(argv[(long)pos + 2]), _Var1 != false)) ||\u000a       ((2 < argc - pos && (_Var1 = binop(argv[(long)pos + 1]), _Var1 != false)))) {\u000a      _Var1 = binary_operator();\u000a      goto LAB_00402f70;\u000a    }\u000a    format_00 = argv[(long)pos];\u000a    if (((*format_00 == '-') && (format_00[1] != 0)) && (format_00[2] == 0)) {\u000a      _Var1 = test_unop(format_00);\u000a      if (_Var1 == false) {\u000a        format = (char *)dcgettext(0,"%s: unary operator expected",5);\u000a        format_00 = argv[(long)pos];\u000a        goto LAB_00403015;\u000a      }\u000a      _Var1 = unary_operator();\u000a      goto LAB_00402f70;\u000a    }\u000a    _Var1 = (_Bool)(*format_00 != 0);\u000a  }\u000a  advance(0);\u000aLAB_00402f70:\u000a  return (_Bool)((_Bool)(bVar4 & 1) != _Var1);\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EAX,dword ptr [0x0060a29c]\nCMP EAX,dword ptr [0x0060a298]\nJGE 0x00402dd4\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [0x0060a290]\nCDQE\nMOV RCX,qword ptr [RCX + RAX*0x8]\nCMP byte ptr [RCX],0x21\nJNZ 0x00402dd9\nCMP byte ptr [RCX + 0x1],0x0\nJNZ 0x00402dd9\nMOV EDI,0x1\nCALL 0x00401f90\nXOR BPL,0x1\nMOV EAX,dword ptr [0x0060a29c]\nCMP EAX,dword ptr [0x0060a298]\nJL 0x00402da0\nCALL 0x00402500\nMOV RCX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nCMP byte ptr [RAX],0x28\nJNZ 0x00402df3\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402eae\nMOV ECX,dword ptr [0x0060a298]\nMOVSXD RAX,dword ptr [0x0060a29c]\nSUB ECX,EAX\nCMP ECX,0x4\nJL 0x00402e46\nMOV RCX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402e46\nCMP byte ptr [RAX + 0x1],0x6c\nJNZ 0x00402e46\nCMP byte ptr [RAX + 0x2],0x0\nJNZ 0x00402e46\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + 0x10]\nCALL 0x00402660\nTEST AL,AL\nJZ 0x00402e46\nMOV EDI,0x1\nJMP 0x00402e71\nMOV ECX,dword ptr [0x0060a298]\nMOVSXD RAX,dword ptr [0x0060a29c]\nSUB ECX,EAX\nCMP ECX,0x3\nJL 0x00402e7e\nMOV RCX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RCX + RAX*0x8 + 0x8]\nCALL 0x00402660\nTEST AL,AL\nJZ 0x00402e7e\nXOR EDI,EDI\nCALL 0x004027c0\nMOVZX EBX,AL\nJMP 0x00402f70\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nMOV AL,byte ptr [RDI]\nCMP AL,0x2d\nJNZ 0x00402ea2\nCMP byte ptr [RDI + 0x1],0x0\nJZ 0x00402ea2\nCMP byte ptr [RDI + 0x2],0x0\nJZ 0x00402f16\nXOR EBX,EBX\nTEST AL,AL\nSETNZ BL\nJMP 0x00402f69\nMOV EBX,0x1\nMOV EDI,0x1\nCALL 0x00401f90\nMOV EDI,dword ptr [0x0060a29c]\nINC EDI\nCMP EDI,dword ptr [0x0060a298]\nJGE 0x00402f3d\nMOV RAX,qword ptr [0x0060a290]\nMOV ECX,dword ptr [0x0060a29c]\nMOV ESI,0x1\nMOV EDX,dword ptr [0x0060a298]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSXD RDI,EDI\nMOV RDI,qword ptr [RAX + RDI*0x8]\nCMP byte ptr [RDI],0x29\nJNZ 0x00402f02\nCMP byte ptr [RDI + 0x1],0x0\nJZ 0x00402f3b\nCMP ESI,0x4\nJZ 0x00402f2d\nLEA EBX,[RSI + 0x1]\nLEA EDI,[RCX + RSI*0x1 + 0x1]\nCMP EDI,EDX\nMOV ESI,EBX\nJL 0x00402ef0\nJMP 0x00402f3d\nCALL 0x00401fe0\nTEST AL,AL\nJZ 0x00402fef\nCALL 0x00402010\nMOVZX EBX,AL\nJMP 0x00402f70\nMOV EBX,dword ptr [0x0060a298]\nSUB EBX,dword ptr [0x0060a29c]\nJMP 0x00402f3d\nMOV EBX,ESI\nMOV EDI,EBX\nCALL 0x00401cb0\nMOV RCX,qword ptr [0x0060a290]\nMOVSXD RDX,dword ptr [0x0060a29c]\nMOV RCX,qword ptr [RCX + RDX*0x8]\nTEST RCX,RCX\nJZ 0x00402fd4\nCMP byte ptr [RCX],0x29\nJNZ 0x00402f82\nCMP byte ptr [RCX + 0x1],0x0\nJNZ 0x00402f82\nMOVZX EBX,AL\nXOR EDI,EDI\nCALL 0x00401f90\nAND BPL,0x1\nMOVZX EAX,BPL\nCMP EAX,EBX\nSETNZ AL\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407059\nMOV EDX,0x5\nCALL 0x00401340\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x4076ad\nCALL 0x00404650\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RSI,qword ptr [RAX + RCX*0x8]\nMOV EDI,0x1\nCALL 0x00404650\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x40704d\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV EDI,0x4076ad\nJMP 0x00403015\nXOR EDI,EDI\nMOV ESI,0x406f56\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\n'
p200
S'55\n41 56\n53\n8b 05 12 75 20 00\n3b 05 08 75 20 00\n7d 42\n31 ed\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 0d e9 74 20 00\n48 98\n48 8b 0c c1\n80 39 21\n75 27\n80 79 01 00\n75 21\nbf 01 00 00 00\ne8 ce f1 ff ff\n40 80 f5 01\n8b 05 d0 74 20 00\n3b 05 c6 74 20 00\n7c cc\ne8 27 f7 ff ff\n48 8b 0d b0 74 20 00\n48 8b 04 c1\n80 38 28\n75 0a\n80 78 01 00\n0f 84 bb 00 00 00\n8b 0d 9f 74 20 00\n48 63 05 9c 74 20 00\n29 c1\n83 f9 04\n7c 3f\n48 8b 0d 82 74 20 00\n48 8b 04 c1\n80 38 2d\n75 2f\n80 78 01 6c\n75 29\n80 78 02 00\n75 23\n48 8b 05 66 74 20 00\n48 63 0d 6b 74 20 00\n48 8b 7c c8 10\ne8 25 f8 ff ff\n84 c0\n74 07\nbf 01 00 00 00\neb 2b\n8b 0d 4c 74 20 00\n48 63 05 49 74 20 00\n29 c1\n83 f9 03\n7c 24\n48 8b 0d 2f 74 20 00\n48 8b 7c c1 08\ne8 f5 f7 ff ff\n84 c0\n74 0f\n31 ff\ne8 4a f9 ff ff\n0f b6 d8\ne9 f2 00 00 00\n48 8b 05 0b 74 20 00\n48 63 0d 10 74 20 00\n48 8b 3c c8\n8a 07\n3c 2d\n75 0c\n80 7f 01 00\n74 06\n80 7f 02 00\n74 74\n31 db\n84 c0\n0f 95 c3\ne9 bb 00 00 00\nbb 01 00 00 00\nbf 01 00 00 00\ne8 d3 f0 ff ff\n8b 3d d9 73 20 00\nff c7\n3b 3d cd 73 20 00\n7d 70\n48 8b 05 bc 73 20 00\n8b 0d c2 73 20 00\nbe 01 00 00 00\n8b 15 b3 73 20 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 63 ff\n48 8b 3c f8\n80 3f 29\n75 06\n80 7f 01 00\n74 39\n83 fe 04\n74 26\n8d 5e 01\n8d 7c 31 01\n39 d7\n89 de\n7c dc\neb 27\ne8 c5 f0 ff ff\n84 c0\n0f 84 cc 00 00 00\ne8 e8 f0 ff ff\n0f b6 d8\neb 43\n8b 1d 65 73 20 00\n2b 1d 63 73 20 00\neb 02\n89 f3\n89 df\ne8 6c ed ff ff\n48 8b 0d 45 73 20 00\n48 63 15 4a 73 20 00\n48 8b 0c d1\n48 85 c9\n74 79\n80 39 29\n75 22\n80 79 01 00\n75 1c\n0f b6 d8\n31 ff\ne8 20 f0 ff ff\n40 80 e5 01\n40 0f b6 c5\n39 d8\n0f 95 c0\n5b\n41 5e\n5d\nc3\n31 ff\nbe 59 70 40 00\nba 05 00 00 00\ne8 ad e3 ff ff\n49 89 c6\n31 ff\nbe ad 76 40 00\ne8 ae 16 00 00\n48 89 c3\n48 8b 05 e4 72 20 00\n48 63 0d e9 72 20 00\n48 8b 34 c8\nbf 01 00 00 00\ne8 8f 16 00 00\n48 89 c1\n31 c0\n4c 89 f7\n48 89 de\n48 89 ca\ne8 3c ec ff ff\n31 ff\nbe 4d 70 40 00\nba 05 00 00 00\ne8 5b e3 ff ff\n48 89 c3\nbf ad 76 40 00\neb 26\n31 ff\nbe 56 6f 40 00\nba 05 00 00 00\ne8 40 e3 ff ff\n48 89 c3\n48 8b 05 86 72 20 00\n48 63 0d 8b 72 20 00\n48 8b 3c c8\ne8 46 16 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 e6 eb ff ff\n'
p201
S'.text:0000000000402d80\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d84\n.text:0000000000402d8a\n.text:0000000000402d90\n.text:0000000000402d92\n.text:0000000000402d94\n.text:0000000000402da0\n.text:0000000000402da7\n.text:0000000000402da9\n.text:0000000000402dad\n.text:0000000000402db0\n.text:0000000000402db2\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dbd\n.text:0000000000402dc2\n.text:0000000000402dc6\n.text:0000000000402dcc\n.text:0000000000402dd2\n.text:0000000000402dd4\n.text:0000000000402dd9\n.text:0000000000402de0\n.text:0000000000402de4\n.text:0000000000402de7\n.text:0000000000402de9\n.text:0000000000402ded\n.text:0000000000402df3\n.text:0000000000402df9\n.text:0000000000402e00\n.text:0000000000402e02\n.text:0000000000402e05\n.text:0000000000402e07\n.text:0000000000402e0e\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e1b\n.text:0000000000402e1d\n.text:0000000000402e21\n.text:0000000000402e23\n.text:0000000000402e2a\n.text:0000000000402e31\n.text:0000000000402e36\n.text:0000000000402e3b\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e46\n.text:0000000000402e4c\n.text:0000000000402e53\n.text:0000000000402e55\n.text:0000000000402e58\n.text:0000000000402e5a\n.text:0000000000402e61\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e6d\n.text:0000000000402e6f\n.text:0000000000402e71\n.text:0000000000402e76\n.text:0000000000402e79\n.text:0000000000402e7e\n.text:0000000000402e85\n.text:0000000000402e8c\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e96\n.text:0000000000402e9a\n.text:0000000000402e9c\n.text:0000000000402ea0\n.text:0000000000402ea2\n.text:0000000000402ea4\n.text:0000000000402ea6\n.text:0000000000402ea9\n.text:0000000000402eae\n.text:0000000000402eb3\n.text:0000000000402eb8\n.text:0000000000402ebd\n.text:0000000000402ec3\n.text:0000000000402ec5\n.text:0000000000402ecb\n.text:0000000000402ecd\n.text:0000000000402ed4\n.text:0000000000402eda\n.text:0000000000402edf\n.text:0000000000402ee5\n.text:0000000000402ef0\n.text:0000000000402ef3\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efc\n.text:0000000000402f00\n.text:0000000000402f02\n.text:0000000000402f05\n.text:0000000000402f07\n.text:0000000000402f0a\n.text:0000000000402f0e\n.text:0000000000402f10\n.text:0000000000402f12\n.text:0000000000402f14\n.text:0000000000402f16\n.text:0000000000402f1b\n.text:0000000000402f1d\n.text:0000000000402f23\n.text:0000000000402f28\n.text:0000000000402f2b\n.text:0000000000402f2d\n.text:0000000000402f33\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f3d\n.text:0000000000402f3f\n.text:0000000000402f44\n.text:0000000000402f4b\n.text:0000000000402f52\n.text:0000000000402f56\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f60\n.text:0000000000402f64\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f6b\n.text:0000000000402f70\n.text:0000000000402f74\n.text:0000000000402f78\n.text:0000000000402f7a\n.text:0000000000402f7d\n.text:0000000000402f7e\n.text:0000000000402f80\n.text:0000000000402f81\n.text:0000000000402f82\n.text:0000000000402f84\n.text:0000000000402f89\n.text:0000000000402f8e\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f98\n.text:0000000000402f9d\n.text:0000000000402fa2\n.text:0000000000402fa5\n.text:0000000000402fac\n.text:0000000000402fb3\n.text:0000000000402fb7\n.text:0000000000402fbc\n.text:0000000000402fc1\n.text:0000000000402fc4\n.text:0000000000402fc6\n.text:0000000000402fc9\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd4\n.text:0000000000402fd6\n.text:0000000000402fdb\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe8\n.text:0000000000402fed\n.text:0000000000402fef\n.text:0000000000402ff1\n.text:0000000000402ff6\n.text:0000000000402ffb\n.text:0000000000403000\n.text:0000000000403003\n.text:000000000040300a\n.text:0000000000403011\n.text:0000000000403015\n.text:000000000040301a\n.text:000000000040301d\n.text:000000000040301f\n.text:0000000000403022\n.text:0000000000403025\n'
p202
tp203
sS'quotearg_custom'
p204
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p205
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404570\n'
p207
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p208
S'.text:00000000004045f0\n.text:00000000004045f3\n.text:00000000004045f6\n.text:00000000004045f9\n.text:00000000004045fb\n.text:00000000004045fe\n.text:0000000000404601\n.text:0000000000404604\n'
p209
tp210
sS'free'
p211
(S'\n__stdcall free(void * __ptr)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060a020)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060a020]\n'
p214
S'ff 25 aa 8d 20 00\n'
p215
S'.plt:0000000000401270\n'
p216
tp217
sS'close'
p218
(S'\n__stdcall close(int __fd)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060a0d8]\n'
p221
S'ff 25 f2 8c 20 00\n'
p222
S'.plt:00000000004013e0\n'
p223
tp224
sS'euidaccess'
p225
(S'\n__stdcall euidaccess(char * __name, int __type)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint euidaccess(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_euidaccess_0060a198)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060a198]\n'
p228
S'ff 25 32 8c 20 00\n'
p229
S'.plt:0000000000401560\n'
p230
tp231
sS'getenv'
p232
(S'\n__stdcall getenv(char * __name)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060a018]\n'
p235
S'ff 25 b2 8d 20 00\n'
p236
S'.plt:0000000000401260\n'
p237
tp238
sS'stat'
p239
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p240
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060a120)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401470\n'
p242
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 10 b5 ff ff\n'
p243
S'.text:0000000000405f50\n.text:0000000000405f53\n.text:0000000000405f56\n.text:0000000000405f5b\n'
p244
tp245
sS'rpl_fseeko'
p246
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p247
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a190)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405e58\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405e58\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00405e6a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401550\nMOV RDI,RBX\nCALL 0x00401460\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004013a0\nCMP RAX,-0x1\nJZ 0x00405e93\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405e98\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p249
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 e6 b6 ff ff\n48 89 df\ne8 ee b5 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 21 b5 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p250
S'.text:0000000000405e30\n.text:0000000000405e31\n.text:0000000000405e33\n.text:0000000000405e34\n.text:0000000000405e37\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e41\n.text:0000000000405e45\n.text:0000000000405e47\n.text:0000000000405e4b\n.text:0000000000405e4f\n.text:0000000000405e51\n.text:0000000000405e56\n.text:0000000000405e58\n.text:0000000000405e5b\n.text:0000000000405e5e\n.text:0000000000405e61\n.text:0000000000405e62\n.text:0000000000405e64\n.text:0000000000405e65\n.text:0000000000405e6a\n.text:0000000000405e6d\n.text:0000000000405e72\n.text:0000000000405e74\n.text:0000000000405e77\n.text:0000000000405e7a\n.text:0000000000405e7f\n.text:0000000000405e83\n.text:0000000000405e85\n.text:0000000000405e88\n.text:0000000000405e8f\n.text:0000000000405e91\n.text:0000000000405e93\n.text:0000000000405e98\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405e9c\n'
p251
tp252
sS'quote_n_mem'
p253
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p254
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV ECX,0x60a218\nJMP 0x00404170\n'
p256
S'b9 18 a2 60 00\ne9 36 fb ff ff\n'
p257
S'.text:0000000000404630\n.text:0000000000404635\n'
p258
tp259
sS'xstrdup'
p260
(S'\n__stdcall xstrdup(char * string)\n'
p261
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401360\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405580\n'
p263
S'53\n48 89 fb\ne8 a7 bd ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p264
S'.text:00000000004055b0\n.text:00000000004055b1\n.text:00000000004055b4\n.text:00000000004055b9\n.text:00000000004055bd\n.text:00000000004055c0\n.text:00000000004055c1\n'
p265
tp266
sS'c_ispunct'
p267
(S'\n__stdcall c_ispunct()\n'
p268
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p269
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004058c2\nMOV AL,0x1\nJMP qword ptr [0x4079c0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p270
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd c0 79 40 00\nc3\n31 c0\nc3\n'
p271
S'.text:00000000004058b0\n.text:00000000004058b3\n.text:00000000004058b6\n.text:00000000004058b8\n.text:00000000004058ba\n.text:00000000004058c1\n.text:00000000004058c2\n.text:00000000004058c4\n'
p272
tp273
sS'posixtest'
p274
(S'\n__stdcall posixtest()\n'
p275
V\u000a_Bool posixtest(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 1:\u000a    _Var1 = one_argument();\u000a    break;\u000a  case 2:\u000a    _Var1 = two_arguments();\u000a    break;\u000a  case 3:\u000a    _Var1 = three_arguments();\u000a    break;\u000a  case 4:\u000a    if ((*argv[(long)pos] == '!') && (argv[(long)pos][1] == 0)) {\u000a      advance(1);\u000a      _Var1 = three_arguments();\u000a      return (_Bool)(_Var1 ^ 1);\u000a    }\u000a    if ((((*argv[(long)pos] == '(') && (argv[(long)pos][1] == 0)) && (*argv[(long)pos + 3] == ')'))\u000a       && (argv[(long)pos + 3][1] == 0)) {\u000a      advance(0);\u000a      _Var1 = two_arguments();\u000a      advance(0);\u000a      return _Var1;\u000a    }\u000a    goto LAB_00401d4f;\u000a  default:\u000a    if (in_EDI < 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000aLAB_00401d4f:\u000a    _Var1 = expr();\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p276
S'PUSH RBX\nLEA EAX,[RDI + -0x1]\nCMP EAX,0x3\nJA 0x00401d4b\nJMP qword ptr [0x405f90 + RAX*0x8]\nCALL 0x00401d80\nJMP 0x00401d54\nCALL 0x00401db0\nJMP 0x00401d54\nCALL 0x00401e50\nJMP 0x00401d54\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RAX],0x21\nJNZ 0x00401cf9\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00401d5a\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RAX],0x28\nJNZ 0x00401d4f\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00401d4f\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + 0x18]\nCMP byte ptr [RAX],0x29\nJNZ 0x00401d4f\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00401d4f\nXOR EDI,EDI\nCALL 0x00401f90\nCALL 0x00401db0\nMOV EBX,EAX\nXOR EDI,EDI\nCALL 0x00401f90\nJMP 0x00401d56\nTEST EDI,EDI\nJLE 0x00401d70\nCALL 0x00401fc0\nMOV EBX,EAX\nMOV EAX,EBX\nPOP RBX\nRET\nMOV EDI,0x1\nCALL 0x00401f90\nCALL 0x00401e50\nMOV EBX,EAX\nXOR BL,0x1\nJMP 0x00401d56\nCALL 0x00401280\n'
p277
S'53\n8d 47 ff\n83 f8 03\n0f 87 8e 00 00 00\nff 24 c5 90 5f 40 00\ne8 b7 00 00 00\ne9 86 00 00 00\ne8 dd 00 00 00\neb 7f\ne8 76 01 00 00\neb 78\n48 8b 05 ad 85 20 00\n48 63 0d b2 85 20 00\n48 8b 04 c8\n80 38 21\n75 06\n80 78 01 00\n74 61\n48 8b 05 90 85 20 00\n48 63 0d 95 85 20 00\n48 8b 04 c8\n80 38 28\n75 3f\n80 78 01 00\n75 39\n48 8b 05 73 85 20 00\n48 63 0d 78 85 20 00\n48 8b 44 c8 18\n80 38 29\n75 21\n80 78 01 00\n75 1b\n31 ff\ne8 55 02 00 00\ne8 70 00 00 00\n89 c3\n31 ff\ne8 47 02 00 00\neb 0b\n85 ff\n7e 21\ne8 6c 02 00 00\n89 c3\n89 d8\n5b\nc3\nbf 01 00 00 00\ne8 2c 02 00 00\ne8 e7 00 00 00\n89 c3\n80 f3 01\neb e6\ne8 0b f5 ff ff\n'
p278
S'.text:0000000000401cb0\n.text:0000000000401cb1\n.text:0000000000401cb4\n.text:0000000000401cb7\n.text:0000000000401cbd\n.text:0000000000401cc4\n.text:0000000000401cc9\n.text:0000000000401cce\n.text:0000000000401cd3\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdc\n.text:0000000000401ce3\n.text:0000000000401cea\n.text:0000000000401cee\n.text:0000000000401cf1\n.text:0000000000401cf3\n.text:0000000000401cf7\n.text:0000000000401cf9\n.text:0000000000401d00\n.text:0000000000401d07\n.text:0000000000401d0b\n.text:0000000000401d0e\n.text:0000000000401d10\n.text:0000000000401d14\n.text:0000000000401d16\n.text:0000000000401d1d\n.text:0000000000401d24\n.text:0000000000401d29\n.text:0000000000401d2c\n.text:0000000000401d2e\n.text:0000000000401d32\n.text:0000000000401d34\n.text:0000000000401d36\n.text:0000000000401d3b\n.text:0000000000401d40\n.text:0000000000401d42\n.text:0000000000401d44\n.text:0000000000401d49\n.text:0000000000401d4b\n.text:0000000000401d4d\n.text:0000000000401d4f\n.text:0000000000401d54\n.text:0000000000401d56\n.text:0000000000401d58\n.text:0000000000401d59\n.text:0000000000401d5a\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d69\n.text:0000000000401d6b\n.text:0000000000401d6e\n.text:0000000000401d70\n'
p279
tp280
sS'test_unop'
p281
(S'\n__stdcall test_unop(char * op)\n'
p282
V\u000a_Bool test_unop(char *op)\u000a\u000a{\u000a  if ((*op == '-') && ((int)op[1] - 0x47U < 0x34)) {\u000a    return (_Bool)((byte)(0xb7b93fc0011a1 >> ((byte)((int)op[1] - 0x47U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p283
S'CMP byte ptr [RDI],0x2d\nJNZ 0x00402002\nMOVSX ECX,byte ptr [RDI + 0x1]\nADD ECX,-0x47\nCMP ECX,0x33\nJA 0x00402002\nMOV RAX,0xb7b93fc0011a1\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p284
S'80 3f 2d\n75 1d\n0f be 4f 01\n83 c1 b9\n83 f9 33\n77 11\n48 b8 a1 11 00 fc 93 7b 0b 00\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p285
S'.text:0000000000401fe0\n.text:0000000000401fe3\n.text:0000000000401fe5\n.text:0000000000401fe9\n.text:0000000000401fec\n.text:0000000000401fef\n.text:0000000000401ff1\n.text:0000000000401ffb\n.text:0000000000401ffe\n.text:0000000000402001\n.text:0000000000402002\n.text:0000000000402004\n'
p286
tp287
sS'fscanf'
p288
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x0060a0d0]\n'
p291
S'ff 25 fa 8c 20 00\n'
p292
S'.plt:00000000004013d0\n'
p293
tp294
sS'verror'
p295
(S'\n__stdcall verror(char * format, __va_list_tag * args)\n'
p296
V\u000avoid verror(char *format,__va_list_tag *args)\u000a\u000a{\u000a  verror_at_line(format,(char *)args,(__va_list_tag *)0x0);\u000a  return;\u000a}\u000a\u000a
p297
S'MOV R9,RCX\nMOV RAX,RDX\nXOR EDX,EDX\nXOR ECX,ECX\nMOV R8,RAX\nJMP 0x00404e80\n'
p298
S'49 89 c9\n48 89 d0\n31 d2\n31 c9\n49 89 c0\neb 01\n'
p299
S'.text:0000000000404e70\n.text:0000000000404e73\n.text:0000000000404e76\n.text:0000000000404e78\n.text:0000000000404e7a\n.text:0000000000404e7d\n'
p300
tp301
sS'memcpy'
p302
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060a110]\n'
p305
S'ff 25 ba 8c 20 00\n'
p306
S'.plt:0000000000401450\n'
p307
tp308
sS'close_stdout_set_ignore_EPIPE'
p309
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p310
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p311
S'MOV byte ptr [0x0060a2a8],DIL\nRET\n'
p312
S'40 88 3d 61 72 20 00\nc3\n'
p313
S'.text:0000000000403040\n.text:0000000000403047\n'
p314
tp315
sS'iswprint'
p316
(S'\n__stdcall iswprint(wint_t __wc)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060a1c8]\n'
p319
S'ff 25 02 8c 20 00\n'
p320
S'.plt:00000000004015c0\n'
p321
tp322
sS'unary_advance'
p323
(S'\n__stdcall unary_advance()\n'
p324
V\u000aundefined8 unary_advance(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  advance(1);\u000a  pos = pos + 1;\u000a  return in_RAX;\u000a}\u000a\u000a
p325
S'PUSH RAX\nMOV EDI,0x1\nCALL 0x00401f90\nINC dword ptr [0x0060a29c]\nPOP RAX\nRET\n'
p326
S'50\nbf 01 00 00 00\ne8 45 fa ff ff\nff 05 4b 7d 20 00\n58\nc3\n'
p327
S'.text:0000000000402540\n.text:0000000000402541\n.text:0000000000402546\n.text:000000000040254b\n.text:0000000000402551\n.text:0000000000402552\n'
p328
tp329
sS'c_isspace'
p330
(S'\n__stdcall c_isspace()\n'
p331
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p332
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004058e5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p333
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p334
S'.text:00000000004058d0\n.text:00000000004058d3\n.text:00000000004058d6\n.text:00000000004058d8\n.text:00000000004058dd\n.text:00000000004058df\n.text:00000000004058e1\n.text:00000000004058e4\n.text:00000000004058e5\n.text:00000000004058e7\n'
p335
tp336
sS'open'
p337
(S'\n__stdcall open(char * __file, int __oflag)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a188)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060a188]\n'
p340
S'ff 25 42 8c 20 00\n'
p341
S'.plt:0000000000401540\n'
p342
tp343
sS'quotearg_n_custom_mem'
p344
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a2f0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a2e0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2c0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004032e0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404170\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p347
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 57 5d 20 00\n48 89 44 24 30\n0f 10 05 3b 5d 20 00\n0f 29 44 24 20\n0f 10 05 1f 5d 20 00\n0f 29 44 24 10\n0f 10 05 03 5d 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p348
S'.text:0000000000404580\n.text:0000000000404581\n.text:0000000000404583\n.text:0000000000404585\n.text:0000000000404586\n.text:000000000040458a\n.text:000000000040458d\n.text:0000000000404590\n.text:0000000000404592\n.text:0000000000404599\n.text:000000000040459e\n.text:00000000004045a5\n.text:00000000004045aa\n.text:00000000004045b1\n.text:00000000004045b6\n.text:00000000004045bd\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045c7\n.text:00000000004045cc\n.text:00000000004045ce\n.text:00000000004045d1\n.text:00000000004045d4\n.text:00000000004045d7\n.text:00000000004045dc\n.text:00000000004045e0\n.text:00000000004045e1\n.text:00000000004045e3\n.text:00000000004045e5\n.text:00000000004045e6\n'
p349
tp350
sS'_init'
p351
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p352
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x0040124a\nCALL RAX\nADD RSP,0x8\nRET\n'
p354
S'48 83 ec 08\n48 8b 05 b5 8d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p355
S'.init:0000000000401238\n.init:000000000040123c\n.init:0000000000401243\n.init:0000000000401246\n.init:0000000000401248\n.init:000000000040124a\n.init:000000000040124e\n'
p356
tp357
sS'set_quoting_flags'
p358
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p359
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'TEST RDI,RDI\nMOV ECX,0x60a2c0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p361
S'48 85 ff\nb9 c0 a2 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p362
S'.text:00000000004032c0\n.text:00000000004032c3\n.text:00000000004032c8\n.text:00000000004032cc\n.text:00000000004032cf\n.text:00000000004032d2\n'
p363
tp364
sS'get_stat_birthtime'
p365
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p366
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p367
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p368
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p369
S'.text:0000000000404ae0\n.text:0000000000404ae7\n.text:0000000000404aee\n'
p370
tp371
sS'realloc'
p372
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060a160]\n'
p375
S'ff 25 6a 8c 20 00\n'
p376
S'.plt:00000000004014f0\n'
p377
tp378
sS'__fprintf_chk'
p379
(S'\n__stdcall __fprintf_chk()\n'
p380
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a1b8)();\u000a  return;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060a1b8]\n'
p382
S'ff 25 12 8c 20 00\n'
p383
S'.plt:00000000004015a0\n'
p384
tp385
sS'get_charset_aliases'
p386
(S'\n__stdcall get_charset_aliases()\n'
p387
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405c54_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405c54_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405c54_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405c54_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405c54_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405c54_caseD_9;\u000a      case -1:\u000a        goto switchD_00405c54_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00405cad:\u000a  __s = "";\u000aLAB_00405cb3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405c54_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405cb3;\u000a  }\u000a  goto LAB_00405cad;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a400]\nTEST R15,R15\nJNZ 0x00405cc2\nMOV EDI,0x407dec\nCALL 0x00401260\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405a78\nCMP byte ptr [RBX],0x0\nJNZ 0x00405a7d\nMOV EBX,0x407dfc\nMOV RDI,RBX\nCALL 0x00401360\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405a97\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405a99\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401480\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00405aed\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401450\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405af8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405b15\nMOV R15D,0x406245\nJMP 0x00405cbb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401540\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405cad\nMOV ESI,0x40707e\nMOV EDI,EBP\nCALL 0x00401500\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405c74\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405c40\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004012d0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004012d0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405c40\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004014c0\nMOV ESI,0x407e0b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004013d0\nCMP EAX,0x2\nJL 0x00405c94\nMOV RDI,R12\nCALL 0x00401360\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401360\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405c1d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004014f0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405b64\nJMP 0x00405c7d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401480\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405b64\nJMP 0x00405c7d\nMOV RDI,RBX\nCALL 0x004012f0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405ba7\nJMP qword ptr [0x407cb0 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004012f0\nCMP EAX,-0x1\nJZ 0x00405c94\nCMP EAX,0xa\nJNZ 0x00405c60\nJMP 0x00405c40\nMOV EDI,EBP\nCALL 0x004013e0\nJMP 0x00405cad\nMOV RDI,R15\nCALL 0x00401270\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405d60\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405cad\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405cb3\nMOV R15D,0x406245\nMOV RDI,R13\nCALL 0x00401270\nMOV qword ptr [0x0060a400],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p389
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d a8 49 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf ec 7d 40 00\ne8 f5 b7 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb fc 7d 40 00\n48 89 df\ne8 db b8 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 d9 b9 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 93 b9 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 45 62 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 1c ba ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 7e 70 40 00\n89 ef\ne8 c6 b9 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 4b b7 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 3b b7 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 0f b9 ff ff\nbe 0b 7e 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 0a b8 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 89 b7 ff ff\n49 89 c4\n48 89 ef\ne8 7e b7 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 e6 b8 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 55 b8 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 a8 b6 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd b0 7c 40 00\n48 89 df\ne8 88 b6 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 b7 ff ff\neb 30\n4c 89 ff\ne8 eb b5 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 c4 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 45 62 40 00\n4c 89 ef\ne8 b5 b5 ff ff\n4c 89 3d 3e 47 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p390
S'.text:0000000000405a40\n.text:0000000000405a41\n.text:0000000000405a43\n.text:0000000000405a45\n.text:0000000000405a47\n.text:0000000000405a49\n.text:0000000000405a4a\n.text:0000000000405a51\n.text:0000000000405a58\n.text:0000000000405a5b\n.text:0000000000405a61\n.text:0000000000405a66\n.text:0000000000405a6b\n.text:0000000000405a6e\n.text:0000000000405a71\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a78\n.text:0000000000405a7d\n.text:0000000000405a80\n.text:0000000000405a85\n.text:0000000000405a88\n.text:0000000000405a8b\n.text:0000000000405a8d\n.text:0000000000405a92\n.text:0000000000405a95\n.text:0000000000405a97\n.text:0000000000405a99\n.text:0000000000405a9d\n.text:0000000000405aa2\n.text:0000000000405aa7\n.text:0000000000405aaa\n.text:0000000000405aad\n.text:0000000000405aaf\n.text:0000000000405ab2\n.text:0000000000405ab5\n.text:0000000000405ab8\n.text:0000000000405abd\n.text:0000000000405ac0\n.text:0000000000405ac3\n.text:0000000000405ac6\n.text:0000000000405ac8\n.text:0000000000405ace\n.text:0000000000405ad8\n.text:0000000000405add\n.text:0000000000405ae7\n.text:0000000000405aeb\n.text:0000000000405aed\n.text:0000000000405af3\n.text:0000000000405af8\n.text:0000000000405b02\n.text:0000000000405b07\n.text:0000000000405b11\n.text:0000000000405b15\n.text:0000000000405b1a\n.text:0000000000405b1c\n.text:0000000000405b1f\n.text:0000000000405b24\n.text:0000000000405b26\n.text:0000000000405b28\n.text:0000000000405b2e\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b3a\n.text:0000000000405b3d\n.text:0000000000405b40\n.text:0000000000405b46\n.text:0000000000405b4b\n.text:0000000000405b50\n.text:0000000000405b52\n.text:0000000000405b57\n.text:0000000000405b5a\n.text:0000000000405b5f\n.text:0000000000405b64\n.text:0000000000405b69\n.text:0000000000405b6c\n.text:0000000000405b6f\n.text:0000000000405b72\n.text:0000000000405b75\n.text:0000000000405b78\n.text:0000000000405b7d\n.text:0000000000405b80\n.text:0000000000405b85\n.text:0000000000405b88\n.text:0000000000405b8d\n.text:0000000000405b90\n.text:0000000000405b95\n.text:0000000000405b9a\n.text:0000000000405b9d\n.text:0000000000405ba2\n.text:0000000000405ba7\n.text:0000000000405ba9\n.text:0000000000405bac\n.text:0000000000405bb1\n.text:0000000000405bb6\n.text:0000000000405bb8\n.text:0000000000405bbb\n.text:0000000000405bbe\n.text:0000000000405bc1\n.text:0000000000405bc6\n.text:0000000000405bc9\n.text:0000000000405bcf\n.text:0000000000405bd2\n.text:0000000000405bd7\n.text:0000000000405bda\n.text:0000000000405bdd\n.text:0000000000405be2\n.text:0000000000405be5\n.text:0000000000405bea\n.text:0000000000405bef\n.text:0000000000405bf2\n.text:0000000000405bf4\n.text:0000000000405bf8\n.text:0000000000405bfd\n.text:0000000000405c02\n.text:0000000000405c05\n.text:0000000000405c0a\n.text:0000000000405c0d\n.text:0000000000405c12\n.text:0000000000405c15\n.text:0000000000405c1b\n.text:0000000000405c1d\n.text:0000000000405c22\n.text:0000000000405c26\n.text:0000000000405c2b\n.text:0000000000405c2e\n.text:0000000000405c31\n.text:0000000000405c37\n.text:0000000000405c40\n.text:0000000000405c43\n.text:0000000000405c48\n.text:0000000000405c4b\n.text:0000000000405c4e\n.text:0000000000405c54\n.text:0000000000405c60\n.text:0000000000405c63\n.text:0000000000405c68\n.text:0000000000405c6b\n.text:0000000000405c6d\n.text:0000000000405c70\n.text:0000000000405c72\n.text:0000000000405c74\n.text:0000000000405c76\n.text:0000000000405c7b\n.text:0000000000405c7d\n.text:0000000000405c80\n.text:0000000000405c85\n.text:0000000000405c87\n.text:0000000000405c8c\n.text:0000000000405c8f\n.text:0000000000405c94\n.text:0000000000405c97\n.text:0000000000405c9c\n.text:0000000000405ca1\n.text:0000000000405ca4\n.text:0000000000405ca6\n.text:0000000000405cab\n.text:0000000000405cad\n.text:0000000000405cb3\n.text:0000000000405cb6\n.text:0000000000405cbb\n.text:0000000000405cc2\n.text:0000000000405cc5\n.text:0000000000405ccc\n.text:0000000000405ccd\n.text:0000000000405ccf\n.text:0000000000405cd1\n.text:0000000000405cd3\n.text:0000000000405cd5\n.text:0000000000405cd6\n'
p391
tp392
sS'nl_langinfo'
p393
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x0060a138]\n'
p396
S'ff 25 92 8c 20 00\n'
p397
S'.plt:00000000004014a0\n'
p398
tp399
sS'x2realloc'
p400
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p401
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'MOV EDX,0x1\nJMP 0x004054b0\n'
p403
S'ba 01 00 00 00\neb 89\n'
p404
S'.text:0000000000405520\n.text:0000000000405525\n'
p405
tp406
sS'strlen'
p407
(S'\n__stdcall strlen(char * __s)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a098)();\u000a  return sVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060a098]\n'
p410
S'ff 25 32 8d 20 00\n'
p411
S'.plt:0000000000401360\n'
p412
tp413
sS'memcmp'
p414
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060a0e0]\n'
p417
S'ff 25 ea 8c 20 00\n'
p418
S'.plt:00000000004013f0\n'
p419
tp420
sS'get_mtime'
p421
(S'\n__stdcall get_mtime(char * filename, timespec * mtime)\n'
p422
V\u000a_Bool get_mtime(char *filename,timespec *mtime)\u000a\u000a{\u000a  int iVar1;\u000a  timespec tVar2;\u000a  stat local_a0;\u000a  \u000a  iVar1 = stat(filename,(stat *)&local_a0);\u000a  if (iVar1 == 0) {\u000a    tVar2 = get_stat_mtime(&local_a0);\u000a    mtime->tv_sec = SUB168((undefined  [16])tVar2,0);\u000a    mtime->tv_nsec = SUB168((undefined  [16])tVar2 >> 0x40,0);\u000a  }\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RSI\nLEA RSI,[RSP + 0x8]\nCALL 0x00405f50\nMOV EBP,EAX\nTEST EBP,EBP\nJNZ 0x00402c8d\nLEA RDI,[RSP + 0x8]\nCALL 0x00404ad0\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RBX + 0x8],RDX\nTEST EBP,EBP\nSETZ AL\nADD RSP,0x98\nPOP RBX\nPOP RBP\nRET\n'
p424
S'55\n53\n48 81 ec 98 00 00 00\n48 89 f3\n48 8d 74 24 08\ne8 da 32 00 00\n89 c5\n85 ed\n75 11\n48 8d 7c 24 08\ne8 4a 1e 00 00\n48 89 03\n48 89 53 08\n85 ed\n0f 94 c0\n48 81 c4 98 00 00 00\n5b\n5d\nc3\n'
p425
S'.text:0000000000402c60\n.text:0000000000402c61\n.text:0000000000402c62\n.text:0000000000402c69\n.text:0000000000402c6c\n.text:0000000000402c71\n.text:0000000000402c76\n.text:0000000000402c78\n.text:0000000000402c7a\n.text:0000000000402c7c\n.text:0000000000402c81\n.text:0000000000402c86\n.text:0000000000402c89\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c99\n.text:0000000000402c9a\n.text:0000000000402c9b\n'
p426
tp427
sS'quotearg_n_style_mem'
p428
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p429
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004043a0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404170\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p431
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p432
S'.text:0000000000404400\n.text:0000000000404401\n.text:0000000000404403\n.text:0000000000404405\n.text:0000000000404406\n.text:000000000040440a\n.text:000000000040440d\n.text:0000000000404410\n.text:0000000000404412\n.text:0000000000404415\n.text:0000000000404418\n.text:000000000040441d\n.text:000000000040441f\n.text:0000000000404422\n.text:0000000000404425\n.text:0000000000404428\n.text:000000000040442d\n.text:0000000000404431\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404436\n.text:0000000000404437\n'
p433
tp434
sS'_exit'
p435
(S'\n__stdcall _exit(int __status)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a048)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060a048]\n'
p438
S'ff 25 82 8d 20 00\n'
p439
S'.plt:00000000004012c0\n'
p440
tp441
sS'xrealloc'
p442
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p443
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405497\nTEST RBX,RBX\nJNZ 0x00405497\nCALL 0x00401270\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004014f0\nTEST RBX,RBX\nJZ 0x004054a9\nTEST RAX,RAX\nJZ 0x004054ab\nPOP RBX\nRET\nCALL 0x004055d0\n'
p445
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 dd bd ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 51 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p446
S'.text:0000000000405480\n.text:0000000000405481\n.text:0000000000405484\n.text:0000000000405487\n.text:0000000000405489\n.text:000000000040548c\n.text:000000000040548e\n.text:0000000000405493\n.text:0000000000405495\n.text:0000000000405496\n.text:0000000000405497\n.text:000000000040549a\n.text:000000000040549f\n.text:00000000004054a2\n.text:00000000004054a4\n.text:00000000004054a7\n.text:00000000004054a9\n.text:00000000004054aa\n.text:00000000004054ab\n'
p447
tp448
sS'unary_operator'
p449
(S'\n__stdcall unary_operator()\n'
p450
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool unary_operator(void)\u000a\u000a{\u000a  int __type;\u000a  __gid_t _Var1;\u000a  __uid_t _Var2;\u000a  char *__nptr;\u000a  int *piVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  undefined auStack168 [24];\u000a  undefined4 local_90;\u000a  __uid_t local_8c;\u000a  __gid_t local_88;\u000a  long local_78;\u000a  \u000a  bVar5 = false;\u000a  switch(argv[(long)pos][1]) {\u000a  case 'G':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0;\u000a      _Var1 = getegid();\u000a      if ((_Var1 == 0xffffffff) && (*piVar3 != 0)) {\u000a        bVar5 = false;\u000a      }\u000a      else {\u000a        bVar5 = _Var1 == local_88;\u000a      }\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'L':\u000a  case 'h':\u000a    unary_advance();\u000a    __type = lstat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0xa000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'O':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0;\u000a      _Var2 = geteuid();\u000a      if ((_Var2 == 0xffffffff) && (*piVar3 != 0)) {\u000a        bVar5 = false;\u000a      }\u000a      else {\u000a        bVar5 = _Var2 == local_8c;\u000a      }\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'S':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0xc000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'a':\u000a  case 'e':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    bVar5 = __type == 0;\u000a    break;\u000a  case 'b':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0x6000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'c':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0x2000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'd':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0x4000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'f':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0x8000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'g':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (bool)((local_90._1_1_ & 4) >> 2);\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'k':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (bool)((local_90._1_1_ & 2) >> 1);\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'n':\u000a    unary_advance();\u000a    bVar5 = *argv[(long)pos + -1] != 0;\u000a    break;\u000a  case 'p':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (local_90 & 0xf000) == 0x1000;\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'r':\u000a    unary_advance();\u000a    __nptr = argv[(long)pos + -1];\u000a    __type = 4;\u000a    goto LAB_004023bf;\u000a  case 's':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    bVar5 = 0 < local_78 && __type == 0;\u000a    break;\u000a  case 't':\u000a    unary_advance();\u000a    __nptr = find_int(argv[(long)pos + -1]);\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a    bVar5 = false;\u000a    uVar4 = strtol(__nptr,(char **)0x0,10);\u000a    if ((uVar4 < 0x80000000) && (*piVar3 != 0x22)) {\u000a      __type = isatty((int)uVar4);\u000a      bVar5 = __type != 0;\u000a    }\u000a    break;\u000a  case 'u':\u000a    unary_advance();\u000a    __type = stat(argv[(long)pos + -1],(stat *)auStack168);\u000a    if (__type == 0) {\u000a      bVar5 = (bool)((local_90._1_1_ & 8) >> 3);\u000a    }\u000a    else {\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case 'w':\u000a    unary_advance();\u000a    __nptr = argv[(long)pos + -1];\u000a    __type = 2;\u000a    goto LAB_004023bf;\u000a  case 'x':\u000a    unary_advance();\u000a    __nptr = argv[(long)pos + -1];\u000a    __type = 1;\u000aLAB_004023bf:\u000a    __type = euidaccess(__nptr,__type);\u000a    bVar5 = __type == 0;\u000a    break;\u000a  case 'z':\u000a    unary_advance();\u000a    bVar5 = *argv[(long)pos + -1] == 0;\u000a  }\u000a  return (_Bool)bVar5;\u000a}\u000a\u000a
p451
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x90\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8]\nMOVSX EAX,byte ptr [RAX + 0x1]\nXOR EBX,EBX\nADD EAX,-0x47\nCMP EAX,0x33\nJA 0x004024bd\nJMP qword ptr [0x405fb0 + RAX*0x8]\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f60\nTEST EAX,EAX\nJZ 0x004023eb\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJMP 0x004024ba\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x004023fe\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402423\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402445\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402455\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402465\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402475\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402485\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402495\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x004024a1\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + -0x8]\nCMP byte ptr [RAX],0x0\nSETNZ BL\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x004024ac\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV ESI,0x4\nJMP 0x004023bf\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nSETZ AL\nCMP qword ptr [RSP + 0x30],0x0\nSETG BL\nAND BL,AL\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nCALL 0x00402560\nMOV R15,RAX\nCALL 0x00401290\nMOV R14,RAX\nMOV dword ptr [R14],0x0\nXOR EBX,EBX\nXOR ESI,ESI\nMOV EDX,0xa\nMOV RDI,R15\nCALL 0x00401440\nCMP RAX,0x7fffffff\nJA 0x004024bd\nCMP dword ptr [R14],0x22\nJZ 0x004024bd\nMOV EDI,EAX\nCALL 0x00401300\nTEST EAX,EAX\nSETNZ BL\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x004024cc\nXOR EBX,EBX\nJMP 0x004024bd\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV ESI,0x2\nJMP 0x004023bf\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nMOV ESI,0x1\nCALL 0x00401560\nTEST EAX,EAX\nJMP 0x004024ba\nCALL 0x00402540\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + -0x8]\nCMP byte ptr [RAX],0x0\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0xa000\nJMP 0x004024ba\nCALL 0x00401290\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nCALL 0x004014d0\nCMP EAX,-0x1\nJZ 0x004024d8\nCMP EAX,dword ptr [RSP + 0x20]\nJMP 0x004024ba\nCALL 0x00401290\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nCALL 0x004013c0\nCMP EAX,-0x1\nJZ 0x004024e5\nCMP EAX,dword ptr [RSP + 0x1c]\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0xc000\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x6000\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x2000\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x4000\nJMP 0x004024ba\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x8000\nJMP 0x004024ba\nMOV BL,byte ptr [RSP + 0x19]\nAND BL,0x4\nSHR BL,0x2\nJMP 0x004024bd\nMOV BL,byte ptr [RSP + 0x19]\nAND BL,0x2\nSHR BL,1\nJMP 0x004024bd\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nCMP EAX,0x1000\nSETZ BL\nMOV EAX,EBX\nADD RSP,0x90\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV BL,byte ptr [RSP + 0x19]\nAND BL,0x8\nSHR BL,0x3\nJMP 0x004024bd\nCMP dword ptr [RBX],0x0\nJZ 0x0040241a\nXOR EBX,EBX\nJMP 0x004024bd\nCMP dword ptr [RBX],0x0\nJZ 0x0040243f\nXOR EBX,EBX\nJMP 0x004024bd\n'
p452
S'41 57\n41 56\n53\n48 81 ec 90 00 00 00\n48 8b 05 6d 82 20 00\n48 63 0d 72 82 20 00\n48 8b 04 c8\n0f be 40 01\n31 db\n83 c0 b9\n83 f8 33\n0f 87 7d 04 00 00\nff 24 c5 b0 5f 40 00\ne8 f4 04 00 00\n48 8b 05 3d 82 20 00\n48 63 0d 42 82 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 f9 3e 00 00\n85 c0\n0f 84 7c 03 00 00\n31 db\ne9 47 04 00 00\ne8 c5 04 00 00\n48 8b 05 0e 82 20 00\n48 63 0d 13 82 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 ba 3e 00 00\n85 c0\ne9 1d 04 00 00\ne8 9e 04 00 00\n48 8b 05 e7 81 20 00\n48 63 0d ec 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 93 3e 00 00\n85 c0\n0f 84 39 03 00 00\n31 db\ne9 f1 03 00 00\ne8 6f 04 00 00\n48 8b 05 b8 81 20 00\n48 63 0d bd 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 64 3e 00 00\n85 c0\n0f 84 2f 03 00 00\n31 db\ne9 c2 03 00 00\ne8 40 04 00 00\n48 8b 05 89 81 20 00\n48 63 0d 8e 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 35 3e 00 00\n85 c0\n0f 84 22 03 00 00\n31 db\ne9 93 03 00 00\ne8 11 04 00 00\n48 8b 05 5a 81 20 00\n48 63 0d 5f 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 06 3e 00 00\n85 c0\n0f 84 03 03 00 00\n31 db\ne9 64 03 00 00\ne8 e2 03 00 00\n48 8b 05 2b 81 20 00\n48 63 0d 30 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 d7 3d 00 00\n85 c0\n0f 84 e4 02 00 00\n31 db\ne9 35 03 00 00\ne8 b3 03 00 00\n48 8b 05 fc 80 20 00\n48 63 0d 01 81 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 a8 3d 00 00\n85 c0\n0f 84 c5 02 00 00\n31 db\ne9 06 03 00 00\ne8 84 03 00 00\n48 8b 05 cd 80 20 00\n48 63 0d d2 80 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 79 3d 00 00\n85 c0\n0f 84 a6 02 00 00\n31 db\ne9 d7 02 00 00\ne8 55 03 00 00\n48 8b 05 9e 80 20 00\n48 63 0d a3 80 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 4a 3d 00 00\n85 c0\n0f 84 87 02 00 00\n31 db\ne9 a8 02 00 00\ne8 26 03 00 00\n48 8b 05 6f 80 20 00\n48 63 0d 74 80 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 1b 3d 00 00\n85 c0\n0f 84 64 02 00 00\n31 db\ne9 79 02 00 00\ne8 f7 02 00 00\n48 8b 05 40 80 20 00\n48 63 0d 45 80 20 00\n48 8b 44 c8 f8\n80 38 00\n0f 95 c3\ne9 56 02 00 00\ne8 d4 02 00 00\n48 8b 05 1d 80 20 00\n48 63 0d 22 80 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 c9 3c 00 00\n85 c0\n0f 84 1d 02 00 00\n31 db\ne9 27 02 00 00\ne8 a5 02 00 00\n48 8b 05 ee 7f 20 00\n48 63 0d f3 7f 20 00\n48 8b 7c c8 f8\nbe 04 00 00 00\ne9 07 01 00 00\ne8 83 02 00 00\n48 8b 05 cc 7f 20 00\n48 63 0d d1 7f 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 78 3c 00 00\n85 c0\n0f 94 c0\n48 83 7c 24 30 00\n0f 9f c3\n20 c3\ne9 d0 01 00 00\ne8 4e 02 00 00\n48 8b 05 97 7f 20 00\n48 63 0d 9c 7f 20 00\n48 8b 7c c8 f8\ne8 56 02 00 00\n49 89 c7\ne8 7e ef ff ff\n49 89 c6\n41 c7 06 00 00 00 00\n31 db\n31 f6\nba 0a 00 00 00\n4c 89 ff\ne8 13 f1 ff ff\n48 3d ff ff ff 7f\n0f 87 84 01 00 00\n41 83 3e 22\n0f 84 7a 01 00 00\n89 c7\ne8 b6 ef ff ff\n85 c0\n0f 95 c3\ne9 69 01 00 00\ne8 e7 01 00 00\n48 8b 05 30 7f 20 00\n48 63 0d 35 7f 20 00\n48 8b 7c c8 f8\n48 89 e6\ne8 dc 3b 00 00\n85 c0\n0f 84 50 01 00 00\n31 db\ne9 3a 01 00 00\ne8 b8 01 00 00\n48 8b 05 01 7f 20 00\n48 63 0d 06 7f 20 00\n48 8b 7c c8 f8\nbe 02 00 00 00\neb 1d\ne8 99 01 00 00\n48 8b 05 e2 7e 20 00\n48 63 0d e7 7e 20 00\n48 8b 7c c8 f8\nbe 01 00 00 00\ne8 9c f1 ff ff\n85 c0\ne9 ef 00 00 00\ne8 70 01 00 00\n48 8b 05 b9 7e 20 00\n48 63 0d be 7e 20 00\n48 8b 44 c8 f8\n80 38 00\ne9 cf 00 00 00\nb8 00 f0 00 00\n23 44 24 18\n3d 00 a0 00 00\ne9 bc 00 00 00\ne8 8d ee ff ff\n48 89 c3\nc7 03 00 00 00 00\ne8 bf f0 ff ff\n83 f8 ff\n0f 84 be 00 00 00\n3b 44 24 20\ne9 97 00 00 00\ne8 68 ee ff ff\n48 89 c3\nc7 03 00 00 00 00\ne8 8a ef ff ff\n83 f8 ff\n0f 84 a6 00 00 00\n3b 44 24 1c\neb 75\nb8 00 f0 00 00\n23 44 24 18\n3d 00 c0 00 00\neb 65\nb8 00 f0 00 00\n23 44 24 18\n3d 00 60 00 00\neb 55\nb8 00 f0 00 00\n23 44 24 18\n3d 00 20 00 00\neb 45\nb8 00 f0 00 00\n23 44 24 18\n3d 00 40 00 00\neb 35\nb8 00 f0 00 00\n23 44 24 18\n3d 00 80 00 00\neb 25\n8a 5c 24 19\n80 e3 04\nc0 eb 02\neb 1c\n8a 5c 24 19\n80 e3 02\nd0 eb\neb 11\nb8 00 f0 00 00\n23 44 24 18\n3d 00 10 00 00\n0f 94 c3\n89 d8\n48 81 c4 90 00 00 00\n5b\n41 5e\n41 5f\nc3\n8a 5c 24 19\n80 e3 08\nc0 eb 03\neb e5\n83 3b 00\n0f 84 39 ff ff ff\n31 db\neb d8\n83 3b 00\n0f 84 51 ff ff ff\n31 db\neb cb\n'
p453
S'.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402014\n.text:0000000000402015\n.text:000000000040201c\n.text:0000000000402023\n.text:000000000040202a\n.text:000000000040202e\n.text:0000000000402032\n.text:0000000000402034\n.text:0000000000402037\n.text:000000000040203a\n.text:0000000000402040\n.text:0000000000402047\n.text:000000000040204c\n.text:0000000000402053\n.text:000000000040205a\n.text:000000000040205f\n.text:0000000000402062\n.text:0000000000402067\n.text:0000000000402069\n.text:000000000040206f\n.text:0000000000402071\n.text:0000000000402076\n.text:000000000040207b\n.text:0000000000402082\n.text:0000000000402089\n.text:000000000040208e\n.text:0000000000402091\n.text:0000000000402096\n.text:0000000000402098\n.text:000000000040209d\n.text:00000000004020a2\n.text:00000000004020a9\n.text:00000000004020b0\n.text:00000000004020b5\n.text:00000000004020b8\n.text:00000000004020bd\n.text:00000000004020bf\n.text:00000000004020c5\n.text:00000000004020c7\n.text:00000000004020cc\n.text:00000000004020d1\n.text:00000000004020d8\n.text:00000000004020df\n.text:00000000004020e4\n.text:00000000004020e7\n.text:00000000004020ec\n.text:00000000004020ee\n.text:00000000004020f4\n.text:00000000004020f6\n.text:00000000004020fb\n.text:0000000000402100\n.text:0000000000402107\n.text:000000000040210e\n.text:0000000000402113\n.text:0000000000402116\n.text:000000000040211b\n.text:000000000040211d\n.text:0000000000402123\n.text:0000000000402125\n.text:000000000040212a\n.text:000000000040212f\n.text:0000000000402136\n.text:000000000040213d\n.text:0000000000402142\n.text:0000000000402145\n.text:000000000040214a\n.text:000000000040214c\n.text:0000000000402152\n.text:0000000000402154\n.text:0000000000402159\n.text:000000000040215e\n.text:0000000000402165\n.text:000000000040216c\n.text:0000000000402171\n.text:0000000000402174\n.text:0000000000402179\n.text:000000000040217b\n.text:0000000000402181\n.text:0000000000402183\n.text:0000000000402188\n.text:000000000040218d\n.text:0000000000402194\n.text:000000000040219b\n.text:00000000004021a0\n.text:00000000004021a3\n.text:00000000004021a8\n.text:00000000004021aa\n.text:00000000004021b0\n.text:00000000004021b2\n.text:00000000004021b7\n.text:00000000004021bc\n.text:00000000004021c3\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d2\n.text:00000000004021d7\n.text:00000000004021d9\n.text:00000000004021df\n.text:00000000004021e1\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021f2\n.text:00000000004021f9\n.text:00000000004021fe\n.text:0000000000402201\n.text:0000000000402206\n.text:0000000000402208\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402215\n.text:000000000040221a\n.text:0000000000402221\n.text:0000000000402228\n.text:000000000040222d\n.text:0000000000402230\n.text:0000000000402235\n.text:0000000000402237\n.text:000000000040223d\n.text:000000000040223f\n.text:0000000000402244\n.text:0000000000402249\n.text:0000000000402250\n.text:0000000000402257\n.text:000000000040225c\n.text:000000000040225f\n.text:0000000000402262\n.text:0000000000402267\n.text:000000000040226c\n.text:0000000000402273\n.text:000000000040227a\n.text:000000000040227f\n.text:0000000000402282\n.text:0000000000402287\n.text:0000000000402289\n.text:000000000040228f\n.text:0000000000402291\n.text:0000000000402296\n.text:000000000040229b\n.text:00000000004022a2\n.text:00000000004022a9\n.text:00000000004022ae\n.text:00000000004022b3\n.text:00000000004022b8\n.text:00000000004022bd\n.text:00000000004022c4\n.text:00000000004022cb\n.text:00000000004022d0\n.text:00000000004022d3\n.text:00000000004022d8\n.text:00000000004022da\n.text:00000000004022dd\n.text:00000000004022e3\n.text:00000000004022e6\n.text:00000000004022e8\n.text:00000000004022ed\n.text:00000000004022f2\n.text:00000000004022f9\n.text:0000000000402300\n.text:0000000000402305\n.text:000000000040230a\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402315\n.text:000000000040231c\n.text:000000000040231e\n.text:0000000000402320\n.text:0000000000402325\n.text:0000000000402328\n.text:000000000040232d\n.text:0000000000402333\n.text:0000000000402339\n.text:000000000040233d\n.text:0000000000402343\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234c\n.text:000000000040234f\n.text:0000000000402354\n.text:0000000000402359\n.text:0000000000402360\n.text:0000000000402367\n.text:000000000040236c\n.text:000000000040236f\n.text:0000000000402374\n.text:0000000000402376\n.text:000000000040237c\n.text:000000000040237e\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238f\n.text:0000000000402396\n.text:000000000040239b\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023ae\n.text:00000000004023b5\n.text:00000000004023ba\n.text:00000000004023bf\n.text:00000000004023c4\n.text:00000000004023c6\n.text:00000000004023cb\n.text:00000000004023d0\n.text:00000000004023d7\n.text:00000000004023de\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023eb\n.text:00000000004023f0\n.text:00000000004023f4\n.text:00000000004023f9\n.text:00000000004023fe\n.text:0000000000402403\n.text:0000000000402406\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402414\n.text:000000000040241a\n.text:000000000040241e\n.text:0000000000402423\n.text:0000000000402428\n.text:000000000040242b\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243f\n.text:0000000000402443\n.text:0000000000402445\n.text:000000000040244a\n.text:000000000040244e\n.text:0000000000402453\n.text:0000000000402455\n.text:000000000040245a\n.text:000000000040245e\n.text:0000000000402463\n.text:0000000000402465\n.text:000000000040246a\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402475\n.text:000000000040247a\n.text:000000000040247e\n.text:0000000000402483\n.text:0000000000402485\n.text:000000000040248a\n.text:000000000040248e\n.text:0000000000402493\n.text:0000000000402495\n.text:0000000000402499\n.text:000000000040249c\n.text:000000000040249f\n.text:00000000004024a1\n.text:00000000004024a5\n.text:00000000004024a8\n.text:00000000004024aa\n.text:00000000004024ac\n.text:00000000004024b1\n.text:00000000004024b5\n.text:00000000004024ba\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c6\n.text:00000000004024c7\n.text:00000000004024c9\n.text:00000000004024cb\n.text:00000000004024cc\n.text:00000000004024d0\n.text:00000000004024d3\n.text:00000000004024d6\n.text:00000000004024d8\n.text:00000000004024db\n.text:00000000004024e1\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024e8\n.text:00000000004024ee\n.text:00000000004024f0\n'
p454
tp455
sS'close_stdout'
p456
(S'\n__stdcall close_stdout()\n'
p457
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403077;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x407084,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403077:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a268]\nCALL 0x00405940\nTEST EAX,EAX\nJZ 0x00403077\nCMP byte ptr [0x0060a2a8],0x0\nJZ 0x0040308c\nCALL 0x00401290\nCMP dword ptr [RAX],0x20\nJNZ 0x0040308c\nMOV RDI,qword ptr [0x0060a280]\nCALL 0x00405940\nTEST EAX,EAX\nJNZ 0x004030d1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407074\nMOV EDX,0x5\nCALL 0x00401340\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a2a0]\nCALL 0x00401290\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004030dc\nXOR EDI,EDI\nMOV EDX,0x407084\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401530\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012c0\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012c0\nMOV RDI,RBX\nCALL 0x00404500\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x407080\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401530\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012c0\n'
p459
S'55\n41 56\n53\n48 8b 3d 0d 72 20 00\ne8 e0 28 00 00\n85 c0\n74 13\n80 3d 3d 72 20 00 00\n74 1f\ne8 1e e2 ff ff\n83 38 20\n75 15\n48 8b 3d 02 72 20 00\ne8 bd 28 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 74 70 40 00\nba 05 00 00 00\ne8 a3 e2 ff ff\n49 89 c6\n48 8b 1d f9 71 20 00\ne8 e4 e1 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 84 70 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 6a e4 ff ff\n8b 3d 24 71 20 00\ne8 ef e1 ff ff\n8b 3d 19 71 20 00\ne8 e4 e1 ff ff\n48 89 df\ne8 1c 14 00 00\n48 89 c1\n31 ff\nba 80 70 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 36 e4 ff ff\n8b 3d f0 70 20 00\ne8 bb e1 ff ff\n'
p460
S'.text:0000000000403050\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403054\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403062\n.text:0000000000403064\n.text:000000000040306b\n.text:000000000040306d\n.text:0000000000403072\n.text:0000000000403075\n.text:0000000000403077\n.text:000000000040307e\n.text:0000000000403083\n.text:0000000000403085\n.text:0000000000403087\n.text:0000000000403088\n.text:000000000040308a\n.text:000000000040308b\n.text:000000000040308c\n.text:000000000040308e\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a0\n.text:00000000004030a7\n.text:00000000004030ac\n.text:00000000004030af\n.text:00000000004030b1\n.text:00000000004030b3\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030be\n.text:00000000004030c1\n.text:00000000004030c6\n.text:00000000004030cc\n.text:00000000004030d1\n.text:00000000004030d7\n.text:00000000004030dc\n.text:00000000004030df\n.text:00000000004030e4\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030ee\n.text:00000000004030f0\n.text:00000000004030f2\n.text:00000000004030f5\n.text:00000000004030fa\n.text:0000000000403100\n'
p461
tp462
sS'version_etc_ar'
p463
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p464
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p465
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405290\nJMP 0x00404f20\n'
p466
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p467
S'.text:0000000000405280\n.text:0000000000405287\n.text:0000000000405290\n.text:0000000000405296\n.text:000000000040529a\n.text:000000000040529c\n'
p468
tp469
sS'c_isxdigit'
p470
(S'\n__stdcall c_isxdigit()\n'
p471
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p472
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040591b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p473
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p474
S'.text:0000000000405900\n.text:0000000000405903\n.text:0000000000405906\n.text:0000000000405908\n.text:0000000000405912\n.text:0000000000405914\n.text:0000000000405917\n.text:000000000040591a\n.text:000000000040591b\n.text:000000000040591d\n'
p475
tp476
sS'__libc_csu_fini'
p477
(S'\n__stdcall __libc_csu_fini()\n'
p478
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p479
S'RET\n'
p480
S'f3 c3\n'
p481
S'.text:0000000000405f10\n'
p482
tp483
sS'abort'
p484
(S'\n__stdcall abort()\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a028)();\u000a  return;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060a028]\n'
p487
S'ff 25 a2 8d 20 00\n'
p488
S'.plt:0000000000401280\n'
p489
tp490
sS'version_etc'
p491
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p492
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p493
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405352\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004052b0\nADD RSP,0xd8\nRET\n'
p494
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p495
S'.text:0000000000405310\n.text:0000000000405317\n.text:0000000000405319\n.text:000000000040531b\n.text:0000000000405320\n.text:0000000000405325\n.text:000000000040532a\n.text:0000000000405332\n.text:000000000040533a\n.text:0000000000405342\n.text:000000000040534a\n.text:0000000000405352\n.text:0000000000405357\n.text:000000000040535c\n.text:0000000000405361\n.text:0000000000405366\n.text:000000000040536e\n.text:0000000000405373\n.text:000000000040537b\n.text:0000000000405382\n.text:0000000000405385\n.text:000000000040538a\n.text:0000000000405391\n'
p496
tp497
sS'xstrcat'
p498
(S'\n__stdcall xstrcat(size_t argcount, __va_list_tag * args)\n'
p499
V\u000achar * xstrcat(size_t argcount,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  void *pvVar2;\u000a  char *__s;\u000a  size_t size2;\u000a  size_t size1;\u000a  int *piVar3;\u000a  char **ppcVar4;\u000a  ulong uVar5;\u000a  char *__dest;\u000a  size_t sVar6;\u000a  char *pcVar7;\u000a  va_list ap;\u000a  uint local_48;\u000a  char **local_40;\u000a  \u000a  pvVar2 = args->reg_save_area;\u000a  local_48 = args->gp_offset;\u000a  local_40 = (char **)args->overflow_arg_area;\u000a  if (argcount == 0) {\u000a    __dest = (char *)xmalloc(1);\u000a    pcVar7 = __dest;\u000a  }\u000a  else {\u000a    size1 = 0;\u000a    sVar6 = argcount;\u000a    do {\u000a      uVar5 = SEXT48((int)local_48);\u000a      if (uVar5 < 0x29) {\u000a        local_48 = local_48 + 8;\u000a        ppcVar4 = (char **)(uVar5 + (long)pvVar2);\u000a      }\u000a      else {\u000a        ppcVar4 = local_40;\u000a        local_40 = local_40 + 1;\u000a      }\u000a      size2 = strlen(*ppcVar4);\u000a      size1 = xsum(size1,size2);\u000a      sVar6 = sVar6 - 1;\u000a    } while (sVar6 != 0);\u000a    if ((size1 & 0xffffffff80000000) != 0) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a      return (char *)0x0;\u000a    }\u000a    pcVar7 = (char *)xmalloc(size1 + 1);\u000a    __dest = pcVar7;\u000a    if (argcount != 0) {\u000a      do {\u000a        uVar1 = args->gp_offset;\u000a        if ((ulong)(long)(int)uVar1 < 0x29) {\u000a          ppcVar4 = (char **)((long)(int)uVar1 + (long)args->reg_save_area);\u000a          args->gp_offset = uVar1 + 8;\u000a        }\u000a        else {\u000a          ppcVar4 = (char **)args->overflow_arg_area;\u000a          *(char ***)&args->overflow_arg_area = ppcVar4 + 1;\u000a        }\u000a        __s = *ppcVar4;\u000a        size2 = strlen(__s);\u000a        memcpy(__dest,__s,size2);\u000a        __dest = __dest + size2;\u000a        argcount = argcount - 1;\u000a      } while (argcount != 0);\u000a    }\u000a  }\u000a  *__dest = 0;\u000a  return pcVar7;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSI\nMOV R12,RDI\nMOV RAX,qword ptr [R14 + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R14]\nMOVAPS xmmword ptr [RSP],XMM0\nTEST R12,R12\nJZ 0x00405705\nXOR EBX,EBX\nMOV RBP,R12\nNOP\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004056c0\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004056ce\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,qword ptr [RAX]\nCALL 0x00401360\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x00405ce0\nMOV RBX,RAX\nDEC RBP\nJNZ 0x004056a0\nTEST RBX,-0x80000000\nJZ 0x00405717\nCALL 0x00401290\nMOV dword ptr [RAX],0x4b\nXOR R15D,R15D\nJMP 0x00405783\nMOV EDI,0x1\nCALL 0x00405440\nMOV R15,RAX\nMOV RBX,R15\nJMP 0x00405780\nINC RBX\nMOV RDI,RBX\nCALL 0x00405440\nMOV R15,RAX\nMOV RBX,R15\nTEST R12,R12\nJZ 0x00405780\nNOP dword ptr [RAX]\nMOVSXD RCX,dword ptr [R14]\nCMP RCX,0x28\nJA 0x00405750\nMOV RAX,RCX\nADD RAX,qword ptr [R14 + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [R14],ECX\nJMP 0x0040575c\nMOV RAX,qword ptr [R14 + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [R14 + 0x8],RCX\nMOV R13,qword ptr [RAX]\nMOV RDI,R13\nCALL 0x00401360\nMOV RBP,RAX\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00401450\nADD RBX,RBP\nDEC R12\nJNZ 0x00405730\nMOV byte ptr [RBX],0x0\nMOV RAX,R15\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f6\n49 89 fc\n49 8b 46 10\n48 89 44 24 10\n41 0f 10 06\n0f 29 04 24\n4d 85 e4\n74 6b\n31 db\n4c 89 e5\n90\n48 63 0c 24\n48 83 f9 28\n77 16\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 14\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n48 8b 38\ne8 8a bc ff ff\n48 89 df\n48 89 c6\ne8 ff 05 00 00\n48 89 c3\n48 ff cd\n75 b7\n48 f7 c3 00 00 00 80\n74 25\ne8 99 bb ff ff\nc7 00 4b 00 00 00\n45 31 ff\ne9 7e 00 00 00\nbf 01 00 00 00\ne8 31 fd ff ff\n49 89 c7\n4c 89 fb\neb 69\n48 ff c3\n48 89 df\ne8 1e fd ff ff\n49 89 c7\n4c 89 fb\n4d 85 e4\n74 53\n0f 1f 00\n49 63 0e\n48 83 f9 28\n77 17\n48 89 c8\n49 03 46 10\n8d 49 08\n41 89 0e\neb 14\n49 8b 46 08\n48 8d 48 08\n49 89 4e 08\n4c 8b 28\n4c 89 ef\ne8 f9 bb ff ff\n48 89 c5\n48 89 df\n4c 89 ee\n48 89 ea\ne8 d8 bc ff ff\n48 01 eb\n49 ff cc\n75 b0\nc6 03 00\n4c 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:0000000000405670\n.text:0000000000405671\n.text:0000000000405673\n.text:0000000000405675\n.text:0000000000405677\n.text:0000000000405679\n.text:000000000040567a\n.text:000000000040567e\n.text:0000000000405681\n.text:0000000000405684\n.text:0000000000405688\n.text:000000000040568d\n.text:0000000000405691\n.text:0000000000405695\n.text:0000000000405698\n.text:000000000040569a\n.text:000000000040569c\n.text:000000000040569f\n.text:00000000004056a0\n.text:00000000004056a4\n.text:00000000004056a8\n.text:00000000004056aa\n.text:00000000004056ad\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b8\n.text:00000000004056c0\n.text:00000000004056c5\n.text:00000000004056c9\n.text:00000000004056ce\n.text:00000000004056d1\n.text:00000000004056d6\n.text:00000000004056d9\n.text:00000000004056dc\n.text:00000000004056e1\n.text:00000000004056e4\n.text:00000000004056e7\n.text:00000000004056e9\n.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f7\n.text:00000000004056fd\n.text:0000000000405700\n.text:0000000000405705\n.text:000000000040570a\n.text:000000000040570f\n.text:0000000000405712\n.text:0000000000405715\n.text:0000000000405717\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405722\n.text:0000000000405725\n.text:0000000000405728\n.text:000000000040572b\n.text:000000000040572d\n.text:0000000000405730\n.text:0000000000405733\n.text:0000000000405737\n.text:0000000000405739\n.text:000000000040573c\n.text:0000000000405740\n.text:0000000000405743\n.text:0000000000405746\n.text:0000000000405750\n.text:0000000000405754\n.text:0000000000405758\n.text:000000000040575c\n.text:000000000040575f\n.text:0000000000405762\n.text:0000000000405767\n.text:000000000040576a\n.text:000000000040576d\n.text:0000000000405770\n.text:0000000000405773\n.text:0000000000405778\n.text:000000000040577b\n.text:000000000040577e\n.text:0000000000405780\n.text:0000000000405783\n.text:0000000000405786\n.text:000000000040578a\n.text:000000000040578b\n.text:000000000040578d\n.text:000000000040578f\n.text:0000000000405791\n.text:0000000000405793\n.text:0000000000405794\n'
p503
tp504
sS'binop'
p505
(S'\n__stdcall binop(char * s)\n'
p506
V\u000a_Bool binop(char *s)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  \u000a  if ((*s == '=') && (s[1] == 0)) {\u000a    return true;\u000a  }\u000a  if (((*s == '!') && (s[1] == '=')) && (s[2] == 0)) {\u000a    return true;\u000a  }\u000a  if (((*s == '=') && (s[1] == '=')) && (s[2] == 0)) {\u000a    return true;\u000a  }\u000a  if (((*s == '-') && (s[1] == 'n')) && ((s[2] == 't' && (s[3] == 0)))) {\u000a    return true;\u000a  }\u000a  if ((((*s == '-') && (s[1] == 'o')) && (s[2] == 't')) && (s[3] == 0)) {\u000a    return true;\u000a  }\u000a  if (((*s == '-') && (s[1] == 'e')) && ((s[2] == 'f' && (s[3] == 0)))) {\u000a    return true;\u000a  }\u000a  if (((*s == '-') && (s[1] == 'e')) && ((s[2] == 'q' && (s[3] == 0)))) {\u000a    return true;\u000a  }\u000a  cVar1 = *s;\u000a  if (cVar1 == '-') {\u000a    if (((s[1] == 'n') && (s[2] == 'e')) && (s[3] == 0)) {\u000a      return true;\u000a    }\u000a    cVar1 = *s;\u000a  }\u000a  if (cVar1 == '-') {\u000a    if (((s[1] == 'l') && (s[2] == 't')) && (s[3] == 0)) {\u000a      return true;\u000a    }\u000a    if (*s != '-') goto LAB_00402767;\u000a    if (((s[1] == 'l') && (s[2] == 'e')) && (s[3] == 0)) {\u000a      return true;\u000a    }\u000a  }\u000a  if ((((*s == '-') && (s[1] == 'g')) && (s[2] == 't')) && (s[3] == 0)) {\u000a    return true;\u000a  }\u000aLAB_00402767:\u000a  iVar2 = 0x2d - (uint)(byte)*s;\u000a  if (((iVar2 == 0) && (iVar2 = 0x67 - (uint)(byte)s[1], iVar2 == 0)) &&\u000a     (iVar2 = 0x65 - (uint)(byte)s[2], iVar2 == 0)) {\u000a    iVar2 = -(uint)(byte)s[3];\u000a  }\u000a  return (_Bool)(iVar2 == 0);\u000a}\u000a\u000a
p507
S'CMP byte ptr [RDI],0x3d\nJNZ 0x0040266f\nCMP byte ptr [RDI + 0x1],0x0\nJZ 0x00402799\nCMP byte ptr [RDI],0x21\nJNZ 0x00402684\nCMP byte ptr [RDI + 0x1],0x3d\nJNZ 0x00402684\nCMP byte ptr [RDI + 0x2],0x0\nJZ 0x0040279c\nCMP byte ptr [RDI],0x3d\nJNZ 0x00402699\nCMP byte ptr [RDI + 0x1],0x3d\nJNZ 0x00402699\nCMP byte ptr [RDI + 0x2],0x0\nJZ 0x0040279f\nCMP byte ptr [RDI],0x2d\nJNZ 0x004026b4\nCMP byte ptr [RDI + 0x1],0x6e\nJNZ 0x004026b4\nCMP byte ptr [RDI + 0x2],0x74\nJNZ 0x004026b4\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027a2\nCMP byte ptr [RDI],0x2d\nJNZ 0x004026cf\nCMP byte ptr [RDI + 0x1],0x6f\nJNZ 0x004026cf\nCMP byte ptr [RDI + 0x2],0x74\nJNZ 0x004026cf\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027a5\nCMP byte ptr [RDI],0x2d\nJNZ 0x004026ea\nCMP byte ptr [RDI + 0x1],0x65\nJNZ 0x004026ea\nCMP byte ptr [RDI + 0x2],0x66\nJNZ 0x004026ea\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027a8\nCMP byte ptr [RDI],0x2d\nJNZ 0x00402705\nCMP byte ptr [RDI + 0x1],0x65\nJNZ 0x00402705\nCMP byte ptr [RDI + 0x2],0x71\nJNZ 0x00402705\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027ab\nMOV AL,byte ptr [RDI]\nCMP AL,0x2d\nJNZ 0x00402723\nCMP byte ptr [RDI + 0x1],0x6e\nJNZ 0x00402721\nCMP byte ptr [RDI + 0x2],0x65\nJNZ 0x00402721\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027ae\nMOV AL,byte ptr [RDI]\nCMP AL,0x2d\nJNZ 0x00402750\nCMP byte ptr [RDI + 0x1],0x6c\nJNZ 0x00402739\nCMP byte ptr [RDI + 0x2],0x74\nJNZ 0x00402739\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027b1\nCMP byte ptr [RDI],0x2d\nJNZ 0x00402767\nCMP byte ptr [RDI + 0x1],0x6c\nJNZ 0x00402750\nCMP byte ptr [RDI + 0x2],0x65\nJNZ 0x00402750\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027b7\nCMP byte ptr [RDI],0x2d\nJNZ 0x00402767\nCMP byte ptr [RDI + 0x1],0x67\nJNZ 0x00402767\nCMP byte ptr [RDI + 0x2],0x74\nJNZ 0x00402767\nCMP byte ptr [RDI + 0x3],0x0\nJZ 0x004027b4\nMOVZX ECX,byte ptr [RDI]\nMOV EAX,0x2d\nSUB EAX,ECX\nJNZ 0x00402793\nMOVZX ECX,byte ptr [RDI + 0x1]\nMOV EAX,0x67\nSUB EAX,ECX\nJNZ 0x00402793\nMOVZX ECX,byte ptr [RDI + 0x2]\nMOV EAX,0x65\nSUB EAX,ECX\nJNZ 0x00402793\nMOVZX EAX,byte ptr [RDI + 0x3]\nNEG EAX\nTEST EAX,EAX\nSETZ AL\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\nMOV AL,0x1\nRET\n'
p508
S'80 3f 3d\n75 0a\n80 7f 01 00\n0f 84 2a 01 00 00\n80 3f 21\n75 10\n80 7f 01 3d\n75 0a\n80 7f 02 00\n0f 84 18 01 00 00\n80 3f 3d\n75 10\n80 7f 01 3d\n75 0a\n80 7f 02 00\n0f 84 06 01 00 00\n80 3f 2d\n75 16\n80 7f 01 6e\n75 10\n80 7f 02 74\n75 0a\n80 7f 03 00\n0f 84 ee 00 00 00\n80 3f 2d\n75 16\n80 7f 01 6f\n75 10\n80 7f 02 74\n75 0a\n80 7f 03 00\n0f 84 d6 00 00 00\n80 3f 2d\n75 16\n80 7f 01 65\n75 10\n80 7f 02 66\n75 0a\n80 7f 03 00\n0f 84 be 00 00 00\n80 3f 2d\n75 16\n80 7f 01 65\n75 10\n80 7f 02 71\n75 0a\n80 7f 03 00\n0f 84 a6 00 00 00\n8a 07\n3c 2d\n75 18\n80 7f 01 6e\n75 10\n80 7f 02 65\n75 0a\n80 7f 03 00\n0f 84 8d 00 00 00\n8a 07\n3c 2d\n75 29\n80 7f 01 6c\n75 0c\n80 7f 02 74\n75 06\n80 7f 03 00\n74 78\n80 3f 2d\n75 29\n80 7f 01 6c\n75 0c\n80 7f 02 65\n75 06\n80 7f 03 00\n74 67\n80 3f 2d\n75 12\n80 7f 01 67\n75 0c\n80 7f 02 74\n75 06\n80 7f 03 00\n74 4d\n0f b6 0f\nb8 2d 00 00 00\n29 c8\n75 20\n0f b6 4f 01\nb8 67 00 00 00\n29 c8\n75 13\n0f b6 4f 02\nb8 65 00 00 00\n29 c8\n75 06\n0f b6 47 03\nf7 d8\n85 c0\n0f 94 c0\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\nb0 01\nc3\n'
p509
S'.text:0000000000402660\n.text:0000000000402663\n.text:0000000000402665\n.text:0000000000402669\n.text:000000000040266f\n.text:0000000000402672\n.text:0000000000402674\n.text:0000000000402678\n.text:000000000040267a\n.text:000000000040267e\n.text:0000000000402684\n.text:0000000000402687\n.text:0000000000402689\n.text:000000000040268d\n.text:000000000040268f\n.text:0000000000402693\n.text:0000000000402699\n.text:000000000040269c\n.text:000000000040269e\n.text:00000000004026a2\n.text:00000000004026a4\n.text:00000000004026a8\n.text:00000000004026aa\n.text:00000000004026ae\n.text:00000000004026b4\n.text:00000000004026b7\n.text:00000000004026b9\n.text:00000000004026bd\n.text:00000000004026bf\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c9\n.text:00000000004026cf\n.text:00000000004026d2\n.text:00000000004026d4\n.text:00000000004026d8\n.text:00000000004026da\n.text:00000000004026de\n.text:00000000004026e0\n.text:00000000004026e4\n.text:00000000004026ea\n.text:00000000004026ed\n.text:00000000004026ef\n.text:00000000004026f3\n.text:00000000004026f5\n.text:00000000004026f9\n.text:00000000004026fb\n.text:00000000004026ff\n.text:0000000000402705\n.text:0000000000402707\n.text:0000000000402709\n.text:000000000040270b\n.text:000000000040270f\n.text:0000000000402711\n.text:0000000000402715\n.text:0000000000402717\n.text:000000000040271b\n.text:0000000000402721\n.text:0000000000402723\n.text:0000000000402725\n.text:0000000000402727\n.text:000000000040272b\n.text:000000000040272d\n.text:0000000000402731\n.text:0000000000402733\n.text:0000000000402737\n.text:0000000000402739\n.text:000000000040273c\n.text:000000000040273e\n.text:0000000000402742\n.text:0000000000402744\n.text:0000000000402748\n.text:000000000040274a\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402753\n.text:0000000000402755\n.text:0000000000402759\n.text:000000000040275b\n.text:000000000040275f\n.text:0000000000402761\n.text:0000000000402765\n.text:0000000000402767\n.text:000000000040276a\n.text:000000000040276f\n.text:0000000000402771\n.text:0000000000402773\n.text:0000000000402777\n.text:000000000040277c\n.text:000000000040277e\n.text:0000000000402780\n.text:0000000000402784\n.text:0000000000402789\n.text:000000000040278b\n.text:000000000040278d\n.text:0000000000402791\n.text:0000000000402793\n.text:0000000000402795\n.text:0000000000402798\n.text:0000000000402799\n.text:000000000040279b\n.text:000000000040279c\n.text:000000000040279e\n.text:000000000040279f\n.text:00000000004027a1\n.text:00000000004027a2\n.text:00000000004027a4\n.text:00000000004027a5\n.text:00000000004027a7\n.text:00000000004027a8\n.text:00000000004027aa\n.text:00000000004027ab\n.text:00000000004027ad\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b1\n.text:00000000004027b3\n.text:00000000004027b4\n.text:00000000004027b6\n.text:00000000004027b7\n.text:00000000004027b9\n'
p510
tp511
sS'lseek'
p512
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060a0b8]\n'
p515
S'ff 25 12 8d 20 00\n'
p516
S'.plt:00000000004013a0\n'
p517
tp518
sS'numcompare'
p519
(S'\n__stdcall numcompare(char * a, char * b)\n'
p520
V\u000aint numcompare(char *a,char *b)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  ulong uVar4;\u000a  byte bVar5;\u000a  ulong uVar6;\u000a  byte bVar7;\u000a  char *pcVar8;\u000a  byte *pbVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  \u000a  bVar5 = *a;\u000a  bVar7 = *b;\u000a  if (bVar5 == 0x2d) {\u000a    do {\u000a      pcVar10 = a;\u000a      bVar5 = pcVar10[1];\u000a      a = pcVar10 + 1;\u000a    } while (bVar5 == 0x30);\u000a    if (bVar7 == 0x2d) {\u000a      do {\u000a        pcVar8 = b;\u000a        bVar7 = pcVar8[1];\u000a        b = pcVar8 + 1;\u000a      } while (bVar7 == 0x30);\u000a      if ((bVar7 == bVar5) && ((uint)bVar5 - 0x30 < 10)) {\u000a        lVar3 = 0;\u000a        do {\u000a          bVar5 = pcVar10[lVar3 + 2];\u000a          bVar7 = pcVar8[lVar3 + 2];\u000a          lVar3 = lVar3 + 1;\u000a          if (bVar7 != bVar5) break;\u000a        } while ((uint)bVar5 - 0x30 < 10);\u000a        a = a + lVar3;\u000a        b = b + lVar3;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar6 = 0;\u000a      while ((uint)bVar5 - 0x30 < 10) {\u000a        bVar5 = a[uVar6 + 1];\u000a        uVar6 = uVar6 + 1;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = -1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = 1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = (uint)bVar7 - uVar11;\u000a      }\u000a      return iVar2;\u000a    }\u000a    iVar2 = -1;\u000a    if (9 < (uint)bVar5 - 0x30) {\u000a      if (bVar7 == 0x30) {\u000a        pbVar9 = (byte *)(b + 1);\u000a        do {\u000a          bVar7 = *pbVar9;\u000a          pbVar9 = pbVar9 + 1;\u000a        } while (bVar7 == 0x30);\u000a      }\u000a      return (int)-(uint)((uint)bVar7 - 0x30 < 10);\u000a    }\u000a  }\u000a  else {\u000a    if (bVar7 == 0x2d) {\u000a      pbVar9 = (byte *)(b + 1);\u000a      do {\u000a        bVar7 = *pbVar9;\u000a        pbVar9 = pbVar9 + 1;\u000a      } while (bVar7 == 0x30);\u000a      iVar2 = 1;\u000a      if (9 < (uint)bVar7 - 0x30) {\u000a        if (bVar5 == 0x30) {\u000a          pbVar9 = (byte *)(a + 1);\u000a          do {\u000a            bVar5 = *pbVar9;\u000a            pbVar9 = pbVar9 + 1;\u000a          } while (bVar5 == 0x30);\u000a        }\u000a        return (int)(-(uint)((uint)bVar5 - 0x30 < 10) & 1);\u000a      }\u000a    }\u000a    else {\u000a      while (bVar5 == 0x30) {\u000a        bVar5 = a[1];\u000a        a = a + 1;\u000a      }\u000a      while (bVar7 == 0x30) {\u000a        bVar7 = b[1];\u000a        b = b + 1;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar1 = (uint)bVar5;\u000a      if (bVar5 == bVar7) {\u000a        do {\u000a          uVar11 = uVar1;\u000a          if (9 < (uint)bVar5 - 0x30) break;\u000a          bVar5 = a[1];\u000a          a = a + 1;\u000a          bVar7 = b[1];\u000a          b = b + 1;\u000a          uVar11 = (uint)bVar5;\u000a          uVar1 = uVar11;\u000a        } while (bVar5 == bVar7);\u000a      }\u000a      if ((uint)bVar5 - 0x30 < 10) {\u000a        uVar6 = 0;\u000a        do {\u000a          lVar3 = uVar6 + 1;\u000a          uVar6 = uVar6 + 1;\u000a        } while ((uint)(byte)a[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar6 = 0;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = 1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = -1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = uVar11 - (uint)bVar7;\u000a      }\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p521
S'MOV CL,byte ptr [RDI]\nMOV DL,byte ptr [RSI]\nCMP CL,0x2d\nJNZ 0x00404b8a\nNOP dword ptr [RAX]\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nCMP ECX,0x30\nJZ 0x00404b10\nCMP DL,0x2d\nJNZ 0x00404c75\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX R9D,byte ptr [RSI + 0x1]\nINC RSI\nCMP R9B,0x30\nJZ 0x00404b30\nCMP R9B,CL\nJNZ 0x00404ca7\nLEA EAX,[RCX + -0x30]\nCMP EAX,0x9\nJA 0x00404ca7\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV CL,byte ptr [RDI + RAX*0x1 + 0x1]\nMOVZX R9D,byte ptr [RSI + RAX*0x1 + 0x1]\nMOVZX R8D,CL\nINC RAX\nCMP R9B,R8B\nJNZ 0x00404b7f\nLEA EDX,[R8 + -0x30]\nCMP EDX,0xa\nJC 0x00404b60\nADD RDI,RAX\nADD RSI,RAX\nJMP 0x00404caa\nCMP DL,0x2d\nJNZ 0x00404bf7\nINC RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RSI]\nINC RSI\nCMP EDX,0x30\nJZ 0x00404ba0\nADD EDX,-0x30\nMOV EAX,0x1\nCMP EDX,0xa\nJC 0x00404d38\nCMP CL,0x30\nJNZ 0x00404bdb\nINC RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RDI]\nINC RDI\nCMP CL,0x30\nJZ 0x00404bd0\nMOVZX EAX,CL\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nRET\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nCMP CL,0x30\nJZ 0x00404bf0\nJMP 0x00404c07\nMOVZX EDX,byte ptr [RSI + 0x1]\nINC RSI\nCMP DL,0x30\nJZ 0x00404c00\nMOVZX R8D,CL\nCMP R8B,DL\nJNZ 0x00404c40\nLEA EAX,[R8 + -0x30]\nCMP EAX,0x9\nJA 0x00404c40\nNOP\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nMOVZX EDX,byte ptr [RSI + 0x1]\nINC RSI\nMOVZX R8D,CL\nCMP R8B,DL\nJNZ 0x00404c40\nLEA EAX,[R8 + -0x30]\nCMP EAX,0xa\nJC 0x00404c20\nMOVZX EAX,DL\nMOVZX ECX,CL\nADD ECX,-0x30\nCMP ECX,0x9\nJA 0x00404cf2\nXOR ECX,ECX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RDI + RCX*0x1 + 0x1]\nINC RCX\nADD EDX,-0x30\nCMP EDX,0xa\nJC 0x00404c60\nJMP 0x00404cf4\nADD ECX,-0x30\nMOV EAX,0xffffffff\nCMP ECX,0xa\nJC 0x00404d38\nCMP DL,0x30\nJNZ 0x00404c9b\nINC RSI\nNOP\nMOVZX EDX,byte ptr [RSI]\nINC RSI\nCMP DL,0x30\nJZ 0x00404c90\nMOVZX EAX,DL\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nRET\nMOV R8D,ECX\nMOVZX EDX,R9B\nMOVZX EAX,CL\nADD EAX,-0x30\nXOR ECX,ECX\nCMP EAX,0x9\nJA 0x00404cd0\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDI + RCX*0x1 + 0x1]\nINC RCX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x00404cc0\nLEA EAX,[RDX + -0x30]\nCMP EAX,0x9\nJA 0x00404d12\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EDI,byte ptr [RSI + RAX*0x1 + 0x1]\nINC RAX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404ce0\nJMP 0x00404d14\nXOR ECX,ECX\nLEA EDX,[RAX + -0x30]\nCMP EDX,0x9\nJA 0x00404d25\nXOR EDX,EDX\nNOP\nMOVZX EDI,byte ptr [RSI + RDX*0x1 + 0x1]\nINC RDX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404d00\nJMP 0x00404d27\nXOR EAX,EAX\nCMP RCX,RAX\nJNZ 0x00404d39\nSUB EDX,R8D\nXOR EAX,EAX\nTEST RCX,RCX\nCMOVNZ EAX,EDX\nRET\nXOR EDX,EDX\nCMP RCX,RDX\nJNZ 0x00404d47\nSUB R8D,EAX\nXOR EAX,EAX\nTEST RCX,RCX\nCMOVNZ EAX,R8D\nRET\nMOV ECX,0x1\nMOV EAX,0xffffffff\nCMOVC EAX,ECX\nRET\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVC EAX,ECX\nRET\n'
p522
S'8a 0f\n8a 16\n80 f9 2d\n0f 85 7d 00 00 00\n0f 1f 00\n0f b6 4f 01\n48 ff c7\n83 f9 30\n74 f4\n80 fa 2d\n0f 85 50 01 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n44 0f b6 4e 01\n48 ff c6\n41 80 f9 30\n74 f2\n41 38 c9\n0f 85 60 01 00 00\n8d 41 d0\n83 f8 09\n0f 87 54 01 00 00\n31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n8a 4c 07 01\n44 0f b6 4c 06 01\n44 0f b6 c1\n48 ff c0\n45 38 c1\n75 09\n41 8d 50 d0\n83 fa 0a\n72 e1\n48 01 c7\n48 01 c6\ne9 20 01 00 00\n80 fa 2d\n75 68\n48 ff c6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 16\n48 ff c6\n83 fa 30\n74 f5\n83 c2 d0\nb8 01 00 00 00\n83 fa 0a\n0f 82 7c 01 00 00\n80 f9 30\n75 1a\n48 ff c7\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 0f\n48 ff c7\n80 f9 30\n74 f5\n0f b6 c1\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\nc3\n0f b6 4f 01\n48 ff c7\n80 f9 30\n74 f4\neb 09\n0f b6 56 01\n48 ff c6\n80 fa 30\n74 f4\n44 0f b6 c1\n41 38 d0\n75 2b\n41 8d 40 d0\n83 f8 09\n77 22\n66 90\n0f b6 4f 01\n48 ff c7\n0f b6 56 01\n48 ff c6\n44 0f b6 c1\n41 38 d0\n75 09\n41 8d 40 d0\n83 f8 0a\n72 e0\n0f b6 c2\n0f b6 c9\n83 c1 d0\n83 f9 09\n0f 87 a0 00 00 00\n31 c9\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 54 0f 01\n48 ff c1\n83 c2 d0\n83 fa 0a\n72 f0\ne9 7f 00 00 00\n83 c1 d0\nb8 ff ff ff ff\n83 f9 0a\n0f 82 b2 00 00 00\n80 fa 30\n75 10\n48 ff c6\n66 90\n0f b6 16\n48 ff c6\n80 fa 30\n74 f5\n0f b6 c2\n83 c0 d0\n83 f8 0a\n19 c0\nc3\n41 89 c8\n41 0f b6 d1\n0f b6 c1\n83 c0 d0\n31 c9\n83 f8 09\n77 15\n0f 1f 44 00 00\n0f b6 44 0f 01\n48 ff c1\n83 c0 d0\n83 f8 0a\n72 f0\n8d 42 d0\n83 f8 09\n77 3a\n31 c0\n66 0f 1f 44 00 00\n0f b6 7c 06 01\n48 ff c0\n83 c7 d0\n83 ff 0a\n72 f0\neb 22\n31 c9\n8d 50 d0\n83 fa 09\n77 29\n31 d2\n66 90\n0f b6 7c 16 01\n48 ff c2\n83 c7 d0\n83 ff 0a\n72 f0\neb 15\n31 c0\n48 39 c1\n75 20\n44 29 c2\n31 c0\n48 85 c9\n0f 45 c2\nc3\n31 d2\n48 39 d1\n75 1b\n41 29 c0\n31 c0\n48 85 c9\n41 0f 45 c0\nc3\nb9 01 00 00 00\nb8 ff ff ff ff\n0f 42 c1\nc3\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 42 c1\nc3\n'
p523
S'.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b07\n.text:0000000000404b0d\n.text:0000000000404b10\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b1a\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b25\n.text:0000000000404b30\n.text:0000000000404b35\n.text:0000000000404b38\n.text:0000000000404b3c\n.text:0000000000404b3e\n.text:0000000000404b41\n.text:0000000000404b47\n.text:0000000000404b4a\n.text:0000000000404b4d\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b60\n.text:0000000000404b64\n.text:0000000000404b6a\n.text:0000000000404b6e\n.text:0000000000404b71\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b7a\n.text:0000000000404b7d\n.text:0000000000404b7f\n.text:0000000000404b82\n.text:0000000000404b85\n.text:0000000000404b8a\n.text:0000000000404b8d\n.text:0000000000404b8f\n.text:0000000000404b92\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba6\n.text:0000000000404ba9\n.text:0000000000404bab\n.text:0000000000404bae\n.text:0000000000404bb3\n.text:0000000000404bb6\n.text:0000000000404bbc\n.text:0000000000404bbf\n.text:0000000000404bc1\n.text:0000000000404bc4\n.text:0000000000404bd0\n.text:0000000000404bd3\n.text:0000000000404bd6\n.text:0000000000404bd9\n.text:0000000000404bdb\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be4\n.text:0000000000404be6\n.text:0000000000404be9\n.text:0000000000404bf0\n.text:0000000000404bf4\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bfc\n.text:0000000000404c00\n.text:0000000000404c04\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0c\n.text:0000000000404c10\n.text:0000000000404c13\n.text:0000000000404c15\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c1e\n.text:0000000000404c20\n.text:0000000000404c24\n.text:0000000000404c27\n.text:0000000000404c2b\n.text:0000000000404c2e\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c37\n.text:0000000000404c3b\n.text:0000000000404c3e\n.text:0000000000404c40\n.text:0000000000404c43\n.text:0000000000404c46\n.text:0000000000404c49\n.text:0000000000404c4c\n.text:0000000000404c52\n.text:0000000000404c54\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6b\n.text:0000000000404c6e\n.text:0000000000404c70\n.text:0000000000404c75\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c80\n.text:0000000000404c86\n.text:0000000000404c89\n.text:0000000000404c8b\n.text:0000000000404c8e\n.text:0000000000404c90\n.text:0000000000404c93\n.text:0000000000404c96\n.text:0000000000404c99\n.text:0000000000404c9b\n.text:0000000000404c9e\n.text:0000000000404ca1\n.text:0000000000404ca4\n.text:0000000000404ca6\n.text:0000000000404ca7\n.text:0000000000404caa\n.text:0000000000404cae\n.text:0000000000404cb1\n.text:0000000000404cb4\n.text:0000000000404cb6\n.text:0000000000404cb9\n.text:0000000000404cbb\n.text:0000000000404cc0\n.text:0000000000404cc5\n.text:0000000000404cc8\n.text:0000000000404ccb\n.text:0000000000404cce\n.text:0000000000404cd0\n.text:0000000000404cd3\n.text:0000000000404cd6\n.text:0000000000404cd8\n.text:0000000000404cda\n.text:0000000000404ce0\n.text:0000000000404ce5\n.text:0000000000404ce8\n.text:0000000000404ceb\n.text:0000000000404cee\n.text:0000000000404cf0\n.text:0000000000404cf2\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cfc\n.text:0000000000404cfe\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d08\n.text:0000000000404d0b\n.text:0000000000404d0e\n.text:0000000000404d10\n.text:0000000000404d12\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d24\n.text:0000000000404d25\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2c\n.text:0000000000404d2f\n.text:0000000000404d31\n.text:0000000000404d34\n.text:0000000000404d38\n.text:0000000000404d39\n.text:0000000000404d3e\n.text:0000000000404d43\n.text:0000000000404d46\n.text:0000000000404d47\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d54\n'
p524
tp525
sS'quotearg_n_mem'
p526
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p527
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'MOV ECX,0x60a2c0\nJMP 0x00404170\n'
p529
S'b9 c0 a2 60 00\ne9 36 fe ff ff\n'
p530
S'.text:0000000000404330\n.text:0000000000404335\n'
p531
tp532
sS'__printf_chk'
p533
(S'\n__stdcall __printf_chk()\n'
p534
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a178)();\u000a  return;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060a178]\n'
p536
S'ff 25 52 8c 20 00\n'
p537
S'.plt:0000000000401520\n'
p538
tp539
sS'verror_at_line'
p540
(S'\n__stdcall verror_at_line(char * file, char * format, __va_list_tag * args)\n'
p541
V\u000avoid verror_at_line(char *file,char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  char *__ptr;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  uint in_ECX;\u000a  char *format_00;\u000a  __va_list_tag *args_00;\u000a  \u000a  __ptr = xvasprintf(format_00,args_00);\u000a  if (__ptr != (char *)0x0) {\u000a    if (args == (__va_list_tag *)0x0) {\u000a      error((ulong)file & 0xffffffff,(ulong)format & 0xffffffff,0x407084,__ptr);\u000a    }\u000a    else {\u000a      error_at_line((ulong)file & 0xffffffff,(ulong)format & 0xffffffff,args,(ulong)in_ECX,0x407084,\u000a                    __ptr);\u000a    }\u000a    free(__ptr);\u000a    return;\u000a  }\u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  uVar3 = dcgettext(0,0x407628,5);\u000a  error(0,(ulong)uVar1,uVar3,uVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15D,ECX\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R12D,EDI\nMOV RDI,R8\nMOV RSI,R9\nCALL 0x00405600\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404eef\nTEST RBP,RBP\nJZ 0x00404eca\nMOV R8D,0x407084\nXOR EAX,EAX\nMOV EDI,R12D\nMOV ESI,R14D\nMOV RDX,RBP\nMOV ECX,R15D\nMOV R9,RBX\nCALL 0x004012a0\nJMP 0x00404edf\nMOV EDX,0x407084\nXOR EAX,EAX\nMOV EDI,R12D\nMOV ESI,R14D\nMOV RCX,RBX\nCALL 0x00401530\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401270\nCALL 0x00401290\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x407628\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401530\nCALL 0x00401280\n'
p543
S'55\n41 57\n41 56\n41 54\n53\n41 89 cf\n48 89 d5\n41 89 f6\n41 89 fc\n4c 89 c7\n4c 89 ce\ne8 61 07 00 00\n48 89 c3\n48 85 db\n74 48\n48 85 ed\n74 1e\n41 b8 84 70 40 00\n31 c0\n44 89 e7\n44 89 f6\n48 89 ea\n44 89 f9\n49 89 d9\ne8 d8 c3 ff ff\neb 15\nba 84 70 40 00\n31 c0\n44 89 e7\n44 89 f6\n48 89 d9\ne8 51 c6 ff ff\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 81 c3 ff ff\ne8 9c c3 ff ff\n8b 18\n31 ff\nbe 28 76 40 00\nba 05 00 00 00\ne8 39 c4 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 18 c6 ff ff\ne8 63 c3 ff ff\n'
p544
S'.text:0000000000404e80\n.text:0000000000404e81\n.text:0000000000404e83\n.text:0000000000404e85\n.text:0000000000404e87\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e8e\n.text:0000000000404e91\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e9a\n.text:0000000000404e9f\n.text:0000000000404ea2\n.text:0000000000404ea5\n.text:0000000000404ea7\n.text:0000000000404eaa\n.text:0000000000404eac\n.text:0000000000404eb2\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404eba\n.text:0000000000404ebd\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ecf\n.text:0000000000404ed1\n.text:0000000000404ed4\n.text:0000000000404ed7\n.text:0000000000404eda\n.text:0000000000404edf\n.text:0000000000404ee2\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee7\n.text:0000000000404ee9\n.text:0000000000404eea\n.text:0000000000404eef\n.text:0000000000404ef4\n.text:0000000000404ef6\n.text:0000000000404ef8\n.text:0000000000404efd\n.text:0000000000404f02\n.text:0000000000404f07\n.text:0000000000404f0a\n.text:0000000000404f0c\n.text:0000000000404f0e\n.text:0000000000404f10\n.text:0000000000404f13\n.text:0000000000404f18\n'
p545
tp546
sS'emit_ancillary_info'
p547
(S'\n__stdcall emit_ancillary_info()\n'
p548
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406150;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("[",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "[";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,0x406d7b,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",0x406d7b);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406245;\u000a  if (__s2 == "[") {\u000a    uVar3 = 0x406e36;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p549
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406150\nMOV ESI,0x406d7b\nNOP\nMOV EDI,0x406d7b\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x0040198b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401970\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406d7b\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406e79\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406da6\nMOV ECX,0x406e90\nXOR EAX,EAX\nCALL 0x00401520\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401510\nTEST RAX,RAX\nJZ 0x00401a14\nMOV ESI,0x406eb7\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004012b0\nTEST EAX,EAX\nJZ 0x00401a14\nXOR EDI,EDI\nMOV ESI,0x406ebb\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406d7b\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401520\nXOR EDI,EDI\nMOV ESI,0x406f00\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,RAX\nMOV R14D,0x406d7b\nMOV EDI,0x1\nMOV EDX,0x406e90\nMOV ECX,0x406d7b\nXOR EAX,EAX\nCALL 0x00401520\nXOR EDI,EDI\nMOV ESI,0x406f1f\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406e36\nMOV ECX,0x406245\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401520\n'
p550
S'41 56\n53\n50\nbb 50 61 40 00\nbe 7b 6d 40 00\n66 90\nbf 7b 6d 40 00\ne8 b6 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 7b 6d 40 00\n48 0f 45 d8\n31 ff\nbe 79 6e 40 00\nba 05 00 00 00\ne8 94 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba a6 6d 40 00\nb9 90 6e 40 00\n31 c0\ne8 5b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 3f fb ff ff\n48 85 c0\n74 3e\nbe b7 6e 40 00\nba 03 00 00 00\n48 89 c7\ne8 c8 f8 ff ff\n85 c0\n74 28\n31 ff\nbe bb 6e 40 00\nba 05 00 00 00\ne8 43 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 7b 6d 40 00\n31 c0\n48 89 ce\ne8 0c fb ff ff\n31 ff\nbe 00 6f 40 00\nba 05 00 00 00\ne8 1b f9 ff ff\n48 89 c6\n41 be 7b 6d 40 00\nbf 01 00 00 00\nba 90 6e 40 00\nb9 7b 6d 40 00\n31 c0\ne8 dc fa ff ff\n31 ff\nbe 1f 6f 40 00\nba 05 00 00 00\ne8 eb f8 ff ff\n48 89 c2\n4c 39 f3\nb8 36 6e 40 00\nb9 45 62 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 9e fa ff ff\n'
p551
S'.text:0000000000401960\n.text:0000000000401962\n.text:0000000000401963\n.text:0000000000401964\n.text:0000000000401969\n.text:000000000040196e\n.text:0000000000401970\n.text:0000000000401975\n.text:000000000040197a\n.text:000000000040197c\n.text:000000000040197e\n.text:0000000000401982\n.text:0000000000401986\n.text:0000000000401989\n.text:000000000040198b\n.text:000000000040198f\n.text:0000000000401992\n.text:0000000000401997\n.text:000000000040199b\n.text:000000000040199d\n.text:00000000004019a2\n.text:00000000004019a7\n.text:00000000004019ac\n.text:00000000004019af\n.text:00000000004019b4\n.text:00000000004019b9\n.text:00000000004019be\n.text:00000000004019c0\n.text:00000000004019c5\n.text:00000000004019ca\n.text:00000000004019cc\n.text:00000000004019d1\n.text:00000000004019d4\n.text:00000000004019d6\n.text:00000000004019db\n.text:00000000004019e0\n.text:00000000004019e3\n.text:00000000004019e8\n.text:00000000004019ea\n.text:00000000004019ec\n.text:00000000004019ee\n.text:00000000004019f3\n.text:00000000004019f8\n.text:00000000004019fd\n.text:0000000000401a00\n.text:0000000000401a05\n.text:0000000000401a0a\n.text:0000000000401a0c\n.text:0000000000401a0f\n.text:0000000000401a14\n.text:0000000000401a16\n.text:0000000000401a1b\n.text:0000000000401a20\n.text:0000000000401a25\n.text:0000000000401a28\n.text:0000000000401a2e\n.text:0000000000401a33\n.text:0000000000401a38\n.text:0000000000401a3d\n.text:0000000000401a3f\n.text:0000000000401a44\n.text:0000000000401a46\n.text:0000000000401a4b\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a58\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a69\n.text:0000000000401a6e\n.text:0000000000401a70\n.text:0000000000401a73\n.text:0000000000401a76\n.text:0000000000401a7a\n.text:0000000000401a7b\n.text:0000000000401a7d\n'
p552
tp553
sS'strintcmp'
p554
(S'\n__stdcall strintcmp(char * a, char * b)\n'
p555
V\u000aint strintcmp(char *a,char *b)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  ulong uVar4;\u000a  byte bVar5;\u000a  ulong uVar6;\u000a  byte bVar7;\u000a  char *pcVar8;\u000a  byte *pbVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  \u000a  bVar5 = *a;\u000a  bVar7 = *b;\u000a  if (bVar5 == 0x2d) {\u000a    do {\u000a      pcVar10 = a;\u000a      bVar5 = pcVar10[1];\u000a      a = pcVar10 + 1;\u000a    } while (bVar5 == 0x30);\u000a    if (bVar7 == 0x2d) {\u000a      do {\u000a        pcVar8 = b;\u000a        bVar7 = pcVar8[1];\u000a        b = pcVar8 + 1;\u000a      } while (bVar7 == 0x30);\u000a      if ((bVar7 == bVar5) && ((uint)bVar5 - 0x30 < 10)) {\u000a        lVar3 = 0;\u000a        do {\u000a          bVar5 = pcVar10[lVar3 + 2];\u000a          bVar7 = pcVar8[lVar3 + 2];\u000a          lVar3 = lVar3 + 1;\u000a          if (bVar7 != bVar5) break;\u000a        } while ((uint)bVar5 - 0x30 < 10);\u000a        a = a + lVar3;\u000a        b = b + lVar3;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar6 = 0;\u000a      while ((uint)bVar5 - 0x30 < 10) {\u000a        bVar5 = a[uVar6 + 1];\u000a        uVar6 = uVar6 + 1;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = -1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = 1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = (uint)bVar7 - uVar11;\u000a      }\u000a      return iVar2;\u000a    }\u000a    iVar2 = -1;\u000a    if (9 < (uint)bVar5 - 0x30) {\u000a      if (bVar7 == 0x30) {\u000a        pbVar9 = (byte *)(b + 1);\u000a        do {\u000a          bVar7 = *pbVar9;\u000a          pbVar9 = pbVar9 + 1;\u000a        } while (bVar7 == 0x30);\u000a      }\u000a      return (int)-(uint)((uint)bVar7 - 0x30 < 10);\u000a    }\u000a  }\u000a  else {\u000a    if (bVar7 == 0x2d) {\u000a      pbVar9 = (byte *)(b + 1);\u000a      do {\u000a        bVar7 = *pbVar9;\u000a        pbVar9 = pbVar9 + 1;\u000a      } while (bVar7 == 0x30);\u000a      iVar2 = 1;\u000a      if (9 < (uint)bVar7 - 0x30) {\u000a        if (bVar5 == 0x30) {\u000a          pbVar9 = (byte *)(a + 1);\u000a          do {\u000a            bVar5 = *pbVar9;\u000a            pbVar9 = pbVar9 + 1;\u000a          } while (bVar5 == 0x30);\u000a        }\u000a        return (int)(-(uint)((uint)bVar5 - 0x30 < 10) & 1);\u000a      }\u000a    }\u000a    else {\u000a      while (bVar5 == 0x30) {\u000a        bVar5 = a[1];\u000a        a = a + 1;\u000a      }\u000a      while (bVar7 == 0x30) {\u000a        bVar7 = b[1];\u000a        b = b + 1;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar1 = (uint)bVar5;\u000a      if (bVar5 == bVar7) {\u000a        do {\u000a          uVar11 = uVar1;\u000a          if (9 < (uint)bVar5 - 0x30) break;\u000a          bVar5 = a[1];\u000a          a = a + 1;\u000a          bVar7 = b[1];\u000a          b = b + 1;\u000a          uVar11 = (uint)bVar5;\u000a          uVar1 = uVar11;\u000a        } while (bVar5 == bVar7);\u000a      }\u000a      if ((uint)bVar5 - 0x30 < 10) {\u000a        uVar6 = 0;\u000a        do {\u000a          lVar3 = uVar6 + 1;\u000a          uVar6 = uVar6 + 1;\u000a        } while ((uint)(byte)a[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar6 = 0;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = 1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = -1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = uVar11 - (uint)bVar7;\u000a      }\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p556
S'JMP 0x00404b00\n'
p557
S'eb 0e\n'
p558
S'.text:0000000000404af0\n'
p559
tp560
sS'initialize_exit_failure'
p561
(S'\n__stdcall initialize_exit_failure()\n'
p562
V\u000avoid initialize_exit_failure(void)\u000a\u000a{\u000a  exit_failure = 2;\u000a  return;\u000a}\u000a\u000a
p563
S'MOV dword ptr [0x0060a1f0],0x2\nRET\n'
p564
S'c7 05 e6 85 20 00 02 00 00 00\nc3\n'
p565
S'.text:0000000000401c00\n.text:0000000000401c0a\n'
p566
tp567
sS'version_etc_va'
p568
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p569
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p570
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004052e0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004052ec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00405301\nINC R9\nCMP R9,0xa\nJC 0x004052c0\nMOV R8,RSP\nCALL 0x00404f20\nADD RSP,0x58\nRET\n'
p571
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p572
S'.text:00000000004052b0\n.text:00000000004052b4\n.text:00000000004052b7\n.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c7\n.text:00000000004052c9\n.text:00000000004052cc\n.text:00000000004052d0\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052e0\n.text:00000000004052e4\n.text:00000000004052e8\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f3\n.text:00000000004052f6\n.text:00000000004052f8\n.text:00000000004052fb\n.text:00000000004052ff\n.text:0000000000405301\n.text:0000000000405304\n.text:0000000000405309\n.text:000000000040530d\n'
p573
tp574
sS'xzalloc'
p575
(S'\n__stdcall xzalloc(size_t s)\n'
p576
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p577
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405440\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004013b0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p578
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 64 be ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p579
S'.text:0000000000405530\n.text:0000000000405532\n.text:0000000000405533\n.text:0000000000405534\n.text:0000000000405537\n.text:000000000040553c\n.text:000000000040553f\n.text:0000000000405541\n.text:0000000000405544\n.text:0000000000405547\n.text:000000000040554c\n.text:000000000040554f\n.text:0000000000405553\n.text:0000000000405554\n.text:0000000000405556\n'
p580
tp581
sS'umaxtostr'
p582
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p583
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p584
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00403130\nMOV RAX,RSI\nRET\n'
p585
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p586
S'.text:0000000000403110\n.text:0000000000403113\n.text:0000000000403117\n.text:000000000040311b\n.text:0000000000403125\n.text:0000000000403130\n.text:0000000000403133\n.text:0000000000403136\n.text:0000000000403138\n.text:000000000040313b\n.text:0000000000403140\n.text:0000000000403143\n.text:0000000000403145\n.text:0000000000403147\n.text:000000000040314b\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403156\n.text:000000000040315a\n.text:000000000040315d\n.text:000000000040315f\n.text:0000000000403162\n'
p587
tp588
sS'gettext_quote'
p589
(S'\n__stdcall gettext_quote(char * msgid)\n'
p590
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407612;\u000a        pcVar2 = &DAT_00407616;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401340\nCMP RAX,RBX\nJNZ 0x00404728\nCALL 0x004059b0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404730\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004046d8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407602\nMOV EAX,0x407606\nJMP 0x00404724\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404730\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404716\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407612\nMOV EAX,0x407616\nJMP 0x00404724\nCMP R14D,0x9\nMOV ECX,0x4075f6\nMOV EAX,0x4075fa\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p592
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 b7 cc ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 19 13 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 02 76 40 00\nb8 06 76 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 12 76 40 00\nb8 16 76 40 00\neb 0e\n41 83 fe 09\nb9 f6 75 40 00\nb8 fa 75 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p593
S'.text:0000000000404670\n.text:0000000000404671\n.text:0000000000404673\n.text:0000000000404674\n.text:0000000000404677\n.text:000000000040467a\n.text:000000000040467c\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404689\n.text:000000000040468c\n.text:0000000000404692\n.text:0000000000404697\n.text:000000000040469a\n.text:000000000040469f\n.text:00000000004046a4\n.text:00000000004046a9\n.text:00000000004046af\n.text:00000000004046b5\n.text:00000000004046b8\n.text:00000000004046ba\n.text:00000000004046bc\n.text:00000000004046c1\n.text:00000000004046c5\n.text:00000000004046c7\n.text:00000000004046c9\n.text:00000000004046cc\n.text:00000000004046d1\n.text:00000000004046d6\n.text:00000000004046d8\n.text:00000000004046dd\n.text:00000000004046e2\n.text:00000000004046e7\n.text:00000000004046ed\n.text:00000000004046f3\n.text:00000000004046f6\n.text:00000000004046f8\n.text:00000000004046fa\n.text:00000000004046ff\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404707\n.text:000000000040470a\n.text:000000000040470f\n.text:0000000000404714\n.text:0000000000404716\n.text:000000000040471a\n.text:000000000040471f\n.text:0000000000404724\n.text:0000000000404728\n.text:0000000000404729\n.text:000000000040472b\n.text:000000000040472c\n'
p594
tp595
sS'fclose'
p596
(S'\n__stdcall fclose(FILE * __stream)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a078)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060a078]\n'
p599
S'ff 25 52 8d 20 00\n'
p600
S'.plt:0000000000401320\n'
p601
tp602
sS'__ctype_get_mb_cur_max'
p603
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0060a090]\n'
p606
S'ff 25 3a 8d 20 00\n'
p607
S'.plt:0000000000401350\n'
p608
tp609
sS'lstat'
p610
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p611
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060a0a0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401370\n'
p613
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 00 b4 ff ff\n'
p614
S'.text:0000000000405f60\n.text:0000000000405f63\n.text:0000000000405f66\n.text:0000000000405f6b\n'
p615
tp616
sS'three_arguments'
p617
(S'\n__stdcall three_arguments()\n'
p618
V\u000a_Bool three_arguments(void)\u000a\u000a{\u000a  char **ppcVar1;\u000a  _Bool _Var2;\u000a  char *format;\u000a  char *pcVar3;\u000a  long lVar4;\u000a  \u000a  ppcVar1 = argv;\u000a  lVar4 = (long)pos;\u000a  _Var2 = binop(argv[lVar4 + 1]);\u000a  if (_Var2 == false) {\u000a    if ((*ppcVar1[lVar4] == '!') && (ppcVar1[lVar4][1] == 0)) {\u000a      advance(1);\u000a      _Var2 = two_arguments();\u000a      _Var2 = (_Bool)(_Var2 ^ 1);\u000a    }\u000a    else {\u000a      if ((((*argv[(long)pos] == '(') && (argv[(long)pos][1] == 0)) && (*argv[(long)pos + 2] == ')')\u000a          ) && (argv[(long)pos + 2][1] == 0)) {\u000a        advance(0);\u000a        _Var2 = one_argument();\u000a        advance(0);\u000a      }\u000a      else {\u000a        format = argv[(long)pos + 1];\u000a        if ((((*format != '-') || (format[1] != 'a')) || (format[2] != 0)) &&\u000a           (((format = argv[(long)pos + 1], *format != '-' || (format[1] != 'o')) ||\u000a            (format[2] != 0)))) {\u000a          format = (char *)dcgettext(0,"%s: binary operator expected",5);\u000a          pcVar3 = quote(argv[(long)pos + 1]);\u000a                    /* WARNING: Subroutine does not return */\u000a          test_syntax_error(format,pcVar3);\u000a        }\u000a        _Var2 = expr();\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    _Var2 = binary_operator();\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p619
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,qword ptr [0x0060a290]\nMOVSXD RBX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [R14 + RBX*0x8 + 0x8]\nCALL 0x00402660\nTEST AL,AL\nJZ 0x00401e7c\nXOR EDI,EDI\nCALL 0x004027c0\nJMP 0x00401f17\nMOV RAX,qword ptr [R14 + RBX*0x8]\nCMP byte ptr [RAX],0x21\nJNZ 0x00401e8f\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00401f23\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RAX],0x28\nJNZ 0x00401eca\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00401eca\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + 0x10]\nCMP byte ptr [RAX],0x29\nJNZ 0x00401eca\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00401f39\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401eee\nCMP byte ptr [RAX + 0x1],0x61\nJNZ 0x00401eee\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x00401f12\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8 + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401f50\nCMP byte ptr [RAX + 0x1],0x6f\nJNZ 0x00401f50\nCMP byte ptr [RAX + 0x2],0x0\nJNZ 0x00401f50\nCALL 0x00401fc0\nMOV EBX,EAX\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x1\nCALL 0x00401f90\nCALL 0x00401db0\nMOV EBX,EAX\nXOR BL,0x1\nJMP 0x00401f19\nXOR EDI,EDI\nCALL 0x00401f90\nCALL 0x00401d80\nMOV EBX,EAX\nXOR EDI,EDI\nCALL 0x00401f90\nJMP 0x00401f19\nXOR EDI,EDI\nMOV ESI,0x406fa5\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8 + 0x8]\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\n'
p620
S'41 56\n53\n50\n4c 8b 35 35 84 20 00\n48 63 1d 3a 84 20 00\n49 8b 7c de 08\ne8 f4 07 00 00\n84 c0\n74 0c\n31 ff\ne8 49 09 00 00\ne9 9b 00 00 00\n49 8b 04 de\n80 38 21\n75 0a\n80 78 01 00\n0f 84 94 00 00 00\n48 8b 05 fa 83 20 00\n48 63 0d ff 83 20 00\n48 8b 04 c8\n80 38 28\n75 24\n80 78 01 00\n75 1e\n48 8b 05 dd 83 20 00\n48 63 0d e2 83 20 00\n48 8b 44 c8 10\n80 38 29\n75 06\n80 78 01 00\n74 6f\n48 8b 05 bf 83 20 00\n48 63 0d c4 83 20 00\n48 8b 44 c8 08\n80 38 2d\n75 0c\n80 78 01 61\n75 06\n80 78 02 00\n74 24\n48 8b 05 9b 83 20 00\n48 63 0d a0 83 20 00\n48 8b 44 c8 08\n80 38 2d\n75 4a\n80 78 01 6f\n75 44\n80 78 02 00\n75 3e\ne8 a9 00 00 00\n89 c3\n89 d8\n48 83 c4 08\n5b\n41 5e\nc3\nbf 01 00 00 00\ne8 63 00 00 00\ne8 7e fe ff ff\n89 c3\n80 f3 01\neb e0\n31 ff\ne8 50 00 00 00\ne8 3b fe ff ff\n89 c3\n31 ff\ne8 42 00 00 00\neb c9\n31 ff\nbe a5 6f 40 00\nba 05 00 00 00\ne8 df f3 ff ff\n48 89 c3\n48 8b 05 25 83 20 00\n48 63 0d 2a 83 20 00\n48 8b 7c c8 08\ne8 e4 26 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 84 fc ff ff\n'
p621
S'.text:0000000000401e50\n.text:0000000000401e52\n.text:0000000000401e53\n.text:0000000000401e54\n.text:0000000000401e5b\n.text:0000000000401e62\n.text:0000000000401e67\n.text:0000000000401e6c\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e72\n.text:0000000000401e77\n.text:0000000000401e7c\n.text:0000000000401e80\n.text:0000000000401e83\n.text:0000000000401e85\n.text:0000000000401e89\n.text:0000000000401e8f\n.text:0000000000401e96\n.text:0000000000401e9d\n.text:0000000000401ea1\n.text:0000000000401ea4\n.text:0000000000401ea6\n.text:0000000000401eaa\n.text:0000000000401eac\n.text:0000000000401eb3\n.text:0000000000401eba\n.text:0000000000401ebf\n.text:0000000000401ec2\n.text:0000000000401ec4\n.text:0000000000401ec8\n.text:0000000000401eca\n.text:0000000000401ed1\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401ee0\n.text:0000000000401ee2\n.text:0000000000401ee6\n.text:0000000000401ee8\n.text:0000000000401eec\n.text:0000000000401eee\n.text:0000000000401ef5\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f04\n.text:0000000000401f06\n.text:0000000000401f0a\n.text:0000000000401f0c\n.text:0000000000401f10\n.text:0000000000401f12\n.text:0000000000401f17\n.text:0000000000401f19\n.text:0000000000401f1b\n.text:0000000000401f1f\n.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f23\n.text:0000000000401f28\n.text:0000000000401f2d\n.text:0000000000401f32\n.text:0000000000401f34\n.text:0000000000401f37\n.text:0000000000401f39\n.text:0000000000401f3b\n.text:0000000000401f40\n.text:0000000000401f45\n.text:0000000000401f47\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f50\n.text:0000000000401f52\n.text:0000000000401f57\n.text:0000000000401f5c\n.text:0000000000401f61\n.text:0000000000401f64\n.text:0000000000401f6b\n.text:0000000000401f72\n.text:0000000000401f77\n.text:0000000000401f7c\n.text:0000000000401f7f\n.text:0000000000401f81\n.text:0000000000401f84\n.text:0000000000401f87\n'
p622
tp623
sS'quotearg_n_style'
p624
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p625
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004043a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404170\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p627
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p628
S'.text:0000000000404360\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404364\n.text:0000000000404368\n.text:000000000040436b\n.text:000000000040436d\n.text:0000000000404372\n.text:0000000000404375\n.text:000000000040437a\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404386\n.text:0000000000404389\n.text:000000000040438e\n.text:0000000000404392\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404396\n'
p629
tp630
sS'xsum'
p631
(S'\n__stdcall xsum(size_t size1, size_t size2)\n'
p632
V\u000asize_t xsum(size_t size1,size_t size2)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = 0xffffffffffffffff;\u000a  if (size1 <= size2 + size1) {\u000a    sVar1 = size2 + size1;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p633
S'ADD RSI,RDI\nCMP RSI,RDI\nMOV RAX,-0x1\nCMOVNC RAX,RSI\nRET\n'
p634
S'48 01 fe\n48 39 fe\n48 c7 c0 ff ff ff ff\n48 0f 43 c6\nc3\n'
p635
S'.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce6\n.text:0000000000405ced\n.text:0000000000405cf1\n'
p636
tp637
sS'quote_n'
p638
(S'\n__stdcall quote_n(char * arg)\n'
p639
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'MOV RDX,-0x1\nJMP 0x00404630\n'
p641
S'48 c7 c2 ff ff ff ff\neb d7\n'
p642
S'.text:0000000000404650\n.text:0000000000404657\n'
p643
tp644
sS'test_syntax_error'
p645
(S'\n__stdcall test_syntax_error(char * format)\n'
p646
V\u000avoid test_syntax_error(char *format,...)\u000a\u000a{\u000a  va_list ap;\u000a  \u000a  verror((char *)0x0,(__va_list_tag *)0x0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(2);\u000a}\u000a\u000a
p647
S'SUB RSP,0xd8\nMOV R10,RDI\nTEST AL,AL\nJZ 0x00401c55\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RCX,RSP\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R10\nCALL 0x00404e70\nMOV EDI,0x2\nCALL 0x00401580\n'
p648
S'48 81 ec d8 00 00 00\n49 89 fa\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 89 e1\n31 ff\n31 f6\n4c 89 d2\ne8 cd 31 00 00\nbf 02 00 00 00\ne8 d3 f8 ff ff\n'
p649
S'.text:0000000000401c10\n.text:0000000000401c17\n.text:0000000000401c1a\n.text:0000000000401c1c\n.text:0000000000401c1e\n.text:0000000000401c23\n.text:0000000000401c28\n.text:0000000000401c2d\n.text:0000000000401c35\n.text:0000000000401c3d\n.text:0000000000401c45\n.text:0000000000401c4d\n.text:0000000000401c55\n.text:0000000000401c5a\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c73\n.text:0000000000401c78\n.text:0000000000401c80\n.text:0000000000401c85\n.text:0000000000401c8d\n.text:0000000000401c94\n.text:0000000000401c97\n.text:0000000000401c99\n.text:0000000000401c9b\n.text:0000000000401c9e\n.text:0000000000401ca3\n.text:0000000000401ca8\n'
p650
tp651
sS'quotearg_alloc'
p652
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p653
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p654
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403fe0\n'
p655
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p656
S'.text:0000000000403fd0\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fd8\n'
p657
tp658
sS'close_stdout_set_file_name'
p659
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p660
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p661
S'MOV qword ptr [0x0060a2a0],RDI\nRET\n'
p662
S'48 89 3d 69 72 20 00\nc3\n'
p663
S'.text:0000000000403030\n.text:0000000000403037\n'
p664
tp665
sS'FUN_00401250'
p666
(S'\n__stdcall FUN_00401250()\n'
p667
V\u000avoid FUN_00401250(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p668
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p669
S'ff 35 b2 8d 20 00\nff 25 b4 8d 20 00\n'
p670
S'.plt:0000000000401250\n.plt:0000000000401256\n'
p671
tp672
sS'__libc_csu_init'
p673
(S'\n__stdcall __libc_csu_init()\n'
p674
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p675
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401238\nTEST RBP,RBP\nJZ 0x00405ef6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405ee0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p676
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 56 3f 20 00\n55\n48 8d 2d 56 3f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 67 b3 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p677
S'.text:0000000000405ea0\n.text:0000000000405ea2\n.text:0000000000405ea4\n.text:0000000000405ea7\n.text:0000000000405ea9\n.text:0000000000405eab\n.text:0000000000405eb2\n.text:0000000000405eb3\n.text:0000000000405eba\n.text:0000000000405ebb\n.text:0000000000405ebe\n.text:0000000000405ec1\n.text:0000000000405ec4\n.text:0000000000405ec8\n.text:0000000000405ecc\n.text:0000000000405ed1\n.text:0000000000405ed4\n.text:0000000000405ed6\n.text:0000000000405ed8\n.text:0000000000405ee0\n.text:0000000000405ee3\n.text:0000000000405ee6\n.text:0000000000405ee9\n.text:0000000000405eed\n.text:0000000000405ef1\n.text:0000000000405ef4\n.text:0000000000405ef6\n.text:0000000000405efa\n.text:0000000000405efb\n.text:0000000000405efc\n.text:0000000000405efe\n.text:0000000000405f00\n.text:0000000000405f02\n.text:0000000000405f04\n'
p678
tp679
sS'c_isdigit'
p680
(S'\n__stdcall c_isdigit()\n'
p681
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p682
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p683
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p684
S'.text:0000000000405870\n.text:0000000000405873\n.text:0000000000405876\n.text:0000000000405879\n'
p685
tp686
sS'usage'
p687
(S'\n__stdcall usage()\n'
p688
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  char *__s;\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  if (iParm1 == 0) {\u000a    __s = (char *)dcgettext(0,\u000a                            "Usage: test EXPRESSION\u005cn  or:  test\u005cn  or:  [ EXPRESSION ]\u005cn  or:  [ ]\u005cn  or:  [ OPTION\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"Exit with the status determined by EXPRESSION.\u005cn\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnAn omitted EXPRESSION defaults to false.  Otherwise,\u005cnEXPRESSION is true or false and sets exit status.  It is one of:\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  ( EXPRESSION )               EXPRESSION is true\u005cn  ! EXPRESSION                 EXPRESSION is false\u005cn  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\u005cn  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -n STRING            the length of STRING is nonzero\u005cn  STRING               equivalent to -n STRING\u005cn  -z STRING            the length of STRING is zero\u005cn  STRING1 = STRING2    the strings are equal\u005cn  STRING1 != STRING2   the strings are not equal\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\u005cn  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\u005cn  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\u005cn  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER2\u005cn  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2\u005cn  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\u005cn  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\u005cn  FILE1 -ot FILE2   FILE1 is older than FILE2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -b FILE     FILE exists and is block special\u005cn  -c FILE     FILE exists and is character special\u005cn  -d FILE     FILE exists and is a directory\u005cn  -e FILE     FILE exists\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f FILE     FILE exists and is a regular file\u005cn  -g FILE     FILE exists and is set-group-ID\u005cn  -G FILE     FILE exists and is owned by the effective group ID\u005cn  -h FILE     FILE exists and is a symbolic link (same as -L)\u005cn  -k FILE     FILE exists and has its sticky bit set\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -L FILE     FILE exists and is a symbolic link (same as -h)\u005cn  -O FILE     FILE exists and is owned by the effective user ID\u005cn  -p FILE     FILE exists and is a named pipe\u005cn  -r FILE     FILE exists and read permission is granted\u005cn  -s FILE     FILE exists and has a size greater than zero\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -S FILE     FILE exists and is a socket\u005cn  -t FD       file descriptor FD is opened on a terminal\u005cn  -u FILE     FILE exists and its set-user-ID bit is set\u005cn  -w FILE     FILE exists and write permission is granted\u005cn  -x FILE     FILE exists and execute (or search) permission is granted\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnExcept for -h and -L, all FILE-related tests dereference symbolic links.\u005cnBeware that parentheses need to be escaped (e.g., by backslashes) for shells.\u005cnINTEGER may also be -l STRING, which evaluates to the length of STRING.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnNOTE: [ honors the --help and --version options, but test does not.\u005cntest treats each of those as it treats any other nonempty STRING.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnNOTE: your shell may have its own version of %s, which usually supersedes\u005cnthe version described here.  Please refer to your shell\u005c's documentation\u005cnfor details about the options it supports.\u005cn"\u000a                      ,5);\u000a    uVar2 = dcgettext(0,"test and/or [",5);\u000a    __printf_chk(1,uVar1,uVar2,uVar2);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nTEST EBP,EBP\nJNZ 0x00401913\nXOR EDI,EDI\nMOV ESI,0x4061c0\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406215\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406246\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406273\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x4062a9\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406321\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x40641a\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406514\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x40668c\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406749\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x4067f4\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406907\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406a28\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406b47\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406c28\nMOV EDX,0x5\nCALL 0x00401340\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x406cb0\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406d6f\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401520\nCALL 0x00401960\nMOV EDI,EBP\nCALL 0x00401580\nCALL 0x00401920\nMOV EDI,EBP\nCALL 0x00401580\n'
p690
S'55\n53\n50\n89 fd\n85 ed\n0f 85 26 02 00 00\n31 ff\nbe c0 61 40 00\nba 05 00 00 00\ne8 42 fc ff ff\n48 8b 35 63 8b 20 00\n48 89 c7\ne8 f3 fc ff ff\n31 ff\nbe 15 62 40 00\nba 05 00 00 00\ne8 22 fc ff ff\n48 8b 35 43 8b 20 00\n48 89 c7\ne8 d3 fc ff ff\n31 ff\nbe 46 62 40 00\nba 05 00 00 00\ne8 02 fc ff ff\n48 8b 35 23 8b 20 00\n48 89 c7\ne8 b3 fc ff ff\n31 ff\nbe 73 62 40 00\nba 05 00 00 00\ne8 e2 fb ff ff\n48 8b 35 03 8b 20 00\n48 89 c7\ne8 93 fc ff ff\n31 ff\nbe a9 62 40 00\nba 05 00 00 00\ne8 c2 fb ff ff\n48 8b 35 e3 8a 20 00\n48 89 c7\ne8 73 fc ff ff\n31 ff\nbe 21 63 40 00\nba 05 00 00 00\ne8 a2 fb ff ff\n48 8b 35 c3 8a 20 00\n48 89 c7\ne8 53 fc ff ff\n31 ff\nbe 1a 64 40 00\nba 05 00 00 00\ne8 82 fb ff ff\n48 8b 35 a3 8a 20 00\n48 89 c7\ne8 33 fc ff ff\n31 ff\nbe 14 65 40 00\nba 05 00 00 00\ne8 62 fb ff ff\n48 8b 35 83 8a 20 00\n48 89 c7\ne8 13 fc ff ff\n31 ff\nbe 8c 66 40 00\nba 05 00 00 00\ne8 42 fb ff ff\n48 8b 35 63 8a 20 00\n48 89 c7\ne8 f3 fb ff ff\n31 ff\nbe 49 67 40 00\nba 05 00 00 00\ne8 22 fb ff ff\n48 8b 35 43 8a 20 00\n48 89 c7\ne8 d3 fb ff ff\n31 ff\nbe f4 67 40 00\nba 05 00 00 00\ne8 02 fb ff ff\n48 8b 35 23 8a 20 00\n48 89 c7\ne8 b3 fb ff ff\n31 ff\nbe 07 69 40 00\nba 05 00 00 00\ne8 e2 fa ff ff\n48 8b 35 03 8a 20 00\n48 89 c7\ne8 93 fb ff ff\n31 ff\nbe 28 6a 40 00\nba 05 00 00 00\ne8 c2 fa ff ff\n48 8b 35 e3 89 20 00\n48 89 c7\ne8 73 fb ff ff\n31 ff\nbe 47 6b 40 00\nba 05 00 00 00\ne8 a2 fa ff ff\n48 8b 35 c3 89 20 00\n48 89 c7\ne8 53 fb ff ff\n31 ff\nbe 28 6c 40 00\nba 05 00 00 00\ne8 82 fa ff ff\n48 8b 35 a3 89 20 00\n48 89 c7\ne8 33 fb ff ff\n31 ff\nbe b0 6c 40 00\nba 05 00 00 00\ne8 62 fa ff ff\n48 89 c3\n31 ff\nbe 6f 6d 40 00\nba 05 00 00 00\ne8 4e fa ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 19 fc ff ff\ne8 54 00 00 00\n89 ef\ne8 6d fc ff ff\ne8 08 00 00 00\n89 ef\ne8 61 fc ff ff\n'
p691
S'.text:00000000004016e0\n.text:00000000004016e1\n.text:00000000004016e2\n.text:00000000004016e3\n.text:00000000004016e5\n.text:00000000004016e7\n.text:00000000004016ed\n.text:00000000004016ef\n.text:00000000004016f4\n.text:00000000004016f9\n.text:00000000004016fe\n.text:0000000000401705\n.text:0000000000401708\n.text:000000000040170d\n.text:000000000040170f\n.text:0000000000401714\n.text:0000000000401719\n.text:000000000040171e\n.text:0000000000401725\n.text:0000000000401728\n.text:000000000040172d\n.text:000000000040172f\n.text:0000000000401734\n.text:0000000000401739\n.text:000000000040173e\n.text:0000000000401745\n.text:0000000000401748\n.text:000000000040174d\n.text:000000000040174f\n.text:0000000000401754\n.text:0000000000401759\n.text:000000000040175e\n.text:0000000000401765\n.text:0000000000401768\n.text:000000000040176d\n.text:000000000040176f\n.text:0000000000401774\n.text:0000000000401779\n.text:000000000040177e\n.text:0000000000401785\n.text:0000000000401788\n.text:000000000040178d\n.text:000000000040178f\n.text:0000000000401794\n.text:0000000000401799\n.text:000000000040179e\n.text:00000000004017a5\n.text:00000000004017a8\n.text:00000000004017ad\n.text:00000000004017af\n.text:00000000004017b4\n.text:00000000004017b9\n.text:00000000004017be\n.text:00000000004017c5\n.text:00000000004017c8\n.text:00000000004017cd\n.text:00000000004017cf\n.text:00000000004017d4\n.text:00000000004017d9\n.text:00000000004017de\n.text:00000000004017e5\n.text:00000000004017e8\n.text:00000000004017ed\n.text:00000000004017ef\n.text:00000000004017f4\n.text:00000000004017f9\n.text:00000000004017fe\n.text:0000000000401805\n.text:0000000000401808\n.text:000000000040180d\n.text:000000000040180f\n.text:0000000000401814\n.text:0000000000401819\n.text:000000000040181e\n.text:0000000000401825\n.text:0000000000401828\n.text:000000000040182d\n.text:000000000040182f\n.text:0000000000401834\n.text:0000000000401839\n.text:000000000040183e\n.text:0000000000401845\n.text:0000000000401848\n.text:000000000040184d\n.text:000000000040184f\n.text:0000000000401854\n.text:0000000000401859\n.text:000000000040185e\n.text:0000000000401865\n.text:0000000000401868\n.text:000000000040186d\n.text:000000000040186f\n.text:0000000000401874\n.text:0000000000401879\n.text:000000000040187e\n.text:0000000000401885\n.text:0000000000401888\n.text:000000000040188d\n.text:000000000040188f\n.text:0000000000401894\n.text:0000000000401899\n.text:000000000040189e\n.text:00000000004018a5\n.text:00000000004018a8\n.text:00000000004018ad\n.text:00000000004018af\n.text:00000000004018b4\n.text:00000000004018b9\n.text:00000000004018be\n.text:00000000004018c5\n.text:00000000004018c8\n.text:00000000004018cd\n.text:00000000004018cf\n.text:00000000004018d4\n.text:00000000004018d9\n.text:00000000004018de\n.text:00000000004018e1\n.text:00000000004018e3\n.text:00000000004018e8\n.text:00000000004018ed\n.text:00000000004018f2\n.text:00000000004018f5\n.text:00000000004018fa\n.text:00000000004018fc\n.text:00000000004018ff\n.text:0000000000401902\n.text:0000000000401907\n.text:000000000040190c\n.text:000000000040190e\n.text:0000000000401913\n.text:0000000000401918\n.text:000000000040191a\n'
p692
tp693
sS'get_stat_ctime_ns'
p694
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p695
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p696
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p697
S'48 8b 47 70\nc3\n'
p698
S'.text:0000000000404a80\n.text:0000000000404a84\n'
p699
tp700
sS'quoting_options_from_style'
p701
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p702
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p703
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004043ed\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401280\n'
p704
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 8e ce ff ff\n'
p705
S'.text:00000000004043a0\n.text:00000000004043a4\n.text:00000000004043a7\n.text:00000000004043ac\n.text:00000000004043b1\n.text:00000000004043b5\n.text:00000000004043bd\n.text:00000000004043c0\n.text:00000000004043c2\n.text:00000000004043c4\n.text:00000000004043c8\n.text:00000000004043cb\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043dd\n.text:00000000004043e1\n.text:00000000004043e5\n.text:00000000004043e8\n.text:00000000004043ec\n.text:00000000004043ed\n'
p706
tp707
sS'beyond'
p708
(S'\n__stdcall beyond()\n'
p709
V\u000avoid beyond(void)\u000a\u000a{\u000a  char *format;\u000a  char *pcVar1;\u000a  \u000a  format = (char *)dcgettext(0,"missing argument after %s",5);\u000a  pcVar1 = quote(argv[(long)argc + -1]);\u000a                    /* WARNING: Subroutine does not return */\u000a  test_syntax_error(format,pcVar1);\u000a}\u000a\u000a
p710
S'PUSH RBX\nXOR EDI,EDI\nMOV ESI,0x406f85\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a298]\nMOV RDI,qword ptr [RAX + RCX*0x8 + -0x8]\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\n'
p711
S'53\n31 ff\nbe 85 6f 40 00\nba 05 00 00 00\ne8 2e ee ff ff\n48 89 c3\n48 8b 05 74 7d 20 00\n48 63 0d 75 7d 20 00\n48 8b 7c c8 f8\ne8 33 21 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 d3 f6 ff ff\n'
p712
S'.text:0000000000402500\n.text:0000000000402501\n.text:0000000000402503\n.text:0000000000402508\n.text:000000000040250d\n.text:0000000000402512\n.text:0000000000402515\n.text:000000000040251c\n.text:0000000000402523\n.text:0000000000402528\n.text:000000000040252d\n.text:0000000000402530\n.text:0000000000402532\n.text:0000000000402535\n.text:0000000000402538\n'
p713
tp714
sS'strcpy'
p715
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060a050]\n'
p718
S'ff 25 7a 8d 20 00\n'
p719
S'.plt:00000000004012d0\n'
p720
tp721
sS'xsum4'
p722
(S'\n__stdcall xsum4(size_t size1, size_t size2, size_t size3, size_t size4)\n'
p723
V\u000asize_t xsum4(size_t size1,size_t size2,size_t size3,size_t size4)\u000a\u000a{\u000a  size_t size1_00;\u000a  \u000a  size1_00 = xsum(size1,size2);\u000a  size1_00 = xsum(size1_00,size3);\u000a  size1_00 = xsum(size1_00,size4);\u000a  return size1_00;\u000a}\u000a\u000a
p724
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV RBX,RDX\nCALL 0x00405ce0\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00405ce0\nMOV RDI,RAX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00405ce0\n'
p725
S'41 56\n53\n50\n49 89 ce\n48 89 d3\ne8 b1 ff ff ff\n48 89 c7\n48 89 de\ne8 a6 ff ff ff\n48 89 c7\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\neb 97\n'
p726
S'.text:0000000000405d20\n.text:0000000000405d22\n.text:0000000000405d23\n.text:0000000000405d24\n.text:0000000000405d27\n.text:0000000000405d2a\n.text:0000000000405d2f\n.text:0000000000405d32\n.text:0000000000405d35\n.text:0000000000405d3a\n.text:0000000000405d3d\n.text:0000000000405d40\n.text:0000000000405d44\n.text:0000000000405d45\n.text:0000000000405d47\n'
p727
tp728
sS'get_stat_mtime_ns'
p729
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p730
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p731
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p732
S'48 8b 47 60\nc3\n'
p733
S'.text:0000000000404a90\n.text:0000000000404a94\n'
p734
tp735
sS'xsum3'
p736
(S'\n__stdcall xsum3(size_t size1, size_t size2, size_t size3)\n'
p737
V\u000asize_t xsum3(size_t size1,size_t size2,size_t size3)\u000a\u000a{\u000a  size_t size1_00;\u000a  \u000a  size1_00 = xsum(size1,size2);\u000a  size1_00 = xsum(size1_00,size3);\u000a  return size1_00;\u000a}\u000a\u000a
p738
S'PUSH RBX\nMOV RBX,RDX\nCALL 0x00405ce0\nMOV RDI,RAX\nMOV RSI,RBX\nPOP RBX\nJMP 0x00405ce0\n'
p739
S'53\n48 89 d3\ne8 d7 ff ff ff\n48 89 c7\n48 89 de\n5b\neb ce\n'
p740
S'.text:0000000000405d00\n.text:0000000000405d01\n.text:0000000000405d04\n.text:0000000000405d09\n.text:0000000000405d0c\n.text:0000000000405d0f\n.text:0000000000405d10\n'
p741
tp742
sS'get_stat_atime_ns'
p743
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p744
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p745
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p746
S'48 8b 47 50\nc3\n'
p747
S'.text:0000000000404a70\n.text:0000000000404a74\n'
p748
tp749
sS'c_isgraph'
p750
(S'\n__stdcall c_isgraph()\n'
p751
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p752
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p753
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p754
S'.text:0000000000405880\n.text:0000000000405883\n.text:0000000000405886\n.text:0000000000405889\n'
p755
tp756
sS'quotearg_buffer_restyled'
p757
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p758
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040341c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040341c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040341c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040341c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040341c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040341c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040341c_caseD_7;\u000aswitchD_0040341c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040341c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040341c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403ee0;\u000aLAB_00403600:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403ee9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403ef8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040360b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040364f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040364f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403ef8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403e25;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403d30;\u000a    }\u000a    goto LAB_00403ef8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403e5a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403ef8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403e89;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403948;\u000a  case '\u005ca':\u000a    goto joined_r0x00403838;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403838;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403666_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403838;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403838;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403666_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403838:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403d9e;\u000a    }\u000a    goto LAB_00403ef8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403ef8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403ef8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403ef8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403ef8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403ef8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403666_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403df6;\u000a      goto joined_r0x00403de8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004038f1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403de8;\u000a      goto LAB_00403df6;\u000a    }\u000a    goto LAB_00403ef8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403ef8;\u000a  }\u000a  goto joined_r0x00403d30;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403e5a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403e89;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403e89:\u000a  if (1 < uVar10) {\u000aLAB_00403966:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403a22;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004038f1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403a22:\u000a        if (bVar6 != 0) goto LAB_00403ef8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403948:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403966;\u000ajoined_r0x00403d30:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403d30:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403d57;\u000aLAB_00403d90:\u000a    if (bVar22) goto LAB_00403d95;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403d90;\u000aLAB_00403d57:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403d95:\u000a      if (bVar6 != 0) goto LAB_00403ef8;\u000aLAB_00403d9e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403de8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403df6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403de8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403e25:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403600;\u000aLAB_00403ee0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403ee9;\u000a  goto LAB_0040360b;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401350\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403fc5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4070d0 + RAX*0x8]\nMOV EDI,0x4075f8\nMOV ESI,R15D\nCALL 0x00404670\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4075fa\nMOV ESI,R15D\nCALL 0x00404670\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040347d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403480\nNOP\nCMP R12,RSI\nJNC 0x0040346e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403460\nJMP 0x00403480\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401360\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040354c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040354c\nMOV ECX,0x4075f6\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403546\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004034e7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403514\nTEST RSI,RSI\nJZ 0x00403501\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4075fa\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403522\nMOV ECX,0x4075fa\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040354c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403f9c\nMOV ECX,0x4075f6\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403ee0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403ee9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040364f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040364a\nCMP R11,-0x1\nJNZ 0x0040364a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401360\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004036a0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004038fc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x407128 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403ef8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403d50\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403d57\nJMP 0x00403d90\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004013f0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004036ed\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403651\nJMP 0x00403ef8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403651\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040367b\nCMP EBX,0x2\nJNZ 0x0040367b\nTEST R13,R13\nJNZ 0x0040367b\nJMP 0x00403ef8\nCMP R11,-0x1\nJZ 0x00403ad3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403af3\nJMP 0x0040367b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b04\nTEST R8B,R8B\nJNZ 0x00403ef8\nCMP EBX,0x2\nJNZ 0x004037a8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004037a8\nCMP R12,RSI\nJNC 0x00403783\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403792\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004037a1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004037b2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403c78\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403c78\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403c78\nCMP RCX,RSI\nJNC 0x004037ec\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004037fb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nJMP 0x00403d50\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403679\nJMP 0x0040385a\nMOV DL,0x74\nJMP 0x00403842\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403679\nJMP 0x0040385a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403679\nJMP 0x0040385a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403ef8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403679\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403d9e\nJMP 0x00403ef8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403679\nTEST R8B,R8B\nJNZ 0x00403ef8\nCMP R12,RSI\nJNC 0x0040388a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403899\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004038a8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403679\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403c8b\nCMP EBX,0x2\nJNZ 0x00403679\nTEST R8B,R8B\nJZ 0x00403679\nJMP 0x00403ef8\nCMP EBX,0x2\nJNZ 0x00403b24\nTEST R8B,R8B\nJNZ 0x00403ef8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403df6\nJMP 0x00403e19\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403b45\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004015d0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403d38\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403d38\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403a22\nJMP 0x004039f0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004039d9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004039d6\nCMP R12,RSI\nJNC 0x004039bb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004039ca\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403a10\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403a10\nTEST BPL,0x1\nJZ 0x00403ab3\nCMP R12,RSI\nJNC 0x00403a04\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403ab3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004039f0\nTEST R8B,R8B\nJNZ 0x00403ef8\nCMP EBX,0x2\nJNZ 0x00403a6a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403a6a\nCMP R12,RSI\nJNC 0x00403a42\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a51\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a60\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403a74\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a8b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403aa5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004039a0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403df6\nJMP 0x00403e19\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040367b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040367b\nJMP 0x00403ef8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403e25\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nJMP 0x00403d50\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403842\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403df6\nJMP 0x00403e19\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403b67\nMOV RDI,R10\nCALL 0x00401360\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401380\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403e3f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403e37\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403e46\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403c2e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403c26\nBT RDI,RDX\nJC 0x00403f92\nINC RCX\nCMP RCX,R14\nJC 0x00403c10\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004015c0\nTEST EAX,EAX\nJNZ 0x00403c43\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004015b0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403b85\nJMP 0x00403e89\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nJMP 0x00403d50\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403679\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403679\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403679\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040367b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403ec2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403ef8\nCMP R12,RSI\nJNC 0x00403cee\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403d01\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403d10\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403d1f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nJMP 0x00403d50\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403d90\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403d95\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403df0\nJMP 0x00403d95\nTEST BPL,BPL\nJZ 0x00403df0\nTEST R8B,R8B\nJNZ 0x00403ef8\nCMP EBX,0x2\nJNZ 0x00403dd8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403dd8\nCMP R12,RSI\nJNC 0x00403db3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403dc2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403dd1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403de2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403e22\nJMP 0x00403e1e\nTEST DIL,0x1\nJZ 0x00403e19\nAND AL,0x1\nJNZ 0x00403e19\nCMP R12,RSI\nJNC 0x00403e04\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403e13\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403e22\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403ee0\nJMP 0x00403600\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403e84\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403e7c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403eb8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403e5a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403e89\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403948\nJMP 0x00403966\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403e89\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403686\nJMP 0x00403d50\nCMP R13,R11\nJNZ 0x0040360b\nTEST R8B,R8B\nJZ 0x00403f52\nCMP EBX,0x2\nJNZ 0x00403f52\nTEST R12,R12\nJNZ 0x00403f52\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403390\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403f86\nTEST R8B,R8B\nJNZ 0x00403f86\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403f86\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403f79\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403f70\nCMP R12,RSI\nJNC 0x00403f3d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403f3d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403ef8\nTEST RSI,RSI\nJZ 0x00403fa9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x4075f6\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040354c\nCALL 0x00401280\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 92 df ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 d0 70 40 00\nbf f8 75 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf fa 75 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 d3 de ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 f6 75 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 fa 75 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 fa 75 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 f6 75 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 33 dd ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 28 71 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 37 dd ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 b7 dc ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 01 d8 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 d3 d7 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 89 d9 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 52 d9 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 f6 75 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 b6 d2 ff ff\n'
p761
S'.text:0000000000403390\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403395\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339a\n.text:00000000004033a1\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033aa\n.text:00000000004033af\n.text:00000000004033b4\n.text:00000000004033b9\n.text:00000000004033be\n.text:00000000004033c6\n.text:00000000004033ca\n.text:00000000004033d0\n.text:00000000004033d8\n.text:00000000004033dd\n.text:00000000004033e5\n.text:00000000004033ea\n.text:00000000004033ee\n.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f6\n.text:00000000004033f9\n.text:00000000004033fe\n.text:0000000000403401\n.text:0000000000403404\n.text:0000000000403407\n.text:000000000040340a\n.text:000000000040340c\n.text:000000000040340f\n.text:0000000000403414\n.text:0000000000403417\n.text:000000000040341c\n.text:0000000000403423\n.text:0000000000403428\n.text:000000000040342b\n.text:0000000000403430\n.text:0000000000403435\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403442\n.text:0000000000403447\n.text:000000000040344c\n.text:000000000040344e\n.text:0000000000403450\n.text:0000000000403455\n.text:0000000000403457\n.text:000000000040345a\n.text:000000000040345c\n.text:000000000040345e\n.text:0000000000403460\n.text:0000000000403463\n.text:0000000000403465\n.text:000000000040346a\n.text:000000000040346e\n.text:0000000000403474\n.text:0000000000403477\n.text:0000000000403479\n.text:000000000040347b\n.text:000000000040347d\n.text:0000000000403480\n.text:0000000000403485\n.text:0000000000403488\n.text:000000000040348d\n.text:0000000000403492\n.text:0000000000403495\n.text:0000000000403498\n.text:000000000040349b\n.text:000000000040349e\n.text:00000000004034a3\n.text:00000000004034a6\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b3\n.text:00000000004034b6\n.text:00000000004034b8\n.text:00000000004034ba\n.text:00000000004034bd\n.text:00000000004034c2\n.text:00000000004034c7\n.text:00000000004034cc\n.text:00000000004034cf\n.text:00000000004034d5\n.text:00000000004034d7\n.text:00000000004034da\n.text:00000000004034dd\n.text:00000000004034e0\n.text:00000000004034e2\n.text:00000000004034e4\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034ef\n.text:00000000004034f2\n.text:00000000004034f4\n.text:00000000004034f7\n.text:00000000004034f9\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403506\n.text:000000000040350c\n.text:0000000000403512\n.text:0000000000403514\n.text:0000000000403519\n.text:000000000040351f\n.text:0000000000403522\n.text:0000000000403525\n.text:0000000000403528\n.text:000000000040352a\n.text:000000000040352f\n.text:0000000000403532\n.text:0000000000403538\n.text:000000000040353d\n.text:0000000000403543\n.text:0000000000403546\n.text:0000000000403549\n.text:000000000040354c\n.text:0000000000403554\n.text:0000000000403556\n.text:0000000000403558\n.text:000000000040355b\n.text:000000000040355f\n.text:0000000000403561\n.text:0000000000403564\n.text:0000000000403568\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403570\n.text:0000000000403573\n.text:0000000000403575\n.text:0000000000403579\n.text:000000000040357b\n.text:000000000040357f\n.text:0000000000403582\n.text:0000000000403585\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358e\n.text:0000000000403597\n.text:000000000040359a\n.text:000000000040359c\n.text:00000000004035a0\n.text:00000000004035a2\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035af\n.text:00000000004035b1\n.text:00000000004035b4\n.text:00000000004035b8\n.text:00000000004035bd\n.text:00000000004035c0\n.text:00000000004035c4\n.text:00000000004035cc\n.text:00000000004035cf\n.text:00000000004035d2\n.text:00000000004035d4\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035dd\n.text:00000000004035e2\n.text:00000000004035e6\n.text:00000000004035eb\n.text:00000000004035f0\n.text:00000000004035f4\n.text:00000000004035fa\n.text:0000000000403600\n.text:0000000000403605\n.text:000000000040360b\n.text:0000000000403610\n.text:0000000000403612\n.text:0000000000403617\n.text:000000000040361b\n.text:000000000040361d\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403628\n.text:000000000040362d\n.text:000000000040362f\n.text:0000000000403634\n.text:0000000000403639\n.text:000000000040363d\n.text:0000000000403642\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364d\n.text:000000000040364f\n.text:0000000000403651\n.text:0000000000403656\n.text:000000000040365a\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403664\n.text:0000000000403666\n.text:000000000040366e\n.text:0000000000403673\n.text:0000000000403679\n.text:000000000040367b\n.text:0000000000403680\n.text:0000000000403686\n.text:000000000040368f\n.text:0000000000403695\n.text:00000000004036a0\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036a9\n.text:00000000004036b1\n.text:00000000004036b4\n.text:00000000004036b9\n.text:00000000004036bb\n.text:00000000004036be\n.text:00000000004036c0\n.text:00000000004036c5\n.text:00000000004036c8\n.text:00000000004036cd\n.text:00000000004036d0\n.text:00000000004036d5\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e2\n.text:00000000004036e8\n.text:00000000004036ed\n.text:00000000004036f2\n.text:00000000004036f5\n.text:00000000004036fa\n.text:00000000004036fe\n.text:0000000000403703\n.text:0000000000403708\n.text:000000000040370a\n.text:000000000040370c\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403716\n.text:000000000040371c\n.text:000000000040371f\n.text:0000000000403725\n.text:0000000000403728\n.text:000000000040372e\n.text:0000000000403733\n.text:0000000000403737\n.text:000000000040373d\n.text:0000000000403740\n.text:0000000000403743\n.text:0000000000403747\n.text:000000000040374a\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403755\n.text:000000000040375a\n.text:000000000040375f\n.text:0000000000403765\n.text:0000000000403768\n.text:000000000040376e\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403775\n.text:0000000000403777\n.text:0000000000403779\n.text:000000000040377c\n.text:000000000040377e\n.text:0000000000403783\n.text:0000000000403788\n.text:000000000040378b\n.text:000000000040378d\n.text:0000000000403792\n.text:0000000000403797\n.text:000000000040379a\n.text:000000000040379c\n.text:00000000004037a1\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b7\n.text:00000000004037b9\n.text:00000000004037bc\n.text:00000000004037bf\n.text:00000000004037c5\n.text:00000000004037c9\n.text:00000000004037cc\n.text:00000000004037d2\n.text:00000000004037d6\n.text:00000000004037d9\n.text:00000000004037dc\n.text:00000000004037e2\n.text:00000000004037e5\n.text:00000000004037e7\n.text:00000000004037ec\n.text:00000000004037f1\n.text:00000000004037f4\n.text:00000000004037f6\n.text:00000000004037fb\n.text:00000000004037ff\n.text:0000000000403804\n.text:000000000040380a\n.text:000000000040380f\n.text:0000000000403811\n.text:0000000000403816\n.text:000000000040381c\n.text:000000000040381e\n.text:0000000000403820\n.text:0000000000403822\n.text:0000000000403824\n.text:0000000000403829\n.text:000000000040382f\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403838\n.text:000000000040383e\n.text:0000000000403840\n.text:0000000000403842\n.text:0000000000403847\n.text:0000000000403849\n.text:000000000040384f\n.text:0000000000403854\n.text:000000000040385a\n.text:000000000040385d\n.text:0000000000403860\n.text:0000000000403866\n.text:000000000040386b\n.text:000000000040386e\n.text:0000000000403871\n.text:0000000000403877\n.text:000000000040387a\n.text:0000000000403880\n.text:0000000000403883\n.text:0000000000403885\n.text:000000000040388a\n.text:000000000040388f\n.text:0000000000403892\n.text:0000000000403894\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ac\n.text:00000000004038ae\n.text:00000000004038b3\n.text:00000000004038b6\n.text:00000000004038b9\n.text:00000000004038bf\n.text:00000000004038c2\n.text:00000000004038c8\n.text:00000000004038cb\n.text:00000000004038d1\n.text:00000000004038d6\n.text:00000000004038d9\n.text:00000000004038df\n.text:00000000004038e2\n.text:00000000004038e8\n.text:00000000004038eb\n.text:00000000004038ed\n.text:00000000004038f1\n.text:00000000004038f7\n.text:00000000004038fc\n.text:0000000000403900\n.text:0000000000403909\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403921\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392c\n.text:0000000000403931\n.text:0000000000403936\n.text:000000000040393a\n.text:000000000040393f\n.text:0000000000403944\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394f\n.text:0000000000403955\n.text:0000000000403958\n.text:000000000040395a\n.text:000000000040395d\n.text:0000000000403960\n.text:0000000000403966\n.text:000000000040396b\n.text:000000000040396e\n.text:0000000000403971\n.text:0000000000403974\n.text:0000000000403977\n.text:0000000000403979\n.text:000000000040397d\n.text:000000000040397f\n.text:0000000000403984\n.text:0000000000403989\n.text:000000000040398f\n.text:00000000004039a0\n.text:00000000004039a5\n.text:00000000004039a7\n.text:00000000004039aa\n.text:00000000004039ac\n.text:00000000004039af\n.text:00000000004039b1\n.text:00000000004039b4\n.text:00000000004039b6\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c5\n.text:00000000004039ca\n.text:00000000004039ce\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039dc\n.text:00000000004039de\n.text:00000000004039e2\n.text:00000000004039f0\n.text:00000000004039f4\n.text:00000000004039fa\n.text:00000000004039fd\n.text:00000000004039ff\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a09\n.text:0000000000403a10\n.text:0000000000403a13\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a20\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a2b\n.text:0000000000403a2e\n.text:0000000000403a30\n.text:0000000000403a34\n.text:0000000000403a36\n.text:0000000000403a38\n.text:0000000000403a3b\n.text:0000000000403a3d\n.text:0000000000403a42\n.text:0000000000403a47\n.text:0000000000403a4a\n.text:0000000000403a4c\n.text:0000000000403a51\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5b\n.text:0000000000403a60\n.text:0000000000403a64\n.text:0000000000403a66\n.text:0000000000403a6a\n.text:0000000000403a6d\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a7e\n.text:0000000000403a81\n.text:0000000000403a84\n.text:0000000000403a87\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a93\n.text:0000000000403a95\n.text:0000000000403a98\n.text:0000000000403a9b\n.text:0000000000403a9e\n.text:0000000000403aa1\n.text:0000000000403aa5\n.text:0000000000403aa9\n.text:0000000000403aad\n.text:0000000000403ab1\n.text:0000000000403ab3\n.text:0000000000403ab7\n.text:0000000000403aba\n.text:0000000000403ac0\n.text:0000000000403ac4\n.text:0000000000403ac8\n.text:0000000000403ace\n.text:0000000000403ad3\n.text:0000000000403ad6\n.text:0000000000403ad9\n.text:0000000000403ade\n.text:0000000000403ae1\n.text:0000000000403ae3\n.text:0000000000403ae6\n.text:0000000000403aed\n.text:0000000000403af3\n.text:0000000000403af5\n.text:0000000000403af9\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b0f\n.text:0000000000403b12\n.text:0000000000403b14\n.text:0000000000403b19\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b26\n.text:0000000000403b2b\n.text:0000000000403b31\n.text:0000000000403b33\n.text:0000000000403b36\n.text:0000000000403b3a\n.text:0000000000403b40\n.text:0000000000403b45\n.text:0000000000403b51\n.text:0000000000403b55\n.text:0000000000403b57\n.text:0000000000403b5a\n.text:0000000000403b5f\n.text:0000000000403b64\n.text:0000000000403b67\n.text:0000000000403b6b\n.text:0000000000403b70\n.text:0000000000403b72\n.text:0000000000403b76\n.text:0000000000403b78\n.text:0000000000403b80\n.text:0000000000403b85\n.text:0000000000403b8a\n.text:0000000000403b8e\n.text:0000000000403b92\n.text:0000000000403b9a\n.text:0000000000403b9d\n.text:0000000000403ba2\n.text:0000000000403ba5\n.text:0000000000403ba8\n.text:0000000000403bad\n.text:0000000000403bb0\n.text:0000000000403bb3\n.text:0000000000403bb9\n.text:0000000000403bbd\n.text:0000000000403bc7\n.text:0000000000403bcd\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bdc\n.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be7\n.text:0000000000403be9\n.text:0000000000403bee\n.text:0000000000403bf3\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c07\n.text:0000000000403c0c\n.text:0000000000403c10\n.text:0000000000403c14\n.text:0000000000403c17\n.text:0000000000403c1a\n.text:0000000000403c1c\n.text:0000000000403c20\n.text:0000000000403c26\n.text:0000000000403c29\n.text:0000000000403c2c\n.text:0000000000403c2e\n.text:0000000000403c32\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c43\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c53\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5e\n.text:0000000000403c61\n.text:0000000000403c63\n.text:0000000000403c68\n.text:0000000000403c6d\n.text:0000000000403c73\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c80\n.text:0000000000403c86\n.text:0000000000403c8b\n.text:0000000000403c90\n.text:0000000000403c96\n.text:0000000000403c9a\n.text:0000000000403c9d\n.text:0000000000403ca3\n.text:0000000000403ca9\n.text:0000000000403caf\n.text:0000000000403cb4\n.text:0000000000403cb6\n.text:0000000000403cb9\n.text:0000000000403cbf\n.text:0000000000403cc3\n.text:0000000000403cc5\n.text:0000000000403ccf\n.text:0000000000403cd3\n.text:0000000000403cd9\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce4\n.text:0000000000403ce7\n.text:0000000000403ce9\n.text:0000000000403cee\n.text:0000000000403cf3\n.text:0000000000403cf6\n.text:0000000000403cfa\n.text:0000000000403cfc\n.text:0000000000403d01\n.text:0000000000403d06\n.text:0000000000403d09\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d15\n.text:0000000000403d18\n.text:0000000000403d1a\n.text:0000000000403d1f\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d28\n.text:0000000000403d2b\n.text:0000000000403d30\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3d\n.text:0000000000403d42\n.text:0000000000403d48\n.text:0000000000403d50\n.text:0000000000403d55\n.text:0000000000403d57\n.text:0000000000403d5c\n.text:0000000000403d5f\n.text:0000000000403d61\n.text:0000000000403d64\n.text:0000000000403d66\n.text:0000000000403d69\n.text:0000000000403d6c\n.text:0000000000403d6f\n.text:0000000000403d71\n.text:0000000000403d79\n.text:0000000000403d7c\n.text:0000000000403d7e\n.text:0000000000403d80\n.text:0000000000403d90\n.text:0000000000403d93\n.text:0000000000403d95\n.text:0000000000403d98\n.text:0000000000403d9e\n.text:0000000000403da1\n.text:0000000000403da3\n.text:0000000000403da5\n.text:0000000000403da7\n.text:0000000000403da9\n.text:0000000000403dac\n.text:0000000000403dae\n.text:0000000000403db3\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dbd\n.text:0000000000403dc2\n.text:0000000000403dc7\n.text:0000000000403dca\n.text:0000000000403dcc\n.text:0000000000403dd1\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403ddb\n.text:0000000000403ddd\n.text:0000000000403de2\n.text:0000000000403de5\n.text:0000000000403de8\n.text:0000000000403dea\n.text:0000000000403df0\n.text:0000000000403df4\n.text:0000000000403df6\n.text:0000000000403df8\n.text:0000000000403dfa\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e04\n.text:0000000000403e09\n.text:0000000000403e0c\n.text:0000000000403e0e\n.text:0000000000403e13\n.text:0000000000403e17\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e1e\n.text:0000000000403e22\n.text:0000000000403e25\n.text:0000000000403e28\n.text:0000000000403e2c\n.text:0000000000403e32\n.text:0000000000403e37\n.text:0000000000403e3f\n.text:0000000000403e44\n.text:0000000000403e46\n.text:0000000000403e4e\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e5a\n.text:0000000000403e5f\n.text:0000000000403e63\n.text:0000000000403e65\n.text:0000000000403e6a\n.text:0000000000403e6d\n.text:0000000000403e70\n.text:0000000000403e72\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e84\n.text:0000000000403e89\n.text:0000000000403e8d\n.text:0000000000403e92\n.text:0000000000403e97\n.text:0000000000403e9b\n.text:0000000000403ea0\n.text:0000000000403ea5\n.text:0000000000403ea9\n.text:0000000000403ead\n.text:0000000000403eb3\n.text:0000000000403eb8\n.text:0000000000403ec0\n.text:0000000000403ec2\n.text:0000000000403ec4\n.text:0000000000403ec8\n.text:0000000000403ecd\n.text:0000000000403ed3\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403eee\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef6\n.text:0000000000403ef8\n.text:0000000000403f00\n.text:0000000000403f06\n.text:0000000000403f0a\n.text:0000000000403f0d\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f1a\n.text:0000000000403f1e\n.text:0000000000403f21\n.text:0000000000403f24\n.text:0000000000403f27\n.text:0000000000403f2b\n.text:0000000000403f2f\n.text:0000000000403f31\n.text:0000000000403f36\n.text:0000000000403f3a\n.text:0000000000403f3d\n.text:0000000000403f40\n.text:0000000000403f47\n.text:0000000000403f48\n.text:0000000000403f4a\n.text:0000000000403f4c\n.text:0000000000403f4e\n.text:0000000000403f50\n.text:0000000000403f51\n.text:0000000000403f52\n.text:0000000000403f5a\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f62\n.text:0000000000403f64\n.text:0000000000403f66\n.text:0000000000403f68\n.text:0000000000403f6a\n.text:0000000000403f6d\n.text:0000000000403f70\n.text:0000000000403f73\n.text:0000000000403f75\n.text:0000000000403f79\n.text:0000000000403f7c\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f84\n.text:0000000000403f86\n.text:0000000000403f89\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f92\n.text:0000000000403f97\n.text:0000000000403f9c\n.text:0000000000403f9f\n.text:0000000000403fa1\n.text:0000000000403fa6\n.text:0000000000403fa9\n.text:0000000000403fae\n.text:0000000000403fb1\n.text:0000000000403fb7\n.text:0000000000403fbd\n.text:0000000000403fc0\n.text:0000000000403fc5\n'
p762
tp763
sS'set_quoting_style'
p764
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p765
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p766
S'TEST RDI,RDI\nMOV EAX,0x60a2c0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p767
S'48 85 ff\nb8 c0 a2 60 00\n48 0f 45 c7\n89 30\nc3\n'
p768
S'.text:0000000000403270\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327c\n.text:000000000040327e\n'
p769
tp770
sS'two_arguments'
p771
(S'\n__stdcall two_arguments()\n'
p772
V\u000a_Bool two_arguments(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *op;\u000a  char *pcVar2;\u000a  \u000a  if ((*argv[(long)pos] == '!') && (argv[(long)pos][1] == 0)) {\u000a    advance(0);\u000a    _Var1 = one_argument();\u000a    return (_Bool)(_Var1 ^ 1);\u000a  }\u000a  op = argv[(long)pos];\u000a  if (((*op == '-') && (op[1] != 0)) && (op[2] == 0)) {\u000a    _Var1 = test_unop(op);\u000a    if (_Var1 != false) {\u000a      _Var1 = unary_operator();\u000a      return _Var1;\u000a    }\u000a  }\u000a  else {\u000a    beyond();\u000a  }\u000a  op = (char *)dcgettext(0,"%s: unary operator expected",5);\u000a  pcVar2 = quote(argv[(long)pos]);\u000a                    /* WARNING: Subroutine does not return */\u000a  test_syntax_error(op,pcVar2);\u000a}\u000a\u000a
p773
S'PUSH RBX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RAX,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RAX],0x21\nJNZ 0x00401dce\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00401e00\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RDI],0x2d\nJNZ 0x00401e10\nCMP byte ptr [RDI + 0x1],0x0\nJZ 0x00401e10\nCMP byte ptr [RDI + 0x2],0x0\nJNZ 0x00401e10\nCALL 0x00401fe0\nTEST AL,AL\nJZ 0x00401e15\nPOP RBX\nJMP 0x00402010\nXOR EDI,EDI\nCALL 0x00401f90\nCALL 0x00401d80\nXOR AL,0x1\nPOP RBX\nRET\nCALL 0x00402500\nXOR EDI,EDI\nMOV ESI,0x406f56\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\n'
p774
S'53\n48 8b 05 d8 84 20 00\n48 63 0d dd 84 20 00\n48 8b 04 c8\n80 38 21\n75 06\n80 78 01 00\n74 32\n48 8b 05 bb 84 20 00\n48 63 0d c0 84 20 00\n48 8b 3c c8\n80 3f 2d\n75 2b\n80 7f 01 00\n74 25\n80 7f 02 00\n75 1f\ne8 ea 01 00 00\n84 c0\n74 1b\n5b\ne9 10 02 00 00\n31 ff\ne8 89 01 00 00\ne8 74 ff ff ff\n34 01\n5b\nc3\ne8 eb 06 00 00\n31 ff\nbe 56 6f 40 00\nba 05 00 00 00\ne8 1a f5 ff ff\n48 89 c3\n48 8b 05 60 84 20 00\n48 63 0d 65 84 20 00\n48 8b 3c c8\ne8 20 28 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 c0 fd ff ff\n'
p775
S'.text:0000000000401db0\n.text:0000000000401db1\n.text:0000000000401db8\n.text:0000000000401dbf\n.text:0000000000401dc3\n.text:0000000000401dc6\n.text:0000000000401dc8\n.text:0000000000401dcc\n.text:0000000000401dce\n.text:0000000000401dd5\n.text:0000000000401ddc\n.text:0000000000401de0\n.text:0000000000401de3\n.text:0000000000401de5\n.text:0000000000401de9\n.text:0000000000401deb\n.text:0000000000401def\n.text:0000000000401df1\n.text:0000000000401df6\n.text:0000000000401df8\n.text:0000000000401dfa\n.text:0000000000401dfb\n.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e07\n.text:0000000000401e0c\n.text:0000000000401e0e\n.text:0000000000401e0f\n.text:0000000000401e10\n.text:0000000000401e15\n.text:0000000000401e17\n.text:0000000000401e1c\n.text:0000000000401e21\n.text:0000000000401e26\n.text:0000000000401e29\n.text:0000000000401e30\n.text:0000000000401e37\n.text:0000000000401e3b\n.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e45\n.text:0000000000401e48\n.text:0000000000401e4b\n'
p776
tp777
sS'textdomain'
p778
(S'\n__stdcall textdomain()\n'
p779
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a070)();\u000a  return;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060a070]\n'
p781
S'ff 25 5a 8d 20 00\n'
p782
S'.plt:0000000000401310\n'
p783
tp784
sS'xmemdup'
p785
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p786
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p787
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405440\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401450\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p788
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ac be ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p789
S'.text:0000000000405580\n.text:0000000000405582\n.text:0000000000405584\n.text:0000000000405585\n.text:0000000000405588\n.text:000000000040558b\n.text:000000000040558e\n.text:0000000000405593\n.text:0000000000405596\n.text:0000000000405599\n.text:000000000040559c\n.text:000000000040559f\n.text:00000000004055a4\n.text:00000000004055a7\n.text:00000000004055a8\n.text:00000000004055aa\n.text:00000000004055ac\n'
p790
tp791
sS'get_quoting_style'
p792
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p793
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p794
S'TEST RDI,RDI\nMOV EAX,0x60a2c0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p795
S'48 85 ff\nb8 c0 a2 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p796
S'.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403268\n.text:000000000040326c\n.text:000000000040326e\n'
p797
tp798
sS'ferror_unlocked'
p799
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060a0f0]\n'
p802
S'ff 25 da 8c 20 00\n'
p803
S'.plt:0000000000401410\n'
p804
tp805
sS'exit'
p806
(S'\n__stdcall exit(int __status)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a1a8)();\u000a  return;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x0060a1a8]\n'
p809
S'ff 25 22 8c 20 00\n'
p810
S'.plt:0000000000401580\n'
p811
tp812
sS'locale_charset'
p813
(S'\n__stdcall locale_charset()\n'
p814
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00405a2d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00405a2d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004014a0\nTEST RAX,RAX\nMOV R14D,0x406245\nCMOVNZ R14,RAX\nCALL 0x00405a40\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405a05\nJMP 0x00405a2d\nMOV RDI,RBX\nCALL 0x00401360\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401360\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00405a2d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00405a20\nCMP BPL,0x2a\nJNZ 0x004059e0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004059e0\nMOV RDI,RBX\nCALL 0x00401360\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407dd8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p816
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 e2 ba ff ff\n48 85 c0\n41 be 45 62 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 78 b9 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 6a b9 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 20 ba ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 38 b9 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 d8 7d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p817
S'.text:00000000004059b0\n.text:00000000004059b1\n.text:00000000004059b3\n.text:00000000004059b4\n.text:00000000004059b9\n.text:00000000004059be\n.text:00000000004059c1\n.text:00000000004059c7\n.text:00000000004059cb\n.text:00000000004059d0\n.text:00000000004059d3\n.text:00000000004059d6\n.text:00000000004059d9\n.text:00000000004059db\n.text:00000000004059e0\n.text:00000000004059e3\n.text:00000000004059e8\n.text:00000000004059ec\n.text:00000000004059f1\n.text:00000000004059f6\n.text:00000000004059fb\n.text:0000000000405a00\n.text:0000000000405a03\n.text:0000000000405a05\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a10\n.text:0000000000405a12\n.text:0000000000405a14\n.text:0000000000405a18\n.text:0000000000405a1a\n.text:0000000000405a1e\n.text:0000000000405a20\n.text:0000000000405a23\n.text:0000000000405a28\n.text:0000000000405a2d\n.text:0000000000405a31\n.text:0000000000405a36\n.text:0000000000405a3a\n.text:0000000000405a3b\n.text:0000000000405a3d\n.text:0000000000405a3e\n'
p818
tp819
sS'set_program_name'
p820
(S'\n__stdcall set_program_name(char * argv0)\n'
p821
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p822
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004031f1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401390\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004031db\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4070bf\nMOV EDX,0x7\nCALL 0x004012b0\nTEST EAX,EAX\nJNZ 0x004031db\nMOV ESI,0x4070c7\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004012b0\nTEST EAX,EAX\nJNZ 0x004031d8\nADD R14,0x3\nMOV qword ptr [0x0060a260],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a2b0],RBX\nMOV qword ptr [0x0060a270],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a280]\nMOV EDI,0x407087\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401590\nCALL 0x00401280\n'
p823
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 07 e2 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe bf 70 40 00\nba 07 00 00 00\ne8 fd e0 ff ff\n85 c0\n75 24\nbe c7 70 40 00\nba 03 00 00 00\n4c 89 f7\ne8 e7 e0 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 88 70 20 00\n4c 89 f3\n48 89 1d ce 70 20 00\n48 89 1d 87 70 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 88 70 20 00\nbf 87 70 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 84 e3 ff ff\ne8 6f e0 ff ff\n'
p824
S'.text:0000000000403170\n.text:0000000000403172\n.text:0000000000403173\n.text:0000000000403174\n.text:0000000000403177\n.text:000000000040317a\n.text:000000000040317c\n.text:0000000000403181\n.text:0000000000403184\n.text:0000000000403189\n.text:000000000040318c\n.text:0000000000403190\n.text:0000000000403194\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319e\n.text:00000000004031a0\n.text:00000000004031a4\n.text:00000000004031a9\n.text:00000000004031ae\n.text:00000000004031b3\n.text:00000000004031b5\n.text:00000000004031b7\n.text:00000000004031bc\n.text:00000000004031c1\n.text:00000000004031c4\n.text:00000000004031c9\n.text:00000000004031cb\n.text:00000000004031cd\n.text:00000000004031d1\n.text:00000000004031d8\n.text:00000000004031db\n.text:00000000004031e2\n.text:00000000004031e9\n.text:00000000004031ed\n.text:00000000004031ee\n.text:00000000004031f0\n.text:00000000004031f1\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403202\n.text:0000000000403207\n.text:000000000040320c\n'
p825
tp826
sS'quotearg_buffer'
p827
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p828
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a2c0\nCMOVNZ RBP,R8\nCALL 0x00401290\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403390\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p830
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd c0 a2 60 00\n49 0f 45 e8\ne8 58 df ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p831
S'.text:0000000000403310\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403315\n.text:0000000000403317\n.text:0000000000403319\n.text:000000000040331a\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403324\n.text:0000000000403327\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403333\n.text:0000000000403338\n.text:000000000040333b\n.text:000000000040333d\n.text:0000000000403341\n.text:0000000000403345\n.text:0000000000403349\n.text:000000000040334d\n.text:0000000000403350\n.text:0000000000403353\n.text:0000000000403356\n.text:0000000000403359\n.text:000000000040335c\n.text:000000000040335f\n.text:0000000000403363\n.text:0000000000403364\n.text:0000000000403369\n.text:000000000040336d\n.text:0000000000403371\n.text:0000000000403373\n.text:0000000000403377\n.text:0000000000403378\n.text:000000000040337a\n.text:000000000040337c\n.text:000000000040337e\n.text:0000000000403380\n.text:0000000000403381\n'
p832
tp833
sS'quotearg_colon'
p834
(S'\n__stdcall quotearg_colon(char * arg)\n'
p835
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'MOV ESI,0x3a\nJMP 0x004044f0\n'
p837
S'be 3a 00 00 00\neb e9\n'
p838
S'.text:0000000000404500\n.text:0000000000404505\n'
p839
tp840
sS'get_stat_ctime'
p841
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p842
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p843
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p844
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p845
S'.text:0000000000404ac0\n.text:0000000000404ac4\n.text:0000000000404ac8\n'
p846
tp847
sS'rpl_fflush'
p848
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p849
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a130)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405dfd\nMOV RDI,RBX\nCALL 0x004014e0\nTEST EAX,EAX\nJZ 0x00405dfd\nMOV RDI,RBX\nCALL 0x00405e10\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401490\n'
p851
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef b6 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 8a b6 ff ff\n'
p852
S'.text:0000000000405de0\n.text:0000000000405de1\n.text:0000000000405de4\n.text:0000000000405de7\n.text:0000000000405de9\n.text:0000000000405dec\n.text:0000000000405df1\n.text:0000000000405df3\n.text:0000000000405df5\n.text:0000000000405df8\n.text:0000000000405dfd\n.text:0000000000405e00\n.text:0000000000405e01\n'
p853
tp854
sS'timespectod'
p855
(S'\n__stdcall timespectod()\n'
p856
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble timespectod(void)\u000a\u000a{\u000a  long in_RSI;\u000a  long in_RDI;\u000a  \u000a  return (double)in_RSI / _DAT_00407620 + (double)in_RDI;\u000a}\u000a\u000a
p857
S'CVTSI2SD XMM1,RDI\nCVTSI2SD XMM0,RSI\nDIVSD XMM0,qword ptr [0x00407620]\nADDSD XMM0,XMM1\nRET\n'
p858
S'f2 48 0f 2a cf\nf2 48 0f 2a c6\nf2 0f 5e 05 be 27 00 00\nf2 0f 58 c1\nc3\n'
p859
S'.text:0000000000404e50\n.text:0000000000404e55\n.text:0000000000404e5a\n.text:0000000000404e62\n.text:0000000000404e66\n'
p860
tp861
sS'bindtextdomain'
p862
(S'\n__stdcall bindtextdomain()\n'
p863
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a080)();\u000a  return;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060a080]\n'
p865
S'ff 25 4a 8d 20 00\n'
p866
S'.plt:0000000000401330\n'
p867
tp868
sS'set_char_quoting'
p869
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p870
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p871
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a2c0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p872
S'89 f1\n48 85 ff\nbe c0 a2 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p873
S'.text:0000000000403280\n.text:0000000000403282\n.text:0000000000403285\n.text:000000000040328a\n.text:000000000040328e\n.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403297\n.text:000000000040329c\n.text:000000000040329f\n.text:00000000004032a1\n.text:00000000004032a3\n.text:00000000004032a6\n.text:00000000004032a8\n.text:00000000004032ab\n.text:00000000004032ad\n.text:00000000004032b0\n.text:00000000004032b5\n'
p874
tp875
sS'quotearg_n'
p876
(S'\n__stdcall quotearg_n(char * arg)\n'
p877
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'MOV RDX,-0x1\nMOV ECX,0x60a2c0\nJMP 0x00404170\n'
p879
S'48 c7 c2 ff ff ff ff\nb9 c0 a2 60 00\neb 02\n'
p880
S'.text:0000000000404160\n.text:0000000000404167\n.text:000000000040416c\n'
p881
tp882
sS'close_stream'
p883
(S'\n__stdcall close_stream(FILE * stream)\n'
p884
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004012e0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401410\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405d60\nTEST EBP,EBP\nJZ 0x0040597b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040599f\nCALL 0x00401290\nMOV dword ptr [RAX],0x0\nJMP 0x0040599f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040599f\nTEST CL,CL\nJNZ 0x0040599f\nCALL 0x00401290\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p886
S'55\n41 56\n53\n48 89 fb\ne8 94 b9 ff ff\n49 89 c6\n48 89 df\ne8 b9 ba ff ff\n89 c5\n48 89 df\ne8 ff 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 1d b9 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 fe b8 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p887
S'.text:0000000000405940\n.text:0000000000405941\n.text:0000000000405943\n.text:0000000000405944\n.text:0000000000405947\n.text:000000000040594c\n.text:000000000040594f\n.text:0000000000405952\n.text:0000000000405957\n.text:0000000000405959\n.text:000000000040595c\n.text:0000000000405961\n.text:0000000000405963\n.text:0000000000405965\n.text:000000000040596a\n.text:000000000040596c\n.text:000000000040596e\n.text:0000000000405973\n.text:0000000000405979\n.text:000000000040597b\n.text:000000000040597d\n.text:0000000000405980\n.text:0000000000405982\n.text:0000000000405984\n.text:0000000000405987\n.text:0000000000405989\n.text:000000000040598b\n.text:000000000040598d\n.text:0000000000405992\n.text:0000000000405994\n.text:0000000000405997\n.text:000000000040599c\n.text:000000000040599f\n.text:00000000004059a1\n.text:00000000004059a2\n.text:00000000004059a4\n.text:00000000004059a5\n'
p888
tp889
sS'quotearg_colon_mem'
p890
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p891
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV EDX,0x3a\nJMP 0x00404480\n'
p893
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p894
S'.text:0000000000404510\n.text:0000000000404515\n'
p895
tp896
sS'fraccompare'
p897
(S'\n__stdcall fraccompare(char * a, char * b)\n'
p898
V\u000aint fraccompare(char *a,char *b)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  if ((*a == -1) && (*b == -1)) {\u000a    a = a + 1;\u000a    b = b + 1;\u000a    while( true ) {\u000a      cVar1 = *a;\u000a      cVar2 = *b;\u000a      uVar3 = (int)cVar1 - 0x30;\u000a      if (cVar1 != cVar2) break;\u000a      a = a + 1;\u000a      b = b + 1;\u000a      if (9 < uVar3) {\u000a        return 0;\u000a      }\u000a    }\u000a    uVar4 = (int)cVar2 - 0x30;\u000a    if ((uVar3 < 10) && (uVar4 < 10)) {\u000a      return (int)cVar1 - (int)cVar2;\u000a    }\u000a    if (uVar3 < 10) {\u000aLAB_00404da0:\u000a      do {\u000a        cVar1 = *a;\u000a        a = a + 1;\u000a      } while ((int)cVar1 == 0x30);\u000a      return (int)(-(uint)((int)cVar1 - 0x30U < 10) & 1);\u000a    }\u000a    if (9 < uVar4) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (*a == -1) {\u000a      a = a + 1;\u000a      goto LAB_00404da0;\u000a    }\u000a    if (*b != -1) {\u000a      return 0;\u000a    }\u000a    b = b + 1;\u000a  }\u000a  do {\u000a    cVar1 = *b;\u000a    b = b + 1;\u000a  } while ((int)cVar1 == 0x30);\u000a  return (int)-(uint)((int)cVar1 - 0x30U < 10);\u000a}\u000a\u000a
p899
S'MOV AL,byte ptr [RDI]\nCMP AL,0xff\nJNZ 0x00404d6b\nCMP byte ptr [RSI],0xff\nJZ 0x00404db7\nCMP AL,0xff\nJZ 0x00404d94\nXOR EAX,EAX\nCMP byte ptr [RSI],0xff\nJNZ 0x00404d93\nINC RSI\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [RSI]\nINC RSI\nCMP EAX,0x30\nJZ 0x00404d80\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nRET\nINC RDI\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RDI]\nINC RDI\nCMP EAX,0x30\nJZ 0x00404da0\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nRET\nINC RDI\nINC RSI\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [RDI]\nMOVSX EDX,byte ptr [RSI]\nLEA ECX,[RAX + -0x30]\nCMP AL,DL\nJNZ 0x00404ddb\nINC RDI\nINC RSI\nCMP ECX,0xa\nJC 0x00404dc0\nXOR EAX,EAX\nRET\nLEA R8D,[RDX + -0x30]\nCMP ECX,0x9\nJA 0x00404ded\nCMP R8D,0x9\nJA 0x00404ded\nSUB EAX,EDX\nRET\nCMP ECX,0xa\nJC 0x00404da0\nXOR EAX,EAX\nCMP R8D,0xa\nJC 0x00404d80\nJMP 0x00404d93\n'
p900
S'8a 07\n3c ff\n75 05\n80 3e ff\n74 4c\n3c ff\n74 25\n31 c0\n80 3e ff\n75 1d\n48 ff c6\n0f 1f 80 00 00 00 00\n0f be 06\n48 ff c6\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\nc3\n48 ff c7\n66 0f 1f 84 00 00 00 00 00\n0f be 07\n48 ff c7\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\nc3\n48 ff c7\n48 ff c6\n0f 1f 00\n0f be 07\n0f be 16\n8d 48 d0\n38 d0\n75 0e\n48 ff c7\n48 ff c6\n83 f9 0a\n72 e8\n31 c0\nc3\n44 8d 42 d0\n83 f9 09\n77 09\n41 83 f8 09\n77 03\n29 d0\nc3\n83 f9 0a\n72 ae\n31 c0\n41 83 f8 0a\n72 86\neb 97\n'
p901
S'.text:0000000000404d60\n.text:0000000000404d62\n.text:0000000000404d64\n.text:0000000000404d66\n.text:0000000000404d69\n.text:0000000000404d6b\n.text:0000000000404d6d\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d74\n.text:0000000000404d76\n.text:0000000000404d79\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d86\n.text:0000000000404d89\n.text:0000000000404d8b\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404da0\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404da9\n.text:0000000000404dab\n.text:0000000000404dae\n.text:0000000000404db1\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db7\n.text:0000000000404dba\n.text:0000000000404dbd\n.text:0000000000404dc0\n.text:0000000000404dc3\n.text:0000000000404dc6\n.text:0000000000404dc9\n.text:0000000000404dcb\n.text:0000000000404dcd\n.text:0000000000404dd0\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dd8\n.text:0000000000404dda\n.text:0000000000404ddb\n.text:0000000000404ddf\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de8\n.text:0000000000404dea\n.text:0000000000404dec\n.text:0000000000404ded\n.text:0000000000404df0\n.text:0000000000404df2\n.text:0000000000404df4\n.text:0000000000404df8\n.text:0000000000404dfa\n'
p902
tp903
sS'xcalloc'
p904
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p905
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p906
S'PUSH RAX\nCALL 0x004057a0\nTEST RAX,RAX\nJZ 0x0040556d\nPOP RCX\nRET\nCALL 0x004055d0\n'
p907
S'50\ne8 3a 02 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p908
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405566\n.text:0000000000405569\n.text:000000000040556b\n.text:000000000040556c\n.text:000000000040556d\n'
p909
tp910
sS'strtol'
p911
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0060a108)();\u000a  return lVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0060a108]\n'
p914
S'ff 25 c2 8c 20 00\n'
p915
S'.plt:0000000000401440\n'
p916
tp917
sS'clear_ungetc_buffer_preserving_position'
p918
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p919
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p920
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405e17\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405e30\n'
p921
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p922
S'.text:0000000000405e10\n.text:0000000000405e14\n.text:0000000000405e16\n.text:0000000000405e17\n.text:0000000000405e19\n.text:0000000000405e1e\n'
p923
tp924
sS'xnmalloc'
p925
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p926
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p927
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405431\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405440\nPUSH RAX\nCALL 0x004055d0\n'
p928
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p929
S'.text:0000000000405420\n.text:0000000000405423\n.text:0000000000405426\n.text:0000000000405428\n.text:000000000040542c\n.text:000000000040542f\n.text:0000000000405431\n.text:0000000000405432\n'
p930
tp931
sS'quotearg_char'
p932
(S'\n__stdcall quotearg_char(char * arg)\n'
p933
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p934
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404480\n'
p935
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p936
S'.text:00000000004044f0\n.text:00000000004044f2\n.text:00000000004044f9\n.text:00000000004044fb\n'
p937
tp938
sS'malloc'
p939
(S'\n__stdcall malloc(size_t __size)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060a128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x0060a128]\n'
p942
S'ff 25 a2 8c 20 00\n'
p943
S'.plt:0000000000401480\n'
p944
tp945
sS'c_tolower'
p946
(S'\n__stdcall c_tolower()\n'
p947
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p948
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p949
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p950
S'.text:0000000000405920\n.text:0000000000405923\n.text:0000000000405926\n.text:0000000000405929\n.text:000000000040592c\n'
p951
tp952
sS'error_at_line'
p953
(S'\n__stdcall error_at_line()\n'
p954
V\u000avoid error_at_line(void)\u000a\u000a{\u000a  (*(code *)PTR_error_at_line_0060a038)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060a038]\n'
p956
S'ff 25 92 8d 20 00\n'
p957
S'.plt:00000000004012a0\n'
p958
tp959
sS'quotearg_style'
p960
(S'\n__stdcall quotearg_style(char * arg)\n'
p961
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404360\n'
p963
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p964
S'.text:0000000000404440\n.text:0000000000404443\n.text:0000000000404445\n.text:0000000000404447\n.text:0000000000404449\n.text:000000000040444c\n'
p965
tp966
sS'make_timespec'
p967
(S'\n__stdcall make_timespec(time_t s, long ns)\n'
p968
V\u000atimespec make_timespec(time_t s,long ns)\u000a\u000a{\u000a  return (timespec)CONCAT88(ns,s);\u000a}\u000a\u000a
p969
S'MOV RAX,RDI\nMOV RDX,RSI\nRET\n'
p970
S'48 89 f8\n48 89 f2\nc3\n'
p971
S'.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e06\n'
p972
tp973
sS'emit_try_help'
p974
(S'\n__stdcall emit_try_help()\n'
p975
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a280]\nXOR EDI,EDI\nMOV ESI,0x406df5\nMOV EDX,0x5\nCALL 0x00401340\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a2b0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004015a0\n'
p977
S'53\n48 8b 1d 58 89 20 00\n31 ff\nbe f5 6d 40 00\nba 05 00 00 00\ne8 07 fa ff ff\n48 89 c2\n48 8b 0d 6d 89 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 4d fc ff ff\n'
p978
S'.text:0000000000401920\n.text:0000000000401921\n.text:0000000000401928\n.text:000000000040192a\n.text:000000000040192f\n.text:0000000000401934\n.text:0000000000401939\n.text:000000000040193c\n.text:0000000000401943\n.text:0000000000401948\n.text:000000000040194a\n.text:000000000040194d\n.text:000000000040194e\n'
p979
tp980
sS'strrchr'
p981
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060a0b0]\n'
p984
S'ff 25 1a 8d 20 00\n'
p985
S'.plt:0000000000401390\n'
p986
tp987
sS'quotearg_alloc_mem'
p988
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p989
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a2c0\nCMOVNZ R12,RCX\nCALL 0x00401290\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403390\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405510\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403390\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004040ba\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc c0 a2 60 00\n4c 0f 45 e1\ne8 78 d2 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 a1 14 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:0000000000403fe0\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403fea\n.text:0000000000403fee\n.text:0000000000403ff1\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffe\n.text:0000000000404001\n.text:0000000000404006\n.text:0000000000404009\n.text:000000000040400f\n.text:0000000000404013\n.text:0000000000404018\n.text:000000000040401d\n.text:000000000040401f\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404028\n.text:000000000040402c\n.text:0000000000404031\n.text:0000000000404035\n.text:000000000040403a\n.text:000000000040403e\n.text:0000000000404040\n.text:0000000000404042\n.text:0000000000404045\n.text:0000000000404048\n.text:000000000040404b\n.text:0000000000404050\n.text:0000000000404055\n.text:0000000000404057\n.text:000000000040405c\n.text:0000000000404060\n.text:0000000000404063\n.text:0000000000404067\n.text:000000000040406a\n.text:000000000040406f\n.text:0000000000404072\n.text:0000000000404076\n.text:000000000040407a\n.text:000000000040407d\n.text:0000000000404080\n.text:0000000000404085\n.text:000000000040408a\n.text:000000000040408d\n.text:0000000000404092\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409e\n.text:00000000004040a3\n.text:00000000004040a7\n.text:00000000004040aa\n.text:00000000004040ae\n.text:00000000004040b3\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040ba\n.text:00000000004040bd\n.text:00000000004040c1\n.text:00000000004040c2\n.text:00000000004040c4\n.text:00000000004040c6\n.text:00000000004040c8\n.text:00000000004040ca\n.text:00000000004040cb\n'
p993
tp994
sS'quotearg_style_mem'
p995
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p996
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p997
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404400\n'
p998
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p999
S'.text:0000000000404460\n.text:0000000000404463\n.text:0000000000404466\n.text:0000000000404468\n.text:000000000040446a\n.text:000000000040446c\n.text:000000000040446f\n.text:0000000000404472\n'
p1000
tp1001
sS'xalloc_die'
p1002
(S'\n__stdcall xalloc_die()\n'
p1003
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x407084,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1004
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a1f0]\nXOR EDI,EDI\nMOV ESI,0x4079af\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x407084\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401530\nCALL 0x00401280\n'
p1005
S'53\n8b 1d 19 4c 20 00\n31 ff\nbe af 79 40 00\nba 05 00 00 00\ne8 58 bd ff ff\n48 89 c1\n31 f6\nba 84 70 40 00\n31 c0\n89 df\ne8 35 bf ff ff\ne8 80 bc ff ff\n'
p1006
S'.text:00000000004055d0\n.text:00000000004055d1\n.text:00000000004055d7\n.text:00000000004055d9\n.text:00000000004055de\n.text:00000000004055e3\n.text:00000000004055e8\n.text:00000000004055eb\n.text:00000000004055ed\n.text:00000000004055f2\n.text:00000000004055f4\n.text:00000000004055f6\n.text:00000000004055fb\n'
p1007
tp1008
sS'quotearg_n_custom'
p1009
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1010
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV R8,-0x1\nJMP 0x00404580\n'
p1012
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1013
S'.text:0000000000404570\n.text:0000000000404577\n'
p1014
tp1015
sS'__freading'
p1016
(S'\n__stdcall __freading()\n'
p1017
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a158)();\u000a  return;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060a158]\n'
p1019
S'ff 25 72 8c 20 00\n'
p1020
S'.plt:00000000004014e0\n'
p1021
tp1022
sS'fputs_unlocked'
p1023
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1024
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0060a0e8]\n'
p1026
S'ff 25 e2 8c 20 00\n'
p1027
S'.plt:0000000000401400\n'
p1028
tp1029
sS'main'
p1030
(S'\n__stdcall main(char * * margv)\n'
p1031
V\u000aint main(char **margv)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  char *__s1;\u000a  char *format;\u000a  char **in_RSI;\u000a  \u000a  iVar1 = (int)margv;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,"");\u000a  bindtextdomain(0x406daa,"/usr/local/share/locale");\u000a  textdomain(0x406daa);\u000a  initialize_exit_failure();\u000a  atexit(close_stdout);\u000a  if (iVar1 == 2) {\u000a    __s1 = in_RSI[1];\u000a    argv = in_RSI;\u000a    iVar3 = strcmp(__s1,"--help");\u000a    if (iVar3 == 0) {\u000a      usage(0);\u000a    }\u000a    else {\u000a      iVar3 = strcmp(__s1,"--version");\u000a      if (iVar3 == 0) {\u000a        version_etc(stdout,"[","GNU coreutils",Version,"Kevin Braunsdorf","Matthew Bradburn",0);\u000a        return 0;\u000a      }\u000aLAB_00401b4b:\u000a      if ((*in_RSI[(long)iVar1 + -1] != ']') || (in_RSI[(long)iVar1 + -1][1] != 0))\u000a      goto LAB_00401ba3;\u000a      argc = iVar1 + -1;\u000a      pos = 1;\u000a      if (iVar1 < 3) {\u000a        pos = 1;\u000a        return 1;\u000a      }\u000a      _Var2 = posixtest();\u000a      if (pos == argc) {\u000a        return (uint)(_Var2 ^ 1);\u000a      }\u000a    }\u000a    format = (char *)dcgettext(0,"extra argument %s",5);\u000a    __s1 = argv[(long)pos];\u000a  }\u000a  else {\u000a    argv = in_RSI;\u000a    if (1 < iVar1) goto LAB_00401b4b;\u000aLAB_00401ba3:\u000a    format = (char *)dcgettext(0,"missing %s",5);\u000a    __s1 = "]";\u000a  }\u000a  __s1 = quote(__s1);\u000a                    /* WARNING: Subroutine does not return */\u000a  test_syntax_error(format,__s1);\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RSI\nMOV EBX,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00403170\nMOV EDI,0x6\nMOV ESI,0x406245\nCALL 0x00401510\nMOV EDI,0x406daa\nMOV ESI,0x406d7d\nCALL 0x00401330\nMOV EDI,0x406daa\nCALL 0x00401310\nCALL 0x00401c00\nMOV EDI,0x403050\nCALL 0x00405f20\nMOV qword ptr [0x0060a290],R14\nCMP EBX,0x2\nJNZ 0x00401b49\nMOV RBP,qword ptr [R14 + 0x8]\nMOV ESI,0x406d95\nMOV RDI,RBP\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00401bd1\nMOV ESI,0x406d9c\nMOV RDI,RBP\nCALL 0x00401430\nTEST EAX,EAX\nJNZ 0x00401b4b\nMOV RDI,qword ptr [0x0060a268]\nMOV RCX,qword ptr [0x0060a1e8]\nMOV qword ptr [RSP],0x0\nXOR EBP,EBP\nMOV ESI,0x406d7b\nMOV EDX,0x406da6\nMOV R8D,0x406db4\nMOV R9D,0x406dc5\nXOR EAX,EAX\nCALL 0x00405310\nJMP 0x00401b98\nJL 0x00401ba3\nMOVSXD RAX,EBX\nMOV RAX,qword ptr [R14 + RAX*0x8 + -0x8]\nCMP byte ptr [RAX],0x5d\nJNZ 0x00401ba3\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00401ba3\nLEA EAX,[RBX + -0x1]\nMOV dword ptr [0x0060a298],EAX\nMOV dword ptr [0x0060a29c],0x1\nMOV EBP,0x1\nCMP EBX,0x3\nJL 0x00401b98\nADD EBX,-0x2\nMOV EDI,EBX\nCALL 0x00401cb0\nMOV ECX,dword ptr [0x0060a29c]\nCMP ECX,dword ptr [0x0060a298]\nJNZ 0x00401bd8\nXOR AL,0x1\nMOVZX EBP,AL\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406dd8\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV EDI,0x406dd6\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nXOR EDI,EDI\nCALL 0x004016e0\nXOR EDI,EDI\nMOV ESI,0x406de3\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nJMP 0x00401bbc\n'
p1033
S'55\n41 56\n53\n48 83 ec 10\n49 89 f6\n89 fb\n49 8b 3e\ne8 cb 16 00 00\nbf 06 00 00 00\nbe 45 62 40 00\ne8 5c fa ff ff\nbf aa 6d 40 00\nbe 7d 6d 40 00\ne8 6d f8 ff ff\nbf aa 6d 40 00\ne8 43 f8 ff ff\ne8 2e 01 00 00\nbf 50 30 40 00\ne8 44 44 00 00\n4c 89 35 ad 87 20 00\n83 fb 02\n75 61\n49 8b 6e 08\nbe 95 6d 40 00\n48 89 ef\ne8 37 f9 ff ff\n85 c0\n0f 84 d0 00 00 00\nbe 9c 6d 40 00\n48 89 ef\ne8 22 f9 ff ff\n85 c0\n75 39\n48 8b 3d 4f 87 20 00\n48 8b 0d c8 86 20 00\n48 c7 04 24 00 00 00 00\n31 ed\nbe 7b 6d 40 00\nba a6 6d 40 00\n41 b8 b4 6d 40 00\n41 b9 c5 6d 40 00\n31 c0\ne8 c9 37 00 00\neb 4f\n7c 58\n48 63 c3\n49 8b 44 c6 f8\n80 38 5d\n75 4b\n80 78 01 00\n75 45\n8d 43 ff\n89 05 31 87 20 00\nc7 05 2b 87 20 00 01 00 00 00\nbd 01 00 00 00\n83 fb 03\n7c 1d\n83 c3 fe\n89 df\ne8 2b 01 00 00\n8b 0d 11 87 20 00\n3b 0d 07 87 20 00\n75 45\n34 01\n0f b6 e8\n89 e8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n31 ff\nbe d8 6d 40 00\nba 05 00 00 00\ne8 8c f7 ff ff\n48 89 c3\nbf d6 6d 40 00\ne8 9f 2a 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 3f 00 00 00\n31 ff\ne8 08 fb ff ff\n31 ff\nbe e3 6d 40 00\nba 05 00 00 00\ne8 57 f7 ff ff\n48 89 c3\n48 8b 05 9d 86 20 00\n48 63 0d a2 86 20 00\n48 8b 3c c8\neb bc\n'
p1034
S'.text:0000000000401a90\n.text:0000000000401a91\n.text:0000000000401a93\n.text:0000000000401a94\n.text:0000000000401a98\n.text:0000000000401a9b\n.text:0000000000401a9d\n.text:0000000000401aa0\n.text:0000000000401aa5\n.text:0000000000401aaa\n.text:0000000000401aaf\n.text:0000000000401ab4\n.text:0000000000401ab9\n.text:0000000000401abe\n.text:0000000000401ac3\n.text:0000000000401ac8\n.text:0000000000401acd\n.text:0000000000401ad2\n.text:0000000000401ad7\n.text:0000000000401adc\n.text:0000000000401ae3\n.text:0000000000401ae6\n.text:0000000000401ae8\n.text:0000000000401aec\n.text:0000000000401af1\n.text:0000000000401af4\n.text:0000000000401af9\n.text:0000000000401afb\n.text:0000000000401b01\n.text:0000000000401b06\n.text:0000000000401b09\n.text:0000000000401b0e\n.text:0000000000401b10\n.text:0000000000401b12\n.text:0000000000401b19\n.text:0000000000401b20\n.text:0000000000401b28\n.text:0000000000401b2a\n.text:0000000000401b2f\n.text:0000000000401b34\n.text:0000000000401b3a\n.text:0000000000401b40\n.text:0000000000401b42\n.text:0000000000401b47\n.text:0000000000401b49\n.text:0000000000401b4b\n.text:0000000000401b4e\n.text:0000000000401b53\n.text:0000000000401b56\n.text:0000000000401b58\n.text:0000000000401b5c\n.text:0000000000401b5e\n.text:0000000000401b61\n.text:0000000000401b67\n.text:0000000000401b71\n.text:0000000000401b76\n.text:0000000000401b79\n.text:0000000000401b7b\n.text:0000000000401b7e\n.text:0000000000401b80\n.text:0000000000401b85\n.text:0000000000401b8b\n.text:0000000000401b91\n.text:0000000000401b93\n.text:0000000000401b95\n.text:0000000000401b98\n.text:0000000000401b9a\n.text:0000000000401b9e\n.text:0000000000401b9f\n.text:0000000000401ba1\n.text:0000000000401ba2\n.text:0000000000401ba3\n.text:0000000000401ba5\n.text:0000000000401baa\n.text:0000000000401baf\n.text:0000000000401bb4\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc4\n.text:0000000000401bc6\n.text:0000000000401bc9\n.text:0000000000401bcc\n.text:0000000000401bd1\n.text:0000000000401bd3\n.text:0000000000401bd8\n.text:0000000000401bda\n.text:0000000000401bdf\n.text:0000000000401be4\n.text:0000000000401be9\n.text:0000000000401bec\n.text:0000000000401bf3\n.text:0000000000401bfa\n.text:0000000000401bfe\n'
p1035
tp1036
sS'xcharalloc'
p1037
(S'\n__stdcall xcharalloc(size_t n)\n'
p1038
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1039
S'JMP 0x00405440\n'
p1040
S'e9 2b ff ff ff\n'
p1041
S'.text:0000000000405510\n'
p1042
tp1043
sS'c_isupper'
p1044
(S'\n__stdcall c_isupper()\n'
p1045
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1046
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1047
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1048
S'.text:00000000004058f0\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058f9\n'
p1049
tp1050
sS'isatty'
p1051
(S'\n__stdcall isatty(int __fd)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0060a068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060a068]\n'
p1054
S'ff 25 62 8d 20 00\n'
p1055
S'.plt:0000000000401300\n'
p1056
tp1057
sS'c_isalnum'
p1058
(S'\n__stdcall c_isalnum()\n'
p1059
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1060
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040580b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040580b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040580a\nXOR EAX,EAX\nRET\n'
p1061
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1062
S'.text:00000000004057f0\n.text:00000000004057f2\n.text:00000000004057f5\n.text:00000000004057f8\n.text:00000000004057fa\n.text:0000000000405804\n.text:0000000000405808\n.text:000000000040580a\n.text:000000000040580b\n.text:000000000040580e\n.text:0000000000405811\n.text:0000000000405813\n.text:0000000000405815\n'
p1063
tp1064
sS'binary_operator'
p1065
(S'\n__stdcall binary_operator()\n'
p1066
V\u000a_Bool binary_operator(void)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  int iVar6;\u000a  size_t i;\u000a  char *a;\u000a  char *b;\u000a  long lVar7;\u000a  byte in_DIL;\u000a  byte bVar8;\u000a  bool bVar9;\u000a  char rbuf [21];\u000a  stat stat_buf;\u000a  stat local_138;\u000a  stat local_a8;\u000a  \u000a  if (in_DIL != 0) {\u000a    advance(0);\u000a  }\u000a  lVar7 = (long)pos;\u000a  if ((((pos + 1 < argc + -2) && (a = argv[lVar7 + 2], *a == '-')) && (a[1] == 'l')) && (a[2] == 0))\u000a  {\u000a    advance(0);\u000a    bVar8 = 1;\u000a  }\u000a  else {\u000a    bVar8 = 0;\u000a  }\u000a  iVar6 = pos;\u000a  a = argv[lVar7 + 1];\u000a  if (*a == '=') {\u000a    if ((a[1] == 0) || ((a[1] == '=' && (a[2] == 0)))) {\u000a      iVar5 = strcmp(argv[(long)pos],argv[(long)pos + 2]);\u000a      bVar9 = iVar5 == 0;\u000a      goto LAB_004028fa;\u000a    }\u000a  }\u000a  else {\u000a    if (*a == '-') {\u000a      if (((a[1] == 'l') || (a[1] == 'g')) && ((a[2] == 'e' || (a[2] == 't')))) {\u000aLAB_00402917:\u000a        if (argv[lVar7 + 1][3] == 0) {\u000a          if (in_DIL == 0) {\u000a            a = find_int(argv[lVar7]);\u000a          }\u000a          else {\u000a            i = strlen(argv[lVar7]);\u000a            a = umaxtostr(i,(char *)&local_a8);\u000a          }\u000a          if (bVar8 == 0) {\u000a            b = find_int(argv[lVar7 + 2]);\u000a          }\u000a          else {\u000a            i = strlen(argv[lVar7 + 3]);\u000a            b = umaxtostr(i,(char *)&local_138);\u000a          }\u000a          iVar6 = strintcmp(a,b);\u000a          cVar2 = argv[lVar7 + 1][2];\u000a          pos = pos + 3;\u000a          cVar1 = argv[lVar7 + 1][1];\u000a          if (cVar1 != 'g') {\u000a            if (cVar1 == 'l') {\u000a              return (_Bool)(iVar6 < (int)(uint)(cVar2 == 'e'));\u000a            }\u000a            return (_Bool)((iVar6 != 0) == (cVar2 == 'e'));\u000a          }\u000a          iVar5 = -1;\u000a          if (cVar2 != 'e') {\u000a            iVar5 = 0;\u000a          }\u000a          return (_Bool)(iVar5 < iVar6);\u000a        }\u000a      }\u000a      else {\u000a        a = argv[lVar7 + 1];\u000a        if (a[1] == 'n') {\u000a          if (a[2] == 'e') goto LAB_00402917;\u000a        }\u000a        else {\u000a          if ((a[1] == 'e') && (a[2] == 'q')) goto LAB_00402917;\u000a        }\u000a      }\u000a      a = argv[lVar7 + 1];\u000a      cVar2 = a[1];\u000a      if (cVar2 == 'e') {\u000a        if ((a[2] != 'f') || (a[3] != 0)) goto LAB_00402beb;\u000a        pos = pos + 3;\u000a        if ((bVar8 | in_DIL) != 1) {\u000a          iVar6 = stat(argv[lVar7],&local_a8);\u000a          if (iVar6 != 0) {\u000a            return false;\u000a          }\u000a          iVar6 = stat(argv[lVar7 + 2],&local_138);\u000a          if (iVar6 != 0) {\u000a            return false;\u000a          }\u000a          if (local_a8.st_dev == local_138.st_dev) {\u000a            return (_Bool)(local_a8.st_ino == local_138.st_ino);\u000a          }\u000a          return false;\u000a        }\u000a        a = "-ef does not accept -l";\u000a      }\u000a      else {\u000a        if (cVar2 == 'o') {\u000a          if ((a[2] != 't') || (a[3] != 0)) goto LAB_00402beb;\u000a          pos = pos + 3;\u000a          if ((bVar8 | in_DIL) != 1) {\u000a            _Var3 = get_mtime(argv[lVar7],(timespec *)&local_a8);\u000a            _Var4 = get_mtime(argv[lVar7 + 2],(timespec *)&local_138);\u000a            if (_Var3 == false) {\u000a              return _Var4;\u000a            }\u000a            if (_Var4 == false) {\u000a              return false;\u000a            }\u000a            iVar6 = timespec_cmp();\u000a            return (_Bool)(byte)((uint)iVar6 >> 0x1f);\u000a          }\u000a          a = "-ot does not accept -l";\u000a        }\u000a        else {\u000a          if (((cVar2 != 'n') || (a[2] != 't')) || (a[3] != 0)) {\u000aLAB_00402beb:\u000a            a = (char *)dcgettext(0,"%s: unknown binary operator",5);\u000a            b = quote(argv[lVar7 + 1]);\u000a                    /* WARNING: Subroutine does not return */\u000a            test_syntax_error(a,b);\u000a          }\u000a          pos = pos + 3;\u000a          if ((bVar8 | in_DIL) != 1) {\u000a            _Var3 = get_mtime(argv[lVar7],(timespec *)&local_a8);\u000a            _Var4 = get_mtime(argv[lVar7 + 2],(timespec *)&local_138);\u000a            if (_Var3 == false) {\u000a              return false;\u000a            }\u000a            if (_Var4 == false) {\u000a              return _Var3;\u000a            }\u000a            iVar6 = timespec_cmp();\u000a            return (_Bool)(0 < iVar6);\u000a          }\u000a          a = "-nt does not accept -l";\u000a        }\u000a      }\u000a      pos = iVar6 + 3;\u000a      a = (char *)dcgettext(0,a,5);\u000a                    /* WARNING: Subroutine does not return */\u000a      test_syntax_error(a,0);\u000a    }\u000a  }\u000a  a = argv[lVar7 + 1];\u000a  if (((*a != '!') || (a[1] != '=')) || (a[2] != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar5 = strcmp(argv[(long)pos],argv[(long)pos + 2]);\u000a  bVar9 = iVar5 != 0;\u000aLAB_004028fa:\u000a  pos = iVar6 + 3;\u000a  return (_Bool)bVar9;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x120\nMOV EBX,EDI\nTEST BL,BL\nJZ 0x004027d8\nXOR EDI,EDI\nCALL 0x00401f90\nMOVSXD RBP,dword ptr [0x0060a29c]\nLEA EAX,[RBP + 0x1]\nMOV ECX,dword ptr [0x0060a298]\nADD ECX,-0x2\nCMP EAX,ECX\nJGE 0x00402810\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x10]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402810\nCMP byte ptr [RAX + 0x1],0x6c\nJNZ 0x00402810\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x00402aed\nXOR R14D,R14D\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x8]\nMOV CL,byte ptr [RAX]\nCMP CL,0x3d\nJZ 0x0040287b\nCMP CL,0x2d\nJNZ 0x0040288d\nMOV CL,byte ptr [RAX + 0x1]\nCMP CL,0x6c\nJZ 0x00402838\nCMP CL,0x67\nJNZ 0x0040284b\nMOV AL,byte ptr [RAX + 0x2]\nCMP AL,0x65\nJZ 0x00402917\nCMP AL,0x74\nJZ 0x00402917\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x8]\nMOV CL,byte ptr [RAX + 0x1]\nCMP CL,0x6e\nJZ 0x00402911\nCMP CL,0x65\nJNZ 0x0040292d\nCMP byte ptr [RAX + 0x2],0x71\nJZ 0x00402917\nJMP 0x0040292d\nMOV CL,byte ptr [RAX + 0x1]\nTEST CL,CL\nJZ 0x004028d9\nCMP CL,0x3d\nJNZ 0x0040288d\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x004028d9\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x8]\nCMP byte ptr [RAX],0x21\nJNZ 0x00402be6\nCMP byte ptr [RAX + 0x1],0x3d\nJNZ 0x00402be6\nCMP byte ptr [RAX + 0x2],0x0\nJNZ 0x00402be6\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RBP,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nMOV RSI,qword ptr [RAX + RBP*0x8 + 0x10]\nCALL 0x00401430\nTEST EAX,EAX\nSETNZ BL\nJMP 0x004028fa\nMOV RAX,qword ptr [0x0060a290]\nMOVSXD RBP,dword ptr [0x0060a29c]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nMOV RSI,qword ptr [RAX + RBP*0x8 + 0x10]\nCALL 0x00401430\nTEST EAX,EAX\nSETZ BL\nLEA EAX,[RBP + 0x3]\nMOV dword ptr [0x0060a29c],EAX\nMOV EAX,EBX\nADD RSP,0x120\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCMP byte ptr [RAX + 0x2],0x65\nJNZ 0x0040292d\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x8]\nCMP byte ptr [RAX + 0x3],0x0\nJZ 0x00402ac7\nMOV RAX,qword ptr [0x0060a290]\nMOV RAX,qword ptr [RAX + RBP*0x8 + 0x8]\nMOVSX ECX,byte ptr [RAX + 0x1]\nCMP ECX,0x65\nJZ 0x004029e6\nCMP ECX,0x6f\nJZ 0x00402a35\nCMP ECX,0x6e\nJNZ 0x00402beb\nCMP byte ptr [RAX + 0x2],0x74\nJNZ 0x00402beb\nCMP byte ptr [RAX + 0x3],0x0\nJNZ 0x00402beb\nADD dword ptr [0x0060a29c],0x3\nOR R14B,BL\nCMP R14B,0x1\nJZ 0x00402c20\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nLEA RSI,[0x90 + RSP]\nCALL 0x00402c60\nMOV BL,AL\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x10]\nMOV RSI,RSP\nCALL 0x00402c60\nTEST BL,BL\nJZ 0x00402903\nTEST AL,AL\nJZ 0x00402903\nMOV RDI,qword ptr [0x90 + RSP]\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RDX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x00404e10\nTEST EAX,EAX\nSETG BL\nJMP 0x00402903\nCMP byte ptr [RAX + 0x2],0x66\nJNZ 0x00402beb\nCMP byte ptr [RAX + 0x3],0x0\nJNZ 0x00402beb\nADD dword ptr [0x0060a29c],0x3\nOR R14B,BL\nCMP R14B,0x1\nJZ 0x00402c29\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nLEA RSI,[0x90 + RSP]\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402b71\nXOR EBX,EBX\nJMP 0x00402903\nCMP byte ptr [RAX + 0x2],0x74\nJNZ 0x00402beb\nCMP byte ptr [RAX + 0x3],0x0\nJNZ 0x00402beb\nADD dword ptr [0x0060a29c],0x3\nOR R14B,BL\nCMP R14B,0x1\nJZ 0x00402c32\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nLEA RSI,[0x90 + RSP]\nCALL 0x00402c60\nMOV R14D,EAX\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x10]\nMOV RSI,RSP\nCALL 0x00402c60\nMOV BL,AL\nTEST R14B,R14B\nJZ 0x00402903\nTEST BL,BL\nJZ 0x00402903\nMOV RDI,qword ptr [0x90 + RSP]\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RDX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nCALL 0x00404e10\nMOV EBX,EAX\nSHR EBX,0x1f\nJMP 0x00402903\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nTEST BL,BL\nJZ 0x00402afc\nCALL 0x00401360\nLEA RSI,[0x90 + RSP]\nMOV RDI,RAX\nCALL 0x00403110\nJMP 0x00402b01\nXOR EDI,EDI\nCALL 0x00401f90\nMOV R14B,0x1\nJMP 0x00402813\nCALL 0x00402560\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nTEST R14B,R14B\nJZ 0x00402b27\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x18]\nCALL 0x00401360\nMOV RSI,RSP\nMOV RDI,RAX\nCALL 0x00403110\nJMP 0x00402b31\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x10]\nCALL 0x00402560\nMOV RSI,RAX\nMOV RDI,RBX\nCALL 0x00404af0\nMOV RCX,qword ptr [0x0060a290]\nMOV RDX,qword ptr [RCX + RBP*0x8 + 0x8]\nMOV CL,byte ptr [RDX + 0x2]\nADD dword ptr [0x0060a29c],0x3\nMOV DL,byte ptr [RDX + 0x1]\nCMP DL,0x67\nJZ 0x00402b90\nCMP DL,0x6c\nJNZ 0x00402ba7\nXOR EDX,EDX\nCMP CL,0x65\nSETZ DL\nCMP EAX,EDX\nSETL BL\nJMP 0x00402903\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x10]\nMOV RSI,RSP\nCALL 0x00405f50\nTEST EAX,EAX\nJZ 0x00402bbc\nXOR EBX,EBX\nJMP 0x00402903\nXOR EDX,EDX\nCMP CL,0x65\nMOV ECX,0xffffffff\nCMOVNZ ECX,EDX\nCMP EAX,ECX\nSETG BL\nJMP 0x00402903\nCMP CL,0x65\nSETZ CL\nTEST EAX,EAX\nSETNZ BL\nXOR BL,CL\nXOR BL,0x1\nJMP 0x00402903\nMOV RAX,qword ptr [0x90 + RSP]\nCMP RAX,qword ptr [RSP]\nJNZ 0x00402bdf\nMOV RAX,qword ptr [0x98 + RSP]\nCMP RAX,qword ptr [RSP + 0x8]\nSETZ BL\nJMP 0x00402903\nXOR EBX,EBX\nJMP 0x00402903\nCALL 0x00401280\nXOR EDI,EDI\nMOV ESI,0x407031\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060a290]\nMOV RDI,qword ptr [RAX + RBP*0x8 + 0x8]\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\nXOR EDI,EDI\nMOV ESI,0x406fec\nJMP 0x00402c39\nXOR EDI,EDI\nMOV ESI,0x407003\nJMP 0x00402c39\nXOR EDI,EDI\nMOV ESI,0x40701a\nMOV EDX,0x5\nCALL 0x00401340\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDI,RCX\nCALL 0x00401c10\n'
p1068
S'55\n41 56\n53\n48 81 ec 20 01 00 00\n89 fb\n84 db\n74 07\n31 ff\ne8 b8 f7 ff ff\n48 63 2d bd 7a 20 00\n8d 45 01\n8b 0d b0 7a 20 00\n83 c1 fe\n39 c8\n7d 21\n48 8b 05 9a 7a 20 00\n48 8b 44 e8 10\n80 38 2d\n75 10\n80 78 01 6c\n75 0a\n80 78 02 00\n0f 84 dd 02 00 00\n45 31 f6\n48 8b 05 76 7a 20 00\n48 8b 44 e8 08\n8a 08\n80 f9 3d\n74 55\n80 f9 2d\n75 62\n8a 48 01\n80 f9 6c\n74 05\n80 f9 67\n75 13\n8a 40 02\n3c 65\n0f 84 d4 00 00 00\n3c 74\n0f 84 cc 00 00 00\n48 8b 05 3e 7a 20 00\n48 8b 44 e8 08\n8a 48 01\n80 f9 6e\n0f 84 ae 00 00 00\n80 f9 65\n0f 85 c1 00 00 00\n80 78 02 71\n0f 84 a1 00 00 00\ne9 b2 00 00 00\n8a 48 01\n84 c9\n74 57\n80 f9 3d\n75 06\n80 78 02 00\n74 4c\n48 8b 05 fc 79 20 00\n48 8b 44 e8 08\n80 38 21\n0f 85 44 03 00 00\n80 78 01 3d\n0f 85 3a 03 00 00\n80 78 02 00\n0f 85 30 03 00 00\n48 8b 05 d3 79 20 00\n48 63 2d d8 79 20 00\n48 8b 3c e8\n48 8b 74 e8 10\ne8 5e eb ff ff\n85 c0\n0f 95 c3\neb 21\n48 8b 05 b0 79 20 00\n48 63 2d b5 79 20 00\n48 8b 3c e8\n48 8b 74 e8 10\ne8 3b eb ff ff\n85 c0\n0f 94 c3\n8d 45 03\n89 05 99 79 20 00\n89 d8\n48 81 c4 20 01 00 00\n5b\n41 5e\n5d\nc3\n80 78 02 65\n75 16\n48 8b 05 72 79 20 00\n48 8b 44 e8 08\n80 78 03 00\n0f 84 9a 01 00 00\n48 8b 05 5c 79 20 00\n48 8b 44 e8 08\n0f be 48 01\n83 f9 65\n0f 84 a0 00 00 00\n83 f9 6f\n0f 84 e6 00 00 00\n83 f9 6e\n0f 85 93 02 00 00\n80 78 02 74\n0f 85 89 02 00 00\n80 78 03 00\n0f 85 7f 02 00 00\n83 05 29 79 20 00 03\n41 08 de\n41 80 fe 01\n0f 84 a0 02 00 00\n48 8b 05 09 79 20 00\n48 8b 3c e8\n48 8d b4 24 90 00 00 00\ne8 c8 02 00 00\n88 c3\n48 8b 05 ef 78 20 00\n48 8b 7c e8 10\n48 89 e6\ne8 b2 02 00 00\n84 db\n0f 84 4d ff ff ff\n84 c0\n0f 84 45 ff ff ff\n48 8b bc 24 90 00 00 00\n48 8b b4 24 98 00 00 00\n48 8b 14 24\n48 8b 4c 24 08\ne8 34 24 00 00\n85 c0\n0f 9f c3\ne9 1d ff ff ff\n80 78 02 66\n0f 85 fb 01 00 00\n80 78 03 00\n0f 85 f1 01 00 00\n83 05 9b 78 20 00 03\n41 08 de\n41 80 fe 01\n0f 84 1b 02 00 00\n48 8b 05 7b 78 20 00\n48 8b 3c e8\n48 8d b4 24 90 00 00 00\ne8 2a 35 00 00\n85 c0\n0f 84 43 01 00 00\n31 db\ne9 ce fe ff ff\n80 78 02 74\n0f 85 ac 01 00 00\n80 78 03 00\n0f 85 a2 01 00 00\n83 05 4c 78 20 00 03\n41 08 de\n41 80 fe 01\n0f 84 d5 01 00 00\n48 8b 05 2c 78 20 00\n48 8b 3c e8\n48 8d b4 24 90 00 00 00\ne8 eb 01 00 00\n41 89 c6\n48 8b 05 11 78 20 00\n48 8b 7c e8 10\n48 89 e6\ne8 d4 01 00 00\n88 c3\n45 84 f6\n0f 84 6c fe ff ff\n84 db\n0f 84 64 fe ff ff\n48 8b bc 24 90 00 00 00\n48 8b b4 24 98 00 00 00\n48 8b 14 24\n48 8b 4c 24 08\ne8 53 23 00 00\n89 c3\nc1 eb 1f\ne9 3c fe ff ff\n48 8b 05 c2 77 20 00\n48 8b 3c e8\n84 db\n74 26\ne8 85 e8 ff ff\n48 8d b4 24 90 00 00 00\n48 89 c7\ne8 25 06 00 00\neb 14\n31 ff\ne8 9c f4 ff ff\n41 b6 01\ne9 17 fd ff ff\ne8 5f fa ff ff\n48 89 c3\n48 8b 05 85 77 20 00\n45 84 f6\n74 17\n48 8b 7c e8 18\ne8 46 e8 ff ff\n48 89 e6\n48 89 c7\ne8 eb 05 00 00\neb 0a\n48 8b 7c e8 10\ne8 2f fa ff ff\n48 89 c6\n48 89 df\ne8 b4 1f 00 00\n48 8b 0d 4d 77 20 00\n48 8b 54 e9 08\n8a 4a 02\n83 05 4a 77 20 00 03\n8a 52 01\n80 fa 67\n74 36\n80 fa 6c\n75 48\n31 d2\n80 f9 65\n0f 94 c2\n39 d0\n0f 9c c3\ne9 92 fd ff ff\n48 8b 05 18 77 20 00\n48 8b 7c e8 10\n48 89 e6\ne8 cb 33 00 00\n85 c0\n74 33\n31 db\ne9 73 fd ff ff\n31 d2\n80 f9 65\nb9 ff ff ff ff\n0f 45 ca\n39 c8\n0f 9f c3\ne9 5c fd ff ff\n80 f9 65\n0f 94 c1\n85 c0\n0f 95 c3\n30 cb\n80 f3 01\ne9 47 fd ff ff\n48 8b 84 24 90 00 00 00\n48 3b 04 24\n75 15\n48 8b 84 24 98 00 00 00\n48 3b 44 24 08\n0f 94 c3\ne9 24 fd ff ff\n31 db\ne9 1d fd ff ff\ne8 95 e6 ff ff\n31 ff\nbe 31 70 40 00\nba 05 00 00 00\ne8 44 e7 ff ff\n48 89 c3\n48 8b 05 8a 76 20 00\n48 8b 7c e8 08\ne8 50 1a 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 f0 ef ff ff\n31 ff\nbe ec 6f 40 00\neb 10\n31 ff\nbe 03 70 40 00\neb 07\n31 ff\nbe 1a 70 40 00\nba 05 00 00 00\ne8 fd e6 ff ff\n48 89 c1\n31 f6\n31 c0\n48 89 cf\ne8 be ef ff ff\n'
p1069
S'.text:00000000004027c0\n.text:00000000004027c1\n.text:00000000004027c3\n.text:00000000004027c4\n.text:00000000004027cb\n.text:00000000004027cd\n.text:00000000004027cf\n.text:00000000004027d1\n.text:00000000004027d3\n.text:00000000004027d8\n.text:00000000004027df\n.text:00000000004027e2\n.text:00000000004027e8\n.text:00000000004027eb\n.text:00000000004027ed\n.text:00000000004027ef\n.text:00000000004027f6\n.text:00000000004027fb\n.text:00000000004027fe\n.text:0000000000402800\n.text:0000000000402804\n.text:0000000000402806\n.text:000000000040280a\n.text:0000000000402810\n.text:0000000000402813\n.text:000000000040281a\n.text:000000000040281f\n.text:0000000000402821\n.text:0000000000402824\n.text:0000000000402826\n.text:0000000000402829\n.text:000000000040282b\n.text:000000000040282e\n.text:0000000000402831\n.text:0000000000402833\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283b\n.text:000000000040283d\n.text:0000000000402843\n.text:0000000000402845\n.text:000000000040284b\n.text:0000000000402852\n.text:0000000000402857\n.text:000000000040285a\n.text:000000000040285d\n.text:0000000000402863\n.text:0000000000402866\n.text:000000000040286c\n.text:0000000000402870\n.text:0000000000402876\n.text:000000000040287b\n.text:000000000040287e\n.text:0000000000402880\n.text:0000000000402882\n.text:0000000000402885\n.text:0000000000402887\n.text:000000000040288b\n.text:000000000040288d\n.text:0000000000402894\n.text:0000000000402899\n.text:000000000040289c\n.text:00000000004028a2\n.text:00000000004028a6\n.text:00000000004028ac\n.text:00000000004028b0\n.text:00000000004028b6\n.text:00000000004028bd\n.text:00000000004028c4\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d4\n.text:00000000004028d7\n.text:00000000004028d9\n.text:00000000004028e0\n.text:00000000004028e7\n.text:00000000004028eb\n.text:00000000004028f0\n.text:00000000004028f5\n.text:00000000004028f7\n.text:00000000004028fa\n.text:00000000004028fd\n.text:0000000000402903\n.text:0000000000402905\n.text:000000000040290c\n.text:000000000040290d\n.text:000000000040290f\n.text:0000000000402910\n.text:0000000000402911\n.text:0000000000402915\n.text:0000000000402917\n.text:000000000040291e\n.text:0000000000402923\n.text:0000000000402927\n.text:000000000040292d\n.text:0000000000402934\n.text:0000000000402939\n.text:000000000040293d\n.text:0000000000402940\n.text:0000000000402946\n.text:0000000000402949\n.text:000000000040294f\n.text:0000000000402952\n.text:0000000000402958\n.text:000000000040295c\n.text:0000000000402962\n.text:0000000000402966\n.text:000000000040296c\n.text:0000000000402973\n.text:0000000000402976\n.text:000000000040297a\n.text:0000000000402980\n.text:0000000000402987\n.text:000000000040298b\n.text:0000000000402993\n.text:0000000000402998\n.text:000000000040299a\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b0\n.text:00000000004029b6\n.text:00000000004029b8\n.text:00000000004029be\n.text:00000000004029c6\n.text:00000000004029ce\n.text:00000000004029d2\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029de\n.text:00000000004029e1\n.text:00000000004029e6\n.text:00000000004029ea\n.text:00000000004029f0\n.text:00000000004029f4\n.text:00000000004029fa\n.text:0000000000402a01\n.text:0000000000402a04\n.text:0000000000402a08\n.text:0000000000402a0e\n.text:0000000000402a15\n.text:0000000000402a19\n.text:0000000000402a21\n.text:0000000000402a26\n.text:0000000000402a28\n.text:0000000000402a2e\n.text:0000000000402a30\n.text:0000000000402a35\n.text:0000000000402a39\n.text:0000000000402a3f\n.text:0000000000402a43\n.text:0000000000402a49\n.text:0000000000402a50\n.text:0000000000402a53\n.text:0000000000402a57\n.text:0000000000402a5d\n.text:0000000000402a64\n.text:0000000000402a68\n.text:0000000000402a70\n.text:0000000000402a75\n.text:0000000000402a78\n.text:0000000000402a7f\n.text:0000000000402a84\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8e\n.text:0000000000402a91\n.text:0000000000402a97\n.text:0000000000402a99\n.text:0000000000402a9f\n.text:0000000000402aa7\n.text:0000000000402aaf\n.text:0000000000402ab3\n.text:0000000000402ab8\n.text:0000000000402abd\n.text:0000000000402abf\n.text:0000000000402ac2\n.text:0000000000402ac7\n.text:0000000000402ace\n.text:0000000000402ad2\n.text:0000000000402ad4\n.text:0000000000402ad6\n.text:0000000000402adb\n.text:0000000000402ae3\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402aed\n.text:0000000000402aef\n.text:0000000000402af4\n.text:0000000000402af7\n.text:0000000000402afc\n.text:0000000000402b01\n.text:0000000000402b04\n.text:0000000000402b0b\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b20\n.text:0000000000402b25\n.text:0000000000402b27\n.text:0000000000402b2c\n.text:0000000000402b31\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b3c\n.text:0000000000402b43\n.text:0000000000402b48\n.text:0000000000402b4b\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b58\n.text:0000000000402b5a\n.text:0000000000402b5d\n.text:0000000000402b5f\n.text:0000000000402b61\n.text:0000000000402b64\n.text:0000000000402b67\n.text:0000000000402b69\n.text:0000000000402b6c\n.text:0000000000402b71\n.text:0000000000402b78\n.text:0000000000402b7d\n.text:0000000000402b80\n.text:0000000000402b85\n.text:0000000000402b87\n.text:0000000000402b89\n.text:0000000000402b8b\n.text:0000000000402b90\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b9a\n.text:0000000000402b9d\n.text:0000000000402b9f\n.text:0000000000402ba2\n.text:0000000000402ba7\n.text:0000000000402baa\n.text:0000000000402bad\n.text:0000000000402baf\n.text:0000000000402bb2\n.text:0000000000402bb4\n.text:0000000000402bb7\n.text:0000000000402bbc\n.text:0000000000402bc4\n.text:0000000000402bc8\n.text:0000000000402bca\n.text:0000000000402bd2\n.text:0000000000402bd7\n.text:0000000000402bda\n.text:0000000000402bdf\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402beb\n.text:0000000000402bed\n.text:0000000000402bf2\n.text:0000000000402bf7\n.text:0000000000402bfc\n.text:0000000000402bff\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c10\n.text:0000000000402c13\n.text:0000000000402c15\n.text:0000000000402c18\n.text:0000000000402c1b\n.text:0000000000402c20\n.text:0000000000402c22\n.text:0000000000402c27\n.text:0000000000402c29\n.text:0000000000402c2b\n.text:0000000000402c30\n.text:0000000000402c32\n.text:0000000000402c34\n.text:0000000000402c39\n.text:0000000000402c3e\n.text:0000000000402c43\n.text:0000000000402c46\n.text:0000000000402c48\n.text:0000000000402c4a\n.text:0000000000402c4d\n'
p1070
tp1071
sS'timespec_sign'
p1072
(S'\n__stdcall timespec_sign()\n'
p1073
V\u000aint timespec_sign(void)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong in_RSI;\u000a  ulong in_RDI;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (-1 < (long)in_RDI) {\u000a    uVar1 = (uint)((in_RSI | in_RDI) != 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p1074
S'XOR ECX,ECX\nOR RSI,RDI\nSETNZ CL\nTEST RDI,RDI\nMOV EAX,0xffffffff\nCMOVNS EAX,ECX\nRET\n'
p1075
S'31 c9\n48 09 fe\n0f 95 c1\n48 85 ff\nb8 ff ff ff ff\n0f 49 c1\nc3\n'
p1076
S'.text:0000000000404e30\n.text:0000000000404e32\n.text:0000000000404e35\n.text:0000000000404e38\n.text:0000000000404e3b\n.text:0000000000404e40\n.text:0000000000404e43\n'
p1077
tp1078
sS'__errno_location'
p1079
(S'\n__stdcall __errno_location()\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x0060a030]\n'
p1082
S'ff 25 9a 8d 20 00\n'
p1083
S'.plt:0000000000401290\n'
p1084
tp1085
sS'x2nrealloc'
p1086
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1087
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1088
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004054dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405509\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004054fa\nTEST RCX,RCX\nJNZ 0x004054fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405480\nPUSH RAX\nCALL 0x004055d0\n'
p1089
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1090
S'.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b6\n.text:00000000004054b9\n.text:00000000004054bb\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054ca\n.text:00000000004054cd\n.text:00000000004054cf\n.text:00000000004054d2\n.text:00000000004054d5\n.text:00000000004054da\n.text:00000000004054dc\n.text:00000000004054df\n.text:00000000004054e1\n.text:00000000004054e6\n.text:00000000004054e8\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054f4\n.text:00000000004054f7\n.text:00000000004054fa\n.text:00000000004054fd\n.text:0000000000405501\n.text:0000000000405504\n.text:0000000000405509\n.text:000000000040550a\n'
p1091
tp1092
sS'one_argument'
p1093
(S'\n__stdcall one_argument()\n'
p1094
V\u000a_Bool one_argument(void)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (long)pos;\u000a  pos = pos + 1;\u000a  return (_Bool)(*argv[lVar1] != 0);\u000a}\u000a\u000a
p1095
S'MOV RAX,qword ptr [0x0060a290]\nMOVSXD RCX,dword ptr [0x0060a29c]\nLEA EDX,[RCX + 0x1]\nMOV dword ptr [0x0060a29c],EDX\nMOV RAX,qword ptr [RAX + RCX*0x8]\nCMP byte ptr [RAX],0x0\nSETNZ AL\nRET\n'
p1096
S'48 8b 05 09 85 20 00\n48 63 0d 0e 85 20 00\n8d 51 01\n89 15 05 85 20 00\n48 8b 04 c8\n80 38 00\n0f 95 c0\nc3\n'
p1097
S'.text:0000000000401d80\n.text:0000000000401d87\n.text:0000000000401d8e\n.text:0000000000401d91\n.text:0000000000401d97\n.text:0000000000401d9b\n.text:0000000000401d9e\n.text:0000000000401da1\n'
p1098
tp1099
sS'quotearg_n_options'
p1100
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1101
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401290\nTEST R12D,R12D\nJS 0x00404321\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a1f8]\nCMP dword ptr [0x0060a200],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040423b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a208\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405480\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a1f8],R15\nJNZ 0x00404202\nMOVUPS XMM0,xmmword ptr [0x0060a208]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a200]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004013b0\nMOV dword ptr [0x0060a200],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403390\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040429d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040430b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a300\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004042c8\nCALL 0x00401270\nMOV RDI,R15\nCALL 0x00405510\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403390\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401280\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 01 d1 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 4e 60 20 00\n44 39 25 4f 60 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 08 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 98 12 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 03 60 20 00\n75 0b\n0f 10 05 0a 60 20 00\n41 0f 11 07\n8b 05 f8 5f 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 8d d1 ff ff\n89 1d d7 5f 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 00 a3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 a8 cf ff ff\n4c 89 ff\ne8 40 12 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 5a cf ff ff\n'
p1104
S'.text:0000000000404170\n.text:0000000000404171\n.text:0000000000404173\n.text:0000000000404175\n.text:0000000000404177\n.text:0000000000404179\n.text:000000000040417a\n.text:000000000040417e\n.text:0000000000404181\n.text:0000000000404184\n.text:0000000000404187\n.text:000000000040418a\n.text:000000000040418f\n.text:0000000000404192\n.text:0000000000404198\n.text:000000000040419d\n.text:000000000040419f\n.text:00000000004041a3\n.text:00000000004041aa\n.text:00000000004041b1\n.text:00000000004041b6\n.text:00000000004041bb\n.text:00000000004041c0\n.text:00000000004041c2\n.text:00000000004041c7\n.text:00000000004041ca\n.text:00000000004041cd\n.text:00000000004041d3\n.text:00000000004041d5\n.text:00000000004041d8\n.text:00000000004041dc\n.text:00000000004041df\n.text:00000000004041e3\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ee\n.text:00000000004041f5\n.text:00000000004041f7\n.text:00000000004041fe\n.text:0000000000404202\n.text:0000000000404208\n.text:000000000040420b\n.text:000000000040420f\n.text:0000000000404212\n.text:0000000000404215\n.text:0000000000404219\n.text:000000000040421b\n.text:000000000040421e\n.text:0000000000404223\n.text:0000000000404229\n.text:000000000040422c\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423b\n.text:000000000040423e\n.text:0000000000404242\n.text:0000000000404246\n.text:000000000040424b\n.text:000000000040424f\n.text:0000000000404253\n.text:0000000000404257\n.text:000000000040425b\n.text:000000000040425f\n.text:0000000000404264\n.text:0000000000404267\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404272\n.text:0000000000404275\n.text:0000000000404278\n.text:000000000040427b\n.text:000000000040427c\n.text:0000000000404281\n.text:0000000000404285\n.text:0000000000404288\n.text:000000000040428b\n.text:000000000040428d\n.text:0000000000404292\n.text:0000000000404296\n.text:000000000040429b\n.text:000000000040429d\n.text:00000000004042a1\n.text:00000000004042a6\n.text:00000000004042a9\n.text:00000000004042ac\n.text:00000000004042b1\n.text:00000000004042b6\n.text:00000000004042b9\n.text:00000000004042be\n.text:00000000004042c1\n.text:00000000004042c3\n.text:00000000004042c8\n.text:00000000004042cb\n.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042de\n.text:00000000004042e2\n.text:00000000004042e5\n.text:00000000004042e8\n.text:00000000004042ed\n.text:00000000004042f2\n.text:00000000004042f7\n.text:00000000004042fa\n.text:00000000004042fd\n.text:00000000004042fe\n.text:0000000000404303\n.text:0000000000404307\n.text:000000000040430b\n.text:000000000040430f\n.text:0000000000404312\n.text:0000000000404316\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431b\n.text:000000000040431d\n.text:000000000040431f\n.text:0000000000404320\n.text:0000000000404321\n'
p1105
tp1106
sS'strcmp'
p1107
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a100)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060a100]\n'
p1110
S'ff 25 ca 8c 20 00\n'
p1111
S'.plt:0000000000401430\n'
p1112
tp1113
sS'set_custom_quoting'
p1114
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1115
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1116
S'TEST RDI,RDI\nMOV EAX,0x60a2c0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403305\nTEST RDX,RDX\nJZ 0x00403305\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401280\n'
p1117
S'48 85 ff\nb8 c0 a2 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 75 df ff ff\n'
p1118
S'.text:00000000004032e0\n.text:00000000004032e3\n.text:00000000004032e8\n.text:00000000004032ec\n.text:00000000004032f2\n.text:00000000004032f5\n.text:00000000004032f7\n.text:00000000004032fa\n.text:00000000004032fc\n.text:0000000000403300\n.text:0000000000403304\n.text:0000000000403305\n.text:0000000000403306\n'
p1119
tp1120
sS'c_isalpha'
p1121
(S'\n__stdcall c_isalpha()\n'
p1122
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1123
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040583b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1124
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1125
S'.text:0000000000405820\n.text:0000000000405823\n.text:0000000000405826\n.text:0000000000405828\n.text:0000000000405832\n.text:0000000000405834\n.text:0000000000405837\n.text:000000000040583a\n.text:000000000040583b\n.text:000000000040583d\n'
p1126
tp1127
sS'quotearg_custom_mem'
p1128
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1129
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404580\n'
p1131
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1132
S'.text:0000000000404610\n.text:0000000000404613\n.text:0000000000404616\n.text:0000000000404619\n.text:000000000040461c\n.text:000000000040461e\n.text:0000000000404621\n'
p1133
tp1134
sS'geteuid'
p1135
(S'\n__stdcall geteuid()\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t geteuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_geteuid_0060a0c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060a0c8]\n'
p1138
S'ff 25 02 8d 20 00\n'
p1139
S'.plt:00000000004013c0\n'
p1140
tp1141
sS'rpl_calloc'
p1142
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1143
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a0f8)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1144
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004057db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004057e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004057e0\nPUSH RAX\nCALL 0x00401290\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401420\n'
p1145
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 bf ba ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 35 bc ff ff\n'
p1146
S'.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a8\n.text:00000000004057aa\n.text:00000000004057ad\n.text:00000000004057b2\n.text:00000000004057b4\n.text:00000000004057b7\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057c0\n.text:00000000004057c3\n.text:00000000004057c6\n.text:00000000004057c9\n.text:00000000004057cb\n.text:00000000004057cc\n.text:00000000004057d1\n.text:00000000004057d7\n.text:00000000004057d9\n.text:00000000004057da\n.text:00000000004057db\n.text:00000000004057e0\n.text:00000000004057e3\n.text:00000000004057e6\n'
p1147
tp1148
sS'memset'
p1149
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x0060a0c0]\n'
p1152
S'ff 25 0a 8d 20 00\n'
p1153
S'.plt:00000000004013b0\n'
p1154
tp1155
sS'getc_unlocked'
p1156
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060a060]\n'
p1159
S'ff 25 6a 8d 20 00\n'
p1160
S'.plt:00000000004012f0\n'
p1161
tp1162
sS'c_isascii'
p1163
(S'\n__stdcall c_isascii()\n'
p1164
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1165
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1166
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1167
S'.text:0000000000405840\n.text:0000000000405846\n.text:0000000000405849\n'
p1168
tp1169
sS'__ctype_b_loc'
p1170
(S'\n__stdcall __ctype_b_loc()\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a1d0)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060a1d0]\n'
p1173
S'ff 25 fa 8b 20 00\n'
p1174
S'.plt:00000000004015d0\n'
p1175
tp1176
sS'quotearg'
p1177
(S'\n__stdcall quotearg(char * arg)\n'
p1178
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1179
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404160\n'
p1180
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1181
S'.text:0000000000404340\n.text:0000000000404343\n.text:0000000000404345\n.text:0000000000404348\n'
p1182
tp1183
sS'__vasprintf_chk'
p1184
(S'\n__stdcall __vasprintf_chk()\n'
p1185
V\u000avoid __vasprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___vasprintf_chk_0060a140)();\u000a  return;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x0060a140]\n'
p1187
S'ff 25 8a 8c 20 00\n'
p1188
S'.plt:00000000004014b0\n'
p1189
tp1190
sS'_start'
p1191
(S'\n__stdcall _start()\n'
p1192
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1193
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405f10\nMOV RCX,0x405ea0\nMOV RDI,0x401a90\nCALL qword ptr [0x00609ff0]\nHLT\n'
p1194
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 10 5f 40 00\n48 c7 c1 a0 5e 40 00\n48 c7 c7 90 1a 40 00\nff 15 e6 89 20 00\nf4\n'
p1195
S'.text:00000000004015e0\n.text:00000000004015e2\n.text:00000000004015e5\n.text:00000000004015e6\n.text:00000000004015e9\n.text:00000000004015ed\n.text:00000000004015ee\n.text:00000000004015ef\n.text:00000000004015f6\n.text:00000000004015fd\n.text:0000000000401604\n.text:000000000040160a\n'
p1196
tp1197
sS'c_iscntrl'
p1198
(S'\n__stdcall c_iscntrl()\n'
p1199
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1200
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405868\nRET\nCMP EDI,0x7f\nJZ 0x00405867\nXOR EAX,EAX\nRET\n'
p1201
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1202
S'.text:0000000000405860\n.text:0000000000405862\n.text:0000000000405865\n.text:0000000000405867\n.text:0000000000405868\n.text:000000000040586b\n.text:000000000040586d\n.text:000000000040586f\n'
p1203
tp1204
sS'c_isblank'
p1205
(S'\n__stdcall c_isblank()\n'
p1206
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1207
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1208
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1209
S'.text:0000000000405850\n.text:0000000000405853\n.text:0000000000405856\n.text:0000000000405859\n.text:000000000040585c\n.text:000000000040585e\n'
p1210
tp1211
sS'atexit'
p1212
(S'\n__stdcall atexit(__func * __func)\n'
p1213
V\u000a/* WARNING: Removing unreachable block (ram,0x00405f40) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a1a0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1214
S'MOV RAX,0x60a1e0\nTEST RAX,RAX\nJZ 0x00405f40\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401570\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401570\n'
p1215
S'48 c7 c0 e0 a1 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 3a b6 ff ff\n31 d2\n31 f6\ne9 27 b6 ff ff\n'
p1216
S'.text:0000000000405f20\n.text:0000000000405f27\n.text:0000000000405f2a\n.text:0000000000405f2c\n.text:0000000000405f2f\n.text:0000000000405f31\n.text:0000000000405f40\n.text:0000000000405f42\n.text:0000000000405f44\n'
p1217
tp1218
sS'fdopen'
p1219
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a168)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060a168]\n'
p1222
S'ff 25 62 8c 20 00\n'
p1223
S'.plt:0000000000401500\n'
p1224
tp1225
sS'error'
p1226
(S'\n__stdcall error()\n'
p1227
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a180)();\u000a  return;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060a180]\n'
p1229
S'ff 25 4a 8c 20 00\n'
p1230
S'.plt:0000000000401530\n'
p1231
tp1232
sS'strcaseeq6'
p1233
(S'\n__stdcall strcaseeq6()\n'
p1234
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404a02\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a09\nJMP 0x00404a1e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a1e\nTEST BPL,BPL\nJZ 0x00404a19\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404a30\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1236
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 01 0f 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1237
S'.text:00000000004049e0\n.text:00000000004049e1\n.text:00000000004049e2\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e8\n.text:00000000004049ea\n.text:00000000004049ef\n.text:00000000004049f3\n.text:00000000004049f5\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049fc\n.text:00000000004049fe\n.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a04\n.text:0000000000404a07\n.text:0000000000404a09\n.text:0000000000404a0c\n.text:0000000000404a0e\n.text:0000000000404a11\n.text:0000000000404a15\n.text:0000000000404a16\n.text:0000000000404a17\n.text:0000000000404a19\n.text:0000000000404a1e\n.text:0000000000404a22\n.text:0000000000404a23\n.text:0000000000404a24\n'
p1238
tp1239
sS'strcaseeq5'
p1240
(S'\n__stdcall strcaseeq5()\n'
p1241
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1242
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004049b6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004049bd\nJMP 0x004049d4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004049d4\nTEST BPL,BPL\nJZ 0x004049cf\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004049e0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1243
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 4d 0f 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1244
S'.text:0000000000404990\n.text:0000000000404991\n.text:0000000000404993\n.text:0000000000404994\n.text:0000000000404997\n.text:0000000000404999\n.text:000000000040499c\n.text:000000000040499e\n.text:00000000004049a3\n.text:00000000004049a7\n.text:00000000004049a9\n.text:00000000004049ab\n.text:00000000004049ae\n.text:00000000004049b0\n.text:00000000004049b2\n.text:00000000004049b4\n.text:00000000004049b6\n.text:00000000004049b8\n.text:00000000004049bb\n.text:00000000004049bd\n.text:00000000004049c0\n.text:00000000004049c2\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049ca\n.text:00000000004049cc\n.text:00000000004049cd\n.text:00000000004049cf\n.text:00000000004049d4\n.text:00000000004049d5\n.text:00000000004049d7\n.text:00000000004049d8\n'
p1245
tp1246
sS'strcaseeq7'
p1247
(S'\n__stdcall strcaseeq7()\n'
p1248
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1249
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404a52\nTEST ECX,0xffffffdf\nJNZ 0x00404a56\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404a5a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1250
S'53\n48 89 fb\n31 ff\ne8 b5 0e 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1251
S'.text:0000000000404a30\n.text:0000000000404a31\n.text:0000000000404a34\n.text:0000000000404a36\n.text:0000000000404a3b\n.text:0000000000404a3f\n.text:0000000000404a41\n.text:0000000000404a43\n.text:0000000000404a49\n.text:0000000000404a4b\n.text:0000000000404a50\n.text:0000000000404a51\n.text:0000000000404a52\n.text:0000000000404a54\n.text:0000000000404a56\n.text:0000000000404a58\n.text:0000000000404a59\n.text:0000000000404a5a\n.text:0000000000404a5f\n.text:0000000000404a60\n'
p1252
tp1253
sS'xmax'
p1254
(S'\n__stdcall xmax(size_t size1, size_t size2)\n'
p1255
V\u000asize_t xmax(size_t size1,size_t size2)\u000a\u000a{\u000a  if (size2 <= size1) {\u000a    size2 = size1;\u000a  }\u000a  return size2;\u000a}\u000a\u000a
p1256
S'CMP RDI,RSI\nCMOVNC RSI,RDI\nMOV RAX,RSI\nRET\n'
p1257
S'48 39 f7\n48 0f 43 f7\n48 89 f0\nc3\n'
p1258
S'.text:0000000000405d50\n.text:0000000000405d53\n.text:0000000000405d57\n.text:0000000000405d5a\n'
p1259
tp1260
sS'and'
p1261
(S'\n__stdcall and()\n'
p1262
V\u000a_Bool and(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  \u000a  _Var2 = term();\u000a  _Var4 = _Var2;\u000a  if (pos < argc) {\u000a    do {\u000a      pcVar1 = argv[(long)pos];\u000a      if (((*pcVar1 != '-') || (pcVar1[1] != 'a')) || (pcVar1[2] != 0)) break;\u000a      advance(0);\u000a      _Var3 = term();\u000a      _Var2 = (_Bool)((_Bool)(_Var4 & _Var3) != false);\u000a      _Var4 = (_Bool)(_Var4 & _Var3);\u000a    } while (pos < argc);\u000a  }\u000a  return (_Bool)(_Var2 & 1);\u000a}\u000a\u000a
p1263
S'PUSH RBX\nCALL 0x00402d80\nMOV ECX,dword ptr [0x0060a29c]\nCMP ECX,dword ptr [0x0060a298]\nJGE 0x00402d71\nMOVZX EBX,AL\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [0x0060a290]\nMOVSXD RCX,ECX\nMOV RCX,qword ptr [RDX + RCX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00402d71\nCMP byte ptr [RCX + 0x1],0x61\nJNZ 0x00402d71\nCMP byte ptr [RCX + 0x2],0x0\nJNZ 0x00402d71\nXOR EDI,EDI\nCALL 0x00401f90\nCALL 0x00402d80\nMOVZX EAX,AL\nAND EBX,EAX\nSETNZ AL\nMOV ECX,dword ptr [0x0060a29c]\nCMP ECX,dword ptr [0x0060a298]\nJL 0x00402d30\nAND AL,0x1\nPOP RBX\nRET\n'
p1264
S'53\ne8 6a 00 00 00\n8b 0d 80 75 20 00\n3b 0d 76 75 20 00\n7d 4d\n0f b6 d8\n66 0f 1f 84 00 00 00 00 00\n48 8b 15 59 75 20 00\n48 63 c9\n48 8b 0c ca\n80 39 2d\n75 2e\n80 79 01 61\n75 28\n80 79 02 00\n75 22\n31 ff\ne8 3a f2 ff ff\ne8 25 00 00 00\n0f b6 c0\n21 c3\n0f 95 c0\n8b 0d 33 75 20 00\n3b 0d 29 75 20 00\n7c bf\n24 01\n5b\nc3\n'
p1265
S'.text:0000000000402d10\n.text:0000000000402d11\n.text:0000000000402d16\n.text:0000000000402d1c\n.text:0000000000402d22\n.text:0000000000402d24\n.text:0000000000402d27\n.text:0000000000402d30\n.text:0000000000402d37\n.text:0000000000402d3a\n.text:0000000000402d3e\n.text:0000000000402d41\n.text:0000000000402d43\n.text:0000000000402d47\n.text:0000000000402d49\n.text:0000000000402d4d\n.text:0000000000402d4f\n.text:0000000000402d51\n.text:0000000000402d56\n.text:0000000000402d5b\n.text:0000000000402d5e\n.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d69\n.text:0000000000402d6f\n.text:0000000000402d71\n.text:0000000000402d73\n.text:0000000000402d74\n'
p1266
tp1267
sS'expr'
p1268
(S'\n__stdcall expr()\n'
p1269
V\u000a_Bool expr(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *in_RDI;\u000a  \u000a  if (pos < argc) {\u000a    _Var1 = or();\u000a    return _Var1;\u000a  }\u000a  beyond();\u000a  if ((*in_RDI == '-') && ((int)in_RDI[1] - 0x47U < 0x34)) {\u000a    return (_Bool)((byte)(0xb7b93fc0011a1 >> ((byte)((int)in_RDI[1] - 0x47U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1270
S'MOV EAX,dword ptr [0x0060a29c]\nCMP EAX,dword ptr [0x0060a298]\nJGE 0x00401fd3\nJMP 0x00402ca0\nPUSH RAX\nCALL 0x00402500\nNOP dword ptr [RAX]\n'
p1271
S'8b 05 d6 82 20 00\n3b 05 cc 82 20 00\n7d 05\ne9 cd 0c 00 00\n50\ne8 27 05 00 00\n0f 1f 80 00 00 00 00\n'
p1272
S'.text:0000000000401fc0\n.text:0000000000401fc6\n.text:0000000000401fcc\n.text:0000000000401fce\n.text:0000000000401fd3\n.text:0000000000401fd4\n.text:0000000000401fd9\n'
p1273
tp1274
sS'strcaseeq0'
p1275
(S'\n__stdcall strcaseeq0()\n'
p1276
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1277
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404765\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040476c\nJMP 0x004047a0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004047a0\nTEST BPL,BPL\nJZ 0x0040479b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004047b0\nJMP 0x004047a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1278
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 9d 11 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1279
S'.text:0000000000404730\n.text:0000000000404731\n.text:0000000000404733\n.text:0000000000404735\n.text:0000000000404737\n.text:0000000000404739\n.text:000000000040473a\n.text:000000000040473b\n.text:000000000040473e\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474c\n.text:000000000040474e\n.text:0000000000404753\n.text:0000000000404756\n.text:0000000000404758\n.text:000000000040475a\n.text:000000000040475d\n.text:000000000040475f\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404767\n.text:000000000040476a\n.text:000000000040476c\n.text:000000000040476f\n.text:0000000000404771\n.text:0000000000404775\n.text:000000000040477a\n.text:000000000040477d\n.text:0000000000404781\n.text:0000000000404785\n.text:0000000000404789\n.text:000000000040478d\n.text:0000000000404791\n.text:0000000000404794\n.text:0000000000404799\n.text:000000000040479b\n.text:00000000004047a0\n.text:00000000004047a4\n.text:00000000004047a5\n.text:00000000004047a7\n.text:00000000004047a9\n.text:00000000004047ab\n.text:00000000004047ad\n.text:00000000004047ae\n'
p1280
tp1281
sS'get_stat_mtime'
p1282
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p1283
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p1284
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p1285
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p1286
S'.text:0000000000404ad0\n.text:0000000000404ad4\n.text:0000000000404ad8\n'
p1287
tp1288
sS'strcaseeq2'
p1289
(S'\n__stdcall strcaseeq2()\n'
p1290
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404876\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040487d\nJMP 0x004048aa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004048aa\nTEST BPL,BPL\nJZ 0x004048a5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004048c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1292
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 8d 10 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1293
S'.text:0000000000404840\n.text:0000000000404841\n.text:0000000000404843\n.text:0000000000404845\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484a\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404851\n.text:0000000000404854\n.text:0000000000404857\n.text:0000000000404859\n.text:000000000040485c\n.text:000000000040485e\n.text:0000000000404863\n.text:0000000000404867\n.text:0000000000404869\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404870\n.text:0000000000404872\n.text:0000000000404874\n.text:0000000000404876\n.text:0000000000404878\n.text:000000000040487b\n.text:000000000040487d\n.text:0000000000404880\n.text:0000000000404882\n.text:0000000000404886\n.text:000000000040488a\n.text:000000000040488e\n.text:0000000000404892\n.text:0000000000404895\n.text:0000000000404899\n.text:000000000040489a\n.text:000000000040489c\n.text:000000000040489e\n.text:00000000004048a0\n.text:00000000004048a2\n.text:00000000004048a3\n.text:00000000004048a5\n.text:00000000004048aa\n.text:00000000004048ae\n.text:00000000004048af\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b5\n.text:00000000004048b7\n.text:00000000004048b8\n'
p1294
tp1295
sS'strcaseeq1'
p1296
(S'\n__stdcall strcaseeq1()\n'
p1297
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004047ed\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004047f4\nJMP 0x00404827\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404827\nTEST BPL,BPL\nJZ 0x00404822\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404840\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 16 11 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:00000000004047b0\n.text:00000000004047b1\n.text:00000000004047b3\n.text:00000000004047b5\n.text:00000000004047b7\n.text:00000000004047b9\n.text:00000000004047ba\n.text:00000000004047bb\n.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c6\n.text:00000000004047c9\n.text:00000000004047cb\n.text:00000000004047ce\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047da\n.text:00000000004047de\n.text:00000000004047e0\n.text:00000000004047e2\n.text:00000000004047e5\n.text:00000000004047e7\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ed\n.text:00000000004047ef\n.text:00000000004047f2\n.text:00000000004047f4\n.text:00000000004047f7\n.text:00000000004047f9\n.text:00000000004047fd\n.text:0000000000404801\n.text:0000000000404805\n.text:000000000040480b\n.text:000000000040480f\n.text:0000000000404812\n.text:0000000000404816\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481b\n.text:000000000040481d\n.text:000000000040481f\n.text:0000000000404820\n.text:0000000000404822\n.text:0000000000404827\n.text:000000000040482b\n.text:000000000040482c\n.text:000000000040482e\n.text:0000000000404830\n.text:0000000000404832\n.text:0000000000404834\n.text:0000000000404835\n'
p1301
tp1302
sS'strcaseeq4'
p1303
(S'\n__stdcall strcaseeq4()\n'
p1304
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040495c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404963\nJMP 0x00404984\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404984\nTEST BPL,BPL\nJZ 0x0040497f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404990\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1306
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 a7 0f 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1307
S'.text:0000000000404930\n.text:0000000000404931\n.text:0000000000404933\n.text:0000000000404935\n.text:0000000000404936\n.text:0000000000404937\n.text:000000000040493a\n.text:000000000040493d\n.text:000000000040493f\n.text:0000000000404942\n.text:0000000000404944\n.text:0000000000404949\n.text:000000000040494d\n.text:000000000040494f\n.text:0000000000404951\n.text:0000000000404954\n.text:0000000000404956\n.text:0000000000404958\n.text:000000000040495a\n.text:000000000040495c\n.text:000000000040495e\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404966\n.text:0000000000404968\n.text:000000000040496c\n.text:0000000000404970\n.text:0000000000404973\n.text:0000000000404977\n.text:0000000000404978\n.text:000000000040497a\n.text:000000000040497c\n.text:000000000040497d\n.text:000000000040497f\n.text:0000000000404984\n.text:0000000000404988\n.text:0000000000404989\n.text:000000000040498b\n.text:000000000040498d\n.text:000000000040498e\n'
p1308
tp1309
sS'strcaseeq3'
p1310
(S'\n__stdcall strcaseeq3()\n'
p1311
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004058f0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004048f0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004048f7\nJMP 0x0040491a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040491a\nTEST BPL,BPL\nJZ 0x00404915\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404930\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 13 10 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:00000000004048c0\n.text:00000000004048c1\n.text:00000000004048c3\n.text:00000000004048c5\n.text:00000000004048c7\n.text:00000000004048c8\n.text:00000000004048cb\n.text:00000000004048ce\n.text:00000000004048d1\n.text:00000000004048d3\n.text:00000000004048d6\n.text:00000000004048d8\n.text:00000000004048dd\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048ee\n.text:00000000004048f0\n.text:00000000004048f2\n.text:00000000004048f5\n.text:00000000004048f7\n.text:00000000004048fa\n.text:00000000004048fc\n.text:0000000000404900\n.text:0000000000404904\n.text:0000000000404908\n.text:000000000040490b\n.text:000000000040490c\n.text:000000000040490e\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404913\n.text:0000000000404915\n.text:000000000040491a\n.text:000000000040491b\n.text:000000000040491d\n.text:000000000040491f\n.text:0000000000404921\n.text:0000000000404922\n'
p1315
tp1316
sS'find_int'
p1317
(S'\n__stdcall find_int(char * string)\n'
p1318
V\u000achar * find_int(char *string)\u000a\u000a{\u000a  char cVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  ushort **ppuVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  char *format;\u000a  \u000a  ppuVar4 = __ctype_b_loc();\u000a  puVar2 = *ppuVar4;\u000a  format = string + -1;\u000a  do {\u000a    pcVar5 = format;\u000a    cVar1 = pcVar5[1];\u000a    format = pcVar5 + 1;\u000a    bVar3 = to_uchar();\u000a  } while ((*(byte *)(puVar2 + (ulong)bVar3) & 1) != 0);\u000a  pcVar6 = format + (ulong)(cVar1 == '-');\u000a  if (cVar1 == '+') {\u000a    format = pcVar5 + 2;\u000a    pcVar6 = pcVar5 + 2;\u000a  }\u000a  if ((int)*pcVar6 - 0x30U < 10) {\u000a    do {\u000a      pcVar5 = pcVar6 + 1;\u000a      pcVar6 = pcVar6 + 1;\u000a    } while ((int)*pcVar5 - 0x30U < 10);\u000a    puVar2 = *ppuVar4;\u000a    do {\u000a      cVar1 = *pcVar6;\u000a      bVar3 = to_uchar();\u000a      pcVar6 = pcVar6 + 1;\u000a    } while ((*(byte *)(puVar2 + (ulong)bVar3) & 1) != 0);\u000a    if (cVar1 == 0) {\u000a      return format;\u000a    }\u000a  }\u000a  format = (char *)dcgettext(0,"invalid integer %s",5);\u000a  pcVar5 = quote(string);\u000a                    /* WARNING: Subroutine does not return */\u000a  test_syntax_error(format,pcVar5);\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nCALL 0x004015d0\nMOV R15,RAX\nMOV RBX,qword ptr [R15]\nLEA R12,[R14 + -0x1]\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EBP,byte ptr [R12 + 0x1]\nINC R12\nMOVSX EDI,BPL\nCALL 0x00402650\nMOVZX EAX,AL\nTEST byte ptr [RBX + RAX*0x2],0x1\nJNZ 0x00402580\nLEA RAX,[R12 + 0x1]\nXOR EBX,EBX\nCMP BPL,0x2d\nSETZ BL\nADD RBX,R12\nCMP BPL,0x2b\nCMOVZ RBX,RAX\nCMOVZ R12,RAX\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x0040261b\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX + 0x1]\nINC RBX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x004025d0\nMOV RBP,qword ptr [R15]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX R15D,byte ptr [RBX]\nMOVSX EDI,R15B\nCALL 0x00402650\nMOVZX EAX,AL\nINC RBX\nTEST byte ptr [RBP + RAX*0x2],0x1\nJNZ 0x004025f0\nTEST R15B,R15B\nJNZ 0x0040261b\nMOV RAX,R12\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406f72\nMOV EDX,0x5\nCALL 0x00401340\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00404660\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RSI,RCX\nCALL 0x00401c10\n'
p1320
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\ne8 60 f0 ff ff\n49 89 c7\n49 8b 1f\n4d 8d 66 ff\n66 0f 1f 44 00 00\n41 0f b6 6c 24 01\n49 ff c4\n40 0f be fd\ne8 be 00 00 00\n0f b6 c0\nf6 04 43 01\n75 e5\n49 8d 44 24 01\n31 db\n40 80 fd 2d\n0f 94 c3\n4c 01 e3\n40 80 fd 2b\n48 0f 44 d8\n4c 0f 44 e0\n0f be 03\n83 c0 d0\n83 f8 09\n77 58\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 43 01\n48 ff c3\n83 c0 d0\n83 f8 0a\n72 f1\n49 8b 2f\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n44 0f b6 3b\n41 0f be ff\ne8 53 00 00 00\n0f b6 c0\n48 ff c3\nf6 44 45 00 01\n75 e6\n45 84 ff\n75 0c\n4c 89 e0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 72 6f 40 00\nba 05 00 00 00\ne8 14 ed ff ff\n48 89 c3\n4c 89 f7\ne8 29 20 00 00\n48 89 c1\n31 c0\n48 89 df\n48 89 ce\ne8 c9 f5 ff ff\n'
p1321
S'.text:0000000000402560\n.text:0000000000402561\n.text:0000000000402563\n.text:0000000000402565\n.text:0000000000402567\n.text:0000000000402568\n.text:000000000040256b\n.text:0000000000402570\n.text:0000000000402573\n.text:0000000000402576\n.text:000000000040257a\n.text:0000000000402580\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258d\n.text:0000000000402592\n.text:0000000000402595\n.text:0000000000402599\n.text:000000000040259b\n.text:00000000004025a0\n.text:00000000004025a2\n.text:00000000004025a6\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025b0\n.text:00000000004025b4\n.text:00000000004025b8\n.text:00000000004025bb\n.text:00000000004025be\n.text:00000000004025c1\n.text:00000000004025c3\n.text:00000000004025d0\n.text:00000000004025d4\n.text:00000000004025d7\n.text:00000000004025da\n.text:00000000004025dd\n.text:00000000004025df\n.text:00000000004025e2\n.text:00000000004025f0\n.text:00000000004025f4\n.text:00000000004025f8\n.text:00000000004025fd\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260d\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402613\n.text:0000000000402615\n.text:0000000000402617\n.text:0000000000402619\n.text:000000000040261a\n.text:000000000040261b\n.text:000000000040261d\n.text:0000000000402622\n.text:0000000000402627\n.text:000000000040262c\n.text:000000000040262f\n.text:0000000000402632\n.text:0000000000402637\n.text:000000000040263a\n.text:000000000040263c\n.text:000000000040263f\n.text:0000000000402642\n'
p1322
tp1323
sS'register_tm_clones'
p1324
(S'\n__stdcall register_tm_clones()\n'
p1325
V\u000a/* WARNING: Removing unreachable block (ram,0x00401673) */\u000a/* WARNING: Removing unreachable block (ram,0x0040167d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1326
S'MOV ESI,0x60a250\nPUSH RBP\nSUB RSI,0x60a250\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401688\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401688\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p1327
S'be 50 a2 60 00\n55\n48 81 ee 50 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p1328
S'.text:0000000000401650\n.text:0000000000401655\n.text:0000000000401656\n.text:000000000040165d\n.text:0000000000401661\n.text:0000000000401664\n.text:0000000000401667\n.text:000000000040166b\n.text:000000000040166e\n.text:0000000000401671\n.text:0000000000401673\n.text:0000000000401678\n.text:000000000040167b\n.text:000000000040167d\n.text:000000000040167e\n.text:0000000000401683\n.text:0000000000401688\n.text:0000000000401689\n'
p1329
tp1330
sS'or'
p1331
(S'\n__stdcall or()\n'
p1332
V\u000a_Bool or(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  \u000a  _Var2 = and();\u000a  _Var4 = _Var2;\u000a  if (pos < argc) {\u000a    do {\u000a      pcVar1 = argv[(long)pos];\u000a      if (((*pcVar1 != '-') || (pcVar1[1] != 'o')) || (pcVar1[2] != 0)) break;\u000a      advance(0);\u000a      _Var3 = and();\u000a      _Var2 = (_Bool)((_Bool)(_Var4 | _Var3) != false);\u000a      _Var4 = (_Bool)(_Var4 | _Var3);\u000a    } while (pos < argc);\u000a  }\u000a  return (_Bool)(_Var2 & 1);\u000a}\u000a\u000a
p1333
S'PUSH RBX\nCALL 0x00402d10\nMOV ECX,dword ptr [0x0060a29c]\nCMP ECX,dword ptr [0x0060a298]\nJGE 0x00402d01\nMOVZX EBX,AL\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [0x0060a290]\nMOVSXD RCX,ECX\nMOV RCX,qword ptr [RDX + RCX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00402d01\nCMP byte ptr [RCX + 0x1],0x6f\nJNZ 0x00402d01\nCMP byte ptr [RCX + 0x2],0x0\nJNZ 0x00402d01\nXOR EDI,EDI\nCALL 0x00401f90\nCALL 0x00402d10\nMOVZX EAX,AL\nOR EBX,EAX\nSETNZ AL\nMOV ECX,dword ptr [0x0060a29c]\nCMP ECX,dword ptr [0x0060a298]\nJL 0x00402cc0\nAND AL,0x1\nPOP RBX\nRET\n'
p1334
S'53\ne8 6a 00 00 00\n8b 0d f0 75 20 00\n3b 0d e6 75 20 00\n7d 4d\n0f b6 d8\n66 0f 1f 84 00 00 00 00 00\n48 8b 15 c9 75 20 00\n48 63 c9\n48 8b 0c ca\n80 39 2d\n75 2e\n80 79 01 6f\n75 28\n80 79 02 00\n75 22\n31 ff\ne8 aa f2 ff ff\ne8 25 00 00 00\n0f b6 c0\n09 c3\n0f 95 c0\n8b 0d a3 75 20 00\n3b 0d 99 75 20 00\n7c bf\n24 01\n5b\nc3\n'
p1335
S'.text:0000000000402ca0\n.text:0000000000402ca1\n.text:0000000000402ca6\n.text:0000000000402cac\n.text:0000000000402cb2\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cc0\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402cce\n.text:0000000000402cd1\n.text:0000000000402cd3\n.text:0000000000402cd7\n.text:0000000000402cd9\n.text:0000000000402cdd\n.text:0000000000402cdf\n.text:0000000000402ce1\n.text:0000000000402ce6\n.text:0000000000402ceb\n.text:0000000000402cee\n.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf9\n.text:0000000000402cff\n.text:0000000000402d01\n.text:0000000000402d03\n.text:0000000000402d04\n'
p1336
tp1337
sS'c_islower'
p1338
(S'\n__stdcall c_islower()\n'
p1339
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1340
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1341
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1342
S'.text:0000000000405890\n.text:0000000000405893\n.text:0000000000405896\n.text:0000000000405899\n'
p1343
tp1344
sS'timespec_cmp'
p1345
(S'\n__stdcall timespec_cmp()\n'
p1346
V\u000aint timespec_cmp(void)\u000a\u000a{\u000a  int in_ECX;\u000a  long in_RDX;\u000a  int in_ESI;\u000a  int iVar1;\u000a  long in_RDI;\u000a  \u000a  iVar1 = -1;\u000a  if ((in_RDX <= in_RDI) && (iVar1 = 1, in_RDI <= in_RDX)) {\u000a    iVar1 = in_ESI - in_ECX;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1347
S'MOV EAX,0xffffffff\nCMP RDI,RDX\nJL 0x00404e25\nMOV EAX,0x1\nJG 0x00404e25\nSUB ESI,ECX\nMOV EAX,ESI\nRET\n'
p1348
S'b8 ff ff ff ff\n48 39 d7\n7c 0b\nb8 01 00 00 00\n7f 04\n29 ce\n89 f0\nc3\n'
p1349
S'.text:0000000000404e10\n.text:0000000000404e15\n.text:0000000000404e18\n.text:0000000000404e1a\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e25\n'
p1350
tp1351
sS'fwrite'
p1352
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a1b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060a1b0]\n'
p1355
S'ff 25 1a 8c 20 00\n'
p1356
S'.plt:0000000000401590\n'
p1357
tp1358
sS'__do_global_dtors_aux'
p1359
(S'\n__stdcall __do_global_dtors_aux()\n'
p1360
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1361
S'CMP byte ptr [0x0060a288],0x0\nJNZ 0x004016aa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401610\nPOP RBP\nMOV byte ptr [0x0060a288],0x1\nRET\n'
p1362
S'80 3d f1 8b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 de 8b 20 00 01\nf3 c3\n'
p1363
S'.text:0000000000401690\n.text:0000000000401697\n.text:0000000000401699\n.text:000000000040169a\n.text:000000000040169d\n.text:00000000004016a2\n.text:00000000004016a3\n.text:00000000004016aa\n'
p1364
tp1365
sS'c_isprint'
p1366
(S'\n__stdcall c_isprint()\n'
p1367
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1368
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1369
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1370
S'.text:00000000004058a0\n.text:00000000004058a3\n.text:00000000004058a6\n.text:00000000004058a9\n'
p1371
tp1372
sS'_fini'
p1373
(S'\n__stdcall _fini()\n'
p1374
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1375
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1376
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1377
S'.fini:0000000000405f70\n.fini:0000000000405f74\n.fini:0000000000405f78\n'
p1378
tp1379
sS'__fpending'
p1380
(S'\n__stdcall __fpending()\n'
p1381
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a058)();\u000a  return;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060a058]\n'
p1383
S'ff 25 72 8d 20 00\n'
p1384
S'.plt:00000000004012e0\n'
p1385
tp1386
s.