(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_006111a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x006111a0]\n'
p4
S'ff 25 6a f7 20 00\n'
p5
S'.plt:0000000000401a30\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040d5a3,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x408277;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4082f8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40838c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00408108\nMOV EDX,0x40d590\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401b50\nJMP 0x0040811d\nMOV EDX,0x40d59c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40d5a3\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40d870\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40d5a7\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401960\nCMP R12,0x9\nJA 0x004081a6\nJMP qword ptr [0x40d540 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40d672\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40d7b1\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x38\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d682\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40d699\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40d6b5\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x18\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d6d5\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x18\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d6f9\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x28\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d721\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x28\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d74d\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x38\nJMP 0x00408417\nXOR EDI,EDI\nMOV ESI,0x40d77d\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b50\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401770\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 90 d5 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 4a 9a ff ff\neb 15\nba 9c d5 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 33 9a ff ff\n31 ff\nbe a3 d5 40 00\nba 05 00 00 00\ne8 32 97 ff ff\n48 89 c1\nbe 01 00 00 00\nba 70 d8 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 05 9a ff ff\n31 ff\nbe a7 d5 40 00\nba 05 00 00 00\ne8 04 97 ff ff\n48 89 c7\n4c 89 f6\ne8 f9 97 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 40 d5 40 00\n31 ff\nbe 72 d6 40 00\nba 05 00 00 00\ne8 da 96 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa 99 ff ff\n31 ff\nbe b1 d7 40 00\nba 05 00 00 00\ne8 a9 96 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 61 99 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 82 d6 40 00\nba 05 00 00 00\ne8 57 96 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 23 99 ff ff\n31 ff\nbe 99 d6 40 00\nba 05 00 00 00\ne8 22 96 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea 98 ff ff\n31 ff\nbe b5 d6 40 00\nba 05 00 00 00\ne8 e9 95 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 b4 98 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe d5 d6 40 00\nba 05 00 00 00\ne8 aa 95 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 72 98 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe f9 d6 40 00\nba 05 00 00 00\ne8 68 95 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 28 98 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 21 d7 40 00\nba 05 00 00 00\ne8 1e 95 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 de 97 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 4d d7 40 00\nba 05 00 00 00\ne8 d4 94 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8c 97 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 7d d7 40 00\nba 05 00 00 00\ne8 85 94 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3d 97 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c 93 ff ff\n'
p12
S'.text:00000000004080d0\n.text:00000000004080d2\n.text:00000000004080d4\n.text:00000000004080d6\n.text:00000000004080d7\n.text:00000000004080d8\n.text:00000000004080db\n.text:00000000004080de\n.text:00000000004080e1\n.text:00000000004080e4\n.text:00000000004080e7\n.text:00000000004080ea\n.text:00000000004080ef\n.text:00000000004080f2\n.text:00000000004080f4\n.text:00000000004080f9\n.text:00000000004080fb\n.text:00000000004080fe\n.text:0000000000408101\n.text:0000000000408106\n.text:0000000000408108\n.text:000000000040810d\n.text:000000000040810f\n.text:0000000000408112\n.text:0000000000408115\n.text:0000000000408118\n.text:000000000040811d\n.text:000000000040811f\n.text:0000000000408124\n.text:0000000000408129\n.text:000000000040812e\n.text:0000000000408131\n.text:0000000000408136\n.text:000000000040813b\n.text:0000000000408141\n.text:0000000000408143\n.text:0000000000408146\n.text:000000000040814b\n.text:000000000040814d\n.text:0000000000408152\n.text:0000000000408157\n.text:000000000040815c\n.text:000000000040815f\n.text:0000000000408162\n.text:0000000000408167\n.text:000000000040816b\n.text:000000000040816d\n.text:0000000000408175\n.text:0000000000408177\n.text:000000000040817c\n.text:0000000000408181\n.text:0000000000408186\n.text:0000000000408189\n.text:000000000040818c\n.text:0000000000408191\n.text:0000000000408193\n.text:0000000000408196\n.text:000000000040819a\n.text:000000000040819b\n.text:000000000040819d\n.text:000000000040819f\n.text:00000000004081a1\n.text:00000000004081a6\n.text:00000000004081a8\n.text:00000000004081ad\n.text:00000000004081b2\n.text:00000000004081b7\n.text:00000000004081ba\n.text:00000000004081bd\n.text:00000000004081c1\n.text:00000000004081c5\n.text:00000000004081ca\n.text:00000000004081cf\n.text:00000000004081d2\n.text:00000000004081d6\n.text:00000000004081da\n.text:00000000004081de\n.text:00000000004081e2\n.text:00000000004081e6\n.text:00000000004081ea\n.text:00000000004081ef\n.text:00000000004081f3\n.text:00000000004081f8\n.text:00000000004081fa\n.text:00000000004081ff\n.text:0000000000408204\n.text:0000000000408209\n.text:000000000040820c\n.text:000000000040820f\n.text:0000000000408213\n.text:0000000000408218\n.text:000000000040821a\n.text:000000000040821d\n.text:0000000000408221\n.text:0000000000408222\n.text:0000000000408224\n.text:0000000000408226\n.text:0000000000408228\n.text:000000000040822d\n.text:000000000040822f\n.text:0000000000408234\n.text:0000000000408239\n.text:000000000040823e\n.text:0000000000408241\n.text:0000000000408244\n.text:0000000000408248\n.text:000000000040824c\n.text:0000000000408251\n.text:0000000000408253\n.text:0000000000408256\n.text:000000000040825a\n.text:000000000040825b\n.text:000000000040825d\n.text:000000000040825f\n.text:0000000000408261\n.text:0000000000408266\n.text:0000000000408268\n.text:000000000040826d\n.text:0000000000408272\n.text:0000000000408277\n.text:000000000040827a\n.text:000000000040827d\n.text:0000000000408281\n.text:0000000000408285\n.text:0000000000408289\n.text:000000000040828e\n.text:0000000000408290\n.text:0000000000408293\n.text:0000000000408297\n.text:000000000040829c\n.text:00000000004082a0\n.text:00000000004082a5\n.text:00000000004082a7\n.text:00000000004082ac\n.text:00000000004082b1\n.text:00000000004082b6\n.text:00000000004082b9\n.text:00000000004082bc\n.text:00000000004082c0\n.text:00000000004082c4\n.text:00000000004082c9\n.text:00000000004082ce\n.text:00000000004082d1\n.text:00000000004082d5\n.text:00000000004082d9\n.text:00000000004082de\n.text:00000000004082e2\n.text:00000000004082e7\n.text:00000000004082e9\n.text:00000000004082ee\n.text:00000000004082f3\n.text:00000000004082f8\n.text:00000000004082fb\n.text:00000000004082fe\n.text:0000000000408302\n.text:0000000000408306\n.text:000000000040830a\n.text:000000000040830f\n.text:0000000000408314\n.text:0000000000408317\n.text:000000000040831b\n.text:000000000040831f\n.text:0000000000408323\n.text:0000000000408328\n.text:000000000040832c\n.text:0000000000408331\n.text:0000000000408333\n.text:0000000000408338\n.text:000000000040833d\n.text:0000000000408342\n.text:0000000000408345\n.text:0000000000408348\n.text:000000000040834c\n.text:0000000000408350\n.text:0000000000408355\n.text:000000000040835a\n.text:000000000040835d\n.text:0000000000408361\n.text:0000000000408365\n.text:0000000000408369\n.text:000000000040836d\n.text:0000000000408372\n.text:0000000000408376\n.text:000000000040837b\n.text:000000000040837d\n.text:0000000000408382\n.text:0000000000408387\n.text:000000000040838c\n.text:000000000040838f\n.text:0000000000408392\n.text:0000000000408396\n.text:000000000040839a\n.text:000000000040839e\n.text:00000000004083a3\n.text:00000000004083a8\n.text:00000000004083ab\n.text:00000000004083af\n.text:00000000004083b3\n.text:00000000004083b7\n.text:00000000004083bb\n.text:00000000004083bf\n.text:00000000004083c4\n.text:00000000004083c8\n.text:00000000004083ca\n.text:00000000004083cc\n.text:00000000004083d1\n.text:00000000004083d6\n.text:00000000004083db\n.text:00000000004083de\n.text:00000000004083e1\n.text:00000000004083e5\n.text:00000000004083e9\n.text:00000000004083ee\n.text:00000000004083f3\n.text:00000000004083f6\n.text:00000000004083fa\n.text:00000000004083fe\n.text:0000000000408402\n.text:0000000000408406\n.text:000000000040840a\n.text:000000000040840e\n.text:0000000000408413\n.text:0000000000408417\n.text:0000000000408418\n.text:000000000040841a\n.text:000000000040841c\n.text:000000000040841e\n.text:000000000040841f\n'
p13
tp14
sS'mktime_internal'
p15
(S'\n__stdcall mktime_internal(tm * tp, anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, time_t * offset)\n'
p16
V\u000atime_t mktime_internal(tm *tp,tm *(*convert)(time_t *,tm *),time_t *offset)\u000a\u000a{\u000a  uint uVar1;\u000a  tm *(*convert_00)(time_t *,tm *);\u000a  int iVar2;\u000a  int iVar3;\u000a  time_t tVar4;\u000a  tm *ptVar5;\u000a  uint uVar6;\u000a  time_t tVar7;\u000a  long a;\u000a  int iVar8;\u000a  long lVar9;\u000a  bool bVar10;\u000a  bool bVar11;\u000a  int isdst;\u000a  time_t local_108;\u000a  uint local_100;\u000a  int local_fc;\u000a  uint local_f8;\u000a  int local_f4;\u000a  time_t local_f0;\u000a  time_t local_e8;\u000a  long *local_e0;\u000a  long local_d8;\u000a  long local_d0;\u000a  long local_c8;\u000a  tm *local_c0;\u000a  long local_b8;\u000a  long local_b0;\u000a  tm *(*local_a8)(time_t *,tm *);\u000a  int local_a0;\u000a  int iStack156;\u000a  int iStack152;\u000a  int iStack148;\u000a  int local_90;\u000a  int iStack140;\u000a  int iStack136;\u000a  int iStack132;\u000a  int local_80;\u000a  undefined4 uStack124;\u000a  undefined4 uStack120;\u000a  undefined4 uStack116;\u000a  char *local_70;\u000a  tm local_68;\u000a  \u000a  iVar8 = tp->tm_sec;\u000a  local_b0 = (long)iVar8;\u000a  local_100 = tp->tm_min;\u000a  local_f8 = tp->tm_hour;\u000a  iVar3 = tp->tm_mon;\u000a  local_f4 = tp->tm_isdst;\u000a  iVar2 = iVar3 / 0xc + (iVar3 >> 0x1f) + ((uint)(iVar3 / 6 + (iVar3 >> 0x1f)) >> 0x1f);\u000a  uVar6 = iVar3 + iVar2 * -0xc;\u000a  local_d0 = (long)(int)(iVar2 - (uVar6 >> 0x1f)) + (long)tp->tm_year;\u000a  iVar3 = tp->tm_mday;\u000a  local_e0 = offset;\u000a  local_c0 = tp;\u000a  local_a8 = convert;\u000a  iVar2 = leapyear(local_d0);\u000a  uVar1 = local_f8;\u000a  bVar10 = false;\u000a  local_d8 = (long)iVar3 + -1 +\u000a             (ulong)__mon_yday[(long)iVar2 * 0xd + (long)(int)(((int)uVar6 >> 0x1f & 0xcU) + uVar6)]\u000a  ;\u000a  local_b8 = *local_e0;\u000a  iVar3 = 0;\u000a  if (-1 < local_b0) {\u000a    iVar3 = iVar8;\u000a  }\u000a  local_fc = 0x3b;\u000a  if (iVar3 < 0x3c) {\u000a    local_fc = iVar3;\u000a  }\u000a  local_108 = ydhms_diff(local_d0,local_d8,local_f8,local_100,local_fc,0x46);\u000a  convert_00 = local_a8;\u000a  local_f0 = local_108;\u000a  local_e8 = local_108;\u000a  ranged_convert(local_a8,&local_108,(tm *)&local_a0);\u000a  uVar6 = local_100;\u000a  tVar4 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)uVar1,(tm *)(ulong)local_100);\u000a  if (local_108 != tVar4) {\u000a    iVar8 = -6;\u000a    tVar7 = local_e8;\u000a    do {\u000a      a = local_f0;\u000a      if ((local_108 == tVar7) && (local_108 != local_f0)) {\u000a        if (local_80 < 0) goto LAB_0040a20b;\u000a        if (local_f4 < 0) {\u000a          if (bVar10 <= (local_80 != 0)) goto LAB_0040a20b;\u000a        }\u000a        else {\u000a          if ((local_f4 != 0) != (local_80 != 0)) goto LAB_0040a20b;\u000a        }\u000a      }\u000a      iVar8 = iVar8 + 1;\u000a      if (iVar8 == 0) {\u000a        return -1;\u000a      }\u000a      local_f0 = local_108;\u000a      bVar10 = local_80 != 0;\u000a      local_108 = tVar4;\u000a      ranged_convert(convert_00,&local_108,(tm *)&local_a0);\u000a      tVar4 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)local_f8,(tm *)(ulong)uVar6);\u000a      tVar7 = a;\u000a    } while (local_108 != tVar4);\u000a  }\u000a  iVar8 = isdst_differ();\u000a  if (iVar8 != 0) {\u000a    a = 0x92c70;\u000a    do {\u000a      lVar9 = -1;\u000a      do {\u000a        iVar8 = time_t_int_add_ok(local_108);\u000a        if (iVar8 != 0) {\u000a          local_c8 = lVar9 * a + local_108;\u000a          ranged_convert(convert_00,&local_c8,&local_68);\u000a          iVar8 = isdst_differ();\u000a          if (iVar8 == 0) {\u000a            local_108 = guess_time_tm(local_d0,local_d8,(time_t *)(ulong)local_f8,\u000a                                      (tm *)(ulong)local_100);\u000a            ranged_convert(convert_00,&local_108,(tm *)&local_a0);\u000a            goto LAB_0040a20b;\u000a          }\u000a        }\u000a        bVar10 = lVar9 < 0;\u000a        lVar9 = lVar9 + 2;\u000a      } while (bVar10);\u000a      a = a + 0x92c70;\u000a    } while (a < 0x1005fe28);\u000a  }\u000aLAB_0040a20b:\u000a  a = local_b0;\u000a  iVar8 = local_fc;\u000a  *local_e0 = (local_b8 - local_e8) + local_108;\u000a  if ((int)local_b0 != local_a0) {\u000a    bVar10 = local_fc == 0;\u000a    bVar11 = local_a0 == 0x3c;\u000a    iVar3 = time_t_int_add_ok(local_108);\u000a    if (iVar3 == 0) {\u000a      return -1;\u000a    }\u000a    a = a + local_108;\u000a    iVar3 = time_t_int_add_ok(a);\u000a    if (iVar3 == 0) {\u000a      return -1;\u000a    }\u000a    local_f0 = a + (long)(int)((uint)(bVar10 && bVar11) - iVar8);\u000a    ptVar5 = (*convert_00)(&local_f0,(tm *)&local_a0);\u000a    if (ptVar5 == (tm *)0x0) {\u000a      return -1;\u000a    }\u000a    local_108 = local_f0;\u000a  }\u000a  local_c0->tm_zone = local_70;\u000a  local_c0->tm_isdst = local_80;\u000a  *(undefined4 *)&local_c0->field_0x24 = uStack124;\u000a  *(undefined4 *)&local_c0->tm_gmtoff = uStack120;\u000a  *(undefined4 *)((long)&local_c0->tm_gmtoff + 4) = uStack116;\u000a  local_c0->tm_mon = local_90;\u000a  local_c0->tm_year = iStack140;\u000a  local_c0->tm_wday = iStack136;\u000a  local_c0->tm_yday = iStack132;\u000a  local_c0->tm_sec = local_a0;\u000a  local_c0->tm_min = iStack156;\u000a  local_c0->tm_hour = iStack152;\u000a  local_c0->tm_mday = iStack148;\u000a  return local_108;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV qword ptr [RSP + 0x28],RDX\nMOV qword ptr [RSP + 0x60],RSI\nMOVSXD R15,dword ptr [RDI]\nMOV EAX,dword ptr [RDI + 0x4]\nMOV dword ptr [RSP + 0x8],EAX\nMOV EAX,dword ptr [RDI + 0x8]\nMOV dword ptr [RSP + 0x10],EAX\nMOVSXD RBX,dword ptr [RDI + 0x10]\nMOV EAX,dword ptr [RDI + 0x20]\nMOV dword ptr [RSP + 0x14],EAX\nIMUL RAX,RBX,0x2aaaaaab\nMOV RCX,RAX\nSHR RCX,0x3f\nSAR RAX,0x21\nADD EAX,ECX\nLEA ECX,[RAX*0x4]\nLEA ECX,[RCX + RCX*0x2]\nSUB EBX,ECX\nMOV ECX,EBX\nSHR ECX,0x1f\nSUB EAX,ECX\nMOVSXD RCX,dword ptr [RDI + 0x14]\nMOVSXD R13,EAX\nADD R13,RCX\nMOV qword ptr [RSP + 0x48],RDI\nMOVSXD R14,dword ptr [RDI + 0xc]\nMOV RDI,R13\nCALL 0x0040a2f0\nCDQE\nMOV ECX,EBX\nSAR ECX,0x1f\nAND ECX,0xc\nADD ECX,EBX\nIMUL RAX,RAX,0x1a\nXOR EBP,EBP\nTEST R15,R15\nMOVSXD RCX,ECX\nMOVZX EAX,word ptr [0x40e3c0 + RAX + RCX*0x2]\nLEA R12,[R14 + RAX*0x1 + -0x1]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV RDX,qword ptr [RAX]\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x58],R15\nCMOVNS EAX,R15D\nCMP EAX,0x3c\nMOV EBX,0x3b\nCMOVL EBX,EAX\nMOV qword ptr [RSP + 0x50],RDX\nMOV EAX,EDX\nNEG EAX\nMOV R9D,0x46\nMOV RDI,R13\nMOV RSI,R12\nMOV R14D,dword ptr [RSP + 0x10]\nMOV EDX,R14D\nMOV ECX,dword ptr [RSP + 0x8]\nMOV R8D,EBX\nPUSH RAX\nPUSH 0x0\nPUSH 0x0\nPUSH 0x0\nCALL 0x0040a350\nADD RSP,0x20\nMOV qword ptr [RSP + 0x18],RAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,qword ptr [RSP + 0x60]\nMOV R15,RDI\nCALL 0x0040a4f0\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x40],R13\nMOV RDI,R13\nMOV qword ptr [RSP + 0x38],R12\nMOV RSI,R12\nMOV EDX,R14D\nMOV R14D,dword ptr [RSP + 0x10]\nMOV ECX,R14D\nMOV dword ptr [RSP + 0x14],EBX\nMOV R8D,EBX\nLEA R9,[RSP + 0x8]\nPUSH RAX\nCALL 0x0040a460\nADD RSP,0x10\nMOV RCX,qword ptr [RSP]\nCMP RCX,RAX\nJZ 0x0040a13d\nMOV R13D,0xfffffffa\nMOV R12,RSP\nMOV RBX,qword ptr [RSP + 0x20]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RCX,RBX\nJNZ 0x0040a0d0\nCMP RCX,qword ptr [RSP + 0x18]\nJZ 0x0040a0d0\nMOV ECX,dword ptr [0x88 + RSP]\nTEST ECX,ECX\nJS 0x0040a20b\nMOV EDX,dword ptr [RSP + 0x14]\nTEST EDX,EDX\nJS 0x0040a0b6\nTEST ECX,ECX\nSETNZ CL\nTEST EDX,EDX\nSETNZ DL\nXOR DL,CL\nJZ 0x0040a0d0\nJMP 0x0040a20b\nXOR EDX,EDX\nTEST ECX,ECX\nSETNZ DL\nCMP EBP,EDX\nJBE 0x0040a20b\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC R13D\nJZ 0x0040a2cc\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP]\nMOV qword ptr [RSP + 0x18],RCX\nMOV qword ptr [RSP],RAX\nXOR EBP,EBP\nCMP dword ptr [0x88 + RSP],0x0\nSETNZ BPL\nMOV RDI,R15\nMOV RSI,R12\nLEA RDX,[RSP + 0x68]\nCALL 0x0040a4f0\nSUB RSP,0x8\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x18]\nMOV ECX,R14D\nMOV R8D,dword ptr [RSP + 0x14]\nMOV R9,R12\nPUSH RAX\nCALL 0x0040a460\nADD RSP,0x10\nMOV RCX,qword ptr [RSP]\nCMP RCX,RAX\nJNZ 0x0040a080\nMOV ESI,dword ptr [0x88 + RSP]\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x0040a5c0\nTEST EAX,EAX\nJZ 0x0040a20b\nMOV EBX,0x92c70\nLEA R13,[RSP + 0x40]\nLEA RBP,[0xa0 + RSP]\nMOV R14,-0x1\nNOP\nMOV RDI,qword ptr [RSP]\nMOV R12,R14\nIMUL R12,RBX\nMOV ESI,R12D\nCALL 0x0040a5e0\nTEST EAX,EAX\nJZ 0x0040a1b2\nADD R12,qword ptr [RSP]\nMOV qword ptr [RSP + 0x40],R12\nMOV RDI,R15\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x0040a4f0\nMOV ESI,dword ptr [0xc0 + RSP]\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x0040a5c0\nTEST EAX,EAX\nJZ 0x0040a1cd\nTEST R14,R14\nLEA R14,[R14 + 0x2]\nJS 0x0040a170\nADD RBX,0x92c70\nCMP RBX,0x1005fe28\nJL 0x0040a167\nJMP 0x0040a20b\nSUB RSP,0x8\nLEA R9,[RSP + 0x48]\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x38]\nMOV EDX,dword ptr [RSP + 0x18]\nMOV ECX,dword ptr [RSP + 0x10]\nMOV R8D,dword ptr [RSP + 0x14]\nPUSH RBP\nCALL 0x0040a460\nADD RSP,0x10\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nLEA RDX,[RSP + 0x68]\nMOV RDI,R15\nCALL 0x0040a4f0\nMOV RDI,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x50]\nSUB RCX,qword ptr [RSP + 0x20]\nADD RCX,RDI\nMOV RAX,qword ptr [RSP + 0x28]\nMOV qword ptr [RAX],RCX\nMOV EAX,dword ptr [RSP + 0x68]\nMOV RBX,qword ptr [RSP + 0x58]\nCMP EBX,EAX\nJZ 0x0040a298\nMOV R13D,dword ptr [RSP + 0xc]\nTEST R13D,R13D\nSETZ R12B\nCMP EAX,0x3c\nSETZ BPL\nMOV ESI,EBX\nCALL 0x0040a5e0\nMOV R14,-0x1\nTEST EAX,EAX\nJZ 0x0040a2d3\nAND R12B,BPL\nMOVZX EBP,R12B\nSUB EBP,R13D\nADD RBX,qword ptr [RSP]\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x0040a5e0\nTEST EAX,EAX\nJZ 0x0040a2d3\nMOVSXD RAX,EBP\nADD RBX,RAX\nMOV qword ptr [RSP + 0x18],RBX\nLEA RDI,[RSP + 0x18]\nLEA RSI,[RSP + 0x68]\nCALL R15\nTEST RAX,RAX\nJZ 0x0040a2d3\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x98 + RSP]\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [RSP + 0x68]\nMOVUPS XMM1,xmmword ptr [RSP + 0x78]\nMOVUPS XMM2,xmmword ptr [0x88 + RSP]\nMOVUPS xmmword ptr [RCX + 0x20],XMM2\nMOVUPS xmmword ptr [RCX + 0x10],XMM1\nMOVUPS xmmword ptr [RCX],XMM0\nMOV R14,qword ptr [RSP]\nJMP 0x0040a2d3\nMOV R14,-0x1\nMOV RAX,R14\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n48 89 54 24 28\n48 89 74 24 60\n4c 63 3f\n8b 47 04\n89 44 24 08\n8b 47 08\n89 44 24 10\n48 63 5f 10\n8b 47 20\n89 44 24 14\n48 69 c3 ab aa aa 2a\n48 89 c1\n48 c1 e9 3f\n48 c1 f8 21\n01 c8\n8d 0c 85 00 00 00 00\n8d 0c 49\n29 cb\n89 d9\nc1 e9 1f\n29 c8\n48 63 4f 14\n4c 63 e8\n49 01 cd\n48 89 7c 24 48\n4c 63 77 0c\n4c 89 ef\ne8 67 03 00 00\n48 98\n89 d9\nc1 f9 1f\n83 e1 0c\n01 d9\n48 6b c0 1a\n31 ed\n4d 85 ff\n48 63 c9\n0f b7 84 48 c0 e3 40 00\n4d 8d 64 06 ff\n48 8b 44 24 28\n48 8b 10\nb8 00 00 00 00\n4c 89 7c 24 58\n41 0f 49 c7\n83 f8 3c\nbb 3b 00 00 00\n0f 4c d8\n48 89 54 24 50\n89 d0\nf7 d8\n41 b9 46 00 00 00\n4c 89 ef\n4c 89 e6\n44 8b 74 24 10\n44 89 f2\n8b 4c 24 08\n41 89 d8\n50\n6a 00\n6a 00\n6a 00\ne8 51 03 00 00\n48 83 c4 20\n48 89 44 24 18\n48 89 44 24 20\n48 89 04 24\n48 89 e6\n48 8d 54 24 68\n48 8b 7c 24 60\n49 89 ff\ne8 ca 04 00 00\n48 83 ec 08\n4c 89 6c 24 40\n4c 89 ef\n4c 89 64 24 38\n4c 89 e6\n44 89 f2\n44 8b 74 24 10\n44 89 f1\n89 5c 24 14\n41 89 d8\n4c 8d 4c 24 08\n50\ne8 09 04 00 00\n48 83 c4 10\n48 8b 0c 24\n48 39 c1\n0f 84 d5 00 00 00\n41 bd fa ff ff ff\n49 89 e4\n48 8b 5c 24 20\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 d9\n75 4b\n48 3b 4c 24 18\n74 44\n8b 8c 24 88 00 00 00\n85 c9\n0f 88 70 01 00 00\n8b 54 24 14\n85 d2\n78 13\n85 c9\n0f 95 c1\n85 d2\n0f 95 c2\n30 ca\n74 1f\ne9 55 01 00 00\n31 d2\n85 c9\n0f 95 c2\n39 d5\n0f 86 46 01 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n41 ff c5\n0f 84 f3 01 00 00\n48 8b 5c 24 18\n48 8b 0c 24\n48 89 4c 24 18\n48 89 04 24\n31 ed\n83 bc 24 88 00 00 00 00\n40 0f 95 c5\n4c 89 ff\n4c 89 e6\n48 8d 54 24 68\ne8 e7 03 00 00\n48 83 ec 08\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 18\n44 89 f1\n44 8b 44 24 14\n4d 89 e1\n50\ne8 34 03 00 00\n48 83 c4 10\n48 8b 0c 24\n48 39 c1\n0f 85 43 ff ff ff\n8b b4 24 88 00 00 00\n8b 7c 24 14\ne8 73 04 00 00\n85 c0\n0f 84 b6 00 00 00\nbb 70 2c 09 00\n4c 8d 6c 24 40\n48 8d ac 24 a0 00 00 00\n49 c7 c6 ff ff ff ff\n66 90\n48 8b 3c 24\n4d 89 f4\n4c 0f af e3\n44 89 e6\ne8 5d 04 00 00\n85 c0\n74 2b\n4c 03 24 24\n4c 89 64 24 40\n4c 89 ff\n4c 89 ee\n48 89 ea\ne8 52 03 00 00\n8b b4 24 c0 00 00 00\n8b 7c 24 14\ne8 12 04 00 00\n85 c0\n74 1b\n4d 85 f6\n4d 8d 76 02\n78 b5\n48 81 c3 70 2c 09 00\n48 81 fb 28 fe 05 10\n7c 9c\neb 3e\n48 83 ec 08\n4c 8d 4c 24 48\n48 8b 7c 24 40\n48 8b 74 24 38\n8b 54 24 18\n8b 4c 24 10\n44 8b 44 24 14\n55\ne8 6d 02 00 00\n48 83 c4 10\n48 89 04 24\n48 89 e6\n48 8d 54 24 68\n4c 89 ff\ne8 e5 02 00 00\n48 8b 3c 24\n48 8b 4c 24 50\n48 2b 4c 24 20\n48 01 f9\n48 8b 44 24 28\n48 89 08\n8b 44 24 68\n48 8b 5c 24 58\n39 c3\n74 67\n44 8b 6c 24 0c\n45 85 ed\n41 0f 94 c4\n83 f8 3c\n40 0f 94 c5\n89 de\ne8 95 03 00 00\n49 c7 c6 ff ff ff ff\n85 c0\n74 7d\n41 20 ec\n41 0f b6 ec\n44 29 ed\n48 03 1c 24\n48 89 df\n89 ee\ne8 72 03 00 00\n85 c0\n74 61\n48 63 c5\n48 01 c3\n48 89 5c 24 18\n48 8d 7c 24 18\n48 8d 74 24 68\n41 ff d7\n48 85 c0\n74 44\n48 8b 44 24 18\n48 89 04 24\n48 8b 84 24 98 00 00 00\n48 8b 4c 24 48\n48 89 41 30\n0f 10 44 24 68\n0f 10 4c 24 78\n0f 10 94 24 88 00 00 00\n0f 11 51 20\n0f 11 49 10\n0f 11 01\n4c 8b 34 24\neb 07\n49 c7 c6 ff ff ff ff\n4c 89 f0\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p19
S'.text:0000000000409f10\n.text:0000000000409f11\n.text:0000000000409f13\n.text:0000000000409f15\n.text:0000000000409f17\n.text:0000000000409f19\n.text:0000000000409f1a\n.text:0000000000409f21\n.text:0000000000409f26\n.text:0000000000409f2b\n.text:0000000000409f2e\n.text:0000000000409f31\n.text:0000000000409f35\n.text:0000000000409f38\n.text:0000000000409f3c\n.text:0000000000409f40\n.text:0000000000409f43\n.text:0000000000409f47\n.text:0000000000409f4e\n.text:0000000000409f51\n.text:0000000000409f55\n.text:0000000000409f59\n.text:0000000000409f5b\n.text:0000000000409f62\n.text:0000000000409f65\n.text:0000000000409f67\n.text:0000000000409f69\n.text:0000000000409f6c\n.text:0000000000409f6e\n.text:0000000000409f72\n.text:0000000000409f75\n.text:0000000000409f78\n.text:0000000000409f7d\n.text:0000000000409f81\n.text:0000000000409f84\n.text:0000000000409f89\n.text:0000000000409f8b\n.text:0000000000409f8d\n.text:0000000000409f90\n.text:0000000000409f93\n.text:0000000000409f95\n.text:0000000000409f99\n.text:0000000000409f9b\n.text:0000000000409f9e\n.text:0000000000409fa1\n.text:0000000000409fa9\n.text:0000000000409fae\n.text:0000000000409fb3\n.text:0000000000409fb6\n.text:0000000000409fbb\n.text:0000000000409fc0\n.text:0000000000409fc4\n.text:0000000000409fc7\n.text:0000000000409fcc\n.text:0000000000409fcf\n.text:0000000000409fd4\n.text:0000000000409fd6\n.text:0000000000409fd8\n.text:0000000000409fde\n.text:0000000000409fe1\n.text:0000000000409fe4\n.text:0000000000409fe9\n.text:0000000000409fec\n.text:0000000000409ff0\n.text:0000000000409ff3\n.text:0000000000409ff4\n.text:0000000000409ff6\n.text:0000000000409ff8\n.text:0000000000409ffa\n.text:0000000000409fff\n.text:000000000040a003\n.text:000000000040a008\n.text:000000000040a00d\n.text:000000000040a011\n.text:000000000040a014\n.text:000000000040a019\n.text:000000000040a01e\n.text:000000000040a021\n.text:000000000040a026\n.text:000000000040a02a\n.text:000000000040a02f\n.text:000000000040a032\n.text:000000000040a037\n.text:000000000040a03a\n.text:000000000040a03d\n.text:000000000040a042\n.text:000000000040a045\n.text:000000000040a049\n.text:000000000040a04c\n.text:000000000040a051\n.text:000000000040a052\n.text:000000000040a057\n.text:000000000040a05b\n.text:000000000040a05f\n.text:000000000040a062\n.text:000000000040a068\n.text:000000000040a06e\n.text:000000000040a071\n.text:000000000040a076\n.text:000000000040a080\n.text:000000000040a083\n.text:000000000040a085\n.text:000000000040a08a\n.text:000000000040a08c\n.text:000000000040a093\n.text:000000000040a095\n.text:000000000040a09b\n.text:000000000040a09f\n.text:000000000040a0a1\n.text:000000000040a0a3\n.text:000000000040a0a5\n.text:000000000040a0a8\n.text:000000000040a0aa\n.text:000000000040a0ad\n.text:000000000040a0af\n.text:000000000040a0b1\n.text:000000000040a0b6\n.text:000000000040a0b8\n.text:000000000040a0ba\n.text:000000000040a0bd\n.text:000000000040a0bf\n.text:000000000040a0c5\n.text:000000000040a0d0\n.text:000000000040a0d3\n.text:000000000040a0d9\n.text:000000000040a0de\n.text:000000000040a0e2\n.text:000000000040a0e7\n.text:000000000040a0eb\n.text:000000000040a0ed\n.text:000000000040a0f5\n.text:000000000040a0f9\n.text:000000000040a0fc\n.text:000000000040a0ff\n.text:000000000040a104\n.text:000000000040a109\n.text:000000000040a10d\n.text:000000000040a112\n.text:000000000040a117\n.text:000000000040a11b\n.text:000000000040a11e\n.text:000000000040a123\n.text:000000000040a126\n.text:000000000040a127\n.text:000000000040a12c\n.text:000000000040a130\n.text:000000000040a134\n.text:000000000040a137\n.text:000000000040a13d\n.text:000000000040a144\n.text:000000000040a148\n.text:000000000040a14d\n.text:000000000040a14f\n.text:000000000040a155\n.text:000000000040a15a\n.text:000000000040a15f\n.text:000000000040a167\n.text:000000000040a16e\n.text:000000000040a170\n.text:000000000040a174\n.text:000000000040a177\n.text:000000000040a17b\n.text:000000000040a17e\n.text:000000000040a183\n.text:000000000040a185\n.text:000000000040a187\n.text:000000000040a18b\n.text:000000000040a190\n.text:000000000040a193\n.text:000000000040a196\n.text:000000000040a199\n.text:000000000040a19e\n.text:000000000040a1a5\n.text:000000000040a1a9\n.text:000000000040a1ae\n.text:000000000040a1b0\n.text:000000000040a1b2\n.text:000000000040a1b5\n.text:000000000040a1b9\n.text:000000000040a1bb\n.text:000000000040a1c2\n.text:000000000040a1c9\n.text:000000000040a1cb\n.text:000000000040a1cd\n.text:000000000040a1d1\n.text:000000000040a1d6\n.text:000000000040a1db\n.text:000000000040a1e0\n.text:000000000040a1e4\n.text:000000000040a1e8\n.text:000000000040a1ed\n.text:000000000040a1ee\n.text:000000000040a1f3\n.text:000000000040a1f7\n.text:000000000040a1fb\n.text:000000000040a1fe\n.text:000000000040a203\n.text:000000000040a206\n.text:000000000040a20b\n.text:000000000040a20f\n.text:000000000040a214\n.text:000000000040a219\n.text:000000000040a21c\n.text:000000000040a221\n.text:000000000040a224\n.text:000000000040a228\n.text:000000000040a22d\n.text:000000000040a22f\n.text:000000000040a231\n.text:000000000040a236\n.text:000000000040a239\n.text:000000000040a23d\n.text:000000000040a240\n.text:000000000040a244\n.text:000000000040a246\n.text:000000000040a24b\n.text:000000000040a252\n.text:000000000040a254\n.text:000000000040a256\n.text:000000000040a259\n.text:000000000040a25d\n.text:000000000040a260\n.text:000000000040a264\n.text:000000000040a267\n.text:000000000040a269\n.text:000000000040a26e\n.text:000000000040a270\n.text:000000000040a272\n.text:000000000040a275\n.text:000000000040a278\n.text:000000000040a27d\n.text:000000000040a282\n.text:000000000040a287\n.text:000000000040a28a\n.text:000000000040a28d\n.text:000000000040a28f\n.text:000000000040a294\n.text:000000000040a298\n.text:000000000040a2a0\n.text:000000000040a2a5\n.text:000000000040a2a9\n.text:000000000040a2ae\n.text:000000000040a2b3\n.text:000000000040a2bb\n.text:000000000040a2bf\n.text:000000000040a2c3\n.text:000000000040a2c6\n.text:000000000040a2ca\n.text:000000000040a2cc\n.text:000000000040a2d3\n.text:000000000040a2d6\n.text:000000000040a2dd\n.text:000000000040a2de\n.text:000000000040a2e0\n.text:000000000040a2e2\n.text:000000000040a2e4\n.text:000000000040a2e6\n.text:000000000040a2e7\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006110e0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x006110e0]\n'
p25
S'ff 25 2a f8 20 00\n'
p26
S'.plt:00000000004018b0\n'
p27
tp28
sS'print_sep_string'
p29
(S'\n__stdcall print_sep_string()\n'
p30
V\u000avoid print_sep_string(void)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  char *pcVar8;\u000a  \u000a  pcVar8 = col_sep_string;\u000a  uVar5 = col_sep_length;\u000a  if (separators_not_printed < 1) {\u000a    if (0 < spaces_not_printed) {\u000a      print_white_space();\u000a      return;\u000a    }\u000a  }\u000a  else {\u000a    do {\u000a      uVar7 = uVar5 - 1;\u000a      pcVar4 = pcVar8;\u000a      if (0 < (int)uVar5) {\u000a        do {\u000a          if (*pcVar4 == ' ') {\u000a            piVar3 = &spaces_not_printed;\u000a          }\u000a          else {\u000a            if (0 < spaces_not_printed) {\u000a              print_white_space();\u000a            }\u000a            putchar_unlocked((int)*pcVar4);\u000a            piVar3 = &output_position;\u000a          }\u000a          *piVar3 = *piVar3 + 1;\u000a          uVar6 = uVar5 - 1;\u000a          bVar2 = 0 < (int)uVar5;\u000a          pcVar4 = pcVar4 + 1;\u000a          uVar5 = uVar6;\u000a        } while (uVar6 != 0 && bVar2);\u000a        pcVar8 = pcVar8 + (ulong)uVar7 + 1;\u000a        uVar7 = 0xffffffff;\u000a      }\u000a      if (0 < spaces_not_printed) {\u000a        print_white_space();\u000a      }\u000a      iVar1 = separators_not_printed + -1;\u000a      bVar2 = 1 < separators_not_printed;\u000a      uVar5 = uVar7;\u000a      separators_not_printed = iVar1;\u000a    } while (bVar2);\u000a  }\u000a  return;\u000a}\u000a\u000a
p31
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nCMP dword ptr [0x00611458],0x0\nJLE 0x00404235\nMOV R14,qword ptr [0x00611290]\nMOV R12D,dword ptr [0x006113a8]\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA EAX,[R12 + -0x1]\nTEST R12D,R12D\nJLE 0x00404200\nMOV R15D,EAX\nMOV RBX,R14\nCMP byte ptr [RBX],0x20\nJNZ 0x004041c0\nMOV EAX,0x611450\nJMP 0x004041db\nCMP dword ptr [0x00611450],0x0\nJLE 0x004041ce\nCALL 0x00404250\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004019c0\nMOV EAX,0x611454\nINC RBX\nINC dword ptr [RAX]\nDEC R12D\nJG 0x004041b0\nLEA R14,[R14 + R15*0x1 + 0x1]\nMOV R12D,0xffffffff\nCMP dword ptr [0x00611450],0x0\nJG 0x0040420c\nJMP 0x00404211\nMOV R12D,EAX\nCMP dword ptr [0x00611450],0x0\nJLE 0x00404211\nCALL 0x00404250\nMOV EAX,dword ptr [0x00611458]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [0x00611458],ECX\nCMP EAX,0x1\nJG 0x004041a0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCMP dword ptr [0x00611450],0x0\nJLE 0x00404229\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00404250\n'
p32
S'41 57\n41 56\n41 54\n53\n50\n83 3d d9 d2 20 00 00\n0f 8e b0 00 00 00\n4c 8b 35 04 d1 20 00\n44 8b 25 15 d2 20 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 8d 44 24 ff\n45 85 e4\n7e 56\n41 89 c7\n4c 89 f3\n80 3b 20\n75 0b\nb8 50 14 61 00\neb 1f\n83 3d 89 d2 20 00 00\n7e 05\ne8 82 00 00 00\n0f be 3b\ne8 ea d7 ff ff\nb8 54 14 61 00\n48 ff c3\nff 00\n41 ff cc\n7f cb\n4f 8d 74 3e 01\n41 bc ff ff ff ff\n83 3d 59 d2 20 00 00\n7f 13\neb 16\n41 89 c4\n83 3d 46 d2 20 00 00\n7e 05\ne8 3f 00 00 00\n8b 05 41 d2 20 00\n8d 48 ff\n89 0d 38 d2 20 00\n83 f8 01\n0f 8f 77 ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n83 3d 14 d2 20 00 00\n7e eb\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\neb 05\n'
p33
S'.text:0000000000404170\n.text:0000000000404172\n.text:0000000000404174\n.text:0000000000404176\n.text:0000000000404177\n.text:0000000000404178\n.text:000000000040417f\n.text:0000000000404185\n.text:000000000040418c\n.text:0000000000404193\n.text:00000000004041a0\n.text:00000000004041a5\n.text:00000000004041a8\n.text:00000000004041aa\n.text:00000000004041ad\n.text:00000000004041b0\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041ba\n.text:00000000004041c0\n.text:00000000004041c7\n.text:00000000004041c9\n.text:00000000004041ce\n.text:00000000004041d1\n.text:00000000004041d6\n.text:00000000004041db\n.text:00000000004041de\n.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041f0\n.text:00000000004041f7\n.text:00000000004041f9\n.text:0000000000404200\n.text:0000000000404203\n.text:000000000040420a\n.text:000000000040420c\n.text:0000000000404211\n.text:0000000000404217\n.text:000000000040421a\n.text:0000000000404220\n.text:0000000000404223\n.text:0000000000404229\n.text:000000000040422d\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404232\n.text:0000000000404234\n.text:0000000000404235\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404242\n.text:0000000000404243\n.text:0000000000404245\n.text:0000000000404247\n.text:0000000000404249\n'
p34
tp35
sS'gnu_mbswidth'
p36
(S'\n__stdcall gnu_mbswidth(char * string)\n'
p37
V\u000aint gnu_mbswidth(char *string)\u000a\u000a{\u000a  int iVar1;\u000a  size_t nbytes;\u000a  \u000a  nbytes = strlen(string);\u000a  iVar1 = mbsnwidth(string,nbytes);\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00401880\nMOV RDI,RBX\nMOV RSI,RAX\nMOV EDX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404c40\n'
p39
S'55\n53\n50\n89 f5\n48 89 fb\ne8 53 cc ff ff\n48 89 df\n48 89 c6\n89 ea\n48 83 c4 08\n5b\n5d\neb 03\n'
p40
S'.text:0000000000404c20\n.text:0000000000404c21\n.text:0000000000404c22\n.text:0000000000404c23\n.text:0000000000404c25\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c39\n.text:0000000000404c3a\n.text:0000000000404c3b\n'
p41
tp42
sS'rpl_fclose'
p43
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p44
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004092d9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004092d9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004019e0\nTEST EAX,EAX\nJS 0x004092d9\nMOV RDI,RBX\nCALL 0x00401a50\nTEST EAX,EAX\nJZ 0x004092a7\nMOV RDI,RBX\nCALL 0x004019e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004018e0\nCMP RAX,-0x1\nJZ 0x004092d9\nMOV RDI,RBX\nCALL 0x004094b0\nTEST EAX,EAX\nJZ 0x004092d9\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401840\nTEST EBP,EBP\nJZ 0x004092d2\nCALL 0x00401780\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401840\n'
p46
S'55\n53\n50\n48 89 fb\ne8 65 87 ff ff\n85 c0\n78 5a\n48 89 df\ne8 c9 87 ff ff\n85 c0\n74 1c\n48 89 df\ne8 4d 87 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 3f 86 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 c8 84 ff ff\n8b 28\n48 89 df\ne8 7e 85 ff ff\n85 ed\n74 0c\ne8 b5 84 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 59 85 ff ff\n'
p47
S'.text:0000000000409270\n.text:0000000000409271\n.text:0000000000409272\n.text:0000000000409273\n.text:0000000000409276\n.text:000000000040927b\n.text:000000000040927d\n.text:000000000040927f\n.text:0000000000409282\n.text:0000000000409287\n.text:0000000000409289\n.text:000000000040928b\n.text:000000000040928e\n.text:0000000000409293\n.text:0000000000409295\n.text:000000000040929a\n.text:000000000040929c\n.text:00000000004092a1\n.text:00000000004092a5\n.text:00000000004092a7\n.text:00000000004092aa\n.text:00000000004092af\n.text:00000000004092b1\n.text:00000000004092b3\n.text:00000000004092b8\n.text:00000000004092ba\n.text:00000000004092bd\n.text:00000000004092c2\n.text:00000000004092c4\n.text:00000000004092c6\n.text:00000000004092cb\n.text:00000000004092cd\n.text:00000000004092d2\n.text:00000000004092d6\n.text:00000000004092d7\n.text:00000000004092d8\n.text:00000000004092d9\n.text:00000000004092dc\n.text:00000000004092e0\n.text:00000000004092e1\n.text:00000000004092e2\n'
p48
tp49
sS'to_uchar'
p50
(S'\n__stdcall to_uchar()\n'
p51
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p52
S'MOV EAX,EDI\nRET\n'
p53
S'89 f8\nc3\n'
p54
S'.text:00000000004042e0\n.text:00000000004042e2\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00611050)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00611050]\n'
p60
S'ff 25 ba f8 20 00\n'
p61
S'.plt:0000000000401790\n'
p62
tp63
sS'xnrealloc'
p64
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p65
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p66
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00408624\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00408630\nPUSH RAX\nCALL 0x00408780\n'
p67
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p68
S'.text:0000000000408610\n.text:0000000000408613\n.text:0000000000408616\n.text:0000000000408619\n.text:000000000040861b\n.text:000000000040861f\n.text:0000000000408622\n.text:0000000000408624\n.text:0000000000408625\n'
p69
tp70
sS'quote'
p71
(S'\n__stdcall quote(char * arg)\n'
p72
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00406360\n'
p74
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p75
S'.text:0000000000406370\n.text:0000000000406373\n.text:0000000000406375\n.text:0000000000406378\n'
p76
tp77
sS'emit_bug_reporting_address'
p78
(S'\n__stdcall emit_bug_reporting_address()\n'
p79
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40d7ed\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40d802\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a90\nXOR EDI,EDI\nMOV ESI,0x40d818\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40b4bf\nMOV ECX,0x40c7b5\nXOR EAX,EAX\nCALL 0x00401a90\nXOR EDI,EDI\nMOV ESI,0x40d82c\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401960\n'
p81
S'50\n31 ff\nbe ed d7 40 00\nba 05 00 00 00\ne8 fe 92 ff ff\n48 89 c1\nbf 01 00 00 00\nba 02 d8 40 00\n31 c0\n48 89 ce\ne8 17 95 ff ff\n31 ff\nbe 18 d8 40 00\nba 05 00 00 00\ne8 d6 92 ff ff\n48 89 c6\nbf 01 00 00 00\nba bf b4 40 00\nb9 b5 c7 40 00\n31 c0\ne8 ed 94 ff ff\n31 ff\nbe 2c d8 40 00\nba 05 00 00 00\ne8 ac 92 ff ff\n48 8b 35 6d 8d 20 00\n48 89 c7\n58\ne9 9c 93 ff ff\n'
p82
S'.text:0000000000408550\n.text:0000000000408551\n.text:0000000000408553\n.text:0000000000408558\n.text:000000000040855d\n.text:0000000000408562\n.text:0000000000408565\n.text:000000000040856a\n.text:000000000040856f\n.text:0000000000408571\n.text:0000000000408574\n.text:0000000000408579\n.text:000000000040857b\n.text:0000000000408580\n.text:0000000000408585\n.text:000000000040858a\n.text:000000000040858d\n.text:0000000000408592\n.text:0000000000408597\n.text:000000000040859c\n.text:000000000040859e\n.text:00000000004085a3\n.text:00000000004085a5\n.text:00000000004085aa\n.text:00000000004085af\n.text:00000000004085b4\n.text:00000000004085bb\n.text:00000000004085be\n.text:00000000004085bf\n'
p83
tp84
sS'clone_quoting_options'
p85
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p86
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401780\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x611480\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00408730\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p88
S'55\n41 56\n53\n48 89 fb\ne8 44 c8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 80 14 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 d5 37 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p89
S'.text:0000000000404f30\n.text:0000000000404f31\n.text:0000000000404f33\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f3c\n.text:0000000000404f3f\n.text:0000000000404f42\n.text:0000000000404f45\n.text:0000000000404f4a\n.text:0000000000404f4e\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f5b\n.text:0000000000404f5e\n.text:0000000000404f5f\n.text:0000000000404f61\n.text:0000000000404f62\n'
p90
tp91
sS'get_stat_atime'
p92
(S'\n__stdcall get_stat_atime(stat * st)\n'
p93
V\u000atimespec get_stat_atime(stat *st)\u000a\u000a{\u000a  return st->st_atim;\u000a}\u000a\u000a
p94
S'MOV RAX,qword ptr [RDI + 0x48]\nMOV RDX,qword ptr [RDI + 0x50]\nRET\n'
p95
S'48 8b 47 48\n48 8b 57 50\nc3\n'
p96
S'.text:00000000004067c0\n.text:00000000004067c4\n.text:00000000004067c8\n'
p97
tp98
sS'xmalloc'
p99
(S'\n__stdcall xmalloc(size_t n)\n'
p100
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p101
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a00\nTEST RBX,RBX\nJZ 0x00408603\nTEST RAX,RAX\nJZ 0x00408605\nPOP RBX\nRET\nCALL 0x00408780\n'
p102
S'53\n48 89 fb\ne8 07 94 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p103
S'.text:00000000004085f0\n.text:00000000004085f1\n.text:00000000004085f4\n.text:00000000004085f9\n.text:00000000004085fc\n.text:00000000004085fe\n.text:0000000000408601\n.text:0000000000408603\n.text:0000000000408604\n.text:0000000000408605\n'
p104
tp105
sS'print_stored'
p106
(S'\n__stdcall print_stored(COLUMN * p)\n'
p107
V\u000a_Bool print_stored(COLUMN *p)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  COLUMN *pCVar5;\u000a  anon_enum_32 *paVar6;\u000a  char *pcVar7;\u000a  int iVar8;\u000a  long lVar9;\u000a  long lVar10;\u000a  \u000a  lVar10 = (long)p->current_line;\u000a  p->current_line = p->current_line + 1;\u000a  iVar2 = line_vector[lVar10];\u000a  pcVar7 = buff + (long)iVar2;\u000a  iVar3 = line_vector[lVar10 + 1];\u000a  pad_vertically = true;\u000a  if (print_a_header == 1) {\u000a    print_header();\u000a  }\u000a  pCVar5 = column_vector;\u000a  iVar4 = columns;\u000a  if (p->status == FF_FOUND) {\u000a    if (0 < columns) {\u000a      paVar6 = &column_vector->status;\u000a      iVar8 = 0;\u000a      do {\u000a        *paVar6 = ON_HOLD;\u000a        paVar6 = paVar6 + 0x10;\u000a        iVar8 = iVar8 + 1;\u000a      } while (iVar8 < iVar4);\u000a    }\u000a    if (pCVar5->lines_to_print < 1) {\u000a      if (extremities != 1) {\u000a        return true;\u000a      }\u000a      pad_vertically = false;\u000a      return true;\u000a    }\u000a  }\u000a  if (col_sep_length < padding_not_printed) {\u000a    pad_across_to();\u000a    padding_not_printed = 0;\u000a  }\u000a  if (use_col_separator != false) {\u000a    print_sep_string();\u000a  }\u000a  if (iVar2 != iVar3) {\u000a    lVar9 = (long)iVar3 - (long)iVar2;\u000a    do {\u000a      cVar1 = *pcVar7;\u000a      pcVar7 = pcVar7 + 1;\u000a      print_char((ulong)(uint)(int)cVar1);\u000a      lVar9 = lVar9 + -1;\u000a    } while (lVar9 != 0);\u000a  }\u000a  if ((spaces_not_printed == 0) &&\u000a     (output_position = end_vector[lVar10] + p->start_position,\u000a     p->start_position - col_sep_length == chars_per_margin)) {\u000a    output_position = output_position - col_sep_length;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R15,RDI\nMOVSXD R14,dword ptr [R15 + 0x28]\nLEA RAX,[R14 + 0x1]\nMOV dword ptr [R15 + 0x28],EAX\nMOV RAX,qword ptr [0x00611420]\nMOVSXD R13,dword ptr [RAX + R14*0x4]\nMOV RBX,qword ptr [0x00611430]\nADD RBX,R13\nMOVSXD R12,dword ptr [RAX + R14*0x4 + 0x4]\nMOV byte ptr [0x00611448],0x1\nCMP byte ptr [0x00611449],0x1\nJNZ 0x00403bd7\nCALL 0x00404010\nCMP dword ptr [R15 + 0x10],0x1\nJNZ 0x00403c1a\nMOV RAX,qword ptr [0x006113e8]\nCMP dword ptr [0x006112a8],0x0\nJLE 0x00403c10\nMOV ECX,dword ptr [0x006112a8]\nLEA RDX,[RAX + 0x10]\nXOR ESI,ESI\nNOP word ptr [RAX + RAX*0x1]\nMOV dword ptr [RDX],0x2\nADD RDX,0x40\nINC ESI\nCMP ESI,ECX\nJL 0x00403c00\nCMP dword ptr [RAX + 0x30],0x0\nJLE 0x00403c9a\nMOV EDI,dword ptr [0x0061144c]\nSUB EDI,dword ptr [0x006113a8]\nJLE 0x00403c37\nCALL 0x00404120\nMOV dword ptr [0x0061144c],0x0\nCMP byte ptr [0x006113a5],0x0\nJZ 0x00403c45\nCALL 0x00404170\nCMP R13D,R12D\nJZ 0x00403c60\nSUB R12,R13\nNOP dword ptr [RAX]\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nCALL 0x00403cc0\nDEC R12\nJNZ 0x00403c50\nCMP dword ptr [0x00611450],0x0\nJNZ 0x00403caa\nMOV EDX,dword ptr [R15 + 0x34]\nMOV RAX,qword ptr [0x00611428]\nMOV EAX,dword ptr [RAX + R14*0x4]\nADD EAX,EDX\nMOV dword ptr [0x00611454],EAX\nMOV ECX,dword ptr [0x006113a8]\nSUB EDX,ECX\nCMP EDX,dword ptr [0x006113a0]\nJNZ 0x00403caa\nSUB EAX,ECX\nMOV dword ptr [0x00611454],EAX\nJMP 0x00403caa\nCMP byte ptr [0x006113ac],0x1\nJNZ 0x00403caa\nMOV byte ptr [0x00611448],0x0\nMOV AL,0x1\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p109
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ff\n4d 63 77 28\n49 8d 46 01\n41 89 47 28\n48 8b 05 71 d8 20 00\n4e 63 2c b0\n48 8b 1d 76 d8 20 00\n4c 01 eb\n4e 63 64 b0 04\nc6 05 7f d8 20 00 01\n80 3d 79 d8 20 00 01\n75 05\ne8 39 04 00 00\n41 83 7f 10 01\n75 3c\n48 8b 05 03 d8 20 00\n83 3d bc d6 20 00 00\n7e 22\n8b 0d b4 d6 20 00\n48 8d 50 10\n31 f6\n66 0f 1f 44 00 00\nc7 02 02 00 00 00\n48 83 c2 40\nff c6\n39 ce\n7c f0\n83 78 30 00\n0f 8e 80 00 00 00\n8b 3d 2c d8 20 00\n2b 3d 82 d7 20 00\n7e 0f\ne8 f3 04 00 00\nc7 05 15 d8 20 00 00 00 00 00\n80 3d 67 d7 20 00 00\n74 05\ne8 2b 05 00 00\n45 39 e5\n74 16\n4d 29 ec\n0f 1f 00\n0f be 3b\n48 ff c3\ne8 65 00 00 00\n49 ff cc\n75 f0\n83 3d e9 d7 20 00 00\n75 41\n41 8b 57 34\n48 8b 05 b4 d7 20 00\n42 8b 04 b0\n01 d0\n89 05 d4 d7 20 00\n8b 0d 22 d7 20 00\n29 ca\n3b 15 12 d7 20 00\n75 1a\n29 c8\n89 05 bc d7 20 00\neb 10\n80 3d 0b d7 20 00 01\n75 07\nc6 05 9e d7 20 00 00\nb0 01\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p110
S'.text:0000000000403b90\n.text:0000000000403b92\n.text:0000000000403b94\n.text:0000000000403b96\n.text:0000000000403b98\n.text:0000000000403b99\n.text:0000000000403b9c\n.text:0000000000403ba0\n.text:0000000000403ba4\n.text:0000000000403ba8\n.text:0000000000403baf\n.text:0000000000403bb3\n.text:0000000000403bba\n.text:0000000000403bbd\n.text:0000000000403bc2\n.text:0000000000403bc9\n.text:0000000000403bd0\n.text:0000000000403bd2\n.text:0000000000403bd7\n.text:0000000000403bdc\n.text:0000000000403bde\n.text:0000000000403be5\n.text:0000000000403bec\n.text:0000000000403bee\n.text:0000000000403bf4\n.text:0000000000403bf8\n.text:0000000000403bfa\n.text:0000000000403c00\n.text:0000000000403c06\n.text:0000000000403c0a\n.text:0000000000403c0c\n.text:0000000000403c0e\n.text:0000000000403c10\n.text:0000000000403c14\n.text:0000000000403c1a\n.text:0000000000403c20\n.text:0000000000403c26\n.text:0000000000403c28\n.text:0000000000403c2d\n.text:0000000000403c37\n.text:0000000000403c3e\n.text:0000000000403c40\n.text:0000000000403c45\n.text:0000000000403c48\n.text:0000000000403c4a\n.text:0000000000403c4d\n.text:0000000000403c50\n.text:0000000000403c53\n.text:0000000000403c56\n.text:0000000000403c5b\n.text:0000000000403c5e\n.text:0000000000403c60\n.text:0000000000403c67\n.text:0000000000403c69\n.text:0000000000403c6d\n.text:0000000000403c74\n.text:0000000000403c78\n.text:0000000000403c7a\n.text:0000000000403c80\n.text:0000000000403c86\n.text:0000000000403c88\n.text:0000000000403c8e\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c98\n.text:0000000000403c9a\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403caa\n.text:0000000000403cac\n.text:0000000000403cad\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb5\n'
p111
tp112
sS'print_clump'
p113
(S'\n__stdcall print_clump(COLUMN * p, char * clump)\n'
p114
V\u000avoid print_clump(COLUMN *p,char *clump)\u000a\u000a{\u000a  char cVar1;\u000a  char *in_RDX;\u000a  uint uVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = (ulong)clump & 0xffffffff;\u000a  uVar2 = (uint)uVar3;\u000a  while (uVar2 != 0) {\u000a    cVar1 = *in_RDX;\u000a    in_RDX = in_RDX + 1;\u000a    (*p->char_func)(cVar1);\u000a    uVar2 = (int)uVar3 - 1;\u000a    uVar3 = (ulong)uVar2;\u000a  }\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV EBP,ESI\nMOV R14,RDI\nTEST EBP,EBP\nJZ 0x0040461e\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nCALL qword ptr [R14 + 0x20]\nDEC EBP\nJNZ 0x00404610\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p116
S'55\n41 56\n53\n48 89 d3\n89 f5\n49 89 fe\n85 ed\n74 0e\n0f be 3b\n48 ff c3\n41 ff 56 20\nff cd\n75 f2\n5b\n41 5e\n5d\nc3\n'
p117
S'.text:0000000000404600\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404604\n.text:0000000000404607\n.text:0000000000404609\n.text:000000000040460c\n.text:000000000040460e\n.text:0000000000404610\n.text:0000000000404613\n.text:0000000000404616\n.text:000000000040461a\n.text:000000000040461c\n.text:000000000040461e\n.text:000000000040461f\n.text:0000000000404621\n.text:0000000000404622\n'
p118
tp119
sS'leapyear'
p120
(S'\n__stdcall leapyear(long_int year)\n'
p121
V\u000aint leapyear(long_int year)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  if ((year & 3U) != 0) {\u000a    return 0;\u000a  }\u000a  bVar1 = true;\u000a  if (year == (year / 100 + (year >> 0x3f) +\u000a              SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0)) * 100) {\u000a    bVar1 = (((uint)SUB168(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x46,0) & 0x3ffffff) +\u000a             SUB164(SEXT816(year) * ZEXT816(0xa3d70a3d70a3d70b) >> 0x7f,0) & 3) == 1;\u000a  }\u000a  return (int)(uint)bVar1;\u000a}\u000a\u000a
p122
S'TEST DIL,0x3\nJZ 0x0040a2fc\nXOR EAX,EAX\nMOVZX EAX,AL\nRET\nMOV RCX,-0x5c28f5c28f5c28f5\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x6\nADD RDX,RAX\nIMUL RDX,RDX,0x64\nMOV AL,0x1\nCMP RDI,RDX\nJNZ 0x0040a347\nMOV RAX,RDI\nIMUL RCX\nADD RDX,RDI\nMOV RAX,RDX\nSHR RAX,0x3f\nSHR EDX,0x6\nADD EDX,EAX\nAND EDX,0x3\nCMP RDX,0x1\nSETZ AL\nMOVZX EAX,AL\nRET\n'
p123
S'40 f6 c7 03\n74 06\n31 c0\n0f b6 c0\nc3\n48 b9 0b d7 a3 70 3d 0a d7 a3\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 06\n48 01 c2\n48 6b d2 64\nb0 01\n48 39 d7\n75 1f\n48 89 f8\n48 f7 e9\n48 01 fa\n48 89 d0\n48 c1 e8 3f\nc1 ea 06\n01 c2\n83 e2 03\n48 83 fa 01\n0f 94 c0\n0f b6 c0\nc3\n'
p124
S'.text:000000000040a2f0\n.text:000000000040a2f4\n.text:000000000040a2f6\n.text:000000000040a2f8\n.text:000000000040a2fb\n.text:000000000040a2fc\n.text:000000000040a306\n.text:000000000040a309\n.text:000000000040a30c\n.text:000000000040a30f\n.text:000000000040a312\n.text:000000000040a316\n.text:000000000040a31a\n.text:000000000040a31d\n.text:000000000040a321\n.text:000000000040a323\n.text:000000000040a326\n.text:000000000040a328\n.text:000000000040a32b\n.text:000000000040a32e\n.text:000000000040a331\n.text:000000000040a334\n.text:000000000040a338\n.text:000000000040a33b\n.text:000000000040a33d\n.text:000000000040a340\n.text:000000000040a344\n.text:000000000040a347\n.text:000000000040a34a\n'
p125
tp126
sS'clock_gettime'
p127
(S'\n__stdcall clock_gettime(clockid_t __clock_id, timespec * __tp)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint clock_gettime(clockid_t __clock_id,timespec *__tp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_clock_gettime_00611090)();\u000a  return iVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x00611090]\n'
p130
S'ff 25 7a f8 20 00\n'
p131
S'.plt:0000000000401810\n'
p132
tp133
sS'quotearg_char_mem'
p134
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x006114b0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006114a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00611490]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00611480]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00404f90\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405e80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 08 b3 20 00\n48 89 4c 24 30\n0f 10 05 ec b2 20 00\n0f 29 44 24 20\n0f 10 05 d0 b2 20 00\n0f 29 44 24 10\n0f 10 05 b4 b2 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000406190\n.text:0000000000406192\n.text:0000000000406194\n.text:0000000000406195\n.text:0000000000406199\n.text:000000000040619b\n.text:000000000040619e\n.text:00000000004061a1\n.text:00000000004061a8\n.text:00000000004061ad\n.text:00000000004061b4\n.text:00000000004061b9\n.text:00000000004061c0\n.text:00000000004061c5\n.text:00000000004061cc\n.text:00000000004061d0\n.text:00000000004061d3\n.text:00000000004061d8\n.text:00000000004061db\n.text:00000000004061dd\n.text:00000000004061e2\n.text:00000000004061e4\n.text:00000000004061e7\n.text:00000000004061ea\n.text:00000000004061ed\n.text:00000000004061f2\n.text:00000000004061f6\n.text:00000000004061f7\n.text:00000000004061f9\n.text:00000000004061fb\n'
p139
tp140
sS'frame_dummy'
p141
(S'\n__stdcall frame_dummy()\n'
p142
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c9a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p143
S'MOV EDI,0x610e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401c90\nJMP 0x00401c20\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c8b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401c20\n'
p144
S'bf 18 0e 61 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p145
S'.text:0000000000401c80\n.text:0000000000401c85\n.text:0000000000401c89\n.text:0000000000401c8b\n.text:0000000000401c90\n.text:0000000000401c95\n.text:0000000000401c98\n.text:0000000000401c9a\n.text:0000000000401c9b\n.text:0000000000401c9e\n.text:0000000000401ca0\n.text:0000000000401ca1\n'
p146
tp147
sS'extend_abbrs'
p148
(S'\n__stdcall extend_abbrs(char * abbrs, char * abbr, size_t abbr_size)\n'
p149
V\u000avoid extend_abbrs(char *abbrs,char *abbr,size_t abbr_size)\u000a\u000a{\u000a  memcpy(abbrs,abbr,abbr_size);\u000a  abbrs[abbr_size] = 0;\u000a  return;\u000a}\u000a\u000a
p150
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RDI\nCALL 0x004019b0\nMOV byte ptr [RBX + R14*0x1],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p151
S'41 56\n53\n50\n49 89 d6\n48 89 fb\ne8 c1 83 ff ff\n42 c6 04 33 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p152
S'.text:00000000004095e0\n.text:00000000004095e2\n.text:00000000004095e3\n.text:00000000004095e4\n.text:00000000004095e7\n.text:00000000004095ea\n.text:00000000004095ef\n.text:00000000004095f4\n.text:00000000004095f8\n.text:00000000004095f9\n.text:00000000004095fb\n'
p153
tp154
sS'mbsnwidth'
p155
(S'\n__stdcall mbsnwidth(char * string, size_t nbytes)\n'
p156
V\u000aint mbsnwidth(char *string,size_t nbytes)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  ushort **ppuVar5;\u000a  ulong uVar6;\u000a  byte *pbVar7;\u000a  ulong in_RDX;\u000a  int iVar8;\u000a  uint uVar9;\u000a  bool bVar10;\u000a  wint_t local_48;\u000a  uint local_44;\u000a  uint local_40;\u000a  uint local_3c;\u000a  mbstate_t local_38;\u000a  \u000a  pbVar1 = (byte *)(string + nbytes);\u000a  sVar4 = __ctype_get_mb_cur_max();\u000a  if (sVar4 < 2) {\u000a    iVar3 = 0;\u000aLAB_00404e10:\u000a    do {\u000a      pbVar7 = (byte *)string;\u000a      if (pbVar1 <= pbVar7) {\u000a        return iVar3;\u000a      }\u000a      bVar2 = *pbVar7;\u000a      ppuVar5 = __ctype_b_loc();\u000a      if (((*ppuVar5)[(ulong)bVar2] & 0x4000) == 0) {\u000a        if ((in_RDX & 2) != 0) {\u000a          return -1;\u000a        }\u000a        string = (char *)(pbVar7 + 1);\u000a        if (((*ppuVar5)[(ulong)bVar2] & 2) != 0) goto LAB_00404e10;\u000a      }\u000a      bVar10 = iVar3 != 0x7fffffff;\u000a      iVar3 = iVar3 + 1;\u000a      iVar8 = 0x7fffffff;\u000a      string = (char *)(pbVar7 + 1);\u000a    } while (bVar10);\u000a  }\u000a  else {\u000a    if ((long)nbytes < 1) {\u000a      iVar8 = 0;\u000a    }\u000a    else {\u000a      local_44 = (uint)in_RDX & 2;\u000a      uVar9 = (uint)in_RDX & 1;\u000a      local_3c = uVar9 ^ 1;\u000a      local_40 = uVar9 * 4 ^ 5;\u000a      iVar8 = 0;\u000a      do {\u000a        switch(*string) {\u000a        case ' ':\u000a        case '!':\u000a        case '\u005c"':\u000a        case '#':\u000a        case '%':\u000a        case '&':\u000a        case '\u005c'':\u000a        case '(':\u000a        case ')':\u000a        case '*':\u000a        case '+':\u000a        case ',':\u000a        case '-':\u000a        case '.':\u000a        case '/':\u000a        case '0':\u000a        case '1':\u000a        case '2':\u000a        case '3':\u000a        case '4':\u000a        case '5':\u000a        case '6':\u000a        case '7':\u000a        case '8':\u000a        case '9':\u000a        case ':':\u000a        case ';':\u000a        case '<':\u000a        case '=':\u000a        case '>':\u000a        case '?':\u000a        case 'A':\u000a        case 'B':\u000a        case 'C':\u000a        case 'D':\u000a        case 'E':\u000a        case 'F':\u000a        case 'G':\u000a        case 'H':\u000a        case 'I':\u000a        case 'J':\u000a        case 'K':\u000a        case 'L':\u000a        case 'M':\u000a        case 'N':\u000a        case 'O':\u000a        case 'P':\u000a        case 'Q':\u000a        case 'R':\u000a        case 'S':\u000a        case 'T':\u000a        case 'U':\u000a        case 'V':\u000a        case 'W':\u000a        case 'X':\u000a        case 'Y':\u000a        case 'Z':\u000a        case '[':\u000a        case '\u005c\u005c':\u000a        case ']':\u000a        case '^':\u000a        case '_':\u000a        case 'a':\u000a        case 'b':\u000a        case 'c':\u000a        case 'd':\u000a        case 'e':\u000a        case 'f':\u000a        case 'g':\u000a        case 'h':\u000a        case 'i':\u000a        case 'j':\u000a        case 'k':\u000a        case 'l':\u000a        case 'm':\u000a        case 'n':\u000a        case 'o':\u000a        case 'p':\u000a        case 'q':\u000a        case 'r':\u000a        case 's':\u000a        case 't':\u000a        case 'u':\u000a        case 'v':\u000a        case 'w':\u000a        case 'x':\u000a        case 'y':\u000a        case 'z':\u000a        case '{':\u000a        case '|':\u000a        case '}':\u000a        case '~':\u000a          string = (char *)((byte *)string + 1);\u000a          iVar8 = iVar8 + 1;\u000a          break;\u000a        default:\u000a          local_38 = (mbstate_t)0x0;\u000a          do {\u000a            sVar4 = mbrtowc((wchar_t *)&local_48,string,(size_t)(pbVar1 + -(long)string),&local_38);\u000a            if (sVar4 == 0xfffffffffffffffe) {\u000a              iVar8 = iVar8 + local_3c;\u000a              if ((in_RDX & 1) == 0) {\u000a                string = (char *)pbVar1;\u000a              }\u000a              uVar6 = (ulong)local_40;\u000a            }\u000a            else {\u000a              if (sVar4 == 0) {\u000a                sVar4 = 1;\u000a              }\u000a              else {\u000a                if (sVar4 == 0xffffffffffffffff) {\u000a                  uVar6 = 1;\u000a                  if ((in_RDX & 1) == 0) {\u000a                    string = (char *)((byte *)string + 1);\u000a                    iVar8 = iVar8 + 1;\u000a                    uVar6 = 5;\u000a                  }\u000a                  goto LAB_00404db5;\u000a                }\u000a              }\u000a              iVar3 = wcwidth(local_48);\u000a              if (iVar3 < 0) {\u000a                uVar6 = 1;\u000a                if (local_44 == 0) {\u000a                  iVar3 = iswcntrl(local_48);\u000a                  if (iVar3 == 0) {\u000a                    if (iVar8 == 0x7fffffff) {\u000a                      uVar6 = 7;\u000a                      iVar8 = 0x7fffffff;\u000a                      goto LAB_00404db5;\u000a                    }\u000a                    iVar8 = iVar8 + 1;\u000a                  }\u000aLAB_00404db0:\u000a                  string = (char *)((byte *)string + sVar4);\u000a                  uVar6 = 0;\u000a                }\u000a              }\u000a              else {\u000a                uVar6 = 7;\u000a                if (iVar3 <= 0x7fffffff - iVar8) {\u000a                  iVar8 = iVar8 + iVar3;\u000a                  goto LAB_00404db0;\u000a                }\u000a              }\u000a            }\u000aLAB_00404db5:\u000a            if ((uVar6 & 7) != 0) {\u000a              if ((((byte)uVar6 & 7) != 5) && ((uVar6 & 7) != 0)) {\u000a                if (((byte)uVar6 & 7) != 7) {\u000a                  return -1;\u000a                }\u000a                return 0x7fffffff;\u000a              }\u000a              break;\u000a            }\u000a            iVar3 = mbsinit(&local_38);\u000a          } while (iVar3 == 0);\u000a        }\u000a      } while (string < pbVar1);\u000a    }\u000a  }\u000a  return iVar8;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nLEA R15,[RBX + RBP*0x1]\nCALL 0x00401870\nCMP RAX,0x1\nJBE 0x00404df2\nTEST RBP,RBP\nJLE 0x00404e60\nMOV EAX,R14D\nAND EAX,0x2\nMOV dword ptr [RSP + 0x4],EAX\nAND R14D,0x1\nMOV EAX,R14D\nXOR EAX,0x1\nMOV dword ptr [RSP + 0xc],EAX\nLEA EAX,[R14*0x4]\nXOR EAX,0x5\nMOV dword ptr [RSP + 0x8],EAX\nXOR EBP,EBP\nLEA R12,[RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x20\nCMP EAX,0x5e\nJA 0x00404cd1\nJMP qword ptr [0x40c898 + RAX*0x8]\nINC RBX\nINC EBP\nCMP RBX,R15\nJC 0x00404cb0\nJMP 0x00404e62\nMOV qword ptr [RSP + 0x10],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBX\nMOV RDI,RSP\nMOV RSI,RBX\nMOV RCX,R12\nCALL 0x004018a0\nMOV R13,RAX\nCMP R13,-0x2\nJZ 0x00404d30\nTEST R13,R13\nJZ 0x00404d50\nCMP R13,-0x1\nJNZ 0x00404d56\nMOV ECX,0x1\nTEST R14D,R14D\nJNZ 0x00404db5\nINC RBX\nINC EBP\nMOV ECX,0x5\nJMP 0x00404db5\nADD EBP,dword ptr [RSP + 0xc]\nTEST R14D,R14D\nCMOVZ RBX,R15\nMOV ECX,dword ptr [RSP + 0x8]\nJMP 0x00404db5\nMOV R13D,0x1\nMOV EDI,dword ptr [RSP]\nCALL 0x004019f0\nTEST EAX,EAX\nJS 0x00404d76\nMOV EDX,0x7fffffff\nSUB EDX,EBP\nMOV ECX,0x7\nCMP EAX,EDX\nJG 0x00404db5\nADD EBP,EAX\nJMP 0x00404db0\nMOV ECX,0x1\nCMP dword ptr [RSP + 0x4],0x0\nJNZ 0x00404db5\nMOV EDI,dword ptr [RSP]\nCALL 0x004017f0\nTEST EAX,EAX\nJNZ 0x00404db0\nCMP EBP,0x7fffffff\nJNZ 0x00404da2\nMOV ECX,0x7\nMOV EBP,0x7fffffff\nJMP 0x00404db5\nINC EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBX,R13\nXOR ECX,ECX\nMOV EAX,ECX\nAND AL,0x7\nJNZ 0x00404dd0\nMOV RDI,R12\nCALL 0x00401b60\nTEST EAX,EAX\nJZ 0x00404ce0\nJMP 0x00404cc7\nCMP AL,0x5\nJZ 0x00404cc7\nAND CL,0x7\nJZ 0x00404cc7\nMOV EBP,0xffffffff\nCMP CL,0x7\nJNZ 0x00404e62\nMOV EBP,0x7fffffff\nJMP 0x00404e62\nAND R14D,0x2\nXOR R12D,R12D\nMOV RCX,RBX\nJMP 0x00404e10\nMOV RCX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nCMP RBX,R15\nJNC 0x00404e54\nMOVZX EBP,byte ptr [RBX]\nCALL 0x00401b90\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nTEST AH,0x40\nJNZ 0x00404e39\nTEST R14D,R14D\nJNZ 0x00404e59\nLEA RCX,[RBX + 0x1]\nTEST AL,0x2\nJNZ 0x00404e10\nINC RBX\nCMP R12D,0x7fffffff\nLEA EAX,[R12 + 0x1]\nMOV EBP,0x7fffffff\nMOV R12D,EAX\nJNZ 0x00404dfe\nJMP 0x00404e62\nMOV EBP,R12D\nJMP 0x00404e62\nMOV EBP,0xffffffff\nJMP 0x00404e62\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d6\n48 89 f5\n48 89 fb\n4c 8d 3c 2b\ne8 10 cc ff ff\n48 83 f8 01\n0f 86 88 01 00 00\n48 85 ed\n0f 8e ed 01 00 00\n44 89 f0\n83 e0 02\n89 44 24 04\n41 83 e6 01\n44 89 f0\n83 f0 01\n89 44 24 0c\n42 8d 04 b5 00 00 00 00\n83 f0 05\n89 44 24 08\n31 ed\n4c 8d 64 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 03\n83 c0 e0\n83 f8 5e\n77 16\nff 24 c5 98 c8 40 00\n48 ff c3\nff c5\n4c 39 fb\n72 e4\ne9 91 01 00 00\n48 c7 44 24 10 00 00 00 00\n66 0f 1f 44 00 00\n4c 89 fa\n48 29 da\n48 89 e7\n48 89 de\n4c 89 e1\ne8 ac cb ff ff\n49 89 c5\n49 83 fd fe\n74 33\n4d 85 ed\n74 4e\n49 83 fd ff\n75 4e\nb9 01 00 00 00\n45 85 f6\n0f 85 9f 00 00 00\n48 ff c3\nff c5\nb9 05 00 00 00\ne9 90 00 00 00\n03 6c 24 0c\n45 85 f6\n49 0f 44 df\n8b 4c 24 08\neb 74\n41 bd 01 00 00 00\n8b 3c 24\ne8 92 cc ff ff\n85 c0\n78 14\nba ff ff ff 7f\n29 ea\nb9 07 00 00 00\n39 d0\n7f 43\n01 c5\neb 3a\nb9 01 00 00 00\n83 7c 24 04 00\n75 33\n8b 3c 24\ne8 66 ca ff ff\n85 c0\n75 22\n81 fd ff ff ff 7f\n75 0c\nb9 07 00 00 00\nbd ff ff ff 7f\neb 13\nff c5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 01 eb\n31 c9\n89 c8\n24 07\n75 15\n4c 89 e7\ne8 9d cd ff ff\n85 c0\n0f 84 15 ff ff ff\ne9 f7 fe ff ff\n3c 05\n0f 84 ef fe ff ff\n80 e1 07\n0f 84 e6 fe ff ff\nbd ff ff ff ff\n80 f9 07\n75 77\nbd ff ff ff 7f\neb 70\n41 83 e6 02\n45 31 e4\n48 89 d9\neb 12\n48 89 d9\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n4c 39 fb\n73 3c\n0f b6 2b\ne8 70 cd ff ff\n48 8b 00\n0f b7 04 68\nf6 c4 40\n75 0d\n45 85 f6\n75 28\n48 8d 4b 01\na8 02\n75 d7\n48 ff c3\n41 81 fc ff ff ff 7f\n41 8d 44 24 01\nbd ff ff ff 7f\n41 89 c4\n75 ac\neb 0e\n44 89 e5\neb 09\nbd ff ff ff ff\neb 02\n31 ed\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p159
S'.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4a\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c57\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c64\n.text:0000000000404c6a\n.text:0000000000404c6d\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c79\n.text:0000000000404c7d\n.text:0000000000404c81\n.text:0000000000404c84\n.text:0000000000404c87\n.text:0000000000404c8b\n.text:0000000000404c93\n.text:0000000000404c96\n.text:0000000000404c9a\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404cb0\n.text:0000000000404cb3\n.text:0000000000404cb6\n.text:0000000000404cb9\n.text:0000000000404cbb\n.text:0000000000404cc2\n.text:0000000000404cc5\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404ccc\n.text:0000000000404cd1\n.text:0000000000404cda\n.text:0000000000404ce0\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cef\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cfb\n.text:0000000000404cfd\n.text:0000000000404d00\n.text:0000000000404d02\n.text:0000000000404d06\n.text:0000000000404d08\n.text:0000000000404d0d\n.text:0000000000404d10\n.text:0000000000404d16\n.text:0000000000404d19\n.text:0000000000404d1b\n.text:0000000000404d20\n.text:0000000000404d30\n.text:0000000000404d34\n.text:0000000000404d37\n.text:0000000000404d3b\n.text:0000000000404d3f\n.text:0000000000404d50\n.text:0000000000404d56\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d60\n.text:0000000000404d62\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6e\n.text:0000000000404d70\n.text:0000000000404d72\n.text:0000000000404d74\n.text:0000000000404d76\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d85\n.text:0000000000404d8a\n.text:0000000000404d8c\n.text:0000000000404d8e\n.text:0000000000404d94\n.text:0000000000404d96\n.text:0000000000404d9b\n.text:0000000000404da0\n.text:0000000000404da2\n.text:0000000000404da4\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db5\n.text:0000000000404db7\n.text:0000000000404db9\n.text:0000000000404dbb\n.text:0000000000404dbe\n.text:0000000000404dc3\n.text:0000000000404dc5\n.text:0000000000404dcb\n.text:0000000000404dd0\n.text:0000000000404dd2\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404de1\n.text:0000000000404de6\n.text:0000000000404de9\n.text:0000000000404deb\n.text:0000000000404df0\n.text:0000000000404df2\n.text:0000000000404df6\n.text:0000000000404df9\n.text:0000000000404dfc\n.text:0000000000404dfe\n.text:0000000000404e01\n.text:0000000000404e10\n.text:0000000000404e13\n.text:0000000000404e16\n.text:0000000000404e18\n.text:0000000000404e1b\n.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e27\n.text:0000000000404e2a\n.text:0000000000404e2c\n.text:0000000000404e2f\n.text:0000000000404e31\n.text:0000000000404e35\n.text:0000000000404e37\n.text:0000000000404e39\n.text:0000000000404e3c\n.text:0000000000404e43\n.text:0000000000404e48\n.text:0000000000404e4d\n.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e54\n.text:0000000000404e57\n.text:0000000000404e59\n.text:0000000000404e5e\n.text:0000000000404e60\n.text:0000000000404e62\n.text:0000000000404e64\n.text:0000000000404e68\n.text:0000000000404e69\n.text:0000000000404e6b\n.text:0000000000404e6d\n.text:0000000000404e6f\n.text:0000000000404e71\n.text:0000000000404e72\n'
p160
tp161
sS'gettimeofday'
p162
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_00611100)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x00611100]\n'
p165
S'ff 25 0a f8 20 00\n'
p166
S'.plt:00000000004018f0\n'
p167
tp168
sS'xdectoimax'
p169
(S'\n__stdcall xdectoimax(char * n_str, intmax_t min, intmax_t max, char * suffixes, char * err)\n'
p170
V\u000aintmax_t xdectoimax(char *n_str,intmax_t min,intmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = xnumtoimax(n_str,10,min,(char *)max,suffixes);\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x004087b0\nPOP RCX\nRET\n'
p172
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p173
S'.text:0000000000408880\n.text:0000000000408881\n.text:0000000000408884\n.text:0000000000408887\n.text:000000000040888a\n.text:000000000040888d\n.text:0000000000408891\n.text:0000000000408896\n.text:0000000000408899\n.text:000000000040889c\n.text:00000000004088a1\n.text:00000000004088a2\n'
p174
tp175
sS'quotearg_n_style_colon'
p176
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p177
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004060b0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00404f90\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00405e80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p179
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p180
S'.text:0000000000406230\n.text:0000000000406231\n.text:0000000000406233\n.text:0000000000406234\n.text:0000000000406238\n.text:000000000040623b\n.text:000000000040623d\n.text:0000000000406242\n.text:0000000000406245\n.text:000000000040624a\n.text:000000000040624f\n.text:0000000000406254\n.text:0000000000406257\n.text:000000000040625c\n.text:0000000000406263\n.text:0000000000406265\n.text:0000000000406268\n.text:000000000040626b\n.text:0000000000406270\n.text:0000000000406274\n.text:0000000000406275\n.text:0000000000406277\n.text:0000000000406278\n'
p181
tp182
sS'get_stat_birthtime_ns'
p183
(S'\n__stdcall get_stat_birthtime_ns(stat * st)\n'
p184
V\u000along get_stat_birthtime_ns(stat *st)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p185
S'XOR EAX,EAX\nRET\n'
p186
S'31 c0\nc3\n'
p187
S'.text:00000000004067b0\n.text:00000000004067b2\n'
p188
tp189
sS'localtime_rz'
p190
(S'\n__stdcall localtime_rz(timezone_t tz, time_t * t, tm * tm)\n'
p191
V\u000atm * localtime_rz(timezone_t tz,time_t *t,tm *tm)\u000a\u000a{\u000a  _Bool _Var1;\u000a  tm *ptVar2;\u000a  timezone_t tz_00;\u000a  tm *ptVar3;\u000a  byte bVar4;\u000a  \u000a  if (tz == (timezone_t)0x0) {\u000a    ptVar2 = (tm *)(*(code *)PTR_gmtime_r_006110f0)(t,tm);\u000a    return ptVar2;\u000a  }\u000a  tz_00 = set_tz(tz);\u000a  if (tz_00 == (timezone_t)0x0) {\u000a    tm = (tm *)0x0;\u000a  }\u000a  else {\u000a    ptVar3 = localtime_r(t,(tm *)tm);\u000a    if (ptVar3 == (tm *)0x0) {\u000a      bVar4 = 1;\u000a    }\u000a    else {\u000a      _Var1 = save_abbr(tz,tm);\u000a      bVar4 = _Var1 ^ 1;\u000a    }\u000a    _Var1 = revert_tz(tz_00);\u000a    if (_Var1 == false) {\u000a      tm = (tm *)0x0;\u000a    }\u000a    if (bVar4 != 0) {\u000a      tm = (tm *)0x0;\u000a    }\u000a  }\u000a  return tm;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00409678\nMOV RDI,RBX\nCALL 0x004096c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040968e\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x004017a0\nTEST RAX,RAX\nJZ 0x00409692\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00409740\nMOV EBX,EAX\nXOR BL,0x1\nJMP 0x00409694\nMOV RDI,R12\nMOV RSI,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004018d0\nXOR EAX,EAX\nJMP 0x004096ad\nMOV BL,0x1\nMOV RDI,R14\nCALL 0x00409850\nXOR ECX,ECX\nTEST AL,AL\nCMOVZ R15,RCX\nTEST BL,BL\nCMOVNZ R15,RCX\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n48 89 fb\n48 85 db\n74 32\n48 89 df\ne8 72 00 00 00\n49 89 c6\n4d 85 f6\n74 38\n4c 89 e7\n4c 89 fe\ne8 3f 81 ff ff\n48 85 c0\n74 2c\n48 89 df\n4c 89 fe\ne8 cf 00 00 00\n89 c3\n80 f3 01\neb 1c\n4c 89 e7\n4c 89 fe\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 42 82 ff ff\n31 c0\neb 1b\nb3 01\n4c 89 f7\ne8 b4 01 00 00\n31 c9\n84 c0\n4c 0f 44 f9\n84 db\n4c 0f 45 f9\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p194
S'.text:0000000000409630\n.text:0000000000409632\n.text:0000000000409634\n.text:0000000000409636\n.text:0000000000409637\n.text:0000000000409638\n.text:000000000040963b\n.text:000000000040963e\n.text:0000000000409641\n.text:0000000000409644\n.text:0000000000409646\n.text:0000000000409649\n.text:000000000040964e\n.text:0000000000409651\n.text:0000000000409654\n.text:0000000000409656\n.text:0000000000409659\n.text:000000000040965c\n.text:0000000000409661\n.text:0000000000409664\n.text:0000000000409666\n.text:0000000000409669\n.text:000000000040966c\n.text:0000000000409671\n.text:0000000000409673\n.text:0000000000409676\n.text:0000000000409678\n.text:000000000040967b\n.text:000000000040967e\n.text:0000000000409682\n.text:0000000000409683\n.text:0000000000409685\n.text:0000000000409687\n.text:0000000000409689\n.text:000000000040968e\n.text:0000000000409690\n.text:0000000000409692\n.text:0000000000409694\n.text:0000000000409697\n.text:000000000040969c\n.text:000000000040969e\n.text:00000000004096a0\n.text:00000000004096a4\n.text:00000000004096a6\n.text:00000000004096aa\n.text:00000000004096ad\n.text:00000000004096b1\n.text:00000000004096b2\n.text:00000000004096b4\n.text:00000000004096b6\n.text:00000000004096b8\n'
p195
tp196
sS'quote_mem'
p197
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406340\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p201
S'.text:0000000000406350\n.text:0000000000406353\n.text:0000000000406356\n.text:0000000000406358\n.text:000000000040635b\n.text:000000000040635e\n'
p202
tp203
sS'align_column'
p204
(S'\n__stdcall align_column(COLUMN * p)\n'
p205
V\u000avoid align_column(COLUMN *p)\u000a\u000a{\u000a  padding_not_printed = p->start_position;\u000a  if (col_sep_length < padding_not_printed) {\u000a    pad_across_to();\u000a    padding_not_printed = 0;\u000a  }\u000a  if (use_col_separator != false) {\u000a    print_sep_string();\u000a  }\u000a  if (p->numbered != false) {\u000a    add_line_number(p);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p206
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX + 0x34]\nMOV dword ptr [0x0061144c],EDI\nSUB EDI,dword ptr [0x006113a8]\nJLE 0x004044c4\nCALL 0x00404120\nMOV dword ptr [0x0061144c],0x0\nCMP byte ptr [0x006113a5],0x0\nJZ 0x004044d2\nCALL 0x00404170\nCMP byte ptr [RBX + 0x38],0x0\nJZ 0x004044de\nMOV RDI,RBX\nPOP RBX\nJMP 0x004044e0\nPOP RBX\nRET\n'
p207
S'53\n48 89 fb\n8b 7b 34\n89 3d 9f cf 20 00\n2b 3d f5 ce 20 00\n7e 0f\ne8 66 fc ff ff\nc7 05 88 cf 20 00 00 00 00 00\n80 3d da ce 20 00 00\n74 05\ne8 9e fc ff ff\n80 7b 38 00\n74 06\n48 89 df\n5b\neb 02\n5b\nc3\n'
p208
S'.text:00000000004044a0\n.text:00000000004044a1\n.text:00000000004044a4\n.text:00000000004044a7\n.text:00000000004044ad\n.text:00000000004044b3\n.text:00000000004044b5\n.text:00000000004044ba\n.text:00000000004044c4\n.text:00000000004044cb\n.text:00000000004044cd\n.text:00000000004044d2\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044db\n.text:00000000004044dc\n.text:00000000004044de\n.text:00000000004044df\n'
p209
tp210
sS'fadvise'
p211
(S'\n__stdcall fadvise(FILE * fp)\n'
p212
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00404b08\nCALL 0x004019e0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00404ae0\nPOP RBX\nRET\n'
p214
S'53\n89 f3\n48 85 ff\n74 10\ne8 e3 ce ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p215
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af6\n.text:0000000000404af8\n.text:0000000000404afd\n.text:0000000000404aff\n.text:0000000000404b01\n.text:0000000000404b03\n.text:0000000000404b05\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b09\n'
p216
tp217
sS'fileno'
p218
(S'\n__stdcall fileno(FILE * __stream)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00611178)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x00611178]\n'
p221
S'ff 25 92 f7 20 00\n'
p222
S'.plt:00000000004019e0\n'
p223
tp224
sS'xstrtol_error'
p225
(S'\n__stdcall xstrtol_error(option * long_options, char * arg)\n'
p226
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid xstrtol_error(option *long_options,char *arg)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  long in_RCX;\u000a  undefined in_DL;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  uint uVar5;\u000a  ulong in_R9;\u000a  char option_buffer [2];\u000a  ulong uStack40;\u000a  \u000a  iVar1 = (int)arg;\u000a  uVar5 = (int)long_options - 1;\u000a  if (uVar5 < 4) {\u000a    if (iVar1 < 0) {\u000a      lVar3 = (long)&uStack40 + 6;\u000a      puVar4 = &DAT_0040dcdf + -(long)iVar1;\u000a      uStack40 = (ulong)CONCAT16(in_DL,(int6)in_RAX);\u000a    }\u000a    else {\u000a      lVar3 = *(long *)(in_RCX + (long)iVar1 * 0x20);\u000a      puVar4 = &DAT_0040dcdf;\u000a      uStack40 = in_RAX;\u000a    }\u000a    uVar2 = dcgettext(0,(&PTR_s__s_s_argument___s__too_large_0040dd40)[(long)(int)uVar5],5);\u000a    error(in_R9 & 0xffffffff,0,uVar2,puVar4,lVar3);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV R14,R8\nMOV EAX,ESI\nDEC EDI\nCMP EDI,0x4\nJNC 0x00408f2e\nMOVSXD RSI,EDI\nMOV RSI,qword ptr [0x40dd40 + RSI*0x8]\nCDQE\nTEST EAX,EAX\nJS 0x00408ee6\nSHL RAX,0x5\nMOV RBX,qword ptr [RCX + RAX*0x1]\nMOV EBP,0x40dcdf\nJMP 0x00408efc\nLEA RBX,[RSP + 0x6]\nMOV EBP,0x40dcdf\nSUB RBP,RAX\nMOV byte ptr [RSP + 0x6],DL\nMOV byte ptr [RSP + 0x7],0x0\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RDX,RCX\nMOV RCX,RBP\nMOV R8,RBX\nMOV R9,R14\nCALL 0x00401ac0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\n'
p228
S'55\n41 57\n41 56\n53\n50\n45 89 cf\n4d 89 c6\n89 f0\nff cf\n83 ff 04\n73 68\n48 63 f7\n48 8b 34 f5 40 dd 40 00\n48 98\n85 c0\n78 0f\n48 c1 e0 05\n48 8b 1c 01\nbd df dc 40 00\neb 16\n48 8d 5c 24 06\nbd df dc 40 00\n48 29 c5\n88 54 24 06\nc6 44 24 07 00\n31 ff\nba 05 00 00 00\ne8 58 89 ff ff\n48 89 c1\n31 f6\n31 c0\n44 89 ff\n48 89 ca\n48 89 e9\n49 89 d8\n4d 89 f1\ne8 9d 8b ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 3d 88 ff ff\n'
p229
S'.text:0000000000408eb0\n.text:0000000000408eb1\n.text:0000000000408eb3\n.text:0000000000408eb5\n.text:0000000000408eb6\n.text:0000000000408eb7\n.text:0000000000408eba\n.text:0000000000408ebd\n.text:0000000000408ebf\n.text:0000000000408ec1\n.text:0000000000408ec4\n.text:0000000000408ec6\n.text:0000000000408ec9\n.text:0000000000408ed1\n.text:0000000000408ed3\n.text:0000000000408ed5\n.text:0000000000408ed7\n.text:0000000000408edb\n.text:0000000000408edf\n.text:0000000000408ee4\n.text:0000000000408ee6\n.text:0000000000408eeb\n.text:0000000000408ef0\n.text:0000000000408ef3\n.text:0000000000408ef7\n.text:0000000000408efc\n.text:0000000000408efe\n.text:0000000000408f03\n.text:0000000000408f08\n.text:0000000000408f0b\n.text:0000000000408f0d\n.text:0000000000408f0f\n.text:0000000000408f12\n.text:0000000000408f15\n.text:0000000000408f18\n.text:0000000000408f1b\n.text:0000000000408f1e\n.text:0000000000408f23\n.text:0000000000408f27\n.text:0000000000408f28\n.text:0000000000408f2a\n.text:0000000000408f2c\n.text:0000000000408f2d\n.text:0000000000408f2e\n'
p230
tp231
sS'mbrtowc'
p232
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006110d8)();\u000a  return sVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x006110d8]\n'
p235
S'ff 25 32 f8 20 00\n'
p236
S'.plt:00000000004018a0\n'
p237
tp238
sS'xstrtoumax'
p239
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p240
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00409176;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00409176;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_004090a5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00409083:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00409083;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00409157;\u000a  default:\u000aswitchD_004090a5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00409157;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00409157:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00409176:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p241
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00409193\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401780\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401b90\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00408f90\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00409182\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401b00\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00408ff0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00409021\nCMP EAX,0x22\nJNZ 0x00409182\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040902c\nJMP 0x00409176\nTEST R12,R12\nJZ 0x00409182\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00409182\nMOV RDI,R12\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00409182\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040902c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00409176\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00409176\nMOV RDI,R12\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x004090be\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004018b0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00409083\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040908a\nCMP EAX,0x44\nJZ 0x0040908a\nCMP EAX,0x69\nJNZ 0x00409083\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00409094\nMOV EBP,0x1\nJMP 0x00409094\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004090be\nXOR EAX,EAX\nJMP qword ptr [0x40dd60 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00409182\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00409157\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x004091e0\nJMP 0x0040915c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00409157\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004091b0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40da60\nMOV ESI,0x40da86\nMOV EDX,0x60\nMOV ECX,0x40df10\nCALL 0x00401900\n'
p242
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 12 88 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 13 8c ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 3c 8b ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 a4 88 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 6c 88 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 5a 88 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 60 dd 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 da 40 00\nbe 86 da 40 00\nba 60 00 00 00\nb9 10 df 40 00\ne8 54 87 ff ff\n'
p243
S'.text:0000000000408f40\n.text:0000000000408f41\n.text:0000000000408f43\n.text:0000000000408f45\n.text:0000000000408f47\n.text:0000000000408f49\n.text:0000000000408f4a\n.text:0000000000408f4e\n.text:0000000000408f51\n.text:0000000000408f54\n.text:0000000000408f57\n.text:0000000000408f5a\n.text:0000000000408f5e\n.text:0000000000408f64\n.text:0000000000408f69\n.text:0000000000408f6e\n.text:0000000000408f71\n.text:0000000000408f78\n.text:0000000000408f7d\n.text:0000000000408f80\n.text:0000000000408f83\n.text:0000000000408f90\n.text:0000000000408f93\n.text:0000000000408f96\n.text:0000000000408f9b\n.text:0000000000408f9d\n.text:0000000000408fa0\n.text:0000000000408fa5\n.text:0000000000408fa9\n.text:0000000000408fae\n.text:0000000000408fb0\n.text:0000000000408fb6\n.text:0000000000408fb9\n.text:0000000000408fbc\n.text:0000000000408fbf\n.text:0000000000408fc4\n.text:0000000000408fc8\n.text:0000000000408fcc\n.text:0000000000408fcf\n.text:0000000000408fd1\n.text:0000000000408fd4\n.text:0000000000408fd6\n.text:0000000000408fd8\n.text:0000000000408fdb\n.text:0000000000408fe1\n.text:0000000000408fe6\n.text:0000000000408fe9\n.text:0000000000408feb\n.text:0000000000408ff0\n.text:0000000000408ff3\n.text:0000000000408ff9\n.text:0000000000408ffc\n.text:0000000000408ffe\n.text:0000000000409004\n.text:0000000000409007\n.text:000000000040900c\n.text:000000000040900f\n.text:0000000000409015\n.text:000000000040901d\n.text:000000000040901f\n.text:0000000000409021\n.text:0000000000409023\n.text:0000000000409026\n.text:000000000040902c\n.text:0000000000409030\n.text:0000000000409034\n.text:0000000000409036\n.text:000000000040903c\n.text:000000000040903f\n.text:0000000000409044\n.text:0000000000409047\n.text:0000000000409049\n.text:000000000040904e\n.text:0000000000409051\n.text:0000000000409056\n.text:000000000040905b\n.text:000000000040905e\n.text:0000000000409060\n.text:0000000000409064\n.text:0000000000409067\n.text:0000000000409069\n.text:000000000040906c\n.text:000000000040906e\n.text:0000000000409071\n.text:0000000000409073\n.text:0000000000409075\n.text:0000000000409079\n.text:000000000040907c\n.text:0000000000409081\n.text:0000000000409083\n.text:0000000000409088\n.text:000000000040908a\n.text:000000000040908f\n.text:0000000000409094\n.text:0000000000409098\n.text:000000000040909b\n.text:000000000040909e\n.text:00000000004090a1\n.text:00000000004090a3\n.text:00000000004090a5\n.text:00000000004090ac\n.text:00000000004090af\n.text:00000000004090b4\n.text:00000000004090b9\n.text:00000000004090be\n.text:00000000004090c2\n.text:00000000004090c7\n.text:00000000004090ca\n.text:00000000004090cd\n.text:00000000004090d2\n.text:00000000004090d5\n.text:00000000004090da\n.text:00000000004090df\n.text:00000000004090e1\n.text:00000000004090e4\n.text:00000000004090e9\n.text:00000000004090ee\n.text:00000000004090f0\n.text:00000000004090f3\n.text:00000000004090f8\n.text:00000000004090fd\n.text:00000000004090ff\n.text:0000000000409102\n.text:0000000000409107\n.text:0000000000409109\n.text:000000000040910c\n.text:0000000000409111\n.text:0000000000409116\n.text:0000000000409118\n.text:000000000040911b\n.text:0000000000409120\n.text:0000000000409125\n.text:0000000000409127\n.text:000000000040912a\n.text:000000000040912f\n.text:0000000000409134\n.text:0000000000409136\n.text:0000000000409139\n.text:000000000040913e\n.text:0000000000409143\n.text:0000000000409145\n.text:0000000000409148\n.text:000000000040914d\n.text:000000000040914f\n.text:0000000000409152\n.text:0000000000409157\n.text:000000000040915c\n.text:000000000040915e\n.text:0000000000409162\n.text:0000000000409166\n.text:000000000040916a\n.text:000000000040916c\n.text:000000000040916f\n.text:0000000000409173\n.text:0000000000409176\n.text:000000000040917a\n.text:000000000040917f\n.text:0000000000409182\n.text:0000000000409184\n.text:0000000000409188\n.text:0000000000409189\n.text:000000000040918b\n.text:000000000040918d\n.text:000000000040918f\n.text:0000000000409191\n.text:0000000000409192\n.text:0000000000409193\n.text:0000000000409198\n.text:000000000040919d\n.text:00000000004091a2\n.text:00000000004091a7\n'
p244
tp245
sS'time_t_add_ok'
p246
(S'\n__stdcall time_t_add_ok(time_t a, time_t b)\n'
p247
V\u000aint time_t_add_ok(time_t a,time_t b)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = time_t_avg(a,b);\u000a  return (int)((uint)((ulong)(tVar1 + 0x4000000000000000) >> 0x3f) ^ 1);\u000a}\u000a\u000a
p248
S'PUSH RAX\nCALL 0x0040a640\nMOV RCX,0x4000000000000000\nADD RAX,RCX\nSHR RAX,0x3f\nXOR EAX,0x1\nPOP RCX\nRET\n'
p249
S'50\ne8 1a 00 00 00\n48 b9 00 00 00 00 00 00 00 40\n48 01 c8\n48 c1 e8 3f\n83 f0 01\n59\nc3\n'
p250
S'.text:000000000040a620\n.text:000000000040a621\n.text:000000000040a626\n.text:000000000040a630\n.text:000000000040a633\n.text:000000000040a637\n.text:000000000040a63a\n.text:000000000040a63b\n'
p251
tp252
sS'setlocale'
p253
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006111c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x006111c8]\n'
p256
S'ff 25 42 f7 20 00\n'
p257
S'.plt:0000000000401a80\n'
p258
tp259
sS'c_toupper'
p260
(S'\n__stdcall c_toupper()\n'
p261
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p263
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p264
S'.text:0000000000409b60\n.text:0000000000409b63\n.text:0000000000409b66\n.text:0000000000409b69\n.text:0000000000409b6c\n'
p265
tp266
sS'fcntl'
p267
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_00611088)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x00611088]\n'
p270
S'ff 25 82 f8 20 00\n'
p271
S'.plt:0000000000401800\n'
p272
tp273
sS'mbsinit'
p274
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00611238)();\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00611238]\n'
p277
S'ff 25 d2 f6 20 00\n'
p278
S'.plt:0000000000401b60\n'
p279
tp280
sS'dcgettext'
p281
(S'\n__stdcall dcgettext()\n'
p282
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_006110b8)();\u000a  return;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x006110b8]\n'
p284
S'ff 25 52 f8 20 00\n'
p285
S'.plt:0000000000401860\n'
p286
tp287
sS'__ctype_toupper_loc'
p288
(S'\n__stdcall __ctype_toupper_loc()\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_00611018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00611018]\n'
p291
S'ff 25 f2 f8 20 00\n'
p292
S'.plt:0000000000401720\n'
p293
tp294
sS'quotearg_free'
p295
(S'\n__stdcall quotearg_free()\n'
p296
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p297
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006112c0]\nCMP dword ptr [0x006112c8],0x2\nJC 0x00405e1a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401740\nINC RBX\nMOV EAX,dword ptr [0x006112c8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00405e00\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x6114c0\nCMP RDI,RAX\nJZ 0x00405e43\nCALL 0x00401740\nMOV qword ptr [0x006112d0],0x100\nMOV qword ptr [0x006112d8],0x6114c0\nMOV EAX,0x6112d0\nCMP R14,RAX\nJZ 0x00405e60\nMOV RDI,R14\nCALL 0x00401740\nMOV qword ptr [0x006112c0],0x6112d0\nMOV dword ptr [0x006112c8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p298
S'41 57\n41 56\n53\n4c 8b 35 d4 b4 20 00\n83 3d d5 b4 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 38 b9 ff ff\n48 ff c3\n8b 05 b7 b4 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 c0 14 61 00\n48 39 c7\n74 1b\ne8 13 b9 ff ff\n48 c7 05 98 b4 20 00 00 01 00 00\n48 c7 05 95 b4 20 00 c0 14 61 00\nb8 d0 12 61 00\n49 39 c6\n74 13\n4c 89 f7\ne8 eb b8 ff ff\n48 c7 05 60 b4 20 00 d0 12 61 00\nc7 05 5e b4 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p299
S'.text:0000000000405de0\n.text:0000000000405de2\n.text:0000000000405de4\n.text:0000000000405de5\n.text:0000000000405dec\n.text:0000000000405df3\n.text:0000000000405df5\n.text:0000000000405df9\n.text:0000000000405dfe\n.text:0000000000405e00\n.text:0000000000405e03\n.text:0000000000405e08\n.text:0000000000405e0b\n.text:0000000000405e11\n.text:0000000000405e15\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e1e\n.text:0000000000405e23\n.text:0000000000405e26\n.text:0000000000405e28\n.text:0000000000405e2d\n.text:0000000000405e38\n.text:0000000000405e43\n.text:0000000000405e48\n.text:0000000000405e4b\n.text:0000000000405e4d\n.text:0000000000405e50\n.text:0000000000405e55\n.text:0000000000405e60\n.text:0000000000405e6a\n.text:0000000000405e6b\n.text:0000000000405e6d\n.text:0000000000405e6f\n'
p300
tp301
sS'quotearg_mem'
p302
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p303
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406040\n'
p305
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p306
S'.text:0000000000406060\n.text:0000000000406063\n.text:0000000000406066\n.text:0000000000406068\n.text:000000000040606b\n.text:000000000040606e\n'
p307
tp308
sS'deregister_tm_clones'
p309
(S'\n__stdcall deregister_tm_clones()\n'
p310
V\u000a/* WARNING: Removing unreachable block (ram,0x00401bf5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401bff) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p311
S'MOV EAX,0x61131f\nPUSH RBP\nSUB RAX,0x611318\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401c10\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c10\nPOP RBP\nMOV EDI,0x611318\nJMP RAX\nPOP RBP\nRET\n'
p312
S'b8 1f 13 61 00\n55\n48 2d 18 13 61 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 18 13 61 00\nff e0\n5d\nc3\n'
p313
S'.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401be6\n.text:0000000000401bec\n.text:0000000000401bf0\n.text:0000000000401bf3\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bfd\n.text:0000000000401bff\n.text:0000000000401c00\n.text:0000000000401c05\n.text:0000000000401c10\n.text:0000000000401c11\n'
p314
tp315
sS'strftime_case_'
p316
(S'\n__stdcall strftime_case_(char * s, size_t maxsize, char * format, tm * tp, timezone_t tz)\n'
p317
V\u000a/* WARNING: Removing unreachable block (ram,0x00407ddb) */\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t strftime_case_(char *s,size_t maxsize,char *format,tm *tp,timezone_t tz)\u000a\u000a{\u000a  int *piVar1;\u000a  byte bVar2;\u000a  char cVar3;\u000a  char cVar4;\u000a  bool bVar5;\u000a  int __c;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  size_t __n;\u000a  char cVar8;\u000a  int __c_00;\u000a  uint uVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  uint uVar12;\u000a  long lVar13;\u000a  char *__src;\u000a  int __c_01;\u000a  ulong uVar14;\u000a  ulong uVar15;\u000a  char *pcVar16;\u000a  timezone_t in_R9;\u000a  void *__src_00;\u000a  char *pcVar17;\u000a  char *__n_00;\u000a  char *pcVar18;\u000a  uint in_stack_00000008;\u000a  size_t _incr;\u000a  char ufmt [5];\u000a  char buf [23];\u000a  tm ltm;\u000a  uint local_4bc;\u000a  ulong local_4b0;\u000a  ulong local_490;\u000a  undefined2 local_485;\u000a  char local_483;\u000a  char local_482 [2];\u000a  size_t local_480;\u000a  uint local_474;\u000a  tm_zone *local_470;\u000a  timezone_t local_468;\u000a  undefined4 local_45c;\u000a  char local_441 [9];\u000a  undefined4 local_438;\u000a  int iStack1076;\u000a  int iStack1072;\u000a  int iStack1068;\u000a  int local_428;\u000a  int iStack1060;\u000a  int iStack1056;\u000a  int iStack1052;\u000a  int local_418;\u000a  undefined4 uStack1044;\u000a  undefined4 uStack1040;\u000a  undefined4 uStack1036;\u000a  tm_zone *local_408;\u000a  \u000a  local_45c = SUB84(s,0);\u000a  local_4bc = *(uint *)&tz->tz_is_set;\u000a  local_4b0 = (ulong)local_4bc;\u000a  local_470 = (tm_zone *)&DAT_0040c61d;\u000a  if (tz[3].next != (tm_zone *)0x0) {\u000a    local_470 = tz[3].next;\u000a  }\u000a  local_474 = 0xc;\u000a  if (local_4bc != 0) {\u000a    local_474 = local_4bc;\u000a  }\u000a  if (0xc < (int)local_4bc) {\u000a    local_474 = local_4bc - 0xc;\u000a  }\u000a  pcVar16 = (char *)0x0;\u000a  cVar3 = *(char *)&tp->tm_sec;\u000a  local_490 = local_4b0;\u000a  local_468 = in_R9;\u000a  do {\u000a    if (cVar3 == 0) {\u000a      if ((format != (char *)0x0) && ((char *)maxsize != (char *)0x0)) {\u000a        *(char *)maxsize = 0;\u000a      }\u000a      return (size_t)pcVar16;\u000a    }\u000a    if (*(char *)&tp->tm_sec != '%') {\u000a      uVar7 = 1;\u000a      if ((char *)0x1 < format + -(long)pcVar16) {\u000a        if ((char *)maxsize == (char *)0x0) {\u000a          maxsize = 0;\u000a        }\u000a        else {\u000a          *(char *)maxsize = *(char *)&tp->tm_sec;\u000a          maxsize = (size_t)((char *)maxsize + 1);\u000a        }\u000a        pcVar16 = pcVar16 + 1;\u000a        uVar7 = 0;\u000a      }\u000a      if (uVar7 == 0) {\u000a        uVar7 = 4;\u000a      }\u000a      goto LAB_00406c3a;\u000a    }\u000a    bVar5 = false;\u000a    bVar2 = (byte)local_45c;\u000a    tp = (tm *)((long)&tp->tm_sec + 1);\u000a    __c_01 = 0;\u000aLAB_00406a66:\u000a    while( true ) {\u000a      while (__c = (int)*(char *)&tp->tm_sec, 0x2f < __c) {\u000a        if ((__c == 0x30) || (__c == 0x5f)) goto LAB_00406a60;\u000a        if (__c != 0x5e) goto LAB_00406ae0;\u000a        bVar2 = 1;\u000a        tp = (tm *)((long)&tp->tm_sec + 1);\u000a      }\u000a      if (__c != 0x2d) break;\u000aLAB_00406a60:\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a      __c_01 = __c;\u000a    }\u000a    if (__c == 0x23) {\u000a      bVar5 = true;\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a      goto LAB_00406a66;\u000a    }\u000aLAB_00406ae0:\u000a    pcVar17 = (char *)0xffffffff;\u000a    if (__c - 0x30U < 10) {\u000a      pcVar17 = (char *)0x0;\u000a      do {\u000a        __c = (int)pcVar17;\u000a        pcVar17 = (char *)0x7fffffff;\u000a        if ((__c < 0xccccccd) &&\u000a           ((__c_00 = (int)*(char *)&tp->tm_sec + -0x30, __c != 0xccccccc ||\u000a            (pcVar17 = (char *)0x7fffffff, __c_00 < 8)))) {\u000a          pcVar17 = (char *)(ulong)(uint)(__c_00 + __c * 10);\u000a        }\u000a        piVar1 = &tp->tm_sec;\u000a        tp = (tm *)((long)&tp->tm_sec + 1);\u000a      } while ((int)*(char *)((long)piVar1 + 1) - 0x30U < 10);\u000a    }\u000a    uVar9 = (uint)pcVar17;\u000a    cVar3 = *(char *)&tp->tm_sec;\u000a    if ((cVar3 == 'O') || (cVar3 == 'E')) {\u000a      tp = (tm *)((long)&tp->tm_sec + 1);\u000a    }\u000a    else {\u000a      cVar3 = 0;\u000a    }\u000a    cVar8 = *(char *)&tp->tm_sec;\u000a    uVar11 = 0;\u000a    __src = "%H:%M";\u000a    uVar6 = 0;\u000a    cVar4 = 'r';\u000a    switch(cVar8) {\u000a    case 0:\u000a      tp = (tm *)((long)&tp->tm_mday + 3);\u000a    default:\u000a      goto LAB_00406d61;\u000a    case '%':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        uVar7 = 0;\u000a        if (-1 < (int)uVar9) {\u000a          uVar7 = uVar9;\u000a        }\u000a        pcVar17 = (char *)0x1;\u000a        if (1 < uVar7) {\u000a          pcVar17 = (char *)(ulong)uVar7;\u000a        }\u000a        if (format + -(long)pcVar16 <= pcVar17) {\u000a          return 0;\u000a        }\u000a        if ((char *)maxsize == (char *)0x0) goto LAB_004076e7;\u000a        if (1 < uVar7) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a        }\u000a        *(char *)maxsize = *(char *)&tp->tm_sec;\u000a        goto LAB_00406a18;\u000a      }\u000a      break;\u000a    case ':':\u000a      uVar11 = 1;\u000a      while (cVar4 = *(char *)((long)&tp->tm_sec + uVar11), cVar4 == ':') {\u000a        uVar11 = uVar11 + 1;\u000a      }\u000a      if (cVar4 == 'z') {\u000a        tp = (tm *)((long)&tp->tm_sec + uVar11);\u000a        goto switchD_00406b5d_caseD_7a;\u000a      }\u000a      goto LAB_00406d61;\u000a    case 'A':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'A';\u000a        uVar6 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      break;\u000a    case 'B':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'B';\u000a        uVar6 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      break;\u000a    case 'C':\u000a      if (cVar3 == 'E') {\u000a        uVar11 = 0;\u000a        cVar4 = 'C';\u000a        uVar6 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      if (cVar3 != 'O') {\u000a        __c = *(int *)((long)&tz[1].next + 4);\u000a        lVar13 = (long)__c;\u000a        bVar5 = lVar13 < 0xfffff894;\u000a        __c_00 = __c / 100 + (__c >> 0x1f) + (uint)((ulong)(lVar13 * 0x51eb851f) >> 0x3f);\u000a        uVar7 = (__c_00 - (uint)(__c + __c_00 * -100 < 0 && 0xfffff894 < lVar13)) + 0x13;\u000a        goto LAB_0040728c;\u000a      }\u000aLAB_00406d61:\u000a      uVar6 = 0;\u000a      break;\u000a    case 'D':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        __src = "%m/%d/%y";\u000a        goto switchD_00406b5d_caseD_52;\u000a      }\u000a      break;\u000a    case 'F':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        __src = "%Y-%m-%d";\u000a        goto switchD_00406b5d_caseD_52;\u000a      }\u000a      break;\u000a    case 'G':\u000a    case 'V':\u000a    case 'g':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar7 = iso_week_days();\u000a        if ((int)uVar7 < 0) {\u000a          uVar7 = iso_week_days();\u000a          uVar9 = 0xffffffff;\u000a        }\u000a        else {\u000a          uVar6 = iso_week_days();\u000a          uVar9 = uVar6 >> 0x1f ^ 1;\u000a          if (-1 < (int)uVar6) {\u000a            uVar7 = uVar6;\u000a          }\u000a        }\u000a        if (*(char *)&tp->tm_sec == 'G') {\u000a          __c = *(int *)((long)&tz[1].next + 4);\u000a          local_490 = (ulong)(__c < (int)(-0x76c - uVar9));\u000a          local_4b0 = (ulong)(uVar9 + 0x76c + __c);\u000a          uVar6 = 4;\u000a          goto LAB_00407664;\u000a        }\u000a        if (*(char *)&tp->tm_sec == 'g') {\u000a          __c = *(int *)((long)&tz[1].next + 4);\u000a          __c_00 = __c + (__c / 100 + (__c >> 0x1f) +\u000a                         (uint)((ulong)((long)__c * 0x51eb851f) >> 0x3f)) * -100 + uVar9;\u000a          uVar7 = __c_00 + (__c_00 / 100 + (__c_00 >> 0x1f) +\u000a                           (uint)((ulong)((long)__c_00 * 0x51eb851f) >> 0x3f)) * -100;\u000a          uVar11 = (ulong)uVar7;\u000a          uVar6 = 2;\u000a          if ((int)uVar7 < 0) {\u000a            uVar6 = uVar7 + 100;\u000a            if (__c < (int)(-0x76c - uVar9)) {\u000a              uVar6 = -uVar7;\u000a            }\u000a            uVar11 = (ulong)uVar6;\u000a            uVar6 = 2;\u000a          }\u000a        }\u000a        else {\u000a          uVar11 = (ulong)((int)uVar7 / 7 + ((int)uVar7 >> 0x1f) + 1 +\u000a                          (uint)((ulong)((long)(int)uVar7 * 0x92492493) >> 0x3f));\u000a          uVar6 = 2;\u000a        }\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'H':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->tz_is_set;\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'I':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)local_474;\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'M':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)((long)&tz->next + 4);\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'N':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        if (uVar9 == 0xffffffff) {\u000a          pcVar17 = (char *)0x9;\u000a          uVar11 = (ulong)in_stack_00000008;\u000a          uVar6 = 9;\u000a        }\u000a        else {\u000a          if ((int)uVar9 < 9) {\u000a            uVar7 = 9;\u000a            uVar11 = (ulong)in_stack_00000008;\u000a            do {\u000a              __c = (int)uVar11;\u000a              uVar11 = (ulong)(__c / 10 + (__c >> 0x1f) +\u000a                              (uint)((ulong)((long)__c * 0x66666667) >> 0x3f));\u000a              uVar7 = uVar7 - 1;\u000a              uVar6 = uVar9;\u000a            } while (uVar9 != uVar7);\u000a          }\u000a          else {\u000a            uVar11 = (ulong)in_stack_00000008;\u000a            uVar6 = uVar9;\u000a          }\u000a        }\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'P':\u000a      uVar11 = 1;\u000a    case 'p':\u000a      uVar6 = 0;\u000a      if (bVar5) {\u000a        bVar2 = 0;\u000a        uVar11 = 1;\u000a      }\u000a      cVar4 = 'p';\u000a      goto switchD_00406b5d_caseD_72;\u000a    case 'R':\u000a      goto switchD_00406b5d_caseD_52;\u000a    case 'S':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->next;\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'T':\u000a      __src = "%H:%M:%S";\u000aswitchD_00406b5d_caseD_52:\u000a      pcVar18 = (char *)strftime_case_((char *)(ulong)(bVar2 != 0),0,(char *)0xffffffffffffffff,\u000a                                       (tm *)__src,tz);\u000a      __n_00 = (char *)0x0;\u000a      if (-1 < (int)uVar9) {\u000a        __n_00 = pcVar17;\u000a      }\u000a      pcVar17 = pcVar18;\u000a      if (pcVar18 < __n_00) {\u000a        pcVar17 = __n_00;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) {\u000a        maxsize = 0;\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      else {\u000a        if (pcVar18 < __n_00) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)pcVar18);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)pcVar18));\u000a        }\u000a        strftime_case_((char *)(ulong)(bVar2 != 0),maxsize,format + -(long)pcVar16,(tm *)__src,tz);\u000a        maxsize = (size_t)(pcVar18 + maxsize);\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      goto LAB_00407fbd;\u000a    case 'U':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        __c = (*(int *)&tz[1].field_0xc + 7) - *(int *)&tz[1].tz_is_set;\u000aLAB_0040709c:\u000a        uVar11 = (ulong)(__c / 7 + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x92492493) >> 0x3f));\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'W':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        __c = *(int *)&tz[1].tz_is_set + 6;\u000a        uVar7 = (int)((ulong)((long)__c * -0x6db6db6d) >> 0x20) + 6 + *(int *)&tz[1].tz_is_set;\u000a        __c = (*(int *)&tz[1].field_0xc + 7) - (__c + (((int)uVar7 >> 2) + (uVar7 >> 0x1f)) * -7);\u000a        goto LAB_0040709c;\u000a      }\u000a      break;\u000a    case 'X':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'X';\u000aLAB_004075e8:\u000a        uVar6 = 0;\u000a        uVar11 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      break;\u000a    case 'Y':\u000a      if (cVar3 == 'E') {\u000a        uVar11 = 0;\u000a        cVar4 = 'Y';\u000a        uVar6 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      if (cVar3 == 'O') goto LAB_00406d61;\u000a      __c = *(int *)((long)&tz[1].next + 4);\u000a      bVar5 = __c < -0x76c;\u000a      local_4b0 = (ulong)(__c + 0x76c);\u000a      cVar4 = 0;\u000a      uVar6 = 4;\u000a      local_490 = (ulong)bVar5;\u000a      local_4bc = 0;\u000a      goto LAB_00407a39;\u000a    case 'Z':\u000a      __n_00 = (char *)strlen((char *)local_470);\u000a      __src = (char *)0x0;\u000a      if (-1 < (int)uVar9) {\u000a        __src = pcVar17;\u000a      }\u000a      pcVar17 = __n_00;\u000a      if (__n_00 < __src) {\u000a        pcVar17 = __src;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) {\u000aLAB_004076e7:\u000a        maxsize = 0;\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      else {\u000a        if (__n_00 < __src) {\u000a          if (__c_01 == 0x30) {\u000a            __c_01 = 0x30;\u000a          }\u000a          else {\u000a            __c_01 = 0x20;\u000a          }\u000a          memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__n_00);\u000a          maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__n_00));\u000a          if (bVar5) goto LAB_00407e2a;\u000aLAB_00407e3f:\u000a          if (bVar2 == 0) {\u000a            memcpy((void *)maxsize,local_470,(size_t)__n_00);\u000a          }\u000a          else {\u000a            memcpy_uppcase(maxsize);\u000a          }\u000a        }\u000a        else {\u000a          if (!bVar5) goto LAB_00407e3f;\u000aLAB_00407e2a:\u000a          memcpy_lowcase(maxsize);\u000a        }\u000a        maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a        pcVar16 = pcVar17 + (long)pcVar16;\u000a      }\u000a      goto LAB_00407fbd;\u000a    case 'a':\u000a      uVar6 = 0;\u000a      if (cVar3 == 0) {\u000a        if (bVar5) {\u000a          bVar2 = 1;\u000a        }\u000a        uVar11 = 0;\u000a        cVar4 = 'a';\u000a        uVar6 = 0;\u000a        goto switchD_00406b5d_caseD_72;\u000a      }\u000a      break;\u000a    case 'b':\u000a    case 'h':\u000a      if (bVar5) {\u000a        bVar2 = 1;\u000a      }\u000a      uVar6 = 0;\u000a      cVar4 = cVar8;\u000a      if (cVar3 == 0) goto LAB_004075e8;\u000a      break;\u000a    case 'c':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'c';\u000a        goto LAB_004075e8;\u000a      }\u000a      break;\u000a    case 'd':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->field_0xc;\u000a        uVar6 = 2;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'e':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->field_0xc;\u000aLAB_004075b8:\u000a        uVar6 = 2;\u000a        if ((__c_01 != 0x2d) && (__c_01 != 0x30)) {\u000a          __c_01 = 0x5f;\u000a        }\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'j':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        local_490 = (ulong)(*(int *)&tz[1].field_0xc < -1);\u000a        local_4b0 = (ulong)(*(int *)&tz[1].field_0xc + 1);\u000a        uVar6 = 3;\u000aLAB_00407664:\u000a        local_4bc = 0;\u000a        cVar4 = 0;\u000a        goto LAB_0040792f;\u000a      }\u000a      break;\u000a    case 'k':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz->tz_is_set;\u000a        goto LAB_004075b8;\u000a      }\u000a      break;\u000a    case 'l':\u000a      uVar6 = 0;\u000a      uVar11 = (ulong)local_474;\u000a      if (cVar3 != 'E') goto LAB_004075b8;\u000a      break;\u000a    case 'm':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        bVar5 = *(int *)&tz[1].next < -1;\u000a        uVar7 = *(int *)&tz[1].next + 1;\u000aLAB_0040728c:\u000a        local_4b0 = (ulong)uVar7;\u000a        local_490 = (ulong)bVar5;\u000a        uVar6 = 2;\u000a        goto LAB_00407664;\u000a      }\u000a      break;\u000a    case 'n':\u000a      uVar7 = 0;\u000a      if (-1 < (int)uVar9) {\u000a        uVar7 = uVar9;\u000a      }\u000a      pcVar17 = (char *)0x1;\u000a      if (1 < uVar7) {\u000a        pcVar17 = (char *)(ulong)uVar7;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) goto LAB_004076e7;\u000a      if (1 < uVar7) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a      }\u000a      *(char *)maxsize = '\u005cn';\u000a      goto LAB_00406a18;\u000a    case 'r':\u000a      goto switchD_00406b5d_caseD_72;\u000a    case 's':\u000a      local_408 = tz[3].next;\u000a      local_438 = *(int *)&tz->next;\u000a      iStack1076 = *(int *)((long)&tz->next + 4);\u000a      iStack1072 = *(int *)&tz->tz_is_set;\u000a      iStack1068 = *(int *)&tz->field_0xc;\u000a      local_428 = *(int *)&tz[1].next;\u000a      iStack1060 = *(int *)((long)&tz[1].next + 4);\u000a      iStack1056 = *(int *)&tz[1].tz_is_set;\u000a      iStack1052 = *(int *)&tz[1].field_0xc;\u000a      local_418 = *(int *)&tz[2].next;\u000a      uStack1044 = *(undefined4 *)((long)&tz[2].next + 4);\u000a      uStack1040 = *(undefined4 *)&tz[2].tz_is_set;\u000a      uStack1036 = *(undefined4 *)&tz[2].field_0xc;\u000a      uVar15 = mktime_z(local_468,(tm *)&local_438);\u000a      local_490 = uVar15 >> 0x3f;\u000a      __src = local_441;\u000a      uVar11 = uVar15;\u000a      do {\u000a        uVar10 = (long)uVar11 / 10 + ((long)uVar11 >> 0x3f);\u000a        cVar8 = (char)uVar11 + (char)uVar10 * -10;\u000a        cVar3 = -cVar8;\u000a        if (-1 < (long)uVar15) {\u000a          cVar3 = cVar8;\u000a        }\u000a        __src[-1] = cVar3 + '0';\u000a        __src = __src + -1;\u000a        uVar14 = uVar11 + 9;\u000a        uVar11 = uVar10;\u000a      } while (0x12 < uVar14);\u000a      uVar6 = 1;\u000a      cVar4 = 0;\u000a      goto LAB_00407a8f;\u000a    case 't':\u000a      uVar7 = 0;\u000a      if (-1 < (int)uVar9) {\u000a        uVar7 = uVar9;\u000a      }\u000a      pcVar17 = (char *)0x1;\u000a      if (1 < uVar7) {\u000a        pcVar17 = (char *)(ulong)uVar7;\u000a      }\u000a      if (format + -(long)pcVar16 <= pcVar17) {\u000a        return 0;\u000a      }\u000a      if ((char *)maxsize == (char *)0x0) goto LAB_004076e7;\u000a      if (1 < uVar7) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - 1U);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - 1U));\u000a      }\u000a      *(char *)maxsize = '\u005ct';\u000aLAB_00406a18:\u000a      maxsize = (size_t)((char *)maxsize + 1);\u000a      pcVar16 = pcVar17 + (long)pcVar16;\u000a      goto LAB_00407fbd;\u000a    case 'u':\u000a      __c = *(int *)&tz[1].tz_is_set + 6;\u000a      uVar7 = (int)((ulong)((long)__c * -0x6db6db6d) >> 0x20) + 6 + *(int *)&tz[1].tz_is_set;\u000a      uVar11 = (ulong)(__c + (((int)uVar7 >> 2) + (uVar7 >> 0x1f)) * -7 + 1);\u000a      uVar6 = 1;\u000aLAB_00407917:\u000a      local_490 = uVar11 >> 0x1f;\u000a      local_4bc = 0;\u000a      cVar4 = 0;\u000a      local_4b0 = uVar11;\u000a      goto LAB_0040792f;\u000a    case 'w':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'E') {\u000a        uVar11 = (ulong)*(uint *)&tz[1].tz_is_set;\u000a        uVar6 = 1;\u000a        goto LAB_00407917;\u000a      }\u000a      break;\u000a    case 'x':\u000a      uVar6 = 0;\u000a      if (cVar3 != 'O') {\u000a        cVar4 = 'x';\u000a        goto LAB_004075e8;\u000a      }\u000a      break;\u000a    case 'y':\u000a      if (cVar3 != 'E') {\u000a        __c = *(int *)((long)&tz[1].next + 4);\u000a        uVar7 = __c + (__c / 100 + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x51eb851f) >> 0x3f))\u000a                      * -100;\u000a        uVar11 = (ulong)uVar7;\u000a        uVar6 = 2;\u000a        if ((int)uVar7 < 0) {\u000a          uVar9 = uVar7 + 100;\u000a          if (__c < -0x76c) {\u000a            uVar9 = -uVar7;\u000a          }\u000a          uVar11 = (ulong)uVar9;\u000a          uVar6 = 2;\u000a        }\u000a        goto LAB_00407917;\u000a      }\u000a      uVar11 = 0;\u000a      cVar4 = 'y';\u000a      uVar6 = 0;\u000a      goto switchD_00406b5d_caseD_72;\u000a    case 'z':\u000aswitchD_00406b5d_caseD_7a:\u000a      if (*(int *)&tz[2].next < 0) goto LAB_00407fbd;\u000a      if (3 < uVar11) {\u000a        uVar6 = 0;\u000a        uVar7 = 0xe;\u000a        goto LAB_004069bd;\u000a      }\u000a      uVar7 = *(uint *)&tz[2].tz_is_set;\u000a      __c = (int)uVar7 / 0x3c + ((int)uVar7 >> 0x1f) +\u000a            (uint)((ulong)((long)(int)uVar7 * 0x88888889) >> 0x3f);\u000a      uVar12 = (int)uVar7 / 0xe10 + ((int)uVar7 >> 0x1f) +\u000a               (uint)((ulong)((long)(int)uVar7 * 0x91a2b3c5) >> 0x3f);\u000a      __c_00 = __c + (__c / 0x3c + (__c >> 0x1f) + (uint)((ulong)((long)__c * 0x88888889) >> 0x3f))\u000a                     * -0x3c;\u000a      __c = uVar7 + __c * -0x3c;\u000a      switch(uVar11) {\u000a      case 0:\u000a        uVar12 = uVar12 * 100 + __c_00;\u000a        uVar6 = 5;\u000a        goto LAB_00406d4f;\u000a      case 1:\u000aswitchD_00406d2f_caseD_1:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)(uVar12 * 100 + __c_00);\u000a        uVar6 = 6;\u000a        local_4bc = 4;\u000a        break;\u000a      case 2:\u000aswitchD_00406d2f_caseD_2:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)(uVar12 * 10000 + __c + __c_00 * 100);\u000a        uVar6 = 9;\u000a        local_4bc = 0x14;\u000a        break;\u000a      case 3:\u000a        if (__c != 0) goto switchD_00406d2f_caseD_2;\u000a        if (__c_00 != 0) goto switchD_00406d2f_caseD_1;\u000a        uVar6 = 3;\u000aLAB_00406d4f:\u000a        local_490 = (ulong)(uVar7 >> 0x1f);\u000a        local_4b0 = (ulong)uVar12;\u000a        local_4bc = 0;\u000a      }\u000a      uVar7 = 0x20;\u000aLAB_004069bd:\u000a      if ((char)uVar7 == 0xe) break;\u000a      cVar4 = 1;\u000a      if ((char)uVar7 == ' ') {\u000aLAB_0040792f:\u000a        uVar9 = (uint)pcVar17;\u000a        bVar5 = (bool)((byte)local_490 & 1);\u000a        if ((cVar3 == 'O') && ((local_490 & 1) == 0)) {\u000a          uVar11 = 0;\u000a          cVar4 = cVar8;\u000a          goto switchD_00406b5d_caseD_72;\u000a        }\u000aLAB_00407a39:\u000a        uVar11 = (ulong)(uint)-(int)local_4b0;\u000a        if (bVar5 == false) {\u000a          uVar11 = local_4b0;\u000a        }\u000a        __src = local_441;\u000a        do {\u000a          if ((local_4bc & 1) != 0) {\u000a            __src[-1] = ':';\u000a            __src = __src + -1;\u000a          }\u000a          local_4bc = (int)local_4bc >> 1;\u000a          uVar9 = (uint)uVar11;\u000a          uVar15 = uVar11 * 0xcccccccd;\u000a          local_4b0 = uVar15 >> 0x23;\u000a          uVar7 = (uint)(uVar15 >> 0x20);\u000a          __src[-1] = (char)uVar11 + ((char)(uVar7 >> 3) + (char)(uVar7 >> 3)) * -5 | 0x30;\u000a          __src = __src + -1;\u000a          uVar11 = local_4b0;\u000a        } while ((9 < uVar9) || (uVar11 = uVar15 >> 0x23, local_4bc != 0));\u000aLAB_00407a8f:\u000a        uVar7 = (uint)pcVar17;\u000a        if ((int)uVar6 < (int)uVar7) {\u000a          uVar6 = uVar7;\u000a        }\u000a        if (cVar4 != 0) {\u000a          cVar4 = '+';\u000a        }\u000a        cVar3 = '-';\u000a        if ((local_490 & 1) == 0) {\u000a          cVar3 = cVar4;\u000a        }\u000a        if (__c_01 == 0x2d) {\u000a          if (cVar3 != 0) {\u000a            __n_00 = (char *)0x0;\u000a            if (-1 < (int)uVar7) {\u000a              __n_00 = pcVar17;\u000a            }\u000a            pcVar17 = (char *)0x1;\u000a            if (1 < (uint)__n_00) {\u000a              pcVar17 = __n_00;\u000a            }\u000a            if (format + -(long)pcVar16 <= pcVar17) {\u000a              return 0;\u000a            }\u000a            if ((char *)maxsize == (char *)0x0) {\u000a              maxsize = 0;\u000a            }\u000a            else {\u000a              if ((1 < (uint)__n_00) && (uVar6 == 0)) {\u000a                local_480 = SEXT48((int)uVar7);\u000a                memset((void *)maxsize,0x20,local_480 - 1);\u000a                maxsize = (size_t)((char *)maxsize + (local_480 - 1));\u000a              }\u000aLAB_00407eea:\u000a              *(char *)maxsize = cVar3;\u000a              maxsize = (size_t)((char *)maxsize + 1);\u000a            }\u000aLAB_00407ef0:\u000a            pcVar16 = pcVar17 + (long)pcVar16;\u000a          }\u000a        }\u000a        else {\u000a          __c = (((int)__src - ((int)register0x00000020 + -0x441)) - (uint)(cVar3 != 0)) + uVar6;\u000a          if (__c < 1) {\u000a            if (cVar3 != 0) {\u000a              __n_00 = (char *)0x0;\u000a              if (-1 < (int)uVar7) {\u000a                __n_00 = pcVar17;\u000a              }\u000a              pcVar17 = (char *)0x1;\u000a              if (1 < (uint)__n_00) {\u000a                pcVar17 = __n_00;\u000a              }\u000a              if (format + -(long)pcVar16 <= pcVar17) {\u000a                return 0;\u000a              }\u000a              if ((char *)maxsize != (char *)0x0) {\u000a                if ((1 < (uint)__n_00) && (uVar6 == 0)) {\u000a                  local_480 = (long)(int)uVar7 - 1;\u000a                  if (__c_01 == 0x30) {\u000a                    __c = 0x30;\u000a                  }\u000a                  else {\u000a                    __c = 0x20;\u000a                  }\u000a                  memset((void *)maxsize,__c,local_480);\u000a                  maxsize = (size_t)((char *)maxsize + local_480);\u000a                }\u000a                goto LAB_00407eea;\u000a              }\u000a              maxsize = 0;\u000a              goto LAB_00407ef0;\u000a            }\u000a          }\u000a          else {\u000a            pcVar17 = format + -(long)pcVar16;\u000a            if (__c_01 == 0x5f) {\u000a              __n_00 = (char *)(long)__c;\u000a              if (pcVar17 <= __n_00) {\u000a                return 0;\u000a              }\u000a              if ((char *)maxsize == (char *)0x0) {\u000a                maxsize = 0;\u000a              }\u000a              else {\u000a                memset((void *)maxsize,0x20,(size_t)__n_00);\u000a                maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a              }\u000a              pcVar17 = (char *)0x0;\u000a              pcVar16 = __n_00 + (long)pcVar16;\u000a              if (uVar7 - __c != 0 && __c <= (int)uVar7) {\u000a                pcVar17 = (char *)(ulong)(uVar7 - __c);\u000a              }\u000a              uVar7 = (uint)pcVar17;\u000a              if (cVar3 != 0) {\u000a                __n_00 = (char *)0x1;\u000a                if (1 < uVar7) {\u000a                  __n_00 = pcVar17;\u000a                }\u000a                if (format + -(long)pcVar16 <= __n_00) {\u000a                  return 0;\u000a                }\u000a                if ((char *)maxsize == (char *)0x0) {\u000a                  maxsize = 0;\u000a                }\u000a                else {\u000a                  if ((uVar6 == 0) && (1 < uVar7)) {\u000a                    memset((void *)maxsize,0x20,(size_t)(pcVar17 + -1));\u000a                    maxsize = (size_t)((char *)maxsize + (long)(pcVar17 + -1));\u000a                  }\u000a                  *(char *)maxsize = cVar3;\u000a                  maxsize = (size_t)((char *)maxsize + 1);\u000a                }\u000a                pcVar16 = __n_00 + (long)pcVar16;\u000a              }\u000a            }\u000a            else {\u000a              if (pcVar17 <= (char *)(long)(int)uVar6) {\u000a                return 0;\u000a              }\u000a              if (cVar3 != 0) {\u000a                uVar9 = 0;\u000a                if (-1 < (int)uVar7) {\u000a                  uVar9 = uVar7;\u000a                }\u000a                __n_00 = (char *)0x1;\u000a                if (1 < uVar9) {\u000a                  __n_00 = (char *)(ulong)uVar9;\u000a                }\u000a                if (pcVar17 <= __n_00) {\u000a                  return 0;\u000a                }\u000a                if ((char *)maxsize == (char *)0x0) {\u000a                  maxsize = 0;\u000a                }\u000a                else {\u000a                  if ((1 < uVar9) && (uVar6 == 0)) {\u000a                    if (__c_01 == 0x30) {\u000a                      __c_00 = 0x30;\u000a                    }\u000a                    else {\u000a                      __c_00 = 0x20;\u000a                    }\u000a                    memset((void *)maxsize,__c_00,(long)(int)uVar7 - 1U);\u000a                    maxsize = (size_t)((char *)maxsize + ((long)(int)uVar7 - 1U));\u000a                  }\u000a                  *(char *)maxsize = cVar3;\u000a                  maxsize = (size_t)((char *)maxsize + 1);\u000a                }\u000a                pcVar16 = __n_00 + (long)pcVar16;\u000a              }\u000a              uVar7 = 0;\u000a              __n = SEXT48(__c);\u000a              if ((char *)maxsize == (char *)0x0) {\u000a                maxsize = 0;\u000a                pcVar16 = pcVar16 + __n;\u000a              }\u000a              else {\u000a                memset((void *)maxsize,0x30,__n);\u000a                maxsize = (size_t)((char *)maxsize + __n);\u000a                pcVar16 = pcVar16 + __n;\u000a              }\u000a            }\u000a          }\u000a        }\u000a        __n_00 = local_441 + -(long)__src;\u000a        pcVar17 = (char *)0x0;\u000a        if (-1 < (int)uVar7) {\u000a          pcVar17 = (char *)(ulong)uVar7;\u000a        }\u000a        pcVar18 = __n_00;\u000a        if (__n_00 < pcVar17) {\u000a          pcVar18 = pcVar17;\u000a        }\u000a        if (format + -(long)pcVar16 <= pcVar18) {\u000a          return 0;\u000a        }\u000a        if ((char *)maxsize == (char *)0x0) {\u000a          maxsize = 0;\u000a        }\u000a        else {\u000a          if ((uVar6 == 0) && (__n_00 < pcVar17)) {\u000a            if (__c_01 == 0x30) {\u000a              __c_01 = 0x30;\u000a            }\u000a            else {\u000a              __c_01 = 0x20;\u000a            }\u000a            memset((void *)maxsize,__c_01,(long)(int)uVar7 - (long)__n_00);\u000a            maxsize = (size_t)((char *)maxsize + ((long)(int)uVar7 - (long)__n_00));\u000a          }\u000a          if (bVar2 == 0) {\u000a            memcpy((void *)maxsize,__src,(size_t)__n_00);\u000a          }\u000a          else {\u000a            memcpy_uppcase(maxsize);\u000a          }\u000a          maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a        }\u000a        goto LAB_00407fb0;\u000a      }\u000aLAB_00406c3a:\u000a      if ((uVar7 | 4) != 4) {\u000a        return 0;\u000a      }\u000a      goto LAB_00407fbd;\u000a    }\u000a    __src_00 = (void *)((long)&tp->tm_sec + 1);\u000a    lVar13 = 0;\u000a    do {\u000a      lVar13 = lVar13 + 0x100000000;\u000a      __src = (char *)((long)__src_00 + -1);\u000a      __src_00 = (void *)((long)__src_00 + -1);\u000a    } while (*__src != '%');\u000a    __n_00 = (char *)(lVar13 >> 0x20);\u000a    __src = (char *)0x0;\u000a    if (-1 < (int)uVar9) {\u000a      __src = pcVar17;\u000a    }\u000a    pcVar18 = __n_00;\u000a    if (__n_00 < __src) {\u000a      pcVar18 = __src;\u000a    }\u000a    if (format + -(long)pcVar16 <= pcVar18) {\u000a      return 0;\u000a    }\u000a    if ((char *)maxsize == (char *)0x0) {\u000a      maxsize = 0;\u000a    }\u000a    else {\u000a      if ((uVar6 == 0) && (__n_00 < __src)) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__n_00);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__n_00));\u000a      }\u000a      if ((bVar2 & 1) == 0) {\u000a        memcpy((void *)maxsize,__src_00,(size_t)__n_00);\u000a      }\u000a      else {\u000a        memcpy_uppcase(maxsize);\u000a      }\u000a      maxsize = (size_t)((char *)maxsize + (long)__n_00);\u000a    }\u000aLAB_00407fb0:\u000a    pcVar16 = pcVar18 + (long)pcVar16;\u000aLAB_00407fbd:\u000a    cVar3 = *(char *)((long)&tp->tm_sec + 1);\u000a    tp = (tm *)((long)&tp->tm_sec + 1);\u000a  } while( true );\u000aswitchD_00406b5d_caseD_72:\u000a  local_485 = 0x2520;\u000a  pcVar17 = &local_483;\u000a  if (cVar3 != 0) {\u000a    pcVar17 = local_482;\u000a    local_483 = cVar3;\u000a  }\u000a  *pcVar17 = cVar4;\u000a  pcVar17[1] = 0;\u000a  __n = strftime(&local_438,0x400,(char *)&local_485,(tm *)tz);\u000a  if (__n != 0) {\u000a    __src = (char *)(__n - 1);\u000a    pcVar17 = (char *)0x0;\u000a    if (-1 < (int)uVar9) {\u000a      pcVar17 = (char *)(ulong)uVar9;\u000a    }\u000a    __n_00 = __src;\u000a    if (__src < pcVar17) {\u000a      __n_00 = pcVar17;\u000a    }\u000a    if (format + -(long)pcVar16 <= __n_00) {\u000a      return 0;\u000a    }\u000a    if ((char *)maxsize == (char *)0x0) {\u000a      maxsize = 0;\u000a      pcVar16 = __n_00 + (long)pcVar16;\u000a    }\u000a    else {\u000a      if ((uVar6 == 0) && (__src < pcVar17)) {\u000a        if (__c_01 == 0x30) {\u000a          __c_01 = 0x30;\u000a        }\u000a        else {\u000a          __c_01 = 0x20;\u000a        }\u000a        memset((void *)maxsize,__c_01,(long)(int)uVar9 - (long)__src);\u000a        maxsize = (size_t)((char *)maxsize + ((long)(int)uVar9 - (long)__src));\u000a      }\u000a      if (uVar11 == 0) {\u000a        if ((bVar2 & 1) == 0) {\u000a          memcpy((void *)maxsize,&local_438 + 1,(size_t)__src);\u000a        }\u000a        else {\u000a          memcpy_uppcase(maxsize);\u000a        }\u000a      }\u000a      else {\u000a        memcpy_lowcase(maxsize);\u000a      }\u000a      maxsize = (size_t)((char *)maxsize + (long)__src);\u000a      pcVar16 = __n_00 + (long)pcVar16;\u000a    }\u000a  }\u000a  goto LAB_00407fbd;\u000a}\u000a\u000a
p318
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x4b8\nMOV qword ptr [0x80 + RSP],R9\nMOV RBX,RCX\nMOV qword ptr [RSP + 0x48],RDX\nMOV R9,RSI\nMOV dword ptr [0x8c + RSP],EDI\nMOV EAX,dword ptr [R8 + 0x8]\nMOV qword ptr [RSP + 0x30],R8\nMOV RCX,qword ptr [R8 + 0x30]\nTEST RCX,RCX\nMOV EDX,0x40c61d\nCMOVNZ RDX,RCX\nMOV qword ptr [RSP + 0x78],RDX\nLEA ECX,[RAX + -0xc]\nTEST EAX,EAX\nMOV EDX,0xc\nCMOVNZ EDX,EAX\nCMP EAX,0xc\nCMOVG EDX,ECX\nMOV dword ptr [RSP + 0x74],EDX\nXOR R8D,R8D\nCMP byte ptr [RBX],0x0\nJZ 0x00407fcb\nMOV R15,0x100000000\nMOV qword ptr [RSP + 0x38],RAX\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x2c],EAX\nJMP 0x00406a40\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nCALL 0x00401910\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nMOV AL,byte ptr [RSP + 0x50]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,R15\nXOR R14D,R14D\nTEST R9,R9\nMOVSXD R12,R12D\nJZ 0x00406923\nMOV ESI,0x30\nMOV RDI,R9\nMOV RDX,R12\nMOV qword ptr [RSP + 0x20],R8\nMOV R15,R9\nCALL 0x00401910\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R12\nADD R8,R12\nJMP 0x00407ef3\nXOR R9D,R9D\nADD R8,R12\nJMP 0x00407ef3\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R12,R9\nCALL 0x00401910\nMOV RCX,qword ptr [RSP + 0x40]\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,R12\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nMOV AL,byte ptr [RSP + 0x50]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,R15\nMOV R14D,ECX\nJMP 0x00407ef3\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x004019b0\nMOV R9,R14\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R12\nADD R8,RBP\nJMP 0x00407fbd\nTEST R11D,R11D\nJZ 0x00406a23\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x64\nADD EBP,R11D\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x6\nMOV dword ptr [RSP + 0x2c],0x4\nMOV EAX,0x20\nMOV EDX,EAX\nAND DL,0x3f\nCMP DL,0xe\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV R12B,0x1\nCMP DL,0x20\nMOV RDI,qword ptr [RSP + 0x58]\nJZ 0x0040792f\nJMP 0x00406c3a\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00401910\nADD R15,R14\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nMOV R15,0x100000000\nMOV AL,byte ptr [RBX]\nMOV byte ptr [R9],AL\nINC R9\nADD R8,RBP\nJMP 0x00407fbd\nMOV qword ptr [RSP + 0x38],RBP\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nMOV R11D,0x3\nJMP 0x00406d4f\nMOV CL,byte ptr [RBX]\nCMP CL,0x25\nJNZ 0x00406ab0\nXOR ESI,ESI\nMOV EAX,dword ptr [0x8c + RSP]\nMOV R12B,AL\nXOR R13D,R13D\nINC RBX\nJMP 0x00406a66\nINC RBX\nMOV R13D,EAX\nMOVSX EAX,byte ptr [RBX]\nCMP EAX,0x2f\nJLE 0x00406a90\nCMP EAX,0x30\nJZ 0x00406a60\nCMP EAX,0x5f\nJZ 0x00406a60\nCMP EAX,0x5e\nJNZ 0x00406ae0\nMOV R12B,0x1\nINC RBX\nJMP 0x00406a66\nCMP EAX,0x2d\nJZ 0x00406a60\nCMP EAX,0x23\nJNZ 0x00406ae0\nMOV SIL,0x1\nINC RBX\nJMP 0x00406a66\nMOV RDX,qword ptr [RSP + 0x48]\nSUB RDX,R8\nMOV EAX,0x1\nCMP RDX,0x2\nJC 0x00406c30\nTEST R9,R9\nJZ 0x00406c28\nMOV byte ptr [R9],CL\nINC R9\nJMP 0x00406c2b\nADD EAX,-0x30\nMOV R14D,0xffffffff\nCMP EAX,0x9\nJA 0x00406b28\nXOR EAX,EAX\nMOV R14D,0x7fffffff\nCMP EAX,0xccccccc\nJG 0x00406b16\nMOVSX ECX,byte ptr [RBX]\nADD ECX,-0x30\nCMP EAX,0xccccccc\nJNZ 0x00406b0f\nCMP ECX,0x7\nJG 0x00406b16\nLEA EAX,[RAX + RAX*0x4]\nLEA R14D,[RCX + RAX*0x2]\nMOVSX EAX,byte ptr [RBX + 0x1]\nINC RBX\nADD EAX,-0x30\nCMP EAX,0xa\nMOV EAX,R14D\nJC 0x00406af0\nMOVSX R10D,byte ptr [RBX]\nCMP R10D,0x4f\nJZ 0x00406b38\nCMP R10D,0x45\nJNZ 0x00406b3d\nINC RBX\nJMP 0x00406b40\nXOR R10D,R10D\nMOVSX EDI,byte ptr [RBX]\nCMP EDI,0x7a\nMOV qword ptr [RSP + 0x20],R8\nJA 0x00406d5c\nXOR EDX,EDX\nMOV AL,0x72\nMOV EBP,0x40b511\nXOR R11D,R11D\nJMP qword ptr [0x40d128 + RDI*0x8]\nMOV dword ptr [RSP + 0x14],R12D\nXOR R11D,R11D\nCMP R10D,0x45\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV dword ptr [RSP + 0x38],R10D\nMOV qword ptr [RSP + 0x40],R9\nMOV RDX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RDX + 0x14]\nMOV ESI,dword ptr [RDX + 0x18]\nMOV ECX,EAX\nSAR ECX,0x1f\nAND ECX,0x190\nLEA R12D,[RAX + RCX*0x1 + -0x64]\nMOV R15D,dword ptr [RDX + 0x1c]\nMOV EDI,R15D\nCALL 0x00408080\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004074ae\nMOV EAX,0x16d\nTEST R12B,0x3\nJNZ 0x00406c03\nMOVSXD RAX,R12D\nIMUL RAX,RAX,0x51eb851f\nMOV RCX,RAX\nSAR RCX,0x25\nMOV RDX,RAX\nSHR RDX,0x3f\nADD ECX,EDX\nIMUL ECX,ECX,0x64\nSAR RAX,0x27\nADD EAX,EDX\nIMUL EAX,EAX,0x190\nXOR EDX,EDX\nCMP R12D,EAX\nSETZ DL\nADD EDX,0x16d\nCMP R12D,ECX\nMOV EAX,0x16e\nCMOVZ EAX,EDX\nSUB R15D,EAX\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x18]\nMOV EDI,R15D\nCALL 0x00408080\nMOV ECX,EAX\nSHR ECX,0x1f\nXOR ECX,0x1\nTEST EAX,EAX\nCMOVNS EBP,EAX\nJMP 0x00407515\nXOR R9D,R9D\nINC R8\nXOR EAX,EAX\nTEST EAX,EAX\nMOV ECX,0x4\nCMOVZ EAX,ECX\nOR EAX,0x4\nCMP EAX,0x4\nJZ 0x00407fbd\nJMP 0x00407fde\nTEST SIL,SIL\nJZ 0x00406c53\nMOV R12B,0x1\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x004074a7\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nMOV dword ptr [RSP + 0x14],R12D\nDEC RBX\nJMP 0x00406d61\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040769a\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nMOV EDX,0x1\nJMP 0x00406ca3\nINC RDX\nMOVZX EAX,byte ptr [RBX + RDX*0x1]\nCMP AL,0x3a\nJZ 0x00406ca0\nCMP AL,0x7a\nJNZ 0x00406d5c\nADD RBX,RDX\nMOV RAX,qword ptr [RSP + 0x30]\nCMP dword ptr [RAX + 0x20],0x0\nJS 0x00407fbd\nCMP RDX,0x3\nJA 0x004078b6\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RSI,dword ptr [RAX + 0x28]\nIMUL RAX,RSI,-0x77777777\nSHR RAX,0x20\nADD EAX,ESI\nMOV ECX,EAX\nSHR ECX,0x1f\nSAR EAX,0x5\nADD EAX,ECX\nIMUL RBP,RSI,-0x6e5d4c3b\nSHR RBP,0x20\nADD EBP,ESI\nMOV ECX,EBP\nSHR ECX,0x1f\nSAR EBP,0xb\nADD EBP,ECX\nMOVSXD R11,EAX\nIMUL RCX,R11,-0x77777777\nSHR RCX,0x20\nADD ECX,R11D\nMOV EAX,ECX\nSHR EAX,0x1f\nSAR ECX,0x5\nADD ECX,EAX\nIMUL ECX,ECX,0x3c\nIMUL EAX,R11D,0x3c\nSUB R11D,ECX\nMOV ECX,ESI\nSUB ECX,EAX\nJMP qword ptr [0x40d500 + RDX*0x8]\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x64\nADD EBP,R11D\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x5\nMOV dword ptr [RSP + 0x2c],0x0\nJMP 0x004069b8\nMOV dword ptr [RSP + 0x14],R12D\nXOR R11D,R11D\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA R12,[RBX + 0x1]\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBP,R15\nCMP byte ptr [R12 + -0x1],0x25\nLEA R12,[R12 + -0x1]\nJNZ 0x00406d80\nSAR RBP,0x20\nTEST R14D,R14D\nMOV EAX,0x0\nCMOVNS EAX,R14D\nCMP RBP,RAX\nMOV R15,RBP\nCMOVC R15,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00406de2\nCMP RBP,RAX\nSETNC AL\nTEST R11D,R11D\nJNZ 0x00406e03\nTEST AL,AL\nJNZ 0x00406e03\nMOVSXD R14,R14D\nSUB R14,RBP\nCMP R13D,0x30\nJNZ 0x00406dea\nMOV ESI,0x30\nJMP 0x00406def\nXOR R9D,R9D\nJMP 0x00407fb0\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R13,R9\nCALL 0x00401910\nMOV R9,R13\nADD R9,R14\nTEST byte ptr [RSP + 0x14],0x1\nJNZ 0x00406e1d\nMOV RDI,R9\nMOV RSI,R12\nMOV RDX,RBP\nMOV R14,R9\nCALL 0x004019b0\nJMP 0x00406e2e\nMOV RDI,R9\nMOV RSI,R12\nMOV RDX,RBP\nMOV R14,R9\nCALL 0x00408040\nADD R14,RBP\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R14\nJMP 0x00407fb0\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x004076fc\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x00407710\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nCMP R10D,0x45\nJZ 0x00407865\nCMP R10D,0x4f\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d61\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RAX,dword ptr [RAX + 0x14]\nCMP RAX,0xfffff894\nSETL DIL\nSETG CL\nIMUL RSI,RAX,0x51eb851f\nMOV RDX,RSI\nSHR RDX,0x3f\nSAR RSI,0x25\nADD ESI,EDX\nIMUL EDX,ESI,0x64\nCMP EAX,EDX\nSETS AL\nAND AL,CL\nMOVZX EAX,AL\nSUB ESI,EAX\nADD ESI,0x13\nMOV qword ptr [RSP + 0x38],RSI\nJMP 0x0040728c\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x00407724\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x0040772b\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x8]\nMOV EDX,0x2\nJMP 0x00407917\nMOV EDX,0x2\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV EAX,dword ptr [RSP + 0x74]\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x4]\nMOV EDX,0x2\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nCMP R14D,-0x1\nMOV qword ptr [RSP + 0x18],RDI\nJZ 0x004078f9\nCMP R14D,0x8\nJG 0x0040790d\nMOV ECX,0x9\nMOV EAX,dword ptr [0x4f0 + RSP]\nNOP dword ptr [RAX + RAX*0x1]\nCDQE\nIMUL RAX,RAX,0x66666667\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x22\nADD EAX,EDX\nDEC ECX\nCMP R14D,ECX\nJNZ 0x00406fb0\nJMP 0x00407914\nMOV DL,0x1\nXOR R11D,R11D\nTEST SIL,SIL\nJZ 0x00406fe2\nMOV R12D,0x0\nJZ 0x00406fe6\nMOV DL,0x1\nMOV AL,0x70\nJMP 0x0040795f\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX]\nMOV EDX,0x2\nJMP 0x00407917\nMOV EBP,0x40d532\nJMP 0x00407730\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RCX + 0x1c]\nADD EAX,0x7\nSUB EAX,dword ptr [RCX + 0x18]\nCDQE\nJMP 0x0040709c\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RCX + 0x18]\nMOV ECX,dword ptr [RCX + 0x1c]\nLEA EDX,[RAX + 0x6]\nMOVSXD RDX,EDX\nIMUL RSI,RDX,-0x6db6db6d\nSHR RSI,0x20\nLEA EAX,[RSI + RAX*0x1 + 0x6]\nMOV ESI,EAX\nSHR ESI,0x1f\nSAR EAX,0x2\nADD EAX,ESI\nLEA ESI,[RAX*0x8]\nSUB ESI,EAX\nSUB EDX,ESI\nADD ECX,0x7\nSUB ECX,EDX\nMOVSXD RAX,ECX\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD EAX,ECX\nMOV ECX,EAX\nSHR ECX,0x1f\nSAR EAX,0x2\nADD EAX,ECX\nMOV EDX,0x2\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x0040759e\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nCMP R10D,0x45\nJZ 0x00407871\nCMP R10D,0x4f\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d61\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x14]\nCMP ESI,0xfffff894\nSETL AL\nADD ESI,0x76c\nXOR R12D,R12D\nMOV R11D,0x4\nMOV R10B,AL\nXOR ECX,ECX\nJMP 0x00407a39\nMOV dword ptr [RSP + 0x18],ESI\nMOV dword ptr [RSP + 0x14],R12D\nMOV RDI,qword ptr [RSP + 0x78]\nMOV R15,R9\nCALL 0x00401880\nMOV RDI,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R12,RAX\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP R12,RAX\nMOV RBP,R12\nCMOVC RBP,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x00407fde\nTEST RDI,RDI\nJZ 0x004076e7\nCMP R12,RAX\nJNC 0x0040787d\nMOVSXD R14,R14D\nSUB R14,R12\nCMP R13D,0x30\nJNZ 0x00407e05\nMOV ESI,0x30\nJMP 0x00407e0a\nXOR R11D,R11D\nTEST R10D,R10D\nJZ 0x00407851\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x004075a2\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0xc]\nMOV EDX,0x2\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x45\nJNZ 0x004075a6\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x1c]\nCMP EAX,-0x1\nSETL DIL\nINC EAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x3\nJMP 0x00407664\nXOR R11D,R11D\nCMP R10D,0x45\nJNZ 0x004075b0\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x45\nMOV EAX,dword ptr [RSP + 0x74]\nJNZ 0x004075b8\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x10]\nCMP EAX,-0x1\nSETL DIL\nINC EAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x2\nJMP 0x00407664\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x004076e7\nCMP EAX,0x2\nJC 0x00407898\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x00407e5f\nMOV ESI,0x30\nJMP 0x00407e64\nMOV dword ptr [RSP + 0x14],R12D\nMOV R15,R9\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX + 0x30]\nMOV qword ptr [0xe0 + RSP],RAX\nMOVUPS XMM0,xmmword ptr [RCX]\nMOVUPS XMM1,xmmword ptr [RCX + 0x10]\nMOVUPS XMM2,xmmword ptr [RCX + 0x20]\nMOVAPS xmmword ptr [0xd0 + RSP],XMM2\nMOVAPS xmmword ptr [0xc0 + RSP],XMM1\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nLEA RSI,[0xb0 + RSP]\nMOV RDI,qword ptr [0x80 + RSP]\nCALL 0x004098a0\nMOV R8,RAX\nSHR RAX,0x3f\nMOV R10,RAX\nMOV RSI,R8\nLEA RBP,[0xa7 + RSP]\nNOP\nMOV RDX,0x6666666666666667\nMOV RAX,RSI\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA EDI,[RDI + RDI*0x4]\nMOV ECX,ESI\nSUB ECX,EDI\nADD RDX,RAX\nMOV EAX,ECX\nNEG EAX\nTEST R8,R8\nCMOVNS EAX,ECX\nADD EAX,0x30\nMOV byte ptr [RBP + -0x1],AL\nDEC RBP\nADD RSI,0x9\nCMP RSI,0x12\nMOV RSI,RDX\nJA 0x00407350\nMOV R11D,0x1\nXOR R12D,R12D\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nMOV RDI,qword ptr [RSP + 0x38]\nMOV ECX,dword ptr [RSP + 0x2c]\nJMP 0x00407a8f\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x004076e7\nCMP EAX,0x2\nJC 0x004078a7\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x00407e90\nMOV ESI,0x30\nJMP 0x00407e95\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ECX,dword ptr [RAX + 0x18]\nLEA EAX,[RCX + 0x6]\nCDQE\nIMUL RDX,RAX,-0x6db6db6d\nSHR RDX,0x20\nLEA ECX,[RDX + RCX*0x1 + 0x6]\nMOV EDX,ECX\nSHR EDX,0x1f\nSAR ECX,0x2\nADD ECX,EDX\nLEA EDX,[RCX*0x8]\nSUB EDX,ECX\nSUB EAX,EDX\nINC EAX\nMOV EDX,0x1\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x45\nMOV dword ptr [RSP + 0x14],R12D\nJZ 0x00406d70\nMOV qword ptr [RSP + 0x18],RDI\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x18]\nMOV EDX,0x1\nJMP 0x00407917\nXOR R11D,R11D\nCMP R10D,0x4f\nJNZ 0x004075e6\nMOV dword ptr [RSP + 0x14],R12D\nJMP 0x00406d70\nCMP R10D,0x45\nJNZ 0x004075ef\nXOR EDX,EDX\nMOV AL,0x79\nXOR R11D,R11D\nJMP 0x0040795f\nMOV EAX,EDI\nJMP 0x004075e8\nDEC R12D\nMOV EDI,0x16d\nTEST R12B,0x3\nJNZ 0x004074fe\nMOVSXD RAX,R12D\nIMUL RAX,RAX,0x51eb851f\nMOV RCX,RAX\nSAR RCX,0x25\nMOV RDX,RAX\nSHR RDX,0x3f\nADD ECX,EDX\nIMUL ECX,ECX,0x64\nSAR RAX,0x27\nADD EAX,EDX\nIMUL EAX,EAX,0x190\nXOR EDX,EDX\nCMP R12D,EAX\nSETZ DL\nADD EDX,0x16d\nCMP R12D,ECX\nMOV EDI,0x16e\nCMOVZ EDI,EDX\nADD EDI,R15D\nMOV RAX,qword ptr [RSP + 0x30]\nMOV ESI,dword ptr [RAX + 0x18]\nCALL 0x00408080\nMOV EBP,EAX\nMOV ECX,0xffffffff\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R10D,dword ptr [RSP + 0x38]\nMOVSX EAX,byte ptr [RBX]\nCMP EAX,0x47\nJZ 0x0040763d\nCMP EAX,0x67\nJNZ 0x00407674\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RBP,dword ptr [RAX + 0x14]\nIMUL RAX,RBP,0x51eb851f\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x25\nADD EAX,EDX\nIMUL EAX,EAX,0x64\nMOV EDX,EBP\nSUB EDX,EAX\nADD EDX,ECX\nMOVSXD RAX,EDX\nIMUL RDX,RAX,0x51eb851f\nMOV RDI,RDX\nSHR RDI,0x3f\nSAR RDX,0x25\nADD EDX,EDI\nIMUL EDX,EDX,0x64\nSUB EAX,EDX\nMOV EDX,0x2\nJNS 0x00407917\nMOV EDI,0xfffff894\nSUB EDI,ECX\nMOV ECX,EAX\nNEG ECX\nADD EAX,0x64\nCMP EBP,EDI\nCMOVL EAX,ECX\nJMP 0x00407917\nMOV AL,0x58\nJMP 0x004075e8\nMOV AL,0x63\nJMP 0x004075e8\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0xc]\nJMP 0x004075b8\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x8]\nMOV EDX,0x2\nCMP R13D,0x2d\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nJZ 0x00407917\nCMP R13D,0x30\nJZ 0x00407917\nMOV R13D,0x5f\nJMP 0x00407917\nMOV AL,0x78\nXOR EDX,EDX\nJMP 0x0040795f\nMOV RAX,qword ptr [RSP + 0x30]\nMOVSXD RCX,dword ptr [RAX + 0x14]\nIMUL RAX,RCX,0x51eb851f\nMOV RDX,RAX\nSHR RDX,0x3f\nSAR RAX,0x25\nADD EAX,EDX\nIMUL EDX,EAX,0x64\nMOV EAX,ECX\nSUB EAX,EDX\nMOV EDX,0x2\nMOV dword ptr [RSP + 0x14],R12D\nMOV qword ptr [RSP + 0x18],RDI\nJNS 0x00407917\nMOV ESI,EAX\nNEG ESI\nADD EAX,0x64\nCMP ECX,0xfffff894\nCMOVL EAX,ESI\nJMP 0x00407917\nMOV RAX,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RAX + 0x14]\nMOV EDX,0xfffff894\nSUB EDX,ECX\nCMP EAX,EDX\nSETL DIL\nLEA EAX,[0x76c + RCX + RAX*0x1]\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,0x4\nMOV dword ptr [RSP + 0x2c],0x0\nXOR R12D,R12D\nJMP 0x0040792f\nMOVSXD RAX,EBP\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD EAX,ECX\nMOV ECX,EAX\nSAR ECX,0x2\nSHR EAX,0x1f\nLEA EAX,[RCX + RAX*0x1 + 0x1]\nMOV EDX,0x2\nJMP 0x00407917\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV EBP,0x1\nCMOVA EBP,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP RBP,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x004076e7\nCMP EAX,0x2\nJC 0x00406a09\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nJNZ 0x004069eb\nMOV ESI,0x30\nJMP 0x004069f0\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,RBP\nJMP 0x00407fbd\nTEST SIL,SIL\nJZ 0x00407704\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x41\nXOR R11D,R11D\nJMP 0x0040795f\nTEST SIL,SIL\nJZ 0x00407718\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x42\nXOR R11D,R11D\nJMP 0x0040795f\nMOV EBP,0x40d520\nJMP 0x00407730\nMOV EBP,0x40d529\nXOR EDI,EDI\nMOV dword ptr [RSP + 0x14],R12D\nTEST R12B,R12B\nSETNZ DIL\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV dword ptr [RSP],EAX\nXOR R15D,R15D\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV RCX,RBP\nMOV R8,qword ptr [RSP + 0x30]\nMOV R12,R9\nMOV R9,qword ptr [0x80 + RSP]\nCALL 0x00406830\nMOV R9,R12\nMOV R8,qword ptr [RSP + 0x20]\nTEST R14D,R14D\nCMOVNS R15D,R14D\nCMP RAX,R15\nMOV RCX,RAX\nCMOVC RCX,R15\nMOV R12,qword ptr [RSP + 0x48]\nSUB R12,R8\nCMP RCX,R12\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x004077bd\nCMP RAX,R15\nMOV qword ptr [RSP + 0x18],RAX\nMOV qword ptr [RSP + 0x50],RCX\nJNC 0x004077d2\nMOVSXD RCX,R14D\nSUB RCX,RAX\nCMP R13D,0x30\nJNZ 0x004077de\nMOV ESI,0x30\nJMP 0x004077e3\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,RCX\nJMP 0x00407fbd\nMOV R15,0x100000000\nJMP 0x00407804\nMOV ESI,0x20\nMOV RDI,R9\nMOV R13,RCX\nMOV RDX,RCX\nMOV R14,R9\nCALL 0x00401910\nMOV R15,0x100000000\nADD R14,R13\nMOV R9,R14\nXOR EDI,EDI\nCMP byte ptr [RSP + 0x14],0x0\nSETNZ DIL\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV dword ptr [RSP],EAX\nMOV RSI,R9\nMOV RDX,R12\nMOV RCX,RBP\nMOV R8,qword ptr [RSP + 0x30]\nMOV RBP,R9\nMOV R9,qword ptr [0x80 + RSP]\nCALL 0x00406830\nMOV R9,qword ptr [RSP + 0x18]\nADD R9,RBP\nMOV R8,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x50]\nADD R8,RCX\nJMP 0x00407fbd\nTEST SIL,SIL\nJZ 0x00407859\nMOV R12B,0x1\nXOR EDX,EDX\nMOV AL,0x61\nXOR R11D,R11D\nJMP 0x0040795f\nXOR EDX,EDX\nMOV AL,0x43\nXOR R11D,R11D\nJMP 0x0040795f\nXOR EDX,EDX\nMOV AL,0x59\nXOR R11D,R11D\nJMP 0x0040795f\nMOV R15,0x100000000\nMOV EAX,dword ptr [RSP + 0x18]\nTEST AL,AL\nJNZ 0x00407e2a\nJMP 0x00407e3f\nMOV R15,0x100000000\nJMP 0x00407e87\nMOV R15,0x100000000\nJMP 0x00407eb8\nXOR R11D,R11D\nMOV EAX,0xe\nJMP 0x004069bd\nTEST ECX,ECX\nJZ 0x0040698e\nSHR ESI,0x1f\nMOV qword ptr [RSP + 0x58],RSI\nIMUL EBP,EBP,0x2710\nIMUL EAX,R11D,0x64\nADD EBP,ECX\nADD EBP,EAX\nMOV qword ptr [RSP + 0x38],RBP\nMOV R11D,0x9\nMOV dword ptr [RSP + 0x2c],0x14\nJMP 0x004069b8\nMOV R14D,0x9\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV EDX,0x9\nJMP 0x00407917\nMOV EAX,dword ptr [0x4f0 + RSP]\nMOV EDX,R14D\nMOV EDI,EAX\nSHR EDI,0x1f\nMOV dword ptr [RSP + 0x2c],0x0\nXOR R12D,R12D\nMOV qword ptr [RSP + 0x38],RAX\nMOV R11D,EDX\nMOV EAX,EDI\nAND AL,0x1\nMOV ECX,R10D\nCMP R10D,0x4f\nMOV R10,RDI\nJNZ 0x00407a30\nTEST AL,AL\nJNZ 0x00407a30\nMOV qword ptr [RSP + 0x58],R10\nXOR EDX,EDX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV R10D,ECX\nMOV R12D,dword ptr [RSP + 0x14]\nMOV qword ptr [RSP + 0x50],RDX\nMOV dword ptr [RSP + 0x18],R11D\nMOV R15,R9\nMOV word ptr [RSP + 0x63],0x2520\nTEST R10D,R10D\nLEA RCX,[RSP + 0x65]\nJZ 0x00407987\nMOV byte ptr [RSP + 0x65],R10B\nLEA RCX,[RSP + 0x66]\nMOV byte ptr [RCX],AL\nMOV byte ptr [RCX + 0x1],0x0\nLEA RDI,[0xb0 + RSP]\nLEA RDX,[RSP + 0x63]\nMOV ESI,0x400\nMOV RCX,qword ptr [RSP + 0x30]\nCALL 0x00401ab0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407b51\nMOV dword ptr [RSP + 0x14],R12D\nDEC RBP\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP RBP,RAX\nMOV R12,RBP\nCMOVC R12,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nMOV R8,qword ptr [RSP + 0x20]\nSUB RCX,R8\nCMP R12,RCX\nMOV ECX,dword ptr [RSP + 0x18]\nJNC 0x00407fde\nMOV RDI,R15\nTEST RDI,RDI\nJZ 0x00407be8\nCMP RBP,RAX\nSETNC AL\nTEST ECX,ECX\nMOV R15,0x100000000\nJNZ 0x00407c94\nTEST AL,AL\nJNZ 0x00407c94\nMOVSXD R14,R14D\nSUB R14,RBP\nCMP R13D,0x30\nJNZ 0x00407c74\nMOV ESI,0x30\nJMP 0x00407c79\nMOV RSI,qword ptr [RSP + 0x38]\nMOV ECX,dword ptr [RSP + 0x2c]\nMOV EDX,ESI\nNEG EDX\nTEST AL,AL\nCMOVZ EDX,ESI\nLEA RBP,[0xa7 + RSP]\nNOP word ptr [RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00407a5c\nMOV byte ptr [RBP + -0x1],0x3a\nDEC RBP\nSAR ECX,1\nMOV EAX,EDX\nMOV EDI,0xcccccccd\nIMUL RDI,RAX\nSHR RDI,0x23\nLEA EAX,[RDI + RDI*0x1]\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,EDX\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBP + -0x1],SIL\nDEC RBP\nCMP EDX,0x9\nMOV EDX,EDI\nJA 0x00407a50\nTEST ECX,ECX\nMOV EDX,EDI\nJNZ 0x00407a50\nCMP R11D,R14D\nCMOVL R11D,R14D\nTEST R12B,R12B\nJZ 0x00407a9e\nMOV R12B,0x2b\nTEST R10B,0x1\nMOV R15B,0x2d\nJNZ 0x00407aaa\nMOV R15D,R12D\nCMP R13D,0x2d\nMOV qword ptr [RSP + 0x58],R10\nMOV qword ptr [RSP + 0x38],RDI\nMOV dword ptr [RSP + 0x2c],ECX\nJNZ 0x00407b5e\nTEST R15B,R15B\nJZ 0x00407ef3\nMOV R12D,R15D\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV R15D,0x1\nCMOVA R15D,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00407d66\nCMP EAX,0x2\nJC 0x00407eea\nTEST R11D,R11D\nJNZ 0x00407eea\nMOVSXD RAX,R14D\nMOV qword ptr [RSP + 0x68],RAX\nLEA RDX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x18],R11D\nMOV ESI,0x20\nMOV RDI,R9\nMOV qword ptr [RSP + 0x40],R9\nCALL 0x00401910\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x68]\nLEA R9,[R9 + RAX*0x1 + -0x1]\nJMP 0x00407eea\nMOV R8,qword ptr [RSP + 0x20]\nMOV R9,R15\nJMP 0x00407fb3\nMOV dword ptr [RSP + 0x18],R11D\nMOVSXD RSI,R11D\nMOV RAX,RBP\nLEA RDX,[0xa7 + RSP]\nSUB RAX,RDX\nMOV EDX,R15D\nNEG DL\nSBB R12,R12\nADD R12,RAX\nADD R12,RSI\nTEST R12D,R12D\nJLE 0x00407bfd\nMOV RAX,qword ptr [RSP + 0x48]\nSUB RAX,R8\nCMP R13D,0x5f\nMOV byte ptr [RSP + 0x50],R15B\nJNZ 0x00407cf4\nMOVSXD R15,R12D\nCMP R15,RAX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x00407fde\nXOR ECX,ECX\nTEST R9,R9\nJZ 0x00407d78\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R15\nMOV qword ptr [RSP + 0x40],R9\nCALL 0x00401910\nXOR ECX,ECX\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R15\nJMP 0x00407d7b\nXOR R9D,R9D\nMOV R15,0x100000000\nADD R8,R12\nJMP 0x00407fbd\nTEST R15B,R15B\nJZ 0x00407d6e\nMOV R12D,R15D\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP EAX,0x1\nMOV R15D,0x1\nCMOVA R15D,EAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00407ded\nCMP EAX,0x2\nJC 0x00407eea\nTEST R11D,R11D\nJNZ 0x00407eea\nMOVSXD RAX,R14D\nDEC RAX\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x40],R9\nMOV qword ptr [RSP + 0x68],RAX\nJNZ 0x00407ec1\nMOV ESI,0x30\nJMP 0x00407ec6\nMOV ESI,0x20\nMOV RDX,R14\nMOV R15,RDI\nCALL 0x00401910\nADD R15,R14\nMOV RDI,R15\nMOV R15,0x100000000\nMOV RAX,qword ptr [RSP + 0x50]\nTEST AL,0x1\nJNZ 0x00407cb9\nTEST byte ptr [RSP + 0x14],0x1\nJNZ 0x00407cce\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x004019b0\nJMP 0x00407ce1\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x00408000\nJMP 0x00407ce1\nLEA RSI,[0xb1 + RSP]\nMOV RDX,RBP\nMOV R14,RDI\nCALL 0x00408040\nMOV R9,R14\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,RBP\nADD R8,R12\nJMP 0x00407fbd\nCMP RSI,RAX\nMOV R11D,dword ptr [RSP + 0x18]\nJNC 0x00407fde\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x004068e8\nXOR ECX,ECX\nTEST R14D,R14D\nCMOVNS ECX,R14D\nCMP ECX,0x1\nMOV R15D,0x1\nCMOVA R15D,ECX\nCMP R15,RAX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00407df5\nCMP ECX,0x2\nJC 0x004068db\nTEST R11D,R11D\nJNZ 0x004068db\nMOVSXD R14,R14D\nDEC R14\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x40],R9\nJNZ 0x004068b9\nMOV ESI,0x30\nJMP 0x004068be\nXOR R9D,R9D\nJMP 0x00407ef0\nMOV R11D,dword ptr [RSP + 0x18]\nJMP 0x00407ef3\nXOR R9D,R9D\nADD R8,R15\nSUB R14D,R12D\nCMOVG ECX,R14D\nCMP byte ptr [RSP + 0x50],0x0\nJZ 0x00407de5\nCMP ECX,0x1\nMOV R15D,0x1\nCMOVA R15D,ECX\nMOV RAX,qword ptr [RSP + 0x48]\nSUB RAX,R8\nCMP R15,RAX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00407dfd\nTEST R11D,R11D\nJNZ 0x00406956\nCMP ECX,0x2\nJC 0x00406956\nMOV R14D,ECX\nDEC R14\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x20],R8\nMOV qword ptr [RSP + 0x40],RCX\nJNZ 0x0040692e\nMOV ESI,0x30\nJMP 0x00406933\nMOV R14D,ECX\nJMP 0x00407ef3\nXOR R9D,R9D\nJMP 0x00407ef0\nXOR R9D,R9D\nJMP 0x004068e5\nXOR R9D,R9D\nJMP 0x00406960\nMOV ESI,0x20\nMOV RDX,R14\nCALL 0x00401910\nMOV RDI,R15\nMOV R15,0x100000000\nMOV EAX,dword ptr [RSP + 0x18]\nADD RDI,R14\nTEST AL,AL\nJZ 0x00407e3f\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x00408000\nJMP 0x0040697b\nCMP byte ptr [RSP + 0x14],0x0\nJZ 0x0040696b\nMOV RSI,qword ptr [RSP + 0x78]\nMOV RDX,R12\nMOV R14,RDI\nCALL 0x00408040\nJMP 0x0040697b\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00401910\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R15,0x100000000\nADD R9,R14\nMOV byte ptr [R9],0xa\nJMP 0x00406a18\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R15,R9\nCALL 0x00401910\nMOV R9,R15\nMOV R8,qword ptr [RSP + 0x20]\nMOV R15,0x100000000\nADD R9,R14\nMOV byte ptr [R9],0x9\nJMP 0x00406a18\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x00401910\nMOV RAX,qword ptr [RSP + 0x68]\nMOV R11D,dword ptr [RSP + 0x18]\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,RAX\nMOV byte ptr [R9],R12B\nINC R9\nADD R8,R15\nLEA R12,[0xa7 + RSP]\nSUB R12,RBP\nXOR EAX,EAX\nTEST R14D,R14D\nCMOVNS EAX,R14D\nCMP R12,RAX\nMOV R15,R12\nCMOVC R15,RAX\nMOV RCX,qword ptr [RSP + 0x48]\nSUB RCX,R8\nCMP R15,RCX\nJNC 0x00407fde\nTEST R9,R9\nJZ 0x00407f4e\nCMP R12,RAX\nSETNC AL\nTEST R11D,R11D\nJNZ 0x00407f71\nTEST AL,AL\nJNZ 0x00407f71\nMOVSXD R14,R14D\nSUB R14,R12\nCMP R13D,0x30\nMOV qword ptr [RSP + 0x20],R8\nJNZ 0x00407f53\nMOV ESI,0x30\nJMP 0x00407f58\nXOR R9D,R9D\nJMP 0x00407fb0\nMOV ESI,0x20\nMOV RDI,R9\nMOV RDX,R14\nMOV R13,R9\nCALL 0x00401910\nMOV R9,R13\nMOV R8,qword ptr [RSP + 0x20]\nADD R9,R14\nCMP byte ptr [RSP + 0x14],0x0\nJZ 0x00407f8e\nMOV RDI,R9\nMOV RSI,RBP\nMOV RDX,R12\nMOV R14,R8\nMOV RBP,R9\nCALL 0x00408040\nJMP 0x00407fa2\nMOV RDI,R9\nMOV RSI,RBP\nMOV RDX,R12\nMOV R14,R8\nMOV RBP,R9\nCALL 0x004019b0\nMOV R9,RBP\nMOV R8,R14\nADD R9,R12\nNOP dword ptr [RAX + RAX*0x1]\nADD R8,R15\nMOV R15,0x100000000\nCMP byte ptr [RBX + 0x1],0x0\nLEA RBX,[RBX + 0x1]\nJNZ 0x00406a40\nCMP qword ptr [RSP + 0x48],0x0\nJZ 0x00407fe1\nTEST R9,R9\nJZ 0x00407fe1\nMOV byte ptr [R9],0x0\nJMP 0x00407fe1\nXOR R8D,R8D\nMOV RAX,R8\nADD RSP,0x4b8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p319
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 04 00 00\n4c 89 8c 24 80 00 00 00\n48 89 cb\n48 89 54 24 48\n49 89 f1\n89 bc 24 8c 00 00 00\n41 8b 40 08\n4c 89 44 24 30\n49 8b 48 30\n48 85 c9\nba 1d c6 40 00\n48 0f 45 d1\n48 89 54 24 78\n8d 48 f4\n85 c0\nba 0c 00 00 00\n0f 45 d0\n83 f8 0c\n0f 4f d1\n89 54 24 74\n45 31 c0\n80 3b 00\n0f 84 2f 17 00 00\n49 bf 00 00 00 00 01 00 00 00\n48 89 44 24 38\n48 89 44 24 58\n89 44 24 2c\ne9 87 01 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\ne8 47 b0 ff ff\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n4d 01 f1\n8a 44 24 50\n41 88 01\n49 ff c1\n4d 01 f8\n45 31 f6\n4d 85 c9\n4d 63 e4\n74 30\nbe 30 00 00 00\n4c 89 cf\n4c 89 e2\n4c 89 44 24 20\n4d 89 cf\ne8 05 b0 ff ff\n44 8b 5c 24 18\n4d 89 f9\n4c 8b 44 24 20\n4d 01 e1\n4d 01 e0\ne9 d0 15 00 00\n45 31 c9\n4d 01 e0\ne9 c5 15 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cc\ne8 cf af ff ff\n48 8b 4c 24 40\n44 8b 5c 24 18\n4d 89 e1\n4c 8b 44 24 20\n4d 01 f1\n8a 44 24 50\n41 88 01\n49 ff c1\n4d 01 f8\n41 89 ce\ne9 88 15 00 00\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 35 b0 ff ff\n4d 89 f1\n4c 8b 44 24 20\n4d 01 e1\n49 01 e8\ne9 2f 16 00 00\n45 85 db\n0f 84 8c 00 00 00\nc1 ee 1f\n48 89 74 24 58\n6b ed 64\n44 01 dd\n48 89 6c 24 38\n41 bb 06 00 00 00\nc7 44 24 2c 04 00 00 00\nb8 20 00 00 00\n89 c2\n80 e2 3f\n80 fa 0e\n44 89 64 24 14\n0f 84 a0 03 00 00\n48 89 7c 24 18\n41 b4 01\n80 fa 20\n48 8b 7c 24 58\n0f 84 49 0f 00 00\ne9 4f 02 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 12 af ff ff\n4d 01 f7\n4c 8b 44 24 20\n4d 89 f9\n49 bf 00 00 00 00 01 00 00 00\n8a 03\n41 88 01\n49 ff c1\n49 01 e8\ne9 9a 15 00 00\n48 89 6c 24 38\nc1 ee 1f\n48 89 74 24 58\n41 bb 03 00 00 00\ne9 14 03 00 00\n8a 0b\n80 f9 25\n75 69\n31 f6\n8b 84 24 8c 00 00 00\n41 88 c4\n45 31 ed\n48 ff c3\neb 0b\n48 ff c3\n41 89 c5\n0f be 03\n83 f8 2f\n7e 22\n83 f8 30\n74 ed\n83 f8 5f\n74 e8\n83 f8 5e\n75 63\n41 b4 01\n48 ff c3\neb e1\n83 f8 2d\n74 cb\n83 f8 23\n75 46\n40 b6 01\n48 ff c3\neb c4\n48 8b 54 24 48\n4c 29 c2\nb8 01 00 00 00\n48 83 fa 02\n0f 82 69 01 00 00\n4d 85 c9\n0f 84 58 01 00 00\n41 88 09\n49 ff c1\ne9 50 01 00 00\n83 c0 d0\n41 be ff ff ff ff\n83 f8 09\n77 3a\n31 c0\n41 be ff ff ff 7f\n3d cc cc cc 0c\n7f 19\n0f be 0b\n83 c1 d0\n3d cc cc cc 0c\n75 05\n83 f9 07\n7f 07\n8d 04 80\n44 8d 34 41\n0f be 43 01\n48 ff c3\n83 c0 d0\n83 f8 0a\n44 89 f0\n72 c8\n44 0f be 13\n41 83 fa 4f\n74 06\n41 83 fa 45\n75 05\n48 ff c3\neb 03\n45 31 d2\n0f be 3b\n83 ff 7a\n4c 89 44 24 20\n0f 87 0b 02 00 00\n31 d2\nb0 72\nbd 11 b5 40 00\n45 31 db\nff 24 fd 28 d1 40 00\n44 89 64 24 14\n45 31 db\n41 83 fa 45\n0f 84 fa 01 00 00\n48 89 7c 24 18\n44 89 54 24 38\n4c 89 4c 24 40\n48 8b 54 24 30\n8b 42 14\n8b 72 18\n89 c1\nc1 f9 1f\n81 e1 90 01 00 00\n44 8d 64 08 9c\n44 8b 7a 1c\n44 89 ff\ne8 d4 14 00 00\n89 c5\n85 ed\n0f 88 f8 08 00 00\nb8 6d 01 00 00\n41 f6 c4 03\n75 42\n49 63 c4\n48 69 c0 1f 85 eb 51\n48 89 c1\n48 c1 f9 25\n48 89 c2\n48 c1 ea 3f\n01 d1\n6b c9 64\n48 c1 f8 27\n01 d0\n69 c0 90 01 00 00\n31 d2\n41 39 c4\n0f 94 c2\n81 c2 6d 01 00 00\n41 39 cc\nb8 6e 01 00 00\n0f 44 c2\n41 29 c7\n48 8b 44 24 30\n8b 70 18\n44 89 ff\ne8 6a 14 00 00\n89 c1\nc1 e9 1f\n83 f1 01\n85 c0\n0f 49 e8\ne9 ed 08 00 00\n45 31 c9\n49 ff c0\n31 c0\n85 c0\nb9 04 00 00 00\n0f 44 c1\n83 c8 04\n83 f8 04\n0f 84 77 13 00 00\ne9 93 13 00 00\n40 84 f6\n74 03\n41 b4 01\n45 31 db\n45 85 d2\n0f 84 48 08 00 00\n44 89 64 24 14\ne9 07 01 00 00\n44 89 64 24 14\n48 ff cb\ne9 eb 00 00 00\n45 31 db\n45 85 d2\n0f 84 18 0a 00 00\n44 89 64 24 14\ne9 e4 00 00 00\nba 01 00 00 00\neb 10\n48 ff c2\n0f b6 04 13\n3c 3a\n74 f5\n3c 7a\n0f 85 a9 00 00 00\n48 01 d3\n48 8b 44 24 30\n83 78 20 00\n0f 88 f8 12 00 00\n48 83 fa 03\n0f 87 e7 0b 00 00\n48 8b 44 24 30\n48 63 70 28\n48 69 c6 89 88 88 88\n48 c1 e8 20\n01 f0\n89 c1\nc1 e9 1f\nc1 f8 05\n01 c8\n48 69 ee c5 b3 a2 91\n48 c1 ed 20\n01 f5\n89 e9\nc1 e9 1f\nc1 fd 0b\n01 cd\n4c 63 d8\n49 69 cb 89 88 88 88\n48 c1 e9 20\n44 01 d9\n89 c8\nc1 e8 1f\nc1 f9 05\n01 c1\n6b c9 3c\n41 6b c3 3c\n41 29 cb\n89 f1\n29 c1\nff 24 d5 00 d5 40 00\nc1 ee 1f\n48 89 74 24 58\n6b ed 64\n44 01 dd\n48 89 6c 24 38\n41 bb 05 00 00 00\nc7 44 24 2c 00 00 00 00\ne9 5c fc ff ff\n44 89 64 24 14\n45 31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8d 63 01\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\n4c 01 fd\n41 80 7c 24 ff 25\n4d 8d 64 24 ff\n75 f0\n48 c1 fd 20\n45 85 f6\nb8 00 00 00 00\n41 0f 49 c6\n48 39 c5\n49 89 ef\n4c 0f 42 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 23 12 00 00\n4d 85 c9\n74 22\n48 39 c5\n0f 93 c0\n45 85 db\n75 38\n84 c0\n75 34\n4d 63 f6\n49 29 ee\n41 83 fd 30\n75 0f\nbe 30 00 00 00\neb 0d\n45 31 c9\ne9 c6 11 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cd\ne8 13 ab ff ff\n4d 89 e9\n4d 01 f1\nf6 44 24 14 01\n75 13\n4c 89 cf\n4c 89 e6\n48 89 ea\n4d 89 ce\ne8 95 ab ff ff\neb 11\n4c 89 cf\n4c 89 e6\n48 89 ea\n4d 89 ce\ne8 12 12 00 00\n49 01 ee\n4c 8b 44 24 20\n4d 89 f1\ne9 72 11 00 00\n45 31 db\n45 85 d2\n0f 84 b2 08 00 00\n44 89 64 24 14\ne9 1c ff ff ff\n45 31 db\n45 85 d2\n0f 84 b0 08 00 00\n44 89 64 24 14\ne9 06 ff ff ff\n41 83 fa 45\n0f 84 f1 09 00 00\n41 83 fa 4f\n44 89 64 24 14\n0f 84 de fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n48 63 40 14\n48 3d 94 f8 ff ff\n40 0f 9c c7\n0f 9f c1\n48 69 f0 1f 85 eb 51\n48 89 f2\n48 c1 ea 3f\n48 c1 fe 25\n01 d6\n6b d6 64\n39 d0\n0f 98 c0\n20 c8\n0f b6 c0\n29 c6\n83 c6 13\n48 89 74 24 38\ne9 be 03 00 00\n45 31 db\n45 85 d2\n0f 84 4a 08 00 00\n44 89 64 24 14\ne9 8c fe ff ff\n45 31 db\n45 85 d2\n0f 84 3b 08 00 00\n44 89 64 24 14\ne9 76 fe ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 64 fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 08\nba 02 00 00 00\ne9 f4 09 00 00\nba 02 00 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 36 fe ff ff\n48 89 7c 24 18\n8b 44 24 74\ne9 cf 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 16 fe ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 04\nba 02 00 00 00\ne9 a6 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 ed fd ff ff\n41 83 fe ff\n48 89 7c 24 18\n0f 84 67 09 00 00\n41 83 fe 08\n0f 8f 71 09 00 00\nb9 09 00 00 00\n8b 84 24 f0 04 00 00\n0f 1f 84 00 00 00 00 00\n48 98\n48 69 c0 67 66 66 66\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 22\n01 d0\nff c9\n41 39 ce\n75 e3\ne9 42 09 00 00\nb2 01\n45 31 db\n40 84 f6\n74 06\n41 bc 00 00 00 00\n74 02\nb2 01\nb0 70\ne9 72 09 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 71 fd ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 00\nba 02 00 00 00\ne9 02 09 00 00\nbd 32 d5 40 00\ne9 11 07 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 3f fd ff ff\n48 89 7c 24 18\n48 8b 4c 24 30\n8b 41 1c\n83 c0 07\n2b 41 18\n48 98\neb 54\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 16 fd ff ff\n48 89 7c 24 18\n48 8b 4c 24 30\n8b 41 18\n8b 49 1c\n8d 50 06\n48 63 d2\n48 69 f2 93 24 49 92\n48 c1 ee 20\n8d 44 06 06\n89 c6\nc1 ee 1f\nc1 f8 02\n01 f0\n8d 34 c5 00 00 00 00\n29 c6\n29 f2\n83 c1 07\n29 d1\n48 63 c1\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c8\n89 c1\nc1 e9 1f\nc1 f8 02\n01 c8\nba 02 00 00 00\ne9 5a 08 00 00\n45 31 db\n41 83 fa 4f\n0f 85 d4 04 00 00\n44 89 64 24 14\ne9 9c fc ff ff\n41 83 fa 45\n0f 84 93 07 00 00\n41 83 fa 4f\n44 89 64 24 14\n0f 84 74 fc ff ff\n48 8b 44 24 30\n8b 70 14\n81 fe 94 f8 ff ff\n0f 9c c0\n81 c6 6c 07 00 00\n45 31 e4\n41 bb 04 00 00 00\n41 88 c2\n31 c9\ne9 22 09 00 00\n89 74 24 18\n44 89 64 24 14\n48 8b 7c 24 78\n4d 89 cf\ne8 53 a7 ff ff\n4c 89 ff\n4c 8b 44 24 20\n49 89 c4\n31 c0\n45 85 f6\n41 0f 49 c6\n49 39 c4\n4c 89 e5\n48 0f 42 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 82 0e 00 00\n48 85 ff\n0f 84 82 05 00 00\n49 39 c4\n0f 83 0f 07 00 00\n4d 63 f6\n4d 29 e6\n41 83 fd 30\n0f 85 87 0c 00 00\nbe 30 00 00 00\ne9 82 0c 00 00\n45 31 db\n45 85 d2\n0f 84 bd 06 00 00\n44 89 64 24 14\ne9 d2 fb ff ff\n45 31 db\n41 83 fa 4f\n0f 85 f7 03 00 00\n44 89 64 24 14\ne9 bb fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 a9 fb ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 0c\nba 02 00 00 00\ne9 39 07 00 00\n45 31 db\n41 83 fa 45\n0f 85 bb 03 00 00\n44 89 64 24 14\ne9 7b fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 69 fb ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 1c\n83 f8 ff\n40 0f 9c c7\nff c0\n48 89 44 24 38\n41 bb 03 00 00 00\ne9 37 04 00 00\n45 31 db\n41 83 fa 45\n0f 85 76 03 00 00\n44 89 64 24 14\ne9 2c fb ff ff\n45 31 db\n41 83 fa 45\n8b 44 24 74\n0f 85 63 03 00 00\n44 89 64 24 14\ne9 11 fb ff ff\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 ff fa ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 10\n83 f8 ff\n40 0f 9c c7\nff c0\n48 89 44 24 38\n41 bb 02 00 00 00\ne9 cd 03 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 22 0d 00 00\n4d 85 c9\n0f 84 22 04 00 00\n83 f8 02\n0f 82 ca 05 00 00\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 81 0b 00 00\nbe 30 00 00 00\ne9 7c 0b 00 00\n44 89 64 24 14\n4d 89 cf\n48 8b 4c 24 30\n48 8b 41 30\n48 89 84 24 e0 00 00 00\n0f 10 01\n0f 10 49 10\n0f 10 51 20\n0f 29 94 24 d0 00 00 00\n0f 29 8c 24 c0 00 00 00\n0f 29 84 24 b0 00 00 00\n48 8d b4 24 b0 00 00 00\n48 8b bc 24 80 00 00 00\ne8 67 25 00 00\n49 89 c0\n48 c1 e8 3f\n49 89 c2\n4c 89 c6\n48 8d ac 24 a7 00 00 00\n66 90\n48 ba 67 66 66 66 66 66 66 66\n48 89 f0\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n8d 3c bf\n89 f1\n29 f9\n48 01 c2\n89 c8\nf7 d8\n4d 85 c0\n0f 49 c1\n83 c0 30\n88 45 ff\n48 ff cd\n48 83 c6 09\n48 83 fe 12\n48 89 d6\n77 b6\n41 bb 01 00 00 00\n45 31 e4\n4c 8b 44 24 20\n4d 89 f9\n48 8b 7c 24 38\n8b 4c 24 2c\ne9 d6 06 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 00 0c 00 00\n4d 85 c9\n0f 84 00 03 00 00\n83 f8 02\n0f 82 b7 04 00 00\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 90 0a 00 00\nbe 30 00 00 00\ne9 8b 0a 00 00\n44 89 64 24 14\n48 89 7c 24 18\n48 8b 44 24 30\n8b 48 18\n8d 41 06\n48 98\n48 69 d0 93 24 49 92\n48 c1 ea 20\n8d 4c 0a 06\n89 ca\nc1 ea 1f\nc1 f9 02\n01 d1\n8d 14 cd 00 00 00 00\n29 ca\n29 d0\nff c0\nba 01 00 00 00\ne9 c6 04 00 00\n45 31 db\n41 83 fa 45\n44 89 64 24 14\n0f 84 0d f9 ff ff\n48 89 7c 24 18\n48 8b 44 24 30\n8b 40 18\nba 01 00 00 00\ne9 9d 04 00 00\n45 31 db\n41 83 fa 4f\n0f 85 5f 01 00 00\n44 89 64 24 14\ne9 df f8 ff ff\n41 83 fa 45\n0f 85 54 01 00 00\n31 d2\nb0 79\n45 31 db\ne9 b8 04 00 00\n89 f8\ne9 3a 01 00 00\n41 ff cc\nbf 6d 01 00 00\n41 f6 c4 03\n75 42\n49 63 c4\n48 69 c0 1f 85 eb 51\n48 89 c1\n48 c1 f9 25\n48 89 c2\n48 c1 ea 3f\n01 d1\n6b c9 64\n48 c1 f8 27\n01 d0\n69 c0 90 01 00 00\n31 d2\n41 39 c4\n0f 94 c2\n81 c2 6d 01 00 00\n41 39 cc\nbf 6e 01 00 00\n0f 44 fa\n44 01 ff\n48 8b 44 24 30\n8b 70 18\ne8 72 0b 00 00\n89 c5\nb9 ff ff ff ff\n4c 8b 44 24 20\n4c 8b 4c 24 40\n44 8b 54 24 38\n0f be 03\n83 f8 47\n0f 84 0d 01 00 00\n83 f8 67\n0f 85 3b 01 00 00\n48 8b 44 24 30\n48 63 68 14\n48 69 c5 1f 85 eb 51\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 25\n01 d0\n6b c0 64\n89 ea\n29 c2\n01 ca\n48 63 c2\n48 69 d0 1f 85 eb 51\n48 89 d7\n48 c1 ef 3f\n48 c1 fa 25\n01 fa\n6b d2 64\n29 d0\nba 02 00 00 00\n0f 89 91 03 00 00\nbf 94 f8 ff ff\n29 cf\n89 c1\nf7 d9\n83 c0 64\n39 fd\n0f 4c c1\ne9 79 03 00 00\nb0 58\neb 46\nb0 63\neb 42\n48 8b 44 24 30\n8b 40 0c\neb 08\n48 8b 44 24 30\n8b 40 08\nba 02 00 00 00\n41 83 fd 2d\n44 89 64 24 14\n48 89 7c 24 18\n0f 84 46 03 00 00\n41 83 fd 30\n0f 84 3c 03 00 00\n41 bd 5f 00 00 00\ne9 31 03 00 00\nb0 78\n31 d2\ne9 70 03 00 00\n48 8b 44 24 30\n48 63 48 14\n48 69 c1 1f 85 eb 51\n48 89 c2\n48 c1 ea 3f\n48 c1 f8 25\n01 d0\n6b d0 64\n89 c8\n29 d0\nba 02 00 00 00\n44 89 64 24 14\n48 89 7c 24 18\n0f 89 ef 02 00 00\n89 c6\nf7 de\n83 c0 64\n81 f9 94 f8 ff ff\n0f 4c c6\ne9 da 02 00 00\n48 8b 44 24 30\n8b 40 14\nba 94 f8 ff ff\n29 ca\n39 d0\n40 0f 9c c7\n8d 84 01 6c 07 00 00\n48 89 44 24 38\n41 bb 04 00 00 00\nc7 44 24 2c 00 00 00 00\n45 31 e4\ne9 bb 02 00 00\n48 63 c5\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c8\n89 c1\nc1 f9 02\nc1 e8 1f\n8d 44 01 01\nba 02 00 00 00\ne9 7d 02 00 00\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\nbd 01 00 00 00\n0f 47 e8\n48 8b 4c 24 48\n4c 29 c1\n48 39 cd\n0f 83 1f 09 00 00\n4d 85 c9\n74 23\n83 f8 02\n0f 82 3c f3 ff ff\n4d 63 f6\n49 ff ce\n41 83 fd 30\n0f 85 0e f3 ff ff\nbe 30 00 00 00\ne9 09 f3 ff ff\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n49 01 e8\ne9 c1 08 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 41\n45 31 db\ne9 4f 02 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 42\n45 31 db\ne9 3b 02 00 00\nbd 20 d5 40 00\neb 05\nbd 29 d5 40 00\n31 ff\n44 89 64 24 14\n45 84 e4\n40 0f 95 c7\n8b 84 24 f0 04 00 00\n89 04 24\n45 31 ff\n31 f6\n48 c7 c2 ff ff ff ff\n48 89 e9\n4c 8b 44 24 30\n4d 89 cc\n4c 8b 8c 24 80 00 00 00\ne8 c4 f0 ff ff\n4d 89 e1\n4c 8b 44 24 20\n45 85 f6\n45 0f 49 fe\n4c 39 f8\n48 89 c1\n49 0f 42 cf\n4c 8b 64 24 48\n4d 29 c4\n4c 39 e1\n0f 83 48 08 00 00\n4d 85 c9\n74 22\n4c 39 f8\n48 89 44 24 18\n48 89 4c 24 50\n73 28\n49 63 ce\n48 29 c1\n41 83 fd 30\n75 28\nbe 30 00 00 00\neb 26\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n49 01 c8\ne9 eb 07 00 00\n49 bf 00 00 00 00 01 00 00 00\neb 26\nbe 20 00 00 00\n4c 89 cf\n49 89 cd\n48 89 ca\n4d 89 ce\ne8 1c a1 ff ff\n49 bf 00 00 00 00 01 00 00 00\n4d 01 ee\n4d 89 f1\n31 ff\n80 7c 24 14 00\n40 0f 95 c7\n8b 84 24 f0 04 00 00\n89 04 24\n4c 89 ce\n4c 89 e2\n48 89 e9\n4c 8b 44 24 30\n4c 89 cd\n4c 8b 8c 24 80 00 00 00\ne8 f9 ef ff ff\n4c 8b 4c 24 18\n49 01 e9\n4c 8b 44 24 20\n48 8b 4c 24 50\n49 01 c8\ne9 6c 07 00 00\n40 84 f6\n74 03\n41 b4 01\n31 d2\nb0 61\n45 31 db\ne9 fa 00 00 00\n31 d2\nb0 43\n45 31 db\ne9 ee 00 00 00\n31 d2\nb0 59\n45 31 db\ne9 e2 00 00 00\n49 bf 00 00 00 00 01 00 00 00\n8b 44 24 18\n84 c0\n0f 85 97 05 00 00\ne9 a7 05 00 00\n49 bf 00 00 00 00 01 00 00 00\ne9 e0 05 00 00\n49 bf 00 00 00 00 01 00 00 00\ne9 02 06 00 00\n45 31 db\nb8 0e 00 00 00\ne9 fa f0 ff ff\n85 c9\n0f 84 c3 f0 ff ff\nc1 ee 1f\n48 89 74 24 58\n69 ed 10 27 00 00\n41 6b c3 64\n01 cd\n01 c5\n48 89 6c 24 38\n41 bb 09 00 00 00\nc7 44 24 2c 14 00 00 00\ne9 bf f0 ff ff\n41 be 09 00 00 00\n8b 84 24 f0 04 00 00\nba 09 00 00 00\neb 0a\n8b 84 24 f0 04 00 00\n44 89 f2\n89 c7\nc1 ef 1f\nc7 44 24 2c 00 00 00 00\n45 31 e4\n48 89 44 24 38\n41 89 d3\n89 f8\n24 01\n44 89 d1\n41 83 fa 4f\n49 89 fa\n0f 85 ed 00 00 00\n84 c0\n0f 85 e5 00 00 00\n4c 89 54 24 58\n31 d2\n48 8b 44 24 18\n41 89 ca\n44 8b 64 24 14\n48 89 54 24 50\n44 89 5c 24 18\n4d 89 cf\n66 c7 44 24 63 20 25\n45 85 d2\n48 8d 4c 24 65\n74 0a\n44 88 54 24 65\n48 8d 4c 24 66\n88 01\nc6 41 01 00\n48 8d bc 24 b0 00 00 00\n48 8d 54 24 63\nbe 00 04 00 00\n48 8b 4c 24 30\ne8 07 a1 ff ff\n48 89 c5\n48 85 ed\n0f 84 9c 01 00 00\n44 89 64 24 14\n48 ff cd\n31 c0\n45 85 f6\n41 0f 49 c6\n48 39 c5\n49 89 ec\n4c 0f 42 e0\n48 8b 4c 24 48\n4c 8b 44 24 20\n4c 29 c1\n49 39 cc\n8b 4c 24 18\n0f 83 f4 05 00 00\n4c 89 ff\n48 85 ff\n0f 84 f2 01 00 00\n48 39 c5\n0f 93 c0\n85 c9\n49 bf 00 00 00 00 01 00 00 00\n0f 85 86 02 00 00\n84 c0\n0f 85 7e 02 00 00\n4d 63 f6\n49 29 ee\n41 83 fd 30\n0f 85 4e 02 00 00\nbe 30 00 00 00\ne9 49 02 00 00\n48 8b 74 24 38\n8b 4c 24 2c\n89 f2\nf7 da\n84 c0\n0f 44 d6\n48 8d ac 24 a7 00 00 00\n66 0f 1f 44 00 00\nf6 c1 01\n74 07\nc6 45 ff 3a\n48 ff cd\nd1 f9\n89 d0\nbf cd cc cc cc\n48 0f af f8\n48 c1 ef 23\n8d 04 3f\n8d 04 80\n89 d6\n29 c6\n40 80 ce 30\n40 88 75 ff\n48 ff cd\n83 fa 09\n89 fa\n77 c7\n85 c9\n89 fa\n75 c1\n45 39 f3\n45 0f 4c de\n45 84 e4\n74 03\n41 b4 2b\n41 f6 c2 01\n41 b7 2d\n75 03\n45 89 e7\n41 83 fd 2d\n4c 89 54 24 58\n48 89 7c 24 38\n89 4c 24 2c\n0f 85 9c 00 00 00\n45 84 ff\n0f 84 28 04 00 00\n45 89 fc\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\n41 bf 01 00 00 00\n44 0f 47 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 e9 04 00 00\n4d 85 c9\n0f 84 68 02 00 00\n83 f8 02\n0f 82 e3 03 00 00\n45 85 db\n0f 85 da 03 00 00\n49 63 c6\n48 89 44 24 68\n48 8d 50 ff\n44 89 5c 24 18\nbe 20 00 00 00\n4c 89 cf\n4c 89 4c 24 40\ne8 dd 9d ff ff\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n48 8b 44 24 68\n4d 8d 4c 01 ff\ne9 99 03 00 00\n4c 8b 44 24 20\n4d 89 f9\ne9 55 04 00 00\n44 89 5c 24 18\n49 63 f3\n48 89 e8\n48 8d 94 24 a7 00 00 00\n48 29 d0\n44 89 fa\nf6 da\n4d 19 e4\n49 01 c4\n49 01 f4\n45 85 e4\n7e 76\n48 8b 44 24 48\n4c 29 c0\n41 83 fd 5f\n44 88 7c 24 50\n0f 85 56 01 00 00\n4d 63 fc\n49 39 c7\n44 8b 5c 24 18\n0f 83 2f 04 00 00\n31 c9\n4d 85 c9\n0f 84 be 01 00 00\nbe 20 00 00 00\n4c 89 cf\n4c 89 fa\n4c 89 4c 24 40\ne8 41 9d ff ff\n31 c9\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n4d 01 f9\ne9 93 01 00 00\n45 31 c9\n49 bf 00 00 00 00 01 00 00 00\n4d 01 e0\ne9 c0 03 00 00\n45 84 ff\n0f 84 68 01 00 00\n45 89 fc\n31 c0\n45 85 f6\n41 0f 49 c6\n83 f8 01\n41 bf 01 00 00 00\n44 0f 47 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n44 8b 5c 24 18\n0f 83 a9 03 00 00\n4d 85 c9\n0f 84 af 01 00 00\n83 f8 02\n0f 82 a3 02 00 00\n45 85 db\n0f 85 9a 02 00 00\n49 63 c6\n48 ff c8\n41 83 fd 30\n4c 89 4c 24 40\n48 89 44 24 68\n0f 85 57 02 00 00\nbe 30 00 00 00\ne9 52 02 00 00\nbe 20 00 00 00\n4c 89 f2\n49 89 ff\ne8 8c 9c ff ff\n4d 01 f7\n4c 89 ff\n49 bf 00 00 00 00 01 00 00 00\n48 8b 44 24 50\na8 01\n75 1c\nf6 44 24 14 01\n75 2a\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 f9 9c ff ff\neb 28\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 34 03 00 00\neb 13\n48 8d b4 24 b1 00 00 00\n48 89 ea\n49 89 fe\ne8 5f 03 00 00\n4d 89 f1\n4c 8b 44 24 20\n49 01 e9\n4d 01 e0\ne9 c9 02 00 00\n48 39 c6\n44 8b 5c 24 18\n0f 83 dc 02 00 00\n80 7c 24 50 00\n0f 84 db eb ff ff\n31 c9\n45 85 f6\n41 0f 49 ce\n83 f9 01\n41 bf 01 00 00 00\n44 0f 47 f9\n49 39 c7\n0f 83 b2 02 00 00\n4d 85 c9\n0f 84 c0 00 00 00\n83 f9 02\n0f 82 9d eb ff ff\n45 85 db\n0f 85 94 eb ff ff\n4d 63 f6\n49 ff ce\n41 83 fd 30\n4c 89 4c 24 40\n0f 85 5d eb ff ff\nbe 30 00 00 00\ne9 58 eb ff ff\n45 31 c9\ne9 82 01 00 00\n44 8b 5c 24 18\ne9 7b 01 00 00\n45 31 c9\n4d 01 f8\n45 29 e6\n41 0f 4f ce\n80 7c 24 50 00\n74 59\n83 f9 01\n41 bf 01 00 00 00\n44 0f 47 f9\n48 8b 44 24 48\n4c 29 c0\n49 39 c7\n0f 83 34 02 00 00\n4d 85 c9\n74 4e\n45 85 db\n0f 85 9e eb ff ff\n83 f9 02\n0f 82 95 eb ff ff\n41 89 ce\n49 ff ce\n41 83 fd 30\n4c 89 44 24 20\n48 89 4c 24 40\n0f 85 53 eb ff ff\nbe 30 00 00 00\ne9 4e eb ff ff\n41 89 ce\ne9 06 01 00 00\n45 31 c9\ne9 fb 00 00 00\n45 31 c9\ne9 e8 ea ff ff\n45 31 c9\ne9 5b eb ff ff\nbe 20 00 00 00\n4c 89 f2\ne8 fe 9a ff ff\n4c 89 ff\n49 bf 00 00 00 00 01 00 00 00\n8b 44 24 18\n4c 01 f7\n84 c0\n74 15\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 c6 01 00 00\ne9 3c eb ff ff\n80 7c 24 14 00\n0f 84 21 eb ff ff\n48 8b 74 24 78\n4c 89 e2\n49 89 fe\ne8 e6 01 00 00\ne9 1c eb ff ff\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 9e 9a ff ff\n4d 89 f9\n4c 8b 44 24 20\n49 bf 00 00 00 00 01 00 00 00\n4d 01 f1\n41 c6 01 0a\ne9 88 eb ff ff\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cf\ne8 6d 9a ff ff\n4d 89 f9\n4c 8b 44 24 20\n49 bf 00 00 00 00 01 00 00 00\n4d 01 f1\n41 c6 01 09\ne9 57 eb ff ff\nbe 20 00 00 00\n4c 89 cf\n48 8b 54 24 68\ne8 3d 9a ff ff\n48 8b 44 24 68\n44 8b 5c 24 18\n4c 8b 4c 24 40\n4c 8b 44 24 20\n49 01 c1\n45 88 21\n49 ff c1\n4d 01 f8\n4c 8d a4 24 a7 00 00 00\n49 29 ec\n31 c0\n45 85 f6\n41 0f 49 c6\n49 39 c4\n4d 89 e7\n4c 0f 42 f8\n48 8b 4c 24 48\n4c 29 c1\n49 39 cf\n0f 83 bc 00 00 00\n4d 85 c9\n74 27\n49 39 c4\n0f 93 c0\n45 85 db\n75 3f\n84 c0\n75 3b\n4d 63 f6\n4d 29 e6\n41 83 fd 30\n4c 89 44 24 20\n75 0c\nbe 30 00 00 00\neb 0a\n45 31 c9\neb 5d\nbe 20 00 00 00\n4c 89 cf\n4c 89 f2\n4d 89 cd\ne8 aa 99 ff ff\n4d 89 e9\n4c 8b 44 24 20\n4d 01 f1\n80 7c 24 14 00\n74 16\n4c 89 cf\n48 89 ee\n4c 89 e2\n4d 89 c6\n4c 89 cd\ne8 b4 00 00 00\neb 14\n4c 89 cf\n48 89 ee\n4c 89 e2\n4d 89 c6\n4c 89 cd\ne8 0e 9a ff ff\n49 89 e9\n4d 89 f0\n4d 01 e1\n0f 1f 44 00 00\n4d 01 f8\n49 bf 00 00 00 00 01 00 00 00\n80 7b 01 00\n48 8d 5b 01\n0f 85 75 ea ff ff\n48 83 7c 24 48 00\n74 0e\n4d 85 c9\n74 09\n41 c6 01 00\neb 03\n45 31 c0\n4c 89 c0\n48 81 c4 b8 04 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p320
S'.text:0000000000406830\n.text:0000000000406831\n.text:0000000000406833\n.text:0000000000406835\n.text:0000000000406837\n.text:0000000000406839\n.text:000000000040683a\n.text:0000000000406841\n.text:0000000000406849\n.text:000000000040684c\n.text:0000000000406851\n.text:0000000000406854\n.text:000000000040685b\n.text:000000000040685f\n.text:0000000000406864\n.text:0000000000406868\n.text:000000000040686b\n.text:0000000000406870\n.text:0000000000406874\n.text:0000000000406879\n.text:000000000040687c\n.text:000000000040687e\n.text:0000000000406883\n.text:0000000000406886\n.text:0000000000406889\n.text:000000000040688c\n.text:0000000000406890\n.text:0000000000406893\n.text:0000000000406896\n.text:000000000040689c\n.text:00000000004068a6\n.text:00000000004068ab\n.text:00000000004068b0\n.text:00000000004068b4\n.text:00000000004068b9\n.text:00000000004068be\n.text:00000000004068c1\n.text:00000000004068c4\n.text:00000000004068c9\n.text:00000000004068ce\n.text:00000000004068d3\n.text:00000000004068d8\n.text:00000000004068db\n.text:00000000004068df\n.text:00000000004068e2\n.text:00000000004068e5\n.text:00000000004068e8\n.text:00000000004068eb\n.text:00000000004068ee\n.text:00000000004068f1\n.text:00000000004068f3\n.text:00000000004068f8\n.text:00000000004068fb\n.text:00000000004068fe\n.text:0000000000406903\n.text:0000000000406906\n.text:000000000040690b\n.text:0000000000406910\n.text:0000000000406913\n.text:0000000000406918\n.text:000000000040691b\n.text:000000000040691e\n.text:0000000000406923\n.text:0000000000406926\n.text:0000000000406929\n.text:000000000040692e\n.text:0000000000406933\n.text:0000000000406936\n.text:0000000000406939\n.text:000000000040693c\n.text:0000000000406941\n.text:0000000000406946\n.text:000000000040694b\n.text:000000000040694e\n.text:0000000000406953\n.text:0000000000406956\n.text:000000000040695a\n.text:000000000040695d\n.text:0000000000406960\n.text:0000000000406963\n.text:0000000000406966\n.text:000000000040696b\n.text:0000000000406970\n.text:0000000000406973\n.text:0000000000406976\n.text:000000000040697b\n.text:000000000040697e\n.text:0000000000406983\n.text:0000000000406986\n.text:0000000000406989\n.text:000000000040698e\n.text:0000000000406991\n.text:0000000000406997\n.text:000000000040699a\n.text:000000000040699f\n.text:00000000004069a2\n.text:00000000004069a5\n.text:00000000004069aa\n.text:00000000004069b0\n.text:00000000004069b8\n.text:00000000004069bd\n.text:00000000004069bf\n.text:00000000004069c2\n.text:00000000004069c5\n.text:00000000004069ca\n.text:00000000004069d0\n.text:00000000004069d5\n.text:00000000004069d8\n.text:00000000004069db\n.text:00000000004069e0\n.text:00000000004069e6\n.text:00000000004069eb\n.text:00000000004069f0\n.text:00000000004069f3\n.text:00000000004069f6\n.text:00000000004069f9\n.text:00000000004069fe\n.text:0000000000406a01\n.text:0000000000406a06\n.text:0000000000406a09\n.text:0000000000406a13\n.text:0000000000406a15\n.text:0000000000406a18\n.text:0000000000406a1b\n.text:0000000000406a1e\n.text:0000000000406a23\n.text:0000000000406a28\n.text:0000000000406a2b\n.text:0000000000406a30\n.text:0000000000406a36\n.text:0000000000406a40\n.text:0000000000406a42\n.text:0000000000406a45\n.text:0000000000406a47\n.text:0000000000406a49\n.text:0000000000406a50\n.text:0000000000406a53\n.text:0000000000406a56\n.text:0000000000406a59\n.text:0000000000406a60\n.text:0000000000406a63\n.text:0000000000406a66\n.text:0000000000406a69\n.text:0000000000406a6c\n.text:0000000000406a6e\n.text:0000000000406a71\n.text:0000000000406a73\n.text:0000000000406a76\n.text:0000000000406a78\n.text:0000000000406a7b\n.text:0000000000406a7d\n.text:0000000000406a80\n.text:0000000000406a83\n.text:0000000000406a90\n.text:0000000000406a93\n.text:0000000000406a95\n.text:0000000000406a98\n.text:0000000000406a9a\n.text:0000000000406a9d\n.text:0000000000406aa0\n.text:0000000000406ab0\n.text:0000000000406ab5\n.text:0000000000406ab8\n.text:0000000000406abd\n.text:0000000000406ac1\n.text:0000000000406ac7\n.text:0000000000406aca\n.text:0000000000406ad0\n.text:0000000000406ad3\n.text:0000000000406ad6\n.text:0000000000406ae0\n.text:0000000000406ae3\n.text:0000000000406ae9\n.text:0000000000406aec\n.text:0000000000406aee\n.text:0000000000406af0\n.text:0000000000406af6\n.text:0000000000406afb\n.text:0000000000406afd\n.text:0000000000406b00\n.text:0000000000406b03\n.text:0000000000406b08\n.text:0000000000406b0a\n.text:0000000000406b0d\n.text:0000000000406b0f\n.text:0000000000406b12\n.text:0000000000406b16\n.text:0000000000406b1a\n.text:0000000000406b1d\n.text:0000000000406b20\n.text:0000000000406b23\n.text:0000000000406b26\n.text:0000000000406b28\n.text:0000000000406b2c\n.text:0000000000406b30\n.text:0000000000406b32\n.text:0000000000406b36\n.text:0000000000406b38\n.text:0000000000406b3b\n.text:0000000000406b3d\n.text:0000000000406b40\n.text:0000000000406b43\n.text:0000000000406b46\n.text:0000000000406b4b\n.text:0000000000406b51\n.text:0000000000406b53\n.text:0000000000406b55\n.text:0000000000406b5a\n.text:0000000000406b5d\n.text:0000000000406b64\n.text:0000000000406b69\n.text:0000000000406b6c\n.text:0000000000406b70\n.text:0000000000406b76\n.text:0000000000406b7b\n.text:0000000000406b80\n.text:0000000000406b85\n.text:0000000000406b8a\n.text:0000000000406b8d\n.text:0000000000406b90\n.text:0000000000406b92\n.text:0000000000406b95\n.text:0000000000406b9b\n.text:0000000000406ba0\n.text:0000000000406ba4\n.text:0000000000406ba7\n.text:0000000000406bac\n.text:0000000000406bae\n.text:0000000000406bb0\n.text:0000000000406bb6\n.text:0000000000406bbb\n.text:0000000000406bbf\n.text:0000000000406bc1\n.text:0000000000406bc4\n.text:0000000000406bcb\n.text:0000000000406bce\n.text:0000000000406bd2\n.text:0000000000406bd5\n.text:0000000000406bd9\n.text:0000000000406bdb\n.text:0000000000406bde\n.text:0000000000406be2\n.text:0000000000406be4\n.text:0000000000406bea\n.text:0000000000406bec\n.text:0000000000406bef\n.text:0000000000406bf2\n.text:0000000000406bf8\n.text:0000000000406bfb\n.text:0000000000406c00\n.text:0000000000406c03\n.text:0000000000406c06\n.text:0000000000406c0b\n.text:0000000000406c0e\n.text:0000000000406c11\n.text:0000000000406c16\n.text:0000000000406c18\n.text:0000000000406c1b\n.text:0000000000406c1e\n.text:0000000000406c20\n.text:0000000000406c23\n.text:0000000000406c28\n.text:0000000000406c2b\n.text:0000000000406c2e\n.text:0000000000406c30\n.text:0000000000406c32\n.text:0000000000406c37\n.text:0000000000406c3a\n.text:0000000000406c3d\n.text:0000000000406c40\n.text:0000000000406c46\n.text:0000000000406c4b\n.text:0000000000406c4e\n.text:0000000000406c50\n.text:0000000000406c53\n.text:0000000000406c56\n.text:0000000000406c59\n.text:0000000000406c5f\n.text:0000000000406c64\n.text:0000000000406c69\n.text:0000000000406c6e\n.text:0000000000406c71\n.text:0000000000406c76\n.text:0000000000406c79\n.text:0000000000406c7c\n.text:0000000000406c82\n.text:0000000000406c87\n.text:0000000000406c8c\n.text:0000000000406c91\n.text:0000000000406ca0\n.text:0000000000406ca3\n.text:0000000000406ca7\n.text:0000000000406ca9\n.text:0000000000406cab\n.text:0000000000406cad\n.text:0000000000406cb3\n.text:0000000000406cb6\n.text:0000000000406cbb\n.text:0000000000406cbf\n.text:0000000000406cc5\n.text:0000000000406cc9\n.text:0000000000406ccf\n.text:0000000000406cd4\n.text:0000000000406cd8\n.text:0000000000406cdf\n.text:0000000000406ce3\n.text:0000000000406ce5\n.text:0000000000406ce7\n.text:0000000000406cea\n.text:0000000000406ced\n.text:0000000000406cef\n.text:0000000000406cf6\n.text:0000000000406cfa\n.text:0000000000406cfc\n.text:0000000000406cfe\n.text:0000000000406d01\n.text:0000000000406d04\n.text:0000000000406d06\n.text:0000000000406d09\n.text:0000000000406d10\n.text:0000000000406d14\n.text:0000000000406d17\n.text:0000000000406d19\n.text:0000000000406d1c\n.text:0000000000406d1f\n.text:0000000000406d21\n.text:0000000000406d24\n.text:0000000000406d28\n.text:0000000000406d2b\n.text:0000000000406d2d\n.text:0000000000406d2f\n.text:0000000000406d36\n.text:0000000000406d39\n.text:0000000000406d3e\n.text:0000000000406d41\n.text:0000000000406d44\n.text:0000000000406d49\n.text:0000000000406d4f\n.text:0000000000406d57\n.text:0000000000406d5c\n.text:0000000000406d61\n.text:0000000000406d64\n.text:0000000000406d70\n.text:0000000000406d74\n.text:0000000000406d76\n.text:0000000000406d80\n.text:0000000000406d83\n.text:0000000000406d89\n.text:0000000000406d8e\n.text:0000000000406d90\n.text:0000000000406d94\n.text:0000000000406d97\n.text:0000000000406d9c\n.text:0000000000406da0\n.text:0000000000406da3\n.text:0000000000406da6\n.text:0000000000406daa\n.text:0000000000406daf\n.text:0000000000406db2\n.text:0000000000406db5\n.text:0000000000406dbb\n.text:0000000000406dbe\n.text:0000000000406dc0\n.text:0000000000406dc3\n.text:0000000000406dc6\n.text:0000000000406dc9\n.text:0000000000406dcb\n.text:0000000000406dcd\n.text:0000000000406dcf\n.text:0000000000406dd2\n.text:0000000000406dd5\n.text:0000000000406dd9\n.text:0000000000406ddb\n.text:0000000000406de0\n.text:0000000000406de2\n.text:0000000000406de5\n.text:0000000000406dea\n.text:0000000000406def\n.text:0000000000406df2\n.text:0000000000406df5\n.text:0000000000406df8\n.text:0000000000406dfd\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e08\n.text:0000000000406e0a\n.text:0000000000406e0d\n.text:0000000000406e10\n.text:0000000000406e13\n.text:0000000000406e16\n.text:0000000000406e1b\n.text:0000000000406e1d\n.text:0000000000406e20\n.text:0000000000406e23\n.text:0000000000406e26\n.text:0000000000406e29\n.text:0000000000406e2e\n.text:0000000000406e31\n.text:0000000000406e36\n.text:0000000000406e39\n.text:0000000000406e3e\n.text:0000000000406e41\n.text:0000000000406e44\n.text:0000000000406e4a\n.text:0000000000406e4f\n.text:0000000000406e54\n.text:0000000000406e57\n.text:0000000000406e5a\n.text:0000000000406e60\n.text:0000000000406e65\n.text:0000000000406e6a\n.text:0000000000406e6e\n.text:0000000000406e74\n.text:0000000000406e78\n.text:0000000000406e7d\n.text:0000000000406e83\n.text:0000000000406e88\n.text:0000000000406e8d\n.text:0000000000406e91\n.text:0000000000406e97\n.text:0000000000406e9b\n.text:0000000000406e9e\n.text:0000000000406ea5\n.text:0000000000406ea8\n.text:0000000000406eac\n.text:0000000000406eb0\n.text:0000000000406eb2\n.text:0000000000406eb5\n.text:0000000000406eb7\n.text:0000000000406eba\n.text:0000000000406ebc\n.text:0000000000406ebf\n.text:0000000000406ec1\n.text:0000000000406ec4\n.text:0000000000406ec9\n.text:0000000000406ece\n.text:0000000000406ed1\n.text:0000000000406ed4\n.text:0000000000406eda\n.text:0000000000406edf\n.text:0000000000406ee4\n.text:0000000000406ee7\n.text:0000000000406eea\n.text:0000000000406ef0\n.text:0000000000406ef5\n.text:0000000000406efa\n.text:0000000000406efd\n.text:0000000000406f01\n.text:0000000000406f06\n.text:0000000000406f0c\n.text:0000000000406f11\n.text:0000000000406f16\n.text:0000000000406f19\n.text:0000000000406f1e\n.text:0000000000406f23\n.text:0000000000406f28\n.text:0000000000406f2b\n.text:0000000000406f2f\n.text:0000000000406f34\n.text:0000000000406f3a\n.text:0000000000406f3f\n.text:0000000000406f43\n.text:0000000000406f48\n.text:0000000000406f4b\n.text:0000000000406f4f\n.text:0000000000406f54\n.text:0000000000406f5a\n.text:0000000000406f5f\n.text:0000000000406f64\n.text:0000000000406f67\n.text:0000000000406f6c\n.text:0000000000406f71\n.text:0000000000406f74\n.text:0000000000406f78\n.text:0000000000406f7d\n.text:0000000000406f83\n.text:0000000000406f87\n.text:0000000000406f8c\n.text:0000000000406f92\n.text:0000000000406f96\n.text:0000000000406f9c\n.text:0000000000406fa1\n.text:0000000000406fa8\n.text:0000000000406fb0\n.text:0000000000406fb2\n.text:0000000000406fb9\n.text:0000000000406fbc\n.text:0000000000406fc0\n.text:0000000000406fc4\n.text:0000000000406fc6\n.text:0000000000406fc8\n.text:0000000000406fcb\n.text:0000000000406fcd\n.text:0000000000406fd2\n.text:0000000000406fd4\n.text:0000000000406fd7\n.text:0000000000406fda\n.text:0000000000406fdc\n.text:0000000000406fe2\n.text:0000000000406fe4\n.text:0000000000406fe6\n.text:0000000000406fe8\n.text:0000000000406fed\n.text:0000000000406ff0\n.text:0000000000406ff4\n.text:0000000000406ff9\n.text:0000000000406fff\n.text:0000000000407004\n.text:0000000000407009\n.text:000000000040700b\n.text:0000000000407010\n.text:0000000000407015\n.text:000000000040701a\n.text:000000000040701f\n.text:0000000000407022\n.text:0000000000407026\n.text:000000000040702b\n.text:0000000000407031\n.text:0000000000407036\n.text:000000000040703b\n.text:000000000040703e\n.text:0000000000407041\n.text:0000000000407044\n.text:0000000000407046\n.text:0000000000407048\n.text:000000000040704b\n.text:000000000040704f\n.text:0000000000407054\n.text:000000000040705a\n.text:000000000040705f\n.text:0000000000407064\n.text:0000000000407067\n.text:000000000040706a\n.text:000000000040706d\n.text:0000000000407070\n.text:0000000000407077\n.text:000000000040707b\n.text:000000000040707f\n.text:0000000000407081\n.text:0000000000407084\n.text:0000000000407087\n.text:0000000000407089\n.text:0000000000407090\n.text:0000000000407092\n.text:0000000000407094\n.text:0000000000407097\n.text:0000000000407099\n.text:000000000040709c\n.text:00000000004070a3\n.text:00000000004070a7\n.text:00000000004070a9\n.text:00000000004070ab\n.text:00000000004070ae\n.text:00000000004070b1\n.text:00000000004070b3\n.text:00000000004070b8\n.text:00000000004070bd\n.text:00000000004070c0\n.text:00000000004070c4\n.text:00000000004070ca\n.text:00000000004070cf\n.text:00000000004070d4\n.text:00000000004070d8\n.text:00000000004070de\n.text:00000000004070e2\n.text:00000000004070e7\n.text:00000000004070ed\n.text:00000000004070f2\n.text:00000000004070f5\n.text:00000000004070fb\n.text:00000000004070fe\n.text:0000000000407104\n.text:0000000000407107\n.text:000000000040710d\n.text:0000000000407110\n.text:0000000000407112\n.text:0000000000407117\n.text:000000000040711b\n.text:0000000000407120\n.text:0000000000407125\n.text:0000000000407128\n.text:000000000040712d\n.text:0000000000407130\n.text:0000000000407135\n.text:0000000000407138\n.text:000000000040713a\n.text:000000000040713d\n.text:0000000000407141\n.text:0000000000407144\n.text:0000000000407147\n.text:000000000040714b\n.text:0000000000407150\n.text:0000000000407153\n.text:0000000000407156\n.text:000000000040715c\n.text:000000000040715f\n.text:0000000000407165\n.text:0000000000407168\n.text:000000000040716e\n.text:0000000000407171\n.text:0000000000407174\n.text:0000000000407178\n.text:000000000040717e\n.text:0000000000407183\n.text:0000000000407188\n.text:000000000040718b\n.text:000000000040718e\n.text:0000000000407194\n.text:0000000000407199\n.text:000000000040719e\n.text:00000000004071a1\n.text:00000000004071a5\n.text:00000000004071ab\n.text:00000000004071b0\n.text:00000000004071b5\n.text:00000000004071b8\n.text:00000000004071bc\n.text:00000000004071c1\n.text:00000000004071c7\n.text:00000000004071cc\n.text:00000000004071d1\n.text:00000000004071d4\n.text:00000000004071d9\n.text:00000000004071de\n.text:00000000004071e1\n.text:00000000004071e5\n.text:00000000004071eb\n.text:00000000004071f0\n.text:00000000004071f5\n.text:00000000004071f8\n.text:00000000004071fc\n.text:0000000000407201\n.text:0000000000407207\n.text:000000000040720c\n.text:0000000000407211\n.text:0000000000407214\n.text:0000000000407217\n.text:000000000040721b\n.text:000000000040721d\n.text:0000000000407222\n.text:0000000000407228\n.text:000000000040722d\n.text:0000000000407230\n.text:0000000000407234\n.text:000000000040723a\n.text:000000000040723f\n.text:0000000000407244\n.text:0000000000407247\n.text:000000000040724b\n.text:000000000040724f\n.text:0000000000407255\n.text:000000000040725a\n.text:000000000040725f\n.text:0000000000407262\n.text:0000000000407266\n.text:000000000040726b\n.text:0000000000407271\n.text:0000000000407276\n.text:000000000040727b\n.text:000000000040727e\n.text:0000000000407281\n.text:0000000000407285\n.text:0000000000407287\n.text:000000000040728c\n.text:0000000000407292\n.text:0000000000407297\n.text:0000000000407299\n.text:000000000040729c\n.text:00000000004072a0\n.text:00000000004072a3\n.text:00000000004072a8\n.text:00000000004072ab\n.text:00000000004072b0\n.text:00000000004072b3\n.text:00000000004072b6\n.text:00000000004072bc\n.text:00000000004072bf\n.text:00000000004072c5\n.text:00000000004072c8\n.text:00000000004072ce\n.text:00000000004072d1\n.text:00000000004072d4\n.text:00000000004072d8\n.text:00000000004072de\n.text:00000000004072e3\n.text:00000000004072e8\n.text:00000000004072ed\n.text:00000000004072f0\n.text:00000000004072f5\n.text:00000000004072f9\n.text:0000000000407301\n.text:0000000000407304\n.text:0000000000407308\n.text:000000000040730c\n.text:0000000000407314\n.text:000000000040731c\n.text:0000000000407324\n.text:000000000040732c\n.text:0000000000407334\n.text:0000000000407339\n.text:000000000040733c\n.text:0000000000407340\n.text:0000000000407343\n.text:0000000000407346\n.text:000000000040734e\n.text:0000000000407350\n.text:000000000040735a\n.text:000000000040735d\n.text:0000000000407360\n.text:0000000000407363\n.text:0000000000407367\n.text:000000000040736b\n.text:000000000040736e\n.text:0000000000407370\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407377\n.text:000000000040737a\n.text:000000000040737c\n.text:000000000040737e\n.text:0000000000407381\n.text:0000000000407384\n.text:0000000000407387\n.text:000000000040738a\n.text:000000000040738d\n.text:0000000000407391\n.text:0000000000407395\n.text:0000000000407398\n.text:000000000040739a\n.text:00000000004073a0\n.text:00000000004073a3\n.text:00000000004073a8\n.text:00000000004073ab\n.text:00000000004073b0\n.text:00000000004073b4\n.text:00000000004073b9\n.text:00000000004073bb\n.text:00000000004073be\n.text:00000000004073c2\n.text:00000000004073c5\n.text:00000000004073ca\n.text:00000000004073cd\n.text:00000000004073d2\n.text:00000000004073d5\n.text:00000000004073d8\n.text:00000000004073de\n.text:00000000004073e1\n.text:00000000004073e7\n.text:00000000004073ea\n.text:00000000004073f0\n.text:00000000004073f3\n.text:00000000004073f6\n.text:00000000004073fa\n.text:0000000000407400\n.text:0000000000407405\n.text:000000000040740a\n.text:000000000040740f\n.text:0000000000407414\n.text:0000000000407419\n.text:000000000040741c\n.text:000000000040741f\n.text:0000000000407421\n.text:0000000000407428\n.text:000000000040742c\n.text:0000000000407430\n.text:0000000000407432\n.text:0000000000407435\n.text:0000000000407438\n.text:000000000040743a\n.text:0000000000407441\n.text:0000000000407443\n.text:0000000000407445\n.text:0000000000407447\n.text:000000000040744c\n.text:0000000000407451\n.text:0000000000407454\n.text:0000000000407458\n.text:000000000040745d\n.text:0000000000407463\n.text:0000000000407468\n.text:000000000040746d\n.text:0000000000407470\n.text:0000000000407475\n.text:000000000040747a\n.text:000000000040747d\n.text:0000000000407481\n.text:0000000000407487\n.text:000000000040748c\n.text:0000000000407491\n.text:0000000000407495\n.text:000000000040749b\n.text:000000000040749d\n.text:000000000040749f\n.text:00000000004074a2\n.text:00000000004074a7\n.text:00000000004074a9\n.text:00000000004074ae\n.text:00000000004074b1\n.text:00000000004074b6\n.text:00000000004074ba\n.text:00000000004074bc\n.text:00000000004074bf\n.text:00000000004074c6\n.text:00000000004074c9\n.text:00000000004074cd\n.text:00000000004074d0\n.text:00000000004074d4\n.text:00000000004074d6\n.text:00000000004074d9\n.text:00000000004074dd\n.text:00000000004074df\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074ea\n.text:00000000004074ed\n.text:00000000004074f3\n.text:00000000004074f6\n.text:00000000004074fb\n.text:00000000004074fe\n.text:0000000000407501\n.text:0000000000407506\n.text:0000000000407509\n.text:000000000040750e\n.text:0000000000407510\n.text:0000000000407515\n.text:000000000040751a\n.text:000000000040751f\n.text:0000000000407524\n.text:0000000000407527\n.text:000000000040752a\n.text:0000000000407530\n.text:0000000000407533\n.text:0000000000407539\n.text:000000000040753e\n.text:0000000000407542\n.text:0000000000407549\n.text:000000000040754c\n.text:0000000000407550\n.text:0000000000407554\n.text:0000000000407556\n.text:0000000000407559\n.text:000000000040755b\n.text:000000000040755d\n.text:000000000040755f\n.text:0000000000407562\n.text:0000000000407569\n.text:000000000040756c\n.text:0000000000407570\n.text:0000000000407574\n.text:0000000000407576\n.text:0000000000407579\n.text:000000000040757b\n.text:0000000000407580\n.text:0000000000407586\n.text:000000000040758b\n.text:000000000040758d\n.text:000000000040758f\n.text:0000000000407591\n.text:0000000000407594\n.text:0000000000407596\n.text:0000000000407599\n.text:000000000040759e\n.text:00000000004075a0\n.text:00000000004075a2\n.text:00000000004075a4\n.text:00000000004075a6\n.text:00000000004075ab\n.text:00000000004075ae\n.text:00000000004075b0\n.text:00000000004075b5\n.text:00000000004075b8\n.text:00000000004075bd\n.text:00000000004075c1\n.text:00000000004075c6\n.text:00000000004075cb\n.text:00000000004075d1\n.text:00000000004075d5\n.text:00000000004075db\n.text:00000000004075e1\n.text:00000000004075e6\n.text:00000000004075e8\n.text:00000000004075ea\n.text:00000000004075ef\n.text:00000000004075f4\n.text:00000000004075f8\n.text:00000000004075ff\n.text:0000000000407602\n.text:0000000000407606\n.text:000000000040760a\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407611\n.text:0000000000407613\n.text:0000000000407618\n.text:000000000040761d\n.text:0000000000407622\n.text:0000000000407628\n.text:000000000040762a\n.text:000000000040762c\n.text:000000000040762f\n.text:0000000000407635\n.text:0000000000407638\n.text:000000000040763d\n.text:0000000000407642\n.text:0000000000407645\n.text:000000000040764a\n.text:000000000040764c\n.text:000000000040764e\n.text:0000000000407652\n.text:0000000000407659\n.text:000000000040765e\n.text:0000000000407664\n.text:000000000040766c\n.text:000000000040766f\n.text:0000000000407674\n.text:0000000000407677\n.text:000000000040767e\n.text:0000000000407682\n.text:0000000000407684\n.text:0000000000407686\n.text:0000000000407689\n.text:000000000040768c\n.text:0000000000407690\n.text:0000000000407695\n.text:000000000040769a\n.text:000000000040769c\n.text:000000000040769f\n.text:00000000004076a3\n.text:00000000004076a6\n.text:00000000004076ab\n.text:00000000004076ae\n.text:00000000004076b3\n.text:00000000004076b6\n.text:00000000004076b9\n.text:00000000004076bf\n.text:00000000004076c2\n.text:00000000004076c4\n.text:00000000004076c7\n.text:00000000004076cd\n.text:00000000004076d0\n.text:00000000004076d3\n.text:00000000004076d7\n.text:00000000004076dd\n.text:00000000004076e2\n.text:00000000004076e7\n.text:00000000004076ea\n.text:00000000004076f4\n.text:00000000004076f7\n.text:00000000004076fc\n.text:00000000004076ff\n.text:0000000000407701\n.text:0000000000407704\n.text:0000000000407706\n.text:0000000000407708\n.text:000000000040770b\n.text:0000000000407710\n.text:0000000000407713\n.text:0000000000407715\n.text:0000000000407718\n.text:000000000040771a\n.text:000000000040771c\n.text:000000000040771f\n.text:0000000000407724\n.text:0000000000407729\n.text:000000000040772b\n.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407737\n.text:000000000040773a\n.text:000000000040773e\n.text:0000000000407745\n.text:0000000000407748\n.text:000000000040774b\n.text:000000000040774d\n.text:0000000000407754\n.text:0000000000407757\n.text:000000000040775c\n.text:000000000040775f\n.text:0000000000407767\n.text:000000000040776c\n.text:000000000040776f\n.text:0000000000407774\n.text:0000000000407777\n.text:000000000040777b\n.text:000000000040777e\n.text:0000000000407781\n.text:0000000000407785\n.text:000000000040778a\n.text:000000000040778d\n.text:0000000000407790\n.text:0000000000407796\n.text:0000000000407799\n.text:000000000040779b\n.text:000000000040779e\n.text:00000000004077a3\n.text:00000000004077a8\n.text:00000000004077aa\n.text:00000000004077ad\n.text:00000000004077b0\n.text:00000000004077b4\n.text:00000000004077b6\n.text:00000000004077bb\n.text:00000000004077bd\n.text:00000000004077c0\n.text:00000000004077ca\n.text:00000000004077cd\n.text:00000000004077d2\n.text:00000000004077dc\n.text:00000000004077de\n.text:00000000004077e3\n.text:00000000004077e6\n.text:00000000004077e9\n.text:00000000004077ec\n.text:00000000004077ef\n.text:00000000004077f4\n.text:00000000004077fe\n.text:0000000000407801\n.text:0000000000407804\n.text:0000000000407806\n.text:000000000040780b\n.text:000000000040780f\n.text:0000000000407816\n.text:0000000000407819\n.text:000000000040781c\n.text:000000000040781f\n.text:0000000000407822\n.text:0000000000407827\n.text:000000000040782a\n.text:0000000000407832\n.text:0000000000407837\n.text:000000000040783c\n.text:000000000040783f\n.text:0000000000407844\n.text:0000000000407849\n.text:000000000040784c\n.text:0000000000407851\n.text:0000000000407854\n.text:0000000000407856\n.text:0000000000407859\n.text:000000000040785b\n.text:000000000040785d\n.text:0000000000407860\n.text:0000000000407865\n.text:0000000000407867\n.text:0000000000407869\n.text:000000000040786c\n.text:0000000000407871\n.text:0000000000407873\n.text:0000000000407875\n.text:0000000000407878\n.text:000000000040787d\n.text:0000000000407887\n.text:000000000040788b\n.text:000000000040788d\n.text:0000000000407893\n.text:0000000000407898\n.text:00000000004078a2\n.text:00000000004078a7\n.text:00000000004078b1\n.text:00000000004078b6\n.text:00000000004078b9\n.text:00000000004078be\n.text:00000000004078c3\n.text:00000000004078c5\n.text:00000000004078cb\n.text:00000000004078ce\n.text:00000000004078d3\n.text:00000000004078d9\n.text:00000000004078dd\n.text:00000000004078df\n.text:00000000004078e1\n.text:00000000004078e6\n.text:00000000004078ec\n.text:00000000004078f4\n.text:00000000004078f9\n.text:00000000004078ff\n.text:0000000000407906\n.text:000000000040790b\n.text:000000000040790d\n.text:0000000000407914\n.text:0000000000407917\n.text:0000000000407919\n.text:000000000040791c\n.text:0000000000407924\n.text:0000000000407927\n.text:000000000040792c\n.text:000000000040792f\n.text:0000000000407931\n.text:0000000000407933\n.text:0000000000407936\n.text:000000000040793a\n.text:000000000040793d\n.text:0000000000407943\n.text:0000000000407945\n.text:000000000040794b\n.text:0000000000407950\n.text:0000000000407952\n.text:0000000000407957\n.text:000000000040795a\n.text:000000000040795f\n.text:0000000000407964\n.text:0000000000407969\n.text:000000000040796c\n.text:0000000000407973\n.text:0000000000407976\n.text:000000000040797b\n.text:000000000040797d\n.text:0000000000407982\n.text:0000000000407987\n.text:0000000000407989\n.text:000000000040798d\n.text:0000000000407995\n.text:000000000040799a\n.text:000000000040799f\n.text:00000000004079a4\n.text:00000000004079a9\n.text:00000000004079ac\n.text:00000000004079af\n.text:00000000004079b5\n.text:00000000004079ba\n.text:00000000004079bd\n.text:00000000004079bf\n.text:00000000004079c2\n.text:00000000004079c6\n.text:00000000004079c9\n.text:00000000004079cc\n.text:00000000004079d0\n.text:00000000004079d5\n.text:00000000004079da\n.text:00000000004079dd\n.text:00000000004079e0\n.text:00000000004079e4\n.text:00000000004079ea\n.text:00000000004079ed\n.text:00000000004079f0\n.text:00000000004079f6\n.text:00000000004079f9\n.text:00000000004079fc\n.text:00000000004079fe\n.text:0000000000407a08\n.text:0000000000407a0e\n.text:0000000000407a10\n.text:0000000000407a16\n.text:0000000000407a19\n.text:0000000000407a1c\n.text:0000000000407a20\n.text:0000000000407a26\n.text:0000000000407a2b\n.text:0000000000407a30\n.text:0000000000407a35\n.text:0000000000407a39\n.text:0000000000407a3b\n.text:0000000000407a3d\n.text:0000000000407a3f\n.text:0000000000407a42\n.text:0000000000407a4a\n.text:0000000000407a50\n.text:0000000000407a53\n.text:0000000000407a55\n.text:0000000000407a59\n.text:0000000000407a5c\n.text:0000000000407a5e\n.text:0000000000407a60\n.text:0000000000407a65\n.text:0000000000407a69\n.text:0000000000407a6d\n.text:0000000000407a70\n.text:0000000000407a73\n.text:0000000000407a75\n.text:0000000000407a77\n.text:0000000000407a7b\n.text:0000000000407a7f\n.text:0000000000407a82\n.text:0000000000407a85\n.text:0000000000407a87\n.text:0000000000407a89\n.text:0000000000407a8b\n.text:0000000000407a8d\n.text:0000000000407a8f\n.text:0000000000407a92\n.text:0000000000407a96\n.text:0000000000407a99\n.text:0000000000407a9b\n.text:0000000000407a9e\n.text:0000000000407aa2\n.text:0000000000407aa5\n.text:0000000000407aa7\n.text:0000000000407aaa\n.text:0000000000407aae\n.text:0000000000407ab3\n.text:0000000000407ab8\n.text:0000000000407abc\n.text:0000000000407ac2\n.text:0000000000407ac5\n.text:0000000000407acb\n.text:0000000000407ace\n.text:0000000000407ad0\n.text:0000000000407ad3\n.text:0000000000407ad7\n.text:0000000000407ada\n.text:0000000000407ae0\n.text:0000000000407ae4\n.text:0000000000407ae9\n.text:0000000000407aec\n.text:0000000000407aef\n.text:0000000000407af5\n.text:0000000000407af8\n.text:0000000000407afe\n.text:0000000000407b01\n.text:0000000000407b07\n.text:0000000000407b0a\n.text:0000000000407b10\n.text:0000000000407b13\n.text:0000000000407b18\n.text:0000000000407b1c\n.text:0000000000407b21\n.text:0000000000407b26\n.text:0000000000407b29\n.text:0000000000407b2e\n.text:0000000000407b33\n.text:0000000000407b38\n.text:0000000000407b3d\n.text:0000000000407b42\n.text:0000000000407b47\n.text:0000000000407b4c\n.text:0000000000407b51\n.text:0000000000407b56\n.text:0000000000407b59\n.text:0000000000407b5e\n.text:0000000000407b63\n.text:0000000000407b66\n.text:0000000000407b69\n.text:0000000000407b71\n.text:0000000000407b74\n.text:0000000000407b77\n.text:0000000000407b79\n.text:0000000000407b7c\n.text:0000000000407b7f\n.text:0000000000407b82\n.text:0000000000407b85\n.text:0000000000407b87\n.text:0000000000407b8c\n.text:0000000000407b8f\n.text:0000000000407b93\n.text:0000000000407b98\n.text:0000000000407b9e\n.text:0000000000407ba1\n.text:0000000000407ba4\n.text:0000000000407ba9\n.text:0000000000407baf\n.text:0000000000407bb1\n.text:0000000000407bb4\n.text:0000000000407bba\n.text:0000000000407bbf\n.text:0000000000407bc2\n.text:0000000000407bc5\n.text:0000000000407bca\n.text:0000000000407bcf\n.text:0000000000407bd1\n.text:0000000000407bd6\n.text:0000000000407bdb\n.text:0000000000407be0\n.text:0000000000407be3\n.text:0000000000407be8\n.text:0000000000407beb\n.text:0000000000407bf5\n.text:0000000000407bf8\n.text:0000000000407bfd\n.text:0000000000407c00\n.text:0000000000407c06\n.text:0000000000407c09\n.text:0000000000407c0b\n.text:0000000000407c0e\n.text:0000000000407c12\n.text:0000000000407c15\n.text:0000000000407c1b\n.text:0000000000407c1f\n.text:0000000000407c24\n.text:0000000000407c27\n.text:0000000000407c2a\n.text:0000000000407c2f\n.text:0000000000407c35\n.text:0000000000407c38\n.text:0000000000407c3e\n.text:0000000000407c41\n.text:0000000000407c47\n.text:0000000000407c4a\n.text:0000000000407c50\n.text:0000000000407c53\n.text:0000000000407c56\n.text:0000000000407c5a\n.text:0000000000407c5f\n.text:0000000000407c64\n.text:0000000000407c6a\n.text:0000000000407c6f\n.text:0000000000407c74\n.text:0000000000407c79\n.text:0000000000407c7c\n.text:0000000000407c7f\n.text:0000000000407c84\n.text:0000000000407c87\n.text:0000000000407c8a\n.text:0000000000407c94\n.text:0000000000407c99\n.text:0000000000407c9b\n.text:0000000000407c9d\n.text:0000000000407ca2\n.text:0000000000407ca4\n.text:0000000000407cac\n.text:0000000000407caf\n.text:0000000000407cb2\n.text:0000000000407cb7\n.text:0000000000407cb9\n.text:0000000000407cc1\n.text:0000000000407cc4\n.text:0000000000407cc7\n.text:0000000000407ccc\n.text:0000000000407cce\n.text:0000000000407cd6\n.text:0000000000407cd9\n.text:0000000000407cdc\n.text:0000000000407ce1\n.text:0000000000407ce4\n.text:0000000000407ce9\n.text:0000000000407cec\n.text:0000000000407cef\n.text:0000000000407cf4\n.text:0000000000407cf7\n.text:0000000000407cfc\n.text:0000000000407d02\n.text:0000000000407d07\n.text:0000000000407d0d\n.text:0000000000407d0f\n.text:0000000000407d12\n.text:0000000000407d16\n.text:0000000000407d19\n.text:0000000000407d1f\n.text:0000000000407d23\n.text:0000000000407d26\n.text:0000000000407d2c\n.text:0000000000407d2f\n.text:0000000000407d35\n.text:0000000000407d38\n.text:0000000000407d3e\n.text:0000000000407d41\n.text:0000000000407d47\n.text:0000000000407d4a\n.text:0000000000407d4d\n.text:0000000000407d51\n.text:0000000000407d56\n.text:0000000000407d5c\n.text:0000000000407d61\n.text:0000000000407d66\n.text:0000000000407d69\n.text:0000000000407d6e\n.text:0000000000407d73\n.text:0000000000407d78\n.text:0000000000407d7b\n.text:0000000000407d7e\n.text:0000000000407d81\n.text:0000000000407d85\n.text:0000000000407d8a\n.text:0000000000407d8c\n.text:0000000000407d8f\n.text:0000000000407d95\n.text:0000000000407d99\n.text:0000000000407d9e\n.text:0000000000407da1\n.text:0000000000407da4\n.text:0000000000407daa\n.text:0000000000407dad\n.text:0000000000407daf\n.text:0000000000407db2\n.text:0000000000407db8\n.text:0000000000407dbb\n.text:0000000000407dc1\n.text:0000000000407dc4\n.text:0000000000407dc7\n.text:0000000000407dcb\n.text:0000000000407dd0\n.text:0000000000407dd5\n.text:0000000000407ddb\n.text:0000000000407de0\n.text:0000000000407de5\n.text:0000000000407de8\n.text:0000000000407ded\n.text:0000000000407df0\n.text:0000000000407df5\n.text:0000000000407df8\n.text:0000000000407dfd\n.text:0000000000407e00\n.text:0000000000407e05\n.text:0000000000407e0a\n.text:0000000000407e0d\n.text:0000000000407e12\n.text:0000000000407e15\n.text:0000000000407e1f\n.text:0000000000407e23\n.text:0000000000407e26\n.text:0000000000407e28\n.text:0000000000407e2a\n.text:0000000000407e2f\n.text:0000000000407e32\n.text:0000000000407e35\n.text:0000000000407e3a\n.text:0000000000407e3f\n.text:0000000000407e44\n.text:0000000000407e4a\n.text:0000000000407e4f\n.text:0000000000407e52\n.text:0000000000407e55\n.text:0000000000407e5a\n.text:0000000000407e5f\n.text:0000000000407e64\n.text:0000000000407e67\n.text:0000000000407e6a\n.text:0000000000407e6d\n.text:0000000000407e72\n.text:0000000000407e75\n.text:0000000000407e7a\n.text:0000000000407e84\n.text:0000000000407e87\n.text:0000000000407e8b\n.text:0000000000407e90\n.text:0000000000407e95\n.text:0000000000407e98\n.text:0000000000407e9b\n.text:0000000000407e9e\n.text:0000000000407ea3\n.text:0000000000407ea6\n.text:0000000000407eab\n.text:0000000000407eb5\n.text:0000000000407eb8\n.text:0000000000407ebc\n.text:0000000000407ec1\n.text:0000000000407ec6\n.text:0000000000407ec9\n.text:0000000000407ece\n.text:0000000000407ed3\n.text:0000000000407ed8\n.text:0000000000407edd\n.text:0000000000407ee2\n.text:0000000000407ee7\n.text:0000000000407eea\n.text:0000000000407eed\n.text:0000000000407ef0\n.text:0000000000407ef3\n.text:0000000000407efb\n.text:0000000000407efe\n.text:0000000000407f00\n.text:0000000000407f03\n.text:0000000000407f07\n.text:0000000000407f0a\n.text:0000000000407f0d\n.text:0000000000407f11\n.text:0000000000407f16\n.text:0000000000407f19\n.text:0000000000407f1c\n.text:0000000000407f22\n.text:0000000000407f25\n.text:0000000000407f27\n.text:0000000000407f2a\n.text:0000000000407f2d\n.text:0000000000407f30\n.text:0000000000407f32\n.text:0000000000407f34\n.text:0000000000407f36\n.text:0000000000407f39\n.text:0000000000407f3c\n.text:0000000000407f40\n.text:0000000000407f45\n.text:0000000000407f47\n.text:0000000000407f4c\n.text:0000000000407f4e\n.text:0000000000407f51\n.text:0000000000407f53\n.text:0000000000407f58\n.text:0000000000407f5b\n.text:0000000000407f5e\n.text:0000000000407f61\n.text:0000000000407f66\n.text:0000000000407f69\n.text:0000000000407f6e\n.text:0000000000407f71\n.text:0000000000407f76\n.text:0000000000407f78\n.text:0000000000407f7b\n.text:0000000000407f7e\n.text:0000000000407f81\n.text:0000000000407f84\n.text:0000000000407f87\n.text:0000000000407f8c\n.text:0000000000407f8e\n.text:0000000000407f91\n.text:0000000000407f94\n.text:0000000000407f97\n.text:0000000000407f9a\n.text:0000000000407f9d\n.text:0000000000407fa2\n.text:0000000000407fa5\n.text:0000000000407fa8\n.text:0000000000407fab\n.text:0000000000407fb0\n.text:0000000000407fb3\n.text:0000000000407fbd\n.text:0000000000407fc1\n.text:0000000000407fc5\n.text:0000000000407fcb\n.text:0000000000407fd1\n.text:0000000000407fd3\n.text:0000000000407fd6\n.text:0000000000407fd8\n.text:0000000000407fdc\n.text:0000000000407fde\n.text:0000000000407fe1\n.text:0000000000407fe4\n.text:0000000000407feb\n.text:0000000000407fec\n.text:0000000000407fee\n.text:0000000000407ff0\n.text:0000000000407ff2\n.text:0000000000407ff4\n.text:0000000000407ff5\n'
p321
tp322
sS'quotearg_custom'
p323
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p324
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00406280\n'
p326
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p327
S'.text:0000000000406300\n.text:0000000000406303\n.text:0000000000406306\n.text:0000000000406309\n.text:000000000040630b\n.text:000000000040630e\n.text:0000000000406311\n.text:0000000000406314\n'
p328
tp329
sS'free'
p330
(S'\n__stdcall free(void * __ptr)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00611028)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00611028]\n'
p333
S'ff 25 e2 f8 20 00\n'
p334
S'.plt:0000000000401740\n'
p335
tp336
sS'close'
p337
(S'\n__stdcall close(int __fd)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00611120)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x00611120]\n'
p340
S'ff 25 ea f7 20 00\n'
p341
S'.plt:0000000000401930\n'
p342
tp343
sS'getenv'
p344
(S'\n__stdcall getenv(char * __name)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00611020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x00611020]\n'
p347
S'ff 25 ea f8 20 00\n'
p348
S'.plt:0000000000401730\n'
p349
tp350
sS'putchar_unlocked'
p351
(S'\n__stdcall putchar_unlocked(int __c)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00611168)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00611168]\n'
p354
S'ff 25 a2 f7 20 00\n'
p355
S'.plt:00000000004019c0\n'
p356
tp357
sS'fopen'
p358
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_00611200)();\u000a  return pFVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00611200]\n'
p361
S'ff 25 0a f7 20 00\n'
p362
S'.plt:0000000000401af0\n'
p363
tp364
sS'rpl_fseeko'
p365
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p366
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006111f8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00409528\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00409528\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040953a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401ae0\nMOV RDI,RBX\nCALL 0x004019e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004018e0\nCMP RAX,-0x1\nJZ 0x00409563\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00409568\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p368
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 a6 85 ff ff\n48 89 df\ne8 9e 84 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 91 83 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p369
S'.text:0000000000409500\n.text:0000000000409501\n.text:0000000000409503\n.text:0000000000409504\n.text:0000000000409507\n.text:000000000040950a\n.text:000000000040950d\n.text:0000000000409511\n.text:0000000000409515\n.text:0000000000409517\n.text:000000000040951b\n.text:000000000040951f\n.text:0000000000409521\n.text:0000000000409526\n.text:0000000000409528\n.text:000000000040952b\n.text:000000000040952e\n.text:0000000000409531\n.text:0000000000409532\n.text:0000000000409534\n.text:0000000000409535\n.text:000000000040953a\n.text:000000000040953d\n.text:0000000000409542\n.text:0000000000409544\n.text:0000000000409547\n.text:000000000040954a\n.text:000000000040954f\n.text:0000000000409553\n.text:0000000000409555\n.text:0000000000409558\n.text:000000000040955f\n.text:0000000000409561\n.text:0000000000409563\n.text:0000000000409568\n.text:0000000000409569\n.text:000000000040956b\n.text:000000000040956c\n'
p370
tp371
sS'tzalloc'
p372
(S'\n__stdcall tzalloc(char * name)\n'
p373
V\u000atimezone_t tzalloc(char *name)\u000a\u000a{\u000a  size_t __size;\u000a  timezone_t ptVar1;\u000a  ulong abbr_size;\u000a  \u000a  if (name == (char *)0x0) {\u000a    abbr_size = 0;\u000a  }\u000a  else {\u000a    __size = strlen(name);\u000a    abbr_size = __size + 1;\u000a  }\u000a  __size = 0x80;\u000a  if (0x76 < abbr_size) {\u000a    __size = abbr_size + 10;\u000a  }\u000a  ptVar1 = (timezone_t)malloc(__size);\u000a  if (ptVar1 != (timezone_t)0x0) {\u000a    ptVar1->next = (tm_zone *)0x0;\u000a    *(bool *)&ptVar1->tz_is_set = name != (char *)0x0;\u000a    ptVar1->abbrs[0] = 0;\u000a    if (name != (char *)0x0) {\u000a      extend_abbrs(ptVar1->abbrs,name,abbr_size);\u000a    }\u000a  }\u000a  return ptVar1;\u000a}\u000a\u000a
p374
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nTEST R14,R14\nJZ 0x0040958d\nMOV RDI,R14\nCALL 0x00401880\nMOV R15,RAX\nINC R15\nJMP 0x00409590\nXOR R15D,R15D\nLEA RAX,[R15 + 0xa]\nCMP R15,0x77\nMOV EDI,0x80\nCMOVNC RDI,RAX\nCALL 0x00401a00\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004095d4\nMOV qword ptr [RBX],0x0\nTEST R14,R14\nSETNZ byte ptr [RBX + 0x8]\nMOV byte ptr [RBX + 0x9],0x0\nJZ 0x004095d4\nMOV RDI,RBX\nADD RDI,0x9\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004095e0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p375
S'41 57\n41 56\n53\n49 89 fe\n4d 85 f6\n74 10\n4c 89 f7\ne8 fb 82 ff ff\n49 89 c7\n49 ff c7\neb 03\n45 31 ff\n49 8d 47 0a\n49 83 ff 77\nbf 80 00 00 00\n48 0f 43 f8\ne8 5a 84 ff ff\n48 89 c3\n48 85 db\n74 26\n48 c7 03 00 00 00 00\n4d 85 f6\n0f 95 43 08\nc6 43 09 00\n74 12\n48 89 df\n48 83 c7 09\n4c 89 f6\n4c 89 fa\ne8 0c 00 00 00\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p376
S'.text:0000000000409570\n.text:0000000000409572\n.text:0000000000409574\n.text:0000000000409575\n.text:0000000000409578\n.text:000000000040957b\n.text:000000000040957d\n.text:0000000000409580\n.text:0000000000409585\n.text:0000000000409588\n.text:000000000040958b\n.text:000000000040958d\n.text:0000000000409590\n.text:0000000000409594\n.text:0000000000409598\n.text:000000000040959d\n.text:00000000004095a1\n.text:00000000004095a6\n.text:00000000004095a9\n.text:00000000004095ac\n.text:00000000004095ae\n.text:00000000004095b5\n.text:00000000004095b8\n.text:00000000004095bc\n.text:00000000004095c0\n.text:00000000004095c2\n.text:00000000004095c5\n.text:00000000004095c9\n.text:00000000004095cc\n.text:00000000004095cf\n.text:00000000004095d4\n.text:00000000004095d7\n.text:00000000004095d8\n.text:00000000004095da\n.text:00000000004095dc\n'
p377
tp378
sS'quote_n_mem'
p379
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p380
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV ECX,0x6112e0\nJMP 0x00405e80\n'
p382
S'b9 e0 12 61 00\ne9 36 fb ff ff\n'
p383
S'.text:0000000000406340\n.text:0000000000406345\n'
p384
tp385
sS'xstrdup'
p386
(S'\n__stdcall xstrdup(char * string)\n'
p387
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p388
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401880\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00408730\n'
p389
S'53\n48 89 fb\ne8 17 91 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p390
S'.text:0000000000408760\n.text:0000000000408761\n.text:0000000000408764\n.text:0000000000408769\n.text:000000000040876d\n.text:0000000000408770\n.text:0000000000408771\n'
p391
tp392
sS'c_ispunct'
p393
(S'\n__stdcall c_ispunct()\n'
p394
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p395
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00409af2\nMOV AL,0x1\nJMP qword ptr [0x40df68 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p396
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 68 df 40 00\nc3\n31 c0\nc3\n'
p397
S'.text:0000000000409ae0\n.text:0000000000409ae3\n.text:0000000000409ae6\n.text:0000000000409ae8\n.text:0000000000409aea\n.text:0000000000409af1\n.text:0000000000409af2\n.text:0000000000409af4\n'
p398
tp399
sS'fstat'
p400
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p401
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_006111a8)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401a40\n'
p403
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 21 73 ff ff\n'
p404
S'.text:000000000040a710\n.text:000000000040a713\n.text:000000000040a715\n.text:000000000040a71a\n'
p405
tp406
sS'init_store_cols'
p407
(S'\n__stdcall init_store_cols()\n'
p408
V\u000avoid init_store_cols(void)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  long lVar4;\u000a  \u000a  lVar1 = (long)columns;\u000a  lVar4 = (long)lines_per_body;\u000a  lVar2 = (long)chars_per_column;\u000a  lVar3 = (long)(int)(lVar4 * lVar1);\u000a  free(line_vector);\u000a  line_vector = (int *)xmalloc(lVar4 * lVar1 * 4 + 4);\u000a  free(end_vector);\u000a  end_vector = (int *)xmalloc(lVar3 << 2);\u000a  free(buff);\u000a  buff_allocated = (lVar2 + 1) * lVar3 << (use_col_separator & 0x3fU);\u000a  buff = (char *)xmalloc(buff_allocated);\u000a  return;\u000a}\u000a\u000a
p409
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOVSXD RAX,dword ptr [0x006112a8]\nMOVSXD R15,dword ptr [0x006113c4]\nIMUL R15,RAX\nMOVSXD RBX,dword ptr [0x006113cc]\nINC RBX\nMOVSXD R14,R15D\nIMUL RBX,R14\nMOV RDI,qword ptr [0x00611420]\nCALL 0x00401740\nLEA RDI,[0x4 + R15*0x4]\nCALL 0x004085f0\nMOV qword ptr [0x00611420],RAX\nMOV RDI,qword ptr [0x00611428]\nCALL 0x00401740\nSHL R14,0x2\nMOV RDI,R14\nCALL 0x004085f0\nMOV qword ptr [0x00611428],RAX\nMOV RDI,qword ptr [0x00611430]\nCALL 0x00401740\nMOV CL,byte ptr [0x006113a5]\nSHL RBX,CL\nMOV qword ptr [0x00611438],RBX\nMOV RDI,RBX\nCALL 0x004085f0\nMOV qword ptr [0x00611430],RAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p410
S'41 57\n41 56\n53\n48 63 05 cc e2 20 00\n4c 63 3d e1 e3 20 00\n4c 0f af f8\n48 63 1d de e3 20 00\n48 ff c3\n4d 63 f7\n49 0f af de\n48 8b 3d 21 e4 20 00\ne8 3c e7 ff ff\n4a 8d 3c bd 04 00 00 00\ne8 df 55 00 00\n48 89 05 08 e4 20 00\n48 8b 3d 09 e4 20 00\ne8 1c e7 ff ff\n49 c1 e6 02\n4c 89 f7\ne8 c0 55 00 00\n48 89 05 f1 e3 20 00\n48 8b 3d f2 e3 20 00\ne8 fd e6 ff ff\n8a 0d 5c e3 20 00\n48 d3 e3\n48 89 1d e5 e3 20 00\n48 89 df\ne8 95 55 00 00\n48 89 05 ce e3 20 00\n5b\n41 5e\n41 5f\nc3\n'
p411
S'.text:0000000000402fd0\n.text:0000000000402fd2\n.text:0000000000402fd4\n.text:0000000000402fd5\n.text:0000000000402fdc\n.text:0000000000402fe3\n.text:0000000000402fe7\n.text:0000000000402fee\n.text:0000000000402ff1\n.text:0000000000402ff4\n.text:0000000000402ff8\n.text:0000000000402fff\n.text:0000000000403004\n.text:000000000040300c\n.text:0000000000403011\n.text:0000000000403018\n.text:000000000040301f\n.text:0000000000403024\n.text:0000000000403028\n.text:000000000040302b\n.text:0000000000403030\n.text:0000000000403037\n.text:000000000040303e\n.text:0000000000403043\n.text:0000000000403049\n.text:000000000040304c\n.text:0000000000403053\n.text:0000000000403056\n.text:000000000040305b\n.text:0000000000403062\n.text:0000000000403063\n.text:0000000000403065\n.text:0000000000403067\n'
p412
tp413
sS'fscanf'
p414
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_00611118)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00611118]\n'
p417
S'ff 25 f2 f7 20 00\n'
p418
S'.plt:0000000000401920\n'
p419
tp420
sS'strftime'
p421
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_006111e0)();\u000a  return sVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x006111e0]\n'
p424
S'ff 25 2a f7 20 00\n'
p425
S'.plt:0000000000401ab0\n'
p426
tp427
sS'memcpy'
p428
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00611160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00611160]\n'
p431
S'ff 25 aa f7 20 00\n'
p432
S'.plt:00000000004019b0\n'
p433
tp434
sS'open_file'
p435
(S'\n__stdcall open_file(char * name, COLUMN * p)\n'
p436
V\u000a_Bool open_file(char *name,COLUMN *p)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *pFVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  undefined uVar5;\u000a  \u000a  if ((*name == '-') && (name[1] == 0)) {\u000a    pcVar4 = (char *)dcgettext(0,"standard input",5);\u000a    p->name = pcVar4;\u000a    p->fp = stdin;\u000a    have_read_stdin = 1;\u000a  }\u000a  else {\u000a    p->name = name;\u000a    pFVar2 = fopen_safer(name,"r");\u000a    p->fp = pFVar2;\u000a  }\u000a  if (p->fp == (FILE *)0x0) {\u000a    failed_opens = 1;\u000a    if (ignore_failed_opens == 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar5 = 0;\u000a      pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar1,0x40c88c,pcVar4);\u000a    }\u000a    else {\u000a      uVar5 = 0;\u000a    }\u000a  }\u000a  else {\u000a    fadvise(p->fp);\u000a    p->status = OPEN;\u000a    p->full_page_printed = false;\u000a    total_files = total_files + 1;\u000a    uVar5 = 1;\u000a  }\u000a  return (_Bool)uVar5;\u000a}\u000a\u000a
p437
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nCMP byte ptr [R14],0x2d\nJNZ 0x00403647\nCMP byte ptr [R14 + 0x1],0x0\nJZ 0x0040365d\nMOV qword ptr [RBX + 0x8],R14\nMOV ESI,0x40b440\nMOV RDI,R14\nCALL 0x00404b10\nMOV qword ptr [RBX],RAX\nJMP 0x00403683\nXOR EDI,EDI\nMOV ESI,0x40b58f\nMOV EDX,0x5\nCALL 0x00401860\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [0x00611330]\nMOV qword ptr [RBX],RAX\nMOV byte ptr [0x006113b1],0x1\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x004036aa\nMOV ESI,0x2\nCALL 0x00404af0\nMOV dword ptr [RBX + 0x10],0x0\nMOV byte ptr [RBX + 0x39],0x0\nINC dword ptr [0x006113e0]\nMOV BL,0x1\nJMP 0x004036ea\nMOV byte ptr [0x006113b2],0x1\nMOV AL,byte ptr [0x006113a4]\nTEST AL,AL\nJZ 0x004036bf\nXOR EBX,EBX\nJMP 0x004036ea\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x00406230\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c88c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401ac0\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p438
S'55\n41 56\n53\n48 89 f3\n49 89 fe\n41 80 3e 2d\n75 07\n41 80 7e 01 00\n74 16\n4c 89 73 08\nbe 40 b4 40 00\n4c 89 f7\ne8 b8 14 00 00\n48 89 03\neb 26\n31 ff\nbe 8f b5 40 00\nba 05 00 00 00\ne8 f2 e1 ff ff\n48 89 43 08\n48 8b 05 b7 dc 20 00\n48 89 03\nc6 05 2e dd 20 00 01\n48 8b 3b\n48 85 ff\n74 1f\nbe 02 00 00 00\ne8 5b 14 00 00\nc7 43 10 00 00 00 00\nc6 43 39 00\nff 05 3a dd 20 00\nb3 01\neb 40\nc6 05 01 dd 20 00 01\n8a 05 ed dc 20 00\n84 c0\n74 04\n31 db\neb 2b\ne8 bc e0 ff ff\n8b 28\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 59 2b 00 00\n48 89 c1\n31 ff\nba 8c c8 40 00\n31 c0\n89 ee\ne8 d6 e3 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p439
S'.text:0000000000403630\n.text:0000000000403631\n.text:0000000000403633\n.text:0000000000403634\n.text:0000000000403637\n.text:000000000040363a\n.text:000000000040363e\n.text:0000000000403640\n.text:0000000000403645\n.text:0000000000403647\n.text:000000000040364b\n.text:0000000000403650\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365d\n.text:000000000040365f\n.text:0000000000403664\n.text:0000000000403669\n.text:000000000040366e\n.text:0000000000403672\n.text:0000000000403679\n.text:000000000040367c\n.text:0000000000403683\n.text:0000000000403686\n.text:0000000000403689\n.text:000000000040368b\n.text:0000000000403690\n.text:0000000000403695\n.text:000000000040369c\n.text:00000000004036a0\n.text:00000000004036a6\n.text:00000000004036a8\n.text:00000000004036aa\n.text:00000000004036b1\n.text:00000000004036b7\n.text:00000000004036b9\n.text:00000000004036bb\n.text:00000000004036bd\n.text:00000000004036bf\n.text:00000000004036c4\n.text:00000000004036c6\n.text:00000000004036c8\n.text:00000000004036ca\n.text:00000000004036cf\n.text:00000000004036d2\n.text:00000000004036d7\n.text:00000000004036da\n.text:00000000004036dc\n.text:00000000004036e1\n.text:00000000004036e3\n.text:00000000004036e5\n.text:00000000004036ea\n.text:00000000004036ec\n.text:00000000004036ed\n.text:00000000004036ef\n.text:00000000004036f0\n'
p440
tp441
sS'close_stdout_set_ignore_EPIPE'
p442
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p443
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p444
S'MOV byte ptr [0x00611470],DIL\nRET\n'
p445
S'40 88 3d 59 ca 20 00\nc3\n'
p446
S'.text:0000000000404a10\n.text:0000000000404a17\n'
p447
tp448
sS'parse_column_count'
p449
(S'\n__stdcall parse_column_count(char * s)\n'
p450
V\u000avoid parse_column_count(char *s)\u000a\u000a{\u000a  dcgettext(0,"invalid number of columns",5);\u000a  getoptnum(s,(int *)0x1,(char *)&columns);\u000a  explicit_columns = 1;\u000a  return;\u000a}\u000a\u000a
p451
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40c5af\nMOV EDX,0x5\nCALL 0x00401860\nMOV ESI,0x1\nMOV EDX,0x6112a8\nMOV RDI,RBX\nMOV RCX,RAX\nCALL 0x004026e0\nMOV byte ptr [0x006113b0],0x1\nPOP RBX\nRET\n'
p452
S'53\n48 89 fb\n31 ff\nbe af c5 40 00\nba 05 00 00 00\ne8 7b f2 ff ff\nbe 01 00 00 00\nba a8 12 61 00\n48 89 df\n48 89 c1\ne8 e6 00 00 00\nc6 05 af ed 20 00 01\n5b\nc3\n'
p453
S'.text:00000000004025d0\n.text:00000000004025d1\n.text:00000000004025d4\n.text:00000000004025d6\n.text:00000000004025db\n.text:00000000004025e0\n.text:00000000004025e5\n.text:00000000004025ea\n.text:00000000004025ef\n.text:00000000004025f2\n.text:00000000004025f5\n.text:00000000004025fa\n.text:0000000000402601\n.text:0000000000402602\n'
p454
tp455
sS'iswprint'
p456
(S'\n__stdcall iswprint(wint_t __wc)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00611240)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00611240]\n'
p459
S'ff 25 ca f6 20 00\n'
p460
S'.plt:0000000000401b70\n'
p461
tp462
sS'close_file'
p463
(S'\n__stdcall close_file(COLUMN * p)\n'
p464
V\u000avoid close_file(COLUMN *p)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  int *piVar5;\u000a  \u000a  if (p->status != CLOSED) {\u000a    iVar2 = ferror_unlocked((FILE *)p->fp);\u000a    if (iVar2 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a      error(1,(ulong)uVar1,0x40c88c,pcVar4);\u000a    }\u000a    iVar2 = fileno((FILE *)p->fp);\u000a    if (iVar2 != 0) {\u000a      iVar2 = rpl_fclose(p->fp);\u000a      if (iVar2 != 0) {\u000a        puVar3 = (uint *)__errno_location();\u000a        uVar1 = *puVar3;\u000a        pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a        error(1,(ulong)uVar1,0x40c88c,pcVar4);\u000a      }\u000a    }\u000a    if (parallel_files == 0) {\u000a      if (columns != 0) {\u000a        piVar5 = &column_vector->lines_to_print;\u000a        iVar2 = columns;\u000a        do {\u000a          piVar5[-8] = 3;\u000a          if (piVar5[-1] == 0) {\u000a            *piVar5 = 0;\u000a          }\u000a          piVar5 = piVar5 + 0x10;\u000a          iVar2 = iVar2 + -1;\u000a        } while (iVar2 != 0);\u000a      }\u000a    }\u000a    else {\u000a      p->status = CLOSED;\u000a      p->lines_to_print = 0;\u000a    }\u000a    files_ready_to_read = files_ready_to_read + -1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP dword ptr [RBX + 0x10],0x3\nJZ 0x00403b31\nMOV RDI,qword ptr [RBX]\nCALL 0x00401970\nTEST EAX,EAX\nJZ 0x00403a99\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [RBX + 0x8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00406230\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40c88c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401ac0\nMOV RDI,qword ptr [RBX]\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00403ade\nMOV RDI,qword ptr [RBX]\nCALL 0x00409270\nTEST EAX,EAX\nJZ 0x00403ade\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nMOV RDX,qword ptr [RBX + 0x8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00406230\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40c88c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401ac0\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJZ 0x00403af8\nMOV dword ptr [RBX + 0x10],0x3\nMOV dword ptr [RBX + 0x30],0x0\nJMP 0x00403b2b\nMOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJZ 0x00403b2b\nMOV RCX,qword ptr [0x006113e8]\nADD RCX,0x30\nNOP dword ptr [RAX]\nMOV dword ptr [RCX + -0x20],0x3\nCMP dword ptr [RCX + -0x4],0x0\nJNZ 0x00403b23\nMOV dword ptr [RCX],0x0\nADD RCX,0x40\nDEC EAX\nJNZ 0x00403b10\nDEC dword ptr [0x006113f0]\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p466
S'55\n53\n50\n48 89 fb\n83 7b 10 03\n0f 84 d1 00 00 00\n48 8b 3b\ne8 08 df ff ff\n85 c0\n74 2d\ne8 0f dd ff ff\n8b 28\n48 8b 53 08\n31 ff\nbe 03 00 00 00\ne8 ad 27 00 00\n48 89 c1\nbf 01 00 00 00\nba 8c c8 40 00\n31 c0\n89 ee\ne8 27 e0 ff ff\n48 8b 3b\ne8 3f df ff ff\n85 c0\n74 39\n48 8b 3b\ne8 c3 57 00 00\n85 c0\n74 2d\ne8 ca dc ff ff\n8b 28\n48 8b 53 08\n31 ff\nbe 03 00 00 00\ne8 68 27 00 00\n48 89 c1\nbf 01 00 00 00\nba 8c c8 40 00\n31 c0\n89 ee\ne8 e2 df ff ff\n8a 05 b6 d8 20 00\n84 c0\n74 10\nc7 43 10 03 00 00 00\nc7 43 30 00 00 00 00\neb 33\n8b 05 aa d7 20 00\n85 c0\n74 29\n48 8b 0d df d8 20 00\n48 83 c1 30\n0f 1f 00\nc7 41 e0 03 00 00 00\n83 79 fc 00\n75 06\nc7 01 00 00 00 00\n48 83 c1 40\nff c8\n75 e5\nff 0d bf d8 20 00\n48 83 c4 08\n5b\n5d\nc3\n'
p467
S'.text:0000000000403a50\n.text:0000000000403a51\n.text:0000000000403a52\n.text:0000000000403a53\n.text:0000000000403a56\n.text:0000000000403a5a\n.text:0000000000403a60\n.text:0000000000403a63\n.text:0000000000403a68\n.text:0000000000403a6a\n.text:0000000000403a6c\n.text:0000000000403a71\n.text:0000000000403a73\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7e\n.text:0000000000403a83\n.text:0000000000403a86\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a92\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9c\n.text:0000000000403aa1\n.text:0000000000403aa3\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aad\n.text:0000000000403aaf\n.text:0000000000403ab1\n.text:0000000000403ab6\n.text:0000000000403ab8\n.text:0000000000403abc\n.text:0000000000403abe\n.text:0000000000403ac3\n.text:0000000000403ac8\n.text:0000000000403acb\n.text:0000000000403ad0\n.text:0000000000403ad5\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403ade\n.text:0000000000403ae4\n.text:0000000000403ae6\n.text:0000000000403ae8\n.text:0000000000403aef\n.text:0000000000403af6\n.text:0000000000403af8\n.text:0000000000403afe\n.text:0000000000403b00\n.text:0000000000403b02\n.text:0000000000403b09\n.text:0000000000403b0d\n.text:0000000000403b10\n.text:0000000000403b17\n.text:0000000000403b1b\n.text:0000000000403b1d\n.text:0000000000403b23\n.text:0000000000403b27\n.text:0000000000403b29\n.text:0000000000403b2b\n.text:0000000000403b31\n.text:0000000000403b35\n.text:0000000000403b36\n.text:0000000000403b37\n'
p468
tp469
sS'c_isspace'
p470
(S'\n__stdcall c_isspace()\n'
p471
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p472
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00409b15\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p473
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p474
S'.text:0000000000409b00\n.text:0000000000409b03\n.text:0000000000409b06\n.text:0000000000409b08\n.text:0000000000409b0d\n.text:0000000000409b0f\n.text:0000000000409b11\n.text:0000000000409b14\n.text:0000000000409b15\n.text:0000000000409b17\n'
p475
tp476
sS'setenv_TZ'
p477
(S'\n__stdcall setenv_TZ(char * tz)\n'
p478
V\u000aint setenv_TZ(char *tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (tz != (char *)0x0) {\u000a    iVar1 = (*(code *)PTR_setenv_00611098)("TZ",tz,1);\u000a    return iVar1;\u000a  }\u000a  iVar1 = (*(code *)PTR_unsetenv_00611210)("TZ");\u000a  return iVar1;\u000a}\u000a\u000a
p479
S'MOV RAX,RDI\nMOV EDI,0x40df5f\nTEST RAX,RAX\nJZ 0x004099fa\nMOV EDX,0x1\nMOV RSI,RAX\nJMP 0x00401820\nJMP 0x00401b10\n'
p480
S'48 89 f8\nbf 5f df 40 00\n48 85 c0\n74 0d\nba 01 00 00 00\n48 89 c6\ne9 26 7e ff ff\ne9 11 81 ff ff\n'
p481
S'.text:00000000004099e0\n.text:00000000004099e3\n.text:00000000004099e8\n.text:00000000004099eb\n.text:00000000004099ed\n.text:00000000004099f2\n.text:00000000004099f5\n.text:00000000004099fa\n'
p482
tp483
sS'open'
p484
(S'\n__stdcall open(char * __file, int __oflag)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006111f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x006111f0]\n'
p487
S'ff 25 1a f7 20 00\n'
p488
S'.plt:0000000000401ad0\n'
p489
tp490
sS'quotearg_n_custom_mem'
p491
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p492
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x006114b0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006114a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00611490]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00611480]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404ff0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405e80\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p494
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 07 b2 20 00\n48 89 44 24 30\n0f 10 05 eb b1 20 00\n0f 29 44 24 20\n0f 10 05 cf b1 20 00\n0f 29 44 24 10\n0f 10 05 b3 b1 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p495
S'.text:0000000000406290\n.text:0000000000406291\n.text:0000000000406293\n.text:0000000000406295\n.text:0000000000406296\n.text:000000000040629a\n.text:000000000040629d\n.text:00000000004062a0\n.text:00000000004062a2\n.text:00000000004062a9\n.text:00000000004062ae\n.text:00000000004062b5\n.text:00000000004062ba\n.text:00000000004062c1\n.text:00000000004062c6\n.text:00000000004062cd\n.text:00000000004062d1\n.text:00000000004062d4\n.text:00000000004062d7\n.text:00000000004062dc\n.text:00000000004062de\n.text:00000000004062e1\n.text:00000000004062e4\n.text:00000000004062e7\n.text:00000000004062ec\n.text:00000000004062f0\n.text:00000000004062f1\n.text:00000000004062f3\n.text:00000000004062f5\n.text:00000000004062f6\n'
p496
tp497
sS'localtime'
p498
(S'\n__stdcall localtime(time_t * __timer)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_00611038)();\u000a  return ptVar1;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x00611038]\n'
p501
S'ff 25 d2 f8 20 00\n'
p502
S'.plt:0000000000401760\n'
p503
tp504
sS'localtime_r'
p505
(S'\n__stdcall localtime_r(time_t * __timer, tm * __tp)\n'
p506
V\u000a/* WARNING: Switch with 1 destination removed at 0x004017a0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime_r(time_t *__timer,tm *__tp)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00611058]\n'
p508
S'ff 25 b2 f8 20 00\n'
p509
S'.plt:00000000004017a0\n'
p510
tp511
sS'cols_ready_to_print'
p512
(S'\n__stdcall cols_ready_to_print()\n'
p513
V\u000auint cols_ready_to_print(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int *piVar2;\u000a  uint uVar3;\u000a  \u000a  if (columns != 0) {\u000a    piVar2 = &column_vector->lines_to_print;\u000a    uVar1 = 0;\u000a    uVar3 = 0;\u000a    do {\u000a      if (((uint)piVar2[-8] < 2) ||\u000a         ((((storing_columns & 1) == 0 && (0 < piVar2[-1])) && (0 < *piVar2)))) {\u000a        uVar1 = uVar1 + 1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a      piVar2 = piVar2 + 0x10;\u000a    } while (uVar3 < (uint)columns);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p514
S'CMP dword ptr [0x006112a8],0x0\nJZ 0x0040475b\nMOV RCX,qword ptr [0x006113e8]\nMOV EDX,dword ptr [0x006112a8]\nMOV SIL,byte ptr [0x00611379]\nADD RCX,0x30\nXOR EAX,EAX\nXOR EDI,EDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RCX + -0x20],0x2\nJNC 0x00404730\nINC EAX\nJMP 0x00404750\nTEST SIL,0x1\nJNZ 0x00404750\nCMP dword ptr [RCX + -0x4],0x0\nJLE 0x00404750\nCMP dword ptr [RCX],0x0\nJG 0x00404726\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC EDI\nADD RCX,0x40\nCMP EDI,EDX\nJC 0x00404720\nRET\nXOR EAX,EAX\nRET\n'
p515
S'83 3d b1 cb 20 00 00\n74 62\n48 8b 0d e8 cc 20 00\n8b 15 a2 cb 20 00\n40 8a 35 6c cc 20 00\n48 83 c1 30\n31 c0\n31 ff\n66 66 2e 0f 1f 84 00 00 00 00 00\n83 79 e0 02\n73 0a\nff c0\neb 26\n40 f6 c6 01\n75 1a\n83 79 fc 00\n7e 14\n83 39 00\n7f e5\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nff c7\n48 83 c1 40\n39 d7\n72 c6\nc3\n31 c0\nc3\n'
p516
S'.text:00000000004046f0\n.text:00000000004046f7\n.text:00000000004046f9\n.text:0000000000404700\n.text:0000000000404706\n.text:000000000040470d\n.text:0000000000404711\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404720\n.text:0000000000404724\n.text:0000000000404726\n.text:0000000000404728\n.text:0000000000404730\n.text:0000000000404734\n.text:0000000000404736\n.text:000000000040473a\n.text:000000000040473c\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404750\n.text:0000000000404752\n.text:0000000000404756\n.text:0000000000404758\n.text:000000000040475a\n.text:000000000040475b\n.text:000000000040475d\n'
p517
tp518
sS'_init'
p519
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p520
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00610ff8;\u000a  if (PTR___gmon_start___00610ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00610ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00610ff8]\nTEST RAX,RAX\nJZ 0x0040170a\nCALL RAX\nADD RSP,0x8\nRET\n'
p522
S'48 83 ec 08\n48 8b 05 f5 f8 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p523
S'.init:00000000004016f8\n.init:00000000004016fc\n.init:0000000000401703\n.init:0000000000401706\n.init:0000000000401708\n.init:000000000040170a\n.init:000000000040170e\n'
p524
tp525
sS'init_header'
p526
(S'\n__stdcall init_header(char * filename)\n'
p527
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid init_header(char *filename)\u000a\u000a{\u000a  timespec timespec;\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  tm *tp;\u000a  size_t sVar4;\u000a  uint in_ESI;\u000a  char *s;\u000a  uint __fd;\u000a  undefined local_d8 [16];\u000a  stat local_c0;\u000a  \u000a  iVar1 = 0x2d - (uint)(byte)*filename;\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(byte)filename[1];\u000a  }\u000a  __fd = -(uint)(iVar1 == 0) | in_ESI;\u000a  if (-1 < (int)__fd) {\u000a    iVar1 = fstat(__fd,(stat *)&local_c0);\u000a    if (iVar1 == 0) {\u000a      local_d8 = get_stat_mtime(&local_c0);\u000a      goto LAB_0040377a;\u000a    }\u000a  }\u000a  if (CONCAT44(timespec.tv_sec._4_4_,(undefined4)timespec.tv_sec) == 0) {\u000a    gettime((timespec *)0x6113f8);\u000a  }\u000a  local_d8._0_8_ = CONCAT44(timespec.tv_sec._4_4_,(undefined4)timespec.tv_sec);\u000a  local_d8._8_8_ = CONCAT44(timespec.tv_nsec._4_4_,(undefined4)timespec.tv_nsec);\u000aLAB_0040377a:\u000a  local_d8._8_4_ = SUB164((undefined  [16])local_d8 >> 0x40,0);\u000a  tp = localtime((time_t *)local_d8);\u000a  if (tp == (tm *)0x0) {\u000a    s = (char *)xmalloc(0x21);\u000a    __sprintf_chk(s,1,0xffffffffffffffff,"%ld.%09d",local_d8._0_8_,(ulong)local_d8._8_4_);\u000a  }\u000a  else {\u000a    sVar4 = nstrftime((char *)0x0,0xffffffffffffffff,date_format,(tm *)tp,(timezone_t)0x0);\u000a    s = (char *)xmalloc(sVar4 + 1);\u000a    nstrftime(s,sVar4 + 1,date_format,(tm *)tp,(timezone_t)0x0);\u000a  }\u000a  free(date_text);\u000a  iVar1 = chars_per_line;\u000a  if ((int)__fd < 0) {\u000a    filename = "";\u000a  }\u000a  file_text = filename;\u000a  if (custom_header != (char *)0x0) {\u000a    file_text = custom_header;\u000a  }\u000a  date_text = s;\u000a  iVar2 = gnu_mbswidth(s);\u000a  iVar3 = gnu_mbswidth(file_text);\u000a  header_width_available = (iVar1 - iVar2) - iVar3;\u000a  return;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R12,RDI\nMOVZX ECX,byte ptr [R12]\nMOV EAX,0x2d\nSUB EAX,ECX\nJNZ 0x0040372a\nMOVZX EAX,byte ptr [R12 + 0x1]\nNEG EAX\nCMP EAX,0x1\nSBB R15D,R15D\nOR R15D,ESI\nJS 0x00403746\nLEA RSI,[RSP + 0x18]\nMOV EDI,R15D\nCALL 0x0040a710\nTEST EAX,EAX\nJZ 0x00403767\nCMP qword ptr [0x006113f8],0x0\nJNZ 0x0040375a\nMOV EDI,0x6113f8\nCALL 0x00404ba0\nMOVUPS XMM0,xmmword ptr [0x006113f8]\nMOVAPS xmmword ptr [RSP],XMM0\nJMP 0x0040377a\nLEA RDI,[RSP + 0x18]\nCALL 0x004067e0\nMOV qword ptr [RSP],RAX\nMOV qword ptr [RSP + 0x8],RDX\nMOV R14D,dword ptr [RSP + 0x8]\nMOV RDI,RSP\nCALL 0x00401760\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004037db\nMOV RDX,qword ptr [0x00611380]\nXOR EDI,EDI\nMOV RSI,-0x1\nXOR R8D,R8D\nMOV RCX,RBX\nMOV R9D,R14D\nCALL 0x00406800\nMOV RBP,RAX\nINC RBP\nMOV RDI,RBP\nCALL 0x004085f0\nMOV R13,RAX\nMOV RDX,qword ptr [0x00611380]\nXOR R8D,R8D\nMOV RDI,R13\nMOV RSI,RBP\nMOV RCX,RBX\nMOV R9D,R14D\nCALL 0x00406800\nJMP 0x0040380a\nMOV EDI,0x21\nCALL 0x004085f0\nMOV R13,RAX\nMOV R8,qword ptr [RSP]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40c620\nXOR EAX,EAX\nMOV RDI,R13\nMOV R9D,R14D\nCALL 0x00401ba0\nMOV RDI,qword ptr [0x00611408]\nCALL 0x00401740\nMOV qword ptr [0x00611408],R13\nMOV RAX,qword ptr [0x00611390]\nTEST R15D,R15D\nMOV ECX,0x40c61d\nCMOVS R12,RCX\nTEST RAX,RAX\nCMOVNZ R12,RAX\nMOV qword ptr [0x00611410],R12\nMOV EBX,dword ptr [0x00611298]\nMOV RDI,qword ptr [0x00611408]\nXOR ESI,ESI\nCALL 0x00404c20\nSUB EBX,EAX\nMOV RDI,qword ptr [0x00611410]\nXOR ESI,ESI\nCALL 0x00404c20\nSUB EBX,EAX\nMOV dword ptr [0x00611418],EBX\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p529
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 fc\n41 0f b6 0c 24\nb8 2d 00 00 00\n29 c8\n75 08\n41 0f b6 44 24 01\nf7 d8\n83 f8 01\n45 19 ff\n41 09 f7\n78 11\n48 8d 74 24 18\n44 89 ff\ne8 ce 6f 00 00\n85 c0\n74 21\n48 83 3d aa dc 20 00 00\n75 0a\nbf f8 13 61 00\ne8 46 14 00 00\n0f 10 05 97 dc 20 00\n0f 29 04 24\neb 13\n48 8d 7c 24 18\ne8 6f 30 00 00\n48 89 04 24\n48 89 54 24 08\n44 8b 74 24 08\n48 89 e7\ne8 d9 df ff ff\n48 89 c3\n48 85 db\n74 4c\n48 8b 15 ea db 20 00\n31 ff\n48 c7 c6 ff ff ff ff\n45 31 c0\n48 89 d9\n45 89 f1\ne8 53 30 00 00\n48 89 c5\n48 ff c5\n48 89 ef\ne8 35 4e 00 00\n49 89 c5\n48 8b 15 bb db 20 00\n45 31 c0\n4c 89 ef\n48 89 ee\n48 89 d9\n45 89 f1\ne8 27 30 00 00\neb 2f\nbf 21 00 00 00\ne8 0b 4e 00 00\n49 89 c5\n4c 8b 04 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 20 c6 40 00\n31 c0\n4c 89 ef\n45 89 f1\ne8 96 e3 ff ff\n48 8b 3d f7 db 20 00\ne8 2a df ff ff\n4c 89 2d eb db 20 00\n48 8b 05 6c db 20 00\n45 85 ff\nb9 1d c6 40 00\n4c 0f 48 e1\n48 85 c0\n4c 0f 45 e0\n4c 89 25 d2 db 20 00\n8b 1d 54 da 20 00\n48 8b 3d bd db 20 00\n31 f6\ne8 ce 13 00 00\n29 c3\n48 8b 3d b5 db 20 00\n31 f6\ne8 be 13 00 00\n29 c3\n89 1d ae db 20 00\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p530
S'.text:0000000000403700\n.text:0000000000403701\n.text:0000000000403703\n.text:0000000000403705\n.text:0000000000403707\n.text:0000000000403709\n.text:000000000040370a\n.text:0000000000403711\n.text:0000000000403714\n.text:0000000000403719\n.text:000000000040371e\n.text:0000000000403720\n.text:0000000000403722\n.text:0000000000403728\n.text:000000000040372a\n.text:000000000040372d\n.text:0000000000403730\n.text:0000000000403733\n.text:0000000000403735\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403742\n.text:0000000000403744\n.text:0000000000403746\n.text:000000000040374e\n.text:0000000000403750\n.text:0000000000403755\n.text:000000000040375a\n.text:0000000000403761\n.text:0000000000403765\n.text:0000000000403767\n.text:000000000040376c\n.text:0000000000403771\n.text:0000000000403775\n.text:000000000040377a\n.text:000000000040377f\n.text:0000000000403782\n.text:0000000000403787\n.text:000000000040378a\n.text:000000000040378d\n.text:000000000040378f\n.text:0000000000403796\n.text:0000000000403798\n.text:000000000040379f\n.text:00000000004037a2\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037b0\n.text:00000000004037b3\n.text:00000000004037b6\n.text:00000000004037bb\n.text:00000000004037be\n.text:00000000004037c5\n.text:00000000004037c8\n.text:00000000004037cb\n.text:00000000004037ce\n.text:00000000004037d1\n.text:00000000004037d4\n.text:00000000004037d9\n.text:00000000004037db\n.text:00000000004037e0\n.text:00000000004037e5\n.text:00000000004037e8\n.text:00000000004037ec\n.text:00000000004037f1\n.text:00000000004037f8\n.text:00000000004037fd\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403805\n.text:000000000040380a\n.text:0000000000403811\n.text:0000000000403816\n.text:000000000040381d\n.text:0000000000403824\n.text:0000000000403827\n.text:000000000040382c\n.text:0000000000403830\n.text:0000000000403833\n.text:0000000000403837\n.text:000000000040383e\n.text:0000000000403844\n.text:000000000040384b\n.text:000000000040384d\n.text:0000000000403852\n.text:0000000000403854\n.text:000000000040385b\n.text:000000000040385d\n.text:0000000000403862\n.text:0000000000403864\n.text:000000000040386a\n.text:0000000000403871\n.text:0000000000403872\n.text:0000000000403874\n.text:0000000000403876\n.text:0000000000403878\n.text:000000000040387a\n.text:000000000040387b\n'
p531
tp532
sS'tzset'
p533
(S'\n__stdcall tzset()\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid tzset(void)\u000a\u000a{\u000a  (*(code *)PTR_tzset_00611170)();\u000a  return;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x00611170]\n'
p536
S'ff 25 9a f7 20 00\n'
p537
S'.plt:00000000004019d0\n'
p538
tp539
sS'set_quoting_flags'
p540
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p541
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'TEST RDI,RDI\nMOV ECX,0x611480\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p543
S'48 85 ff\nb9 80 14 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p544
S'.text:0000000000404fd0\n.text:0000000000404fd3\n.text:0000000000404fd8\n.text:0000000000404fdc\n.text:0000000000404fdf\n.text:0000000000404fe2\n'
p545
tp546
sS'get_stat_birthtime'
p547
(S'\n__stdcall get_stat_birthtime(stat * st)\n'
p548
V\u000atimespec get_stat_birthtime(stat *st)\u000a\u000a{\u000a  return (timespec)CONCAT88(0xffffffffffffffff,0xffffffffffffffff);\u000a}\u000a\u000a
p549
S'MOV RAX,-0x1\nMOV RDX,-0x1\nRET\n'
p550
S'48 c7 c0 ff ff ff ff\n48 c7 c2 ff ff ff ff\nc3\n'
p551
S'.text:00000000004067f0\n.text:00000000004067f7\n.text:00000000004067fe\n'
p552
tp553
sS'realloc'
p554
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_006111b8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x006111b8]\n'
p557
S'ff 25 52 f7 20 00\n'
p558
S'.plt:0000000000401a60\n'
p559
tp560
sS'__fprintf_chk'
p561
(S'\n__stdcall __fprintf_chk()\n'
p562
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00611230)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x00611230]\n'
p564
S'ff 25 da f6 20 00\n'
p565
S'.plt:0000000000401b50\n'
p566
tp567
sS'get_charset_aliases'
p568
(S'\n__stdcall get_charset_aliases()\n'
p569
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00409e84_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00409e84_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00409e84_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00409e84_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00409e84_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00409e84_caseD_9;\u000a      case -1:\u000a        goto switchD_00409e84_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00409edd:\u000a  __s = "";\u000aLAB_00409ee3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00409e84_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00409ee3;\u000a  }\u000a  goto LAB_00409edd;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x006115c8]\nTEST R15,R15\nJNZ 0x00409ef2\nMOV EDI,0x40e394\nCALL 0x00401730\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409ca8\nCMP byte ptr [RBX],0x0\nJNZ 0x00409cad\nMOV EBX,0x40e3a4\nMOV RDI,RBX\nCALL 0x00401880\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00409cc7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00409cc9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401a00\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00409d1d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004019b0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00409d28\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00409d45\nMOV R15D,0x40c61d\nJMP 0x00409eeb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401ad0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409edd\nMOV ESI,0x40b440\nMOV EDI,EBP\nCALL 0x00401a70\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409ea4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00409e70\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004017c0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004017c0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00409e70\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a30\nMOV ESI,0x40e3b3\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401920\nCMP EAX,0x2\nJL 0x00409ec4\nMOV RDI,R12\nCALL 0x00401880\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401880\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00409e4d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401a60\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00409d94\nJMP 0x00409ead\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401a00\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00409d94\nJMP 0x00409ead\nMOV RDI,RBX\nCALL 0x004017e0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00409dd7\nJMP qword ptr [0x40e258 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x00409ec4\nCMP EAX,0xa\nJNZ 0x00409e90\nJMP 0x00409e70\nMOV EDI,EBP\nCALL 0x00401930\nJMP 0x00409edd\nMOV RDI,R15\nCALL 0x00401740\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00409270\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00409edd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00409ee3\nMOV R15D,0x40c61d\nMOV RDI,R13\nCALL 0x00401740\nMOV qword ptr [0x006115c8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 40 79 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 94 e3 40 00\ne8 95 7a ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb a4 e3 40 00\n48 89 df\ne8 cb 7b ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 7d ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 7c ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 1d c6 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 7c 7d ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 40 b4 40 00\n89 ef\ne8 06 7d ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 0b 7a ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 fb 79 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f 7c ff ff\nbe b3 e3 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 2a 7b ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 79 7a ff ff\n49 89 c4\n48 89 ef\ne8 6e 7a ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 26 7c ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 7b ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 68 79 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 58 e2 40 00\n48 89 df\ne8 48 79 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 85 7a ff ff\neb 30\n4c 89 ff\ne8 8b 78 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 a4 f3 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 1d c6 40 00\n4c 89 ef\ne8 55 78 ff ff\n4c 89 3d d6 76 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000409c70\n.text:0000000000409c71\n.text:0000000000409c73\n.text:0000000000409c75\n.text:0000000000409c77\n.text:0000000000409c79\n.text:0000000000409c7a\n.text:0000000000409c81\n.text:0000000000409c88\n.text:0000000000409c8b\n.text:0000000000409c91\n.text:0000000000409c96\n.text:0000000000409c9b\n.text:0000000000409c9e\n.text:0000000000409ca1\n.text:0000000000409ca3\n.text:0000000000409ca6\n.text:0000000000409ca8\n.text:0000000000409cad\n.text:0000000000409cb0\n.text:0000000000409cb5\n.text:0000000000409cb8\n.text:0000000000409cbb\n.text:0000000000409cbd\n.text:0000000000409cc2\n.text:0000000000409cc5\n.text:0000000000409cc7\n.text:0000000000409cc9\n.text:0000000000409ccd\n.text:0000000000409cd2\n.text:0000000000409cd7\n.text:0000000000409cda\n.text:0000000000409cdd\n.text:0000000000409cdf\n.text:0000000000409ce2\n.text:0000000000409ce5\n.text:0000000000409ce8\n.text:0000000000409ced\n.text:0000000000409cf0\n.text:0000000000409cf3\n.text:0000000000409cf6\n.text:0000000000409cf8\n.text:0000000000409cfe\n.text:0000000000409d08\n.text:0000000000409d0d\n.text:0000000000409d17\n.text:0000000000409d1b\n.text:0000000000409d1d\n.text:0000000000409d23\n.text:0000000000409d28\n.text:0000000000409d32\n.text:0000000000409d37\n.text:0000000000409d41\n.text:0000000000409d45\n.text:0000000000409d4a\n.text:0000000000409d4c\n.text:0000000000409d4f\n.text:0000000000409d54\n.text:0000000000409d56\n.text:0000000000409d58\n.text:0000000000409d5e\n.text:0000000000409d63\n.text:0000000000409d65\n.text:0000000000409d6a\n.text:0000000000409d6d\n.text:0000000000409d70\n.text:0000000000409d76\n.text:0000000000409d7b\n.text:0000000000409d80\n.text:0000000000409d82\n.text:0000000000409d87\n.text:0000000000409d8a\n.text:0000000000409d8f\n.text:0000000000409d94\n.text:0000000000409d99\n.text:0000000000409d9c\n.text:0000000000409d9f\n.text:0000000000409da2\n.text:0000000000409da5\n.text:0000000000409da8\n.text:0000000000409dad\n.text:0000000000409db0\n.text:0000000000409db5\n.text:0000000000409db8\n.text:0000000000409dbd\n.text:0000000000409dc0\n.text:0000000000409dc5\n.text:0000000000409dca\n.text:0000000000409dcd\n.text:0000000000409dd2\n.text:0000000000409dd7\n.text:0000000000409dd9\n.text:0000000000409ddc\n.text:0000000000409de1\n.text:0000000000409de6\n.text:0000000000409de8\n.text:0000000000409deb\n.text:0000000000409dee\n.text:0000000000409df1\n.text:0000000000409df6\n.text:0000000000409df9\n.text:0000000000409dff\n.text:0000000000409e02\n.text:0000000000409e07\n.text:0000000000409e0a\n.text:0000000000409e0d\n.text:0000000000409e12\n.text:0000000000409e15\n.text:0000000000409e1a\n.text:0000000000409e1f\n.text:0000000000409e22\n.text:0000000000409e24\n.text:0000000000409e28\n.text:0000000000409e2d\n.text:0000000000409e32\n.text:0000000000409e35\n.text:0000000000409e3a\n.text:0000000000409e3d\n.text:0000000000409e42\n.text:0000000000409e45\n.text:0000000000409e4b\n.text:0000000000409e4d\n.text:0000000000409e52\n.text:0000000000409e56\n.text:0000000000409e5b\n.text:0000000000409e5e\n.text:0000000000409e61\n.text:0000000000409e67\n.text:0000000000409e70\n.text:0000000000409e73\n.text:0000000000409e78\n.text:0000000000409e7b\n.text:0000000000409e7e\n.text:0000000000409e84\n.text:0000000000409e90\n.text:0000000000409e93\n.text:0000000000409e98\n.text:0000000000409e9b\n.text:0000000000409e9d\n.text:0000000000409ea0\n.text:0000000000409ea2\n.text:0000000000409ea4\n.text:0000000000409ea6\n.text:0000000000409eab\n.text:0000000000409ead\n.text:0000000000409eb0\n.text:0000000000409eb5\n.text:0000000000409eb7\n.text:0000000000409ebc\n.text:0000000000409ebf\n.text:0000000000409ec4\n.text:0000000000409ec7\n.text:0000000000409ecc\n.text:0000000000409ed1\n.text:0000000000409ed4\n.text:0000000000409ed6\n.text:0000000000409edb\n.text:0000000000409edd\n.text:0000000000409ee3\n.text:0000000000409ee6\n.text:0000000000409eeb\n.text:0000000000409ef2\n.text:0000000000409ef5\n.text:0000000000409efc\n.text:0000000000409efd\n.text:0000000000409eff\n.text:0000000000409f01\n.text:0000000000409f03\n.text:0000000000409f05\n.text:0000000000409f06\n'
p573
tp574
sS'nl_langinfo'
p575
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00611198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00611198]\n'
p578
S'ff 25 72 f7 20 00\n'
p579
S'.plt:0000000000401a20\n'
p580
tp581
sS'skip_read'
p582
(S'\n__stdcall skip_read(COLUMN * p)\n'
p583
V\u000avoid skip_read(COLUMN *p)\u000a\u000a{\u000a  FILE *__stream;\u000a  int iVar1;\u000a  int iVar2;\u000a  int __c;\u000a  _Bool *p_Var3;\u000a  int in_ESI;\u000a  \u000a  __stream = p->fp;\u000a  iVar1 = getc_unlocked((FILE *)__stream);\u000a  if (iVar1 == 0xc) {\u000a    if (p->full_page_printed == false) {\u000a      iVar1 = 0xc;\u000a    }\u000a    else {\u000a      iVar1 = getc_unlocked((FILE *)__stream);\u000a      if (iVar1 == 10) {\u000a        iVar1 = getc_unlocked((FILE *)__stream);\u000a      }\u000a    }\u000a  }\u000a  p->full_page_printed = last_line;\u000a  __c = iVar1;\u000a  iVar2 = columns;\u000a  while (__c != -1) {\u000a    columns = iVar2;\u000a    if (__c == 10) goto LAB_0040395a;\u000a    if (__c == 0xc) {\u000a      columns = iVar2;\u000a      if (last_line == true) {\u000a        if (parallel_files == 0) {\u000a          columns = iVar2;\u000a          if (iVar2 != 0) {\u000a            p_Var3 = &column_vector->full_page_printed;\u000a            columns = iVar2;\u000a            do {\u000a              *p_Var3 = false;\u000a              p_Var3 = p_Var3 + 0x40;\u000a              iVar2 = iVar2 + -1;\u000a            } while (iVar2 != 0);\u000a          }\u000a        }\u000a        else {\u000a          columns = iVar2;\u000a          p->full_page_printed = false;\u000a        }\u000a      }\u000a      __c = getc_unlocked((FILE *)__stream);\u000a      if (__c != 10) {\u000a        ungetc(__c,(FILE *)__stream);\u000a      }\u000a      hold_file(p);\u000a      goto LAB_0040395a;\u000a    }\u000a    columns = iVar2;\u000a    __c = getc_unlocked((FILE *)__stream);\u000a    iVar2 = columns;\u000a  }\u000a  columns = iVar2;\u000a  close_file(p);\u000aLAB_0040395a:\u000a  if (((skip_count == 0) && (iVar1 != 0xc)) && ((in_ESI != 1 & parallel_files) == 0)) {\u000a    line_count = line_count + 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ESI\nMOV R15,RDI\nMOV RBX,qword ptr [R15]\nMOV RDI,RBX\nCALL 0x004017e0\nMOV EBP,EAX\nCMP EBP,0xc\nJNZ 0x004038c6\nCMP byte ptr [R15 + 0x39],0x0\nJZ 0x004038c1\nMOV RDI,RBX\nCALL 0x004017e0\nMOV EBP,EAX\nCMP EBP,0xa\nJNZ 0x004038c6\nMOV RDI,RBX\nCALL 0x004017e0\nMOV EBP,EAX\nJMP 0x004038c6\nMOV EBP,0xc\nMOV AL,byte ptr [0x00611440]\nMOV byte ptr [R15 + 0x39],AL\nMOV EAX,EBP\nCMP EAX,-0x1\nJNZ 0x004038ed\nJMP 0x00403911\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x00403911\nCMP EAX,0xa\nJZ 0x0040395a\nCMP EAX,0xc\nJNZ 0x004038e0\nCMP byte ptr [0x00611440],0x1\nJNZ 0x0040393b\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJZ 0x0040391b\nMOV byte ptr [R15 + 0x39],0x0\nJMP 0x0040393b\nMOV RDI,R15\nCALL 0x00403a50\nJMP 0x0040395a\nMOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJZ 0x0040393b\nMOV RCX,qword ptr [0x006113e8]\nADD RCX,0x39\nMOV byte ptr [RCX],0x0\nADD RCX,0x40\nDEC EAX\nJNZ 0x00403930\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,0xa\nJZ 0x00403952\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a30\nMOV RDI,R15\nCALL 0x004039f0\nMOV AL,byte ptr [0x0061139c]\nTEST AL,AL\nJNZ 0x0040397e\nCMP R14D,0x1\nSETNZ AL\nCMP EBP,0xc\nJZ 0x0040397e\nAND AL,byte ptr [0x0061139a]\nJNZ 0x0040397e\nINC dword ptr [0x006112ac]\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n53\n50\n41 89 f6\n49 89 ff\n49 8b 1f\n48 89 df\ne8 48 df ff ff\n89 c5\n83 fd 0c\n75 27\n41 80 7f 39 00\n74 1b\n48 89 df\ne8 32 df ff ff\n89 c5\n83 fd 0a\n75 11\n48 89 df\ne8 23 df ff ff\n89 c5\neb 05\nbd 0c 00 00 00\n8a 05 74 db 20 00\n41 88 47 39\n89 e8\n83 f8 ff\n75 16\neb 38\n48 89 df\ne8 f8 de ff ff\n83 f8 ff\n74 24\n83 f8 0a\n74 68\n83 f8 0c\n75 e9\n80 3d 42 db 20 00 01\n75 3b\n8a 05 94 da 20 00\n84 c0\n74 11\n41 c6 47 39 00\neb 2a\n4c 89 ff\ne8 37 01 00 00\neb 3f\n8b 05 87 d9 20 00\n85 c0\n74 16\n48 8b 0d bc da 20 00\n48 83 c1 39\nc6 01 00\n48 83 c1 40\nff c8\n75 f5\n48 89 df\ne8 9d de ff ff\n83 f8 0a\n74 0a\n89 c7\n48 89 de\ne8 de e0 ff ff\n4c 89 ff\ne8 96 00 00 00\n8a 05 3c da 20 00\n84 c0\n75 1a\n41 83 fe 01\n0f 95 c0\n83 fd 0c\n74 0e\n22 05 24 da 20 00\n75 06\nff 05 2e d9 20 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000403880\n.text:0000000000403881\n.text:0000000000403883\n.text:0000000000403885\n.text:0000000000403886\n.text:0000000000403887\n.text:000000000040388a\n.text:000000000040388d\n.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403898\n.text:000000000040389a\n.text:000000000040389d\n.text:000000000040389f\n.text:00000000004038a4\n.text:00000000004038a6\n.text:00000000004038a9\n.text:00000000004038ae\n.text:00000000004038b0\n.text:00000000004038b3\n.text:00000000004038b5\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038bf\n.text:00000000004038c1\n.text:00000000004038c6\n.text:00000000004038cc\n.text:00000000004038d0\n.text:00000000004038d2\n.text:00000000004038d5\n.text:00000000004038d7\n.text:00000000004038e0\n.text:00000000004038e3\n.text:00000000004038e8\n.text:00000000004038eb\n.text:00000000004038ed\n.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f5\n.text:00000000004038f7\n.text:00000000004038fe\n.text:0000000000403900\n.text:0000000000403906\n.text:0000000000403908\n.text:000000000040390a\n.text:000000000040390f\n.text:0000000000403911\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391b\n.text:0000000000403921\n.text:0000000000403923\n.text:0000000000403925\n.text:000000000040392c\n.text:0000000000403930\n.text:0000000000403933\n.text:0000000000403937\n.text:0000000000403939\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394d\n.text:0000000000403952\n.text:0000000000403955\n.text:000000000040395a\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403968\n.text:000000000040396b\n.text:000000000040396e\n.text:0000000000403970\n.text:0000000000403976\n.text:0000000000403978\n.text:000000000040397e\n.text:0000000000403982\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403987\n.text:0000000000403988\n'
p587
tp588
sS'x2realloc'
p589
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p590
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p591
S'MOV EDX,0x1\nJMP 0x00408660\n'
p592
S'ba 01 00 00 00\neb 89\n'
p593
S'.text:00000000004086d0\n.text:00000000004086d5\n'
p594
tp595
sS'strlen'
p596
(S'\n__stdcall strlen(char * __s)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006110c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006110c8]\n'
p599
S'ff 25 42 f8 20 00\n'
p600
S'.plt:0000000000401880\n'
p601
tp602
sS'memcmp'
p603
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00611130)();\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x00611130]\n'
p606
S'ff 25 da f7 20 00\n'
p607
S'.plt:0000000000401950\n'
p608
tp609
sS'quotearg_n_style_mem'
p610
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p611
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004060b0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00405e80\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000406110\n.text:0000000000406111\n.text:0000000000406113\n.text:0000000000406115\n.text:0000000000406116\n.text:000000000040611a\n.text:000000000040611d\n.text:0000000000406120\n.text:0000000000406122\n.text:0000000000406125\n.text:0000000000406128\n.text:000000000040612d\n.text:000000000040612f\n.text:0000000000406132\n.text:0000000000406135\n.text:0000000000406138\n.text:000000000040613d\n.text:0000000000406141\n.text:0000000000406142\n.text:0000000000406144\n.text:0000000000406146\n.text:0000000000406147\n'
p615
tp616
sS'emit_stdin_note'
p617
(S'\n__stdcall emit_stdin_note()\n'
p618
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p619
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40c6bc\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401960\n'
p620
S'50\n31 ff\nbe bc c6 40 00\nba 05 00 00 00\ne8 8e ed ff ff\n48 8b 35 4f e8 20 00\n48 89 c7\n58\ne9 7e ee ff ff\n'
p621
S'.text:0000000000402ac0\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402ad2\n.text:0000000000402ad9\n.text:0000000000402adc\n.text:0000000000402add\n'
p622
tp623
sS'_exit'
p624
(S'\n__stdcall _exit(int __status)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00611060)();\u000a  return;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00611060]\n'
p627
S'ff 25 aa f8 20 00\n'
p628
S'.plt:00000000004017b0\n'
p629
tp630
sS'bkm_scale_by_power'
p631
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p632
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00409211\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004091b0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00409200\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p634
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p635
S'.text:00000000004091e0\n.text:00000000004091e1\n.text:00000000004091e3\n.text:00000000004091e5\n.text:00000000004091e6\n.text:00000000004091e7\n.text:00000000004091e9\n.text:00000000004091ec\n.text:00000000004091ef\n.text:00000000004091f1\n.text:00000000004091f3\n.text:00000000004091f5\n.text:0000000000409200\n.text:0000000000409203\n.text:0000000000409206\n.text:000000000040920b\n.text:000000000040920d\n.text:000000000040920f\n.text:0000000000409211\n.text:0000000000409213\n.text:0000000000409217\n.text:0000000000409218\n.text:000000000040921a\n.text:000000000040921c\n.text:000000000040921d\n'
p636
tp637
sS'xrealloc'
p638
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p639
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p640
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00408647\nTEST RBX,RBX\nJNZ 0x00408647\nCALL 0x00401740\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401a60\nTEST RBX,RBX\nJZ 0x00408659\nTEST RAX,RAX\nJZ 0x0040865b\nPOP RBX\nRET\nCALL 0x00408780\n'
p641
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 fd 90 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 94 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p642
S'.text:0000000000408630\n.text:0000000000408631\n.text:0000000000408634\n.text:0000000000408637\n.text:0000000000408639\n.text:000000000040863c\n.text:000000000040863e\n.text:0000000000408643\n.text:0000000000408645\n.text:0000000000408646\n.text:0000000000408647\n.text:000000000040864a\n.text:000000000040864f\n.text:0000000000408652\n.text:0000000000408654\n.text:0000000000408657\n.text:0000000000408659\n.text:000000000040865a\n.text:000000000040865b\n'
p643
tp644
sS'first_last_page'
p645
(S'\n__stdcall first_last_page(char * pages)\n'
p646
V\u000a_Bool first_last_page(char *pages)\u000a\u000a{\u000a  undefined extraout_AL;\u000a  strtol_error sVar1;\u000a  char *s;\u000a  char *s_00;\u000a  option *long_options;\u000a  char *local_38;\u000a  uintmax_t local_30;\u000a  uintmax_t local_28;\u000a  \u000a  local_30 = 0xffffffffffffffff;\u000a  sVar1 = xstrtoumax(s,&local_38,(uintmax_t *)0xa,(char *)&local_28);\u000a  if ((sVar1 | LONGINT_INVALID_SUFFIX_CHAR) == LONGINT_INVALID_SUFFIX_CHAR) {\u000a    if (local_38 == s) {\u000a      return false;\u000a    }\u000a    if (local_28 == 0) {\u000a      return false;\u000a    }\u000a    if (*local_38 == ':') {\u000a      s_00 = local_38 + 1;\u000a      sVar1 = xstrtoumax(s_00,&local_38,(uintmax_t *)0xa,(char *)&local_30);\u000a      if (sVar1 != LONGINT_OK) goto LAB_004025b6;\u000a      if (s_00 == local_38) {\u000a        return false;\u000a      }\u000a      if (local_30 < local_28) {\u000a        return false;\u000a      }\u000a    }\u000a    if (*local_38 != 0) {\u000a      return false;\u000a    }\u000a    last_page_number = local_30;\u000a    first_page_number = local_28;\u000a    return true;\u000a  }\u000aLAB_004025b6:\u000a  long_options = (option *)(ulong)sVar1;\u000a  xstrtol_fatal(long_options,(char *)((ulong)pages & 0xffffffff));\u000a  dcgettext(0,"invalid number of columns",5);\u000a  getoptnum((char *)long_options,(int *)0x1,(char *)&columns);\u000a  explicit_columns = 1;\u000a  return (_Bool)extraout_AL;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDX\nMOV R15D,ESI\nMOV R14D,EDI\nMOV qword ptr [RSP + 0x8],-0x1\nMOV RSI,RSP\nLEA RCX,[RSP + 0x10]\nMOV EDX,0xa\nMOV R8D,0x40c61d\nMOV RDI,RBX\nCALL 0x00408f40\nMOV ECX,EAX\nOR ECX,0x2\nCMP ECX,0x2\nJNZ 0x004025b6\nMOV RBP,qword ptr [RSP]\nXOR EAX,EAX\nCMP RBP,RBX\nJZ 0x004025ab\nMOV RCX,qword ptr [RSP + 0x10]\nTEST RCX,RCX\nJZ 0x004025ab\nCMP byte ptr [RBP],0x3a\nJNZ 0x00402584\nINC RBP\nMOV RSI,RSP\nLEA RCX,[RSP + 0x8]\nMOV EDX,0xa\nMOV R8D,0x40c61d\nMOV RDI,RBP\nCALL 0x00408f40\nTEST EAX,EAX\nJNZ 0x004025b6\nCMP RBP,qword ptr [RSP]\nJZ 0x0040258d\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,qword ptr [RSP + 0x10]\nJC 0x0040258d\nMOV RAX,qword ptr [RSP]\nCMP byte ptr [RAX],0x0\nJZ 0x00402591\nXOR EAX,EAX\nJMP 0x004025ab\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [0x00611370],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x006112a0],RAX\nMOV AL,0x1\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOVSX EDX,R15B\nMOV ECX,0x40afb0\nMOV EDI,EAX\nMOV ESI,R14D\nMOV R8,RBX\nCALL 0x00408e90\nNOP dword ptr [RAX]\n'
p648
S'55\n41 57\n41 56\n53\n48 83 ec 18\n48 89 d3\n41 89 f7\n41 89 fe\n48 c7 44 24 08 ff ff ff ff\n48 89 e6\n48 8d 4c 24 10\nba 0a 00 00 00\n41 b8 1d c6 40 00\n48 89 df\ne8 19 6a 00 00\n89 c1\n83 c9 02\n83 f9 02\n0f 85 81 00 00 00\n48 8b 2c 24\n31 c0\n48 39 dd\n74 6b\n48 8b 4c 24 10\n48 85 c9\n74 61\n80 7d 00 3a\n75 34\n48 ff c5\n48 89 e6\n48 8d 4c 24 08\nba 0a 00 00 00\n41 b8 1d c6 40 00\n48 89 ef\ne8 d2 69 00 00\n85 c0\n75 44\n48 3b 2c 24\n74 15\n48 8b 44 24 08\n48 3b 44 24 10\n72 09\n48 8b 04 24\n80 38 00\n74 04\n31 c0\neb 1a\n48 8b 44 24 10\n48 89 05 d3 ed 20 00\n48 8b 44 24 08\n48 89 05 f7 ec 20 00\nb0 01\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n41 0f be d7\nb9 b0 af 40 00\n89 c7\n44 89 f6\n49 89 d8\ne8 c4 68 00 00\n0f 1f 40 00\n'
p649
S'.text:00000000004024f0\n.text:00000000004024f1\n.text:00000000004024f3\n.text:00000000004024f5\n.text:00000000004024f6\n.text:00000000004024fa\n.text:00000000004024fd\n.text:0000000000402500\n.text:0000000000402503\n.text:000000000040250c\n.text:000000000040250f\n.text:0000000000402514\n.text:0000000000402519\n.text:000000000040251f\n.text:0000000000402522\n.text:0000000000402527\n.text:0000000000402529\n.text:000000000040252c\n.text:000000000040252f\n.text:0000000000402535\n.text:0000000000402539\n.text:000000000040253b\n.text:000000000040253e\n.text:0000000000402540\n.text:0000000000402545\n.text:0000000000402548\n.text:000000000040254a\n.text:000000000040254e\n.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402556\n.text:000000000040255b\n.text:0000000000402560\n.text:0000000000402566\n.text:0000000000402569\n.text:000000000040256e\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402576\n.text:0000000000402578\n.text:000000000040257d\n.text:0000000000402582\n.text:0000000000402584\n.text:0000000000402588\n.text:000000000040258b\n.text:000000000040258d\n.text:000000000040258f\n.text:0000000000402591\n.text:0000000000402596\n.text:000000000040259d\n.text:00000000004025a2\n.text:00000000004025a9\n.text:00000000004025ab\n.text:00000000004025af\n.text:00000000004025b0\n.text:00000000004025b2\n.text:00000000004025b4\n.text:00000000004025b5\n.text:00000000004025b6\n.text:00000000004025ba\n.text:00000000004025bf\n.text:00000000004025c1\n.text:00000000004025c4\n.text:00000000004025c7\n.text:00000000004025cc\n'
p650
tp651
sS'print_page'
p652
(S'\n__stdcall print_page()\n'
p653
V\u000a_Bool print_page(void)\u000a\u000a{\u000a  anon_enum_32 aVar1;\u000a  _Bool _Var2;\u000a  undefined uVar3;\u000a  uint uVar4;\u000a  _Bool *p_Var5;\u000a  int iVar6;\u000a  COLUMN *p;\u000a  int iVar7;\u000a  int iVar8;\u000a  byte bVar9;\u000a  \u000a  init_page();\u000a  uVar4 = cols_ready_to_print();\u000a  if (uVar4 == 0) {\u000a    uVar3 = 0;\u000a  }\u000a  else {\u000a    if (extremities == 0) {\u000a      print_a_header = 1;\u000a    }\u000a    pad_vertically = false;\u000a    bVar9 = 0;\u000a    iVar8 = lines_per_body << (double_space & 0x1f);\u000a    while (0 < iVar8) {\u000a      uVar4 = cols_ready_to_print();\u000a      if (uVar4 == 0) goto LAB_004035ac;\u000a      output_position = 0;\u000a      spaces_not_printed = 0;\u000a      separators_not_printed = 0;\u000a      pad_vertically = false;\u000a      align_empty_cols = 0;\u000a      empty_line = 1;\u000a      if (0 < columns) {\u000a        iVar7 = 0;\u000a        p = column_vector;\u000a        do {\u000a          input_position = 0;\u000a          if ((p->lines_to_print < 1) && (p->status != FF_FOUND)) {\u000a            if (parallel_files == 1) {\u000a              if (empty_line == 1) {\u000aLAB_0040351e:\u000a                align_empty_cols = 1;\u000a              }\u000a              else {\u000aLAB_00403530:\u000a                align_column(p);\u000a              }\u000a            }\u000a          }\u000a          else {\u000a            FF_only = 0;\u000a            padding_not_printed = p->start_position;\u000a            _Var2 = (*p->print_func)(p);\u000a            if (_Var2 == false) {\u000a              read_rest_of_line(p);\u000a            }\u000a            bVar9 = bVar9 & 1 | pad_vertically;\u000a            iVar6 = p->lines_to_print;\u000a            p->lines_to_print = iVar6 + -1;\u000a            if ((iVar6 < 2) && (uVar4 = cols_ready_to_print(), uVar4 == 0)) break;\u000a            if ((parallel_files == 1) && (aVar1 = p->status, aVar1 != OPEN)) {\u000a              if (empty_line == 1) goto LAB_0040351e;\u000a              if ((aVar1 == CLOSED) || ((aVar1 == ON_HOLD && (FF_only == 1)))) goto LAB_00403530;\u000a            }\u000a          }\u000a          if (use_col_separator != false) {\u000a            separators_not_printed = separators_not_printed + 1;\u000a          }\u000a          p = p + 1;\u000a          iVar7 = iVar7 + 1;\u000a        } while (iVar7 < columns);\u000a        if (pad_vertically != false) {\u000a          putchar_unlocked(10);\u000a          iVar8 = iVar8 + -1;\u000a        }\u000a      }\u000a      uVar4 = cols_ready_to_print();\u000a      if ((uVar4 == 0) && (extremities != 0)) break;\u000a      if (((bVar9 & 1) != 0) && (((double_space ^ 1) & 1) == 0)) {\u000a        putchar_unlocked(10);\u000a        iVar8 = iVar8 + -1;\u000a      }\u000a    }\u000a    iVar7 = columns;\u000a    if (iVar8 == 0) {\u000a      if (columns < 1) {\u000a        iVar8 = 0;\u000a      }\u000a      else {\u000a        p_Var5 = &column_vector->full_page_printed;\u000a        iVar6 = 0;\u000a        do {\u000a          if (*(int *)(p_Var5 + -0x29) == 0) {\u000a            *p_Var5 = true;\u000a          }\u000a          p_Var5 = p_Var5 + 0x40;\u000a          iVar6 = iVar6 + 1;\u000a        } while (iVar6 < iVar7);\u000a      }\u000a    }\u000aLAB_004035ac:\u000a    pad_vertically = (_Bool)(bVar9 & 1);\u000a    if ((pad_vertically == false) || (extremities != 0)) {\u000a      if ((keep_FF == 1) && (print_a_FF == 1)) {\u000a        putchar_unlocked(0xc);\u000a        print_a_FF = 0;\u000a      }\u000a    }\u000a    else {\u000a      pad_down((ulong)(iVar8 + 5));\u000a    }\u000a    page_number = page_number + 1;\u000a    if (last_page_number < page_number) {\u000a      uVar3 = 0;\u000a    }\u000a    else {\u000a      reset_status();\u000a      uVar3 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nCALL 0x00404630\nCALL 0x004046f0\nTEST EAX,EAX\nJZ 0x004035a5\nMOV AL,byte ptr [0x006113ac]\nTEST AL,AL\nJNZ 0x004033aa\nMOV byte ptr [0x00611449],0x1\nMOV byte ptr [0x00611448],0x0\nMOV R14D,dword ptr [0x006113c4]\nMOV CL,byte ptr [0x0061137c]\nSHL R14D,CL\nXOR R15D,R15D\nTEST R14D,R14D\nJG 0x00403425\nJMP 0x00403566\nCMP byte ptr [0x00611448],0x0\nJZ 0x004033e6\nMOV EDI,0xa\nCALL 0x004019c0\nDEC R14D\nCALL 0x004046f0\nTEST EAX,EAX\nJNZ 0x004033fd\nMOV AL,byte ptr [0x006113ac]\nTEST AL,AL\nJNZ 0x00403566\nTEST R15B,0x1\nJZ 0x0040341c\nMOV AL,byte ptr [0x0061137c]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x0040341c\nMOV EDI,0xa\nCALL 0x004019c0\nDEC R14D\nTEST R14D,R14D\nJLE 0x00403566\nCALL 0x004046f0\nTEST EAX,EAX\nJZ 0x004035ac\nMOV dword ptr [0x00611454],0x0\nMOV dword ptr [0x00611450],0x0\nMOV dword ptr [0x00611458],0x0\nMOV byte ptr [0x00611448],0x0\nMOV byte ptr [0x00611462],0x0\nMOV byte ptr [0x00611463],0x1\nCMP dword ptr [0x006112a8],0x0\nJLE 0x004033e6\nMOV RBX,qword ptr [0x006113e8]\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV dword ptr [0x0061145c],0x0\nCMP dword ptr [RBX + 0x30],0x0\nJG 0x00403496\nCMP dword ptr [RBX + 0x10],0x1\nJNZ 0x0040350c\nMOV byte ptr [0x00611460],0x0\nMOV EAX,dword ptr [RBX + 0x34]\nMOV dword ptr [0x0061144c],EAX\nMOV RDI,RBX\nCALL qword ptr [RBX + 0x18]\nTEST AL,AL\nJNZ 0x004034b8\nMOV RDI,RBX\nCALL 0x00404760\nAND R15B,0x1\nOR R15B,byte ptr [0x00611448]\nMOV EAX,dword ptr [RBX + 0x30]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RBX + 0x30],ECX\nCMP EAX,0x1\nJG 0x004034de\nCALL 0x004046f0\nTEST EAX,EAX\nJZ 0x004033d0\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00403540\nMOV EAX,dword ptr [RBX + 0x10]\nTEST EAX,EAX\nJZ 0x00403540\nCMP byte ptr [0x00611463],0x1\nJZ 0x0040351e\nCMP EAX,0x3\nJZ 0x00403530\nCMP EAX,0x2\nJNZ 0x00403540\nCMP byte ptr [0x00611460],0x1\nJZ 0x00403530\nJMP 0x00403540\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00403540\nCMP byte ptr [0x00611463],0x1\nJNZ 0x00403530\nMOV byte ptr [0x00611462],0x1\nCMP byte ptr [0x006113a5],0x0\nJNZ 0x00403549\nJMP 0x0040354f\nMOV RDI,RBX\nCALL 0x004044a0\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [0x006113a5],0x0\nJZ 0x0040354f\nINC dword ptr [0x00611458]\nADD RBX,0x40\nINC EBP\nCMP EBP,dword ptr [0x006112a8]\nJL 0x00403480\nJMP 0x004033d0\nTEST R14D,R14D\nJNZ 0x004035ac\nCMP dword ptr [0x006112a8],0x0\nJLE 0x004035a9\nMOV RAX,qword ptr [0x006113e8]\nMOV ECX,dword ptr [0x006112a8]\nADD RAX,0x39\nXOR EDX,EDX\nNOP word ptr [RAX + RAX*0x1]\nCMP dword ptr [RAX + -0x29],0x0\nJNZ 0x00403599\nMOV byte ptr [RAX],0x1\nADD RAX,0x40\nINC EDX\nCMP EDX,ECX\nJL 0x00403590\nJMP 0x004035ac\nXOR EAX,EAX\nJMP 0x0040361c\nXOR R14D,R14D\nAND R15B,0x1\nMOV byte ptr [0x00611448],R15B\nJZ 0x004035c3\nMOV AL,byte ptr [0x006113ac]\nTEST AL,AL\nJZ 0x004035e8\nCMP byte ptr [0x006113ad],0x1\nJNZ 0x004035f4\nCMP byte ptr [0x00611461],0x1\nJNZ 0x004035f4\nMOV EDI,0xc\nCALL 0x004019c0\nMOV byte ptr [0x00611461],0x0\nJMP 0x004035f4\nADD R14D,0x5\nMOV EDI,R14D\nCALL 0x004047e0\nMOV RAX,qword ptr [0x006112a0]\nMOV RCX,qword ptr [0x006113b8]\nINC RCX\nMOV qword ptr [0x006113b8],RCX\nCMP RAX,RCX\nJNC 0x00403615\nXOR EAX,EAX\nJMP 0x0040361c\nCALL 0x00403990\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p655
S'55\n41 57\n41 56\n53\n50\ne8 a4 12 00 00\ne8 5f 13 00 00\n85 c0\n0f 84 0c 02 00 00\n8a 05 0d e0 20 00\n84 c0\n75 07\nc6 05 9f e0 20 00 01\nc6 05 97 e0 20 00 00\n44 8b 35 0c e0 20 00\n8a 0d be df 20 00\n41 d3 e6\n45 31 ff\n45 85 f6\n7f 5c\ne9 98 01 00 00\n80 3d 71 e0 20 00 00\n74 0d\nbf 0a 00 00 00\ne8 dd e5 ff ff\n41 ff ce\ne8 05 13 00 00\n85 c0\n75 0e\n8a 05 b7 df 20 00\n84 c0\n0f 85 69 01 00 00\n41 f6 c7 01\n74 19\n8a 05 73 df 20 00\n34 01\na8 01\n75 0d\nbf 0a 00 00 00\ne8 a7 e5 ff ff\n41 ff ce\n45 85 f6\n0f 8e 41 01 00 00\ne8 c6 12 00 00\n85 c0\n0f 84 7a 01 00 00\nc7 05 18 e0 20 00 00 00 00 00\nc7 05 0a e0 20 00 00 00 00 00\nc7 05 08 e0 20 00 00 00 00 00\nc6 05 f1 df 20 00 00\nc6 05 04 e0 20 00 00\nc6 05 fe df 20 00 01\n83 3d 3c de 20 00 00\n0f 8e 74 ff ff ff\n48 8b 1d 6f df 20 00\n31 ed\n0f 1f 44 00 00\nc7 05 d2 df 20 00 00 00 00 00\n83 7b 30 00\n7f 06\n83 7b 10 01\n75 76\nc6 05 c3 df 20 00 00\n8b 43 34\n89 05 a6 df 20 00\n48 89 df\nff 53 18\n84 c0\n75 08\n48 89 df\ne8 a8 12 00 00\n41 80 e7 01\n44 0a 3d 85 df 20 00\n8b 43 30\n8d 48 ff\n89 4b 30\n83 f8 01\n7f 0d\ne8 1a 12 00 00\n85 c0\n0f 84 f2 fe ff ff\n80 3d b5 de 20 00 01\n75 59\n8b 43 10\n85 c0\n74 52\n80 3d 6e df 20 00 01\n74 27\n83 f8 03\n74 34\n83 f8 02\n75 3f\n80 3d 58 df 20 00 01\n74 26\neb 34\n80 3d 87 de 20 00 01\n75 2b\n80 3d 47 df 20 00 01\n75 12\nc6 05 3d df 20 00 01\n80 3d 79 de 20 00 00\n75 1b\neb 1f\n48 89 df\ne8 68 0f 00 00\n0f 1f 84 00 00 00 00 00\n80 3d 5e de 20 00 00\n74 06\nff 05 09 df 20 00\n48 83 c3 40\nff c5\n3b 2d 4d dd 20 00\n0f 8c 1f ff ff ff\ne9 6a fe ff ff\n45 85 f6\n75 41\n83 3d 36 dd 20 00 00\n7e 35\n48 8b 05 6d de 20 00\n8b 0d 27 dd 20 00\n48 83 c0 39\n31 d2\n66 0f 1f 84 00 00 00 00 00\n83 78 d7 00\n75 03\nc6 00 01\n48 83 c0 40\nff c2\n39 ca\n7c ed\neb 07\n31 c0\neb 73\n45 31 f6\n41 80 e7 01\n44 88 3d 91 de 20 00\n74 0a\n8a 05 ed dd 20 00\n84 c0\n74 25\n80 3d e3 dd 20 00 01\n75 28\n80 3d 8e de 20 00 01\n75 1f\nbf 0c 00 00 00\ne8 e1 e3 ff ff\nc6 05 7b de 20 00 00\neb 0c\n41 83 c6 05\n44 89 f7\ne8 ec 11 00 00\n48 8b 05 a5 dc 20 00\n48 8b 0d b6 dd 20 00\n48 ff c1\n48 89 0d ac dd 20 00\n48 39 c8\n73 04\n31 c0\neb 07\ne8 76 03 00 00\nb0 01\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p656
S'.text:0000000000403380\n.text:0000000000403381\n.text:0000000000403383\n.text:0000000000403385\n.text:0000000000403386\n.text:0000000000403387\n.text:000000000040338c\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403399\n.text:000000000040339f\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033aa\n.text:00000000004033b1\n.text:00000000004033b8\n.text:00000000004033be\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033d0\n.text:00000000004033d7\n.text:00000000004033d9\n.text:00000000004033de\n.text:00000000004033e3\n.text:00000000004033e6\n.text:00000000004033eb\n.text:00000000004033ed\n.text:00000000004033ef\n.text:00000000004033f5\n.text:00000000004033f7\n.text:00000000004033fd\n.text:0000000000403401\n.text:0000000000403403\n.text:0000000000403409\n.text:000000000040340b\n.text:000000000040340d\n.text:000000000040340f\n.text:0000000000403414\n.text:0000000000403419\n.text:000000000040341c\n.text:000000000040341f\n.text:0000000000403425\n.text:000000000040342a\n.text:000000000040342c\n.text:0000000000403432\n.text:000000000040343c\n.text:0000000000403446\n.text:0000000000403450\n.text:0000000000403457\n.text:000000000040345e\n.text:0000000000403465\n.text:000000000040346c\n.text:0000000000403472\n.text:0000000000403479\n.text:000000000040347b\n.text:0000000000403480\n.text:000000000040348a\n.text:000000000040348e\n.text:0000000000403490\n.text:0000000000403494\n.text:0000000000403496\n.text:000000000040349d\n.text:00000000004034a0\n.text:00000000004034a6\n.text:00000000004034a9\n.text:00000000004034ac\n.text:00000000004034ae\n.text:00000000004034b0\n.text:00000000004034b3\n.text:00000000004034b8\n.text:00000000004034bc\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034c9\n.text:00000000004034cc\n.text:00000000004034cf\n.text:00000000004034d1\n.text:00000000004034d6\n.text:00000000004034d8\n.text:00000000004034de\n.text:00000000004034e5\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034ec\n.text:00000000004034ee\n.text:00000000004034f5\n.text:00000000004034f7\n.text:00000000004034fa\n.text:00000000004034fc\n.text:00000000004034ff\n.text:0000000000403501\n.text:0000000000403508\n.text:000000000040350a\n.text:000000000040350c\n.text:0000000000403513\n.text:0000000000403515\n.text:000000000040351c\n.text:000000000040351e\n.text:0000000000403525\n.text:000000000040352c\n.text:000000000040352e\n.text:0000000000403530\n.text:0000000000403533\n.text:0000000000403538\n.text:0000000000403540\n.text:0000000000403547\n.text:0000000000403549\n.text:000000000040354f\n.text:0000000000403553\n.text:0000000000403555\n.text:000000000040355b\n.text:0000000000403561\n.text:0000000000403566\n.text:0000000000403569\n.text:000000000040356b\n.text:0000000000403572\n.text:0000000000403574\n.text:000000000040357b\n.text:0000000000403581\n.text:0000000000403585\n.text:0000000000403587\n.text:0000000000403590\n.text:0000000000403594\n.text:0000000000403596\n.text:0000000000403599\n.text:000000000040359d\n.text:000000000040359f\n.text:00000000004035a1\n.text:00000000004035a3\n.text:00000000004035a5\n.text:00000000004035a7\n.text:00000000004035a9\n.text:00000000004035ac\n.text:00000000004035b0\n.text:00000000004035b7\n.text:00000000004035b9\n.text:00000000004035bf\n.text:00000000004035c1\n.text:00000000004035c3\n.text:00000000004035ca\n.text:00000000004035cc\n.text:00000000004035d3\n.text:00000000004035d5\n.text:00000000004035da\n.text:00000000004035df\n.text:00000000004035e6\n.text:00000000004035e8\n.text:00000000004035ec\n.text:00000000004035ef\n.text:00000000004035f4\n.text:00000000004035fb\n.text:0000000000403602\n.text:0000000000403605\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403611\n.text:0000000000403613\n.text:0000000000403615\n.text:000000000040361a\n.text:000000000040361c\n.text:0000000000403620\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403626\n'
p657
tp658
sS'close_stdout'
p659
(S'\n__stdcall close_stdout()\n'
p660
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00404a47;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40c88c,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00404a47:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00611328]\nCALL 0x00409b70\nTEST EAX,EAX\nJZ 0x00404a47\nCMP byte ptr [0x00611470],0x0\nJZ 0x00404a5c\nCALL 0x00401780\nCMP dword ptr [RAX],0x20\nJNZ 0x00404a5c\nMOV RDI,qword ptr [0x00611360]\nCALL 0x00409b70\nTEST EAX,EAX\nJNZ 0x00404aa1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40c87c\nMOV EDX,0x5\nCALL 0x00401860\nMOV R14,RAX\nMOV RBX,qword ptr [0x00611468]\nCALL 0x00401780\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00404aac\nXOR EDI,EDI\nMOV EDX,0x40c88c\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401ac0\nMOV EDI,dword ptr [0x006112b8]\nCALL 0x004017b0\nMOV EDI,dword ptr [0x006112b8]\nCALL 0x004017b0\nMOV RDI,RBX\nCALL 0x00406210\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40c888\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401ac0\nMOV EDI,dword ptr [0x006112b8]\nCALL 0x004017b0\n'
p662
S'55\n41 56\n53\n48 8b 3d fd c8 20 00\ne8 40 51 00 00\n85 c0\n74 13\n80 3d 35 ca 20 00 00\n74 1f\ne8 3e cd ff ff\n83 38 20\n75 15\n48 8b 3d 12 c9 20 00\ne8 1d 51 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 7c c8 40 00\nba 05 00 00 00\ne8 f3 cd ff ff\n49 89 c6\n48 8b 1d f1 c9 20 00\ne8 04 cd ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 8c c8 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 2a d0 ff ff\n8b 3d 1c c8 20 00\ne8 0f cd ff ff\n8b 3d 11 c8 20 00\ne8 04 cd ff ff\n48 89 df\ne8 5c 17 00 00\n48 89 c1\n31 ff\nba 88 c8 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 f6 cf ff ff\n8b 3d e8 c7 20 00\ne8 db cc ff ff\n'
p663
S'.text:0000000000404a20\n.text:0000000000404a21\n.text:0000000000404a23\n.text:0000000000404a24\n.text:0000000000404a2b\n.text:0000000000404a30\n.text:0000000000404a32\n.text:0000000000404a34\n.text:0000000000404a3b\n.text:0000000000404a3d\n.text:0000000000404a42\n.text:0000000000404a45\n.text:0000000000404a47\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a57\n.text:0000000000404a58\n.text:0000000000404a5a\n.text:0000000000404a5b\n.text:0000000000404a5c\n.text:0000000000404a5e\n.text:0000000000404a63\n.text:0000000000404a68\n.text:0000000000404a6d\n.text:0000000000404a70\n.text:0000000000404a77\n.text:0000000000404a7c\n.text:0000000000404a7f\n.text:0000000000404a81\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a8a\n.text:0000000000404a8c\n.text:0000000000404a8e\n.text:0000000000404a91\n.text:0000000000404a96\n.text:0000000000404a9c\n.text:0000000000404aa1\n.text:0000000000404aa7\n.text:0000000000404aac\n.text:0000000000404aaf\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404abe\n.text:0000000000404ac0\n.text:0000000000404ac2\n.text:0000000000404ac5\n.text:0000000000404aca\n.text:0000000000404ad0\n'
p664
tp665
sS'version_etc_ar'
p666
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p667
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p668
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00408440\nJMP 0x004080d0\n'
p669
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p670
S'.text:0000000000408430\n.text:0000000000408437\n.text:0000000000408440\n.text:0000000000408446\n.text:000000000040844a\n.text:000000000040844c\n'
p671
tp672
sS'strtoumax'
p673
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_00611208)();\u000a  return uVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x00611208]\n'
p676
S'ff 25 02 f7 20 00\n'
p677
S'.plt:0000000000401b00\n'
p678
tp679
sS'__ctype_tolower_loc'
p680
(S'\n__stdcall __ctype_tolower_loc()\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_tolower_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_00611248)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x00611248]\n'
p683
S'ff 25 c2 f6 20 00\n'
p684
S'.plt:0000000000401b80\n'
p685
tp686
sS'separator_string'
p687
(S'\n__stdcall separator_string(char * optarg_S)\n'
p688
V\u000avoid separator_string(char *optarg_S)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strlen(optarg_S);\u000a  col_sep_length = (int)sVar1;\u000a  col_sep_string = (char *)xmalloc((long)((sVar1 << 0x20) + 0x100000000) >> 0x20);\u000a  strcpy(col_sep_string,optarg_S);\u000a  return;\u000a}\u000a\u000a
p689
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401880\nMOV dword ptr [0x006113a8],EAX\nSHL RAX,0x20\nMOV RDI,0x100000000\nADD RDI,RAX\nSAR RDI,0x20\nCALL 0x004085f0\nMOV qword ptr [0x00611290],RAX\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x004017c0\nPOP RBX\nRET\n'
p690
S'53\n48 89 fb\ne8 67 f1 ff ff\n89 05 89 ec 20 00\n48 c1 e0 20\n48 bf 00 00 00 00 01 00 00 00\n48 01 c7\n48 c1 ff 20\ne8 b7 5e 00 00\n48 89 05 50 eb 20 00\n48 89 c7\n48 89 de\ne8 75 f0 ff ff\n5b\nc3\n'
p691
S'.text:0000000000402710\n.text:0000000000402711\n.text:0000000000402714\n.text:0000000000402719\n.text:000000000040271f\n.text:0000000000402723\n.text:000000000040272d\n.text:0000000000402730\n.text:0000000000402734\n.text:0000000000402739\n.text:0000000000402740\n.text:0000000000402743\n.text:0000000000402746\n.text:000000000040274b\n.text:000000000040274c\n'
p692
tp693
sS'c_isxdigit'
p694
(S'\n__stdcall c_isxdigit()\n'
p695
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p696
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00409b4b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p697
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p698
S'.text:0000000000409b30\n.text:0000000000409b33\n.text:0000000000409b36\n.text:0000000000409b38\n.text:0000000000409b42\n.text:0000000000409b44\n.text:0000000000409b47\n.text:0000000000409b4a\n.text:0000000000409b4b\n.text:0000000000409b4d\n'
p699
tp700
sS'__libc_csu_fini'
p701
(S'\n__stdcall __libc_csu_fini()\n'
p702
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p703
S'RET\n'
p704
S'f3 c3\n'
p705
S'.text:000000000040a6d0\n'
p706
tp707
sS'memcpy_uppcase'
p708
(S'\n__stdcall memcpy_uppcase(size_t len)\n'
p709
V\u000achar * memcpy_uppcase(size_t len)\u000a\u000a{\u000a  __int32_t **in_RAX;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  \u000a  if (in_RDX != 0) {\u000a    in_RAX = __ctype_toupper_loc();\u000a    do {\u000a      *(undefined *)((len - 1) + in_RDX) =\u000a           *(undefined *)(*in_RAX + (ulong)*(byte *)(in_RSI + -1 + in_RDX));\u000a      in_RDX = in_RDX + -1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return (char *)in_RAX;\u000a}\u000a\u000a
p710
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x00408077\nCALL 0x00401720\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RAX]\nMOVZX EDX,byte ptr [R14 + RBX*0x1 + -0x1]\nMOVZX ECX,byte ptr [RCX + RDX*0x4]\nMOV byte ptr [R15 + RBX*0x1 + -0x1],CL\nDEC RBX\nJNZ 0x00408060\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p711
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 24\ne8 c8 96 ff ff\n0f 1f 84 00 00 00 00 00\n48 8b 08\n41 0f b6 54 1e ff\n0f b6 0c 91\n41 88 4c 1f ff\n48 ff cb\n75 e9\n5b\n41 5e\n41 5f\nc3\n'
p712
S'.text:0000000000408040\n.text:0000000000408042\n.text:0000000000408044\n.text:0000000000408045\n.text:0000000000408048\n.text:000000000040804b\n.text:000000000040804e\n.text:0000000000408051\n.text:0000000000408053\n.text:0000000000408058\n.text:0000000000408060\n.text:0000000000408063\n.text:0000000000408069\n.text:000000000040806d\n.text:0000000000408072\n.text:0000000000408075\n.text:0000000000408077\n.text:0000000000408078\n.text:000000000040807a\n.text:000000000040807c\n'
p713
tp714
sS'abort'
p715
(S'\n__stdcall abort()\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00611040)();\u000a  return;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00611040]\n'
p718
S'ff 25 ca f8 20 00\n'
p719
S'.plt:0000000000401770\n'
p720
tp721
sS'xstrtoimax'
p722
(S'\n__stdcall xstrtoimax(char * s, char * * ptr, intmax_t * val, char * valid_suffixes)\n'
p723
V\u000astrtol_error xstrtoimax(char *s,char **ptr,intmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  char **__endptr;\u000a  strtol_error sVar7;\u000a  strtol_error sVar8;\u000a  intmax_t local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)");\u000a  }\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  local_40 = strtoimax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar1 = **__endptr;\u000a    if (cVar1 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar4 = strchr(__s,(int)cVar1);\u000a    if (pcVar4 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_40 = 1;\u000a    sVar7 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar3 == 0) {\u000a      sVar7 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar3 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar7 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar8 = sVar7;\u000a    if (__s == (char *)0x0) goto LAB_00408ad4;\u000a  }\u000a  pcVar4 = *__endptr;\u000a  sVar8 = sVar7;\u000a  if (*pcVar4 == 0) goto LAB_00408ad4;\u000a  pcVar5 = strchr(__s,(int)*pcVar4);\u000a  if (pcVar5 == (char *)0x0) goto switchD_004089e9_caseD_43;\u000a  pcVar5 = strchr(__s,0x30);\u000a  if (pcVar5 == (char *)0x0) {\u000aLAB_004089c7:\u000a    lVar6 = 1;\u000a  }\u000a  else {\u000a    cVar1 = pcVar4[1];\u000a    if ((cVar1 == 'B') || (cVar1 == 'D')) {\u000a      lVar6 = 2;\u000a    }\u000a    else {\u000a      if (cVar1 != 'i') goto LAB_004089c7;\u000a      lVar6 = (ulong)(pcVar4[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00408ab1;\u000a  default:\u000aswitchD_004089e9_caseD_43:\u000a    *(intmax_t *)valid_suffixes = local_40;\u000a    return sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'P':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Y':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Z':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00408ab1;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00408ab1:\u000a    sVar2 = bkm_scale(&local_40);\u000a  }\u000a  pcVar4 = *__endptr;\u000a  *__endptr = pcVar4 + lVar6;\u000a  sVar8 = sVar2 | sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar4[lVar6] == 0) {\u000a    sVar8 = sVar2 | sVar7;\u000a  }\u000aLAB_00408ad4:\u000a  *(intmax_t *)valid_suffixes = local_40;\u000a  return sVar8;\u000a}\u000a\u000a
p724
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RDI\nCMP EBP,0x25\nJNC 0x00408aee\nTEST RSI,RSI\nLEA R12,[RSP + 0x10]\nCMOVNZ R12,RSI\nCALL 0x00401780\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,EBP\nCALL 0x00401750\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [R12]\nCMP RAX,R15\nJZ 0x0040892c\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x00408965\nMOV R15D,0x4\nCMP EAX,0x22\nJNZ 0x00408adc\nMOV R15D,0x1\nTEST R13,R13\nJNZ 0x00408971\nJMP 0x00408ad4\nMOV R15D,0x4\nTEST R13,R13\nJZ 0x00408adc\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00408adc\nMOV RDI,R13\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00408adc\nMOV qword ptr [RSP + 0x8],0x1\nXOR R15D,R15D\nJMP 0x00408971\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x00408ad4\nMOV RBX,qword ptr [R12]\nMOVSX ESI,byte ptr [RBX]\nTEST ESI,ESI\nJZ 0x00408ad4\nMOV RDI,R13\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00408a04\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x004018b0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004089c7\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x42\nJZ 0x004089ce\nCMP EAX,0x44\nJZ 0x004089ce\nCMP EAX,0x69\nJNZ 0x004089c7\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x2],0x42\nSETZ AL\nLEA RBX,[RAX + RAX*0x1 + 0x1]\nJMP 0x004089d8\nMOV EBX,0x1\nJMP 0x004089d8\nMOV ESI,0x3e8\nMOV EBX,0x2\nMOV RAX,qword ptr [R12]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00408a04\nXOR EAX,EAX\nJMP qword ptr [0x40d8b0 + RCX*0x8]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x3\nCALL 0x00408b60\nJMP 0x00408ab6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nOR R15D,0x2\nJMP 0x00408adc\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x1\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x2\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x400\nJMP 0x00408ab1\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x6\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x5\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x7\nCALL 0x00408b60\nJMP 0x00408ab6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x200\nJMP 0x00408ab1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x2\nCALL 0x00408b10\nOR EAX,R15D\nMOV RCX,qword ptr [R12]\nLEA RDX,[RCX + RBX*0x1]\nMOV qword ptr [R12],RDX\nMOV R15D,EAX\nOR R15D,0x2\nCMP byte ptr [RCX + RBX*0x1],0x0\nCMOVZ R15D,EAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40da60\nMOV ESI,0x40da86\nMOV EDX,0x60\nMOV ECX,0x40da96\nCALL 0x00401900\n'
p725
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n49 89 ce\n89 d5\n49 89 ff\n83 fd 25\n0f 83 1c 02 00 00\n48 85 f6\n4c 8d 64 24 10\n4c 0f 45 e6\ne8 9d 8e ff ff\n48 89 c3\nc7 03 00 00 00 00\n4c 89 ff\n4c 89 e6\n89 ea\ne8 57 8e ff ff\n48 89 44 24 08\n49 8b 04 24\n4c 39 f8\n74 25\n8b 03\n85 c0\n74 58\n41 bf 04 00 00 00\n83 f8 22\n0f 85 c0 01 00 00\n41 bf 01 00 00 00\n4d 85 ed\n75 4a\ne9 a8 01 00 00\n41 bf 04 00 00 00\n4d 85 ed\n0f 84 a1 01 00 00\n0f be 30\n85 f6\n0f 84 96 01 00 00\n4c 89 ef\ne8 62 8f ff ff\n48 85 c0\n0f 84 85 01 00 00\n48 c7 44 24 08 01 00 00 00\n45 31 ff\neb 0c\n45 31 ff\n4d 85 ed\n0f 84 63 01 00 00\n49 8b 1c 24\n0f be 33\n85 f6\n0f 84 54 01 00 00\n4c 89 ef\ne8 28 8f ff ff\n48 85 c0\n74 77\nbe 30 00 00 00\n4c 89 ef\ne8 16 8f ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 43 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7b 02 42\n0f 94 c0\n48 8d 5c 00 01\neb 11\nbb 01 00 00 00\neb 0a\nbe e8 03 00 00\nbb 02 00 00 00\n49 8b 04 24\n0f be 08\n83 c1 be\n83 f9 35\n77 1d\n31 c0\nff 24 cd b0 d8 40 00\n48 8d 7c 24 08\nba 03 00 00 00\ne8 61 01 00 00\ne9 b2 00 00 00\n48 8b 44 24 08\n49 89 06\n41 83 cf 02\ne9 c7 00 00 00\n48 8d 7c 24 08\nba 01 00 00 00\ne8 3c 01 00 00\ne9 8d 00 00 00\n48 8d 7c 24 08\nba 02 00 00 00\ne8 28 01 00 00\neb 7c\n48 8d 7c 24 08\nba 04 00 00 00\ne8 17 01 00 00\neb 6b\n48 8d 7c 24 08\nbe 00 04 00 00\neb 5a\n48 8d 7c 24 08\nba 06 00 00 00\ne8 fa 00 00 00\neb 4e\n48 8d 7c 24 08\nba 05 00 00 00\ne8 e9 00 00 00\neb 3d\n48 8d 7c 24 08\nba 08 00 00 00\ne8 d8 00 00 00\neb 2c\n48 8d 7c 24 08\nba 07 00 00 00\ne8 c7 00 00 00\neb 1b\n48 8d 7c 24 08\nbe 00 02 00 00\neb 0a\n48 8d 7c 24 08\nbe 02 00 00 00\ne8 5a 00 00 00\n44 09 f8\n49 8b 0c 24\n48 8d 14 19\n49 89 14 24\n41 89 c7\n41 83 cf 02\n80 3c 19 00\n44 0f 44 f8\n48 8b 44 24 08\n49 89 06\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 da 40 00\nbe 86 da 40 00\nba 60 00 00 00\nb9 96 da 40 00\ne8 f9 8d ff ff\n'
p726
S'.text:00000000004088b0\n.text:00000000004088b1\n.text:00000000004088b3\n.text:00000000004088b5\n.text:00000000004088b7\n.text:00000000004088b9\n.text:00000000004088ba\n.text:00000000004088be\n.text:00000000004088c1\n.text:00000000004088c4\n.text:00000000004088c6\n.text:00000000004088c9\n.text:00000000004088cc\n.text:00000000004088d2\n.text:00000000004088d5\n.text:00000000004088da\n.text:00000000004088de\n.text:00000000004088e3\n.text:00000000004088e6\n.text:00000000004088ec\n.text:00000000004088ef\n.text:00000000004088f2\n.text:00000000004088f4\n.text:00000000004088f9\n.text:00000000004088fe\n.text:0000000000408902\n.text:0000000000408905\n.text:0000000000408907\n.text:0000000000408909\n.text:000000000040890b\n.text:000000000040890d\n.text:0000000000408913\n.text:0000000000408916\n.text:000000000040891c\n.text:0000000000408922\n.text:0000000000408925\n.text:0000000000408927\n.text:000000000040892c\n.text:0000000000408932\n.text:0000000000408935\n.text:000000000040893b\n.text:000000000040893e\n.text:0000000000408940\n.text:0000000000408946\n.text:0000000000408949\n.text:000000000040894e\n.text:0000000000408951\n.text:0000000000408957\n.text:0000000000408960\n.text:0000000000408963\n.text:0000000000408965\n.text:0000000000408968\n.text:000000000040896b\n.text:0000000000408971\n.text:0000000000408975\n.text:0000000000408978\n.text:000000000040897a\n.text:0000000000408980\n.text:0000000000408983\n.text:0000000000408988\n.text:000000000040898b\n.text:000000000040898d\n.text:0000000000408992\n.text:0000000000408995\n.text:000000000040899a\n.text:000000000040899f\n.text:00000000004089a2\n.text:00000000004089a4\n.text:00000000004089a8\n.text:00000000004089ab\n.text:00000000004089ad\n.text:00000000004089b0\n.text:00000000004089b2\n.text:00000000004089b5\n.text:00000000004089b7\n.text:00000000004089b9\n.text:00000000004089bd\n.text:00000000004089c0\n.text:00000000004089c5\n.text:00000000004089c7\n.text:00000000004089cc\n.text:00000000004089ce\n.text:00000000004089d3\n.text:00000000004089d8\n.text:00000000004089dc\n.text:00000000004089df\n.text:00000000004089e2\n.text:00000000004089e5\n.text:00000000004089e7\n.text:00000000004089e9\n.text:00000000004089f0\n.text:00000000004089f5\n.text:00000000004089fa\n.text:00000000004089ff\n.text:0000000000408a04\n.text:0000000000408a09\n.text:0000000000408a0c\n.text:0000000000408a10\n.text:0000000000408a15\n.text:0000000000408a1a\n.text:0000000000408a1f\n.text:0000000000408a24\n.text:0000000000408a29\n.text:0000000000408a2e\n.text:0000000000408a33\n.text:0000000000408a38\n.text:0000000000408a3a\n.text:0000000000408a3f\n.text:0000000000408a44\n.text:0000000000408a49\n.text:0000000000408a4b\n.text:0000000000408a50\n.text:0000000000408a55\n.text:0000000000408a57\n.text:0000000000408a5c\n.text:0000000000408a61\n.text:0000000000408a66\n.text:0000000000408a68\n.text:0000000000408a6d\n.text:0000000000408a72\n.text:0000000000408a77\n.text:0000000000408a79\n.text:0000000000408a7e\n.text:0000000000408a83\n.text:0000000000408a88\n.text:0000000000408a8a\n.text:0000000000408a8f\n.text:0000000000408a94\n.text:0000000000408a99\n.text:0000000000408a9b\n.text:0000000000408aa0\n.text:0000000000408aa5\n.text:0000000000408aa7\n.text:0000000000408aac\n.text:0000000000408ab1\n.text:0000000000408ab6\n.text:0000000000408ab9\n.text:0000000000408abd\n.text:0000000000408ac1\n.text:0000000000408ac5\n.text:0000000000408ac8\n.text:0000000000408acc\n.text:0000000000408ad0\n.text:0000000000408ad4\n.text:0000000000408ad9\n.text:0000000000408adc\n.text:0000000000408adf\n.text:0000000000408ae3\n.text:0000000000408ae4\n.text:0000000000408ae6\n.text:0000000000408ae8\n.text:0000000000408aea\n.text:0000000000408aec\n.text:0000000000408aed\n.text:0000000000408aee\n.text:0000000000408af3\n.text:0000000000408af8\n.text:0000000000408afd\n.text:0000000000408b02\n'
p727
tp728
sS'gettime'
p729
(S'\n__stdcall gettime(timespec * ts)\n'
p730
V\u000avoid gettime(timespec *ts)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = clock_gettime(0,(timespec *)ts);\u000a  if (iVar1 != 0) {\u000a    gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a    ts->tv_sec = local_18.tv_sec;\u000a    ts->tv_nsec = local_18.tv_usec * 1000;\u000a  }\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00401810\nTEST EAX,EAX\nJZ 0x00404bd4\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x004018f0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nIMUL RAX,qword ptr [RSP + 0x8],0x3e8\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p732
S'53\n48 83 ec 10\n48 89 fb\n31 ff\n48 89 de\ne8 5e cc ff ff\n85 c0\n74 1e\n48 89 e7\n31 f6\ne8 30 cd ff ff\n48 8b 04 24\n48 89 03\n48 69 44 24 08 e8 03 00 00\n48 89 43 08\n48 83 c4 10\n5b\nc3\n'
p733
S'.text:0000000000404ba0\n.text:0000000000404ba1\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404baa\n.text:0000000000404bad\n.text:0000000000404bb2\n.text:0000000000404bb4\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbb\n.text:0000000000404bc0\n.text:0000000000404bc4\n.text:0000000000404bc7\n.text:0000000000404bd0\n.text:0000000000404bd4\n.text:0000000000404bd8\n.text:0000000000404bd9\n'
p734
tp735
sS'version_etc'
p736
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p737
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p738
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00408502\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00408460\nADD RSP,0xd8\nRET\n'
p739
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p740
S'.text:00000000004084c0\n.text:00000000004084c7\n.text:00000000004084c9\n.text:00000000004084cb\n.text:00000000004084d0\n.text:00000000004084d5\n.text:00000000004084da\n.text:00000000004084e2\n.text:00000000004084ea\n.text:00000000004084f2\n.text:00000000004084fa\n.text:0000000000408502\n.text:0000000000408507\n.text:000000000040850c\n.text:0000000000408511\n.text:0000000000408516\n.text:000000000040851e\n.text:0000000000408523\n.text:000000000040852b\n.text:0000000000408532\n.text:0000000000408535\n.text:000000000040853a\n.text:0000000000408541\n'
p741
tp742
sS'posix_fadvise'
p743
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_00611128)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00611128]\n'
p746
S'ff 25 e2 f7 20 00\n'
p747
S'.plt:0000000000401940\n'
p748
tp749
sS'lseek'
p750
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006110f8)();\u000a  return _Var1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x006110f8]\n'
p753
S'ff 25 12 f8 20 00\n'
p754
S'.plt:00000000004018e0\n'
p755
tp756
sS'init_parameters'
p757
(S'\n__stdcall init_parameters()\n'
p758
V\u000aundefined1 * init_parameters(int iParm1)\u000a\u000a{\u000a  undefined1 *puVar1;\u000a  undefined8 uVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  size_t n;\u000a  \u000a  lines_per_body = lines_per_page + -10;\u000a  if (lines_per_body == 0 || SCARRY4(lines_per_page,-10) != lines_per_body < 0) {\u000a    extremities = 1;\u000a    keep_FF = 1;\u000a  }\u000a  else {\u000a    if (extremities != 1) goto LAB_00402c82;\u000a  }\u000a  lines_per_body = lines_per_page;\u000aLAB_00402c82:\u000a  if (double_space == 1) {\u000a    lines_per_body = (int)(((uint)lines_per_body >> 0x1f) + lines_per_body) >> 1;\u000a  }\u000a  if (iParm1 == 0) {\u000a    parallel_files = 0;\u000a  }\u000a  else {\u000a    if (parallel_files == 1) {\u000a      columns = iParm1;\u000a    }\u000a  }\u000a  if (storing_columns == 0) {\u000a    balance_columns = 1;\u000a  }\u000a  if (columns < 2) {\u000a    puVar1 = &storing_columns;\u000a  }\u000a  else {\u000a    if (use_col_separator == false) {\u000a      col_sep_string = " ";\u000a      if (join_lines != false) {\u000a        col_sep_string = "\u005ct";\u000a      }\u000a      col_sep_length = 1;\u000a      use_col_separator = true;\u000a    }\u000a    else {\u000a      if ((join_lines == false) && (*col_sep_string == '\u005ct')) {\u000a        col_sep_string = " ";\u000a      }\u000a    }\u000a    truncate_lines = 1;\u000a    puVar1 = &tabify_output;\u000a  }\u000a  *puVar1 = 1;\u000a  if (join_lines != false) {\u000a    truncate_lines = 0;\u000a  }\u000a  iVar3 = 0;\u000a  if (numbered_lines == 1) {\u000a    line_count = start_line_num;\u000a    number_width = 1;\u000a    if (number_separator == '\u005ct') {\u000a      number_width = 8 - chars_per_number % 8;\u000a    }\u000a    number_width = number_width + chars_per_number;\u000a    puVar1 = (undefined1 *)(ulong)(chars_per_number & 0xffffff00U | (uint)parallel_files);\u000a    iVar3 = 0;\u000a    if (parallel_files != 0) {\u000a      iVar3 = number_width;\u000a    }\u000a  }\u000a  chars_per_column = ((chars_per_line - iVar3) - (columns + -1) * col_sep_length) / columns;\u000a  if (chars_per_column < 1) {\u000a    uVar2 = dcgettext(0,"page width too narrow",5);\u000a    error(1,0,uVar2,uVar2);\u000a  }\u000a  if (numbered_lines == 1) {\u000a    free(number_buff);\u000a    uVar4 = 0xb;\u000a    if (0xb < (ulong)(long)chars_per_number) {\u000a      uVar4 = (long)chars_per_number;\u000a    }\u000a    number_buff = (char *)xmalloc(uVar4 + 1);\u000a  }\u000a  free(clump_buff);\u000a  n = 8;\u000a  if (7 < chars_per_input_tab) {\u000a    n = (size_t)(uint)chars_per_input_tab;\u000a  }\u000a  clump_buff = (char *)xmalloc(n);\u000a  return puVar1;\u000a}\u000a\u000a
p759
S'MOV EAX,dword ptr [0x00611280]\nMOV ECX,EAX\nADD ECX,-0xa\nMOV dword ptr [0x006113c4],ECX\nJLE 0x00402c6e\nCMP byte ptr [0x006113ac],0x1\nJZ 0x00402c7c\nJMP 0x00402c82\nMOV byte ptr [0x006113ac],0x1\nMOV byte ptr [0x006113ad],0x1\nMOV dword ptr [0x006113c4],EAX\nCMP byte ptr [0x0061137c],0x1\nJNZ 0x00402ca0\nMOV EAX,dword ptr [0x006113c4]\nMOV ECX,EAX\nSHR ECX,0x1f\nADD ECX,EAX\nSAR ECX,1\nMOV dword ptr [0x006113c4],ECX\nTEST EDI,EDI\nJZ 0x00402cb5\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00402cbc\nMOV dword ptr [0x006112a8],EDI\nJMP 0x00402cbc\nMOV byte ptr [0x0061139a],0x0\nMOV AL,byte ptr [0x00611379]\nTEST AL,AL\nJNZ 0x00402ccd\nMOV byte ptr [0x0061137a],0x1\nCMP dword ptr [0x006112a8],0x2\nJL 0x00402d02\nMOV AL,byte ptr [0x00611399]\nCMP byte ptr [0x006113a5],0x0\nJZ 0x00402d09\nTEST AL,AL\nJNZ 0x00402d31\nMOV RAX,qword ptr [0x00611290]\nCMP byte ptr [RAX],0x9\nJNZ 0x00402d31\nMOV qword ptr [0x00611290],0x40c61e\nJMP 0x00402d31\nMOV EAX,0x611379\nJMP 0x00402d3d\nTEST AL,AL\nMOV EAX,0x40c61c\nMOV ECX,0x40c61e\nCMOVNZ RCX,RAX\nMOV qword ptr [0x00611290],RCX\nMOV dword ptr [0x006113a8],0x1\nMOV byte ptr [0x006113a5],0x1\nMOV byte ptr [0x006113af],0x1\nMOV EAX,0x611398\nMOV byte ptr [RAX],0x1\nCMP byte ptr [0x00611399],0x0\nJZ 0x00402d50\nMOV byte ptr [0x006113af],0x0\nXOR EDX,EDX\nCMP byte ptr [0x0061139b],0x1\nJNZ 0x00402da8\nMOV EAX,dword ptr [0x0061128c]\nMOV dword ptr [0x006112ac],EAX\nMOV ECX,0x1\nMOV EAX,dword ptr [0x00611288]\nCMP byte ptr [0x00611284],0x9\nJNZ 0x00402d93\nMOV ECX,EAX\nSAR ECX,0x1f\nSHR ECX,0x1d\nADD ECX,EAX\nAND ECX,0xfffffff8\nMOV EDX,EAX\nSUB EDX,ECX\nMOV ECX,0x8\nSUB ECX,EDX\nADD ECX,EAX\nMOV dword ptr [0x006113c8],ECX\nMOV AL,byte ptr [0x0061139a]\nXOR EDX,EDX\nTEST AL,AL\nCMOVNZ EDX,ECX\nPUSH RAX\nMOV EAX,dword ptr [0x00611298]\nSUB EAX,EDX\nMOV ECX,dword ptr [0x006112a8]\nLEA EDX,[RCX + -0x1]\nIMUL EDX,dword ptr [0x006113a8]\nSUB EAX,EDX\nCDQ\nIDIV ECX\nMOV dword ptr [0x006113cc],EAX\nTEST EAX,EAX\nJG 0x00402df5\nXOR EDI,EDI\nMOV ESI,0x40c606\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ac0\nCMP byte ptr [0x0061139b],0x1\nJNZ 0x00402e2d\nMOV RDI,qword ptr [0x006113d0]\nCALL 0x00401740\nMOVSXD RAX,dword ptr [0x00611288]\nCMP RAX,0xb\nMOV EDI,0xb\nCMOVA RDI,RAX\nINC RDI\nCALL 0x004085f0\nMOV qword ptr [0x006113d0],RAX\nMOV RDI,qword ptr [0x006113d8]\nCALL 0x00401740\nMOV EAX,dword ptr [0x00611274]\nCMP EAX,0x7\nMOV EDI,0x8\nCMOVG EDI,EAX\nCALL 0x004085f0\nMOV qword ptr [0x006113d8],RAX\nPOP RAX\nRET\n'
p760
S'8b 05 2a e6 20 00\n89 c1\n83 c1 f6\n89 0d 63 e7 20 00\n7e 0b\n80 3d 42 e7 20 00 01\n74 10\neb 14\nc6 05 37 e7 20 00 01\nc6 05 31 e7 20 00 01\n89 05 42 e7 20 00\n80 3d f3 e6 20 00 01\n75 15\n8b 05 33 e7 20 00\n89 c1\nc1 e9 1f\n01 c1\nd1 f9\n89 0d 24 e7 20 00\n85 ff\n74 11\n80 3d ef e6 20 00 01\n75 0f\n89 3d f5 e5 20 00\neb 07\nc6 05 de e6 20 00 00\n8a 05 b7 e6 20 00\n84 c0\n75 07\nc6 05 ad e6 20 00 01\n83 3d d4 e5 20 00 02\n7c 2c\n8a 05 bd e6 20 00\n80 3d c2 e6 20 00 00\n74 24\n84 c0\n75 48\n48 8b 05 a0 e5 20 00\n80 38 09\n75 3c\n48 c7 05 90 e5 20 00 1e c6 40 00\neb 2f\nb8 79 13 61 00\neb 34\n84 c0\nb8 1c c6 40 00\nb9 1e c6 40 00\n48 0f 45 c8\n48 89 0d 70 e5 20 00\nc7 05 7e e6 20 00 01 00 00 00\nc6 05 74 e6 20 00 01\nc6 05 77 e6 20 00 01\nb8 98 13 61 00\nc6 00 01\n80 3d 52 e6 20 00 00\n74 07\nc6 05 5f e6 20 00 00\n31 d2\n80 3d 42 e6 20 00 01\n75 4d\n8b 05 2b e5 20 00\n89 05 45 e5 20 00\nb9 01 00 00 00\n8b 05 16 e5 20 00\n80 3d 0b e5 20 00 09\n75 18\n89 c1\nc1 f9 1f\nc1 e9 1d\n01 c1\n83 e1 f8\n89 c2\n29 ca\nb9 08 00 00 00\n29 d1\n01 c1\n89 0d 2d e6 20 00\n8a 05 f9 e5 20 00\n31 d2\n84 c0\n0f 45 d1\n50\n8b 05 e9 e4 20 00\n29 d0\n8b 0d f1 e4 20 00\n8d 51 ff\n0f af 15 e7 e5 20 00\n29 d0\n99\nf7 f9\n89 05 00 e6 20 00\n85 c0\n7f 25\n31 ff\nbe 06 c6 40 00\nba 05 00 00 00\ne8 7f ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 cb ec ff ff\n80 3d 9f e5 20 00 01\n75 2f\n48 8b 3d cb e5 20 00\ne8 36 e9 ff ff\n48 63 05 77 e4 20 00\n48 83 f8 0b\nbf 0b 00 00 00\n48 0f 47 f8\n48 ff c7\ne8 ca 57 00 00\n48 89 05 a3 e5 20 00\n48 8b 3d a4 e5 20 00\ne8 07 e9 ff ff\n8b 05 35 e4 20 00\n83 f8 07\nbf 08 00 00 00\n0f 4f f8\ne8 a1 57 00 00\n48 89 05 82 e5 20 00\n58\nc3\n'
p761
S'.text:0000000000402c50\n.text:0000000000402c56\n.text:0000000000402c58\n.text:0000000000402c5b\n.text:0000000000402c61\n.text:0000000000402c63\n.text:0000000000402c6a\n.text:0000000000402c6c\n.text:0000000000402c6e\n.text:0000000000402c75\n.text:0000000000402c7c\n.text:0000000000402c82\n.text:0000000000402c89\n.text:0000000000402c8b\n.text:0000000000402c91\n.text:0000000000402c93\n.text:0000000000402c96\n.text:0000000000402c98\n.text:0000000000402c9a\n.text:0000000000402ca0\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402cab\n.text:0000000000402cad\n.text:0000000000402cb3\n.text:0000000000402cb5\n.text:0000000000402cbc\n.text:0000000000402cc2\n.text:0000000000402cc4\n.text:0000000000402cc6\n.text:0000000000402ccd\n.text:0000000000402cd4\n.text:0000000000402cd6\n.text:0000000000402cdc\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402ce9\n.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf5\n.text:0000000000402d00\n.text:0000000000402d02\n.text:0000000000402d07\n.text:0000000000402d09\n.text:0000000000402d0b\n.text:0000000000402d10\n.text:0000000000402d15\n.text:0000000000402d19\n.text:0000000000402d20\n.text:0000000000402d2a\n.text:0000000000402d31\n.text:0000000000402d38\n.text:0000000000402d3d\n.text:0000000000402d40\n.text:0000000000402d47\n.text:0000000000402d49\n.text:0000000000402d50\n.text:0000000000402d52\n.text:0000000000402d59\n.text:0000000000402d5b\n.text:0000000000402d61\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d72\n.text:0000000000402d79\n.text:0000000000402d7b\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d85\n.text:0000000000402d88\n.text:0000000000402d8a\n.text:0000000000402d8c\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d9b\n.text:0000000000402da1\n.text:0000000000402da3\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402da9\n.text:0000000000402daf\n.text:0000000000402db1\n.text:0000000000402db7\n.text:0000000000402dba\n.text:0000000000402dc1\n.text:0000000000402dc3\n.text:0000000000402dc4\n.text:0000000000402dc6\n.text:0000000000402dcc\n.text:0000000000402dce\n.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd7\n.text:0000000000402ddc\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402deb\n.text:0000000000402ded\n.text:0000000000402df0\n.text:0000000000402df5\n.text:0000000000402dfc\n.text:0000000000402dfe\n.text:0000000000402e05\n.text:0000000000402e0a\n.text:0000000000402e11\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1e\n.text:0000000000402e21\n.text:0000000000402e26\n.text:0000000000402e2d\n.text:0000000000402e34\n.text:0000000000402e39\n.text:0000000000402e3f\n.text:0000000000402e42\n.text:0000000000402e47\n.text:0000000000402e4a\n.text:0000000000402e4f\n.text:0000000000402e56\n.text:0000000000402e57\n'
p762
tp763
sS'xstrtol_fatal'
p764
(S'\n__stdcall xstrtol_fatal(option * long_options, char * arg)\n'
p765
V\u000avoid xstrtol_fatal(option *long_options,char *arg)\u000a\u000a{\u000a  xstrtol_error(long_options,arg);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p766
S'PUSH RAX\nMOV R9D,dword ptr [0x006112b8]\nCALL 0x00408eb0\nCALL 0x00401770\n'
p767
S'50\n44 8b 0d 20 84 20 00\ne8 13 00 00 00\ne8 ce 88 ff ff\n'
p768
S'.text:0000000000408e90\n.text:0000000000408e91\n.text:0000000000408e98\n.text:0000000000408e9d\n'
p769
tp770
sS'wcwidth'
p771
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_00611180)();\u000a  return iVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x00611180]\n'
p774
S'ff 25 8a f7 20 00\n'
p775
S'.plt:00000000004019f0\n'
p776
tp777
sS'quotearg_n_mem'
p778
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p779
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p780
S'MOV ECX,0x611480\nJMP 0x00405e80\n'
p781
S'b9 80 14 61 00\ne9 36 fe ff ff\n'
p782
S'.text:0000000000406040\n.text:0000000000406045\n'
p783
tp784
sS'__printf_chk'
p785
(S'\n__stdcall __printf_chk()\n'
p786
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006111d0)();\u000a  return;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x006111d0]\n'
p788
S'ff 25 3a f7 20 00\n'
p789
S'.plt:0000000000401a90\n'
p790
tp791
sS'emit_ancillary_info'
p792
(S'\n__stdcall emit_ancillary_info()\n'
p793
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined1 *puVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x0040b320;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("pr",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "pr";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_0040b4bc,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_0040b4bc);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  puVar3 = &DAT_0040c61d;\u000a  if (__s2 == "pr") {\u000a    puVar3 = (undefined1 *)0x40c75b;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,puVar3);\u000a  return;\u000a}\u000a\u000a
p794
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x40b320\nMOV ESI,0x40c73f\nNOP\nMOV EDI,0x40b4bc\nCALL 0x00401990\nTEST EAX,EAX\nJZ 0x00402b4b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00402b30\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40b4bc\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40c79e\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40b4bf\nMOV ECX,0x40c7b5\nXOR EAX,EAX\nCALL 0x00401a90\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401a80\nTEST RAX,RAX\nJZ 0x00402bd4\nMOV ESI,0x40c7dc\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401790\nTEST EAX,EAX\nJZ 0x00402bd4\nXOR EDI,EDI\nMOV ESI,0x40c7e0\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40b4bc\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a90\nXOR EDI,EDI\nMOV ESI,0x40c825\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV R14D,0x40b4bc\nMOV EDI,0x1\nMOV EDX,0x40c7b5\nMOV ECX,0x40b4bc\nXOR EAX,EAX\nCALL 0x00401a90\nXOR EDI,EDI\nMOV ESI,0x40c844\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40c75b\nMOV ECX,0x40c61d\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401a90\n'
p795
S'41 56\n53\n50\nbb 20 b3 40 00\nbe 3f c7 40 00\n66 90\nbf bc b4 40 00\ne8 56 ee ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb bc b4 40 00\n48 0f 45 d8\n31 ff\nbe 9e c7 40 00\nba 05 00 00 00\ne8 f4 ec ff ff\n48 89 c6\nbf 01 00 00 00\nba bf b4 40 00\nb9 b5 c7 40 00\n31 c0\ne8 0b ef ff ff\nbf 05 00 00 00\n31 f6\ne8 ef ee ff ff\n48 85 c0\n74 3e\nbe dc c7 40 00\nba 03 00 00 00\n48 89 c7\ne8 e8 eb ff ff\n85 c0\n74 28\n31 ff\nbe e0 c7 40 00\nba 05 00 00 00\ne8 a3 ec ff ff\n48 89 c1\nbf 01 00 00 00\nba bc b4 40 00\n31 c0\n48 89 ce\ne8 bc ee ff ff\n31 ff\nbe 25 c8 40 00\nba 05 00 00 00\ne8 7b ec ff ff\n48 89 c6\n41 be bc b4 40 00\nbf 01 00 00 00\nba b5 c7 40 00\nb9 bc b4 40 00\n31 c0\ne8 8c ee ff ff\n31 ff\nbe 44 c8 40 00\nba 05 00 00 00\ne8 4b ec ff ff\n48 89 c2\n4c 39 f3\nb8 5b c7 40 00\nb9 1d c6 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 4e ee ff ff\n'
p796
S'.text:0000000000402b20\n.text:0000000000402b22\n.text:0000000000402b23\n.text:0000000000402b24\n.text:0000000000402b29\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b35\n.text:0000000000402b3a\n.text:0000000000402b3c\n.text:0000000000402b3e\n.text:0000000000402b42\n.text:0000000000402b46\n.text:0000000000402b49\n.text:0000000000402b4b\n.text:0000000000402b4f\n.text:0000000000402b52\n.text:0000000000402b57\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b62\n.text:0000000000402b67\n.text:0000000000402b6c\n.text:0000000000402b6f\n.text:0000000000402b74\n.text:0000000000402b79\n.text:0000000000402b7e\n.text:0000000000402b80\n.text:0000000000402b85\n.text:0000000000402b8a\n.text:0000000000402b8c\n.text:0000000000402b91\n.text:0000000000402b94\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402ba0\n.text:0000000000402ba3\n.text:0000000000402ba8\n.text:0000000000402baa\n.text:0000000000402bac\n.text:0000000000402bae\n.text:0000000000402bb3\n.text:0000000000402bb8\n.text:0000000000402bbd\n.text:0000000000402bc0\n.text:0000000000402bc5\n.text:0000000000402bca\n.text:0000000000402bcc\n.text:0000000000402bcf\n.text:0000000000402bd4\n.text:0000000000402bd6\n.text:0000000000402bdb\n.text:0000000000402be0\n.text:0000000000402be5\n.text:0000000000402be8\n.text:0000000000402bee\n.text:0000000000402bf3\n.text:0000000000402bf8\n.text:0000000000402bfd\n.text:0000000000402bff\n.text:0000000000402c04\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c10\n.text:0000000000402c15\n.text:0000000000402c18\n.text:0000000000402c1b\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c29\n.text:0000000000402c2e\n.text:0000000000402c30\n.text:0000000000402c33\n.text:0000000000402c36\n.text:0000000000402c3a\n.text:0000000000402c3b\n.text:0000000000402c3d\n'
p797
tp798
sS'version_etc_va'
p799
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p800
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p801
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00408490\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040849c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004084b1\nINC R9\nCMP R9,0xa\nJC 0x00408470\nMOV R8,RSP\nCALL 0x004080d0\nADD RSP,0x58\nRET\n'
p802
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p803
S'.text:0000000000408460\n.text:0000000000408464\n.text:0000000000408467\n.text:0000000000408470\n.text:0000000000408473\n.text:0000000000408477\n.text:0000000000408479\n.text:000000000040847c\n.text:0000000000408480\n.text:0000000000408484\n.text:0000000000408487\n.text:0000000000408490\n.text:0000000000408494\n.text:0000000000408498\n.text:000000000040849c\n.text:000000000040849f\n.text:00000000004084a3\n.text:00000000004084a6\n.text:00000000004084a8\n.text:00000000004084ab\n.text:00000000004084af\n.text:00000000004084b1\n.text:00000000004084b4\n.text:00000000004084b9\n.text:00000000004084bd\n'
p804
tp805
sS'xzalloc'
p806
(S'\n__stdcall xzalloc(size_t s)\n'
p807
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p808
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004085f0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401910\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p809
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 14 92 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p810
S'.text:00000000004086e0\n.text:00000000004086e2\n.text:00000000004086e3\n.text:00000000004086e4\n.text:00000000004086e7\n.text:00000000004086ec\n.text:00000000004086ef\n.text:00000000004086f1\n.text:00000000004086f4\n.text:00000000004086f7\n.text:00000000004086fc\n.text:00000000004086ff\n.text:0000000000408703\n.text:0000000000408704\n.text:0000000000408706\n'
p811
tp812
sS'gettext_quote'
p813
(S'\n__stdcall gettext_quote(char * msgid)\n'
p814
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040d11e;\u000a        pcVar2 = &DAT_0040d122;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401860\nCMP RAX,RBX\nJNZ 0x00406438\nCALL 0x00409be0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00406440\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004063e8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40d10e\nMOV EAX,0x40d112\nJMP 0x00406434\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00406440\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00406426\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40d11e\nMOV EAX,0x40d122\nJMP 0x00406434\nCMP R14D,0x9\nMOV ECX,0x40d104\nMOV EAX,0x40dcfb\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p816
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 c7 b4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 39 38 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 0e d1 40 00\nb8 12 d1 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 1e d1 40 00\nb8 22 d1 40 00\neb 0e\n41 83 fe 09\nb9 04 d1 40 00\nb8 fb dc 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p817
S'.text:0000000000406380\n.text:0000000000406381\n.text:0000000000406383\n.text:0000000000406384\n.text:0000000000406387\n.text:000000000040638a\n.text:000000000040638c\n.text:0000000000406391\n.text:0000000000406394\n.text:0000000000406399\n.text:000000000040639c\n.text:00000000004063a2\n.text:00000000004063a7\n.text:00000000004063aa\n.text:00000000004063af\n.text:00000000004063b4\n.text:00000000004063b9\n.text:00000000004063bf\n.text:00000000004063c5\n.text:00000000004063c8\n.text:00000000004063ca\n.text:00000000004063cc\n.text:00000000004063d1\n.text:00000000004063d5\n.text:00000000004063d7\n.text:00000000004063d9\n.text:00000000004063dc\n.text:00000000004063e1\n.text:00000000004063e6\n.text:00000000004063e8\n.text:00000000004063ed\n.text:00000000004063f2\n.text:00000000004063f7\n.text:00000000004063fd\n.text:0000000000406403\n.text:0000000000406406\n.text:0000000000406408\n.text:000000000040640a\n.text:000000000040640f\n.text:0000000000406413\n.text:0000000000406415\n.text:0000000000406417\n.text:000000000040641a\n.text:000000000040641f\n.text:0000000000406424\n.text:0000000000406426\n.text:000000000040642a\n.text:000000000040642f\n.text:0000000000406434\n.text:0000000000406438\n.text:0000000000406439\n.text:000000000040643b\n.text:000000000040643c\n'
p818
tp819
sS'xnumtoimax'
p820
(S'\n__stdcall xnumtoimax(char * n_str, intmax_t min, intmax_t max, char * suffixes, char * err)\n'
p821
V\u000aintmax_t xnumtoimax(char *n_str,intmax_t min,intmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  long lVar1;\u000a  strtol_error sVar2;\u000a  long in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  long local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoimax(n_str,(char **)0x0,(intmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  lVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a    goto LAB_0040882f;\u000a  }\u000a  if (sVar2 != LONGINT_OVERFLOW) {\u000a    if (sVar2 != LONGINT_OK) goto LAB_0040882f;\u000a    if ((max <= local_38) && (local_38 <= (long)suffixes)) {\u000a      return local_38;\u000a    }\u000a    if (local_38 < 0x40000000) {\u000a      piVar3 = __errno_location();\u000a      iVar5 = 0x22;\u000a      if (lVar1 < 0xc0000000) {\u000a        iVar5 = 0x4b;\u000a      }\u000a      *piVar3 = iVar5;\u000a      goto LAB_0040882f;\u000a    }\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0x4b;\u000aLAB_0040882f:\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return local_38;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x004088b0\nCMP EAX,0x3\nJZ 0x00408807\nCMP EAX,0x1\nJZ 0x004087fa\nTEST EAX,EAX\nJNZ 0x0040882f\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJL 0x004087f1\nCMP RBX,R15\nJLE 0x0040886a\nCMP RBX,0x40000000\nJL 0x00408814\nCALL 0x00401780\nMOV dword ptr [RAX],0x4b\nJMP 0x0040882f\nCALL 0x00401780\nMOV dword ptr [RAX],0x0\nJMP 0x0040882f\nCALL 0x00401780\nCMP RBX,0xc0000000\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVL EDX,ECX\nMOV dword ptr [RAX],EDX\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00406370\nMOV R8,RAX\nMOV EDX,0x40c888\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401ac0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 2d\n83 f8 01\n74 1b\n85 c0\n75 4c\n48 8b 1c 24\n4c 39 e3\n7c 05\n4c 39 fb\n7e 79\n48 81 fb 00 00 00 40\n7c 1a\ne8 81 8f ff ff\nc7 00 4b 00 00 00\neb 28\ne8 74 8f ff ff\nc7 00 00 00 00 00\neb 1b\ne8 67 8f ff ff\n48 81 fb 00 00 00 c0\nb9 4b 00 00 00\nba 22 00 00 00\n0f 4c d1\n89 10\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 3e 8f ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 1c db ff ff\n49 89 c0\nba 88 c8 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 56 92 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:00000000004087b0\n.text:00000000004087b1\n.text:00000000004087b3\n.text:00000000004087b5\n.text:00000000004087b7\n.text:00000000004087b9\n.text:00000000004087ba\n.text:00000000004087bb\n.text:00000000004087be\n.text:00000000004087c1\n.text:00000000004087c4\n.text:00000000004087c6\n.text:00000000004087c9\n.text:00000000004087cc\n.text:00000000004087ce\n.text:00000000004087d0\n.text:00000000004087d5\n.text:00000000004087d8\n.text:00000000004087da\n.text:00000000004087dd\n.text:00000000004087df\n.text:00000000004087e1\n.text:00000000004087e3\n.text:00000000004087e7\n.text:00000000004087ea\n.text:00000000004087ec\n.text:00000000004087ef\n.text:00000000004087f1\n.text:00000000004087f8\n.text:00000000004087fa\n.text:00000000004087ff\n.text:0000000000408805\n.text:0000000000408807\n.text:000000000040880c\n.text:0000000000408812\n.text:0000000000408814\n.text:0000000000408819\n.text:0000000000408820\n.text:0000000000408825\n.text:000000000040882a\n.text:000000000040882d\n.text:000000000040882f\n.text:0000000000408833\n.text:0000000000408835\n.text:000000000040883a\n.text:000000000040883d\n.text:0000000000408842\n.text:0000000000408844\n.text:0000000000408846\n.text:0000000000408849\n.text:000000000040884c\n.text:000000000040884f\n.text:0000000000408854\n.text:0000000000408857\n.text:000000000040885c\n.text:000000000040885e\n.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408865\n.text:000000000040886a\n.text:000000000040886e\n.text:0000000000408872\n.text:0000000000408873\n.text:0000000000408875\n.text:0000000000408877\n.text:0000000000408879\n.text:000000000040887b\n.text:000000000040887c\n'
p825
tp826
sS'char_to_clump'
p827
(S'\n__stdcall char_to_clump()\n'
p828
V\u000aint char_to_clump(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  ushort **ppuVar2;\u000a  int iVar3;\u000a  byte bVar4;\u000a  int iVar5;\u000a  long lVar6;\u000a  byte in_DIL;\u000a  int iVar7;\u000a  char esc_buff [4];\u000a  char local_1c [4];\u000a  \u000a  pcVar1 = clump_buff;\u000a  iVar3 = 8;\u000a  if (input_tab_char == in_DIL) {\u000a    iVar3 = chars_per_input_tab;\u000a  }\u000a  if ((in_DIL == 9) || (input_tab_char == in_DIL)) {\u000a    iVar5 = iVar3 - input_position % iVar3;\u000a    if (untabify_input == 1) {\u000a      if (iVar5 == 0) {\u000a        bVar4 = 0;\u000a        iVar3 = 0;\u000a        iVar5 = 0;\u000a        goto LAB_00404424;\u000a      }\u000a      memset(clump_buff,0x20,(ulong)(uint)((iVar3 + -1) - input_position % iVar3) + 1);\u000a      iVar3 = iVar5;\u000a    }\u000a    else {\u000a      *clump_buff = in_DIL;\u000aLAB_004043d6:\u000a      iVar3 = 1;\u000a    }\u000a    bVar4 = (byte)((uint)iVar5 >> 0x1f);\u000a    if ((iVar5 < 0) && (input_position == 0)) {\u000a      input_position = 0;\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    ppuVar2 = __ctype_b_loc();\u000a    if ((*(byte *)((long)*ppuVar2 + (ulong)in_DIL * 2 + 1) & 0x40) == 0) {\u000a      if (use_esc_sequence == 1) {\u000a        *pcVar1 = '\u005c\u005c';\u000a        lVar6 = 0;\u000a        __sprintf_chk(local_1c,1,4,&DAT_0040c68c);\u000a        do {\u000a          pcVar1[lVar6 + 1] = local_1c[lVar6];\u000a          lVar6 = lVar6 + 1;\u000a        } while (lVar6 != 3);\u000a        iVar5 = 4;\u000a      }\u000a      else {\u000a        if (use_cntrl_prefix != 1) {\u000a          *pcVar1 = in_DIL;\u000a          iVar5 = -1;\u000a          if (in_DIL != 8) {\u000a            iVar5 = 0;\u000a          }\u000a          goto LAB_004043d6;\u000a        }\u000a        if ((char)in_DIL < 0) {\u000a          *pcVar1 = '\u005c\u005c';\u000a          lVar6 = 0;\u000a          __sprintf_chk(local_1c,1,4,&DAT_0040c68c);\u000a          do {\u000a            pcVar1[lVar6 + 1] = local_1c[lVar6];\u000a            lVar6 = lVar6 + 1;\u000a          } while (lVar6 != 3);\u000a          iVar5 = 4;\u000a        }\u000a        else {\u000a          *pcVar1 = '^';\u000a          pcVar1[1] = in_DIL ^ 0x40;\u000a          iVar5 = 2;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      *pcVar1 = in_DIL;\u000a      iVar5 = 1;\u000a    }\u000a    bVar4 = 0;\u000a    iVar3 = iVar5;\u000a  }\u000aLAB_00404424:\u000a  iVar7 = 0;\u000a  if (bVar4 == 0) {\u000a    iVar7 = iVar5 + input_position;\u000a  }\u000a  if (input_position != -iVar5 && SBORROW4(input_position,-iVar5) == input_position + iVar5 < 0) {\u000a    iVar7 = iVar5 + input_position;\u000a  }\u000a  input_position = iVar7;\u000a  return iVar3;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV EBP,EDI\nMOV R14,qword ptr [0x006113d8]\nMOV AL,byte ptr [0x00611270]\nCMP AL,BPL\nMOV ECX,0x8\nCMOVZ ECX,dword ptr [0x00611274]\nCMP BPL,0x9\nJZ 0x0040438a\nCMP AL,BPL\nJZ 0x0040438a\nCALL 0x00401b90\nMOV RAX,qword ptr [RAX]\nMOVZX R8D,BPL\nTEST byte ptr [RAX + R8*0x2 + 0x1],0x40\nJNZ 0x004043bf\nCMP byte ptr [0x006113ae],0x1\nJNZ 0x004043f7\nMOV byte ptr [R14],0x5c\nXOR EBX,EBX\nLEA RDI,[RSP + 0xc]\nMOV ESI,0x1\nMOV EDX,0x4\nMOV ECX,0x40c68c\nXOR EAX,EAX\nCALL 0x00401ba0\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RSP + RBX*0x1 + 0xc]\nMOV byte ptr [R14 + RBX*0x1 + 0x1],AL\nINC RBX\nCMP RBX,0x3\nJNZ 0x00404370\nMOV ECX,0x4\nJMP 0x004043c7\nMOV EAX,dword ptr [0x0061145c]\nCDQ\nIDIV ECX\nMOV EBX,ECX\nSUB EBX,EDX\nCMP byte ptr [0x00611388],0x1\nJNZ 0x004043d3\nTEST EBX,EBX\nJZ 0x00404418\nDEC ECX\nSUB ECX,EDX\nINC RCX\nMOV ESI,0x20\nMOV RDI,R14\nMOV RDX,RCX\nCALL 0x00401910\nMOV ECX,EBX\nJMP 0x004043db\nMOV byte ptr [R14],BPL\nMOV ECX,0x1\nMOV ESI,dword ptr [0x0061145c]\nXOR EDX,EDX\nMOV EBX,ECX\nJMP 0x00404424\nMOV byte ptr [R14],BPL\nMOV ECX,0x1\nMOV EDX,EBX\nSHR EDX,0x1f\nMOV ESI,dword ptr [0x0061145c]\nTEST EBX,EBX\nJNS 0x00404424\nXOR EAX,EAX\nTEST ESI,ESI\nMOV EDI,0x0\nJZ 0x00404438\nJMP 0x00404424\nCMP byte ptr [0x0061137b],0x1\nJNZ 0x00404447\nTEST BPL,BPL\nJS 0x0040445d\nMOV byte ptr [R14],0x5e\nXOR BPL,0x40\nMOV byte ptr [R14 + 0x1],BPL\nMOV ECX,0x2\nJMP 0x004043c7\nXOR EDX,EDX\nMOV ESI,dword ptr [0x0061145c]\nXOR ECX,ECX\nXOR EBX,EBX\nMOV EAX,EBX\nNEG EAX\nADD EBX,ESI\nXOR EDI,EDI\nTEST DL,DL\nCMOVZ EDI,EBX\nCMP ESI,EAX\nCMOVG EDI,EBX\nMOV EAX,ECX\nMOV dword ptr [0x0061145c],EDI\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV byte ptr [R14],BPL\nXOR EAX,EAX\nCMP BPL,0x8\nMOV EBX,0xffffffff\nCMOVNZ EBX,EAX\nJMP 0x004043d6\nMOV byte ptr [R14],0x5c\nXOR EBX,EBX\nLEA RDI,[RSP + 0xc]\nMOV ESI,0x1\nMOV EDX,0x4\nMOV ECX,0x40c68c\nXOR EAX,EAX\nCALL 0x00401ba0\nNOP\nMOVZX EAX,byte ptr [RSP + RBX*0x1 + 0xc]\nMOV byte ptr [R14 + RBX*0x1 + 0x1],AL\nINC RBX\nCMP RBX,0x3\nJNZ 0x00404480\nMOV ECX,0x4\nJMP 0x004043c7\n'
p830
S'55\n41 56\n53\n48 83 ec 10\n89 fd\n4c 8b 35 d7 d0 20 00\n8a 05 69 cf 20 00\n40 38 e8\nb9 08 00 00 00\n0f 44 0d 5e cf 20 00\n40 80 fd 09\n74 6e\n40 38 e8\n74 69\ne8 6a d8 ff ff\n48 8b 00\n44 0f b6 c5\n42 f6 44 40 01 40\n0f 85 86 00 00 00\n80 3d 6e d0 20 00 01\n0f 85 b1 00 00 00\n41 c6 06 5c\n31 db\n48 8d 7c 24 0c\nbe 01 00 00 00\nba 04 00 00 00\nb9 8c c6 40 00\n31 c0\ne8 39 d8 ff ff\n66 0f 1f 84 00 00 00 00 00\n0f b6 44 1c 0c\n41 88 44 1e 01\n48 ff c3\n48 83 fb 03\n75 ed\nb9 04 00 00 00\neb 3d\n8b 05 cc d0 20 00\n99\nf7 f9\n89 cb\n29 d3\n80 3d ea cf 20 00 01\n75 33\n85 db\n74 74\nff c9\n29 d1\n48 ff c1\nbe 20 00 00 00\n4c 89 f7\n48 89 ca\ne8 55 d5 ff ff\n89 d9\neb 1c\n41 88 2e\nb9 01 00 00 00\n8b 35 8f d0 20 00\n31 d2\n89 cb\neb 51\n41 88 2e\nb9 01 00 00 00\n89 da\nc1 ea 1f\n8b 35 76 d0 20 00\n85 db\n79 3a\n31 c0\n85 f6\nbf 00 00 00 00\n74 43\neb 2d\n80 3d 7d cf 20 00 01\n75 47\n40 84 ed\n78 58\n41 c6 06 5e\n40 80 f5 40\n41 88 6e 01\nb9 02 00 00 00\neb af\n31 d2\n8b 35 3c d0 20 00\n31 c9\n31 db\n89 d8\nf7 d8\n01 f3\n31 ff\n84 d2\n0f 44 fb\n39 c6\n0f 4f fb\n89 c8\n89 3d 1e d0 20 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n41 88 2e\n31 c0\n40 80 fd 08\nbb ff ff ff ff\n0f 45 d8\ne9 79 ff ff ff\n41 c6 06 5c\n31 db\n48 8d 7c 24 0c\nbe 01 00 00 00\nba 04 00 00 00\nb9 8c c6 40 00\n31 c0\ne8 22 d7 ff ff\n66 90\n0f b6 44 1c 0c\n41 88 44 1e 01\n48 ff c3\n48 83 fb 03\n75 ed\nb9 04 00 00 00\ne9 2a ff ff ff\n'
p831
S'.text:00000000004042f0\n.text:00000000004042f1\n.text:00000000004042f3\n.text:00000000004042f4\n.text:00000000004042f8\n.text:00000000004042fa\n.text:0000000000404301\n.text:0000000000404307\n.text:000000000040430a\n.text:000000000040430f\n.text:0000000000404316\n.text:000000000040431a\n.text:000000000040431c\n.text:000000000040431f\n.text:0000000000404321\n.text:0000000000404326\n.text:0000000000404329\n.text:000000000040432d\n.text:0000000000404333\n.text:0000000000404339\n.text:0000000000404340\n.text:0000000000404346\n.text:000000000040434a\n.text:000000000040434c\n.text:0000000000404351\n.text:0000000000404356\n.text:000000000040435b\n.text:0000000000404360\n.text:0000000000404362\n.text:0000000000404367\n.text:0000000000404370\n.text:0000000000404375\n.text:000000000040437a\n.text:000000000040437d\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438a\n.text:0000000000404390\n.text:0000000000404391\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404397\n.text:000000000040439e\n.text:00000000004043a0\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a6\n.text:00000000004043a8\n.text:00000000004043ab\n.text:00000000004043b0\n.text:00000000004043b3\n.text:00000000004043b6\n.text:00000000004043bb\n.text:00000000004043bd\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c7\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d6\n.text:00000000004043db\n.text:00000000004043dd\n.text:00000000004043e0\n.text:00000000004043e6\n.text:00000000004043e8\n.text:00000000004043ea\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f7\n.text:00000000004043fe\n.text:0000000000404400\n.text:0000000000404403\n.text:0000000000404405\n.text:0000000000404409\n.text:000000000040440d\n.text:0000000000404411\n.text:0000000000404416\n.text:0000000000404418\n.text:000000000040441a\n.text:0000000000404420\n.text:0000000000404422\n.text:0000000000404424\n.text:0000000000404426\n.text:0000000000404428\n.text:000000000040442a\n.text:000000000040442c\n.text:000000000040442e\n.text:0000000000404431\n.text:0000000000404433\n.text:0000000000404436\n.text:0000000000404438\n.text:000000000040443e\n.text:0000000000404442\n.text:0000000000404443\n.text:0000000000404445\n.text:0000000000404446\n.text:0000000000404447\n.text:000000000040444a\n.text:000000000040444c\n.text:0000000000404450\n.text:0000000000404455\n.text:0000000000404458\n.text:000000000040445d\n.text:0000000000404461\n.text:0000000000404463\n.text:0000000000404468\n.text:000000000040446d\n.text:0000000000404472\n.text:0000000000404477\n.text:0000000000404479\n.text:000000000040447e\n.text:0000000000404480\n.text:0000000000404485\n.text:000000000040448a\n.text:000000000040448d\n.text:0000000000404491\n.text:0000000000404493\n.text:0000000000404498\n'
p832
tp833
sS'getoptarg'
p834
(S'\n__stdcall getoptarg(char * arg, char * character, int * number)\n'
p835
V\u000avoid getoptarg(char *arg,char *character,int *number)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *n_str;\u000a  intmax_t iVar5;\u000a  undefined4 *in_RCX;\u000a  char *err;\u000a  undefined4 *extraout_RDX;\u000a  uint uVar6;\u000a  long local_30;\u000a  \u000a  cVar1 = *arg;\u000a  if (9 < (int)cVar1 - 0x30U) {\u000a    arg = arg + 1;\u000a    *(char *)number = cVar1;\u000a  }\u000a  if (*arg != 0) {\u000a    sVar2 = xstrtol(arg,(char **)0x0,(long *)0xa,(char *)&local_30);\u000a    if ((sVar2 != LONGINT_OK) || (0x7ffffffe < local_30 - 1U)) {\u000a      uVar6 = 0x4b;\u000a      if (local_30 < 0x80000000) {\u000a        puVar3 = (uint *)__errno_location();\u000a        uVar6 = *puVar3;\u000a      }\u000a      uVar4 = dcgettext(0,"\u005c'-%c\u005c' extra characters or invalid number in the argument: %s",5);\u000a      n_str = quote(arg);\u000a      err = (char *)(ulong)(uint)(int)(char)character;\u000a      error(0,(ulong)uVar6,uVar4,err,n_str);\u000a      n_str = (char *)0x1;\u000a      usage();\u000a      iVar5 = xdectoimax(n_str,(long)(int)uVar6,0x7fffffff,"",err);\u000a      *extraout_RDX = (int)iVar5;\u000a      return;\u000a    }\u000a    *in_RCX = (int)local_30;\u000a  }\u000a  return;\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBP,RCX\nMOV R14D,ESI\nMOV RBX,RDI\nMOVSX EAX,byte ptr [RBX]\nLEA ECX,[RAX + -0x30]\nCMP ECX,0xa\nJC 0x00402635\nINC RBX\nMOV byte ptr [RDX],AL\nCMP byte ptr [RBX],0x0\nJZ 0x0040266c\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x40c61d\nMOV RDI,RBX\nCALL 0x00408ba0\nMOV RCX,qword ptr [RSP + 0x8]\nTEST EAX,EAX\nJNZ 0x00402679\nLEA RAX,[RCX + -0x1]\nCMP RAX,0x7fffffff\nJNC 0x00402679\nMOV dword ptr [RBP],ECX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15D,0x4b\nCMP RCX,0x7fffffff\nJG 0x00402690\nCALL 0x00401780\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40c5c9\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nMOVSX EBP,R14B\nMOV RDI,RBX\nCALL 0x00406370\nMOV RBX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV ECX,EBP\nMOV R8,RBX\nCALL 0x00401ac0\nMOV EDI,0x1\nCALL 0x00402750\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p837
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 cd\n41 89 f6\n48 89 fb\n0f be 03\n8d 48 d0\n83 f9 0a\n72 05\n48 ff c3\n88 02\n80 3b 00\n74 32\n48 8d 4c 24 08\n31 f6\nba 0a 00 00 00\n41 b8 1d c6 40 00\n48 89 df\ne8 4c 65 00 00\n48 8b 4c 24 08\n85 c0\n75 1c\n48 8d 41 ff\n48 3d ff ff ff 7f\n73 10\n89 4d 00\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n41 bf 4b 00 00 00\n48 81 f9 ff ff ff 7f\n7f 08\ne8 f3 f0 ff ff\n44 8b 38\n31 ff\nbe c9 c5 40 00\nba 05 00 00 00\ne8 bf f1 ff ff\n49 89 c4\n41 0f be ee\n48 89 df\ne8 c0 3c 00 00\n48 89 c3\n31 ff\n31 c0\n44 89 fe\n4c 89 e2\n89 e9\n49 89 d8\ne8 f9 f3 ff ff\nbf 01 00 00 00\ne8 7f 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p838
S'.text:0000000000402610\n.text:0000000000402611\n.text:0000000000402613\n.text:0000000000402615\n.text:0000000000402617\n.text:0000000000402618\n.text:000000000040261c\n.text:000000000040261f\n.text:0000000000402622\n.text:0000000000402625\n.text:0000000000402628\n.text:000000000040262b\n.text:000000000040262e\n.text:0000000000402630\n.text:0000000000402633\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263a\n.text:000000000040263f\n.text:0000000000402641\n.text:0000000000402646\n.text:000000000040264c\n.text:000000000040264f\n.text:0000000000402654\n.text:0000000000402659\n.text:000000000040265b\n.text:000000000040265d\n.text:0000000000402661\n.text:0000000000402667\n.text:0000000000402669\n.text:000000000040266c\n.text:0000000000402670\n.text:0000000000402671\n.text:0000000000402673\n.text:0000000000402675\n.text:0000000000402677\n.text:0000000000402678\n.text:0000000000402679\n.text:000000000040267f\n.text:0000000000402686\n.text:0000000000402688\n.text:000000000040268d\n.text:0000000000402690\n.text:0000000000402692\n.text:0000000000402697\n.text:000000000040269c\n.text:00000000004026a1\n.text:00000000004026a4\n.text:00000000004026a8\n.text:00000000004026ab\n.text:00000000004026b0\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026b7\n.text:00000000004026ba\n.text:00000000004026bd\n.text:00000000004026bf\n.text:00000000004026c2\n.text:00000000004026c7\n.text:00000000004026cc\n.text:00000000004026d1\n'
p839
tp840
sS'fclose'
p841
(S'\n__stdcall fclose(FILE * __stream)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_006110a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x006110a8]\n'
p844
S'ff 25 62 f8 20 00\n'
p845
S'.plt:0000000000401840\n'
p846
tp847
sS'__ctype_get_mb_cur_max'
p848
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006110c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x006110c0]\n'
p851
S'ff 25 4a f8 20 00\n'
p852
S'.plt:0000000000401870\n'
p853
tp854
sS'quotearg_n_style'
p855
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p856
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004060b0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00405e80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p858
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p859
S'.text:0000000000406070\n.text:0000000000406071\n.text:0000000000406073\n.text:0000000000406074\n.text:0000000000406078\n.text:000000000040607b\n.text:000000000040607d\n.text:0000000000406082\n.text:0000000000406085\n.text:000000000040608a\n.text:0000000000406091\n.text:0000000000406093\n.text:0000000000406096\n.text:0000000000406099\n.text:000000000040609e\n.text:00000000004060a2\n.text:00000000004060a3\n.text:00000000004060a5\n.text:00000000004060a6\n'
p860
tp861
sS'quote_n'
p862
(S'\n__stdcall quote_n(char * arg)\n'
p863
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'MOV RDX,-0x1\nJMP 0x00406340\n'
p865
S'48 c7 c2 ff ff ff ff\neb d7\n'
p866
S'.text:0000000000406360\n.text:0000000000406367\n'
p867
tp868
sS'quotearg_alloc'
p869
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p870
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p871
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00405cf0\n'
p872
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p873
S'.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce5\n.text:0000000000405ce8\n'
p874
tp875
sS'close_stdout_set_file_name'
p876
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p877
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p878
S'MOV qword ptr [0x00611468],RDI\nRET\n'
p879
S'48 89 3d 61 ca 20 00\nc3\n'
p880
S'.text:0000000000404a00\n.text:0000000000404a07\n'
p881
tp882
sS'init_page'
p883
(S'\n__stdcall init_page()\n'
p884
V\u000avoid init_page(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  COLUMN *pCVar3;\u000a  int *piVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  \u000a  iVar5 = lines_per_body;\u000a  if (storing_columns != 0) {\u000a    if (columns != 0) {\u000a      piVar4 = &column_vector->lines_to_print;\u000a      iVar2 = columns;\u000a      do {\u000a        iVar6 = 0;\u000a        if (piVar4[-8] == 0) {\u000a          iVar6 = iVar5;\u000a        }\u000a        *piVar4 = iVar6;\u000a        piVar4 = piVar4 + 0x10;\u000a        iVar2 = iVar2 + -1;\u000a      } while (iVar2 != 0);\u000a    }\u000a    return;\u000a  }\u000a  store_columns();\u000a  pCVar3 = column_vector;\u000a  if (columns != 1) {\u000a    uVar1 = columns - 2;\u000a    iVar5 = 1 - columns;\u000a    piVar4 = &column_vector->lines_to_print;\u000a    do {\u000a      *piVar4 = piVar4[-1];\u000a      piVar4 = piVar4 + 0x10;\u000a      iVar5 = iVar5 + 1;\u000a    } while (iVar5 != 0);\u000a    pCVar3 = pCVar3 + (ulong)uVar1 + 1;\u000a  }\u000a  if (balance_columns == 1) {\u000a    pCVar3->lines_to_print = pCVar3->lines_stored;\u000a    return;\u000a  }\u000a  iVar5 = 0;\u000a  if (pCVar3->status == OPEN) {\u000a    iVar5 = lines_per_body;\u000a  }\u000a  pCVar3->lines_to_print = iVar5;\u000a  return;\u000a}\u000a\u000a
p885
S'MOV AL,byte ptr [0x00611379]\nTEST AL,AL\nJZ 0x00404677\nMOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJZ 0x00404676\nMOV RCX,qword ptr [0x006113e8]\nMOV EDX,dword ptr [0x006113c4]\nADD RCX,0x30\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RCX + -0x20],0x0\nMOV ESI,0x0\nCMOVZ ESI,EDX\nMOV dword ptr [RCX],ESI\nADD RCX,0x40\nDEC EAX\nJNZ 0x00404660\nRET\nPUSH RAX\nCALL 0x00404810\nMOV ESI,dword ptr [0x006112a8]\nMOV RAX,qword ptr [0x006113e8]\nCMP ESI,0x1\nLEA RSP,[RSP + 0x8]\nJZ 0x004046c4\nLEA ECX,[RSI + -0x2]\nINC RCX\nMOV EDX,0x1\nSUB EDX,ESI\nLEA RSI,[RAX + 0x30]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDI,dword ptr [RSI + -0x4]\nMOV dword ptr [RSI],EDI\nADD RSI,0x40\nINC EDX\nJNZ 0x004046b0\nSHL RCX,0x6\nADD RAX,RCX\nCMP byte ptr [0x0061137a],0x1\nJNZ 0x004046d4\nMOV ECX,dword ptr [RAX + 0x2c]\nMOV dword ptr [RAX + 0x30],ECX\nRET\nXOR ECX,ECX\nCMP dword ptr [RAX + 0x10],0x0\nCMOVZ ECX,dword ptr [0x006113c4]\nMOV dword ptr [RAX + 0x30],ECX\nRET\n'
p886
S'8a 05 43 cd 20 00\n84 c0\n74 3d\n8b 05 68 cc 20 00\n85 c0\n74 32\n48 8b 0d 9d cd 20 00\n8b 15 73 cd 20 00\n48 83 c1 30\n66 66 2e 0f 1f 84 00 00 00 00 00\n83 79 e0 00\nbe 00 00 00 00\n0f 44 f2\n89 31\n48 83 c1 40\nff c8\n75 ea\nc3\n50\ne8 93 01 00 00\n8b 35 25 cc 20 00\n48 8b 05 5e cd 20 00\n83 fe 01\n48 8d 64 24 08\n74 30\n8d 4e fe\n48 ff c1\nba 01 00 00 00\n29 f2\n48 8d 70 30\n66 66 2e 0f 1f 84 00 00 00 00 00\n8b 7e fc\n89 3e\n48 83 c6 40\nff c2\n75 f3\n48 c1 e1 06\n48 01 c8\n80 3d af cc 20 00 01\n75 07\n8b 48 2c\n89 48 30\nc3\n31 c9\n83 78 10 00\n0f 44 0d e3 cc 20 00\n89 48 30\nc3\n'
p887
S'.text:0000000000404630\n.text:0000000000404636\n.text:0000000000404638\n.text:000000000040463a\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:000000000040464b\n.text:0000000000404651\n.text:0000000000404655\n.text:0000000000404660\n.text:0000000000404664\n.text:0000000000404669\n.text:000000000040466c\n.text:000000000040466e\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404676\n.text:0000000000404677\n.text:0000000000404678\n.text:000000000040467d\n.text:0000000000404683\n.text:000000000040468a\n.text:000000000040468d\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404697\n.text:000000000040469a\n.text:000000000040469f\n.text:00000000004046a1\n.text:00000000004046a5\n.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046b9\n.text:00000000004046bb\n.text:00000000004046bd\n.text:00000000004046c1\n.text:00000000004046c4\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d0\n.text:00000000004046d3\n.text:00000000004046d4\n.text:00000000004046d6\n.text:00000000004046da\n.text:00000000004046e1\n.text:00000000004046e4\n'
p888
tp889
sS'pad_down'
p890
(S'\n__stdcall pad_down()\n'
p891
V\u000avoid pad_down(int iParm1)\u000a\u000a{\u000a  if (use_form_feed != 0) {\u000a    putchar_unlocked(0xc);\u000a    return;\u000a  }\u000a  if (iParm1 != 0) {\u000a    do {\u000a      putchar_unlocked(10);\u000a      iParm1 = iParm1 + -1;\u000a    } while (iParm1 != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p892
S'PUSH RBX\nMOV EBX,EDI\nMOV AL,byte ptr [0x00611389]\nTEST AL,AL\nJZ 0x004047f8\nMOV EDI,0xc\nPOP RBX\nJMP 0x004019c0\nTEST EBX,EBX\nJZ 0x0040480e\nNOP dword ptr [RAX]\nMOV EDI,0xa\nCALL 0x004019c0\nDEC EBX\nJNZ 0x00404800\nPOP RBX\nRET\n'
p893
S'53\n89 fb\n8a 05 a0 cb 20 00\n84 c0\n74 0b\nbf 0c 00 00 00\n5b\ne9 c8 d1 ff ff\n85 db\n74 12\n0f 1f 40 00\nbf 0a 00 00 00\ne8 b6 d1 ff ff\nff cb\n75 f2\n5b\nc3\n'
p894
S'.text:00000000004047e0\n.text:00000000004047e1\n.text:00000000004047e3\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f3\n.text:00000000004047f8\n.text:00000000004047fa\n.text:00000000004047fc\n.text:0000000000404800\n.text:0000000000404805\n.text:000000000040480a\n.text:000000000040480c\n.text:000000000040480e\n.text:000000000040480f\n'
p895
tp896
sS'__libc_csu_init'
p897
(S'\n__stdcall __libc_csu_init()\n'
p898
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p899
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x610e08]\nPUSH RBP\nLEA RBP,[0x610e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004016f8\nTEST RBP,RBP\nJZ 0x0040a6b6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x0040a6a0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p900
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 96 67 20 00\n55\n48 8d 2d 96 67 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 67 70 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p901
S'.text:000000000040a660\n.text:000000000040a662\n.text:000000000040a664\n.text:000000000040a667\n.text:000000000040a669\n.text:000000000040a66b\n.text:000000000040a672\n.text:000000000040a673\n.text:000000000040a67a\n.text:000000000040a67b\n.text:000000000040a67e\n.text:000000000040a681\n.text:000000000040a684\n.text:000000000040a688\n.text:000000000040a68c\n.text:000000000040a691\n.text:000000000040a694\n.text:000000000040a696\n.text:000000000040a698\n.text:000000000040a6a0\n.text:000000000040a6a3\n.text:000000000040a6a6\n.text:000000000040a6a9\n.text:000000000040a6ad\n.text:000000000040a6b1\n.text:000000000040a6b4\n.text:000000000040a6b6\n.text:000000000040a6ba\n.text:000000000040a6bb\n.text:000000000040a6bc\n.text:000000000040a6be\n.text:000000000040a6c0\n.text:000000000040a6c2\n.text:000000000040a6c4\n'
p902
tp903
sS'FUN_00401710'
p904
(S'\n__stdcall FUN_00401710()\n'
p905
V\u000avoid FUN_00401710(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00611010)();\u000a  return;\u000a}\u000a\u000a
p906
S'PUSH qword ptr [0x00611008]\nJMP qword ptr [0x00611010]\n'
p907
S'ff 35 f2 f8 20 00\nff 25 f4 f8 20 00\n'
p908
S'.plt:0000000000401710\n.plt:0000000000401716\n'
p909
tp910
sS'c_isdigit'
p911
(S'\n__stdcall c_isdigit()\n'
p912
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p913
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p914
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p915
S'.text:0000000000409aa0\n.text:0000000000409aa3\n.text:0000000000409aa6\n.text:0000000000409aa9\n'
p916
tp917
sS'usage'
p918
(S'\n__stdcall usage()\n'
p919
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Paginate or columnate FILE(s) for printing.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\u005cn                    begin [stop] printing with page FIRST_[LAST_]PAGE\u005cn  -COLUMN, --columns=COLUMN\u005cn                    output COLUMN columns and print columns down,\u005cn                    unless -a is used. Balance number of lines in the\u005cn                    columns on each page\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -a, --across      print columns across rather than down, used together\u005cn                    with -COLUMN\u005cn  -c, --show-control-chars\u005cn                    use hat notation (^G) and octal backslash notation\u005cn  -d, --double-space\u005cn                    double space the output\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -D, --date-format=FORMAT\u005cn                    use FORMAT for the header date\u005cn  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\u005cn                    expand input CHARs (TABs) to tab WIDTH (8)\u005cn  -F, -f, --form-feed\u005cn                    use form feeds instead of newlines to separate pages\u005cn                    (by a 3-line page header with -F or a 5-line header\u005cn                    and trailer without -F)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -h, --header=HEADER\u005cn                    use a centered HEADER instead of filename in page header,\u005cn                    -h \u005c"\u005c" prints a blank line, don\u005c't use -h\u005c"\u005c"\u005cn  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\u005cn                    replace spaces with CHARs (TABs) to tab WIDTH (8)\u005cn  -J, --join-lines  merge full lines, turns off -W line truncation, no column\u005cn                    alignment, --sep-string[=STRING] sets separators\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -l, --length=PAGE_LENGTH\u005cn                    set the page length to PAGE_LENGTH (66) lines\u005cn                    (default number of lines of text 56, and with -F 63).\u005cn                    implies -t if PAGE_LENGTH <= 10\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -m, --merge       print all files in parallel, one in each column,\u005cn                    truncate lines, but join lines of full length with -J\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\u005cn                    number lines, use DIGITS (5) digits, then SEP (TAB),\u005cn                    default counting starts with 1st line of input file\u005cn  -N, --first-line-number=NUMBER\u005cn                    start counting with NUMBER at 1st line of first\u005cn                    page printed (see +FIRST_PAGE)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -o, --indent=MARGIN\u005cn                    offset each line with MARGIN (zero) spaces, do not\u005cn                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\u005cn  -r, --no-file-warnings\u005cn                    omit warning when a file cannot be opened\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -s[CHAR], --separator[=CHAR]\u005cn                    separate columns by a single character, default for CHAR\u005cn                    is the <TAB> character without -w and \u005c'no char\u005c' with -w.\u005cn                    -s[CHAR] turns off line truncation of all 3 column\u005cn                    options (-COLUMN|-a -COLUMN|-m) except -w is set\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -S[STRING], --sep-string[=STRING]\u005cn                    separate columns by STRING,\u005cn                    without -S: Default separator <TAB> with -J and <space>\u005cn                    otherwise (same as -S\u005c" \u005c"), no effect on column options\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -t, --omit-header  omit page headers and trailers;\u005cn                     implied if PAGE_LENGTH <= 10\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -T, --omit-pagination\u005cn                    omit page headers and trailers, eliminate any pagination\u005cn                    by form feeds set in input files\u005cn  -v, --show-nonprinting\u005cn                    use octal backslash notation\u005cn  -w, --width=PAGE_WIDTH\u005cn                    set page width to PAGE_WIDTH (72) characters for\u005cn                    multiple text-column output only, -s[char] turns off (72)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -W, --page-width=PAGE_WIDTH\u005cn                    set page width to PAGE_WIDTH (72) characters always,\u005cn                    truncate lines, except -J option is set, no interference\u005cn                    with -S or -s\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p920
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x0040299b\nXOR EDI,EDI\nMOV ESI,0x40b59e\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00611478]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a90\nXOR EDI,EDI\nMOV ESI,0x40b5bf\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nCALL 0x00402ac0\nCALL 0x00402af0\nXOR EDI,EDI\nMOV ESI,0x40b5ec\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40b73a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40b848\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40b9d8\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40bb83\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40bc5f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40bcef\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40be49\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40bf46\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c08c\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c178\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c1e0\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c371\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c448\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x40c475\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nCALL 0x00401960\nCALL 0x00402b20\nMOV EDI,EBX\nCALL 0x00401b30\nCALL 0x00402a80\nMOV EDI,EBX\nCALL 0x00401b30\n'
p921
S'53\n89 fb\n85 db\n0f 85 40 02 00 00\n31 ff\nbe 9e b5 40 00\nba 05 00 00 00\ne8 f4 f0 ff ff\n48 89 c1\n48 8b 15 02 ed 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 0b f3 ff ff\n31 ff\nbe bf b5 40 00\nba 05 00 00 00\ne8 ca f0 ff ff\n48 8b 35 8b eb 20 00\n48 89 c7\ne8 bb f1 ff ff\ne8 16 03 00 00\ne8 41 03 00 00\n31 ff\nbe ec b5 40 00\nba 05 00 00 00\ne8 a0 f0 ff ff\n48 8b 35 61 eb 20 00\n48 89 c7\ne8 91 f1 ff ff\n31 ff\nbe 3a b7 40 00\nba 05 00 00 00\ne8 80 f0 ff ff\n48 8b 35 41 eb 20 00\n48 89 c7\ne8 71 f1 ff ff\n31 ff\nbe 48 b8 40 00\nba 05 00 00 00\ne8 60 f0 ff ff\n48 8b 35 21 eb 20 00\n48 89 c7\ne8 51 f1 ff ff\n31 ff\nbe d8 b9 40 00\nba 05 00 00 00\ne8 40 f0 ff ff\n48 8b 35 01 eb 20 00\n48 89 c7\ne8 31 f1 ff ff\n31 ff\nbe 83 bb 40 00\nba 05 00 00 00\ne8 20 f0 ff ff\n48 8b 35 e1 ea 20 00\n48 89 c7\ne8 11 f1 ff ff\n31 ff\nbe 5f bc 40 00\nba 05 00 00 00\ne8 00 f0 ff ff\n48 8b 35 c1 ea 20 00\n48 89 c7\ne8 f1 f0 ff ff\n31 ff\nbe ef bc 40 00\nba 05 00 00 00\ne8 e0 ef ff ff\n48 8b 35 a1 ea 20 00\n48 89 c7\ne8 d1 f0 ff ff\n31 ff\nbe 49 be 40 00\nba 05 00 00 00\ne8 c0 ef ff ff\n48 8b 35 81 ea 20 00\n48 89 c7\ne8 b1 f0 ff ff\n31 ff\nbe 46 bf 40 00\nba 05 00 00 00\ne8 a0 ef ff ff\n48 8b 35 61 ea 20 00\n48 89 c7\ne8 91 f0 ff ff\n31 ff\nbe 8c c0 40 00\nba 05 00 00 00\ne8 80 ef ff ff\n48 8b 35 41 ea 20 00\n48 89 c7\ne8 71 f0 ff ff\n31 ff\nbe 78 c1 40 00\nba 05 00 00 00\ne8 60 ef ff ff\n48 8b 35 21 ea 20 00\n48 89 c7\ne8 51 f0 ff ff\n31 ff\nbe e0 c1 40 00\nba 05 00 00 00\ne8 40 ef ff ff\n48 8b 35 01 ea 20 00\n48 89 c7\ne8 31 f0 ff ff\n31 ff\nbe 71 c3 40 00\nba 05 00 00 00\ne8 20 ef ff ff\n48 8b 35 e1 e9 20 00\n48 89 c7\ne8 11 f0 ff ff\n31 ff\nbe 48 c4 40 00\nba 05 00 00 00\ne8 00 ef ff ff\n48 8b 35 c1 e9 20 00\n48 89 c7\ne8 f1 ef ff ff\n31 ff\nbe 75 c4 40 00\nba 05 00 00 00\ne8 e0 ee ff ff\n48 8b 35 a1 e9 20 00\n48 89 c7\ne8 d1 ef ff ff\ne8 8c 01 00 00\n89 df\ne8 95 f1 ff ff\ne8 e0 00 00 00\n89 df\ne8 89 f1 ff ff\n'
p922
S'.text:0000000000402750\n.text:0000000000402751\n.text:0000000000402753\n.text:0000000000402755\n.text:000000000040275b\n.text:000000000040275d\n.text:0000000000402762\n.text:0000000000402767\n.text:000000000040276c\n.text:000000000040276f\n.text:0000000000402776\n.text:000000000040277b\n.text:000000000040277d\n.text:0000000000402780\n.text:0000000000402785\n.text:0000000000402787\n.text:000000000040278c\n.text:0000000000402791\n.text:0000000000402796\n.text:000000000040279d\n.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027aa\n.text:00000000004027af\n.text:00000000004027b1\n.text:00000000004027b6\n.text:00000000004027bb\n.text:00000000004027c0\n.text:00000000004027c7\n.text:00000000004027ca\n.text:00000000004027cf\n.text:00000000004027d1\n.text:00000000004027d6\n.text:00000000004027db\n.text:00000000004027e0\n.text:00000000004027e7\n.text:00000000004027ea\n.text:00000000004027ef\n.text:00000000004027f1\n.text:00000000004027f6\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402807\n.text:000000000040280a\n.text:000000000040280f\n.text:0000000000402811\n.text:0000000000402816\n.text:000000000040281b\n.text:0000000000402820\n.text:0000000000402827\n.text:000000000040282a\n.text:000000000040282f\n.text:0000000000402831\n.text:0000000000402836\n.text:000000000040283b\n.text:0000000000402840\n.text:0000000000402847\n.text:000000000040284a\n.text:000000000040284f\n.text:0000000000402851\n.text:0000000000402856\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402867\n.text:000000000040286a\n.text:000000000040286f\n.text:0000000000402871\n.text:0000000000402876\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402887\n.text:000000000040288a\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402896\n.text:000000000040289b\n.text:00000000004028a0\n.text:00000000004028a7\n.text:00000000004028aa\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b6\n.text:00000000004028bb\n.text:00000000004028c0\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028cf\n.text:00000000004028d1\n.text:00000000004028d6\n.text:00000000004028db\n.text:00000000004028e0\n.text:00000000004028e7\n.text:00000000004028ea\n.text:00000000004028ef\n.text:00000000004028f1\n.text:00000000004028f6\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402907\n.text:000000000040290a\n.text:000000000040290f\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291b\n.text:0000000000402920\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292f\n.text:0000000000402931\n.text:0000000000402936\n.text:000000000040293b\n.text:0000000000402940\n.text:0000000000402947\n.text:000000000040294a\n.text:000000000040294f\n.text:0000000000402951\n.text:0000000000402956\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402971\n.text:0000000000402976\n.text:000000000040297b\n.text:0000000000402980\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298f\n.text:0000000000402994\n.text:0000000000402996\n.text:000000000040299b\n.text:00000000004029a0\n.text:00000000004029a2\n'
p923
tp924
sS'get_stat_ctime_ns'
p925
(S'\n__stdcall get_stat_ctime_ns(stat * st)\n'
p926
V\u000along get_stat_ctime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_ctim).tv_nsec;\u000a}\u000a\u000a
p927
S'MOV RAX,qword ptr [RDI + 0x70]\nRET\n'
p928
S'48 8b 47 70\nc3\n'
p929
S'.text:0000000000406790\n.text:0000000000406794\n'
p930
tp931
sS'quoting_options_from_style'
p932
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p933
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p934
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004060fd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401770\n'
p935
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 6e b6 ff ff\n'
p936
S'.text:00000000004060b0\n.text:00000000004060b4\n.text:00000000004060b7\n.text:00000000004060bc\n.text:00000000004060c1\n.text:00000000004060c5\n.text:00000000004060cd\n.text:00000000004060d0\n.text:00000000004060d2\n.text:00000000004060d4\n.text:00000000004060d8\n.text:00000000004060db\n.text:00000000004060df\n.text:00000000004060e4\n.text:00000000004060e9\n.text:00000000004060ed\n.text:00000000004060f1\n.text:00000000004060f5\n.text:00000000004060f8\n.text:00000000004060fc\n.text:00000000004060fd\n'
p937
tp938
sS'strcpy'
p939
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00611068)();\u000a  return pcVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x00611068]\n'
p942
S'ff 25 a2 f8 20 00\n'
p943
S'.plt:00000000004017c0\n'
p944
tp945
sS'get_stat_mtime_ns'
p946
(S'\n__stdcall get_stat_mtime_ns(stat * st)\n'
p947
V\u000along get_stat_mtime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_mtim).tv_nsec;\u000a}\u000a\u000a
p948
S'MOV RAX,qword ptr [RDI + 0x60]\nRET\n'
p949
S'48 8b 47 60\nc3\n'
p950
S'.text:00000000004067a0\n.text:00000000004067a4\n'
p951
tp952
sS'balance'
p953
(S'\n__stdcall balance()\n'
p954
V\u000avoid balance(int iParm1)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  \u000a  iVar1 = columns;\u000a  if (0 < columns) {\u000a    piVar3 = &column_vector->lines_stored;\u000a    iVar2 = 0;\u000a    iVar5 = 0;\u000a    do {\u000a      iVar2 = iVar2 + 1;\u000a      iVar4 = (uint)(iVar2 <= iParm1 % iVar1) + iParm1 / iVar1;\u000a      *piVar3 = iVar4;\u000a      piVar3[-1] = iVar5;\u000a      iVar5 = iVar5 + iVar4;\u000a      piVar3 = piVar3 + 0x10;\u000a    } while (iVar2 < iVar1);\u000a  }\u000a  return;\u000a}\u000a\u000a
p955
S'MOV R8D,EDI\nMOV R10D,dword ptr [0x006112a8]\nTEST R10D,R10D\nJLE 0x004049f8\nMOV RSI,qword ptr [0x006113e8]\nMOV R9D,dword ptr [0x006112a8]\nADD RSI,0x2c\nXOR ECX,ECX\nXOR R11D,R11D\nNOP word ptr CS:[RAX + RAX*0x1]\nINC ECX\nMOV EAX,R8D\nCDQ\nIDIV R10D\nXOR EDI,EDI\nCMP ECX,EDX\nSETLE DIL\nADD EDI,EAX\nMOV dword ptr [RSI],EDI\nMOV dword ptr [RSI + -0x4],R11D\nADD R11D,EDI\nADD RSI,0x40\nCMP ECX,R9D\nMOV R10D,R9D\nJL 0x004049d0\nRET\n'
p956
S'41 89 f8\n44 8b 15 fe c8 20 00\n45 85 d2\n7e 49\n48 8b 35 32 ca 20 00\n44 8b 0d eb c8 20 00\n48 83 c6 2c\n31 c9\n45 31 db\n66 2e 0f 1f 84 00 00 00 00 00\nff c1\n44 89 c0\n99\n41 f7 fa\n31 ff\n39 d1\n40 0f 9e c7\n01 c7\n89 3e\n44 89 5e fc\n41 01 fb\n48 83 c6 40\n44 39 c9\n45 89 ca\n7c d8\nc3\n'
p957
S'.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049af\n.text:00000000004049b6\n.text:00000000004049bd\n.text:00000000004049c1\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049d0\n.text:00000000004049d2\n.text:00000000004049d5\n.text:00000000004049d6\n.text:00000000004049d9\n.text:00000000004049db\n.text:00000000004049dd\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e9\n.text:00000000004049ec\n.text:00000000004049f0\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049f8\n'
p958
tp959
sS'get_stat_atime_ns'
p960
(S'\n__stdcall get_stat_atime_ns(stat * st)\n'
p961
V\u000along get_stat_atime_ns(stat *st)\u000a\u000a{\u000a  return (st->st_atim).tv_nsec;\u000a}\u000a\u000a
p962
S'MOV RAX,qword ptr [RDI + 0x50]\nRET\n'
p963
S'48 8b 47 50\nc3\n'
p964
S'.text:0000000000406780\n.text:0000000000406784\n'
p965
tp966
sS'c_isgraph'
p967
(S'\n__stdcall c_isgraph()\n'
p968
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p969
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p970
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p971
S'.text:0000000000409ab0\n.text:0000000000409ab3\n.text:0000000000409ab6\n.text:0000000000409ab9\n'
p972
tp973
sS'store_columns'
p974
(S'\n__stdcall store_columns()\n'
p975
V\u000avoid store_columns(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int *piVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  COLUMN *p;\u000a  int iVar5;\u000a  uint uVar6;\u000a  int iVar7;\u000a  uint uVar8;\u000a  \u000a  p = column_vector;\u000a  buff_current = 0;\u000a  iVar7 = columns - ((uint)(byte)~balance_columns & 1);\u000a  uVar8 = 0;\u000a  if (0 < iVar7) {\u000a    piVar2 = &column_vector->lines_stored;\u000a    iVar3 = iVar7;\u000a    do {\u000a      *piVar2 = 0;\u000a      piVar2 = piVar2 + 0x10;\u000a      iVar3 = iVar3 + -1;\u000a    } while (iVar3 != 0);\u000a    if (0 < iVar7) {\u000a      uVar6 = 0;\u000a      uVar8 = 0;\u000a      if (files_ready_to_read != 0) {\u000a        iVar3 = 1;\u000a        uVar6 = 0;\u000a        uVar8 = 0;\u000a        do {\u000a          p->current_line = uVar8;\u000a          if ((lines_per_body != 0) && (files_ready_to_read != 0)) {\u000a            iVar5 = -lines_per_body;\u000a            do {\u000a              iVar5 = iVar5 + 1;\u000a              if (p->status == OPEN) {\u000a                input_position = 0;\u000a                _Var1 = read_line(p);\u000a                if (_Var1 == false) {\u000a                  read_rest_of_line(p);\u000a                }\u000a                if ((p->status == OPEN) || (uVar6 != buff_current)) {\u000a                  p->lines_stored = p->lines_stored + 1;\u000a                  uVar4 = (ulong)uVar8;\u000a                  line_vector[uVar4] = uVar6;\u000a                  uVar8 = uVar8 + 1;\u000a                  end_vector[uVar4] = input_position;\u000a                  uVar6 = buff_current;\u000a                }\u000a              }\u000a            } while ((iVar5 != 0) && (files_ready_to_read != 0));\u000a          }\u000a          if (iVar7 <= iVar3) break;\u000a          iVar3 = iVar3 + 1;\u000a          p = p + 1;\u000a        } while (files_ready_to_read != 0);\u000a      }\u000a      goto LAB_0040495f;\u000a    }\u000a  }\u000a  uVar6 = 0;\u000aLAB_0040495f:\u000a  line_vector[(ulong)uVar8] = uVar6;\u000a  if (balance_columns != 1) {\u000a    return;\u000a  }\u000a  balance((ulong)uVar8);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [0x00611444],0x0\nMOV AL,byte ptr [0x0061137a]\nMOV R14D,dword ptr [0x006112a8]\nNOT AL\nMOVZX EAX,AL\nAND EAX,0x1\nSUB R14D,EAX\nXOR R15D,R15D\nTEST R14D,R14D\nJLE 0x0040495c\nMOV RBX,qword ptr [0x006113e8]\nLEA RAX,[RBX + 0x2c]\nMOV ECX,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV dword ptr [RAX],0x0\nADD RAX,0x40\nDEC ECX\nJNZ 0x00404860\nTEST R14D,R14D\nJLE 0x0040495c\nMOV EAX,dword ptr [0x006113f0]\nTEST EAX,EAX\nMOV R13D,0x0\nJZ 0x0040495f\nMOV R12D,0x1\nXOR R13D,R13D\nXOR R15D,R15D\nNOP word ptr [RAX + RAX*0x1]\nMOV dword ptr [RBX + 0x28],R15D\nMOV EAX,dword ptr [0x006113c4]\nTEST EAX,EAX\nJZ 0x00404940\nMOV ECX,dword ptr [0x006113f0]\nTEST ECX,ECX\nJZ 0x00404940\nMOV EBP,0x1\nSUB EBP,EAX\nNOP word ptr [RAX + RAX*0x1]\nCMP dword ptr [RBX + 0x10],0x0\nJNZ 0x00404930\nMOV dword ptr [0x0061145c],0x0\nMOV RDI,RBX\nCALL 0x00403d40\nTEST AL,AL\nJNZ 0x004048f4\nMOV RDI,RBX\nCALL 0x00404760\nCMP dword ptr [RBX + 0x10],0x0\nJZ 0x00404903\nCMP R13D,dword ptr [0x00611444]\nJZ 0x00404930\nINC dword ptr [RBX + 0x2c]\nMOV RAX,qword ptr [0x00611420]\nMOV ECX,R15D\nMOV dword ptr [RAX + RCX*0x4],R13D\nMOV EAX,dword ptr [0x0061145c]\nMOV RDX,qword ptr [0x00611428]\nINC R15D\nMOV dword ptr [RDX + RCX*0x4],EAX\nMOV R13D,dword ptr [0x00611444]\nNOP\nTEST EBP,EBP\nJZ 0x00404940\nMOV EAX,dword ptr [0x006113f0]\nINC EBP\nTEST EAX,EAX\nJNZ 0x004048d0\nCMP R12D,R14D\nJGE 0x0040495f\nINC R12D\nADD RBX,0x40\nMOV EAX,dword ptr [0x006113f0]\nTEST EAX,EAX\nJNZ 0x004048a0\nJMP 0x0040495f\nXOR R13D,R13D\nMOV RAX,qword ptr [0x00611420]\nMOV ECX,R15D\nMOV dword ptr [RAX + RCX*0x4],R13D\nCMP byte ptr [0x0061137a],0x1\nJNZ 0x00404989\nMOV EDI,R15D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004049a0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p977
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\nc7 05 1f cc 20 00 00 00 00 00\n8a 05 4f cb 20 00\n44 8b 35 76 ca 20 00\nf6 d0\n0f b6 c0\n83 e0 01\n41 29 c6\n45 31 ff\n45 85 f6\n0f 8e 13 01 00 00\n48 8b 1d 98 cb 20 00\n48 8d 43 2c\n44 89 f1\n66 0f 1f 84 00 00 00 00 00\nc7 00 00 00 00 00\n48 83 c0 40\nff c9\n75 f2\n45 85 f6\n0f 8e e5 00 00 00\n8b 05 73 cb 20 00\n85 c0\n41 bd 00 00 00 00\n0f 84 d4 00 00 00\n41 bc 01 00 00 00\n45 31 ed\n45 31 ff\n66 0f 1f 84 00 00 00 00 00\n44 89 7b 28\n8b 05 1a cb 20 00\n85 c0\n0f 84 8e 00 00 00\n8b 0d 38 cb 20 00\n85 c9\n0f 84 80 00 00 00\nbd 01 00 00 00\n29 c5\n66 0f 1f 84 00 00 00 00 00\n83 7b 10 00\n75 5a\nc7 05 7c cb 20 00 00 00 00 00\n48 89 df\ne8 58 f4 ff ff\n84 c0\n75 08\n48 89 df\ne8 6c fe ff ff\n83 7b 10 00\n74 09\n44 3b 2d 43 cb 20 00\n74 2d\nff 43 2c\n48 8b 05 13 cb 20 00\n44 89 f9\n44 89 2c 88\n8b 05 42 cb 20 00\n48 8b 15 07 cb 20 00\n41 ff c7\n89 04 8a\n44 8b 2d 16 cb 20 00\n66 90\n85 ed\n74 0c\n8b 05 b6 ca 20 00\nff c5\n85 c0\n75 90\n45 39 f4\n7d 1a\n41 ff c4\n48 83 c3 40\n8b 05 9e ca 20 00\n85 c0\n0f 85 46 ff ff ff\neb 03\n45 31 ed\n48 8b 05 ba ca 20 00\n44 89 f9\n44 89 2c 88\n80 3d 06 ca 20 00 01\n75 13\n44 89 ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 17\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p978
S'.text:0000000000404810\n.text:0000000000404811\n.text:0000000000404813\n.text:0000000000404815\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481a\n.text:000000000040481b\n.text:0000000000404825\n.text:000000000040482b\n.text:0000000000404832\n.text:0000000000404834\n.text:0000000000404837\n.text:000000000040483a\n.text:000000000040483d\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404849\n.text:0000000000404850\n.text:0000000000404854\n.text:0000000000404857\n.text:0000000000404860\n.text:0000000000404866\n.text:000000000040486a\n.text:000000000040486c\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404877\n.text:000000000040487d\n.text:000000000040487f\n.text:0000000000404885\n.text:000000000040488b\n.text:0000000000404891\n.text:0000000000404894\n.text:0000000000404897\n.text:00000000004048a0\n.text:00000000004048a4\n.text:00000000004048aa\n.text:00000000004048ac\n.text:00000000004048b2\n.text:00000000004048b8\n.text:00000000004048ba\n.text:00000000004048c0\n.text:00000000004048c5\n.text:00000000004048c7\n.text:00000000004048d0\n.text:00000000004048d4\n.text:00000000004048d6\n.text:00000000004048e0\n.text:00000000004048e3\n.text:00000000004048e8\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048ef\n.text:00000000004048f4\n.text:00000000004048f8\n.text:00000000004048fa\n.text:0000000000404901\n.text:0000000000404903\n.text:0000000000404906\n.text:000000000040490d\n.text:0000000000404910\n.text:0000000000404914\n.text:000000000040491a\n.text:0000000000404921\n.text:0000000000404924\n.text:0000000000404927\n.text:000000000040492e\n.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404934\n.text:000000000040493a\n.text:000000000040493c\n.text:000000000040493e\n.text:0000000000404940\n.text:0000000000404943\n.text:0000000000404945\n.text:0000000000404948\n.text:000000000040494c\n.text:0000000000404952\n.text:0000000000404954\n.text:000000000040495a\n.text:000000000040495c\n.text:000000000040495f\n.text:0000000000404966\n.text:0000000000404969\n.text:000000000040496d\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404979\n.text:000000000040497d\n.text:000000000040497e\n.text:0000000000404980\n.text:0000000000404982\n.text:0000000000404984\n.text:0000000000404986\n.text:0000000000404987\n.text:0000000000404989\n.text:000000000040498d\n.text:000000000040498e\n.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404994\n.text:0000000000404996\n.text:0000000000404997\n'
p979
tp980
sS'store_char'
p981
(S'\n__stdcall store_char()\n'
p982
V\u000avoid store_char(char cParm1)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  if (buff_allocated <= (ulong)buff_current) {\u000a    buff = (char *)x2realloc(buff,&buff_allocated);\u000a  }\u000a  uVar1 = (ulong)buff_current;\u000a  buff_current = buff_current + 1;\u000a  buff[uVar1] = cParm1;\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH RBX\nMOV EBX,EDI\nMOV EAX,dword ptr [0x00611444]\nCMP RAX,qword ptr [0x00611438]\nJC 0x00403b6a\nMOV RDI,qword ptr [0x00611430]\nMOV ESI,0x611438\nCALL 0x004086d0\nMOV qword ptr [0x00611430],RAX\nMOV RAX,qword ptr [0x00611430]\nMOV ECX,dword ptr [0x00611444]\nLEA EDX,[RCX + 0x1]\nMOV dword ptr [0x00611444],EDX\nMOV byte ptr [RAX + RCX*0x1],BL\nPOP RBX\nRET\n'
p984
S'53\n89 fb\n8b 05 fb d8 20 00\n48 3b 05 e8 d8 20 00\n72 18\n48 8b 3d d7 d8 20 00\nbe 38 14 61 00\ne8 6d 4b 00 00\n48 89 05 c6 d8 20 00\n48 8b 05 bf d8 20 00\n8b 0d cd d8 20 00\n8d 51 01\n89 15 c4 d8 20 00\n88 1c 08\n5b\nc3\n'
p985
S'.text:0000000000403b40\n.text:0000000000403b41\n.text:0000000000403b43\n.text:0000000000403b49\n.text:0000000000403b50\n.text:0000000000403b52\n.text:0000000000403b59\n.text:0000000000403b5e\n.text:0000000000403b63\n.text:0000000000403b6a\n.text:0000000000403b71\n.text:0000000000403b77\n.text:0000000000403b7a\n.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b84\n'
p986
tp987
sS'hard_locale'
p988
(S'\n__stdcall hard_locale()\n'
p989
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p990
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401a80\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00404c0d\nCMP byte ptr [RAX],0x43\nJNZ 0x00404bfa\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00404c0b\nMOV ESI,0x40c891\nMOV RDI,RAX\nCALL 0x00401990\nTEST EAX,EAX\nJNZ 0x00404c0d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p991
S'53\n31 f6\ne8 98 ce ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 91 c8 40 00\n48 89 c7\ne8 89 cd ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p992
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be8\n.text:0000000000404bea\n.text:0000000000404bed\n.text:0000000000404bef\n.text:0000000000404bf2\n.text:0000000000404bf4\n.text:0000000000404bf8\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c02\n.text:0000000000404c07\n.text:0000000000404c09\n.text:0000000000404c0b\n.text:0000000000404c0d\n.text:0000000000404c0f\n.text:0000000000404c10\n'
p993
tp994
sS'quotearg_buffer_restyled'
p995
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p996
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040512c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040512c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040512c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040512c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040512c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040512c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040512c_caseD_7;\u000aswitchD_0040512c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040512c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040512c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00405bf0;\u000aLAB_00405310:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00405bf9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00405c08:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040531b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040535f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040535f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00405c08;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00405b35;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00405a40;\u000a    }\u000a    goto LAB_00405c08;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00405b6a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00405c08;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00405b99;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00405658;\u000a  case '\u005ca':\u000a    goto joined_r0x00405548;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00405548;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00405376_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00405548;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00405548;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00405376_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00405548:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00405aae;\u000a    }\u000a    goto LAB_00405c08;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00405c08;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00405c08;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00405c08;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00405c08;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00405c08;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00405376_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00405b06;\u000a      goto joined_r0x00405af8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00405601:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00405af8;\u000a      goto LAB_00405b06;\u000a    }\u000a    goto LAB_00405c08;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00405c08;\u000a  }\u000a  goto joined_r0x00405a40;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00405b6a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00405b99;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00405b99:\u000a  if (1 < uVar10) {\u000aLAB_00405676:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00405732;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00405601;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00405732:\u000a        if (bVar6 != 0) goto LAB_00405c08;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00405658:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00405676;\u000ajoined_r0x00405a40:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00405a40:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00405a67;\u000aLAB_00405aa0:\u000a    if (bVar22) goto LAB_00405aa5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00405aa0;\u000aLAB_00405a67:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00405aa5:\u000a      if (bVar6 != 0) goto LAB_00405c08;\u000aLAB_00405aae:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00405af8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00405b06:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00405af8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00405b35:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00405310;\u000aLAB_00405bf0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00405bf9;\u000a  goto LAB_0040531b;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401870\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00405cd5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40cbe0 + RAX*0x8]\nMOV EDI,0x40d106\nMOV ESI,R15D\nCALL 0x00406380\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40dcfb\nMOV ESI,R15D\nCALL 0x00406380\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040518d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00405190\nNOP\nCMP R12,RSI\nJNC 0x0040517e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00405170\nJMP 0x00405190\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401880\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040525c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040525c\nMOV ECX,0x40d104\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00405256\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004051f7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00405224\nTEST RSI,RSI\nJZ 0x00405211\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40dcfb\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00405232\nMOV ECX,0x40dcfb\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040525c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00405cac\nMOV ECX,0x40d104\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00405bf0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00405bf9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040535f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040535a\nCMP R11,-0x1\nJNZ 0x0040535a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401880\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004053b0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040560c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40cc38 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00405c08\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00405a60\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00405a67\nJMP 0x00405aa0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401950\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004053fd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00405361\nJMP 0x00405c08\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00405361\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040538b\nCMP EBX,0x2\nJNZ 0x0040538b\nTEST R13,R13\nJNZ 0x0040538b\nJMP 0x00405c08\nCMP R11,-0x1\nJZ 0x004057e3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00405803\nJMP 0x0040538b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405814\nTEST R8B,R8B\nJNZ 0x00405c08\nCMP EBX,0x2\nJNZ 0x004054b8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004054b8\nCMP R12,RSI\nJNC 0x00405493\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004054a2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004054b1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004054c2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00405988\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00405988\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00405988\nCMP RCX,RSI\nJNC 0x004054fc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040550b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nJMP 0x00405a60\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405389\nJMP 0x0040556a\nMOV DL,0x74\nJMP 0x00405552\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405389\nJMP 0x0040556a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405389\nJMP 0x0040556a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00405c08\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405389\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00405aae\nJMP 0x00405c08\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00405389\nTEST R8B,R8B\nJNZ 0x00405c08\nCMP R12,RSI\nJNC 0x0040559a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004055a9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004055b8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00405389\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040599b\nCMP EBX,0x2\nJNZ 0x00405389\nTEST R8B,R8B\nJZ 0x00405389\nJMP 0x00405c08\nCMP EBX,0x2\nJNZ 0x00405834\nTEST R8B,R8B\nJNZ 0x00405c08\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00405b06\nJMP 0x00405b29\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00405855\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401b90\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405a48\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00405a48\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00405732\nJMP 0x00405700\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004056e9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004056e6\nCMP R12,RSI\nJNC 0x004056cb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004056da\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00405720\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00405720\nTEST BPL,0x1\nJZ 0x004057c3\nCMP R12,RSI\nJNC 0x00405714\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004057c3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00405700\nTEST R8B,R8B\nJNZ 0x00405c08\nCMP EBX,0x2\nJNZ 0x0040577a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040577a\nCMP R12,RSI\nJNC 0x00405752\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405761\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405770\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00405784\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040579b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004057b5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004056b0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00405b06\nJMP 0x00405b29\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040538b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040538b\nJMP 0x00405c08\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00405b35\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nJMP 0x00405a60\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00405552\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00405b06\nJMP 0x00405b29\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00405877\nMOV RDI,R10\nCALL 0x00401880\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004018a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00405b4f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00405b47\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405b56\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040593e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00405936\nBT RDI,RDX\nJC 0x00405ca2\nINC RCX\nCMP RCX,R14\nJC 0x00405920\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401b70\nTEST EAX,EAX\nJNZ 0x00405953\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401b60\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405895\nJMP 0x00405b99\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nJMP 0x00405a60\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00405389\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00405389\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00405389\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040538b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00405bd2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00405c08\nCMP R12,RSI\nJNC 0x004059fe\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00405a11\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405a20\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00405a2f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nJMP 0x00405a60\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00405aa0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00405aa5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00405b00\nJMP 0x00405aa5\nTEST BPL,BPL\nJZ 0x00405b00\nTEST R8B,R8B\nJNZ 0x00405c08\nCMP EBX,0x2\nJNZ 0x00405ae8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405ae8\nCMP R12,RSI\nJNC 0x00405ac3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405ad2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405ae1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405af2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00405b32\nJMP 0x00405b2e\nTEST DIL,0x1\nJZ 0x00405b29\nAND AL,0x1\nJNZ 0x00405b29\nCMP R12,RSI\nJNC 0x00405b14\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405b23\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00405b32\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00405bf0\nJMP 0x00405310\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00405b94\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00405b8c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00405bc8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00405b6a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405b99\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00405658\nJMP 0x00405676\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00405b99\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00405396\nJMP 0x00405a60\nCMP R13,R11\nJNZ 0x0040531b\nTEST R8B,R8B\nJZ 0x00405c62\nCMP EBX,0x2\nJNZ 0x00405c62\nTEST R12,R12\nJNZ 0x00405c62\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004050a0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00405c96\nTEST R8B,R8B\nJNZ 0x00405c96\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00405c96\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00405c89\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00405c80\nCMP R12,RSI\nJNC 0x00405c4d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00405c4d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00405c08\nTEST RSI,RSI\nJZ 0x00405cb9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40d104\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040525c\nCALL 0x00401770\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 a2 c7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 e0 cb 40 00\nbf 06 d1 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf fb dc 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 e3 c6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 04 d1 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 fb dc 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 fb dc 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 04 d1 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 43 c5 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 38 cc 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 87 c5 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 67 c5 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 11 c0 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 e3 bf ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 29 c2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 f2 c1 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 04 d1 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 96 ba ff ff\n'
p999
S'.text:00000000004050a0\n.text:00000000004050a1\n.text:00000000004050a3\n.text:00000000004050a5\n.text:00000000004050a7\n.text:00000000004050a9\n.text:00000000004050aa\n.text:00000000004050b1\n.text:00000000004050b4\n.text:00000000004050b7\n.text:00000000004050ba\n.text:00000000004050bf\n.text:00000000004050c4\n.text:00000000004050c9\n.text:00000000004050ce\n.text:00000000004050d6\n.text:00000000004050da\n.text:00000000004050e0\n.text:00000000004050e8\n.text:00000000004050ed\n.text:00000000004050f5\n.text:00000000004050fa\n.text:00000000004050fe\n.text:0000000000405100\n.text:0000000000405103\n.text:0000000000405106\n.text:0000000000405109\n.text:000000000040510e\n.text:0000000000405111\n.text:0000000000405114\n.text:0000000000405117\n.text:000000000040511a\n.text:000000000040511c\n.text:000000000040511f\n.text:0000000000405124\n.text:0000000000405127\n.text:000000000040512c\n.text:0000000000405133\n.text:0000000000405138\n.text:000000000040513b\n.text:0000000000405140\n.text:0000000000405145\n.text:000000000040514a\n.text:000000000040514d\n.text:0000000000405152\n.text:0000000000405157\n.text:000000000040515c\n.text:000000000040515e\n.text:0000000000405160\n.text:0000000000405165\n.text:0000000000405167\n.text:000000000040516a\n.text:000000000040516c\n.text:000000000040516e\n.text:0000000000405170\n.text:0000000000405173\n.text:0000000000405175\n.text:000000000040517a\n.text:000000000040517e\n.text:0000000000405184\n.text:0000000000405187\n.text:0000000000405189\n.text:000000000040518b\n.text:000000000040518d\n.text:0000000000405190\n.text:0000000000405195\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a5\n.text:00000000004051a8\n.text:00000000004051ab\n.text:00000000004051ae\n.text:00000000004051b3\n.text:00000000004051b6\n.text:00000000004051b9\n.text:00000000004051be\n.text:00000000004051c1\n.text:00000000004051c3\n.text:00000000004051c6\n.text:00000000004051c8\n.text:00000000004051ca\n.text:00000000004051cd\n.text:00000000004051d2\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e5\n.text:00000000004051e7\n.text:00000000004051ea\n.text:00000000004051ed\n.text:00000000004051f0\n.text:00000000004051f2\n.text:00000000004051f4\n.text:00000000004051f7\n.text:00000000004051fa\n.text:00000000004051ff\n.text:0000000000405202\n.text:0000000000405204\n.text:0000000000405207\n.text:0000000000405209\n.text:000000000040520e\n.text:0000000000405211\n.text:0000000000405216\n.text:000000000040521c\n.text:0000000000405222\n.text:0000000000405224\n.text:0000000000405229\n.text:000000000040522f\n.text:0000000000405232\n.text:0000000000405235\n.text:0000000000405238\n.text:000000000040523a\n.text:000000000040523f\n.text:0000000000405242\n.text:0000000000405248\n.text:000000000040524d\n.text:0000000000405253\n.text:0000000000405256\n.text:0000000000405259\n.text:000000000040525c\n.text:0000000000405264\n.text:0000000000405266\n.text:0000000000405268\n.text:000000000040526b\n.text:000000000040526f\n.text:0000000000405271\n.text:0000000000405274\n.text:0000000000405278\n.text:000000000040527a\n.text:000000000040527d\n.text:0000000000405280\n.text:0000000000405283\n.text:0000000000405285\n.text:0000000000405289\n.text:000000000040528b\n.text:000000000040528f\n.text:0000000000405292\n.text:0000000000405295\n.text:0000000000405298\n.text:000000000040529a\n.text:000000000040529e\n.text:00000000004052a7\n.text:00000000004052aa\n.text:00000000004052ac\n.text:00000000004052b0\n.text:00000000004052b2\n.text:00000000004052b6\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052bf\n.text:00000000004052c1\n.text:00000000004052c4\n.text:00000000004052c8\n.text:00000000004052cd\n.text:00000000004052d0\n.text:00000000004052d4\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e2\n.text:00000000004052e4\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052ed\n.text:00000000004052f2\n.text:00000000004052f6\n.text:00000000004052fb\n.text:0000000000405300\n.text:0000000000405304\n.text:000000000040530a\n.text:0000000000405310\n.text:0000000000405315\n.text:000000000040531b\n.text:0000000000405320\n.text:0000000000405322\n.text:0000000000405327\n.text:000000000040532b\n.text:000000000040532d\n.text:0000000000405331\n.text:0000000000405333\n.text:0000000000405335\n.text:0000000000405338\n.text:000000000040533d\n.text:000000000040533f\n.text:0000000000405344\n.text:0000000000405349\n.text:000000000040534d\n.text:0000000000405352\n.text:0000000000405357\n.text:000000000040535a\n.text:000000000040535d\n.text:000000000040535f\n.text:0000000000405361\n.text:0000000000405366\n.text:000000000040536a\n.text:0000000000405370\n.text:0000000000405372\n.text:0000000000405374\n.text:0000000000405376\n.text:000000000040537e\n.text:0000000000405383\n.text:0000000000405389\n.text:000000000040538b\n.text:0000000000405390\n.text:0000000000405396\n.text:000000000040539f\n.text:00000000004053a5\n.text:00000000004053b0\n.text:00000000004053b2\n.text:00000000004053b5\n.text:00000000004053b9\n.text:00000000004053c1\n.text:00000000004053c4\n.text:00000000004053c9\n.text:00000000004053cb\n.text:00000000004053ce\n.text:00000000004053d0\n.text:00000000004053d5\n.text:00000000004053d8\n.text:00000000004053dd\n.text:00000000004053e0\n.text:00000000004053e5\n.text:00000000004053e9\n.text:00000000004053ee\n.text:00000000004053f0\n.text:00000000004053f2\n.text:00000000004053f8\n.text:00000000004053fd\n.text:0000000000405402\n.text:0000000000405405\n.text:000000000040540a\n.text:000000000040540e\n.text:0000000000405413\n.text:0000000000405418\n.text:000000000040541a\n.text:000000000040541c\n.text:0000000000405421\n.text:0000000000405423\n.text:0000000000405426\n.text:000000000040542c\n.text:000000000040542f\n.text:0000000000405435\n.text:0000000000405438\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405447\n.text:000000000040544d\n.text:0000000000405450\n.text:0000000000405453\n.text:0000000000405457\n.text:000000000040545a\n.text:000000000040545c\n.text:000000000040545f\n.text:0000000000405465\n.text:000000000040546a\n.text:000000000040546f\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547e\n.text:0000000000405481\n.text:0000000000405483\n.text:0000000000405485\n.text:0000000000405487\n.text:0000000000405489\n.text:000000000040548c\n.text:000000000040548e\n.text:0000000000405493\n.text:0000000000405498\n.text:000000000040549b\n.text:000000000040549d\n.text:00000000004054a2\n.text:00000000004054a7\n.text:00000000004054aa\n.text:00000000004054ac\n.text:00000000004054b1\n.text:00000000004054b5\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054bd\n.text:00000000004054c2\n.text:00000000004054c7\n.text:00000000004054c9\n.text:00000000004054cc\n.text:00000000004054cf\n.text:00000000004054d5\n.text:00000000004054d9\n.text:00000000004054dc\n.text:00000000004054e2\n.text:00000000004054e6\n.text:00000000004054e9\n.text:00000000004054ec\n.text:00000000004054f2\n.text:00000000004054f5\n.text:00000000004054f7\n.text:00000000004054fc\n.text:0000000000405501\n.text:0000000000405504\n.text:0000000000405506\n.text:000000000040550b\n.text:000000000040550f\n.text:0000000000405514\n.text:000000000040551a\n.text:000000000040551f\n.text:0000000000405521\n.text:0000000000405526\n.text:000000000040552c\n.text:000000000040552e\n.text:0000000000405530\n.text:0000000000405532\n.text:0000000000405534\n.text:0000000000405539\n.text:000000000040553f\n.text:0000000000405541\n.text:0000000000405543\n.text:0000000000405548\n.text:000000000040554e\n.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405557\n.text:0000000000405559\n.text:000000000040555f\n.text:0000000000405564\n.text:000000000040556a\n.text:000000000040556d\n.text:0000000000405570\n.text:0000000000405576\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405581\n.text:0000000000405587\n.text:000000000040558a\n.text:0000000000405590\n.text:0000000000405593\n.text:0000000000405595\n.text:000000000040559a\n.text:000000000040559f\n.text:00000000004055a2\n.text:00000000004055a4\n.text:00000000004055a9\n.text:00000000004055ae\n.text:00000000004055b1\n.text:00000000004055b3\n.text:00000000004055b8\n.text:00000000004055bc\n.text:00000000004055be\n.text:00000000004055c3\n.text:00000000004055c6\n.text:00000000004055c9\n.text:00000000004055cf\n.text:00000000004055d2\n.text:00000000004055d8\n.text:00000000004055db\n.text:00000000004055e1\n.text:00000000004055e6\n.text:00000000004055e9\n.text:00000000004055ef\n.text:00000000004055f2\n.text:00000000004055f8\n.text:00000000004055fb\n.text:00000000004055fd\n.text:0000000000405601\n.text:0000000000405607\n.text:000000000040560c\n.text:0000000000405610\n.text:0000000000405619\n.text:000000000040561f\n.text:0000000000405624\n.text:0000000000405629\n.text:000000000040562e\n.text:0000000000405631\n.text:0000000000405636\n.text:0000000000405639\n.text:000000000040563c\n.text:0000000000405641\n.text:0000000000405646\n.text:000000000040564a\n.text:000000000040564f\n.text:0000000000405654\n.text:0000000000405658\n.text:000000000040565a\n.text:000000000040565f\n.text:0000000000405665\n.text:0000000000405668\n.text:000000000040566a\n.text:000000000040566d\n.text:0000000000405670\n.text:0000000000405676\n.text:000000000040567b\n.text:000000000040567e\n.text:0000000000405681\n.text:0000000000405684\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568d\n.text:000000000040568f\n.text:0000000000405694\n.text:0000000000405699\n.text:000000000040569f\n.text:00000000004056b0\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056ba\n.text:00000000004056bc\n.text:00000000004056bf\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056cb\n.text:00000000004056d0\n.text:00000000004056d3\n.text:00000000004056d5\n.text:00000000004056da\n.text:00000000004056de\n.text:00000000004056e6\n.text:00000000004056e9\n.text:00000000004056ec\n.text:00000000004056ee\n.text:00000000004056f2\n.text:0000000000405700\n.text:0000000000405704\n.text:000000000040570a\n.text:000000000040570d\n.text:000000000040570f\n.text:0000000000405714\n.text:0000000000405717\n.text:0000000000405719\n.text:0000000000405720\n.text:0000000000405723\n.text:0000000000405728\n.text:000000000040572b\n.text:0000000000405730\n.text:0000000000405732\n.text:0000000000405735\n.text:000000000040573b\n.text:000000000040573e\n.text:0000000000405740\n.text:0000000000405744\n.text:0000000000405746\n.text:0000000000405748\n.text:000000000040574b\n.text:000000000040574d\n.text:0000000000405752\n.text:0000000000405757\n.text:000000000040575a\n.text:000000000040575c\n.text:0000000000405761\n.text:0000000000405766\n.text:0000000000405769\n.text:000000000040576b\n.text:0000000000405770\n.text:0000000000405774\n.text:0000000000405776\n.text:000000000040577a\n.text:000000000040577d\n.text:000000000040577f\n.text:0000000000405784\n.text:0000000000405789\n.text:000000000040578c\n.text:000000000040578e\n.text:0000000000405791\n.text:0000000000405794\n.text:0000000000405797\n.text:000000000040579b\n.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a5\n.text:00000000004057a8\n.text:00000000004057ab\n.text:00000000004057ae\n.text:00000000004057b1\n.text:00000000004057b5\n.text:00000000004057b9\n.text:00000000004057bd\n.text:00000000004057c1\n.text:00000000004057c3\n.text:00000000004057c7\n.text:00000000004057ca\n.text:00000000004057d0\n.text:00000000004057d4\n.text:00000000004057d8\n.text:00000000004057de\n.text:00000000004057e3\n.text:00000000004057e6\n.text:00000000004057e9\n.text:00000000004057ee\n.text:00000000004057f1\n.text:00000000004057f3\n.text:00000000004057f6\n.text:00000000004057fd\n.text:0000000000405803\n.text:0000000000405805\n.text:0000000000405809\n.text:000000000040580f\n.text:0000000000405814\n.text:0000000000405819\n.text:000000000040581f\n.text:0000000000405822\n.text:0000000000405824\n.text:0000000000405829\n.text:000000000040582f\n.text:0000000000405834\n.text:0000000000405836\n.text:000000000040583b\n.text:0000000000405841\n.text:0000000000405843\n.text:0000000000405846\n.text:000000000040584a\n.text:0000000000405850\n.text:0000000000405855\n.text:0000000000405861\n.text:0000000000405865\n.text:0000000000405867\n.text:000000000040586a\n.text:000000000040586f\n.text:0000000000405874\n.text:0000000000405877\n.text:000000000040587b\n.text:0000000000405880\n.text:0000000000405882\n.text:0000000000405886\n.text:0000000000405888\n.text:0000000000405890\n.text:0000000000405895\n.text:000000000040589a\n.text:000000000040589e\n.text:00000000004058a2\n.text:00000000004058aa\n.text:00000000004058ad\n.text:00000000004058b2\n.text:00000000004058b5\n.text:00000000004058b8\n.text:00000000004058bd\n.text:00000000004058c0\n.text:00000000004058c3\n.text:00000000004058c9\n.text:00000000004058cd\n.text:00000000004058d7\n.text:00000000004058dd\n.text:00000000004058e1\n.text:00000000004058e6\n.text:00000000004058ec\n.text:00000000004058f0\n.text:00000000004058f3\n.text:00000000004058f7\n.text:00000000004058f9\n.text:00000000004058fe\n.text:0000000000405903\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590e\n.text:0000000000405913\n.text:0000000000405917\n.text:000000000040591c\n.text:0000000000405920\n.text:0000000000405924\n.text:0000000000405927\n.text:000000000040592a\n.text:000000000040592c\n.text:0000000000405930\n.text:0000000000405936\n.text:0000000000405939\n.text:000000000040593c\n.text:000000000040593e\n.text:0000000000405942\n.text:0000000000405947\n.text:0000000000405949\n.text:000000000040594b\n.text:0000000000405953\n.text:0000000000405958\n.text:000000000040595b\n.text:0000000000405963\n.text:0000000000405966\n.text:0000000000405969\n.text:000000000040596e\n.text:0000000000405971\n.text:0000000000405973\n.text:0000000000405978\n.text:000000000040597d\n.text:0000000000405983\n.text:0000000000405988\n.text:000000000040598b\n.text:0000000000405990\n.text:0000000000405996\n.text:000000000040599b\n.text:00000000004059a0\n.text:00000000004059a6\n.text:00000000004059aa\n.text:00000000004059ad\n.text:00000000004059b3\n.text:00000000004059b9\n.text:00000000004059bf\n.text:00000000004059c4\n.text:00000000004059c6\n.text:00000000004059c9\n.text:00000000004059cf\n.text:00000000004059d3\n.text:00000000004059d5\n.text:00000000004059df\n.text:00000000004059e3\n.text:00000000004059e9\n.text:00000000004059ec\n.text:00000000004059ee\n.text:00000000004059f4\n.text:00000000004059f7\n.text:00000000004059f9\n.text:00000000004059fe\n.text:0000000000405a03\n.text:0000000000405a06\n.text:0000000000405a0a\n.text:0000000000405a0c\n.text:0000000000405a11\n.text:0000000000405a16\n.text:0000000000405a19\n.text:0000000000405a1b\n.text:0000000000405a20\n.text:0000000000405a25\n.text:0000000000405a28\n.text:0000000000405a2a\n.text:0000000000405a2f\n.text:0000000000405a33\n.text:0000000000405a35\n.text:0000000000405a38\n.text:0000000000405a3b\n.text:0000000000405a40\n.text:0000000000405a46\n.text:0000000000405a48\n.text:0000000000405a4d\n.text:0000000000405a52\n.text:0000000000405a58\n.text:0000000000405a60\n.text:0000000000405a65\n.text:0000000000405a67\n.text:0000000000405a6c\n.text:0000000000405a6f\n.text:0000000000405a71\n.text:0000000000405a74\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7c\n.text:0000000000405a7f\n.text:0000000000405a81\n.text:0000000000405a89\n.text:0000000000405a8c\n.text:0000000000405a8e\n.text:0000000000405a90\n.text:0000000000405aa0\n.text:0000000000405aa3\n.text:0000000000405aa5\n.text:0000000000405aa8\n.text:0000000000405aae\n.text:0000000000405ab1\n.text:0000000000405ab3\n.text:0000000000405ab5\n.text:0000000000405ab7\n.text:0000000000405ab9\n.text:0000000000405abc\n.text:0000000000405abe\n.text:0000000000405ac3\n.text:0000000000405ac8\n.text:0000000000405acb\n.text:0000000000405acd\n.text:0000000000405ad2\n.text:0000000000405ad7\n.text:0000000000405ada\n.text:0000000000405adc\n.text:0000000000405ae1\n.text:0000000000405ae5\n.text:0000000000405ae8\n.text:0000000000405aeb\n.text:0000000000405aed\n.text:0000000000405af2\n.text:0000000000405af5\n.text:0000000000405af8\n.text:0000000000405afa\n.text:0000000000405b00\n.text:0000000000405b04\n.text:0000000000405b06\n.text:0000000000405b08\n.text:0000000000405b0a\n.text:0000000000405b0d\n.text:0000000000405b0f\n.text:0000000000405b14\n.text:0000000000405b19\n.text:0000000000405b1c\n.text:0000000000405b1e\n.text:0000000000405b23\n.text:0000000000405b27\n.text:0000000000405b29\n.text:0000000000405b2c\n.text:0000000000405b2e\n.text:0000000000405b32\n.text:0000000000405b35\n.text:0000000000405b38\n.text:0000000000405b3c\n.text:0000000000405b42\n.text:0000000000405b47\n.text:0000000000405b4f\n.text:0000000000405b54\n.text:0000000000405b56\n.text:0000000000405b5e\n.text:0000000000405b63\n.text:0000000000405b65\n.text:0000000000405b6a\n.text:0000000000405b6f\n.text:0000000000405b73\n.text:0000000000405b75\n.text:0000000000405b7a\n.text:0000000000405b7d\n.text:0000000000405b80\n.text:0000000000405b82\n.text:0000000000405b8a\n.text:0000000000405b8c\n.text:0000000000405b94\n.text:0000000000405b99\n.text:0000000000405b9d\n.text:0000000000405ba2\n.text:0000000000405ba7\n.text:0000000000405bab\n.text:0000000000405bb0\n.text:0000000000405bb5\n.text:0000000000405bb9\n.text:0000000000405bbd\n.text:0000000000405bc3\n.text:0000000000405bc8\n.text:0000000000405bd0\n.text:0000000000405bd2\n.text:0000000000405bd4\n.text:0000000000405bd8\n.text:0000000000405bdd\n.text:0000000000405be3\n.text:0000000000405bf0\n.text:0000000000405bf3\n.text:0000000000405bf9\n.text:0000000000405bfc\n.text:0000000000405bfe\n.text:0000000000405c01\n.text:0000000000405c03\n.text:0000000000405c06\n.text:0000000000405c08\n.text:0000000000405c10\n.text:0000000000405c16\n.text:0000000000405c1a\n.text:0000000000405c1d\n.text:0000000000405c21\n.text:0000000000405c26\n.text:0000000000405c2a\n.text:0000000000405c2e\n.text:0000000000405c31\n.text:0000000000405c34\n.text:0000000000405c37\n.text:0000000000405c3b\n.text:0000000000405c3f\n.text:0000000000405c41\n.text:0000000000405c46\n.text:0000000000405c4a\n.text:0000000000405c4d\n.text:0000000000405c50\n.text:0000000000405c57\n.text:0000000000405c58\n.text:0000000000405c5a\n.text:0000000000405c5c\n.text:0000000000405c5e\n.text:0000000000405c60\n.text:0000000000405c61\n.text:0000000000405c62\n.text:0000000000405c6a\n.text:0000000000405c6d\n.text:0000000000405c6f\n.text:0000000000405c72\n.text:0000000000405c74\n.text:0000000000405c76\n.text:0000000000405c78\n.text:0000000000405c7a\n.text:0000000000405c7d\n.text:0000000000405c80\n.text:0000000000405c83\n.text:0000000000405c85\n.text:0000000000405c89\n.text:0000000000405c8c\n.text:0000000000405c8f\n.text:0000000000405c92\n.text:0000000000405c94\n.text:0000000000405c96\n.text:0000000000405c99\n.text:0000000000405c9b\n.text:0000000000405ca0\n.text:0000000000405ca2\n.text:0000000000405ca7\n.text:0000000000405cac\n.text:0000000000405caf\n.text:0000000000405cb1\n.text:0000000000405cb6\n.text:0000000000405cb9\n.text:0000000000405cbe\n.text:0000000000405cc1\n.text:0000000000405cc7\n.text:0000000000405ccd\n.text:0000000000405cd0\n.text:0000000000405cd5\n'
p1000
tp1001
sS'set_quoting_style'
p1002
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1003
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1004
S'TEST RDI,RDI\nMOV EAX,0x611480\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1005
S'48 85 ff\nb8 80 14 61 00\n48 0f 45 c7\n89 30\nc3\n'
p1006
S'.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f88\n.text:0000000000404f8c\n.text:0000000000404f8e\n'
p1007
tp1008
sS'textdomain'
p1009
(S'\n__stdcall textdomain()\n'
p1010
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_006110a0)();\u000a  return;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x006110a0]\n'
p1012
S'ff 25 6a f8 20 00\n'
p1013
S'.plt:0000000000401830\n'
p1014
tp1015
sS'tzfree'
p1016
(S'\n__stdcall tzfree(timezone_t tz)\n'
p1017
V\u000avoid tzfree(timezone_t tz)\u000a\u000a{\u000a  tm_zone *ptVar1;\u000a  \u000a  if ((timezone_t)0x1 < tz) {\u000a    do {\u000a      ptVar1 = tz->next;\u000a      free(tz);\u000a      tz = (timezone_t)ptVar1;\u000a    } while (ptVar1 != (tm_zone *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH RBX\nCMP RDI,0x2\nJC 0x00409620\nNOP word ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI]\nCALL 0x00401740\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00409610\nPOP RBX\nRET\n'
p1019
S'53\n48 83 ff 02\n72 19\n66 0f 1f 84 00 00 00 00 00\n48 8b 1f\ne8 28 81 ff ff\n48 85 db\n48 89 df\n75 f0\n5b\nc3\n'
p1020
S'.text:0000000000409600\n.text:0000000000409601\n.text:0000000000409605\n.text:0000000000409607\n.text:0000000000409610\n.text:0000000000409613\n.text:0000000000409618\n.text:000000000040961b\n.text:000000000040961e\n.text:0000000000409620\n.text:0000000000409621\n'
p1021
tp1022
sS'xmemdup'
p1023
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1024
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1025
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004085f0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004019b0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1026
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 5c 92 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1027
S'.text:0000000000408730\n.text:0000000000408732\n.text:0000000000408734\n.text:0000000000408735\n.text:0000000000408738\n.text:000000000040873b\n.text:000000000040873e\n.text:0000000000408743\n.text:0000000000408746\n.text:0000000000408749\n.text:000000000040874c\n.text:000000000040874f\n.text:0000000000408754\n.text:0000000000408757\n.text:0000000000408758\n.text:000000000040875a\n.text:000000000040875c\n'
p1028
tp1029
sS'change_env'
p1030
(S'\n__stdcall change_env(timezone_t tz)\n'
p1031
V\u000a_Bool change_env(timezone_t tz)\u000a\u000a{\u000a  int iVar1;\u000a  char *tz_00;\u000a  \u000a  tz_00 = tz->abbrs;\u000a  if (tz->tz_is_set == 0) {\u000a    tz_00 = (char *)0x0;\u000a  }\u000a  iVar1 = setenv_TZ(tz_00);\u000a  if (iVar1 == 0) {\u000a    tzset();\u000a  }\u000a  return (_Bool)(iVar1 == 0);\u000a}\u000a\u000a
p1032
S'PUSH RBX\nXOR EBX,EBX\nCMP byte ptr [RDI + 0x8],0x0\nLEA RDI,[RDI + 0x9]\nCMOVZ RDI,RBX\nCALL 0x004099e0\nTEST EAX,EAX\nJNZ 0x004099cf\nCALL 0x004019d0\nMOV BL,0x1\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1033
S'53\n31 db\n80 7f 08 00\n48 8d 7f 09\n48 0f 44 fb\ne8 1c 00 00 00\n85 c0\n75 07\ne8 03 80 ff ff\nb3 01\n89 d8\n5b\nc3\n'
p1034
S'.text:00000000004099b0\n.text:00000000004099b1\n.text:00000000004099b3\n.text:00000000004099b7\n.text:00000000004099bb\n.text:00000000004099bf\n.text:00000000004099c4\n.text:00000000004099c6\n.text:00000000004099c8\n.text:00000000004099cd\n.text:00000000004099cf\n.text:00000000004099d1\n.text:00000000004099d2\n'
p1035
tp1036
sS'time_t_avg'
p1037
(S'\n__stdcall time_t_avg(time_t a, time_t b)\n'
p1038
V\u000atime_t time_t_avg(time_t a,time_t b)\u000a\u000a{\u000a  return (ulong)((uint)a & (uint)b & 1) + (b >> 1) + (a >> 1);\u000a}\u000a\u000a
p1039
S'MOV RAX,RDI\nSAR RAX,1\nAND EDI,ESI\nSAR RSI,1\nLEA RAX,[RSI + RAX*0x1]\nAND EDI,0x1\nADD RDI,RAX\nMOV RAX,RDI\nRET\n'
p1040
S'48 89 f8\n48 d1 f8\n21 f7\n48 d1 fe\n48 8d 04 06\n83 e7 01\n48 01 c7\n48 89 f8\nc3\n'
p1041
S'.text:000000000040a640\n.text:000000000040a643\n.text:000000000040a646\n.text:000000000040a648\n.text:000000000040a64b\n.text:000000000040a64f\n.text:000000000040a652\n.text:000000000040a655\n.text:000000000040a658\n'
p1042
tp1043
sS'nstrftime'
p1044
(S'\n__stdcall nstrftime(char * s, size_t maxsize, char * format, tm * tp, timezone_t tz)\n'
p1045
V\u000asize_t nstrftime(char *s,size_t maxsize,char *format,tm *tp,timezone_t tz)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strftime_case_((char *)0x0,(size_t)s,(char *)maxsize,(tm *)format,(timezone_t)tp);\u000a  return sVar1;\u000a}\u000a\u000a
p1046
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nMOV dword ptr [RSP],R9D\nXOR EDI,EDI\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00406830\nPOP RCX\nRET\n'
p1047
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n44 89 0c 24\n31 ff\n49 89 c0\n4d 89 d1\ne8 0f 00 00 00\n59\nc3\n'
p1048
S'.text:0000000000406800\n.text:0000000000406801\n.text:0000000000406804\n.text:0000000000406807\n.text:000000000040680a\n.text:000000000040680d\n.text:0000000000406810\n.text:0000000000406814\n.text:0000000000406816\n.text:0000000000406819\n.text:000000000040681c\n.text:0000000000406821\n.text:0000000000406822\n'
p1049
tp1050
sS'get_quoting_style'
p1051
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1052
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1053
S'TEST RDI,RDI\nMOV EAX,0x611480\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1054
S'48 85 ff\nb8 80 14 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p1055
S'.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f78\n.text:0000000000404f7c\n.text:0000000000404f7e\n'
p1056
tp1057
sS'ferror_unlocked'
p1058
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1059
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00611140)();\u000a  return iVar1;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x00611140]\n'
p1061
S'ff 25 ca f7 20 00\n'
p1062
S'.plt:0000000000401970\n'
p1063
tp1064
sS'exit'
p1065
(S'\n__stdcall exit(int __status)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00611220)();\u000a  return;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x00611220]\n'
p1068
S'ff 25 ea f6 20 00\n'
p1069
S'.plt:0000000000401b30\n'
p1070
tp1071
sS'locale_charset'
p1072
(S'\n__stdcall locale_charset()\n'
p1073
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00409c5d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00409c5d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401a20\nTEST RAX,RAX\nMOV R14D,0x40c61d\nCMOVNZ R14,RAX\nCALL 0x00409c70\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00409c35\nJMP 0x00409c5d\nMOV RDI,RBX\nCALL 0x00401880\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401880\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00409c5d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401990\nTEST EAX,EAX\nJZ 0x00409c50\nCMP BPL,0x2a\nJNZ 0x00409c10\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00409c10\nMOV RDI,RBX\nCALL 0x00401880\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40e380\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1075
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 7e ff ff\n48 85 c0\n41 be 1d c6 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 68 7c ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 5a 7c ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 50 7d ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 28 7c ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 80 e3 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1076
S'.text:0000000000409be0\n.text:0000000000409be1\n.text:0000000000409be3\n.text:0000000000409be4\n.text:0000000000409be9\n.text:0000000000409bee\n.text:0000000000409bf1\n.text:0000000000409bf7\n.text:0000000000409bfb\n.text:0000000000409c00\n.text:0000000000409c03\n.text:0000000000409c06\n.text:0000000000409c09\n.text:0000000000409c0b\n.text:0000000000409c10\n.text:0000000000409c13\n.text:0000000000409c18\n.text:0000000000409c1c\n.text:0000000000409c21\n.text:0000000000409c26\n.text:0000000000409c2b\n.text:0000000000409c30\n.text:0000000000409c33\n.text:0000000000409c35\n.text:0000000000409c38\n.text:0000000000409c3b\n.text:0000000000409c40\n.text:0000000000409c42\n.text:0000000000409c44\n.text:0000000000409c48\n.text:0000000000409c4a\n.text:0000000000409c4e\n.text:0000000000409c50\n.text:0000000000409c53\n.text:0000000000409c58\n.text:0000000000409c5d\n.text:0000000000409c61\n.text:0000000000409c66\n.text:0000000000409c6a\n.text:0000000000409c6b\n.text:0000000000409c6d\n.text:0000000000409c6e\n'
p1077
tp1078
sS'set_program_name'
p1079
(S'\n__stdcall set_program_name(char * argv0)\n'
p1080
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1081
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404f01\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004018c0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00404eeb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40cbc8\nMOV EDX,0x7\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x00404eeb\nMOV ESI,0x40cbd0\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x00404ee8\nADD R14,0x3\nMOV qword ptr [0x00611320],R14\nMOV RBX,R14\nMOV qword ptr [0x00611478],RBX\nMOV qword ptr [0x00611348],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00611360]\nMOV EDI,0x40cb90\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401b40\nCALL 0x00401770\n'
p1082
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 27 ca ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe c8 cb 40 00\nba 07 00 00 00\ne8 cd c8 ff ff\n85 c0\n75 24\nbe d0 cb 40 00\nba 03 00 00 00\n4c 89 f7\ne8 b7 c8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 38 c4 20 00\n4c 89 f3\n48 89 1d 86 c5 20 00\n48 89 1d 4f c4 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 58 c4 20 00\nbf 90 cb 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 24 cc ff ff\ne8 4f c8 ff ff\n'
p1083
S'.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e83\n.text:0000000000404e84\n.text:0000000000404e87\n.text:0000000000404e8a\n.text:0000000000404e8c\n.text:0000000000404e91\n.text:0000000000404e94\n.text:0000000000404e99\n.text:0000000000404e9c\n.text:0000000000404ea0\n.text:0000000000404ea4\n.text:0000000000404ea7\n.text:0000000000404eaa\n.text:0000000000404eae\n.text:0000000000404eb0\n.text:0000000000404eb4\n.text:0000000000404eb9\n.text:0000000000404ebe\n.text:0000000000404ec3\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ecc\n.text:0000000000404ed1\n.text:0000000000404ed4\n.text:0000000000404ed9\n.text:0000000000404edb\n.text:0000000000404edd\n.text:0000000000404ee1\n.text:0000000000404ee8\n.text:0000000000404eeb\n.text:0000000000404ef2\n.text:0000000000404ef9\n.text:0000000000404efd\n.text:0000000000404efe\n.text:0000000000404f00\n.text:0000000000404f01\n.text:0000000000404f08\n.text:0000000000404f0d\n.text:0000000000404f12\n.text:0000000000404f17\n.text:0000000000404f1c\n'
p1084
tp1085
sS'read_rest_of_line'
p1086
(S'\n__stdcall read_rest_of_line(COLUMN * p)\n'
p1087
V\u000avoid read_rest_of_line(COLUMN *p)\u000a\u000a{\u000a  FILE *__stream;\u000a  int __c;\u000a  \u000a  __stream = p->fp;\u000a  while( true ) {\u000a    __c = getc_unlocked((FILE *)__stream);\u000a    if (__c == -1) {\u000a      close_file(p);\u000a      return;\u000a    }\u000a    if (__c == 10) break;\u000a    if (__c == 0xc) {\u000a      __c = getc_unlocked((FILE *)__stream);\u000a      if (__c != 10) {\u000a        ungetc(__c,(FILE *)__stream);\u000a      }\u000a      if (keep_FF == 1) {\u000a        print_a_FF = 1;\u000a      }\u000a      hold_file(p);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x004047bd\nCMP EAX,0xa\nJZ 0x004047cc\nCMP EAX,0xc\nJNZ 0x00404770\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,0xa\nJZ 0x0040479e\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a30\nCMP byte ptr [0x006113ad],0x1\nJNZ 0x004047ae\nMOV byte ptr [0x00611461],0x1\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004039f0\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00403a50\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1089
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n66 0f 1f 44 00 00\n48 89 df\ne8 68 d0 ff ff\n83 f8 ff\n74 40\n83 f8 0a\n74 4a\n83 f8 0c\n75 e9\n48 89 df\ne8 51 d0 ff ff\n83 f8 0a\n74 0a\n89 c7\n48 89 de\ne8 92 d2 ff ff\n80 3d 08 cc 20 00 01\n75 07\nc6 05 b3 cc 20 00 01\n4c 89 f7\n48 83 c4 08\n5b\n41 5e\ne9 33 f2 ff ff\n4c 89 f7\n48 83 c4 08\n5b\n41 5e\ne9 84 f2 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1090
S'.text:0000000000404760\n.text:0000000000404762\n.text:0000000000404763\n.text:0000000000404764\n.text:0000000000404767\n.text:000000000040476a\n.text:0000000000404770\n.text:0000000000404773\n.text:0000000000404778\n.text:000000000040477b\n.text:000000000040477d\n.text:0000000000404780\n.text:0000000000404782\n.text:0000000000404785\n.text:0000000000404787\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404792\n.text:0000000000404794\n.text:0000000000404796\n.text:0000000000404799\n.text:000000000040479e\n.text:00000000004047a5\n.text:00000000004047a7\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b5\n.text:00000000004047b6\n.text:00000000004047b8\n.text:00000000004047bd\n.text:00000000004047c0\n.text:00000000004047c4\n.text:00000000004047c5\n.text:00000000004047c7\n.text:00000000004047cc\n.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n'
p1091
tp1092
sS'quotearg_buffer'
p1093
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1094
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x611480\nCMOVNZ RBP,R8\nCALL 0x00401780\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004050a0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 80 14 61 00\n49 0f 45 e8\ne8 38 c7 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405023\n.text:0000000000405025\n.text:0000000000405027\n.text:0000000000405029\n.text:000000000040502a\n.text:000000000040502b\n.text:000000000040502e\n.text:0000000000405031\n.text:0000000000405034\n.text:0000000000405037\n.text:000000000040503a\n.text:000000000040503f\n.text:0000000000405043\n.text:0000000000405048\n.text:000000000040504b\n.text:000000000040504d\n.text:0000000000405051\n.text:0000000000405055\n.text:0000000000405059\n.text:000000000040505d\n.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405066\n.text:0000000000405069\n.text:000000000040506c\n.text:000000000040506f\n.text:0000000000405073\n.text:0000000000405074\n.text:0000000000405079\n.text:000000000040507d\n.text:0000000000405081\n.text:0000000000405083\n.text:0000000000405087\n.text:0000000000405088\n.text:000000000040508a\n.text:000000000040508c\n.text:000000000040508e\n.text:0000000000405090\n.text:0000000000405091\n'
p1098
tp1099
sS'quotearg_colon'
p1100
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1101
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1102
S'MOV ESI,0x3a\nJMP 0x00406200\n'
p1103
S'be 3a 00 00 00\neb e9\n'
p1104
S'.text:0000000000406210\n.text:0000000000406215\n'
p1105
tp1106
sS'pad_across_to'
p1107
(S'\n__stdcall pad_across_to()\n'
p1108
V\u000avoid pad_across_to(int iParm1)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  if (tabify_output == 0) {\u000a    iVar1 = iParm1;\u000a    if (output_position < iParm1) {\u000a      iVar2 = iParm1 - output_position;\u000a      do {\u000a        putchar_unlocked(0x20);\u000a        iVar2 = iVar2 + -1;\u000a        iVar1 = iParm1;\u000a      } while (iVar2 != 0);\u000a    }\u000a  }\u000a  else {\u000a    spaces_not_printed = iParm1 - output_position;\u000a    iVar1 = output_position;\u000a  }\u000a  output_position = iVar1;\u000a  return;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EAX,dword ptr [0x00611454]\nMOV CL,byte ptr [0x00611398]\nTEST CL,CL\nJZ 0x0040413f\nSUB EBX,EAX\nMOV dword ptr [0x00611450],EBX\nJMP 0x00404164\nCMP EAX,EBX\nJGE 0x0040415e\nMOV EBP,EBX\nSUB EBP,EAX\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0x20\nCALL 0x004019c0\nDEC EBP\nJNZ 0x00404150\nMOV dword ptr [0x00611454],EBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1110
S'55\n53\n50\n89 fb\n8b 05 29 d3 20 00\n8a 0d 67 d2 20 00\n84 c9\n74 0a\n29 c3\n89 1d 13 d3 20 00\neb 25\n39 d8\n7d 1b\n89 dd\n29 c5\n66 0f 1f 84 00 00 00 00 00\nbf 20 00 00 00\ne8 66 d8 ff ff\nff cd\n75 f2\n89 1d f0 d2 20 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1111
S'.text:0000000000404120\n.text:0000000000404121\n.text:0000000000404122\n.text:0000000000404123\n.text:0000000000404125\n.text:000000000040412b\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404135\n.text:0000000000404137\n.text:000000000040413d\n.text:000000000040413f\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404145\n.text:0000000000404147\n.text:0000000000404150\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415c\n.text:000000000040415e\n.text:0000000000404164\n.text:0000000000404168\n.text:0000000000404169\n.text:000000000040416a\n'
p1112
tp1113
sS'xstrtol'
p1114
(S'\n__stdcall xstrtol(char * s, char * * ptr, long * val, char * valid_suffixes)\n'
p1115
V\u000astrtol_error xstrtol(char *s,char **ptr,long *val,char *valid_suffixes)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  char **__endptr;\u000a  strtol_error sVar7;\u000a  strtol_error sVar8;\u000a  long local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtol(const char *, char **, int, long *, const char *)");\u000a  }\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  local_40 = strtol(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar1 = **__endptr;\u000a    if (cVar1 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar4 = strchr(__s,(int)cVar1);\u000a    if (pcVar4 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_40 = 1;\u000a    sVar7 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar3 == 0) {\u000a      sVar7 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar3 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar7 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar8 = sVar7;\u000a    if (__s == (char *)0x0) goto LAB_00408dc4;\u000a  }\u000a  pcVar4 = *__endptr;\u000a  sVar8 = sVar7;\u000a  if (*pcVar4 == 0) goto LAB_00408dc4;\u000a  pcVar5 = strchr(__s,(int)*pcVar4);\u000a  if (pcVar5 == (char *)0x0) goto switchD_00408cd9_caseD_43;\u000a  pcVar5 = strchr(__s,0x30);\u000a  if (pcVar5 == (char *)0x0) {\u000aLAB_00408cb7:\u000a    lVar6 = 1;\u000a  }\u000a  else {\u000a    cVar1 = pcVar4[1];\u000a    if ((cVar1 == 'B') || (cVar1 == 'D')) {\u000a      lVar6 = 2;\u000a    }\u000a    else {\u000a      if (cVar1 != 'i') goto LAB_00408cb7;\u000a      lVar6 = (ulong)(pcVar4[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00408da1;\u000a  default:\u000aswitchD_00408cd9_caseD_43:\u000a    *(long *)valid_suffixes = local_40;\u000a    return sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'P':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Y':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Z':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00408da1;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00408da1:\u000a    sVar2 = bkm_scale(&local_40);\u000a  }\u000a  pcVar4 = *__endptr;\u000a  *__endptr = pcVar4 + lVar6;\u000a  sVar8 = sVar2 | sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar4[lVar6] == 0) {\u000a    sVar8 = sVar2 | sVar7;\u000a  }\u000aLAB_00408dc4:\u000a  *(long *)valid_suffixes = local_40;\u000a  return sVar8;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RDI\nCMP EBP,0x25\nJNC 0x00408dde\nTEST RSI,RSI\nLEA R12,[RSP + 0x10]\nCMOVNZ R12,RSI\nCALL 0x00401780\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,EBP\nCALL 0x004019a0\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [R12]\nCMP RAX,R15\nJZ 0x00408c1c\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x00408c55\nMOV R15D,0x4\nCMP EAX,0x22\nJNZ 0x00408dcc\nMOV R15D,0x1\nTEST R13,R13\nJNZ 0x00408c61\nJMP 0x00408dc4\nMOV R15D,0x4\nTEST R13,R13\nJZ 0x00408dcc\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00408dcc\nMOV RDI,R13\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00408dcc\nMOV qword ptr [RSP + 0x8],0x1\nXOR R15D,R15D\nJMP 0x00408c61\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x00408dc4\nMOV RBX,qword ptr [R12]\nMOVSX ESI,byte ptr [RBX]\nTEST ESI,ESI\nJZ 0x00408dc4\nMOV RDI,R13\nCALL 0x004018b0\nTEST RAX,RAX\nJZ 0x00408cf4\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x004018b0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00408cb7\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x42\nJZ 0x00408cbe\nCMP EAX,0x44\nJZ 0x00408cbe\nCMP EAX,0x69\nJNZ 0x00408cb7\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x2],0x42\nSETZ AL\nLEA RBX,[RAX + RAX*0x1 + 0x1]\nJMP 0x00408cc8\nMOV EBX,0x1\nJMP 0x00408cc8\nMOV ESI,0x3e8\nMOV EBX,0x2\nMOV RAX,qword ptr [R12]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00408cf4\nXOR EAX,EAX\nJMP qword ptr [0x40dae8 + RCX*0x8]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x3\nCALL 0x00408e50\nJMP 0x00408da6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nOR R15D,0x2\nJMP 0x00408dcc\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x1\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x2\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x400\nJMP 0x00408da1\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x6\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x5\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x7\nCALL 0x00408e50\nJMP 0x00408da6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x200\nJMP 0x00408da1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x2\nCALL 0x00408e00\nOR EAX,R15D\nMOV RCX,qword ptr [R12]\nLEA RDX,[RCX + RBX*0x1]\nMOV qword ptr [R12],RDX\nMOV R15D,EAX\nOR R15D,0x2\nCMP byte ptr [RCX + RBX*0x1],0x0\nCMOVZ R15D,EAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40da60\nMOV ESI,0x40da88\nMOV EDX,0x60\nMOV ECX,0x40dc98\nCALL 0x00401900\n'
p1117
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n49 89 ce\n89 d5\n49 89 ff\n83 fd 25\n0f 83 1c 02 00 00\n48 85 f6\n4c 8d 64 24 10\n4c 0f 45 e6\ne8 ad 8b ff ff\n48 89 c3\nc7 03 00 00 00 00\n4c 89 ff\n4c 89 e6\n89 ea\ne8 b7 8d ff ff\n48 89 44 24 08\n49 8b 04 24\n4c 39 f8\n74 25\n8b 03\n85 c0\n74 58\n41 bf 04 00 00 00\n83 f8 22\n0f 85 c0 01 00 00\n41 bf 01 00 00 00\n4d 85 ed\n75 4a\ne9 a8 01 00 00\n41 bf 04 00 00 00\n4d 85 ed\n0f 84 a1 01 00 00\n0f be 30\n85 f6\n0f 84 96 01 00 00\n4c 89 ef\ne8 72 8c ff ff\n48 85 c0\n0f 84 85 01 00 00\n48 c7 44 24 08 01 00 00 00\n45 31 ff\neb 0c\n45 31 ff\n4d 85 ed\n0f 84 63 01 00 00\n49 8b 1c 24\n0f be 33\n85 f6\n0f 84 54 01 00 00\n4c 89 ef\ne8 38 8c ff ff\n48 85 c0\n74 77\nbe 30 00 00 00\n4c 89 ef\ne8 26 8c ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 43 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7b 02 42\n0f 94 c0\n48 8d 5c 00 01\neb 11\nbb 01 00 00 00\neb 0a\nbe e8 03 00 00\nbb 02 00 00 00\n49 8b 04 24\n0f be 08\n83 c1 be\n83 f9 35\n77 1d\n31 c0\nff 24 cd e8 da 40 00\n48 8d 7c 24 08\nba 03 00 00 00\ne8 61 01 00 00\ne9 b2 00 00 00\n48 8b 44 24 08\n49 89 06\n41 83 cf 02\ne9 c7 00 00 00\n48 8d 7c 24 08\nba 01 00 00 00\ne8 3c 01 00 00\ne9 8d 00 00 00\n48 8d 7c 24 08\nba 02 00 00 00\ne8 28 01 00 00\neb 7c\n48 8d 7c 24 08\nba 04 00 00 00\ne8 17 01 00 00\neb 6b\n48 8d 7c 24 08\nbe 00 04 00 00\neb 5a\n48 8d 7c 24 08\nba 06 00 00 00\ne8 fa 00 00 00\neb 4e\n48 8d 7c 24 08\nba 05 00 00 00\ne8 e9 00 00 00\neb 3d\n48 8d 7c 24 08\nba 08 00 00 00\ne8 d8 00 00 00\neb 2c\n48 8d 7c 24 08\nba 07 00 00 00\ne8 c7 00 00 00\neb 1b\n48 8d 7c 24 08\nbe 00 02 00 00\neb 0a\n48 8d 7c 24 08\nbe 02 00 00 00\ne8 5a 00 00 00\n44 09 f8\n49 8b 0c 24\n48 8d 14 19\n49 89 14 24\n41 89 c7\n41 83 cf 02\n80 3c 19 00\n44 0f 44 f8\n48 8b 44 24 08\n49 89 06\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 da 40 00\nbe 88 da 40 00\nba 60 00 00 00\nb9 98 dc 40 00\ne8 09 8b ff ff\n'
p1118
S'.text:0000000000408ba0\n.text:0000000000408ba1\n.text:0000000000408ba3\n.text:0000000000408ba5\n.text:0000000000408ba7\n.text:0000000000408ba9\n.text:0000000000408baa\n.text:0000000000408bae\n.text:0000000000408bb1\n.text:0000000000408bb4\n.text:0000000000408bb6\n.text:0000000000408bb9\n.text:0000000000408bbc\n.text:0000000000408bc2\n.text:0000000000408bc5\n.text:0000000000408bca\n.text:0000000000408bce\n.text:0000000000408bd3\n.text:0000000000408bd6\n.text:0000000000408bdc\n.text:0000000000408bdf\n.text:0000000000408be2\n.text:0000000000408be4\n.text:0000000000408be9\n.text:0000000000408bee\n.text:0000000000408bf2\n.text:0000000000408bf5\n.text:0000000000408bf7\n.text:0000000000408bf9\n.text:0000000000408bfb\n.text:0000000000408bfd\n.text:0000000000408c03\n.text:0000000000408c06\n.text:0000000000408c0c\n.text:0000000000408c12\n.text:0000000000408c15\n.text:0000000000408c17\n.text:0000000000408c1c\n.text:0000000000408c22\n.text:0000000000408c25\n.text:0000000000408c2b\n.text:0000000000408c2e\n.text:0000000000408c30\n.text:0000000000408c36\n.text:0000000000408c39\n.text:0000000000408c3e\n.text:0000000000408c41\n.text:0000000000408c47\n.text:0000000000408c50\n.text:0000000000408c53\n.text:0000000000408c55\n.text:0000000000408c58\n.text:0000000000408c5b\n.text:0000000000408c61\n.text:0000000000408c65\n.text:0000000000408c68\n.text:0000000000408c6a\n.text:0000000000408c70\n.text:0000000000408c73\n.text:0000000000408c78\n.text:0000000000408c7b\n.text:0000000000408c7d\n.text:0000000000408c82\n.text:0000000000408c85\n.text:0000000000408c8a\n.text:0000000000408c8f\n.text:0000000000408c92\n.text:0000000000408c94\n.text:0000000000408c98\n.text:0000000000408c9b\n.text:0000000000408c9d\n.text:0000000000408ca0\n.text:0000000000408ca2\n.text:0000000000408ca5\n.text:0000000000408ca7\n.text:0000000000408ca9\n.text:0000000000408cad\n.text:0000000000408cb0\n.text:0000000000408cb5\n.text:0000000000408cb7\n.text:0000000000408cbc\n.text:0000000000408cbe\n.text:0000000000408cc3\n.text:0000000000408cc8\n.text:0000000000408ccc\n.text:0000000000408ccf\n.text:0000000000408cd2\n.text:0000000000408cd5\n.text:0000000000408cd7\n.text:0000000000408cd9\n.text:0000000000408ce0\n.text:0000000000408ce5\n.text:0000000000408cea\n.text:0000000000408cef\n.text:0000000000408cf4\n.text:0000000000408cf9\n.text:0000000000408cfc\n.text:0000000000408d00\n.text:0000000000408d05\n.text:0000000000408d0a\n.text:0000000000408d0f\n.text:0000000000408d14\n.text:0000000000408d19\n.text:0000000000408d1e\n.text:0000000000408d23\n.text:0000000000408d28\n.text:0000000000408d2a\n.text:0000000000408d2f\n.text:0000000000408d34\n.text:0000000000408d39\n.text:0000000000408d3b\n.text:0000000000408d40\n.text:0000000000408d45\n.text:0000000000408d47\n.text:0000000000408d4c\n.text:0000000000408d51\n.text:0000000000408d56\n.text:0000000000408d58\n.text:0000000000408d5d\n.text:0000000000408d62\n.text:0000000000408d67\n.text:0000000000408d69\n.text:0000000000408d6e\n.text:0000000000408d73\n.text:0000000000408d78\n.text:0000000000408d7a\n.text:0000000000408d7f\n.text:0000000000408d84\n.text:0000000000408d89\n.text:0000000000408d8b\n.text:0000000000408d90\n.text:0000000000408d95\n.text:0000000000408d97\n.text:0000000000408d9c\n.text:0000000000408da1\n.text:0000000000408da6\n.text:0000000000408da9\n.text:0000000000408dad\n.text:0000000000408db1\n.text:0000000000408db5\n.text:0000000000408db8\n.text:0000000000408dbc\n.text:0000000000408dc0\n.text:0000000000408dc4\n.text:0000000000408dc9\n.text:0000000000408dcc\n.text:0000000000408dcf\n.text:0000000000408dd3\n.text:0000000000408dd4\n.text:0000000000408dd6\n.text:0000000000408dd8\n.text:0000000000408dda\n.text:0000000000408ddc\n.text:0000000000408ddd\n.text:0000000000408dde\n.text:0000000000408de3\n.text:0000000000408de8\n.text:0000000000408ded\n.text:0000000000408df2\n'
p1119
tp1120
sS'get_stat_ctime'
p1121
(S'\n__stdcall get_stat_ctime(stat * st)\n'
p1122
V\u000atimespec get_stat_ctime(stat *st)\u000a\u000a{\u000a  return st->st_ctim;\u000a}\u000a\u000a
p1123
S'MOV RAX,qword ptr [RDI + 0x68]\nMOV RDX,qword ptr [RDI + 0x70]\nRET\n'
p1124
S'48 8b 47 68\n48 8b 57 70\nc3\n'
p1125
S'.text:00000000004067d0\n.text:00000000004067d4\n.text:00000000004067d8\n'
p1126
tp1127
sS'ydhms_diff'
p1128
(S'\n__stdcall ydhms_diff(long_int year1, long_int yday1, int yday0, int hour0, int min0, int sec0)\n'
p1129
V\u000atime_t ydhms_diff(long_int year1,long_int yday1,int yday0,int hour0,int min0,int sec0)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int in_stack_00000008;\u000a  int in_stack_00000010;\u000a  int in_stack_00000018;\u000a  int in_stack_00000020;\u000a  \u000a  iVar3 = ((int)((ulong)year1 >> 2) + 0x1db) - (uint)((year1 & 3U) == 0);\u000a  iVar1 = ((sec0 >> 2) + 0x1db) - (uint)((sec0 & 3U) == 0);\u000a  iVar4 = iVar3 / 0x19 + (iVar3 >> 0x1f) + (uint)((ulong)((long)iVar3 * 0x51eb851f) >> 0x3f);\u000a  iVar4 = iVar4 - ((uint)(iVar3 + iVar4 * -0x19) >> 0x1f);\u000a  iVar2 = iVar1 / 0x19 + (iVar1 >> 0x1f) + (uint)((ulong)((long)iVar1 * 0x51eb851f) >> 0x3f);\u000a  iVar2 = iVar2 - ((uint)(iVar1 + iVar2 * -0x19) >> 0x1f);\u000a  return ((long)min0 - (long)in_stack_00000020) +\u000a         (((long)hour0 - (long)in_stack_00000018) +\u000a         (((long)yday0 - (long)in_stack_00000010) +\u000a         ((yday1 - (long)in_stack_00000008) + (year1 - (long)sec0) * 0x16d +\u000a         (long)((((iVar3 - iVar4) - iVar1) + (iVar4 >> 2) + iVar2) - (iVar2 >> 2))) * 0x18) * 0x3c)\u000a         * 0x3c;\u000a}\u000a\u000a
p1130
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R10,RDI\nSHR R10,0x2\nMOV EAX,EDI\nAND EAX,0x3\nCMP RAX,0x1\nSBB RAX,RAX\nLEA R10,[0x1db + R10 + RAX*0x1]\nMOV R11D,R9D\nMOVSXD R14,R9D\nMOV EAX,R9D\nSAR EAX,0x2\nAND R11D,0x3\nCMP R11D,0x1\nSBB EBX,EBX\nLEA R9D,[0x1db + RAX + RBX*0x1]\nMOVSXD R11,R10D\nIMUL R15,R11,0x51eb851f\nMOV R10,R15\nSHR R10,0x3f\nSAR R15,0x23\nADD R15D,R10D\nLEA EBX,[R15 + R15*0x4]\nLEA R10D,[RBX + RBX*0x4]\nMOV EBX,R11D\nSUB EBX,R10D\nSHR EBX,0x1f\nSUB R15D,EBX\nMOVSXD R9,R9D\nIMUL RBX,R9,0x51eb851f\nMOV R10,RBX\nSHR R10,0x3f\nSAR RBX,0x23\nADD EBX,R10D\nLEA EAX,[RBX + RBX*0x4]\nLEA R10D,[RAX + RAX*0x4]\nSUB R11D,R15D\nSUB R11D,R9D\nMOV EAX,R9D\nSUB EAX,R10D\nSHR EAX,0x1f\nSUB EBX,EAX\nSAR R15D,0x2\nADD R11D,R15D\nADD R11D,EBX\nSAR EBX,0x2\nSUB R11D,EBX\nSUB RDI,R14\nIMUL RAX,RDI,0x16d\nMOVSXD RDI,dword ptr [RSP + 0x20]\nMOVSXD RBX,R11D\nSUB RSI,RDI\nADD RSI,RAX\nADD RSI,RBX\nLEA RAX,[RSI + RSI*0x2]\nMOVSXD RDX,EDX\nMOVSXD RSI,dword ptr [RSP + 0x28]\nSUB RDX,RSI\nLEA RAX,[RDX + RAX*0x8]\nIMUL RAX,RAX,0x3c\nMOVSXD RCX,ECX\nMOVSXD RDX,dword ptr [RSP + 0x30]\nSUB RCX,RDX\nADD RCX,RAX\nIMUL RCX,RCX,0x3c\nMOVSXD RAX,R8D\nMOVSXD RDX,dword ptr [RSP + 0x38]\nSUB RAX,RDX\nADD RAX,RCX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1131
S'41 57\n41 56\n53\n49 89 fa\n49 c1 ea 02\n89 f8\n83 e0 03\n48 83 f8 01\n48 19 c0\n4d 8d 94 02 db 01 00 00\n45 89 cb\n4d 63 f1\n44 89 c8\nc1 f8 02\n41 83 e3 03\n41 83 fb 01\n19 db\n44 8d 8c 18 db 01 00 00\n4d 63 da\n4d 69 fb 1f 85 eb 51\n4d 89 fa\n49 c1 ea 3f\n49 c1 ff 23\n45 01 d7\n43 8d 1c bf\n44 8d 14 9b\n44 89 db\n44 29 d3\nc1 eb 1f\n41 29 df\n4d 63 c9\n49 69 d9 1f 85 eb 51\n49 89 da\n49 c1 ea 3f\n48 c1 fb 23\n44 01 d3\n8d 04 9b\n44 8d 14 80\n45 29 fb\n45 29 cb\n44 89 c8\n44 29 d0\nc1 e8 1f\n29 c3\n41 c1 ff 02\n45 01 fb\n41 01 db\nc1 fb 02\n41 29 db\n4c 29 f7\n48 69 c7 6d 01 00 00\n48 63 7c 24 20\n49 63 db\n48 29 fe\n48 01 c6\n48 01 de\n48 8d 04 76\n48 63 d2\n48 63 74 24 28\n48 29 f2\n48 8d 04 c2\n48 6b c0 3c\n48 63 c9\n48 63 54 24 30\n48 29 d1\n48 01 c1\n48 6b c9 3c\n49 63 c0\n48 63 54 24 38\n48 29 d0\n48 01 c8\n5b\n41 5e\n41 5f\nc3\n'
p1132
S'.text:000000000040a350\n.text:000000000040a352\n.text:000000000040a354\n.text:000000000040a355\n.text:000000000040a358\n.text:000000000040a35c\n.text:000000000040a35e\n.text:000000000040a361\n.text:000000000040a365\n.text:000000000040a368\n.text:000000000040a370\n.text:000000000040a373\n.text:000000000040a376\n.text:000000000040a379\n.text:000000000040a37c\n.text:000000000040a380\n.text:000000000040a384\n.text:000000000040a386\n.text:000000000040a38e\n.text:000000000040a391\n.text:000000000040a398\n.text:000000000040a39b\n.text:000000000040a39f\n.text:000000000040a3a3\n.text:000000000040a3a6\n.text:000000000040a3aa\n.text:000000000040a3ae\n.text:000000000040a3b1\n.text:000000000040a3b4\n.text:000000000040a3b7\n.text:000000000040a3ba\n.text:000000000040a3bd\n.text:000000000040a3c4\n.text:000000000040a3c7\n.text:000000000040a3cb\n.text:000000000040a3cf\n.text:000000000040a3d2\n.text:000000000040a3d5\n.text:000000000040a3d9\n.text:000000000040a3dc\n.text:000000000040a3df\n.text:000000000040a3e2\n.text:000000000040a3e5\n.text:000000000040a3e8\n.text:000000000040a3ea\n.text:000000000040a3ee\n.text:000000000040a3f1\n.text:000000000040a3f4\n.text:000000000040a3f7\n.text:000000000040a3fa\n.text:000000000040a3fd\n.text:000000000040a404\n.text:000000000040a409\n.text:000000000040a40c\n.text:000000000040a40f\n.text:000000000040a412\n.text:000000000040a415\n.text:000000000040a419\n.text:000000000040a41c\n.text:000000000040a421\n.text:000000000040a424\n.text:000000000040a428\n.text:000000000040a42c\n.text:000000000040a42f\n.text:000000000040a434\n.text:000000000040a437\n.text:000000000040a43a\n.text:000000000040a43e\n.text:000000000040a441\n.text:000000000040a446\n.text:000000000040a449\n.text:000000000040a44c\n.text:000000000040a44d\n.text:000000000040a44f\n.text:000000000040a451\n'
p1133
tp1134
sS'skip_to_page'
p1135
(S'\n__stdcall skip_to_page(uintmax_t page)\n'
p1136
V\u000a_Bool skip_to_page(uintmax_t page)\u000a\u000a{\u000a  anon_enum_32 *paVar1;\u000a  undefined8 uVar2;\u000a  COLUMN *p;\u000a  int iVar3;\u000a  int iVar4;\u000a  ulong uVar5;\u000a  \u000a  if (1 < page) {\u000a    uVar5 = 1;\u000a    do {\u000a      if (1 < lines_per_body) {\u000a        iVar4 = 1;\u000a        do {\u000a          if (0 < columns) {\u000a            iVar3 = 0;\u000a            p = column_vector;\u000a            do {\u000a              iVar3 = iVar3 + 1;\u000a              if (p->status == OPEN) {\u000a                skip_read(p);\u000a              }\u000a              p = p + 1;\u000a            } while (iVar3 < columns);\u000a          }\u000a          iVar4 = iVar4 + 1;\u000a        } while (iVar4 < lines_per_body);\u000a      }\u000a      last_line = 1;\u000a      if (0 < columns) {\u000a        iVar4 = 0;\u000a        p = column_vector;\u000a        do {\u000a          iVar4 = iVar4 + 1;\u000a          if (p->status == OPEN) {\u000a            skip_read(p);\u000a          }\u000a          p = p + 1;\u000a        } while (iVar4 < columns);\u000a      }\u000a      iVar4 = columns;\u000a      if ((storing_columns == 0) && (0 < columns)) {\u000a        paVar1 = &column_vector->status;\u000a        iVar3 = 0;\u000a        do {\u000a          if (*paVar1 != CLOSED) {\u000a            *paVar1 = ON_HOLD;\u000a          }\u000a          paVar1 = paVar1 + 0x10;\u000a          iVar3 = iVar3 + 1;\u000a        } while (iVar3 < iVar4);\u000a      }\u000a      reset_status();\u000a      last_line = 0;\u000a      if (files_ready_to_read < 1) {\u000a        uVar2 = dcgettext(0,"starting page number %lu exceeds page count %lu",5);\u000a        error(0,0,uVar2,page,uVar5);\u000a        break;\u000a      }\u000a      uVar5 = uVar5 + 1;\u000a    } while (uVar5 < page);\u000a  }\u000a  return (_Bool)(0 < files_ready_to_read);\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDI\nCMP R14,0x2\nJC 0x004031c0\nMOV R15D,0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [0x006113e8]\nCMP dword ptr [0x006113c4],0x2\nJL 0x004030f1\nMOV R12D,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [0x006112a8],0x0\nJLE 0x004030de\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nINC EBP\nCMP dword ptr [RBX + 0x10],0x0\nJNZ 0x004030d2\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00403880\nADD RBX,0x40\nCMP EBP,dword ptr [0x006112a8]\nJL 0x004030c0\nINC R12D\nMOV RBX,qword ptr [0x006113e8]\nCMP R12D,dword ptr [0x006113c4]\nJL 0x004030b0\nMOV byte ptr [0x00611440],0x1\nCMP dword ptr [0x006112a8],0x0\nJLE 0x0040312e\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC EBP\nCMP dword ptr [RBX + 0x10],0x0\nJNZ 0x00403122\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00403880\nADD RBX,0x40\nCMP EBP,dword ptr [0x006112a8]\nJL 0x00403110\nMOV AL,byte ptr [0x00611379]\nTEST AL,AL\nJNZ 0x00403175\nMOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJLE 0x00403175\nMOV RAX,qword ptr [0x006113e8]\nMOV ECX,dword ptr [0x006112a8]\nADD RAX,0x10\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RAX],0x3\nJZ 0x0040316b\nMOV dword ptr [RAX],0x2\nADD RAX,0x40\nINC EDX\nCMP EDX,ECX\nJL 0x00403160\nCALL 0x00403990\nMOV byte ptr [0x00611440],0x0\nCMP dword ptr [0x006113f0],0x0\nJLE 0x00403198\nINC R15\nCMP R15,R14\nJC 0x00403090\nJMP 0x004031c0\nXOR EDI,EDI\nMOV ESI,0x40c629\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nMOV R8,R15\nCALL 0x00401ac0\nCMP dword ptr [0x006113f0],0x0\nSETG AL\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1138
S'55\n41 57\n41 56\n41 54\n53\n49 89 fe\n49 83 fe 02\n0f 82 3b 01 00 00\n41 bf 01 00 00 00\n0f 1f 44 00 00\n48 8b 1d 51 e3 20 00\n83 3d 26 e3 20 00 02\n7c 51\n41 bc 01 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n83 3d f1 e1 20 00 00\n7e 25\n31 ed\n0f 1f 44 00 00\nff c5\n83 7b 10 00\n75 0a\n48 89 df\n89 ee\ne8 ae 07 00 00\n48 83 c3 40\n3b 2d cc e1 20 00\n7c e2\n41 ff c4\n48 8b 1d 00 e3 20 00\n44 3b 25 d5 e2 20 00\n7c bf\nc6 05 48 e3 20 00 01\n83 3d a9 e1 20 00 00\n7e 2d\n31 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nff c5\n83 7b 10 00\n75 0a\n48 89 df\n89 ee\ne8 5e 07 00 00\n48 83 c3 40\n3b 2d 7c e1 20 00\n7c e2\n8a 05 45 e2 20 00\n84 c0\n75 3d\n8b 05 6a e1 20 00\n85 c0\n7e 33\n48 8b 05 9f e2 20 00\n8b 0d 59 e1 20 00\n48 83 c0 10\n31 d2\n66 66 2e 0f 1f 84 00 00 00 00 00\n83 38 03\n74 06\nc7 00 02 00 00 00\n48 83 c0 40\nff c2\n39 ca\n7c eb\ne8 16 08 00 00\nc6 05 bf e2 20 00 00\n83 3d 68 e2 20 00 00\n7e 0e\n49 ff c7\n4d 39 f7\n0f 82 fa fe ff ff\neb 28\n31 ff\nbe 29 c6 40 00\nba 05 00 00 00\ne8 b7 e6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\n4d 89 f8\ne8 00 e9 ff ff\n83 3d 29 e2 20 00 00\n0f 9f c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1139
S'.text:0000000000403070\n.text:0000000000403071\n.text:0000000000403073\n.text:0000000000403075\n.text:0000000000403077\n.text:0000000000403078\n.text:000000000040307b\n.text:000000000040307f\n.text:0000000000403085\n.text:000000000040308b\n.text:0000000000403090\n.text:0000000000403097\n.text:000000000040309e\n.text:00000000004030a0\n.text:00000000004030a6\n.text:00000000004030b0\n.text:00000000004030b7\n.text:00000000004030b9\n.text:00000000004030bb\n.text:00000000004030c0\n.text:00000000004030c2\n.text:00000000004030c6\n.text:00000000004030c8\n.text:00000000004030cb\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d6\n.text:00000000004030dc\n.text:00000000004030de\n.text:00000000004030e1\n.text:00000000004030e8\n.text:00000000004030ef\n.text:00000000004030f1\n.text:00000000004030f8\n.text:00000000004030ff\n.text:0000000000403101\n.text:0000000000403103\n.text:0000000000403110\n.text:0000000000403112\n.text:0000000000403116\n.text:0000000000403118\n.text:000000000040311b\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403126\n.text:000000000040312c\n.text:000000000040312e\n.text:0000000000403134\n.text:0000000000403136\n.text:0000000000403138\n.text:000000000040313e\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403149\n.text:000000000040314f\n.text:0000000000403153\n.text:0000000000403155\n.text:0000000000403160\n.text:0000000000403163\n.text:0000000000403165\n.text:000000000040316b\n.text:000000000040316f\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403175\n.text:000000000040317a\n.text:0000000000403181\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403190\n.text:0000000000403196\n.text:0000000000403198\n.text:000000000040319a\n.text:000000000040319f\n.text:00000000004031a4\n.text:00000000004031a9\n.text:00000000004031ac\n.text:00000000004031ae\n.text:00000000004031b0\n.text:00000000004031b2\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031bb\n.text:00000000004031c0\n.text:00000000004031c7\n.text:00000000004031ca\n.text:00000000004031cb\n.text:00000000004031cd\n.text:00000000004031cf\n.text:00000000004031d1\n.text:00000000004031d2\n'
p1140
tp1141
sS'rpl_fflush'
p1142
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1143
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00611190)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1144
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004094cd\nMOV RDI,RBX\nCALL 0x00401a50\nTEST EAX,EAX\nJZ 0x004094cd\nMOV RDI,RBX\nCALL 0x004094e0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a10\n'
p1145
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 8f 85 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 3a 85 ff ff\n'
p1146
S'.text:00000000004094b0\n.text:00000000004094b1\n.text:00000000004094b4\n.text:00000000004094b7\n.text:00000000004094b9\n.text:00000000004094bc\n.text:00000000004094c1\n.text:00000000004094c3\n.text:00000000004094c5\n.text:00000000004094c8\n.text:00000000004094cd\n.text:00000000004094d0\n.text:00000000004094d1\n'
p1147
tp1148
sS'__assert_fail'
p1149
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_00611108)();\u000a  return;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x00611108]\n'
p1152
S'ff 25 02 f8 20 00\n'
p1153
S'.plt:0000000000401900\n'
p1154
tp1155
sS'init_fps'
p1156
(S'\n__stdcall init_fps(char * * av)\n'
p1157
V\u000a_Bool init_fps(char **av)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  COLUMN *p;\u000a  ulong uVar4;\u000a  char **in_RSI;\u000a  char *filename;\u000a  \u000a  uVar4 = (ulong)av & 0xffffffff;\u000a  total_files = 0;\u000a  free(column_vector);\u000a  p = (COLUMN *)xnmalloc((long)columns,0x40);\u000a  column_vector = p;\u000a  if (parallel_files == 1) {\u000a    while ((int)uVar4 != 0) {\u000a      uVar4 = (ulong)((int)uVar4 - 1);\u000a      _Var2 = open_file(*in_RSI,p);\u000a      if (_Var2 == false) {\u000a        p = p + -1;\u000a        columns = columns + -1;\u000a      }\u000a      p = p + 1;\u000a      in_RSI = in_RSI + 1;\u000a    }\u000a    if (columns == 0) {\u000a      return false;\u000a    }\u000a    init_header("");\u000a  }\u000a  else {\u000a    if ((int)uVar4 < 1) {\u000a      column_vector = p;\u000a      filename = (char *)dcgettext(0,"standard input",5);\u000a      p->name = filename;\u000a      p->fp = stdin;\u000a      have_read_stdin = 1;\u000a      p->status = OPEN;\u000a      p->full_page_printed = false;\u000a      total_files = total_files + 1;\u000a      filename = "";\u000a    }\u000a    else {\u000a      column_vector = p;\u000a      _Var2 = open_file(*in_RSI,p);\u000a      if (_Var2 == false) {\u000a        return false;\u000a      }\u000a      filename = *in_RSI;\u000a      fileno((FILE *)p->fp);\u000a    }\u000a    init_header(filename);\u000a    p->lines_stored = 0;\u000a    if (columns != 1) {\u000a      pFVar1 = p->fp;\u000a      filename = p->name;\u000a      iVar3 = 1 - columns;\u000a      do {\u000a        p[1].name = filename;\u000a        p[1].fp = pFVar1;\u000a        p[1].status = OPEN;\u000a        p[1].full_page_printed = false;\u000a        p[1].lines_stored = 0;\u000a        iVar3 = iVar3 + 1;\u000a        p = p + 1;\u000a      } while (iVar3 != 0);\u000a    }\u000a  }\u000a  files_ready_to_read = total_files;\u000a  return true;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV EBP,EDI\nMOV dword ptr [0x006113e0],0x0\nMOV RDI,qword ptr [0x006113e8]\nCALL 0x00401740\nMOVSXD RDI,dword ptr [0x006112a8]\nMOV ESI,0x40\nCALL 0x004085d0\nMOV RBX,RAX\nMOV qword ptr [0x006113e8],RBX\nCMP byte ptr [0x0061139a],0x1\nJZ 0x00402ed8\nTEST EBP,EBP\nJLE 0x00402f1d\nMOV RDI,qword ptr [R14]\nMOV RSI,RBX\nCALL 0x00403630\nTEST AL,AL\nJZ 0x00402f16\nMOV RBP,qword ptr [R14]\nMOV RDI,qword ptr [RBX]\nCALL 0x004019e0\nMOV RDI,RBP\nMOV ESI,EAX\nJMP 0x00402f5e\nADD RBX,0x40\nADD R14,0x8\nTEST EBP,EBP\nJZ 0x00402ef9\nDEC EBP\nMOV RDI,qword ptr [R14]\nMOV RSI,RBX\nCALL 0x00403630\nTEST AL,AL\nJNZ 0x00402ed0\nADD RBX,-0x40\nDEC dword ptr [0x006112a8]\nJMP 0x00402ed0\nCMP dword ptr [0x006112a8],0x0\nJZ 0x00402f16\nMOV EDI,0x40c61d\nMOV ESI,0xffffffff\nCALL 0x00403700\nJMP 0x00402fb1\nXOR EAX,EAX\nJMP 0x00402fbf\nXOR EDI,EDI\nMOV ESI,0x40b58f\nMOV EDX,0x5\nCALL 0x00401860\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [0x00611330]\nMOV qword ptr [RBX],RAX\nMOV byte ptr [0x006113b1],0x1\nMOV dword ptr [RBX + 0x10],0x0\nMOV byte ptr [RBX + 0x39],0x0\nINC dword ptr [0x006113e0]\nMOV EDI,0x40c61d\nMOV ESI,0xffffffff\nCALL 0x00403700\nMOV dword ptr [RBX + 0x2c],0x0\nMOV ESI,dword ptr [0x006112a8]\nCMP ESI,0x1\nJZ 0x00402fb1\nMOV RAX,qword ptr [RBX]\nMOV RCX,qword ptr [RBX + 0x8]\nADD RBX,0x40\nMOV EDX,0x1\nSUB EDX,ESI\nNOP word ptr [RAX + RAX*0x1]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RBX],RAX\nMOV dword ptr [RBX + 0x10],0x0\nMOV byte ptr [RBX + 0x39],0x0\nMOV dword ptr [RBX + 0x2c],0x0\nADD RBX,0x40\nINC EDX\nJNZ 0x00402f90\nMOV EAX,dword ptr [0x006113e0]\nMOV dword ptr [0x006113f0],EAX\nMOV AL,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1159
S'55\n41 56\n53\n49 89 f6\n89 fd\nc7 05 6d e5 20 00 00 00 00 00\n48 8b 3d 6e e5 20 00\ne8 c1 e8 ff ff\n48 63 3d 22 e4 20 00\nbe 40 00 00 00\ne8 40 57 00 00\n48 89 c3\n48 89 1d 4e e5 20 00\n80 3d f9 e4 20 00 01\n74 35\n85 ed\n7e 76\n49 8b 3e\n48 89 de\ne8 7e 07 00 00\n84 c0\n74 60\n49 8b 2e\n48 8b 3b\ne8 1f eb ff ff\n48 89 ef\n89 c6\ne9 93 00 00 00\n48 83 c3 40\n49 83 c6 08\n85 ed\n74 1d\nff cd\n49 8b 3e\n48 89 de\ne8 47 07 00 00\n84 c0\n75 e3\n48 83 c3 c0\nff 0d b1 e3 20 00\neb d7\n83 3d a8 e3 20 00 00\n74 14\nbf 1d c6 40 00\nbe ff ff ff ff\ne8 ef 07 00 00\ne9 9b 00 00 00\n31 c0\ne9 a2 00 00 00\n31 ff\nbe 8f b5 40 00\nba 05 00 00 00\ne8 32 e9 ff ff\n48 89 43 08\n48 8b 05 f7 e3 20 00\n48 89 03\nc6 05 6e e4 20 00 01\nc7 43 10 00 00 00 00\nc6 43 39 00\nff 05 8c e4 20 00\nbf 1d c6 40 00\nbe ff ff ff ff\ne8 9d 07 00 00\nc7 43 2c 00 00 00 00\n8b 35 38 e3 20 00\n83 fe 01\n74 3c\n48 8b 03\n48 8b 4b 08\n48 83 c3 40\nba 01 00 00 00\n29 f2\n66 0f 1f 84 00 00 00 00 00\n48 89 4b 08\n48 89 03\nc7 43 10 00 00 00 00\nc6 43 39 00\nc7 43 2c 00 00 00 00\n48 83 c3 40\nff c2\n75 df\n8b 05 29 e4 20 00\n89 05 33 e4 20 00\nb0 01\n5b\n41 5e\n5d\nc3\n'
p1160
S'.text:0000000000402e60\n.text:0000000000402e61\n.text:0000000000402e63\n.text:0000000000402e64\n.text:0000000000402e67\n.text:0000000000402e69\n.text:0000000000402e73\n.text:0000000000402e7a\n.text:0000000000402e7f\n.text:0000000000402e86\n.text:0000000000402e8b\n.text:0000000000402e90\n.text:0000000000402e93\n.text:0000000000402e9a\n.text:0000000000402ea1\n.text:0000000000402ea3\n.text:0000000000402ea5\n.text:0000000000402ea7\n.text:0000000000402eaa\n.text:0000000000402ead\n.text:0000000000402eb2\n.text:0000000000402eb4\n.text:0000000000402eb6\n.text:0000000000402eb9\n.text:0000000000402ebc\n.text:0000000000402ec1\n.text:0000000000402ec4\n.text:0000000000402ec6\n.text:0000000000402ed0\n.text:0000000000402ed4\n.text:0000000000402ed8\n.text:0000000000402eda\n.text:0000000000402edc\n.text:0000000000402ede\n.text:0000000000402ee1\n.text:0000000000402ee4\n.text:0000000000402ee9\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402ef1\n.text:0000000000402ef7\n.text:0000000000402ef9\n.text:0000000000402f00\n.text:0000000000402f02\n.text:0000000000402f07\n.text:0000000000402f0c\n.text:0000000000402f11\n.text:0000000000402f16\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f1f\n.text:0000000000402f24\n.text:0000000000402f29\n.text:0000000000402f2e\n.text:0000000000402f32\n.text:0000000000402f39\n.text:0000000000402f3c\n.text:0000000000402f43\n.text:0000000000402f4a\n.text:0000000000402f4e\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5e\n.text:0000000000402f63\n.text:0000000000402f6a\n.text:0000000000402f70\n.text:0000000000402f73\n.text:0000000000402f75\n.text:0000000000402f78\n.text:0000000000402f7c\n.text:0000000000402f80\n.text:0000000000402f85\n.text:0000000000402f87\n.text:0000000000402f90\n.text:0000000000402f94\n.text:0000000000402f97\n.text:0000000000402f9e\n.text:0000000000402fa2\n.text:0000000000402fa9\n.text:0000000000402fad\n.text:0000000000402faf\n.text:0000000000402fb1\n.text:0000000000402fb7\n.text:0000000000402fbd\n.text:0000000000402fbf\n.text:0000000000402fc0\n.text:0000000000402fc2\n.text:0000000000402fc3\n'
p1161
tp1162
sS'save_abbr'
p1163
(S'\n__stdcall save_abbr(timezone_t tz, tm * tm)\n'
p1164
V\u000a_Bool save_abbr(timezone_t tz,tm *tm)\u000a\u000a{\u000a  char *pcVar1;\u000a  tm *__s2;\u000a  tm_zone *ptVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  timezone_t ptVar5;\u000a  char *pcVar6;\u000a  char *__s1;\u000a  \u000a  __s2 = (tm *)tm->tm_zone;\u000a  if ((__s2 != (tm *)0x0) && ((__s2 < tm || (tm + 1 <= __s2)))) {\u000a    if (*(char *)&__s2->tm_sec != 0) {\u000a      pcVar6 = tz->abbrs;\u000a      do {\u000a        __s1 = pcVar6;\u000a        do {\u000a          iVar3 = strcmp(__s1,(char *)__s2);\u000a          if (iVar3 == 0) goto LAB_00409831;\u000a          if ((*__s1 == 0) && ((__s1 != tz->abbrs || (tz->tz_is_set == 0)))) {\u000a            sVar4 = strlen((char *)__s2);\u000a            if (sVar4 + 1 < (ulong)((long)tz + (0x80 - (long)__s1))) {\u000a              extend_abbrs(__s1,(char *)__s2,sVar4 + 1);\u000a            }\u000a            else {\u000a              ptVar5 = tzalloc((char *)__s2);\u000a              *(timezone_t *)&tz->next = ptVar5;\u000a              if (ptVar5 == (timezone_t)0x0) {\u000a                return false;\u000a              }\u000a              ptVar5->tz_is_set = 0;\u000a              __s1 = ptVar5->abbrs;\u000a            }\u000a            goto LAB_00409831;\u000a          }\u000a          sVar4 = strlen(__s1);\u000a          pcVar6 = __s1 + sVar4 + 1;\u000a          pcVar1 = __s1 + sVar4 + 1;\u000a          __s1 = pcVar6;\u000a        } while (*pcVar1 != 0);\u000a        ptVar2 = tz->next;\u000a        if (ptVar2 != (tm_zone *)0x0) {\u000a          pcVar6 = ptVar2->abbrs;\u000a          tz = (timezone_t)ptVar2;\u000a        }\u000a      } while( true );\u000a    }\u000a    __s1 = "";\u000aLAB_00409831:\u000a    tm->tm_zone = __s1;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R12,RDI\nMOV RBX,qword ptr [R15 + 0x30]\nMOV R14B,0x1\nTEST RBX,RBX\nJZ 0x00409835\nCMP R15,RBX\nJA 0x00409773\nLEA RAX,[R15 + 0x38]\nCMP RBX,RAX\nJC 0x00409835\nCMP byte ptr [RBX],0x0\nJZ 0x0040977f\nLEA RBP,[R12 + 0x9]\nJMP 0x0040979c\nMOV EBP,0x40c61d\nJMP 0x00409831\nMOV RAX,qword ptr [R12]\nLEA RBP,[RAX + 0x9]\nTEST RAX,RAX\nCMOVZ RBP,RCX\nCMOVNZ R12,RAX\nLEA R13,[R12 + 0x9]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x00401990\nTEST EAX,EAX\nJZ 0x00409831\nCMP byte ptr [RBP],0x0\nJNZ 0x004097d2\nCMP RBP,R13\nJNZ 0x004097eb\nCMP byte ptr [R12 + 0x8],0x0\nJZ 0x004097eb\nMOV RDI,RBP\nCALL 0x00401880\nLEA RCX,[RBP + RAX*0x1 + 0x1]\nCMP byte ptr [RBP + RAX*0x1 + 0x1],0x0\nMOV RBP,RCX\nJNZ 0x004097b0\nJMP 0x00409789\nMOV RDI,RBX\nCALL 0x00401880\nINC RAX\nMOV RCX,R12\nSUB RCX,-0x80\nSUB RCX,RBP\nCMP RAX,RCX\nJNC 0x00409815\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x004095e0\nJMP 0x00409831\nMOV RDI,RBX\nCALL 0x00409570\nMOV RBP,RAX\nMOV qword ptr [R12],RBP\nTEST RBP,RBP\nJZ 0x00409847\nMOV byte ptr [RBP + 0x8],0x0\nADD RBP,0x9\nMOV qword ptr [R15 + 0x30],RBP\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nJMP 0x00409835\n'
p1166
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f7\n49 89 fc\n49 8b 5f 30\n41 b6 01\n48 85 db\n0f 84 d4 00 00 00\n49 39 df\n77 0d\n49 8d 47 38\n48 39 c3\n0f 82 c2 00 00 00\n80 3b 00\n74 07\n49 8d 6c 24 09\neb 1d\nbd 1d c6 40 00\ne9 a8 00 00 00\n49 8b 04 24\n48 8d 68 09\n48 85 c0\n48 0f 44 e9\n4c 0f 45 e0\n4d 8d 6c 24 09\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ef\n48 89 de\ne8 d5 81 ff ff\n85 c0\n74 72\n80 7d 00 00\n75 0d\n4c 39 ed\n75 21\n41 80 7c 24 08 00\n74 19\n48 89 ef\ne8 a6 80 ff ff\n48 8d 4c 05 01\n80 7c 05 01 00\n48 89 cd\n75 c7\neb 9e\n48 89 df\ne8 8d 80 ff ff\n48 ff c0\n4c 89 e1\n48 83 e9 80\n48 29 e9\n48 39 c8\n73 10\n48 89 ef\n48 89 de\n48 89 c2\ne8 cd fd ff ff\neb 1c\n48 89 df\ne8 53 fd ff ff\n48 89 c5\n49 89 2c 24\n48 85 ed\n74 1e\nc6 45 08 00\n48 83 c5 09\n49 89 6f 30\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\neb e9\n'
p1167
S'.text:0000000000409740\n.text:0000000000409741\n.text:0000000000409743\n.text:0000000000409745\n.text:0000000000409747\n.text:0000000000409749\n.text:000000000040974a\n.text:000000000040974b\n.text:000000000040974e\n.text:0000000000409751\n.text:0000000000409755\n.text:0000000000409758\n.text:000000000040975b\n.text:0000000000409761\n.text:0000000000409764\n.text:0000000000409766\n.text:000000000040976a\n.text:000000000040976d\n.text:0000000000409773\n.text:0000000000409776\n.text:0000000000409778\n.text:000000000040977d\n.text:000000000040977f\n.text:0000000000409784\n.text:0000000000409789\n.text:000000000040978d\n.text:0000000000409791\n.text:0000000000409794\n.text:0000000000409798\n.text:000000000040979c\n.text:00000000004097a1\n.text:00000000004097b0\n.text:00000000004097b3\n.text:00000000004097b6\n.text:00000000004097bb\n.text:00000000004097bd\n.text:00000000004097bf\n.text:00000000004097c3\n.text:00000000004097c5\n.text:00000000004097c8\n.text:00000000004097ca\n.text:00000000004097d0\n.text:00000000004097d2\n.text:00000000004097d5\n.text:00000000004097da\n.text:00000000004097df\n.text:00000000004097e4\n.text:00000000004097e7\n.text:00000000004097e9\n.text:00000000004097eb\n.text:00000000004097ee\n.text:00000000004097f3\n.text:00000000004097f6\n.text:00000000004097f9\n.text:00000000004097fd\n.text:0000000000409800\n.text:0000000000409803\n.text:0000000000409805\n.text:0000000000409808\n.text:000000000040980b\n.text:000000000040980e\n.text:0000000000409813\n.text:0000000000409815\n.text:0000000000409818\n.text:000000000040981d\n.text:0000000000409820\n.text:0000000000409824\n.text:0000000000409827\n.text:0000000000409829\n.text:000000000040982d\n.text:0000000000409831\n.text:0000000000409835\n.text:0000000000409838\n.text:000000000040983c\n.text:000000000040983d\n.text:000000000040983f\n.text:0000000000409841\n.text:0000000000409843\n.text:0000000000409845\n.text:0000000000409846\n.text:0000000000409847\n.text:000000000040984a\n'
p1168
tp1169
sS'bindtextdomain'
p1170
(S'\n__stdcall bindtextdomain()\n'
p1171
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_006110b0)();\u000a  return;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x006110b0]\n'
p1173
S'ff 25 5a f8 20 00\n'
p1174
S'.plt:0000000000401850\n'
p1175
tp1176
sS'set_char_quoting'
p1177
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1178
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1179
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x611480\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1180
S'89 f1\n48 85 ff\nbe 80 14 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1181
S'.text:0000000000404f90\n.text:0000000000404f92\n.text:0000000000404f95\n.text:0000000000404f9a\n.text:0000000000404f9e\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa7\n.text:0000000000404fac\n.text:0000000000404faf\n.text:0000000000404fb1\n.text:0000000000404fb3\n.text:0000000000404fb6\n.text:0000000000404fb8\n.text:0000000000404fbb\n.text:0000000000404fbd\n.text:0000000000404fc0\n.text:0000000000404fc5\n'
p1182
tp1183
sS'quotearg_n'
p1184
(S'\n__stdcall quotearg_n(char * arg)\n'
p1185
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'MOV RDX,-0x1\nMOV ECX,0x611480\nJMP 0x00405e80\n'
p1187
S'48 c7 c2 ff ff ff ff\nb9 80 14 61 00\neb 02\n'
p1188
S'.text:0000000000405e70\n.text:0000000000405e77\n.text:0000000000405e7c\n'
p1189
tp1190
sS'close_stream'
p1191
(S'\n__stdcall close_stream(FILE * stream)\n'
p1192
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004017d0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401970\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00409270\nTEST EBP,EBP\nJZ 0x00409bab\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00409bcf\nCALL 0x00401780\nMOV dword ptr [RAX],0x0\nJMP 0x00409bcf\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00409bcf\nTEST CL,CL\nJNZ 0x00409bcf\nCALL 0x00401780\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1194
S'55\n41 56\n53\n48 89 fb\ne8 54 7c ff ff\n49 89 c6\n48 89 df\ne8 e9 7d ff ff\n89 c5\n48 89 df\ne8 df f6 ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 dd 7b ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 be 7b ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1195
S'.text:0000000000409b70\n.text:0000000000409b71\n.text:0000000000409b73\n.text:0000000000409b74\n.text:0000000000409b77\n.text:0000000000409b7c\n.text:0000000000409b7f\n.text:0000000000409b82\n.text:0000000000409b87\n.text:0000000000409b89\n.text:0000000000409b8c\n.text:0000000000409b91\n.text:0000000000409b93\n.text:0000000000409b95\n.text:0000000000409b9a\n.text:0000000000409b9c\n.text:0000000000409b9e\n.text:0000000000409ba3\n.text:0000000000409ba9\n.text:0000000000409bab\n.text:0000000000409bad\n.text:0000000000409bb0\n.text:0000000000409bb2\n.text:0000000000409bb4\n.text:0000000000409bb7\n.text:0000000000409bb9\n.text:0000000000409bbb\n.text:0000000000409bbd\n.text:0000000000409bc2\n.text:0000000000409bc4\n.text:0000000000409bc7\n.text:0000000000409bcc\n.text:0000000000409bcf\n.text:0000000000409bd1\n.text:0000000000409bd2\n.text:0000000000409bd4\n.text:0000000000409bd5\n'
p1196
tp1197
sS'print_white_space'
p1198
(S'\n__stdcall print_white_space()\n'
p1199
V\u000aulong print_white_space(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  undefined4 extraout_var;\u000a  undefined4 extraout_var_00;\u000a  int iVar3;\u000a  int iVar4;\u000a  \u000a  uVar2 = (ulong)(uint)spaces_not_printed;\u000a  iVar4 = spaces_not_printed + output_position;\u000a  iVar1 = output_position;\u000a  if (1 < spaces_not_printed) {\u000a    do {\u000a      uVar2 = (long)iVar1 / (long)chars_per_output_tab & 0xffffffff;\u000a      iVar3 = (chars_per_output_tab - iVar1 % chars_per_output_tab) + iVar1;\u000a      if (iVar4 < iVar3) break;\u000a      iVar1 = putchar_unlocked((int)output_tab_char);\u000a      uVar2 = CONCAT44(extraout_var,iVar1);\u000a      iVar1 = iVar3;\u000a    } while (1 < iVar4 - iVar3);\u000a  }\u000a  if (iVar1 < iVar4) {\u000a    iVar1 = iVar4 - iVar1;\u000a    do {\u000a      iVar3 = putchar_unlocked(0x20);\u000a      uVar2 = CONCAT44(extraout_var_00,iVar3);\u000a      iVar1 = iVar1 + -1;\u000a    } while (iVar1 != 0);\u000a  }\u000a  spaces_not_printed = 0;\u000a  output_position = iVar4;\u000a  return uVar2;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBX,dword ptr [0x00611454]\nMOV EAX,dword ptr [0x00611450]\nLEA R14D,[RAX + RBX*0x1]\nCMP EAX,0x2\nJL 0x0040429d\nNOP dword ptr [RAX]\nMOV ECX,EBX\nMOV EBX,dword ptr [0x0061127c]\nMOV EAX,ECX\nCDQ\nIDIV EBX\nSUB EBX,EDX\nADD EBX,ECX\nMOV EBP,R14D\nSUB EBP,EBX\nJL 0x0040429f\nMOVSX EDI,byte ptr [0x00611278]\nCALL 0x004019c0\nCMP EBP,0x1\nMOV ECX,EBX\nJG 0x00404270\nJMP 0x0040429f\nMOV ECX,EBX\nCMP ECX,R14D\nJGE 0x004042be\nMOV EBX,R14D\nSUB EBX,ECX\nNOP dword ptr [RAX]\nMOV EDI,0x20\nCALL 0x004019c0\nDEC EBX\nJNZ 0x004042b0\nMOV dword ptr [0x00611454],R14D\nMOV dword ptr [0x00611450],0x0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1201
S'55\n41 56\n53\n8b 1d fa d1 20 00\n8b 05 f0 d1 20 00\n44 8d 34 18\n83 f8 02\n7c 34\n0f 1f 80 00 00 00 00\n89 d9\n8b 1d 04 d0 20 00\n89 c8\n99\nf7 fb\n29 d3\n01 cb\n44 89 f5\n29 dd\n7c 17\n0f be 3d e9 cf 20 00\ne8 2c d7 ff ff\n83 fd 01\n89 d9\n7f d5\neb 02\n89 d9\n44 39 f1\n7d 1a\n44 89 f3\n29 cb\n0f 1f 80 00 00 00 00\nbf 20 00 00 00\ne8 06 d7 ff ff\nff cb\n75 f2\n44 89 35 8f d1 20 00\nc7 05 81 d1 20 00 00 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1202
S'.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404254\n.text:000000000040425a\n.text:0000000000404260\n.text:0000000000404264\n.text:0000000000404267\n.text:0000000000404269\n.text:0000000000404270\n.text:0000000000404272\n.text:0000000000404278\n.text:000000000040427a\n.text:000000000040427b\n.text:000000000040427d\n.text:000000000040427f\n.text:0000000000404281\n.text:0000000000404284\n.text:0000000000404286\n.text:0000000000404288\n.text:000000000040428f\n.text:0000000000404294\n.text:0000000000404297\n.text:0000000000404299\n.text:000000000040429b\n.text:000000000040429d\n.text:000000000040429f\n.text:00000000004042a2\n.text:00000000004042a4\n.text:00000000004042a7\n.text:00000000004042a9\n.text:00000000004042b0\n.text:00000000004042b5\n.text:00000000004042ba\n.text:00000000004042bc\n.text:00000000004042be\n.text:00000000004042c5\n.text:00000000004042cf\n.text:00000000004042d0\n.text:00000000004042d2\n.text:00000000004042d3\n'
p1203
tp1204
sS'quotearg_colon_mem'
p1205
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1206
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1207
S'MOV EDX,0x3a\nJMP 0x00406190\n'
p1208
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1209
S'.text:0000000000406220\n.text:0000000000406225\n'
p1210
tp1211
sS'strtoimax'
p1212
(S'\n__stdcall strtoimax(char * __nptr, char * * __endptr, int __base)\n'
p1213
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strtoimax_00611030)();\u000a  return iVar1;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x00611030]\n'
p1215
S'ff 25 da f8 20 00\n'
p1216
S'.plt:0000000000401750\n'
p1217
tp1218
sS'xcalloc'
p1219
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1220
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1221
S'PUSH RAX\nCALL 0x00409220\nTEST RAX,RAX\nJZ 0x0040871d\nPOP RCX\nRET\nCALL 0x00408780\n'
p1222
S'50\ne8 0a 0b 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1223
S'.text:0000000000408710\n.text:0000000000408711\n.text:0000000000408716\n.text:0000000000408719\n.text:000000000040871b\n.text:000000000040871c\n.text:000000000040871d\n'
p1224
tp1225
sS'strtol'
p1226
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_00611158)();\u000a  return lVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x00611158]\n'
p1229
S'ff 25 b2 f7 20 00\n'
p1230
S'.plt:00000000004019a0\n'
p1231
tp1232
sS'clear_ungetc_buffer_preserving_position'
p1233
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1234
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1235
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004094e7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00409500\n'
p1236
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1237
S'.text:00000000004094e0\n.text:00000000004094e4\n.text:00000000004094e6\n.text:00000000004094e7\n.text:00000000004094e9\n.text:00000000004094ee\n'
p1238
tp1239
sS'xnmalloc'
p1240
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1241
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1242
S'MOV RAX,RDI\nMUL RSI\nJO 0x004085e1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004085f0\nPUSH RAX\nCALL 0x00408780\n'
p1243
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1244
S'.text:00000000004085d0\n.text:00000000004085d3\n.text:00000000004085d6\n.text:00000000004085d8\n.text:00000000004085dc\n.text:00000000004085df\n.text:00000000004085e1\n.text:00000000004085e2\n'
p1245
tp1246
sS'quotearg_char'
p1247
(S'\n__stdcall quotearg_char(char * arg)\n'
p1248
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1249
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00406190\n'
p1250
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1251
S'.text:0000000000406200\n.text:0000000000406202\n.text:0000000000406209\n.text:000000000040620b\n'
p1252
tp1253
sS'malloc'
p1254
(S'\n__stdcall malloc(size_t __size)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00611188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x00611188]\n'
p1257
S'ff 25 82 f7 20 00\n'
p1258
S'.plt:0000000000401a00\n'
p1259
tp1260
sS'hold_file'
p1261
(S'\n__stdcall hold_file(COLUMN * p)\n'
p1262
V\u000avoid hold_file(COLUMN *p)\u000a\u000a{\u000a  int iVar1;\u000a  anon_enum_32 *paVar2;\u000a  uint uVar3;\u000a  \u000a  if (parallel_files == 0) {\u000a    if (columns != 0) {\u000a      uVar3 = (uint)storing_columns;\u000a      paVar2 = &column_vector->status;\u000a      iVar1 = columns;\u000a      do {\u000a        *paVar2 = uVar3 + FF_FOUND;\u000a        paVar2 = paVar2 + 0x10;\u000a        iVar1 = iVar1 + -1;\u000a      } while (iVar1 != 0);\u000a    }\u000a  }\u000a  else {\u000a    p->status = ON_HOLD;\u000a  }\u000a  p->lines_to_print = 0;\u000a  files_ready_to_read = files_ready_to_read + -1;\u000a  return;\u000a}\u000a\u000a
p1263
S'MOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJZ 0x00403a03\nMOV dword ptr [RDI + 0x10],0x2\nJMP 0x00403a3a\nMOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJZ 0x00403a3a\nMOV RCX,qword ptr [0x006113e8]\nMOVZX EDX,byte ptr [0x00611379]\nINC EDX\nADD RCX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV dword ptr [RCX],EDX\nADD RCX,0x40\nDEC EAX\nJNZ 0x00403a30\nMOV dword ptr [RDI + 0x30],0x0\nDEC dword ptr [0x006113f0]\nRET\n'
p1264
S'8a 05 a4 d9 20 00\n84 c0\n74 09\nc7 47 10 02 00 00 00\neb 37\n8b 05 9f d8 20 00\n85 c0\n74 2d\n48 8b 0d d4 d9 20 00\n0f b6 15 5e d9 20 00\nff c2\n48 83 c1 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n89 11\n48 83 c1 40\nff c8\n75 f6\nc7 47 30 00 00 00 00\nff 0d a9 d9 20 00\nc3\n'
p1265
S'.text:00000000004039f0\n.text:00000000004039f6\n.text:00000000004039f8\n.text:00000000004039fa\n.text:0000000000403a01\n.text:0000000000403a03\n.text:0000000000403a09\n.text:0000000000403a0b\n.text:0000000000403a0d\n.text:0000000000403a14\n.text:0000000000403a1b\n.text:0000000000403a1d\n.text:0000000000403a21\n.text:0000000000403a30\n.text:0000000000403a32\n.text:0000000000403a36\n.text:0000000000403a38\n.text:0000000000403a3a\n.text:0000000000403a41\n.text:0000000000403a47\n'
p1266
tp1267
sS'read_line'
p1268
(S'\n__stdcall read_line(COLUMN * p)\n'
p1269
V\u000a_Bool read_line(COLUMN *p)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int __c;\u000a  COLUMN *p_00;\u000a  char *clump;\u000a  ulong unaff_R14;\u000a  \u000a  iVar1 = getc_unlocked((FILE *)p->fp);\u000a  __c = input_position;\u000a  if (iVar1 == 0xc) {\u000a    if (p->full_page_printed == false) {\u000a      p->full_page_printed = false;\u000a      goto LAB_00403f5a;\u000a    }\u000a    iVar1 = getc_unlocked((FILE *)p->fp);\u000a    if (iVar1 == 10) {\u000a      iVar1 = getc_unlocked((FILE *)p->fp);\u000a    }\u000a  }\u000a  p->full_page_printed = false;\u000a  if (iVar1 == -1) {\u000a    close_file(p);\u000a    return true;\u000a  }\u000a  if (iVar1 != 10) {\u000a    if (iVar1 == 0xc) {\u000aLAB_00403f5a:\u000a      __c = getc_unlocked((FILE *)p->fp);\u000a      if (__c != 10) {\u000a        ungetc(__c,(FILE *)p->fp);\u000a      }\u000a      FF_only = 1;\u000a      if ((print_a_header == 1) && (storing_columns == 1)) {\u000a        pad_vertically = true;\u000a        print_header();\u000a      }\u000a      else {\u000a        if (keep_FF == 1) {\u000a          print_a_FF = 1;\u000a        }\u000a      }\u000a      hold_file(p);\u000a      return true;\u000a    }\u000a    uVar2 = char_to_clump();\u000a    unaff_R14 = (ulong)uVar2;\u000a  }\u000a  if ((truncate_lines == 1) && (chars_per_column < input_position)) {\u000a    input_position = __c;\u000a    return false;\u000a  }\u000a  if (p->char_func != store_char) {\u000a    pad_vertically = true;\u000a    if ((print_a_header == 1) && (storing_columns == 1)) {\u000a      print_header();\u000a    }\u000a    __c = separators_not_printed;\u000a    if ((parallel_files == 1) && (align_empty_cols == 1)) {\u000a      separators_not_printed = 0;\u000a      p_00 = column_vector;\u000a      if (0 < __c) {\u000a        do {\u000a          align_column(p_00);\u000a          separators_not_printed = separators_not_printed + 1;\u000a          __c = __c + -1;\u000a          p_00 = p_00 + 1;\u000a        } while (__c != 0);\u000a      }\u000a      padding_not_printed = p->start_position;\u000a      spaces_not_printed = 0;\u000a      if (truncate_lines != 0) {\u000a        spaces_not_printed = chars_per_column;\u000a      }\u000a      align_empty_cols = 0;\u000a    }\u000a    if (col_sep_length < padding_not_printed) {\u000a      pad_across_to();\u000a      padding_not_printed = 0;\u000a    }\u000a    if (use_col_separator != false) {\u000a      print_sep_string();\u000a    }\u000a  }\u000a  if (p->numbered != false) {\u000a    add_line_number(p);\u000a  }\u000a  empty_line = 0;\u000a  if (iVar1 != 10) {\u000a    clump = (char *)(unaff_R14 & 0xffffffff);\u000a    while( true ) {\u000a      print_clump(p,clump);\u000a      iVar1 = getc_unlocked((FILE *)p->fp);\u000a      __c = input_position;\u000a      if (iVar1 == -1) {\u000a        close_file(p);\u000a        return true;\u000a      }\u000a      if (iVar1 == 10) {\u000a        return true;\u000a      }\u000a      if (iVar1 == 0xc) {\u000a        __c = getc_unlocked((FILE *)p->fp);\u000a        if (__c != 10) {\u000a          ungetc(__c,(FILE *)p->fp);\u000a        }\u000a        if (keep_FF == 1) {\u000a          print_a_FF = 1;\u000a        }\u000a        hold_file(p);\u000a        return true;\u000a      }\u000a      uVar2 = char_to_clump();\u000a      if ((truncate_lines == 1) && (chars_per_column < input_position)) break;\u000a      clump = (char *)(ulong)uVar2;\u000a    }\u000a    input_position = __c;\u000a    return false;\u000a  }\u000a  empty_line = 0;\u000a  return true;\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RDI\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nMOV R12D,EAX\nMOV EBP,dword ptr [0x0061145c]\nCMP R12D,0xc\nJNZ 0x00403d8f\nCMP byte ptr [R13 + 0x39],0x0\nJZ 0x00403f55\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nMOV R12D,EAX\nCMP R12D,0xa\nJNZ 0x00403d8f\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nMOV R12D,EAX\nMOV byte ptr [R13 + 0x39],0x0\nCMP R12D,-0x1\nJZ 0x00403dc1\nCMP R12D,0xa\nJZ 0x00403dce\nCMP R12D,0xc\nJZ 0x00403f5a\nMOVSX EDI,R12B\nCALL 0x004042f0\nMOV R14D,EAX\nCMP byte ptr [0x006113af],0x1\nJZ 0x00403dd7\nJMP 0x00403df3\nMOV RDI,R13\nCALL 0x00403a50\nJMP 0x00403fb2\nCMP byte ptr [0x006113af],0x1\nJNZ 0x00403df3\nMOV EAX,dword ptr [0x0061145c]\nCMP EAX,dword ptr [0x006113cc]\nJLE 0x00403df3\nMOV dword ptr [0x0061145c],EBP\nXOR R15D,R15D\nJMP 0x00403fb5\nMOV EAX,0x403b40\nCMP qword ptr [R13 + 0x20],RAX\nJZ 0x00403eb9\nMOV byte ptr [0x00611448],0x1\nCMP byte ptr [0x00611449],0x1\nJNZ 0x00403e20\nCMP byte ptr [0x00611379],0x1\nJNZ 0x00403e20\nCALL 0x00404010\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00403e8e\nCMP byte ptr [0x00611462],0x1\nJNZ 0x00403e8e\nMOV EBX,dword ptr [0x00611458]\nMOV dword ptr [0x00611458],0x0\nTEST EBX,EBX\nJLE 0x00403e66\nMOV RBP,qword ptr [0x006113e8]\nNOP dword ptr [RAX]\nMOV RDI,RBP\nCALL 0x004044a0\nINC dword ptr [0x00611458]\nADD RBP,0x40\nDEC EBX\nJNZ 0x00403e50\nMOV EAX,dword ptr [R13 + 0x34]\nMOV dword ptr [0x0061144c],EAX\nMOV AL,byte ptr [0x006113af]\nXOR ECX,ECX\nTEST AL,AL\nCMOVNZ ECX,dword ptr [0x006113cc]\nMOV dword ptr [0x00611450],ECX\nMOV byte ptr [0x00611462],0x0\nMOV EDI,dword ptr [0x0061144c]\nSUB EDI,dword ptr [0x006113a8]\nJLE 0x00403eab\nCALL 0x00404120\nMOV dword ptr [0x0061144c],0x0\nCMP byte ptr [0x006113a5],0x0\nJZ 0x00403eb9\nCALL 0x00404170\nCMP byte ptr [R13 + 0x38],0x0\nJZ 0x00403ec8\nMOV RDI,R13\nCALL 0x004044e0\nMOV byte ptr [0x00611463],0x0\nMOV R15B,0x1\nCMP R12D,0xa\nJZ 0x00403fb5\nMOV RDX,qword ptr [0x006113d8]\nMOV RDI,R13\nMOV ESI,R14D\nJMP 0x00403efc\nMOV RDX,qword ptr [0x006113d8]\nMOV RDI,R13\nMOV ESI,EAX\nCALL 0x00404600\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x00403fc7\nCMP EAX,0xa\nJZ 0x00403fb5\nCMP EAX,0xc\nJZ 0x00403fd1\nMOV EBX,dword ptr [0x0061145c]\nMOVSX EDI,AL\nCALL 0x004042f0\nCMP byte ptr [0x006113af],0x1\nJNZ 0x00403ef0\nMOV ECX,dword ptr [0x0061145c]\nCMP ECX,dword ptr [0x006113cc]\nJLE 0x00403ef0\nMOV dword ptr [0x0061145c],EBX\nXOR R15D,R15D\nJMP 0x00403fb5\nMOV byte ptr [R13 + 0x39],0x0\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nCMP EAX,0xa\nJZ 0x00403f73\nMOV RSI,qword ptr [R13]\nMOV EDI,EAX\nCALL 0x00401a30\nMOV byte ptr [0x00611460],0x1\nCMP byte ptr [0x00611449],0x1\nJNZ 0x00403f9a\nCMP byte ptr [0x00611379],0x1\nJNZ 0x00403f9a\nMOV byte ptr [0x00611448],0x1\nCALL 0x00404010\nJMP 0x00403faa\nCMP byte ptr [0x006113ad],0x1\nJNZ 0x00403faa\nMOV byte ptr [0x00611461],0x1\nMOV RDI,R13\nCALL 0x004039f0\nMOV R15B,0x1\nMOV EAX,R15D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R13\nCALL 0x00403a50\nJMP 0x00403fb5\nMOV RDI,qword ptr [R13]\nCALL 0x004017e0\nCMP EAX,0xa\nJZ 0x00403fea\nMOV RSI,qword ptr [R13]\nMOV EDI,EAX\nCALL 0x00401a30\nCMP byte ptr [0x006113ad],0x1\nJNZ 0x00403ffa\nMOV byte ptr [0x00611461],0x1\nMOV RDI,R13\nCALL 0x004039f0\nJMP 0x00403fb5\n'
p1271
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fd\n49 8b 7d 00\ne8 89 da ff ff\n41 89 c4\n8b 2d fc d6 20 00\n41 83 fc 0c\n75 29\n41 80 7d 39 00\n0f 84 e4 01 00 00\n49 8b 7d 00\ne8 66 da ff ff\n41 89 c4\n41 83 fc 0a\n75 0c\n49 8b 7d 00\ne8 54 da ff ff\n41 89 c4\n41 c6 45 39 00\n41 83 fc ff\n74 27\n41 83 fc 0a\n74 2e\n41 83 fc 0c\n0f 84 b0 01 00 00\n41 0f be fc\ne8 3d 05 00 00\n41 89 c6\n80 3d f2 d5 20 00 01\n74 18\neb 32\n4c 89 ef\ne8 87 fc ff ff\ne9 e4 01 00 00\n80 3d da d5 20 00 01\n75 1c\n8b 05 7f d6 20 00\n3b 05 e9 d5 20 00\n7e 0e\n89 2d 71 d6 20 00\n45 31 ff\ne9 c2 01 00 00\nb8 40 3b 40 00\n49 39 45 20\n0f 84 b7 00 00 00\nc6 05 3f d6 20 00 01\n80 3d 39 d6 20 00 01\n75 0e\n80 3d 60 d5 20 00 01\n75 05\ne8 f0 01 00 00\n80 3d 73 d5 20 00 01\n75 65\n80 3d 32 d6 20 00 01\n75 5c\n8b 1d 20 d6 20 00\nc7 05 16 d6 20 00 00 00 00 00\n85 db\n7e 20\n48 8b 2d 9b d5 20 00\n0f 1f 00\n48 89 ef\ne8 48 06 00 00\nff 05 fa d5 20 00\n48 83 c5 40\nff cb\n75 ea\n41 8b 45 34\n89 05 dc d5 20 00\n8a 05 39 d5 20 00\n31 c9\n84 c0\n0f 45 0d 4b d5 20 00\n89 0d c9 d5 20 00\nc6 05 d4 d5 20 00 00\n8b 3d b8 d5 20 00\n2b 3d 0e d5 20 00\n7e 0f\ne8 7f 02 00 00\nc7 05 a1 d5 20 00 00 00 00 00\n80 3d f3 d4 20 00 00\n74 05\ne8 b7 02 00 00\n41 80 7d 38 00\n74 08\n4c 89 ef\ne8 18 06 00 00\nc6 05 94 d5 20 00 00\n41 b7 01\n41 83 fc 0a\n0f 84 d9 00 00 00\n48 8b 15 f5 d4 20 00\n4c 89 ef\n44 89 f6\neb 11\n48 8b 15 e1 d4 20 00\n4c 89 ef\n89 c6\ne8 ff 06 00 00\n49 8b 7d 00\ne8 d6 d8 ff ff\n83 f8 ff\n0f 84 b4 00 00 00\n83 f8 0a\n0f 84 99 00 00 00\n83 f8 0c\n0f 84 ac 00 00 00\n8b 1d 31 d5 20 00\n0f be f8\ne8 bd 03 00 00\n80 3d 75 d4 20 00 01\n75 b4\n8b 0d 1a d5 20 00\n3b 0d 84 d4 20 00\n7e a6\n89 1d 0c d5 20 00\n45 31 ff\neb 60\n41 c6 45 39 00\n49 8b 7d 00\ne8 7d d8 ff ff\n83 f8 0a\n74 0b\n49 8b 75 00\n89 c7\ne8 bd da ff ff\nc6 05 e6 d4 20 00 01\n80 3d c8 d4 20 00 01\n75 17\n80 3d ef d3 20 00 01\n75 0e\nc6 05 b5 d4 20 00 01\ne8 78 00 00 00\neb 10\n80 3d 0c d4 20 00 01\n75 07\nc6 05 b7 d4 20 00 01\n4c 89 ef\ne8 3e fa ff ff\n41 b7 01\n44 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 89 ef\ne8 81 fa ff ff\neb e4\n49 8b 7d 00\ne8 06 d8 ff ff\n83 f8 0a\n74 0b\n49 8b 75 00\n89 c7\ne8 46 da ff ff\n80 3d bc d3 20 00 01\n75 07\nc6 05 67 d4 20 00 01\n4c 89 ef\ne8 ee f9 ff ff\neb b1\n'
p1272
S'.text:0000000000403d40\n.text:0000000000403d41\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d47\n.text:0000000000403d49\n.text:0000000000403d4a\n.text:0000000000403d4b\n.text:0000000000403d4e\n.text:0000000000403d52\n.text:0000000000403d57\n.text:0000000000403d5a\n.text:0000000000403d60\n.text:0000000000403d64\n.text:0000000000403d66\n.text:0000000000403d6b\n.text:0000000000403d71\n.text:0000000000403d75\n.text:0000000000403d7a\n.text:0000000000403d7d\n.text:0000000000403d81\n.text:0000000000403d83\n.text:0000000000403d87\n.text:0000000000403d8c\n.text:0000000000403d8f\n.text:0000000000403d94\n.text:0000000000403d98\n.text:0000000000403d9a\n.text:0000000000403d9e\n.text:0000000000403da0\n.text:0000000000403da4\n.text:0000000000403daa\n.text:0000000000403dae\n.text:0000000000403db3\n.text:0000000000403db6\n.text:0000000000403dbd\n.text:0000000000403dbf\n.text:0000000000403dc1\n.text:0000000000403dc4\n.text:0000000000403dc9\n.text:0000000000403dce\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403ddd\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403deb\n.text:0000000000403dee\n.text:0000000000403df3\n.text:0000000000403df8\n.text:0000000000403dfc\n.text:0000000000403e02\n.text:0000000000403e09\n.text:0000000000403e10\n.text:0000000000403e12\n.text:0000000000403e19\n.text:0000000000403e1b\n.text:0000000000403e20\n.text:0000000000403e27\n.text:0000000000403e29\n.text:0000000000403e30\n.text:0000000000403e32\n.text:0000000000403e38\n.text:0000000000403e42\n.text:0000000000403e44\n.text:0000000000403e46\n.text:0000000000403e4d\n.text:0000000000403e50\n.text:0000000000403e53\n.text:0000000000403e58\n.text:0000000000403e5e\n.text:0000000000403e62\n.text:0000000000403e64\n.text:0000000000403e66\n.text:0000000000403e6a\n.text:0000000000403e70\n.text:0000000000403e76\n.text:0000000000403e78\n.text:0000000000403e7a\n.text:0000000000403e81\n.text:0000000000403e87\n.text:0000000000403e8e\n.text:0000000000403e94\n.text:0000000000403e9a\n.text:0000000000403e9c\n.text:0000000000403ea1\n.text:0000000000403eab\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb9\n.text:0000000000403ebe\n.text:0000000000403ec0\n.text:0000000000403ec3\n.text:0000000000403ec8\n.text:0000000000403ecf\n.text:0000000000403ed2\n.text:0000000000403ed6\n.text:0000000000403edc\n.text:0000000000403ee3\n.text:0000000000403ee6\n.text:0000000000403ee9\n.text:0000000000403ef0\n.text:0000000000403ef7\n.text:0000000000403efa\n.text:0000000000403efc\n.text:0000000000403f01\n.text:0000000000403f05\n.text:0000000000403f0a\n.text:0000000000403f0d\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f1c\n.text:0000000000403f1f\n.text:0000000000403f25\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f33\n.text:0000000000403f3a\n.text:0000000000403f3c\n.text:0000000000403f42\n.text:0000000000403f48\n.text:0000000000403f4a\n.text:0000000000403f50\n.text:0000000000403f53\n.text:0000000000403f55\n.text:0000000000403f5a\n.text:0000000000403f5e\n.text:0000000000403f63\n.text:0000000000403f66\n.text:0000000000403f68\n.text:0000000000403f6c\n.text:0000000000403f6e\n.text:0000000000403f73\n.text:0000000000403f7a\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f8a\n.text:0000000000403f8c\n.text:0000000000403f93\n.text:0000000000403f98\n.text:0000000000403f9a\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403faa\n.text:0000000000403fad\n.text:0000000000403fb2\n.text:0000000000403fb5\n.text:0000000000403fb8\n.text:0000000000403fbc\n.text:0000000000403fbd\n.text:0000000000403fbf\n.text:0000000000403fc1\n.text:0000000000403fc3\n.text:0000000000403fc5\n.text:0000000000403fc6\n.text:0000000000403fc7\n.text:0000000000403fca\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd5\n.text:0000000000403fda\n.text:0000000000403fdd\n.text:0000000000403fdf\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fea\n.text:0000000000403ff1\n.text:0000000000403ff3\n.text:0000000000403ffa\n.text:0000000000403ffd\n.text:0000000000404002\n'
p1273
tp1274
sS'c_tolower'
p1275
(S'\n__stdcall c_tolower()\n'
p1276
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1277
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1278
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1279
S'.text:0000000000409b50\n.text:0000000000409b53\n.text:0000000000409b56\n.text:0000000000409b59\n.text:0000000000409b5c\n'
p1280
tp1281
sS'init_funcs'
p1282
(S'\n__stdcall init_funcs()\n'
p1283
V\u000avoid init_funcs(void)\u000a\u000a{\u000a  int iVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  byte bVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  COLUMN *pCVar7;\u000a  byte bVar8;\u000a  int iVar9;\u000a  byte bVar10;\u000a  code *pcVar11;\u000a  byte bVar12;\u000a  int iVar13;\u000a  code *pcVar14;\u000a  \u000a  iVar5 = chars_per_column;\u000a  bVar4 = truncate_lines;\u000a  iVar3 = col_sep_length;\u000a  bVar2 = numbered_lines;\u000a  bVar12 = storing_columns;\u000a  iVar1 = columns;\u000a  iVar13 = 0;\u000a  if (truncate_lines == 1) {\u000a    if ((parallel_files == 1) && (numbered_lines == 1)) {\u000a      iVar13 = chars_per_column + chars_per_margin + number_width;\u000a    }\u000a    else {\u000a      iVar13 = chars_per_column + chars_per_margin;\u000a    }\u000a  }\u000a  iVar6 = chars_per_margin + col_sep_length;\u000a  iVar9 = 1;\u000a  pCVar7 = column_vector;\u000a  if (1 < columns) {\u000a    bVar8 = parallel_files ^ 1;\u000a    iVar9 = 1;\u000a    pCVar7 = column_vector;\u000a    do {\u000a      bVar10 = bVar12 & 1;\u000a      pcVar14 = print_stored;\u000a      if (bVar10 != 0) {\u000a        pcVar14 = read_line;\u000a      }\u000a      pcVar11 = store_char;\u000a      if (bVar10 != 0) {\u000a        pcVar11 = print_char;\u000a      }\u000a      pCVar7->char_func = pcVar11;\u000a      pCVar7->print_func = pcVar14;\u000a      if ((bVar2 & 1) == 0) {\u000a        bVar10 = 0;\u000a      }\u000a      else {\u000a        bVar10 = iVar9 == 1 | bVar8;\u000a      }\u000a      pCVar7->numbered = bVar10 & 1;\u000a      pCVar7->start_position = iVar6;\u000a      iVar6 = iVar13 + iVar3;\u000a      iVar13 = iVar6 + iVar5;\u000a      if ((bVar4 & 1) == 0) {\u000a        iVar6 = 0;\u000a        iVar13 = 0;\u000a      }\u000a      pCVar7 = pCVar7 + 1;\u000a      iVar9 = iVar9 + 1;\u000a    } while (iVar9 < iVar1);\u000a  }\u000a  if ((bVar12 & 1) == 0) {\u000a    pcVar14 = print_char;\u000a    if (balance_columns != 0) {\u000a      pcVar14 = store_char;\u000a    }\u000a    pcVar11 = read_line;\u000a    if (balance_columns != 0) {\u000a      pcVar11 = print_stored;\u000a    }\u000a  }\u000a  else {\u000a    pcVar11 = read_line;\u000a    pcVar14 = print_char;\u000a  }\u000a  pCVar7->char_func = pcVar14;\u000a  pCVar7->print_func = pcVar11;\u000a  if (numbered_lines == 1) {\u000a    bVar12 = parallel_files ^ 1 | iVar9 == 1;\u000a  }\u000a  else {\u000a    bVar12 = 0;\u000a  }\u000a  pCVar7->numbered = bVar12 & 1;\u000a  pCVar7->start_position = iVar6;\u000a  return;\u000a}\u000a\u000a
p1284
S'MOV EAX,dword ptr [0x006113a0]\nXOR ESI,ESI\nCMP byte ptr [0x006113af],0x1\nJNZ 0x0040321b\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00403213\nCMP byte ptr [0x0061139b],0x1\nJNZ 0x00403213\nMOV ESI,dword ptr [0x006113cc]\nADD ESI,EAX\nADD ESI,dword ptr [0x006113c8]\nJMP 0x0040321b\nMOV ESI,dword ptr [0x006113cc]\nADD ESI,EAX\nPUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nADD EAX,dword ptr [0x006113a8]\nMOV RCX,qword ptr [0x006113e8]\nMOV EDX,0x1\nMOV BL,byte ptr [0x00611379]\nCMP dword ptr [0x006112a8],0x2\nJL 0x00403303\nMOV R11B,byte ptr [0x0061139b]\nMOV DL,byte ptr [0x0061139a]\nXOR DL,0x1\nMOV byte ptr [RSP + -0x1],DL\nMOV R9B,byte ptr [0x006113af]\nMOV R12D,dword ptr [0x006113a8]\nMOV R13D,dword ptr [0x006113cc]\nMOV R8D,dword ptr [0x006112a8]\nMOV EDX,0x1\nMOV R10B,byte ptr [0x00611379]\nXOR EDI,EDI\nNOP dword ptr [RAX + RAX*0x1]\nAND BL,0x1\nMOV R14D,0x403b90\nMOV EBP,0x403d40\nCMOVNZ R14,RBP\nTEST BL,BL\nMOV EBX,0x403b40\nMOV R15D,0x403cc0\nCMOVNZ RBX,R15\nMOV qword ptr [RCX + 0x20],RBX\nMOV qword ptr [RCX + 0x18],R14\nTEST R11B,0x1\nJZ 0x004032d0\nCMP EDX,0x1\nSETZ BL\nOR BL,byte ptr [RSP + -0x1]\nJMP 0x004032d2\nXOR EBX,EBX\nAND BL,0x1\nMOV byte ptr [RCX + 0x38],BL\nMOV dword ptr [RCX + 0x34],EAX\nADD ESI,R12D\nMOV EAX,ESI\nLEA ESI,[RSI + R13*0x1]\nMOV EBX,R9D\nAND BL,0x1\nCMOVZ EAX,EDI\nTEST BL,BL\nCMOVZ ESI,EDI\nADD RCX,0x40\nINC EDX\nCMP EDX,R8D\nMOV EBX,R10D\nJL 0x00403290\nMOV EBX,R10D\nTEST BL,0x1\nJZ 0x00403314\nMOV EDI,0x403d40\nMOV ESI,0x403cc0\nJMP 0x00403338\nMOV BL,byte ptr [0x0061137a]\nMOV EDI,0x403b40\nMOV ESI,0x403cc0\nTEST BL,BL\nCMOVNZ RSI,RDI\nMOV EBP,0x403b90\nMOV EDI,0x403d40\nCMOVNZ RDI,RBP\nMOV qword ptr [RCX + 0x20],RSI\nMOV qword ptr [RCX + 0x18],RDI\nCMP byte ptr [0x0061139b],0x1\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJNZ 0x00403369\nMOV SIL,byte ptr [0x0061139a]\nCMP EDX,0x1\nSETZ DL\nXOR SIL,0x1\nOR SIL,DL\nJMP 0x0040336b\nXOR ESI,ESI\nAND SIL,0x1\nMOV byte ptr [RCX + 0x38],SIL\nMOV dword ptr [RCX + 0x34],EAX\nRET\n'
p1285
S'8b 05 ba e1 20 00\n31 f6\n80 3d c0 e1 20 00 01\n75 2a\n80 3d a2 e1 20 00 01\n75 19\n80 3d 9a e1 20 00 01\n75 10\n8b 35 c3 e1 20 00\n01 c6\n03 35 b7 e1 20 00\neb 08\n8b 35 b3 e1 20 00\n01 c6\n55\n41 57\n41 56\n41 55\n41 54\n53\n03 05 7d e1 20 00\n48 8b 0d b6 e1 20 00\nba 01 00 00 00\n8a 1d 3c e1 20 00\n83 3d 64 e0 20 00 02\n0f 8c b9 00 00 00\n44 8a 1d 4a e1 20 00\n8a 15 43 e1 20 00\n80 f2 01\n88 54 24 ff\n44 8a 0d 4a e1 20 00\n44 8b 25 3c e1 20 00\n44 8b 2d 59 e1 20 00\n44 8b 05 2e e0 20 00\nba 01 00 00 00\n44 8a 15 f3 e0 20 00\n31 ff\n0f 1f 84 00 00 00 00 00\n80 e3 01\n41 be 90 3b 40 00\nbd 40 3d 40 00\n4c 0f 45 f5\n84 db\nbb 40 3b 40 00\n41 bf c0 3c 40 00\n49 0f 45 df\n48 89 59 20\n4c 89 71 18\n41 f6 c3 01\n74 0f\n83 fa 01\n0f 94 c3\n0a 5c 24 ff\neb 05\n31 db\n80 e3 01\n88 59 38\n89 41 34\n44 01 e6\n89 f0\n42 8d 34 2e\n44 89 cb\n80 e3 01\n0f 44 c7\n84 db\n0f 44 f7\n48 83 c1 40\nff c2\n44 39 c2\n44 89 d3\n7c 90\n44 89 d3\nf6 c3 01\n74 0c\nbf 40 3d 40 00\nbe c0 3c 40 00\neb 24\n8a 1d 60 e0 20 00\nbf 40 3b 40 00\nbe c0 3c 40 00\n84 db\n48 0f 45 f7\nbd 90 3b 40 00\nbf 40 3d 40 00\n48 0f 45 fd\n48 89 71 20\n48 89 79 18\n80 3d 54 e0 20 00 01\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\n75 16\n40 8a 35 40 e0 20 00\n83 fa 01\n0f 94 c2\n40 80 f6 01\n40 08 d6\neb 02\n31 f6\n40 80 e6 01\n40 88 71 38\n89 41 34\nc3\n'
p1286
S'.text:00000000004031e0\n.text:00000000004031e6\n.text:00000000004031e8\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f8\n.text:00000000004031fa\n.text:0000000000403201\n.text:0000000000403203\n.text:0000000000403209\n.text:000000000040320b\n.text:0000000000403211\n.text:0000000000403213\n.text:0000000000403219\n.text:000000000040321b\n.text:000000000040321c\n.text:000000000040321e\n.text:0000000000403220\n.text:0000000000403222\n.text:0000000000403224\n.text:0000000000403225\n.text:000000000040322b\n.text:0000000000403232\n.text:0000000000403237\n.text:000000000040323d\n.text:0000000000403244\n.text:000000000040324a\n.text:0000000000403251\n.text:0000000000403257\n.text:000000000040325a\n.text:000000000040325e\n.text:0000000000403265\n.text:000000000040326c\n.text:0000000000403273\n.text:000000000040327a\n.text:000000000040327f\n.text:0000000000403286\n.text:0000000000403288\n.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a2\n.text:00000000004032a4\n.text:00000000004032a9\n.text:00000000004032af\n.text:00000000004032b3\n.text:00000000004032b7\n.text:00000000004032bb\n.text:00000000004032bf\n.text:00000000004032c1\n.text:00000000004032c4\n.text:00000000004032c7\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d2\n.text:00000000004032d5\n.text:00000000004032d8\n.text:00000000004032db\n.text:00000000004032de\n.text:00000000004032e0\n.text:00000000004032e4\n.text:00000000004032e7\n.text:00000000004032ea\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f2\n.text:00000000004032f6\n.text:00000000004032f8\n.text:00000000004032fb\n.text:00000000004032fe\n.text:0000000000403300\n.text:0000000000403303\n.text:0000000000403306\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403312\n.text:0000000000403314\n.text:000000000040331a\n.text:000000000040331f\n.text:0000000000403324\n.text:0000000000403326\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403334\n.text:0000000000403338\n.text:000000000040333c\n.text:0000000000403340\n.text:0000000000403347\n.text:0000000000403348\n.text:000000000040334a\n.text:000000000040334c\n.text:000000000040334e\n.text:0000000000403350\n.text:0000000000403351\n.text:0000000000403353\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403364\n.text:0000000000403367\n.text:0000000000403369\n.text:000000000040336b\n.text:000000000040336f\n.text:0000000000403373\n.text:0000000000403376\n'
p1287
tp1288
sS'getopt_long'
p1289
(S'\n__stdcall getopt_long()\n'
p1290
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006110d0)();\u000a  return;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x006110d0]\n'
p1292
S'ff 25 3a f8 20 00\n'
p1293
S'.plt:0000000000401890\n'
p1294
tp1295
sS'quotearg_style'
p1296
(S'\n__stdcall quotearg_style(char * arg)\n'
p1297
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1298
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00406070\n'
p1299
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1300
S'.text:0000000000406150\n.text:0000000000406153\n.text:0000000000406155\n.text:0000000000406157\n.text:0000000000406159\n.text:000000000040615c\n'
p1301
tp1302
sS'emit_try_help'
p1303
(S'\n__stdcall emit_try_help()\n'
p1304
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1305
S'PUSH RBX\nMOV RBX,qword ptr [0x00611360]\nXOR EDI,EDI\nMOV ESI,0x40c695\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00611478]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401b50\n'
p1306
S'53\n48 8b 1d d8 e8 20 00\n31 ff\nbe 95 c6 40 00\nba 05 00 00 00\ne8 c7 ed ff ff\n48 89 c2\n48 8b 0d d5 e9 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d f0 ff ff\n'
p1307
S'.text:0000000000402a80\n.text:0000000000402a81\n.text:0000000000402a88\n.text:0000000000402a8a\n.text:0000000000402a8f\n.text:0000000000402a94\n.text:0000000000402a99\n.text:0000000000402a9c\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aaa\n.text:0000000000402aad\n.text:0000000000402aae\n'
p1308
tp1309
sS'strrchr'
p1310
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006110e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x006110e8]\n'
p1313
S'ff 25 22 f8 20 00\n'
p1314
S'.plt:00000000004018c0\n'
p1315
tp1316
sS'quotearg_alloc_mem'
p1317
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1318
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x611480\nCMOVNZ R12,RCX\nCALL 0x00401780\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004050a0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004086c0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004050a0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00405dca\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 80 14 61 00\n4c 0f 45 e1\ne8 58 ba ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 41 29 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000405cf0\n.text:0000000000405cf1\n.text:0000000000405cf3\n.text:0000000000405cf5\n.text:0000000000405cf7\n.text:0000000000405cf9\n.text:0000000000405cfa\n.text:0000000000405cfe\n.text:0000000000405d01\n.text:0000000000405d06\n.text:0000000000405d09\n.text:0000000000405d0e\n.text:0000000000405d11\n.text:0000000000405d16\n.text:0000000000405d19\n.text:0000000000405d1f\n.text:0000000000405d23\n.text:0000000000405d28\n.text:0000000000405d2d\n.text:0000000000405d2f\n.text:0000000000405d33\n.text:0000000000405d35\n.text:0000000000405d38\n.text:0000000000405d3c\n.text:0000000000405d41\n.text:0000000000405d45\n.text:0000000000405d4a\n.text:0000000000405d4e\n.text:0000000000405d50\n.text:0000000000405d52\n.text:0000000000405d55\n.text:0000000000405d58\n.text:0000000000405d5b\n.text:0000000000405d60\n.text:0000000000405d65\n.text:0000000000405d67\n.text:0000000000405d6c\n.text:0000000000405d70\n.text:0000000000405d73\n.text:0000000000405d77\n.text:0000000000405d7a\n.text:0000000000405d7f\n.text:0000000000405d82\n.text:0000000000405d86\n.text:0000000000405d8a\n.text:0000000000405d8d\n.text:0000000000405d90\n.text:0000000000405d95\n.text:0000000000405d9a\n.text:0000000000405d9d\n.text:0000000000405da2\n.text:0000000000405da7\n.text:0000000000405da9\n.text:0000000000405dae\n.text:0000000000405db3\n.text:0000000000405db7\n.text:0000000000405dba\n.text:0000000000405dbe\n.text:0000000000405dc3\n.text:0000000000405dc5\n.text:0000000000405dc7\n.text:0000000000405dca\n.text:0000000000405dcd\n.text:0000000000405dd1\n.text:0000000000405dd2\n.text:0000000000405dd4\n.text:0000000000405dd6\n.text:0000000000405dd8\n.text:0000000000405dda\n.text:0000000000405ddb\n'
p1322
tp1323
sS'memcpy_lowcase'
p1324
(S'\n__stdcall memcpy_lowcase(size_t len)\n'
p1325
V\u000achar * memcpy_lowcase(size_t len)\u000a\u000a{\u000a  __int32_t **in_RAX;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  \u000a  if (in_RDX != 0) {\u000a    in_RAX = __ctype_tolower_loc();\u000a    do {\u000a      *(undefined *)((len - 1) + in_RDX) =\u000a           *(undefined *)(*in_RAX + (ulong)*(byte *)(in_RSI + -1 + in_RDX));\u000a      in_RDX = in_RDX + -1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return (char *)in_RAX;\u000a}\u000a\u000a
p1326
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x00408037\nCALL 0x00401b80\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RAX]\nMOVZX EDX,byte ptr [R14 + RBX*0x1 + -0x1]\nMOVZX ECX,byte ptr [RCX + RDX*0x4]\nMOV byte ptr [R15 + RBX*0x1 + -0x1],CL\nDEC RBX\nJNZ 0x00408020\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1327
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 24\ne8 68 9b ff ff\n0f 1f 84 00 00 00 00 00\n48 8b 08\n41 0f b6 54 1e ff\n0f b6 0c 91\n41 88 4c 1f ff\n48 ff cb\n75 e9\n5b\n41 5e\n41 5f\nc3\n'
p1328
S'.text:0000000000408000\n.text:0000000000408002\n.text:0000000000408004\n.text:0000000000408005\n.text:0000000000408008\n.text:000000000040800b\n.text:000000000040800e\n.text:0000000000408011\n.text:0000000000408013\n.text:0000000000408018\n.text:0000000000408020\n.text:0000000000408023\n.text:0000000000408029\n.text:000000000040802d\n.text:0000000000408032\n.text:0000000000408035\n.text:0000000000408037\n.text:0000000000408038\n.text:000000000040803a\n.text:000000000040803c\n'
p1329
tp1330
sS'bkm_scale'
p1331
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1332
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1333
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1334
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1335
S'.text:00000000004091b0\n.text:00000000004091b3\n.text:00000000004091ba\n.text:00000000004091c1\n.text:00000000004091c3\n.text:00000000004091c6\n.text:00000000004091c9\n.text:00000000004091cd\n.text:00000000004091d0\n.text:00000000004091d4\n.text:00000000004091d6\n.text:00000000004091d9\n.text:00000000004091dc\n'
p1336
tp1337
sS'quotearg_style_mem'
p1338
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1339
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1340
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00406110\n'
p1341
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1342
S'.text:0000000000406170\n.text:0000000000406173\n.text:0000000000406176\n.text:0000000000406178\n.text:000000000040617a\n.text:000000000040617c\n.text:000000000040617f\n.text:0000000000406182\n'
p1343
tp1344
sS'xalloc_die'
p1345
(S'\n__stdcall xalloc_die()\n'
p1346
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40c88c,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1347
S'PUSH RBX\nMOV EBX,dword ptr [0x006112b8]\nXOR EDI,EDI\nMOV ESI,0x40d89f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40c88c\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401ac0\nCALL 0x00401770\n'
p1348
S'53\n8b 1d 31 8b 20 00\n31 ff\nbe 9f d8 40 00\nba 05 00 00 00\ne8 c8 90 ff ff\n48 89 c1\n31 f6\nba 8c c8 40 00\n31 c0\n89 df\ne8 15 93 ff ff\ne8 c0 8f ff ff\n'
p1349
S'.text:0000000000408780\n.text:0000000000408781\n.text:0000000000408787\n.text:0000000000408789\n.text:000000000040878e\n.text:0000000000408793\n.text:0000000000408798\n.text:000000000040879b\n.text:000000000040879d\n.text:00000000004087a2\n.text:00000000004087a4\n.text:00000000004087a6\n.text:00000000004087ab\n'
p1350
tp1351
sS'reset_status'
p1352
(S'\n__stdcall reset_status()\n'
p1353
V\u000avoid reset_status(void)\u000a\u000a{\u000a  int iVar1;\u000a  anon_enum_32 *paVar2;\u000a  \u000a  if (columns != 0) {\u000a    paVar2 = &column_vector->status;\u000a    iVar1 = columns;\u000a    do {\u000a      if (*paVar2 == ON_HOLD) {\u000a        *paVar2 = OPEN;\u000a        files_ready_to_read = files_ready_to_read + 1;\u000a      }\u000a      paVar2 = paVar2 + 0x10;\u000a      iVar1 = iVar1 + -1;\u000a    } while (iVar1 != 0);\u000a  }\u000a  if (storing_columns == 0) {\u000a    files_ready_to_read = ZEXT14(column_vector->status != CLOSED);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1354
S'MOV EAX,dword ptr [0x006112a8]\nTEST EAX,EAX\nJZ 0x004039c9\nMOV RCX,qword ptr [0x006113e8]\nADD RCX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RCX],0x2\nJNZ 0x004039c1\nMOV dword ptr [RCX],0x0\nINC dword ptr [0x006113f0]\nADD RCX,0x40\nDEC EAX\nJNZ 0x004039b0\nMOV AL,byte ptr [0x00611379]\nTEST AL,AL\nJNZ 0x004039e9\nMOV RAX,qword ptr [0x006113e8]\nXOR ECX,ECX\nCMP dword ptr [RAX + 0x10],0x3\nSETNZ CL\nMOV dword ptr [0x006113f0],ECX\nRET\n'
p1355
S'8b 05 12 d9 20 00\n85 c0\n74 2f\n48 8b 0d 47 da 20 00\n48 83 c1 10\n66 66 2e 0f 1f 84 00 00 00 00 00\n83 39 02\n75 0c\nc7 01 00 00 00 00\nff 05 2f da 20 00\n48 83 c1 40\nff c8\n75 e7\n8a 05 aa d9 20 00\n84 c0\n75 16\n48 8b 05 0e da 20 00\n31 c9\n83 78 10 03\n0f 95 c1\n89 0d 07 da 20 00\nc3\n'
p1356
S'.text:0000000000403990\n.text:0000000000403996\n.text:0000000000403998\n.text:000000000040399a\n.text:00000000004039a1\n.text:00000000004039a5\n.text:00000000004039b0\n.text:00000000004039b3\n.text:00000000004039b5\n.text:00000000004039bb\n.text:00000000004039c1\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039c9\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039da\n.text:00000000004039dc\n.text:00000000004039e0\n.text:00000000004039e3\n.text:00000000004039e9\n'
p1357
tp1358
sS'__sprintf_chk'
p1359
(S'\n__stdcall __sprintf_chk()\n'
p1360
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_00611258)();\u000a  return;\u000a}\u000a\u000a
p1361
S'JMP qword ptr [0x00611258]\n'
p1362
S'ff 25 b2 f6 20 00\n'
p1363
S'.plt:0000000000401ba0\n'
p1364
tp1365
sS'fopen_safer'
p1366
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1367
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1368
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00401af0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404b8b\nMOV RDI,RBX\nCALL 0x004019e0\nCMP EAX,0x2\nJA 0x00404b8d\nMOV EDI,EAX\nCALL 0x004080c0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404b73\nMOV RDI,RBX\nCALL 0x00409270\nTEST EAX,EAX\nJNZ 0x00404b5c\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401a70\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00404b8d\nCALL 0x00401780\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401930\nMOV dword ptr [RBX],R14D\nJMP 0x00404b8b\nCALL 0x00401780\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00409270\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1369
S'55\n41 56\n53\n49 89 f6\ne8 d4 cf ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 b4 ce ff ff\n83 f8 02\n77 5c\n89 c7\ne8 88 35 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 2a 47 00 00\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 1c cf ff ff\n48 89 c3\n48 85 db\n75 31\ne8 1f cc ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 c2 cd ff ff\n44 89 33\neb 18\ne8 08 cc ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 e9 46 00 00\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1370
S'.text:0000000000404b10\n.text:0000000000404b11\n.text:0000000000404b13\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b22\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b2c\n.text:0000000000404b2f\n.text:0000000000404b31\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3a\n.text:0000000000404b3c\n.text:0000000000404b3e\n.text:0000000000404b41\n.text:0000000000404b46\n.text:0000000000404b48\n.text:0000000000404b4a\n.text:0000000000404b4c\n.text:0000000000404b4f\n.text:0000000000404b54\n.text:0000000000404b57\n.text:0000000000404b5a\n.text:0000000000404b5c\n.text:0000000000404b61\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6e\n.text:0000000000404b71\n.text:0000000000404b73\n.text:0000000000404b78\n.text:0000000000404b7b\n.text:0000000000404b7f\n.text:0000000000404b82\n.text:0000000000404b87\n.text:0000000000404b8b\n.text:0000000000404b8d\n.text:0000000000404b90\n.text:0000000000404b91\n.text:0000000000404b93\n.text:0000000000404b94\n'
p1371
tp1372
sS'quotearg_n_custom'
p1373
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1374
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1375
S'MOV R8,-0x1\nJMP 0x00406290\n'
p1376
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1377
S'.text:0000000000406280\n.text:0000000000406287\n'
p1378
tp1379
sS'set_tz'
p1380
(S'\n__stdcall set_tz(timezone_t tz)\n'
p1381
V\u000atimezone_t set_tz(timezone_t tz)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *__s2;\u000a  timezone_t tz_00;\u000a  int *piVar3;\u000a  \u000a  __s2 = getenv_TZ();\u000a  if (__s2 == (char *)0x0) {\u000a    if (tz->tz_is_set == 0) {\u000a      return (timezone_t)0x1;\u000a    }\u000a  }\u000a  else {\u000a    if ((tz->tz_is_set != 0) && (iVar2 = strcmp(tz->abbrs,__s2), iVar2 == 0)) {\u000a      return (timezone_t)0x1;\u000a    }\u000a  }\u000a  tz_00 = tzalloc(__s2);\u000a  if (tz_00 != (timezone_t)0x0) {\u000a    _Var1 = change_env(tz);\u000a    if (_Var1 != false) {\u000a      return tz_00;\u000a    }\u000a    piVar3 = __errno_location();\u000a    iVar2 = *piVar3;\u000a    tzfree(tz_00);\u000a    *piVar3 = iVar2;\u000a  }\u000a  return (timezone_t)0x0;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nCALL 0x004099a0\nMOV RBX,RAX\nTEST RBX,RBX\nMOV AL,byte ptr [R14 + 0x8]\nJZ 0x004096ee\nTEST AL,AL\nJZ 0x004096f2\nLEA RDI,[R14 + 0x9]\nMOV RSI,RBX\nCALL 0x00401990\nTEST EAX,EAX\nJNZ 0x004096f2\nJMP 0x00409728\nTEST AL,AL\nJZ 0x00409728\nMOV RDI,RBX\nCALL 0x00409570\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409724\nMOV RDI,R14\nCALL 0x004099b0\nTEST AL,AL\nJNZ 0x0040972d\nCALL 0x00401780\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x00409600\nMOV dword ptr [R14],EBP\nXOR EBX,EBX\nJMP 0x0040972d\nMOV EBX,0x1\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1383
S'55\n41 56\n53\n49 89 fe\ne8 d4 02 00 00\n48 89 c3\n48 85 db\n41 8a 46 08\n74 16\n84 c0\n74 16\n49 8d 7e 09\n48 89 de\ne8 a8 82 ff ff\n85 c0\n75 06\neb 3a\n84 c0\n74 36\n48 89 df\ne8 76 fe ff ff\n48 89 c3\n48 85 db\n74 22\n4c 89 f7\ne8 a6 02 00 00\n84 c0\n75 1f\ne8 6d 80 ff ff\n49 89 c6\n41 8b 2e\n48 89 df\ne8 df fe ff ff\n41 89 2e\n31 db\neb 05\nbb 01 00 00 00\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1384
S'.text:00000000004096c0\n.text:00000000004096c1\n.text:00000000004096c3\n.text:00000000004096c4\n.text:00000000004096c7\n.text:00000000004096cc\n.text:00000000004096cf\n.text:00000000004096d2\n.text:00000000004096d6\n.text:00000000004096d8\n.text:00000000004096da\n.text:00000000004096dc\n.text:00000000004096e0\n.text:00000000004096e3\n.text:00000000004096e8\n.text:00000000004096ea\n.text:00000000004096ec\n.text:00000000004096ee\n.text:00000000004096f0\n.text:00000000004096f2\n.text:00000000004096f5\n.text:00000000004096fa\n.text:00000000004096fd\n.text:0000000000409700\n.text:0000000000409702\n.text:0000000000409705\n.text:000000000040970a\n.text:000000000040970c\n.text:000000000040970e\n.text:0000000000409713\n.text:0000000000409716\n.text:0000000000409719\n.text:000000000040971c\n.text:0000000000409721\n.text:0000000000409724\n.text:0000000000409726\n.text:0000000000409728\n.text:000000000040972d\n.text:0000000000409730\n.text:0000000000409731\n.text:0000000000409733\n.text:0000000000409734\n'
p1385
tp1386
sS'revert_tz'
p1387
(S'\n__stdcall revert_tz(timezone_t tz)\n'
p1388
V\u000a_Bool revert_tz(timezone_t tz)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int *piVar2;\u000a  int iVar3;\u000a  \u000a  if (tz == (timezone_t)0x1) {\u000a    _Var1 = true;\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    iVar3 = *piVar2;\u000a    _Var1 = change_env(tz);\u000a    if (_Var1 == false) {\u000a      iVar3 = *piVar2;\u000a    }\u000a    tzfree(tz);\u000a    *piVar2 = iVar3;\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP RBX,0x1\nJZ 0x0040988a\nCALL 0x00401780\nMOV R14,RAX\nMOV R15D,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x004099b0\nMOV EBP,EAX\nTEST BPL,BPL\nJNZ 0x0040987d\nMOV R15D,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x00409600\nMOV dword ptr [R14],R15D\nJMP 0x0040988d\nMOV BPL,0x1\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1390
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 83 fb 01\n74 2a\ne8 1b 7f ff ff\n49 89 c6\n45 8b 3e\n48 89 df\ne8 3d 01 00 00\n89 c5\n40 84 ed\n75 03\n45 8b 3e\n48 89 df\ne8 7b fd ff ff\n45 89 3e\neb 03\n40 b5 01\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1391
S'.text:0000000000409850\n.text:0000000000409851\n.text:0000000000409853\n.text:0000000000409855\n.text:0000000000409856\n.text:0000000000409857\n.text:000000000040985a\n.text:000000000040985e\n.text:0000000000409860\n.text:0000000000409865\n.text:0000000000409868\n.text:000000000040986b\n.text:000000000040986e\n.text:0000000000409873\n.text:0000000000409875\n.text:0000000000409878\n.text:000000000040987a\n.text:000000000040987d\n.text:0000000000409880\n.text:0000000000409885\n.text:0000000000409888\n.text:000000000040988a\n.text:000000000040988d\n.text:000000000040988f\n.text:0000000000409893\n.text:0000000000409894\n.text:0000000000409896\n.text:0000000000409898\n.text:0000000000409899\n'
p1392
tp1393
sS'__freading'
p1394
(S'\n__stdcall __freading()\n'
p1395
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_006111b0)();\u000a  return;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x006111b0]\n'
p1397
S'ff 25 5a f7 20 00\n'
p1398
S'.plt:0000000000401a50\n'
p1399
tp1400
sS'ranged_convert'
p1401
(S'\n__stdcall ranged_convert(anon_subr_tm_ptr_time_t_ptr_tm_ptr * convert, time_t * t, tm * tp)\n'
p1402
V\u000atm * ranged_convert(tm *(*convert)(time_t *,tm *),time_t *t,tm *tp)\u000a\u000a{\u000a  tm *ptVar1;\u000a  ulong uVar2;\u000a  ulong a;\u000a  ulong uVar3;\u000a  ulong b;\u000a  undefined auVar4 [16];\u000a  \u000a  ptVar1 = (*convert)(t,tp);\u000a  if (ptVar1 == (tm *)0x0) {\u000a    b = *t;\u000a    if ((b == 0) || (b == ((long)b >> 0x3f | 1U))) {\u000a      ptVar1 = (tm *)0x0;\u000a    }\u000a    else {\u000a      a = 0;\u000a      do {\u000a        uVar2 = time_t_avg(a,b);\u000a        *t = uVar2;\u000a        auVar4 = (undefined  [16])(*convert)(t,tp);\u000a        ptVar1 = SUB168(auVar4,0);\u000a        uVar3 = uVar2;\u000a        if (ptVar1 == (tm *)0x0) {\u000a          uVar3 = a;\u000a          b = uVar2;\u000a        }\u000a        a = uVar3;\u000a      } while (b != ((long)b >> 0x3f | 1U) + uVar3);\u000a      if ((uVar3 != 0) && (ptVar1 == (tm *)0x0)) {\u000a        *t = uVar3;\u000a                    /* WARNING: Could not recover jumptable at 0x0040a5af. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a        ptVar1 = (*convert)(t,tp);\u000a        return ptVar1;\u000a      }\u000a    }\u000a  }\u000a  return ptVar1;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nMOV RDI,R15\nMOV RSI,R14\nCALL RBX\nTEST RAX,RAX\nJNZ 0x0040a52f\nMOV qword ptr [RSP],RBX\nMOV R12,qword ptr [R15]\nTEST R12,R12\nJZ 0x0040a52d\nMOV RAX,R12\nSAR RAX,0x3f\nOR RAX,0x1\nCMP R12,RAX\nJNZ 0x0040a53e\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EBX,EBX\nMOV RBP,qword ptr [RSP]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R13,RBX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x0040a640\nMOV RBX,RAX\nMOV qword ptr [R15],RBX\nMOV RDI,R15\nMOV RSI,R14\nCALL RBP\nTEST RAX,RAX\nCMOVZ R12,RBX\nCMOVZ RBX,R13\nMOV RCX,R12\nSAR RCX,0x3f\nOR RCX,0x1\nADD RCX,RBX\nCMP R12,RCX\nJNZ 0x0040a550\nTEST RBX,RBX\nJZ 0x0040a52f\nTEST RAX,RAX\nMOV RCX,qword ptr [RSP]\nJNZ 0x0040a52f\nMOV qword ptr [R15],RBX\nMOV RDI,R15\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP RCX\n'
p1404
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n48 89 fb\n4c 89 ff\n4c 89 f6\nff d3\n48 85 c0\n75 1e\n48 89 1c 24\n4d 8b 27\n4d 85 e4\n74 10\n4c 89 e0\n48 c1 f8 3f\n48 83 c8 01\n49 39 c4\n75 11\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 db\n48 8b 2c 24\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 dd\n4c 89 ef\n4c 89 e6\ne8 e2 00 00 00\n48 89 c3\n49 89 1f\n4c 89 ff\n4c 89 f6\nff d5\n48 85 c0\n4c 0f 44 e3\n49 0f 44 dd\n4c 89 e1\n48 c1 f9 3f\n48 83 c9 01\n48 01 d9\n49 39 cc\n75 c6\n48 85 db\n74 a0\n48 85 c0\n48 8b 0c 24\n75 97\n49 89 1f\n4c 89 ff\n4c 89 f6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nff e1\n'
p1405
S'.text:000000000040a4f0\n.text:000000000040a4f1\n.text:000000000040a4f3\n.text:000000000040a4f5\n.text:000000000040a4f7\n.text:000000000040a4f9\n.text:000000000040a4fa\n.text:000000000040a4fb\n.text:000000000040a4fe\n.text:000000000040a501\n.text:000000000040a504\n.text:000000000040a507\n.text:000000000040a50a\n.text:000000000040a50c\n.text:000000000040a50f\n.text:000000000040a511\n.text:000000000040a515\n.text:000000000040a518\n.text:000000000040a51b\n.text:000000000040a51d\n.text:000000000040a520\n.text:000000000040a524\n.text:000000000040a528\n.text:000000000040a52b\n.text:000000000040a52d\n.text:000000000040a52f\n.text:000000000040a533\n.text:000000000040a534\n.text:000000000040a536\n.text:000000000040a538\n.text:000000000040a53a\n.text:000000000040a53c\n.text:000000000040a53d\n.text:000000000040a53e\n.text:000000000040a540\n.text:000000000040a544\n.text:000000000040a550\n.text:000000000040a553\n.text:000000000040a556\n.text:000000000040a559\n.text:000000000040a55e\n.text:000000000040a561\n.text:000000000040a564\n.text:000000000040a567\n.text:000000000040a56a\n.text:000000000040a56c\n.text:000000000040a56f\n.text:000000000040a573\n.text:000000000040a577\n.text:000000000040a57a\n.text:000000000040a57e\n.text:000000000040a582\n.text:000000000040a585\n.text:000000000040a588\n.text:000000000040a58a\n.text:000000000040a58d\n.text:000000000040a58f\n.text:000000000040a592\n.text:000000000040a596\n.text:000000000040a598\n.text:000000000040a59b\n.text:000000000040a59e\n.text:000000000040a5a1\n.text:000000000040a5a5\n.text:000000000040a5a6\n.text:000000000040a5a8\n.text:000000000040a5aa\n.text:000000000040a5ac\n.text:000000000040a5ae\n.text:000000000040a5af\n'
p1406
tp1407
sS'iswcntrl'
p1408
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p1409
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_00611080)();\u000a  return iVar1;\u000a}\u000a\u000a
p1410
S'JMP qword ptr [0x00611080]\n'
p1411
S'ff 25 8a f8 20 00\n'
p1412
S'.plt:00000000004017f0\n'
p1413
tp1414
sS'fputs_unlocked'
p1415
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1416
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00611138)();\u000a  return iVar1;\u000a}\u000a\u000a
p1417
S'JMP qword ptr [0x00611138]\n'
p1418
S'ff 25 d2 f7 20 00\n'
p1419
S'.plt:0000000000401960\n'
p1420
tp1421
sS'main'
p1422
(S'\n__stdcall main(char * * argv)\n'
p1423
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int iVar4;\u000a  strtol_error sVar5;\u000a  int extraout_EAX;\u000a  uint7 uVar9;\u000a  ulong uVar6;\u000a  ulong extraout_RAX;\u000a  char *n_str;\u000a  char *s;\u000a  undefined8 uVar7;\u000a  uint *puVar8;\u000a  int *err;\u000a  char *s_00;\u000a  uint uVar10;\u000a  ulong uVar11;\u000a  char **in_RSI;\u000a  int *num;\u000a  char **av;\u000a  option *long_options;\u000a  uint uVar12;\u000a  ulong unaff_R15;\u000a  char *pcStack176;\u000a  uintmax_t uStack168;\u000a  uintmax_t uStack160;\u000a  void *pvStack152;\u000a  ulong uStack144;\u000a  ulong uStack136;\u000a  code *pcStack128;\u000a  undefined8 local_78;\u000a  uint local_6c;\u000a  ulong local_68;\u000a  ulong local_60;\u000a  ulong local_58;\u000a  ulong local_50;\u000a  char **local_48;\u000a  ulong local_40;\u000a  uint local_34;\u000a  \u000a  uStack144 = (ulong)argv & 0xffffffff;\u000a  local_40 = 0;\u000a  pcStack128 = (code *)0x401cd7;\u000a  local_48 = in_RSI;\u000a  set_program_name(*in_RSI);\u000a  pcStack128 = (code *)0x401ce6;\u000a  setlocale(6,"");\u000a  pcStack128 = (code *)0x401cf5;\u000a  bindtextdomain(0x40b4c3,"/usr/local/share/locale");\u000a  pcStack128 = (code *)0x401cff;\u000a  textdomain(0x40b4c3);\u000a  pcStack128 = (code *)0x401d09;\u000a  atexit(close_stdout);\u000a  iVar4 = (int)uStack144;\u000a  if (iVar4 < 2) {\u000a    pvStack152 = (void *)0x0;\u000a  }\u000a  else {\u000a    pcStack128 = (code *)0x401d1f;\u000a    pvStack152 = xmalloc((long)iVar4 * 8 - 8);\u000a  }\u000a  local_6c = 0xffffffff;\u000a  pcStack128 = (code *)0x401d4a;\u000a  iVar3 = getopt_long(uStack144,local_48,"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:",\u000a                      long_options,&local_6c);\u000a  if (iVar3 == -1) {\u000a    uVar12 = 0;\u000a    uVar11 = 0;\u000a    uVar6 = 0;\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    uVar11 = 0;\u000a    s = (char *)0x0;\u000a    local_58 = 0;\u000a    local_68 = 0;\u000a    local_50 = 0;\u000a    local_60 = 0;\u000a    uStack136 = unaff_R15;\u000a    do {\u000a      n_str = optarg;\u000a      if (iVar3 - 0x30U < 10) {\u000a        if (local_40 <= uVar11 + 1) {\u000a          pcStack128 = (code *)0x4021d6;\u000a          s = (char *)x2realloc(s,&local_40);\u000a        }\u000a        s[uVar11] = (char)iVar3;\u000a        s[uVar11 + 1] = 0;\u000a        uVar11 = uVar11 + 1;\u000a        goto LAB_004021e4;\u000a      }\u000a      switch(iVar3) {\u000a      case 1:\u000a        if ((first_page_number == 0) && (*optarg == '+')) {\u000a          pcStack128 = (code *)0x401dd3;\u000a          _Var2 = first_last_page((char *)0xfffffffe);\u000a          if (_Var2 != false) goto LAB_00401ff6;\u000a        }\u000a        local_58 = (ulong)((int)local_58 + 1);\u000a        *(char **)((long)pvStack152 + (long)(int)local_58 * 8) = optarg;\u000a        goto LAB_00401ff6;\u000a      case 0x44:\u000a        date_format = optarg;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x46:\u000a      case 0x66:\u000a        use_form_feed = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x4a:\u000a        join_lines = true;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x4e:\u000a        skip_count = 1;\u000a        pcStack128 = (code *)0x401e41;\u000a        dcgettext(0,"\u005c'-N NUMBER\u005c' invalid starting line number",5);\u000a        num = (int *)0x80000000;\u000a        err = &start_line_num;\u000a        goto LAB_00402020;\u000a      case 0x53:\u000a        col_sep_string = "";\u000a        col_sep_length = 0;\u000a        use_col_separator = true;\u000a        if (optarg != (char *)0x0) {\u000a          pcStack128 = (code *)0x401e7d;\u000a          separator_string(optarg);\u000a        }\u000a        local_68 = 0;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x54:\u000a        extremities = 1;\u000a        keep_FF = 0;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x57:\u000a        truncate_lines = 1;\u000a        local_50 = 0;\u000a        pcStack128 = (code *)0x401ec8;\u000a        dcgettext(0,"\u005c'-W PAGE_WIDTH\u005c' invalid number of characters",5);\u000a        pcStack128 = (code *)0x401edd;\u000a        getoptnum(n_str,(int *)0x1,(char *)&chars_per_line);\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x61:\u000a        print_across_flag = 1;\u000a        goto LAB_00401fc0;\u000a      case 0x62:\u000a        balance_columns = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 99:\u000a        use_cntrl_prefix = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 100:\u000a        double_space = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x65:\u000a        if (optarg != (char *)0x0) {\u000a          pcStack128 = (code *)0x401f3e;\u000a          getoptarg(optarg,(char *)0x65,(int *)&input_tab_char);\u000a        }\u000a        untabify_input = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x68:\u000a        custom_header = optarg;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x69:\u000a        if (optarg != (char *)0x0) {\u000a          pcStack128 = (code *)0x401f83;\u000a          getoptarg(optarg,(char *)0x69,(int *)&output_tab_char);\u000a        }\u000a        tabify_output = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x6c:\u000a        pcStack128 = (code *)0x401fad;\u000a        dcgettext(0,"\u005c'-l PAGE_LENGTH\u005c' invalid number of lines",5);\u000a        num = (int *)0x1;\u000a        err = &lines_per_page;\u000a        goto LAB_00402020;\u000a      case 0x6d:\u000a        parallel_files = 1;\u000aLAB_00401fc0:\u000a        storing_columns = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x6e:\u000a        numbered_lines = 1;\u000a        if (optarg != (char *)0x0) {\u000a          pcStack128 = (code *)0x401ff6;\u000a          getoptarg(optarg,(char *)0x6e,(int *)&number_separator);\u000a        }\u000aLAB_00401ff6:\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x6f:\u000a        pcStack128 = (code *)0x402019;\u000a        dcgettext(0,"\u005c'-o MARGIN\u005c' invalid line offset",5);\u000a        num = (int *)0x0;\u000a        err = &chars_per_margin;\u000aLAB_00402020:\u000a        uVar11 = 0;\u000a        pcStack128 = (code *)0x40202b;\u000a        getoptnum(n_str,num,(char *)err);\u000a        break;\u000a      case 0x72:\u000a        ignore_failed_opens = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x73:\u000a        uVar9 = (uint7)(uint3)(iVar3 - 0x30U >> 8);\u000a        if (use_col_separator == false) {\u000a          uVar6 = CONCAT71(uVar9,1);\u000a          local_60 = uVar6;\u000a          if (optarg != (char *)0x0) {\u000a            pcStack128 = (code *)0x40206b;\u000a            local_60 = uVar6;\u000a            separator_string(optarg);\u000a            uVar6 = extraout_RAX;\u000a          }\u000a        }\u000a        else {\u000a          uVar6 = CONCAT71(uVar9,1);\u000a          local_60 = uVar6;\u000a        }\u000a        uVar11 = 0;\u000a        local_68 = CONCAT71((int7)(uVar6 >> 8),1);\u000a        break;\u000a      case 0x74:\u000a        extremities = 1;\u000a        keep_FF = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x76:\u000a        use_esc_sequence = 1;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x77:\u000a        pcStack128 = (code *)0x4020b0;\u000a        dcgettext(0,"\u005c'-w PAGE_WIDTH\u005c' invalid number of characters",5);\u000a        pcStack128 = (code *)0x4020c5;\u000a        getoptnum(n_str,(int *)0x1,(char *)&local_34);\u000a        uVar12 = 0;\u000a        if (truncate_lines == 0) {\u000a          chars_per_line = local_34;\u000a          uVar12 = local_34;\u000a        }\u000a        local_60 = CONCAT71((uint7)(uint3)(uVar12 >> 8),1);\u000a        uVar11 = 0;\u000a        local_50 = (ulong)uVar12 & 0xffffffffffffff00 | 1;\u000a        break;\u000a      case 0x80:\u000a        pcStack128 = (code *)0x4020fc;\u000a        parse_column_count(optarg);\u000a        pcStack128 = (code *)0x402104;\u000a        free(s);\u000a        local_40 = 0;\u000a        s = (char *)0x0;\u000a        uVar11 = 0;\u000a        break;\u000a      case 0x81:\u000a        if (optarg == (char *)0x0) {\u000a          uVar11 = 0;\u000a          pcStack128 = (code *)0x402187;\u000a          uVar7 = dcgettext(0,"\u005c'--pages=FIRST_PAGE[:LAST_PAGE]\u005c' missing argument",5);\u000a          pcStack128 = (code *)0x40219b;\u000a          error(1,0,uVar7,uVar7);\u000a        }\u000a        else {\u000a          uVar11 = 0;\u000a          pcStack128 = (code *)0x402132;\u000a          _Var2 = first_last_page((char *)(ulong)local_6c);\u000a          if (_Var2 == false) {\u000a            uVar11 = 0;\u000a            pcStack128 = (code *)0x40214e;\u000a            uVar7 = dcgettext(0,"invalid page range %s",5);\u000a            pcStack128 = (code *)0x40215d;\u000a            n_str = quote(optarg);\u000a            pcStack128 = (code *)0x402171;\u000a            error(1,0,uVar7,n_str);\u000a          }\u000a        }\u000a        break;\u000a      case -0x83:\u000a        local_78 = 0;\u000a        pcStack128 = (code *)0x4024d8;\u000a        version_etc(stdout,"pr","GNU coreutils",Version,"Pete TerMaat","Roland Huebner");\u000a                    /* WARNING: Subroutine does not return */\u000a        pcStack128 = (code *)0x4024df;\u000a        exit(0);\u000a      case -0x82:\u000a        pcStack128 = (code *)0x4024e6;\u000a        usage(0);\u000a      default:\u000a        uVar12 = 1;\u000a        pcStack128 = first_last_page;\u000a        usage();\u000a        uStack168 = 0xffffffffffffffff;\u000a        pcStack128 = (code *)uVar11;\u000a        sVar5 = xstrtoumax(s_00,&pcStack176,(uintmax_t *)0xa,(char *)&uStack160);\u000a        if ((sVar5 | LONGINT_INVALID_SUFFIX_CHAR) == LONGINT_INVALID_SUFFIX_CHAR) {\u000a          if (pcStack176 == s_00) {\u000a            return 0;\u000a          }\u000a          if (uStack160 == 0) {\u000a            return 0;\u000a          }\u000a          if (*pcStack176 == ':') {\u000a            s = pcStack176 + 1;\u000a            sVar5 = xstrtoumax(s,&pcStack176,(uintmax_t *)0xa,(char *)&uStack168);\u000a            if (sVar5 != LONGINT_OK) goto LAB_004025b6;\u000a            if (s == pcStack176) {\u000a              return 0;\u000a            }\u000a            if (uStack168 < uStack160) {\u000a              return 0;\u000a            }\u000a          }\u000a          if (*pcStack176 != 0) {\u000a            return 0;\u000a          }\u000a          last_page_number = uStack168;\u000a          first_page_number = uStack160;\u000a          return (int)CONCAT71((int7)(uStack168 >> 8),1);\u000a        }\u000aLAB_004025b6:\u000a        long_options = (option *)(ulong)sVar5;\u000a        xstrtol_fatal(long_options,(char *)(ulong)uVar12);\u000a        dcgettext(0,"invalid number of columns",5);\u000a        getoptnum((char *)long_options,(int *)0x1,(char *)&columns);\u000a        explicit_columns = 1;\u000a        return extraout_EAX;\u000a      }\u000aLAB_004021e4:\u000a      local_6c = 0xffffffff;\u000a      pcStack128 = (code *)0x402208;\u000a      iVar3 = getopt_long(uStack144,local_48,"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:",\u000a                          long_options,&local_6c);\u000a      uStack136 = uVar11;\u000a    } while (iVar3 != -1);\u000a    if (s != (char *)0x0) {\u000a      pcStack128 = (code *)0x402221;\u000a      parse_column_count(s);\u000a      pcStack128 = (code *)0x402229;\u000a      free(s);\u000a    }\u000a    uVar12 = (uint)local_58;\u000a    uVar11 = local_60;\u000a    uVar6 = local_68;\u000a    uVar1 = local_50;\u000a  }\u000a  if (date_format == (char *)0x0) {\u000a    pcStack128 = (code *)0x402268;\u000a    s = getenv("POSIXLY_CORRECT");\u000a    if (s == (char *)0x0) {\u000a      date_format = "%Y-%m-%d %H:%M";\u000a    }\u000a    else {\u000a      pcStack128 = (code *)0x402277;\u000a      _Var2 = hard_locale();\u000a      date_format = "%b %e %H:%M %Y";\u000a      if (_Var2 != false) {\u000a        date_format = "%Y-%m-%d %H:%M";\u000a      }\u000a    }\u000a  }\u000a  if (first_page_number == 0) {\u000a    first_page_number = 1;\u000a  }\u000a  if (parallel_files == 1) {\u000a    if (explicit_columns == 1) {\u000a      pcStack128 = (code *)0x4022cd;\u000a      uVar7 = dcgettext(0,"cannot specify number of columns when printing in parallel",5);\u000a      pcStack128 = (code *)0x4022e1;\u000a      error(1,0,uVar7,uVar7);\u000a    }\u000a    if ((parallel_files == 1) && (print_across_flag == 1)) {\u000a      pcStack128 = (code *)0x402304;\u000a      uVar7 = dcgettext(0,"cannot specify both printing across and printing in parallel",5);\u000a      pcStack128 = (code *)0x402318;\u000a      error(1,0,uVar7,uVar7);\u000a    }\u000a  }\u000a  if ((uVar11 & 1) != 0) {\u000a    if ((uVar1 & 1) == 0) {\u000a      if (((((uVar6 & 1) != 0) && (use_col_separator == false)) &&\u000a          ((parallel_files != 0 || (explicit_columns == 1)))) &&\u000a         ((truncate_lines != 0 || (join_lines = true, 0 < col_sep_length)))) {\u000a        use_col_separator = true;\u000a      }\u000a    }\u000a    else {\u000a      if ((parallel_files == 0) && (explicit_columns != 1)) {\u000a        join_lines = true;\u000a      }\u000a      else {\u000a        truncate_lines = 1;\u000a        if ((uVar6 & 1) != 0) {\u000a          use_col_separator = true;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  if (optind < iVar4) {\u000a    uVar10 = (iVar4 + -1) - optind;\u000a    pcStack128 = (code *)0x40234d;\u000a    memcpy((void *)((long)pvStack152 + (long)(int)uVar12 * 8),local_48 + (long)optind,\u000a           (ulong)uVar10 * 8 + 8);\u000a    uVar12 = uVar12 + 1 + uVar10;\u000a    optind = iVar4;\u000a  }\u000a  if (uVar12 == 0) {\u000a    av = (char **)0x0;\u000a    pcStack128 = (code *)0x4023dc;\u000a    print_files((char **)0x0);\u000a  }\u000a  else {\u000a    if (parallel_files == 0) {\u000a      uVar11 = (ulong)uVar12;\u000a      do {\u000a        av = (char **)0x1;\u000a        pcStack128 = (code *)0x4023fd;\u000a        print_files((char **)0x1);\u000a        uVar11 = uVar11 - 1;\u000a      } while (uVar11 != 0);\u000a    }\u000a    else {\u000a      av = (char **)(ulong)uVar12;\u000a      pcStack128 = (code *)0x402373;\u000a      print_files(av);\u000a    }\u000a  }\u000a  pcStack128 = (code *)0x40240b;\u000a  cleanup((EVP_PKEY_CTX *)av);\u000a  if (have_read_stdin == 1) {\u000a    pcStack128 = (code *)0x402420;\u000a    iVar4 = rpl_fclose(stdin);\u000a    if (iVar4 == -1) {\u000a      pcStack128 = (code *)0x40242a;\u000a      puVar8 = (uint *)__errno_location();\u000a      uVar12 = *puVar8;\u000a      pcStack128 = (code *)0x40243d;\u000a      uVar7 = dcgettext(0,"standard input",5);\u000a      pcStack128 = (code *)0x402451;\u000a      error(1,(ulong)uVar12,uVar7,uVar7);\u000a    }\u000a  }\u000a  return (int)(uint)failed_opens;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R14D,EDI\nMOV qword ptr [RSP + 0x38],0x0\nMOV qword ptr [RSP + 0x30],RSI\nMOV RDI,qword ptr [RSI]\nCALL 0x00404e80\nMOV EDI,0x6\nMOV ESI,0x40c61d\nCALL 0x00401a80\nMOV EDI,0x40b4c3\nMOV ESI,0x40b390\nCALL 0x00401850\nMOV EDI,0x40b4c3\nCALL 0x00401830\nMOV EDI,0x404a20\nCALL 0x0040a6e0\nCMP R14D,0x2\nJL 0x00401d24\nMOVSXD RAX,R14D\nLEA RDI,[-0x8 + RAX*0x8]\nCALL 0x004085f0\nMOV RBX,RAX\nJMP 0x00401d26\nXOR EBX,EBX\nMOV dword ptr [RSP + 0xc],0xffffffff\nLEA R8,[RSP + 0xc]\nMOV EDX,0x40af70\nMOV ECX,0x40afb0\nMOV EDI,R14D\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401890\nMOV R12D,EAX\nCMP R12D,-0x1\nJZ 0x00402249\nXOR EBP,EBP\nXOR R13D,R13D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x004021b0\nADD R12D,0x83\nCMP R12D,0x104\nJA 0x004024e6\nJMP qword ptr [0x40a740 + R12*0x8]\nMOV byte ptr [0x00611389],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nCMP qword ptr [0x00611370],0x0\nJNZ 0x00401ddb\nMOV RDX,qword ptr [0x00611340]\nCMP byte ptr [RDX],0x2b\nJNZ 0x00401ddb\nINC RDX\nMOV EDI,0xfffffffe\nMOV ESI,0x2b\nCALL 0x004024f0\nTEST AL,AL\nJNZ 0x00401ff6\nMOV RAX,qword ptr [0x00611340]\nMOV RDX,qword ptr [RSP + 0x20]\nMOVSXD RCX,EDX\nINC EDX\nMOV qword ptr [RSP + 0x20],RDX\nMOV qword ptr [RBX + RCX*0x8],RAX\nJMP 0x00401ff6\nMOV RAX,qword ptr [0x00611340]\nMOV qword ptr [0x00611380],RAX\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x00611399],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x0061139c],0x1\nMOV R12,qword ptr [0x00611340]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40b419\nMOV EDX,0x5\nCALL 0x00401860\nMOV ESI,0x80000000\nMOV EDX,0x61128c\nJMP 0x00402020\nMOV qword ptr [0x00611290],0x40c61d\nMOV dword ptr [0x006113a8],0x0\nMOV byte ptr [0x006113a5],0x1\nMOV RDI,qword ptr [0x00611340]\nTEST RDI,RDI\nJZ 0x00401e7d\nCALL 0x00402710\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x006113ac],0x1\nMOV byte ptr [0x006113ad],0x0\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x006113af],0x1\nMOV RBP,qword ptr [0x00611340]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nXOR EDI,EDI\nMOV ESI,0x40b48f\nMOV EDX,0x5\nCALL 0x00401860\nMOV ESI,0x1\nMOV EDX,0x611298\nMOV RDI,RBP\nMOV RCX,RAX\nCALL 0x004026e0\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x00611378],0x1\nJMP 0x00401fc0\nMOV byte ptr [0x0061137a],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x0061137b],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x0061137c],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV RDI,qword ptr [0x00611340]\nTEST RDI,RDI\nJZ 0x00401f3e\nMOV ESI,0x65\nMOV EDX,0x611270\nMOV ECX,0x611274\nCALL 0x00402610\nMOV byte ptr [0x00611388],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV RAX,qword ptr [0x00611340]\nMOV qword ptr [0x00611390],RAX\nXOR R15D,R15D\nJMP 0x004021e4\nMOV RDI,qword ptr [0x00611340]\nTEST RDI,RDI\nJZ 0x00401f83\nMOV ESI,0x69\nMOV EDX,0x611278\nMOV ECX,0x61127c\nCALL 0x00402610\nMOV byte ptr [0x00611398],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV R12,qword ptr [0x00611340]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40b3f0\nMOV EDX,0x5\nCALL 0x00401860\nMOV ESI,0x1\nMOV EDX,0x611280\nJMP 0x00402020\nMOV byte ptr [0x0061139a],0x1\nMOV byte ptr [0x00611379],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x0061139b],0x1\nMOV RDI,qword ptr [0x00611340]\nTEST RDI,RDI\nJZ 0x00401ff6\nMOV ESI,0x6e\nMOV EDX,0x611284\nMOV ECX,0x611288\nCALL 0x00402610\nXOR R15D,R15D\nJMP 0x004021e4\nMOV R12,qword ptr [0x00611340]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40b442\nMOV EDX,0x5\nCALL 0x00401860\nXOR ESI,ESI\nMOV EDX,0x6113a0\nMOV RDI,R12\nMOV RCX,RAX\nCALL 0x004026e0\nJMP 0x004021e4\nMOV byte ptr [0x006113a4],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nXOR R15D,R15D\nCMP byte ptr [0x006113a5],0x0\nJNZ 0x0040219d\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nMOV RDI,qword ptr [0x00611340]\nTEST RDI,RDI\nJZ 0x004021a4\nCALL 0x00402710\nXOR R15D,R15D\nJMP 0x004021a4\nMOV byte ptr [0x006113ac],0x1\nMOV byte ptr [0x006113ad],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV byte ptr [0x006113ae],0x1\nXOR R15D,R15D\nJMP 0x004021e4\nMOV RBP,qword ptr [0x00611340]\nXOR EDI,EDI\nMOV ESI,0x40b462\nMOV EDX,0x5\nCALL 0x00401860\nLEA RDX,[RSP + 0x44]\nMOV ESI,0x1\nMOV RDI,RBP\nMOV RCX,RAX\nCALL 0x004026e0\nMOVZX EAX,byte ptr [0x006113af]\nTEST AL,AL\nJNZ 0x004020da\nMOV EAX,dword ptr [RSP + 0x44]\nMOV dword ptr [0x00611298],EAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nXOR R15D,R15D\nMOV AL,0x1\nMOV qword ptr [RSP + 0x28],RAX\nJMP 0x004021e4\nMOV RDI,qword ptr [0x00611340]\nCALL 0x004025d0\nMOV RDI,R13\nCALL 0x00401740\nMOV qword ptr [RSP + 0x38],0x0\nXOR R13D,R13D\nXOR R15D,R15D\nJMP 0x004021e4\nMOV RDX,qword ptr [0x00611340]\nTEST RDX,RDX\nJZ 0x00402173\nMOV EDI,dword ptr [RSP + 0xc]\nXOR R15D,R15D\nXOR ESI,ESI\nCALL 0x004024f0\nTEST AL,AL\nJNZ 0x004021e4\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40b3da\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nMOV RDI,qword ptr [0x00611340]\nCALL 0x00406370\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401ac0\nJMP 0x004021e4\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40b3a8\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ac0\nJMP 0x004021e4\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x004021e4\nLEA EAX,[R12 + -0x30]\nCMP EAX,0x9\nJA 0x00401d80\nLEA R15,[RBP + 0x1]\nCMP R15,qword ptr [RSP + 0x38]\nJC 0x004021d9\nMOV RDI,R13\nLEA RSI,[RSP + 0x38]\nCALL 0x004086d0\nMOV R13,RAX\nMOV byte ptr [R13 + RBP*0x1],R12B\nMOV byte ptr [R13 + RBP*0x1 + 0x1],0x0\nMOV dword ptr [RSP + 0xc],0xffffffff\nMOV EDX,0x40af70\nMOV ECX,0x40afb0\nMOV EDI,R14D\nMOV RSI,qword ptr [RSP + 0x30]\nLEA R8,[RSP + 0xc]\nCALL 0x00401890\nMOV R12D,EAX\nCMP R12D,-0x1\nMOV RBP,R15\nJNZ 0x004021b0\nTEST R13,R13\nJZ 0x00402229\nMOV RDI,R13\nCALL 0x004025d0\nMOV RDI,R13\nCALL 0x00401740\nMOV R15,qword ptr [RSP + 0x20]\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBP,qword ptr [RSP + 0x18]\nMOV R13,qword ptr [RSP + 0x28]\nCMP qword ptr [0x00611380],0x0\nJNZ 0x00402295\nJMP 0x0040225e\nXOR R15D,R15D\nXOR R12D,R12D\nXOR R13D,R13D\nXOR EBP,EBP\nCMP qword ptr [0x00611380],0x0\nJNZ 0x00402295\nMOV EDI,0x40b4e9\nCALL 0x00401730\nTEST RAX,RAX\nJZ 0x00402289\nMOV EDI,0x2\nCALL 0x00404be0\nMOV EDX,0x40b508\nMOV ECX,0x40b4f9\nTEST AL,AL\nCMOVNZ RCX,RDX\nJMP 0x0040228e\nMOV ECX,0x40b508\nMOV qword ptr [0x00611380],RCX\nCMP qword ptr [0x00611370],0x0\nJNZ 0x004022aa\nMOV qword ptr [0x00611370],0x1\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00402318\nCMP byte ptr [0x006113b0],0x1\nJNZ 0x004022e1\nXOR EDI,EDI\nMOV ESI,0x40b517\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ac0\nCMP byte ptr [0x0061139a],0x1\nJNZ 0x00402318\nCMP byte ptr [0x00611378],0x1\nJNZ 0x00402318\nXOR EDI,EDI\nMOV ESI,0x40b552\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ac0\nTEST BPL,0x1\nJNZ 0x00402378\nMOVSXD RAX,dword ptr [0x00611338]\nCMP EAX,R14D\nJGE 0x00402359\nMOVSXD RCX,R15D\nLEA RDI,[RBX + RCX*0x8]\nMOV RCX,qword ptr [RSP + 0x30]\nLEA RSI,[RCX + RAX*0x8]\nLEA EBP,[R14 + -0x1]\nSUB EBP,EAX\nLEA RDX,[0x8 + RBP*0x8]\nCALL 0x004019b0\nLEA R15D,[R15 + RBP*0x1 + 0x1]\nMOV dword ptr [0x00611338],R14D\nTEST R15D,R15D\nJZ 0x004023d3\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJZ 0x004023de\nMOV EDI,R15D\nMOV RSI,RBX\nCALL 0x004029b0\nJMP 0x00402406\nTEST R13B,0x1\nJNZ 0x00402467\nTEST R12B,0x1\nJZ 0x0040231e\nMOV AL,byte ptr [0x006113a5]\nTEST AL,AL\nJNZ 0x0040231e\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJNZ 0x004023a9\nCMP byte ptr [0x006113b0],0x1\nJNZ 0x0040231e\nMOV AL,byte ptr [0x006113af]\nTEST AL,AL\nJNZ 0x004023c7\nMOV byte ptr [0x00611399],0x1\nCMP dword ptr [0x006113a8],0x0\nJLE 0x0040231e\nMOV byte ptr [0x006113a5],0x1\nJMP 0x0040231e\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x004029b0\nJMP 0x00402406\nMOV EBP,R15D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x1\nMOV RSI,RBX\nCALL 0x004029b0\nADD RBX,0x8\nDEC RBP\nJNZ 0x004023f0\nCALL 0x00402a30\nCMP byte ptr [0x006113b1],0x1\nJNZ 0x00402451\nMOV RDI,qword ptr [0x00611330]\nCALL 0x00409270\nCMP EAX,-0x1\nJNZ 0x00402451\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40b58f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401ac0\nMOVZX EAX,byte ptr [0x006113b2]\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJNZ 0x0040247a\nCMP byte ptr [0x006113b0],0x1\nJNZ 0x00402498\nMOV byte ptr [0x006113af],0x1\nTEST R12B,0x1\nJZ 0x0040231e\nMOV EAX,0x6113a5\nMOV byte ptr [RAX],0x1\nJMP 0x0040231e\nMOV EAX,0x611399\nMOV byte ptr [RAX],0x1\nJMP 0x0040231e\nMOV RDI,qword ptr [0x00611328]\nMOV RCX,qword ptr [0x006112b0]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x40b4bc\nMOV EDX,0x40b4bf\nMOV R8D,0x40b4cd\nMOV R9D,0x40b4da\nXOR EAX,EAX\nCALL 0x004084c0\nXOR EDI,EDI\nCALL 0x00401b30\nXOR EDI,EDI\nCALL 0x00402750\nMOV EDI,0x1\nCALL 0x00402750\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n41 89 fe\n48 c7 44 24 38 00 00 00 00\n48 89 74 24 30\n48 8b 3e\ne8 a9 31 00 00\nbf 06 00 00 00\nbe 1d c6 40 00\ne8 9a fd ff ff\nbf c3 b4 40 00\nbe 90 b3 40 00\ne8 5b fb ff ff\nbf c3 b4 40 00\ne8 31 fb ff ff\nbf 20 4a 40 00\ne8 d7 89 00 00\n41 83 fe 02\n7c 15\n49 63 c6\n48 8d 3c c5 f8 ff ff ff\ne8 d1 68 00 00\n48 89 c3\neb 02\n31 db\nc7 44 24 0c ff ff ff ff\n4c 8d 44 24 0c\nba 70 af 40 00\nb9 b0 af 40 00\n44 89 f7\n48 8b 74 24 30\ne8 46 fb ff ff\n41 89 c4\n41 83 fc ff\n0f 84 f2 04 00 00\n31 ed\n45 31 ed\n31 c0\n48 89 44 24 20\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 28\n31 c0\n48 89 44 24 18\ne9 33 04 00 00\n41 81 c4 83 00 00 00\n41 81 fc 04 01 00 00\n0f 87 52 07 00 00\n42 ff 24 e5 40 a7 40 00\nc6 05 e6 f5 20 00 01\n45 31 ff\ne9 39 04 00 00\n48 83 3d bd f5 20 00 00\n75 26\n48 8b 15 84 f5 20 00\n80 3a 2b\n75 1a\n48 ff c2\nbf fe ff ff ff\nbe 2b 00 00 00\ne8 1d 07 00 00\n84 c0\n0f 85 1b 02 00 00\n48 8b 05 5e f5 20 00\n48 8b 54 24 20\n48 63 ca\nff c2\n48 89 54 24 20\n48 89 04 cb\ne9 fc 01 00 00\n48 8b 05 3f f5 20 00\n48 89 05 78 f5 20 00\n45 31 ff\ne9 d4 03 00 00\nc6 05 82 f5 20 00 01\n45 31 ff\ne9 c5 03 00 00\nc6 05 76 f5 20 00 01\n4c 8b 25 13 f5 20 00\n45 31 ff\n31 ff\nbe 19 b4 40 00\nba 05 00 00 00\ne8 1f fa ff ff\nbe 00 00 00 80\nba 8c 12 61 00\ne9 d0 01 00 00\n48 c7 05 35 f4 20 00 1d c6 40 00\nc7 05 43 f5 20 00 00 00 00 00\nc6 05 39 f5 20 00 01\n48 8b 3d cd f4 20 00\n48 85 ff\n74 05\ne8 93 08 00 00\n31 c0\n48 89 44 24 10\n45 31 ff\ne9 58 03 00 00\nc6 05 19 f5 20 00 01\nc6 05 13 f5 20 00 00\n45 31 ff\ne9 42 03 00 00\nc6 05 06 f5 20 00 01\n48 8b 2d 90 f4 20 00\n31 c0\n48 89 44 24 28\n31 ff\nbe 8f b4 40 00\nba 05 00 00 00\ne8 98 f9 ff ff\nbe 01 00 00 00\nba 98 12 61 00\n48 89 ef\n48 89 c1\ne8 03 08 00 00\n45 31 ff\ne9 ff 02 00 00\nc6 05 8c f4 20 00 01\ne9 cf 00 00 00\nc6 05 82 f4 20 00 01\n45 31 ff\ne9 e4 02 00 00\nc6 05 74 f4 20 00 01\n45 31 ff\ne9 d5 02 00 00\nc6 05 66 f4 20 00 01\n45 31 ff\ne9 c6 02 00 00\n48 8b 3d 1b f4 20 00\n48 85 ff\n74 14\nbe 65 00 00 00\nba 70 12 61 00\nb9 74 12 61 00\ne8 d2 06 00 00\nc6 05 43 f4 20 00 01\n45 31 ff\ne9 97 02 00 00\n48 8b 05 ec f3 20 00\n48 89 05 35 f4 20 00\n45 31 ff\ne9 81 02 00 00\n48 8b 3d d6 f3 20 00\n48 85 ff\n74 14\nbe 69 00 00 00\nba 78 12 61 00\nb9 7c 12 61 00\ne8 8d 06 00 00\nc6 05 0e f4 20 00 01\n45 31 ff\ne9 52 02 00 00\n4c 8b 25 a7 f3 20 00\n45 31 ff\n31 ff\nbe f0 b3 40 00\nba 05 00 00 00\ne8 b3 f8 ff ff\nbe 01 00 00 00\nba 80 12 61 00\neb 67\nc6 05 da f3 20 00 01\nc6 05 b2 f3 20 00 01\n45 31 ff\ne9 15 02 00 00\nc6 05 c5 f3 20 00 01\n48 8b 3d 63 f3 20 00\n48 85 ff\n74 14\nbe 6e 00 00 00\nba 84 12 61 00\nb9 88 12 61 00\ne8 1a 06 00 00\n45 31 ff\ne9 e6 01 00 00\n4c 8b 25 3b f3 20 00\n45 31 ff\n31 ff\nbe 42 b4 40 00\nba 05 00 00 00\ne8 47 f8 ff ff\n31 f6\nba a0 13 61 00\n4c 89 e7\n48 89 c1\ne8 b5 06 00 00\ne9 b4 01 00 00\nc6 05 6d f3 20 00 01\n45 31 ff\ne9 a5 01 00 00\n45 31 ff\n80 3d 5c f3 20 00 00\n0f 85 4e 01 00 00\nb0 01\n48 89 44 24 18\n48 8b 3d e3 f2 20 00\n48 85 ff\n0f 84 3e 01 00 00\ne8 a5 06 00 00\n45 31 ff\ne9 31 01 00 00\nc6 05 32 f3 20 00 01\nc6 05 2c f3 20 00 01\n45 31 ff\ne9 5b 01 00 00\nc6 05 1e f3 20 00 01\n45 31 ff\ne9 4c 01 00 00\n48 8b 2d a1 f2 20 00\n31 ff\nbe 62 b4 40 00\nba 05 00 00 00\ne8 b0 f7 ff ff\n48 8d 54 24 44\nbe 01 00 00 00\n48 89 ef\n48 89 c1\ne8 1b 06 00 00\n0f b6 05 e3 f2 20 00\n84 c0\n75 0a\n8b 44 24 44\n89 05 be f1 20 00\nb0 01\n48 89 44 24 18\n45 31 ff\nb0 01\n48 89 44 24 28\ne9 f4 00 00 00\n48 8b 3d 49 f2 20 00\ne8 d4 04 00 00\n4c 89 ef\ne8 3c f6 ff ff\n48 c7 44 24 38 00 00 00 00\n45 31 ed\n45 31 ff\ne9 cc 00 00 00\n48 8b 15 21 f2 20 00\n48 85 d2\n74 4f\n8b 7c 24 0c\n45 31 ff\n31 f6\ne8 be 03 00 00\n84 c0\n0f 85 aa 00 00 00\n45 31 ff\n31 ff\nbe da b3 40 00\nba 05 00 00 00\ne8 12 f7 ff ff\n49 89 c4\n48 8b 3d e8 f1 20 00\ne8 13 42 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 e2\ne8 4f f9 ff ff\neb 71\n45 31 ff\n31 ff\nbe a8 b3 40 00\nba 05 00 00 00\ne8 d9 f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 25 f9 ff ff\neb 47\nb0 01\n48 89 44 24 18\nb0 01\n48 89 44 24 10\neb 37\n41 8d 44 24 d0\n83 f8 09\n0f 87 c2 fb ff ff\n4c 8d 7d 01\n4c 3b 7c 24 38\n72 10\n4c 89 ef\n48 8d 74 24 38\ne8 fa 64 00 00\n49 89 c5\n45 88 64 2d 00\n41 c6 44 2d 01 00\nc7 44 24 0c ff ff ff ff\nba 70 af 40 00\nb9 b0 af 40 00\n44 89 f7\n48 8b 74 24 30\n4c 8d 44 24 0c\ne8 88 f6 ff ff\n41 89 c4\n41 83 fc ff\n4c 89 fd\n75 9c\n4d 85 ed\n74 10\n4c 89 ef\ne8 af 03 00 00\n4c 89 ef\ne8 17 f5 ff ff\n4c 8b 7c 24 20\n4c 8b 64 24 10\n48 8b 6c 24 18\n4c 8b 6c 24 28\n48 83 3d 3b f1 20 00 00\n75 4e\neb 15\n45 31 ff\n45 31 e4\n45 31 ed\n31 ed\n48 83 3d 24 f1 20 00 00\n75 37\nbf e9 b4 40 00\ne8 c8 f4 ff ff\n48 85 c0\n74 1c\nbf 02 00 00 00\ne8 69 29 00 00\nba 08 b5 40 00\nb9 f9 b4 40 00\n84 c0\n48 0f 45 ca\neb 05\nb9 08 b5 40 00\n48 89 0d eb f0 20 00\n48 83 3d d3 f0 20 00 00\n75 0b\n48 c7 05 c6 f0 20 00 01 00 00 00\n80 3d e9 f0 20 00 01\n75 65\n80 3d f6 f0 20 00 01\n75 25\n31 ff\nbe 17 b5 40 00\nba 05 00 00 00\ne8 93 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 df f7 ff ff\n80 3d b2 f0 20 00 01\n75 2e\n80 3d 87 f0 20 00 01\n75 25\n31 ff\nbe 52 b5 40 00\nba 05 00 00 00\ne8 5c f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 a8 f7 ff ff\n40 f6 c5 01\n75 5a\n48 63 05 13 f0 20 00\n44 39 f0\n7d 2f\n49 63 cf\n48 8d 3c cb\n48 8b 4c 24 30\n48 8d 34 c1\n41 8d 6e ff\n29 c5\n48 8d 14 ed 08 00 00 00\ne8 63 f6 ff ff\n45 8d 7c 2f 01\n44 89 35 df ef 20 00\n45 85 ff\n74 75\n8a 05 36 f0 20 00\n84 c0\n74 76\n44 89 ff\n48 89 de\ne8 3d 06 00 00\ne9 8e 00 00 00\n41 f6 c5 01\n0f 85 e5 00 00 00\n41 f6 c4 01\n74 96\n8a 05 17 f0 20 00\n84 c0\n75 8c\n8a 05 02 f0 20 00\n84 c0\n75 0d\n80 3d 0d f0 20 00 01\n0f 85 75 ff ff ff\n8a 05 00 f0 20 00\n84 c0\n75 14\nc6 05 df ef 20 00 01\n83 3d e7 ef 20 00 00\n0f 8e 57 ff ff ff\nc6 05 d7 ef 20 00 01\ne9 4b ff ff ff\n31 ff\n31 f6\ne8 d4 05 00 00\neb 28\n44 89 fd\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nbf 01 00 00 00\n48 89 de\ne8 b3 05 00 00\n48 83 c3 08\n48 ff cd\n75 ea\ne8 25 06 00 00\n80 3d 9f ef 20 00 01\n75 3d\n48 8b 3d 15 ef 20 00\ne8 50 6e 00 00\n83 f8 ff\n75 2c\ne8 56 f3 ff ff\n8b 18\n31 ff\nbe 8f b5 40 00\nba 05 00 00 00\ne8 23 f4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 6f f6 ff ff\n0f b6 05 5a ef 20 00\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n8a 05 2d ef 20 00\n84 c0\n75 09\n80 3d 38 ef 20 00 01\n75 1e\nc6 05 2e ef 20 00 01\n41 f6 c4 01\n0f 84 93 fe ff ff\nb8 a5 13 61 00\nc6 00 01\ne9 86 fe ff ff\nb8 99 13 61 00\nc6 00 01\ne9 79 fe ff ff\n48 8b 3d 7c ee 20 00\n48 8b 0d fd ed 20 00\n48 c7 04 24 00 00 00 00\nbe bc b4 40 00\nba bf b4 40 00\n41 b8 cd b4 40 00\n41 b9 da b4 40 00\n31 c0\ne8 e8 5f 00 00\n31 ff\ne8 51 f6 ff ff\n31 ff\ne8 6a 02 00 00\nbf 01 00 00 00\ne8 60 02 00 00\n'
p1426
S'.text:0000000000401cb0\n.text:0000000000401cb1\n.text:0000000000401cb3\n.text:0000000000401cb5\n.text:0000000000401cb7\n.text:0000000000401cb9\n.text:0000000000401cba\n.text:0000000000401cbe\n.text:0000000000401cc1\n.text:0000000000401cca\n.text:0000000000401ccf\n.text:0000000000401cd2\n.text:0000000000401cd7\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ceb\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cfa\n.text:0000000000401cff\n.text:0000000000401d04\n.text:0000000000401d09\n.text:0000000000401d0d\n.text:0000000000401d0f\n.text:0000000000401d12\n.text:0000000000401d1a\n.text:0000000000401d1f\n.text:0000000000401d22\n.text:0000000000401d24\n.text:0000000000401d26\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3d\n.text:0000000000401d40\n.text:0000000000401d45\n.text:0000000000401d4a\n.text:0000000000401d4d\n.text:0000000000401d51\n.text:0000000000401d57\n.text:0000000000401d59\n.text:0000000000401d5c\n.text:0000000000401d5e\n.text:0000000000401d63\n.text:0000000000401d65\n.text:0000000000401d6a\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d73\n.text:0000000000401d78\n.text:0000000000401d80\n.text:0000000000401d87\n.text:0000000000401d8e\n.text:0000000000401d94\n.text:0000000000401d9c\n.text:0000000000401da3\n.text:0000000000401da6\n.text:0000000000401dab\n.text:0000000000401db3\n.text:0000000000401db5\n.text:0000000000401dbc\n.text:0000000000401dbf\n.text:0000000000401dc1\n.text:0000000000401dc4\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd3\n.text:0000000000401dd5\n.text:0000000000401ddb\n.text:0000000000401de2\n.text:0000000000401de7\n.text:0000000000401dea\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df5\n.text:0000000000401dfa\n.text:0000000000401e01\n.text:0000000000401e08\n.text:0000000000401e0b\n.text:0000000000401e10\n.text:0000000000401e17\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e26\n.text:0000000000401e2d\n.text:0000000000401e30\n.text:0000000000401e32\n.text:0000000000401e37\n.text:0000000000401e3c\n.text:0000000000401e41\n.text:0000000000401e46\n.text:0000000000401e4b\n.text:0000000000401e50\n.text:0000000000401e5b\n.text:0000000000401e65\n.text:0000000000401e6c\n.text:0000000000401e73\n.text:0000000000401e76\n.text:0000000000401e78\n.text:0000000000401e7d\n.text:0000000000401e7f\n.text:0000000000401e84\n.text:0000000000401e87\n.text:0000000000401e8c\n.text:0000000000401e93\n.text:0000000000401e9a\n.text:0000000000401e9d\n.text:0000000000401ea2\n.text:0000000000401ea9\n.text:0000000000401eb0\n.text:0000000000401eb2\n.text:0000000000401eb7\n.text:0000000000401eb9\n.text:0000000000401ebe\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401ecd\n.text:0000000000401ed2\n.text:0000000000401ed5\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401ee0\n.text:0000000000401ee5\n.text:0000000000401eec\n.text:0000000000401ef1\n.text:0000000000401ef8\n.text:0000000000401efb\n.text:0000000000401f00\n.text:0000000000401f07\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f16\n.text:0000000000401f19\n.text:0000000000401f1e\n.text:0000000000401f25\n.text:0000000000401f28\n.text:0000000000401f2a\n.text:0000000000401f2f\n.text:0000000000401f34\n.text:0000000000401f39\n.text:0000000000401f3e\n.text:0000000000401f45\n.text:0000000000401f48\n.text:0000000000401f4d\n.text:0000000000401f54\n.text:0000000000401f5b\n.text:0000000000401f5e\n.text:0000000000401f63\n.text:0000000000401f6a\n.text:0000000000401f6d\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f83\n.text:0000000000401f8a\n.text:0000000000401f8d\n.text:0000000000401f92\n.text:0000000000401f99\n.text:0000000000401f9c\n.text:0000000000401f9e\n.text:0000000000401fa3\n.text:0000000000401fa8\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fb9\n.text:0000000000401fc0\n.text:0000000000401fc7\n.text:0000000000401fca\n.text:0000000000401fcf\n.text:0000000000401fd6\n.text:0000000000401fdd\n.text:0000000000401fe0\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401ff1\n.text:0000000000401ff6\n.text:0000000000401ff9\n.text:0000000000401ffe\n.text:0000000000402005\n.text:0000000000402008\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402014\n.text:0000000000402019\n.text:000000000040201b\n.text:0000000000402020\n.text:0000000000402023\n.text:0000000000402026\n.text:000000000040202b\n.text:0000000000402030\n.text:0000000000402037\n.text:000000000040203a\n.text:000000000040203f\n.text:0000000000402042\n.text:0000000000402049\n.text:000000000040204f\n.text:0000000000402051\n.text:0000000000402056\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402066\n.text:000000000040206b\n.text:000000000040206e\n.text:0000000000402073\n.text:000000000040207a\n.text:0000000000402081\n.text:0000000000402084\n.text:0000000000402089\n.text:0000000000402090\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209f\n.text:00000000004020a1\n.text:00000000004020a6\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b5\n.text:00000000004020ba\n.text:00000000004020bd\n.text:00000000004020c0\n.text:00000000004020c5\n.text:00000000004020cc\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d4\n.text:00000000004020da\n.text:00000000004020dc\n.text:00000000004020e1\n.text:00000000004020e4\n.text:00000000004020e6\n.text:00000000004020eb\n.text:00000000004020f0\n.text:00000000004020f7\n.text:00000000004020fc\n.text:00000000004020ff\n.text:0000000000402104\n.text:000000000040210d\n.text:0000000000402110\n.text:0000000000402113\n.text:0000000000402118\n.text:000000000040211f\n.text:0000000000402122\n.text:0000000000402124\n.text:0000000000402128\n.text:000000000040212b\n.text:000000000040212d\n.text:0000000000402132\n.text:0000000000402134\n.text:000000000040213a\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402144\n.text:0000000000402149\n.text:000000000040214e\n.text:0000000000402151\n.text:0000000000402158\n.text:000000000040215d\n.text:0000000000402160\n.text:0000000000402165\n.text:0000000000402167\n.text:0000000000402169\n.text:000000000040216c\n.text:0000000000402171\n.text:0000000000402173\n.text:0000000000402176\n.text:0000000000402178\n.text:000000000040217d\n.text:0000000000402182\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218f\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219d\n.text:000000000040219f\n.text:00000000004021a4\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021b0\n.text:00000000004021b5\n.text:00000000004021b8\n.text:00000000004021be\n.text:00000000004021c2\n.text:00000000004021c7\n.text:00000000004021c9\n.text:00000000004021cc\n.text:00000000004021d1\n.text:00000000004021d6\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e4\n.text:00000000004021ec\n.text:00000000004021f1\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fe\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220b\n.text:000000000040220f\n.text:0000000000402212\n.text:0000000000402214\n.text:0000000000402217\n.text:0000000000402219\n.text:000000000040221c\n.text:0000000000402221\n.text:0000000000402224\n.text:0000000000402229\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402245\n.text:0000000000402247\n.text:0000000000402249\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402252\n.text:0000000000402254\n.text:000000000040225c\n.text:000000000040225e\n.text:0000000000402263\n.text:0000000000402268\n.text:000000000040226b\n.text:000000000040226d\n.text:0000000000402272\n.text:0000000000402277\n.text:000000000040227c\n.text:0000000000402281\n.text:0000000000402283\n.text:0000000000402287\n.text:0000000000402289\n.text:000000000040228e\n.text:0000000000402295\n.text:000000000040229d\n.text:000000000040229f\n.text:00000000004022aa\n.text:00000000004022b1\n.text:00000000004022b3\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022be\n.text:00000000004022c3\n.text:00000000004022c8\n.text:00000000004022cd\n.text:00000000004022d0\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022d9\n.text:00000000004022dc\n.text:00000000004022e1\n.text:00000000004022e8\n.text:00000000004022ea\n.text:00000000004022f1\n.text:00000000004022f3\n.text:00000000004022f5\n.text:00000000004022fa\n.text:00000000004022ff\n.text:0000000000402304\n.text:0000000000402307\n.text:000000000040230c\n.text:000000000040230e\n.text:0000000000402310\n.text:0000000000402313\n.text:0000000000402318\n.text:000000000040231c\n.text:000000000040231e\n.text:0000000000402325\n.text:0000000000402328\n.text:000000000040232a\n.text:000000000040232d\n.text:0000000000402331\n.text:0000000000402336\n.text:000000000040233a\n.text:000000000040233e\n.text:0000000000402340\n.text:0000000000402348\n.text:000000000040234d\n.text:0000000000402352\n.text:0000000000402359\n.text:000000000040235c\n.text:000000000040235e\n.text:0000000000402364\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236b\n.text:000000000040236e\n.text:0000000000402373\n.text:0000000000402378\n.text:000000000040237c\n.text:0000000000402382\n.text:0000000000402386\n.text:0000000000402388\n.text:000000000040238e\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402398\n.text:000000000040239a\n.text:000000000040239c\n.text:00000000004023a3\n.text:00000000004023a9\n.text:00000000004023af\n.text:00000000004023b1\n.text:00000000004023b3\n.text:00000000004023ba\n.text:00000000004023c1\n.text:00000000004023c7\n.text:00000000004023ce\n.text:00000000004023d3\n.text:00000000004023d5\n.text:00000000004023d7\n.text:00000000004023dc\n.text:00000000004023de\n.text:00000000004023e1\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402401\n.text:0000000000402404\n.text:0000000000402406\n.text:000000000040240b\n.text:0000000000402412\n.text:0000000000402414\n.text:000000000040241b\n.text:0000000000402420\n.text:0000000000402423\n.text:0000000000402425\n.text:000000000040242a\n.text:000000000040242c\n.text:000000000040242e\n.text:0000000000402433\n.text:0000000000402438\n.text:000000000040243d\n.text:0000000000402440\n.text:0000000000402445\n.text:0000000000402447\n.text:0000000000402449\n.text:000000000040244c\n.text:0000000000402451\n.text:0000000000402458\n.text:000000000040245c\n.text:000000000040245d\n.text:000000000040245f\n.text:0000000000402461\n.text:0000000000402463\n.text:0000000000402465\n.text:0000000000402466\n.text:0000000000402467\n.text:000000000040246d\n.text:000000000040246f\n.text:0000000000402471\n.text:0000000000402478\n.text:000000000040247a\n.text:0000000000402481\n.text:0000000000402485\n.text:000000000040248b\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402498\n.text:000000000040249d\n.text:00000000004024a0\n.text:00000000004024a5\n.text:00000000004024ac\n.text:00000000004024b3\n.text:00000000004024bb\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024cb\n.text:00000000004024d1\n.text:00000000004024d3\n.text:00000000004024d8\n.text:00000000004024da\n.text:00000000004024df\n.text:00000000004024e1\n.text:00000000004024e6\n.text:00000000004024eb\n'
p1427
tp1428
sS'xcharalloc'
p1429
(S'\n__stdcall xcharalloc(size_t n)\n'
p1430
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1431
S'JMP 0x004085f0\n'
p1432
S'e9 2b ff ff ff\n'
p1433
S'.text:00000000004086c0\n'
p1434
tp1435
sS'c_isupper'
p1436
(S'\n__stdcall c_isupper()\n'
p1437
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1438
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1439
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1440
S'.text:0000000000409b20\n.text:0000000000409b23\n.text:0000000000409b26\n.text:0000000000409b29\n'
p1441
tp1442
sS'time_t_int_add_ok'
p1443
(S'\n__stdcall time_t_int_add_ok(time_t a)\n'
p1444
V\u000aint time_t_int_add_ok(time_t a)\u000a\u000a{\u000a  uint in_ESI;\u000a  \u000a  return (int)((uint)((ulong)((long)(int)(((uint)a & in_ESI & 1) + ((int)in_ESI >> 1)) + (a >> 1) +\u000a                             0x4000000000000000) >> 0x3f) ^ 1);\u000a}\u000a\u000a
p1445
S'MOV EAX,EDI\nAND EAX,ESI\nSAR RDI,1\nSAR ESI,1\nAND EAX,0x1\nADD EAX,ESI\nMOVSXD RCX,EAX\nADD RCX,RDI\nMOV RAX,0x4000000000000000\nADD RAX,RCX\nSHR RAX,0x3f\nXOR EAX,0x1\nRET\n'
p1446
S'89 f8\n21 f0\n48 d1 ff\nd1 fe\n83 e0 01\n01 f0\n48 63 c8\n48 01 f9\n48 b8 00 00 00 00 00 00 00 40\n48 01 c8\n48 c1 e8 3f\n83 f0 01\nc3\n'
p1447
S'.text:000000000040a5e0\n.text:000000000040a5e2\n.text:000000000040a5e4\n.text:000000000040a5e7\n.text:000000000040a5e9\n.text:000000000040a5ec\n.text:000000000040a5ee\n.text:000000000040a5f1\n.text:000000000040a5f4\n.text:000000000040a5fe\n.text:000000000040a601\n.text:000000000040a605\n.text:000000000040a608\n'
p1448
tp1449
sS'c_isalnum'
p1450
(S'\n__stdcall c_isalnum()\n'
p1451
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1452
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00409a3b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00409a3b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00409a3a\nXOR EAX,EAX\nRET\n'
p1453
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1454
S'.text:0000000000409a20\n.text:0000000000409a22\n.text:0000000000409a25\n.text:0000000000409a28\n.text:0000000000409a2a\n.text:0000000000409a34\n.text:0000000000409a38\n.text:0000000000409a3a\n.text:0000000000409a3b\n.text:0000000000409a3e\n.text:0000000000409a41\n.text:0000000000409a43\n.text:0000000000409a45\n'
p1455
tp1456
sS'print_char'
p1457
(S'\n__stdcall print_char()\n'
p1458
V\u000avoid print_char(char cParm1)\u000a\u000a{\u000a  ushort *puVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  ushort **ppuVar4;\u000a  \u000a  if (tabify_output == 1) {\u000a    if (cParm1 == ' ') {\u000a      spaces_not_printed = spaces_not_printed + 1;\u000a      return;\u000a    }\u000a    if (0 < spaces_not_printed) {\u000a      print_white_space();\u000a    }\u000a    ppuVar4 = __ctype_b_loc();\u000a    puVar1 = *ppuVar4;\u000a    bVar2 = to_uchar();\u000a    iVar3 = 1;\u000a    if (((*(byte *)((long)puVar1 + (ulong)bVar2 * 2 + 1) & 0x40) != 0) ||\u000a       (iVar3 = -1, cParm1 == '\u005cb')) {\u000a      output_position = output_position + iVar3;\u000a    }\u000a  }\u000a  putchar_unlocked((int)cParm1);\u000a  return;\u000a}\u000a\u000a
p1459
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP byte ptr [0x00611398],0x1\nJNZ 0x00403d23\nCMP BL,0x20\nMOV EAX,dword ptr [0x00611450]\nJNZ 0x00403cea\nINC EAX\nMOV dword ptr [0x00611450],EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nTEST EAX,EAX\nJLE 0x00403cf3\nCALL 0x00404250\nCALL 0x00401b90\nMOV R14,qword ptr [RAX]\nMOVSX EDI,BL\nCALL 0x004042e0\nMOVZX ECX,AL\nMOV EAX,0x1\nTEST byte ptr [R14 + RCX*0x2 + 0x1],0x40\nJNZ 0x00403d1d\nMOV EAX,0xffffffff\nCMP BL,0x8\nJNZ 0x00403d23\nADD dword ptr [0x00611454],EAX\nMOVSX EDI,BL\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004019c0\n'
p1460
S'41 56\n53\n50\n89 fb\n80 3d cb d6 20 00 01\n75 54\n80 fb 20\n8b 05 78 d7 20 00\n75 10\nff c0\n89 05 6e d7 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n85 c0\n7e 05\ne8 5d 05 00 00\ne8 98 de ff ff\n4c 8b 30\n0f be fb\ne8 dd 05 00 00\n0f b6 c8\nb8 01 00 00 00\n41 f6 44 4e 01 40\n75 0a\nb8 ff ff ff ff\n80 fb 08\n75 06\n01 05 31 d7 20 00\n0f be fb\n48 83 c4 08\n5b\n41 5e\ne9 8e dc ff ff\n'
p1461
S'.text:0000000000403cc0\n.text:0000000000403cc2\n.text:0000000000403cc3\n.text:0000000000403cc4\n.text:0000000000403cc6\n.text:0000000000403ccd\n.text:0000000000403ccf\n.text:0000000000403cd2\n.text:0000000000403cd8\n.text:0000000000403cda\n.text:0000000000403cdc\n.text:0000000000403ce2\n.text:0000000000403ce6\n.text:0000000000403ce7\n.text:0000000000403ce9\n.text:0000000000403cea\n.text:0000000000403cec\n.text:0000000000403cee\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403cfe\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d0b\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d23\n.text:0000000000403d26\n.text:0000000000403d2a\n.text:0000000000403d2b\n.text:0000000000403d2d\n'
p1462
tp1463
sS'__errno_location'
p1464
(S'\n__stdcall __errno_location()\n'
p1465
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00611048)();\u000a  return piVar1;\u000a}\u000a\u000a
p1466
S'JMP qword ptr [0x00611048]\n'
p1467
S'ff 25 c2 f8 20 00\n'
p1468
S'.plt:0000000000401780\n'
p1469
tp1470
sS'print_header'
p1471
(S'\n__stdcall print_header()\n'
p1472
V\u000avoid print_header(void)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  undefined8 uVar3;\u000a  uint uVar4;\u000a  char page_text [276];\u000a  char acStack312 [288];\u000a  \u000a  output_position = 0;\u000a  pad_across_to((ulong)(uint)chars_per_margin);\u000a  print_white_space();\u000a  if (page_number == 0) {\u000a    uVar3 = dcgettext(0,"page number overflow",5);\u000a    error(1,0,uVar3,uVar3);\u000a  }\u000a  uVar3 = dcgettext(0,"Page %lu",5);\u000a  __sprintf_chk(acStack312,1,0x114,uVar3,page_number);\u000a  iVar1 = header_width_available;\u000a  uVar3 = 0x4040aa;\u000a  iVar2 = gnu_mbswidth(acStack312);\u000a  uVar4 = iVar1 - iVar2;\u000a  if ((int)uVar4 < 0) {\u000a    uVar4 = 0;\u000a  }\u000a  __printf_chk(1,"\u005cn\u005cn%*s%s%*s%s%*s%s\u005cn\u005cn\u005cn",(ulong)(uint)chars_per_margin,&DAT_0040c61d,date_text,\u000a               (ulong)(uVar4 >> 1),&DAT_0040c61e,file_text,(ulong)(uVar4 - (uVar4 >> 1)),\u000a               &DAT_0040c61e,acStack312,uVar3);\u000a  print_a_header = 0;\u000a  output_position = 0;\u000a  return;\u000a}\u000a\u000a
p1473
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x120\nMOV dword ptr [0x00611454],0x0\nMOV EDI,dword ptr [0x006113a0]\nCALL 0x00404120\nCALL 0x00404250\nCMP qword ptr [0x006113b8],0x0\nJNZ 0x00404065\nXOR EDI,EDI\nMOV ESI,0x40c659\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ac0\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40c66e\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV R8,qword ptr [0x006113b8]\nMOV R15,RSP\nMOV ESI,0x1\nMOV EDX,0x114\nXOR EAX,EAX\nMOV RDI,R15\nCALL 0x00401ba0\nMOV EBX,dword ptr [0x00611418]\nXOR ESI,ESI\nMOV RDI,R15\nCALL 0x00404c20\nSUB EBX,EAX\nCMOVS EBX,R14D\nMOV R9D,EBX\nSHR R9D,1\nSUB EBX,R9D\nMOV EDX,dword ptr [0x006113a0]\nMOV R8,qword ptr [0x00611408]\nSUB RSP,0x8\nMOV EDI,0x1\nMOV ESI,0x40c677\nMOV ECX,0x40c61d\nMOV EAX,0x0\nPUSH R15\nPUSH 0x40c61e\nPUSH RBX\nPUSH qword ptr [0x00611410]\nPUSH 0x40c61e\nCALL 0x00401a90\nADD RSP,0x30\nMOV byte ptr [0x00611449],0x0\nMOV dword ptr [0x00611454],0x0\nADD RSP,0x120\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1474
S'41 57\n41 56\n53\n48 81 ec 20 01 00 00\nc7 05 2e d4 20 00 00 00 00 00\n8b 3d 74 d3 20 00\ne8 ef 00 00 00\ne8 1a 02 00 00\n48 83 3d 7a d3 20 00 00\n75 25\n31 ff\nbe 59 c6 40 00\nba 05 00 00 00\ne8 0f d8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 5b da ff ff\n45 31 f6\n31 ff\nbe 6e c6 40 00\nba 05 00 00 00\ne8 e7 d7 ff ff\n48 89 c1\n4c 8b 05 35 d3 20 00\n49 89 e7\nbe 01 00 00 00\nba 14 01 00 00\n31 c0\n4c 89 ff\ne8 06 db ff ff\n8b 1d 78 d3 20 00\n31 f6\n4c 89 ff\ne8 76 0b 00 00\n29 c3\n41 0f 48 de\n41 89 d9\n41 d1 e9\n44 29 cb\n8b 15 e1 d2 20 00\n4c 8b 05 42 d3 20 00\n48 83 ec 08\nbf 01 00 00 00\nbe 77 c6 40 00\nb9 1d c6 40 00\nb8 00 00 00 00\n41 57\n68 1e c6 40 00\n53\nff 35 24 d3 20 00\n68 1e c6 40 00\ne8 9a d9 ff ff\n48 83 c4 30\nc6 05 48 d3 20 00 00\nc7 05 49 d3 20 00 00 00 00 00\n48 81 c4 20 01 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1475
S'.text:0000000000404010\n.text:0000000000404012\n.text:0000000000404014\n.text:0000000000404015\n.text:000000000040401c\n.text:0000000000404026\n.text:000000000040402c\n.text:0000000000404031\n.text:0000000000404036\n.text:000000000040403e\n.text:0000000000404040\n.text:0000000000404042\n.text:0000000000404047\n.text:000000000040404c\n.text:0000000000404051\n.text:0000000000404054\n.text:0000000000404059\n.text:000000000040405b\n.text:000000000040405d\n.text:0000000000404060\n.text:0000000000404065\n.text:0000000000404068\n.text:000000000040406a\n.text:000000000040406f\n.text:0000000000404074\n.text:0000000000404079\n.text:000000000040407c\n.text:0000000000404083\n.text:0000000000404086\n.text:000000000040408b\n.text:0000000000404090\n.text:0000000000404092\n.text:0000000000404095\n.text:000000000040409a\n.text:00000000004040a0\n.text:00000000004040a2\n.text:00000000004040a5\n.text:00000000004040aa\n.text:00000000004040ac\n.text:00000000004040b0\n.text:00000000004040b3\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040bf\n.text:00000000004040c6\n.text:00000000004040ca\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d9\n.text:00000000004040de\n.text:00000000004040e0\n.text:00000000004040e5\n.text:00000000004040e6\n.text:00000000004040ec\n.text:00000000004040f1\n.text:00000000004040f6\n.text:00000000004040fa\n.text:0000000000404101\n.text:000000000040410b\n.text:0000000000404112\n.text:0000000000404113\n.text:0000000000404115\n.text:0000000000404117\n'
p1476
tp1477
sS'x2nrealloc'
p1478
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1479
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1480
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040868c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004086b9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004086aa\nTEST RCX,RCX\nJNZ 0x004086aa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00408630\nPUSH RAX\nCALL 0x00408780\n'
p1481
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1482
S'.text:0000000000408660\n.text:0000000000408663\n.text:0000000000408666\n.text:0000000000408669\n.text:000000000040866b\n.text:0000000000408675\n.text:0000000000408677\n.text:000000000040867a\n.text:000000000040867d\n.text:000000000040867f\n.text:0000000000408682\n.text:0000000000408685\n.text:000000000040868a\n.text:000000000040868c\n.text:000000000040868f\n.text:0000000000408691\n.text:0000000000408696\n.text:0000000000408698\n.text:000000000040869b\n.text:000000000040869d\n.text:00000000004086a4\n.text:00000000004086a7\n.text:00000000004086aa\n.text:00000000004086ad\n.text:00000000004086b1\n.text:00000000004086b4\n.text:00000000004086b9\n.text:00000000004086ba\n'
p1483
tp1484
sS'quotearg_n_options'
p1485
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1486
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401780\nTEST R12D,R12D\nJS 0x00406031\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006112c0]\nCMP dword ptr [0x006112c8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00405f4b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x6112d0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00408630\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006112c0],R15\nJNZ 0x00405f12\nMOVUPS XMM0,xmmword ptr [0x006112d0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006112c8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401910\nMOV dword ptr [0x006112c8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004050a0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00405fad\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040601b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x6114c0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00405fd8\nCALL 0x00401740\nMOV RDI,R15\nCALL 0x004086c0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004050a0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\n'
p1488
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 e1 b8 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 06 b4 20 00\n44 39 25 07 b4 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd d0 12 61 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 38 27 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d bb b3 20 00\n75 0b\n0f 10 05 c2 b3 20 00\n41 0f 11 07\n8b 05 b0 b3 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 dd b9 ff ff\n89 1d 8f b3 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 c0 14 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 68 b7 ff ff\n4c 89 ff\ne8 e0 26 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 3a b7 ff ff\n'
p1489
S'.text:0000000000405e80\n.text:0000000000405e81\n.text:0000000000405e83\n.text:0000000000405e85\n.text:0000000000405e87\n.text:0000000000405e89\n.text:0000000000405e8a\n.text:0000000000405e8e\n.text:0000000000405e91\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9a\n.text:0000000000405e9f\n.text:0000000000405ea2\n.text:0000000000405ea8\n.text:0000000000405ead\n.text:0000000000405eaf\n.text:0000000000405eb3\n.text:0000000000405eba\n.text:0000000000405ec1\n.text:0000000000405ec6\n.text:0000000000405ecb\n.text:0000000000405ed0\n.text:0000000000405ed2\n.text:0000000000405ed7\n.text:0000000000405eda\n.text:0000000000405edd\n.text:0000000000405ee3\n.text:0000000000405ee5\n.text:0000000000405ee8\n.text:0000000000405eec\n.text:0000000000405eef\n.text:0000000000405ef3\n.text:0000000000405ef8\n.text:0000000000405efb\n.text:0000000000405efe\n.text:0000000000405f05\n.text:0000000000405f07\n.text:0000000000405f0e\n.text:0000000000405f12\n.text:0000000000405f18\n.text:0000000000405f1b\n.text:0000000000405f1f\n.text:0000000000405f22\n.text:0000000000405f25\n.text:0000000000405f29\n.text:0000000000405f2b\n.text:0000000000405f2e\n.text:0000000000405f33\n.text:0000000000405f39\n.text:0000000000405f3c\n.text:0000000000405f41\n.text:0000000000405f46\n.text:0000000000405f4b\n.text:0000000000405f4e\n.text:0000000000405f52\n.text:0000000000405f56\n.text:0000000000405f5b\n.text:0000000000405f5f\n.text:0000000000405f63\n.text:0000000000405f67\n.text:0000000000405f6b\n.text:0000000000405f6f\n.text:0000000000405f74\n.text:0000000000405f77\n.text:0000000000405f7a\n.text:0000000000405f7d\n.text:0000000000405f82\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f8c\n.text:0000000000405f91\n.text:0000000000405f95\n.text:0000000000405f98\n.text:0000000000405f9b\n.text:0000000000405f9d\n.text:0000000000405fa2\n.text:0000000000405fa6\n.text:0000000000405fab\n.text:0000000000405fad\n.text:0000000000405fb1\n.text:0000000000405fb6\n.text:0000000000405fb9\n.text:0000000000405fbc\n.text:0000000000405fc1\n.text:0000000000405fc6\n.text:0000000000405fc9\n.text:0000000000405fce\n.text:0000000000405fd1\n.text:0000000000405fd3\n.text:0000000000405fd8\n.text:0000000000405fdb\n.text:0000000000405fe0\n.text:0000000000405fe3\n.text:0000000000405fe6\n.text:0000000000405feb\n.text:0000000000405fee\n.text:0000000000405ff2\n.text:0000000000405ff5\n.text:0000000000405ff8\n.text:0000000000405ffd\n.text:0000000000406002\n.text:0000000000406007\n.text:000000000040600a\n.text:000000000040600d\n.text:000000000040600e\n.text:0000000000406013\n.text:0000000000406017\n.text:000000000040601b\n.text:000000000040601f\n.text:0000000000406022\n.text:0000000000406026\n.text:0000000000406027\n.text:0000000000406029\n.text:000000000040602b\n.text:000000000040602d\n.text:000000000040602f\n.text:0000000000406030\n.text:0000000000406031\n'
p1490
tp1491
sS'strcmp'
p1492
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1493
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00611150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x00611150]\n'
p1495
S'ff 25 ba f7 20 00\n'
p1496
S'.plt:0000000000401990\n'
p1497
tp1498
sS'mktime_z'
p1499
(S'\n__stdcall mktime_z(timezone_t tz, tm * tm)\n'
p1500
V\u000atime_t mktime_z(timezone_t tz,tm *tm)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  time_t tVar3;\u000a  timezone_t tz_00;\u000a  tm *ptVar4;\u000a  time_t local_58;\u000a  tm local_50;\u000a  \u000a  if (tz == (timezone_t)0x0) {\u000a    tVar3 = (*(code *)PTR_timegm_006111d8)(tm);\u000a    return tVar3;\u000a  }\u000a  tz_00 = set_tz(tz);\u000a  if (tz_00 != (timezone_t)0x0) {\u000a    local_58 = rpl_mktime(tm);\u000a    if (((local_58 != -1) ||\u000a        ((ptVar4 = localtime_r(&local_58,&local_50), ptVar4 != (tm *)0x0 &&\u000a         (iVar2 = equal_tm(tm,(tm *)&local_50), iVar2 != 0)))) &&\u000a       (_Var1 = save_abbr(tz,tm), _Var1 == false)) {\u000a      local_58 = -1;\u000a    }\u000a    _Var1 = revert_tz(tz_00);\u000a    if (_Var1 != false) {\u000a      return local_58;\u000a    }\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p1501
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R15,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004098ef\nMOV RDI,RBX\nCALL 0x004096c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00409935\nMOV RDI,R15\nCALL 0x0040a610\nMOV qword ptr [RSP],RAX\nCMP RAX,-0x1\nJZ 0x00409900\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00409740\nTEST AL,AL\nJNZ 0x00409923\nMOV qword ptr [RSP],-0x1\nJMP 0x00409923\nMOV RDI,R15\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401aa0\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x004017a0\nTEST RAX,RAX\nJZ 0x00409923\nLEA RSI,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x00409950\nTEST EAX,EAX\nJNZ 0x004098d6\nMOV RDI,R14\nCALL 0x00409850\nTEST AL,AL\nJZ 0x00409935\nMOV RAX,qword ptr [RSP]\nJMP 0x0040993c\nMOV RAX,-0x1\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1502
S'41 57\n41 56\n53\n48 83 ec 40\n49 89 f7\n48 89 fb\n48 85 db\n74 3b\n48 89 df\ne8 04 fe ff ff\n49 89 c6\n4d 85 f6\n74 71\n4c 89 ff\ne8 44 0d 00 00\n48 89 04 24\n48 83 f8 ff\n74 2a\n48 89 df\n4c 89 fe\ne8 5f fe ff ff\n84 c0\n75 3e\n48 c7 04 24 ff ff ff ff\neb 34\n4c 89 ff\n48 83 c4 40\n5b\n41 5e\n41 5f\ne9 a0 81 ff ff\n48 89 e7\n48 8d 74 24 08\ne8 93 7e ff ff\n48 85 c0\n74 11\n48 8d 74 24 08\n4c 89 ff\ne8 31 00 00 00\n85 c0\n75 b3\n4c 89 f7\ne8 25 ff ff ff\n84 c0\n74 06\n48 8b 04 24\neb 07\n48 c7 c0 ff ff ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p1503
S'.text:00000000004098a0\n.text:00000000004098a2\n.text:00000000004098a4\n.text:00000000004098a5\n.text:00000000004098a9\n.text:00000000004098ac\n.text:00000000004098af\n.text:00000000004098b2\n.text:00000000004098b4\n.text:00000000004098b7\n.text:00000000004098bc\n.text:00000000004098bf\n.text:00000000004098c2\n.text:00000000004098c4\n.text:00000000004098c7\n.text:00000000004098cc\n.text:00000000004098d0\n.text:00000000004098d4\n.text:00000000004098d6\n.text:00000000004098d9\n.text:00000000004098dc\n.text:00000000004098e1\n.text:00000000004098e3\n.text:00000000004098e5\n.text:00000000004098ed\n.text:00000000004098ef\n.text:00000000004098f2\n.text:00000000004098f6\n.text:00000000004098f7\n.text:00000000004098f9\n.text:00000000004098fb\n.text:0000000000409900\n.text:0000000000409903\n.text:0000000000409908\n.text:000000000040990d\n.text:0000000000409910\n.text:0000000000409912\n.text:0000000000409917\n.text:000000000040991a\n.text:000000000040991f\n.text:0000000000409921\n.text:0000000000409923\n.text:0000000000409926\n.text:000000000040992b\n.text:000000000040992d\n.text:000000000040992f\n.text:0000000000409933\n.text:0000000000409935\n.text:000000000040993c\n.text:0000000000409940\n.text:0000000000409941\n.text:0000000000409943\n.text:0000000000409945\n'
p1504
tp1505
sS'set_custom_quoting'
p1506
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1507
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1508
S'TEST RDI,RDI\nMOV EAX,0x611480\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00405015\nTEST RDX,RDX\nJZ 0x00405015\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401770\n'
p1509
S'48 85 ff\nb8 80 14 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 55 c7 ff ff\n'
p1510
S'.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff8\n.text:0000000000404ffc\n.text:0000000000405002\n.text:0000000000405005\n.text:0000000000405007\n.text:000000000040500a\n.text:000000000040500c\n.text:0000000000405010\n.text:0000000000405014\n.text:0000000000405015\n.text:0000000000405016\n'
p1511
tp1512
sS'c_isalpha'
p1513
(S'\n__stdcall c_isalpha()\n'
p1514
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1515
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00409a6b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1516
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1517
S'.text:0000000000409a50\n.text:0000000000409a53\n.text:0000000000409a56\n.text:0000000000409a58\n.text:0000000000409a62\n.text:0000000000409a64\n.text:0000000000409a67\n.text:0000000000409a6a\n.text:0000000000409a6b\n.text:0000000000409a6d\n'
p1518
tp1519
sS'quotearg_custom_mem'
p1520
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1521
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1522
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00406290\n'
p1523
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1524
S'.text:0000000000406320\n.text:0000000000406323\n.text:0000000000406326\n.text:0000000000406329\n.text:000000000040632c\n.text:000000000040632e\n.text:0000000000406331\n'
p1525
tp1526
sS'rpl_calloc'
p1527
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1528
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00611148)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1529
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040925b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00409260\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00409260\nPUSH RAX\nCALL 0x00401780\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401980\n'
p1530
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 2f 85 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 15 87 ff ff\n'
p1531
S'.text:0000000000409220\n.text:0000000000409223\n.text:0000000000409228\n.text:000000000040922a\n.text:000000000040922d\n.text:0000000000409232\n.text:0000000000409234\n.text:0000000000409237\n.text:000000000040923b\n.text:000000000040923d\n.text:0000000000409240\n.text:0000000000409243\n.text:0000000000409246\n.text:0000000000409249\n.text:000000000040924b\n.text:000000000040924c\n.text:0000000000409251\n.text:0000000000409257\n.text:0000000000409259\n.text:000000000040925a\n.text:000000000040925b\n.text:0000000000409260\n.text:0000000000409263\n.text:0000000000409266\n'
p1532
tp1533
sS'memset'
p1534
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_00611110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x00611110]\n'
p1537
S'ff 25 fa f7 20 00\n'
p1538
S'.plt:0000000000401910\n'
p1539
tp1540
sS'getc_unlocked'
p1541
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1542
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00611078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1543
S'JMP qword ptr [0x00611078]\n'
p1544
S'ff 25 92 f8 20 00\n'
p1545
S'.plt:00000000004017e0\n'
p1546
tp1547
sS'getoptnum'
p1548
(S'\n__stdcall getoptnum(char * n_str, int * num, char * err)\n'
p1549
V\u000avoid getoptnum(char *n_str,int *num,char *err)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  char *err_00;\u000a  \u000a  iVar1 = xdectoimax(n_str,(long)(int)num,0x7fffffff,"",err_00);\u000a  *(int *)err = (int)iVar1;\u000a  return;\u000a}\u000a\u000a
p1550
S'PUSH RBX\nMOV RAX,RCX\nMOV RBX,RDX\nMOVSXD RSI,ESI\nMOV EDX,0x7fffffff\nMOV ECX,0x40c61d\nXOR R9D,R9D\nMOV R8,RAX\nCALL 0x00408880\nMOV dword ptr [RBX],EAX\nPOP RBX\nRET\n'
p1551
S'53\n48 89 c8\n48 89 d3\n48 63 f6\nba ff ff ff 7f\nb9 1d c6 40 00\n45 31 c9\n49 89 c0\ne8 81 61 00 00\n89 03\n5b\nc3\n'
p1552
S'.text:00000000004026e0\n.text:00000000004026e1\n.text:00000000004026e4\n.text:00000000004026e7\n.text:00000000004026ea\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026f7\n.text:00000000004026fa\n.text:00000000004026ff\n.text:0000000000402701\n.text:0000000000402702\n'
p1553
tp1554
sS'cleanup'
p1555
(S'\n__stdcall cleanup(EVP_PKEY_CTX * ctx)\n'
p1556
V\u000avoid cleanup(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  free(number_buff);\u000a  free(clump_buff);\u000a  free(column_vector);\u000a  free(line_vector);\u000a  free(end_vector);\u000a  free(buff);\u000a  return;\u000a}\u000a\u000a
p1557
S'PUSH RAX\nMOV RDI,qword ptr [0x006113d0]\nCALL 0x00401740\nMOV RDI,qword ptr [0x006113d8]\nCALL 0x00401740\nMOV RDI,qword ptr [0x006113e8]\nCALL 0x00401740\nMOV RDI,qword ptr [0x00611420]\nCALL 0x00401740\nMOV RDI,qword ptr [0x00611428]\nCALL 0x00401740\nMOV RDI,qword ptr [0x00611430]\nPOP RAX\nJMP 0x00401740\n'
p1558
S'50\n48 8b 3d 98 e9 20 00\ne8 03 ed ff ff\n48 8b 3d 94 e9 20 00\ne8 f7 ec ff ff\n48 8b 3d 98 e9 20 00\ne8 eb ec ff ff\n48 8b 3d c4 e9 20 00\ne8 df ec ff ff\n48 8b 3d c0 e9 20 00\ne8 d3 ec ff ff\n48 8b 3d bc e9 20 00\n58\ne9 c6 ec ff ff\n'
p1559
S'.text:0000000000402a30\n.text:0000000000402a31\n.text:0000000000402a38\n.text:0000000000402a3d\n.text:0000000000402a44\n.text:0000000000402a49\n.text:0000000000402a50\n.text:0000000000402a55\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a68\n.text:0000000000402a6d\n.text:0000000000402a74\n.text:0000000000402a75\n'
p1560
tp1561
sS'c_isascii'
p1562
(S'\n__stdcall c_isascii()\n'
p1563
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1564
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1565
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1566
S'.text:0000000000409a70\n.text:0000000000409a76\n.text:0000000000409a79\n'
p1567
tp1568
sS'print_files'
p1569
(S'\n__stdcall print_files(char * * av)\n'
p1570
V\u000avoid print_files(char **av)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uintmax_t uVar2;\u000a  \u000a  init_parameters();\u000a  _Var1 = init_fps((char **)((ulong)av & 0xffffffff));\u000a  if (_Var1 != false) {\u000a    if (storing_columns == 0) {\u000a      init_store_cols();\u000a    }\u000a    if (first_page_number < 2) {\u000a      uVar2 = 1;\u000a    }\u000a    else {\u000a      _Var1 = skip_to_page(first_page_number);\u000a      uVar2 = first_page_number;\u000a      if (_Var1 == false) {\u000a        return;\u000a      }\u000a    }\u000a    page_number = uVar2;\u000a    init_funcs();\u000a    line_number = line_count;\u000a    do {\u000a      _Var1 = print_page();\u000a    } while (_Var1 != false);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1571
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00402c50\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x00402e60\nTEST AL,AL\nJZ 0x00402a29\nMOV AL,byte ptr [0x00611379]\nTEST AL,AL\nJNZ 0x004029da\nCALL 0x00402fd0\nMOV RDI,qword ptr [0x00611370]\nCMP RDI,0x2\nJC 0x004029f9\nCALL 0x00403070\nTEST AL,AL\nJZ 0x00402a29\nMOV RAX,qword ptr [0x00611370]\nJMP 0x004029fe\nMOV EAX,0x1\nMOV qword ptr [0x006113b8],RAX\nCALL 0x004031e0\nMOV EAX,dword ptr [0x006112ac]\nMOV dword ptr [0x006113c0],EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x00403380\nTEST AL,AL\nJNZ 0x00402a20\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1572
S'55\n53\n50\n48 89 f3\n89 fd\ne8 93 02 00 00\n89 ef\n48 89 de\ne8 99 04 00 00\n84 c0\n74 5e\n8a 05 a8 e9 20 00\n84 c0\n75 05\ne8 f6 05 00 00\n48 8b 3d 8f e9 20 00\n48 83 ff 02\n72 12\ne8 84 06 00 00\n84 c0\n74 39\n48 8b 05 79 e9 20 00\neb 05\nb8 01 00 00 00\n48 89 05 b3 e9 20 00\ne8 d6 07 00 00\n8b 05 9c e8 20 00\n89 05 aa e9 20 00\n66 2e 0f 1f 84 00 00 00 00 00\ne8 5b 09 00 00\n84 c0\n75 f7\n48 83 c4 08\n5b\n5d\nc3\n'
p1573
S'.text:00000000004029b0\n.text:00000000004029b1\n.text:00000000004029b2\n.text:00000000004029b3\n.text:00000000004029b6\n.text:00000000004029b8\n.text:00000000004029bd\n.text:00000000004029bf\n.text:00000000004029c2\n.text:00000000004029c7\n.text:00000000004029c9\n.text:00000000004029cb\n.text:00000000004029d1\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029da\n.text:00000000004029e1\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029ec\n.text:00000000004029ee\n.text:00000000004029f0\n.text:00000000004029f7\n.text:00000000004029f9\n.text:00000000004029fe\n.text:0000000000402a05\n.text:0000000000402a0a\n.text:0000000000402a10\n.text:0000000000402a16\n.text:0000000000402a20\n.text:0000000000402a25\n.text:0000000000402a27\n.text:0000000000402a29\n.text:0000000000402a2d\n.text:0000000000402a2e\n.text:0000000000402a2f\n'
p1574
tp1575
sS'dup_safer'
p1576
(S'\n__stdcall dup_safer()\n'
p1577
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1578
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x004092f0\n'
p1579
S'31 f6\nba 03 00 00 00\n31 c0\ne9 22 12 00 00\n'
p1580
S'.text:00000000004080c0\n.text:00000000004080c2\n.text:00000000004080c7\n.text:00000000004080c9\n'
p1581
tp1582
sS'getenv_TZ'
p1583
(S'\n__stdcall getenv_TZ()\n'
p1584
V\u000achar * getenv_TZ(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = getenv("TZ");\u000a  return pcVar1;\u000a}\u000a\u000a
p1585
S'MOV EDI,0x40df5f\nJMP 0x00401730\n'
p1586
S'bf 5f df 40 00\ne9 86 7d ff ff\n'
p1587
S'.text:00000000004099a0\n.text:00000000004099a5\n'
p1588
tp1589
sS'__ctype_b_loc'
p1590
(S'\n__stdcall __ctype_b_loc()\n'
p1591
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00611250)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1592
S'JMP qword ptr [0x00611250]\n'
p1593
S'ff 25 ba f6 20 00\n'
p1594
S'.plt:0000000000401b90\n'
p1595
tp1596
sS'fdadvise'
p1597
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1598
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_00611128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1599
S'JMP 0x00401940\n'
p1600
S'e9 5b ce ff ff\n'
p1601
S'.text:0000000000404ae0\n'
p1602
tp1603
sS'quotearg'
p1604
(S'\n__stdcall quotearg(char * arg)\n'
p1605
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1606
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00405e70\n'
p1607
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1608
S'.text:0000000000406050\n.text:0000000000406053\n.text:0000000000406055\n.text:0000000000406058\n'
p1609
tp1610
sS'equal_tm'
p1611
(S'\n__stdcall equal_tm(tm * a, tm * b)\n'
p1612
V\u000aint equal_tm(tm *a,tm *b)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  uint uVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  uint uVar12;\u000a  _Bool _Var13;\u000a  \u000a  uVar1 = b->tm_sec;\u000a  uVar2 = b->tm_min;\u000a  uVar3 = a->tm_sec;\u000a  uVar4 = a->tm_min;\u000a  uVar5 = b->tm_hour;\u000a  uVar6 = a->tm_hour;\u000a  uVar7 = b->tm_mday;\u000a  uVar8 = a->tm_mday;\u000a  uVar9 = b->tm_mon;\u000a  uVar10 = a->tm_mon;\u000a  uVar11 = b->tm_year;\u000a  uVar12 = a->tm_year;\u000a  _Var13 = isdst_differ();\u000a  return (int)(uint)(((uint)_Var13 |\u000a                     uVar11 ^ uVar12 | uVar9 ^ uVar10 |\u000a                     uVar7 ^ uVar8 | uVar5 ^ uVar6 | uVar2 ^ uVar4 | uVar1 ^ uVar3) == 0);\u000a}\u000a\u000a
p1613
S'PUSH RBX\nMOV EAX,dword ptr [RSI]\nMOV ECX,dword ptr [RSI + 0x4]\nXOR EAX,dword ptr [RDI]\nXOR ECX,dword ptr [RDI + 0x4]\nOR ECX,EAX\nMOV EAX,dword ptr [RSI + 0x8]\nXOR EAX,dword ptr [RDI + 0x8]\nMOV EDX,dword ptr [RSI + 0xc]\nXOR EDX,dword ptr [RDI + 0xc]\nOR EDX,EAX\nOR EDX,ECX\nMOV EAX,dword ptr [RSI + 0x10]\nXOR EAX,dword ptr [RDI + 0x10]\nMOV EBX,dword ptr [RSI + 0x14]\nXOR EBX,dword ptr [RDI + 0x14]\nOR EBX,EAX\nOR EBX,EDX\nMOV EDI,dword ptr [RDI + 0x20]\nMOV ESI,dword ptr [RSI + 0x20]\nCALL 0x00409a00\nMOVZX ECX,AL\nXOR EAX,EAX\nOR ECX,EBX\nSETZ AL\nPOP RBX\nRET\n'
p1614
S'53\n8b 06\n8b 4e 04\n33 07\n33 4f 04\n09 c1\n8b 46 08\n33 47 08\n8b 56 0c\n33 57 0c\n09 c2\n09 ca\n8b 46 10\n33 47 10\n8b 5e 14\n33 5f 14\n09 c3\n09 d3\n8b 7f 20\n8b 76 20\ne8 78 00 00 00\n0f b6 c8\n31 c0\n09 d9\n0f 94 c0\n5b\nc3\n'
p1615
S'.text:0000000000409950\n.text:0000000000409951\n.text:0000000000409953\n.text:0000000000409956\n.text:0000000000409958\n.text:000000000040995b\n.text:000000000040995d\n.text:0000000000409960\n.text:0000000000409963\n.text:0000000000409966\n.text:0000000000409969\n.text:000000000040996b\n.text:000000000040996d\n.text:0000000000409970\n.text:0000000000409973\n.text:0000000000409976\n.text:0000000000409979\n.text:000000000040997b\n.text:000000000040997d\n.text:0000000000409980\n.text:0000000000409983\n.text:0000000000409988\n.text:000000000040998b\n.text:000000000040998d\n.text:000000000040998f\n.text:0000000000409992\n.text:0000000000409993\n'
p1616
tp1617
sS'_start'
p1618
(S'\n__stdcall _start()\n'
p1619
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00610ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1620
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x40a6d0\nMOV RCX,0x40a660\nMOV RDI,0x401cb0\nCALL qword ptr [0x00610ff0]\nHLT\n'
p1621
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 d0 a6 40 00\n48 c7 c1 60 a6 40 00\n48 c7 c7 b0 1c 40 00\nff 15 16 f4 20 00\nf4\n'
p1622
S'.text:0000000000401bb0\n.text:0000000000401bb2\n.text:0000000000401bb5\n.text:0000000000401bb6\n.text:0000000000401bb9\n.text:0000000000401bbd\n.text:0000000000401bbe\n.text:0000000000401bbf\n.text:0000000000401bc6\n.text:0000000000401bcd\n.text:0000000000401bd4\n.text:0000000000401bda\n'
p1623
tp1624
sS'c_iscntrl'
p1625
(S'\n__stdcall c_iscntrl()\n'
p1626
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1627
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00409a98\nRET\nCMP EDI,0x7f\nJZ 0x00409a97\nXOR EAX,EAX\nRET\n'
p1628
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1629
S'.text:0000000000409a90\n.text:0000000000409a92\n.text:0000000000409a95\n.text:0000000000409a97\n.text:0000000000409a98\n.text:0000000000409a9b\n.text:0000000000409a9d\n.text:0000000000409a9f\n'
p1630
tp1631
sS'c_isblank'
p1632
(S'\n__stdcall c_isblank()\n'
p1633
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1634
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1635
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1636
S'.text:0000000000409a80\n.text:0000000000409a83\n.text:0000000000409a86\n.text:0000000000409a89\n.text:0000000000409a8c\n.text:0000000000409a8e\n'
p1637
tp1638
sS'atexit'
p1639
(S'\n__stdcall atexit(__func * __func)\n'
p1640
V\u000a/* WARNING: Removing unreachable block (ram,0x0040a700) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00611218)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1641
S'MOV RAX,0x611268\nTEST RAX,RAX\nJZ 0x0040a700\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401b20\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401b20\n'
p1642
S'48 c7 c0 68 12 61 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a 74 ff ff\n31 d2\n31 f6\ne9 17 74 ff ff\n'
p1643
S'.text:000000000040a6e0\n.text:000000000040a6e7\n.text:000000000040a6ea\n.text:000000000040a6ec\n.text:000000000040a6ef\n.text:000000000040a6f1\n.text:000000000040a700\n.text:000000000040a702\n.text:000000000040a704\n'
p1644
tp1645
sS'fdopen'
p1646
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006111c0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x006111c0]\n'
p1649
S'ff 25 4a f7 20 00\n'
p1650
S'.plt:0000000000401a70\n'
p1651
tp1652
sS'error'
p1653
(S'\n__stdcall error()\n'
p1654
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006111e8)();\u000a  return;\u000a}\u000a\u000a
p1655
S'JMP qword ptr [0x006111e8]\n'
p1656
S'ff 25 22 f7 20 00\n'
p1657
S'.plt:0000000000401ac0\n'
p1658
tp1659
sS'isdst_differ'
p1660
(S'\n__stdcall isdst_differ()\n'
p1661
V\u000aint isdst_differ(void)\u000a\u000a{\u000a  uint in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (int)(uint)(-1 < (int)(in_ESI | in_EDI) && (in_ESI == 0) != (in_EDI == 0));\u000a}\u000a\u000a
p1662
S'TEST EDI,EDI\nSETZ AL\nTEST ESI,ESI\nSETZ CL\nXOR CL,AL\nOR ESI,EDI\nSETNS AL\nAND AL,CL\nMOVZX EAX,AL\nRET\n'
p1663
S'85 ff\n0f 94 c0\n85 f6\n0f 94 c1\n30 c1\n09 fe\n0f 99 c0\n20 c8\n0f b6 c0\nc3\n'
p1664
S'.text:000000000040a5c0\n.text:000000000040a5c2\n.text:000000000040a5c5\n.text:000000000040a5c7\n.text:000000000040a5ca\n.text:000000000040a5cc\n.text:000000000040a5ce\n.text:000000000040a5d1\n.text:000000000040a5d3\n.text:000000000040a5d6\n'
p1665
tp1666
sS'strcaseeq6'
p1667
(S'\n__stdcall strcaseeq6()\n'
p1668
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1669
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00406712\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406719\nJMP 0x0040672e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040672e\nTEST BPL,BPL\nJZ 0x00406729\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00406740\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1670
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 34 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1671
S'.text:00000000004066f0\n.text:00000000004066f1\n.text:00000000004066f2\n.text:00000000004066f3\n.text:00000000004066f5\n.text:00000000004066f8\n.text:00000000004066fa\n.text:00000000004066ff\n.text:0000000000406703\n.text:0000000000406705\n.text:0000000000406707\n.text:000000000040670a\n.text:000000000040670c\n.text:000000000040670e\n.text:0000000000406710\n.text:0000000000406712\n.text:0000000000406714\n.text:0000000000406717\n.text:0000000000406719\n.text:000000000040671c\n.text:000000000040671e\n.text:0000000000406721\n.text:0000000000406725\n.text:0000000000406726\n.text:0000000000406727\n.text:0000000000406729\n.text:000000000040672e\n.text:0000000000406732\n.text:0000000000406733\n.text:0000000000406734\n'
p1672
tp1673
sS'strcaseeq5'
p1674
(S'\n__stdcall strcaseeq5()\n'
p1675
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1676
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004066c6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004066cd\nJMP 0x004066e4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004066e4\nTEST BPL,BPL\nJZ 0x004066df\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004066f0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1677
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 34 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1678
S'.text:00000000004066a0\n.text:00000000004066a1\n.text:00000000004066a3\n.text:00000000004066a4\n.text:00000000004066a7\n.text:00000000004066a9\n.text:00000000004066ac\n.text:00000000004066ae\n.text:00000000004066b3\n.text:00000000004066b7\n.text:00000000004066b9\n.text:00000000004066bb\n.text:00000000004066be\n.text:00000000004066c0\n.text:00000000004066c2\n.text:00000000004066c4\n.text:00000000004066c6\n.text:00000000004066c8\n.text:00000000004066cb\n.text:00000000004066cd\n.text:00000000004066d0\n.text:00000000004066d2\n.text:00000000004066d6\n.text:00000000004066d9\n.text:00000000004066da\n.text:00000000004066dc\n.text:00000000004066dd\n.text:00000000004066df\n.text:00000000004066e4\n.text:00000000004066e5\n.text:00000000004066e7\n.text:00000000004066e8\n'
p1679
tp1680
sS'strcaseeq7'
p1681
(S'\n__stdcall strcaseeq7()\n'
p1682
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1683
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00406762\nTEST ECX,0xffffffdf\nJNZ 0x00406766\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040676a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1684
S'53\n48 89 fb\n31 ff\ne8 d5 33 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1685
S'.text:0000000000406740\n.text:0000000000406741\n.text:0000000000406744\n.text:0000000000406746\n.text:000000000040674b\n.text:000000000040674f\n.text:0000000000406751\n.text:0000000000406753\n.text:0000000000406759\n.text:000000000040675b\n.text:0000000000406760\n.text:0000000000406761\n.text:0000000000406762\n.text:0000000000406764\n.text:0000000000406766\n.text:0000000000406768\n.text:0000000000406769\n.text:000000000040676a\n.text:000000000040676f\n.text:0000000000406770\n'
p1686
tp1687
sS'add_line_number'
p1688
(S'\n__stdcall add_line_number(COLUMN * p)\n'
p1689
V\u000avoid add_line_number(COLUMN *p)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  char *pcVar3;\u000a  \u000a  iVar2 = __sprintf_chk(number_buff,1,0xffffffffffffffff,&DAT_0040c691,(ulong)(uint)chars_per_number\u000a                        ,(ulong)(uint)line_number);\u000a  line_number = line_number + 1;\u000a  if (0 < chars_per_number) {\u000a    pcVar3 = number_buff + (long)(iVar2 - chars_per_number);\u000a    iVar2 = chars_per_number + 1;\u000a    do {\u000a      cVar1 = *pcVar3;\u000a      pcVar3 = pcVar3 + 1;\u000a      (*p->char_func)(cVar1);\u000a      iVar2 = iVar2 + -1;\u000a    } while (1 < iVar2);\u000a  }\u000a  if (columns < 2) {\u000a    (*p->char_func)(number_separator);\u000a    if (number_separator == '\u005ct') {\u000a      output_position =\u000a           (chars_per_output_tab + output_position) - output_position % chars_per_output_tab;\u000a    }\u000a  }\u000a  else {\u000a    if (number_separator == '\u005ct') {\u000a      if (chars_per_number < number_width) {\u000a        iVar2 = (number_width + 1) - chars_per_number;\u000a        do {\u000a          (*p->char_func)(' ');\u000a          iVar2 = iVar2 + -1;\u000a        } while (1 < iVar2);\u000a      }\u000a    }\u000a    else {\u000a      (*p->char_func)(number_separator);\u000a    }\u000a  }\u000a  if ((truncate_lines == 1) && (parallel_files == 0)) {\u000a    input_position = input_position + number_width;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1690
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV RDI,qword ptr [0x006113d0]\nMOV R8D,dword ptr [0x00611288]\nMOV R9D,dword ptr [0x006113c0]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40c691\nXOR EAX,EAX\nCALL 0x00401ba0\nINC dword ptr [0x006113c0]\nMOV EBP,dword ptr [0x00611288]\nTEST EBP,EBP\nJLE 0x00404551\nSUB EAX,EBP\nMOVSXD RBX,EAX\nADD RBX,qword ptr [0x006113d0]\nINC EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX]\nINC RBX\nCALL qword ptr [R14 + 0x20]\nDEC EBP\nCMP EBP,0x1\nJG 0x00404540\nMOV AL,byte ptr [0x00611284]\nCMP dword ptr [0x006112a8],0x2\nJL 0x00404592\nCMP AL,0x9\nJNZ 0x004045c8\nMOV EBX,dword ptr [0x006113c8]\nMOV EAX,dword ptr [0x00611288]\nCMP EBX,EAX\nJLE 0x004045cf\nINC EBX\nSUB EBX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDI,0x20\nCALL qword ptr [R14 + 0x20]\nDEC EBX\nCMP EBX,0x1\nJG 0x00404580\nJMP 0x004045cf\nMOVSX EDI,AL\nCALL qword ptr [R14 + 0x20]\nCMP byte ptr [0x00611284],0x9\nJNZ 0x004045cf\nMOV ECX,dword ptr [0x00611454]\nMOV ESI,dword ptr [0x0061127c]\nMOV EAX,ECX\nCDQ\nIDIV ESI\nADD ESI,ECX\nSUB ESI,EDX\nMOV dword ptr [0x00611454],ESI\nCMP byte ptr [0x006113af],0x1\nJZ 0x004045d8\nJMP 0x004045ee\nMOVSX EDI,AL\nCALL qword ptr [R14 + 0x20]\nCMP byte ptr [0x006113af],0x1\nJNZ 0x004045ee\nMOV AL,byte ptr [0x0061139a]\nTEST AL,AL\nJNZ 0x004045ee\nMOV EAX,dword ptr [0x006113c8]\nADD dword ptr [0x0061145c],EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1691
S'55\n41 56\n53\n49 89 fe\n48 8b 3d e2 ce 20 00\n44 8b 05 93 cd 20 00\n44 8b 0d c4 ce 20 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 91 c6 40 00\n31 c0\ne8 8c d6 ff ff\nff 05 a6 ce 20 00\n8b 2d 68 cd 20 00\n85 ed\n7e 2d\n29 e8\n48 63 d8\n48 03 1d a0 ce 20 00\nff c5\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 3b\n48 ff c3\n41 ff 56 20\nff cd\n83 fd 01\n7f ef\n8a 05 2d cd 20 00\n83 3d 4a cd 20 00 02\n7c 32\n3c 09\n75 64\n8b 1d 5e ce 20 00\n8b 05 18 cd 20 00\n39 c3\n7e 5b\nff c3\n29 c3\n0f 1f 84 00 00 00 00 00\nbf 20 00 00 00\n41 ff 56 20\nff cb\n83 fb 01\n7f f0\neb 3d\n0f be f8\n41 ff 56 20\n80 3d e4 cc 20 00 09\n75 2d\n8b 0d ac ce 20 00\n8b 35 ce cc 20 00\n89 c8\n99\nf7 fe\n01 ce\n29 d6\n89 35 97 ce 20 00\n80 3d eb cd 20 00 01\n74 12\neb 26\n0f be f8\n41 ff 56 20\n80 3d d9 cd 20 00 01\n75 16\n8a 05 bc cd 20 00\n84 c0\n75 0c\n8b 05 e0 cd 20 00\n01 05 6e ce 20 00\n5b\n41 5e\n5d\nc3\n'
p1692
S'.text:00000000004044e0\n.text:00000000004044e1\n.text:00000000004044e3\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044ee\n.text:00000000004044f5\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404508\n.text:000000000040450d\n.text:000000000040450f\n.text:0000000000404514\n.text:000000000040451a\n.text:0000000000404520\n.text:0000000000404522\n.text:0000000000404524\n.text:0000000000404526\n.text:0000000000404529\n.text:0000000000404530\n.text:0000000000404532\n.text:0000000000404540\n.text:0000000000404543\n.text:0000000000404546\n.text:000000000040454a\n.text:000000000040454c\n.text:000000000040454f\n.text:0000000000404551\n.text:0000000000404557\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404564\n.text:000000000040456a\n.text:0000000000404570\n.text:0000000000404572\n.text:0000000000404574\n.text:0000000000404576\n.text:0000000000404578\n.text:0000000000404580\n.text:0000000000404585\n.text:0000000000404589\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404590\n.text:0000000000404592\n.text:0000000000404595\n.text:0000000000404599\n.text:00000000004045a0\n.text:00000000004045a2\n.text:00000000004045a8\n.text:00000000004045ae\n.text:00000000004045b0\n.text:00000000004045b1\n.text:00000000004045b3\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045bd\n.text:00000000004045c4\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045cb\n.text:00000000004045cf\n.text:00000000004045d6\n.text:00000000004045d8\n.text:00000000004045de\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e8\n.text:00000000004045ee\n.text:00000000004045ef\n.text:00000000004045f1\n.text:00000000004045f2\n'
p1693
tp1694
sS'emit_mandatory_arg_note'
p1695
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1696
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1697
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40c6f4\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x00611328]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401960\n'
p1698
S'50\n31 ff\nbe f4 c6 40 00\nba 05 00 00 00\ne8 5e ed ff ff\n48 8b 35 1f e8 20 00\n48 89 c7\n58\ne9 4e ee ff ff\n'
p1699
S'.text:0000000000402af0\n.text:0000000000402af1\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afd\n.text:0000000000402b02\n.text:0000000000402b09\n.text:0000000000402b0c\n.text:0000000000402b0d\n'
p1700
tp1701
sS'strcaseeq0'
p1702
(S'\n__stdcall strcaseeq0()\n'
p1703
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00406475\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040647c\nJMP 0x004064b0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004064b0\nTEST BPL,BPL\nJZ 0x004064ab\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004064c0\nJMP 0x004064b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1705
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 36 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1706
S'.text:0000000000406440\n.text:0000000000406441\n.text:0000000000406443\n.text:0000000000406445\n.text:0000000000406447\n.text:0000000000406449\n.text:000000000040644a\n.text:000000000040644b\n.text:000000000040644e\n.text:0000000000406451\n.text:0000000000406454\n.text:0000000000406457\n.text:0000000000406459\n.text:000000000040645c\n.text:000000000040645e\n.text:0000000000406463\n.text:0000000000406466\n.text:0000000000406468\n.text:000000000040646a\n.text:000000000040646d\n.text:000000000040646f\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406475\n.text:0000000000406477\n.text:000000000040647a\n.text:000000000040647c\n.text:000000000040647f\n.text:0000000000406481\n.text:0000000000406485\n.text:000000000040648a\n.text:000000000040648d\n.text:0000000000406491\n.text:0000000000406495\n.text:0000000000406499\n.text:000000000040649d\n.text:00000000004064a1\n.text:00000000004064a4\n.text:00000000004064a9\n.text:00000000004064ab\n.text:00000000004064b0\n.text:00000000004064b4\n.text:00000000004064b5\n.text:00000000004064b7\n.text:00000000004064b9\n.text:00000000004064bb\n.text:00000000004064bd\n.text:00000000004064be\n'
p1707
tp1708
sS'get_stat_mtime'
p1709
(S'\n__stdcall get_stat_mtime(stat * st)\n'
p1710
V\u000atimespec get_stat_mtime(stat *st)\u000a\u000a{\u000a  return st->st_mtim;\u000a}\u000a\u000a
p1711
S'MOV RAX,qword ptr [RDI + 0x58]\nMOV RDX,qword ptr [RDI + 0x60]\nRET\n'
p1712
S'48 8b 47 58\n48 8b 57 60\nc3\n'
p1713
S'.text:00000000004067e0\n.text:00000000004067e4\n.text:00000000004067e8\n'
p1714
tp1715
sS'strcaseeq2'
p1716
(S'\n__stdcall strcaseeq2()\n'
p1717
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1718
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00406586\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040658d\nJMP 0x004065ba\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004065ba\nTEST BPL,BPL\nJZ 0x004065b5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004065d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1719
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 35 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1720
S'.text:0000000000406550\n.text:0000000000406551\n.text:0000000000406553\n.text:0000000000406555\n.text:0000000000406557\n.text:0000000000406559\n.text:000000000040655a\n.text:000000000040655b\n.text:000000000040655e\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406567\n.text:0000000000406569\n.text:000000000040656c\n.text:000000000040656e\n.text:0000000000406573\n.text:0000000000406577\n.text:0000000000406579\n.text:000000000040657b\n.text:000000000040657e\n.text:0000000000406580\n.text:0000000000406582\n.text:0000000000406584\n.text:0000000000406586\n.text:0000000000406588\n.text:000000000040658b\n.text:000000000040658d\n.text:0000000000406590\n.text:0000000000406592\n.text:0000000000406596\n.text:000000000040659a\n.text:000000000040659e\n.text:00000000004065a2\n.text:00000000004065a5\n.text:00000000004065a9\n.text:00000000004065aa\n.text:00000000004065ac\n.text:00000000004065ae\n.text:00000000004065b0\n.text:00000000004065b2\n.text:00000000004065b3\n.text:00000000004065b5\n.text:00000000004065ba\n.text:00000000004065be\n.text:00000000004065bf\n.text:00000000004065c1\n.text:00000000004065c3\n.text:00000000004065c5\n.text:00000000004065c7\n.text:00000000004065c8\n'
p1721
tp1722
sS'strcaseeq1'
p1723
(S'\n__stdcall strcaseeq1()\n'
p1724
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1725
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004064fd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406504\nJMP 0x00406537\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406537\nTEST BPL,BPL\nJZ 0x00406532\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406550\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1726
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 36 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1727
S'.text:00000000004064c0\n.text:00000000004064c1\n.text:00000000004064c3\n.text:00000000004064c5\n.text:00000000004064c7\n.text:00000000004064c9\n.text:00000000004064ca\n.text:00000000004064cb\n.text:00000000004064d0\n.text:00000000004064d3\n.text:00000000004064d6\n.text:00000000004064d9\n.text:00000000004064db\n.text:00000000004064de\n.text:00000000004064e3\n.text:00000000004064e5\n.text:00000000004064ea\n.text:00000000004064ee\n.text:00000000004064f0\n.text:00000000004064f2\n.text:00000000004064f5\n.text:00000000004064f7\n.text:00000000004064f9\n.text:00000000004064fb\n.text:00000000004064fd\n.text:00000000004064ff\n.text:0000000000406502\n.text:0000000000406504\n.text:0000000000406507\n.text:0000000000406509\n.text:000000000040650d\n.text:0000000000406511\n.text:0000000000406515\n.text:000000000040651b\n.text:000000000040651f\n.text:0000000000406522\n.text:0000000000406526\n.text:0000000000406527\n.text:0000000000406529\n.text:000000000040652b\n.text:000000000040652d\n.text:000000000040652f\n.text:0000000000406530\n.text:0000000000406532\n.text:0000000000406537\n.text:000000000040653b\n.text:000000000040653c\n.text:000000000040653e\n.text:0000000000406540\n.text:0000000000406542\n.text:0000000000406544\n.text:0000000000406545\n'
p1728
tp1729
sS'strcaseeq4'
p1730
(S'\n__stdcall strcaseeq4()\n'
p1731
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1732
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040666c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406673\nJMP 0x00406694\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406694\nTEST BPL,BPL\nJZ 0x0040668f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004066a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1733
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 34 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1734
S'.text:0000000000406640\n.text:0000000000406641\n.text:0000000000406643\n.text:0000000000406645\n.text:0000000000406646\n.text:0000000000406647\n.text:000000000040664a\n.text:000000000040664d\n.text:000000000040664f\n.text:0000000000406652\n.text:0000000000406654\n.text:0000000000406659\n.text:000000000040665d\n.text:000000000040665f\n.text:0000000000406661\n.text:0000000000406664\n.text:0000000000406666\n.text:0000000000406668\n.text:000000000040666a\n.text:000000000040666c\n.text:000000000040666e\n.text:0000000000406671\n.text:0000000000406673\n.text:0000000000406676\n.text:0000000000406678\n.text:000000000040667c\n.text:0000000000406680\n.text:0000000000406683\n.text:0000000000406687\n.text:0000000000406688\n.text:000000000040668a\n.text:000000000040668c\n.text:000000000040668d\n.text:000000000040668f\n.text:0000000000406694\n.text:0000000000406698\n.text:0000000000406699\n.text:000000000040669b\n.text:000000000040669d\n.text:000000000040669e\n'
p1735
tp1736
sS'guess_time_tm'
p1737
(S'\n__stdcall guess_time_tm(long_int year, long_int yday, time_t * t, tm * tp)\n'
p1738
V\u000atime_t guess_time_tm(long_int year,long_int yday,time_t *t,tm *tp)\u000a\u000a{\u000a  int iVar1;\u000a  time_t b;\u000a  long lVar2;\u000a  time_t a;\u000a  int min0;\u000a  time_t *in_R9;\u000a  long in_stack_00000008;\u000a  \u000a  if (in_stack_00000008 == 0) {\u000a    a = *in_R9;\u000a  }\u000a  else {\u000a    b = ydhms_diff(year,yday,(int)t,(int)tp,min0,*(int *)(in_stack_00000008 + 0x14));\u000a    a = *in_R9;\u000a    iVar1 = time_t_add_ok(a,b);\u000a    if (iVar1 != 0) {\u000a      return a + b;\u000a    }\u000a  }\u000a  if (a < 0) {\u000a    lVar2 = -0x8000000000000000;\u000a    if (a < -0x7ffffffffffffffe) {\u000a      lVar2 = a + 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar2 = a + -1;\u000a    if (a < 0x7ffffffffffffffe) {\u000a      lVar2 = 0x7fffffffffffffff;\u000a    }\u000a  }\u000a  return lVar2;\u000a}\u000a\u000a
p1739
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,R9\nMOV RAX,qword ptr [RSP + 0x20]\nTEST RAX,RAX\nJZ 0x0040a4ac\nMOV R9D,dword ptr [RAX + 0x14]\nMOV R10D,dword ptr [RAX + 0x1c]\nMOV R11D,dword ptr [RAX + 0x8]\nMOV EBX,dword ptr [RAX]\nMOV EAX,dword ptr [RAX + 0x4]\nPUSH RBX\nPUSH RAX\nPUSH R11\nPUSH R10\nCALL 0x0040a350\nADD RSP,0x20\nMOV R14,RAX\nMOV RBX,qword ptr [R15]\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040a620\nTEST EAX,EAX\nJZ 0x0040a4af\nADD RBX,R14\nJMP 0x0040a4e5\nMOV RBX,qword ptr [R15]\nMOV RAX,0x7ffffffffffffffd\nTEST RBX,RBX\nJS 0x0040a4cf\nCMP RBX,RAX\nLEA RCX,[RAX + 0x2]\nLEA RAX,[RBX + -0x1]\nCMOVLE RAX,RCX\nJMP 0x0040a4e8\nLEA RCX,[RAX + 0x5]\nLEA RDX,[RBX + 0x1]\nADD RAX,0x3\nCMP RBX,RCX\nCMOVL RAX,RDX\nMOV RBX,RAX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1740
S'41 57\n41 56\n53\n4d 89 cf\n48 8b 44 24 20\n48 85 c0\n74 3a\n44 8b 48 14\n44 8b 50 1c\n44 8b 58 08\n8b 18\n8b 40 04\n53\n50\n41 53\n41 52\ne8 c2 fe ff ff\n48 83 c4 20\n49 89 c6\n49 8b 1f\n48 89 df\n4c 89 f6\ne8 7d 01 00 00\n85 c0\n74 08\n4c 01 f3\neb 39\n49 8b 1f\n48 b8 fd ff ff ff ff ff ff 7f\n48 85 db\n78 11\n48 39 c3\n48 8d 48 02\n48 8d 43 ff\n48 0f 4e c1\neb 19\n48 8d 48 05\n48 8d 53 01\n48 83 c0 03\n48 39 cb\n48 0f 4c c2\n48 89 c3\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1741
S'.text:000000000040a460\n.text:000000000040a462\n.text:000000000040a464\n.text:000000000040a465\n.text:000000000040a468\n.text:000000000040a46d\n.text:000000000040a470\n.text:000000000040a472\n.text:000000000040a476\n.text:000000000040a47a\n.text:000000000040a47e\n.text:000000000040a480\n.text:000000000040a483\n.text:000000000040a484\n.text:000000000040a485\n.text:000000000040a487\n.text:000000000040a489\n.text:000000000040a48e\n.text:000000000040a492\n.text:000000000040a495\n.text:000000000040a498\n.text:000000000040a49b\n.text:000000000040a49e\n.text:000000000040a4a3\n.text:000000000040a4a5\n.text:000000000040a4a7\n.text:000000000040a4aa\n.text:000000000040a4ac\n.text:000000000040a4af\n.text:000000000040a4b9\n.text:000000000040a4bc\n.text:000000000040a4be\n.text:000000000040a4c1\n.text:000000000040a4c5\n.text:000000000040a4c9\n.text:000000000040a4cd\n.text:000000000040a4cf\n.text:000000000040a4d3\n.text:000000000040a4d7\n.text:000000000040a4db\n.text:000000000040a4de\n.text:000000000040a4e2\n.text:000000000040a4e5\n.text:000000000040a4e8\n.text:000000000040a4e9\n.text:000000000040a4eb\n.text:000000000040a4ed\n'
p1742
tp1743
sS'strcaseeq3'
p1744
(S'\n__stdcall strcaseeq3()\n'
p1745
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1746
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00409b20\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00406600\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406607\nJMP 0x0040662a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040662a\nTEST BPL,BPL\nJZ 0x00406625\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406640\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1747
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 35 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1748
S'.text:00000000004065d0\n.text:00000000004065d1\n.text:00000000004065d3\n.text:00000000004065d5\n.text:00000000004065d7\n.text:00000000004065d8\n.text:00000000004065db\n.text:00000000004065de\n.text:00000000004065e1\n.text:00000000004065e3\n.text:00000000004065e6\n.text:00000000004065e8\n.text:00000000004065ed\n.text:00000000004065f1\n.text:00000000004065f3\n.text:00000000004065f5\n.text:00000000004065f8\n.text:00000000004065fa\n.text:00000000004065fc\n.text:00000000004065fe\n.text:0000000000406600\n.text:0000000000406602\n.text:0000000000406605\n.text:0000000000406607\n.text:000000000040660a\n.text:000000000040660c\n.text:0000000000406610\n.text:0000000000406614\n.text:0000000000406618\n.text:000000000040661b\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406620\n.text:0000000000406622\n.text:0000000000406623\n.text:0000000000406625\n.text:000000000040662a\n.text:000000000040662b\n.text:000000000040662d\n.text:000000000040662f\n.text:0000000000406631\n.text:0000000000406632\n'
p1749
tp1750
sS'register_tm_clones'
p1751
(S'\n__stdcall register_tm_clones()\n'
p1752
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c43) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c4d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1753
S'MOV ESI,0x611318\nPUSH RBP\nSUB RSI,0x611318\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401c58\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c58\nPOP RBP\nMOV EDI,0x611318\nJMP RAX\nPOP RBP\nRET\n'
p1754
S'be 18 13 61 00\n55\n48 81 ee 18 13 61 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 18 13 61 00\nff e0\n5d\nc3\n'
p1755
S'.text:0000000000401c20\n.text:0000000000401c25\n.text:0000000000401c26\n.text:0000000000401c2d\n.text:0000000000401c31\n.text:0000000000401c34\n.text:0000000000401c37\n.text:0000000000401c3b\n.text:0000000000401c3e\n.text:0000000000401c41\n.text:0000000000401c43\n.text:0000000000401c48\n.text:0000000000401c4b\n.text:0000000000401c4d\n.text:0000000000401c4e\n.text:0000000000401c53\n.text:0000000000401c58\n.text:0000000000401c59\n'
p1756
tp1757
sS'c_islower'
p1758
(S'\n__stdcall c_islower()\n'
p1759
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1760
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1761
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1762
S'.text:0000000000409ac0\n.text:0000000000409ac3\n.text:0000000000409ac6\n.text:0000000000409ac9\n'
p1763
tp1764
sS'fwrite'
p1765
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1766
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00611228)();\u000a  return sVar1;\u000a}\u000a\u000a
p1767
S'JMP qword ptr [0x00611228]\n'
p1768
S'ff 25 e2 f6 20 00\n'
p1769
S'.plt:0000000000401b40\n'
p1770
tp1771
sS'rpl_mktime'
p1772
(S'\n__stdcall rpl_mktime(tm * tp)\n'
p1773
V\u000atime_t rpl_mktime(tm *tp)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = mktime_internal(tp,localtime_r,&localtime_offset);\u000a  return tVar1;\u000a}\u000a\u000a
p1774
S'MOV ESI,0x4017a0\nMOV EDX,0x6115d0\nJMP 0x00409f10\n'
p1775
S'be a0 17 40 00\nba d0 15 61 00\ne9 f1 f8 ff ff\n'
p1776
S'.text:000000000040a610\n.text:000000000040a615\n.text:000000000040a61a\n'
p1777
tp1778
sS'__do_global_dtors_aux'
p1779
(S'\n__stdcall __do_global_dtors_aux()\n'
p1780
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1781
S'CMP byte ptr [0x00611368],0x0\nJNZ 0x00401c7a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401be0\nPOP RBP\nMOV byte ptr [0x00611368],0x1\nRET\n'
p1782
S'80 3d 01 f7 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ee f6 20 00 01\nf3 c3\n'
p1783
S'.text:0000000000401c60\n.text:0000000000401c67\n.text:0000000000401c69\n.text:0000000000401c6a\n.text:0000000000401c6d\n.text:0000000000401c72\n.text:0000000000401c73\n.text:0000000000401c7a\n'
p1784
tp1785
sS'c_isprint'
p1786
(S'\n__stdcall c_isprint()\n'
p1787
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1788
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1789
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1790
S'.text:0000000000409ad0\n.text:0000000000409ad3\n.text:0000000000409ad6\n.text:0000000000409ad9\n'
p1791
tp1792
sS'_fini'
p1793
(S'\n__stdcall _fini()\n'
p1794
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1795
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1796
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1797
S'.fini:000000000040a720\n.fini:000000000040a724\n.fini:000000000040a728\n'
p1798
tp1799
sS'iso_week_days'
p1800
(S'\n__stdcall iso_week_days()\n'
p1801
V\u000aint iso_week_days(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_ESI;\u000a  int in_EDI;\u000a  \u000a  iVar1 = (in_EDI + 0x17e) - in_ESI;\u000a  return (int)((in_EDI + 3) -\u000a              (iVar1 + (iVar1 / 7 + (iVar1 >> 0x1f) +\u000a                       (uint)((ulong)((long)iVar1 * 0x92492493) >> 0x3f)) * -7));\u000a}\u000a\u000a
p1802
S'LEA EAX,[0x17e + RDI]\nSUB EAX,ESI\nCDQE\nIMUL RCX,RAX,-0x6db6db6d\nSHR RCX,0x20\nADD ECX,EAX\nMOV EDX,ECX\nSHR EDX,0x1f\nSAR ECX,0x2\nADD ECX,EDX\nLEA EDX,[RCX*0x8]\nSUB EDX,ECX\nSUB EAX,EDX\nNEG EAX\nLEA EAX,[RDI + RAX*0x1 + 0x3]\nRET\n'
p1803
S'8d 87 7e 01 00 00\n29 f0\n48 98\n48 69 c8 93 24 49 92\n48 c1 e9 20\n01 c1\n89 ca\nc1 ea 1f\nc1 f9 02\n01 d1\n8d 14 cd 00 00 00 00\n29 ca\n29 d0\nf7 d8\n8d 44 07 03\nc3\n'
p1804
S'.text:0000000000408080\n.text:0000000000408086\n.text:0000000000408088\n.text:000000000040808a\n.text:0000000000408091\n.text:0000000000408095\n.text:0000000000408097\n.text:0000000000408099\n.text:000000000040809c\n.text:000000000040809f\n.text:00000000004080a1\n.text:00000000004080a8\n.text:00000000004080aa\n.text:00000000004080ac\n.text:00000000004080ae\n.text:00000000004080b2\n'
p1805
tp1806
sS'rpl_fcntl'
p1807
(S'\n__stdcall rpl_fcntl()\n'
p1808
V\u000a/* WARNING: Removing unreachable block (ram,0x004093ab) */\u000a/* WARNING: Removing unreachable block (ram,0x00409414) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x004093b9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1809
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040933b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00409396\nCMP EAX,0x28\nJA 0x004093ab\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004093b9\nCMP EAX,0x28\nJA 0x00409414\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409422\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x006115c0],0x0\nJS 0x00409433\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401800\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409404\nCALL 0x00401780\nCMP dword ptr [RAX],0x16\nJNZ 0x00409404\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004092f0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00409496\nMOV dword ptr [0x006115c0],R15D\nTEST EBP,EBP\nJNS 0x00409447\nJMP 0x00409496\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401800\nMOV EBP,EAX\nJMP 0x00409496\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004092f0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409496\nCMP dword ptr [0x006115c0],-0x1\nJNZ 0x00409496\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401800\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x0040947c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401800\nCMP EAX,-0x1\nJNZ 0x00409496\nCALL 0x00401780\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401930\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1810
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d fe 81 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 30 84 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 83 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d b5 81 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 d1 83 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 72 81 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 a2 83 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 89 83 ff ff\n83 f8 ff\n75 1a\ne8 ff 82 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 a2 84 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1811
S'.text:00000000004092f0\n.text:00000000004092f1\n.text:00000000004092f3\n.text:00000000004092f5\n.text:00000000004092f6\n.text:00000000004092fd\n.text:0000000000409300\n.text:0000000000409302\n.text:0000000000409304\n.text:0000000000409309\n.text:000000000040930e\n.text:0000000000409313\n.text:000000000040931b\n.text:0000000000409323\n.text:000000000040932b\n.text:0000000000409333\n.text:000000000040933b\n.text:0000000000409340\n.text:0000000000409345\n.text:000000000040934a\n.text:000000000040934f\n.text:0000000000409354\n.text:0000000000409359\n.text:0000000000409361\n.text:0000000000409366\n.text:000000000040936e\n.text:0000000000409375\n.text:0000000000409379\n.text:000000000040937f\n.text:0000000000409381\n.text:0000000000409384\n.text:0000000000409386\n.text:000000000040938b\n.text:000000000040938e\n.text:0000000000409391\n.text:0000000000409394\n.text:0000000000409396\n.text:0000000000409399\n.text:000000000040939b\n.text:000000000040939e\n.text:00000000004093a3\n.text:00000000004093a6\n.text:00000000004093a9\n.text:00000000004093ab\n.text:00000000004093b0\n.text:00000000004093b4\n.text:00000000004093b9\n.text:00000000004093bb\n.text:00000000004093c2\n.text:00000000004093c4\n.text:00000000004093c6\n.text:00000000004093c9\n.text:00000000004093cb\n.text:00000000004093d0\n.text:00000000004093d2\n.text:00000000004093d8\n.text:00000000004093da\n.text:00000000004093dc\n.text:00000000004093e1\n.text:00000000004093e4\n.text:00000000004093e6\n.text:00000000004093e8\n.text:00000000004093ea\n.text:00000000004093ed\n.text:00000000004093ef\n.text:00000000004093f4\n.text:00000000004093f6\n.text:00000000004093fc\n.text:00000000004093fe\n.text:0000000000409404\n.text:000000000040940b\n.text:000000000040940d\n.text:000000000040940f\n.text:0000000000409414\n.text:0000000000409419\n.text:000000000040941d\n.text:0000000000409422\n.text:0000000000409425\n.text:0000000000409427\n.text:000000000040942a\n.text:000000000040942f\n.text:0000000000409431\n.text:0000000000409433\n.text:0000000000409435\n.text:0000000000409437\n.text:000000000040943a\n.text:000000000040943c\n.text:0000000000409441\n.text:0000000000409443\n.text:0000000000409445\n.text:0000000000409447\n.text:000000000040944e\n.text:0000000000409450\n.text:0000000000409455\n.text:0000000000409457\n.text:0000000000409459\n.text:000000000040945e\n.text:0000000000409460\n.text:0000000000409462\n.text:0000000000409464\n.text:0000000000409467\n.text:000000000040946c\n.text:000000000040946e\n.text:0000000000409470\n.text:0000000000409472\n.text:0000000000409477\n.text:000000000040947a\n.text:000000000040947c\n.text:0000000000409481\n.text:0000000000409484\n.text:0000000000409487\n.text:0000000000409489\n.text:000000000040948e\n.text:0000000000409491\n.text:0000000000409496\n.text:0000000000409498\n.text:000000000040949f\n.text:00000000004094a0\n.text:00000000004094a2\n.text:00000000004094a4\n.text:00000000004094a5\n'
p1812
tp1813
sS'__fpending'
p1814
(S'\n__stdcall __fpending()\n'
p1815
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00611070)();\u000a  return;\u000a}\u000a\u000a
p1816
S'JMP qword ptr [0x00611070]\n'
p1817
S'ff 25 9a f8 20 00\n'
p1818
S'.plt:00000000004017d0\n'
p1819
tp1820
s.