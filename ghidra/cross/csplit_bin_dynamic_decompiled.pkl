(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060b188)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060b188]\n'
p4
S'ff 25 52 98 20 00\n'
p5
S'.plt:0000000000401930\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040820b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4058c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405948;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4059dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405758\nMOV EDX,0x4081f8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401a40\nJMP 0x0040576d\nMOV EDX,0x408204\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401a40\nXOR EDI,EDI\nMOV ESI,0x40820b\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4084e0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401a40\nXOR EDI,EDI\nMOV ESI,0x40820f\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401880\nCMP R12,0x9\nJA 0x004057f6\nJMP qword ptr [0x4081a8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4082da\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a40\nXOR EDI,EDI\nMOV ESI,0x408419\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x38\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x4082ea\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a40\nXOR EDI,EDI\nMOV ESI,0x408301\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a40\nXOR EDI,EDI\nMOV ESI,0x40831d\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x18\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x40833d\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x18\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x408361\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x28\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x408389\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x28\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x4083b5\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x38\nJMP 0x00405a67\nXOR EDI,EDI\nMOV ESI,0x4083e5\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a40\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004016b0\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba f8 81 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ea c2 ff ff\neb 15\nba 04 82 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 d3 c2 ff ff\n31 ff\nbe 0b 82 40 00\nba 05 00 00 00\ne8 02 c0 ff ff\n48 89 c1\nbe 01 00 00 00\nba e0 84 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 a5 c2 ff ff\n31 ff\nbe 0f 82 40 00\nba 05 00 00 00\ne8 d4 bf ff ff\n48 89 c7\n4c 89 f6\ne8 c9 c0 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 a8 81 40 00\n31 ff\nbe da 82 40 00\nba 05 00 00 00\ne8 aa bf ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 4a c2 ff ff\n31 ff\nbe 19 84 40 00\nba 05 00 00 00\ne8 79 bf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 01 c2 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe ea 82 40 00\nba 05 00 00 00\ne8 27 bf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 c3 c1 ff ff\n31 ff\nbe 01 83 40 00\nba 05 00 00 00\ne8 f2 be ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 8a c1 ff ff\n31 ff\nbe 1d 83 40 00\nba 05 00 00 00\ne8 b9 be ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 54 c1 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 3d 83 40 00\nba 05 00 00 00\ne8 7a be ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 12 c1 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 61 83 40 00\nba 05 00 00 00\ne8 38 be ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 c8 c0 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 89 83 40 00\nba 05 00 00 00\ne8 ee bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 7e c0 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe b5 83 40 00\nba 05 00 00 00\ne8 a4 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2c c0 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe e5 83 40 00\nba 05 00 00 00\ne8 55 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dd bf ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 3c bc ff ff\n'
p12
S'.text:0000000000405720\n.text:0000000000405722\n.text:0000000000405724\n.text:0000000000405726\n.text:0000000000405727\n.text:0000000000405728\n.text:000000000040572b\n.text:000000000040572e\n.text:0000000000405731\n.text:0000000000405734\n.text:0000000000405737\n.text:000000000040573a\n.text:000000000040573f\n.text:0000000000405742\n.text:0000000000405744\n.text:0000000000405749\n.text:000000000040574b\n.text:000000000040574e\n.text:0000000000405751\n.text:0000000000405756\n.text:0000000000405758\n.text:000000000040575d\n.text:000000000040575f\n.text:0000000000405762\n.text:0000000000405765\n.text:0000000000405768\n.text:000000000040576d\n.text:000000000040576f\n.text:0000000000405774\n.text:0000000000405779\n.text:000000000040577e\n.text:0000000000405781\n.text:0000000000405786\n.text:000000000040578b\n.text:0000000000405791\n.text:0000000000405793\n.text:0000000000405796\n.text:000000000040579b\n.text:000000000040579d\n.text:00000000004057a2\n.text:00000000004057a7\n.text:00000000004057ac\n.text:00000000004057af\n.text:00000000004057b2\n.text:00000000004057b7\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057c5\n.text:00000000004057c7\n.text:00000000004057cc\n.text:00000000004057d1\n.text:00000000004057d6\n.text:00000000004057d9\n.text:00000000004057dc\n.text:00000000004057e1\n.text:00000000004057e3\n.text:00000000004057e6\n.text:00000000004057ea\n.text:00000000004057eb\n.text:00000000004057ed\n.text:00000000004057ef\n.text:00000000004057f1\n.text:00000000004057f6\n.text:00000000004057f8\n.text:00000000004057fd\n.text:0000000000405802\n.text:0000000000405807\n.text:000000000040580a\n.text:000000000040580d\n.text:0000000000405811\n.text:0000000000405815\n.text:000000000040581a\n.text:000000000040581f\n.text:0000000000405822\n.text:0000000000405826\n.text:000000000040582a\n.text:000000000040582e\n.text:0000000000405832\n.text:0000000000405836\n.text:000000000040583a\n.text:000000000040583f\n.text:0000000000405843\n.text:0000000000405848\n.text:000000000040584a\n.text:000000000040584f\n.text:0000000000405854\n.text:0000000000405859\n.text:000000000040585c\n.text:000000000040585f\n.text:0000000000405863\n.text:0000000000405868\n.text:000000000040586a\n.text:000000000040586d\n.text:0000000000405871\n.text:0000000000405872\n.text:0000000000405874\n.text:0000000000405876\n.text:0000000000405878\n.text:000000000040587d\n.text:000000000040587f\n.text:0000000000405884\n.text:0000000000405889\n.text:000000000040588e\n.text:0000000000405891\n.text:0000000000405894\n.text:0000000000405898\n.text:000000000040589c\n.text:00000000004058a1\n.text:00000000004058a3\n.text:00000000004058a6\n.text:00000000004058aa\n.text:00000000004058ab\n.text:00000000004058ad\n.text:00000000004058af\n.text:00000000004058b1\n.text:00000000004058b6\n.text:00000000004058b8\n.text:00000000004058bd\n.text:00000000004058c2\n.text:00000000004058c7\n.text:00000000004058ca\n.text:00000000004058cd\n.text:00000000004058d1\n.text:00000000004058d5\n.text:00000000004058d9\n.text:00000000004058de\n.text:00000000004058e0\n.text:00000000004058e3\n.text:00000000004058e7\n.text:00000000004058ec\n.text:00000000004058f0\n.text:00000000004058f5\n.text:00000000004058f7\n.text:00000000004058fc\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590c\n.text:0000000000405910\n.text:0000000000405914\n.text:0000000000405919\n.text:000000000040591e\n.text:0000000000405921\n.text:0000000000405925\n.text:0000000000405929\n.text:000000000040592e\n.text:0000000000405932\n.text:0000000000405937\n.text:0000000000405939\n.text:000000000040593e\n.text:0000000000405943\n.text:0000000000405948\n.text:000000000040594b\n.text:000000000040594e\n.text:0000000000405952\n.text:0000000000405956\n.text:000000000040595a\n.text:000000000040595f\n.text:0000000000405964\n.text:0000000000405967\n.text:000000000040596b\n.text:000000000040596f\n.text:0000000000405973\n.text:0000000000405978\n.text:000000000040597c\n.text:0000000000405981\n.text:0000000000405983\n.text:0000000000405988\n.text:000000000040598d\n.text:0000000000405992\n.text:0000000000405995\n.text:0000000000405998\n.text:000000000040599c\n.text:00000000004059a0\n.text:00000000004059a5\n.text:00000000004059aa\n.text:00000000004059ad\n.text:00000000004059b1\n.text:00000000004059b5\n.text:00000000004059b9\n.text:00000000004059bd\n.text:00000000004059c2\n.text:00000000004059c6\n.text:00000000004059cb\n.text:00000000004059cd\n.text:00000000004059d2\n.text:00000000004059d7\n.text:00000000004059dc\n.text:00000000004059df\n.text:00000000004059e2\n.text:00000000004059e6\n.text:00000000004059ea\n.text:00000000004059ee\n.text:00000000004059f3\n.text:00000000004059f8\n.text:00000000004059fb\n.text:00000000004059ff\n.text:0000000000405a03\n.text:0000000000405a07\n.text:0000000000405a0b\n.text:0000000000405a0f\n.text:0000000000405a14\n.text:0000000000405a18\n.text:0000000000405a1a\n.text:0000000000405a1c\n.text:0000000000405a21\n.text:0000000000405a26\n.text:0000000000405a2b\n.text:0000000000405a2e\n.text:0000000000405a31\n.text:0000000000405a35\n.text:0000000000405a39\n.text:0000000000405a3e\n.text:0000000000405a43\n.text:0000000000405a46\n.text:0000000000405a4a\n.text:0000000000405a4e\n.text:0000000000405a52\n.text:0000000000405a56\n.text:0000000000405a5a\n.text:0000000000405a5e\n.text:0000000000405a63\n.text:0000000000405a67\n.text:0000000000405a68\n.text:0000000000405a6a\n.text:0000000000405a6c\n.text:0000000000405a6e\n.text:0000000000405a6f\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060b0e0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060b0e0]\n'
p18
S'ff 25 fa 98 20 00\n'
p19
S'.plt:00000000004017e0\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00406559;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00406559:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004018f0\nTEST EAX,EAX\nJS 0x00406559\nMOV RDI,RBX\nCALL 0x00401950\nTEST EAX,EAX\nJZ 0x00406527\nMOV RDI,RBX\nCALL 0x004018f0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401800\nCMP RAX,-0x1\nJZ 0x00406559\nMOV RDI,RBX\nCALL 0x00406730\nTEST EAX,EAX\nJZ 0x00406559\nCALL 0x004016c0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401760\nTEST EBP,EBP\nJZ 0x00406552\nCALL 0x004016c0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401760\n'
p25
S'55\n53\n50\n48 89 fb\ne8 f5 b3 ff ff\n85 c0\n78 5a\n48 89 df\ne8 49 b4 ff ff\n85 c0\n74 1c\n48 89 df\ne8 dd b3 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 df b2 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 88 b1 ff ff\n8b 28\n48 89 df\ne8 1e b2 ff ff\n85 ed\n74 0c\ne8 75 b1 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 f9 b1 ff ff\n'
p26
S'.text:00000000004064f0\n.text:00000000004064f1\n.text:00000000004064f2\n.text:00000000004064f3\n.text:00000000004064f6\n.text:00000000004064fb\n.text:00000000004064fd\n.text:00000000004064ff\n.text:0000000000406502\n.text:0000000000406507\n.text:0000000000406509\n.text:000000000040650b\n.text:000000000040650e\n.text:0000000000406513\n.text:0000000000406515\n.text:000000000040651a\n.text:000000000040651c\n.text:0000000000406521\n.text:0000000000406525\n.text:0000000000406527\n.text:000000000040652a\n.text:000000000040652f\n.text:0000000000406531\n.text:0000000000406533\n.text:0000000000406538\n.text:000000000040653a\n.text:000000000040653d\n.text:0000000000406542\n.text:0000000000406544\n.text:0000000000406546\n.text:000000000040654b\n.text:000000000040654d\n.text:0000000000406552\n.text:0000000000406556\n.text:0000000000406557\n.text:0000000000406558\n.text:0000000000406559\n.text:000000000040655c\n.text:0000000000406560\n.text:0000000000406561\n.text:0000000000406562\n'
p27
tp28
sS'fwrite_unlocked'
p29
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060b1a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060b1a0]\n'
p32
S'ff 25 3a 98 20 00\n'
p33
S'.plt:0000000000401960\n'
p34
tp35
sS'strncmp'
p36
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060b060)();\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060b060]\n'
p39
S'ff 25 7a 99 20 00\n'
p40
S'.plt:00000000004016e0\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405c74\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405c80\nPUSH RAX\nCALL 0x00401bb0\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 36 bf ff ff\n'
p47
S'.text:0000000000405c60\n.text:0000000000405c63\n.text:0000000000405c66\n.text:0000000000405c69\n.text:0000000000405c6b\n.text:0000000000405c6f\n.text:0000000000405c72\n.text:0000000000405c74\n.text:0000000000405c75\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00405260\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405275\n.text:0000000000405278\n'
p55
tp56
sS'emit_bug_reporting_address'
p57
(S'\n__stdcall emit_bug_reporting_address()\n'
p58
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x408455\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40846a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x408480\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40716d\nMOV ECX,0x407b33\nXOR EAX,EAX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x408494\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401880\n'
p60
S'50\n31 ff\nbe 55 84 40 00\nba 05 00 00 00\ne8 ce bb ff ff\n48 89 c1\nbf 01 00 00 00\nba 6a 84 40 00\n31 c0\n48 89 ce\ne8 d7 bd ff ff\n31 ff\nbe 80 84 40 00\nba 05 00 00 00\ne8 a6 bb ff ff\n48 89 c6\nbf 01 00 00 00\nba 6d 71 40 00\nb9 33 7b 40 00\n31 c0\ne8 ad bd ff ff\n31 ff\nbe 94 84 40 00\nba 05 00 00 00\ne8 7c bb ff ff\n48 8b 35 dd 56 20 00\n48 89 c7\n58\ne9 6c bc ff ff\n'
p61
S'.text:0000000000405ba0\n.text:0000000000405ba1\n.text:0000000000405ba3\n.text:0000000000405ba8\n.text:0000000000405bad\n.text:0000000000405bb2\n.text:0000000000405bb5\n.text:0000000000405bba\n.text:0000000000405bbf\n.text:0000000000405bc1\n.text:0000000000405bc4\n.text:0000000000405bc9\n.text:0000000000405bcb\n.text:0000000000405bd0\n.text:0000000000405bd5\n.text:0000000000405bda\n.text:0000000000405bdd\n.text:0000000000405be2\n.text:0000000000405be7\n.text:0000000000405bec\n.text:0000000000405bee\n.text:0000000000405bf3\n.text:0000000000405bf5\n.text:0000000000405bfa\n.text:0000000000405bff\n.text:0000000000405c04\n.text:0000000000405c0b\n.text:0000000000405c0e\n.text:0000000000405c0f\n'
p62
tp63
sS'clone_quoting_options'
p64
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p65
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004016c0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60b470\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405d80\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 fb\ne8 84 d8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 70 b4 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 25 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:0000000000403e30\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e34\n.text:0000000000403e37\n.text:0000000000403e3c\n.text:0000000000403e3f\n.text:0000000000403e42\n.text:0000000000403e45\n.text:0000000000403e4a\n.text:0000000000403e4e\n.text:0000000000403e53\n.text:0000000000403e56\n.text:0000000000403e5b\n.text:0000000000403e5e\n.text:0000000000403e5f\n.text:0000000000403e61\n.text:0000000000403e62\n'
p69
tp70
sS'xmalloc'
p71
(S'\n__stdcall xmalloc(size_t n)\n'
p72
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p73
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401900\nTEST RBX,RBX\nJZ 0x00405c53\nTEST RAX,RAX\nJZ 0x00405c55\nPOP RBX\nRET\nCALL 0x00401bb0\n'
p74
S'53\n48 89 fb\ne8 b7 bc ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 56 bf ff ff\n'
p75
S'.text:0000000000405c40\n.text:0000000000405c41\n.text:0000000000405c44\n.text:0000000000405c49\n.text:0000000000405c4c\n.text:0000000000405c4e\n.text:0000000000405c51\n.text:0000000000405c53\n.text:0000000000405c54\n.text:0000000000405c55\n'
p76
tp77
sS'quotearg_char_mem'
p78
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p79
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060b4a0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060b490]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b480]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b470]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403e90\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404d80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d f8 63 20 00\n48 89 4c 24 30\n0f 10 05 dc 63 20 00\n0f 29 44 24 20\n0f 10 05 c0 63 20 00\n0f 29 44 24 10\n0f 10 05 a4 63 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p82
S'.text:0000000000405090\n.text:0000000000405092\n.text:0000000000405094\n.text:0000000000405095\n.text:0000000000405099\n.text:000000000040509b\n.text:000000000040509e\n.text:00000000004050a1\n.text:00000000004050a8\n.text:00000000004050ad\n.text:00000000004050b4\n.text:00000000004050b9\n.text:00000000004050c0\n.text:00000000004050c5\n.text:00000000004050cc\n.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050dd\n.text:00000000004050e2\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050ea\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f6\n.text:00000000004050f7\n.text:00000000004050f9\n.text:00000000004050fb\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b9a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x60ae18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401b90\nJMP 0x00401b20\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b8b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401b20\n'
p88
S'bf 18 ae 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000401b80\n.text:0000000000401b85\n.text:0000000000401b89\n.text:0000000000401b8b\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b98\n.text:0000000000401b9a\n.text:0000000000401b9b\n.text:0000000000401b9e\n.text:0000000000401ba0\n.text:0000000000401ba1\n'
p90
tp91
sS'xdectoimax'
p92
(S'\n__stdcall xdectoimax(char * n_str, intmax_t min, intmax_t max, char * suffixes, char * err)\n'
p93
V\u000aintmax_t xdectoimax(char *n_str,intmax_t min,intmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = xnumtoimax(n_str,10,min,(char *)max,suffixes);\u000a  return iVar1;\u000a}\u000a\u000a
p94
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x00405dd0\nPOP RCX\nRET\n'
p95
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p96
S'.text:0000000000405ea0\n.text:0000000000405ea1\n.text:0000000000405ea4\n.text:0000000000405ea7\n.text:0000000000405eaa\n.text:0000000000405ead\n.text:0000000000405eb1\n.text:0000000000405eb6\n.text:0000000000405eb9\n.text:0000000000405ebc\n.text:0000000000405ec1\n.text:0000000000405ec2\n'
p97
tp98
sS'quotearg_n_style_colon'
p99
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p100
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404fb0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403e90\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404d80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000405130\n.text:0000000000405131\n.text:0000000000405133\n.text:0000000000405134\n.text:0000000000405138\n.text:000000000040513b\n.text:000000000040513d\n.text:0000000000405142\n.text:0000000000405145\n.text:000000000040514a\n.text:000000000040514f\n.text:0000000000405154\n.text:0000000000405157\n.text:000000000040515c\n.text:0000000000405163\n.text:0000000000405165\n.text:0000000000405168\n.text:000000000040516b\n.text:0000000000405170\n.text:0000000000405174\n.text:0000000000405175\n.text:0000000000405177\n.text:0000000000405178\n'
p104
tp105
sS'get_format_flags'
p106
(S'\n__stdcall get_format_flags(char * format, int * flags_ptr)\n'
p107
V\u000asize_t get_format_flags(char *format,int *flags_ptr)\u000a\u000a{\u000a  size_t sVar1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = 0;\u000a  sVar1 = 0;\u000a  switch(format[sVar1]) {\u000a  case '#':\u000a    uVar2 = uVar2 | 2;\u000a    sVar1 = sVar1 + 1;\u000a    break;\u000a  default:\u000a    *flags_ptr = uVar2;\u000a    return sVar1;\u000a  case '\u005c'':\u000a    uVar2 = uVar2 | 1;\u000a  case '-':\u000a  case '0':\u000a    sVar1 = sVar1 + 1;\u000a  }\u000a}\u000a\u000a
p108
S'XOR ECX,ECX\nXOR EAX,EAX\nJMP 0x00402a73\nINC RAX\nMOVSX EDX,byte ptr [RDI + RAX*0x1]\nADD EDX,-0x23\nCMP EDX,0xd\nJA 0x00402a95\nJMP qword ptr [0x406ea8 + RDX*0x8]\nOR ECX,0x2\nINC RAX\nJMP 0x00402a73\nOR ECX,0x1\nJMP 0x00402a70\nMOV dword ptr [RSI],ECX\nRET\n'
p109
S'31 c9\n31 c0\neb 0d\n48 ff c0\n0f be 14 07\n83 c2 dd\n83 fa 0d\n77 16\nff 24 d5 a8 6e 40 00\n83 c9 02\n48 ff c0\neb e5\n83 c9 01\neb db\n89 0e\nc3\n'
p110
S'.text:0000000000402a60\n.text:0000000000402a62\n.text:0000000000402a64\n.text:0000000000402a70\n.text:0000000000402a73\n.text:0000000000402a77\n.text:0000000000402a7a\n.text:0000000000402a7d\n.text:0000000000402a7f\n.text:0000000000402a86\n.text:0000000000402a89\n.text:0000000000402a8c\n.text:0000000000402a90\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a97\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00405240\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:0000000000405250\n.text:0000000000405253\n.text:0000000000405256\n.text:0000000000405258\n.text:000000000040525b\n.text:000000000040525e\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060b168)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060b168]\n'
p123
S'ff 25 72 98 20 00\n'
p124
S'.plt:00000000004018f0\n'
p125
tp126
sS'cleanup_fatal'
p127
(S'\n__stdcall cleanup_fatal()\n'
p128
V\u000avoid cleanup_fatal(EVP_PKEY_CTX *pEParm1)\u000a\u000a{\u000a  cleanup(pEParm1);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p129
S'PUSH RAX\nCALL 0x00402770\nMOV EDI,0x1\nCALL 0x00401a20\n'
p130
S'50\ne8 8a 0b 00 00\nbf 01 00 00 00\ne8 30 fe ff ff\n'
p131
S'.text:0000000000401be0\n.text:0000000000401be1\n.text:0000000000401be6\n.text:0000000000401beb\n'
p132
tp133
sS'split_file'
p134
(S'\n__stdcall split_file()\n'
p135
V\u000avoid split_file(void)\u000a\u000a{\u000a  ulong repetition;\u000a  ulong uVar1;\u000a  \u000a  if (control_used != 0) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (controls[uVar1].regexpr == false) {\u000a        repetition = 0;\u000a        while ((controls[uVar1].repeat_forever != false ||\u000a               (repetition < controls[uVar1].repeat || repetition == controls[uVar1].repeat))) {\u000a          process_line_count(controls + uVar1,repetition);\u000a          repetition = repetition + 1;\u000a        }\u000a      }\u000a      else {\u000a        repetition = 0;\u000a        while ((controls[uVar1].repeat_forever != false ||\u000a               (repetition < controls[uVar1].repeat || repetition == controls[uVar1].repeat))) {\u000a          process_regexp(controls + uVar1,repetition);\u000a          repetition = repetition + 1;\u000a        }\u000a      }\u000a      uVar1 = uVar1 + 1;\u000a    } while (uVar1 < control_used);\u000a  }\u000a  create_output_file();\u000a  dump_rest_of_file();\u000a  close_output_file();\u000a  return;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nCMP qword ptr [0x0060b340],0x0\nJZ 0x004025b4\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060b338]\nLEA R15,[R14 + R14*0x2]\nSHL R15,0x5\nCMP byte ptr [RAX + R15*0x1 + 0x1e],0x0\nJZ 0x00402570\nXOR EBX,EBX\nJMP 0x0040254e\nADD RDI,R15\nMOV RSI,RBX\nCALL 0x00402eb0\nINC RBX\nMOV RDI,qword ptr [0x0060b338]\nCMP byte ptr [RDI + R15*0x1 + 0x1c],0x0\nJNZ 0x00402540\nCMP RBX,qword ptr [RDI + R15*0x1 + 0x10]\nJBE 0x00402540\nJMP 0x004025a4\nXOR EBX,EBX\nJMP 0x0040258e\nADD RDI,R15\nMOV RSI,RBX\nCALL 0x00403070\nINC RBX\nMOV RDI,qword ptr [0x0060b338]\nCMP byte ptr [RDI + R15*0x1 + 0x1c],0x0\nJNZ 0x00402580\nCMP RBX,qword ptr [RDI + R15*0x1 + 0x10]\nJBE 0x00402580\nINC R14\nCMP R14,qword ptr [0x0060b340]\nJC 0x00402520\nCALL 0x00403110\nCALL 0x004031e0\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004027b0\n'
p137
S'41 57\n41 56\n53\n48 83 3d 33 8e 20 00 00\n0f 84 a1 00 00 00\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 11 8e 20 00\n4f 8d 3c 76\n49 c1 e7 05\n42 80 7c 38 1e 00\n74 39\n31 db\neb 13\n4c 01 ff\n48 89 de\ne8 65 09 00 00\n48 ff c3\n48 8b 3d e3 8d 20 00\n42 80 7c 3f 1c 00\n75 e3\n4a 3b 5c 3f 10\n76 dc\neb 3e\n31 db\neb 1a\n4c 01 ff\n48 89 de\ne8 e5 0a 00 00\n48 ff c3\n48 8b 3d a3 8d 20 00\n42 80 7c 3f 1c 00\n75 e3\n4a 3b 5c 3f 10\n76 dc\n49 ff c6\n4c 3b 35 92 8d 20 00\n0f 82 6c ff ff ff\ne8 57 0b 00 00\ne8 22 0c 00 00\n5b\n41 5e\n41 5f\ne9 e8 01 00 00\n'
p138
S'.text:0000000000402500\n.text:0000000000402502\n.text:0000000000402504\n.text:0000000000402505\n.text:000000000040250d\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402520\n.text:0000000000402527\n.text:000000000040252b\n.text:000000000040252f\n.text:0000000000402535\n.text:0000000000402537\n.text:0000000000402539\n.text:0000000000402540\n.text:0000000000402543\n.text:0000000000402546\n.text:000000000040254b\n.text:000000000040254e\n.text:0000000000402555\n.text:000000000040255b\n.text:000000000040255d\n.text:0000000000402562\n.text:0000000000402564\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402580\n.text:0000000000402583\n.text:0000000000402586\n.text:000000000040258b\n.text:000000000040258e\n.text:0000000000402595\n.text:000000000040259b\n.text:000000000040259d\n.text:00000000004025a2\n.text:00000000004025a4\n.text:00000000004025a7\n.text:00000000004025ae\n.text:00000000004025b4\n.text:00000000004025b9\n.text:00000000004025be\n.text:00000000004025bf\n.text:00000000004025c1\n.text:00000000004025c3\n'
p139
tp140
sS'sigemptyset'
p141
(S'\n__stdcall sigemptyset(sigset_t * __set)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigemptyset(sigset_t *__set)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigemptyset_0060b158)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060b158]\n'
p144
S'ff 25 82 98 20 00\n'
p145
S'.plt:00000000004018d0\n'
p146
tp147
sS'mbrtowc'
p148
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060b0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060b0d0]\n'
p151
S'ff 25 0a 99 20 00\n'
p152
S'.plt:00000000004017c0\n'
p153
tp154
sS'load_buffer'
p155
(S'\n__stdcall load_buffer()\n'
p156
V\u000a_Bool load_buffer(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  undefined uVar2;\u000a  uint uVar3;\u000a  buffer_record *b;\u000a  char *dest;\u000a  size_t min_size;\u000a  \u000a  if (have_read_eof == 0) {\u000a    min_size = 0x1fff;\u000a    if (0x1fff < hold_count) {\u000a      min_size = hold_count;\u000a    }\u000a    while( true ) {\u000a      b = get_new_buffer(min_size);\u000a      min_size = b->bytes_alloc;\u000a      dest = b->buffer;\u000a      if (hold_count != 0) {\u000a        memcpy(dest,hold_area,hold_count);\u000a        dest = dest + hold_count;\u000a        b->bytes_used = b->bytes_used + hold_count;\u000a        min_size = min_size - hold_count;\u000a        hold_count = 0;\u000a      }\u000a      min_size = read_input(dest,min_size);\u000a      b->bytes_used = b->bytes_used + min_size;\u000a      min_size = record_line_starts(b);\u000a      if (min_size != 0) break;\u000a      if (have_read_eof != 0) {\u000a        free_buffer(b);\u000a        free(b);\u000a        goto LAB_004036f4;\u000a      }\u000a      uVar1 = b->bytes_alloc;\u000a      uVar3 = -(uint)CARRY8(uVar1,uVar1) & 1;\u000a      if ((-(ulong)CARRY8(uVar1,uVar1) != (ulong)uVar3) || (uVar3 != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        xalloc_die();\u000a      }\u000a      free_buffer(b);\u000a      free(b);\u000a      min_size = uVar1 * 2;\u000a    }\u000a    save_buffer(b);\u000a    uVar2 = 1;\u000a  }\u000a  else {\u000aLAB_004036f4:\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p157
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV AL,byte ptr [0x0060b438]\nTEST AL,AL\nJNZ 0x004036f4\nMOV RAX,qword ptr [0x0060b440]\nCMP RAX,0x1fff\nMOV EBX,0x1fff\nCMOVA RBX,RAX\nJMP 0x00403630\nMOV RDI,R14\nCALL 0x004035a0\nMOV RDI,R14\nCALL 0x00401690\nMOV RDI,RBX\nCALL 0x00403700\nMOV R14,RAX\nMOV R15,qword ptr [R14]\nMOV RBX,qword ptr [R14 + 0x28]\nMOV RDX,qword ptr [0x0060b440]\nTEST RDX,RDX\nJZ 0x00403679\nMOV RSI,qword ptr [0x0060b448]\nMOV RDI,RBX\nCALL 0x004018e0\nMOV RAX,qword ptr [0x0060b440]\nADD RBX,RAX\nADD qword ptr [R14 + 0x8],RAX\nSUB R15,RAX\nMOV qword ptr [0x0060b440],0x0\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00403760\nADD qword ptr [R14 + 0x8],RAX\nMOV RDI,R14\nCALL 0x004037c0\nTEST RAX,RAX\nJNZ 0x004036d8\nMOVZX EAX,byte ptr [0x0060b438]\nTEST AL,AL\nJNZ 0x004036e4\nMOV RBX,qword ptr [R14]\nMOV RAX,RBX\nADD RAX,RAX\nMOV ECX,0x0\nSBB RCX,0x0\nADD RBX,RBX\nSBB RAX,RAX\nAND EAX,0x1\nXOR RCX,RAX\nJNZ 0x004036d3\nMOV RCX,RBX\nAND RCX,-0x2\nXOR RCX,RBX\nOR RCX,RAX\nJZ 0x00403620\nCALL 0x00401bb0\nMOV RDI,R14\nCALL 0x004038b0\nMOV AL,0x1\nJMP 0x004036f6\nMOV RDI,R14\nCALL 0x004035a0\nMOV RDI,R14\nCALL 0x00401690\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p158
S'41 57\n41 56\n53\n8a 05 3d 7e 20 00\n84 c0\n0f 85 f1 00 00 00\n48 8b 05 36 7e 20 00\n48 3d ff 1f 00 00\nbb ff 1f 00 00\n48 0f 47 d8\neb 15\n4c 89 f7\ne8 78 ff ff ff\n4c 89 f7\ne8 60 e0 ff ff\n48 89 df\ne8 c8 00 00 00\n49 89 c6\n4d 8b 3e\n49 8b 5e 28\n48 8b 15 f7 7d 20 00\n48 85 d2\n74 2b\n48 8b 35 f3 7d 20 00\n48 89 df\ne8 83 e2 ff ff\n48 8b 05 dc 7d 20 00\n48 01 c3\n49 01 46 08\n49 29 c7\n48 c7 05 c7 7d 20 00 00 00 00 00\n48 89 df\n4c 89 fe\ne8 dc 00 00 00\n49 01 46 08\n4c 89 f7\ne8 30 01 00 00\n48 85 c0\n75 43\n0f b6 05 9c 7d 20 00\n84 c0\n75 44\n49 8b 1e\n48 89 d8\n48 01 c0\nb9 00 00 00 00\n48 83 d9 00\n48 01 db\n48 19 c0\n83 e0 01\n48 31 c1\n75 13\n48 89 d9\n48 83 e1 fe\n48 31 d9\n48 09 c1\n0f 84 4d ff ff ff\ne8 d8 e4 ff ff\n4c 89 f7\ne8 d0 01 00 00\nb0 01\neb 12\n4c 89 f7\ne8 b4 fe ff ff\n4c 89 f7\ne8 9c df ff ff\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p159
S'.text:00000000004035f0\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f5\n.text:00000000004035fb\n.text:00000000004035fd\n.text:0000000000403603\n.text:000000000040360a\n.text:0000000000403610\n.text:0000000000403615\n.text:0000000000403619\n.text:0000000000403620\n.text:0000000000403623\n.text:0000000000403628\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403633\n.text:0000000000403638\n.text:000000000040363b\n.text:000000000040363e\n.text:0000000000403642\n.text:0000000000403649\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403655\n.text:0000000000403658\n.text:000000000040365d\n.text:0000000000403664\n.text:0000000000403667\n.text:000000000040366b\n.text:000000000040366e\n.text:0000000000403679\n.text:000000000040367c\n.text:000000000040367f\n.text:0000000000403684\n.text:0000000000403688\n.text:000000000040368b\n.text:0000000000403690\n.text:0000000000403693\n.text:0000000000403695\n.text:000000000040369c\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036a3\n.text:00000000004036a6\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b2\n.text:00000000004036b5\n.text:00000000004036b8\n.text:00000000004036bb\n.text:00000000004036be\n.text:00000000004036c0\n.text:00000000004036c3\n.text:00000000004036c7\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036e0\n.text:00000000004036e2\n.text:00000000004036e4\n.text:00000000004036e7\n.text:00000000004036ec\n.text:00000000004036ef\n.text:00000000004036f4\n.text:00000000004036f6\n.text:00000000004036f7\n.text:00000000004036f9\n.text:00000000004036fb\n'
p160
tp161
sS'dup2'
p162
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0060b0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060b0d8]\n'
p165
S'ff 25 02 99 20 00\n'
p166
S'.plt:00000000004017d0\n'
p167
tp168
sS'xstrtoumax'
p169
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p170
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_004063f6;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_004063f6;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00406325_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00406303:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00406303;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004063d7;\u000a  default:\u000aswitchD_00406325_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004063d7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004063d7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_004063f6:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00406413\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004016c0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401a90\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00406210\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00406402\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x004019f0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00406270\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004062a1\nCMP EAX,0x22\nJNZ 0x00406402\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004062ac\nJMP 0x004063f6\nTEST R12,R12\nJZ 0x00406402\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00406402\nMOV RDI,R12\nCALL 0x004017e0\nTEST RAX,RAX\nJZ 0x00406402\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004062ac\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x004063f6\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x004063f6\nMOV RDI,R12\nCALL 0x004017e0\nTEST RAX,RAX\nJZ 0x0040633e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004017e0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00406303\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040630a\nCMP EAX,0x44\nJZ 0x0040630a\nCMP EAX,0x69\nJNZ 0x00406303\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00406314\nMOV EBP,0x1\nJMP 0x00406314\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040633e\nXOR EAX,EAX\nJMP qword ptr [0x408748 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00406460\nJMP 0x004063dc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00406402\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004063d7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00406460\nJMP 0x004063dc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004063d7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00406430\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4086c0\nMOV ESI,0x4086e6\nMOV EDX,0x60\nMOV ECX,0x4088f8\nCALL 0x00401810\n'
p172
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 d2 b4 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 93 b8 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 ac b7 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 54 b5 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 1c b5 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 0a b5 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 48 87 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 86 40 00\nbe e6 86 40 00\nba 60 00 00 00\nb9 f8 88 40 00\ne8 e4 b3 ff ff\n'
p173
S'.text:00000000004061c0\n.text:00000000004061c1\n.text:00000000004061c3\n.text:00000000004061c5\n.text:00000000004061c7\n.text:00000000004061c9\n.text:00000000004061ca\n.text:00000000004061ce\n.text:00000000004061d1\n.text:00000000004061d4\n.text:00000000004061d7\n.text:00000000004061da\n.text:00000000004061de\n.text:00000000004061e4\n.text:00000000004061e9\n.text:00000000004061ee\n.text:00000000004061f1\n.text:00000000004061f8\n.text:00000000004061fd\n.text:0000000000406200\n.text:0000000000406203\n.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406216\n.text:000000000040621b\n.text:000000000040621d\n.text:0000000000406220\n.text:0000000000406225\n.text:0000000000406229\n.text:000000000040622e\n.text:0000000000406230\n.text:0000000000406236\n.text:0000000000406239\n.text:000000000040623c\n.text:000000000040623f\n.text:0000000000406244\n.text:0000000000406248\n.text:000000000040624c\n.text:000000000040624f\n.text:0000000000406251\n.text:0000000000406254\n.text:0000000000406256\n.text:0000000000406258\n.text:000000000040625b\n.text:0000000000406261\n.text:0000000000406266\n.text:0000000000406269\n.text:000000000040626b\n.text:0000000000406270\n.text:0000000000406273\n.text:0000000000406279\n.text:000000000040627c\n.text:000000000040627e\n.text:0000000000406284\n.text:0000000000406287\n.text:000000000040628c\n.text:000000000040628f\n.text:0000000000406295\n.text:000000000040629d\n.text:000000000040629f\n.text:00000000004062a1\n.text:00000000004062a3\n.text:00000000004062a6\n.text:00000000004062ac\n.text:00000000004062b0\n.text:00000000004062b4\n.text:00000000004062b6\n.text:00000000004062bc\n.text:00000000004062bf\n.text:00000000004062c4\n.text:00000000004062c7\n.text:00000000004062c9\n.text:00000000004062ce\n.text:00000000004062d1\n.text:00000000004062d6\n.text:00000000004062db\n.text:00000000004062de\n.text:00000000004062e0\n.text:00000000004062e4\n.text:00000000004062e7\n.text:00000000004062e9\n.text:00000000004062ec\n.text:00000000004062ee\n.text:00000000004062f1\n.text:00000000004062f3\n.text:00000000004062f5\n.text:00000000004062f9\n.text:00000000004062fc\n.text:0000000000406301\n.text:0000000000406303\n.text:0000000000406308\n.text:000000000040630a\n.text:000000000040630f\n.text:0000000000406314\n.text:0000000000406318\n.text:000000000040631b\n.text:000000000040631e\n.text:0000000000406321\n.text:0000000000406323\n.text:0000000000406325\n.text:000000000040632c\n.text:000000000040632f\n.text:0000000000406334\n.text:0000000000406339\n.text:000000000040633e\n.text:0000000000406342\n.text:0000000000406347\n.text:000000000040634a\n.text:000000000040634d\n.text:0000000000406352\n.text:0000000000406355\n.text:000000000040635a\n.text:000000000040635f\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406369\n.text:000000000040636e\n.text:0000000000406370\n.text:0000000000406373\n.text:0000000000406378\n.text:000000000040637d\n.text:000000000040637f\n.text:0000000000406382\n.text:0000000000406387\n.text:0000000000406389\n.text:000000000040638c\n.text:0000000000406391\n.text:0000000000406396\n.text:0000000000406398\n.text:000000000040639b\n.text:00000000004063a0\n.text:00000000004063a5\n.text:00000000004063a7\n.text:00000000004063aa\n.text:00000000004063af\n.text:00000000004063b4\n.text:00000000004063b6\n.text:00000000004063b9\n.text:00000000004063be\n.text:00000000004063c3\n.text:00000000004063c5\n.text:00000000004063c8\n.text:00000000004063cd\n.text:00000000004063cf\n.text:00000000004063d2\n.text:00000000004063d7\n.text:00000000004063dc\n.text:00000000004063de\n.text:00000000004063e2\n.text:00000000004063e6\n.text:00000000004063ea\n.text:00000000004063ec\n.text:00000000004063ef\n.text:00000000004063f3\n.text:00000000004063f6\n.text:00000000004063fa\n.text:00000000004063ff\n.text:0000000000406402\n.text:0000000000406404\n.text:0000000000406408\n.text:0000000000406409\n.text:000000000040640b\n.text:000000000040640d\n.text:000000000040640f\n.text:0000000000406411\n.text:0000000000406412\n.text:0000000000406413\n.text:0000000000406418\n.text:000000000040641d\n.text:0000000000406422\n.text:0000000000406427\n'
p174
tp175
sS'setlocale'
p176
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060b1b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060b1b8]\n'
p179
S'ff 25 22 98 20 00\n'
p180
S'.plt:0000000000401990\n'
p181
tp182
sS'c_toupper'
p183
(S'\n__stdcall c_toupper()\n'
p184
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p186
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p187
S'.text:0000000000406930\n.text:0000000000406933\n.text:0000000000406936\n.text:0000000000406939\n.text:000000000040693c\n'
p188
tp189
sS'fcntl'
p190
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060b090)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060b090]\n'
p193
S'ff 25 4a 99 20 00\n'
p194
S'.plt:0000000000401740\n'
p195
tp196
sS'mbsinit'
p197
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060b220)();\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060b220]\n'
p200
S'ff 25 ba 97 20 00\n'
p201
S'.plt:0000000000401a60\n'
p202
tp203
sS'dcgettext'
p204
(S'\n__stdcall dcgettext()\n'
p205
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060b0b0)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060b0b0]\n'
p207
S'ff 25 2a 99 20 00\n'
p208
S'.plt:0000000000401780\n'
p209
tp210
sS'quotearg_free'
p211
(S'\n__stdcall quotearg_free()\n'
p212
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060b270]\nCMP dword ptr [0x0060b278],0x2\nJC 0x00404d1a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401690\nINC RBX\nMOV EAX,dword ptr [0x0060b278]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404d00\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60b4b0\nCMP RDI,RAX\nJZ 0x00404d43\nCALL 0x00401690\nMOV qword ptr [0x0060b280],0x100\nMOV qword ptr [0x0060b288],0x60b4b0\nMOV EAX,0x60b280\nCMP R14,RAX\nJZ 0x00404d60\nMOV RDI,R14\nCALL 0x00401690\nMOV qword ptr [0x0060b270],0x60b280\nMOV dword ptr [0x0060b278],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p214
S'41 57\n41 56\n53\n4c 8b 35 84 65 20 00\n83 3d 85 65 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 88 c9 ff ff\n48 ff c3\n8b 05 67 65 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 b0 b4 60 00\n48 39 c7\n74 1b\ne8 63 c9 ff ff\n48 c7 05 48 65 20 00 00 01 00 00\n48 c7 05 45 65 20 00 b0 b4 60 00\nb8 80 b2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 3b c9 ff ff\n48 c7 05 10 65 20 00 80 b2 60 00\nc7 05 0e 65 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p215
S'.text:0000000000404ce0\n.text:0000000000404ce2\n.text:0000000000404ce4\n.text:0000000000404ce5\n.text:0000000000404cec\n.text:0000000000404cf3\n.text:0000000000404cf5\n.text:0000000000404cf9\n.text:0000000000404cfe\n.text:0000000000404d00\n.text:0000000000404d03\n.text:0000000000404d08\n.text:0000000000404d0b\n.text:0000000000404d11\n.text:0000000000404d15\n.text:0000000000404d18\n.text:0000000000404d1a\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d26\n.text:0000000000404d28\n.text:0000000000404d2d\n.text:0000000000404d38\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4b\n.text:0000000000404d4d\n.text:0000000000404d50\n.text:0000000000404d55\n.text:0000000000404d60\n.text:0000000000404d6a\n.text:0000000000404d6b\n.text:0000000000404d6d\n.text:0000000000404d6f\n'
p216
tp217
sS'quotearg_mem'
p218
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p219
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p220
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404f40\n'
p221
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p222
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f68\n.text:0000000000404f6b\n.text:0000000000404f6e\n'
p223
tp224
sS'deregister_tm_clones'
p225
(S'\n__stdcall deregister_tm_clones()\n'
p226
V\u000a/* WARNING: Removing unreachable block (ram,0x00401af5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401aff) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p227
S'MOV EAX,0x60b2cf\nPUSH RBP\nSUB RAX,0x60b2c8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401b10\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b10\nPOP RBP\nMOV EDI,0x60b2c8\nJMP RAX\nPOP RBP\nRET\n'
p228
S'b8 cf b2 60 00\n55\n48 2d c8 b2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf c8 b2 60 00\nff e0\n5d\nc3\n'
p229
S'.text:0000000000401ae0\n.text:0000000000401ae5\n.text:0000000000401ae6\n.text:0000000000401aec\n.text:0000000000401af0\n.text:0000000000401af3\n.text:0000000000401af5\n.text:0000000000401afa\n.text:0000000000401afd\n.text:0000000000401aff\n.text:0000000000401b00\n.text:0000000000401b05\n.text:0000000000401b10\n.text:0000000000401b11\n'
p230
tp231
sS'interrupt_handler'
p232
(S'\n__stdcall interrupt_handler()\n'
p233
V\u000avoid interrupt_handler(uint uParm1)\u000a\u000a{\u000a  delete_all_files();\u000a  signal(uParm1,(__sighandler_t)0x0);\u000a  (*(code *)PTR_raise_0060b030)((ulong)uParm1);\u000a  return;\u000a}\u000a\u000a
p234
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x1\nCALL 0x00402940\nXOR ESI,ESI\nMOV EDI,EBX\nCALL 0x004018c0\nMOV EDI,EBX\nPOP RBX\nJMP 0x00401680\n'
p235
S'53\n89 fb\nbf 01 00 00 00\ne8 53 04 00 00\n31 f6\n89 df\ne8 ca f3 ff ff\n89 df\n5b\ne9 82 f1 ff ff\n'
p236
S'.text:00000000004024e0\n.text:00000000004024e1\n.text:00000000004024e3\n.text:00000000004024e8\n.text:00000000004024ed\n.text:00000000004024ef\n.text:00000000004024f1\n.text:00000000004024f6\n.text:00000000004024f8\n.text:00000000004024f9\n'
p237
tp238
sS'quotearg_custom'
p239
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p240
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00405180\n'
p242
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p243
S'.text:0000000000405200\n.text:0000000000405203\n.text:0000000000405206\n.text:0000000000405209\n.text:000000000040520b\n.text:000000000040520e\n.text:0000000000405211\n.text:0000000000405214\n'
p244
tp245
sS'free'
p246
(S'\n__stdcall free(void * __ptr)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060b038)();\u000a  return;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060b038]\n'
p249
S'ff 25 a2 99 20 00\n'
p250
S'.plt:0000000000401690\n'
p251
tp252
sS'close'
p253
(S'\n__stdcall close(int __fd)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060b110)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060b110]\n'
p256
S'ff 25 ca 98 20 00\n'
p257
S'.plt:0000000000401840\n'
p258
tp259
sS'getenv'
p260
(S'\n__stdcall getenv(char * __name)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060b018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060b018]\n'
p263
S'ff 25 c2 99 20 00\n'
p264
S'.plt:0000000000401650\n'
p265
tp266
sS'fopen'
p267
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060b1e0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060b1e0]\n'
p270
S'ff 25 fa 97 20 00\n'
p271
S'.plt:00000000004019e0\n'
p272
tp273
sS'rpl_fseeko'
p274
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p275
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060b1d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004067a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004067a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004067ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004019d0\nMOV RDI,RBX\nCALL 0x004018f0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401800\nCMP RAX,-0x1\nJZ 0x004067e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004067e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p277
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 16 b2 ff ff\n48 89 df\ne8 2e b1 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 31 b0 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p278
S'.text:0000000000406780\n.text:0000000000406781\n.text:0000000000406783\n.text:0000000000406784\n.text:0000000000406787\n.text:000000000040678a\n.text:000000000040678d\n.text:0000000000406791\n.text:0000000000406795\n.text:0000000000406797\n.text:000000000040679b\n.text:000000000040679f\n.text:00000000004067a1\n.text:00000000004067a6\n.text:00000000004067a8\n.text:00000000004067ab\n.text:00000000004067ae\n.text:00000000004067b1\n.text:00000000004067b2\n.text:00000000004067b4\n.text:00000000004067b5\n.text:00000000004067ba\n.text:00000000004067bd\n.text:00000000004067c2\n.text:00000000004067c4\n.text:00000000004067c7\n.text:00000000004067ca\n.text:00000000004067cf\n.text:00000000004067d3\n.text:00000000004067d5\n.text:00000000004067d8\n.text:00000000004067df\n.text:00000000004067e1\n.text:00000000004067e3\n.text:00000000004067e8\n.text:00000000004067e9\n.text:00000000004067eb\n.text:00000000004067ec\n'
p279
tp280
sS'quote_n_mem'
p281
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p282
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'MOV ECX,0x60b290\nJMP 0x00404d80\n'
p284
S'b9 90 b2 60 00\ne9 36 fb ff ff\n'
p285
S'.text:0000000000405240\n.text:0000000000405245\n'
p286
tp287
sS'xstrdup'
p288
(S'\n__stdcall xstrdup(char * string)\n'
p289
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p290
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004017a0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405d80\n'
p291
S'53\n48 89 fb\ne8 e7 b9 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p292
S'.text:0000000000405db0\n.text:0000000000405db1\n.text:0000000000405db4\n.text:0000000000405db9\n.text:0000000000405dbd\n.text:0000000000405dc0\n.text:0000000000405dc1\n'
p293
tp294
sS'c_ispunct'
p295
(S'\n__stdcall c_ispunct()\n'
p296
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p297
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004068c2\nMOV AL,0x1\nJMP qword ptr [0x408948 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p298
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 48 89 40 00\nc3\n31 c0\nc3\n'
p299
S'.text:00000000004068b0\n.text:00000000004068b3\n.text:00000000004068b6\n.text:00000000004068b8\n.text:00000000004068ba\n.text:00000000004068c1\n.text:00000000004068c2\n.text:00000000004068c4\n'
p300
tp301
sS'fscanf'
p302
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060b108)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060b108]\n'
p305
S'ff 25 d2 98 20 00\n'
p306
S'.plt:0000000000401830\n'
p307
tp308
sS'record_line_starts'
p309
(S'\n__stdcall record_line_starts(buffer_record * b)\n'
p310
V\u000asize_t record_line_starts(buffer_record *b)\u000a\u000a{\u000a  void *pvVar1;\u000a  char *line_start;\u000a  size_t line_len;\u000a  size_t __n;\u000a  size_t sVar2;\u000a  \u000a  __n = b->bytes_used;\u000a  if (__n == 0) {\u000a    return 0;\u000a  }\u000a  line_start = b->buffer;\u000a  pvVar1 = memchr(line_start,10,__n);\u000a  sVar2 = 0;\u000a  if (pvVar1 != (void *)0x0) {\u000a    do {\u000a      line_len = (long)pvVar1 + (1 - (long)line_start);\u000a      keep_new_line(b,line_start,line_len);\u000a      __n = __n - line_len;\u000a      line_start = (char *)((long)pvVar1 + 1);\u000a      sVar2 = sVar2 + 1;\u000a      pvVar1 = memchr(line_start,10,__n);\u000a    } while (pvVar1 != (void *)0x0);\u000a    if (__n == 0) goto LAB_00403877;\u000a  }\u000a  if (have_read_eof == 1) {\u000a    keep_new_line(b,line_start,__n);\u000a    sVar2 = sVar2 + 1;\u000a  }\u000a  else {\u000a    line_start = (char *)xmemdup(line_start,__n);\u000a    save_to_hold_area(line_start,__n);\u000a  }\u000aLAB_00403877:\u000a  b->num_lines = sVar2;\u000a  b->start_line = last_line_number + 1;\u000a  b->first_available = last_line_number + 1;\u000a  last_line_number = last_line_number + sVar2;\u000a  return sVar2;\u000a}\u000a\u000a
p311
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14 + 0x8]\nTEST R12,R12\nJZ 0x0040385c\nMOV RBX,qword ptr [R14 + 0x28]\nMOV ESI,0xa\nMOV RDI,RBX\nMOV RDX,R12\nCALL 0x00401850\nMOV R13,RAX\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x00403840\nNOP word ptr [RAX + RAX*0x1]\nMOV RBP,R13\nSUB RBP,RBX\nINC RBP\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00403930\nSUB R12,RBP\nMOV RBX,R13\nINC RBX\nINC R15\nMOV ESI,0xa\nMOV RDI,RBX\nMOV RDX,R12\nCALL 0x00401850\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00403800\nTEST R12,R12\nJZ 0x00403877\nCMP byte ptr [0x0060b438],0x1\nJNZ 0x00403861\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00403930\nINC R15\nJMP 0x00403877\nXOR R15D,R15D\nJMP 0x00403898\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x00405d80\nMOV RDI,RAX\nMOV RSI,R12\nCALL 0x004039a0\nMOV qword ptr [R14 + 0x20],R15\nMOV RAX,qword ptr [0x0060b450]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R14 + 0x10],RCX\nMOV qword ptr [R14 + 0x18],RCX\nADD RAX,R15\nMOV qword ptr [0x0060b450],RAX\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p312
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n4d 8b 66 08\n4d 85 e4\n0f 84 81 00 00 00\n49 8b 5e 28\nbe 0a 00 00 00\n48 89 df\n4c 89 e2\ne8 61 e0 ff ff\n49 89 c5\n45 31 ff\n4d 85 ed\n74 46\n66 0f 1f 44 00 00\n4c 89 ed\n48 29 dd\n48 ff c5\n4c 89 f7\n48 89 de\n48 89 ea\ne8 19 01 00 00\n49 29 ec\n4c 89 eb\n48 ff c3\n49 ff c7\nbe 0a 00 00 00\n48 89 df\n4c 89 e2\ne8 1d e0 ff ff\n49 89 c5\n4d 85 ed\n75 c5\n4d 85 e4\n74 37\n80 3d f1 7b 20 00 01\n75 18\n4c 89 f7\n48 89 de\n4c 89 e2\ne8 d9 00 00 00\n49 ff c7\neb 1b\n45 31 ff\neb 37\n48 89 df\n4c 89 e6\ne8 14 25 00 00\n48 89 c7\n4c 89 e6\ne8 29 01 00 00\n4d 89 7e 20\n48 8b 05 ce 7b 20 00\n48 8d 48 01\n49 89 4e 10\n49 89 4e 18\n4c 01 f8\n48 89 05 b8 7b 20 00\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p313
S'.text:00000000004037c0\n.text:00000000004037c1\n.text:00000000004037c3\n.text:00000000004037c5\n.text:00000000004037c7\n.text:00000000004037c9\n.text:00000000004037ca\n.text:00000000004037cb\n.text:00000000004037ce\n.text:00000000004037d2\n.text:00000000004037d5\n.text:00000000004037db\n.text:00000000004037df\n.text:00000000004037e4\n.text:00000000004037e7\n.text:00000000004037ea\n.text:00000000004037ef\n.text:00000000004037f2\n.text:00000000004037f5\n.text:00000000004037f8\n.text:00000000004037fa\n.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403806\n.text:0000000000403809\n.text:000000000040380c\n.text:000000000040380f\n.text:0000000000403812\n.text:0000000000403817\n.text:000000000040381a\n.text:000000000040381d\n.text:0000000000403820\n.text:0000000000403823\n.text:0000000000403828\n.text:000000000040382b\n.text:000000000040382e\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383b\n.text:000000000040383e\n.text:0000000000403840\n.text:0000000000403847\n.text:0000000000403849\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403852\n.text:0000000000403857\n.text:000000000040385a\n.text:000000000040385c\n.text:000000000040385f\n.text:0000000000403861\n.text:0000000000403864\n.text:0000000000403867\n.text:000000000040386c\n.text:000000000040386f\n.text:0000000000403872\n.text:0000000000403877\n.text:000000000040387b\n.text:0000000000403882\n.text:0000000000403886\n.text:000000000040388a\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403898\n.text:000000000040389b\n.text:000000000040389f\n.text:00000000004038a0\n.text:00000000004038a2\n.text:00000000004038a4\n.text:00000000004038a6\n.text:00000000004038a8\n.text:00000000004038a9\n'
p314
tp315
sS'memcpy'
p316
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060b160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060b160]\n'
p319
S'ff 25 7a 98 20 00\n'
p320
S'.plt:00000000004018e0\n'
p321
tp322
sS'close_stdout_set_ignore_EPIPE'
p323
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p324
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p325
S'MOV byte ptr [0x0060b460],DIL\nRET\n'
p326
S'40 88 3d f9 78 20 00\nc3\n'
p327
S'.text:0000000000403b60\n.text:0000000000403b67\n'
p328
tp329
sS'iswprint'
p330
(S'\n__stdcall iswprint(wint_t __wc)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060b228)();\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060b228]\n'
p333
S'ff 25 b2 97 20 00\n'
p334
S'.plt:0000000000401a70\n'
p335
tp336
sS'c_isspace'
p337
(S'\n__stdcall c_isspace()\n'
p338
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p339
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004068e5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p340
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p341
S'.text:00000000004068d0\n.text:00000000004068d3\n.text:00000000004068d6\n.text:00000000004068d8\n.text:00000000004068dd\n.text:00000000004068df\n.text:00000000004068e1\n.text:00000000004068e4\n.text:00000000004068e5\n.text:00000000004068e7\n'
p342
tp343
sS'new_control_record'
p344
(S'\n__stdcall new_control_record()\n'
p345
V\u000acontrol * new_control_record(void)\u000a\u000a{\u000a  control *pcVar1;\u000a  control *pcVar2;\u000a  control *pcVar3;\u000a  size_t sVar4;\u000a  size_t control_allocated;\u000a  \u000a  if (control_used == control_allocated) {\u000a    controls = (control *)x2nrealloc(controls,(size_t *)0x60b418,0x60);\u000a  }\u000a  sVar4 = control_used;\u000a  pcVar3 = controls;\u000a  pcVar1 = controls + control_used;\u000a  pcVar2 = controls + control_used;\u000a  control_used = control_used + 1;\u000a  pcVar2->regexpr = false;\u000a  pcVar3[sVar4].repeat_forever = false;\u000a  *(undefined4 *)&pcVar3[sVar4].offset = 0;\u000a  *(undefined4 *)((long)&pcVar3[sVar4].offset + 4) = 0;\u000a  *(undefined4 *)&pcVar3[sVar4].lines_required = 0;\u000a  *(undefined4 *)((long)&pcVar3[sVar4].lines_required + 4) = 0;\u000a  pcVar3[sVar4].repeat = 0;\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RAX,qword ptr [0x0060b340]\nCMP RAX,qword ptr [0x0060b418]\nJNZ 0x00402d02\nPUSH RAX\nMOV RDI,qword ptr [0x0060b338]\nMOV ESI,0x60b418\nMOV EDX,0x60\nCALL 0x00405cb0\nMOV qword ptr [0x0060b338],RAX\nADD RSP,0x8\nMOV RCX,qword ptr [0x0060b338]\nMOV RAX,qword ptr [0x0060b340]\nLEA RDX,[RAX + 0x1]\nMOV qword ptr [0x0060b340],RDX\nLEA RDX,[RAX + RAX*0x2]\nSHL RDX,0x5\nLEA RAX,[RCX + RDX*0x1]\nMOV byte ptr [RCX + RDX*0x1 + 0x1e],0x0\nMOV byte ptr [RCX + RDX*0x1 + 0x1c],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RCX + RDX*0x1],XMM0\nMOV qword ptr [RCX + RDX*0x1 + 0x10],0x0\nRET\n'
p347
S'48 8b 05 69 86 20 00\n48 3b 05 3a 87 20 00\n75 22\n50\n48 8b 3d 50 86 20 00\nbe 18 b4 60 00\nba 60 00 00 00\ne8 b9 2f 00 00\n48 89 05 3a 86 20 00\n48 83 c4 08\n48 8b 0d 2f 86 20 00\n48 8b 05 30 86 20 00\n48 8d 50 01\n48 89 15 25 86 20 00\n48 8d 14 40\n48 c1 e2 05\n48 8d 04 11\nc6 44 11 1e 00\nc6 44 11 1c 00\n0f 57 c0\n0f 11 04 11\n48 c7 44 11 10 00 00 00 00\nc3\n'
p348
S'.text:0000000000402cd0\n.text:0000000000402cd7\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce1\n.text:0000000000402ce8\n.text:0000000000402ced\n.text:0000000000402cf2\n.text:0000000000402cf7\n.text:0000000000402cfe\n.text:0000000000402d02\n.text:0000000000402d09\n.text:0000000000402d10\n.text:0000000000402d14\n.text:0000000000402d1b\n.text:0000000000402d1f\n.text:0000000000402d23\n.text:0000000000402d27\n.text:0000000000402d2c\n.text:0000000000402d31\n.text:0000000000402d34\n.text:0000000000402d38\n.text:0000000000402d41\n'
p349
tp350
sS'open'
p351
(S'\n__stdcall open(char * __file, int __oflag)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060b1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060b1d0]\n'
p354
S'ff 25 0a 98 20 00\n'
p355
S'.plt:00000000004019c0\n'
p356
tp357
sS'save_buffer'
p358
(S'\n__stdcall save_buffer(buffer_record * buf)\n'
p359
V\u000avoid save_buffer(buffer_record *buf)\u000a\u000a{\u000a  buffer_record *pbVar1;\u000a  buffer_record *pbVar2;\u000a  \u000a  buf->next = (buffer_record *)0x0;\u000a  buf->curr_line = buf->line_start;\u000a  pbVar1 = head;\u000a  if (head != (buffer_record *)0x0) {\u000a    do {\u000a      pbVar2 = pbVar1;\u000a      pbVar1 = pbVar2->next;\u000a    } while (pbVar1 != (buffer_record *)0x0);\u000a    pbVar2->next = buf;\u000a    return;\u000a  }\u000a  head = buf;\u000a  return;\u000a}\u000a\u000a
p360
S'MOV qword ptr [RDI + 0x40],0x0\nMOV RAX,qword ptr [RDI + 0x30]\nMOV qword ptr [RDI + 0x38],RAX\nMOV RCX,qword ptr [0x0060b430]\nTEST RCX,RCX\nJZ 0x004038e4\nNOP dword ptr [RAX]\nMOV RAX,RCX\nMOV RCX,qword ptr [RAX + 0x40]\nTEST RCX,RCX\nJNZ 0x004038d0\nADD RAX,0x40\nMOV qword ptr [RAX],RDI\nRET\nMOV EAX,0x60b430\nMOV qword ptr [RAX],RDI\nRET\n'
p361
S'48 c7 47 40 00 00 00 00\n48 8b 47 30\n48 89 47 38\n48 8b 0d 69 7b 20 00\n48 85 c9\n74 18\n0f 1f 40 00\n48 89 c8\n48 8b 48 40\n48 85 c9\n75 f4\n48 83 c0 40\n48 89 38\nc3\nb8 30 b4 60 00\n48 89 38\nc3\n'
p362
S'.text:00000000004038b0\n.text:00000000004038b8\n.text:00000000004038bc\n.text:00000000004038c0\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cc\n.text:00000000004038d0\n.text:00000000004038d3\n.text:00000000004038d7\n.text:00000000004038da\n.text:00000000004038dc\n.text:00000000004038e0\n.text:00000000004038e3\n.text:00000000004038e4\n.text:00000000004038e9\n.text:00000000004038ec\n'
p363
tp364
sS'clear_line_control'
p365
(S'\n__stdcall clear_line_control(line * p)\n'
p366
V\u000avoid clear_line_control(line *p)\u000a\u000a{\u000a  *(undefined4 *)&p->used = 0;\u000a  *(undefined4 *)((long)&p->used + 4) = 0;\u000a  *(undefined4 *)&p->insert_index = 0;\u000a  *(undefined4 *)((long)&p->insert_index + 4) = 0;\u000a  p->retrieve_index = 0;\u000a  return;\u000a}\u000a\u000a
p367
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x10],0x0\nRET\n'
p368
S'0f 57 c0\n0f 11 07\n48 c7 47 10 00 00 00 00\nc3\n'
p369
S'.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a06\n.text:0000000000403a0e\n'
p370
tp371
sS'quotearg_n_custom_mem'
p372
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p373
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060b4a0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060b490]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b480]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b470]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403ef0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404d80\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p375
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 f7 62 20 00\n48 89 44 24 30\n0f 10 05 db 62 20 00\n0f 29 44 24 20\n0f 10 05 bf 62 20 00\n0f 29 44 24 10\n0f 10 05 a3 62 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p376
S'.text:0000000000405190\n.text:0000000000405191\n.text:0000000000405193\n.text:0000000000405195\n.text:0000000000405196\n.text:000000000040519a\n.text:000000000040519d\n.text:00000000004051a0\n.text:00000000004051a2\n.text:00000000004051a9\n.text:00000000004051ae\n.text:00000000004051b5\n.text:00000000004051ba\n.text:00000000004051c1\n.text:00000000004051c6\n.text:00000000004051cd\n.text:00000000004051d1\n.text:00000000004051d4\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051de\n.text:00000000004051e1\n.text:00000000004051e4\n.text:00000000004051e7\n.text:00000000004051ec\n.text:00000000004051f0\n.text:00000000004051f1\n.text:00000000004051f3\n.text:00000000004051f5\n.text:00000000004051f6\n'
p377
tp378
sS'_init'
p379
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p380
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060aff8;\u000a  if (PTR___gmon_start___0060aff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060aff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060aff8]\nTEST RAX,RAX\nJZ 0x0040163a\nCALL RAX\nADD RSP,0x8\nRET\n'
p382
S'48 83 ec 08\n48 8b 05 c5 99 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p383
S'.init:0000000000401628\n.init:000000000040162c\n.init:0000000000401633\n.init:0000000000401636\n.init:0000000000401638\n.init:000000000040163a\n.init:000000000040163e\n'
p384
tp385
sS'free_buffer'
p386
(S'\n__stdcall free_buffer(buffer_record * buf)\n'
p387
V\u000avoid free_buffer(buffer_record *buf)\u000a\u000a{\u000a  line *plVar1;\u000a  line *__ptr;\u000a  \u000a  __ptr = buf->line_start;\u000a  while (__ptr != (line *)0x0) {\u000a    plVar1 = __ptr->next;\u000a    free(__ptr);\u000a    __ptr = plVar1;\u000a  }\u000a  buf->line_start = (line *)0x0;\u000a  free(buf->buffer);\u000a  buf->buffer = (char *)0x0;\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RDI,qword ptr [R14 + 0x30]\nTEST RDI,RDI\nJZ 0x004035c4\nMOV RBX,qword ptr [0x518 + RDI]\nCALL 0x00401690\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004035b0\nMOV qword ptr [R14 + 0x30],0x0\nMOV RDI,qword ptr [R14 + 0x28]\nCALL 0x00401690\nMOV qword ptr [R14 + 0x28],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p389
S'41 56\n53\n50\n49 89 fe\n49 8b 7e 30\n48 85 ff\n74 14\n48 8b 9f 18 05 00 00\ne8 d4 e0 ff ff\n48 85 db\n48 89 df\n75 ec\n49 c7 46 30 00 00 00 00\n49 8b 7e 28\ne8 bb e0 ff ff\n49 c7 46 28 00 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p390
S'.text:00000000004035a0\n.text:00000000004035a2\n.text:00000000004035a3\n.text:00000000004035a4\n.text:00000000004035a7\n.text:00000000004035ab\n.text:00000000004035ae\n.text:00000000004035b0\n.text:00000000004035b7\n.text:00000000004035bc\n.text:00000000004035bf\n.text:00000000004035c2\n.text:00000000004035c4\n.text:00000000004035cc\n.text:00000000004035d0\n.text:00000000004035d5\n.text:00000000004035dd\n.text:00000000004035e1\n.text:00000000004035e2\n.text:00000000004035e4\n'
p391
tp392
sS'set_quoting_flags'
p393
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p394
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'TEST RDI,RDI\nMOV ECX,0x60b470\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p396
S'48 85 ff\nb9 70 b4 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p397
S'.text:0000000000403ed0\n.text:0000000000403ed3\n.text:0000000000403ed8\n.text:0000000000403edc\n.text:0000000000403edf\n.text:0000000000403ee2\n'
p398
tp399
sS'realloc'
p400
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060b1a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060b1a8]\n'
p403
S'ff 25 32 98 20 00\n'
p404
S'.plt:0000000000401970\n'
p405
tp406
sS'__fprintf_chk'
p407
(S'\n__stdcall __fprintf_chk()\n'
p408
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060b210)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060b210]\n'
p410
S'ff 25 ca 97 20 00\n'
p411
S'.plt:0000000000401a40\n'
p412
tp413
sS'get_charset_aliases'
p414
(S'\n__stdcall get_charset_aliases()\n'
p415
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00406c54_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00406c54_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00406c54_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00406c54_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00406c54_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00406c54_caseD_9;\u000a      case -1:\u000a        goto switchD_00406c54_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00406cad:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00406cb3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00406c54_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00406cb3;\u000a  }\u000a  goto LAB_00406cad;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060b5b8]\nTEST R15,R15\nJNZ 0x00406cc2\nMOV EDI,0x408d74\nCALL 0x00401650\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406a78\nCMP byte ptr [RBX],0x0\nJNZ 0x00406a7d\nMOV EBX,0x408d84\nMOV RDI,RBX\nCALL 0x004017a0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406a97\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00406a99\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401900\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00406aed\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004018e0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00406af8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00406b15\nMOV R15D,0x4082d9\nJMP 0x00406cbb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004019c0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00406cad\nMOV ESI,0x407164\nMOV EDI,EBP\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406c74\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00406c40\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401700\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401700\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00406c40\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401930\nMOV ESI,0x408d93\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401830\nCMP EAX,0x2\nJL 0x00406c94\nMOV RDI,R12\nCALL 0x004017a0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004017a0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00406c1d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401970\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00406b64\nJMP 0x00406c7d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401900\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00406b64\nJMP 0x00406c7d\nMOV RDI,RBX\nCALL 0x00401720\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00406ba7\nJMP qword ptr [0x408c38 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401720\nCMP EAX,-0x1\nJZ 0x00406c94\nCMP EAX,0xa\nJNZ 0x00406c60\nJMP 0x00406c40\nMOV EDI,EBP\nCALL 0x00401840\nJMP 0x00406cad\nMOV RDI,R15\nCALL 0x00401690\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004064f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00406cad\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00406cb3\nMOV R15D,0x4082d9\nMOV RDI,R13\nCALL 0x00401690\nMOV qword ptr [0x0060b5b8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p417
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 60 4b 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 74 8d 40 00\ne8 e5 ab ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 84 8d 40 00\n48 89 df\ne8 1b ad ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 59 ae ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 23 ae ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf d9 82 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 9c ae ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 64 71 40 00\n89 ef\ne8 46 ae ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b ab ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b ab ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 7f ad ff ff\nbe 93 8d 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a ac ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 c9 ab ff ff\n49 89 c4\n48 89 ef\ne8 be ab ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 66 ad ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 d5 ac ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 d8 aa ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 38 8c 40 00\n48 89 df\ne8 b8 aa ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 ab ff ff\neb 30\n4c 89 ff\ne8 0b aa ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 54 f8 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf d9 82 40 00\n4c 89 ef\ne8 d5 a9 ff ff\n4c 89 3d f6 48 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p418
S'.text:0000000000406a40\n.text:0000000000406a41\n.text:0000000000406a43\n.text:0000000000406a45\n.text:0000000000406a47\n.text:0000000000406a49\n.text:0000000000406a4a\n.text:0000000000406a51\n.text:0000000000406a58\n.text:0000000000406a5b\n.text:0000000000406a61\n.text:0000000000406a66\n.text:0000000000406a6b\n.text:0000000000406a6e\n.text:0000000000406a71\n.text:0000000000406a73\n.text:0000000000406a76\n.text:0000000000406a78\n.text:0000000000406a7d\n.text:0000000000406a80\n.text:0000000000406a85\n.text:0000000000406a88\n.text:0000000000406a8b\n.text:0000000000406a8d\n.text:0000000000406a92\n.text:0000000000406a95\n.text:0000000000406a97\n.text:0000000000406a99\n.text:0000000000406a9d\n.text:0000000000406aa2\n.text:0000000000406aa7\n.text:0000000000406aaa\n.text:0000000000406aad\n.text:0000000000406aaf\n.text:0000000000406ab2\n.text:0000000000406ab5\n.text:0000000000406ab8\n.text:0000000000406abd\n.text:0000000000406ac0\n.text:0000000000406ac3\n.text:0000000000406ac6\n.text:0000000000406ac8\n.text:0000000000406ace\n.text:0000000000406ad8\n.text:0000000000406add\n.text:0000000000406ae7\n.text:0000000000406aeb\n.text:0000000000406aed\n.text:0000000000406af3\n.text:0000000000406af8\n.text:0000000000406b02\n.text:0000000000406b07\n.text:0000000000406b11\n.text:0000000000406b15\n.text:0000000000406b1a\n.text:0000000000406b1c\n.text:0000000000406b1f\n.text:0000000000406b24\n.text:0000000000406b26\n.text:0000000000406b28\n.text:0000000000406b2e\n.text:0000000000406b33\n.text:0000000000406b35\n.text:0000000000406b3a\n.text:0000000000406b3d\n.text:0000000000406b40\n.text:0000000000406b46\n.text:0000000000406b4b\n.text:0000000000406b50\n.text:0000000000406b52\n.text:0000000000406b57\n.text:0000000000406b5a\n.text:0000000000406b5f\n.text:0000000000406b64\n.text:0000000000406b69\n.text:0000000000406b6c\n.text:0000000000406b6f\n.text:0000000000406b72\n.text:0000000000406b75\n.text:0000000000406b78\n.text:0000000000406b7d\n.text:0000000000406b80\n.text:0000000000406b85\n.text:0000000000406b88\n.text:0000000000406b8d\n.text:0000000000406b90\n.text:0000000000406b95\n.text:0000000000406b9a\n.text:0000000000406b9d\n.text:0000000000406ba2\n.text:0000000000406ba7\n.text:0000000000406ba9\n.text:0000000000406bac\n.text:0000000000406bb1\n.text:0000000000406bb6\n.text:0000000000406bb8\n.text:0000000000406bbb\n.text:0000000000406bbe\n.text:0000000000406bc1\n.text:0000000000406bc6\n.text:0000000000406bc9\n.text:0000000000406bcf\n.text:0000000000406bd2\n.text:0000000000406bd7\n.text:0000000000406bda\n.text:0000000000406bdd\n.text:0000000000406be2\n.text:0000000000406be5\n.text:0000000000406bea\n.text:0000000000406bef\n.text:0000000000406bf2\n.text:0000000000406bf4\n.text:0000000000406bf8\n.text:0000000000406bfd\n.text:0000000000406c02\n.text:0000000000406c05\n.text:0000000000406c0a\n.text:0000000000406c0d\n.text:0000000000406c12\n.text:0000000000406c15\n.text:0000000000406c1b\n.text:0000000000406c1d\n.text:0000000000406c22\n.text:0000000000406c26\n.text:0000000000406c2b\n.text:0000000000406c2e\n.text:0000000000406c31\n.text:0000000000406c37\n.text:0000000000406c40\n.text:0000000000406c43\n.text:0000000000406c48\n.text:0000000000406c4b\n.text:0000000000406c4e\n.text:0000000000406c54\n.text:0000000000406c60\n.text:0000000000406c63\n.text:0000000000406c68\n.text:0000000000406c6b\n.text:0000000000406c6d\n.text:0000000000406c70\n.text:0000000000406c72\n.text:0000000000406c74\n.text:0000000000406c76\n.text:0000000000406c7b\n.text:0000000000406c7d\n.text:0000000000406c80\n.text:0000000000406c85\n.text:0000000000406c87\n.text:0000000000406c8c\n.text:0000000000406c8f\n.text:0000000000406c94\n.text:0000000000406c97\n.text:0000000000406c9c\n.text:0000000000406ca1\n.text:0000000000406ca4\n.text:0000000000406ca6\n.text:0000000000406cab\n.text:0000000000406cad\n.text:0000000000406cb3\n.text:0000000000406cb6\n.text:0000000000406cbb\n.text:0000000000406cc2\n.text:0000000000406cc5\n.text:0000000000406ccc\n.text:0000000000406ccd\n.text:0000000000406ccf\n.text:0000000000406cd1\n.text:0000000000406cd3\n.text:0000000000406cd5\n.text:0000000000406cd6\n'
p419
tp420
sS're_search'
p421
(S'\n__stdcall re_search(re_pattern_buffer * __buffer, char * __string, int __length, int __start, int __range, re_registers * __regs)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint re_search(re_pattern_buffer *__buffer,char *__string,int __length,int __start,int __range,\u000a             re_registers *__regs)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_re_search_0060b190)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060b190]\n'
p424
S'ff 25 4a 98 20 00\n'
p425
S'.plt:0000000000401940\n'
p426
tp427
sS'nl_langinfo'
p428
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060b180)();\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060b180]\n'
p431
S'ff 25 5a 98 20 00\n'
p432
S'.plt:0000000000401920\n'
p433
tp434
sS'x2realloc'
p435
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p436
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'MOV EDX,0x1\nJMP 0x00405cb0\n'
p438
S'ba 01 00 00 00\neb 89\n'
p439
S'.text:0000000000405d20\n.text:0000000000405d25\n'
p440
tp441
sS'strlen'
p442
(S'\n__stdcall strlen(char * __s)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060b0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060b0c0]\n'
p445
S'ff 25 1a 99 20 00\n'
p446
S'.plt:00000000004017a0\n'
p447
tp448
sS'memcmp'
p449
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060b128)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060b128]\n'
p452
S'ff 25 b2 98 20 00\n'
p453
S'.plt:0000000000401870\n'
p454
tp455
sS'quotearg_n_style_mem'
p456
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p457
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404fb0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404d80\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000405010\n.text:0000000000405011\n.text:0000000000405013\n.text:0000000000405015\n.text:0000000000405016\n.text:000000000040501a\n.text:000000000040501d\n.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405025\n.text:0000000000405028\n.text:000000000040502d\n.text:000000000040502f\n.text:0000000000405032\n.text:0000000000405035\n.text:0000000000405038\n.text:000000000040503d\n.text:0000000000405041\n.text:0000000000405042\n.text:0000000000405044\n.text:0000000000405046\n.text:0000000000405047\n'
p461
tp462
sS'_exit'
p463
(S'\n__stdcall _exit(int __status)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060b068)();\u000a  return;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060b068]\n'
p466
S'ff 25 72 99 20 00\n'
p467
S'.plt:00000000004016f0\n'
p468
tp469
sS'get_new_buffer'
p470
(S'\n__stdcall get_new_buffer(size_t min_size)\n'
p471
V\u000abuffer_record * get_new_buffer(size_t min_size)\u000a\u000a{\u000a  buffer_record *pbVar1;\u000a  uintmax_t uVar2;\u000a  size_t size;\u000a  \u000a  if (min_size < 0x2000) {\u000a    size = 0x1fff;\u000a  }\u000a  else {\u000a    size = (min_size + 0xffffe800 & 0xfffff800) + 0x1fff;\u000a  }\u000a  pbVar1 = create_new_buffer(size);\u000a  pbVar1->num_lines = 0;\u000a  pbVar1->bytes_used = 0;\u000a  uVar2 = last_line_number + 1;\u000a  pbVar1->first_available = uVar2;\u000a  pbVar1->start_line = uVar2;\u000a  pbVar1->next = (buffer_record *)0x0;\u000a  return pbVar1;\u000a}\u000a\u000a
p472
S'CMP RDI,0x2000\nJC 0x00403720\nADD RDI,0xffffe800\nAND RDI,0xfffff800\nADD RDI,0x1fff\nJMP 0x00403725\nMOV EDI,0x1fff\nPUSH RAX\nCALL 0x004038f0\nMOV qword ptr [RAX + 0x20],0x0\nMOV qword ptr [RAX + 0x8],0x0\nMOV RCX,qword ptr [0x0060b450]\nINC RCX\nMOV qword ptr [RAX + 0x18],RCX\nMOV qword ptr [RAX + 0x10],RCX\nMOV qword ptr [RAX + 0x40],0x0\nPOP RCX\nRET\n'
p473
S'48 81 ff 00 20 00 00\n72 17\n48 81 c7 00 e8 ff ff\n48 81 e7 00 f8 ff ff\n48 81 c7 ff 1f 00 00\neb 05\nbf ff 1f 00 00\n50\ne8 c5 01 00 00\n48 c7 40 20 00 00 00 00\n48 c7 40 08 00 00 00 00\n48 8b 0d 0e 7d 20 00\n48 ff c1\n48 89 48 18\n48 89 48 10\n48 c7 40 40 00 00 00 00\n59\nc3\n'
p474
S'.text:0000000000403700\n.text:0000000000403707\n.text:0000000000403709\n.text:0000000000403710\n.text:0000000000403717\n.text:000000000040371e\n.text:0000000000403720\n.text:0000000000403725\n.text:0000000000403726\n.text:000000000040372b\n.text:0000000000403733\n.text:000000000040373b\n.text:0000000000403742\n.text:0000000000403745\n.text:0000000000403749\n.text:000000000040374d\n.text:0000000000403755\n.text:0000000000403756\n'
p475
tp476
sS'bkm_scale_by_power'
p477
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p478
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00406491\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00406430\nOR EBP,EAX\nDEC EBX\nJNZ 0x00406480\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p480
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p481
S'.text:0000000000406460\n.text:0000000000406461\n.text:0000000000406463\n.text:0000000000406465\n.text:0000000000406466\n.text:0000000000406467\n.text:0000000000406469\n.text:000000000040646c\n.text:000000000040646f\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406475\n.text:0000000000406480\n.text:0000000000406483\n.text:0000000000406486\n.text:000000000040648b\n.text:000000000040648d\n.text:000000000040648f\n.text:0000000000406491\n.text:0000000000406493\n.text:0000000000406497\n.text:0000000000406498\n.text:000000000040649a\n.text:000000000040649c\n.text:000000000040649d\n'
p482
tp483
sS'xrealloc'
p484
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p485
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p486
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405c97\nTEST RBX,RBX\nJNZ 0x00405c97\nCALL 0x00401690\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401970\nTEST RBX,RBX\nJZ 0x00405ca9\nTEST RAX,RAX\nJZ 0x00405cab\nPOP RBX\nRET\nCALL 0x00401bb0\n'
p487
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 fd b9 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 d1 bc ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 00 bf ff ff\n'
p488
S'.text:0000000000405c80\n.text:0000000000405c81\n.text:0000000000405c84\n.text:0000000000405c87\n.text:0000000000405c89\n.text:0000000000405c8c\n.text:0000000000405c8e\n.text:0000000000405c93\n.text:0000000000405c95\n.text:0000000000405c96\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405c9f\n.text:0000000000405ca2\n.text:0000000000405ca4\n.text:0000000000405ca7\n.text:0000000000405ca9\n.text:0000000000405caa\n.text:0000000000405cab\n'
p489
tp490
sS'signal'
p491
(S'\n__stdcall signal(int __sig, __sighandler_t __handler)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__sighandler_t signal(int __sig,__sighandler_t __handler)\u000a\u000a{\u000a  __sighandler_t pVar1;\u000a  \u000a  pVar1 = (__sighandler_t)(*(code *)PTR_signal_0060b150)();\u000a  return pVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060b150]\n'
p494
S'ff 25 8a 98 20 00\n'
p495
S'.plt:00000000004018c0\n'
p496
tp497
sS'set_input_file'
p498
(S'\n__stdcall set_input_file(char * name)\n'
p499
V\u000avoid set_input_file(char *name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  if ((*name != '-') || (name[1] != 0)) {\u000a    iVar2 = fd_reopen((char *)0x0);\u000a    if (iVar2 < 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"cannot open %s for reading",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar4,pcVar5);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RBX],0x2d\nJNZ 0x004022a2\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004022b4\nXOR EDI,EDI\nXOR EDX,EDX\nXOR ECX,ECX\nMOV RSI,RBX\nCALL 0x00403c30\nTEST EAX,EAX\nJS 0x004022b9\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x004016c0\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40780e\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x00405050\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004019b0\n'
p501
S'55\n41 56\n53\n48 89 fb\n80 3b 2d\n75 06\n80 7b 01 00\n74 12\n31 ff\n31 d2\n31 c9\n48 89 de\ne8 80 19 00 00\n85 c0\n78 05\n5b\n41 5e\n5d\nc3\ne8 02 f4 ff ff\n44 8b 30\n31 ff\nbe 0e 78 40 00\nba 05 00 00 00\ne8 ae f4 ff ff\n48 89 c5\nbf 04 00 00 00\n48 89 de\ne8 6e 2d 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 f6\n48 89 ea\n5b\n41 5e\n5d\ne9 b5 f6 ff ff\n'
p502
S'.text:0000000000402290\n.text:0000000000402291\n.text:0000000000402293\n.text:0000000000402294\n.text:0000000000402297\n.text:000000000040229a\n.text:000000000040229c\n.text:00000000004022a0\n.text:00000000004022a2\n.text:00000000004022a4\n.text:00000000004022a6\n.text:00000000004022a8\n.text:00000000004022ab\n.text:00000000004022b0\n.text:00000000004022b2\n.text:00000000004022b4\n.text:00000000004022b5\n.text:00000000004022b7\n.text:00000000004022b8\n.text:00000000004022b9\n.text:00000000004022be\n.text:00000000004022c1\n.text:00000000004022c3\n.text:00000000004022c8\n.text:00000000004022cd\n.text:00000000004022d2\n.text:00000000004022d5\n.text:00000000004022da\n.text:00000000004022dd\n.text:00000000004022e2\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ec\n.text:00000000004022ef\n.text:00000000004022f2\n.text:00000000004022f3\n.text:00000000004022f5\n.text:00000000004022f6\n'
p503
tp504
sS'__snprintf_chk'
p505
(S'\n__stdcall __snprintf_chk()\n'
p506
V\u000avoid __snprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___snprintf_chk_0060b028)();\u000a  return;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060b028]\n'
p508
S'ff 25 b2 99 20 00\n'
p509
S'.plt:0000000000401670\n'
p510
tp511
sS'close_stdout'
p512
(S'\n__stdcall close_stdout()\n'
p513
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403b97;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40789d,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403b97:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060b2e8]\nCALL 0x00406940\nTEST EAX,EAX\nJZ 0x00403b97\nCMP byte ptr [0x0060b460],0x0\nJZ 0x00403bac\nCALL 0x004016c0\nCMP dword ptr [RAX],0x20\nJNZ 0x00403bac\nMOV RDI,qword ptr [0x0060b320]\nCALL 0x00406940\nTEST EAX,EAX\nJNZ 0x00403bf1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407bfa\nMOV EDX,0x5\nCALL 0x00401780\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060b458]\nCALL 0x004016c0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403bfc\nXOR EDI,EDI\nMOV EDX,0x40789d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004019b0\nMOV EDI,dword ptr [0x0060b268]\nCALL 0x004016f0\nMOV EDI,dword ptr [0x0060b268]\nCALL 0x004016f0\nMOV RDI,RBX\nCALL 0x00405110\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x407c06\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004019b0\nMOV EDI,dword ptr [0x0060b268]\nCALL 0x004016f0\n'
p515
S'55\n41 56\n53\n48 8b 3d 6d 77 20 00\ne8 c0 2d 00 00\n85 c0\n74 13\n80 3d d5 78 20 00 00\n74 1f\ne8 2e db ff ff\n83 38 20\n75 15\n48 8b 3d 82 77 20 00\ne8 9d 2d 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe fa 7b 40 00\nba 05 00 00 00\ne8 c3 db ff ff\n49 89 c6\n48 8b 1d 91 78 20 00\ne8 f4 da ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 9d 78 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca dd ff ff\n8b 3d 7c 76 20 00\ne8 ff da ff ff\n8b 3d 71 76 20 00\ne8 f4 da ff ff\n48 89 df\ne8 0c 15 00 00\n48 89 c1\n31 ff\nba 06 7c 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 dd ff ff\n8b 3d 48 76 20 00\ne8 cb da ff ff\n'
p516
S'.text:0000000000403b70\n.text:0000000000403b71\n.text:0000000000403b73\n.text:0000000000403b74\n.text:0000000000403b7b\n.text:0000000000403b80\n.text:0000000000403b82\n.text:0000000000403b84\n.text:0000000000403b8b\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b95\n.text:0000000000403b97\n.text:0000000000403b9e\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403ba8\n.text:0000000000403baa\n.text:0000000000403bab\n.text:0000000000403bac\n.text:0000000000403bae\n.text:0000000000403bb3\n.text:0000000000403bb8\n.text:0000000000403bbd\n.text:0000000000403bc0\n.text:0000000000403bc7\n.text:0000000000403bcc\n.text:0000000000403bcf\n.text:0000000000403bd1\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bda\n.text:0000000000403bdc\n.text:0000000000403bde\n.text:0000000000403be1\n.text:0000000000403be6\n.text:0000000000403bec\n.text:0000000000403bf1\n.text:0000000000403bf7\n.text:0000000000403bfc\n.text:0000000000403bff\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c10\n.text:0000000000403c12\n.text:0000000000403c15\n.text:0000000000403c1a\n.text:0000000000403c20\n'
p517
tp518
sS'version_etc_ar'
p519
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p520
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p521
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405a90\nJMP 0x00405720\n'
p522
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p523
S'.text:0000000000405a80\n.text:0000000000405a87\n.text:0000000000405a90\n.text:0000000000405a96\n.text:0000000000405a9a\n.text:0000000000405a9c\n'
p524
tp525
sS'strtoumax'
p526
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060b1e8)();\u000a  return uVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0060b1e8]\n'
p529
S'ff 25 f2 97 20 00\n'
p530
S'.plt:00000000004019f0\n'
p531
tp532
sS'dump_rest_of_file'
p533
(S'\n__stdcall dump_rest_of_file()\n'
p534
V\u000aundefined8 dump_rest_of_file(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  cstring *line;\u000a  \u000a  while( true ) {\u000a    line = remove_line();\u000a    if (line == (cstring *)0x0) break;\u000a    save_line_to_file(line);\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p535
S'PUSH RAX\nJMP 0x004031f8\nMOV RDI,RAX\nCALL 0x00403470\nCALL 0x00403210\nTEST RAX,RAX\nJNZ 0x004031f0\nPOP RAX\nRET\n'
p536
S'50\neb 15\n48 89 c7\ne8 78 02 00 00\ne8 13 00 00 00\n48 85 c0\n75 ee\n58\nc3\n'
p537
S'.text:00000000004031e0\n.text:00000000004031e1\n.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403200\n.text:0000000000403202\n.text:0000000000403203\n'
p538
tp539
sS'c_isxdigit'
p540
(S'\n__stdcall c_isxdigit()\n'
p541
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p542
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040691b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p543
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p544
S'.text:0000000000406900\n.text:0000000000406903\n.text:0000000000406906\n.text:0000000000406908\n.text:0000000000406912\n.text:0000000000406914\n.text:0000000000406917\n.text:000000000040691a\n.text:000000000040691b\n.text:000000000040691d\n'
p545
tp546
sS'__libc_csu_fini'
p547
(S'\n__stdcall __libc_csu_fini()\n'
p548
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p549
S'RET\n'
p550
S'f3 c3\n'
p551
S'.text:0000000000406d50\n'
p552
tp553
sS'remove_line'
p554
(S'\n__stdcall remove_line()\n'
p555
V\u000acstring * remove_line(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  line *plVar2;\u000a  size_t sVar3;\u000a  line *plVar4;\u000a  buffer_record *pbVar5;\u000a  buffer_record *prev_buf;\u000a  _Bool _Var6;\u000a  size_t sVar7;\u000a  \u000a  if (prev_buf != (buffer_record *)0x0) {\u000a    free_buffer(prev_buf);\u000a    free(prev_buf);\u000a    prev_buf = (buffer_record *)0x0;\u000a  }\u000a  if (head == (buffer_record *)0x0) {\u000a    _Var6 = load_buffer();\u000a    if (_Var6 == false) {\u000a      return (cstring *)0x0;\u000a    }\u000a  }\u000a  pbVar5 = head;\u000a  uVar1 = head->first_available;\u000a  if (current_line < uVar1) {\u000a    current_line = uVar1;\u000a  }\u000a  head->first_available = uVar1 + 1;\u000a  plVar2 = pbVar5->curr_line;\u000a  sVar3 = plVar2->retrieve_index;\u000a  sVar7 = sVar3 + 1;\u000a  plVar2->retrieve_index = sVar7;\u000a  if (sVar7 == plVar2->used) {\u000a    plVar4 = plVar2->next;\u000a    pbVar5->curr_line = plVar4;\u000a    if ((plVar4 == (line *)0x0) || (plVar4->used == 0)) {\u000a      head = pbVar5->next;\u000a    }\u000a  }\u000a  return plVar2->starts + sVar3;\u000a}\u000a\u000a
p556
S'PUSH RAX\nMOV RDI,qword ptr [0x0060b428]\nTEST RDI,RDI\nJZ 0x00403239\nCALL 0x004035a0\nMOV RDI,qword ptr [0x0060b428]\nCALL 0x00401690\nMOV qword ptr [0x0060b428],0x0\nCMP qword ptr [0x0060b430],0x0\nJNZ 0x0040324c\nCALL 0x004035f0\nTEST AL,AL\nJZ 0x004032b8\nMOV RCX,qword ptr [0x0060b430]\nMOV RAX,qword ptr [RCX + 0x18]\nCMP qword ptr [0x0060b420],RAX\nJNC 0x00403267\nMOV qword ptr [0x0060b420],RAX\nINC RAX\nMOV qword ptr [RCX + 0x18],RAX\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RSI,qword ptr [RDX + 0x10]\nMOV RAX,RSI\nSHL RAX,0x4\nLEA RAX,[RDX + RAX*0x1 + 0x18]\nINC RSI\nMOV qword ptr [RDX + 0x10],RSI\nCMP RSI,qword ptr [RDX]\nJNZ 0x004032b6\nMOV RDX,qword ptr [0x518 + RDX]\nMOV qword ptr [RCX + 0x38],RDX\nTEST RDX,RDX\nJZ 0x004032a4\nCMP qword ptr [RDX],0x0\nJNZ 0x004032b6\nMOV qword ptr [0x0060b428],RCX\nMOV RCX,qword ptr [RCX + 0x40]\nMOV qword ptr [0x0060b430],RCX\nPOP RCX\nRET\nXOR EAX,EAX\nPOP RCX\nRET\n'
p557
S'50\n48 8b 3d 10 82 20 00\n48 85 ff\n74 1c\ne8 7e 03 00 00\n48 8b 3d ff 81 20 00\ne8 62 e4 ff ff\n48 c7 05 ef 81 20 00 00 00 00 00\n48 83 3d ef 81 20 00 00\n75 09\ne8 a8 03 00 00\n84 c0\n74 6c\n48 8b 0d dd 81 20 00\n48 8b 41 18\n48 39 05 c2 81 20 00\n73 07\n48 89 05 b9 81 20 00\n48 ff c0\n48 89 41 18\n48 8b 51 38\n48 8b 72 10\n48 89 f0\n48 c1 e0 04\n48 8d 44 02 18\n48 ff c6\n48 89 72 10\n48 3b 32\n75 28\n48 8b 92 18 05 00 00\n48 89 51 38\n48 85 d2\n74 06\n48 83 3a 00\n75 12\n48 89 0d 7d 81 20 00\n48 8b 49 40\n48 89 0d 7a 81 20 00\n59\nc3\n31 c0\n59\nc3\n'
p558
S'.text:0000000000403210\n.text:0000000000403211\n.text:0000000000403218\n.text:000000000040321b\n.text:000000000040321d\n.text:0000000000403222\n.text:0000000000403229\n.text:000000000040322e\n.text:0000000000403239\n.text:0000000000403241\n.text:0000000000403243\n.text:0000000000403248\n.text:000000000040324a\n.text:000000000040324c\n.text:0000000000403253\n.text:0000000000403257\n.text:000000000040325e\n.text:0000000000403260\n.text:0000000000403267\n.text:000000000040326a\n.text:000000000040326e\n.text:0000000000403272\n.text:0000000000403276\n.text:0000000000403279\n.text:000000000040327d\n.text:0000000000403282\n.text:0000000000403285\n.text:0000000000403289\n.text:000000000040328c\n.text:000000000040328e\n.text:0000000000403295\n.text:0000000000403299\n.text:000000000040329c\n.text:000000000040329e\n.text:00000000004032a2\n.text:00000000004032a4\n.text:00000000004032ab\n.text:00000000004032af\n.text:00000000004032b6\n.text:00000000004032b7\n.text:00000000004032b8\n.text:00000000004032ba\n.text:00000000004032bb\n'
p559
tp560
sS'abort'
p561
(S'\n__stdcall abort()\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060b048)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060b048]\n'
p564
S'ff 25 92 99 20 00\n'
p565
S'.plt:00000000004016b0\n'
p566
tp567
sS'xstrtoimax'
p568
(S'\n__stdcall xstrtoimax(char * s, char * * ptr, intmax_t * val, char * valid_suffixes)\n'
p569
V\u000astrtol_error xstrtoimax(char *s,char **ptr,intmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  char **__endptr;\u000a  strtol_error sVar7;\u000a  strtol_error sVar8;\u000a  intmax_t local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)");\u000a  }\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  local_40 = strtoimax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar1 = **__endptr;\u000a    if (cVar1 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar4 = strchr(__s,(int)cVar1);\u000a    if (pcVar4 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_40 = 1;\u000a    sVar7 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar3 == 0) {\u000a      sVar7 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar3 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar7 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar8 = sVar7;\u000a    if (__s == (char *)0x0) goto LAB_004060f4;\u000a  }\u000a  pcVar4 = *__endptr;\u000a  sVar8 = sVar7;\u000a  if (*pcVar4 == 0) goto LAB_004060f4;\u000a  pcVar5 = strchr(__s,(int)*pcVar4);\u000a  if (pcVar5 == (char *)0x0) goto switchD_00406009_caseD_43;\u000a  pcVar5 = strchr(__s,0x30);\u000a  if (pcVar5 == (char *)0x0) {\u000aLAB_00405fe7:\u000a    lVar6 = 1;\u000a  }\u000a  else {\u000a    cVar1 = pcVar4[1];\u000a    if ((cVar1 == 'B') || (cVar1 == 'D')) {\u000a      lVar6 = 2;\u000a    }\u000a    else {\u000a      if (cVar1 != 'i') goto LAB_00405fe7;\u000a      lVar6 = (ulong)(pcVar4[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004060d1;\u000a  default:\u000aswitchD_00406009_caseD_43:\u000a    *(intmax_t *)valid_suffixes = local_40;\u000a    return sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'P':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Y':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Z':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004060d1;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004060d1:\u000a    sVar2 = bkm_scale(&local_40);\u000a  }\u000a  pcVar4 = *__endptr;\u000a  *__endptr = pcVar4 + lVar6;\u000a  sVar8 = sVar2 | sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar4[lVar6] == 0) {\u000a    sVar8 = sVar2 | sVar7;\u000a  }\u000aLAB_004060f4:\u000a  *(intmax_t *)valid_suffixes = local_40;\u000a  return sVar8;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RDI\nCMP EBP,0x25\nJNC 0x0040610e\nTEST RSI,RSI\nLEA R12,[RSP + 0x10]\nCMOVNZ R12,RSI\nCALL 0x004016c0\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,EBP\nCALL 0x004016a0\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [R12]\nCMP RAX,R15\nJZ 0x00405f4c\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x00405f85\nMOV R15D,0x4\nCMP EAX,0x22\nJNZ 0x004060fc\nMOV R15D,0x1\nTEST R13,R13\nJNZ 0x00405f91\nJMP 0x004060f4\nMOV R15D,0x4\nTEST R13,R13\nJZ 0x004060fc\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004060fc\nMOV RDI,R13\nCALL 0x004017e0\nTEST RAX,RAX\nJZ 0x004060fc\nMOV qword ptr [RSP + 0x8],0x1\nXOR R15D,R15D\nJMP 0x00405f91\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x004060f4\nMOV RBX,qword ptr [R12]\nMOVSX ESI,byte ptr [RBX]\nTEST ESI,ESI\nJZ 0x004060f4\nMOV RDI,R13\nCALL 0x004017e0\nTEST RAX,RAX\nJZ 0x00406024\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x004017e0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00405fe7\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x42\nJZ 0x00405fee\nCMP EAX,0x44\nJZ 0x00405fee\nCMP EAX,0x69\nJNZ 0x00405fe7\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x2],0x42\nSETZ AL\nLEA RBX,[RAX + RAX*0x1 + 0x1]\nJMP 0x00405ff8\nMOV EBX,0x1\nJMP 0x00405ff8\nMOV ESI,0x3e8\nMOV EBX,0x2\nMOV RAX,qword ptr [R12]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00406024\nXOR EAX,EAX\nJMP qword ptr [0x408510 + RCX*0x8]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x3\nCALL 0x00406180\nJMP 0x004060d6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nOR R15D,0x2\nJMP 0x004060fc\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x1\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x2\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x400\nJMP 0x004060d1\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x6\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x5\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x7\nCALL 0x00406180\nJMP 0x004060d6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x200\nJMP 0x004060d1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x2\nCALL 0x00406130\nOR EAX,R15D\nMOV RCX,qword ptr [R12]\nLEA RDX,[RCX + RBX*0x1]\nMOV qword ptr [R12],RDX\nMOV R15D,EAX\nOR R15D,0x2\nCMP byte ptr [RCX + RBX*0x1],0x0\nCMOVZ R15D,EAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4086c0\nMOV ESI,0x4086e6\nMOV EDX,0x60\nMOV ECX,0x4086f6\nCALL 0x00401810\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n49 89 ce\n89 d5\n49 89 ff\n83 fd 25\n0f 83 1c 02 00 00\n48 85 f6\n4c 8d 64 24 10\n4c 0f 45 e6\ne8 bd b7 ff ff\n48 89 c3\nc7 03 00 00 00 00\n4c 89 ff\n4c 89 e6\n89 ea\ne8 87 b7 ff ff\n48 89 44 24 08\n49 8b 04 24\n4c 39 f8\n74 25\n8b 03\n85 c0\n74 58\n41 bf 04 00 00 00\n83 f8 22\n0f 85 c0 01 00 00\n41 bf 01 00 00 00\n4d 85 ed\n75 4a\ne9 a8 01 00 00\n41 bf 04 00 00 00\n4d 85 ed\n0f 84 a1 01 00 00\n0f be 30\n85 f6\n0f 84 96 01 00 00\n4c 89 ef\ne8 72 b8 ff ff\n48 85 c0\n0f 84 85 01 00 00\n48 c7 44 24 08 01 00 00 00\n45 31 ff\neb 0c\n45 31 ff\n4d 85 ed\n0f 84 63 01 00 00\n49 8b 1c 24\n0f be 33\n85 f6\n0f 84 54 01 00 00\n4c 89 ef\ne8 38 b8 ff ff\n48 85 c0\n74 77\nbe 30 00 00 00\n4c 89 ef\ne8 26 b8 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 43 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7b 02 42\n0f 94 c0\n48 8d 5c 00 01\neb 11\nbb 01 00 00 00\neb 0a\nbe e8 03 00 00\nbb 02 00 00 00\n49 8b 04 24\n0f be 08\n83 c1 be\n83 f9 35\n77 1d\n31 c0\nff 24 cd 10 85 40 00\n48 8d 7c 24 08\nba 03 00 00 00\ne8 61 01 00 00\ne9 b2 00 00 00\n48 8b 44 24 08\n49 89 06\n41 83 cf 02\ne9 c7 00 00 00\n48 8d 7c 24 08\nba 01 00 00 00\ne8 3c 01 00 00\ne9 8d 00 00 00\n48 8d 7c 24 08\nba 02 00 00 00\ne8 28 01 00 00\neb 7c\n48 8d 7c 24 08\nba 04 00 00 00\ne8 17 01 00 00\neb 6b\n48 8d 7c 24 08\nbe 00 04 00 00\neb 5a\n48 8d 7c 24 08\nba 06 00 00 00\ne8 fa 00 00 00\neb 4e\n48 8d 7c 24 08\nba 05 00 00 00\ne8 e9 00 00 00\neb 3d\n48 8d 7c 24 08\nba 08 00 00 00\ne8 d8 00 00 00\neb 2c\n48 8d 7c 24 08\nba 07 00 00 00\ne8 c7 00 00 00\neb 1b\n48 8d 7c 24 08\nbe 00 02 00 00\neb 0a\n48 8d 7c 24 08\nbe 02 00 00 00\ne8 5a 00 00 00\n44 09 f8\n49 8b 0c 24\n48 8d 14 19\n49 89 14 24\n41 89 c7\n41 83 cf 02\n80 3c 19 00\n44 0f 44 f8\n48 8b 44 24 08\n49 89 06\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 86 40 00\nbe e6 86 40 00\nba 60 00 00 00\nb9 f6 86 40 00\ne8 e9 b6 ff ff\n'
p572
S'.text:0000000000405ed0\n.text:0000000000405ed1\n.text:0000000000405ed3\n.text:0000000000405ed5\n.text:0000000000405ed7\n.text:0000000000405ed9\n.text:0000000000405eda\n.text:0000000000405ede\n.text:0000000000405ee1\n.text:0000000000405ee4\n.text:0000000000405ee6\n.text:0000000000405ee9\n.text:0000000000405eec\n.text:0000000000405ef2\n.text:0000000000405ef5\n.text:0000000000405efa\n.text:0000000000405efe\n.text:0000000000405f03\n.text:0000000000405f06\n.text:0000000000405f0c\n.text:0000000000405f0f\n.text:0000000000405f12\n.text:0000000000405f14\n.text:0000000000405f19\n.text:0000000000405f1e\n.text:0000000000405f22\n.text:0000000000405f25\n.text:0000000000405f27\n.text:0000000000405f29\n.text:0000000000405f2b\n.text:0000000000405f2d\n.text:0000000000405f33\n.text:0000000000405f36\n.text:0000000000405f3c\n.text:0000000000405f42\n.text:0000000000405f45\n.text:0000000000405f47\n.text:0000000000405f4c\n.text:0000000000405f52\n.text:0000000000405f55\n.text:0000000000405f5b\n.text:0000000000405f5e\n.text:0000000000405f60\n.text:0000000000405f66\n.text:0000000000405f69\n.text:0000000000405f6e\n.text:0000000000405f71\n.text:0000000000405f77\n.text:0000000000405f80\n.text:0000000000405f83\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f91\n.text:0000000000405f95\n.text:0000000000405f98\n.text:0000000000405f9a\n.text:0000000000405fa0\n.text:0000000000405fa3\n.text:0000000000405fa8\n.text:0000000000405fab\n.text:0000000000405fad\n.text:0000000000405fb2\n.text:0000000000405fb5\n.text:0000000000405fba\n.text:0000000000405fbf\n.text:0000000000405fc2\n.text:0000000000405fc4\n.text:0000000000405fc8\n.text:0000000000405fcb\n.text:0000000000405fcd\n.text:0000000000405fd0\n.text:0000000000405fd2\n.text:0000000000405fd5\n.text:0000000000405fd7\n.text:0000000000405fd9\n.text:0000000000405fdd\n.text:0000000000405fe0\n.text:0000000000405fe5\n.text:0000000000405fe7\n.text:0000000000405fec\n.text:0000000000405fee\n.text:0000000000405ff3\n.text:0000000000405ff8\n.text:0000000000405ffc\n.text:0000000000405fff\n.text:0000000000406002\n.text:0000000000406005\n.text:0000000000406007\n.text:0000000000406009\n.text:0000000000406010\n.text:0000000000406015\n.text:000000000040601a\n.text:000000000040601f\n.text:0000000000406024\n.text:0000000000406029\n.text:000000000040602c\n.text:0000000000406030\n.text:0000000000406035\n.text:000000000040603a\n.text:000000000040603f\n.text:0000000000406044\n.text:0000000000406049\n.text:000000000040604e\n.text:0000000000406053\n.text:0000000000406058\n.text:000000000040605a\n.text:000000000040605f\n.text:0000000000406064\n.text:0000000000406069\n.text:000000000040606b\n.text:0000000000406070\n.text:0000000000406075\n.text:0000000000406077\n.text:000000000040607c\n.text:0000000000406081\n.text:0000000000406086\n.text:0000000000406088\n.text:000000000040608d\n.text:0000000000406092\n.text:0000000000406097\n.text:0000000000406099\n.text:000000000040609e\n.text:00000000004060a3\n.text:00000000004060a8\n.text:00000000004060aa\n.text:00000000004060af\n.text:00000000004060b4\n.text:00000000004060b9\n.text:00000000004060bb\n.text:00000000004060c0\n.text:00000000004060c5\n.text:00000000004060c7\n.text:00000000004060cc\n.text:00000000004060d1\n.text:00000000004060d6\n.text:00000000004060d9\n.text:00000000004060dd\n.text:00000000004060e1\n.text:00000000004060e5\n.text:00000000004060e8\n.text:00000000004060ec\n.text:00000000004060f0\n.text:00000000004060f4\n.text:00000000004060f9\n.text:00000000004060fc\n.text:00000000004060ff\n.text:0000000000406103\n.text:0000000000406104\n.text:0000000000406106\n.text:0000000000406108\n.text:000000000040610a\n.text:000000000040610c\n.text:000000000040610d\n.text:000000000040610e\n.text:0000000000406113\n.text:0000000000406118\n.text:000000000040611d\n.text:0000000000406122\n'
p573
tp574
sS'version_etc'
p575
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p576
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p577
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405b52\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405ab0\nADD RSP,0xd8\nRET\n'
p578
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p579
S'.text:0000000000405b10\n.text:0000000000405b17\n.text:0000000000405b19\n.text:0000000000405b1b\n.text:0000000000405b20\n.text:0000000000405b25\n.text:0000000000405b2a\n.text:0000000000405b32\n.text:0000000000405b3a\n.text:0000000000405b42\n.text:0000000000405b4a\n.text:0000000000405b52\n.text:0000000000405b57\n.text:0000000000405b5c\n.text:0000000000405b61\n.text:0000000000405b66\n.text:0000000000405b6e\n.text:0000000000405b73\n.text:0000000000405b7b\n.text:0000000000405b82\n.text:0000000000405b85\n.text:0000000000405b8a\n.text:0000000000405b91\n'
p580
tp581
sS'lseek'
p582
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060b0f0)();\u000a  return _Var1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060b0f0]\n'
p585
S'ff 25 ea 98 20 00\n'
p586
S'.plt:0000000000401800\n'
p587
tp588
sS'quotearg_n_mem'
p589
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p590
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV ECX,0x60b470\nJMP 0x00404d80\n'
p592
S'b9 70 b4 60 00\ne9 36 fe ff ff\n'
p593
S'.text:0000000000404f40\n.text:0000000000404f45\n'
p594
tp595
sS'__printf_chk'
p596
(S'\n__stdcall __printf_chk()\n'
p597
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060b1c0)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060b1c0]\n'
p599
S'ff 25 1a 98 20 00\n'
p600
S'.plt:00000000004019a0\n'
p601
tp602
sS'extract_regexp'
p603
(S'\n__stdcall extract_regexp(char * str)\n'
p604
V\u000acontrol * extract_regexp(char *str)\u000a\u000a{\u000a  char *pcVar1;\u000a  undefined8 uVar2;\u000a  control *p;\u000a  char *pcVar3;\u000a  char *arg;\u000a  _Bool in_SIL;\u000a  \u000a  pcVar1 = strrchr(arg + 1,(int)*arg);\u000a  if (pcVar1 == (char *)0x0) {\u000a    uVar2 = dcgettext(0,"%s: closing delimiter \u005c'%c\u005c' missing",5);\u000a    error(1,0,uVar2);\u000a  }\u000a  p = new_control_record();\u000a  p->argnum = (int)str;\u000a  p->ignore = in_SIL;\u000a  p->regexpr = true;\u000a  *(undefined4 *)&(p->re_compiled).buffer = 0;\u000a  *(undefined4 *)((long)&(p->re_compiled).buffer + 4) = 0;\u000a  *(undefined4 *)&(p->re_compiled).allocated = 0;\u000a  *(undefined4 *)((long)&(p->re_compiled).allocated + 4) = 0;\u000a  pcVar3 = (char *)xmalloc(0x100);\u000a  (p->re_compiled).fastmap = pcVar3;\u000a  (p->re_compiled).translate = (uchar *)0x0;\u000a  re_syntax_options = 0x2c6;\u000a  pcVar3 = re_compile_pattern(arg + 1,(size_t)(pcVar1 + ~(ulong)arg),\u000a                              (re_pattern_buffer *)&p->re_compiled);\u000a  if (pcVar3 == (char *)0x0) {\u000a    if (pcVar1[1] != 0) {\u000a      check_for_offset(p,arg,pcVar1 + 1);\u000a    }\u000a    return p;\u000a  }\u000a  uVar2 = dcgettext(0,"%s: invalid regular expression: %s",5);\u000a  pcVar1 = quote(arg);\u000a  error(0,0,uVar2,pcVar1,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV dword ptr [RSP + 0x4],ESI\nMOV R13D,EDI\nLEA R15,[R14 + 0x1]\nMOVSX EBP,byte ptr [R14]\nMOV RDI,R15\nMOV ESI,EBP\nCALL 0x004017f0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00402c0a\nXOR EDI,EDI\nMOV ESI,0x4078dd\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nMOV R8D,EBP\nCALL 0x004019b0\nMOV R12,R14\nNOT R12\nADD R12,RBX\nCALL 0x00402cd0\nMOV RBP,RAX\nMOV dword ptr [RBP + 0x18],R13D\nMOV EAX,dword ptr [RSP + 0x4]\nMOV byte ptr [RBP + 0x1d],AL\nMOV byte ptr [RBP + 0x1e],0x1\nLEA R13,[RBP + 0x20]\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBP + 0x20],XMM0\nMOV EDI,0x100\nCALL 0x00405c40\nMOV qword ptr [RBP + 0x40],RAX\nMOV qword ptr [RBP + 0x48],0x0\nMOV qword ptr [0x0060b300],0x2c6\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R13\nCALL 0x00401a50\nMOV R15,RAX\nTEST R15,R15\nJNZ 0x00402c95\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00402c83\nINC RBX\nMOV RDI,RBP\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00402e40\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407900\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00405270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV R8,R15\nCALL 0x004019b0\nCALL 0x00401be0\n'
p606
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n89 74 24 04\n41 89 fd\n4d 8d 7e 01\n41 0f be 2e\n4c 89 ff\n89 ee\ne8 19 ec ff ff\n48 89 c3\n48 85 db\n75 2b\n31 ff\nbe dd 78 40 00\nba 05 00 00 00\ne8 90 eb ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\n41 89 e8\ne8 a6 ed ff ff\n4d 89 f4\n49 f7 d4\n49 01 dc\ne8 b8 00 00 00\n48 89 c5\n44 89 6d 18\n8b 44 24 04\n88 45 1d\nc6 45 1e 01\n4c 8d 6d 20\n0f 57 c0\n0f 11 45 20\nbf 00 01 00 00\ne8 01 30 00 00\n48 89 45 40\n48 c7 45 48 00 00 00 00\n48 c7 05 aa 86 20 00 c6 02 00 00\n4c 89 ff\n4c 89 e6\n4c 89 ea\ne8 ec ed ff ff\n49 89 c7\n4d 85 ff\n75 29\n80 7b 01 00\n74 11\n48 ff c3\n48 89 ef\n4c 89 f6\n48 89 da\ne8 bd 01 00 00\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 00 79 40 00\nba 05 00 00 00\ne8 da ea ff ff\n48 89 c3\n4c 89 f7\ne8 bf 25 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\n4d 89 f8\ne8 eb ec ff ff\ne8 16 ef ff ff\n'
p607
S'.text:0000000000402bb0\n.text:0000000000402bb1\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bb7\n.text:0000000000402bb9\n.text:0000000000402bba\n.text:0000000000402bbb\n.text:0000000000402bbe\n.text:0000000000402bc2\n.text:0000000000402bc5\n.text:0000000000402bc9\n.text:0000000000402bcd\n.text:0000000000402bd0\n.text:0000000000402bd2\n.text:0000000000402bd7\n.text:0000000000402bda\n.text:0000000000402bdd\n.text:0000000000402bdf\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf3\n.text:0000000000402bf8\n.text:0000000000402bfa\n.text:0000000000402bfc\n.text:0000000000402bff\n.text:0000000000402c02\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c0d\n.text:0000000000402c10\n.text:0000000000402c13\n.text:0000000000402c18\n.text:0000000000402c1b\n.text:0000000000402c1f\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c2a\n.text:0000000000402c2e\n.text:0000000000402c31\n.text:0000000000402c35\n.text:0000000000402c3a\n.text:0000000000402c3f\n.text:0000000000402c43\n.text:0000000000402c4b\n.text:0000000000402c56\n.text:0000000000402c59\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c64\n.text:0000000000402c67\n.text:0000000000402c6a\n.text:0000000000402c6c\n.text:0000000000402c70\n.text:0000000000402c72\n.text:0000000000402c75\n.text:0000000000402c78\n.text:0000000000402c7b\n.text:0000000000402c7e\n.text:0000000000402c83\n.text:0000000000402c86\n.text:0000000000402c8a\n.text:0000000000402c8b\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c91\n.text:0000000000402c93\n.text:0000000000402c94\n.text:0000000000402c95\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402ca1\n.text:0000000000402ca6\n.text:0000000000402ca9\n.text:0000000000402cac\n.text:0000000000402cb1\n.text:0000000000402cb4\n.text:0000000000402cb6\n.text:0000000000402cb8\n.text:0000000000402cba\n.text:0000000000402cbd\n.text:0000000000402cc0\n.text:0000000000402cc5\n'
p608
tp609
sS'emit_ancillary_info'
p610
(S'\n__stdcall emit_ancillary_info()\n'
p611
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004070b0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("csplit",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "csplit";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"csplit",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","csplit");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4082d9;\u000a  if (__s2 == "csplit") {\u000a    uVar3 = 0x407ad9;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p612
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4070b0\nMOV ESI,0x407abd\nNOP\nMOV EDI,0x407166\nCALL 0x004018b0\nTEST EAX,EAX\nJZ 0x0040266b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00402650\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x407166\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407b1c\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40716d\nMOV ECX,0x407b33\nXOR EAX,EAX\nCALL 0x004019a0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401990\nTEST RAX,RAX\nJZ 0x004026f4\nMOV ESI,0x407b5a\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004016e0\nTEST EAX,EAX\nJZ 0x004026f4\nXOR EDI,EDI\nMOV ESI,0x407b5e\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x407166\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x407ba3\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,RAX\nMOV R14D,0x407166\nMOV EDI,0x1\nMOV EDX,0x407b33\nMOV ECX,0x407166\nXOR EAX,EAX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x407bc2\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x407ad9\nMOV ECX,0x4082d9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004019a0\n'
p613
S'41 56\n53\n50\nbb b0 70 40 00\nbe bd 7a 40 00\n66 90\nbf 66 71 40 00\ne8 56 f2 ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 66 71 40 00\n48 0f 45 d8\n31 ff\nbe 1c 7b 40 00\nba 05 00 00 00\ne8 f4 f0 ff ff\n48 89 c6\nbf 01 00 00 00\nba 6d 71 40 00\nb9 33 7b 40 00\n31 c0\ne8 fb f2 ff ff\nbf 05 00 00 00\n31 f6\ne8 df f2 ff ff\n48 85 c0\n74 3e\nbe 5a 7b 40 00\nba 03 00 00 00\n48 89 c7\ne8 18 f0 ff ff\n85 c0\n74 28\n31 ff\nbe 5e 7b 40 00\nba 05 00 00 00\ne8 a3 f0 ff ff\n48 89 c1\nbf 01 00 00 00\nba 66 71 40 00\n31 c0\n48 89 ce\ne8 ac f2 ff ff\n31 ff\nbe a3 7b 40 00\nba 05 00 00 00\ne8 7b f0 ff ff\n48 89 c6\n41 be 66 71 40 00\nbf 01 00 00 00\nba 33 7b 40 00\nb9 66 71 40 00\n31 c0\ne8 7c f2 ff ff\n31 ff\nbe c2 7b 40 00\nba 05 00 00 00\ne8 4b f0 ff ff\n48 89 c2\n4c 39 f3\nb8 d9 7a 40 00\nb9 d9 82 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 3e f2 ff ff\n'
p614
S'.text:0000000000402640\n.text:0000000000402642\n.text:0000000000402643\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264e\n.text:0000000000402650\n.text:0000000000402655\n.text:000000000040265a\n.text:000000000040265c\n.text:000000000040265e\n.text:0000000000402662\n.text:0000000000402666\n.text:0000000000402669\n.text:000000000040266b\n.text:000000000040266f\n.text:0000000000402672\n.text:0000000000402677\n.text:000000000040267b\n.text:000000000040267d\n.text:0000000000402682\n.text:0000000000402687\n.text:000000000040268c\n.text:000000000040268f\n.text:0000000000402694\n.text:0000000000402699\n.text:000000000040269e\n.text:00000000004026a0\n.text:00000000004026a5\n.text:00000000004026aa\n.text:00000000004026ac\n.text:00000000004026b1\n.text:00000000004026b4\n.text:00000000004026b6\n.text:00000000004026bb\n.text:00000000004026c0\n.text:00000000004026c3\n.text:00000000004026c8\n.text:00000000004026ca\n.text:00000000004026cc\n.text:00000000004026ce\n.text:00000000004026d3\n.text:00000000004026d8\n.text:00000000004026dd\n.text:00000000004026e0\n.text:00000000004026e5\n.text:00000000004026ea\n.text:00000000004026ec\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026f6\n.text:00000000004026fb\n.text:0000000000402700\n.text:0000000000402705\n.text:0000000000402708\n.text:000000000040270e\n.text:0000000000402713\n.text:0000000000402718\n.text:000000000040271d\n.text:000000000040271f\n.text:0000000000402724\n.text:0000000000402726\n.text:000000000040272b\n.text:0000000000402730\n.text:0000000000402735\n.text:0000000000402738\n.text:000000000040273b\n.text:0000000000402740\n.text:0000000000402745\n.text:0000000000402749\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402753\n.text:0000000000402756\n.text:000000000040275a\n.text:000000000040275b\n.text:000000000040275d\n'
p615
tp616
sS'version_etc_va'
p617
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p618
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p619
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00405ae0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00405aec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00405b01\nINC R9\nCMP R9,0xa\nJC 0x00405ac0\nMOV R8,RSP\nCALL 0x00405720\nADD RSP,0x58\nRET\n'
p620
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p621
S'.text:0000000000405ab0\n.text:0000000000405ab4\n.text:0000000000405ab7\n.text:0000000000405ac0\n.text:0000000000405ac3\n.text:0000000000405ac7\n.text:0000000000405ac9\n.text:0000000000405acc\n.text:0000000000405ad0\n.text:0000000000405ad4\n.text:0000000000405ad7\n.text:0000000000405ae0\n.text:0000000000405ae4\n.text:0000000000405ae8\n.text:0000000000405aec\n.text:0000000000405aef\n.text:0000000000405af3\n.text:0000000000405af6\n.text:0000000000405af8\n.text:0000000000405afb\n.text:0000000000405aff\n.text:0000000000405b01\n.text:0000000000405b04\n.text:0000000000405b09\n.text:0000000000405b0d\n'
p622
tp623
sS'xzalloc'
p624
(S'\n__stdcall xzalloc(size_t s)\n'
p625
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p626
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405c40\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401820\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p627
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 d4 ba ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p628
S'.text:0000000000405d30\n.text:0000000000405d32\n.text:0000000000405d33\n.text:0000000000405d34\n.text:0000000000405d37\n.text:0000000000405d3c\n.text:0000000000405d3f\n.text:0000000000405d41\n.text:0000000000405d44\n.text:0000000000405d47\n.text:0000000000405d4c\n.text:0000000000405d4f\n.text:0000000000405d53\n.text:0000000000405d54\n.text:0000000000405d56\n'
p629
tp630
sS'umaxtostr'
p631
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p632
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p633
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00403d40\nMOV RAX,RSI\nRET\n'
p634
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p635
S'.text:0000000000403d20\n.text:0000000000403d23\n.text:0000000000403d27\n.text:0000000000403d2b\n.text:0000000000403d35\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d46\n.text:0000000000403d48\n.text:0000000000403d4b\n.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d55\n.text:0000000000403d57\n.text:0000000000403d5b\n.text:0000000000403d5f\n.text:0000000000403d62\n.text:0000000000403d66\n.text:0000000000403d6a\n.text:0000000000403d6d\n.text:0000000000403d6f\n.text:0000000000403d72\n'
p636
tp637
sS'gettext_quote'
p638
(S'\n__stdcall gettext_quote(char * msgid)\n'
p639
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040819e;\u000a        pcVar2 = &DAT_004081a2;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401780\nCMP RAX,RBX\nJNZ 0x00405338\nCALL 0x004069b0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00405340\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004052e8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40818e\nMOV EAX,0x408192\nJMP 0x00405334\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00405340\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00405326\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40819e\nMOV EAX,0x4081a2\nJMP 0x00405334\nCMP R14D,0x9\nMOV ECX,0x408184\nMOV EAX,0x407994\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p641
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 e7 c4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 09 17 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 8e 81 40 00\nb8 92 81 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 9e 81 40 00\nb8 a2 81 40 00\neb 0e\n41 83 fe 09\nb9 84 81 40 00\nb8 94 79 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p642
S'.text:0000000000405280\n.text:0000000000405281\n.text:0000000000405283\n.text:0000000000405284\n.text:0000000000405287\n.text:000000000040528a\n.text:000000000040528c\n.text:0000000000405291\n.text:0000000000405294\n.text:0000000000405299\n.text:000000000040529c\n.text:00000000004052a2\n.text:00000000004052a7\n.text:00000000004052aa\n.text:00000000004052af\n.text:00000000004052b4\n.text:00000000004052b9\n.text:00000000004052bf\n.text:00000000004052c5\n.text:00000000004052c8\n.text:00000000004052ca\n.text:00000000004052cc\n.text:00000000004052d1\n.text:00000000004052d5\n.text:00000000004052d7\n.text:00000000004052d9\n.text:00000000004052dc\n.text:00000000004052e1\n.text:00000000004052e6\n.text:00000000004052e8\n.text:00000000004052ed\n.text:00000000004052f2\n.text:00000000004052f7\n.text:00000000004052fd\n.text:0000000000405303\n.text:0000000000405306\n.text:0000000000405308\n.text:000000000040530a\n.text:000000000040530f\n.text:0000000000405313\n.text:0000000000405315\n.text:0000000000405317\n.text:000000000040531a\n.text:000000000040531f\n.text:0000000000405324\n.text:0000000000405326\n.text:000000000040532a\n.text:000000000040532f\n.text:0000000000405334\n.text:0000000000405338\n.text:0000000000405339\n.text:000000000040533b\n.text:000000000040533c\n'
p643
tp644
sS'xnumtoimax'
p645
(S'\n__stdcall xnumtoimax(char * n_str, intmax_t min, intmax_t max, char * suffixes, char * err)\n'
p646
V\u000aintmax_t xnumtoimax(char *n_str,intmax_t min,intmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  long lVar1;\u000a  strtol_error sVar2;\u000a  long in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  long local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoimax(n_str,(char **)0x0,(intmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  lVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a    goto LAB_00405e4f;\u000a  }\u000a  if (sVar2 != LONGINT_OVERFLOW) {\u000a    if (sVar2 != LONGINT_OK) goto LAB_00405e4f;\u000a    if ((max <= local_38) && (local_38 <= (long)suffixes)) {\u000a      return local_38;\u000a    }\u000a    if (local_38 < 0x40000000) {\u000a      piVar3 = __errno_location();\u000a      iVar5 = 0x22;\u000a      if (lVar1 < 0xc0000000) {\u000a        iVar5 = 0x4b;\u000a      }\u000a      *piVar3 = iVar5;\u000a      goto LAB_00405e4f;\u000a    }\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0x4b;\u000aLAB_00405e4f:\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return local_38;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x00405ed0\nCMP EAX,0x3\nJZ 0x00405e27\nCMP EAX,0x1\nJZ 0x00405e1a\nTEST EAX,EAX\nJNZ 0x00405e4f\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJL 0x00405e11\nCMP RBX,R15\nJLE 0x00405e8a\nCMP RBX,0x40000000\nJL 0x00405e34\nCALL 0x004016c0\nMOV dword ptr [RAX],0x4b\nJMP 0x00405e4f\nCALL 0x004016c0\nMOV dword ptr [RAX],0x0\nJMP 0x00405e4f\nCALL 0x004016c0\nCMP RBX,0xc0000000\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVL EDX,ECX\nMOV dword ptr [RAX],EDX\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x004016c0\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00405270\nMOV R8,RAX\nMOV EDX,0x407c06\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x004019b0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 db 00 00 00\n83 f8 03\n74 2d\n83 f8 01\n74 1b\n85 c0\n75 4c\n48 8b 1c 24\n4c 39 e3\n7c 05\n4c 39 fb\n7e 79\n48 81 fb 00 00 00 40\n7c 1a\ne8 a1 b8 ff ff\nc7 00 4b 00 00 00\neb 28\ne8 94 b8 ff ff\nc7 00 00 00 00 00\neb 1b\ne8 87 b8 ff ff\n48 81 fb 00 00 00 c0\nb9 4b 00 00 00\nba 22 00 00 00\n0f 4c d1\n89 10\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 5e b8 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 fc f3 ff ff\n49 89 c0\nba 06 7c 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 26 bb ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000405dd0\n.text:0000000000405dd1\n.text:0000000000405dd3\n.text:0000000000405dd5\n.text:0000000000405dd7\n.text:0000000000405dd9\n.text:0000000000405dda\n.text:0000000000405ddb\n.text:0000000000405dde\n.text:0000000000405de1\n.text:0000000000405de4\n.text:0000000000405de6\n.text:0000000000405de9\n.text:0000000000405dec\n.text:0000000000405dee\n.text:0000000000405df0\n.text:0000000000405df5\n.text:0000000000405df8\n.text:0000000000405dfa\n.text:0000000000405dfd\n.text:0000000000405dff\n.text:0000000000405e01\n.text:0000000000405e03\n.text:0000000000405e07\n.text:0000000000405e0a\n.text:0000000000405e0c\n.text:0000000000405e0f\n.text:0000000000405e11\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e1f\n.text:0000000000405e25\n.text:0000000000405e27\n.text:0000000000405e2c\n.text:0000000000405e32\n.text:0000000000405e34\n.text:0000000000405e39\n.text:0000000000405e40\n.text:0000000000405e45\n.text:0000000000405e4a\n.text:0000000000405e4d\n.text:0000000000405e4f\n.text:0000000000405e53\n.text:0000000000405e55\n.text:0000000000405e5a\n.text:0000000000405e5d\n.text:0000000000405e62\n.text:0000000000405e64\n.text:0000000000405e66\n.text:0000000000405e69\n.text:0000000000405e6c\n.text:0000000000405e6f\n.text:0000000000405e74\n.text:0000000000405e77\n.text:0000000000405e7c\n.text:0000000000405e7e\n.text:0000000000405e80\n.text:0000000000405e82\n.text:0000000000405e85\n.text:0000000000405e8a\n.text:0000000000405e8e\n.text:0000000000405e92\n.text:0000000000405e93\n.text:0000000000405e95\n.text:0000000000405e97\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405e9c\n'
p650
tp651
sS'fclose'
p652
(S'\n__stdcall fclose(FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060b0a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060b0a0]\n'
p655
S'ff 25 3a 99 20 00\n'
p656
S'.plt:0000000000401760\n'
p657
tp658
sS'__ctype_get_mb_cur_max'
p659
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060b0b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060b0b8]\n'
p662
S'ff 25 22 99 20 00\n'
p663
S'.plt:0000000000401790\n'
p664
tp665
sS'quotearg_n_style'
p666
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p667
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404fb0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404d80\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p669
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p670
S'.text:0000000000404f70\n.text:0000000000404f71\n.text:0000000000404f73\n.text:0000000000404f74\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f7d\n.text:0000000000404f82\n.text:0000000000404f85\n.text:0000000000404f8a\n.text:0000000000404f91\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f99\n.text:0000000000404f9e\n.text:0000000000404fa2\n.text:0000000000404fa3\n.text:0000000000404fa5\n.text:0000000000404fa6\n'
p671
tp672
sS'quote_n'
p673
(S'\n__stdcall quote_n(char * arg)\n'
p674
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV RDX,-0x1\nJMP 0x00405240\n'
p676
S'48 c7 c2 ff ff ff ff\neb d7\n'
p677
S'.text:0000000000405260\n.text:0000000000405267\n'
p678
tp679
sS'quotearg_alloc'
p680
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p681
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404bf0\n'
p683
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p684
S'.text:0000000000404be0\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be8\n'
p685
tp686
sS'close_stdout_set_file_name'
p687
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p688
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p689
S'MOV qword ptr [0x0060b458],RDI\nRET\n'
p690
S'48 89 3d 01 79 20 00\nc3\n'
p691
S'.text:0000000000403b50\n.text:0000000000403b57\n'
p692
tp693
sS'sigismember'
p694
(S'\n__stdcall sigismember(sigset_t * __set, int __signo)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigismember(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigismember_0060b1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0060b1f8]\n'
p697
S'ff 25 e2 97 20 00\n'
p698
S'.plt:0000000000401a10\n'
p699
tp700
sS'create_new_buffer'
p701
(S'\n__stdcall create_new_buffer(size_t size)\n'
p702
V\u000abuffer_record * create_new_buffer(size_t size)\u000a\u000a{\u000a  buffer_record *pbVar1;\u000a  char *pcVar2;\u000a  \u000a  pbVar1 = (buffer_record *)xmalloc(0x48);\u000a  pcVar2 = (char *)xmalloc(size + 1);\u000a  pbVar1->buffer = pcVar2;\u000a  pbVar1->bytes_alloc = size;\u000a  *(undefined4 *)&pbVar1->line_start = 0;\u000a  *(undefined4 *)((long)&pbVar1->line_start + 4) = 0;\u000a  *(undefined4 *)&pbVar1->curr_line = 0;\u000a  *(undefined4 *)((long)&pbVar1->curr_line + 4) = 0;\u000a  return pbVar1;\u000a}\u000a\u000a
p703
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x48\nCALL 0x00405c40\nMOV RBX,RAX\nLEA RDI,[R14 + 0x1]\nCALL 0x00405c40\nMOV qword ptr [RBX + 0x28],RAX\nMOV qword ptr [RBX],R14\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p704
S'41 56\n53\n50\n49 89 fe\nbf 48 00 00 00\ne8 3f 23 00 00\n48 89 c3\n49 8d 7e 01\ne8 33 23 00 00\n48 89 43 28\n4c 89 33\n0f 57 c0\n0f 11 43 30\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p705
S'.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f3\n.text:00000000004038f4\n.text:00000000004038f7\n.text:00000000004038fc\n.text:0000000000403901\n.text:0000000000403904\n.text:0000000000403908\n.text:000000000040390d\n.text:0000000000403911\n.text:0000000000403914\n.text:0000000000403917\n.text:000000000040391b\n.text:000000000040391e\n.text:0000000000403922\n.text:0000000000403923\n.text:0000000000403925\n'
p706
tp707
sS'__libc_csu_init'
p708
(S'\n__stdcall __libc_csu_init()\n'
p709
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p710
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ae08]\nPUSH RBP\nLEA RBP,[0x60ae10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401628\nTEST RBP,RBP\nJZ 0x00406d36\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00406d20\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p711
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 16 41 20 00\n55\n48 8d 2d 16 41 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 17 a9 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p712
S'.text:0000000000406ce0\n.text:0000000000406ce2\n.text:0000000000406ce4\n.text:0000000000406ce7\n.text:0000000000406ce9\n.text:0000000000406ceb\n.text:0000000000406cf2\n.text:0000000000406cf3\n.text:0000000000406cfa\n.text:0000000000406cfb\n.text:0000000000406cfe\n.text:0000000000406d01\n.text:0000000000406d04\n.text:0000000000406d08\n.text:0000000000406d0c\n.text:0000000000406d11\n.text:0000000000406d14\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d20\n.text:0000000000406d23\n.text:0000000000406d26\n.text:0000000000406d29\n.text:0000000000406d2d\n.text:0000000000406d31\n.text:0000000000406d34\n.text:0000000000406d36\n.text:0000000000406d3a\n.text:0000000000406d3b\n.text:0000000000406d3c\n.text:0000000000406d3e\n.text:0000000000406d40\n.text:0000000000406d42\n.text:0000000000406d44\n'
p713
tp714
sS'keep_new_line'
p715
(S'\n__stdcall keep_new_line(buffer_record * b, char * line_start, size_t line_len)\n'
p716
V\u000avoid keep_new_line(buffer_record *b,char *line_start,size_t line_len)\u000a\u000a{\u000a  size_t sVar1;\u000a  line *plVar2;\u000a  \u000a  if (b->line_start == (line *)0x0) {\u000a    plVar2 = new_line_control();\u000a    b->curr_line = plVar2;\u000a    b->line_start = plVar2;\u000a  }\u000a  if (b->curr_line->used == 0x50) {\u000a    plVar2 = new_line_control();\u000a    b->curr_line->next = plVar2;\u000a    b->curr_line = b->curr_line->next;\u000a  }\u000a  plVar2 = b->curr_line;\u000a  sVar1 = plVar2->insert_index;\u000a  plVar2->starts[sVar1].str = line_start;\u000a  plVar2->starts[sVar1].len = line_len;\u000a  plVar2->used = plVar2->used + 1;\u000a  plVar2->insert_index = plVar2->insert_index + 1;\u000a  return;\u000a}\u000a\u000a
p717
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP qword ptr [RBX + 0x30],0x0\nJNZ 0x00403952\nCALL 0x004039d0\nMOV qword ptr [RBX + 0x38],RAX\nMOV qword ptr [RBX + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nCMP qword ptr [RAX],0x50\nJNZ 0x0040397b\nCALL 0x004039d0\nMOV RCX,qword ptr [RBX + 0x38]\nMOV qword ptr [0x518 + RCX],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RAX,qword ptr [0x518 + RAX]\nMOV qword ptr [RBX + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RCX,qword ptr [RAX + 0x8]\nSHL RCX,0x4\nMOV qword ptr [RAX + RCX*0x1 + 0x20],R15\nMOV qword ptr [RAX + RCX*0x1 + 0x18],R14\nINC qword ptr [RAX]\nINC qword ptr [RAX + 0x8]\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p718
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n48 83 7b 30 00\n75 0d\ne8 86 00 00 00\n48 89 43 38\n48 89 43 30\n48 8b 43 38\n48 83 38 50\n75 1f\ne8 6f 00 00 00\n48 8b 4b 38\n48 89 81 18 05 00 00\n48 8b 43 38\n48 8b 80 18 05 00 00\n48 89 43 38\n48 8b 43 38\n48 8b 48 08\n48 c1 e1 04\n4c 89 7c 08 20\n4c 89 74 08 18\n48 ff 00\n48 ff 40 08\n5b\n41 5e\n41 5f\nc3\n'
p719
S'.text:0000000000403930\n.text:0000000000403932\n.text:0000000000403934\n.text:0000000000403935\n.text:0000000000403938\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403945\n.text:000000000040394a\n.text:000000000040394e\n.text:0000000000403952\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395c\n.text:0000000000403961\n.text:0000000000403965\n.text:000000000040396c\n.text:0000000000403970\n.text:0000000000403977\n.text:000000000040397b\n.text:000000000040397f\n.text:0000000000403983\n.text:0000000000403987\n.text:000000000040398c\n.text:0000000000403991\n.text:0000000000403994\n.text:0000000000403998\n.text:0000000000403999\n.text:000000000040399b\n.text:000000000040399d\n'
p720
tp721
sS'c_isdigit'
p722
(S'\n__stdcall c_isdigit()\n'
p723
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p724
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p725
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p726
S'.text:0000000000406870\n.text:0000000000406873\n.text:0000000000406876\n.text:0000000000406879\n'
p727
tp728
sS'delete_all_files'
p729
(S'\n__stdcall delete_all_files()\n'
p730
V\u000avoid delete_all_files(char cParm1)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  char *__name;\u000a  uint *puVar3;\u000a  uint uVar4;\u000a  \u000a  if (remove_files != false) {\u000a    if (files_created != 0) {\u000a      uVar4 = 0;\u000a      do {\u000a        __name = make_filename();\u000a        iVar2 = unlink(__name);\u000a        if ((iVar2 != 0) && (cParm1 == 0)) {\u000a          puVar3 = (uint *)__errno_location();\u000a          uVar1 = *puVar3;\u000a          __name = quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)uVar1,0x40789d,__name);\u000a        }\u000a        uVar4 = uVar4 + 1;\u000a      } while (uVar4 < files_created);\u000a    }\u000a    files_created = 0;\u000a  }\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDI\nCMP byte ptr [0x0060b349],0x0\nJZ 0x004029ba\nCMP dword ptr [0x0060b408],0x0\nJZ 0x004029b0\nXOR EBP,EBP\nNOP\nMOV EDI,EBP\nCALL 0x004029d0\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x004016d0\nTEST EAX,EAX\nJZ 0x004029a6\nTEST R14B,R14B\nJNZ 0x004029a6\nCALL 0x004016c0\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00405130\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40789d\nXOR EAX,EAX\nMOV ESI,R15D\nCALL 0x004019b0\nINC EBP\nCMP EBP,dword ptr [0x0060b408]\nJC 0x00402960\nMOV dword ptr [0x0060b408],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p732
S'55\n41 57\n41 56\n53\n50\n41 89 fe\n80 3d f8 89 20 00 00\n74 67\n83 3d ae 8a 20 00 00\n74 54\n31 ed\n66 90\n89 ef\ne8 69 00 00 00\n48 89 c3\n48 89 df\ne8 5e ed ff ff\n85 c0\n74 30\n45 84 f6\n75 2b\ne8 40 ed ff ff\n44 8b 38\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 9e 27 00 00\n48 89 c1\n31 ff\nba 9d 78 40 00\n31 c0\n44 89 fe\ne8 0a f0 ff ff\nff c5\n3b 2d 5a 8a 20 00\n72 b0\nc7 05 4e 8a 20 00 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p733
S'.text:0000000000402940\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402946\n.text:0000000000402947\n.text:000000000040294a\n.text:0000000000402951\n.text:0000000000402953\n.text:000000000040295a\n.text:000000000040295c\n.text:000000000040295e\n.text:0000000000402960\n.text:0000000000402962\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296d\n.text:0000000000402972\n.text:0000000000402974\n.text:0000000000402976\n.text:0000000000402979\n.text:000000000040297b\n.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402985\n.text:000000000040298a\n.text:000000000040298d\n.text:0000000000402992\n.text:0000000000402995\n.text:0000000000402997\n.text:000000000040299c\n.text:000000000040299e\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029a8\n.text:00000000004029ae\n.text:00000000004029b0\n.text:00000000004029ba\n.text:00000000004029be\n.text:00000000004029bf\n.text:00000000004029c1\n.text:00000000004029c3\n.text:00000000004029c4\n'
p734
tp735
sS'usage'
p736
(S'\n__stdcall usage()\n'
p737
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... FILE PATTERN...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Output pieces of FILE separated by PATTERN(s) to files \u005c'xx00\u005c', \u005c'xx01\u005c', ...,\u005cnand output byte counts of each piece to standard output.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"\u005cnRead standard input if FILE is -\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d\u005cn  -f, --prefix=PREFIX        use PREFIX instead of \u005c'xx\u005c'\u005cn  -k, --keep-files           do not remove output files on errors\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --suppress-matched     suppress the lines matching PATTERN\u005cn",5\u000a                           );\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -n, --digits=DIGITS        use specified number of digits instead of 2\u005cn  -s, --quiet, --silent      do not print counts of output file sizes\u005cn  -z, --elide-empty-files    remove empty output files\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnEach PATTERN may be:\u005cn  INTEGER            copy up to but not including specified line number\u005cn  /REGEXP/[OFFSET]   copy up to but not including a matching line\u005cn  %REGEXP%[OFFSET]   skip to, but not including a matching line\u005cn  {INTEGER}          repeat the previous pattern specified number of times\u005cn  {*}                repeat the previous pattern as many times as possible\u005cn\u005cnA line OFFSET is a required \u005c'+\u005c' or \u005c'-\u005c' followed by a positive integer.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p738
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00402136\nXOR EDI,EDI\nMOV ESI,0x4071cb\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060b468]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x4071f2\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x407278\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nCALL 0x00402610\nXOR EDI,EDI\nMOV ESI,0x40729b\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x407357\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x407399\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x407460\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x40748d\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x4074c3\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nCALL 0x00401880\nCALL 0x00402640\nMOV EDI,EBX\nCALL 0x00401a20\nCALL 0x004025d0\nMOV EDI,EBX\nCALL 0x00401a20\n'
p739
S'53\n89 fb\n85 db\n0f 85 3b 01 00 00\n31 ff\nbe cb 71 40 00\nba 05 00 00 00\ne8 74 f7 ff ff\n48 89 c1\n48 8b 15 52 94 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 7b f9 ff ff\n31 ff\nbe f2 71 40 00\nba 05 00 00 00\ne8 4a f7 ff ff\n48 8b 35 ab 92 20 00\n48 89 c7\ne8 3b f8 ff ff\n31 ff\nbe 78 72 40 00\nba 05 00 00 00\ne8 2a f7 ff ff\n48 8b 35 8b 92 20 00\n48 89 c7\ne8 1b f8 ff ff\ne8 a6 05 00 00\n31 ff\nbe 9b 72 40 00\nba 05 00 00 00\ne8 05 f7 ff ff\n48 8b 35 66 92 20 00\n48 89 c7\ne8 f6 f7 ff ff\n31 ff\nbe 57 73 40 00\nba 05 00 00 00\ne8 e5 f6 ff ff\n48 8b 35 46 92 20 00\n48 89 c7\ne8 d6 f7 ff ff\n31 ff\nbe 99 73 40 00\nba 05 00 00 00\ne8 c5 f6 ff ff\n48 8b 35 26 92 20 00\n48 89 c7\ne8 b6 f7 ff ff\n31 ff\nbe 60 74 40 00\nba 05 00 00 00\ne8 a5 f6 ff ff\n48 8b 35 06 92 20 00\n48 89 c7\ne8 96 f7 ff ff\n31 ff\nbe 8d 74 40 00\nba 05 00 00 00\ne8 85 f6 ff ff\n48 8b 35 e6 91 20 00\n48 89 c7\ne8 76 f7 ff ff\n31 ff\nbe c3 74 40 00\nba 05 00 00 00\ne8 65 f6 ff ff\n48 8b 35 c6 91 20 00\n48 89 c7\ne8 56 f7 ff ff\ne8 11 05 00 00\n89 df\ne8 ea f8 ff ff\ne8 95 04 00 00\n89 df\ne8 de f8 ff ff\n'
p740
S'.text:0000000000401ff0\n.text:0000000000401ff1\n.text:0000000000401ff3\n.text:0000000000401ff5\n.text:0000000000401ffb\n.text:0000000000401ffd\n.text:0000000000402002\n.text:0000000000402007\n.text:000000000040200c\n.text:000000000040200f\n.text:0000000000402016\n.text:000000000040201b\n.text:000000000040201d\n.text:0000000000402020\n.text:0000000000402025\n.text:0000000000402027\n.text:000000000040202c\n.text:0000000000402031\n.text:0000000000402036\n.text:000000000040203d\n.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402047\n.text:000000000040204c\n.text:0000000000402051\n.text:0000000000402056\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402065\n.text:000000000040206a\n.text:000000000040206c\n.text:0000000000402071\n.text:0000000000402076\n.text:000000000040207b\n.text:0000000000402082\n.text:0000000000402085\n.text:000000000040208a\n.text:000000000040208c\n.text:0000000000402091\n.text:0000000000402096\n.text:000000000040209b\n.text:00000000004020a2\n.text:00000000004020a5\n.text:00000000004020aa\n.text:00000000004020ac\n.text:00000000004020b1\n.text:00000000004020b6\n.text:00000000004020bb\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020ca\n.text:00000000004020cc\n.text:00000000004020d1\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020e2\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020fb\n.text:0000000000402102\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210c\n.text:0000000000402111\n.text:0000000000402116\n.text:000000000040211b\n.text:0000000000402122\n.text:0000000000402125\n.text:000000000040212a\n.text:000000000040212f\n.text:0000000000402131\n.text:0000000000402136\n.text:000000000040213b\n.text:000000000040213d\n'
p741
tp742
sS'quoting_options_from_style'
p743
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p744
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p745
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00404ffd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004016b0\n'
p746
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ae c6 ff ff\n'
p747
S'.text:0000000000404fb0\n.text:0000000000404fb4\n.text:0000000000404fb7\n.text:0000000000404fbc\n.text:0000000000404fc1\n.text:0000000000404fc5\n.text:0000000000404fcd\n.text:0000000000404fd0\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd8\n.text:0000000000404fdb\n.text:0000000000404fdf\n.text:0000000000404fe4\n.text:0000000000404fe9\n.text:0000000000404fed\n.text:0000000000404ff1\n.text:0000000000404ff5\n.text:0000000000404ff8\n.text:0000000000404ffc\n.text:0000000000404ffd\n'
p748
tp749
sS'strcpy'
p750
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060b070)();\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060b070]\n'
p753
S'ff 25 6a 99 20 00\n'
p754
S'.plt:0000000000401700\n'
p755
tp756
sS'c_isgraph'
p757
(S'\n__stdcall c_isgraph()\n'
p758
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p759
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p760
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p761
S'.text:0000000000406880\n.text:0000000000406883\n.text:0000000000406886\n.text:0000000000406889\n'
p762
tp763
sS'check_format_conv_type'
p764
(S'\n__stdcall check_format_conv_type(char * format)\n'
p765
V\u000avoid check_format_conv_type(char *format)\u000a\u000a{\u000a  byte bVar1;\u000a  ushort **ppuVar2;\u000a  undefined8 uVar3;\u000a  byte bVar4;\u000a  uint uVar5;\u000a  uint in_ESI;\u000a  char *pcVar6;\u000a  \u000a  bVar1 = *format;\u000a  bVar4 = bVar1 + 0xa8;\u000a  if (bVar4 < 0x21) {\u000a    if ((0x100800001U >> ((ulong)bVar4 & 0x1f) & 1) != 0) {\u000a      uVar5 = in_ESI & 0xfffffffd;\u000a      goto joined_r0x00402af2;\u000a    }\u000a    if ((0x21000U >> ((ulong)bVar4 & 0x1f) & 1) == 0) {\u000a      if (bVar4 != 0x1d) goto LAB_00402aff;\u000a    }\u000a    else {\u000a      *format = 'u';\u000a    }\u000a  }\u000a  else {\u000aLAB_00402aff:\u000a    if (bVar1 == 0) {\u000a      uVar3 = dcgettext(0,"missing conversion specifier in suffix",5);\u000a      error(1,0,uVar3,uVar3);\u000a    }\u000a    else {\u000a      ppuVar2 = __ctype_b_loc();\u000a      if ((*(byte *)((long)*ppuVar2 + (ulong)bVar1 * 2 + 1) & 0x40) == 0) {\u000a        pcVar6 = "invalid conversion specifier in suffix: \u005c\u005c%.3o";\u000a      }\u000a      else {\u000a        pcVar6 = "invalid conversion specifier in suffix: %c";\u000a      }\u000a      uVar3 = dcgettext(0,pcVar6,5);\u000a      error(1,0,uVar3,(ulong)bVar1);\u000a    }\u000a  }\u000a  uVar5 = in_ESI & 0xfffffffe;\u000ajoined_r0x00402af2:\u000a  if (uVar5 != 0) {\u000a    uVar3 = dcgettext(0,"invalid flags in conversion specification: %%%c%c",5);\u000a    error(1,0,uVar3,(ulong)(uVar5 * 2 & 4 ^ 0x27),(ulong)bVar1);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV AL,byte ptr [RDI]\nMOVZX EBX,AL\nMOV EBP,0xfffffffe\nMOV ECX,EBX\nADD CL,0xa8\nCMP CL,0x20\nJA 0x00402aff\nMOVZX ECX,CL\nMOV RDX,0x100800001\nBT RDX,RCX\nJC 0x00402aea\nMOV EDX,0x21000\nBT RDX,RCX\nJNC 0x00402af9\nMOV byte ptr [RDI],0x75\nAND EBP,R14D\nJNZ 0x00402b73\nJMP 0x00402ba9\nMOV EBP,0xfffffffd\nAND EBP,R14D\nJNZ 0x00402b73\nJMP 0x00402ba9\nCMP RCX,0x1d\nJZ 0x00402b6e\nTEST AL,AL\nJNZ 0x00402b2f\nXOR EDI,EDI\nMOV ESI,0x40775c\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019b0\nAND EBP,R14D\nJNZ 0x00402b73\nJMP 0x00402ba9\nCALL 0x00401a90\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x40\nJNZ 0x00402b47\nXOR EDI,EDI\nMOV ESI,0x4077ae\nJMP 0x00402b4e\nXOR EDI,EDI\nMOV ESI,0x407783\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nCALL 0x004019b0\nAND EBP,R14D\nJZ 0x00402ba9\nXOR EDI,EDI\nMOV ESI,0x4077dc\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nADD EBP,EBP\nAND EBP,0x4\nXOR EBP,0x27\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBP\nMOV R8D,EBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004019b0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p767
S'55\n41 56\n53\n41 89 f6\n8a 07\n0f b6 d8\nbd fe ff ff ff\n89 d9\n80 c1 a8\n80 f9 20\n77 44\n0f b6 c9\n48 ba 01 00 80 00 01 00 00 00\n48 0f a3 ca\n72 1c\nba 00 10 02 00\n48 0f a3 ca\n73 20\nc6 07 75\n44 21 f5\n0f 85 8e 00 00 00\ne9 bf 00 00 00\nbd fd ff ff ff\n44 21 f5\n75 7f\ne9 b0 00 00 00\n48 83 f9 1d\n74 6f\n84 c0\n75 2c\n31 ff\nbe 5c 77 40 00\nba 05 00 00 00\ne8 6c ec ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 88 ee ff ff\n44 21 f5\n75 46\neb 7a\ne8 5c ef ff ff\n48 8b 00\nf6 44 58 01 40\n75 09\n31 ff\nbe ae 77 40 00\neb 07\n31 ff\nbe 83 77 40 00\nba 05 00 00 00\ne8 28 ec ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n89 d9\ne8 42 ee ff ff\n44 21 f5\n74 36\n31 ff\nbe dc 77 40 00\nba 05 00 00 00\ne8 fc eb ff ff\n48 89 c1\n01 ed\n83 e5 04\n83 f5 27\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n89 e9\n41 89 d8\n5b\n41 5e\n5d\ne9 07 ee ff ff\n5b\n41 5e\n5d\nc3\n'
p768
S'.text:0000000000402aa0\n.text:0000000000402aa1\n.text:0000000000402aa3\n.text:0000000000402aa4\n.text:0000000000402aa7\n.text:0000000000402aa9\n.text:0000000000402aac\n.text:0000000000402ab1\n.text:0000000000402ab3\n.text:0000000000402ab6\n.text:0000000000402ab9\n.text:0000000000402abb\n.text:0000000000402abe\n.text:0000000000402ac8\n.text:0000000000402acc\n.text:0000000000402ace\n.text:0000000000402ad3\n.text:0000000000402ad7\n.text:0000000000402ad9\n.text:0000000000402adc\n.text:0000000000402adf\n.text:0000000000402ae5\n.text:0000000000402aea\n.text:0000000000402aef\n.text:0000000000402af2\n.text:0000000000402af4\n.text:0000000000402af9\n.text:0000000000402afd\n.text:0000000000402aff\n.text:0000000000402b01\n.text:0000000000402b03\n.text:0000000000402b05\n.text:0000000000402b0a\n.text:0000000000402b0f\n.text:0000000000402b14\n.text:0000000000402b17\n.text:0000000000402b1c\n.text:0000000000402b1e\n.text:0000000000402b20\n.text:0000000000402b23\n.text:0000000000402b28\n.text:0000000000402b2b\n.text:0000000000402b2d\n.text:0000000000402b2f\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b3c\n.text:0000000000402b3e\n.text:0000000000402b40\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b49\n.text:0000000000402b4e\n.text:0000000000402b53\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b60\n.text:0000000000402b62\n.text:0000000000402b64\n.text:0000000000402b67\n.text:0000000000402b69\n.text:0000000000402b6e\n.text:0000000000402b71\n.text:0000000000402b73\n.text:0000000000402b75\n.text:0000000000402b7a\n.text:0000000000402b7f\n.text:0000000000402b84\n.text:0000000000402b87\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b8f\n.text:0000000000402b94\n.text:0000000000402b96\n.text:0000000000402b98\n.text:0000000000402b9b\n.text:0000000000402b9d\n.text:0000000000402ba0\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba4\n.text:0000000000402ba9\n.text:0000000000402baa\n.text:0000000000402bac\n.text:0000000000402bad\n'
p769
tp770
sS'quotearg_buffer_restyled'
p771
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p772
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040402c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040402c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040402c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040402c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040402c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040402c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040402c_caseD_7;\u000aswitchD_0040402c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040402c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040402c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404af0;\u000aLAB_00404210:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404af9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404b08:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040421b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040425f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040425f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404b08;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00404a35;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00404940;\u000a    }\u000a    goto LAB_00404b08;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00404a6a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404b08;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404a99;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00404558;\u000a  case '\u005ca':\u000a    goto joined_r0x00404448;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00404448;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00404276_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00404448;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00404448;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00404276_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00404448:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004049ae;\u000a    }\u000a    goto LAB_00404b08;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404b08;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404b08;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404b08;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404b08;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404b08;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00404276_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00404a06;\u000a      goto joined_r0x004049f8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00404501:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004049f8;\u000a      goto LAB_00404a06;\u000a    }\u000a    goto LAB_00404b08;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404b08;\u000a  }\u000a  goto joined_r0x00404940;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00404a6a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404a99;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404a99:\u000a  if (1 < uVar10) {\u000aLAB_00404576:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00404632;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00404501;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00404632:\u000a        if (bVar6 != 0) goto LAB_00404b08;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00404558:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00404576;\u000ajoined_r0x00404940:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00404940:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00404967;\u000aLAB_004049a0:\u000a    if (bVar22) goto LAB_004049a5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004049a0;\u000aLAB_00404967:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004049a5:\u000a      if (bVar6 != 0) goto LAB_00404b08;\u000aLAB_004049ae:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004049f8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00404a06:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004049f8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00404a35:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00404210;\u000aLAB_00404af0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404af9;\u000a  goto LAB_0040421b;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401790\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404bd5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x407c60 + RAX*0x8]\nMOV EDI,0x408186\nMOV ESI,R15D\nCALL 0x00405280\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407994\nMOV ESI,R15D\nCALL 0x00405280\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040408d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00404090\nNOP\nCMP R12,RSI\nJNC 0x0040407e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00404070\nJMP 0x00404090\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004017a0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040415c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040415c\nMOV ECX,0x408184\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00404156\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004040f7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00404124\nTEST RSI,RSI\nJZ 0x00404111\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407994\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00404132\nMOV ECX,0x407994\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040415c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00404bac\nMOV ECX,0x408184\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404af0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404af9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040425f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040425a\nCMP R11,-0x1\nJNZ 0x0040425a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004017a0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004042b0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040450c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x407cb8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404b08\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00404960\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00404967\nJMP 0x004049a0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401870\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004042fd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00404261\nJMP 0x00404b08\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00404261\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040428b\nCMP EBX,0x2\nJNZ 0x0040428b\nTEST R13,R13\nJNZ 0x0040428b\nJMP 0x00404b08\nCMP R11,-0x1\nJZ 0x004046e3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00404703\nJMP 0x0040428b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404714\nTEST R8B,R8B\nJNZ 0x00404b08\nCMP EBX,0x2\nJNZ 0x004043b8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004043b8\nCMP R12,RSI\nJNC 0x00404393\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004043a2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004043b1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004043c2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00404888\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00404888\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00404888\nCMP RCX,RSI\nJNC 0x004043fc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040440b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nJMP 0x00404960\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404289\nJMP 0x0040446a\nMOV DL,0x74\nJMP 0x00404452\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404289\nJMP 0x0040446a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404289\nJMP 0x0040446a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404b08\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404289\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004049ae\nJMP 0x00404b08\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00404289\nTEST R8B,R8B\nJNZ 0x00404b08\nCMP R12,RSI\nJNC 0x0040449a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004044a9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004044b8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00404289\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040489b\nCMP EBX,0x2\nJNZ 0x00404289\nTEST R8B,R8B\nJZ 0x00404289\nJMP 0x00404b08\nCMP EBX,0x2\nJNZ 0x00404734\nTEST R8B,R8B\nJNZ 0x00404b08\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00404a06\nJMP 0x00404a29\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00404755\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401a90\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404948\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00404948\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00404632\nJMP 0x00404600\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004045e9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004045e6\nCMP R12,RSI\nJNC 0x004045cb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004045da\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00404620\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00404620\nTEST BPL,0x1\nJZ 0x004046c3\nCMP R12,RSI\nJNC 0x00404614\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004046c3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00404600\nTEST R8B,R8B\nJNZ 0x00404b08\nCMP EBX,0x2\nJNZ 0x0040467a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040467a\nCMP R12,RSI\nJNC 0x00404652\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404661\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404670\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00404684\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040469b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004046b5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004045b0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00404a06\nJMP 0x00404a29\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040428b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040428b\nJMP 0x00404b08\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00404a35\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nJMP 0x00404960\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00404452\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00404a06\nJMP 0x00404a29\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00404777\nMOV RDI,R10\nCALL 0x004017a0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004017c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00404a4f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00404a47\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404a56\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040483e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00404836\nBT RDI,RDX\nJC 0x00404ba2\nINC RCX\nCMP RCX,R14\nJC 0x00404820\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401a70\nTEST EAX,EAX\nJNZ 0x00404853\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401a60\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404795\nJMP 0x00404a99\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nJMP 0x00404960\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00404289\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00404289\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00404289\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040428b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404ad2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404b08\nCMP R12,RSI\nJNC 0x004048fe\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404911\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404920\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040492f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nJMP 0x00404960\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004049a0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004049a5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00404a00\nJMP 0x004049a5\nTEST BPL,BPL\nJZ 0x00404a00\nTEST R8B,R8B\nJNZ 0x00404b08\nCMP EBX,0x2\nJNZ 0x004049e8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004049e8\nCMP R12,RSI\nJNC 0x004049c3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004049d2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004049e1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004049f2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00404a32\nJMP 0x00404a2e\nTEST DIL,0x1\nJZ 0x00404a29\nAND AL,0x1\nJNZ 0x00404a29\nCMP R12,RSI\nJNC 0x00404a14\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404a23\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00404a32\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404af0\nJMP 0x00404210\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404a94\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00404a8c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404ac8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00404a6a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404a99\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00404558\nJMP 0x00404576\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404a99\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00404296\nJMP 0x00404960\nCMP R13,R11\nJNZ 0x0040421b\nTEST R8B,R8B\nJZ 0x00404b62\nCMP EBX,0x2\nJNZ 0x00404b62\nTEST R12,R12\nJNZ 0x00404b62\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403fa0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404b96\nTEST R8B,R8B\nJNZ 0x00404b96\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404b96\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00404b89\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00404b80\nCMP R12,RSI\nJNC 0x00404b4d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00404b4d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404b08\nTEST RSI,RSI\nJZ 0x00404bb9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x408184\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040415c\nCALL 0x004016b0\n'
p774
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 c2 d7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 60 7c 40 00\nbf 86 81 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 94 79 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 03 d7 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 84 81 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 94 79 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 94 79 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 84 81 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 63 d5 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd b8 7c 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 a7 d5 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 67 d5 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 31 d0 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 d0 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 29 d2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 f2 d1 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 84 81 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 d6 ca ff ff\n'
p775
S'.text:0000000000403fa0\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa7\n.text:0000000000403fa9\n.text:0000000000403faa\n.text:0000000000403fb1\n.text:0000000000403fb4\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc9\n.text:0000000000403fce\n.text:0000000000403fd6\n.text:0000000000403fda\n.text:0000000000403fe0\n.text:0000000000403fe8\n.text:0000000000403fed\n.text:0000000000403ff5\n.text:0000000000403ffa\n.text:0000000000403ffe\n.text:0000000000404000\n.text:0000000000404003\n.text:0000000000404006\n.text:0000000000404009\n.text:000000000040400e\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404017\n.text:000000000040401a\n.text:000000000040401c\n.text:000000000040401f\n.text:0000000000404024\n.text:0000000000404027\n.text:000000000040402c\n.text:0000000000404033\n.text:0000000000404038\n.text:000000000040403b\n.text:0000000000404040\n.text:0000000000404045\n.text:000000000040404a\n.text:000000000040404d\n.text:0000000000404052\n.text:0000000000404057\n.text:000000000040405c\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404065\n.text:0000000000404067\n.text:000000000040406a\n.text:000000000040406c\n.text:000000000040406e\n.text:0000000000404070\n.text:0000000000404073\n.text:0000000000404075\n.text:000000000040407a\n.text:000000000040407e\n.text:0000000000404084\n.text:0000000000404087\n.text:0000000000404089\n.text:000000000040408b\n.text:000000000040408d\n.text:0000000000404090\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409d\n.text:00000000004040a2\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ab\n.text:00000000004040ae\n.text:00000000004040b3\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040be\n.text:00000000004040c1\n.text:00000000004040c3\n.text:00000000004040c6\n.text:00000000004040c8\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040d2\n.text:00000000004040d7\n.text:00000000004040dc\n.text:00000000004040df\n.text:00000000004040e5\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ed\n.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f7\n.text:00000000004040fa\n.text:00000000004040ff\n.text:0000000000404102\n.text:0000000000404104\n.text:0000000000404107\n.text:0000000000404109\n.text:000000000040410e\n.text:0000000000404111\n.text:0000000000404116\n.text:000000000040411c\n.text:0000000000404122\n.text:0000000000404124\n.text:0000000000404129\n.text:000000000040412f\n.text:0000000000404132\n.text:0000000000404135\n.text:0000000000404138\n.text:000000000040413a\n.text:000000000040413f\n.text:0000000000404142\n.text:0000000000404148\n.text:000000000040414d\n.text:0000000000404153\n.text:0000000000404156\n.text:0000000000404159\n.text:000000000040415c\n.text:0000000000404164\n.text:0000000000404166\n.text:0000000000404168\n.text:000000000040416b\n.text:000000000040416f\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404178\n.text:000000000040417a\n.text:000000000040417d\n.text:0000000000404180\n.text:0000000000404183\n.text:0000000000404185\n.text:0000000000404189\n.text:000000000040418b\n.text:000000000040418f\n.text:0000000000404192\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419a\n.text:000000000040419e\n.text:00000000004041a7\n.text:00000000004041aa\n.text:00000000004041ac\n.text:00000000004041b0\n.text:00000000004041b2\n.text:00000000004041b6\n.text:00000000004041b8\n.text:00000000004041bb\n.text:00000000004041bf\n.text:00000000004041c1\n.text:00000000004041c4\n.text:00000000004041c8\n.text:00000000004041cd\n.text:00000000004041d0\n.text:00000000004041d4\n.text:00000000004041dc\n.text:00000000004041df\n.text:00000000004041e2\n.text:00000000004041e4\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041f2\n.text:00000000004041f6\n.text:00000000004041fb\n.text:0000000000404200\n.text:0000000000404204\n.text:000000000040420a\n.text:0000000000404210\n.text:0000000000404215\n.text:000000000040421b\n.text:0000000000404220\n.text:0000000000404222\n.text:0000000000404227\n.text:000000000040422b\n.text:000000000040422d\n.text:0000000000404231\n.text:0000000000404233\n.text:0000000000404235\n.text:0000000000404238\n.text:000000000040423d\n.text:000000000040423f\n.text:0000000000404244\n.text:0000000000404249\n.text:000000000040424d\n.text:0000000000404252\n.text:0000000000404257\n.text:000000000040425a\n.text:000000000040425d\n.text:000000000040425f\n.text:0000000000404261\n.text:0000000000404266\n.text:000000000040426a\n.text:0000000000404270\n.text:0000000000404272\n.text:0000000000404274\n.text:0000000000404276\n.text:000000000040427e\n.text:0000000000404283\n.text:0000000000404289\n.text:000000000040428b\n.text:0000000000404290\n.text:0000000000404296\n.text:000000000040429f\n.text:00000000004042a5\n.text:00000000004042b0\n.text:00000000004042b2\n.text:00000000004042b5\n.text:00000000004042b9\n.text:00000000004042c1\n.text:00000000004042c4\n.text:00000000004042c9\n.text:00000000004042cb\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d5\n.text:00000000004042d8\n.text:00000000004042dd\n.text:00000000004042e0\n.text:00000000004042e5\n.text:00000000004042e9\n.text:00000000004042ee\n.text:00000000004042f0\n.text:00000000004042f2\n.text:00000000004042f8\n.text:00000000004042fd\n.text:0000000000404302\n.text:0000000000404305\n.text:000000000040430a\n.text:000000000040430e\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431a\n.text:000000000040431c\n.text:0000000000404321\n.text:0000000000404323\n.text:0000000000404326\n.text:000000000040432c\n.text:000000000040432f\n.text:0000000000404335\n.text:0000000000404338\n.text:000000000040433e\n.text:0000000000404343\n.text:0000000000404347\n.text:000000000040434d\n.text:0000000000404350\n.text:0000000000404353\n.text:0000000000404357\n.text:000000000040435a\n.text:000000000040435c\n.text:000000000040435f\n.text:0000000000404365\n.text:000000000040436a\n.text:000000000040436f\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437e\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404385\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438c\n.text:000000000040438e\n.text:0000000000404393\n.text:0000000000404398\n.text:000000000040439b\n.text:000000000040439d\n.text:00000000004043a2\n.text:00000000004043a7\n.text:00000000004043aa\n.text:00000000004043ac\n.text:00000000004043b1\n.text:00000000004043b5\n.text:00000000004043b8\n.text:00000000004043bb\n.text:00000000004043bd\n.text:00000000004043c2\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043cc\n.text:00000000004043cf\n.text:00000000004043d5\n.text:00000000004043d9\n.text:00000000004043dc\n.text:00000000004043e2\n.text:00000000004043e6\n.text:00000000004043e9\n.text:00000000004043ec\n.text:00000000004043f2\n.text:00000000004043f5\n.text:00000000004043f7\n.text:00000000004043fc\n.text:0000000000404401\n.text:0000000000404404\n.text:0000000000404406\n.text:000000000040440b\n.text:000000000040440f\n.text:0000000000404414\n.text:000000000040441a\n.text:000000000040441f\n.text:0000000000404421\n.text:0000000000404426\n.text:000000000040442c\n.text:000000000040442e\n.text:0000000000404430\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404439\n.text:000000000040443f\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404448\n.text:000000000040444e\n.text:0000000000404450\n.text:0000000000404452\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445f\n.text:0000000000404464\n.text:000000000040446a\n.text:000000000040446d\n.text:0000000000404470\n.text:0000000000404476\n.text:000000000040447b\n.text:000000000040447e\n.text:0000000000404481\n.text:0000000000404487\n.text:000000000040448a\n.text:0000000000404490\n.text:0000000000404493\n.text:0000000000404495\n.text:000000000040449a\n.text:000000000040449f\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a9\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044b8\n.text:00000000004044bc\n.text:00000000004044be\n.text:00000000004044c3\n.text:00000000004044c6\n.text:00000000004044c9\n.text:00000000004044cf\n.text:00000000004044d2\n.text:00000000004044d8\n.text:00000000004044db\n.text:00000000004044e1\n.text:00000000004044e6\n.text:00000000004044e9\n.text:00000000004044ef\n.text:00000000004044f2\n.text:00000000004044f8\n.text:00000000004044fb\n.text:00000000004044fd\n.text:0000000000404501\n.text:0000000000404507\n.text:000000000040450c\n.text:0000000000404510\n.text:0000000000404519\n.text:000000000040451f\n.text:0000000000404524\n.text:0000000000404529\n.text:000000000040452e\n.text:0000000000404531\n.text:0000000000404536\n.text:0000000000404539\n.text:000000000040453c\n.text:0000000000404541\n.text:0000000000404546\n.text:000000000040454a\n.text:000000000040454f\n.text:0000000000404554\n.text:0000000000404558\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404565\n.text:0000000000404568\n.text:000000000040456a\n.text:000000000040456d\n.text:0000000000404570\n.text:0000000000404576\n.text:000000000040457b\n.text:000000000040457e\n.text:0000000000404581\n.text:0000000000404584\n.text:0000000000404587\n.text:0000000000404589\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404594\n.text:0000000000404599\n.text:000000000040459f\n.text:00000000004045b0\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045bf\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045c6\n.text:00000000004045cb\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d5\n.text:00000000004045da\n.text:00000000004045de\n.text:00000000004045e6\n.text:00000000004045e9\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045f2\n.text:0000000000404600\n.text:0000000000404604\n.text:000000000040460a\n.text:000000000040460d\n.text:000000000040460f\n.text:0000000000404614\n.text:0000000000404617\n.text:0000000000404619\n.text:0000000000404620\n.text:0000000000404623\n.text:0000000000404628\n.text:000000000040462b\n.text:0000000000404630\n.text:0000000000404632\n.text:0000000000404635\n.text:000000000040463b\n.text:000000000040463e\n.text:0000000000404640\n.text:0000000000404644\n.text:0000000000404646\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464d\n.text:0000000000404652\n.text:0000000000404657\n.text:000000000040465a\n.text:000000000040465c\n.text:0000000000404661\n.text:0000000000404666\n.text:0000000000404669\n.text:000000000040466b\n.text:0000000000404670\n.text:0000000000404674\n.text:0000000000404676\n.text:000000000040467a\n.text:000000000040467d\n.text:000000000040467f\n.text:0000000000404684\n.text:0000000000404689\n.text:000000000040468c\n.text:000000000040468e\n.text:0000000000404691\n.text:0000000000404694\n.text:0000000000404697\n.text:000000000040469b\n.text:00000000004046a0\n.text:00000000004046a3\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b5\n.text:00000000004046b9\n.text:00000000004046bd\n.text:00000000004046c1\n.text:00000000004046c3\n.text:00000000004046c7\n.text:00000000004046ca\n.text:00000000004046d0\n.text:00000000004046d4\n.text:00000000004046d8\n.text:00000000004046de\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046e9\n.text:00000000004046ee\n.text:00000000004046f1\n.text:00000000004046f3\n.text:00000000004046f6\n.text:00000000004046fd\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404709\n.text:000000000040470f\n.text:0000000000404714\n.text:0000000000404719\n.text:000000000040471f\n.text:0000000000404722\n.text:0000000000404724\n.text:0000000000404729\n.text:000000000040472f\n.text:0000000000404734\n.text:0000000000404736\n.text:000000000040473b\n.text:0000000000404741\n.text:0000000000404743\n.text:0000000000404746\n.text:000000000040474a\n.text:0000000000404750\n.text:0000000000404755\n.text:0000000000404761\n.text:0000000000404765\n.text:0000000000404767\n.text:000000000040476a\n.text:000000000040476f\n.text:0000000000404774\n.text:0000000000404777\n.text:000000000040477b\n.text:0000000000404780\n.text:0000000000404782\n.text:0000000000404786\n.text:0000000000404788\n.text:0000000000404790\n.text:0000000000404795\n.text:000000000040479a\n.text:000000000040479e\n.text:00000000004047a2\n.text:00000000004047aa\n.text:00000000004047ad\n.text:00000000004047b2\n.text:00000000004047b5\n.text:00000000004047b8\n.text:00000000004047bd\n.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c9\n.text:00000000004047cd\n.text:00000000004047d7\n.text:00000000004047dd\n.text:00000000004047e1\n.text:00000000004047e6\n.text:00000000004047ec\n.text:00000000004047f0\n.text:00000000004047f3\n.text:00000000004047f7\n.text:00000000004047f9\n.text:00000000004047fe\n.text:0000000000404803\n.text:0000000000404807\n.text:0000000000404809\n.text:000000000040480e\n.text:0000000000404813\n.text:0000000000404817\n.text:000000000040481c\n.text:0000000000404820\n.text:0000000000404824\n.text:0000000000404827\n.text:000000000040482a\n.text:000000000040482c\n.text:0000000000404830\n.text:0000000000404836\n.text:0000000000404839\n.text:000000000040483c\n.text:000000000040483e\n.text:0000000000404842\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484b\n.text:0000000000404853\n.text:0000000000404858\n.text:000000000040485b\n.text:0000000000404863\n.text:0000000000404866\n.text:0000000000404869\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404873\n.text:0000000000404878\n.text:000000000040487d\n.text:0000000000404883\n.text:0000000000404888\n.text:000000000040488b\n.text:0000000000404890\n.text:0000000000404896\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a6\n.text:00000000004048aa\n.text:00000000004048ad\n.text:00000000004048b3\n.text:00000000004048b9\n.text:00000000004048bf\n.text:00000000004048c4\n.text:00000000004048c6\n.text:00000000004048c9\n.text:00000000004048cf\n.text:00000000004048d3\n.text:00000000004048d5\n.text:00000000004048df\n.text:00000000004048e3\n.text:00000000004048e9\n.text:00000000004048ec\n.text:00000000004048ee\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048f9\n.text:00000000004048fe\n.text:0000000000404903\n.text:0000000000404906\n.text:000000000040490a\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491b\n.text:0000000000404920\n.text:0000000000404925\n.text:0000000000404928\n.text:000000000040492a\n.text:000000000040492f\n.text:0000000000404933\n.text:0000000000404935\n.text:0000000000404938\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494d\n.text:0000000000404952\n.text:0000000000404958\n.text:0000000000404960\n.text:0000000000404965\n.text:0000000000404967\n.text:000000000040496c\n.text:000000000040496f\n.text:0000000000404971\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404979\n.text:000000000040497c\n.text:000000000040497f\n.text:0000000000404981\n.text:0000000000404989\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404990\n.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a5\n.text:00000000004049a8\n.text:00000000004049ae\n.text:00000000004049b1\n.text:00000000004049b3\n.text:00000000004049b5\n.text:00000000004049b7\n.text:00000000004049b9\n.text:00000000004049bc\n.text:00000000004049be\n.text:00000000004049c3\n.text:00000000004049c8\n.text:00000000004049cb\n.text:00000000004049cd\n.text:00000000004049d2\n.text:00000000004049d7\n.text:00000000004049da\n.text:00000000004049dc\n.text:00000000004049e1\n.text:00000000004049e5\n.text:00000000004049e8\n.text:00000000004049eb\n.text:00000000004049ed\n.text:00000000004049f2\n.text:00000000004049f5\n.text:00000000004049f8\n.text:00000000004049fa\n.text:0000000000404a00\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a08\n.text:0000000000404a0a\n.text:0000000000404a0d\n.text:0000000000404a0f\n.text:0000000000404a14\n.text:0000000000404a19\n.text:0000000000404a1c\n.text:0000000000404a1e\n.text:0000000000404a23\n.text:0000000000404a27\n.text:0000000000404a29\n.text:0000000000404a2c\n.text:0000000000404a2e\n.text:0000000000404a32\n.text:0000000000404a35\n.text:0000000000404a38\n.text:0000000000404a3c\n.text:0000000000404a42\n.text:0000000000404a47\n.text:0000000000404a4f\n.text:0000000000404a54\n.text:0000000000404a56\n.text:0000000000404a5e\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a6a\n.text:0000000000404a6f\n.text:0000000000404a73\n.text:0000000000404a75\n.text:0000000000404a7a\n.text:0000000000404a7d\n.text:0000000000404a80\n.text:0000000000404a82\n.text:0000000000404a8a\n.text:0000000000404a8c\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9d\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aab\n.text:0000000000404ab0\n.text:0000000000404ab5\n.text:0000000000404ab9\n.text:0000000000404abd\n.text:0000000000404ac3\n.text:0000000000404ac8\n.text:0000000000404ad0\n.text:0000000000404ad2\n.text:0000000000404ad4\n.text:0000000000404ad8\n.text:0000000000404add\n.text:0000000000404ae3\n.text:0000000000404af0\n.text:0000000000404af3\n.text:0000000000404af9\n.text:0000000000404afc\n.text:0000000000404afe\n.text:0000000000404b01\n.text:0000000000404b03\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b10\n.text:0000000000404b16\n.text:0000000000404b1a\n.text:0000000000404b1d\n.text:0000000000404b21\n.text:0000000000404b26\n.text:0000000000404b2a\n.text:0000000000404b2e\n.text:0000000000404b31\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3b\n.text:0000000000404b3f\n.text:0000000000404b41\n.text:0000000000404b46\n.text:0000000000404b4a\n.text:0000000000404b4d\n.text:0000000000404b50\n.text:0000000000404b57\n.text:0000000000404b58\n.text:0000000000404b5a\n.text:0000000000404b5c\n.text:0000000000404b5e\n.text:0000000000404b60\n.text:0000000000404b61\n.text:0000000000404b62\n.text:0000000000404b6a\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b78\n.text:0000000000404b7a\n.text:0000000000404b7d\n.text:0000000000404b80\n.text:0000000000404b83\n.text:0000000000404b85\n.text:0000000000404b89\n.text:0000000000404b8c\n.text:0000000000404b8f\n.text:0000000000404b92\n.text:0000000000404b94\n.text:0000000000404b96\n.text:0000000000404b99\n.text:0000000000404b9b\n.text:0000000000404ba0\n.text:0000000000404ba2\n.text:0000000000404ba7\n.text:0000000000404bac\n.text:0000000000404baf\n.text:0000000000404bb1\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbe\n.text:0000000000404bc1\n.text:0000000000404bc7\n.text:0000000000404bcd\n.text:0000000000404bd0\n.text:0000000000404bd5\n'
p776
tp777
sS'find_line'
p778
(S'\n__stdcall find_line(uintmax_t linenum)\n'
p779
V\u000acstring * find_line(uintmax_t linenum)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  line *plVar2;\u000a  buffer_record *pbVar3;\u000a  _Bool _Var4;\u000a  ulong uVar5;\u000a  buffer_record *pbVar6;\u000a  cstring *pcVar7;\u000a  \u000a  if (((head == (buffer_record *)0x0) && (_Var4 = load_buffer(), _Var4 == false)) ||\u000a     (linenum <= head->start_line && head->start_line != linenum)) {\u000a    pcVar7 = (cstring *)0x0;\u000a  }\u000a  else {\u000a    if (head == (buffer_record *)0x0) {\u000aLAB_00403373:\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("b","src/csplit.c",0x269,"struct cstring *find_line(uintmax_t)");\u000a    }\u000a    uVar1 = head->start_line;\u000a    uVar5 = head->num_lines + uVar1;\u000a    pbVar3 = head;\u000a    while (uVar5 <= linenum) {\u000a      pbVar6 = pbVar3->next;\u000a      if (pbVar6 == (buffer_record *)0x0) {\u000a        _Var4 = load_buffer();\u000a        if (_Var4 == false) {\u000a          return (cstring *)0x0;\u000a        }\u000a        pbVar6 = pbVar3->next;\u000a        if (pbVar6 == (buffer_record *)0x0) goto LAB_00403373;\u000a      }\u000a      uVar1 = pbVar6->start_line;\u000a      uVar5 = pbVar6->num_lines + uVar1;\u000a      pbVar3 = pbVar6;\u000a    }\u000a    uVar5 = linenum - uVar1;\u000a    plVar2 = pbVar3->line_start;\u000a    while (0x4f < uVar5) {\u000a      uVar5 = uVar5 - 0x50;\u000a      plVar2 = plVar2->next;\u000a    }\u000a    pcVar7 = plVar2->starts + uVar5;\u000a  }\u000a  return pcVar7;\u000a}\u000a\u000a
p780
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV R15,qword ptr [0x0060b430]\nTEST R15,R15\nJNZ 0x004032e4\nCALL 0x004035f0\nTEST AL,AL\nJZ 0x004032ea\nMOV R15,qword ptr [0x0060b430]\nCMP qword ptr [R15 + 0x10],RBX\nJBE 0x004032ef\nXOR R14D,R14D\nJMP 0x0040336a\nTEST R15,R15\nJZ 0x00403373\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x20]\nADD RAX,RCX\nCMP RAX,RBX\nJBE 0x00403309\nMOV RAX,R15\nJMP 0x0040333e\nXOR R14D,R14D\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJNZ 0x0040332b\nCALL 0x004035f0\nTEST AL,AL\nJZ 0x0040336a\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x00403373\nMOV RCX,qword ptr [RAX + 0x10]\nMOV RDX,qword ptr [RAX + 0x20]\nADD RDX,RCX\nCMP RDX,RBX\nMOV R15,RAX\nJBE 0x00403310\nSUB RBX,RCX\nMOV RAX,qword ptr [RAX + 0x30]\nCMP RBX,0x50\nJC 0x00403361\nNOP dword ptr [RAX + RAX*0x1]\nADD RBX,-0x50\nMOV RAX,qword ptr [0x518 + RAX]\nCMP RBX,0x4f\nJA 0x00403350\nSHL RBX,0x4\nLEA R14,[RAX + RBX*0x1 + 0x18]\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV EDI,0x408d91\nMOV ESI,0x4079b9\nMOV EDX,0x269\nMOV ECX,0x4079c6\nCALL 0x00401810\n'
p781
S'41 57\n41 56\n53\n48 89 fb\n4c 8b 3d 61 81 20 00\n4d 85 ff\n75 10\ne8 17 03 00 00\n84 c0\n74 0d\n4c 8b 3d 4c 81 20 00\n49 39 5f 10\n76 05\n45 31 f6\neb 7b\n4d 85 ff\n74 7f\n49 8b 4f 10\n49 8b 47 20\n48 01 c8\n48 39 d8\n76 05\n4c 89 f8\neb 35\n45 31 f6\n0f 1f 40 00\n49 8b 47 40\n48 85 c0\n75 12\ne8 d2 02 00 00\n84 c0\n74 48\n49 8b 47 40\n48 85 c0\n74 48\n48 8b 48 10\n48 8b 50 20\n48 01 ca\n48 39 da\n49 89 c7\n76 d2\n48 29 cb\n48 8b 40 30\n48 83 fb 50\n72 16\n0f 1f 44 00 00\n48 83 c3 b0\n48 8b 80 18 05 00 00\n48 83 fb 4f\n77 ef\n48 c1 e3 04\n4c 8d 74 18 18\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\nbf 91 8d 40 00\nbe b9 79 40 00\nba 69 02 00 00\nb9 c6 79 40 00\ne8 84 e4 ff ff\n'
p782
S'.text:00000000004032c0\n.text:00000000004032c2\n.text:00000000004032c4\n.text:00000000004032c5\n.text:00000000004032c8\n.text:00000000004032cf\n.text:00000000004032d2\n.text:00000000004032d4\n.text:00000000004032d9\n.text:00000000004032db\n.text:00000000004032dd\n.text:00000000004032e4\n.text:00000000004032e8\n.text:00000000004032ea\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f2\n.text:00000000004032f4\n.text:00000000004032f8\n.text:00000000004032fc\n.text:00000000004032ff\n.text:0000000000403302\n.text:0000000000403304\n.text:0000000000403307\n.text:0000000000403309\n.text:000000000040330c\n.text:0000000000403310\n.text:0000000000403314\n.text:0000000000403317\n.text:0000000000403319\n.text:000000000040331e\n.text:0000000000403320\n.text:0000000000403322\n.text:0000000000403326\n.text:0000000000403329\n.text:000000000040332b\n.text:000000000040332f\n.text:0000000000403333\n.text:0000000000403336\n.text:0000000000403339\n.text:000000000040333c\n.text:000000000040333e\n.text:0000000000403341\n.text:0000000000403345\n.text:0000000000403349\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403354\n.text:000000000040335b\n.text:000000000040335f\n.text:0000000000403361\n.text:0000000000403365\n.text:000000000040336a\n.text:000000000040336d\n.text:000000000040336e\n.text:0000000000403370\n.text:0000000000403372\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403387\n'
p783
tp784
sS'set_quoting_style'
p785
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p786
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p787
S'TEST RDI,RDI\nMOV EAX,0x60b470\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p788
S'48 85 ff\nb8 70 b4 60 00\n48 0f 45 c7\n89 30\nc3\n'
p789
S'.text:0000000000403e80\n.text:0000000000403e83\n.text:0000000000403e88\n.text:0000000000403e8c\n.text:0000000000403e8e\n'
p790
tp791
sS'textdomain'
p792
(S'\n__stdcall textdomain()\n'
p793
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060b098)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060b098]\n'
p795
S'ff 25 42 99 20 00\n'
p796
S'.plt:0000000000401750\n'
p797
tp798
sS'save_line_to_file'
p799
(S'\n__stdcall save_line_to_file(cstring * line)\n'
p800
V\u000avoid save_line_to_file(cstring *line)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  sVar2 = fwrite_unlocked(line->str,1,line->len,(FILE *)output_stream);\u000a  if (sVar2 == line->len) {\u000a    bytes_written = bytes_written + line->len;\u000a    return;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar1 = *puVar3;\u000a  uVar4 = dcgettext(0,"write error for %s",5);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  error(0,(ulong)uVar1,uVar4,pcVar5);\u000a  output_stream = (FILE *)0x0;\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDX,qword ptr [RBX]\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RCX,qword ptr [0x0060b3f0]\nMOV ESI,0x1\nCALL 0x00401960\nMOV RCX,qword ptr [RBX]\nCMP RAX,RCX\nJNZ 0x004034a4\nADD qword ptr [0x0060b400],RCX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x004016c0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x407682\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0060b3f8]\nMOV EDI,0x4\nCALL 0x00405050\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004019b0\nMOV qword ptr [0x0060b3f0],0x0\nCALL 0x00401be0\n'
p802
S'55\n53\n50\n48 89 fb\n48 8b 13\n48 8b 7b 08\n48 8b 0d 6c 7f 20 00\nbe 01 00 00 00\ne8 d2 e4 ff ff\n48 8b 0b\n48 39 c8\n75 0e\n48 01 0d 63 7f 20 00\n48 83 c4 08\n5b\n5d\nc3\ne8 17 e2 ff ff\n8b 28\n31 ff\nbe 82 76 40 00\nba 05 00 00 00\ne8 c4 e2 ff ff\n48 89 c3\n48 8b 35 32 7f 20 00\nbf 04 00 00 00\ne8 80 1b 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 cf e4 ff ff\n48 c7 05 04 7f 20 00 00 00 00 00\ne8 ef e6 ff ff\n'
p803
S'.text:0000000000403470\n.text:0000000000403471\n.text:0000000000403472\n.text:0000000000403473\n.text:0000000000403476\n.text:0000000000403479\n.text:000000000040347d\n.text:0000000000403484\n.text:0000000000403489\n.text:000000000040348e\n.text:0000000000403491\n.text:0000000000403494\n.text:0000000000403496\n.text:000000000040349d\n.text:00000000004034a1\n.text:00000000004034a2\n.text:00000000004034a3\n.text:00000000004034a4\n.text:00000000004034a9\n.text:00000000004034ab\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034bc\n.text:00000000004034bf\n.text:00000000004034c6\n.text:00000000004034cb\n.text:00000000004034d0\n.text:00000000004034d3\n.text:00000000004034d5\n.text:00000000004034d7\n.text:00000000004034d9\n.text:00000000004034dc\n.text:00000000004034e1\n.text:00000000004034ec\n'
p804
tp805
sS'xmemdup'
p806
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p807
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405c40\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004018e0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 3c bb ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p810
S'.text:0000000000405d80\n.text:0000000000405d82\n.text:0000000000405d84\n.text:0000000000405d85\n.text:0000000000405d88\n.text:0000000000405d8b\n.text:0000000000405d8e\n.text:0000000000405d93\n.text:0000000000405d96\n.text:0000000000405d99\n.text:0000000000405d9c\n.text:0000000000405d9f\n.text:0000000000405da4\n.text:0000000000405da7\n.text:0000000000405da8\n.text:0000000000405daa\n.text:0000000000405dac\n'
p811
tp812
sS'get_quoting_style'
p813
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p814
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p815
S'TEST RDI,RDI\nMOV EAX,0x60b470\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p816
S'48 85 ff\nb8 70 b4 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p817
S'.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e78\n.text:0000000000403e7c\n.text:0000000000403e7e\n'
p818
tp819
sS'ferror_unlocked'
p820
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060b138)();\u000a  return iVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x0060b138]\n'
p823
S'ff 25 a2 98 20 00\n'
p824
S'.plt:0000000000401890\n'
p825
tp826
sS'exit'
p827
(S'\n__stdcall exit(int __status)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060b200)();\u000a  return;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x0060b200]\n'
p830
S'ff 25 da 97 20 00\n'
p831
S'.plt:0000000000401a20\n'
p832
tp833
sS'locale_charset'
p834
(S'\n__stdcall locale_charset()\n'
p835
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00406a2d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00406a2d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401920\nTEST RAX,RAX\nMOV R14D,0x4082d9\nCMOVNZ R14,RAX\nCALL 0x00406a40\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00406a05\nJMP 0x00406a2d\nMOV RDI,RBX\nCALL 0x004017a0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004017a0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00406a2d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004018b0\nTEST EAX,EAX\nJZ 0x00406a20\nCMP BPL,0x2a\nJNZ 0x004069e0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004069e0\nMOV RDI,RBX\nCALL 0x004017a0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x408d60\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p837
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 62 af ff ff\n48 85 c0\n41 be d9 82 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 b8 ad ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 aa ad ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 a0 ae ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 78 ad ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 60 8d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p838
S'.text:00000000004069b0\n.text:00000000004069b1\n.text:00000000004069b3\n.text:00000000004069b4\n.text:00000000004069b9\n.text:00000000004069be\n.text:00000000004069c1\n.text:00000000004069c7\n.text:00000000004069cb\n.text:00000000004069d0\n.text:00000000004069d3\n.text:00000000004069d6\n.text:00000000004069d9\n.text:00000000004069db\n.text:00000000004069e0\n.text:00000000004069e3\n.text:00000000004069e8\n.text:00000000004069ec\n.text:00000000004069f1\n.text:00000000004069f6\n.text:00000000004069fb\n.text:0000000000406a00\n.text:0000000000406a03\n.text:0000000000406a05\n.text:0000000000406a08\n.text:0000000000406a0b\n.text:0000000000406a10\n.text:0000000000406a12\n.text:0000000000406a14\n.text:0000000000406a18\n.text:0000000000406a1a\n.text:0000000000406a1e\n.text:0000000000406a20\n.text:0000000000406a23\n.text:0000000000406a28\n.text:0000000000406a2d\n.text:0000000000406a31\n.text:0000000000406a36\n.text:0000000000406a3a\n.text:0000000000406a3b\n.text:0000000000406a3d\n.text:0000000000406a3e\n'
p839
tp840
sS'get_first_line_in_buffer'
p841
(S'\n__stdcall get_first_line_in_buffer()\n'
p842
V\u000auintmax_t get_first_line_in_buffer(void)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  \u000a  if (head == (buffer_record *)0x0) {\u000a    _Var2 = load_buffer();\u000a    if (_Var2 == false) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"input disappeared",5);\u000a      error(1,(ulong)uVar1,uVar4,uVar4);\u000a    }\u000a  }\u000a  return head->first_available;\u000a}\u000a\u000a
p843
S'PUSH RBX\nCMP qword ptr [0x0060b430],0x0\nJNZ 0x00403a50\nCALL 0x004035f0\nTEST AL,AL\nJNZ 0x00403a50\nCALL 0x004016c0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x407a16\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004019b0\nMOV RAX,qword ptr [0x0060b430]\nMOV RAX,qword ptr [RAX + 0x18]\nPOP RBX\nRET\n'
p844
S'53\n48 83 3d 17 7a 20 00 00\n75 35\ne8 d0 fb ff ff\n84 c0\n75 2c\ne8 97 dc ff ff\n8b 18\n31 ff\nbe 16 7a 40 00\nba 05 00 00 00\ne8 44 dd ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 60 df ff ff\n48 8b 05 d9 79 20 00\n48 8b 40 18\n5b\nc3\n'
p845
S'.text:0000000000403a10\n.text:0000000000403a11\n.text:0000000000403a19\n.text:0000000000403a1b\n.text:0000000000403a20\n.text:0000000000403a22\n.text:0000000000403a24\n.text:0000000000403a29\n.text:0000000000403a2b\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a37\n.text:0000000000403a3c\n.text:0000000000403a3f\n.text:0000000000403a44\n.text:0000000000403a46\n.text:0000000000403a48\n.text:0000000000403a4b\n.text:0000000000403a50\n.text:0000000000403a57\n.text:0000000000403a5b\n.text:0000000000403a5c\n'
p846
tp847
sS'set_program_name'
p848
(S'\n__stdcall set_program_name(char * argv0)\n'
p849
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p850
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403e01\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004017f0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00403deb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x407c45\nMOV EDX,0x7\nCALL 0x004016e0\nTEST EAX,EAX\nJNZ 0x00403deb\nMOV ESI,0x407c4d\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004016e0\nTEST EAX,EAX\nJNZ 0x00403de8\nADD R14,0x3\nMOV qword ptr [0x0060b2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060b468],RBX\nMOV qword ptr [0x0060b310],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060b320]\nMOV EDI,0x407c0d\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401a30\nCALL 0x004016b0\n'
p851
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 57 da ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 45 7c 40 00\nba 07 00 00 00\ne8 1d d9 ff ff\n85 c0\n75 24\nbe 4d 7c 40 00\nba 03 00 00 00\n4c 89 f7\ne8 07 d9 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 f8 74 20 00\n4c 89 f3\n48 89 1d 76 76 20 00\n48 89 1d 17 75 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 18 75 20 00\nbf 0d 7c 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 14 dc ff ff\ne8 8f d8 ff ff\n'
p852
S'.text:0000000000403d80\n.text:0000000000403d82\n.text:0000000000403d83\n.text:0000000000403d84\n.text:0000000000403d87\n.text:0000000000403d8a\n.text:0000000000403d8c\n.text:0000000000403d91\n.text:0000000000403d94\n.text:0000000000403d99\n.text:0000000000403d9c\n.text:0000000000403da0\n.text:0000000000403da4\n.text:0000000000403da7\n.text:0000000000403daa\n.text:0000000000403dae\n.text:0000000000403db0\n.text:0000000000403db4\n.text:0000000000403db9\n.text:0000000000403dbe\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dcc\n.text:0000000000403dd1\n.text:0000000000403dd4\n.text:0000000000403dd9\n.text:0000000000403ddb\n.text:0000000000403ddd\n.text:0000000000403de1\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403df2\n.text:0000000000403df9\n.text:0000000000403dfd\n.text:0000000000403dfe\n.text:0000000000403e00\n.text:0000000000403e01\n.text:0000000000403e08\n.text:0000000000403e0d\n.text:0000000000403e12\n.text:0000000000403e17\n.text:0000000000403e1c\n'
p853
tp854
sS'quotearg_buffer'
p855
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p856
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60b470\nCMOVNZ RBP,R8\nCALL 0x004016c0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403fa0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p858
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 70 b4 60 00\n49 0f 45 e8\ne8 78 d7 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p859
S'.text:0000000000403f20\n.text:0000000000403f21\n.text:0000000000403f23\n.text:0000000000403f25\n.text:0000000000403f27\n.text:0000000000403f29\n.text:0000000000403f2a\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f31\n.text:0000000000403f34\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f43\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f4d\n.text:0000000000403f51\n.text:0000000000403f55\n.text:0000000000403f59\n.text:0000000000403f5d\n.text:0000000000403f60\n.text:0000000000403f63\n.text:0000000000403f66\n.text:0000000000403f69\n.text:0000000000403f6c\n.text:0000000000403f6f\n.text:0000000000403f73\n.text:0000000000403f74\n.text:0000000000403f79\n.text:0000000000403f7d\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f87\n.text:0000000000403f88\n.text:0000000000403f8a\n.text:0000000000403f8c\n.text:0000000000403f8e\n.text:0000000000403f90\n.text:0000000000403f91\n'
p860
tp861
sS'quotearg_colon'
p862
(S'\n__stdcall quotearg_colon(char * arg)\n'
p863
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'MOV ESI,0x3a\nJMP 0x00405100\n'
p865
S'be 3a 00 00 00\neb e9\n'
p866
S'.text:0000000000405110\n.text:0000000000405115\n'
p867
tp868
sS'rpl_fflush'
p869
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p870
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060b178)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040674d\nMOV RDI,RBX\nCALL 0x00401950\nTEST EAX,EAX\nJZ 0x0040674d\nMOV RDI,RBX\nCALL 0x00406760\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401910\n'
p872
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 0f b2 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ba b1 ff ff\n'
p873
S'.text:0000000000406730\n.text:0000000000406731\n.text:0000000000406734\n.text:0000000000406737\n.text:0000000000406739\n.text:000000000040673c\n.text:0000000000406741\n.text:0000000000406743\n.text:0000000000406745\n.text:0000000000406748\n.text:000000000040674d\n.text:0000000000406750\n.text:0000000000406751\n'
p874
tp875
sS'__assert_fail'
p876
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060b0f8)();\u000a  return;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x0060b0f8]\n'
p879
S'ff 25 e2 98 20 00\n'
p880
S'.plt:0000000000401810\n'
p881
tp882
sS'close_output_file'
p883
(S'\n__stdcall close_output_file()\n'
p884
V\u000avoid close_output_file(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  undefined8 uVar5;\u000a  ulong uVar6;\u000a  char buf [21];\u000a  undefined auStack168 [136];\u000a  \u000a  if (output_stream == (FILE *)0x0) {\u000a    return;\u000a  }\u000a  iVar2 = ferror_unlocked((FILE *)output_stream);\u000a  if (iVar2 == 0) {\u000a    iVar2 = rpl_fclose(output_stream);\u000a    uVar5 = stdout;\u000a    if (iVar2 == 0) {\u000a      if ((bytes_written == 0) && (elide_empty_files == 1)) {\u000a        sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)auStack168);\u000a        iVar2 = unlink(output_filename);\u000a        puVar3 = (uint *)__errno_location();\u000a        uVar1 = *puVar3;\u000a        files_created = files_created - (uint)(iVar2 == 0);\u000a        sigprocmask(2,(sigset_t *)auStack168,(sigset_t *)0x0);\u000a        if (iVar2 != 0) {\u000a          pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)uVar1,0x40789d,pcVar4);\u000a        }\u000a      }\u000a      else {\u000a        if (suppress_count == 0) {\u000a          pcVar4 = umaxtostr(bytes_written,auStack168);\u000a          __fprintf_chk(uVar5,1,0x408200,pcVar4);\u000a        }\u000a      }\u000a      output_stream = (FILE *)0x0;\u000a      return;\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a    uVar5 = 0x40789d;\u000a    uVar6 = (ulong)uVar1;\u000a  }\u000a  else {\u000a    uVar5 = dcgettext(0,"write error for %s",5);\u000a    pcVar4 = quotearg_style((char *)0x4);\u000a    uVar6 = 0;\u000a  }\u000a  error(0,uVar6,uVar5,pcVar4);\u000a  output_stream = (FILE *)0x0;\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x88\nMOV RDI,qword ptr [0x0060b3f0]\nTEST RDI,RDI\nJZ 0x004028b4\nCALL 0x00401890\nTEST EAX,EAX\nJNZ 0x004028c2\nMOV RDI,qword ptr [0x0060b3f0]\nCALL 0x004064f0\nTEST EAX,EAX\nJNZ 0x004028f5\nCMP qword ptr [0x0060b400],0x0\nJNZ 0x00402872\nCMP byte ptr [0x0060b360],0x1\nJNZ 0x00402872\nMOV R15,RSP\nXOR EDI,EDI\nMOV ESI,0x60b370\nMOV RDX,R15\nCALL 0x00401660\nMOV RDI,qword ptr [0x0060b3f8]\nCALL 0x004016d0\nMOV EBP,EAX\nXOR EBX,EBX\nTEST EBP,EBP\nSETZ BL\nCALL 0x004016c0\nMOV R14D,dword ptr [RAX]\nSUB dword ptr [0x0060b408],EBX\nMOV EDI,0x2\nXOR EDX,EDX\nMOV RSI,R15\nCALL 0x00401660\nTEST EBP,EBP\nJZ 0x004028a9\nMOV RDX,qword ptr [0x0060b3f8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00405130\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40789d\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004019b0\nJMP 0x004028a9\nMOV AL,byte ptr [0x0060b348]\nTEST AL,AL\nJNZ 0x004028a9\nMOV RBX,qword ptr [0x0060b2e8]\nMOV RDI,qword ptr [0x0060b400]\nMOV RSI,RSP\nCALL 0x00403d20\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x408200\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401a40\nMOV qword ptr [0x0060b3f0],0x0\nADD RSP,0x88\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407682\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0060b3f8]\nMOV EDI,0x4\nCALL 0x00405050\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x0040291d\nCALL 0x004016c0\nMOV EBX,dword ptr [RAX]\nMOV RDX,qword ptr [0x0060b3f8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00405130\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40789d\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x004019b0\nMOV qword ptr [0x0060b3f0],0x0\nCALL 0x00401be0\n'
p886
S'55\n41 57\n41 56\n53\n48 81 ec 88 00 00 00\n48 8b 3d 2c 8c 20 00\n48 85 ff\n0f 84 e7 00 00 00\ne8 be f0 ff ff\n85 c0\n0f 85 e8 00 00 00\n48 8b 3d 0f 8c 20 00\ne8 0a 3d 00 00\n85 c0\n0f 85 07 01 00 00\n48 83 3d 0a 8c 20 00 00\n75 7a\n80 3d 61 8b 20 00 01\n75 71\n49 89 e7\n31 ff\nbe 70 b3 60 00\n4c 89 fa\ne8 4d ee ff ff\n48 8b 3d de 8b 20 00\ne8 b1 ee ff ff\n89 c5\n31 db\n85 ed\n0f 94 c3\ne8 93 ee ff ff\n44 8b 30\n29 1d d2 8b 20 00\nbf 02 00 00 00\n31 d2\n4c 89 fe\ne8 1b ee ff ff\n85 ed\n74 60\n48 8b 15 a8 8b 20 00\n31 ff\nbe 03 00 00 00\ne8 d4 28 00 00\n48 89 c1\n31 ff\nba 9d 78 40 00\n31 c0\n44 89 f6\ne8 40 f1 ff ff\neb 37\n8a 05 d0 8a 20 00\n84 c0\n75 2d\n48 8b 1d 65 8a 20 00\n48 8b 3d 76 8b 20 00\n48 89 e6\ne8 8e 14 00 00\n48 89 c1\nbe 01 00 00 00\nba 00 82 40 00\n31 c0\n48 89 df\ne8 97 f1 ff ff\n48 c7 05 3c 8b 20 00 00 00 00 00\n48 81 c4 88 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 82 76 40 00\nba 05 00 00 00\ne8 ad ee ff ff\n48 89 c3\n48 8b 35 1b 8b 20 00\nbf 04 00 00 00\ne8 69 27 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\neb 28\ne8 c6 ed ff ff\n8b 18\n48 8b 15 f5 8a 20 00\n31 ff\nbe 03 00 00 00\ne8 21 28 00 00\n48 89 c1\n31 ff\nba 9d 78 40 00\n31 c0\n89 de\ne8 8e f0 ff ff\n48 c7 05 c3 8a 20 00 00 00 00 00\ne8 ae f2 ff ff\n'
p887
S'.text:00000000004027b0\n.text:00000000004027b1\n.text:00000000004027b3\n.text:00000000004027b5\n.text:00000000004027b6\n.text:00000000004027bd\n.text:00000000004027c4\n.text:00000000004027c7\n.text:00000000004027cd\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027da\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027e8\n.text:00000000004027ee\n.text:00000000004027f6\n.text:00000000004027f8\n.text:00000000004027ff\n.text:0000000000402801\n.text:0000000000402804\n.text:0000000000402806\n.text:000000000040280b\n.text:000000000040280e\n.text:0000000000402813\n.text:000000000040281a\n.text:000000000040281f\n.text:0000000000402821\n.text:0000000000402823\n.text:0000000000402825\n.text:0000000000402828\n.text:000000000040282d\n.text:0000000000402830\n.text:0000000000402836\n.text:000000000040283b\n.text:000000000040283d\n.text:0000000000402840\n.text:0000000000402845\n.text:0000000000402847\n.text:0000000000402849\n.text:0000000000402850\n.text:0000000000402852\n.text:0000000000402857\n.text:000000000040285c\n.text:000000000040285f\n.text:0000000000402861\n.text:0000000000402866\n.text:0000000000402868\n.text:000000000040286b\n.text:0000000000402870\n.text:0000000000402872\n.text:0000000000402878\n.text:000000000040287a\n.text:000000000040287c\n.text:0000000000402883\n.text:000000000040288a\n.text:000000000040288d\n.text:0000000000402892\n.text:0000000000402895\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a1\n.text:00000000004028a4\n.text:00000000004028a9\n.text:00000000004028b4\n.text:00000000004028bb\n.text:00000000004028bc\n.text:00000000004028be\n.text:00000000004028c0\n.text:00000000004028c1\n.text:00000000004028c2\n.text:00000000004028c4\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d6\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ea\n.text:00000000004028ec\n.text:00000000004028ee\n.text:00000000004028f0\n.text:00000000004028f3\n.text:00000000004028f5\n.text:00000000004028fa\n.text:00000000004028fc\n.text:0000000000402903\n.text:0000000000402905\n.text:000000000040290a\n.text:000000000040290f\n.text:0000000000402912\n.text:0000000000402914\n.text:0000000000402919\n.text:000000000040291b\n.text:000000000040291d\n.text:0000000000402922\n.text:000000000040292d\n'
p888
tp889
sS'bindtextdomain'
p890
(S'\n__stdcall bindtextdomain()\n'
p891
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060b0a8)();\u000a  return;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060b0a8]\n'
p893
S'ff 25 32 99 20 00\n'
p894
S'.plt:0000000000401770\n'
p895
tp896
sS'set_char_quoting'
p897
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p898
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p899
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60b470\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p900
S'89 f1\n48 85 ff\nbe 70 b4 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p901
S'.text:0000000000403e90\n.text:0000000000403e92\n.text:0000000000403e95\n.text:0000000000403e9a\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea3\n.text:0000000000403ea7\n.text:0000000000403eac\n.text:0000000000403eaf\n.text:0000000000403eb1\n.text:0000000000403eb3\n.text:0000000000403eb6\n.text:0000000000403eb8\n.text:0000000000403ebb\n.text:0000000000403ebd\n.text:0000000000403ec0\n.text:0000000000403ec5\n'
p902
tp903
sS'quotearg_n'
p904
(S'\n__stdcall quotearg_n(char * arg)\n'
p905
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p906
S'MOV RDX,-0x1\nMOV ECX,0x60b470\nJMP 0x00404d80\n'
p907
S'48 c7 c2 ff ff ff ff\nb9 70 b4 60 00\neb 02\n'
p908
S'.text:0000000000404d70\n.text:0000000000404d77\n.text:0000000000404d7c\n'
p909
tp910
sS'close_stream'
p911
(S'\n__stdcall close_stream(FILE * stream)\n'
p912
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401710\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401890\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004064f0\nTEST EBP,EBP\nJZ 0x0040697b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040699f\nCALL 0x004016c0\nMOV dword ptr [RAX],0x0\nJMP 0x0040699f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040699f\nTEST CL,CL\nJNZ 0x0040699f\nCALL 0x004016c0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p914
S'55\n41 56\n53\n48 89 fb\ne8 c4 ad ff ff\n49 89 c6\n48 89 df\ne8 39 af ff ff\n89 c5\n48 89 df\ne8 8f fb ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 4d ad ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 2e ad ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p915
S'.text:0000000000406940\n.text:0000000000406941\n.text:0000000000406943\n.text:0000000000406944\n.text:0000000000406947\n.text:000000000040694c\n.text:000000000040694f\n.text:0000000000406952\n.text:0000000000406957\n.text:0000000000406959\n.text:000000000040695c\n.text:0000000000406961\n.text:0000000000406963\n.text:0000000000406965\n.text:000000000040696a\n.text:000000000040696c\n.text:000000000040696e\n.text:0000000000406973\n.text:0000000000406979\n.text:000000000040697b\n.text:000000000040697d\n.text:0000000000406980\n.text:0000000000406982\n.text:0000000000406984\n.text:0000000000406987\n.text:0000000000406989\n.text:000000000040698b\n.text:000000000040698d\n.text:0000000000406992\n.text:0000000000406994\n.text:0000000000406997\n.text:000000000040699c\n.text:000000000040699f\n.text:00000000004069a1\n.text:00000000004069a2\n.text:00000000004069a4\n.text:00000000004069a5\n'
p916
tp917
sS'quotearg_colon_mem'
p918
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p919
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p920
S'MOV EDX,0x3a\nJMP 0x00405090\n'
p921
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p922
S'.text:0000000000405120\n.text:0000000000405125\n'
p923
tp924
sS'strtoimax'
p925
(S'\n__stdcall strtoimax(char * __nptr, char * * __endptr, int __base)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strtoimax_0060b040)();\u000a  return iVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060b040]\n'
p928
S'ff 25 9a 99 20 00\n'
p929
S'.plt:00000000004016a0\n'
p930
tp931
sS'xcalloc'
p932
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p933
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p934
S'PUSH RAX\nCALL 0x004064a0\nTEST RAX,RAX\nJZ 0x00405d6d\nPOP RCX\nRET\nCALL 0x00401bb0\n'
p935
S'50\ne8 3a 07 00 00\n48 85 c0\n74 02\n59\nc3\ne8 3e be ff ff\n'
p936
S'.text:0000000000405d60\n.text:0000000000405d61\n.text:0000000000405d66\n.text:0000000000405d69\n.text:0000000000405d6b\n.text:0000000000405d6c\n.text:0000000000405d6d\n'
p937
tp938
sS'clear_ungetc_buffer_preserving_position'
p939
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p940
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p941
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00406767\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00406780\n'
p942
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p943
S'.text:0000000000406760\n.text:0000000000406764\n.text:0000000000406766\n.text:0000000000406767\n.text:0000000000406769\n.text:000000000040676e\n'
p944
tp945
sS'regexp_error'
p946
(S'\n__stdcall regexp_error(control * p, uintmax_t repetition)\n'
p947
V\u000avoid regexp_error(control *p,uintmax_t repetition)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char in_DL;\u000a  char buf [21];\u000a  char acStack72 [24];\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"%s: %s: match not found",5);\u000a  pcVar4 = program_name;\u000a  pcVar3 = quote(global_argv[(long)p->argnum]);\u000a  __fprintf_chk(uVar1,1,uVar2,pcVar4,pcVar3);\u000a  uVar1 = stderr;\u000a  if (repetition == 0) {\u000a    __fprintf_chk(stderr,1,0x4082d8);\u000a  }\u000a  else {\u000a    uVar2 = dcgettext(0," on repetition %s\u005cn",5);\u000a    pcVar4 = umaxtostr(repetition,acStack72);\u000a    __fprintf_chk(uVar1,1,uVar2,pcVar4);\u000a  }\u000a  if (in_DL == 0) {\u000a    dump_rest_of_file();\u000a    close_output_file();\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14D,EDX\nMOV R15,RSI\nMOV RBP,RDI\nMOV R12,qword ptr [0x0060b320]\nXOR EDI,EDI\nMOV ESI,0x4079eb\nMOV EDX,0x5\nCALL 0x00401780\nMOV R13,RAX\nMOV RBX,qword ptr [0x0060b468]\nMOV RAX,qword ptr [0x0060b330]\nMOVSXD RCX,dword ptr [RBP + 0x18]\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCALL 0x00405270\nMOV RBP,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,R13\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00401a40\nTEST R15,R15\nJNZ 0x0040341c\nMOV RDI,qword ptr [0x0060b320]\nMOV ESI,0x1\nMOV EDX,0x4082d8\nXOR EAX,EAX\nCALL 0x00401a40\nTEST R14B,R14B\nJZ 0x0040345c\nJMP 0x00403466\nMOV RBX,qword ptr [0x0060b320]\nXOR EDI,EDI\nMOV ESI,0x407a03\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBP,RAX\nMOV RSI,RSP\nMOV RDI,R15\nCALL 0x00403d20\nMOV RCX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401a40\nTEST R14B,R14B\nJNZ 0x00403466\nCALL 0x004031e0\nCALL 0x004027b0\nCALL 0x00401be0\n'
p949
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d6\n49 89 f7\n48 89 fd\n4c 8b 25 72 7f 20 00\n31 ff\nbe eb 79 40 00\nba 05 00 00 00\ne8 c1 e3 ff ff\n49 89 c5\n48 8b 1d 9f 80 20 00\n48 8b 05 60 7f 20 00\n48 63 4d 18\n48 8b 3c c8\ne8 93 1e 00 00\n48 89 c5\nbe 01 00 00 00\n31 c0\n4c 89 e7\n4c 89 ea\n48 89 d9\n49 89 e8\ne8 48 e6 ff ff\n4d 85 ff\n75 1f\n48 8b 3d 1c 7f 20 00\nbe 01 00 00 00\nba d8 82 40 00\n31 c0\ne8 2b e6 ff ff\n45 84 f6\n74 42\neb 4a\n48 8b 1d fd 7e 20 00\n31 ff\nbe 03 7a 40 00\nba 05 00 00 00\ne8 4c e3 ff ff\n48 89 c5\n48 89 e6\n4c 89 ff\ne8 de 08 00 00\n48 89 c1\nbe 01 00 00 00\n31 c0\n48 89 df\n48 89 ea\ne8 e9 e5 ff ff\n45 84 f6\n75 0a\ne8 7f fd ff ff\ne8 4a f3 ff ff\ne8 75 e7 ff ff\n'
p950
S'.text:0000000000403390\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403395\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339a\n.text:000000000040339e\n.text:00000000004033a1\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033ae\n.text:00000000004033b0\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033bf\n.text:00000000004033c2\n.text:00000000004033c9\n.text:00000000004033d0\n.text:00000000004033d4\n.text:00000000004033d8\n.text:00000000004033dd\n.text:00000000004033e0\n.text:00000000004033e5\n.text:00000000004033e7\n.text:00000000004033ea\n.text:00000000004033ed\n.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f8\n.text:00000000004033fb\n.text:00000000004033fd\n.text:0000000000403404\n.text:0000000000403409\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403415\n.text:0000000000403418\n.text:000000000040341a\n.text:000000000040341c\n.text:0000000000403423\n.text:0000000000403425\n.text:000000000040342a\n.text:000000000040342f\n.text:0000000000403434\n.text:0000000000403437\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403442\n.text:0000000000403445\n.text:000000000040344a\n.text:000000000040344c\n.text:000000000040344f\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345a\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403466\n'
p951
tp952
sS'xnmalloc'
p953
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p954
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p955
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405c31\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405c40\nPUSH RAX\nCALL 0x00401bb0\n'
p956
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 79 bf ff ff\n'
p957
S'.text:0000000000405c20\n.text:0000000000405c23\n.text:0000000000405c26\n.text:0000000000405c28\n.text:0000000000405c2c\n.text:0000000000405c2f\n.text:0000000000405c31\n.text:0000000000405c32\n'
p958
tp959
sS'quotearg_char'
p960
(S'\n__stdcall quotearg_char(char * arg)\n'
p961
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00405090\n'
p963
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p964
S'.text:0000000000405100\n.text:0000000000405102\n.text:0000000000405109\n.text:000000000040510b\n'
p965
tp966
sS'malloc'
p967
(S'\n__stdcall malloc(size_t __size)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060b170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060b170]\n'
p970
S'ff 25 6a 98 20 00\n'
p971
S'.plt:0000000000401900\n'
p972
tp973
sS'c_tolower'
p974
(S'\n__stdcall c_tolower()\n'
p975
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p977
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p978
S'.text:0000000000406920\n.text:0000000000406923\n.text:0000000000406926\n.text:0000000000406929\n.text:000000000040692c\n'
p979
tp980
sS'getopt_long'
p981
(S'\n__stdcall getopt_long()\n'
p982
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060b0c8)();\u000a  return;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060b0c8]\n'
p984
S'ff 25 12 99 20 00\n'
p985
S'.plt:00000000004017b0\n'
p986
tp987
sS'quotearg_style'
p988
(S'\n__stdcall quotearg_style(char * arg)\n'
p989
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404f70\n'
p991
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p992
S'.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405057\n.text:0000000000405059\n.text:000000000040505c\n'
p993
tp994
sS'fd_reopen'
p995
(S'\n__stdcall fd_reopen(char * file)\n'
p996
V\u000aint fd_reopen(char *file)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int *piVar3;\u000a  uint in_ECX;\u000a  int __oflag;\u000a  char *__file;\u000a  \u000a  __fd = open(__file,__oflag,(ulong)in_ECX);\u000a  if ((__fd != (int)file) && (-1 < __fd)) {\u000a    iVar2 = dup2(__fd,(int)file);\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = iVar2;\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nMOV EDX,ECX\nCALL 0x004019c0\nMOV EBX,EAX\nCMP EBX,EBP\nJZ 0x00403c79\nTEST EBX,EBX\nJS 0x00403c79\nMOV EDI,EBX\nMOV ESI,EBP\nCALL 0x004017d0\nMOV R14D,EAX\nCALL 0x004016c0\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401840\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00403c7b\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p998
S'55\n41 57\n41 56\n53\n50\n89 fd\n31 c0\n48 89 f7\n89 d6\n89 ca\ne8 79 dd ff ff\n89 c3\n39 eb\n74 2c\n85 db\n78 28\n89 df\n89 ee\ne8 76 db ff ff\n41 89 c6\ne8 5e da ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 d0 db ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p999
S'.text:0000000000403c30\n.text:0000000000403c31\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c36\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c3e\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c47\n.text:0000000000403c49\n.text:0000000000403c4b\n.text:0000000000403c4d\n.text:0000000000403c4f\n.text:0000000000403c51\n.text:0000000000403c53\n.text:0000000000403c55\n.text:0000000000403c5a\n.text:0000000000403c5d\n.text:0000000000403c62\n.text:0000000000403c65\n.text:0000000000403c69\n.text:0000000000403c6b\n.text:0000000000403c70\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c79\n.text:0000000000403c7b\n.text:0000000000403c7f\n.text:0000000000403c80\n.text:0000000000403c82\n.text:0000000000403c84\n.text:0000000000403c85\n'
p1000
tp1001
sS'sigprocmask'
p1002
(S'\n__stdcall sigprocmask(int __how, sigset_t * __set, sigset_t * __oset)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigprocmask(int __how,sigset_t *__set,sigset_t *__oset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigprocmask_0060b020)();\u000a  return iVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060b020]\n'
p1005
S'ff 25 ba 99 20 00\n'
p1006
S'.plt:0000000000401660\n'
p1007
tp1008
sS'emit_try_help'
p1009
(S'\n__stdcall emit_try_help()\n'
p1010
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1011
S'PUSH RBX\nMOV RBX,qword ptr [0x0060b320]\nXOR EDI,EDI\nMOV ESI,0x407a4b\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060b468]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a40\n'
p1012
S'53\n48 8b 1d 48 8d 20 00\n31 ff\nbe 4b 7a 40 00\nba 05 00 00 00\ne8 97 f1 ff ff\n48 89 c2\n48 8b 0d 75 8e 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 3d f4 ff ff\n'
p1013
S'.text:00000000004025d0\n.text:00000000004025d1\n.text:00000000004025d8\n.text:00000000004025da\n.text:00000000004025df\n.text:00000000004025e4\n.text:00000000004025e9\n.text:00000000004025ec\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fa\n.text:00000000004025fd\n.text:00000000004025fe\n'
p1014
tp1015
sS'strrchr'
p1016
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060b0e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060b0e8]\n'
p1019
S'ff 25 f2 98 20 00\n'
p1020
S'.plt:00000000004017f0\n'
p1021
tp1022
sS'quotearg_alloc_mem'
p1023
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1024
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60b470\nCMOVNZ R12,RCX\nCALL 0x004016c0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403fa0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405d10\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403fa0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00404cca\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1026
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 70 b4 60 00\n4c 0f 45 e1\ne8 98 ca ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 91 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1027
S'.text:0000000000404bf0\n.text:0000000000404bf1\n.text:0000000000404bf3\n.text:0000000000404bf5\n.text:0000000000404bf7\n.text:0000000000404bf9\n.text:0000000000404bfa\n.text:0000000000404bfe\n.text:0000000000404c01\n.text:0000000000404c06\n.text:0000000000404c09\n.text:0000000000404c0e\n.text:0000000000404c11\n.text:0000000000404c16\n.text:0000000000404c19\n.text:0000000000404c1f\n.text:0000000000404c23\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c2f\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c38\n.text:0000000000404c3c\n.text:0000000000404c41\n.text:0000000000404c45\n.text:0000000000404c4a\n.text:0000000000404c4e\n.text:0000000000404c50\n.text:0000000000404c52\n.text:0000000000404c55\n.text:0000000000404c58\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c67\n.text:0000000000404c6c\n.text:0000000000404c70\n.text:0000000000404c73\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c86\n.text:0000000000404c8a\n.text:0000000000404c8d\n.text:0000000000404c90\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9d\n.text:0000000000404ca2\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cae\n.text:0000000000404cb3\n.text:0000000000404cb7\n.text:0000000000404cba\n.text:0000000000404cbe\n.text:0000000000404cc3\n.text:0000000000404cc5\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404ccd\n.text:0000000000404cd1\n.text:0000000000404cd2\n.text:0000000000404cd4\n.text:0000000000404cd6\n.text:0000000000404cd8\n.text:0000000000404cda\n.text:0000000000404cdb\n'
p1028
tp1029
sS'bkm_scale'
p1030
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1031
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1032
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1033
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1034
S'.text:0000000000406430\n.text:0000000000406433\n.text:000000000040643a\n.text:0000000000406441\n.text:0000000000406443\n.text:0000000000406446\n.text:0000000000406449\n.text:000000000040644d\n.text:0000000000406450\n.text:0000000000406454\n.text:0000000000406456\n.text:0000000000406459\n.text:000000000040645c\n'
p1035
tp1036
sS'memchr'
p1037
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060b118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060b118]\n'
p1040
S'ff 25 c2 98 20 00\n'
p1041
S'.plt:0000000000401850\n'
p1042
tp1043
sS'xalloc_die'
p1044
(S'\n__stdcall xalloc_die()\n'
p1045
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = dcgettext(0,"memory exhausted",5);\u000a  error(0,0,0x40789d,uVar1);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p1046
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407120\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x40789d\nXOR EAX,EAX\nCALL 0x004019b0\nCALL 0x00401be0\n'
p1047
S'50\n31 ff\nbe 20 71 40 00\nba 05 00 00 00\ne8 be fb ff ff\n48 89 c1\n31 ff\n31 f6\nba 9d 78 40 00\n31 c0\ne8 db fd ff ff\ne8 06 00 00 00\n'
p1048
S'.text:0000000000401bb0\n.text:0000000000401bb1\n.text:0000000000401bb3\n.text:0000000000401bb8\n.text:0000000000401bbd\n.text:0000000000401bc2\n.text:0000000000401bc5\n.text:0000000000401bc7\n.text:0000000000401bc9\n.text:0000000000401bce\n.text:0000000000401bd0\n.text:0000000000401bd5\n'
p1049
tp1050
sS'quotearg_style_mem'
p1051
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1052
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1053
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00405010\n'
p1054
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1055
S'.text:0000000000405070\n.text:0000000000405073\n.text:0000000000405076\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507c\n.text:000000000040507f\n.text:0000000000405082\n'
p1056
tp1057
sS'__sprintf_chk'
p1058
(S'\n__stdcall __sprintf_chk()\n'
p1059
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060b240)();\u000a  return;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x0060b240]\n'
p1061
S'ff 25 9a 97 20 00\n'
p1062
S'.plt:0000000000401aa0\n'
p1063
tp1064
sS'make_filename'
p1065
(S'\n__stdcall make_filename()\n'
p1066
V\u000achar * make_filename(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  size_t sVar3;\u000a  uint in_EDI;\u000a  \u000a  strcpy(filename_space,prefix);\u000a  pcVar2 = filename_space;\u000a  pcVar1 = suffix;\u000a  sVar3 = strlen(prefix);\u000a  if (pcVar1 == (char *)0x0) {\u000a    __sprintf_chk(pcVar2 + sVar3,1,0xffffffffffffffff,&DAT_00407695,(ulong)(uint)digits,\u000a                  (ulong)in_EDI);\u000a  }\u000a  else {\u000a    __sprintf_chk(pcVar2 + sVar3,1,0xffffffffffffffff,suffix,(ulong)in_EDI);\u000a  }\u000a  return filename_space;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDI\nMOV RDI,qword ptr [0x0060b368]\nMOV RSI,qword ptr [0x0060b350]\nCALL 0x00401700\nMOV RBX,qword ptr [0x0060b358]\nMOV RBP,qword ptr [0x0060b368]\nMOV RDI,qword ptr [0x0060b350]\nCALL 0x004017a0\nMOV RDI,RAX\nADD RDI,RBP\nCMP RBX,0x0\nJZ 0x00402a2f\nMOV RCX,qword ptr [0x0060b358]\nMOV ESI,0x1\nMOV RDX,-0x1\nXOR EAX,EAX\nMOV R8D,R14D\nCALL 0x00401aa0\nJMP 0x00402a51\nMOV R8D,dword ptr [0x0060b258]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x407695\nXOR EAX,EAX\nMOV R9D,R14D\nCALL 0x00401aa0\nMOV RAX,qword ptr [0x0060b368]\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1068
S'55\n41 56\n53\n41 89 fe\n48 8b 3d 8a 89 20 00\n48 8b 35 6b 89 20 00\ne8 16 ed ff ff\n48 8b 1d 67 89 20 00\n48 8b 2d 70 89 20 00\n48 8b 3d 51 89 20 00\ne8 9c ed ff ff\n48 89 c7\n48 01 ef\n48 83 fb 00\n74 1f\n48 8b 0d 41 89 20 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\n31 c0\n45 89 f0\ne8 73 f0 ff ff\neb 22\n44 8b 05 22 88 20 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 95 76 40 00\n31 c0\n45 89 f1\ne8 4f f0 ff ff\n48 8b 05 10 89 20 00\n5b\n41 5e\n5d\nc3\n'
p1069
S'.text:00000000004029d0\n.text:00000000004029d1\n.text:00000000004029d3\n.text:00000000004029d4\n.text:00000000004029d7\n.text:00000000004029de\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029f1\n.text:00000000004029f8\n.text:00000000004029ff\n.text:0000000000402a04\n.text:0000000000402a07\n.text:0000000000402a0a\n.text:0000000000402a0e\n.text:0000000000402a10\n.text:0000000000402a17\n.text:0000000000402a1c\n.text:0000000000402a23\n.text:0000000000402a25\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a36\n.text:0000000000402a3b\n.text:0000000000402a42\n.text:0000000000402a47\n.text:0000000000402a49\n.text:0000000000402a4c\n.text:0000000000402a51\n.text:0000000000402a58\n.text:0000000000402a59\n.text:0000000000402a5b\n.text:0000000000402a5c\n'
p1070
tp1071
sS'fopen_safer'
p1072
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1073
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x004019e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403d0b\nMOV RDI,RBX\nCALL 0x004018f0\nCMP EAX,0x2\nJA 0x00403d0d\nMOV EDI,EAX\nCALL 0x00405710\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403cf3\nMOV RDI,RBX\nCALL 0x004064f0\nTEST EAX,EAX\nJNZ 0x00403cdc\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00403d0d\nCALL 0x004016c0\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401840\nMOV dword ptr [RBX],R14D\nJMP 0x00403d0b\nCALL 0x004016c0\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x004064f0\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1075
S'55\n41 56\n53\n49 89 f6\ne8 44 dd ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 44 dc ff ff\n83 f8 02\n77 5c\n89 c7\ne8 58 1a 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 2a 28 00 00\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 ac dc ff ff\n48 89 c3\n48 85 db\n75 31\ne8 df d9 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 52 db ff ff\n44 89 33\neb 18\ne8 c8 d9 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 e9 27 00 00\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1076
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c93\n.text:0000000000403c94\n.text:0000000000403c97\n.text:0000000000403c9c\n.text:0000000000403c9f\n.text:0000000000403ca2\n.text:0000000000403ca4\n.text:0000000000403ca7\n.text:0000000000403cac\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb8\n.text:0000000000403cba\n.text:0000000000403cbc\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc6\n.text:0000000000403cc8\n.text:0000000000403cca\n.text:0000000000403ccc\n.text:0000000000403ccf\n.text:0000000000403cd4\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdc\n.text:0000000000403ce1\n.text:0000000000403ce4\n.text:0000000000403ce7\n.text:0000000000403ce9\n.text:0000000000403cee\n.text:0000000000403cf1\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403cff\n.text:0000000000403d02\n.text:0000000000403d07\n.text:0000000000403d0b\n.text:0000000000403d0d\n.text:0000000000403d10\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d14\n'
p1077
tp1078
sS'quotearg_n_custom'
p1079
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1080
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1081
S'MOV R8,-0x1\nJMP 0x00405190\n'
p1082
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1083
S'.text:0000000000405180\n.text:0000000000405187\n'
p1084
tp1085
sS'__freading'
p1086
(S'\n__stdcall __freading()\n'
p1087
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060b198)();\u000a  return;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0060b198]\n'
p1089
S'ff 25 42 98 20 00\n'
p1090
S'.plt:0000000000401950\n'
p1091
tp1092
sS'create_output_file'
p1093
(S'\n__stdcall create_output_file()\n'
p1094
V\u000avoid create_output_file(void)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  uint *puVar2;\u000a  char *pcVar3;\u000a  uint uVar4;\u000a  sigset_t oldset;\u000a  undefined local_a0 [128];\u000a  \u000a  output_filename = make_filename();\u000a  if (files_created == 0xffffffff) {\u000a    uVar4 = 0x4b;\u000a  }\u000a  else {\u000a    sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)local_a0);\u000a    pFVar1 = fopen_safer(output_filename,"w");\u000a    output_stream = pFVar1;\u000a    puVar2 = (uint *)__errno_location();\u000a    uVar4 = *puVar2;\u000a    files_created = files_created + (uint)(pFVar1 != (FILE *)0x0);\u000a    sigprocmask(2,(sigset_t *)local_a0,(sigset_t *)0x0);\u000a    if (pFVar1 != (FILE *)0x0) {\u000a      bytes_written = 0;\u000a      return;\u000a    }\u000a  }\u000a  pcVar3 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar4,0x40789d,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x88\nMOV EDI,dword ptr [0x0060b408]\nCALL 0x004029d0\nMOV qword ptr [0x0060b3f8],RAX\nMOV EAX,dword ptr [0x0060b408]\nCMP EAX,-0x1\nJZ 0x004031ac\nLEA R15,[RSP + 0x8]\nXOR EDI,EDI\nMOV ESI,0x60b370\nMOV RDX,R15\nCALL 0x00401660\nMOV RDI,qword ptr [0x0060b3f8]\nMOV ESI,0x407a49\nCALL 0x00403c90\nMOV RBP,RAX\nMOV qword ptr [0x0060b3f0],RBP\nXOR EBX,EBX\nTEST RBP,RBP\nSETNZ BL\nCALL 0x004016c0\nMOV R14D,dword ptr [RAX]\nADD dword ptr [0x0060b408],EBX\nMOV EDI,0x2\nXOR EDX,EDX\nMOV RSI,R15\nCALL 0x00401660\nTEST RBP,RBP\nJZ 0x004031b2\nMOV qword ptr [0x0060b400],0x0\nADD RSP,0x88\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R14D,0x4b\nMOV RDX,qword ptr [0x0060b3f8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00405130\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40789d\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004019b0\nCALL 0x00401be0\n'
p1096
S'55\n41 57\n41 56\n53\n48 81 ec 88 00 00 00\n8b 3d e5 82 20 00\ne8 a8 f8 ff ff\n48 89 05 c9 82 20 00\n8b 05 d3 82 20 00\n83 f8 ff\n74 72\n4c 8d 7c 24 08\n31 ff\nbe 70 b3 60 00\n4c 89 fa\ne8 12 e5 ff ff\n48 8b 3d a3 82 20 00\nbe 49 7a 40 00\ne8 31 0b 00 00\n48 89 c5\n48 89 2d 87 82 20 00\n31 db\n48 85 ed\n0f 95 c3\ne8 4a e5 ff ff\n44 8b 30\n01 1d 89 82 20 00\nbf 02 00 00 00\n31 d2\n4c 89 fe\ne8 d2 e4 ff ff\n48 85 ed\n74 1f\n48 c7 05 62 82 20 00 00 00 00 00\n48 81 c4 88 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n41 be 4b 00 00 00\n48 8b 15 3f 82 20 00\n31 ff\nbe 03 00 00 00\ne8 6b 1f 00 00\n48 89 c1\n31 ff\nba 9d 78 40 00\n31 c0\n44 89 f6\ne8 d7 e7 ff ff\ne8 02 ea ff ff\n'
p1097
S'.text:0000000000403110\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403116\n.text:000000000040311d\n.text:0000000000403123\n.text:0000000000403128\n.text:000000000040312f\n.text:0000000000403135\n.text:0000000000403138\n.text:000000000040313a\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403146\n.text:0000000000403149\n.text:000000000040314e\n.text:0000000000403155\n.text:000000000040315a\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403169\n.text:000000000040316b\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403176\n.text:0000000000403179\n.text:000000000040317f\n.text:0000000000403184\n.text:0000000000403186\n.text:0000000000403189\n.text:000000000040318e\n.text:0000000000403191\n.text:0000000000403193\n.text:000000000040319e\n.text:00000000004031a5\n.text:00000000004031a6\n.text:00000000004031a8\n.text:00000000004031aa\n.text:00000000004031ab\n.text:00000000004031ac\n.text:00000000004031b2\n.text:00000000004031b9\n.text:00000000004031bb\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cf\n.text:00000000004031d1\n.text:00000000004031d4\n.text:00000000004031d9\n'
p1098
tp1099
sS'handle_line_error'
p1100
(S'\n__stdcall handle_line_error(control * p, uintmax_t repetition)\n'
p1101
V\u000avoid handle_line_error(control *p,uintmax_t repetition)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  char *arg;\u000a  char *pcVar3;\u000a  char buf [21];\u000a  char acStack72 [32];\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"%s: %s: line number out of range",5);\u000a  pcVar3 = program_name;\u000a  arg = umaxtostr(p->lines_required,acStack72);\u000a  arg = quote(arg);\u000a  __fprintf_chk(uVar1,1,uVar2,pcVar3,arg);\u000a  uVar1 = stderr;\u000a  if (repetition == 0) {\u000a    __fprintf_chk(stderr,1,0x4082d8);\u000a                    /* WARNING: Subroutine does not return */\u000a    cleanup_fatal();\u000a  }\u000a  uVar2 = dcgettext(0," on repetition %s\u005cn",5);\u000a  pcVar3 = umaxtostr(repetition,acStack72);\u000a  __fprintf_chk(uVar1,1,uVar2,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p1102
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RSI\nMOV RBX,RDI\nMOV R15,qword ptr [0x0060b320]\nXOR EDI,EDI\nMOV ESI,0x407a28\nMOV EDX,0x5\nCALL 0x00401780\nMOV R12,RAX\nMOV R13,qword ptr [0x0060b468]\nMOV RDI,qword ptr [RBX + 0x8]\nMOV RSI,RSP\nCALL 0x00403d20\nMOV RDI,RAX\nCALL 0x00405270\nMOV RBX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,R12\nMOV RCX,R13\nMOV R8,RBX\nCALL 0x00401a40\nTEST R14,R14\nMOV RBX,qword ptr [0x0060b320]\nJNZ 0x00403b09\nMOV ESI,0x1\nMOV EDX,0x4082d8\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401a40\nCALL 0x00401be0\nXOR EDI,EDI\nMOV ESI,0x407a03\nMOV EDX,0x5\nCALL 0x00401780\nMOV R15,RAX\nMOV RSI,RSP\nMOV RDI,R14\nCALL 0x00403d20\nMOV RCX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R15\nCALL 0x00401a40\nCALL 0x00401be0\n'
p1103
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 20\n49 89 f6\n48 89 fb\n4c 8b 3d 86 78 20 00\n31 ff\nbe 28 7a 40 00\nba 05 00 00 00\ne8 d5 dc ff ff\n49 89 c4\n4c 8b 2d b3 79 20 00\n48 8b 7b 08\n48 89 e6\ne8 5f 02 00 00\n48 89 c7\ne8 a7 17 00 00\n48 89 c3\nbe 01 00 00 00\n31 c0\n4c 89 ff\n4c 89 e2\n4c 89 e9\n49 89 d8\ne8 5c df ff ff\n4d 85 f6\n48 8b 1d 32 78 20 00\n75 19\nbe 01 00 00 00\nba d8 82 40 00\n31 c0\n48 89 df\ne8 3c df ff ff\ne8 d7 e0 ff ff\n31 ff\nbe 03 7a 40 00\nba 05 00 00 00\ne8 66 dc ff ff\n49 89 c7\n48 89 e6\n4c 89 f7\ne8 f8 01 00 00\n48 89 c1\nbe 01 00 00 00\n31 c0\n48 89 df\n4c 89 fa\ne8 03 df ff ff\ne8 9e e0 ff ff\n'
p1104
S'.text:0000000000403a80\n.text:0000000000403a82\n.text:0000000000403a84\n.text:0000000000403a86\n.text:0000000000403a88\n.text:0000000000403a89\n.text:0000000000403a8d\n.text:0000000000403a90\n.text:0000000000403a93\n.text:0000000000403a9a\n.text:0000000000403a9c\n.text:0000000000403aa1\n.text:0000000000403aa6\n.text:0000000000403aab\n.text:0000000000403aae\n.text:0000000000403ab5\n.text:0000000000403ab9\n.text:0000000000403abc\n.text:0000000000403ac1\n.text:0000000000403ac4\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ad1\n.text:0000000000403ad3\n.text:0000000000403ad6\n.text:0000000000403ad9\n.text:0000000000403adc\n.text:0000000000403adf\n.text:0000000000403ae4\n.text:0000000000403ae7\n.text:0000000000403aee\n.text:0000000000403af0\n.text:0000000000403af5\n.text:0000000000403afa\n.text:0000000000403afc\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b15\n.text:0000000000403b1a\n.text:0000000000403b1d\n.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b38\n.text:0000000000403b3d\n'
p1105
tp1106
sS'fputs_unlocked'
p1107
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060b130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060b130]\n'
p1110
S'ff 25 aa 98 20 00\n'
p1111
S'.plt:0000000000401880\n'
p1112
tp1113
sS'main'
p1114
(S'\n__stdcall main(char * * argv)\n'
p1115
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  int __sig;\u000a  int iVar2;\u000a  char *err;\u000a  intmax_t iVar3;\u000a  size_t sVar4;\u000a  ulong uVar5;\u000a  long lVar6;\u000a  undefined8 uVar7;\u000a  char *n_str;\u000a  uint *puVar8;\u000a  char **in_RSI;\u000a  code *local_b0;\u000a  undefined4 local_a8;\u000a  undefined4 uStack164;\u000a  undefined4 uStack160;\u000a  undefined4 uStack156;\u000a  undefined4 local_98;\u000a  undefined4 uStack148;\u000a  undefined4 uStack144;\u000a  undefined4 uStack140;\u000a  undefined4 local_88;\u000a  undefined4 uStack132;\u000a  undefined4 uStack128;\u000a  undefined4 uStack124;\u000a  undefined4 local_78;\u000a  undefined4 uStack116;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  undefined4 local_38;\u000a  undefined4 uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  undefined4 local_28;\u000a  \u000a  argv = (char **)((ulong)argv & 0xffffffff);\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x407171,"/usr/local/share/locale");\u000a  textdomain(0x407171);\u000a  atexit(close_stdout);\u000a  controls = (control *)0x0;\u000a  control_used = 0;\u000a  suppress_count = 0;\u000a  remove_files = true;\u000a  suppress_matched = 0;\u000a  prefix = "xx";\u000a  global_argv = in_RSI;\u000a  while( true ) {\u000a    iVar2 = (int)argv;\u000a    __sig = getopt_long(argv);\u000a    n_str = optarg;\u000a    if (__sig < 0x62) break;\u000a    switch(__sig) {\u000a    case 0x62:\u000a      suffix = optarg;\u000a      break;\u000a    default:\u000a      goto switchD_00401cb3_caseD_63;\u000a    case 0x66:\u000a      prefix = optarg;\u000a      break;\u000a    case 0x6b:\u000a      remove_files = false;\u000a      break;\u000a    case 0x6e:\u000a      err = (char *)dcgettext(0,"invalid number",5);\u000a      iVar3 = xdectoimax(n_str,0,0x7fffffff,\u000a                                                  \u000a                         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                         + 0xca,err);\u000a      digits = (int)iVar3;\u000a      break;\u000a    case 0x71:\u000a    case 0x73:\u000a      suppress_count = 1;\u000a      break;\u000a    case 0x7a:\u000a      elide_empty_files = 1;\u000a      break;\u000a    case 0x80:\u000a      suppress_matched = 1;\u000a    }\u000a  }\u000a  if (__sig == -1) {\u000a    __sig = optind;\u000a    if (1 < iVar2 - optind) {\u000a      sVar4 = strlen(prefix);\u000a      if (suffix == (char *)0x0) {\u000a        if ((uint)digits < 10) {\u000a          uVar5 = 10;\u000a        }\u000a        else {\u000a          uVar5 = SEXT48(digits);\u000a        }\u000a      }\u000a      else {\u000a        uVar5 = max_out(suffix);\u000a      }\u000a      if (uVar5 <= -sVar4 - 2) {\u000a        filename_space = (char *)xmalloc(sVar4 + 1 + uVar5);\u000a        lVar6 = (long)optind;\u000a        optind = optind + 1;\u000a        set_input_file(in_RSI[lVar6]);\u000a        parse_patterns(argv);\u000a        sigemptyset((sigset_t *)&caught_signals);\u000a        lVar6 = -0x2c;\u000a        do {\u000a          __sig = *(int *)(&UNK_004070ac + lVar6);\u000a          sigaction(__sig,(sigaction *)0x0,(sigaction *)&local_b0);\u000a          if (local_b0 != (code *)0x1) {\u000a            sigaddset((sigset_t *)&caught_signals,__sig);\u000a          }\u000a          lVar6 = lVar6 + 4;\u000a        } while (lVar6 != 0);\u000a        local_b0 = interrupt_handler;\u000a        local_38 = (undefined4)caught_signals.__val[14];\u000a        uStack52 = caught_signals.__val[14]._4_4_;\u000a        uStack48 = (undefined4)caught_signals.__val[15];\u000a        uStack44 = caught_signals.__val[15]._4_4_;\u000a        local_48 = (undefined4)caught_signals.__val[12];\u000a        uStack68 = caught_signals.__val[12]._4_4_;\u000a        uStack64 = (undefined4)caught_signals.__val[13];\u000a        uStack60 = caught_signals.__val[13]._4_4_;\u000a        local_58 = (undefined4)caught_signals.__val[10];\u000a        uStack84 = caught_signals.__val[10]._4_4_;\u000a        uStack80 = (undefined4)caught_signals.__val[11];\u000a        uStack76 = caught_signals.__val[11]._4_4_;\u000a        local_68 = (undefined4)caught_signals.__val[8];\u000a        uStack100 = caught_signals.__val[8]._4_4_;\u000a        uStack96 = (undefined4)caught_signals.__val[9];\u000a        uStack92 = caught_signals.__val[9]._4_4_;\u000a        local_78 = (undefined4)caught_signals.__val[6];\u000a        uStack116 = caught_signals.__val[6]._4_4_;\u000a        uStack112 = (undefined4)caught_signals.__val[7];\u000a        uStack108 = caught_signals.__val[7]._4_4_;\u000a        local_88 = (undefined4)caught_signals.__val[4];\u000a        uStack132 = caught_signals.__val[4]._4_4_;\u000a        uStack128 = (undefined4)caught_signals.__val[5];\u000a        uStack124 = caught_signals.__val[5]._4_4_;\u000a        local_98 = (undefined4)caught_signals.__val[2];\u000a        uStack148 = caught_signals.__val[2]._4_4_;\u000a        uStack144 = (undefined4)caught_signals.__val[3];\u000a        uStack140 = caught_signals.__val[3]._4_4_;\u000a        local_a8 = (undefined4)caught_signals.__val[0];\u000a        uStack164 = caught_signals.__val[0]._4_4_;\u000a        uStack160 = (undefined4)caught_signals.__val[1];\u000a        uStack156 = caught_signals.__val[1]._4_4_;\u000a        local_28 = 0;\u000a        lVar6 = -0x2c;\u000a        do {\u000a          __sig = *(int *)(&UNK_004070ac + lVar6);\u000a          iVar2 = sigismember((sigset_t *)&caught_signals,__sig);\u000a          if (iVar2 != 0) {\u000a            sigaction(__sig,(sigaction *)&local_b0,(sigaction *)0x0);\u000a          }\u000a          lVar6 = lVar6 + 4;\u000a        } while (lVar6 != 0);\u000a        split_file();\u000a        __sig = close(0);\u000a        if (__sig == 0) {\u000a          return 0;\u000a        }\u000a        puVar8 = (uint *)__errno_location();\u000a        uVar1 = *puVar8;\u000a        uVar7 = dcgettext(0,"read error",5);\u000a        error(0,(ulong)uVar1,uVar7,uVar7);\u000a                    /* WARNING: Subroutine does not return */\u000a        cleanup_fatal();\u000a      }\u000a      goto LAB_00401f93;\u000a    }\u000a  }\u000a  else {\u000a    if (__sig == -0x83) {\u000aLAB_00401f0f:\u000a      version_etc(stdout,"csplit","GNU coreutils",Version,"Stuart Kemp","David MacKenzie",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    if (__sig == -0x82) {\u000a      usage(0);\u000a      goto LAB_00401f0f;\u000a    }\u000aswitchD_00401cb3_caseD_63:\u000a    __sig = usage(1);\u000a  }\u000a  if (iVar2 <= __sig) {\u000a    uVar7 = dcgettext(0,"missing operand",5);\u000a    error(0,0,uVar7,uVar7);\u000a    __sig = usage(1);\u000a    return __sig;\u000a  }\u000a  uVar7 = dcgettext(0,"missing operand after %s",5);\u000a  n_str = quote(in_RSI[(long)iVar2 + -1]);\u000a  error(0,0,uVar7,n_str);\u000a  usage(1);\u000aLAB_00401f93:\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xa0\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00403d80\nMOV EDI,0x6\nMOV ESI,0x4082d9\nCALL 0x00401990\nMOV EDI,0x407171\nMOV ESI,0x407131\nCALL 0x00401770\nMOV EDI,0x407171\nCALL 0x00401750\nMOV EDI,0x403b70\nCALL 0x00406d60\nMOV qword ptr [0x0060b330],RBX\nMOV qword ptr [0x0060b338],0x0\nMOV qword ptr [0x0060b340],0x0\nMOV byte ptr [0x0060b348],0x0\nMOV byte ptr [0x0060b349],0x1\nMOV byte ptr [0x0060b34a],0x0\nMOV qword ptr [0x0060b350],0x407149\nJMP 0x00401c87\nMOV byte ptr [0x0060b348],0x1\nMOV EDX,0x40714c\nMOV ECX,0x406f20\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x004017b0\nCMP EAX,0x61\nJLE 0x00401d38\nADD EAX,-0x62\nCMP EAX,0x1e\nJA 0x00401f49\nJMP qword ptr [0x406db0 + RAX*0x8]\nMOV RAX,qword ptr [0x0060b308]\nMOV qword ptr [0x0060b358],RAX\nJMP 0x00401c87\nMOV RAX,qword ptr [0x0060b308]\nMOV qword ptr [0x0060b350],RAX\nJMP 0x00401c87\nMOV byte ptr [0x0060b349],0x0\nJMP 0x00401c87\nMOV R14,qword ptr [0x0060b308]\nXOR EDI,EDI\nMOV ESI,0x407157\nMOV EDX,0x5\nCALL 0x00401780\nXOR ESI,ESI\nMOV EDX,0x7fffffff\nMOV ECX,0x4082d9\nXOR R9D,R9D\nMOV RDI,R14\nMOV R8,RAX\nCALL 0x00405ea0\nMOV dword ptr [0x0060b258],EAX\nJMP 0x00401c87\nMOV byte ptr [0x0060b360],0x1\nJMP 0x00401c87\nMOV byte ptr [0x0060b34a],0x1\nJMP 0x00401c87\nCMP EAX,-0x1\nJNZ 0x00401efa\nMOV EAX,dword ptr [0x0060b2f0]\nMOV ECX,EBP\nSUB ECX,EAX\nCMP ECX,0x1\nJLE 0x00401f53\nMOV RDI,qword ptr [0x0060b350]\nCALL 0x004017a0\nMOV R14,RAX\nCMP qword ptr [0x0060b358],0x0\nJZ 0x00401d7b\nMOV RDI,qword ptr [0x0060b358]\nCALL 0x00402150\nJMP 0x00401d94\nMOV EAX,dword ptr [0x0060b258]\nCMP EAX,0xa\nJNC 0x00401d8d\nMOV EAX,0xa\nJMP 0x00401d94\nMOVSXD RAX,dword ptr [0x0060b258]\nMOV RCX,-0x2\nSUB RCX,R14\nCMP RCX,RAX\nJC 0x00401f93\nLEA RDI,[R14 + RAX*0x1 + 0x1]\nCALL 0x00405c40\nMOV qword ptr [0x0060b368],RAX\nMOVSXD RAX,dword ptr [0x0060b2f0]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x0060b2f0],ECX\nMOV RDI,qword ptr [RBX + RAX*0x8]\nCALL 0x00402290\nMOV ESI,dword ptr [0x0060b2f0]\nMOV EDI,EBP\nMOV RDX,RBX\nCALL 0x00402300\nMOV EDI,0x60b370\nCALL 0x004018d0\nMOV RBX,-0x2c\nLEA R14,[RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV EBP,dword ptr [0x4070ac + RBX]\nXOR ESI,ESI\nMOV EDI,EBP\nMOV RDX,R14\nCALL 0x00401730\nCMP qword ptr [RSP + 0x8],0x1\nJZ 0x00401e26\nMOV EDI,0x60b370\nMOV ESI,EBP\nCALL 0x00401a80\nADD RBX,0x4\nJNZ 0x00401e00\nMOV qword ptr [RSP + 0x8],0x4024e0\nMOVUPS XMM0,xmmword ptr [0x0060b3e0]\nMOVUPS xmmword ptr [0x80 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3d0]\nMOVUPS xmmword ptr [RSP + 0x70],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3c0]\nMOVUPS xmmword ptr [RSP + 0x60],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3b0]\nMOVUPS xmmword ptr [RSP + 0x50],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b3a0]\nMOVUPS xmmword ptr [RSP + 0x40],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b390]\nMOVUPS xmmword ptr [RSP + 0x30],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b380]\nMOVUPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060b370]\nMOVUPS xmmword ptr [RSP + 0x10],XMM0\nMOV dword ptr [0x90 + RSP],0x0\nMOV RBX,-0x2c\nLEA R14,[RSP + 0x8]\nNOP\nMOV EBP,dword ptr [0x4070ac + RBX]\nMOV EDI,0x60b370\nMOV ESI,EBP\nCALL 0x00401a10\nTEST EAX,EAX\nJZ 0x00401ed2\nXOR EDX,EDX\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401730\nADD RBX,0x4\nJNZ 0x00401eb0\nCALL 0x00402500\nXOR EDI,EDI\nCALL 0x00401840\nTEST EAX,EAX\nJNZ 0x00401f98\nXOR EAX,EAX\nADD RSP,0xa0\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401f0f\nCMP EAX,0xffffff7e\nJNZ 0x00401f49\nXOR EDI,EDI\nCALL 0x00401ff0\nMOV RDI,qword ptr [0x0060b2e8]\nMOV RCX,qword ptr [0x0060b260]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x407166\nMOV EDX,0x40716d\nMOV R8D,0x40717b\nMOV R9D,0x407187\nXOR EAX,EAX\nCALL 0x00405b10\nXOR EDI,EDI\nCALL 0x00401a20\nMOV EDI,0x1\nCALL 0x00401ff0\nXOR EDI,EDI\nCMP EAX,EBP\nJGE 0x00401fc6\nMOV ESI,0x4071a7\nMOV EDX,0x5\nCALL 0x00401780\nMOV R14,RAX\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [RBX + RAX*0x8 + -0x8]\nCALL 0x00405270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x004019b0\nMOV EDI,0x1\nCALL 0x00401ff0\nCALL 0x00401bb0\nCALL 0x004016c0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4071c0\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004019b0\nCALL 0x00401be0\nMOV ESI,0x407197\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019b0\nMOV EDI,0x1\nCALL 0x00401ff0\n'
p1117
S'55\n41 56\n53\n48 81 ec a0 00 00 00\n48 89 f3\n89 fd\n48 8b 3b\ne8 78 21 00 00\nbf 06 00 00 00\nbe d9 82 40 00\ne8 79 fd ff ff\nbf 71 71 40 00\nbe 31 71 40 00\ne8 4a fb ff ff\nbf 71 71 40 00\ne8 20 fb ff ff\nbf 70 3b 40 00\ne8 26 51 00 00\n48 89 1d ef 96 20 00\n48 c7 05 ec 96 20 00 00 00 00 00\n48 c7 05 e9 96 20 00 00 00 00 00\nc6 05 ea 96 20 00 00\nc6 05 e4 96 20 00 01\nc6 05 de 96 20 00 00\n48 c7 05 d9 96 20 00 49 71 40 00\neb 0e\nc6 05 c1 96 20 00 01\nba 4c 71 40 00\nb9 20 6f 40 00\n45 31 c0\n89 ef\n48 89 de\ne8 12 fb ff ff\n83 f8 61\n0f 8e 91 00 00 00\n83 c0 9e\n83 f8 1e\n0f 87 96 02 00 00\nff 24 c5 b0 6d 40 00\n48 8b 05 47 96 20 00\n48 89 05 90 96 20 00\neb bd\n48 8b 05 37 96 20 00\n48 89 05 78 96 20 00\neb ad\nc6 05 68 96 20 00 00\neb a4\n4c 8b 35 1e 96 20 00\n31 ff\nbe 57 71 40 00\nba 05 00 00 00\ne8 85 fa ff ff\n31 f6\nba ff ff ff 7f\nb9 d9 82 40 00\n45 31 c9\n4c 89 f7\n49 89 c0\ne8 8b 41 00 00\n89 05 3d 95 20 00\ne9 67 ff ff ff\nc6 05 39 96 20 00 01\ne9 5b ff ff ff\nc6 05 17 96 20 00 01\ne9 4f ff ff ff\n83 f8 ff\n0f 85 b9 01 00 00\n8b 05 a9 95 20 00\n89 e9\n29 c1\n83 f9 01\n0f 8e ff 01 00 00\n48 8b 3d f5 95 20 00\ne8 40 fa ff ff\n49 89 c6\n48 83 3d ed 95 20 00 00\n74 0e\n48 8b 3d e4 95 20 00\ne8 d7 03 00 00\neb 19\n8b 05 d7 94 20 00\n83 f8 0a\n73 07\nb8 0a 00 00 00\neb 07\n48 63 05 c4 94 20 00\n48 c7 c1 fe ff ff ff\n4c 29 f1\n48 39 c1\n0f 82 ec 01 00 00\n49 8d 7c 06 01\ne8 8f 3e 00 00\n48 89 05 b0 95 20 00\n48 63 05 31 95 20 00\n8d 48 01\n89 0d 28 95 20 00\n48 8b 3c c3\ne8 bf 04 00 00\n8b 35 19 95 20 00\n89 ef\n48 89 da\ne8 1f 05 00 00\nbf 70 b3 60 00\ne8 e5 fa ff ff\n48 c7 c3 d4 ff ff ff\n4c 8d 74 24 08\n66 0f 1f 84 00 00 00 00 00\n8b ab ac 70 40 00\n31 f6\n89 ef\n4c 89 f2\ne8 1e f9 ff ff\n48 83 7c 24 08 01\n74 0c\nbf 70 b3 60 00\n89 ee\ne8 5a fc ff ff\n48 83 c3 04\n75 d4\n48 c7 44 24 08 e0 24 40 00\n0f 10 05 a4 95 20 00\n0f 11 84 24 80 00 00 00\n0f 10 05 85 95 20 00\n0f 11 44 24 70\n0f 10 05 69 95 20 00\n0f 11 44 24 60\n0f 10 05 4d 95 20 00\n0f 11 44 24 50\n0f 10 05 31 95 20 00\n0f 11 44 24 40\n0f 10 05 15 95 20 00\n0f 11 44 24 30\n0f 10 05 f9 94 20 00\n0f 11 44 24 20\n0f 10 05 dd 94 20 00\n0f 11 44 24 10\nc7 84 24 90 00 00 00 00 00 00 00\n48 c7 c3 d4 ff ff ff\n4c 8d 74 24 08\n90\n8b ab ac 70 40 00\nbf 70 b3 60 00\n89 ee\ne8 4e fb ff ff\n85 c0\n74 0c\n31 d2\n89 ef\n4c 89 f6\ne8 5e f8 ff ff\n48 83 c3 04\n75 d8\ne8 23 06 00 00\n31 ff\ne8 5c f9 ff ff\n85 c0\n0f 85 ac 00 00 00\n31 c0\n48 81 c4 a0 00 00 00\n5b\n41 5e\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 41\n31 ff\ne8 e1 00 00 00\n48 8b 3d d2 93 20 00\n48 8b 0d 43 93 20 00\n48 c7 04 24 00 00 00 00\nbe 66 71 40 00\nba 6d 71 40 00\n41 b8 7b 71 40 00\n41 b9 87 71 40 00\n31 c0\ne8 ce 3b 00 00\n31 ff\ne8 d7 fa ff ff\nbf 01 00 00 00\ne8 9d 00 00 00\n31 ff\n39 e8\n7d 6d\nbe a7 71 40 00\nba 05 00 00 00\ne8 18 f8 ff ff\n49 89 c6\n48 63 c5\n48 8b 7c c3 f8\ne8 f8 32 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 27 fa ff ff\nbf 01 00 00 00\ne8 5d 00 00 00\ne8 18 fc ff ff\ne8 23 f7 ff ff\n8b 18\n31 ff\nbe c0 71 40 00\nba 05 00 00 00\ne8 d0 f7 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 ef f9 ff ff\ne8 1a fc ff ff\nbe 97 71 40 00\nba 05 00 00 00\ne8 ab f7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 ca f9 ff ff\nbf 01 00 00 00\ne8 00 00 00 00\n'
p1118
S'.text:0000000000401bf0\n.text:0000000000401bf1\n.text:0000000000401bf3\n.text:0000000000401bf4\n.text:0000000000401bfb\n.text:0000000000401bfe\n.text:0000000000401c00\n.text:0000000000401c03\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c12\n.text:0000000000401c17\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c2b\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c3a\n.text:0000000000401c41\n.text:0000000000401c4c\n.text:0000000000401c57\n.text:0000000000401c5e\n.text:0000000000401c65\n.text:0000000000401c6c\n.text:0000000000401c77\n.text:0000000000401c80\n.text:0000000000401c87\n.text:0000000000401c8c\n.text:0000000000401c91\n.text:0000000000401c94\n.text:0000000000401c96\n.text:0000000000401c99\n.text:0000000000401c9e\n.text:0000000000401ca1\n.text:0000000000401ca7\n.text:0000000000401caa\n.text:0000000000401cad\n.text:0000000000401cb3\n.text:0000000000401cba\n.text:0000000000401cc1\n.text:0000000000401cc8\n.text:0000000000401cca\n.text:0000000000401cd1\n.text:0000000000401cd8\n.text:0000000000401cda\n.text:0000000000401ce1\n.text:0000000000401ce3\n.text:0000000000401cea\n.text:0000000000401cec\n.text:0000000000401cf1\n.text:0000000000401cf6\n.text:0000000000401cfb\n.text:0000000000401cfd\n.text:0000000000401d02\n.text:0000000000401d07\n.text:0000000000401d0a\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d1b\n.text:0000000000401d20\n.text:0000000000401d27\n.text:0000000000401d2c\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3b\n.text:0000000000401d41\n.text:0000000000401d47\n.text:0000000000401d49\n.text:0000000000401d4b\n.text:0000000000401d4e\n.text:0000000000401d54\n.text:0000000000401d5b\n.text:0000000000401d60\n.text:0000000000401d63\n.text:0000000000401d6b\n.text:0000000000401d6d\n.text:0000000000401d74\n.text:0000000000401d79\n.text:0000000000401d7b\n.text:0000000000401d81\n.text:0000000000401d84\n.text:0000000000401d86\n.text:0000000000401d8b\n.text:0000000000401d8d\n.text:0000000000401d94\n.text:0000000000401d9b\n.text:0000000000401d9e\n.text:0000000000401da1\n.text:0000000000401da7\n.text:0000000000401dac\n.text:0000000000401db1\n.text:0000000000401db8\n.text:0000000000401dbf\n.text:0000000000401dc2\n.text:0000000000401dc8\n.text:0000000000401dcc\n.text:0000000000401dd1\n.text:0000000000401dd7\n.text:0000000000401dd9\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401deb\n.text:0000000000401df2\n.text:0000000000401df7\n.text:0000000000401e00\n.text:0000000000401e06\n.text:0000000000401e08\n.text:0000000000401e0a\n.text:0000000000401e0d\n.text:0000000000401e12\n.text:0000000000401e18\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e21\n.text:0000000000401e26\n.text:0000000000401e2a\n.text:0000000000401e2c\n.text:0000000000401e35\n.text:0000000000401e3c\n.text:0000000000401e44\n.text:0000000000401e4b\n.text:0000000000401e50\n.text:0000000000401e57\n.text:0000000000401e5c\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6f\n.text:0000000000401e74\n.text:0000000000401e7b\n.text:0000000000401e80\n.text:0000000000401e87\n.text:0000000000401e8c\n.text:0000000000401e93\n.text:0000000000401e98\n.text:0000000000401ea3\n.text:0000000000401eaa\n.text:0000000000401eaf\n.text:0000000000401eb0\n.text:0000000000401eb6\n.text:0000000000401ebb\n.text:0000000000401ebd\n.text:0000000000401ec2\n.text:0000000000401ec4\n.text:0000000000401ec6\n.text:0000000000401ec8\n.text:0000000000401eca\n.text:0000000000401ecd\n.text:0000000000401ed2\n.text:0000000000401ed6\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401ee6\n.text:0000000000401eec\n.text:0000000000401eee\n.text:0000000000401ef5\n.text:0000000000401ef6\n.text:0000000000401ef8\n.text:0000000000401ef9\n.text:0000000000401efa\n.text:0000000000401eff\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f08\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f16\n.text:0000000000401f1d\n.text:0000000000401f25\n.text:0000000000401f2a\n.text:0000000000401f2f\n.text:0000000000401f35\n.text:0000000000401f3b\n.text:0000000000401f3d\n.text:0000000000401f42\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f55\n.text:0000000000401f57\n.text:0000000000401f59\n.text:0000000000401f5e\n.text:0000000000401f63\n.text:0000000000401f68\n.text:0000000000401f6b\n.text:0000000000401f6e\n.text:0000000000401f73\n.text:0000000000401f78\n.text:0000000000401f7b\n.text:0000000000401f7d\n.text:0000000000401f7f\n.text:0000000000401f81\n.text:0000000000401f84\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa1\n.text:0000000000401fa6\n.text:0000000000401fab\n.text:0000000000401fb0\n.text:0000000000401fb3\n.text:0000000000401fb5\n.text:0000000000401fb7\n.text:0000000000401fb9\n.text:0000000000401fbc\n.text:0000000000401fc1\n.text:0000000000401fc6\n.text:0000000000401fcb\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fd8\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fde\n.text:0000000000401fe1\n.text:0000000000401fe6\n.text:0000000000401feb\n'
p1119
tp1120
sS'xcharalloc'
p1121
(S'\n__stdcall xcharalloc(size_t n)\n'
p1122
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1123
S'JMP 0x00405c40\n'
p1124
S'e9 2b ff ff ff\n'
p1125
S'.text:0000000000405d10\n'
p1126
tp1127
sS'c_isupper'
p1128
(S'\n__stdcall c_isupper()\n'
p1129
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1130
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1131
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1132
S'.text:00000000004068f0\n.text:00000000004068f3\n.text:00000000004068f6\n.text:00000000004068f9\n'
p1133
tp1134
sS'c_isalnum'
p1135
(S'\n__stdcall c_isalnum()\n'
p1136
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1137
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040680b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040680b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040680a\nXOR EAX,EAX\nRET\n'
p1138
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1139
S'.text:00000000004067f0\n.text:00000000004067f2\n.text:00000000004067f5\n.text:00000000004067f8\n.text:00000000004067fa\n.text:0000000000406804\n.text:0000000000406808\n.text:000000000040680a\n.text:000000000040680b\n.text:000000000040680e\n.text:0000000000406811\n.text:0000000000406813\n.text:0000000000406815\n'
p1140
tp1141
sS'save_to_hold_area'
p1142
(S'\n__stdcall save_to_hold_area(char * start, size_t num)\n'
p1143
V\u000avoid save_to_hold_area(char *start,size_t num)\u000a\u000a{\u000a  free(hold_area);\u000a  hold_count = num;\u000a  hold_area = start;\u000a  return;\u000a}\u000a\u000a
p1144
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [0x0060b448]\nCALL 0x00401690\nMOV qword ptr [0x0060b448],RBX\nMOV qword ptr [0x0060b440],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1145
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 3d 97 7a 20 00\ne8 da dc ff ff\n48 89 1d 8b 7a 20 00\n4c 89 35 7c 7a 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1146
S'.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a3\n.text:00000000004039a4\n.text:00000000004039a7\n.text:00000000004039aa\n.text:00000000004039b1\n.text:00000000004039b6\n.text:00000000004039bd\n.text:00000000004039c4\n.text:00000000004039c8\n.text:00000000004039c9\n.text:00000000004039cb\n'
p1147
tp1148
sS'__errno_location'
p1149
(S'\n__stdcall __errno_location()\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060b050)();\u000a  return piVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x0060b050]\n'
p1152
S'ff 25 8a 99 20 00\n'
p1153
S'.plt:00000000004016c0\n'
p1154
tp1155
sS'x2nrealloc'
p1156
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1157
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1158
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00405cdc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405d09\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00405cfa\nTEST RCX,RCX\nJNZ 0x00405cfa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405c80\nPUSH RAX\nCALL 0x00401bb0\n'
p1159
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 a1 be ff ff\n'
p1160
S'.text:0000000000405cb0\n.text:0000000000405cb3\n.text:0000000000405cb6\n.text:0000000000405cb9\n.text:0000000000405cbb\n.text:0000000000405cc5\n.text:0000000000405cc7\n.text:0000000000405cca\n.text:0000000000405ccd\n.text:0000000000405ccf\n.text:0000000000405cd2\n.text:0000000000405cd5\n.text:0000000000405cda\n.text:0000000000405cdc\n.text:0000000000405cdf\n.text:0000000000405ce1\n.text:0000000000405ce6\n.text:0000000000405ce8\n.text:0000000000405ceb\n.text:0000000000405ced\n.text:0000000000405cf4\n.text:0000000000405cf7\n.text:0000000000405cfa\n.text:0000000000405cfd\n.text:0000000000405d01\n.text:0000000000405d04\n.text:0000000000405d09\n.text:0000000000405d0a\n'
p1161
tp1162
sS'safe_read'
p1163
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p1164
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401860\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x004056f4\nCALL 0x004016c0\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x004056a0\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x004056f7\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x004056a0\nJMP 0x004056f7\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1166
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 b2 c1 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 05 c0 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1167
S'.text:0000000000405680\n.text:0000000000405681\n.text:0000000000405683\n.text:0000000000405685\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568a\n.text:000000000040568b\n.text:000000000040568e\n.text:0000000000405691\n.text:0000000000405694\n.text:000000000040569a\n.text:00000000004056a0\n.text:00000000004056a3\n.text:00000000004056a6\n.text:00000000004056a9\n.text:00000000004056ae\n.text:00000000004056b1\n.text:00000000004056b4\n.text:00000000004056b6\n.text:00000000004056bb\n.text:00000000004056bd\n.text:00000000004056c0\n.text:00000000004056c2\n.text:00000000004056c5\n.text:00000000004056c8\n.text:00000000004056cf\n.text:00000000004056d2\n.text:00000000004056d4\n.text:00000000004056d7\n.text:00000000004056db\n.text:00000000004056dd\n.text:00000000004056e1\n.text:00000000004056e8\n.text:00000000004056ea\n.text:00000000004056ed\n.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fa\n.text:00000000004056fe\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405703\n.text:0000000000405705\n.text:0000000000405707\n.text:0000000000405708\n'
p1168
tp1169
sS'FUN_00401640'
p1170
(S'\n__stdcall FUN_00401640()\n'
p1171
V\u000avoid FUN_00401640(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060b010)();\u000a  return;\u000a}\u000a\u000a
p1172
S'PUSH qword ptr [0x0060b008]\nJMP qword ptr [0x0060b010]\n'
p1173
S'ff 35 c2 99 20 00\nff 25 c4 99 20 00\n'
p1174
S'.plt:0000000000401640\n.plt:0000000000401646\n'
p1175
tp1176
sS'quotearg_n_options'
p1177
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1178
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004016c0\nTEST R12D,R12D\nJS 0x00404f31\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060b270]\nCMP dword ptr [0x0060b278],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00404e4b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60b280\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405c80\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060b270],R15\nJNZ 0x00404e12\nMOVUPS XMM0,xmmword ptr [0x0060b280]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060b278]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401820\nMOV dword ptr [0x0060b278],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403fa0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00404ead\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00404f1b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60b4b0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404ed8\nCALL 0x00401690\nMOV RDI,R15\nCALL 0x00405d10\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403fa0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004016b0\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 21 c9 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 b6 64 20 00\n44 39 25 b7 64 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 80 b2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 88 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 6b 64 20 00\n75 0b\n0f 10 05 72 64 20 00\n41 0f 11 07\n8b 05 60 64 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 ed c9 ff ff\n89 1d 3f 64 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 b0 b4 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 b8 c7 ff ff\n4c 89 ff\ne8 30 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7a c7 ff ff\n'
p1181
S'.text:0000000000404d80\n.text:0000000000404d81\n.text:0000000000404d83\n.text:0000000000404d85\n.text:0000000000404d87\n.text:0000000000404d89\n.text:0000000000404d8a\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404d9a\n.text:0000000000404d9f\n.text:0000000000404da2\n.text:0000000000404da8\n.text:0000000000404dad\n.text:0000000000404daf\n.text:0000000000404db3\n.text:0000000000404dba\n.text:0000000000404dc1\n.text:0000000000404dc6\n.text:0000000000404dcb\n.text:0000000000404dd0\n.text:0000000000404dd2\n.text:0000000000404dd7\n.text:0000000000404dda\n.text:0000000000404ddd\n.text:0000000000404de3\n.text:0000000000404de5\n.text:0000000000404de8\n.text:0000000000404dec\n.text:0000000000404def\n.text:0000000000404df3\n.text:0000000000404df8\n.text:0000000000404dfb\n.text:0000000000404dfe\n.text:0000000000404e05\n.text:0000000000404e07\n.text:0000000000404e0e\n.text:0000000000404e12\n.text:0000000000404e18\n.text:0000000000404e1b\n.text:0000000000404e1f\n.text:0000000000404e22\n.text:0000000000404e25\n.text:0000000000404e29\n.text:0000000000404e2b\n.text:0000000000404e2e\n.text:0000000000404e33\n.text:0000000000404e39\n.text:0000000000404e3c\n.text:0000000000404e41\n.text:0000000000404e46\n.text:0000000000404e4b\n.text:0000000000404e4e\n.text:0000000000404e52\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e5f\n.text:0000000000404e63\n.text:0000000000404e67\n.text:0000000000404e6b\n.text:0000000000404e6f\n.text:0000000000404e74\n.text:0000000000404e77\n.text:0000000000404e7a\n.text:0000000000404e7d\n.text:0000000000404e82\n.text:0000000000404e85\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e8c\n.text:0000000000404e91\n.text:0000000000404e95\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea6\n.text:0000000000404eab\n.text:0000000000404ead\n.text:0000000000404eb1\n.text:0000000000404eb6\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ec1\n.text:0000000000404ec6\n.text:0000000000404ec9\n.text:0000000000404ece\n.text:0000000000404ed1\n.text:0000000000404ed3\n.text:0000000000404ed8\n.text:0000000000404edb\n.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404eeb\n.text:0000000000404eee\n.text:0000000000404ef2\n.text:0000000000404ef5\n.text:0000000000404ef8\n.text:0000000000404efd\n.text:0000000000404f02\n.text:0000000000404f07\n.text:0000000000404f0a\n.text:0000000000404f0d\n.text:0000000000404f0e\n.text:0000000000404f13\n.text:0000000000404f17\n.text:0000000000404f1b\n.text:0000000000404f1f\n.text:0000000000404f22\n.text:0000000000404f26\n.text:0000000000404f27\n.text:0000000000404f29\n.text:0000000000404f2b\n.text:0000000000404f2d\n.text:0000000000404f2f\n.text:0000000000404f30\n.text:0000000000404f31\n'
p1182
tp1183
sS'strcmp'
p1184
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060b148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x0060b148]\n'
p1187
S'ff 25 92 98 20 00\n'
p1188
S'.plt:00000000004018b0\n'
p1189
tp1190
sS'read'
p1191
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060b120)();\u000a  return sVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x0060b120]\n'
p1194
S'ff 25 ba 98 20 00\n'
p1195
S'.plt:0000000000401860\n'
p1196
tp1197
sS'set_custom_quoting'
p1198
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1199
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1200
S'TEST RDI,RDI\nMOV EAX,0x60b470\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403f15\nTEST RDX,RDX\nJZ 0x00403f15\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004016b0\n'
p1201
S'48 85 ff\nb8 70 b4 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 95 d7 ff ff\n'
p1202
S'.text:0000000000403ef0\n.text:0000000000403ef3\n.text:0000000000403ef8\n.text:0000000000403efc\n.text:0000000000403f02\n.text:0000000000403f05\n.text:0000000000403f07\n.text:0000000000403f0a\n.text:0000000000403f0c\n.text:0000000000403f10\n.text:0000000000403f14\n.text:0000000000403f15\n.text:0000000000403f16\n'
p1203
tp1204
sS'c_isalpha'
p1205
(S'\n__stdcall c_isalpha()\n'
p1206
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1207
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040683b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1208
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1209
S'.text:0000000000406820\n.text:0000000000406823\n.text:0000000000406826\n.text:0000000000406828\n.text:0000000000406832\n.text:0000000000406834\n.text:0000000000406837\n.text:000000000040683a\n.text:000000000040683b\n.text:000000000040683d\n'
p1210
tp1211
sS'max_out'
p1212
(S'\n__stdcall max_out(char * format)\n'
p1213
V\u000asize_t max_out(char *format)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  char *format_00;\u000a  char *pcVar5;\u000a  int local_24;\u000a  \u000a  bVar1 = false;\u000a  pcVar5 = format;\u000a  do {\u000a    if (*pcVar5 == '%') {\u000a      format_00 = pcVar5 + 1;\u000a      if (pcVar5[1] != '%') {\u000a        if (bVar1) {\u000a          uVar4 = dcgettext(0,"too many %% conversion specifications in suffix",5);\u000a          error(1,0,uVar4);\u000a        }\u000a        sVar3 = get_format_flags(pcVar5 + 1,&local_24);\u000a        format_00 = pcVar5 + sVar3;\u000a        do {\u000a          pcVar5 = format_00 + 1;\u000a          format_00 = format_00 + 1;\u000a        } while ((int)*pcVar5 - 0x30U < 10);\u000a        if (*pcVar5 == '.') {\u000a          do {\u000a            pcVar5 = format_00 + 1;\u000a            format_00 = format_00 + 1;\u000a          } while ((int)*pcVar5 - 0x30U < 10);\u000a        }\u000a        check_format_conv_type(format_00);\u000a        bVar1 = true;\u000a      }\u000a    }\u000a    else {\u000a      format_00 = pcVar5;\u000a      if (*pcVar5 == 0) {\u000a        if (!bVar1) {\u000a          uVar4 = dcgettext(0,"missing %% conversion specification in suffix",5);\u000a          error(1,0,uVar4,uVar4);\u000a        }\u000a        iVar2 = __snprintf_chk(0,0,1,0,format,0xffffffff);\u000a        if (iVar2 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          xalloc_die();\u000a        }\u000a        return (long)iVar2;\u000a      }\u000a    }\u000a    pcVar5 = format_00 + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1214
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nLEA R15,[RSP + 0x4]\nMOV RBX,R14\nXOR EAX,EAX\nJMP 0x00402176\nINC R12\nMOV RBX,R12\nMOV CL,byte ptr [RBX]\nCMP CL,0x25\nJZ 0x00402190\nTEST CL,CL\nJNZ 0x0040221d\nJMP 0x00402225\nLEA R12,[RBX + 0x1]\nCMP byte ptr [RBX + 0x1],0x25\nJZ 0x00402170\nTEST AL,0x1\nJZ 0x004021c3\nXOR EDI,EDI\nMOV ESI,0x4076fe\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019b0\nMOV RDI,R12\nMOV RSI,R15\nCALL 0x00402a60\nADD RBX,RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX + 0x1]\nINC RBX\nLEA ECX,[RAX + -0x30]\nCMP ECX,0xa\nJC 0x004021e0\nCMP AL,0x2e\nJNZ 0x0040220f\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX + 0x1]\nINC RBX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x00402200\nMOV ESI,dword ptr [RSP + 0x4]\nMOV RDI,RBX\nCALL 0x00402aa0\nMOV AL,0x1\nMOV R12,RBX\nJMP 0x00402170\nTEST AL,0x1\nJNZ 0x0040224e\nXOR EDI,EDI\nMOV ESI,0x40772e\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019b0\nMOV EDI,0x0\nMOV ESI,0x0\nMOV EDX,0x1\nXOR ECX,ECX\nMOV R9D,0xffffffff\nXOR EAX,EAX\nMOV R8,R14\nCALL 0x00401670\nTEST EAX,EAX\nJS 0x00402281\nCDQE\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401bb0\n'
p1215
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4c 8d 7c 24 04\n4c 89 f3\n31 c0\neb 0f\n49 ff c4\n4c 89 e3\n8a 0b\n80 f9 25\n74 13\n84 c9\n0f 85 98 00 00 00\ne9 9b 00 00 00\n4c 8d 63 01\n80 7b 01 25\n74 d6\na8 01\n74 25\n31 ff\nbe fe 76 40 00\nba 05 00 00 00\ne8 d1 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 ed f7 ff ff\n4c 89 e7\n4c 89 fe\ne8 92 08 00 00\n48 01 c3\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 43 01\n48 ff c3\n8d 48 d0\n83 f9 0a\n72 f1\n3c 2e\n75 1c\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 43 01\n48 ff c3\n83 c0 d0\n83 f8 0a\n72 f1\n8b 74 24 04\n48 89 df\ne8 85 08 00 00\nb0 01\n49 89 dc\ne9 4b ff ff ff\na8 01\n75 25\n31 ff\nbe 2e 77 40 00\nba 05 00 00 00\ne8 46 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 62 f7 ff ff\nbf 00 00 00 00\nbe 00 00 00 00\nba 01 00 00 00\n31 c9\n41 b9 ff ff ff ff\n31 c0\n4d 89 f0\ne8 01 f4 ff ff\n85 c0\n78 0e\n48 98\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 2a f9 ff ff\n'
p1216
S'.text:0000000000402150\n.text:0000000000402152\n.text:0000000000402154\n.text:0000000000402156\n.text:0000000000402157\n.text:0000000000402158\n.text:000000000040215b\n.text:0000000000402160\n.text:0000000000402163\n.text:0000000000402165\n.text:0000000000402170\n.text:0000000000402173\n.text:0000000000402176\n.text:0000000000402178\n.text:000000000040217b\n.text:000000000040217d\n.text:000000000040217f\n.text:0000000000402185\n.text:0000000000402190\n.text:0000000000402194\n.text:0000000000402198\n.text:000000000040219a\n.text:000000000040219c\n.text:000000000040219e\n.text:00000000004021a0\n.text:00000000004021a5\n.text:00000000004021aa\n.text:00000000004021af\n.text:00000000004021b2\n.text:00000000004021b7\n.text:00000000004021b9\n.text:00000000004021bb\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021c9\n.text:00000000004021ce\n.text:00000000004021d1\n.text:00000000004021e0\n.text:00000000004021e4\n.text:00000000004021e7\n.text:00000000004021ea\n.text:00000000004021ed\n.text:00000000004021ef\n.text:00000000004021f1\n.text:00000000004021f3\n.text:0000000000402200\n.text:0000000000402204\n.text:0000000000402207\n.text:000000000040220a\n.text:000000000040220d\n.text:000000000040220f\n.text:0000000000402213\n.text:0000000000402216\n.text:000000000040221b\n.text:000000000040221d\n.text:0000000000402220\n.text:0000000000402225\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222b\n.text:0000000000402230\n.text:0000000000402235\n.text:000000000040223a\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402244\n.text:0000000000402246\n.text:0000000000402249\n.text:000000000040224e\n.text:0000000000402253\n.text:0000000000402258\n.text:000000000040225d\n.text:000000000040225f\n.text:0000000000402265\n.text:0000000000402267\n.text:000000000040226a\n.text:000000000040226f\n.text:0000000000402271\n.text:0000000000402273\n.text:0000000000402275\n.text:0000000000402279\n.text:000000000040227a\n.text:000000000040227c\n.text:000000000040227e\n.text:0000000000402280\n.text:0000000000402281\n'
p1217
tp1218
sS'quotearg_custom_mem'
p1219
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1220
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1221
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00405190\n'
p1222
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1223
S'.text:0000000000405220\n.text:0000000000405223\n.text:0000000000405226\n.text:0000000000405229\n.text:000000000040522c\n.text:000000000040522e\n.text:0000000000405231\n'
p1224
tp1225
sS're_compile_pattern'
p1226
(S'\n__stdcall re_compile_pattern(char * __pattern, size_t __length, re_pattern_buffer * __buffer)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * re_compile_pattern(char *__pattern,size_t __length,re_pattern_buffer *__buffer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_re_compile_pattern_0060b218)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060b218]\n'
p1229
S'ff 25 c2 97 20 00\n'
p1230
S'.plt:0000000000401a50\n'
p1231
tp1232
sS'sigaction'
p1233
(S'\n__stdcall sigaction(int __sig, sigaction * __act, sigaction * __oact)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaction(int __sig,sigaction *__act,sigaction *__oact)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaction_0060b088)();\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x0060b088]\n'
p1236
S'ff 25 52 99 20 00\n'
p1237
S'.plt:0000000000401730\n'
p1238
tp1239
sS'no_more_lines'
p1240
(S'\n__stdcall no_more_lines()\n'
p1241
V\u000a_Bool no_more_lines(void)\u000a\u000a{\u000a  cstring *pcVar1;\u000a  \u000a  pcVar1 = find_line(current_line + 1);\u000a  return (_Bool)(pcVar1 == (cstring *)0x0);\u000a}\u000a\u000a
p1242
S'PUSH RAX\nMOV RDI,qword ptr [0x0060b420]\nINC RDI\nCALL 0x004032c0\nTEST RAX,RAX\nSETZ AL\nPOP RCX\nRET\n'
p1243
S'50\n48 8b 3d b8 79 20 00\n48 ff c7\ne8 50 f8 ff ff\n48 85 c0\n0f 94 c0\n59\nc3\n'
p1244
S'.text:0000000000403a60\n.text:0000000000403a61\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a70\n.text:0000000000403a73\n.text:0000000000403a76\n.text:0000000000403a77\n'
p1245
tp1246
sS'rpl_calloc'
p1247
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1248
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060b140)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1249
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004064db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004064e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004064e0\nPUSH RAX\nCALL 0x004016c0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004018a0\n'
p1250
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 ef b1 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 b5 b3 ff ff\n'
p1251
S'.text:00000000004064a0\n.text:00000000004064a3\n.text:00000000004064a8\n.text:00000000004064aa\n.text:00000000004064ad\n.text:00000000004064b2\n.text:00000000004064b4\n.text:00000000004064b7\n.text:00000000004064bb\n.text:00000000004064bd\n.text:00000000004064c0\n.text:00000000004064c3\n.text:00000000004064c6\n.text:00000000004064c9\n.text:00000000004064cb\n.text:00000000004064cc\n.text:00000000004064d1\n.text:00000000004064d7\n.text:00000000004064d9\n.text:00000000004064da\n.text:00000000004064db\n.text:00000000004064e0\n.text:00000000004064e3\n.text:00000000004064e6\n'
p1252
tp1253
sS'memset'
p1254
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060b100)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0060b100]\n'
p1257
S'ff 25 da 98 20 00\n'
p1258
S'.plt:0000000000401820\n'
p1259
tp1260
sS'write_to_file'
p1261
(S'\n__stdcall write_to_file(uintmax_t last_line)\n'
p1262
V\u000avoid write_to_file(uintmax_t last_line)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  cstring *line;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  int in_EDX;\u000a  ulong uVar4;\u000a  char in_SIL;\u000a  \u000a  uVar1 = get_first_line_in_buffer();\u000a  if (uVar1 <= last_line) {\u000a    if (last_line != uVar1) {\u000a      uVar4 = 0;\u000a      do {\u000a        line = remove_line();\u000a        if (line == (cstring *)0x0) goto LAB_0040355a;\u000a        if (in_SIL == 0) {\u000a          save_line_to_file(line);\u000a        }\u000a        uVar4 = uVar4 + 1;\u000a      } while (uVar4 < last_line - uVar1);\u000a    }\u000a    return;\u000a  }\u000aLAB_0040355a:\u000a  uVar2 = dcgettext(0,0x407a2c,5);\u000a  pcVar3 = quote(global_argv[(long)in_EDX]);\u000a  error(0,0,uVar2,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV R15D,ESI\nMOV RBX,RDI\nCALL 0x00403a10\nCMP RAX,RBX\nJA 0x0040355a\nSUB RBX,RAX\nJZ 0x0040354f\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nCALL 0x00403210\nTEST RAX,RAX\nJZ 0x0040355a\nTEST R15B,R15B\nJNZ 0x00403547\nMOV RDI,RAX\nCALL 0x00403470\nINC RBP\nCMP RBP,RBX\nJC 0x00403530\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407a2c\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RAX,qword ptr [0x0060b330]\nMOVSXD RCX,R14D\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCALL 0x00405270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019b0\nCALL 0x00401be0\n'
p1264
S'55\n41 57\n41 56\n53\n50\n41 89 d6\n41 89 f7\n48 89 fb\ne8 fb 04 00 00\n48 39 d8\n77 40\n48 29 c3\n74 30\n31 ed\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 db fc ff ff\n48 85 c0\n74 20\n45 84 ff\n75 08\n48 89 c7\ne8 29 ff ff ff\n48 ff c5\n48 39 dd\n72 e1\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 2c 7a 40 00\nba 05 00 00 00\ne8 15 e2 ff ff\n48 89 c3\n48 8b 05 bb 7d 20 00\n49 63 ce\n48 8b 3c c8\ne8 ef 1c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 1e e4 ff ff\ne8 49 e6 ff ff\n'
p1265
S'.text:0000000000403500\n.text:0000000000403501\n.text:0000000000403503\n.text:0000000000403505\n.text:0000000000403506\n.text:0000000000403507\n.text:000000000040350a\n.text:000000000040350d\n.text:0000000000403510\n.text:0000000000403515\n.text:0000000000403518\n.text:000000000040351a\n.text:000000000040351d\n.text:000000000040351f\n.text:0000000000403521\n.text:0000000000403530\n.text:0000000000403535\n.text:0000000000403538\n.text:000000000040353a\n.text:000000000040353d\n.text:000000000040353f\n.text:0000000000403542\n.text:0000000000403547\n.text:000000000040354a\n.text:000000000040354d\n.text:000000000040354f\n.text:0000000000403553\n.text:0000000000403554\n.text:0000000000403556\n.text:0000000000403558\n.text:0000000000403559\n.text:000000000040355a\n.text:000000000040355c\n.text:0000000000403561\n.text:0000000000403566\n.text:000000000040356b\n.text:000000000040356e\n.text:0000000000403575\n.text:0000000000403578\n.text:000000000040357c\n.text:0000000000403581\n.text:0000000000403584\n.text:0000000000403586\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358d\n.text:0000000000403592\n'
p1266
tp1267
sS'getc_unlocked'
p1268
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060b080)();\u000a  return iVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060b080]\n'
p1271
S'ff 25 5a 99 20 00\n'
p1272
S'.plt:0000000000401720\n'
p1273
tp1274
sS'cleanup'
p1275
(S'\n__stdcall cleanup(EVP_PKEY_CTX * ctx)\n'
p1276
V\u000avoid cleanup(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  undefined auStack136 [128];\u000a  \u000a  close_output_file();\u000a  sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)auStack136);\u000a  delete_all_files(0);\u000a  sigprocmask(2,(sigset_t *)auStack136,(sigset_t *)0x0);\u000a  return;\u000a}\u000a\u000a
p1277
S'PUSH RBX\nSUB RSP,0x80\nCALL 0x004027b0\nMOV RBX,RSP\nXOR EDI,EDI\nMOV ESI,0x60b370\nMOV RDX,RBX\nCALL 0x00401660\nXOR EDI,EDI\nCALL 0x00402940\nMOV EDI,0x2\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00401660\nADD RSP,0x80\nPOP RBX\nRET\n'
p1278
S'53\n48 81 ec 80 00 00 00\ne8 33 00 00 00\n48 89 e3\n31 ff\nbe 70 b3 60 00\n48 89 da\ne8 d1 ee ff ff\n31 ff\ne8 aa 01 00 00\nbf 02 00 00 00\n31 d2\n48 89 de\ne8 bb ee ff ff\n48 81 c4 80 00 00 00\n5b\nc3\n'
p1279
S'.text:0000000000402770\n.text:0000000000402771\n.text:0000000000402778\n.text:000000000040277d\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402787\n.text:000000000040278a\n.text:000000000040278f\n.text:0000000000402791\n.text:0000000000402796\n.text:000000000040279b\n.text:000000000040279d\n.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027ac\n.text:00000000004027ad\n'
p1280
tp1281
sS'c_isascii'
p1282
(S'\n__stdcall c_isascii()\n'
p1283
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1284
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1285
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1286
S'.text:0000000000406840\n.text:0000000000406846\n.text:0000000000406849\n'
p1287
tp1288
sS'process_regexp'
p1289
(S'\n__stdcall process_regexp(control * p, uintmax_t repetition)\n'
p1290
V\u000avoid process_regexp(control *p,uintmax_t repetition)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  cstring *line;\u000a  undefined8 uVar3;\u000a  int __length;\u000a  uintmax_t last_line;\u000a  \u000a  _Var1 = p->ignore;\u000a  if (_Var1 == false) {\u000a    create_output_file();\u000a  }\u000a  if ((suppress_matched == 1) && (current_line != 0)) {\u000a    remove_line();\u000a  }\u000a  if (-1 < p->offset) {\u000a    current_line = current_line + 1;\u000a    line = find_line(current_line);\u000a    if (line != (cstring *)0x0) {\u000a      do {\u000a        iVar2 = (int)line->len;\u000a        __length = iVar2 + -1;\u000a        if (line->str[line->len - 1] != '\u005cn') {\u000a          __length = iVar2;\u000a        }\u000a        iVar2 = re_search((re_pattern_buffer *)&p->re_compiled,line->str,__length,0,__length,\u000a                          (re_registers *)0x0);\u000a        if (iVar2 != -1) goto LAB_00402fd9;\u000a        line = remove_line();\u000a        if (_Var1 == false) {\u000a          save_line_to_file(line);\u000a        }\u000a        current_line = current_line + 1;\u000a        line = find_line(current_line);\u000a      } while (line != (cstring *)0x0);\u000a    }\u000a    if (p->repeat_forever != false) {\u000a      if (_Var1 == false) {\u000a        dump_rest_of_file();\u000a        close_output_file();\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000aLAB_0040304a:\u000a    regexp_error(p,repetition);\u000aLAB_00403059:\u000a    if (_Var1 == false) {\u000a      dump_rest_of_file();\u000a      close_output_file();\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  do {\u000a    current_line = current_line + 1;\u000a    line = find_line(current_line);\u000a    if (line == (cstring *)0x0) {\u000a      if (p->repeat_forever == false) goto LAB_0040304a;\u000a      goto LAB_00403059;\u000a    }\u000a    iVar2 = (int)line->len;\u000a    __length = iVar2 + -1;\u000a    if (line->str[line->len - 1] != '\u005cn') {\u000a      __length = iVar2;\u000a    }\u000a    iVar2 = re_search((re_pattern_buffer *)&p->re_compiled,line->str,__length,0,__length,\u000a                      (re_registers *)0x0);\u000a  } while (iVar2 == -1);\u000aLAB_00402fd9:\u000a  if (iVar2 != -2) {\u000a    last_line = p->offset + current_line;\u000a    write_to_file(last_line);\u000a    if (_Var1 == false) {\u000a      close_output_file();\u000a    }\u000a    if (0 < p->offset) {\u000a      current_line = last_line;\u000a    }\u000a    return;\u000a  }\u000a  uVar3 = dcgettext(0,"error in regular expression search",5);\u000a  error(0,0,uVar3,uVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  cleanup_fatal();\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV R12,RDI\nMOV BPL,byte ptr [R12 + 0x1d]\nTEST BPL,BPL\nJNZ 0x00402ecd\nCALL 0x00403110\nCMP byte ptr [0x0060b34a],0x1\nJNZ 0x00402ee7\nMOV RAX,qword ptr [0x0060b420]\nTEST RAX,RAX\nJZ 0x00402ee7\nCALL 0x00403210\nCMP qword ptr [R12],0x0\nJS 0x00402f8d\nMOV RDI,qword ptr [0x0060b420]\nINC RDI\nMOV qword ptr [0x0060b420],RDI\nCALL 0x004032c0\nTEST RAX,RAX\nJZ 0x00402f6b\nLEA R15,[R12 + 0x20]\nMOV RCX,qword ptr [RAX]\nMOV RSI,qword ptr [RAX + 0x8]\nCMP byte ptr [RSI + RCX*0x1 + -0x1],0xa\nLEA RDX,[RCX + -0x1]\nCMOVNZ EDX,ECX\nXOR ECX,ECX\nXOR R9D,R9D\nMOV RDI,R15\nMOV R8D,EDX\nCALL 0x00401940\nCMP EAX,-0x1\nJNZ 0x00402fd9\nCALL 0x00403210\nTEST BPL,BPL\nJNZ 0x00402f50\nMOV RDI,RAX\nCALL 0x00403470\nMOV RDI,qword ptr [0x0060b420]\nINC RDI\nMOV qword ptr [0x0060b420],RDI\nCALL 0x004032c0\nTEST RAX,RAX\nJNZ 0x00402f12\nCMP byte ptr [R12 + 0x1c],0x0\nJZ 0x0040304a\nTEST BPL,BPL\nJNZ 0x00402f86\nCALL 0x004031e0\nCALL 0x004027b0\nXOR EDI,EDI\nCALL 0x00401a20\nLEA R15,[R12 + 0x20]\nMOV RDI,qword ptr [0x0060b420]\nINC RDI\nMOV qword ptr [0x0060b420],RDI\nCALL 0x004032c0\nTEST RAX,RAX\nJZ 0x00403042\nMOV RCX,qword ptr [RAX]\nMOV RSI,qword ptr [RAX + 0x8]\nCMP byte ptr [RSI + RCX*0x1 + -0x1],0xa\nLEA RDX,[RCX + -0x1]\nCMOVNZ EDX,ECX\nXOR ECX,ECX\nXOR R9D,R9D\nMOV RDI,R15\nMOV R8D,EDX\nCALL 0x00401940\nCMP EAX,-0x1\nJZ 0x00402f92\nCMP EAX,-0x2\nJZ 0x0040301b\nMOV RBX,qword ptr [R12]\nADD RBX,qword ptr [0x0060b420]\nMOV EDX,dword ptr [R12 + 0x18]\nMOVZX ESI,BPL\nMOV RDI,RBX\nCALL 0x00403500\nTEST BPL,BPL\nJNZ 0x00403004\nCALL 0x004027b0\nCMP qword ptr [R12],0x0\nJLE 0x00403012\nMOV qword ptr [0x0060b420],RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x407996\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019b0\nCALL 0x00401be0\nCMP byte ptr [R12 + 0x1c],0x0\nJNZ 0x00403059\nMOVZX EDX,BPL\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00403390\nTEST BPL,BPL\nJNZ 0x00403068\nCALL 0x004031e0\nCALL 0x004027b0\nXOR EDI,EDI\nCALL 0x00401a20\n'
p1292
S'55\n41 57\n41 56\n41 54\n53\n49 89 f6\n49 89 fc\n41 8a 6c 24 1d\n40 84 ed\n75 05\ne8 43 02 00 00\n80 3d 76 84 20 00 01\n75 11\n48 8b 05 43 85 20 00\n48 85 c0\n74 05\ne8 29 03 00 00\n49 83 3c 24 00\n0f 88 9b 00 00 00\n48 8b 3d 27 85 20 00\n48 ff c7\n48 89 3d 1d 85 20 00\ne8 b8 03 00 00\n48 85 c0\n74 5e\n4d 8d 7c 24 20\n48 8b 08\n48 8b 70 08\n80 7c 0e ff 0a\n48 8d 51 ff\n0f 45 d1\n31 c9\n45 31 c9\n4c 89 ff\n41 89 d0\ne8 0b ea ff ff\n83 f8 ff\n0f 85 9b 00 00 00\ne8 cd 02 00 00\n40 84 ed\n75 08\n48 89 c7\ne8 20 05 00 00\n48 8b 3d c9 84 20 00\n48 ff c7\n48 89 3d bf 84 20 00\ne8 5a 03 00 00\n48 85 c0\n75 a7\n41 80 7c 24 1c 00\n0f 84 d3 00 00 00\n40 84 ed\n75 0a\ne8 5f 02 00 00\ne8 2a f8 ff ff\n31 ff\ne8 93 ea ff ff\n4d 8d 7c 24 20\n48 8b 3d 87 84 20 00\n48 ff c7\n48 89 3d 7d 84 20 00\ne8 18 03 00 00\n48 85 c0\n0f 84 91 00 00 00\n48 8b 08\n48 8b 70 08\n80 7c 0e ff 0a\n48 8d 51 ff\n0f 45 d1\n31 c9\n45 31 c9\n4c 89 ff\n41 89 d0\ne8 6c e9 ff ff\n83 f8 ff\n74 b9\n83 f8 fe\n74 3d\n49 8b 1c 24\n48 03 1d 37 84 20 00\n41 8b 54 24 18\n40 0f b6 f5\n48 89 df\ne8 06 05 00 00\n40 84 ed\n75 05\ne8 ac f7 ff ff\n49 83 3c 24 00\n7e 07\n48 89 1d 0e 84 20 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 96 79 40 00\nba 05 00 00 00\ne8 54 e7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 73 e9 ff ff\ne8 9e eb ff ff\n41 80 7c 24 1c 00\n75 0f\n40 0f b6 d5\n4c 89 e7\n4c 89 f6\ne8 37 03 00 00\n40 84 ed\n75 0a\ne8 7d 01 00 00\ne8 48 f7 ff ff\n31 ff\ne8 b1 e9 ff ff\n'
p1293
S'.text:0000000000402eb0\n.text:0000000000402eb1\n.text:0000000000402eb3\n.text:0000000000402eb5\n.text:0000000000402eb7\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec3\n.text:0000000000402ec6\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ed4\n.text:0000000000402ed6\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee7\n.text:0000000000402eec\n.text:0000000000402ef2\n.text:0000000000402ef9\n.text:0000000000402efc\n.text:0000000000402f03\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f0d\n.text:0000000000402f12\n.text:0000000000402f15\n.text:0000000000402f19\n.text:0000000000402f1e\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f27\n.text:0000000000402f2a\n.text:0000000000402f2d\n.text:0000000000402f30\n.text:0000000000402f35\n.text:0000000000402f38\n.text:0000000000402f3e\n.text:0000000000402f43\n.text:0000000000402f46\n.text:0000000000402f48\n.text:0000000000402f4b\n.text:0000000000402f50\n.text:0000000000402f57\n.text:0000000000402f5a\n.text:0000000000402f61\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f6b\n.text:0000000000402f71\n.text:0000000000402f77\n.text:0000000000402f7a\n.text:0000000000402f7c\n.text:0000000000402f81\n.text:0000000000402f86\n.text:0000000000402f88\n.text:0000000000402f8d\n.text:0000000000402f92\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402fa3\n.text:0000000000402fa8\n.text:0000000000402fab\n.text:0000000000402fb1\n.text:0000000000402fb4\n.text:0000000000402fb8\n.text:0000000000402fbd\n.text:0000000000402fc1\n.text:0000000000402fc4\n.text:0000000000402fc6\n.text:0000000000402fc9\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd4\n.text:0000000000402fd7\n.text:0000000000402fd9\n.text:0000000000402fdc\n.text:0000000000402fde\n.text:0000000000402fe2\n.text:0000000000402fe9\n.text:0000000000402fee\n.text:0000000000402ff2\n.text:0000000000402ff5\n.text:0000000000402ffa\n.text:0000000000402ffd\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403009\n.text:000000000040300b\n.text:0000000000403012\n.text:0000000000403013\n.text:0000000000403015\n.text:0000000000403017\n.text:0000000000403019\n.text:000000000040301a\n.text:000000000040301b\n.text:000000000040301d\n.text:0000000000403022\n.text:0000000000403027\n.text:000000000040302c\n.text:000000000040302f\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403035\n.text:0000000000403038\n.text:000000000040303d\n.text:0000000000403042\n.text:0000000000403048\n.text:000000000040304a\n.text:000000000040304e\n.text:0000000000403051\n.text:0000000000403054\n.text:0000000000403059\n.text:000000000040305c\n.text:000000000040305e\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306a\n'
p1294
tp1295
sS'dup_safer'
p1296
(S'\n__stdcall dup_safer()\n'
p1297
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1298
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00406570\n'
p1299
S'31 f6\nba 03 00 00 00\n31 c0\ne9 52 0e 00 00\n'
p1300
S'.text:0000000000405710\n.text:0000000000405712\n.text:0000000000405717\n.text:0000000000405719\n'
p1301
tp1302
sS'__ctype_b_loc'
p1303
(S'\n__stdcall __ctype_b_loc()\n'
p1304
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060b238)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1305
S'JMP qword ptr [0x0060b238]\n'
p1306
S'ff 25 a2 97 20 00\n'
p1307
S'.plt:0000000000401a90\n'
p1308
tp1309
sS'parse_repeat_count'
p1310
(S'\n__stdcall parse_repeat_count(control * p, char * str)\n'
p1311
V\u000avoid parse_repeat_count(control *p,char *str)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  size_t sVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  char *__s;\u000a  undefined8 local_30;\u000a  \u000a  sVar2 = strlen(__s);\u000a  if (__s[sVar2 - 1] != '}') {\u000a    uVar3 = dcgettext(0,"%s: \u005c'}\u005c' is required in repeat count",5);\u000a    pcVar4 = quote(__s);\u000a    error(1,0,uVar3,pcVar4);\u000a  }\u000a  __s[sVar2 - 1] = 0;\u000a  if ((sVar2 == 3) && (__s[1] == '*')) {\u000a    str[0x1c] = 1;\u000a  }\u000a  else {\u000a    sVar1 = xstrtoumax(__s + 1,(char **)0x0,(uintmax_t *)0xa,(char *)&local_30);\u000a    if (sVar1 != LONGINT_OK) {\u000a      uVar3 = dcgettext(0,"%s}: integer required between \u005c'{\u005c' and \u005c'}\u005c'",5);\u000a      pcVar4 = quote(global_argv[(long)(int)p]);\u000a      error(1,0,uVar3,pcVar4);\u000a    }\u000a    *(undefined8 *)(str + 0x10) = local_30;\u000a  }\u000a  __s[sVar2 - 1] = '}';\u000a  return;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDX\nMOV R14,RSI\nMOV R12D,EDI\nMOV RDI,RBX\nCALL 0x004017a0\nMOV R15,RAX\nCMP byte ptr [RBX + R15*0x1 + -0x1],0x7d\nJZ 0x00402da8\nXOR EDI,EDI\nMOV ESI,0x407948\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00405270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004019b0\nMOV byte ptr [RBX + R15*0x1 + -0x1],0x0\nLEA RDI,[RBX + 0x1]\nCMP R15,0x3\nJNZ 0x00402dc4\nCMP byte ptr [RDI],0x2a\nJNZ 0x00402dc4\nMOV byte ptr [R14 + 0x1c],0x1\nJMP 0x00402e23\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x4082d9\nCALL 0x004061c0\nTEST EAX,EAX\nJZ 0x00402e1a\nXOR EDI,EDI\nMOV ESI,0x40796c\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBP,RAX\nMOV RAX,qword ptr [0x0060b330]\nMOVSXD RCX,R12D\nMOV RDI,qword ptr [RAX + RCX*0x8]\nCALL 0x00405270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004019b0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14 + 0x10],RAX\nMOV byte ptr [RBX + R15*0x1 + -0x1],0x7d\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 d3\n49 89 f6\n41 89 fc\n48 89 df\ne8 33 ea ff ff\n49 89 c7\n42 80 7c 3b ff 7d\n74 30\n31 ff\nbe 48 79 40 00\nba 05 00 00 00\ne8 f7 e9 ff ff\n48 89 c5\n48 89 df\ne8 dc 24 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 08 ec ff ff\n42 c6 44 3b ff 00\n48 8d 7b 01\n49 83 ff 03\n75 0c\n80 3f 2a\n75 07\n41 c6 46 1c 01\neb 5f\n48 8d 4c 24 08\n31 f6\nba 0a 00 00 00\n41 b8 d9 82 40 00\ne8 e5 33 00 00\n85 c0\n74 3b\n31 ff\nbe 6c 79 40 00\nba 05 00 00 00\ne8 90 e9 ff ff\n48 89 c5\n48 8b 05 36 85 20 00\n49 63 cc\n48 8b 3c c8\ne8 6a 24 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 96 eb ff ff\n48 8b 44 24 08\n49 89 46 10\n42 c6 44 3b ff 7d\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:0000000000402d50\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d58\n.text:0000000000402d5c\n.text:0000000000402d5f\n.text:0000000000402d62\n.text:0000000000402d65\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d70\n.text:0000000000402d76\n.text:0000000000402d78\n.text:0000000000402d7a\n.text:0000000000402d7f\n.text:0000000000402d84\n.text:0000000000402d89\n.text:0000000000402d8c\n.text:0000000000402d8f\n.text:0000000000402d94\n.text:0000000000402d97\n.text:0000000000402d9c\n.text:0000000000402d9e\n.text:0000000000402da0\n.text:0000000000402da3\n.text:0000000000402da8\n.text:0000000000402dae\n.text:0000000000402db2\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dbd\n.text:0000000000402dc2\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcb\n.text:0000000000402dd0\n.text:0000000000402dd6\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402ddf\n.text:0000000000402de1\n.text:0000000000402de6\n.text:0000000000402deb\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402dfa\n.text:0000000000402dfd\n.text:0000000000402e01\n.text:0000000000402e06\n.text:0000000000402e09\n.text:0000000000402e0e\n.text:0000000000402e10\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e23\n.text:0000000000402e29\n.text:0000000000402e2d\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e32\n.text:0000000000402e34\n.text:0000000000402e35\n'
p1315
tp1316
sS'sigaddset'
p1317
(S'\n__stdcall sigaddset(sigset_t * __set, int __signo)\n'
p1318
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaddset(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaddset_0060b230)();\u000a  return iVar1;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x0060b230]\n'
p1320
S'ff 25 aa 97 20 00\n'
p1321
S'.plt:0000000000401a80\n'
p1322
tp1323
sS'quotearg'
p1324
(S'\n__stdcall quotearg(char * arg)\n'
p1325
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1326
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404d70\n'
p1327
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1328
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f55\n.text:0000000000404f58\n'
p1329
tp1330
sS'_start'
p1331
(S'\n__stdcall _start()\n'
p1332
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060aff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1333
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x406d50\nMOV RCX,0x406ce0\nMOV RDI,0x401bf0\nCALL qword ptr [0x0060aff0]\nHLT\n'
p1334
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 50 6d 40 00\n48 c7 c1 e0 6c 40 00\n48 c7 c7 f0 1b 40 00\nff 15 16 95 20 00\nf4\n'
p1335
S'.text:0000000000401ab0\n.text:0000000000401ab2\n.text:0000000000401ab5\n.text:0000000000401ab6\n.text:0000000000401ab9\n.text:0000000000401abd\n.text:0000000000401abe\n.text:0000000000401abf\n.text:0000000000401ac6\n.text:0000000000401acd\n.text:0000000000401ad4\n.text:0000000000401ada\n'
p1336
tp1337
sS'c_iscntrl'
p1338
(S'\n__stdcall c_iscntrl()\n'
p1339
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1340
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00406868\nRET\nCMP EDI,0x7f\nJZ 0x00406867\nXOR EAX,EAX\nRET\n'
p1341
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1342
S'.text:0000000000406860\n.text:0000000000406862\n.text:0000000000406865\n.text:0000000000406867\n.text:0000000000406868\n.text:000000000040686b\n.text:000000000040686d\n.text:000000000040686f\n'
p1343
tp1344
sS'parse_patterns'
p1345
(S'\n__stdcall parse_patterns(char * * argv)\n'
p1346
V\u000avoid parse_patterns(char **argv)\u000a\u000a{\u000a  char cVar1;\u000a  uintmax_t last_val;\u000a  strtol_error sVar2;\u000a  control *str;\u000a  undefined8 uVar3;\u000a  char *str_00;\u000a  long in_RDX;\u000a  uint uVar4;\u000a  ulong in_RSI;\u000a  uint uVar5;\u000a  long lVar6;\u000a  char buf [21];\u000a  uintmax_t local_60;\u000a  char *local_58;\u000a  undefined8 local_50;\u000a  char local_48 [24];\u000a  \u000a  str_00 = (char *)(in_RSI & 0xffffffff);\u000a  uVar4 = (uint)str_00;\u000a  while ((int)uVar4 < (int)argv) {\u000a    uVar4 = (uint)str_00;\u000a    lVar6 = (long)(int)uVar4;\u000a    cVar1 = **(char **)(in_RDX + lVar6 * 8);\u000a    if ((cVar1 == '/') || (cVar1 == '%')) {\u000a      str = extract_regexp(str_00);\u000a    }\u000a    else {\u000a      str = new_control_record();\u000a      str->argnum = uVar4;\u000a      sVar2 = xstrtoumax(*(char **)(in_RDX + lVar6 * 8),(char **)0x0,(uintmax_t *)0xa,\u000a                         (char *)&local_60);\u000a      if (sVar2 != LONGINT_OK) {\u000a        uVar3 = dcgettext(0,"%s: invalid pattern",5);\u000a        str_00 = quote(*(char **)(in_RDX + lVar6 * 8));\u000a        error(1,0,uVar3,str_00);\u000a      }\u000a      if (local_60 == 0) {\u000a        uVar3 = dcgettext(0,"%s: line number must be greater than zero",5);\u000a        error(1,0,uVar3,*(undefined8 *)(in_RDX + lVar6 * 8));\u000a      }\u000a      if (local_60 < last_val) {\u000a        local_50 = dcgettext(0,"line number %s is smaller than preceding line number, %s",5);\u000a        local_58 = quote(*(char **)(in_RDX + lVar6 * 8));\u000a        str_00 = umaxtostr(last_val,local_48);\u000a        error(1,0,local_50,local_58,str_00);\u000a      }\u000a      if (local_60 == last_val) {\u000a        uVar3 = dcgettext(0,"warning: line number %s is the same as preceding line number",5);\u000a        str_00 = quote(*(char **)(in_RDX + lVar6 * 8));\u000a        error(0,0,uVar3,str_00);\u000a      }\u000a      last_val = local_60;\u000a      str->lines_required = local_60;\u000a    }\u000a    uVar5 = uVar4 + 1;\u000a    if (((int)uVar5 < (int)argv) && (**(char **)(in_RDX + (long)(int)uVar5 * 8) == '{')) {\u000a      parse_repeat_count((control *)(ulong)uVar5,(char *)str);\u000a      uVar4 = uVar5;\u000a    }\u000a    uVar4 = uVar4 + 1;\u000a    str_00 = (char *)(ulong)uVar4;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1347
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R13,RDX\nMOV EBP,ESI\nMOV R14D,EDI\nCMP EBP,R14D\nJL 0x0040232b\nJMP 0x004024cd\nINC EBP\nCMP EBP,R14D\nJGE 0x004024cd\nMOVSXD R12,EBP\nMOV RDX,qword ptr [R13 + R12*0x8]\nMOVZX EAX,byte ptr [RDX]\nCMP AL,0x2f\nJZ 0x0040233e\nCMP AL,0x25\nJNZ 0x00402360\nXOR ESI,ESI\nCMP AL,0x25\nSETZ SIL\nMOV EDI,EBP\nCALL 0x00402bb0\nMOV R15,RAX\nJMP 0x0040249c\nCALL 0x00402cd0\nMOV R15,RAX\nMOV dword ptr [R15 + 0x18],EBP\nMOV RDI,qword ptr [R13 + R12*0x8]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x4082d9\nLEA RCX,[RSP + 0x8]\nCALL 0x004061c0\nTEST EAX,EAX\nJZ 0x004023be\nXOR EDI,EDI\nMOV ESI,0x407829\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RDI,qword ptr [R13 + R12*0x8]\nCALL 0x00405270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019b0\nCMP qword ptr [RSP + 0x8],0x0\nJNZ 0x004023ed\nXOR EDI,EDI\nMOV ESI,0x40783d\nMOV EDX,0x5\nCALL 0x00401780\nMOV RDX,RAX\nMOV RCX,qword ptr [R13 + R12*0x8]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x004019b0\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,qword ptr [0x0060b410]\nJNC 0x0040244f\nXOR EDI,EDI\nMOV ESI,0x407867\nMOV EDX,0x5\nCALL 0x00401780\nMOV qword ptr [RSP + 0x18],RAX\nMOV RDI,qword ptr [R13 + R12*0x8]\nCALL 0x00405270\nMOV qword ptr [RSP + 0x10],RAX\nMOV RDI,qword ptr [0x0060b410]\nLEA RSI,[RSP + 0x20]\nCALL 0x00403d20\nMOV RBX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV R8,RBX\nCALL 0x004019b0\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,qword ptr [0x0060b410]\nJNZ 0x0040248c\nXOR EDI,EDI\nMOV ESI,0x4078a0\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RDI,qword ptr [R13 + R12*0x8]\nCALL 0x00405270\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004019b0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x0060b410],RAX\nMOV qword ptr [R15 + 0x8],RAX\nLEA R12D,[RBP + 0x1]\nCMP R12D,R14D\nJGE 0x00402320\nMOVSXD RAX,R12D\nMOV RDX,qword ptr [R13 + RAX*0x8]\nCMP byte ptr [RDX],0x7b\nJNZ 0x00402320\nMOV EDI,R12D\nMOV RSI,R15\nCALL 0x00402d50\nMOV EBP,R12D\nJMP 0x00402320\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1348
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 d5\n89 f5\n41 89 fe\n44 39 f5\n7c 10\ne9 ad 01 00 00\nff c5\n44 39 f5\n0f 8d a2 01 00 00\n4c 63 e5\n4b 8b 54 e5 00\n0f b6 02\n3c 2f\n74 04\n3c 25\n75 22\n31 f6\n3c 25\n40 0f 94 c6\n89 ef\ne8 63 08 00 00\n49 89 c7\ne9 47 01 00 00\ne8 6b 09 00 00\n49 89 c7\n41 89 6f 18\n4b 8b 7c e5 00\n31 f6\nba 0a 00 00 00\n41 b8 d9 82 40 00\n48 8d 4c 24 08\ne8 38 3e 00 00\n85 c0\n74 32\n31 ff\nbe 29 78 40 00\nba 05 00 00 00\ne8 e3 f3 ff ff\n48 89 c3\n4b 8b 7c e5 00\ne8 c6 2e 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 f2 f5 ff ff\n48 83 7c 24 08 00\n75 27\n31 ff\nbe 3d 78 40 00\nba 05 00 00 00\ne8 a9 f3 ff ff\n48 89 c2\n4b 8b 4c e5 00\nbf 01 00 00 00\n31 f6\n31 c0\ne8 c3 f5 ff ff\n48 8b 44 24 08\n48 3b 05 17 90 20 00\n73 54\n31 ff\nbe 67 78 40 00\nba 05 00 00 00\ne8 74 f3 ff ff\n48 89 44 24 18\n4b 8b 7c e5 00\ne8 55 2e 00 00\n48 89 44 24 10\n48 8b 3d e9 8f 20 00\n48 8d 74 24 20\ne8 ef 18 00 00\n48 89 c3\nbf 01 00 00 00\n31 f6\n31 c0\n48 8b 54 24 18\n48 8b 4c 24 10\n49 89 d8\ne8 61 f5 ff ff\n48 8b 44 24 08\n48 3b 05 b5 8f 20 00\n75 2f\n31 ff\nbe a0 78 40 00\nba 05 00 00 00\ne8 12 f3 ff ff\n48 89 c3\n4b 8b 7c e5 00\ne8 f5 2d 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 24 f5 ff ff\n48 8b 44 24 08\n48 89 05 78 8f 20 00\n49 89 47 08\n44 8d 65 01\n45 39 f4\n0f 8d 77 fe ff ff\n49 63 c4\n49 8b 54 c5 00\n80 3a 7b\n0f 85 66 fe ff ff\n44 89 e7\n4c 89 fe\ne8 8b 08 00 00\n44 89 e5\ne9 53 fe ff ff\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1349
S'.text:0000000000402300\n.text:0000000000402301\n.text:0000000000402303\n.text:0000000000402305\n.text:0000000000402307\n.text:0000000000402309\n.text:000000000040230a\n.text:000000000040230e\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402316\n.text:0000000000402319\n.text:000000000040231b\n.text:0000000000402320\n.text:0000000000402322\n.text:0000000000402325\n.text:000000000040232b\n.text:000000000040232e\n.text:0000000000402333\n.text:0000000000402336\n.text:0000000000402338\n.text:000000000040233a\n.text:000000000040233c\n.text:000000000040233e\n.text:0000000000402340\n.text:0000000000402342\n.text:0000000000402346\n.text:0000000000402348\n.text:000000000040234d\n.text:0000000000402350\n.text:0000000000402360\n.text:0000000000402365\n.text:0000000000402368\n.text:000000000040236c\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402378\n.text:000000000040237e\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238a\n.text:000000000040238c\n.text:000000000040238e\n.text:0000000000402393\n.text:0000000000402398\n.text:000000000040239d\n.text:00000000004023a0\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023ad\n.text:00000000004023b2\n.text:00000000004023b4\n.text:00000000004023b6\n.text:00000000004023b9\n.text:00000000004023be\n.text:00000000004023c4\n.text:00000000004023c6\n.text:00000000004023c8\n.text:00000000004023cd\n.text:00000000004023d2\n.text:00000000004023d7\n.text:00000000004023da\n.text:00000000004023df\n.text:00000000004023e4\n.text:00000000004023e6\n.text:00000000004023e8\n.text:00000000004023ed\n.text:00000000004023f2\n.text:00000000004023f9\n.text:00000000004023fb\n.text:00000000004023fd\n.text:0000000000402402\n.text:0000000000402407\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402416\n.text:000000000040241b\n.text:0000000000402420\n.text:0000000000402427\n.text:000000000040242c\n.text:0000000000402431\n.text:0000000000402434\n.text:0000000000402439\n.text:000000000040243b\n.text:000000000040243d\n.text:0000000000402442\n.text:0000000000402447\n.text:000000000040244a\n.text:000000000040244f\n.text:0000000000402454\n.text:000000000040245b\n.text:000000000040245d\n.text:000000000040245f\n.text:0000000000402464\n.text:0000000000402469\n.text:000000000040246e\n.text:0000000000402471\n.text:0000000000402476\n.text:000000000040247b\n.text:000000000040247e\n.text:0000000000402480\n.text:0000000000402482\n.text:0000000000402484\n.text:0000000000402487\n.text:000000000040248c\n.text:0000000000402491\n.text:0000000000402498\n.text:000000000040249c\n.text:00000000004024a0\n.text:00000000004024a3\n.text:00000000004024a9\n.text:00000000004024ac\n.text:00000000004024b1\n.text:00000000004024b4\n.text:00000000004024ba\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024cd\n.text:00000000004024d1\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d6\n.text:00000000004024d8\n.text:00000000004024da\n.text:00000000004024db\n'
p1350
tp1351
sS'c_isblank'
p1352
(S'\n__stdcall c_isblank()\n'
p1353
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1354
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1355
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1356
S'.text:0000000000406850\n.text:0000000000406853\n.text:0000000000406856\n.text:0000000000406859\n.text:000000000040685c\n.text:000000000040685e\n'
p1357
tp1358
sS'atexit'
p1359
(S'\n__stdcall atexit(__func * __func)\n'
p1360
V\u000a/* WARNING: Removing unreachable block (ram,0x00406d80) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060b1f0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1361
S'MOV RAX,0x60b250\nTEST RAX,RAX\nJZ 0x00406d80\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401a00\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401a00\n'
p1362
S'48 c7 c0 50 b2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 8a ac ff ff\n31 d2\n31 f6\ne9 77 ac ff ff\n'
p1363
S'.text:0000000000406d60\n.text:0000000000406d67\n.text:0000000000406d6a\n.text:0000000000406d6c\n.text:0000000000406d6f\n.text:0000000000406d71\n.text:0000000000406d80\n.text:0000000000406d82\n.text:0000000000406d84\n'
p1364
tp1365
sS'fdopen'
p1366
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1367
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060b1b0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0060b1b0]\n'
p1369
S'ff 25 2a 98 20 00\n'
p1370
S'.plt:0000000000401980\n'
p1371
tp1372
sS'error'
p1373
(S'\n__stdcall error()\n'
p1374
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060b1c8)();\u000a  return;\u000a}\u000a\u000a
p1375
S'JMP qword ptr [0x0060b1c8]\n'
p1376
S'ff 25 12 98 20 00\n'
p1377
S'.plt:00000000004019b0\n'
p1378
tp1379
sS'strcaseeq6'
p1380
(S'\n__stdcall strcaseeq6()\n'
p1381
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00405612\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405619\nJMP 0x0040562e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040562e\nTEST BPL,BPL\nJZ 0x00405629\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00405640\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1383
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 f1 12 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1384
S'.text:00000000004055f0\n.text:00000000004055f1\n.text:00000000004055f2\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055f8\n.text:00000000004055fa\n.text:00000000004055ff\n.text:0000000000405603\n.text:0000000000405605\n.text:0000000000405607\n.text:000000000040560a\n.text:000000000040560c\n.text:000000000040560e\n.text:0000000000405610\n.text:0000000000405612\n.text:0000000000405614\n.text:0000000000405617\n.text:0000000000405619\n.text:000000000040561c\n.text:000000000040561e\n.text:0000000000405621\n.text:0000000000405625\n.text:0000000000405626\n.text:0000000000405627\n.text:0000000000405629\n.text:000000000040562e\n.text:0000000000405632\n.text:0000000000405633\n.text:0000000000405634\n'
p1385
tp1386
sS'strcaseeq5'
p1387
(S'\n__stdcall strcaseeq5()\n'
p1388
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004055c6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004055cd\nJMP 0x004055e4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004055e4\nTEST BPL,BPL\nJZ 0x004055df\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004055f0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1390
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 3d 13 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1391
S'.text:00000000004055a0\n.text:00000000004055a1\n.text:00000000004055a3\n.text:00000000004055a4\n.text:00000000004055a7\n.text:00000000004055a9\n.text:00000000004055ac\n.text:00000000004055ae\n.text:00000000004055b3\n.text:00000000004055b7\n.text:00000000004055b9\n.text:00000000004055bb\n.text:00000000004055be\n.text:00000000004055c0\n.text:00000000004055c2\n.text:00000000004055c4\n.text:00000000004055c6\n.text:00000000004055c8\n.text:00000000004055cb\n.text:00000000004055cd\n.text:00000000004055d0\n.text:00000000004055d2\n.text:00000000004055d6\n.text:00000000004055d9\n.text:00000000004055da\n.text:00000000004055dc\n.text:00000000004055dd\n.text:00000000004055df\n.text:00000000004055e4\n.text:00000000004055e5\n.text:00000000004055e7\n.text:00000000004055e8\n'
p1392
tp1393
sS'check_for_offset'
p1394
(S'\n__stdcall check_for_offset(control * p, char * str, char * num)\n'
p1395
V\u000avoid check_for_offset(control *p,char *str,char *num)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  \u000a  sVar1 = xstrtoimax(num,(char **)0x0,(intmax_t *)0xa,(char *)p);\u000a  if (sVar1 != LONGINT_OK) {\u000a    uVar2 = dcgettext(0,"%s: integer expected after delimiter",5);\u000a    pcVar3 = quote(str);\u000a    error(1,0,uVar2,pcVar3);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RAX,RDX\nMOV R14,RSI\nMOV RCX,RDI\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x4082d9\nMOV RDI,RAX\nCALL 0x00405ed0\nTEST EAX,EAX\nJZ 0x00402e9d\nXOR EDI,EDI\nMOV ESI,0x407923\nMOV EDX,0x5\nCALL 0x00401780\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00405270\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004019b0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1397
S'41 56\n53\n50\n48 89 d0\n49 89 f6\n48 89 f9\n31 f6\nba 0a 00 00 00\n41 b8 d9 82 40 00\n48 89 c7\ne8 6e 30 00 00\n85 c0\n74 37\n31 ff\nbe 23 79 40 00\nba 05 00 00 00\ne8 09 e9 ff ff\n48 89 c3\n4c 89 f7\ne8 ee 23 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 13 eb ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1398
S'.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e43\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4a\n.text:0000000000402e4d\n.text:0000000000402e4f\n.text:0000000000402e54\n.text:0000000000402e5a\n.text:0000000000402e5d\n.text:0000000000402e62\n.text:0000000000402e64\n.text:0000000000402e66\n.text:0000000000402e68\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e77\n.text:0000000000402e7a\n.text:0000000000402e7d\n.text:0000000000402e82\n.text:0000000000402e85\n.text:0000000000402e8a\n.text:0000000000402e8c\n.text:0000000000402e8e\n.text:0000000000402e91\n.text:0000000000402e95\n.text:0000000000402e96\n.text:0000000000402e98\n.text:0000000000402e9d\n.text:0000000000402ea1\n.text:0000000000402ea2\n.text:0000000000402ea4\n'
p1399
tp1400
sS'strcaseeq7'
p1401
(S'\n__stdcall strcaseeq7()\n'
p1402
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1403
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00405662\nTEST ECX,0xffffffdf\nJNZ 0x00405666\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040566a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1404
S'53\n48 89 fb\n31 ff\ne8 a5 12 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1405
S'.text:0000000000405640\n.text:0000000000405641\n.text:0000000000405644\n.text:0000000000405646\n.text:000000000040564b\n.text:000000000040564f\n.text:0000000000405651\n.text:0000000000405653\n.text:0000000000405659\n.text:000000000040565b\n.text:0000000000405660\n.text:0000000000405661\n.text:0000000000405662\n.text:0000000000405664\n.text:0000000000405666\n.text:0000000000405668\n.text:0000000000405669\n.text:000000000040566a\n.text:000000000040566f\n.text:0000000000405670\n'
p1406
tp1407
sS'process_line_count'
p1408
(S'\n__stdcall process_line_count(control * p, uintmax_t repetition)\n'
p1409
V\u000avoid process_line_count(control *p,uintmax_t repetition)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  _Bool _Var2;\u000a  ulong uVar3;\u000a  cstring *line;\u000a  \u000a  uVar1 = p->lines_required;\u000a  create_output_file();\u000a  _Var2 = no_more_lines();\u000a  if ((_Var2 != false) && (suppress_matched == 1)) goto LAB_004030ca;\u000a  uVar3 = get_first_line_in_buffer();\u000a  while (uVar3 < uVar1 * (repetition + 1)) {\u000a    line = remove_line();\u000a    if (line == (cstring *)0x0) goto LAB_004030ca;\u000a    uVar3 = uVar3 + 1;\u000a    save_line_to_file(line);\u000a  }\u000a  while( true ) {\u000a    close_output_file();\u000a    if (suppress_matched == 1) {\u000a      remove_line();\u000a    }\u000a    _Var2 = no_more_lines();\u000a    if ((_Var2 == false) || (suppress_matched != 0)) break;\u000aLAB_004030ca:\u000a    handle_line_error(p,repetition);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1410
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x8]\nCALL 0x00403110\nCALL 0x00403a60\nTEST AL,AL\nJZ 0x00403099\nCMP byte ptr [0x0060b34a],0x1\nJZ 0x004030ca\nLEA RAX,[R14 + 0x1]\nIMUL R12,RAX\nCALL 0x00403a10\nMOV RBX,RAX\nCMP RBX,R12\nJC 0x004030c0\nJMP 0x004030d5\nINC RBX\nMOV RDI,RAX\nCALL 0x00403470\nCMP RBX,R12\nJNC 0x004030d5\nCALL 0x00403210\nTEST RAX,RAX\nJNZ 0x004030b0\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00403a80\nCALL 0x004027b0\nCMP byte ptr [0x0060b34a],0x1\nJNZ 0x004030e8\nCALL 0x00403210\nCALL 0x00403a60\nTEST AL,AL\nJZ 0x004030fb\nMOV AL,byte ptr [0x0060b34a]\nTEST AL,AL\nJZ 0x004030ca\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1411
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n49 89 ff\n4d 8b 67 08\ne8 89 00 00 00\ne8 d4 09 00 00\n84 c0\n74 09\n80 3d b3 82 20 00 01\n74 31\n49 8d 46 01\n4c 0f af e0\ne8 6a 09 00 00\n48 89 c3\n4c 39 e3\n72 12\neb 25\n48 ff c3\n48 89 c7\ne8 b5 03 00 00\n4c 39 e3\n73 15\ne8 4b 01 00 00\n48 85 c0\n75 e6\n4c 89 ff\n4c 89 f6\ne8 ab 09 00 00\ne8 d6 f6 ff ff\n80 3d 69 82 20 00 01\n75 05\ne8 28 01 00 00\ne8 73 09 00 00\n84 c0\n74 0a\n8a 05 53 82 20 00\n84 c0\n74 cf\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1412
S'.text:0000000000403070\n.text:0000000000403072\n.text:0000000000403074\n.text:0000000000403076\n.text:0000000000403077\n.text:0000000000403078\n.text:000000000040307b\n.text:000000000040307e\n.text:0000000000403082\n.text:0000000000403087\n.text:000000000040308c\n.text:000000000040308e\n.text:0000000000403090\n.text:0000000000403097\n.text:0000000000403099\n.text:000000000040309d\n.text:00000000004030a1\n.text:00000000004030a6\n.text:00000000004030a9\n.text:00000000004030ac\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b3\n.text:00000000004030b6\n.text:00000000004030bb\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c5\n.text:00000000004030c8\n.text:00000000004030ca\n.text:00000000004030cd\n.text:00000000004030d0\n.text:00000000004030d5\n.text:00000000004030da\n.text:00000000004030e1\n.text:00000000004030e3\n.text:00000000004030e8\n.text:00000000004030ed\n.text:00000000004030ef\n.text:00000000004030f1\n.text:00000000004030f7\n.text:00000000004030f9\n.text:00000000004030fb\n.text:00000000004030ff\n.text:0000000000403100\n.text:0000000000403102\n.text:0000000000403104\n.text:0000000000403106\n'
p1413
tp1414
sS'emit_mandatory_arg_note'
p1415
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1416
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1417
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407a72\nMOV EDX,0x5\nCALL 0x00401780\nMOV RSI,qword ptr [0x0060b2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401880\n'
p1418
S'50\n31 ff\nbe 72 7a 40 00\nba 05 00 00 00\ne8 5e f1 ff ff\n48 8b 35 bf 8c 20 00\n48 89 c7\n58\ne9 4e f2 ff ff\n'
p1419
S'.text:0000000000402610\n.text:0000000000402611\n.text:0000000000402613\n.text:0000000000402618\n.text:000000000040261d\n.text:0000000000402622\n.text:0000000000402629\n.text:000000000040262c\n.text:000000000040262d\n'
p1420
tp1421
sS'strcaseeq0'
p1422
(S'\n__stdcall strcaseeq0()\n'
p1423
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00405375\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040537c\nJMP 0x004053b0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004053b0\nTEST BPL,BPL\nJZ 0x004053ab\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004053c0\nJMP 0x004053b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 8d 15 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:0000000000405340\n.text:0000000000405341\n.text:0000000000405343\n.text:0000000000405345\n.text:0000000000405347\n.text:0000000000405349\n.text:000000000040534a\n.text:000000000040534b\n.text:000000000040534e\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405357\n.text:0000000000405359\n.text:000000000040535c\n.text:000000000040535e\n.text:0000000000405363\n.text:0000000000405366\n.text:0000000000405368\n.text:000000000040536a\n.text:000000000040536d\n.text:000000000040536f\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405375\n.text:0000000000405377\n.text:000000000040537a\n.text:000000000040537c\n.text:000000000040537f\n.text:0000000000405381\n.text:0000000000405385\n.text:000000000040538a\n.text:000000000040538d\n.text:0000000000405391\n.text:0000000000405395\n.text:0000000000405399\n.text:000000000040539d\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a9\n.text:00000000004053ab\n.text:00000000004053b0\n.text:00000000004053b4\n.text:00000000004053b5\n.text:00000000004053b7\n.text:00000000004053b9\n.text:00000000004053bb\n.text:00000000004053bd\n.text:00000000004053be\n'
p1427
tp1428
sS'new_line_control'
p1429
(S'\n__stdcall new_line_control()\n'
p1430
V\u000aline * new_line_control(void)\u000a\u000a{\u000a  line *p;\u000a  \u000a  p = (line *)xmalloc(0x520);\u000a  p->next = (line *)0x0;\u000a  clear_line_control(p);\u000a  return p;\u000a}\u000a\u000a
p1431
S'PUSH RBX\nMOV EDI,0x520\nCALL 0x00405c40\nMOV RBX,RAX\nMOV qword ptr [0x518 + RBX],0x0\nMOV RDI,RBX\nCALL 0x00403a00\nMOV RAX,RBX\nPOP RBX\nRET\n'
p1432
S'53\nbf 20 05 00 00\ne8 65 22 00 00\n48 89 c3\n48 c7 83 18 05 00 00 00 00 00 00\n48 89 df\ne8 0f 00 00 00\n48 89 d8\n5b\nc3\n'
p1433
S'.text:00000000004039d0\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039db\n.text:00000000004039de\n.text:00000000004039e9\n.text:00000000004039ec\n.text:00000000004039f1\n.text:00000000004039f4\n.text:00000000004039f5\n'
p1434
tp1435
sS'strcaseeq2'
p1436
(S'\n__stdcall strcaseeq2()\n'
p1437
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00405486\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040548d\nJMP 0x004054ba\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004054ba\nTEST BPL,BPL\nJZ 0x004054b5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004054d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1439
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 7d 14 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1440
S'.text:0000000000405450\n.text:0000000000405451\n.text:0000000000405453\n.text:0000000000405455\n.text:0000000000405457\n.text:0000000000405459\n.text:000000000040545a\n.text:000000000040545b\n.text:000000000040545e\n.text:0000000000405461\n.text:0000000000405464\n.text:0000000000405467\n.text:0000000000405469\n.text:000000000040546c\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405477\n.text:0000000000405479\n.text:000000000040547b\n.text:000000000040547e\n.text:0000000000405480\n.text:0000000000405482\n.text:0000000000405484\n.text:0000000000405486\n.text:0000000000405488\n.text:000000000040548b\n.text:000000000040548d\n.text:0000000000405490\n.text:0000000000405492\n.text:0000000000405496\n.text:000000000040549a\n.text:000000000040549e\n.text:00000000004054a2\n.text:00000000004054a5\n.text:00000000004054a9\n.text:00000000004054aa\n.text:00000000004054ac\n.text:00000000004054ae\n.text:00000000004054b0\n.text:00000000004054b2\n.text:00000000004054b3\n.text:00000000004054b5\n.text:00000000004054ba\n.text:00000000004054be\n.text:00000000004054bf\n.text:00000000004054c1\n.text:00000000004054c3\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054c8\n'
p1441
tp1442
sS'strcaseeq1'
p1443
(S'\n__stdcall strcaseeq1()\n'
p1444
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1445
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004053fd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405404\nJMP 0x00405437\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405437\nTEST BPL,BPL\nJZ 0x00405432\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405450\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1446
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 06 15 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1447
S'.text:00000000004053c0\n.text:00000000004053c1\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053ca\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d3\n.text:00000000004053d6\n.text:00000000004053d9\n.text:00000000004053db\n.text:00000000004053de\n.text:00000000004053e3\n.text:00000000004053e5\n.text:00000000004053ea\n.text:00000000004053ee\n.text:00000000004053f0\n.text:00000000004053f2\n.text:00000000004053f5\n.text:00000000004053f7\n.text:00000000004053f9\n.text:00000000004053fb\n.text:00000000004053fd\n.text:00000000004053ff\n.text:0000000000405402\n.text:0000000000405404\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540d\n.text:0000000000405411\n.text:0000000000405415\n.text:000000000040541b\n.text:000000000040541f\n.text:0000000000405422\n.text:0000000000405426\n.text:0000000000405427\n.text:0000000000405429\n.text:000000000040542b\n.text:000000000040542d\n.text:000000000040542f\n.text:0000000000405430\n.text:0000000000405432\n.text:0000000000405437\n.text:000000000040543b\n.text:000000000040543c\n.text:000000000040543e\n.text:0000000000405440\n.text:0000000000405442\n.text:0000000000405444\n.text:0000000000405445\n'
p1448
tp1449
sS'strcaseeq4'
p1450
(S'\n__stdcall strcaseeq4()\n'
p1451
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1452
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040556c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405573\nJMP 0x00405594\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405594\nTEST BPL,BPL\nJZ 0x0040558f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004055a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1453
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 97 13 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1454
S'.text:0000000000405540\n.text:0000000000405541\n.text:0000000000405543\n.text:0000000000405545\n.text:0000000000405546\n.text:0000000000405547\n.text:000000000040554a\n.text:000000000040554d\n.text:000000000040554f\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405559\n.text:000000000040555d\n.text:000000000040555f\n.text:0000000000405561\n.text:0000000000405564\n.text:0000000000405566\n.text:0000000000405568\n.text:000000000040556a\n.text:000000000040556c\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405576\n.text:0000000000405578\n.text:000000000040557c\n.text:0000000000405580\n.text:0000000000405583\n.text:0000000000405587\n.text:0000000000405588\n.text:000000000040558a\n.text:000000000040558c\n.text:000000000040558d\n.text:000000000040558f\n.text:0000000000405594\n.text:0000000000405598\n.text:0000000000405599\n.text:000000000040559b\n.text:000000000040559d\n.text:000000000040559e\n'
p1455
tp1456
sS'strcaseeq3'
p1457
(S'\n__stdcall strcaseeq3()\n'
p1458
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004068f0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00405500\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405507\nJMP 0x0040552a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040552a\nTEST BPL,BPL\nJZ 0x00405525\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405540\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1460
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 03 14 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1461
S'.text:00000000004054d0\n.text:00000000004054d1\n.text:00000000004054d3\n.text:00000000004054d5\n.text:00000000004054d7\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e1\n.text:00000000004054e3\n.text:00000000004054e6\n.text:00000000004054e8\n.text:00000000004054ed\n.text:00000000004054f1\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054f8\n.text:00000000004054fa\n.text:00000000004054fc\n.text:00000000004054fe\n.text:0000000000405500\n.text:0000000000405502\n.text:0000000000405505\n.text:0000000000405507\n.text:000000000040550a\n.text:000000000040550c\n.text:0000000000405510\n.text:0000000000405514\n.text:0000000000405518\n.text:000000000040551b\n.text:000000000040551c\n.text:000000000040551e\n.text:0000000000405520\n.text:0000000000405522\n.text:0000000000405523\n.text:0000000000405525\n.text:000000000040552a\n.text:000000000040552b\n.text:000000000040552d\n.text:000000000040552f\n.text:0000000000405531\n.text:0000000000405532\n'
p1462
tp1463
sS'register_tm_clones'
p1464
(S'\n__stdcall register_tm_clones()\n'
p1465
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b43) */\u000a/* WARNING: Removing unreachable block (ram,0x00401b4d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1466
S'MOV ESI,0x60b2c8\nPUSH RBP\nSUB RSI,0x60b2c8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401b58\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b58\nPOP RBP\nMOV EDI,0x60b2c8\nJMP RAX\nPOP RBP\nRET\n'
p1467
S'be c8 b2 60 00\n55\n48 81 ee c8 b2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf c8 b2 60 00\nff e0\n5d\nc3\n'
p1468
S'.text:0000000000401b20\n.text:0000000000401b25\n.text:0000000000401b26\n.text:0000000000401b2d\n.text:0000000000401b31\n.text:0000000000401b34\n.text:0000000000401b37\n.text:0000000000401b3b\n.text:0000000000401b3e\n.text:0000000000401b41\n.text:0000000000401b43\n.text:0000000000401b48\n.text:0000000000401b4b\n.text:0000000000401b4d\n.text:0000000000401b4e\n.text:0000000000401b53\n.text:0000000000401b58\n.text:0000000000401b59\n'
p1469
tp1470
sS'c_islower'
p1471
(S'\n__stdcall c_islower()\n'
p1472
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1473
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1474
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1475
S'.text:0000000000406890\n.text:0000000000406893\n.text:0000000000406896\n.text:0000000000406899\n'
p1476
tp1477
sS'fwrite'
p1478
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1479
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060b208)();\u000a  return sVar1;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x0060b208]\n'
p1481
S'ff 25 d2 97 20 00\n'
p1482
S'.plt:0000000000401a30\n'
p1483
tp1484
sS'read_input'
p1485
(S'\n__stdcall read_input(char * dest, size_t max_n_bytes)\n'
p1486
V\u000asize_t read_input(char *dest,size_t max_n_bytes)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  \u000a  if (max_n_bytes != 0) {\u000a    sVar2 = safe_read((void *)0x0,(size_t)dest);\u000a    if (sVar2 != 0) {\u000a      if (sVar2 != 0xffffffffffffffff) {\u000a        return sVar2;\u000a      }\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"read error",5);\u000a      error(0,(ulong)uVar1,uVar4,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      cleanup_fatal();\u000a    }\u000a    have_read_eof = 1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1487
S'PUSH RBX\nMOV RAX,RSI\nMOV RCX,RDI\nTEST RAX,RAX\nJZ 0x004037b9\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nCALL 0x00405680\nTEST RAX,RAX\nJZ 0x004037b2\nCMP RAX,-0x1\nJNZ 0x004037bb\nCALL 0x004016c0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4071c0\nMOV EDX,0x5\nCALL 0x00401780\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004019b0\nCALL 0x00401be0\nMOV byte ptr [0x0060b438],0x1\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1488
S'53\n48 89 f0\n48 89 f9\n48 85 c0\n74 4d\n31 ff\n48 89 ce\n48 89 c2\ne8 07 1f 00 00\n48 85 c0\n74 34\n48 83 f8 ff\n75 37\ne8 37 df ff ff\n8b 18\n31 ff\nbe c0 71 40 00\nba 05 00 00 00\ne8 e4 df ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 03 e2 ff ff\ne8 2e e4 ff ff\nc6 05 7f 7c 20 00 01\n31 c0\n5b\nc3\n'
p1489
S'.text:0000000000403760\n.text:0000000000403761\n.text:0000000000403764\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376c\n.text:000000000040376e\n.text:0000000000403771\n.text:0000000000403774\n.text:0000000000403779\n.text:000000000040377c\n.text:000000000040377e\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378b\n.text:000000000040378d\n.text:0000000000403792\n.text:0000000000403797\n.text:000000000040379c\n.text:000000000040379f\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b9\n.text:00000000004037bb\n.text:00000000004037bc\n'
p1490
tp1491
sS'unlink'
p1492
(S'\n__stdcall unlink(char * __name)\n'
p1493
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_0060b058)();\u000a  return iVar1;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x0060b058]\n'
p1495
S'ff 25 82 99 20 00\n'
p1496
S'.plt:00000000004016d0\n'
p1497
tp1498
sS'__do_global_dtors_aux'
p1499
(S'\n__stdcall __do_global_dtors_aux()\n'
p1500
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1501
S'CMP byte ptr [0x0060b328],0x0\nJNZ 0x00401b7a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401ae0\nPOP RBP\nMOV byte ptr [0x0060b328],0x1\nRET\n'
p1502
S'80 3d c1 97 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ae 97 20 00 01\nf3 c3\n'
p1503
S'.text:0000000000401b60\n.text:0000000000401b67\n.text:0000000000401b69\n.text:0000000000401b6a\n.text:0000000000401b6d\n.text:0000000000401b72\n.text:0000000000401b73\n.text:0000000000401b7a\n'
p1504
tp1505
sS'c_isprint'
p1506
(S'\n__stdcall c_isprint()\n'
p1507
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1508
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1509
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1510
S'.text:00000000004068a0\n.text:00000000004068a3\n.text:00000000004068a6\n.text:00000000004068a9\n'
p1511
tp1512
sS'_fini'
p1513
(S'\n__stdcall _fini()\n'
p1514
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1515
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1516
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1517
S'.fini:0000000000406d8c\n.fini:0000000000406d90\n.fini:0000000000406d94\n'
p1518
tp1519
sS'rpl_fcntl'
p1520
(S'\n__stdcall rpl_fcntl()\n'
p1521
V\u000a/* WARNING: Removing unreachable block (ram,0x0040662b) */\u000a/* WARNING: Removing unreachable block (ram,0x00406694) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00406639 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1522
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004065bb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00406616\nCMP EAX,0x28\nJA 0x0040662b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00406639\nCMP EAX,0x28\nJA 0x00406694\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004066a2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060b5b0],0x0\nJS 0x004066b3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401740\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00406684\nCALL 0x004016c0\nCMP dword ptr [RAX],0x16\nJNZ 0x00406684\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00406570\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00406716\nMOV dword ptr [0x0060b5b0],R15D\nTEST EBP,EBP\nJNS 0x004066c7\nJMP 0x00406716\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401740\nMOV EBP,EAX\nJMP 0x00406716\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00406570\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00406716\nCMP dword ptr [0x0060b5b0],-0x1\nJNZ 0x00406716\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401740\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004066fc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401740\nCMP EAX,-0x1\nJNZ 0x00406716\nCALL 0x004016c0\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401840\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1523
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 6e 4f 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 f0 b0 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 5f b0 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 25 4f 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 91 b0 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d e2 4e 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 62 b0 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 49 b0 ff ff\n83 f8 ff\n75 1a\ne8 bf af ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 32 b1 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1524
S'.text:0000000000406570\n.text:0000000000406571\n.text:0000000000406573\n.text:0000000000406575\n.text:0000000000406576\n.text:000000000040657d\n.text:0000000000406580\n.text:0000000000406582\n.text:0000000000406584\n.text:0000000000406589\n.text:000000000040658e\n.text:0000000000406593\n.text:000000000040659b\n.text:00000000004065a3\n.text:00000000004065ab\n.text:00000000004065b3\n.text:00000000004065bb\n.text:00000000004065c0\n.text:00000000004065c5\n.text:00000000004065ca\n.text:00000000004065cf\n.text:00000000004065d4\n.text:00000000004065d9\n.text:00000000004065e1\n.text:00000000004065e6\n.text:00000000004065ee\n.text:00000000004065f5\n.text:00000000004065f9\n.text:00000000004065ff\n.text:0000000000406601\n.text:0000000000406604\n.text:0000000000406606\n.text:000000000040660b\n.text:000000000040660e\n.text:0000000000406611\n.text:0000000000406614\n.text:0000000000406616\n.text:0000000000406619\n.text:000000000040661b\n.text:000000000040661e\n.text:0000000000406623\n.text:0000000000406626\n.text:0000000000406629\n.text:000000000040662b\n.text:0000000000406630\n.text:0000000000406634\n.text:0000000000406639\n.text:000000000040663b\n.text:0000000000406642\n.text:0000000000406644\n.text:0000000000406646\n.text:0000000000406649\n.text:000000000040664b\n.text:0000000000406650\n.text:0000000000406652\n.text:0000000000406658\n.text:000000000040665a\n.text:000000000040665c\n.text:0000000000406661\n.text:0000000000406664\n.text:0000000000406666\n.text:0000000000406668\n.text:000000000040666a\n.text:000000000040666d\n.text:000000000040666f\n.text:0000000000406674\n.text:0000000000406676\n.text:000000000040667c\n.text:000000000040667e\n.text:0000000000406684\n.text:000000000040668b\n.text:000000000040668d\n.text:000000000040668f\n.text:0000000000406694\n.text:0000000000406699\n.text:000000000040669d\n.text:00000000004066a2\n.text:00000000004066a5\n.text:00000000004066a7\n.text:00000000004066aa\n.text:00000000004066af\n.text:00000000004066b1\n.text:00000000004066b3\n.text:00000000004066b5\n.text:00000000004066b7\n.text:00000000004066ba\n.text:00000000004066bc\n.text:00000000004066c1\n.text:00000000004066c3\n.text:00000000004066c5\n.text:00000000004066c7\n.text:00000000004066ce\n.text:00000000004066d0\n.text:00000000004066d5\n.text:00000000004066d7\n.text:00000000004066d9\n.text:00000000004066de\n.text:00000000004066e0\n.text:00000000004066e2\n.text:00000000004066e4\n.text:00000000004066e7\n.text:00000000004066ec\n.text:00000000004066ee\n.text:00000000004066f0\n.text:00000000004066f2\n.text:00000000004066f7\n.text:00000000004066fa\n.text:00000000004066fc\n.text:0000000000406701\n.text:0000000000406704\n.text:0000000000406707\n.text:0000000000406709\n.text:000000000040670e\n.text:0000000000406711\n.text:0000000000406716\n.text:0000000000406718\n.text:000000000040671f\n.text:0000000000406720\n.text:0000000000406722\n.text:0000000000406724\n.text:0000000000406725\n'
p1525
tp1526
sS'__fpending'
p1527
(S'\n__stdcall __fpending()\n'
p1528
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060b078)();\u000a  return;\u000a}\u000a\u000a
p1529
S'JMP qword ptr [0x0060b078]\n'
p1530
S'ff 25 62 99 20 00\n'
p1531
S'.plt:0000000000401710\n'
p1532
tp1533
s.