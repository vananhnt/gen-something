(dp0
S'install_signal_handlers'
p1
(S'\n__stdcall install_signal_handlers()\n'
p2
V\u000avoid install_signal_handlers(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  code *local_a0;\u000a  undefined4 local_98;\u000a  undefined4 uStack148;\u000a  undefined4 uStack144;\u000a  undefined4 uStack140;\u000a  undefined4 local_88;\u000a  undefined4 uStack132;\u000a  undefined4 uStack128;\u000a  undefined4 uStack124;\u000a  undefined4 local_78;\u000a  undefined4 uStack116;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  undefined4 local_38;\u000a  undefined4 uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  undefined4 local_28;\u000a  undefined4 uStack36;\u000a  undefined4 uStack32;\u000a  undefined4 uStack28;\u000a  undefined4 local_18;\u000a  \u000a  pcVar2 = getenv("POSIXLY_CORRECT");\u000a  sigemptyset((sigset_t *)&caught_signals);\u000a  if (pcVar2 == (char *)0x0) {\u000a    sigaddset((sigset_t *)&caught_signals,10);\u000a  }\u000a  sigaction(2,(sigaction *)0x0,(sigaction *)&local_a0);\u000a  if (local_a0 != (code *)0x1) {\u000a    sigaddset((sigset_t *)&caught_signals,2);\u000a  }\u000a  local_28 = (undefined4)caught_signals.__val[14];\u000a  uStack36 = caught_signals.__val[14]._4_4_;\u000a  uStack32 = (undefined4)caught_signals.__val[15];\u000a  uStack28 = caught_signals.__val[15]._4_4_;\u000a  local_38 = (undefined4)caught_signals.__val[12];\u000a  uStack52 = caught_signals.__val[12]._4_4_;\u000a  uStack48 = (undefined4)caught_signals.__val[13];\u000a  uStack44 = caught_signals.__val[13]._4_4_;\u000a  local_48 = (undefined4)caught_signals.__val[10];\u000a  uStack68 = caught_signals.__val[10]._4_4_;\u000a  uStack64 = (undefined4)caught_signals.__val[11];\u000a  uStack60 = caught_signals.__val[11]._4_4_;\u000a  local_58 = (undefined4)caught_signals.__val[8];\u000a  uStack84 = caught_signals.__val[8]._4_4_;\u000a  uStack80 = (undefined4)caught_signals.__val[9];\u000a  uStack76 = caught_signals.__val[9]._4_4_;\u000a  local_68 = (undefined4)caught_signals.__val[6];\u000a  uStack100 = caught_signals.__val[6]._4_4_;\u000a  uStack96 = (undefined4)caught_signals.__val[7];\u000a  uStack92 = caught_signals.__val[7]._4_4_;\u000a  local_78 = (undefined4)caught_signals.__val[4];\u000a  uStack116 = caught_signals.__val[4]._4_4_;\u000a  uStack112 = (undefined4)caught_signals.__val[5];\u000a  uStack108 = caught_signals.__val[5]._4_4_;\u000a  local_88 = (undefined4)caught_signals.__val[2];\u000a  uStack132 = caught_signals.__val[2]._4_4_;\u000a  uStack128 = (undefined4)caught_signals.__val[3];\u000a  uStack124 = caught_signals.__val[3]._4_4_;\u000a  local_98 = (undefined4)caught_signals.__val[0];\u000a  uStack148 = caught_signals.__val[0]._4_4_;\u000a  uStack144 = (undefined4)caught_signals.__val[1];\u000a  uStack140 = caught_signals.__val[1]._4_4_;\u000a  iVar1 = sigismember((sigset_t *)&caught_signals,10);\u000a  if (iVar1 != 0) {\u000a    local_a0 = siginfo_handler;\u000a    local_18 = 0;\u000a    sigaction(10,(sigaction *)&local_a0,(sigaction *)0x0);\u000a  }\u000a  iVar1 = sigismember((sigset_t *)&caught_signals,2);\u000a  if (iVar1 != 0) {\u000a    local_a0 = interrupt_handler;\u000a    local_18 = 0xc0000000;\u000a    sigaction(2,(sigaction *)&local_a0,(sigaction *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH RBX\nSUB RSP,0xa0\nMOV EDI,0x40a02b\nCALL 0x004018b0\nMOV RBX,RAX\nMOV EDI,0x60e508\nCALL 0x00401b80\nTEST RBX,RBX\nJNZ 0x00402873\nMOV EDI,0x60e508\nMOV ESI,0xa\nCALL 0x00401d60\nLEA RDX,[RSP + 0x8]\nMOV EDI,0x2\nXOR ESI,ESI\nCALL 0x00401980\nCMP qword ptr [RSP + 0x8],0x1\nJZ 0x0040289b\nMOV EDI,0x60e508\nMOV ESI,0x2\nCALL 0x00401d60\nMOVUPS XMM0,xmmword ptr [0x0060e578]\nMOVUPS xmmword ptr [0x80 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e568]\nMOVUPS xmmword ptr [RSP + 0x70],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e558]\nMOVUPS xmmword ptr [RSP + 0x60],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e548]\nMOVUPS xmmword ptr [RSP + 0x50],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e538]\nMOVUPS xmmword ptr [RSP + 0x40],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e528]\nMOVUPS xmmword ptr [RSP + 0x30],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e518]\nMOVUPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e508]\nMOVUPS xmmword ptr [RSP + 0x10],XMM0\nMOV EDI,0x60e508\nMOV ESI,0xa\nCALL 0x00401d00\nTEST EAX,EAX\nJZ 0x00402936\nMOV qword ptr [RSP + 0x8],0x403d90\nMOV dword ptr [0x90 + RSP],0x0\nLEA RSI,[RSP + 0x8]\nMOV EDI,0xa\nXOR EDX,EDX\nCALL 0x00401980\nMOV EDI,0x60e508\nMOV ESI,0x2\nCALL 0x00401d00\nTEST EAX,EAX\nJZ 0x0040296e\nMOV qword ptr [RSP + 0x8],0x403da0\nMOV dword ptr [0x90 + RSP],0xc0000000\nLEA RSI,[RSP + 0x8]\nMOV EDI,0x2\nXOR EDX,EDX\nCALL 0x00401980\nADD RSP,0xa0\nPOP RBX\nRET\n'
p4
S'53\n48 81 ec a0 00 00 00\nbf 2b a0 40 00\ne8 5e f0 ff ff\n48 89 c3\nbf 08 e5 60 00\ne8 21 f3 ff ff\n48 85 db\n75 0f\nbf 08 e5 60 00\nbe 0a 00 00 00\ne8 ed f4 ff ff\n48 8d 54 24 08\nbf 02 00 00 00\n31 f6\ne8 fc f0 ff ff\n48 83 7c 24 08 01\n74 0f\nbf 08 e5 60 00\nbe 02 00 00 00\ne8 c5 f4 ff ff\n0f 10 05 d6 bc 20 00\n0f 11 84 24 80 00 00 00\n0f 10 05 b7 bc 20 00\n0f 11 44 24 70\n0f 10 05 9b bc 20 00\n0f 11 44 24 60\n0f 10 05 7f bc 20 00\n0f 11 44 24 50\n0f 10 05 63 bc 20 00\n0f 11 44 24 40\n0f 10 05 47 bc 20 00\n0f 11 44 24 30\n0f 10 05 2b bc 20 00\n0f 11 44 24 20\n0f 10 05 0f bc 20 00\n0f 11 44 24 10\nbf 08 e5 60 00\nbe 0a 00 00 00\ne8 f3 f3 ff ff\n85 c0\n74 25\n48 c7 44 24 08 90 3d 40 00\nc7 84 24 90 00 00 00 00 00 00 00\n48 8d 74 24 08\nbf 0a 00 00 00\n31 d2\ne8 4a f0 ff ff\nbf 08 e5 60 00\nbe 02 00 00 00\ne8 bb f3 ff ff\n85 c0\n74 25\n48 c7 44 24 08 a0 3d 40 00\nc7 84 24 90 00 00 00 00 00 00 c0\n48 8d 74 24 08\nbf 02 00 00 00\n31 d2\ne8 12 f0 ff ff\n48 81 c4 a0 00 00 00\n5b\nc3\n'
p5
S'.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402848\n.text:000000000040284d\n.text:0000000000402852\n.text:0000000000402855\n.text:000000000040285a\n.text:000000000040285f\n.text:0000000000402862\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402873\n.text:0000000000402878\n.text:000000000040287d\n.text:000000000040287f\n.text:0000000000402884\n.text:000000000040288a\n.text:000000000040288c\n.text:0000000000402891\n.text:0000000000402896\n.text:000000000040289b\n.text:00000000004028a2\n.text:00000000004028aa\n.text:00000000004028b1\n.text:00000000004028b6\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d5\n.text:00000000004028da\n.text:00000000004028e1\n.text:00000000004028e6\n.text:00000000004028ed\n.text:00000000004028f2\n.text:00000000004028f9\n.text:00000000004028fe\n.text:0000000000402903\n.text:0000000000402908\n.text:000000000040290d\n.text:000000000040290f\n.text:0000000000402911\n.text:000000000040291a\n.text:0000000000402925\n.text:000000000040292a\n.text:000000000040292f\n.text:0000000000402931\n.text:0000000000402936\n.text:000000000040293b\n.text:0000000000402940\n.text:0000000000402945\n.text:0000000000402947\n.text:0000000000402949\n.text:0000000000402952\n.text:000000000040295d\n.text:0000000000402962\n.text:0000000000402967\n.text:0000000000402969\n.text:000000000040296e\n.text:0000000000402975\n.text:0000000000402976\n'
p6
tp7
sS'print_stats'
p8
(S'\n__stdcall print_stats()\n'
p9
V\u000avoid print_stats(void)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  undefined8 uVar2;\u000a  ulong uVar3;\u000a  \u000a  if (status_level != 1) {\u000a    if (0 < progress_len) {\u000a      fputc_unlocked(10,stderr);\u000a      progress_len = 0;\u000a    }\u000a    pFVar1 = stderr;\u000a    uVar2 = dcgettext(0,"%lu+%lu records in\u005cn%lu+%lu records out\u005cn",5);\u000a    __fprintf_chk(pFVar1,1,uVar2,r_full,r_partial,w_full,w_partial);\u000a    pFVar1 = stderr;\u000a    if (r_truncate != 0) {\u000a      uVar3 = select_plural(r_truncate);\u000a      uVar2 = dcngettext(0,"%lu truncated record\u005cn","%lu truncated records\u005cn",uVar3,5);\u000a      __fprintf_chk(pFVar1,1,uVar2,r_truncate);\u000a    }\u000a    if (status_level != 2) {\u000a      print_xfer_stats(0);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'CMP dword ptr [0x0060e2b0],0x1\nJZ 0x004042ea\nPUSH RBX\nSUB RSP,0x10\nCMP dword ptr [0x0060e5c8],0x0\nJLE 0x00404246\nMOV RSI,qword ptr [0x0060e380]\nMOV EDI,0xa\nCALL 0x00401b70\nMOV dword ptr [0x0060e5c8],0x0\nMOV RBX,qword ptr [0x0060e380]\nXOR EDI,EDI\nMOV ESI,0x40a269\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e5d0]\nMOV R8,qword ptr [0x0060e5d8]\nMOV R9,qword ptr [0x0060e5e0]\nMOV RAX,qword ptr [0x0060e5e8]\nMOV qword ptr [RSP],RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401d30\nMOV RDI,qword ptr [0x0060e5f0]\nTEST RDI,RDI\nJZ 0x004042db\nMOV RBX,qword ptr [0x0060e380]\nCALL 0x00404150\nXOR EDI,EDI\nMOV ESI,0x40a291\nMOV EDX,0x40a2a7\nMOV R8D,0x5\nMOV RCX,RAX\nCALL 0x00401cc0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e5f0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401d30\nCMP dword ptr [0x0060e2b0],0x2\nLEA RSP,[RSP + 0x10]\nPOP RBX\nJNZ 0x004042eb\nRET\nXOR EDI,EDI\nJMP 0x004042f0\n'
p11
S'83 3d 99 a0 20 00 01\n0f 84 cd 00 00 00\n53\n48 83 ec 10\n83 3d 9f a3 20 00 00\n7e 1b\n48 8b 35 4e a1 20 00\nbf 0a 00 00 00\ne8 34 d9 ff ff\nc7 05 82 a3 20 00 00 00 00 00\n48 8b 1d 33 a1 20 00\n31 ff\nbe 69 a2 40 00\nba 05 00 00 00\ne8 a2 d7 ff ff\n48 89 c2\n48 8b 0d 68 a3 20 00\n4c 8b 05 69 a3 20 00\n4c 8b 0d 6a a3 20 00\n48 8b 05 6b a3 20 00\n48 89 04 24\nbe 01 00 00 00\n31 c0\n48 89 df\ne8 a0 da ff ff\n48 8b 3d 59 a3 20 00\n48 85 ff\n74 3f\n48 8b 1d dd a0 20 00\ne8 a8 fe ff ff\n31 ff\nbe 91 a2 40 00\nba a7 a2 40 00\n41 b8 05 00 00 00\n48 89 c1\ne8 fe d9 ff ff\n48 89 c2\n48 8b 0d 24 a3 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\ne8 55 da ff ff\n83 3d ce 9f 20 00 02\n48 8d 64 24 10\n5b\n75 01\nc3\n31 ff\neb 01\n'
p12
S'.text:0000000000404210\n.text:0000000000404217\n.text:000000000040421d\n.text:000000000040421e\n.text:0000000000404222\n.text:0000000000404229\n.text:000000000040422b\n.text:0000000000404232\n.text:0000000000404237\n.text:000000000040423c\n.text:0000000000404246\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404254\n.text:0000000000404259\n.text:000000000040425e\n.text:0000000000404261\n.text:0000000000404268\n.text:000000000040426f\n.text:0000000000404276\n.text:000000000040427d\n.text:0000000000404281\n.text:0000000000404286\n.text:0000000000404288\n.text:000000000040428b\n.text:0000000000404290\n.text:0000000000404297\n.text:000000000040429a\n.text:000000000040429c\n.text:00000000004042a3\n.text:00000000004042a8\n.text:00000000004042aa\n.text:00000000004042af\n.text:00000000004042b4\n.text:00000000004042ba\n.text:00000000004042bd\n.text:00000000004042c2\n.text:00000000004042c5\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d3\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042e2\n.text:00000000004042e7\n.text:00000000004042e8\n.text:00000000004042ea\n.text:00000000004042eb\n.text:00000000004042ed\n'
p13
tp14
sS'ungetc'
p15
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060e1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060e1c8]\n'
p18
S'ff 25 c2 c5 20 00\n'
p19
S'.plt:0000000000401c00\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040b2fb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x407ae7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x407b68;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x407bfc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00407978\nMOV EDX,0x40b2e8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401d30\nJMP 0x0040798d\nMOV EDX,0x40b2f4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40b2fb\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b5d0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40b2ff\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401b30\nCMP R12,0x9\nJA 0x00407a16\nJMP qword ptr [0x40b298 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40b3ca\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40b509\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b3da\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40b3f1\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401d30\nXOR EDI,EDI\nMOV ESI,0x40b40d\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x18\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b42d\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x18\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b451\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x28\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b479\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x28\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b4a5\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nJMP 0x00407c87\nXOR EDI,EDI\nMOV ESI,0x40b4d5\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004018f0\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba e8 b2 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ba a3 ff ff\neb 15\nba f4 b2 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 a3 a3 ff ff\n31 ff\nbe fb b2 40 00\nba 05 00 00 00\ne8 62 a0 ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 b5 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 75 a3 ff ff\n31 ff\nbe ff b2 40 00\nba 05 00 00 00\ne8 34 a0 ff ff\n48 89 c7\n4c 89 f6\ne8 59 a1 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 98 b2 40 00\n31 ff\nbe ca b3 40 00\nba 05 00 00 00\ne8 0a a0 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a a3 ff ff\n31 ff\nbe 09 b5 40 00\nba 05 00 00 00\ne8 d9 9f ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d1 a2 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe da b3 40 00\nba 05 00 00 00\ne8 87 9f ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 93 a2 ff ff\n31 ff\nbe f1 b3 40 00\nba 05 00 00 00\ne8 52 9f ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a a2 ff ff\n31 ff\nbe 0d b4 40 00\nba 05 00 00 00\ne8 19 9f ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 24 a2 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 2d b4 40 00\nba 05 00 00 00\ne8 da 9e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 e2 a1 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 51 b4 40 00\nba 05 00 00 00\ne8 98 9e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 98 a1 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 79 b4 40 00\nba 05 00 00 00\ne8 4e 9e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4e a1 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe a5 b4 40 00\nba 05 00 00 00\ne8 04 9e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fc a0 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe d5 b4 40 00\nba 05 00 00 00\ne8 b5 9d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ad a0 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c 9c ff ff\n'
p26
S'.text:0000000000407940\n.text:0000000000407942\n.text:0000000000407944\n.text:0000000000407946\n.text:0000000000407947\n.text:0000000000407948\n.text:000000000040794b\n.text:000000000040794e\n.text:0000000000407951\n.text:0000000000407954\n.text:0000000000407957\n.text:000000000040795a\n.text:000000000040795f\n.text:0000000000407962\n.text:0000000000407964\n.text:0000000000407969\n.text:000000000040796b\n.text:000000000040796e\n.text:0000000000407971\n.text:0000000000407976\n.text:0000000000407978\n.text:000000000040797d\n.text:000000000040797f\n.text:0000000000407982\n.text:0000000000407985\n.text:0000000000407988\n.text:000000000040798d\n.text:000000000040798f\n.text:0000000000407994\n.text:0000000000407999\n.text:000000000040799e\n.text:00000000004079a1\n.text:00000000004079a6\n.text:00000000004079ab\n.text:00000000004079b1\n.text:00000000004079b3\n.text:00000000004079b6\n.text:00000000004079bb\n.text:00000000004079bd\n.text:00000000004079c2\n.text:00000000004079c7\n.text:00000000004079cc\n.text:00000000004079cf\n.text:00000000004079d2\n.text:00000000004079d7\n.text:00000000004079db\n.text:00000000004079dd\n.text:00000000004079e5\n.text:00000000004079e7\n.text:00000000004079ec\n.text:00000000004079f1\n.text:00000000004079f6\n.text:00000000004079f9\n.text:00000000004079fc\n.text:0000000000407a01\n.text:0000000000407a03\n.text:0000000000407a06\n.text:0000000000407a0a\n.text:0000000000407a0b\n.text:0000000000407a0d\n.text:0000000000407a0f\n.text:0000000000407a11\n.text:0000000000407a16\n.text:0000000000407a18\n.text:0000000000407a1d\n.text:0000000000407a22\n.text:0000000000407a27\n.text:0000000000407a2a\n.text:0000000000407a2d\n.text:0000000000407a31\n.text:0000000000407a35\n.text:0000000000407a3a\n.text:0000000000407a3f\n.text:0000000000407a42\n.text:0000000000407a46\n.text:0000000000407a4a\n.text:0000000000407a4e\n.text:0000000000407a52\n.text:0000000000407a56\n.text:0000000000407a5a\n.text:0000000000407a5f\n.text:0000000000407a63\n.text:0000000000407a68\n.text:0000000000407a6a\n.text:0000000000407a6f\n.text:0000000000407a74\n.text:0000000000407a79\n.text:0000000000407a7c\n.text:0000000000407a7f\n.text:0000000000407a83\n.text:0000000000407a88\n.text:0000000000407a8a\n.text:0000000000407a8d\n.text:0000000000407a91\n.text:0000000000407a92\n.text:0000000000407a94\n.text:0000000000407a96\n.text:0000000000407a98\n.text:0000000000407a9d\n.text:0000000000407a9f\n.text:0000000000407aa4\n.text:0000000000407aa9\n.text:0000000000407aae\n.text:0000000000407ab1\n.text:0000000000407ab4\n.text:0000000000407ab8\n.text:0000000000407abc\n.text:0000000000407ac1\n.text:0000000000407ac3\n.text:0000000000407ac6\n.text:0000000000407aca\n.text:0000000000407acb\n.text:0000000000407acd\n.text:0000000000407acf\n.text:0000000000407ad1\n.text:0000000000407ad6\n.text:0000000000407ad8\n.text:0000000000407add\n.text:0000000000407ae2\n.text:0000000000407ae7\n.text:0000000000407aea\n.text:0000000000407aed\n.text:0000000000407af1\n.text:0000000000407af5\n.text:0000000000407af9\n.text:0000000000407afe\n.text:0000000000407b00\n.text:0000000000407b03\n.text:0000000000407b07\n.text:0000000000407b0c\n.text:0000000000407b10\n.text:0000000000407b15\n.text:0000000000407b17\n.text:0000000000407b1c\n.text:0000000000407b21\n.text:0000000000407b26\n.text:0000000000407b29\n.text:0000000000407b2c\n.text:0000000000407b30\n.text:0000000000407b34\n.text:0000000000407b39\n.text:0000000000407b3e\n.text:0000000000407b41\n.text:0000000000407b45\n.text:0000000000407b49\n.text:0000000000407b4e\n.text:0000000000407b52\n.text:0000000000407b57\n.text:0000000000407b59\n.text:0000000000407b5e\n.text:0000000000407b63\n.text:0000000000407b68\n.text:0000000000407b6b\n.text:0000000000407b6e\n.text:0000000000407b72\n.text:0000000000407b76\n.text:0000000000407b7a\n.text:0000000000407b7f\n.text:0000000000407b84\n.text:0000000000407b87\n.text:0000000000407b8b\n.text:0000000000407b8f\n.text:0000000000407b93\n.text:0000000000407b98\n.text:0000000000407b9c\n.text:0000000000407ba1\n.text:0000000000407ba3\n.text:0000000000407ba8\n.text:0000000000407bad\n.text:0000000000407bb2\n.text:0000000000407bb5\n.text:0000000000407bb8\n.text:0000000000407bbc\n.text:0000000000407bc0\n.text:0000000000407bc5\n.text:0000000000407bca\n.text:0000000000407bcd\n.text:0000000000407bd1\n.text:0000000000407bd5\n.text:0000000000407bd9\n.text:0000000000407bdd\n.text:0000000000407be2\n.text:0000000000407be6\n.text:0000000000407beb\n.text:0000000000407bed\n.text:0000000000407bf2\n.text:0000000000407bf7\n.text:0000000000407bfc\n.text:0000000000407bff\n.text:0000000000407c02\n.text:0000000000407c06\n.text:0000000000407c0a\n.text:0000000000407c0e\n.text:0000000000407c13\n.text:0000000000407c18\n.text:0000000000407c1b\n.text:0000000000407c1f\n.text:0000000000407c23\n.text:0000000000407c27\n.text:0000000000407c2b\n.text:0000000000407c2f\n.text:0000000000407c34\n.text:0000000000407c38\n.text:0000000000407c3a\n.text:0000000000407c3c\n.text:0000000000407c41\n.text:0000000000407c46\n.text:0000000000407c4b\n.text:0000000000407c4e\n.text:0000000000407c51\n.text:0000000000407c55\n.text:0000000000407c59\n.text:0000000000407c5e\n.text:0000000000407c63\n.text:0000000000407c66\n.text:0000000000407c6a\n.text:0000000000407c6e\n.text:0000000000407c72\n.text:0000000000407c76\n.text:0000000000407c7a\n.text:0000000000407c7e\n.text:0000000000407c83\n.text:0000000000407c87\n.text:0000000000407c88\n.text:0000000000407c8a\n.text:0000000000407c8c\n.text:0000000000407c8e\n.text:0000000000407c8f\n'
p27
tp28
sS'strchr'
p29
(S'\n__stdcall strchr(char * __s, int __c)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060e0f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060e0f8]\n'
p32
S'ff 25 92 c6 20 00\n'
p33
S'.plt:0000000000401a60\n'
p34
tp35
sS'rpl_fclose'
p36
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p37
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00408559;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00408559:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401ba0\nTEST EAX,EAX\nJS 0x00408559\nMOV RDI,RBX\nCALL 0x00401c20\nTEST EAX,EAX\nJZ 0x00408527\nMOV RDI,RBX\nCALL 0x00401ba0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401a90\nCMP RAX,-0x1\nJZ 0x00408559\nMOV RDI,RBX\nCALL 0x00408730\nTEST EAX,EAX\nJZ 0x00408559\nCALL 0x00401900\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004019e0\nTEST EBP,EBP\nJZ 0x00408552\nCALL 0x00401900\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004019e0\n'
p39
S'55\n53\n50\n48 89 fb\ne8 a5 96 ff ff\n85 c0\n78 5a\n48 89 df\ne8 19 97 ff ff\n85 c0\n74 1c\n48 89 df\ne8 8d 96 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 6f 95 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 c8 93 ff ff\n8b 28\n48 89 df\ne8 9e 94 ff ff\n85 ed\n74 0c\ne8 b5 93 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 79 94 ff ff\n'
p40
S'.text:00000000004084f0\n.text:00000000004084f1\n.text:00000000004084f2\n.text:00000000004084f3\n.text:00000000004084f6\n.text:00000000004084fb\n.text:00000000004084fd\n.text:00000000004084ff\n.text:0000000000408502\n.text:0000000000408507\n.text:0000000000408509\n.text:000000000040850b\n.text:000000000040850e\n.text:0000000000408513\n.text:0000000000408515\n.text:000000000040851a\n.text:000000000040851c\n.text:0000000000408521\n.text:0000000000408525\n.text:0000000000408527\n.text:000000000040852a\n.text:000000000040852f\n.text:0000000000408531\n.text:0000000000408533\n.text:0000000000408538\n.text:000000000040853a\n.text:000000000040853d\n.text:0000000000408542\n.text:0000000000408544\n.text:0000000000408546\n.text:000000000040854b\n.text:000000000040854d\n.text:0000000000408552\n.text:0000000000408556\n.text:0000000000408557\n.text:0000000000408558\n.text:0000000000408559\n.text:000000000040855c\n.text:0000000000408560\n.text:0000000000408561\n.text:0000000000408562\n'
p41
tp42
sS'to_uchar'
p43
(S'\n__stdcall to_uchar()\n'
p44
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p45
S'MOV EAX,EDI\nRET\n'
p46
S'89 f8\nc3\n'
p47
S'.text:0000000000405280\n.text:0000000000405282\n'
p48
tp49
sS'xtime_sec'
p50
(S'\n__stdcall xtime_sec(xtime_t t)\n'
p51
V\u000axtime_t xtime_sec(xtime_t t)\u000a\u000a{\u000a  xtime_t xVar1;\u000a  \u000a  if (-1 < t) {\u000a    xVar1 = xtime_nonnegative_sec(t);\u000a    return xVar1;\u000a  }\u000a  return (t + 999999999) / 1000000000 + (t + 999999999 >> 0x3f) + -1;\u000a}\u000a\u000a
p52
S'TEST RDI,RDI\nJS 0x004054f7\nJMP 0x004054d0\nADD RDI,0x3b9ac9ff\nMOV RCX,0x112e0be826d694b3\nMOV RAX,RDI\nIMUL RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nLEA RAX,[RDX + RAX*0x1 + -0x1]\nRET\n'
p53
S'48 85 ff\n78 02\neb d9\n48 81 c7 ff c9 9a 3b\n48 b9 b3 94 d6 26 e8 0b 2e 11\n48 89 f8\n48 f7 e9\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 8d 44 02 ff\nc3\n'
p54
S'.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054f7\n.text:00000000004054fe\n.text:0000000000405508\n.text:000000000040550b\n.text:000000000040550e\n.text:0000000000405511\n.text:0000000000405515\n.text:0000000000405519\n.text:000000000040551e\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060e060)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060e060]\n'
p60
S'ff 25 2a c7 20 00\n'
p61
S'.plt:0000000000401930\n'
p62
tp63
sS'iread_fullblock'
p64
(S'\n__stdcall iread_fullblock(char * buf, size_t size)\n'
p65
V\u000assize_t iread_fullblock(char *buf,size_t size)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  long in_RDX;\u000a  ssize_t sVar2;\u000a  \u000a  sVar2 = 0;\u000a  if (in_RDX != 0) {\u000a    do {\u000a      sVar1 = iread((char *)((ulong)buf & 0xffffffff),size);\u000a      if (sVar1 < 0) {\u000a        return sVar1;\u000a      }\u000a      if (sVar1 == 0) {\u000a        return sVar2;\u000a      }\u000a      sVar2 = sVar2 + sVar1;\u000a      size = size + sVar1;\u000a      in_RDX = in_RDX - sVar1;\u000a    } while (in_RDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV EBP,EDI\nXOR R14D,R14D\nTEST RBX,RBX\nJZ 0x00403f84\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,EBP\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00403fa0\nTEST RAX,RAX\nJS 0x00403f81\nJZ 0x00403f84\nADD R14,RAX\nADD R15,RAX\nSUB RBX,RAX\nJNZ 0x00403f60\nJMP 0x00403f84\nMOV R14,RAX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p67
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f7\n89 fd\n45 31 f6\n48 85 db\n74 2d\n66 0f 1f 84 00 00 00 00 00\n89 ef\n4c 89 fe\n48 89 da\ne8 33 00 00 00\n48 85 c0\n78 0f\n74 10\n49 01 c6\n49 01 c7\n48 29 c3\n75 e1\neb 03\n49 89 c6\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p68
S'.text:0000000000403f40\n.text:0000000000403f41\n.text:0000000000403f43\n.text:0000000000403f45\n.text:0000000000403f46\n.text:0000000000403f47\n.text:0000000000403f4a\n.text:0000000000403f4d\n.text:0000000000403f4f\n.text:0000000000403f52\n.text:0000000000403f55\n.text:0000000000403f57\n.text:0000000000403f60\n.text:0000000000403f62\n.text:0000000000403f65\n.text:0000000000403f68\n.text:0000000000403f6d\n.text:0000000000403f70\n.text:0000000000403f72\n.text:0000000000403f74\n.text:0000000000403f77\n.text:0000000000403f7a\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f81\n.text:0000000000403f84\n.text:0000000000403f87\n.text:0000000000403f8b\n.text:0000000000403f8c\n.text:0000000000403f8e\n.text:0000000000403f90\n.text:0000000000403f91\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00407e94\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00407ea0\nPUSH RAX\nCALL 0x00407ff0\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:0000000000407e80\n.text:0000000000407e83\n.text:0000000000407e86\n.text:0000000000407e89\n.text:0000000000407e8b\n.text:0000000000407e8f\n.text:0000000000407e92\n.text:0000000000407e94\n.text:0000000000407e95\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00407470\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:0000000000407480\n.text:0000000000407483\n.text:0000000000407485\n.text:0000000000407488\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40b545\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40b55a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x40b570\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409f5b\nMOV ECX,0x409f69\nXOR EAX,EAX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x40b584\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401b30\n'
p88
S'50\n31 ff\nbe 45 b5 40 00\nba 05 00 00 00\ne8 2e 9c ff ff\n48 89 c1\nbf 01 00 00 00\nba 5a b5 40 00\n31 c0\n48 89 ce\ne8 77 9e ff ff\n31 ff\nbe 70 b5 40 00\nba 05 00 00 00\ne8 06 9c ff ff\n48 89 c6\nbf 01 00 00 00\nba 5b 9f 40 00\nb9 69 9f 40 00\n31 c0\ne8 4d 9e ff ff\n31 ff\nbe 84 b5 40 00\nba 05 00 00 00\ne8 dc 9b ff ff\n48 8b 35 1d 65 20 00\n48 89 c7\n58\ne9 fc 9c ff ff\n'
p89
S'.text:0000000000407dc0\n.text:0000000000407dc1\n.text:0000000000407dc3\n.text:0000000000407dc8\n.text:0000000000407dcd\n.text:0000000000407dd2\n.text:0000000000407dd5\n.text:0000000000407dda\n.text:0000000000407ddf\n.text:0000000000407de1\n.text:0000000000407de4\n.text:0000000000407de9\n.text:0000000000407deb\n.text:0000000000407df0\n.text:0000000000407df5\n.text:0000000000407dfa\n.text:0000000000407dfd\n.text:0000000000407e02\n.text:0000000000407e07\n.text:0000000000407e0c\n.text:0000000000407e0e\n.text:0000000000407e13\n.text:0000000000407e15\n.text:0000000000407e1a\n.text:0000000000407e1f\n.text:0000000000407e24\n.text:0000000000407e2b\n.text:0000000000407e2e\n.text:0000000000407e2f\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401900\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60e670\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00407fa0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 b4 b8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 70 e6 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 35 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:0000000000406040\n.text:0000000000406041\n.text:0000000000406043\n.text:0000000000406044\n.text:0000000000406047\n.text:000000000040604c\n.text:000000000040604f\n.text:0000000000406052\n.text:0000000000406055\n.text:000000000040605a\n.text:000000000040605e\n.text:0000000000406063\n.text:0000000000406066\n.text:000000000040606b\n.text:000000000040606e\n.text:000000000040606f\n.text:0000000000406071\n.text:0000000000406072\n'
p97
tp98
sS'xmalloc'
p99
(S'\n__stdcall xmalloc(size_t n)\n'
p100
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p101
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401bc0\nTEST RBX,RBX\nJZ 0x00407e73\nTEST RAX,RAX\nJZ 0x00407e75\nPOP RBX\nRET\nCALL 0x00407ff0\n'
p102
S'53\n48 89 fb\ne8 57 9d ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p103
S'.text:0000000000407e60\n.text:0000000000407e61\n.text:0000000000407e64\n.text:0000000000407e69\n.text:0000000000407e6c\n.text:0000000000407e6e\n.text:0000000000407e71\n.text:0000000000407e73\n.text:0000000000407e74\n.text:0000000000407e75\n'
p104
tp105
sS'clock_gettime'
p106
(S'\n__stdcall clock_gettime(clockid_t __clock_id, timespec * __tp)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint clock_gettime(clockid_t __clock_id,timespec *__tp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_clock_gettime_0060e0a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x0060e0a0]\n'
p109
S'ff 25 ea c6 20 00\n'
p110
S'.plt:00000000004019b0\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060e6a0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060e690]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e680]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e670]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004060a0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406f90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d e8 73 20 00\n48 89 4c 24 30\n0f 10 05 cc 73 20 00\n0f 29 44 24 20\n0f 10 05 b0 73 20 00\n0f 29 44 24 10\n0f 10 05 94 73 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:00000000004072a0\n.text:00000000004072a2\n.text:00000000004072a4\n.text:00000000004072a5\n.text:00000000004072a9\n.text:00000000004072ab\n.text:00000000004072ae\n.text:00000000004072b1\n.text:00000000004072b8\n.text:00000000004072bd\n.text:00000000004072c4\n.text:00000000004072c9\n.text:00000000004072d0\n.text:00000000004072d5\n.text:00000000004072dc\n.text:00000000004072e0\n.text:00000000004072e3\n.text:00000000004072e8\n.text:00000000004072eb\n.text:00000000004072ed\n.text:00000000004072f2\n.text:00000000004072f4\n.text:00000000004072f7\n.text:00000000004072fa\n.text:00000000004072fd\n.text:0000000000407302\n.text:0000000000407306\n.text:0000000000407307\n.text:0000000000407309\n.text:000000000040730b\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x00401e8a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x60de18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401e80\nJMP 0x00401e10\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e7b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401e10\n'
p123
S'bf 18 de 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:0000000000401e70\n.text:0000000000401e75\n.text:0000000000401e79\n.text:0000000000401e7b\n.text:0000000000401e80\n.text:0000000000401e85\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8b\n.text:0000000000401e8e\n.text:0000000000401e90\n.text:0000000000401e91\n'
p125
tp126
sS'xtime_nonnegative_sec'
p127
(S'\n__stdcall xtime_nonnegative_sec(xtime_t t)\n'
p128
V\u000axtime_t xtime_nonnegative_sec(xtime_t t)\u000a\u000a{\u000a  return t / 1000000000 + (t >> 0x3f);\u000a}\u000a\u000a
p129
S'MOV RCX,0x112e0be826d694b3\nMOV RAX,RDI\nIMUL RCX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nLEA RAX,[RDX + RAX*0x1]\nRET\n'
p130
S'48 b9 b3 94 d6 26 e8 0b 2e 11\n48 89 f8\n48 f7 e9\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 8d 04 02\nc3\n'
p131
S'.text:00000000004054d0\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054e0\n.text:00000000004054e3\n.text:00000000004054e7\n.text:00000000004054eb\n.text:00000000004054ef\n'
p132
tp133
sS'operand_matches'
p134
(S'\n__stdcall operand_matches(char * str, char * pattern)\n'
p135
V\u000a_Bool operand_matches(char *str,char *pattern)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  char in_DL;\u000a  \u000a  do {\u000a    cVar1 = *pattern;\u000a    cVar2 = *str;\u000a    if (cVar1 == 0) {\u000a      return (_Bool)(cVar2 == in_DL || cVar2 == 0);\u000a    }\u000a    str = str + 1;\u000a    pattern = pattern + 1;\u000a  } while (cVar2 == cVar1);\u000a  return false;\u000a}\u000a\u000a
p136
S'MOVZX ECX,byte ptr [RSI]\nTEST CL,CL\nMOVZX EAX,byte ptr [RDI]\nJZ 0x00404097\nINC RDI\nINC RSI\nCMP AL,CL\nJZ 0x00404080\nXOR EAX,EAX\nRET\nTEST AL,AL\nSETZ CL\nCMP AL,DL\nSETZ AL\nOR AL,CL\nRET\n'
p137
S'0f b6 0e\n84 c9\n0f b6 07\n74 0d\n48 ff c7\n48 ff c6\n38 c8\n74 ec\n31 c0\nc3\n84 c0\n0f 94 c1\n38 d0\n0f 94 c0\n08 c8\nc3\n'
p138
S'.text:0000000000404080\n.text:0000000000404083\n.text:0000000000404085\n.text:0000000000404088\n.text:000000000040408a\n.text:000000000040408d\n.text:0000000000404090\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404096\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409c\n.text:000000000040409e\n.text:00000000004040a1\n.text:00000000004040a3\n'
p139
tp140
sS'gettimeofday'
p141
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0060e118)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060e118]\n'
p144
S'ff 25 72 c6 20 00\n'
p145
S'.plt:0000000000401aa0\n'
p146
tp147
sS'scanargs'
p148
(S'\n__stdcall scanargs(char * * argv)\n'
p149
V\u000avoid scanargs(char **argv)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  uintmax_t uVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  _Bool _Var6;\u000a  uint uVar7;\u000a  char *str;\u000a  uintmax_t uVar8;\u000a  undefined8 uVar9;\u000a  char *__s;\u000a  ulong uVar10;\u000a  code *pcVar11;\u000a  long in_RSI;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  long lVar14;\u000a  strtol_error local_54;\u000a  ulong local_50;\u000a  ulong local_48;\u000a  ulong local_40;\u000a  ulong local_38;\u000a  \u000a  lVar14 = (long)optind;\u000a  if (optind < (int)argv) {\u000a    uVar13 = 0xffffffffffffffff;\u000a    local_38 = 0;\u000a    local_50 = 0;\u000a    local_48 = 0;\u000a    do {\u000a      __s = *(char **)(in_RSI + lVar14 * 8);\u000a      str = strchr(__s,0x3d);\u000a      if (str == (char *)0x0) {\u000aLAB_0040306b:\u000a        uVar9 = dcgettext(0,"unrecognized operand %s",5);\u000a        __s = quote(__s);\u000a        nl_error((char *)0x0,0,uVar9,__s);\u000a                    /* WARNING: Subroutine does not return */\u000a        usage(1);\u000a      }\u000a      str = str + 1;\u000a      _Var6 = operand_is(__s,"if");\u000a      pcVar1 = str;\u000a      pcVar2 = output_file;\u000a      if ((_Var6 == false) &&\u000a         (_Var6 = operand_is(__s,"of"), pcVar1 = input_file, pcVar2 = str, _Var6 == false)) {\u000a        _Var6 = operand_is(__s,"conv");\u000a        if (_Var6 == false) {\u000a          _Var6 = operand_is(__s,"iflag");\u000a          if (_Var6 == false) {\u000a            _Var6 = operand_is(__s,"oflag");\u000a            if (_Var6 == false) {\u000a              _Var6 = operand_is(__s,"status");\u000a              if (_Var6 == false) {\u000a                local_54 = LONGINT_OK;\u000a                local_40 = uVar13;\u000a                uVar8 = parse_integer(str,&local_54);\u000a                _Var6 = operand_is(__s,"ibs");\u000a                if (_Var6 == false) {\u000a                  _Var6 = operand_is(__s,"obs");\u000a                  if (_Var6 != false) {\u000a                    uVar10 = -page_size;\u000a                    output_blocksize = uVar8;\u000a                    if (0x7ffffffffffffffe < uVar10) {\u000a                      uVar10 = 0x7fffffffffffffff;\u000a                      output_blocksize = uVar8;\u000a                    }\u000a                    goto LAB_00402c06;\u000a                  }\u000a                  _Var6 = operand_is(__s,"bs");\u000a                  if (_Var6 != false) {\u000a                    uVar10 = page_size * -2 - 4;\u000a                    local_38 = uVar8;\u000a                    if (0x7ffffffffffffffe < uVar10) {\u000a                      uVar10 = 0x7fffffffffffffff;\u000a                      local_38 = uVar8;\u000a                    }\u000a                    goto LAB_00402c06;\u000a                  }\u000a                  _Var6 = operand_is(__s,"cbs");\u000a                  if (_Var6 != false) {\u000a                    uVar10 = 0xffffffffffffffff;\u000a                    conversion_blocksize = uVar8;\u000a                    goto LAB_00402c06;\u000a                  }\u000a                  _Var6 = operand_is(__s,"skip");\u000a                  uVar10 = 0xffffffffffffffff;\u000a                  uVar12 = uVar8;\u000a                  if (_Var6 == false) {\u000a                    _Var6 = operand_is(__s,"seek");\u000a                    uVar10 = uVar8;\u000a                    uVar3 = local_40;\u000a                    if ((_Var6 == false) &&\u000a                       (_Var6 = operand_is(__s,"count"), uVar10 = local_50, uVar3 = uVar8,\u000a                       _Var6 == false)) goto LAB_0040306b;\u000a                    local_40 = uVar3;\u000a                    local_50 = uVar10;\u000a                    uVar10 = 0xffffffffffffffff;\u000a                    uVar12 = local_48;\u000a                  }\u000aLAB_00402c8e:\u000a                  local_48 = uVar12;\u000a                  if (uVar10 < uVar8) {\u000a                    local_54 = LONGINT_OVERFLOW;\u000a                  }\u000a                  else {\u000a                    uVar13 = local_40;\u000a                    pcVar1 = input_file;\u000a                    pcVar2 = output_file;\u000a                    if (local_54 == LONGINT_OK) goto LAB_00402d00;\u000a                  }\u000a                }\u000a                else {\u000a                  uVar10 = page_size * -2 - 4;\u000a                  input_blocksize = uVar8;\u000a                  if (0x7ffffffffffffffe < uVar10) {\u000a                    uVar10 = 0x7fffffffffffffff;\u000a                    input_blocksize = uVar8;\u000a                  }\u000aLAB_00402c06:\u000a                  uVar12 = local_48;\u000a                  if (uVar8 != 0) goto LAB_00402c8e;\u000a                  local_54 = LONGINT_INVALID;\u000a                }\u000a                uVar7 = 0;\u000a                if (local_54 == LONGINT_OVERFLOW) {\u000a                  uVar7 = 0x4b;\u000a                }\u000a                uVar9 = dcgettext(0,"invalid number",5);\u000a                __s = quote(str);\u000a                nl_error((char *)0x1,(ulong)uVar7,"%s: %s",uVar9,__s);\u000a                uVar13 = local_40;\u000a                pcVar1 = input_file;\u000a                pcVar2 = output_file;\u000a              }\u000a              else {\u000a                status_level = parse_symbols(str,statuses,(char *)0x1);\u000a                pcVar1 = input_file;\u000a                pcVar2 = output_file;\u000a              }\u000a            }\u000a            else {\u000a              uVar7 = parse_symbols(str,flags,(char *)0x0);\u000a              output_flags = output_flags | uVar7;\u000a              pcVar1 = input_file;\u000a              pcVar2 = output_file;\u000a            }\u000a          }\u000a          else {\u000a            uVar7 = parse_symbols(str,flags,(char *)0x0);\u000a            input_flags = input_flags | uVar7;\u000a            pcVar1 = input_file;\u000a            pcVar2 = output_file;\u000a          }\u000a        }\u000a        else {\u000a          uVar7 = parse_symbols(str,conversions,(char *)0x0);\u000a          conversions_mask = conversions_mask | uVar7;\u000a          pcVar1 = input_file;\u000a          pcVar2 = output_file;\u000a        }\u000a      }\u000aLAB_00402d00:\u000a      output_file = pcVar2;\u000a      input_file = pcVar1;\u000a      lVar14 = lVar14 + 1;\u000a    } while (lVar14 < (long)(int)argv);\u000a    uVar10 = local_48;\u000a    uVar12 = local_50;\u000a    sVar4 = local_38;\u000a    sVar5 = local_38;\u000a    if (local_38 != 0) goto joined_r0x00402d8a;\u000a  }\u000a  else {\u000a    uVar13 = 0xffffffffffffffff;\u000a    uVar10 = 0;\u000a    uVar12 = 0;\u000a  }\u000a  conversions_mask = conversions_mask | 0x800;\u000a  if (input_blocksize == 0) {\u000a    input_blocksize = 0x200;\u000a  }\u000a  sVar4 = output_blocksize;\u000a  sVar5 = input_blocksize;\u000a  if (output_blocksize == 0) {\u000a    output_blocksize = 0x200;\u000a    sVar4 = output_blocksize;\u000a    sVar5 = input_blocksize;\u000a  }\u000ajoined_r0x00402d8a:\u000a  input_blocksize = sVar5;\u000a  output_blocksize = sVar4;\u000a  if (conversion_blocksize == 0) {\u000a    conversions_mask = conversions_mask & 0xffffffe7;\u000a  }\u000a  if ((input_flags & 0x101000U) != 0) {\u000a    input_flags = input_flags | 0x101000;\u000a  }\u000a  if ((output_flags & 1U) == 0) {\u000a    if ((input_flags & 0x10U) == 0) {\u000a      if ((output_flags & 0xcU) == 0) {\u000a        if ((uVar10 == 0) || ((input_flags & 8U) == 0)) {\u000a          if (uVar10 != 0) {\u000a            skip_records = uVar10;\u000a          }\u000a        }\u000a        else {\u000a          skip_bytes = uVar10 % input_blocksize;\u000a          skip_records = uVar10 / input_blocksize;\u000a        }\u000a        if ((uVar13 == 0xffffffffffffffff) || ((input_flags & 4U) == 0)) {\u000a          if (uVar13 != 0xffffffffffffffff) {\u000a            max_records = uVar13;\u000a          }\u000a        }\u000a        else {\u000a          max_bytes = uVar13 % input_blocksize;\u000a          max_records = uVar13 / input_blocksize;\u000a        }\u000a        if ((uVar12 == 0) || ((output_flags & 0x10U) == 0)) {\u000a          if (uVar12 != 0) {\u000a            seek_records = uVar12;\u000a          }\u000a        }\u000a        else {\u000a          seek_bytes = uVar12 % output_blocksize;\u000a          seek_records = uVar12 / output_blocksize;\u000a        }\u000a        if (((conversions_mask & 0x800U) == 0) && ((input_flags & 1U) == 0)) {\u000a          warn_partial_read = true;\u000a          if ((skip_records == 0) && (max_records + 1 < 2)) {\u000a            warn_partial_read = SUB41(((input_flags | output_flags) & 0x4000U) >> 0xe,0);\u000a          }\u000a        }\u000a        else {\u000a          warn_partial_read = false;\u000a        }\u000a        pcVar11 = iread;\u000a        if ((input_flags & 1U) != 0) {\u000a          pcVar11 = iread_fullblock;\u000a        }\u000a        input_flags = input_flags & 0xfffffffe;\u000a        iread_fnc = pcVar11;\u000a        _Var6 = multiple_bits_set();\u000a        if (_Var6 != false) {\u000a          uVar9 = dcgettext(0,"cannot combine any two of {ascii,ebcdic,ibm}",5);\u000a          nl_error((char *)0x1,0,uVar9,uVar9);\u000a        }\u000a        _Var6 = multiple_bits_set();\u000a        if (_Var6 != false) {\u000a          uVar9 = dcgettext(0,"cannot combine block and unblock",5);\u000a          nl_error((char *)0x1,0,uVar9,uVar9);\u000a        }\u000a        _Var6 = multiple_bits_set();\u000a        if (_Var6 != false) {\u000a          uVar9 = dcgettext(0,"cannot combine lcase and ucase",5);\u000a          nl_error((char *)0x1,0,uVar9,uVar9);\u000a        }\u000a        _Var6 = multiple_bits_set();\u000a        if (_Var6 != false) {\u000a          uVar9 = dcgettext(0,"cannot combine excl and nocreat",5);\u000a          nl_error((char *)0x1,0,uVar9,uVar9);\u000a        }\u000a        _Var6 = multiple_bits_set();\u000a        if ((_Var6 != false) || (_Var6 = multiple_bits_set(), _Var6 != false)) {\u000a          uVar9 = dcgettext(0,"cannot combine direct and nocache",5);\u000a          nl_error((char *)0x1,0,uVar9,uVar9);\u000a        }\u000a        if ((input_flags & 2U) != 0) {\u000a          i_nocache = 1;\u000a          input_flags = input_flags & 0xfffffffd;\u000a        }\u000a        if ((output_flags & 2U) != 0) {\u000a          o_nocache = 1;\u000a          output_flags = output_flags & 0xfffffffd;\u000a        }\u000a        return;\u000a      }\u000a      uVar9 = dcgettext(0,"invalid output flag",5);\u000a      __s = "skip_bytes";\u000a      if ((output_flags & 4U) != 0) {\u000a        __s = "count_bytes";\u000a      }\u000a    }\u000a    else {\u000a      uVar9 = dcgettext(0,"invalid input flag",5);\u000a      __s = "seek_bytes";\u000a    }\u000a  }\u000a  else {\u000a    uVar9 = dcgettext(0,"invalid output flag",5);\u000a    __s = "fullblock";\u000a  }\u000a  __s = quote(__s);\u000a  nl_error((char *)0x0,0,"%s: %s",uVar9,__s);\u000a                    /* WARNING: Subroutine does not return */\u000a  usage(1);\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RSI\nMOVSXD R15,dword ptr [0x0060e350]\nCMP R15D,EDI\nJGE 0x00402d3a\nMOVSXD R12,EDI\nMOV R14,-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV R13,qword ptr [RBX + R15*0x8]\nMOV ESI,0x3d\nMOV RDI,R13\nCALL 0x00401a60\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040306b\nINC RBP\nMOV ESI,0x40a053\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402a30\nMOV qword ptr [0x0060e4a0],RBP\nJMP 0x00402d00\nMOV ESI,0x40a056\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402a50\nMOV qword ptr [0x0060e4c0],RBP\nJMP 0x00402d00\nMOV ESI,0x40a059\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402a80\nMOV ESI,0x40a630\nXOR EDX,EDX\nMOV ECX,0x40a05e\nMOV RDI,RBP\nCALL 0x00403dc0\nOR dword ptr [0x0060e4cc],EAX\nJMP 0x00402d00\nMOV ESI,0x40a071\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402ab0\nMOV ESI,0x40a740\nXOR EDX,EDX\nMOV ECX,0x40a077\nMOV RDI,RBP\nCALL 0x00403dc0\nOR dword ptr [0x0060e4a8],EAX\nJMP 0x00402d00\nMOV ESI,0x40a08a\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402ae0\nMOV ESI,0x40a740\nXOR EDX,EDX\nMOV ECX,0x40a090\nMOV RDI,RBP\nCALL 0x00403dc0\nOR dword ptr [0x0060e4c8],EAX\nJMP 0x00402d00\nMOV ESI,0x40a0a4\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402b13\nMOV ESI,0x40a870\nMOV EDX,0x1\nMOV ECX,0x40a0ab\nMOV RDI,RBP\nCALL 0x00403dc0\nMOV dword ptr [0x0060e2b0],EAX\nJMP 0x00402d00\nMOV qword ptr [RSP + 0x18],R14\nMOV dword ptr [RSP + 0x4],0x0\nMOV RDI,RBP\nLEA RSI,[RSP + 0x4]\nCALL 0x00403ec0\nMOV R14,RAX\nMOV ESI,0x40a0c0\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402b72\nMOV RAX,qword ptr [0x0060e390]\nADD RAX,RAX\nMOV RCX,-0x4\nSUB RCX,RAX\nMOV RAX,0x7fffffffffffffff\nCMP RCX,RAX\nCMOVNC RCX,RAX\nMOV qword ptr [0x0060e590],R14\nJMP 0x00402c06\nMOV ESI,0x40a0c4\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402ba7\nMOV RCX,qword ptr [0x0060e390]\nNEG RCX\nMOV RAX,0x7fffffffffffffff\nCMP RCX,RAX\nCMOVNC RCX,RAX\nMOV qword ptr [0x0060e4d8],R14\nJMP 0x00402c06\nMOV ESI,0x40a0c9\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402be7\nMOV RAX,qword ptr [0x0060e390]\nADD RAX,RAX\nMOV RCX,-0x4\nSUB RCX,RAX\nMOV RAX,0x7fffffffffffffff\nCMP RCX,RAX\nCMOVNC RCX,RAX\nMOV RAX,R14\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00402c06\nMOV ESI,0x40a0c8\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402c22\nMOV qword ptr [0x0060e598],R14\nMOV RCX,-0x1\nMOV EAX,0x1\nCMP R14,RAX\nJNC 0x00402c8e\nMOV dword ptr [RSP + 0x4],0x4\nMOV EAX,0x4\nJMP 0x00402caa\nMOV ESI,0x40a420\nMOV RDI,R13\nCALL 0x00403db0\nMOV RCX,-0x1\nTEST AL,AL\nJZ 0x00402c4b\nMOV RAX,R14\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nCMP R14,RAX\nJC 0x00402c10\nJMP 0x00402c8e\nMOV ESI,0x40a430\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x00402c66\nMOV RAX,R14\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x00402c80\nMOV ESI,0x40a0cc\nMOV RDI,R13\nCALL 0x00403db0\nTEST AL,AL\nJZ 0x0040306b\nMOV qword ptr [RSP + 0x18],R14\nXOR EAX,EAX\nMOV RCX,-0x1\nCMP R14,RAX\nJC 0x00402c10\nCMP RCX,R14\nJNC 0x00402ca2\nMOV dword ptr [RSP + 0x4],0x1\nMOV EAX,0x1\nJMP 0x00402caa\nMOV EAX,dword ptr [RSP + 0x4]\nTEST EAX,EAX\nJZ 0x00402cf5\nCMP EAX,0x1\nMOV R13D,0x0\nMOV EAX,0x4b\nCMOVZ R13D,EAX\nXOR EDI,EDI\nMOV ESI,0x40a0d9\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R14,RAX\nMOV RDI,RBP\nCALL 0x00407480\nMOV RBP,RAX\nMOV EDI,0x1\nMOV EDX,0x40a0d2\nXOR EAX,EAX\nMOV ESI,R13D\nMOV RCX,R14\nMOV R8,RBP\nCALL 0x00403360\nMOV R14,qword ptr [RSP + 0x18]\nNOP word ptr [RAX + RAX*0x1]\nINC R15\nCMP R15,R12\nJL 0x004029f0\nMOV RAX,qword ptr [RSP + 0x20]\nTEST RAX,RAX\nJZ 0x00402d47\nMOV qword ptr [0x0060e4d8],RAX\nMOV qword ptr [0x0060e590],RAX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSP + 0x10]\nCMP qword ptr [0x0060e598],0x0\nJNZ 0x00402d93\nJMP 0x00402d8c\nMOV R14,-0x1\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x00402d51\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSP + 0x10]\nOR byte ptr [0x0060e4cd],0x8\nCMP qword ptr [0x0060e590],0x0\nJNZ 0x00402d6d\nMOV qword ptr [0x0060e590],0x200\nCMP qword ptr [0x0060e4d8],0x0\nJNZ 0x00402d82\nMOV qword ptr [0x0060e4d8],0x200\nCMP qword ptr [0x0060e598],0x0\nJNZ 0x00402d93\nAND byte ptr [0x0060e4cc],0xe7\nMOV ECX,dword ptr [0x0060e4a8]\nTEST ECX,0x101000\nJZ 0x00402dad\nOR ECX,0x101000\nMOV dword ptr [0x0060e4a8],ECX\nMOV ECX,dword ptr [0x0060e4c8]\nTEST CL,0x1\nJNZ 0x004030a2\nMOV EDX,dword ptr [0x0060e4a8]\nTEST DL,0x10\nJNZ 0x004030bd\nTEST CL,0xc\nJNZ 0x004030d8\nTEST RAX,RAX\nJZ 0x00402dfd\nAND EDX,0x8\nJZ 0x00402dfd\nXOR EDX,EDX\nDIV qword ptr [0x0060e590]\nMOV qword ptr [0x0060e5a0],RAX\nMOV qword ptr [0x0060e5a8],RDX\nCMP R14,-0x1\nJNZ 0x00402e0f\nJMP 0x00402e3b\nTEST RAX,RAX\nJZ 0x00402e09\nMOV qword ptr [0x0060e5a0],RAX\nCMP R14,-0x1\nJZ 0x00402e3b\nMOV EAX,dword ptr [0x0060e4a8]\nAND EAX,0x4\nJZ 0x00402e3b\nXOR EDX,EDX\nMOV RAX,R14\nDIV qword ptr [0x0060e590]\nMOV qword ptr [0x0060e2a8],RAX\nMOV qword ptr [0x0060e4f8],RDX\nTEST RSI,RSI\nJNZ 0x00402e4d\nJMP 0x00402e7d\nCMP R14,-0x1\nJZ 0x00402e48\nMOV qword ptr [0x0060e2a8],R14\nTEST RSI,RSI\nJZ 0x00402e7d\nMOV EAX,dword ptr [0x0060e4c8]\nAND EAX,0x10\nJZ 0x00402e7d\nXOR EDX,EDX\nMOV RAX,RSI\nDIV qword ptr [0x0060e4d8]\nMOV qword ptr [0x0060e4d0],RAX\nMOV qword ptr [0x0060e4e0],RDX\nTEST byte ptr [0x0060e4cd],0x8\nJNZ 0x00402ecc\nJMP 0x00402e92\nTEST RSI,RSI\nJZ 0x00402e89\nMOV qword ptr [0x0060e4d0],RSI\nTEST byte ptr [0x0060e4cd],0x8\nJNZ 0x00402ecc\nMOV ECX,dword ptr [0x0060e4a8]\nTEST CL,0x1\nJNZ 0x00402ecc\nMOV AL,0x1\nCMP qword ptr [0x0060e5a0],0x0\nJNZ 0x00402ece\nMOV RDX,qword ptr [0x0060e2a8]\nINC RDX\nCMP RDX,0x1\nJA 0x00402ece\nOR ECX,dword ptr [0x0060e4c8]\nAND ECX,0x4000\nSHR ECX,0xe\nMOV AL,CL\nJMP 0x00402ece\nXOR EAX,EAX\nMOV byte ptr [0x0060e5b0],AL\nMOV EAX,dword ptr [0x0060e4a8]\nMOV ECX,0x403f40\nMOV EDX,0x403fa0\nTEST AL,0x1\nCMOVNZ RDX,RCX\nMOV qword ptr [0x0060e5b8],RDX\nAND EAX,0xfffffffe\nMOV dword ptr [0x0060e4a8],EAX\nMOV EDI,dword ptr [0x0060e4cc]\nAND EDI,0x7\nCALL 0x00404070\nTEST AL,AL\nJZ 0x00402f31\nXOR EDI,EDI\nMOV ESI,0x40a10a\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV EDI,dword ptr [0x0060e4cc]\nAND EDI,0x18\nCALL 0x00404070\nTEST AL,AL\nJZ 0x00402f68\nXOR EDI,EDI\nMOV ESI,0x40a137\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV EDI,dword ptr [0x0060e4cc]\nAND EDI,0x60\nCALL 0x00404070\nTEST AL,AL\nJZ 0x00402f9f\nXOR EDI,EDI\nMOV ESI,0x40a158\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV EDI,dword ptr [0x0060e4cc]\nAND EDI,0x3000\nCALL 0x00404070\nTEST AL,AL\nJZ 0x00402fd9\nXOR EDI,EDI\nMOV ESI,0x40a177\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV EDI,dword ptr [0x0060e4a8]\nAND EDI,0x4002\nCALL 0x00404070\nTEST AL,AL\nJNZ 0x00403003\nMOV EDI,dword ptr [0x0060e4c8]\nAND EDI,0x4002\nCALL 0x00404070\nTEST AL,AL\nJZ 0x00403028\nXOR EDI,EDI\nMOV ESI,0x40a197\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV EAX,dword ptr [0x0060e4a8]\nTEST AL,0x2\nJZ 0x00403042\nMOV byte ptr [0x0060e500],0x1\nAND EAX,0xfffffffd\nMOV dword ptr [0x0060e4a8],EAX\nMOV EAX,dword ptr [0x0060e4c8]\nTEST AL,0x2\nJZ 0x0040305c\nMOV byte ptr [0x0060e501],0x1\nAND EAX,0xfffffffd\nMOV dword ptr [0x0060e4c8],EAX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40a03b\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x00407480\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00403360\nMOV EDI,0x1\nCALL 0x00401ea0\nXOR EDI,EDI\nMOV ESI,0x40a090\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV EDI,0x40a1f7\nJMP 0x00403102\nXOR EDI,EDI\nMOV ESI,0x40a077\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV EDI,0x40a0e8\nJMP 0x00403102\nXOR EDI,EDI\nMOV ESI,0x40a090\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV EAX,dword ptr [0x0060e4c8]\nMOV ECX,0x40a0f3\nMOV EDI,0x40a0ff\nTEST AL,0x4\nCMOVNZ RDI,RCX\nCALL 0x00407480\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x40a0d2\nXOR EAX,EAX\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00403360\nMOV EDI,0x1\nCALL 0x00401ea0\n'
p151
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 f3\n4c 63 3d 88 b9 20 00\n41 39 ff\n0f 8d 69 03 00 00\n4c 63 e7\n49 c7 c6 ff ff ff ff\n31 c0\n48 89 44 24 20\n31 c0\n48 89 44 24 08\n31 c0\n48 89 44 24 10\n4e 8b 2c fb\nbe 3d 00 00 00\n4c 89 ef\ne8 5f f0 ff ff\n48 89 c5\n48 85 ed\n0f 84 5e 06 00 00\n48 ff c5\nbe 53 a0 40 00\n4c 89 ef\ne8 93 13 00 00\n84 c0\n74 0f\n48 89 2d 78 ba 20 00\ne9 d3 02 00 00\nbe 56 a0 40 00\n4c 89 ef\ne8 73 13 00 00\n84 c0\n74 0f\n48 89 2d 78 ba 20 00\ne9 b3 02 00 00\nbe 59 a0 40 00\n4c 89 ef\ne8 53 13 00 00\n84 c0\n74 1f\nbe 30 a6 40 00\n31 d2\nb9 5e a0 40 00\n48 89 ef\ne8 4b 13 00 00\n09 05 51 ba 20 00\ne9 80 02 00 00\nbe 71 a0 40 00\n4c 89 ef\ne8 23 13 00 00\n84 c0\n74 1f\nbe 40 a7 40 00\n31 d2\nb9 77 a0 40 00\n48 89 ef\ne8 1b 13 00 00\n09 05 fd b9 20 00\ne9 50 02 00 00\nbe 8a a0 40 00\n4c 89 ef\ne8 f3 12 00 00\n84 c0\n74 1f\nbe 40 a7 40 00\n31 d2\nb9 90 a0 40 00\n48 89 ef\ne8 eb 12 00 00\n09 05 ed b9 20 00\ne9 20 02 00 00\nbe a4 a0 40 00\n4c 89 ef\ne8 c3 12 00 00\n84 c0\n74 22\nbe 70 a8 40 00\nba 01 00 00 00\nb9 ab a0 40 00\n48 89 ef\ne8 b8 12 00 00\n89 05 a2 b7 20 00\ne9 ed 01 00 00\n4c 89 74 24 18\nc7 44 24 04 00 00 00 00\n48 89 ef\n48 8d 74 24 04\ne8 93 13 00 00\n49 89 c6\nbe c0 a0 40 00\n4c 89 ef\ne8 73 12 00 00\n84 c0\n74 31\n48 8b 05 48 b8 20 00\n48 01 c0\n48 c7 c1 fc ff ff ff\n48 29 c1\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c1\n48 0f 43 c8\n4c 89 35 23 ba 20 00\ne9 94 00 00 00\nbe c4 a0 40 00\n4c 89 ef\ne8 31 12 00 00\n84 c0\n74 24\n48 8b 0d 06 b8 20 00\n48 f7 d9\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c1\n48 0f 43 c8\n4c 89 35 33 b9 20 00\neb 5f\nbe c9 a0 40 00\n4c 89 ef\ne8 fc 11 00 00\n84 c0\n74 2f\n48 8b 05 d1 b7 20 00\n48 01 c0\n48 c7 c1 fc ff ff ff\n48 29 c1\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c1\n48 0f 43 c8\n4c 89 f0\n48 89 44 24 20\neb 1f\nbe c8 a0 40 00\n4c 89 ef\ne8 bc 11 00 00\n84 c0\n74 2a\n4c 89 35 99 b9 20 00\n48 c7 c1 ff ff ff ff\nb8 01 00 00 00\n49 39 c6\n73 7e\nc7 44 24 04 04 00 00 00\nb8 04 00 00 00\ne9 88 00 00 00\nbe 20 a4 40 00\n4c 89 ef\ne8 81 11 00 00\n48 c7 c1 ff ff ff ff\n84 c0\n74 11\n4c 89 f0\n48 89 44 24 10\n31 c0\n49 39 c6\n72 c7\neb 43\nbe 30 a4 40 00\n4c 89 ef\ne8 58 11 00 00\n84 c0\n74 0a\n4c 89 f0\n48 89 44 24 08\neb 1a\nbe cc a0 40 00\n4c 89 ef\ne8 3d 11 00 00\n84 c0\n0f 84 f0 03 00 00\n4c 89 74 24 18\n31 c0\n48 c7 c1 ff ff ff ff\n49 39 c6\n72 82\n4c 39 f1\n73 0f\nc7 44 24 04 01 00 00 00\nb8 01 00 00 00\neb 08\n8b 44 24 04\n85 c0\n74 4b\n83 f8 01\n41 bd 00 00 00 00\nb8 4b 00 00 00\n44 0f 44 e8\n31 ff\nbe d9 a0 40 00\nba 05 00 00 00\ne8 33 ed ff ff\n49 89 c6\n48 89 ef\ne8 a8 47 00 00\n48 89 c5\nbf 01 00 00 00\nba d2 a0 40 00\n31 c0\n44 89 ee\n4c 89 f1\n49 89 e8\ne8 6b 06 00 00\n4c 8b 74 24 18\n66 0f 1f 44 00 00\n49 ff c7\n4d 39 e7\n0f 8c e4 fc ff ff\n48 8b 44 24 20\n48 85 c0\n74 31\n48 89 05 bb b7 20 00\n48 89 05 6c b8 20 00\n48 8b 74 24 08\n48 8b 44 24 10\n48 83 3d 62 b8 20 00 00\n75 5b\neb 52\n49 c7 c6 ff ff ff ff\n31 f6\n31 c0\neb 0a\n48 8b 74 24 08\n48 8b 44 24 10\n80 0d 75 b7 20 00 08\n48 83 3d 30 b8 20 00 00\n75 0b\n48 c7 05 23 b8 20 00 00 02 00 00\n48 83 3d 63 b7 20 00 00\n75 0b\n48 c7 05 56 b7 20 00 00 02 00 00\n48 83 3d 0e b8 20 00 00\n75 07\n80 25 39 b7 20 00 e7\n8b 0d 0f b7 20 00\nf7 c1 00 10 10 00\n74 0c\n81 c9 00 10 10 00\n89 0d fb b6 20 00\n8b 0d 15 b7 20 00\nf6 c1 01\n0f 85 e6 02 00 00\n8b 15 e6 b6 20 00\nf6 c2 10\n0f 85 f2 02 00 00\nf6 c1 0c\n0f 85 04 03 00 00\n48 85 c0\n74 24\n83 e2 08\n74 1f\n31 d2\n48 f7 35 a9 b7 20 00\n48 89 05 b2 b7 20 00\n48 89 15 b3 b7 20 00\n49 83 fe ff\n75 14\neb 3e\n48 85 c0\n74 07\n48 89 05 97 b7 20 00\n49 83 fe ff\n74 2c\n8b 05 93 b6 20 00\n83 e0 04\n74 21\n31 d2\n4c 89 f0\n48 f7 35 6a b7 20 00\n48 89 05 7b b4 20 00\n48 89 15 c4 b6 20 00\n48 85 f6\n75 14\neb 42\n49 83 fe ff\n74 07\n4c 89 35 60 b4 20 00\n48 85 f6\n74 30\n8b 05 75 b6 20 00\n83 e0 10\n74 25\n31 d2\n48 89 f0\n48 f7 35 74 b6 20 00\n48 89 05 65 b6 20 00\n48 89 15 6e b6 20 00\nf6 05 54 b6 20 00 08\n75 51\neb 15\n48 85 f6\n74 07\n48 89 35 47 b6 20 00\nf6 05 3d b6 20 00 08\n75 3a\n8b 0d 10 b6 20 00\nf6 c1 01\n75 2f\nb0 01\n48 83 3d f9 b6 20 00 00\n75 25\n48 8b 15 f8 b3 20 00\n48 ff c2\n48 83 fa 01\n77 15\n0b 0d 09 b6 20 00\n81 e1 00 40 00 00\nc1 e9 0e\n88 c8\neb 02\n31 c0\n88 05 dc b6 20 00\n8b 05 ce b5 20 00\nb9 40 3f 40 00\nba a0 3f 40 00\na8 01\n48 0f 45 d1\n48 89 15 c7 b6 20 00\n83 e0 fe\n89 05 ae b5 20 00\n8b 3d cc b5 20 00\n83 e7 07\ne8 68 11 00 00\n84 c0\n74 25\n31 ff\nbe 0a a1 40 00\nba 05 00 00 00\ne8 e3 ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 2f 04 00 00\n8b 3d 95 b5 20 00\n83 e7 18\ne8 31 11 00 00\n84 c0\n74 25\n31 ff\nbe 37 a1 40 00\nba 05 00 00 00\ne8 ac ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 f8 03 00 00\n8b 3d 5e b5 20 00\n83 e7 60\ne8 fa 10 00 00\n84 c0\n74 25\n31 ff\nbe 58 a1 40 00\nba 05 00 00 00\ne8 75 ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 c1 03 00 00\n8b 3d 27 b5 20 00\n81 e7 00 30 00 00\ne8 c0 10 00 00\n84 c0\n74 25\n31 ff\nbe 77 a1 40 00\nba 05 00 00 00\ne8 3b ea ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 87 03 00 00\n8b 3d c9 b4 20 00\n81 e7 02 40 00 00\ne8 86 10 00 00\n84 c0\n75 15\n8b 3d d4 b4 20 00\n81 e7 02 40 00 00\ne8 71 10 00 00\n84 c0\n74 25\n31 ff\nbe 97 a1 40 00\nba 05 00 00 00\ne8 ec e9 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 38 03 00 00\n8b 05 7a b4 20 00\na8 02\n74 10\nc6 05 c7 b4 20 00 01\n83 e0 fd\n89 05 66 b4 20 00\n8b 05 80 b4 20 00\na8 02\n74 10\nc6 05 ae b4 20 00 01\n83 e0 fd\n89 05 6c b4 20 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 3b a0 40 00\nba 05 00 00 00\ne8 84 e9 ff ff\n48 89 c3\n4c 89 ef\ne8 f9 43 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 c8 02 00 00\nbf 01 00 00 00\ne8 fe ed ff ff\n31 ff\nbe 90 a0 40 00\nba 05 00 00 00\ne8 4d e9 ff ff\n48 89 c3\nbf f7 a1 40 00\neb 45\n31 ff\nbe 77 a0 40 00\nba 05 00 00 00\ne8 32 e9 ff ff\n48 89 c3\nbf e8 a0 40 00\neb 2a\n31 ff\nbe 90 a0 40 00\nba 05 00 00 00\ne8 17 e9 ff ff\n48 89 c3\n8b 05 d6 b3 20 00\nb9 f3 a0 40 00\nbf ff a0 40 00\na8 04\n48 0f 45 f9\ne8 79 43 00 00\n48 89 c5\n31 ff\n31 f6\nba d2 a0 40 00\n31 c0\n48 89 d9\n49 89 e8\ne8 40 02 00 00\nbf 01 00 00 00\ne8 76 ed ff ff\n'
p152
S'.text:00000000004029b0\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029b9\n.text:00000000004029ba\n.text:00000000004029be\n.text:00000000004029c1\n.text:00000000004029c8\n.text:00000000004029cb\n.text:00000000004029d1\n.text:00000000004029d4\n.text:00000000004029db\n.text:00000000004029dd\n.text:00000000004029e2\n.text:00000000004029e4\n.text:00000000004029e9\n.text:00000000004029eb\n.text:00000000004029f0\n.text:00000000004029f4\n.text:00000000004029f9\n.text:00000000004029fc\n.text:0000000000402a01\n.text:0000000000402a04\n.text:0000000000402a07\n.text:0000000000402a0d\n.text:0000000000402a10\n.text:0000000000402a15\n.text:0000000000402a18\n.text:0000000000402a1d\n.text:0000000000402a1f\n.text:0000000000402a21\n.text:0000000000402a28\n.text:0000000000402a30\n.text:0000000000402a35\n.text:0000000000402a38\n.text:0000000000402a3d\n.text:0000000000402a3f\n.text:0000000000402a41\n.text:0000000000402a48\n.text:0000000000402a50\n.text:0000000000402a55\n.text:0000000000402a58\n.text:0000000000402a5d\n.text:0000000000402a5f\n.text:0000000000402a61\n.text:0000000000402a66\n.text:0000000000402a68\n.text:0000000000402a6d\n.text:0000000000402a70\n.text:0000000000402a75\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a88\n.text:0000000000402a8d\n.text:0000000000402a8f\n.text:0000000000402a91\n.text:0000000000402a96\n.text:0000000000402a98\n.text:0000000000402a9d\n.text:0000000000402aa0\n.text:0000000000402aa5\n.text:0000000000402aab\n.text:0000000000402ab0\n.text:0000000000402ab5\n.text:0000000000402ab8\n.text:0000000000402abd\n.text:0000000000402abf\n.text:0000000000402ac1\n.text:0000000000402ac6\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402adb\n.text:0000000000402ae0\n.text:0000000000402ae5\n.text:0000000000402ae8\n.text:0000000000402aed\n.text:0000000000402aef\n.text:0000000000402af1\n.text:0000000000402af6\n.text:0000000000402afb\n.text:0000000000402b00\n.text:0000000000402b03\n.text:0000000000402b08\n.text:0000000000402b0e\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b20\n.text:0000000000402b23\n.text:0000000000402b28\n.text:0000000000402b2d\n.text:0000000000402b30\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3d\n.text:0000000000402b3f\n.text:0000000000402b41\n.text:0000000000402b48\n.text:0000000000402b4b\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b5f\n.text:0000000000402b62\n.text:0000000000402b66\n.text:0000000000402b6d\n.text:0000000000402b72\n.text:0000000000402b77\n.text:0000000000402b7a\n.text:0000000000402b7f\n.text:0000000000402b81\n.text:0000000000402b83\n.text:0000000000402b8a\n.text:0000000000402b8d\n.text:0000000000402b97\n.text:0000000000402b9a\n.text:0000000000402b9e\n.text:0000000000402ba5\n.text:0000000000402ba7\n.text:0000000000402bac\n.text:0000000000402baf\n.text:0000000000402bb4\n.text:0000000000402bb6\n.text:0000000000402bb8\n.text:0000000000402bbf\n.text:0000000000402bc2\n.text:0000000000402bc9\n.text:0000000000402bcc\n.text:0000000000402bd6\n.text:0000000000402bd9\n.text:0000000000402bdd\n.text:0000000000402be0\n.text:0000000000402be5\n.text:0000000000402be7\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf4\n.text:0000000000402bf6\n.text:0000000000402bf8\n.text:0000000000402bff\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c0e\n.text:0000000000402c10\n.text:0000000000402c18\n.text:0000000000402c1d\n.text:0000000000402c22\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2f\n.text:0000000000402c36\n.text:0000000000402c38\n.text:0000000000402c3a\n.text:0000000000402c3d\n.text:0000000000402c42\n.text:0000000000402c44\n.text:0000000000402c47\n.text:0000000000402c49\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c53\n.text:0000000000402c58\n.text:0000000000402c5a\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c64\n.text:0000000000402c66\n.text:0000000000402c6b\n.text:0000000000402c6e\n.text:0000000000402c73\n.text:0000000000402c75\n.text:0000000000402c7b\n.text:0000000000402c80\n.text:0000000000402c82\n.text:0000000000402c89\n.text:0000000000402c8c\n.text:0000000000402c8e\n.text:0000000000402c91\n.text:0000000000402c93\n.text:0000000000402c9b\n.text:0000000000402ca0\n.text:0000000000402ca2\n.text:0000000000402ca6\n.text:0000000000402ca8\n.text:0000000000402caa\n.text:0000000000402cad\n.text:0000000000402cb3\n.text:0000000000402cb8\n.text:0000000000402cbc\n.text:0000000000402cbe\n.text:0000000000402cc3\n.text:0000000000402cc8\n.text:0000000000402ccd\n.text:0000000000402cd0\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdb\n.text:0000000000402ce0\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402ced\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cfa\n.text:0000000000402d00\n.text:0000000000402d03\n.text:0000000000402d06\n.text:0000000000402d0c\n.text:0000000000402d11\n.text:0000000000402d14\n.text:0000000000402d16\n.text:0000000000402d1d\n.text:0000000000402d24\n.text:0000000000402d29\n.text:0000000000402d2e\n.text:0000000000402d36\n.text:0000000000402d38\n.text:0000000000402d3a\n.text:0000000000402d41\n.text:0000000000402d43\n.text:0000000000402d45\n.text:0000000000402d47\n.text:0000000000402d4c\n.text:0000000000402d51\n.text:0000000000402d58\n.text:0000000000402d60\n.text:0000000000402d62\n.text:0000000000402d6d\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d82\n.text:0000000000402d8a\n.text:0000000000402d8c\n.text:0000000000402d93\n.text:0000000000402d99\n.text:0000000000402d9f\n.text:0000000000402da1\n.text:0000000000402da7\n.text:0000000000402dad\n.text:0000000000402db3\n.text:0000000000402db6\n.text:0000000000402dbc\n.text:0000000000402dc2\n.text:0000000000402dc5\n.text:0000000000402dcb\n.text:0000000000402dce\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402ddc\n.text:0000000000402dde\n.text:0000000000402de0\n.text:0000000000402de7\n.text:0000000000402dee\n.text:0000000000402df5\n.text:0000000000402df9\n.text:0000000000402dfb\n.text:0000000000402dfd\n.text:0000000000402e00\n.text:0000000000402e02\n.text:0000000000402e09\n.text:0000000000402e0d\n.text:0000000000402e0f\n.text:0000000000402e15\n.text:0000000000402e18\n.text:0000000000402e1a\n.text:0000000000402e1c\n.text:0000000000402e1f\n.text:0000000000402e26\n.text:0000000000402e2d\n.text:0000000000402e34\n.text:0000000000402e37\n.text:0000000000402e39\n.text:0000000000402e3b\n.text:0000000000402e3f\n.text:0000000000402e41\n.text:0000000000402e48\n.text:0000000000402e4b\n.text:0000000000402e4d\n.text:0000000000402e53\n.text:0000000000402e56\n.text:0000000000402e58\n.text:0000000000402e5a\n.text:0000000000402e5d\n.text:0000000000402e64\n.text:0000000000402e6b\n.text:0000000000402e72\n.text:0000000000402e79\n.text:0000000000402e7b\n.text:0000000000402e7d\n.text:0000000000402e80\n.text:0000000000402e82\n.text:0000000000402e89\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e98\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402e9f\n.text:0000000000402ea7\n.text:0000000000402ea9\n.text:0000000000402eb0\n.text:0000000000402eb3\n.text:0000000000402eb7\n.text:0000000000402eb9\n.text:0000000000402ebf\n.text:0000000000402ec5\n.text:0000000000402ec8\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ece\n.text:0000000000402ed4\n.text:0000000000402eda\n.text:0000000000402edf\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402eea\n.text:0000000000402ef1\n.text:0000000000402ef4\n.text:0000000000402efa\n.text:0000000000402f00\n.text:0000000000402f03\n.text:0000000000402f08\n.text:0000000000402f0a\n.text:0000000000402f0c\n.text:0000000000402f0e\n.text:0000000000402f13\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f20\n.text:0000000000402f25\n.text:0000000000402f27\n.text:0000000000402f29\n.text:0000000000402f2c\n.text:0000000000402f31\n.text:0000000000402f37\n.text:0000000000402f3a\n.text:0000000000402f3f\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f4a\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f57\n.text:0000000000402f5c\n.text:0000000000402f5e\n.text:0000000000402f60\n.text:0000000000402f63\n.text:0000000000402f68\n.text:0000000000402f6e\n.text:0000000000402f71\n.text:0000000000402f76\n.text:0000000000402f78\n.text:0000000000402f7a\n.text:0000000000402f7c\n.text:0000000000402f81\n.text:0000000000402f86\n.text:0000000000402f8b\n.text:0000000000402f8e\n.text:0000000000402f93\n.text:0000000000402f95\n.text:0000000000402f97\n.text:0000000000402f9a\n.text:0000000000402f9f\n.text:0000000000402fa5\n.text:0000000000402fab\n.text:0000000000402fb0\n.text:0000000000402fb2\n.text:0000000000402fb4\n.text:0000000000402fb6\n.text:0000000000402fbb\n.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fcd\n.text:0000000000402fcf\n.text:0000000000402fd1\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdf\n.text:0000000000402fe5\n.text:0000000000402fea\n.text:0000000000402fec\n.text:0000000000402fee\n.text:0000000000402ff4\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403005\n.text:000000000040300a\n.text:000000000040300f\n.text:0000000000403014\n.text:0000000000403017\n.text:000000000040301c\n.text:000000000040301e\n.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302e\n.text:0000000000403030\n.text:0000000000403032\n.text:0000000000403039\n.text:000000000040303c\n.text:0000000000403042\n.text:0000000000403048\n.text:000000000040304a\n.text:000000000040304c\n.text:0000000000403053\n.text:0000000000403056\n.text:000000000040305c\n.text:0000000000403060\n.text:0000000000403061\n.text:0000000000403063\n.text:0000000000403065\n.text:0000000000403067\n.text:0000000000403069\n.text:000000000040306a\n.text:000000000040306b\n.text:000000000040306d\n.text:0000000000403072\n.text:0000000000403077\n.text:000000000040307c\n.text:000000000040307f\n.text:0000000000403082\n.text:0000000000403087\n.text:000000000040308a\n.text:000000000040308c\n.text:000000000040308e\n.text:0000000000403090\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a2\n.text:00000000004030a4\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b3\n.text:00000000004030b6\n.text:00000000004030bb\n.text:00000000004030bd\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030c9\n.text:00000000004030ce\n.text:00000000004030d1\n.text:00000000004030d6\n.text:00000000004030d8\n.text:00000000004030da\n.text:00000000004030df\n.text:00000000004030e4\n.text:00000000004030e9\n.text:00000000004030ec\n.text:00000000004030f2\n.text:00000000004030f7\n.text:00000000004030fc\n.text:00000000004030fe\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310a\n.text:000000000040310c\n.text:000000000040310e\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311b\n.text:0000000000403120\n.text:0000000000403125\n'
p153
tp154
sS'dd_copy'
p155
(S'\n__stdcall dd_copy()\n'
p156
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aint dd_copy(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  uintmax_t uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  uintmax_t uVar6;\u000a  undefined8 uVar7;\u000a  char *buf;\u000a  ulong uVar8;\u000a  size_t sVar9;\u000a  uintmax_t *puVar10;\u000a  xtime_t progress_time;\u000a  size_t *psVar11;\u000a  __off_t _Var12;\u000a  uint *puVar13;\u000a  uint uVar14;\u000a  ulong offset;\u000a  size_t __n;\u000a  ulong uVar15;\u000a  int iVar16;\u000a  bool bVar17;\u000a  stat stdout_stat;\u000a  size_t local_c8;\u000a  stat local_c0;\u000a  \u000a  sVar9 = skip_bytes;\u000a  uVar3 = skip_records;\u000a  __n = input_blocksize;\u000a  uVar2 = input_offset;\u000a  if ((((skip_bytes | skip_records) != 0) &&\u000a      ((uVar6 = skip((char *)0x0,(uintmax_t)input_file,skip_records,(size_t *)input_blocksize),\u000a       uVar6 != 0 ||\u000a       ((uVar2 + sVar9 + __n * uVar3 != input_offset && (input_offset_overflow == false)))))) &&\u000a     (status_level != 1)) {\u000a    uVar7 = dcgettext(0,"%s: cannot skip to specified offset",5);\u000a    buf = quotearg_n_style_colon((char *)0x0);\u000a    nl_error((char *)0x0,0,uVar7,buf);\u000a  }\u000a  uVar15 = local_c0.st_dev;\u000a  if ((seek_bytes | seek_records) != 0) {\u000a    local_c0.st_dev = seek_bytes;\u000a    uVar8 = skip((char *)0x1,(uintmax_t)output_file,seek_records,(size_t *)output_blocksize);\u000a    uVar15 = local_c0.st_dev;\u000a    if ((local_c0.st_dev | uVar8) != 0) {\u000a      __n = local_c0.st_dev;\u000a      if (uVar8 != 0) {\u000a        __n = output_blocksize;\u000a      }\u000a      memset(obuf,0,__n);\u000a      offset = local_c0.st_dev;\u000a      do {\u000a        __n = output_blocksize;\u000a        if (uVar8 == 0) {\u000a          __n = offset;\u000a        }\u000a        sVar9 = iwrite();\u000a        if (sVar9 != __n) {\u000a          puVar13 = (uint *)__errno_location();\u000a          uVar14 = *puVar13;\u000a          uVar7 = dcgettext(0,"writing to %s",5);\u000a          buf = quotearg_style((char *)0x4);\u000a          nl_error((char *)0x0,(ulong)uVar14,uVar7,buf);\u000a                    /* WARNING: Subroutine does not return */\u000a          quit();\u000a        }\u000a        uVar1 = uVar8 - 1;\u000a        bVar17 = uVar8 != 0;\u000a        uVar15 = uVar8;\u000a        if (bVar17) {\u000a          uVar8 = uVar1;\u000a          uVar15 = offset;\u000a        }\u000a      } while (((offset | uVar1) != 0) && (offset = uVar15, bVar17));\u000a    }\u000a  }\u000a  local_c0.st_dev = uVar15;\u000a  if ((max_bytes | max_records) == 0) {\u000a    return 0;\u000a  }\u000a  alloc_ibuf();\u000a  alloc_obuf();\u000a  iVar16 = 0;\u000a  uVar15 = 0;\u000ajoined_r0x00403619:\u000a  if ((status_level == 4) && (progress_time = gethrxtime(), next_time <= progress_time)) {\u000a    print_xfer_stats(progress_time);\u000a    next_time = next_time + 1000000000;\u000a  }\u000a  if (r_full + r_partial < (max_records + 1) - (ulong)(max_bytes == 0)) {\u000a    if ((conversions_mask & 0x500U) == 0x500) {\u000a      memset(ibuf,(uint)(byte)(((conversions_mask & 0x18U) != 0) << 5),input_blocksize);\u000a    }\u000a    psVar11 = &max_bytes;\u000a    if (r_full + r_partial < max_records) {\u000a      psVar11 = &input_blocksize;\u000a    }\u000a    uVar8 = (*iread_fnc)(0,ibuf,*psVar11);\u000a    if ((long)uVar8 < 0) {\u000a      if (((conversions_mask & 0x100U) == 0) || (status_level != 1)) {\u000a        puVar13 = (uint *)__errno_location();\u000a        uVar14 = *puVar13;\u000a        uVar7 = dcgettext(0,"error reading %s",5);\u000a        buf = quotearg_style((char *)0x4);\u000a        nl_error((char *)0x0,(ulong)uVar14,uVar7,buf);\u000a      }\u000a      if ((conversions_mask & 0x100U) != 0) goto code_r0x00403762;\u000a      iVar16 = 1;\u000a    }\u000a    else {\u000a      if (i_nocache == 1) {\u000a        invalidate_cache(0);\u000a      }\u000a      offset = uVar8;\u000a      if (uVar8 != 0) goto LAB_004037ea;\u000a    }\u000a  }\u000a  if (char_is_saved == 1) {\u000a    if ((conversions_mask & 8U) == 0) {\u000a      if ((conversions_mask & 0x10U) == 0) {\u000a        uVar15 = oc + 1;\u000a        buf = obuf + oc;\u000a        oc = uVar15;\u000a        *buf = saved_char;\u000a        if (output_blocksize <= uVar15) {\u000a          write_output();\u000a        }\u000a      }\u000a      else {\u000a        copy_with_unblock(&saved_char,1);\u000a      }\u000a    }\u000a    else {\u000a      copy_with_block(&saved_char,1);\u000a    }\u000a  }\u000a  if (((conversions_mask & 8U) != 0) && (__n = col, col != 0)) {\u000a    while (__n < conversion_blocksize) {\u000a      uVar15 = oc + 1;\u000a      buf = obuf + oc;\u000a      oc = uVar15;\u000a      *buf = space_character;\u000a      if (output_blocksize <= uVar15) {\u000a        write_output();\u000a      }\u000a      __n = __n + 1;\u000a    }\u000a  }\u000a  uVar15 = oc;\u000a  if ((col != 0) && (uVar15 = oc, (conversions_mask & 0x10U) != 0)) {\u000a    uVar15 = oc + 1;\u000a    buf = obuf + oc;\u000a    oc = uVar15;\u000a    *buf = newline_character;\u000a    if (output_blocksize <= uVar15) {\u000a      write_output();\u000a      uVar15 = oc;\u000a    }\u000a  }\u000a  if (uVar15 != 0) {\u000a    __n = iwrite();\u000a    w_bytes = w_bytes + __n;\u000a    if (__n != 0) {\u000a      w_partial = w_partial + 1;\u000a    }\u000a    if (__n != oc) {\u000aLAB_00403a8b:\u000a      puVar13 = (uint *)__errno_location();\u000a      uVar14 = *puVar13;\u000a      buf = "error writing %s";\u000a      goto LAB_00403bc1;\u000a    }\u000a  }\u000a  if (final_op_was_seek == 1) {\u000a    iVar5 = fstat(1,&local_c0);\u000a    if (iVar5 != 0) {\u000a      puVar13 = (uint *)__errno_location();\u000a      uVar14 = *puVar13;\u000a      buf = "cannot fstat %s";\u000a      goto LAB_00403bc1;\u000a    }\u000a    if (((((local_c0.st_mode & 0xf000) == 0x8000) && (_Var12 = lseek(1,0,1), -1 < _Var12)) &&\u000a        (local_c0.st_size < _Var12)) && (iVar5 = iftruncate(), iVar5 != 0)) {\u000a      puVar13 = (uint *)__errno_location();\u000a      uVar14 = *puVar13;\u000a      uVar7 = dcgettext(0,"failed to truncate to %ld bytes in output file %s",5);\u000a      buf = quotearg_style((char *)0x4);\u000a      nl_error((char *)0x0,(ulong)uVar14,uVar7,_Var12,buf);\u000a      return 1;\u000a    }\u000a  }\u000a  if (((conversions_mask & 0x4000U) != 0) && (iVar5 = fdatasync(1), iVar5 != 0)) {\u000a    puVar13 = (uint *)__errno_location();\u000a    uVar14 = *puVar13;\u000a    if ((uVar14 != 0x16) && (uVar14 != 0x26)) {\u000a      uVar7 = dcgettext(0,"fdatasync failed for %s",5);\u000a      buf = quotearg_style((char *)0x4);\u000a      nl_error((char *)0x0,(ulong)uVar14,uVar7,buf);\u000a      iVar16 = 1;\u000a    }\u000a    conversions_mask = conversions_mask | 0x8000;\u000a  }\u000a  if (-1 < (short)conversions_mask) {\u000a    return iVar16;\u000a  }\u000a  do {\u000a    iVar5 = fsync(1);\u000a    if (iVar5 == 0) {\u000a      return iVar16;\u000a    }\u000a    puVar13 = (uint *)__errno_location();\u000a    uVar14 = *puVar13;\u000a  } while (uVar14 == 4);\u000a  buf = "fsync failed for %s";\u000aLAB_00403bc1:\u000a  uVar7 = dcgettext(0,buf,5);\u000a  buf = quotearg_style((char *)0x4);\u000a  nl_error((char *)0x0,(ulong)uVar14,uVar7,buf);\u000a  return 1;\u000acode_r0x00403762:\u000a  print_stats();\u000a  __n = input_blocksize - uVar15;\u000a  invalidate_cache(0);\u000a  _Var4 = advance_input_after_read_error(__n);\u000a  if (_Var4 == false) {\u000a    input_seekable = false;\u000a    input_seek_errno = 0x1d;\u000a    iVar16 = 1;\u000a  }\u000a  if ((uVar15 == 0) && (bVar17 = (conversions_mask & 0x400U) == 0, !bVar17)) {\u000a    offset = 0;\u000a    if (bVar17) {\u000a      offset = uVar8;\u000a    }\u000aLAB_004037ea:\u000a    local_c8 = offset;\u000a    advance_input_offset(offset);\u000a    uVar15 = local_c8;\u000a    if (offset < input_blocksize) {\u000a      r_partial = r_partial + 1;\u000a      if ((conversions_mask & 0x400U) != 0) {\u000a        if ((conversions_mask & 0x100U) == 0) {\u000a          memset(ibuf + local_c8,(uint)(byte)(((conversions_mask & 0x18U) != 0) << 5),\u000a                 input_blocksize - local_c8);\u000a        }\u000a        local_c8 = input_blocksize;\u000a      }\u000a    }\u000a    else {\u000a      r_full = r_full + 1;\u000a      uVar15 = 0;\u000a    }\u000a    __n = local_c8;\u000a    if (ibuf == obuf) {\u000a      sVar9 = iwrite();\u000a      w_bytes = w_bytes + sVar9;\u000a      if (sVar9 != __n) goto LAB_00403a8b;\u000a      puVar10 = &w_partial;\u000a      if (__n == input_blocksize) {\u000a        puVar10 = &w_full;\u000a      }\u000a      *puVar10 = *puVar10 + 1;\u000a    }\u000a    else {\u000a      if (translation_needed == 1) {\u000a        translate_buffer(ibuf,local_c8);\u000a      }\u000a      buf = ibuf;\u000a      if ((char)conversions_mask < 0) {\u000a        buf = swab_buffer(ibuf,&local_c8);\u000a      }\u000a      if ((conversions_mask & 8U) == 0) {\u000a        if ((conversions_mask & 0x10U) == 0) {\u000a          copy_simple(buf,local_c8);\u000a        }\u000a        else {\u000a          copy_with_unblock(buf,local_c8);\u000a        }\u000a      }\u000a      else {\u000a        copy_with_block(buf,local_c8);\u000a      }\u000a    }\u000a  }\u000a  goto joined_r0x00403619;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,qword ptr [0x0060e5a0]\nMOV RBP,qword ptr [0x0060e5a8]\nMOV RAX,RBP\nOR RAX,RBX\nJZ 0x00403526\nMOV R15,qword ptr [0x0060e4b0]\nMOV R14,qword ptr [0x0060e590]\nMOV RSI,qword ptr [0x0060e4a0]\nXOR EDI,EDI\nMOV R8D,0x60e5a8\nMOV RDX,RBX\nMOV RCX,R14\nCALL 0x00404580\nTEST RAX,RAX\nJNZ 0x004034e5\nIMUL R14,RBX\nADD R15,RBP\nADD R15,R14\nCMP R15,qword ptr [0x0060e4b0]\nJZ 0x00403526\nMOV AL,byte ptr [0x0060e601]\nTEST AL,AL\nJNZ 0x00403526\nCMP dword ptr [0x0060e2b0],0x1\nJZ 0x00403526\nXOR EDI,EDI\nMOV ESI,0x40a363\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RDX,qword ptr [0x0060e4a0]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00403360\nMOV RAX,qword ptr [0x0060e4e0]\nOR RAX,qword ptr [0x0060e4d0]\nJZ 0x004035ec\nMOV RAX,qword ptr [0x0060e4e0]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV RDX,qword ptr [0x0060e4d0]\nMOV RCX,qword ptr [0x0060e4d8]\nLEA R8,[RSP + 0x8]\nMOV EDI,0x1\nCALL 0x00404580\nMOV RBX,RAX\nMOV RDX,qword ptr [RSP + 0x8]\nMOV RAX,RDX\nOR RAX,RBX\nJZ 0x004035ec\nTEST RBX,RBX\nMOV RDI,qword ptr [0x0060e608]\nCMOVNZ RDX,qword ptr [0x0060e4d8]\nXOR ESI,ESI\nCALL 0x00401ac0\nMOV R14,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nTEST RBX,RBX\nMOV RBP,qword ptr [0x0060e4d8]\nCMOVZ RBP,R14\nMOV RDI,qword ptr [0x0060e608]\nMOV RSI,RBP\nCALL 0x00404840\nCMP RAX,RBP\nJNZ 0x00403c0b\nLEA RDX,[RBX + -0x1]\nTEST RBX,RBX\nMOV RAX,R14\nCMOVZ RAX,RBX\nCMOVNZ RBX,RDX\nSETZ CL\nOR R14,RDX\nJZ 0x004035e7\nTEST CL,CL\nMOV R14,RAX\nJZ 0x004035a0\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [0x0060e4f8]\nOR RAX,qword ptr [0x0060e2a8]\nJZ 0x0040361d\nCALL 0x00404a10\nCALL 0x00404ac0\nMOV R13D,0x60e590\nXOR R15D,R15D\nXOR R14D,R14D\nCMP dword ptr [0x0060e2b0],0x4\nJNZ 0x0040366a\nJMP 0x00403649\nXOR R15D,R15D\nJMP 0x00403bf6\nCMP RBX,qword ptr [0x0060e590]\nMOV EAX,0x60e5e8\nMOV ECX,0x60e5e0\nCMOVZ RAX,RCX\nINC qword ptr [RAX]\nNOP dword ptr [RAX]\nCMP dword ptr [0x0060e2b0],0x4\nJNZ 0x0040366a\nCALL 0x00405480\nCMP qword ptr [0x0060e4f0],RAX\nJG 0x0040366a\nMOV RDI,RAX\nCALL 0x004042f0\nADD qword ptr [0x0060e4f0],0x3b9aca00\nMOV RAX,qword ptr [0x0060e5d0]\nADD RAX,qword ptr [0x0060e5d8]\nMOV RCX,qword ptr [0x0060e2a8]\nCMP qword ptr [0x0060e4f8],0x1\nSBB RCX,-0x1\nCMP RAX,RCX\nJNC 0x00403916\nMOV EAX,dword ptr [0x0060e4cc]\nMOV ECX,EAX\nAND ECX,0x500\nCMP ECX,0x500\nJNZ 0x004036c8\nMOV RDI,qword ptr [0x0060e610]\nTEST AL,0x18\nSETNZ AL\nSHL AL,0x5\nMOV RDX,qword ptr [0x0060e590]\nMOVZX ESI,AL\nCALL 0x00401ac0\nMOV RAX,qword ptr [0x0060e5d0]\nADD RAX,qword ptr [0x0060e5d8]\nCMP RAX,qword ptr [0x0060e2a8]\nMOV RSI,qword ptr [0x0060e610]\nMOV EAX,0x60e4f8\nCMOVC RAX,R13\nMOV RDX,qword ptr [RAX]\nXOR EDI,EDI\nCALL qword ptr [0x0060e5b8]\nMOV RBX,RAX\nTEST RBX,RBX\nJNS 0x004037ce\nTEST byte ptr [0x0060e4cd],0x1\nJZ 0x00403716\nCMP dword ptr [0x0060e2b0],0x1\nJZ 0x00403755\nCALL 0x00401900\nMOV R12D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a395\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4a0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nCALL 0x00403360\nTEST byte ptr [0x0060e4cd],0x1\nJZ 0x00403910\nCALL 0x00404210\nMOV RBP,qword ptr [0x0060e590]\nSUB RBP,R14\nXOR EDI,EDI\nMOV RSI,RBP\nCALL 0x00403c50\nMOV RDI,RBP\nCALL 0x00404b80\nTEST AL,AL\nJNZ 0x0040379e\nMOV byte ptr [0x0060e4ac],0x0\nMOV dword ptr [0x0060e4b8],0x1d\nMOV R15D,0x1\nTEST R14,R14\nJNZ 0x00403640\nMOV EAX,dword ptr [0x0060e4cc]\nMOV ECX,0x400\nAND EAX,ECX\nTEST EAX,EAX\nJZ 0x00403640\nMOV EAX,0x0\nCMOVZ RAX,RBX\nTEST R14,R14\nCMOVZ RBX,RAX\nJMP 0x004037ea\nCMP byte ptr [0x0060e500],0x1\nJNZ 0x004037e1\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00403c50\nTEST RBX,RBX\nJZ 0x00403916\nMOV qword ptr [RSP],RBX\nMOV RDI,RBX\nCALL 0x00404d00\nCMP RBX,qword ptr [0x0060e590]\nJNC 0x0040384b\nINC qword ptr [0x0060e5d8]\nMOV R14,qword ptr [RSP]\nMOV EAX,dword ptr [0x0060e4cc]\nTEST AH,0x4\nJZ 0x00403855\nTEST AH,0x1\nJNZ 0x0040383e\nMOV RDI,qword ptr [0x0060e610]\nADD RDI,R14\nTEST AL,0x18\nSETNZ AL\nSHL AL,0x5\nMOV RDX,qword ptr [0x0060e590]\nSUB RDX,R14\nMOVZX ESI,AL\nCALL 0x00401ac0\nMOV RAX,qword ptr [0x0060e590]\nMOV qword ptr [RSP],RAX\nJMP 0x00403855\nINC qword ptr [0x0060e5d0]\nXOR R14D,R14D\nMOV RDI,qword ptr [0x0060e610]\nMOV RAX,qword ptr [0x0060e608]\nCMP RDI,RAX\nJZ 0x004038be\nCMP byte ptr [0x0060e600],0x1\nJNZ 0x0040387a\nMOV RSI,qword ptr [RSP]\nCALL 0x00404d20\nMOV RDI,qword ptr [0x0060e610]\nCMP byte ptr [0x0060e4cc],0x0\nJNS 0x00403895\nMOV RSI,RSP\nCALL 0x00404d60\nMOV RDI,RAX\nMOV EAX,dword ptr [0x0060e4cc]\nTEST AL,0x8\nMOV RSI,qword ptr [RSP]\nJNZ 0x004038e2\nTEST AL,0x10\nJNZ 0x004038f9\nCALL 0x00405020\nCMP dword ptr [0x0060e2b0],0x4\nJZ 0x00403649\nJMP 0x0040366a\nMOV RBX,qword ptr [RSP]\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00404840\nADD qword ptr [0x0060e5f8],RAX\nCMP RAX,RBX\nJZ 0x00403625\nJMP 0x00403a8b\nCALL 0x00404dd0\nCMP dword ptr [0x0060e2b0],0x4\nJZ 0x00403649\nJMP 0x0040366a\nCALL 0x00404ee0\nCMP dword ptr [0x0060e2b0],0x4\nJZ 0x00403649\nJMP 0x0040366a\nMOV R15D,0x1\nCMP byte ptr [0x0060e618],0x1\nJNZ 0x0040397f\nMOV EAX,dword ptr [0x0060e4cc]\nTEST AL,0x8\nJNZ 0x0040395f\nTEST AL,0x10\nJNZ 0x00403970\nMOV AL,byte ptr [0x0060e619]\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x0040397f\nCALL 0x00405090\nJMP 0x0040397f\nMOV EDI,0x60e619\nMOV ESI,0x1\nCALL 0x00404dd0\nJMP 0x0040397f\nMOV EDI,0x60e619\nMOV ESI,0x1\nCALL 0x00404ee0\nMOV EAX,dword ptr [0x0060e4cc]\nMOV RBX,qword ptr [0x0060e628]\nTEST AL,0x8\nJZ 0x004039e6\nTEST RBX,RBX\nJNZ 0x004039a3\nJMP 0x004039e6\nINC RBX\nCMP RBX,qword ptr [0x0060e598]\nJNC 0x004039df\nMOVZX EAX,byte ptr [0x0060e2b5]\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x004039a0\nCALL 0x00405090\nJMP 0x004039a0\nMOV RBX,qword ptr [0x0060e628]\nTEST RBX,RBX\nJZ 0x00403a24\nTEST byte ptr [0x0060e4cc],0x10\nJZ 0x00403a24\nMOV AL,byte ptr [0x0060e2b4]\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x00403a2b\nCALL 0x00405090\nMOV RSI,qword ptr [0x0060e620]\nTEST RSI,RSI\nJZ 0x00403a58\nMOV RDI,qword ptr [0x0060e608]\nCALL 0x00404840\nADD qword ptr [0x0060e5f8],RAX\nTEST RAX,RAX\nJZ 0x00403a4f\nINC qword ptr [0x0060e5e8]\nCMP RAX,qword ptr [0x0060e620]\nJNZ 0x00403a8b\nCMP byte ptr [0x0060e630],0x1\nJNZ 0x00403b24\nLEA RSI,[RSP + 0x8]\nMOV EDI,0x1\nCALL 0x004090f0\nTEST EAX,EAX\nJZ 0x00403a9e\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409e5c\nJMP 0x00403bc1\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a3a6\nJMP 0x00403bc1\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0x8000\nJNZ 0x00403b24\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x1\nCALL 0x00401a90\nMOV RBX,RAX\nTEST RBX,RBX\nJS 0x00403b24\nCMP qword ptr [RSP + 0x38],RBX\nJGE 0x00403b24\nMOV RDI,RBX\nCALL 0x00403430\nTEST EAX,EAX\nJZ 0x00403b24\nCALL 0x00401900\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a3b7\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R15,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00403360\nJMP 0x00403bf0\nTEST byte ptr [0x0060e4cd],0x40\nJZ 0x00403b8f\nMOV EDI,0x1\nCALL 0x00401910\nTEST EAX,EAX\nJZ 0x00403b8f\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x16\nJZ 0x00403b88\nCMP EBX,0x26\nJZ 0x00403b88\nXOR EDI,EDI\nMOV ESI,0x40a3e9\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nMOV R15D,0x1\nOR byte ptr [0x0060e4cd],0x80\nCMP word ptr [0x0060e4cc],0x0\nJNS 0x00403bf6\nNOP dword ptr [RAX]\nMOV EDI,0x1\nCALL 0x00401c90\nTEST EAX,EAX\nJZ 0x00403bf6\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x4\nJZ 0x00403ba0\nXOR EDI,EDI\nMOV ESI,0x40a401\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nMOV R15D,0x1\nMOV EAX,R15D\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a387\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nCALL 0x00404a00\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 8b 1d 18 b1 20 00\n48 8b 2d 19 b1 20 00\n48 89 e8\n48 09 d8\n0f 84 8b 00 00 00\n4c 8b 3d 0e b0 20 00\n4c 8b 35 e7 b0 20 00\n48 8b 35 f0 af 20 00\n31 ff\n41 b8 a8 e5 60 00\n48 89 da\n4c 89 f1\ne8 bd 10 00 00\n48 85 c0\n75 1d\n4c 0f af f3\n49 01 ef\n4d 01 f7\n4c 3b 3d d7 af 20 00\n74 4b\n8a 05 20 b1 20 00\n84 c0\n75 41\n83 3d c4 ad 20 00 01\n74 38\n31 ff\nbe 63 a3 40 00\nba 05 00 00 00\ne8 01 e5 ff ff\n48 89 c3\n48 8b 15 97 af 20 00\n31 ff\nbe 03 00 00 00\ne8 2b 3e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 3a fe ff ff\n48 8b 05 b3 af 20 00\n48 0b 05 9c af 20 00\n0f 84 b2 00 00 00\n48 8b 05 9f af 20 00\n48 89 44 24 08\n48 8b 35 73 af 20 00\n48 8b 15 7c af 20 00\n48 8b 0d 7d af 20 00\n4c 8d 44 24 08\nbf 01 00 00 00\ne8 16 10 00 00\n48 89 c3\n48 8b 54 24 08\n48 89 d0\n48 09 d8\n74 72\n48 85 db\n48 8b 3d 84 b0 20 00\n48 0f 45 15 4c af 20 00\n31 f6\ne8 2d e5 ff ff\n4c 8b 74 24 08\n0f 1f 84 00 00 00 00 00\n48 85 db\n48 8b 2d 2e af 20 00\n49 0f 44 ee\n48 8b 3d 53 b0 20 00\n48 89 ee\ne8 83 12 00 00\n48 39 e8\n0f 85 45 06 00 00\n48 8d 53 ff\n48 85 db\n4c 89 f0\n48 0f 44 c3\n48 0f 45 da\n0f 94 c1\n49 09 d6\n74 07\n84 c9\n49 89 c6\n74 b9\n48 89 44 24 08\n48 8b 05 05 af 20 00\n48 0b 05 ae ac 20 00\n74 21\ne8 0f 14 00 00\ne8 ba 14 00 00\n41 bd 90 e5 60 00\n45 31 ff\n45 31 f6\n83 3d 97 ac 20 00 04\n75 4f\neb 2c\n45 31 ff\ne9 d1 05 00 00\n48 3b 1d 64 af 20 00\nb8 e8 e5 60 00\nb9 e0 e5 60 00\n48 0f 44 c1\n48 ff 00\n0f 1f 00\n83 3d 69 ac 20 00 04\n75 21\ne8 32 1e 00 00\n48 39 05 9b ae 20 00\n7f 13\n48 89 c7\ne8 91 0c 00 00\n48 81 05 86 ae 20 00 00 ca 9a 3b\n48 8b 05 5f af 20 00\n48 03 05 60 af 20 00\n48 8b 0d 29 ac 20 00\n48 83 3d 71 ae 20 00 01\n48 83 d9 ff\n48 39 c8\n0f 83 82 02 00 00\n8b 05 32 ae 20 00\n89 c1\n81 e1 00 05 00 00\n81 f9 00 05 00 00\n75 1e\n48 8b 3d 5f af 20 00\na8 18\n0f 95 c0\nc0 e0 05\n48 8b 15 d0 ae 20 00\n0f b6 f0\ne8 f8 e3 ff ff\n48 8b 05 01 af 20 00\n48 03 05 02 af 20 00\n48 3b 05 cb ab 20 00\n48 8b 35 2c af 20 00\nb8 f8 e4 60 00\n49 0f 42 c5\n48 8b 10\n31 ff\nff 15 c0 ae 20 00\n48 89 c3\n48 85 db\n0f 89 ca 00 00 00\nf6 05 c2 ad 20 00 01\n74 09\n83 3d 9c ab 20 00 01\n74 3f\ne8 e5 e1 ff ff\n44 8b 20\n31 ff\nbe 95 a3 40 00\nba 05 00 00 00\ne8 d1 e2 ff ff\n48 89 c5\n48 8b 35 67 ad 20 00\nbf 04 00 00 00\ne8 1d 3b 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 ea\ne8 0b fc ff ff\nf6 05 71 ad 20 00 01\n0f 84 ae 01 00 00\ne8 a9 0a 00 00\n48 8b 2d 22 ae 20 00\n4c 29 f5\n31 ff\n48 89 ee\ne8 d5 04 00 00\n48 89 ef\ne8 fd 13 00 00\n84 c0\n75 17\nc6 05 1e ad 20 00 00\nc7 05 20 ad 20 00 1d 00 00 00\n41 bf 01 00 00 00\n4d 85 f6\n0f 85 99 fe ff ff\n8b 05 1f ad 20 00\nb9 00 04 00 00\n21 c8\n85 c0\n0f 84 84 fe ff ff\nb8 00 00 00 00\n48 0f 44 c3\n4d 85 f6\n48 0f 44 d8\neb 1c\n80 3d 2b ad 20 00 01\n75 0a\n31 ff\n48 89 de\ne8 6f 04 00 00\n48 85 db\n0f 84 2c 01 00 00\n48 89 1c 24\n48 89 df\ne8 0a 15 00 00\n48 3b 1d 93 ad 20 00\n73 4c\n48 ff 05 d2 ad 20 00\n4c 8b 34 24\n8b 05 bc ac 20 00\nf6 c4 04\n74 40\nf6 c4 01\n75 24\n48 8b 3d ef ad 20 00\n4c 01 f7\na8 18\n0f 95 c0\nc0 e0 05\n48 8b 15 5d ad 20 00\n4c 29 f2\n0f b6 f0\ne8 82 e2 ff ff\n48 8b 05 4b ad 20 00\n48 89 04 24\neb 0a\n48 ff 05 7e ad 20 00\n45 31 f6\n48 8b 3d b4 ad 20 00\n48 8b 05 a5 ad 20 00\n48 39 c7\n74 56\n80 3d 91 ad 20 00 01\n75 09\n48 8b 34 24\ne8 a6 14 00 00\n48 8b 3d 8f ad 20 00\n80 3d 44 ac 20 00 00\n79 0b\n48 89 e6\ne8 ce 14 00 00\n48 89 c7\n8b 05 31 ac 20 00\na8 08\n48 8b 34 24\n75 3f\na8 10\n75 52\ne8 74 17 00 00\n83 3d fd a9 20 00 04\n0f 84 90 fd ff ff\ne9 ac fd ff ff\n48 8b 1c 24\n48 89 c7\n48 89 de\ne8 73 0f 00 00\n48 01 05 24 ad 20 00\n48 39 d8\n0f 84 48 fd ff ff\ne9 a9 01 00 00\ne8 e9 14 00 00\n83 3d c2 a9 20 00 04\n0f 84 55 fd ff ff\ne9 71 fd ff ff\ne8 e2 15 00 00\n83 3d ab a9 20 00 04\n0f 84 3e fd ff ff\ne9 5a fd ff ff\n41 bf 01 00 00 00\n80 3d fb ac 20 00 01\n75 60\n8b 05 a7 ab 20 00\na8 08\n75 36\na8 10\n75 43\n8a 05 e6 ac 20 00\n48 8b 0d ce ac 20 00\n48 8b 15 df ac 20 00\n48 8d 72 01\n48 89 35 d4 ac 20 00\n88 04 11\n48 3b 35 82 ab 20 00\n72 27\ne8 33 17 00 00\neb 20\nbf 19 e6 60 00\nbe 01 00 00 00\ne8 62 14 00 00\neb 0f\nbf 19 e6 60 00\nbe 01 00 00 00\ne8 61 15 00 00\n8b 05 47 ab 20 00\n48 8b 1d 9c ac 20 00\na8 08\n74 56\n48 85 db\n75 0e\neb 4f\n48 ff c3\n48 3b 1d ee ab 20 00\n73 33\n0f b6 05 02 a9 20 00\n48 8b 0d 4e ac 20 00\n48 8b 15 5f ac 20 00\n48 8d 72 01\n48 89 35 54 ac 20 00\n88 04 11\n48 3b 35 02 ab 20 00\n72 c8\ne8 b3 16 00 00\neb c1\n48 8b 1d 42 ac 20 00\n48 85 db\n74 39\nf6 05 da aa 20 00 10\n74 30\n8a 05 ba a8 20 00\n48 8b 0d 07 ac 20 00\n48 8b 15 18 ac 20 00\n48 8d 72 01\n48 89 35 0d ac 20 00\n88 04 11\n48 3b 35 bb aa 20 00\n72 0c\ne8 6c 16 00 00\n48 8b 35 f5 ab 20 00\n48 85 f6\n74 28\n48 8b 3d d1 ab 20 00\ne8 04 0e 00 00\n48 01 05 b5 ab 20 00\n48 85 c0\n74 07\n48 ff 05 99 ab 20 00\n48 3b 05 ca ab 20 00\n75 33\n80 3d d1 ab 20 00 01\n0f 85 bf 00 00 00\n48 8d 74 24 08\nbf 01 00 00 00\ne8 7c 56 00 00\n85 c0\n74 26\ne8 83 de ff ff\n8b 18\n31 ff\nbe 5c 9e 40 00\ne9 36 01 00 00\ne8 70 de ff ff\n8b 18\n31 ff\nbe a6 a3 40 00\ne9 23 01 00 00\nb8 00 f0 00 00\n23 44 24 20\n3d 00 80 00 00\n75 76\nbf 01 00 00 00\n31 f6\nba 01 00 00 00\ne8 d1 df ff ff\n48 89 c3\n48 85 db\n78 5d\n48 39 5c 24 38\n7d 56\n48 89 df\ne8 5a f9 ff ff\n85 c0\n74 4a\ne8 21 de ff ff\n44 8b 30\n31 ff\nbe b7 a3 40 00\nba 05 00 00 00\ne8 0d df ff ff\n49 89 c7\n48 8b 35 c3 a9 20 00\nbf 04 00 00 00\ne8 59 37 00 00\n48 89 c5\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\n48 89 d9\n49 89 e8\ne8 41 f8 ff ff\ne9 cc 00 00 00\nf6 05 a2 a9 20 00 40\n74 62\nbf 01 00 00 00\ne8 d9 dd ff ff\n85 c0\n74 54\ne8 c0 dd ff ff\n8b 18\n83 fb 16\n74 41\n83 fb 26\n74 3c\n31 ff\nbe e9 a3 40 00\nba 05 00 00 00\ne8 a3 de ff ff\n48 89 c5\n48 8b 35 59 a9 20 00\nbf 04 00 00 00\ne8 ef 36 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 de f7 ff ff\n41 bf 01 00 00 00\n80 0d 3e a9 20 00 80\n66 83 3d 35 a9 20 00 00\n79 5d\n0f 1f 80 00 00 00 00\nbf 01 00 00 00\ne8 e6 e0 ff ff\n85 c0\n74 48\ne8 4d dd ff ff\n8b 18\n83 fb 04\n74 e6\n31 ff\nbe 01 a4 40 00\nba 05 00 00 00\ne8 35 de ff ff\n48 89 c5\n48 8b 35 eb a8 20 00\nbf 04 00 00 00\ne8 81 36 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 70 f7 ff ff\n41 bf 01 00 00 00\n44 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 f0 dc ff ff\n8b 18\n31 ff\nbe 87 a3 40 00\nba 05 00 00 00\ne8 dd dd ff ff\n48 89 c5\n48 8b 35 93 a8 20 00\nbf 04 00 00 00\ne8 29 36 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 18 f7 ff ff\ne8 b3 0d 00 00\n'
p159
S'.text:0000000000403470\n.text:0000000000403471\n.text:0000000000403473\n.text:0000000000403475\n.text:0000000000403477\n.text:0000000000403479\n.text:000000000040347a\n.text:0000000000403481\n.text:0000000000403488\n.text:000000000040348f\n.text:0000000000403492\n.text:0000000000403495\n.text:000000000040349b\n.text:00000000004034a2\n.text:00000000004034a9\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034b8\n.text:00000000004034bb\n.text:00000000004034be\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034c8\n.text:00000000004034cc\n.text:00000000004034cf\n.text:00000000004034d2\n.text:00000000004034d9\n.text:00000000004034db\n.text:00000000004034e1\n.text:00000000004034e3\n.text:00000000004034e5\n.text:00000000004034ec\n.text:00000000004034ee\n.text:00000000004034f0\n.text:00000000004034f5\n.text:00000000004034fa\n.text:00000000004034ff\n.text:0000000000403502\n.text:0000000000403509\n.text:000000000040350b\n.text:0000000000403510\n.text:0000000000403515\n.text:0000000000403518\n.text:000000000040351a\n.text:000000000040351c\n.text:000000000040351e\n.text:0000000000403521\n.text:0000000000403526\n.text:000000000040352d\n.text:0000000000403534\n.text:000000000040353a\n.text:0000000000403541\n.text:0000000000403546\n.text:000000000040354d\n.text:0000000000403554\n.text:000000000040355b\n.text:0000000000403560\n.text:0000000000403565\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403572\n.text:0000000000403575\n.text:0000000000403578\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403584\n.text:000000000040358c\n.text:000000000040358e\n.text:0000000000403593\n.text:0000000000403598\n.text:00000000004035a0\n.text:00000000004035a3\n.text:00000000004035aa\n.text:00000000004035ae\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035bd\n.text:00000000004035c0\n.text:00000000004035c6\n.text:00000000004035ca\n.text:00000000004035cd\n.text:00000000004035d0\n.text:00000000004035d4\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035de\n.text:00000000004035e0\n.text:00000000004035e2\n.text:00000000004035e5\n.text:00000000004035e7\n.text:00000000004035ec\n.text:00000000004035f3\n.text:00000000004035fa\n.text:00000000004035fc\n.text:0000000000403601\n.text:0000000000403606\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403612\n.text:0000000000403619\n.text:000000000040361b\n.text:000000000040361d\n.text:0000000000403620\n.text:0000000000403625\n.text:000000000040362c\n.text:0000000000403631\n.text:0000000000403636\n.text:000000000040363a\n.text:000000000040363d\n.text:0000000000403640\n.text:0000000000403647\n.text:0000000000403649\n.text:000000000040364e\n.text:0000000000403655\n.text:0000000000403657\n.text:000000000040365a\n.text:000000000040365f\n.text:000000000040366a\n.text:0000000000403671\n.text:0000000000403678\n.text:000000000040367f\n.text:0000000000403687\n.text:000000000040368b\n.text:000000000040368e\n.text:0000000000403694\n.text:000000000040369a\n.text:000000000040369c\n.text:00000000004036a2\n.text:00000000004036a8\n.text:00000000004036aa\n.text:00000000004036b1\n.text:00000000004036b3\n.text:00000000004036b6\n.text:00000000004036b9\n.text:00000000004036c0\n.text:00000000004036c3\n.text:00000000004036c8\n.text:00000000004036cf\n.text:00000000004036d6\n.text:00000000004036dd\n.text:00000000004036e4\n.text:00000000004036e9\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f2\n.text:00000000004036f8\n.text:00000000004036fb\n.text:00000000004036fe\n.text:0000000000403704\n.text:000000000040370b\n.text:000000000040370d\n.text:0000000000403714\n.text:0000000000403716\n.text:000000000040371b\n.text:000000000040371e\n.text:0000000000403720\n.text:0000000000403725\n.text:000000000040372a\n.text:000000000040372f\n.text:0000000000403732\n.text:0000000000403739\n.text:000000000040373e\n.text:0000000000403743\n.text:0000000000403746\n.text:0000000000403748\n.text:000000000040374a\n.text:000000000040374d\n.text:0000000000403750\n.text:0000000000403755\n.text:000000000040375c\n.text:0000000000403762\n.text:0000000000403767\n.text:000000000040376e\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403776\n.text:000000000040377b\n.text:000000000040377e\n.text:0000000000403783\n.text:0000000000403785\n.text:0000000000403787\n.text:000000000040378e\n.text:0000000000403798\n.text:000000000040379e\n.text:00000000004037a1\n.text:00000000004037a7\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b4\n.text:00000000004037b6\n.text:00000000004037bc\n.text:00000000004037c1\n.text:00000000004037c5\n.text:00000000004037c8\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d5\n.text:00000000004037d7\n.text:00000000004037d9\n.text:00000000004037dc\n.text:00000000004037e1\n.text:00000000004037e4\n.text:00000000004037ea\n.text:00000000004037ee\n.text:00000000004037f1\n.text:00000000004037f6\n.text:00000000004037fd\n.text:00000000004037ff\n.text:0000000000403806\n.text:000000000040380a\n.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381a\n.text:0000000000403821\n.text:0000000000403824\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382c\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383e\n.text:0000000000403845\n.text:0000000000403849\n.text:000000000040384b\n.text:0000000000403852\n.text:0000000000403855\n.text:000000000040385c\n.text:0000000000403863\n.text:0000000000403866\n.text:0000000000403868\n.text:000000000040386f\n.text:0000000000403871\n.text:0000000000403875\n.text:000000000040387a\n.text:0000000000403881\n.text:0000000000403888\n.text:000000000040388a\n.text:000000000040388d\n.text:0000000000403892\n.text:0000000000403895\n.text:000000000040389b\n.text:000000000040389d\n.text:00000000004038a1\n.text:00000000004038a3\n.text:00000000004038a5\n.text:00000000004038a7\n.text:00000000004038ac\n.text:00000000004038b3\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cd\n.text:00000000004038d4\n.text:00000000004038d7\n.text:00000000004038dd\n.text:00000000004038e2\n.text:00000000004038e7\n.text:00000000004038ee\n.text:00000000004038f4\n.text:00000000004038f9\n.text:00000000004038fe\n.text:0000000000403905\n.text:000000000040390b\n.text:0000000000403910\n.text:0000000000403916\n.text:000000000040391d\n.text:000000000040391f\n.text:0000000000403925\n.text:0000000000403927\n.text:0000000000403929\n.text:000000000040392b\n.text:000000000040392d\n.text:0000000000403933\n.text:000000000040393a\n.text:0000000000403941\n.text:0000000000403945\n.text:000000000040394c\n.text:000000000040394f\n.text:0000000000403956\n.text:0000000000403958\n.text:000000000040395d\n.text:000000000040395f\n.text:0000000000403964\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403970\n.text:0000000000403975\n.text:000000000040397a\n.text:000000000040397f\n.text:0000000000403985\n.text:000000000040398c\n.text:000000000040398e\n.text:0000000000403990\n.text:0000000000403993\n.text:0000000000403995\n.text:00000000004039a0\n.text:00000000004039a3\n.text:00000000004039aa\n.text:00000000004039ac\n.text:00000000004039b3\n.text:00000000004039ba\n.text:00000000004039c1\n.text:00000000004039c5\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d6\n.text:00000000004039d8\n.text:00000000004039dd\n.text:00000000004039df\n.text:00000000004039e6\n.text:00000000004039e9\n.text:00000000004039eb\n.text:00000000004039f2\n.text:00000000004039f4\n.text:00000000004039fa\n.text:0000000000403a01\n.text:0000000000403a08\n.text:0000000000403a0c\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a1d\n.text:0000000000403a1f\n.text:0000000000403a24\n.text:0000000000403a2b\n.text:0000000000403a2e\n.text:0000000000403a30\n.text:0000000000403a37\n.text:0000000000403a3c\n.text:0000000000403a43\n.text:0000000000403a46\n.text:0000000000403a48\n.text:0000000000403a4f\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5f\n.text:0000000000403a65\n.text:0000000000403a6a\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a76\n.text:0000000000403a78\n.text:0000000000403a7d\n.text:0000000000403a7f\n.text:0000000000403a81\n.text:0000000000403a86\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a92\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403aa3\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403aae\n.text:0000000000403ab3\n.text:0000000000403ab5\n.text:0000000000403aba\n.text:0000000000403abf\n.text:0000000000403ac2\n.text:0000000000403ac5\n.text:0000000000403ac7\n.text:0000000000403acc\n.text:0000000000403ace\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403ad8\n.text:0000000000403ada\n.text:0000000000403adf\n.text:0000000000403ae2\n.text:0000000000403ae4\n.text:0000000000403ae9\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403afd\n.text:0000000000403b02\n.text:0000000000403b07\n.text:0000000000403b0a\n.text:0000000000403b0c\n.text:0000000000403b0e\n.text:0000000000403b11\n.text:0000000000403b14\n.text:0000000000403b17\n.text:0000000000403b1a\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b2b\n.text:0000000000403b2d\n.text:0000000000403b32\n.text:0000000000403b37\n.text:0000000000403b39\n.text:0000000000403b3b\n.text:0000000000403b40\n.text:0000000000403b42\n.text:0000000000403b45\n.text:0000000000403b47\n.text:0000000000403b4a\n.text:0000000000403b4c\n.text:0000000000403b4e\n.text:0000000000403b53\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b67\n.text:0000000000403b6c\n.text:0000000000403b71\n.text:0000000000403b74\n.text:0000000000403b76\n.text:0000000000403b78\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b82\n.text:0000000000403b88\n.text:0000000000403b8f\n.text:0000000000403b97\n.text:0000000000403b99\n.text:0000000000403ba0\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bac\n.text:0000000000403bae\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb8\n.text:0000000000403bba\n.text:0000000000403bbc\n.text:0000000000403bc1\n.text:0000000000403bc6\n.text:0000000000403bcb\n.text:0000000000403bce\n.text:0000000000403bd5\n.text:0000000000403bda\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be4\n.text:0000000000403be6\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bf0\n.text:0000000000403bf6\n.text:0000000000403bf9\n.text:0000000000403c00\n.text:0000000000403c01\n.text:0000000000403c03\n.text:0000000000403c05\n.text:0000000000403c07\n.text:0000000000403c09\n.text:0000000000403c0a\n.text:0000000000403c0b\n.text:0000000000403c10\n.text:0000000000403c12\n.text:0000000000403c14\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c23\n.text:0000000000403c26\n.text:0000000000403c2d\n.text:0000000000403c32\n.text:0000000000403c37\n.text:0000000000403c3a\n.text:0000000000403c3c\n.text:0000000000403c3e\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c48\n'
p160
tp161
sS'quotearg_n_style_colon'
p162
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p163
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004071c0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004060a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00406f90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p165
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p166
S'.text:0000000000407340\n.text:0000000000407341\n.text:0000000000407343\n.text:0000000000407344\n.text:0000000000407348\n.text:000000000040734b\n.text:000000000040734d\n.text:0000000000407352\n.text:0000000000407355\n.text:000000000040735a\n.text:000000000040735f\n.text:0000000000407364\n.text:0000000000407367\n.text:000000000040736c\n.text:0000000000407373\n.text:0000000000407375\n.text:0000000000407378\n.text:000000000040737b\n.text:0000000000407380\n.text:0000000000407384\n.text:0000000000407385\n.text:0000000000407387\n.text:0000000000407388\n'
p167
tp168
sS'xtime_make'
p169
(S'\n__stdcall xtime_make(xtime_t s, long ns)\n'
p170
V\u000axtime_t xtime_make(xtime_t s,long ns)\u000a\u000a{\u000a  return s * 1000000000 + ns;\u000a}\u000a\u000a
p171
S'IMUL RAX,RDI,0x3b9aca00\nADD RAX,RSI\nRET\n'
p172
S'48 69 c7 00 ca 9a 3b\n48 01 f0\nc3\n'
p173
S'.text:00000000004054c0\n.text:00000000004054c7\n.text:00000000004054ca\n'
p174
tp175
sS'quote_mem'
p176
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p177
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00407450\n'
p179
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p180
S'.text:0000000000407460\n.text:0000000000407463\n.text:0000000000407466\n.text:0000000000407468\n.text:000000000040746b\n.text:000000000040746e\n'
p181
tp182
sS'translate_buffer'
p183
(S'\n__stdcall translate_buffer(char * buf, size_t nread)\n'
p184
V\u000avoid translate_buffer(char *buf,size_t nread)\u000a\u000a{\u000a  byte bVar1;\u000a  \u000a  if (nread != 0) {\u000a    do {\u000a      bVar1 = to_uchar();\u000a      *buf = trans_table[(ulong)bVar1];\u000a      buf = (char *)((uchar *)buf + 1);\u000a      nread = nread - 1;\u000a    } while (nread != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p185
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nTEST R14,R14\nJZ 0x00404d4c\nNOP\nMOVSX EDI,byte ptr [RBX]\nCALL 0x00405280\nMOVZX EAX,AL\nMOVZX EAX,byte ptr [0x60e3a0 + RAX]\nMOV byte ptr [RBX],AL\nINC RBX\nDEC R14\nJNZ 0x00404d30\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p186
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n4d 85 f6\n74 1d\n90\n0f be 3b\ne8 48 05 00 00\n0f b6 c0\n0f b6 80 a0 e3 60 00\n88 03\n48 ff c3\n49 ff ce\n75 e4\n48 83 c4 08\n5b\n41 5e\nc3\n'
p187
S'.text:0000000000404d20\n.text:0000000000404d22\n.text:0000000000404d23\n.text:0000000000404d24\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2d\n.text:0000000000404d2f\n.text:0000000000404d30\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3b\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4a\n.text:0000000000404d4c\n.text:0000000000404d50\n.text:0000000000404d51\n.text:0000000000404d53\n'
p188
tp189
sS'fileno'
p190
(S'\n__stdcall fileno(FILE * __stream)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060e198)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060e198]\n'
p193
S'ff 25 f2 c5 20 00\n'
p194
S'.plt:0000000000401ba0\n'
p195
tp196
sS'sigemptyset'
p197
(S'\n__stdcall sigemptyset(sigset_t * __set)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigemptyset(sigset_t *__set)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigemptyset_0060e188)();\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060e188]\n'
p200
S'ff 25 02 c6 20 00\n'
p201
S'.plt:0000000000401b80\n'
p202
tp203
sS'mbrtowc'
p204
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060e0e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060e0e8]\n'
p207
S'ff 25 a2 c6 20 00\n'
p208
S'.plt:0000000000401a40\n'
p209
tp210
sS'dup2'
p211
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0060e0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060e0f0]\n'
p214
S'ff 25 9a c6 20 00\n'
p215
S'.plt:0000000000401a50\n'
p216
tp217
sS'xstrtoumax'
p218
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p219
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00408256;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00408256;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00408185_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00408163:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00408163;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00408237;\u000a  default:\u000aswitchD_00408185_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00408237;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00408237:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00408256:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00408273\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401900\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401d80\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00408070\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00408262\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401cd0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x004080d0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00408101\nCMP EAX,0x22\nJNZ 0x00408262\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040810c\nJMP 0x00408256\nTEST R12,R12\nJZ 0x00408262\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00408262\nMOV RDI,R12\nCALL 0x00401a60\nTEST RAX,RAX\nJZ 0x00408262\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040810c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00408256\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00408256\nMOV RDI,R12\nCALL 0x00401a60\nTEST RAX,RAX\nJZ 0x0040819e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401a60\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00408163\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040816a\nCMP EAX,0x44\nJZ 0x0040816a\nCMP EAX,0x69\nJNZ 0x00408163\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00408174\nMOV EBP,0x1\nJMP 0x00408174\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040819e\nXOR EAX,EAX\nJMP qword ptr [0x40b610 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00408262\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00408237\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x004082c0\nJMP 0x0040823c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00408237\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00408290\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b7c0\nMOV ESI,0x40b7e6\nMOV EDX,0x60\nMOV ECX,0x40b7f6\nCALL 0x00401ab0\n'
p221
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 b2 98 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 23 9d ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 2c 9c ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 74 99 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 3c 99 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 2a 99 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 10 b6 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 b7 40 00\nbe e6 b7 40 00\nba 60 00 00 00\nb9 f6 b7 40 00\ne8 24 98 ff ff\n'
p222
S'.text:0000000000408020\n.text:0000000000408021\n.text:0000000000408023\n.text:0000000000408025\n.text:0000000000408027\n.text:0000000000408029\n.text:000000000040802a\n.text:000000000040802e\n.text:0000000000408031\n.text:0000000000408034\n.text:0000000000408037\n.text:000000000040803a\n.text:000000000040803e\n.text:0000000000408044\n.text:0000000000408049\n.text:000000000040804e\n.text:0000000000408051\n.text:0000000000408058\n.text:000000000040805d\n.text:0000000000408060\n.text:0000000000408063\n.text:0000000000408070\n.text:0000000000408073\n.text:0000000000408076\n.text:000000000040807b\n.text:000000000040807d\n.text:0000000000408080\n.text:0000000000408085\n.text:0000000000408089\n.text:000000000040808e\n.text:0000000000408090\n.text:0000000000408096\n.text:0000000000408099\n.text:000000000040809c\n.text:000000000040809f\n.text:00000000004080a4\n.text:00000000004080a8\n.text:00000000004080ac\n.text:00000000004080af\n.text:00000000004080b1\n.text:00000000004080b4\n.text:00000000004080b6\n.text:00000000004080b8\n.text:00000000004080bb\n.text:00000000004080c1\n.text:00000000004080c6\n.text:00000000004080c9\n.text:00000000004080cb\n.text:00000000004080d0\n.text:00000000004080d3\n.text:00000000004080d9\n.text:00000000004080dc\n.text:00000000004080de\n.text:00000000004080e4\n.text:00000000004080e7\n.text:00000000004080ec\n.text:00000000004080ef\n.text:00000000004080f5\n.text:00000000004080fd\n.text:00000000004080ff\n.text:0000000000408101\n.text:0000000000408103\n.text:0000000000408106\n.text:000000000040810c\n.text:0000000000408110\n.text:0000000000408114\n.text:0000000000408116\n.text:000000000040811c\n.text:000000000040811f\n.text:0000000000408124\n.text:0000000000408127\n.text:0000000000408129\n.text:000000000040812e\n.text:0000000000408131\n.text:0000000000408136\n.text:000000000040813b\n.text:000000000040813e\n.text:0000000000408140\n.text:0000000000408144\n.text:0000000000408147\n.text:0000000000408149\n.text:000000000040814c\n.text:000000000040814e\n.text:0000000000408151\n.text:0000000000408153\n.text:0000000000408155\n.text:0000000000408159\n.text:000000000040815c\n.text:0000000000408161\n.text:0000000000408163\n.text:0000000000408168\n.text:000000000040816a\n.text:000000000040816f\n.text:0000000000408174\n.text:0000000000408178\n.text:000000000040817b\n.text:000000000040817e\n.text:0000000000408181\n.text:0000000000408183\n.text:0000000000408185\n.text:000000000040818c\n.text:000000000040818f\n.text:0000000000408194\n.text:0000000000408199\n.text:000000000040819e\n.text:00000000004081a2\n.text:00000000004081a7\n.text:00000000004081aa\n.text:00000000004081ad\n.text:00000000004081b2\n.text:00000000004081b5\n.text:00000000004081ba\n.text:00000000004081bf\n.text:00000000004081c1\n.text:00000000004081c4\n.text:00000000004081c9\n.text:00000000004081ce\n.text:00000000004081d0\n.text:00000000004081d3\n.text:00000000004081d8\n.text:00000000004081dd\n.text:00000000004081df\n.text:00000000004081e2\n.text:00000000004081e7\n.text:00000000004081e9\n.text:00000000004081ec\n.text:00000000004081f1\n.text:00000000004081f6\n.text:00000000004081f8\n.text:00000000004081fb\n.text:0000000000408200\n.text:0000000000408205\n.text:0000000000408207\n.text:000000000040820a\n.text:000000000040820f\n.text:0000000000408214\n.text:0000000000408216\n.text:0000000000408219\n.text:000000000040821e\n.text:0000000000408223\n.text:0000000000408225\n.text:0000000000408228\n.text:000000000040822d\n.text:000000000040822f\n.text:0000000000408232\n.text:0000000000408237\n.text:000000000040823c\n.text:000000000040823e\n.text:0000000000408242\n.text:0000000000408246\n.text:000000000040824a\n.text:000000000040824c\n.text:000000000040824f\n.text:0000000000408253\n.text:0000000000408256\n.text:000000000040825a\n.text:000000000040825f\n.text:0000000000408262\n.text:0000000000408264\n.text:0000000000408268\n.text:0000000000408269\n.text:000000000040826b\n.text:000000000040826d\n.text:000000000040826f\n.text:0000000000408271\n.text:0000000000408272\n.text:0000000000408273\n.text:0000000000408278\n.text:000000000040827d\n.text:0000000000408282\n.text:0000000000408287\n'
p223
tp224
sS'ifd_reopen'
p225
(S'\n__stdcall ifd_reopen(char * file)\n'
p226
V\u000aint ifd_reopen(char *file)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  do {\u000a    process_signals();\u000a    iVar1 = fd_reopen((char *)((ulong)file & 0xffffffff));\u000a    if (-1 < iVar1) {\u000a      return iVar1;\u000a    }\u000a    piVar2 = __errno_location();\u000a  } while (*piVar2 == 4);\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV R12,RSI\nMOV EBP,EDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCALL 0x004040b0\nMOV EDI,EBP\nMOV RSI,R12\nMOV EDX,R15D\nMOV ECX,R14D\nCALL 0x00405420\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00403355\nCALL 0x00401900\nCMP dword ptr [RAX],0x4\nJZ 0x00403330\nMOV EAX,EBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p228
S'55\n41 57\n41 56\n41 54\n53\n41 89 ce\n41 89 d7\n49 89 f4\n89 fd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 7b 0d 00 00\n89 ef\n4c 89 e6\n44 89 fa\n44 89 f1\ne8 db 20 00 00\n89 c3\n85 db\n79 0a\ne8 b0 e5 ff ff\n83 38 04\n74 db\n89 d8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p229
S'.text:0000000000403310\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403315\n.text:0000000000403317\n.text:0000000000403318\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403323\n.text:0000000000403330\n.text:0000000000403335\n.text:0000000000403337\n.text:000000000040333a\n.text:000000000040333d\n.text:0000000000403340\n.text:0000000000403345\n.text:0000000000403347\n.text:0000000000403349\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403353\n.text:0000000000403355\n.text:0000000000403357\n.text:0000000000403358\n.text:000000000040335a\n.text:000000000040335c\n.text:000000000040335e\n.text:000000000040335f\n'
p230
tp231
sS'setlocale'
p232
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060e1f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060e1f0]\n'
p235
S'ff 25 9a c5 20 00\n'
p236
S'.plt:0000000000401c50\n'
p237
tp238
sS'c_toupper'
p239
(S'\n__stdcall c_toupper()\n'
p240
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p242
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p243
S'.text:0000000000408c80\n.text:0000000000408c83\n.text:0000000000408c86\n.text:0000000000408c89\n.text:0000000000408c8c\n'
p244
tp245
sS'set_fd_flags'
p246
(S'\n__stdcall set_fd_flags(char * name)\n'
p247
V\u000avoid set_fd_flags(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  char *pcVar8;\u000a  uint uVar9;\u000a  ulong in_RSI;\u000a  ulong uVar10;\u000a  stat sStack184;\u000a  \u000a  uVar10 = (ulong)name & 0xffffffff;\u000a  if ((in_RSI & 0xfffdfeff) == 0) {\u000a    return;\u000a  }\u000a  uVar3 = rpl_fcntl(uVar10,3);\u000a  if ((int)uVar3 < 0) goto LAB_004032c0;\u000a  uVar9 = (uint)in_RSI & 0xfffdfeff | uVar3;\u000a  if (uVar3 == uVar9) {\u000a    return;\u000a  }\u000a  bVar2 = true;\u000a  if ((uVar9 & 0x10000) != 0) {\u000a    iVar4 = fstat((int)uVar10,&sStack184);\u000a    if (iVar4 == 0) {\u000a      bVar2 = true;\u000a      if ((sStack184.st_mode & 0xf000) != 0x4000) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = 0x14;\u000a        goto LAB_0040328a;\u000a      }\u000a    }\u000a    else {\u000aLAB_0040328a:\u000a      bVar2 = false;\u000a    }\u000a    uVar9 = uVar9 & 0xfffeffff;\u000a  }\u000a  bVar1 = bVar2;\u000a  if ((uVar3 != uVar9) && (bVar1 = bVar2, bVar2)) {\u000a    iVar4 = rpl_fcntl(uVar10,4,(ulong)uVar9);\u000a    bVar1 = false;\u000a    if (iVar4 != -1) {\u000a      bVar1 = bVar2;\u000a    }\u000a  }\u000a  if (bVar1) {\u000a    return;\u000a  }\u000aLAB_004032c0:\u000a  puVar6 = (uint *)__errno_location();\u000a  uVar3 = *puVar6;\u000a  uVar7 = dcgettext(0,"setting flags for %s",5);\u000a  pcVar8 = quotearg_style((char *)0x4);\u000a  nl_error((char *)0x1,(ulong)uVar3,uVar7,pcVar8);\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV R14,RDX\nMOV EBP,ESI\nMOV R15D,EDI\nAND EBP,0xfffdfeff\nJZ 0x004032fc\nMOV ESI,0x3\nXOR EAX,EAX\nMOV EDI,R15D\nCALL 0x00408570\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x004032c0\nOR EBP,EBX\nCMP EBX,EBP\nJZ 0x004032fc\nMOV R12B,0x1\nTEST EBP,0x10000\nJZ 0x00403293\nMOV RSI,RSP\nMOV EDI,R15D\nCALL 0x004090f0\nTEST EAX,EAX\nJNZ 0x0040328a\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x18]\nMOV R12B,0x1\nCMP EAX,0x4000\nJZ 0x0040328d\nCALL 0x00401900\nMOV dword ptr [RAX],0x14\nXOR R12D,R12D\nAND EBP,0xfffeffff\nCMP EBX,EBP\nJZ 0x004032ba\nTEST R12B,R12B\nJZ 0x004032ba\nXOR EBX,EBX\nMOV ESI,0x4\nXOR EAX,EAX\nMOV EDI,R15D\nMOV EDX,EBP\nCALL 0x00408570\nCMP EAX,-0x1\nJZ 0x004032b7\nMOV BL,R12B\nMOV R12B,BL\nTEST R12B,0x1\nJNZ 0x004032fc\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a34e\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p249
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n49 89 d6\n89 f5\n41 89 ff\n81 e5 ff fe fd ff\n0f 84 c9 00 00 00\nbe 03 00 00 00\n31 c0\n44 89 ff\ne8 2e 53 00 00\n89 c3\n85 db\n78 78\n09 dd\n39 eb\n0f 84 aa 00 00 00\n41 b4 01\nf7 c5 00 00 01 00\n74 36\n48 89 e6\n44 89 ff\ne8 88 5e 00 00\n85 c0\n75 1e\nb8 00 f0 00 00\n23 44 24 18\n41 b4 01\n3d 00 40 00 00\n74 0e\ne8 7c e6 ff ff\nc7 00 14 00 00 00\n45 31 e4\n81 e5 ff ff fe ff\n39 eb\n74 23\n45 84 e4\n74 1e\n31 db\nbe 04 00 00 00\n31 c0\n44 89 ff\n89 ea\ne8 c1 52 00 00\n83 f8 ff\n74 03\n44 88 e3\n41 88 dc\n41 f6 c4 01\n75 3c\ne8 3b e6 ff ff\n8b 18\n31 ff\nbe 4e a3 40 00\nba 05 00 00 00\ne8 28 e7 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 78 3f 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 64 00 00 00\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p250
S'.text:0000000000403210\n.text:0000000000403211\n.text:0000000000403213\n.text:0000000000403215\n.text:0000000000403217\n.text:0000000000403218\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403224\n.text:0000000000403227\n.text:000000000040322d\n.text:0000000000403233\n.text:0000000000403238\n.text:000000000040323a\n.text:000000000040323d\n.text:0000000000403242\n.text:0000000000403244\n.text:0000000000403246\n.text:0000000000403248\n.text:000000000040324a\n.text:000000000040324c\n.text:0000000000403252\n.text:0000000000403255\n.text:000000000040325b\n.text:000000000040325d\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403268\n.text:000000000040326a\n.text:000000000040326c\n.text:0000000000403271\n.text:0000000000403275\n.text:0000000000403278\n.text:000000000040327d\n.text:000000000040327f\n.text:0000000000403284\n.text:000000000040328a\n.text:000000000040328d\n.text:0000000000403293\n.text:0000000000403295\n.text:0000000000403297\n.text:000000000040329a\n.text:000000000040329c\n.text:000000000040329e\n.text:00000000004032a3\n.text:00000000004032a5\n.text:00000000004032a8\n.text:00000000004032aa\n.text:00000000004032af\n.text:00000000004032b2\n.text:00000000004032b4\n.text:00000000004032b7\n.text:00000000004032ba\n.text:00000000004032be\n.text:00000000004032c0\n.text:00000000004032c5\n.text:00000000004032c7\n.text:00000000004032c9\n.text:00000000004032ce\n.text:00000000004032d3\n.text:00000000004032d8\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e3\n.text:00000000004032e8\n.text:00000000004032eb\n.text:00000000004032f0\n.text:00000000004032f2\n.text:00000000004032f4\n.text:00000000004032f7\n.text:00000000004032fc\n.text:0000000000403303\n.text:0000000000403304\n.text:0000000000403306\n.text:0000000000403308\n.text:000000000040330a\n.text:000000000040330b\n'
p251
tp252
sS'xvasprintf'
p253
(S'\n__stdcall xvasprintf(char * format, __va_list_tag * args)\n'
p254
V\u000achar * xvasprintf(char *format,__va_list_tag *args)\u000a\u000a{\u000a  int iVar1;\u000a  char *in_RAX;\u000a  char *pcVar2;\u000a  int *piVar3;\u000a  size_t argcount;\u000a  char *local_8;\u000a  \u000a  argcount = 0;\u000a  while (format[argcount * 2] == '%') {\u000a    if (format[argcount * 2 + 1] != 's') goto LAB_00408333;\u000a    argcount = argcount + 1;\u000a  }\u000a  if (format[argcount * 2] == 0) {\u000a    pcVar2 = xstrcat(argcount,args);\u000a    return pcVar2;\u000a  }\u000aLAB_00408333:\u000a  local_8 = in_RAX;\u000a  iVar1 = __vasprintf_chk(&local_8,1,format,args);\u000a  if (-1 < iVar1) {\u000a    return local_8;\u000a  }\u000a  piVar3 = __errno_location();\u000a  if (*piVar3 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p255
S'PUSH RAX\nMOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nJMP 0x00408313\nINC RDI\nMOVZX EDX,byte ptr [RCX + RDI*0x2]\nCMP DL,0x25\nJNZ 0x00408325\nCMP byte ptr [RCX + RDI*0x2 + 0x1],0x73\nJZ 0x00408310\nJMP 0x00408333\nTEST DL,DL\nJNZ 0x00408333\nMOV RSI,RAX\nCALL 0x00408370\nPOP RCX\nRET\nMOV RDI,RSP\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x00401bf0\nTEST EAX,EAX\nJS 0x00408350\nMOV RAX,qword ptr [RSP]\nPOP RCX\nRET\nCALL 0x00401900\nCMP dword ptr [RAX],0xc\nJZ 0x0040835e\nXOR EAX,EAX\nPOP RCX\nRET\nCALL 0x00407ff0\n'
p256
S'50\n48 89 f0\n48 89 f9\n31 ff\neb 08\n48 ff c7\n0f b6 14 79\n80 fa 25\n75 09\n80 7c 79 01 73\n74 ed\neb 0e\n84 d2\n75 0a\n48 89 c6\ne8 3f 00 00 00\n59\nc3\n48 89 e7\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 aa 98 ff ff\n85 c0\n78 06\n48 8b 04 24\n59\nc3\ne8 ab 95 ff ff\n83 38 0c\n74 04\n31 c0\n59\nc3\ne8 8d fc ff ff\n'
p257
S'.text:0000000000408300\n.text:0000000000408301\n.text:0000000000408304\n.text:0000000000408307\n.text:0000000000408309\n.text:0000000000408310\n.text:0000000000408313\n.text:0000000000408317\n.text:000000000040831a\n.text:000000000040831c\n.text:0000000000408321\n.text:0000000000408323\n.text:0000000000408325\n.text:0000000000408327\n.text:0000000000408329\n.text:000000000040832c\n.text:0000000000408331\n.text:0000000000408332\n.text:0000000000408333\n.text:0000000000408336\n.text:000000000040833b\n.text:000000000040833e\n.text:0000000000408341\n.text:0000000000408346\n.text:0000000000408348\n.text:000000000040834a\n.text:000000000040834e\n.text:000000000040834f\n.text:0000000000408350\n.text:0000000000408355\n.text:0000000000408358\n.text:000000000040835a\n.text:000000000040835c\n.text:000000000040835d\n.text:000000000040835e\n'
p258
tp259
sS'fcntl'
p260
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060e098)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060e098]\n'
p263
S'ff 25 f2 c6 20 00\n'
p264
S'.plt:00000000004019a0\n'
p265
tp266
sS'mbsinit'
p267
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060e268)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060e268]\n'
p270
S'ff 25 22 c5 20 00\n'
p271
S'.plt:0000000000401d40\n'
p272
tp273
sS'dcgettext'
p274
(S'\n__stdcall dcgettext()\n'
p275
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060e0c8)();\u000a  return;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x0060e0c8]\n'
p277
S'ff 25 c2 c6 20 00\n'
p278
S'.plt:0000000000401a00\n'
p279
tp280
sS'copy_with_unblock'
p281
(S'\n__stdcall copy_with_unblock(char * buf, size_t nread)\n'
p282
V\u000avoid copy_with_unblock(char *buf,size_t nread)\u000a\u000a{\u000a  size_t sVar1;\u000a  ulong uVar2;\u000a  char *pcVar3;\u000a  char cVar4;\u000a  size_t pending_spaces;\u000a  ulong uVar5;\u000a  \u000a  if (nread != 0) {\u000a    uVar5 = 0;\u000a    do {\u000a      cVar4 = buf[uVar5];\u000a      sVar1 = col + 1;\u000a      if (col < conversion_blocksize) {\u000a        col = sVar1;\u000a        if (cVar4 == space_character) {\u000a          pending_spaces = pending_spaces + 1;\u000a          col = sVar1;\u000a        }\u000a        else {\u000a          while (pending_spaces != 0) {\u000a            uVar2 = oc + 1;\u000a            pcVar3 = obuf + oc;\u000a            oc = uVar2;\u000a            *pcVar3 = space_character;\u000a            if (output_blocksize <= uVar2) {\u000a              write_output();\u000a            }\u000a            pending_spaces = pending_spaces - 1;\u000a          }\u000a          uVar2 = oc + 1;\u000a          pcVar3 = obuf + oc;\u000a          oc = uVar2;\u000a          *pcVar3 = cVar4;\u000a          if (output_blocksize <= uVar2) goto LAB_00404fff;\u000a        }\u000a      }\u000a      else {\u000a        pending_spaces = 0;\u000a        col = 0;\u000a        uVar5 = uVar5 - 1;\u000a        uVar2 = oc + 1;\u000a        pcVar3 = obuf + oc;\u000a        oc = uVar2;\u000a        *pcVar3 = newline_character;\u000a        if (output_blocksize <= uVar2) {\u000aLAB_00404fff:\u000a          write_output();\u000a        }\u000a      }\u000a      uVar5 = uVar5 + 1;\u000a    } while (uVar5 < nread);\u000a  }\u000a  return;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nTEST R15,R15\nJZ 0x00405010\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV BPL,byte ptr [R14 + RBX*0x1]\nMOV RAX,qword ptr [0x0060e628]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060e628],RCX\nCMP RAX,qword ptr [0x0060e598]\nJNC 0x00404f40\nCMP BPL,byte ptr [0x0060e2b5]\nMOV RAX,qword ptr [0x0060e638]\nJNZ 0x00404f90\nINC RAX\nMOV qword ptr [0x0060e638],RAX\nJMP 0x00405004\nMOV qword ptr [0x0060e638],0x0\nMOV qword ptr [0x0060e628],0x0\nDEC RBX\nMOV AL,byte ptr [0x0060e2b4]\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJNC 0x00404fff\nJMP 0x00405004\nTEST RAX,RAX\nMOV RAX,qword ptr [0x0060e608]\nJNZ 0x00404fb0\nJMP 0x00404fe0\nDEC qword ptr [0x0060e638]\nMOV RAX,qword ptr [0x0060e608]\nJZ 0x00404fe0\nMOVZX ECX,byte ptr [0x0060e2b5]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RAX + RDX*0x1],CL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x00404fa0\nCALL 0x00405090\nJMP 0x00404fa0\nMOV RCX,qword ptr [0x0060e620]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [0x0060e620],RDX\nMOV byte ptr [RAX + RCX*0x1],BPL\nCMP RDX,qword ptr [0x0060e4d8]\nJC 0x00405004\nCALL 0x00405090\nINC RBX\nCMP RBX,R15\nJC 0x00404f00\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n53\n50\n49 89 f7\n49 89 fe\n4d 85 ff\n0f 84 1a 01 00 00\n31 db\n0f 1f 84 00 00 00 00 00\n41 8a 2c 1e\n48 8b 05 1d 97 20 00\n48 8d 48 01\n48 89 0d 12 97 20 00\n48 3b 05 7b 96 20 00\n73 21\n40 3a 2d 8f 93 20 00\n48 8b 05 0b 97 20 00\n75 61\n48 ff c0\n48 89 05 ff 96 20 00\ne9 c6 00 00 00\n48 c7 05 ed 96 20 00 00 00 00 00\n48 c7 05 d2 96 20 00 00 00 00 00\n48 ff cb\n8a 05 55 93 20 00\n48 8b 0d a2 96 20 00\n48 8b 15 b3 96 20 00\n48 8d 72 01\n48 89 35 a8 96 20 00\n88 04 11\n48 3b 35 56 95 20 00\n73 7b\neb 7e\n48 85 c0\n48 8b 05 6e 96 20 00\n75 14\neb 42\n48 ff 0d 91 96 20 00\n48 8b 05 5a 96 20 00\n74 30\n0f b6 0d fe 92 20 00\n48 8b 15 62 96 20 00\n48 8d 72 01\n48 89 35 57 96 20 00\n88 0c 10\n48 3b 35 05 95 20 00\n72 cb\ne8 b6 00 00 00\neb c4\n48 8b 0d 39 96 20 00\n48 8d 51 01\n48 89 15 2e 96 20 00\n40 88 2c 08\n48 3b 15 db 94 20 00\n72 05\ne8 8c 00 00 00\n48 ff c3\n4c 39 fb\n0f 82 f0 fe ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000404ee0\n.text:0000000000404ee1\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee6\n.text:0000000000404ee7\n.text:0000000000404eea\n.text:0000000000404eed\n.text:0000000000404ef0\n.text:0000000000404ef6\n.text:0000000000404ef8\n.text:0000000000404f00\n.text:0000000000404f04\n.text:0000000000404f0b\n.text:0000000000404f0f\n.text:0000000000404f16\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f26\n.text:0000000000404f2d\n.text:0000000000404f2f\n.text:0000000000404f32\n.text:0000000000404f39\n.text:0000000000404f40\n.text:0000000000404f4b\n.text:0000000000404f56\n.text:0000000000404f59\n.text:0000000000404f5f\n.text:0000000000404f66\n.text:0000000000404f6d\n.text:0000000000404f71\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f82\n.text:0000000000404f84\n.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f9a\n.text:0000000000404f9c\n.text:0000000000404fa0\n.text:0000000000404fa7\n.text:0000000000404fae\n.text:0000000000404fb0\n.text:0000000000404fb7\n.text:0000000000404fbe\n.text:0000000000404fc2\n.text:0000000000404fc9\n.text:0000000000404fcc\n.text:0000000000404fd3\n.text:0000000000404fd5\n.text:0000000000404fda\n.text:0000000000404fe0\n.text:0000000000404fe7\n.text:0000000000404feb\n.text:0000000000404ff2\n.text:0000000000404ff6\n.text:0000000000404ffd\n.text:0000000000404fff\n.text:0000000000405004\n.text:0000000000405007\n.text:000000000040500a\n.text:0000000000405010\n.text:0000000000405014\n.text:0000000000405015\n.text:0000000000405017\n.text:0000000000405019\n.text:000000000040501a\n'
p286
tp287
sS'advance_input_after_read_error'
p288
(S'\n__stdcall advance_input_after_read_error(size_t nbytes)\n'
p289
V\u000a_Bool advance_input_after_read_error(size_t nbytes)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  uintmax_t uVar4;\u000a  off_t oVar5;\u000a  int *piVar6;\u000a  uint *puVar7;\u000a  uint uVar8;\u000a  ulong uVar9;\u000a  \u000a  iVar1 = input_seek_errno;\u000a  if (input_seekable == false) {\u000a    if (input_seek_errno == 0x1d) {\u000a      return true;\u000a    }\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar1;\u000a  }\u000a  else {\u000a    advance_input_offset(nbytes);\u000a    uVar8 = (uint)input_offset_overflow | (uint)(input_offset >> 0x3f);\u000a    input_offset_overflow = SUB41(uVar8,0);\u000a    if (uVar8 != 0) {\u000a      uVar2 = dcgettext(0,"offset overflow while reading file %s",5);\u000a      pcVar3 = quotearg_style((char *)0x4);\u000a      uVar9 = 0;\u000a      goto LAB_00404cea;\u000a    }\u000a    uVar4 = lseek(0,0,1);\u000a    if (-1 < (long)uVar4) {\u000a      if (input_offset == uVar4) {\u000a        return true;\u000a      }\u000a      if ((((long)(input_offset - uVar4) < 0) || (nbytes < input_offset - uVar4)) &&\u000a         (status_level != 1)) {\u000a        uVar2 = dcgettext(0,"warning: invalid file offset after failed read",5);\u000a        nl_error((char *)0x0,0,uVar2,uVar2);\u000a      }\u000a      oVar5 = skip_via_lseek(input_file,0);\u000a      if (-1 < oVar5) {\u000a        return true;\u000a      }\u000a      piVar6 = __errno_location();\u000a      if (*piVar6 == 0) {\u000a        uVar2 = dcgettext(0,"cannot work around kernel bug after all",5);\u000a        nl_error((char *)0x0,0,uVar2,uVar2);\u000a      }\u000a    }\u000a  }\u000a  puVar7 = (uint *)__errno_location();\u000a  uVar8 = *puVar7;\u000a  uVar2 = dcgettext(0,"%s: cannot seek",5);\u000a  pcVar3 = quotearg_n_style_colon((char *)0x0);\u000a  uVar9 = (ulong)uVar8;\u000aLAB_00404cea:\u000a  nl_error((char *)0x0,uVar9,uVar2,pcVar3);\u000a  return false;\u000a}\u000a\u000a
p290
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [0x0060e4ac],0x0\nJZ 0x00404bed\nMOV RDI,RBX\nCALL 0x00404d00\nMOV RAX,qword ptr [0x0060e4b0]\nSHR RAX,0x3f\nMOVZX ECX,byte ptr [0x0060e601]\nOR ECX,EAX\nMOV byte ptr [0x0060e601],CL\nJZ 0x00404c0b\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40a53b\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0060e4a0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nJMP 0x00404cea\nMOV EBX,dword ptr [0x0060e4b8]\nMOV R15B,0x1\nCMP EBX,0x1d\nJZ 0x00404cf2\nCALL 0x00401900\nMOV dword ptr [RAX],EBX\nJMP 0x00404cb0\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x1\nCALL 0x00401a90\nTEST RAX,RAX\nJS 0x00404cb0\nMOV R14,qword ptr [0x0060e4b0]\nMOV R15B,0x1\nSUB R14,RAX\nJZ 0x00404cf2\nMOV EAX,dword ptr [0x0060e2b0]\nJS 0x00404c42\nCMP R14,RBX\nJBE 0x00404c69\nCMP EAX,0x1\nJZ 0x00404c69\nXOR EDI,EDI\nMOV ESI,0x40a561\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nMOV RDI,qword ptr [0x0060e4a0]\nXOR ESI,ESI\nMOV ECX,0x1\nMOV RDX,R14\nCALL 0x00405130\nTEST RAX,RAX\nJNS 0x00404cf2\nCALL 0x00401900\nCMP dword ptr [RAX],0x0\nJNZ 0x00404cb0\nXOR EDI,EDI\nMOV ESI,0x40a590\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00403360\nCALL 0x00401900\nMOV EBP,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x40a425\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RDX,qword ptr [0x0060e4a0]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00403360\nMOV EAX,R15D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p291
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n80 3d 1b 99 20 00 00\n74 5a\n48 89 df\ne8 65 01 00 00\n48 8b 05 0e 99 20 00\n48 c1 e8 3f\n0f b6 0d 54 9a 20 00\n09 c1\n88 0d 4c 9a 20 00\n74 54\n45 31 ff\n31 ff\nbe 3b a5 40 00\nba 05 00 00 00\ne8 35 ce ff ff\n48 89 c3\n48 8b 35 cb 98 20 00\nbf 04 00 00 00\ne8 81 26 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\ne9 fd 00 00 00\n8b 1d c5 98 20 00\n41 b7 01\n83 fb 1d\n0f 84 f3 00 00 00\ne8 fc cc ff ff\n89 18\ne9 a5 00 00 00\n31 ff\n31 f6\nba 01 00 00 00\ne8 77 ce ff ff\n48 85 c0\n0f 88 8e 00 00 00\n4c 8b 35 87 98 20 00\n41 b7 01\n49 29 c6\n0f 84 bd 00 00 00\n8b 05 75 96 20 00\n78 05\n49 39 de\n76 27\n83 f8 01\n74 22\n31 ff\nbe 61 a5 40 00\nba 05 00 00 00\ne8 a8 cd ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 f7 e6 ff ff\n48 8b 3d 30 98 20 00\n31 f6\nb9 01 00 00 00\n4c 89 f2\ne8 b1 04 00 00\n48 85 c0\n79 6e\ne8 77 cc ff ff\n83 38 00\n75 22\n31 ff\nbe 90 a5 40 00\nba 05 00 00 00\ne8 61 cd ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b0 e6 ff ff\ne8 4b cc ff ff\n8b 28\n45 31 ff\n31 ff\nbe 25 a4 40 00\nba 05 00 00 00\ne8 35 cd ff ff\n48 89 c3\n48 8b 15 cb 97 20 00\n31 ff\nbe 03 00 00 00\ne8 5f 26 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 6e e6 ff ff\n44 89 f8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p292
S'.text:0000000000404b80\n.text:0000000000404b81\n.text:0000000000404b83\n.text:0000000000404b85\n.text:0000000000404b86\n.text:0000000000404b87\n.text:0000000000404b8a\n.text:0000000000404b91\n.text:0000000000404b93\n.text:0000000000404b96\n.text:0000000000404b9b\n.text:0000000000404ba2\n.text:0000000000404ba6\n.text:0000000000404bad\n.text:0000000000404baf\n.text:0000000000404bb5\n.text:0000000000404bb7\n.text:0000000000404bba\n.text:0000000000404bbc\n.text:0000000000404bc1\n.text:0000000000404bc6\n.text:0000000000404bcb\n.text:0000000000404bce\n.text:0000000000404bd5\n.text:0000000000404bda\n.text:0000000000404bdf\n.text:0000000000404be2\n.text:0000000000404be4\n.text:0000000000404be6\n.text:0000000000404be8\n.text:0000000000404bed\n.text:0000000000404bf3\n.text:0000000000404bf6\n.text:0000000000404bf9\n.text:0000000000404bff\n.text:0000000000404c04\n.text:0000000000404c06\n.text:0000000000404c0b\n.text:0000000000404c0d\n.text:0000000000404c0f\n.text:0000000000404c14\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c22\n.text:0000000000404c29\n.text:0000000000404c2c\n.text:0000000000404c2f\n.text:0000000000404c35\n.text:0000000000404c3b\n.text:0000000000404c3d\n.text:0000000000404c40\n.text:0000000000404c42\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4e\n.text:0000000000404c53\n.text:0000000000404c58\n.text:0000000000404c5b\n.text:0000000000404c5d\n.text:0000000000404c5f\n.text:0000000000404c61\n.text:0000000000404c64\n.text:0000000000404c69\n.text:0000000000404c70\n.text:0000000000404c72\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c84\n.text:0000000000404c89\n.text:0000000000404c8c\n.text:0000000000404c8e\n.text:0000000000404c90\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9f\n.text:0000000000404ca2\n.text:0000000000404ca4\n.text:0000000000404ca6\n.text:0000000000404ca8\n.text:0000000000404cab\n.text:0000000000404cb0\n.text:0000000000404cb5\n.text:0000000000404cb7\n.text:0000000000404cba\n.text:0000000000404cbc\n.text:0000000000404cc1\n.text:0000000000404cc6\n.text:0000000000404ccb\n.text:0000000000404cce\n.text:0000000000404cd5\n.text:0000000000404cd7\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce4\n.text:0000000000404ce6\n.text:0000000000404ce8\n.text:0000000000404cea\n.text:0000000000404ced\n.text:0000000000404cf2\n.text:0000000000404cf5\n.text:0000000000404cf9\n.text:0000000000404cfa\n.text:0000000000404cfc\n.text:0000000000404cfe\n.text:0000000000404cff\n'
p293
tp294
sS'human_readable'
p295
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p296
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = ".";\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep =\u000a              \u000a       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a       + 0xca;\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_00405725:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_004059b6;\u000aLAB_004059a0:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_004059b6;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_004059b6;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_004059a0;\u000aLAB_004059b6:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_00405a07;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_00405a07:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_00405a31;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_00405a31:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x00405912;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_00405725;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_0040abc8 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_0040abc8 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_0040abc8 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      __sprintf_chk(buf,1,0xffffffffffffffff);\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x00405912:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x00401990\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x00401a20\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x40abf0\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x00401a20\nCMP RAX,0x11\nMOV ECX,0x40b3c9\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x004056ed\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x00405753\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x00405753\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x00405725\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x00405753\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x00405753\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x0040591d\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x00405927\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00405a07\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x40abc8 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x40abc8 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x40abc8 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x004057f4\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x00405bc0\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40abf2\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401d90\nMOV RDI,R12\nCALL 0x00401a20\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004058ef\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP word ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x00405829\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x00405810\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x00405bc0\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40abf8\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401d90\nMOV RDI,R12\nCALL 0x00401a20\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x004058a4\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x004058ef\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x004058ef\nFLD dword ptr [0x0040abd0]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00405bc0\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40abf2\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d90\nMOV RDI,R12\nCALL 0x00401a20\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x00401c70\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x00405acb\nJMP 0x00405aeb\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00405a07\nXOR EBP,EBP\nNOP dword ptr [RAX]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x00405974\nCMP R9,R12\nJBE 0x00405930\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x00405991\nCMP EAX,0x1\nJNZ 0x00405998\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x004059a0\nJMP 0x004059b6\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00405a07\nTEST EAX,EAX\nJNZ 0x004059b6\nTEST EBX,EBX\nJZ 0x004059b6\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x004059b6\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x004059fa\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x004059c7\nTEST ECX,ECX\nJNZ 0x004059c7\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00405a07\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401b90\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x00405a05\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x00405a2d\nCMP AL,0x1\nJNZ 0x00405a77\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x00405a31\nJMP 0x00405a77\nADD ECX,EBX\nJLE 0x00405a77\nINC R12\nCMP EBP,0x7\nJG 0x00405a77\nTEST R13D,R13D\nJZ 0x00405a77\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x00405a77\nINC EBP\nTEST R8B,0x8\nJNZ 0x00405a71\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x00401b90\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x00405a90\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x00405aeb\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x00405c90\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x00405b9f\nTEST EBP,EBP\nJNS 0x00405b37\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x00405b37\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x00405b32\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x00405b20\nJMP 0x00405b37\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x00405b5e\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x00405b5e\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x00405b80\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x00405b70\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x00405b79\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x40ac40 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x00405b9f\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x00405b97\nTEST EBP,EBP\nJZ 0x00405b97\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p298
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 77 c3 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 f9 c3 ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 f0 ab 40 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 c5 c3 ff ff\n48 83 f8 11\nb9 c9 b3 40 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 e6 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 de 01 00 00\n4c 8b 7c 24 10\ne9 b4 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 c8 ab 40 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 c8 ab 40 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 c8 ab 40 00\nde f2\nde c9\n41 f6 c0 10\n75 49\ndb 3c 24\n8b 7c 24 24\ne8 09 04 00 00\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 f2 ab 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 b3 c5 ff ff\n4c 89 e7\ne8 3b c2 ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 fb 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n66 0f 1f 84 00 00 00 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 7d 03 00 00\ndb 3c 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 f8 ab 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 2a c5 ff ff\n4c 89 e7\ne8 b2 c1 ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 53\n41 80 7c 04 ff 30\n75 4b\nd9 05 26 53 00 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 00 03 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 f2 ab 40 00\n31 c0\n4c 89 e7\ne8 a9 c4 ff ff\n4c 89 e7\ne8 31 c1 ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 6d c3 ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 b3 01 00 00\ne9 ce 01 00 00\n4c 8b 7c 24 10\ne9 e0 00 00 00\n31 ed\n0f 1f 80 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 9f c1 ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 24 c1 ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 40 ac 40 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p299
S'.text:00000000004055d0\n.text:00000000004055d1\n.text:00000000004055d3\n.text:00000000004055d5\n.text:00000000004055d7\n.text:00000000004055d9\n.text:00000000004055da\n.text:00000000004055e1\n.text:00000000004055e4\n.text:00000000004055e7\n.text:00000000004055ea\n.text:00000000004055ed\n.text:00000000004055ef\n.text:00000000004055f2\n.text:00000000004055f6\n.text:00000000004055fa\n.text:00000000004055fc\n.text:00000000004055ff\n.text:0000000000405603\n.text:0000000000405608\n.text:000000000040560d\n.text:0000000000405610\n.text:0000000000405614\n.text:0000000000405619\n.text:000000000040561c\n.text:000000000040561f\n.text:0000000000405622\n.text:0000000000405627\n.text:000000000040562b\n.text:000000000040562f\n.text:0000000000405634\n.text:0000000000405638\n.text:000000000040563d\n.text:0000000000405642\n.text:0000000000405646\n.text:000000000040564b\n.text:000000000040564f\n.text:0000000000405653\n.text:0000000000405656\n.text:000000000040565b\n.text:000000000040565f\n.text:0000000000405664\n.text:0000000000405668\n.text:0000000000405670\n.text:0000000000405675\n.text:0000000000405678\n.text:000000000040567d\n.text:0000000000405682\n.text:0000000000405687\n.text:000000000040568c\n.text:000000000040568e\n.text:0000000000405691\n.text:0000000000405696\n.text:000000000040569c\n.text:000000000040569e\n.text:00000000004056a1\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056ad\n.text:00000000004056af\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b8\n.text:00000000004056ba\n.text:00000000004056bd\n.text:00000000004056c0\n.text:00000000004056c3\n.text:00000000004056c6\n.text:00000000004056ca\n.text:00000000004056cc\n.text:00000000004056cf\n.text:00000000004056d2\n.text:00000000004056d4\n.text:00000000004056d7\n.text:00000000004056da\n.text:00000000004056dd\n.text:00000000004056df\n.text:00000000004056e2\n.text:00000000004056e5\n.text:00000000004056e8\n.text:00000000004056eb\n.text:00000000004056ed\n.text:00000000004056ef\n.text:00000000004056f2\n.text:00000000004056f5\n.text:00000000004056f8\n.text:00000000004056fd\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405703\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570c\n.text:000000000040570f\n.text:0000000000405713\n.text:0000000000405715\n.text:0000000000405718\n.text:000000000040571b\n.text:000000000040571e\n.text:0000000000405723\n.text:0000000000405725\n.text:0000000000405728\n.text:000000000040572c\n.text:0000000000405731\n.text:0000000000405737\n.text:000000000040573b\n.text:000000000040573e\n.text:0000000000405740\n.text:0000000000405743\n.text:0000000000405749\n.text:000000000040574e\n.text:0000000000405753\n.text:0000000000405758\n.text:000000000040575a\n.text:000000000040575d\n.text:0000000000405760\n.text:0000000000405764\n.text:000000000040576b\n.text:0000000000405770\n.text:0000000000405772\n.text:0000000000405775\n.text:0000000000405778\n.text:000000000040577c\n.text:0000000000405783\n.text:000000000040578b\n.text:000000000040578d\n.text:0000000000405790\n.text:0000000000405793\n.text:000000000040579a\n.text:00000000004057a1\n.text:00000000004057a3\n.text:00000000004057a5\n.text:00000000004057a9\n.text:00000000004057ab\n.text:00000000004057ae\n.text:00000000004057b2\n.text:00000000004057b7\n.text:00000000004057ba\n.text:00000000004057bd\n.text:00000000004057c2\n.text:00000000004057c9\n.text:00000000004057ce\n.text:00000000004057d0\n.text:00000000004057d5\n.text:00000000004057d8\n.text:00000000004057dd\n.text:00000000004057e0\n.text:00000000004057e5\n.text:00000000004057ea\n.text:00000000004057ef\n.text:00000000004057f4\n.text:00000000004057f8\n.text:00000000004057fd\n.text:00000000004057ff\n.text:0000000000405801\n.text:0000000000405805\n.text:0000000000405807\n.text:0000000000405810\n.text:0000000000405812\n.text:0000000000405814\n.text:0000000000405816\n.text:0000000000405818\n.text:000000000040581a\n.text:000000000040581d\n.text:000000000040581f\n.text:0000000000405821\n.text:0000000000405823\n.text:0000000000405825\n.text:0000000000405827\n.text:0000000000405829\n.text:000000000040582b\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405831\n.text:0000000000405835\n.text:0000000000405838\n.text:000000000040583c\n.text:000000000040583e\n.text:0000000000405843\n.text:0000000000405846\n.text:000000000040584b\n.text:0000000000405852\n.text:0000000000405857\n.text:0000000000405859\n.text:000000000040585e\n.text:0000000000405861\n.text:0000000000405866\n.text:0000000000405869\n.text:000000000040586e\n.text:0000000000405872\n.text:0000000000405876\n.text:000000000040587a\n.text:000000000040587f\n.text:0000000000405882\n.text:0000000000405885\n.text:000000000040588a\n.text:000000000040588c\n.text:0000000000405890\n.text:0000000000405892\n.text:0000000000405895\n.text:000000000040589a\n.text:000000000040589c\n.text:00000000004058a2\n.text:00000000004058a4\n.text:00000000004058aa\n.text:00000000004058ac\n.text:00000000004058b0\n.text:00000000004058b4\n.text:00000000004058b6\n.text:00000000004058b9\n.text:00000000004058bb\n.text:00000000004058c0\n.text:00000000004058c4\n.text:00000000004058c6\n.text:00000000004058c9\n.text:00000000004058cc\n.text:00000000004058d1\n.text:00000000004058d8\n.text:00000000004058dd\n.text:00000000004058df\n.text:00000000004058e2\n.text:00000000004058e7\n.text:00000000004058ea\n.text:00000000004058ef\n.text:00000000004058f2\n.text:00000000004058f5\n.text:00000000004058f8\n.text:00000000004058fb\n.text:00000000004058fe\n.text:0000000000405903\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590e\n.text:0000000000405912\n.text:0000000000405918\n.text:000000000040591d\n.text:0000000000405922\n.text:0000000000405927\n.text:0000000000405929\n.text:0000000000405930\n.text:0000000000405932\n.text:0000000000405935\n.text:0000000000405938\n.text:000000000040593b\n.text:000000000040593e\n.text:0000000000405940\n.text:0000000000405942\n.text:0000000000405944\n.text:0000000000405947\n.text:0000000000405949\n.text:000000000040594b\n.text:000000000040594e\n.text:0000000000405950\n.text:0000000000405952\n.text:0000000000405955\n.text:0000000000405957\n.text:0000000000405959\n.text:000000000040595c\n.text:000000000040595f\n.text:0000000000405961\n.text:0000000000405963\n.text:0000000000405966\n.text:0000000000405968\n.text:000000000040596b\n.text:000000000040596d\n.text:000000000040596f\n.text:0000000000405972\n.text:0000000000405974\n.text:0000000000405978\n.text:000000000040597c\n.text:000000000040597e\n.text:0000000000405981\n.text:0000000000405983\n.text:0000000000405985\n.text:0000000000405988\n.text:000000000040598a\n.text:000000000040598d\n.text:000000000040598f\n.text:0000000000405991\n.text:0000000000405996\n.text:0000000000405998\n.text:000000000040599a\n.text:000000000040599c\n.text:000000000040599e\n.text:00000000004059a0\n.text:00000000004059a2\n.text:00000000004059a4\n.text:00000000004059a7\n.text:00000000004059a9\n.text:00000000004059ac\n.text:00000000004059ae\n.text:00000000004059b2\n.text:00000000004059b4\n.text:00000000004059b6\n.text:00000000004059ba\n.text:00000000004059bc\n.text:00000000004059be\n.text:00000000004059c0\n.text:00000000004059c5\n.text:00000000004059c7\n.text:00000000004059ca\n.text:00000000004059cf\n.text:00000000004059d6\n.text:00000000004059dc\n.text:00000000004059e1\n.text:00000000004059e4\n.text:00000000004059e7\n.text:00000000004059ec\n.text:00000000004059f1\n.text:00000000004059f6\n.text:00000000004059f8\n.text:00000000004059fa\n.text:0000000000405a00\n.text:0000000000405a05\n.text:0000000000405a07\n.text:0000000000405a0a\n.text:0000000000405a0c\n.text:0000000000405a0e\n.text:0000000000405a10\n.text:0000000000405a12\n.text:0000000000405a15\n.text:0000000000405a18\n.text:0000000000405a1b\n.text:0000000000405a1d\n.text:0000000000405a20\n.text:0000000000405a24\n.text:0000000000405a26\n.text:0000000000405a29\n.text:0000000000405a2b\n.text:0000000000405a2d\n.text:0000000000405a2f\n.text:0000000000405a31\n.text:0000000000405a34\n.text:0000000000405a37\n.text:0000000000405a39\n.text:0000000000405a3c\n.text:0000000000405a3e\n.text:0000000000405a42\n.text:0000000000405a45\n.text:0000000000405a47\n.text:0000000000405a49\n.text:0000000000405a4d\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a57\n.text:0000000000405a5c\n.text:0000000000405a5f\n.text:0000000000405a62\n.text:0000000000405a67\n.text:0000000000405a6c\n.text:0000000000405a71\n.text:0000000000405a77\n.text:0000000000405a7c\n.text:0000000000405a86\n.text:0000000000405a89\n.text:0000000000405a90\n.text:0000000000405a93\n.text:0000000000405a96\n.text:0000000000405a98\n.text:0000000000405a9b\n.text:0000000000405aa0\n.text:0000000000405aa3\n.text:0000000000405aa6\n.text:0000000000405aa8\n.text:0000000000405aac\n.text:0000000000405ab0\n.text:0000000000405ab3\n.text:0000000000405ab7\n.text:0000000000405abb\n.text:0000000000405abe\n.text:0000000000405ac0\n.text:0000000000405ac5\n.text:0000000000405ac9\n.text:0000000000405acb\n.text:0000000000405ace\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad9\n.text:0000000000405ade\n.text:0000000000405ae3\n.text:0000000000405ae8\n.text:0000000000405aeb\n.text:0000000000405af0\n.text:0000000000405af4\n.text:0000000000405af7\n.text:0000000000405afd\n.text:0000000000405aff\n.text:0000000000405b01\n.text:0000000000405b03\n.text:0000000000405b07\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b0d\n.text:0000000000405b12\n.text:0000000000405b20\n.text:0000000000405b23\n.text:0000000000405b25\n.text:0000000000405b27\n.text:0000000000405b2b\n.text:0000000000405b2e\n.text:0000000000405b30\n.text:0000000000405b32\n.text:0000000000405b37\n.text:0000000000405b3a\n.text:0000000000405b3f\n.text:0000000000405b43\n.text:0000000000405b45\n.text:0000000000405b47\n.text:0000000000405b49\n.text:0000000000405b4b\n.text:0000000000405b54\n.text:0000000000405b5b\n.text:0000000000405b5e\n.text:0000000000405b60\n.text:0000000000405b62\n.text:0000000000405b67\n.text:0000000000405b69\n.text:0000000000405b6b\n.text:0000000000405b6e\n.text:0000000000405b70\n.text:0000000000405b73\n.text:0000000000405b79\n.text:0000000000405b7d\n.text:0000000000405b80\n.text:0000000000405b82\n.text:0000000000405b84\n.text:0000000000405b89\n.text:0000000000405b8b\n.text:0000000000405b8d\n.text:0000000000405b8f\n.text:0000000000405b94\n.text:0000000000405b97\n.text:0000000000405b9c\n.text:0000000000405b9f\n.text:0000000000405ba4\n.text:0000000000405ba7\n.text:0000000000405bae\n.text:0000000000405baf\n.text:0000000000405bb1\n.text:0000000000405bb3\n.text:0000000000405bb5\n.text:0000000000405bb7\n.text:0000000000405bb8\n'
p300
tp301
sS'__ctype_toupper_loc'
p302
(S'\n__stdcall __ctype_toupper_loc()\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_0060e018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060e018]\n'
p305
S'ff 25 72 c7 20 00\n'
p306
S'.plt:00000000004018a0\n'
p307
tp308
sS'skip_via_lseek'
p309
(S'\n__stdcall skip_via_lseek(char * filename, off_t offset)\n'
p310
V\u000aoff_t skip_via_lseek(char *filename,off_t offset)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  __off_t _Var2;\u000a  undefined8 uVar3;\u000a  int *piVar4;\u000a  int __whence;\u000a  __off_t __offset;\u000a  mtget s1;\u000a  undefined8 local_88;\u000a  long local_80;\u000a  int local_60;\u000a  int local_5c;\u000a  undefined local_58 [8];\u000a  long local_50;\u000a  int local_30;\u000a  int local_2c;\u000a  \u000a  __fd = (int)offset;\u000a  iVar1 = ioctl(__fd,0x80306d02,local_58);\u000a  _Var2 = lseek(__fd,__offset,__whence);\u000a  if ((iVar1 == 0) && (-1 < _Var2)) {\u000a    __fd = ioctl(__fd,0x80306d02,&local_88);\u000a    if ((__fd == 0) &&\u000a       (((local_50 == local_80 && (local_30 == local_60)) && (local_2c == local_5c)))) {\u000a      if (status_level != 1) {\u000a        uVar3 = dcgettext(0,\u000a                          "warning: working around lseek kernel bug for file (%s)\u005cn  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types"\u000a                          ,5);\u000a        nl_error((char *)0x0,0,uVar3,filename,local_88);\u000a      }\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a      _Var2 = -1;\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p311
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x60\nMOV R15D,ECX\nMOV R12,RDX\nMOV EBP,ESI\nMOV R14,RDI\nLEA RDX,[RSP + 0x30]\nMOV ESI,0x80306d02\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401ae0\nMOV EBX,EAX\nMOV EDI,EBP\nMOV RSI,R12\nMOV EDX,R15D\nCALL 0x00401a90\nMOV R15,RAX\nTEST EBX,EBX\nJNZ 0x004051ee\nTEST R15,R15\nJS 0x004051ee\nMOV RDX,RSP\nMOV ESI,0x80306d02\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401ae0\nTEST EAX,EAX\nJNZ 0x004051ee\nMOV RAX,qword ptr [RSP + 0x38]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x004051ee\nMOV EAX,dword ptr [RSP + 0x58]\nCMP EAX,dword ptr [RSP + 0x28]\nJNZ 0x004051ee\nMOV EAX,dword ptr [RSP + 0x5c]\nCMP EAX,dword ptr [RSP + 0x2c]\nJNZ 0x004051ee\nCMP dword ptr [0x0060e2b0],0x1\nJZ 0x004051dc\nXOR EDI,EDI\nMOV ESI,0x40a435\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV R8,qword ptr [RSP]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nCALL 0x00403360\nCALL 0x00401900\nMOV dword ptr [RAX],0x0\nMOV R15,-0x1\nMOV RAX,R15\nADD RSP,0x60\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p312
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 60\n41 89 cf\n49 89 d4\n89 f5\n49 89 fe\n48 8d 54 24 30\nbe 02 6d 30 80\n31 c0\n89 ef\ne8 86 c9 ff ff\n89 c3\n89 ef\n4c 89 e6\n44 89 fa\ne8 27 c9 ff ff\n49 89 c7\n85 db\n75 7e\n4d 85 ff\n78 79\n48 89 e2\nbe 02 6d 30 80\n31 c0\n89 ef\ne8 5a c9 ff ff\n85 c0\n75 64\n48 8b 44 24 38\n48 3b 44 24 08\n75 58\n8b 44 24 58\n3b 44 24 28\n75 4e\n8b 44 24 5c\n3b 44 24 2c\n75 44\n83 3d ff 90 20 00 01\n74 29\n31 ff\nbe 35 a4 40 00\nba 05 00 00 00\ne8 3c c8 ff ff\n48 89 c1\n4c 8b 04 24\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\ne8 84 e1 ff ff\ne8 1f c7 ff ff\nc7 00 00 00 00 00\n49 c7 c7 ff ff ff ff\n4c 89 f8\n48 83 c4 60\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p313
S'.text:0000000000405130\n.text:0000000000405131\n.text:0000000000405133\n.text:0000000000405135\n.text:0000000000405137\n.text:0000000000405138\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405142\n.text:0000000000405144\n.text:0000000000405147\n.text:000000000040514c\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405155\n.text:000000000040515a\n.text:000000000040515c\n.text:000000000040515e\n.text:0000000000405161\n.text:0000000000405164\n.text:0000000000405169\n.text:000000000040516c\n.text:000000000040516e\n.text:0000000000405170\n.text:0000000000405173\n.text:0000000000405175\n.text:0000000000405178\n.text:000000000040517d\n.text:000000000040517f\n.text:0000000000405181\n.text:0000000000405186\n.text:0000000000405188\n.text:000000000040518a\n.text:000000000040518f\n.text:0000000000405194\n.text:0000000000405196\n.text:000000000040519a\n.text:000000000040519e\n.text:00000000004051a0\n.text:00000000004051a4\n.text:00000000004051a8\n.text:00000000004051aa\n.text:00000000004051b1\n.text:00000000004051b3\n.text:00000000004051b5\n.text:00000000004051ba\n.text:00000000004051bf\n.text:00000000004051c4\n.text:00000000004051c7\n.text:00000000004051cb\n.text:00000000004051cd\n.text:00000000004051cf\n.text:00000000004051d1\n.text:00000000004051d4\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051e1\n.text:00000000004051e7\n.text:00000000004051ee\n.text:00000000004051f1\n.text:00000000004051f5\n.text:00000000004051f6\n.text:00000000004051f8\n.text:00000000004051fa\n.text:00000000004051fc\n.text:00000000004051fd\n'
p314
tp315
sS'quotearg_free'
p316
(S'\n__stdcall quotearg_free()\n'
p317
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p318
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060e2d0]\nCMP dword ptr [0x0060e2d8],0x2\nJC 0x00406f2a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004018e0\nINC RBX\nMOV EAX,dword ptr [0x0060e2d8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00406f10\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60e6b0\nCMP RDI,RAX\nJZ 0x00406f53\nCALL 0x004018e0\nMOV qword ptr [0x0060e2e0],0x100\nMOV qword ptr [0x0060e2e8],0x60e6b0\nMOV EAX,0x60e2e0\nCMP R14,RAX\nJZ 0x00406f70\nMOV RDI,R14\nCALL 0x004018e0\nMOV qword ptr [0x0060e2d0],0x60e2e0\nMOV dword ptr [0x0060e2d8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p319
S'41 57\n41 56\n53\n4c 8b 35 d4 73 20 00\n83 3d d5 73 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 c8 a9 ff ff\n48 ff c3\n8b 05 b7 73 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 b0 e6 60 00\n48 39 c7\n74 1b\ne8 a3 a9 ff ff\n48 c7 05 98 73 20 00 00 01 00 00\n48 c7 05 95 73 20 00 b0 e6 60 00\nb8 e0 e2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 7b a9 ff ff\n48 c7 05 60 73 20 00 e0 e2 60 00\nc7 05 5e 73 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p320
S'.text:0000000000406ef0\n.text:0000000000406ef2\n.text:0000000000406ef4\n.text:0000000000406ef5\n.text:0000000000406efc\n.text:0000000000406f03\n.text:0000000000406f05\n.text:0000000000406f09\n.text:0000000000406f0e\n.text:0000000000406f10\n.text:0000000000406f13\n.text:0000000000406f18\n.text:0000000000406f1b\n.text:0000000000406f21\n.text:0000000000406f25\n.text:0000000000406f28\n.text:0000000000406f2a\n.text:0000000000406f2e\n.text:0000000000406f33\n.text:0000000000406f36\n.text:0000000000406f38\n.text:0000000000406f3d\n.text:0000000000406f48\n.text:0000000000406f53\n.text:0000000000406f58\n.text:0000000000406f5b\n.text:0000000000406f5d\n.text:0000000000406f60\n.text:0000000000406f65\n.text:0000000000406f70\n.text:0000000000406f7a\n.text:0000000000406f7b\n.text:0000000000406f7d\n.text:0000000000406f7f\n'
p321
tp322
sS'quotearg_mem'
p323
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p324
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00407150\n'
p326
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p327
S'.text:0000000000407170\n.text:0000000000407173\n.text:0000000000407176\n.text:0000000000407178\n.text:000000000040717b\n.text:000000000040717e\n'
p328
tp329
sS'deregister_tm_clones'
p330
(S'\n__stdcall deregister_tm_clones()\n'
p331
V\u000a/* WARNING: Removing unreachable block (ram,0x00401de5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401def) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p332
S'MOV EAX,0x60e337\nPUSH RBP\nSUB RAX,0x60e330\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401e00\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e00\nPOP RBP\nMOV EDI,0x60e330\nJMP RAX\nPOP RBP\nRET\n'
p333
S'b8 37 e3 60 00\n55\n48 2d 30 e3 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 30 e3 60 00\nff e0\n5d\nc3\n'
p334
S'.text:0000000000401dd0\n.text:0000000000401dd5\n.text:0000000000401dd6\n.text:0000000000401ddc\n.text:0000000000401de0\n.text:0000000000401de3\n.text:0000000000401de5\n.text:0000000000401dea\n.text:0000000000401ded\n.text:0000000000401def\n.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401e00\n.text:0000000000401e01\n'
p335
tp336
sS'interrupt_handler'
p337
(S'\n__stdcall interrupt_handler()\n'
p338
V\u000avoid interrupt_handler(sig_atomic_t sParm1)\u000a\u000a{\u000a  interrupt_signal = sParm1;\u000a  return;\u000a}\u000a\u000a
p339
S'MOV dword ptr [0x0060e58c],EDI\nRET\n'
p340
S'89 3d e6 a7 20 00\nc3\n'
p341
S'.text:0000000000403da0\n.text:0000000000403da6\n'
p342
tp343
sS'ptr_align'
p344
(S'\n__stdcall ptr_align(void * ptr, size_t alignment)\n'
p345
V\u000avoid * ptr_align(void *ptr,size_t alignment)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (long)ptr + (alignment - 1);\u000a  return (void *)(uVar1 - uVar1 % alignment);\u000a}\u000a\u000a
p346
S'LEA RCX,[RDI + RSI*0x1 + -0x1]\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RSI\nSUB RCX,RDX\nMOV RAX,RCX\nRET\n'
p347
S'48 8d 4c 37 ff\n31 d2\n48 89 c8\n48 f7 f6\n48 29 d1\n48 89 c8\nc3\n'
p348
S'.text:0000000000405260\n.text:0000000000405265\n.text:0000000000405267\n.text:000000000040526a\n.text:000000000040526d\n.text:0000000000405270\n.text:0000000000405273\n'
p349
tp350
sS'fputc_unlocked'
p351
(S'\n__stdcall fputc_unlocked(int __c, FILE * __stream)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc_unlocked(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_unlocked_0060e180)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060e180]\n'
p354
S'ff 25 0a c6 20 00\n'
p355
S'.plt:0000000000401b70\n'
p356
tp357
sS'parse_symbols'
p358
(S'\n__stdcall parse_symbols(char * str, symbol_value * table, char * error_msgid)\n'
p359
V\u000aint parse_symbols(char *str,symbol_value *table,char *error_msgid)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  char *pcVar3;\u000a  undefined8 uVar4;\u000a  undefined8 in_RCX;\u000a  uint uVar5;\u000a  symbol_value *pattern;\u000a  \u000a  uVar5 = 0;\u000a  do {\u000a    pcVar3 = strchr(str,0x2c);\u000a    pattern = table;\u000a    while ((_Var2 = operand_matches(str,(char *)pattern), _Var2 == false || (pattern->value == 0)))\u000a    {\u000a      pcVar1 = pattern->symbol;\u000a      pattern = pattern + 1;\u000a      if (*pcVar1 == 0) {\u000a        if (pcVar3 == (char *)0x0) {\u000a          strlen(str);\u000a        }\u000a        uVar4 = dcgettext(0,in_RCX,5);\u000a        pcVar3 = quotearg_n_style_mem((char *)0x0,8);\u000a        nl_error((char *)0x0,0,"%s: %s",uVar4,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a        usage(1);\u000a      }\u000a    }\u000a    if ((char)error_msgid != 0) {\u000a      uVar5 = 0;\u000a    }\u000a    uVar5 = uVar5 | pattern->value;\u000a    str = pcVar3 + 1;\u000a  } while (pcVar3 != (char *)0x0);\u000a  return (int)uVar5;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],RCX\nMOV R12D,EDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOV ESI,0x2c\nMOV RDI,RBX\nCALL 0x00401a60\nMOV R15,RAX\nMOV R14,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x2c\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00404080\nTEST AL,AL\nJZ 0x00403e1c\nMOV EAX,dword ptr [R14 + 0xc]\nTEST EAX,EAX\nJNZ 0x00403e30\nCMP byte ptr [R14],0x0\nLEA R14,[R14 + 0x10]\nJNZ 0x00403e00\nJMP 0x00403e57\nTEST R12B,R12B\nMOV ECX,0x0\nCMOVNZ EBP,ECX\nOR EBP,EAX\nTEST R15,R15\nLEA RBX,[R15 + 0x1]\nJNZ 0x00403de0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R15,R15\nJNZ 0x00403e69\nMOV RDI,RBX\nCALL 0x00401a20\nMOV R15,RAX\nJMP 0x00403e6c\nSUB R15,RBX\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,qword ptr [RSP]\nCALL 0x00401a00\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,RBX\nMOV RCX,R15\nCALL 0x00407220\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x40a0d2\nXOR EAX,EAX\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00403360\nMOV EDI,0x1\nCALL 0x00401ea0\n'
p361
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 0c 24\n41 89 d4\n49 89 f5\n48 89 fb\n31 ed\n66 0f 1f 44 00 00\nbe 2c 00 00 00\n48 89 df\ne8 73 dc ff ff\n49 89 c7\n4d 89 ee\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nba 2c 00 00 00\n48 89 df\n4c 89 f6\ne8 70 02 00 00\n84 c0\n74 08\n41 8b 46 0c\n85 c0\n75 14\n41 80 3e 00\n4d 8d 76 10\n75 da\neb 2f\n45 84 e4\nb9 00 00 00 00\n0f 45 e9\n09 c5\n4d 85 ff\n49 8d 5f 01\n75 9a\n89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 85 ff\n75 0d\n48 89 df\ne8 bc db ff ff\n49 89 c7\neb 03\n49 29 df\n31 ff\nba 05 00 00 00\n48 8b 34 24\ne8 84 db ff ff\n48 89 c5\n31 ff\nbe 08 00 00 00\n48 89 da\n4c 89 f9\ne8 8f 33 00 00\n48 89 c3\n31 ff\n31 f6\nba d2 a0 40 00\n31 c0\n48 89 e9\n49 89 d8\ne8 b6 f4 ff ff\nbf 01 00 00 00\ne8 ec df ff ff\n'
p362
S'.text:0000000000403dc0\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dc9\n.text:0000000000403dca\n.text:0000000000403dcb\n.text:0000000000403dcf\n.text:0000000000403dd2\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403dda\n.text:0000000000403de0\n.text:0000000000403de5\n.text:0000000000403de8\n.text:0000000000403ded\n.text:0000000000403df0\n.text:0000000000403df3\n.text:0000000000403e00\n.text:0000000000403e05\n.text:0000000000403e08\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e12\n.text:0000000000403e14\n.text:0000000000403e18\n.text:0000000000403e1a\n.text:0000000000403e1c\n.text:0000000000403e20\n.text:0000000000403e24\n.text:0000000000403e26\n.text:0000000000403e30\n.text:0000000000403e33\n.text:0000000000403e38\n.text:0000000000403e3b\n.text:0000000000403e3d\n.text:0000000000403e40\n.text:0000000000403e44\n.text:0000000000403e46\n.text:0000000000403e48\n.text:0000000000403e4c\n.text:0000000000403e4d\n.text:0000000000403e4f\n.text:0000000000403e51\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e56\n.text:0000000000403e57\n.text:0000000000403e5a\n.text:0000000000403e5c\n.text:0000000000403e5f\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e69\n.text:0000000000403e6c\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e77\n.text:0000000000403e7c\n.text:0000000000403e7f\n.text:0000000000403e81\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8c\n.text:0000000000403e91\n.text:0000000000403e94\n.text:0000000000403e96\n.text:0000000000403e98\n.text:0000000000403e9d\n.text:0000000000403e9f\n.text:0000000000403ea2\n.text:0000000000403ea5\n.text:0000000000403eaa\n.text:0000000000403eaf\n'
p363
tp364
sS'iftruncate'
p365
(S'\n__stdcall iftruncate()\n'
p366
V\u000aint iftruncate(void)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  __off_t __length;\u000a  \u000a  do {\u000a    process_signals();\u000a    iVar1 = ftruncate(1,__length);\u000a    if (-1 < iVar1) {\u000a      return iVar1;\u000a    }\u000a    piVar2 = __errno_location();\u000a  } while (*piVar2 == 4);\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004040b0\nMOV EDI,0x1\nMOV RSI,RBX\nCALL 0x00401a80\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x00403462\nCALL 0x00401900\nCMP dword ptr [RAX],0x4\nJZ 0x00403440\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p368
S'55\n53\n50\n48 89 fb\n66 2e 0f 1f 84 00 00 00 00 00\ne8 6b 0c 00 00\nbf 01 00 00 00\n48 89 de\ne8 2e e6 ff ff\n89 c5\n85 ed\n79 0a\ne8 a3 e4 ff ff\n83 38 04\n74 de\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p369
S'.text:0000000000403430\n.text:0000000000403431\n.text:0000000000403432\n.text:0000000000403433\n.text:0000000000403436\n.text:0000000000403440\n.text:0000000000403445\n.text:000000000040344a\n.text:000000000040344d\n.text:0000000000403452\n.text:0000000000403454\n.text:0000000000403456\n.text:0000000000403458\n.text:000000000040345d\n.text:0000000000403460\n.text:0000000000403462\n.text:0000000000403464\n.text:0000000000403468\n.text:0000000000403469\n.text:000000000040346a\n'
p370
tp371
sS'adjust_value'
p372
(S'\n__stdcall adjust_value()\n'
p373
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p374
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x00405c8c\nFLD tword ptr [0x0040abe0]\nFUCOMIP ST0,ST1\nJBE 0x00405c8c\nFLD dword ptr [0x0040abd4]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x40abc8 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x40abc8 + RDX*0x4]\nRET\n'
p375
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d 0d 50 00 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 f3 4f 00 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 c8 ab 40 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 c8 ab 40 00\nc3\n'
p376
S'.text:0000000000405bc0\n.text:0000000000405bc4\n.text:0000000000405bc7\n.text:0000000000405bcd\n.text:0000000000405bd3\n.text:0000000000405bd5\n.text:0000000000405bdb\n.text:0000000000405be1\n.text:0000000000405be3\n.text:0000000000405be5\n.text:0000000000405be9\n.text:0000000000405bee\n.text:0000000000405bf5\n.text:0000000000405bf9\n.text:0000000000405bfe\n.text:0000000000405c02\n.text:0000000000405c06\n.text:0000000000405c0a\n.text:0000000000405c0f\n.text:0000000000405c16\n.text:0000000000405c1a\n.text:0000000000405c1f\n.text:0000000000405c21\n.text:0000000000405c25\n.text:0000000000405c29\n.text:0000000000405c33\n.text:0000000000405c38\n.text:0000000000405c3a\n.text:0000000000405c3c\n.text:0000000000405c3e\n.text:0000000000405c44\n.text:0000000000405c46\n.text:0000000000405c4a\n.text:0000000000405c4f\n.text:0000000000405c51\n.text:0000000000405c54\n.text:0000000000405c57\n.text:0000000000405c5b\n.text:0000000000405c62\n.text:0000000000405c64\n.text:0000000000405c66\n.text:0000000000405c69\n.text:0000000000405c6c\n.text:0000000000405c6e\n.text:0000000000405c71\n.text:0000000000405c74\n.text:0000000000405c76\n.text:0000000000405c79\n.text:0000000000405c7e\n.text:0000000000405c81\n.text:0000000000405c85\n.text:0000000000405c8c\n'
p377
tp378
sS'quotearg_custom'
p379
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p380
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00407390\n'
p382
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p383
S'.text:0000000000407410\n.text:0000000000407413\n.text:0000000000407416\n.text:0000000000407419\n.text:000000000040741b\n.text:000000000040741e\n.text:0000000000407421\n.text:0000000000407424\n'
p384
tp385
sS'free'
p386
(S'\n__stdcall free(void * __ptr)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060e038)();\u000a  return;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x0060e038]\n'
p389
S'ff 25 52 c7 20 00\n'
p390
S'.plt:00000000004018e0\n'
p391
tp392
sS'close'
p393
(S'\n__stdcall close(int __fd)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060e140)();\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x0060e140]\n'
p396
S'ff 25 4a c6 20 00\n'
p397
S'.plt:0000000000401af0\n'
p398
tp399
sS'fdatasync'
p400
(S'\n__stdcall fdatasync(int __fildes)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdatasync(int __fildes)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fdatasync_0060e050)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060e050]\n'
p403
S'ff 25 3a c7 20 00\n'
p404
S'.plt:0000000000401910\n'
p405
tp406
sS'getenv'
p407
(S'\n__stdcall getenv(char * __name)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060e020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060e020]\n'
p410
S'ff 25 6a c7 20 00\n'
p411
S'.plt:00000000004018b0\n'
p412
tp413
sS'rpl_fseeko'
p414
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p415
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060e220)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004087a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004087a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004087ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401cb0\nMOV RDI,RBX\nCALL 0x00401ba0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401a90\nCMP RAX,-0x1\nJZ 0x004087e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004087e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p417
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 f6 94 ff ff\n48 89 df\ne8 de 93 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 c1 92 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p418
S'.text:0000000000408780\n.text:0000000000408781\n.text:0000000000408783\n.text:0000000000408784\n.text:0000000000408787\n.text:000000000040878a\n.text:000000000040878d\n.text:0000000000408791\n.text:0000000000408795\n.text:0000000000408797\n.text:000000000040879b\n.text:000000000040879f\n.text:00000000004087a1\n.text:00000000004087a6\n.text:00000000004087a8\n.text:00000000004087ab\n.text:00000000004087ae\n.text:00000000004087b1\n.text:00000000004087b2\n.text:00000000004087b4\n.text:00000000004087b5\n.text:00000000004087ba\n.text:00000000004087bd\n.text:00000000004087c2\n.text:00000000004087c4\n.text:00000000004087c7\n.text:00000000004087ca\n.text:00000000004087cf\n.text:00000000004087d3\n.text:00000000004087d5\n.text:00000000004087d8\n.text:00000000004087df\n.text:00000000004087e1\n.text:00000000004087e3\n.text:00000000004087e8\n.text:00000000004087e9\n.text:00000000004087eb\n.text:00000000004087ec\n'
p419
tp420
sS'quote_n_mem'
p421
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p422
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'MOV ECX,0x60e2f0\nJMP 0x00406f90\n'
p424
S'b9 f0 e2 60 00\ne9 36 fb ff ff\n'
p425
S'.text:0000000000407450\n.text:0000000000407455\n'
p426
tp427
sS'xstrdup'
p428
(S'\n__stdcall xstrdup(char * string)\n'
p429
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p430
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a20\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00407fa0\n'
p431
S'53\n48 89 fb\ne8 47 9a ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p432
S'.text:0000000000407fd0\n.text:0000000000407fd1\n.text:0000000000407fd4\n.text:0000000000407fd9\n.text:0000000000407fdd\n.text:0000000000407fe0\n.text:0000000000407fe1\n'
p433
tp434
sS'c_ispunct'
p435
(S'\n__stdcall c_ispunct()\n'
p436
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p437
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00408c12\nMOV AL,0x1\nJMP qword ptr [0x40b8a0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p438
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd a0 b8 40 00\nc3\n31 c0\nc3\n'
p439
S'.text:0000000000408c00\n.text:0000000000408c03\n.text:0000000000408c06\n.text:0000000000408c08\n.text:0000000000408c0a\n.text:0000000000408c11\n.text:0000000000408c12\n.text:0000000000408c14\n'
p440
tp441
sS'fstat'
p442
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p443
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060e1d0)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401c10\n'
p445
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 11 8b ff ff\n'
p446
S'.text:00000000004090f0\n.text:00000000004090f3\n.text:00000000004090f5\n.text:00000000004090fa\n'
p447
tp448
sS'fscanf'
p449
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060e130)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060e130]\n'
p452
S'ff 25 5a c6 20 00\n'
p453
S'.plt:0000000000401ad0\n'
p454
tp455
sS'apply_translations'
p456
(S'\n__stdcall apply_translations()\n'
p457
V\u000aundefined8 apply_translations(void)\u000a\u000a{\u000a  __int32_t *p_Var1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  undefined8 in_RAX;\u000a  __int32_t **pp_Var4;\u000a  long lVar5;\u000a  \u000a  if ((conversions_mask & 1U) != 0) {\u000a    translate_charset("");\u000a  }\u000a  if ((conversions_mask & 0x40U) == 0) {\u000a    if ((conversions_mask & 0x20U) == 0) goto LAB_004031bd;\u000a    pp_Var4 = __ctype_tolower_loc();\u000a    p_Var1 = *pp_Var4;\u000a    lVar5 = -0x100;\u000a    do {\u000a      *(undefined *)((long)&input_file + lVar5) =\u000a           *(undefined *)(p_Var1 + (ulong)*(byte *)((long)&input_file + lVar5));\u000a      lVar5 = lVar5 + 1;\u000a    } while (lVar5 != 0);\u000a  }\u000a  else {\u000a    pp_Var4 = __ctype_toupper_loc();\u000a    p_Var1 = *pp_Var4;\u000a    lVar5 = -0x100;\u000a    do {\u000a      *(undefined *)((long)&input_file + lVar5) =\u000a           *(undefined *)(p_Var1 + (ulong)*(byte *)((long)&input_file + lVar5));\u000a      lVar5 = lVar5 + 1;\u000a    } while (lVar5 != 0);\u000a  }\u000a  translation_needed = 1;\u000aLAB_004031bd:\u000a  if ((conversions_mask & 2U) == 0) {\u000a    if ((conversions_mask & 4U) == 0) {\u000a      return in_RAX;\u000a    }\u000a    translate_charset("");\u000a    pcVar3 = "";\u000a    pcVar2 = "";\u000a  }\u000a  else {\u000a    translate_charset("");\u000a    pcVar3 = "";\u000a    pcVar2 = "";\u000a  }\u000a  newline_character = pcVar2[10];\u000a  space_character = pcVar3[0x20];\u000a  return in_RAX;\u000a}\u000a\u000a
p458
S'PUSH RAX\nTEST byte ptr [0x0060e4cc],0x1\nJZ 0x00403144\nMOV EDI,0x40a8b0\nCALL 0x00404550\nMOV EAX,dword ptr [0x0060e4cc]\nTEST AL,0x40\nJNZ 0x00403188\nTEST AL,0x20\nJZ 0x004031bd\nCALL 0x00401d70\nMOV RAX,qword ptr [RAX]\nMOV RCX,-0x100\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [0x60e4a0 + RCX]\nMOVZX EDX,byte ptr [RAX + RDX*0x4]\nMOV byte ptr [0x60e4a0 + RCX],DL\nINC RCX\nJNZ 0x00403170\nJMP 0x004031b6\nCALL 0x004018a0\nMOV RAX,qword ptr [RAX]\nMOV RCX,-0x100\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EDX,byte ptr [0x60e4a0 + RCX]\nMOVZX EDX,byte ptr [RAX + RDX*0x4]\nMOV byte ptr [0x60e4a0 + RCX],DL\nINC RCX\nJNZ 0x004031a0\nMOV byte ptr [0x0060e600],0x1\nMOV EAX,dword ptr [0x0060e4cc]\nTEST AL,0x2\nJNZ 0x004031e1\nTEST AL,0x4\nJZ 0x00403205\nMOV EDI,0x40aab0\nCALL 0x00404550\nMOV EAX,0x40aad0\nMOV ECX,0x40aaba\nJMP 0x004031f5\nMOV EDI,0x40a9b0\nCALL 0x00404550\nMOV EAX,0x40a9d0\nMOV ECX,0x40a9ba\nMOV CL,byte ptr [RCX]\nMOV byte ptr [0x0060e2b4],CL\nMOV AL,byte ptr [RAX]\nMOV byte ptr [0x0060e2b5],AL\nPOP RAX\nRET\n'
p459
S'50\nf6 05 94 b3 20 00 01\n74 0a\nbf b0 a8 40 00\ne8 0c 14 00 00\n8b 05 82 b3 20 00\na8 40\n75 3a\na8 20\n74 6b\ne8 19 ec ff ff\n48 8b 00\n48 c7 c1 00 ff ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 91 a0 e4 60 00\n0f b6 14 90\n88 91 a0 e4 60 00\n48 ff c1\n75 ea\neb 2e\ne8 13 e7 ff ff\n48 8b 00\n48 c7 c1 00 ff ff ff\n66 0f 1f 84 00 00 00 00 00\n0f b6 91 a0 e4 60 00\n0f b6 14 90\n88 91 a0 e4 60 00\n48 ff c1\n75 ea\nc6 05 43 b4 20 00 01\n8b 05 09 b3 20 00\na8 02\n75 1a\na8 04\n74 3a\nbf b0 aa 40 00\ne8 7b 13 00 00\nb8 d0 aa 40 00\nb9 ba aa 40 00\neb 14\nbf b0 a9 40 00\ne8 65 13 00 00\nb8 d0 a9 40 00\nb9 ba a9 40 00\n8a 09\n88 0d b7 b0 20 00\n8a 00\n88 05 b0 b0 20 00\n58\nc3\n'
p460
S'.text:0000000000403130\n.text:0000000000403131\n.text:0000000000403138\n.text:000000000040313a\n.text:000000000040313f\n.text:0000000000403144\n.text:000000000040314a\n.text:000000000040314c\n.text:000000000040314e\n.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403157\n.text:000000000040315a\n.text:0000000000403161\n.text:0000000000403170\n.text:0000000000403177\n.text:000000000040317b\n.text:0000000000403181\n.text:0000000000403184\n.text:0000000000403186\n.text:0000000000403188\n.text:000000000040318d\n.text:0000000000403190\n.text:0000000000403197\n.text:00000000004031a0\n.text:00000000004031a7\n.text:00000000004031ab\n.text:00000000004031b1\n.text:00000000004031b4\n.text:00000000004031b6\n.text:00000000004031bd\n.text:00000000004031c3\n.text:00000000004031c5\n.text:00000000004031c7\n.text:00000000004031c9\n.text:00000000004031cb\n.text:00000000004031d0\n.text:00000000004031d5\n.text:00000000004031da\n.text:00000000004031df\n.text:00000000004031e1\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f5\n.text:00000000004031f7\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403205\n.text:0000000000403206\n'
p461
tp462
sS'verror'
p463
(S'\n__stdcall verror(char * format, __va_list_tag * args)\n'
p464
V\u000avoid verror(char *format,__va_list_tag *args)\u000a\u000a{\u000a  verror_at_line(format,(char *)args,(__va_list_tag *)0x0);\u000a  return;\u000a}\u000a\u000a
p465
S'MOV R9,RCX\nMOV RAX,RDX\nXOR EDX,EDX\nXOR ECX,ECX\nMOV R8,RAX\nJMP 0x004078a0\n'
p466
S'49 89 c9\n48 89 d0\n31 d2\n31 c9\n49 89 c0\neb 01\n'
p467
S'.text:0000000000407890\n.text:0000000000407893\n.text:0000000000407896\n.text:0000000000407898\n.text:000000000040789a\n.text:000000000040789d\n'
p468
tp469
sS'memcpy'
p470
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060e190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060e190]\n'
p473
S'ff 25 fa c5 20 00\n'
p474
S'.plt:0000000000401b90\n'
p475
tp476
sS'swab_buffer'
p477
(S'\n__stdcall swab_buffer(char * buf, size_t * nread)\n'
p478
V\u000achar * swab_buffer(char *buf,size_t *nread)\u000a\u000a{\u000a  char *pcVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  \u000a  if (char_is_saved == 1) {\u000a    buf[-1] = saved_char;\u000a    buf = buf + -1;\u000a    *nread = *nread + 1;\u000a    char_is_saved = 0;\u000a  }\u000a  uVar2 = *nread;\u000a  if ((uVar2 & 1) != 0) {\u000a    *nread = uVar2 - 1;\u000a    saved_char = buf[uVar2 - 1];\u000a    char_is_saved = 1;\u000a  }\u000a  uVar2 = *nread >> 1;\u000a  if (uVar2 != 0) {\u000a    pcVar1 = buf + *nread;\u000a    lVar3 = -uVar2;\u000a    do {\u000a      *pcVar1 = pcVar1[-2];\u000a      pcVar1 = pcVar1 + -2;\u000a      lVar3 = lVar3 + 1;\u000a    } while (lVar3 != 0);\u000a  }\u000a  return buf + 1;\u000a}\u000a\u000a
p479
S'CMP byte ptr [0x0060e618],0x1\nJNZ 0x00404d7f\nMOV AL,byte ptr [0x0060e619]\nMOV byte ptr [RDI + -0x1],AL\nDEC RDI\nINC qword ptr [RSI]\nMOV byte ptr [0x0060e618],0x0\nMOV RAX,qword ptr [RSI]\nTEST AL,0x1\nJZ 0x00404d9e\nLEA RCX,[RAX + -0x1]\nMOV qword ptr [RSI],RCX\nMOV AL,byte ptr [RDI + RAX*0x1 + -0x1]\nMOV byte ptr [0x0060e619],AL\nMOV byte ptr [0x0060e618],0x1\nMOV RAX,qword ptr [RSI]\nMOV RCX,RAX\nSHR RCX,1\nJZ 0x00404dbf\nADD RAX,RDI\nNEG RCX\nNOP\nMOVZX EDX,byte ptr [RAX + -0x2]\nMOV byte ptr [RAX],DL\nLEA RAX,[RAX + -0x2]\nINC RCX\nJNZ 0x00404db0\nINC RDI\nMOV RAX,RDI\nRET\n'
p480
S'80 3d b1 98 20 00 01\n75 16\n8a 05 aa 98 20 00\n88 47 ff\n48 ff cf\n48 ff 06\nc6 05 99 98 20 00 00\n48 8b 06\na8 01\n74 18\n48 8d 48 ff\n48 89 0e\n8a 44 07 ff\n88 05 82 98 20 00\nc6 05 7a 98 20 00 01\n48 8b 06\n48 89 c1\n48 d1 e9\n74 16\n48 01 f8\n48 f7 d9\n90\n0f b6 50 fe\n88 10\n48 8d 40 fe\n48 ff c1\n75 f1\n48 ff c7\n48 89 f8\nc3\n'
p481
S'.text:0000000000404d60\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6f\n.text:0000000000404d72\n.text:0000000000404d75\n.text:0000000000404d78\n.text:0000000000404d7f\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d86\n.text:0000000000404d8a\n.text:0000000000404d8d\n.text:0000000000404d91\n.text:0000000000404d97\n.text:0000000000404d9e\n.text:0000000000404da1\n.text:0000000000404da4\n.text:0000000000404da7\n.text:0000000000404da9\n.text:0000000000404dac\n.text:0000000000404daf\n.text:0000000000404db0\n.text:0000000000404db4\n.text:0000000000404db6\n.text:0000000000404dba\n.text:0000000000404dbd\n.text:0000000000404dbf\n.text:0000000000404dc2\n.text:0000000000404dc5\n'
p482
tp483
sS'close_stdout_set_ignore_EPIPE'
p484
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p485
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p486
S'MOV byte ptr [0x0060e658],DIL\nRET\n'
p487
S'40 88 3d 01 93 20 00\nc3\n'
p488
S'.text:0000000000405350\n.text:0000000000405357\n'
p489
tp490
sS'iswprint'
p491
(S'\n__stdcall iswprint(wint_t __wc)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060e270)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060e270]\n'
p494
S'ff 25 1a c5 20 00\n'
p495
S'.plt:0000000000401d50\n'
p496
tp497
sS'quit'
p498
(S'\n__stdcall quit()\n'
p499
V\u000avoid quit(void)\u000a\u000a{\u000a  finish_up();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p500
S'PUSH RAX\nCALL 0x00403d70\nMOV EDI,0x1\nCALL 0x00401d10\n'
p501
S'50\ne8 6a f3 ff ff\nbf 01 00 00 00\ne8 00 d3 ff ff\n'
p502
S'.text:0000000000404a00\n.text:0000000000404a01\n.text:0000000000404a06\n.text:0000000000404a0b\n'
p503
tp504
sS'ftruncate'
p505
(S'\n__stdcall ftruncate(int __fd, __off_t __length)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ftruncate(int __fd,__off_t __length)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ftruncate_0060e108)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060e108]\n'
p508
S'ff 25 82 c6 20 00\n'
p509
S'.plt:0000000000401a80\n'
p510
tp511
sS'c_isspace'
p512
(S'\n__stdcall c_isspace()\n'
p513
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p514
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00408c35\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p515
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p516
S'.text:0000000000408c20\n.text:0000000000408c23\n.text:0000000000408c26\n.text:0000000000408c28\n.text:0000000000408c2d\n.text:0000000000408c2f\n.text:0000000000408c31\n.text:0000000000408c34\n.text:0000000000408c35\n.text:0000000000408c37\n'
p517
tp518
sS'open'
p519
(S'\n__stdcall open(char * __file, int __oflag)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060e218)();\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060e218]\n'
p522
S'ff 25 72 c5 20 00\n'
p523
S'.plt:0000000000401ca0\n'
p524
tp525
sS'quotearg_n_custom_mem'
p526
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p527
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060e6a0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060e690]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e680]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e670]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406100\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406f90\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p529
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 e7 72 20 00\n48 89 44 24 30\n0f 10 05 cb 72 20 00\n0f 29 44 24 20\n0f 10 05 af 72 20 00\n0f 29 44 24 10\n0f 10 05 93 72 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p530
S'.text:00000000004073a0\n.text:00000000004073a1\n.text:00000000004073a3\n.text:00000000004073a5\n.text:00000000004073a6\n.text:00000000004073aa\n.text:00000000004073ad\n.text:00000000004073b0\n.text:00000000004073b2\n.text:00000000004073b9\n.text:00000000004073be\n.text:00000000004073c5\n.text:00000000004073ca\n.text:00000000004073d1\n.text:00000000004073d6\n.text:00000000004073dd\n.text:00000000004073e1\n.text:00000000004073e4\n.text:00000000004073e7\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f1\n.text:00000000004073f4\n.text:00000000004073f7\n.text:00000000004073fc\n.text:0000000000407400\n.text:0000000000407401\n.text:0000000000407403\n.text:0000000000407405\n.text:0000000000407406\n'
p531
tp532
sS'_init'
p533
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p534
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060dff8;\u000a  if (PTR___gmon_start___0060dff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060dff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060dff8]\nTEST RAX,RAX\nJZ 0x0040188a\nCALL RAX\nADD RSP,0x8\nRET\n'
p536
S'48 83 ec 08\n48 8b 05 75 c7 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p537
S'.init:0000000000401878\n.init:000000000040187c\n.init:0000000000401883\n.init:0000000000401886\n.init:0000000000401888\n.init:000000000040188a\n.init:000000000040188e\n'
p538
tp539
sS'iread'
p540
(S'\n__stdcall iread(char * buf, size_t size)\n'
p541
V\u000assize_t iread(char *buf,size_t size)\u000a\u000a{\u000a  ssize_t prev_nread;\u000a  ulong uVar1;\u000a  int *piVar2;\u000a  ulong uVar3;\u000a  undefined8 uVar4;\u000a  ulong __nbytes;\u000a  \u000a  while( true ) {\u000a    process_signals();\u000a    uVar1 = read((int)buf,(void *)size,__nbytes);\u000a    if (-1 < (long)uVar1) break;\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 != 4) {\u000a      return uVar1;\u000a    }\u000a  }\u000a  if ((uVar1 != 0) && (uVar1 < __nbytes)) {\u000a    process_signals();\u000a  }\u000a  if (warn_partial_read == false) {\u000a    return uVar1;\u000a  }\u000a  if (uVar1 == 0) {\u000a    return 0;\u000a  }\u000a  if (prev_nread < 1) {\u000a    return uVar1;\u000a  }\u000a  if (__nbytes <= (ulong)prev_nread) {\u000a    return uVar1;\u000a  }\u000a  if (status_level != 1) {\u000a    uVar3 = select_plural(prev_nread);\u000a    uVar4 = dcngettext(0,"warning: partial read (%lu byte); suggest iflag=fullblock",\u000a                       "warning: partial read (%lu bytes); suggest iflag=fullblock",uVar3,5);\u000a    nl_error((char *)0x0,0,uVar4,prev_nread);\u000a  }\u000a  warn_partial_read = false;\u000a  return uVar1;\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV EBP,EDI\nNOP\nCALL 0x004040b0\nMOV EDI,EBP\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00401b10\nMOV RBX,RAX\nTEST RBX,RBX\nJNS 0x00403fd6\nCALL 0x00401900\nCMP dword ptr [RAX],0x4\nJZ 0x00403fb0\nJMP 0x00404053\nJZ 0x00403fe2\nCMP RBX,R14\nJNC 0x00403fe2\nCALL 0x004040b0\nTEST RBX,RBX\nSETZ AL\nCMP byte ptr [0x0060e5b0],0x0\nJZ 0x00404053\nTEST AL,AL\nJNZ 0x00404053\nMOV R15,qword ptr [0x0060e5c0]\nTEST R15,R15\nJLE 0x0040404c\nCMP R15,R14\nJNC 0x0040404c\nCMP dword ptr [0x0060e2b0],0x1\nJZ 0x00404045\nMOV RDI,R15\nCALL 0x00404150\nXOR EDI,EDI\nMOV ESI,0x40a1c7\nMOV EDX,0x40a201\nMOV R8D,0x5\nMOV RCX,RAX\nCALL 0x00401cc0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00403360\nMOV byte ptr [0x0060e5b0],0x0\nMOV qword ptr [0x0060e5c0],RBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p543
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n89 fd\n90\ne8 fb 00 00 00\n89 ef\n4c 89 fe\n4c 89 f2\ne8 4e db ff ff\n48 89 c3\n48 85 db\n79 0c\ne8 31 d9 ff ff\n83 38 04\n74 dc\neb 7d\n74 0a\n4c 39 f3\n73 05\ne8 ce 00 00 00\n48 85 db\n0f 94 c0\n80 3d c1 a5 20 00 00\n74 62\n84 c0\n75 5e\n4c 8b 3d c4 a5 20 00\n4d 85 ff\n7e 4b\n4d 39 f7\n73 46\n83 3d a3 a2 20 00 01\n74 36\n4c 89 ff\ne8 39 01 00 00\n31 ff\nbe c7 a1 40 00\nba 01 a2 40 00\n41 b8 05 00 00 00\n48 89 c1\ne8 8f dc ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f9\ne8 1b f3 ff ff\nc6 05 64 a5 20 00 00\n48 89 1d 6d a5 20 00\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p544
S'.text:0000000000403fa0\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa6\n.text:0000000000403fa7\n.text:0000000000403faa\n.text:0000000000403fad\n.text:0000000000403faf\n.text:0000000000403fb0\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbd\n.text:0000000000403fc2\n.text:0000000000403fc5\n.text:0000000000403fc8\n.text:0000000000403fca\n.text:0000000000403fcf\n.text:0000000000403fd2\n.text:0000000000403fd4\n.text:0000000000403fd6\n.text:0000000000403fd8\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fe2\n.text:0000000000403fe5\n.text:0000000000403fe8\n.text:0000000000403fef\n.text:0000000000403ff1\n.text:0000000000403ff3\n.text:0000000000403ff5\n.text:0000000000403ffc\n.text:0000000000403fff\n.text:0000000000404001\n.text:0000000000404004\n.text:0000000000404006\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404012\n.text:0000000000404017\n.text:0000000000404019\n.text:000000000040401e\n.text:0000000000404023\n.text:0000000000404029\n.text:000000000040402c\n.text:0000000000404031\n.text:0000000000404034\n.text:0000000000404036\n.text:0000000000404038\n.text:000000000040403a\n.text:000000000040403d\n.text:0000000000404040\n.text:0000000000404045\n.text:000000000040404c\n.text:0000000000404053\n.text:0000000000404056\n.text:000000000040405a\n.text:000000000040405b\n.text:000000000040405d\n.text:000000000040405f\n.text:0000000000404060\n'
p545
tp546
sS'write_output'
p547
(S'\n__stdcall write_output()\n'
p548
V\u000avoid write_output(void)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  sVar2 = iwrite();\u000a  w_bytes = w_bytes + sVar2;\u000a  if (sVar2 == output_blocksize) {\u000a    w_full = w_full + 1;\u000a    oc = 0;\u000a    return;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar1 = *puVar3;\u000a  uVar4 = dcgettext(0,"writing to %s",5);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  nl_error((char *)0x0,(ulong)uVar1,uVar4,pcVar5);\u000a  if (sVar2 != 0) {\u000a    w_partial = w_partial + 1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  quit();\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060e608]\nMOV RSI,qword ptr [0x0060e4d8]\nCALL 0x00404840\nMOV RBX,RAX\nADD qword ptr [0x0060e5f8],RBX\nCMP RBX,qword ptr [0x0060e4d8]\nJNZ 0x004050d1\nINC qword ptr [0x0060e5e0]\nMOV qword ptr [0x0060e620],0x0\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401900\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a387\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00403360\nTEST RBX,RBX\nJZ 0x0040511c\nINC qword ptr [0x0060e5e8]\nCALL 0x00404a00\n'
p550
S'55\n41 56\n53\n48 8b 3d 6d 95 20 00\n48 8b 35 36 94 20 00\ne8 99 f7 ff ff\n48 89 c3\n48 01 1d 47 95 20 00\n48 3b 1d 20 94 20 00\n75 17\n48 ff 05 1f 95 20 00\n48 c7 05 54 95 20 00 00 00 00 00\n5b\n41 5e\n5d\nc3\ne8 2a c8 ff ff\n44 8b 30\n31 ff\nbe 87 a3 40 00\nba 05 00 00 00\ne8 16 c9 ff ff\n48 89 c5\n48 8b 35 cc 93 20 00\nbf 04 00 00 00\ne8 62 21 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 50 e2 ff ff\n48 85 db\n74 07\n48 ff 05 cc 94 20 00\ne8 df f8 ff ff\n'
p551
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405093\n.text:0000000000405094\n.text:000000000040509b\n.text:00000000004050a2\n.text:00000000004050a7\n.text:00000000004050aa\n.text:00000000004050b1\n.text:00000000004050b8\n.text:00000000004050ba\n.text:00000000004050c1\n.text:00000000004050cc\n.text:00000000004050cd\n.text:00000000004050cf\n.text:00000000004050d0\n.text:00000000004050d1\n.text:00000000004050d6\n.text:00000000004050d9\n.text:00000000004050db\n.text:00000000004050e0\n.text:00000000004050e5\n.text:00000000004050ea\n.text:00000000004050ed\n.text:00000000004050f4\n.text:00000000004050f9\n.text:00000000004050fe\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405105\n.text:0000000000405108\n.text:000000000040510b\n.text:0000000000405110\n.text:0000000000405113\n.text:0000000000405115\n.text:000000000040511c\n'
p552
tp553
sS'set_quoting_flags'
p554
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p555
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'TEST RDI,RDI\nMOV ECX,0x60e670\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p557
S'48 85 ff\nb9 70 e6 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p558
S'.text:00000000004060e0\n.text:00000000004060e3\n.text:00000000004060e8\n.text:00000000004060ec\n.text:00000000004060ef\n.text:00000000004060f2\n'
p559
tp560
sS'realloc'
p561
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060e1e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060e1e0]\n'
p564
S'ff 25 aa c5 20 00\n'
p565
S'.plt:0000000000401c30\n'
p566
tp567
sS'multiple_bits_set'
p568
(S'\n__stdcall multiple_bits_set()\n'
p569
V\u000a_Bool multiple_bits_set(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)((in_EDI - 1 & in_EDI) != 0);\u000a}\u000a\u000a
p570
S'LEA EAX,[RDI + -0x1]\nTEST EAX,EDI\nSETNZ AL\nRET\n'
p571
S'8d 47 ff\n85 f8\n0f 95 c0\nc3\n'
p572
S'.text:0000000000404070\n.text:0000000000404073\n.text:0000000000404075\n.text:0000000000404078\n'
p573
tp574
sS'localeconv'
p575
(S'\n__stdcall localeconv()\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0060e090)();\u000a  return plVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060e090]\n'
p578
S'ff 25 fa c6 20 00\n'
p579
S'.plt:0000000000401990\n'
p580
tp581
sS'__fprintf_chk'
p582
(S'\n__stdcall __fprintf_chk()\n'
p583
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060e260)();\u000a  return;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060e260]\n'
p585
S'ff 25 2a c5 20 00\n'
p586
S'.plt:0000000000401d30\n'
p587
tp588
sS'maybe_close_stdout'
p589
(S'\n__stdcall maybe_close_stdout()\n'
p590
V\u000aundefined8 maybe_close_stdout(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RAX;\u000a  undefined8 uVar2;\u000a  \u000a  if (close_stdout_required == 0) {\u000a    uVar2 = close_stdout();\u000a    return uVar2;\u000a  }\u000a  iVar1 = close_stream(stderr);\u000a  if (iVar1 == 0) {\u000a    return in_RAX;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(1);\u000a}\u000a\u000a
p591
S'PUSH RAX\nMOV AL,byte ptr [0x0060e398]\nTEST AL,AL\nJZ 0x0040299d\nMOV RDI,qword ptr [0x0060e380]\nCALL 0x004052d0\nTEST EAX,EAX\nJNZ 0x004029a3\nPOP RAX\nRET\nPOP RAX\nJMP 0x00405360\nMOV EDI,0x1\nCALL 0x00401940\n'
p592
S'50\n8a 05 11 ba 20 00\n84 c0\n74 12\n48 8b 3d ee b9 20 00\ne8 39 29 00 00\n85 c0\n75 08\n58\nc3\n58\ne9 bd 29 00 00\nbf 01 00 00 00\ne8 93 ef ff ff\n'
p593
S'.text:0000000000402980\n.text:0000000000402981\n.text:0000000000402987\n.text:0000000000402989\n.text:000000000040298b\n.text:0000000000402992\n.text:0000000000402997\n.text:0000000000402999\n.text:000000000040299b\n.text:000000000040299c\n.text:000000000040299d\n.text:000000000040299e\n.text:00000000004029a3\n.text:00000000004029a8\n'
p594
tp595
sS'get_charset_aliases'
p596
(S'\n__stdcall get_charset_aliases()\n'
p597
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00408f34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00408f34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00408f34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00408f34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00408f34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00408f34_caseD_9;\u000a      case -1:\u000a        goto switchD_00408f34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00408f8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00408f93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00408f34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408f93;\u000a  }\u000a  goto LAB_00408f8d;\u000a}\u000a\u000a
p598
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060e7b8]\nTEST R15,R15\nJNZ 0x00408fa2\nMOV EDI,0x40bccc\nCALL 0x004018b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408d58\nCMP byte ptr [RBX],0x0\nJNZ 0x00408d5d\nMOV EBX,0x40bcdc\nMOV RDI,RBX\nCALL 0x00401a20\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408d77\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408d79\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401bc0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00408dcd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401b90\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00408dd8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00408df5\nMOV R15D,0x40b3c9\nJMP 0x00408f9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401ca0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408f8d\nMOV ESI,0x40a0e6\nMOV EDI,EBP\nCALL 0x00401c40\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408f54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00408f20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401950\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401950\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00408f20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401c00\nMOV ESI,0x40bceb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401ad0\nCMP EAX,0x2\nJL 0x00408f74\nMOV RDI,R12\nCALL 0x00401a20\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401a20\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408efd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401c30\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408e44\nJMP 0x00408f5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401bc0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408e44\nJMP 0x00408f5d\nMOV RDI,RBX\nCALL 0x00401970\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408e87\nJMP qword ptr [0x40bb90 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401970\nCMP EAX,-0x1\nJZ 0x00408f74\nCMP EAX,0xa\nJNZ 0x00408f40\nJMP 0x00408f20\nMOV EDI,EBP\nCALL 0x00401af0\nJMP 0x00408f8d\nMOV RDI,R15\nCALL 0x004018e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004084f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408f8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408f93\nMOV R15D,0x40b3c9\nMOV RDI,R13\nCALL 0x004018e0\nMOV qword ptr [0x0060e7b8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p599
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 80 5a 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf cc bc 40 00\ne8 65 8b ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb dc bc 40 00\n48 89 df\ne8 bb 8c ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 8e ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 f3 8d ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf c9 b3 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 9c 8e ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe e6 a0 40 00\n89 ef\ne8 26 8e ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 eb 8a ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 db 8a ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 6f 8d ff ff\nbe eb bc 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 2a 8c ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 69 8b ff ff\n49 89 c4\n48 89 ef\ne8 5e 8b ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 46 8d ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 8c ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 48 8a ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 90 bb 40 00\n48 89 df\ne8 28 8a ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 95 8b ff ff\neb 30\n4c 89 ff\ne8 7b 89 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 74 f5 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf c9 b3 40 00\n4c 89 ef\ne8 45 89 ff ff\n4c 89 3d 16 58 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p600
S'.text:0000000000408d20\n.text:0000000000408d21\n.text:0000000000408d23\n.text:0000000000408d25\n.text:0000000000408d27\n.text:0000000000408d29\n.text:0000000000408d2a\n.text:0000000000408d31\n.text:0000000000408d38\n.text:0000000000408d3b\n.text:0000000000408d41\n.text:0000000000408d46\n.text:0000000000408d4b\n.text:0000000000408d4e\n.text:0000000000408d51\n.text:0000000000408d53\n.text:0000000000408d56\n.text:0000000000408d58\n.text:0000000000408d5d\n.text:0000000000408d60\n.text:0000000000408d65\n.text:0000000000408d68\n.text:0000000000408d6b\n.text:0000000000408d6d\n.text:0000000000408d72\n.text:0000000000408d75\n.text:0000000000408d77\n.text:0000000000408d79\n.text:0000000000408d7d\n.text:0000000000408d82\n.text:0000000000408d87\n.text:0000000000408d8a\n.text:0000000000408d8d\n.text:0000000000408d8f\n.text:0000000000408d92\n.text:0000000000408d95\n.text:0000000000408d98\n.text:0000000000408d9d\n.text:0000000000408da0\n.text:0000000000408da3\n.text:0000000000408da6\n.text:0000000000408da8\n.text:0000000000408dae\n.text:0000000000408db8\n.text:0000000000408dbd\n.text:0000000000408dc7\n.text:0000000000408dcb\n.text:0000000000408dcd\n.text:0000000000408dd3\n.text:0000000000408dd8\n.text:0000000000408de2\n.text:0000000000408de7\n.text:0000000000408df1\n.text:0000000000408df5\n.text:0000000000408dfa\n.text:0000000000408dfc\n.text:0000000000408dff\n.text:0000000000408e04\n.text:0000000000408e06\n.text:0000000000408e08\n.text:0000000000408e0e\n.text:0000000000408e13\n.text:0000000000408e15\n.text:0000000000408e1a\n.text:0000000000408e1d\n.text:0000000000408e20\n.text:0000000000408e26\n.text:0000000000408e2b\n.text:0000000000408e30\n.text:0000000000408e32\n.text:0000000000408e37\n.text:0000000000408e3a\n.text:0000000000408e3f\n.text:0000000000408e44\n.text:0000000000408e49\n.text:0000000000408e4c\n.text:0000000000408e4f\n.text:0000000000408e52\n.text:0000000000408e55\n.text:0000000000408e58\n.text:0000000000408e5d\n.text:0000000000408e60\n.text:0000000000408e65\n.text:0000000000408e68\n.text:0000000000408e6d\n.text:0000000000408e70\n.text:0000000000408e75\n.text:0000000000408e7a\n.text:0000000000408e7d\n.text:0000000000408e82\n.text:0000000000408e87\n.text:0000000000408e89\n.text:0000000000408e8c\n.text:0000000000408e91\n.text:0000000000408e96\n.text:0000000000408e98\n.text:0000000000408e9b\n.text:0000000000408e9e\n.text:0000000000408ea1\n.text:0000000000408ea6\n.text:0000000000408ea9\n.text:0000000000408eaf\n.text:0000000000408eb2\n.text:0000000000408eb7\n.text:0000000000408eba\n.text:0000000000408ebd\n.text:0000000000408ec2\n.text:0000000000408ec5\n.text:0000000000408eca\n.text:0000000000408ecf\n.text:0000000000408ed2\n.text:0000000000408ed4\n.text:0000000000408ed8\n.text:0000000000408edd\n.text:0000000000408ee2\n.text:0000000000408ee5\n.text:0000000000408eea\n.text:0000000000408eed\n.text:0000000000408ef2\n.text:0000000000408ef5\n.text:0000000000408efb\n.text:0000000000408efd\n.text:0000000000408f02\n.text:0000000000408f06\n.text:0000000000408f0b\n.text:0000000000408f0e\n.text:0000000000408f11\n.text:0000000000408f17\n.text:0000000000408f20\n.text:0000000000408f23\n.text:0000000000408f28\n.text:0000000000408f2b\n.text:0000000000408f2e\n.text:0000000000408f34\n.text:0000000000408f40\n.text:0000000000408f43\n.text:0000000000408f48\n.text:0000000000408f4b\n.text:0000000000408f4d\n.text:0000000000408f50\n.text:0000000000408f52\n.text:0000000000408f54\n.text:0000000000408f56\n.text:0000000000408f5b\n.text:0000000000408f5d\n.text:0000000000408f60\n.text:0000000000408f65\n.text:0000000000408f67\n.text:0000000000408f6c\n.text:0000000000408f6f\n.text:0000000000408f74\n.text:0000000000408f77\n.text:0000000000408f7c\n.text:0000000000408f81\n.text:0000000000408f84\n.text:0000000000408f86\n.text:0000000000408f8b\n.text:0000000000408f8d\n.text:0000000000408f93\n.text:0000000000408f96\n.text:0000000000408f9b\n.text:0000000000408fa2\n.text:0000000000408fa5\n.text:0000000000408fac\n.text:0000000000408fad\n.text:0000000000408faf\n.text:0000000000408fb1\n.text:0000000000408fb3\n.text:0000000000408fb5\n.text:0000000000408fb6\n'
p601
tp602
sS'nl_langinfo'
p603
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060e1b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0060e1b8]\n'
p606
S'ff 25 d2 c5 20 00\n'
p607
S'.plt:0000000000401be0\n'
p608
tp609
sS'x2realloc'
p610
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p611
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p612
S'MOV EDX,0x1\nJMP 0x00407ed0\n'
p613
S'ba 01 00 00 00\neb 89\n'
p614
S'.text:0000000000407f40\n.text:0000000000407f45\n'
p615
tp616
sS'strlen'
p617
(S'\n__stdcall strlen(char * __s)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060e0d8)();\u000a  return sVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060e0d8]\n'
p620
S'ff 25 b2 c6 20 00\n'
p621
S'.plt:0000000000401a20\n'
p622
tp623
sS'memcmp'
p624
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060e158)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060e158]\n'
p627
S'ff 25 32 c6 20 00\n'
p628
S'.plt:0000000000401b20\n'
p629
tp630
sS'quotearg_n_style_mem'
p631
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p632
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004071c0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00406f90\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p634
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p635
S'.text:0000000000407220\n.text:0000000000407221\n.text:0000000000407223\n.text:0000000000407225\n.text:0000000000407226\n.text:000000000040722a\n.text:000000000040722d\n.text:0000000000407230\n.text:0000000000407232\n.text:0000000000407235\n.text:0000000000407238\n.text:000000000040723d\n.text:000000000040723f\n.text:0000000000407242\n.text:0000000000407245\n.text:0000000000407248\n.text:000000000040724d\n.text:0000000000407251\n.text:0000000000407252\n.text:0000000000407254\n.text:0000000000407256\n.text:0000000000407257\n'
p636
tp637
sS'_exit'
p638
(S'\n__stdcall _exit(int __status)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060e068)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060e068]\n'
p641
S'ff 25 22 c7 20 00\n'
p642
S'.plt:0000000000401940\n'
p643
tp644
sS'bkm_scale_by_power'
p645
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p646
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x004082f1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00408290\nOR EBP,EAX\nDEC EBX\nJNZ 0x004082e0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:00000000004082c0\n.text:00000000004082c1\n.text:00000000004082c3\n.text:00000000004082c5\n.text:00000000004082c6\n.text:00000000004082c7\n.text:00000000004082c9\n.text:00000000004082cc\n.text:00000000004082cf\n.text:00000000004082d1\n.text:00000000004082d3\n.text:00000000004082d5\n.text:00000000004082e0\n.text:00000000004082e3\n.text:00000000004082e6\n.text:00000000004082eb\n.text:00000000004082ed\n.text:00000000004082ef\n.text:00000000004082f1\n.text:00000000004082f3\n.text:00000000004082f7\n.text:00000000004082f8\n.text:00000000004082fa\n.text:00000000004082fc\n.text:00000000004082fd\n'
p650
tp651
sS'argmatch_valid'
p652
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p653
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_004089d7:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_004089d7;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040b89a,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060e1a0)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40b87d\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e380]\nMOV RDI,RAX\nCALL 0x00401b30\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060e380]\nJZ 0x00408a3a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x004089d7\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x00408a00\nMOV RDI,RBX\nCALL 0x00407480\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b892\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d30\nMOV RBP,R13\nJMP 0x00408a1f\nMOV RDI,RBX\nCALL 0x00407480\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b89a\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401d30\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060e380]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x004089c0\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401bb0\n'
p655
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 7d b8 40 00\nba 05 00 00 00\ne8 6b 90 ff ff\n48 8b 35 e4 59 20 00\n48 89 c7\ne8 8c 91 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 cb 59 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 4d 91 ff ff\n85 c0\n74 29\n48 89 df\ne8 a1 ea ff ff\n48 89 c1\nbe 01 00 00 00\nba 92 b8 40 00\n31 c0\n4c 89 e7\ne8 3a 93 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 78 ea ff ff\n48 89 c1\nbe 01 00 00 00\nba 9a b8 40 00\n31 c0\n4c 89 e7\ne8 11 93 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 4e 59 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 5b 91 ff ff\n'
p656
S'.text:0000000000408970\n.text:0000000000408971\n.text:0000000000408973\n.text:0000000000408975\n.text:0000000000408977\n.text:0000000000408979\n.text:000000000040897a\n.text:000000000040897b\n.text:000000000040897e\n.text:0000000000408981\n.text:0000000000408984\n.text:0000000000408986\n.text:000000000040898b\n.text:0000000000408990\n.text:0000000000408995\n.text:000000000040899c\n.text:000000000040899f\n.text:00000000004089a4\n.text:00000000004089a8\n.text:00000000004089ab\n.text:00000000004089ae\n.text:00000000004089b5\n.text:00000000004089bb\n.text:00000000004089bd\n.text:00000000004089c0\n.text:00000000004089c3\n.text:00000000004089c5\n.text:00000000004089c8\n.text:00000000004089cb\n.text:00000000004089ce\n.text:00000000004089d3\n.text:00000000004089d5\n.text:00000000004089d7\n.text:00000000004089da\n.text:00000000004089df\n.text:00000000004089e2\n.text:00000000004089e7\n.text:00000000004089ec\n.text:00000000004089ee\n.text:00000000004089f1\n.text:00000000004089f6\n.text:00000000004089f9\n.text:0000000000408a00\n.text:0000000000408a03\n.text:0000000000408a08\n.text:0000000000408a0b\n.text:0000000000408a10\n.text:0000000000408a15\n.text:0000000000408a17\n.text:0000000000408a1a\n.text:0000000000408a1f\n.text:0000000000408a23\n.text:0000000000408a28\n.text:0000000000408a2b\n.text:0000000000408a32\n.text:0000000000408a35\n.text:0000000000408a38\n.text:0000000000408a3a\n.text:0000000000408a3f\n.text:0000000000408a42\n.text:0000000000408a46\n.text:0000000000408a47\n.text:0000000000408a49\n.text:0000000000408a4b\n.text:0000000000408a4d\n.text:0000000000408a4f\n.text:0000000000408a50\n'
p657
tp658
sS'xrealloc'
p659
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p660
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p661
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00407eb7\nTEST RBX,RBX\nJNZ 0x00407eb7\nCALL 0x004018e0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401c30\nTEST RBX,RBX\nJZ 0x00407ec9\nTEST RAX,RAX\nJZ 0x00407ecb\nPOP RBX\nRET\nCALL 0x00407ff0\n'
p662
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 2d 9a ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 71 9d ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p663
S'.text:0000000000407ea0\n.text:0000000000407ea1\n.text:0000000000407ea4\n.text:0000000000407ea7\n.text:0000000000407ea9\n.text:0000000000407eac\n.text:0000000000407eae\n.text:0000000000407eb3\n.text:0000000000407eb5\n.text:0000000000407eb6\n.text:0000000000407eb7\n.text:0000000000407eba\n.text:0000000000407ebf\n.text:0000000000407ec2\n.text:0000000000407ec4\n.text:0000000000407ec7\n.text:0000000000407ec9\n.text:0000000000407eca\n.text:0000000000407ecb\n'
p664
tp665
sS'close_stdout'
p666
(S'\n__stdcall close_stdout()\n'
p667
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00405387;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040b89c,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00405387:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060e348]\nCALL 0x004052d0\nTEST EAX,EAX\nJZ 0x00405387\nCMP byte ptr [0x0060e658],0x0\nJZ 0x0040539c\nCALL 0x00401900\nCMP dword ptr [RAX],0x20\nJNZ 0x0040539c\nMOV RDI,qword ptr [0x0060e380]\nCALL 0x004052d0\nTEST EAX,EAX\nJNZ 0x004053e1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40abb5\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060e650]\nCALL 0x00401900\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004053ec\nXOR EDI,EDI\nMOV EDX,0x40b89c\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401c80\nMOV EDI,dword ptr [0x0060e2c8]\nCALL 0x00401940\nMOV EDI,dword ptr [0x0060e2c8]\nCALL 0x00401940\nMOV RDI,RBX\nCALL 0x00407320\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a0d2\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401c80\nMOV EDI,dword ptr [0x0060e2c8]\nCALL 0x00401940\n'
p669
S'55\n41 56\n53\n48 8b 3d dd 8f 20 00\ne8 60 ff ff ff\n85 c0\n74 13\n80 3d dd 92 20 00 00\n74 1f\ne8 7e c5 ff ff\n83 38 20\n75 15\n48 8b 3d f2 8f 20 00\ne8 3d ff ff ff\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe b5 ab 40 00\nba 05 00 00 00\ne8 53 c6 ff ff\n49 89 c6\n48 8b 1d 99 92 20 00\ne8 44 c5 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 9c b8 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 aa c8 ff ff\n8b 3d ec 8e 20 00\ne8 5f c5 ff ff\n8b 3d e1 8e 20 00\ne8 54 c5 ff ff\n48 89 df\ne8 2c 1f 00 00\n48 89 c1\n31 ff\nba d2 a0 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 76 c8 ff ff\n8b 3d b8 8e 20 00\ne8 2b c5 ff ff\n'
p670
S'.text:0000000000405360\n.text:0000000000405361\n.text:0000000000405363\n.text:0000000000405364\n.text:000000000040536b\n.text:0000000000405370\n.text:0000000000405372\n.text:0000000000405374\n.text:000000000040537b\n.text:000000000040537d\n.text:0000000000405382\n.text:0000000000405385\n.text:0000000000405387\n.text:000000000040538e\n.text:0000000000405393\n.text:0000000000405395\n.text:0000000000405397\n.text:0000000000405398\n.text:000000000040539a\n.text:000000000040539b\n.text:000000000040539c\n.text:000000000040539e\n.text:00000000004053a3\n.text:00000000004053a8\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b7\n.text:00000000004053bc\n.text:00000000004053bf\n.text:00000000004053c1\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053ca\n.text:00000000004053cc\n.text:00000000004053ce\n.text:00000000004053d1\n.text:00000000004053d6\n.text:00000000004053dc\n.text:00000000004053e1\n.text:00000000004053e7\n.text:00000000004053ec\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f7\n.text:00000000004053f9\n.text:00000000004053fe\n.text:0000000000405400\n.text:0000000000405402\n.text:0000000000405405\n.text:000000000040540a\n.text:0000000000405410\n'
p671
tp672
sS'version_etc_ar'
p673
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p674
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p675
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00407cb0\nJMP 0x00407940\n'
p676
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p677
S'.text:0000000000407ca0\n.text:0000000000407ca7\n.text:0000000000407cb0\n.text:0000000000407cb6\n.text:0000000000407cba\n.text:0000000000407cbc\n'
p678
tp679
sS'strtoumax'
p680
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060e230)();\u000a  return uVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x0060e230]\n'
p683
S'ff 25 5a c5 20 00\n'
p684
S'.plt:0000000000401cd0\n'
p685
tp686
sS'__ctype_tolower_loc'
p687
(S'\n__stdcall __ctype_tolower_loc()\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_tolower_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_0060e280)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x0060e280]\n'
p690
S'ff 25 0a c5 20 00\n'
p691
S'.plt:0000000000401d70\n'
p692
tp693
sS'c_isxdigit'
p694
(S'\n__stdcall c_isxdigit()\n'
p695
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p696
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00408c6b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p697
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p698
S'.text:0000000000408c50\n.text:0000000000408c53\n.text:0000000000408c56\n.text:0000000000408c58\n.text:0000000000408c62\n.text:0000000000408c64\n.text:0000000000408c67\n.text:0000000000408c6a\n.text:0000000000408c6b\n.text:0000000000408c6d\n'
p699
tp700
sS'__libc_csu_fini'
p701
(S'\n__stdcall __libc_csu_fini()\n'
p702
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p703
S'RET\n'
p704
S'f3 c3\n'
p705
S'.text:00000000004090b0\n'
p706
tp707
sS'abort'
p708
(S'\n__stdcall abort()\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060e040)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060e040]\n'
p711
S'ff 25 4a c7 20 00\n'
p712
S'.plt:00000000004018f0\n'
p713
tp714
sS'group_number'
p715
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p716
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00401a20\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00401b90\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x00405cf3\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x00401b90\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x00405d08\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401b90\nSUB R12,RBP\nJNZ 0x00405ce0\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 6c bd ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 c9 be ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 9d be ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 68 be ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:0000000000405c90\n.text:0000000000405c91\n.text:0000000000405c93\n.text:0000000000405c95\n.text:0000000000405c97\n.text:0000000000405c99\n.text:0000000000405c9a\n.text:0000000000405c9e\n.text:0000000000405ca1\n.text:0000000000405ca4\n.text:0000000000405ca7\n.text:0000000000405cac\n.text:0000000000405caf\n.text:0000000000405cb4\n.text:0000000000405cb7\n.text:0000000000405cbc\n.text:0000000000405cbf\n.text:0000000000405cc2\n.text:0000000000405cc7\n.text:0000000000405cca\n.text:0000000000405ccd\n.text:0000000000405cd0\n.text:0000000000405cd7\n.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce6\n.text:0000000000405ceb\n.text:0000000000405cee\n.text:0000000000405cf3\n.text:0000000000405cf7\n.text:0000000000405cfa\n.text:0000000000405cfc\n.text:0000000000405cfe\n.text:0000000000405d02\n.text:0000000000405d05\n.text:0000000000405d08\n.text:0000000000405d0b\n.text:0000000000405d0f\n.text:0000000000405d12\n.text:0000000000405d15\n.text:0000000000405d18\n.text:0000000000405d1d\n.text:0000000000405d20\n.text:0000000000405d23\n.text:0000000000405d28\n.text:0000000000405d2b\n.text:0000000000405d2d\n.text:0000000000405d30\n.text:0000000000405d34\n.text:0000000000405d35\n.text:0000000000405d37\n.text:0000000000405d39\n.text:0000000000405d3b\n.text:0000000000405d3d\n.text:0000000000405d3e\n'
p720
tp721
sS'usable_st_size'
p722
(S'\n__stdcall usable_st_size(stat * sb)\n'
p723
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p724
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x00405218\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p725
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p726
S'.text:0000000000405200\n.text:0000000000405204\n.text:0000000000405209\n.text:000000000040520e\n.text:0000000000405213\n.text:0000000000405215\n.text:0000000000405217\n.text:0000000000405218\n.text:000000000040521a\n'
p727
tp728
sS'gettime'
p729
(S'\n__stdcall gettime(timespec * ts)\n'
p730
V\u000avoid gettime(timespec *ts)\u000a\u000a{\u000a  int iVar1;\u000a  timeval local_18;\u000a  \u000a  iVar1 = clock_gettime(0,(timespec *)ts);\u000a  if (iVar1 != 0) {\u000a    gettimeofday(&local_18,(__timezone_ptr_t)0x0);\u000a    ts->tv_sec = local_18.tv_sec;\u000a    ts->tv_nsec = local_18.tv_usec * 1000;\u000a  }\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x004019b0\nTEST EAX,EAX\nJZ 0x004055c4\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x00401aa0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nIMUL RAX,qword ptr [RSP + 0x8],0x3e8\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p732
S'53\n48 83 ec 10\n48 89 fb\n31 ff\n48 89 de\ne8 0e c4 ff ff\n85 c0\n74 1e\n48 89 e7\n31 f6\ne8 f0 c4 ff ff\n48 8b 04 24\n48 89 03\n48 69 44 24 08 e8 03 00 00\n48 89 43 08\n48 83 c4 10\n5b\nc3\n'
p733
S'.text:0000000000405590\n.text:0000000000405591\n.text:0000000000405595\n.text:0000000000405598\n.text:000000000040559a\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a4\n.text:00000000004055a6\n.text:00000000004055a9\n.text:00000000004055ab\n.text:00000000004055b0\n.text:00000000004055b4\n.text:00000000004055b7\n.text:00000000004055c0\n.text:00000000004055c4\n.text:00000000004055c8\n.text:00000000004055c9\n'
p734
tp735
sS'process_signals'
p736
(S'\n__stdcall process_signals()\n'
p737
V\u000avoid process_signals(void)\u000a\u000a{\u000a  sig_atomic_t __sig;\u000a  EVP_PKEY_CTX *ctx;\u000a  undefined local_90 [128];\u000a  \u000a  if (interrupt_signal != 0) goto LAB_004040f3;\u000aLAB_004040ea:\u000a  do {\u000a    if (info_signal_count == 0) {\u000a      return;\u000a    }\u000aLAB_004040f3:\u000a    do {\u000a      while( true ) {\u000a        sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)local_90);\u000a        __sig = interrupt_signal;\u000a        if (info_signal_count != 0) {\u000a          info_signal_count = info_signal_count + -1;\u000a        }\u000a        ctx = (EVP_PKEY_CTX *)0x2;\u000a        sigprocmask(2,(sigset_t *)local_90,(sigset_t *)0x0);\u000a        if (__sig != 0) break;\u000a        print_stats();\u000a        if (interrupt_signal == 0) goto LAB_004040ea;\u000a      }\u000a      cleanup(ctx);\u000a      print_stats();\u000a      raise(__sig);\u000a    } while (interrupt_signal != 0);\u000a  } while( true );\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x88\nLEA RBX,[RSP + 0x8]\nCMP dword ptr [0x0060e58c],0x0\nJNZ 0x004040f3\nJMP 0x004040ea\nCALL 0x00404160\nCALL 0x00404210\nMOV EDI,EBP\nCALL 0x004018d0\nCMP dword ptr [0x0060e58c],0x0\nJNZ 0x004040f3\nCMP dword ptr [0x0060e588],0x0\nJZ 0x0040413d\nXOR EDI,EDI\nMOV ESI,0x60e508\nMOV RDX,RBX\nCALL 0x004018c0\nMOV EBP,dword ptr [0x0060e58c]\nMOV EAX,dword ptr [0x0060e588]\nTEST EAX,EAX\nJZ 0x0040411a\nDEC EAX\nMOV dword ptr [0x0060e588],EAX\nMOV EDI,0x2\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004018c0\nTEST EBP,EBP\nJNZ 0x004040d0\nCALL 0x00404210\nCMP dword ptr [0x0060e58c],0x0\nJNZ 0x004040f3\nJMP 0x004040ea\nADD RSP,0x88\nPOP RBX\nPOP RBP\nRET\n'
p739
S'55\n53\n48 81 ec 88 00 00 00\n48 8d 5c 24 08\n83 3d c7 a4 20 00 00\n75 2c\neb 21\ne8 8b 00 00 00\ne8 36 01 00 00\n89 ef\ne8 ef d7 ff ff\n83 3d a4 a4 20 00 00\n75 09\n83 3d 97 a4 20 00 00\n74 4a\n31 ff\nbe 08 e5 60 00\n48 89 da\ne8 be d7 ff ff\n8b 2d 84 a4 20 00\n8b 05 7a a4 20 00\n85 c0\n74 08\nff c8\n89 05 6e a4 20 00\nbf 02 00 00 00\n31 d2\n48 89 de\ne8 97 d7 ff ff\n85 ed\n75 a3\ne8 de 00 00 00\n83 3d 53 a4 20 00 00\n75 b8\neb ad\n48 81 c4 88 00 00 00\n5b\n5d\nc3\n'
p740
S'.text:00000000004040b0\n.text:00000000004040b1\n.text:00000000004040b2\n.text:00000000004040b9\n.text:00000000004040be\n.text:00000000004040c5\n.text:00000000004040c7\n.text:00000000004040d0\n.text:00000000004040d5\n.text:00000000004040da\n.text:00000000004040dc\n.text:00000000004040e1\n.text:00000000004040e8\n.text:00000000004040ea\n.text:00000000004040f1\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040fa\n.text:00000000004040fd\n.text:0000000000404102\n.text:0000000000404108\n.text:000000000040410e\n.text:0000000000404110\n.text:0000000000404112\n.text:0000000000404114\n.text:000000000040411a\n.text:000000000040411f\n.text:0000000000404121\n.text:0000000000404124\n.text:0000000000404129\n.text:000000000040412b\n.text:000000000040412d\n.text:0000000000404132\n.text:0000000000404139\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404144\n.text:0000000000404145\n.text:0000000000404146\n'
p741
tp742
sS'select_plural'
p743
(S'\n__stdcall select_plural(uintmax_t n)\n'
p744
V\u000aulong select_plural(uintmax_t n)\u000a\u000a{\u000a  return n;\u000a}\u000a\u000a
p745
S'MOV RAX,RDI\nRET\n'
p746
S'48 89 f8\nc3\n'
p747
S'.text:0000000000404150\n.text:0000000000404153\n'
p748
tp749
sS'version_etc'
p750
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p751
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p752
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407d72\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00407cd0\nADD RSP,0xd8\nRET\n'
p753
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p754
S'.text:0000000000407d30\n.text:0000000000407d37\n.text:0000000000407d39\n.text:0000000000407d3b\n.text:0000000000407d40\n.text:0000000000407d45\n.text:0000000000407d4a\n.text:0000000000407d52\n.text:0000000000407d5a\n.text:0000000000407d62\n.text:0000000000407d6a\n.text:0000000000407d72\n.text:0000000000407d77\n.text:0000000000407d7c\n.text:0000000000407d81\n.text:0000000000407d86\n.text:0000000000407d8e\n.text:0000000000407d93\n.text:0000000000407d9b\n.text:0000000000407da2\n.text:0000000000407da5\n.text:0000000000407daa\n.text:0000000000407db1\n'
p755
tp756
sS'xstrcat'
p757
(S'\n__stdcall xstrcat(size_t argcount, __va_list_tag * args)\n'
p758
V\u000achar * xstrcat(size_t argcount,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  void *pvVar2;\u000a  char *__s;\u000a  size_t size2;\u000a  size_t size1;\u000a  int *piVar3;\u000a  char **ppcVar4;\u000a  ulong uVar5;\u000a  char *__dest;\u000a  size_t sVar6;\u000a  char *pcVar7;\u000a  va_list ap;\u000a  uint local_48;\u000a  char **local_40;\u000a  \u000a  pvVar2 = args->reg_save_area;\u000a  local_48 = args->gp_offset;\u000a  local_40 = (char **)args->overflow_arg_area;\u000a  if (argcount == 0) {\u000a    __dest = (char *)xmalloc(1);\u000a    pcVar7 = __dest;\u000a  }\u000a  else {\u000a    size1 = 0;\u000a    sVar6 = argcount;\u000a    do {\u000a      uVar5 = SEXT48((int)local_48);\u000a      if (uVar5 < 0x29) {\u000a        local_48 = local_48 + 8;\u000a        ppcVar4 = (char **)(uVar5 + (long)pvVar2);\u000a      }\u000a      else {\u000a        ppcVar4 = local_40;\u000a        local_40 = local_40 + 1;\u000a      }\u000a      size2 = strlen(*ppcVar4);\u000a      size1 = xsum(size1,size2);\u000a      sVar6 = sVar6 - 1;\u000a    } while (sVar6 != 0);\u000a    if ((size1 & 0xffffffff80000000) != 0) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a      return (char *)0x0;\u000a    }\u000a    pcVar7 = (char *)xmalloc(size1 + 1);\u000a    __dest = pcVar7;\u000a    if (argcount != 0) {\u000a      do {\u000a        uVar1 = args->gp_offset;\u000a        if ((ulong)(long)(int)uVar1 < 0x29) {\u000a          ppcVar4 = (char **)((long)(int)uVar1 + (long)args->reg_save_area);\u000a          args->gp_offset = uVar1 + 8;\u000a        }\u000a        else {\u000a          ppcVar4 = (char **)args->overflow_arg_area;\u000a          *(char ***)&args->overflow_arg_area = ppcVar4 + 1;\u000a        }\u000a        __s = *ppcVar4;\u000a        size2 = strlen(__s);\u000a        memcpy(__dest,__s,size2);\u000a        __dest = __dest + size2;\u000a        argcount = argcount - 1;\u000a      } while (argcount != 0);\u000a    }\u000a  }\u000a  *__dest = 0;\u000a  return pcVar7;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSI\nMOV R12,RDI\nMOV RAX,qword ptr [R14 + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nMOVUPS XMM0,xmmword ptr [R14]\nMOVAPS xmmword ptr [RSP],XMM0\nTEST R12,R12\nJZ 0x00408405\nXOR EBX,EBX\nMOV RBP,R12\nNOP\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004083c0\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004083ce\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,qword ptr [RAX]\nCALL 0x00401a20\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x00408fc0\nMOV RBX,RAX\nDEC RBP\nJNZ 0x004083a0\nTEST RBX,-0x80000000\nJZ 0x00408417\nCALL 0x00401900\nMOV dword ptr [RAX],0x4b\nXOR R15D,R15D\nJMP 0x00408483\nMOV EDI,0x1\nCALL 0x00407e60\nMOV R15,RAX\nMOV RBX,R15\nJMP 0x00408480\nINC RBX\nMOV RDI,RBX\nCALL 0x00407e60\nMOV R15,RAX\nMOV RBX,R15\nTEST R12,R12\nJZ 0x00408480\nNOP dword ptr [RAX]\nMOVSXD RCX,dword ptr [R14]\nCMP RCX,0x28\nJA 0x00408450\nMOV RAX,RCX\nADD RAX,qword ptr [R14 + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [R14],ECX\nJMP 0x0040845c\nMOV RAX,qword ptr [R14 + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [R14 + 0x8],RCX\nMOV R13,qword ptr [RAX]\nMOV RDI,R13\nCALL 0x00401a20\nMOV RBP,RAX\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00401b90\nADD RBX,RBP\nDEC R12\nJNZ 0x00408430\nMOV byte ptr [RBX],0x0\nMOV RAX,R15\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f6\n49 89 fc\n49 8b 46 10\n48 89 44 24 10\n41 0f 10 06\n0f 29 04 24\n4d 85 e4\n74 6b\n31 db\n4c 89 e5\n90\n48 63 0c 24\n48 83 f9 28\n77 16\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 14\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n48 8b 38\ne8 4a 96 ff ff\n48 89 df\n48 89 c6\ne8 df 0b 00 00\n48 89 c3\n48 ff cd\n75 b7\n48 f7 c3 00 00 00 80\n74 25\ne8 09 95 ff ff\nc7 00 4b 00 00 00\n45 31 ff\ne9 7e 00 00 00\nbf 01 00 00 00\ne8 51 fa ff ff\n49 89 c7\n4c 89 fb\neb 69\n48 ff c3\n48 89 df\ne8 3e fa ff ff\n49 89 c7\n4c 89 fb\n4d 85 e4\n74 53\n0f 1f 00\n49 63 0e\n48 83 f9 28\n77 17\n48 89 c8\n49 03 46 10\n8d 49 08\n41 89 0e\neb 14\n49 8b 46 08\n48 8d 48 08\n49 89 4e 08\n4c 8b 28\n4c 89 ef\ne8 b9 95 ff ff\n48 89 c5\n48 89 df\n4c 89 ee\n48 89 ea\ne8 18 97 ff ff\n48 01 eb\n49 ff cc\n75 b0\nc6 03 00\n4c 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p761
S'.text:0000000000408370\n.text:0000000000408371\n.text:0000000000408373\n.text:0000000000408375\n.text:0000000000408377\n.text:0000000000408379\n.text:000000000040837a\n.text:000000000040837e\n.text:0000000000408381\n.text:0000000000408384\n.text:0000000000408388\n.text:000000000040838d\n.text:0000000000408391\n.text:0000000000408395\n.text:0000000000408398\n.text:000000000040839a\n.text:000000000040839c\n.text:000000000040839f\n.text:00000000004083a0\n.text:00000000004083a4\n.text:00000000004083a8\n.text:00000000004083aa\n.text:00000000004083ad\n.text:00000000004083b2\n.text:00000000004083b5\n.text:00000000004083b8\n.text:00000000004083c0\n.text:00000000004083c5\n.text:00000000004083c9\n.text:00000000004083ce\n.text:00000000004083d1\n.text:00000000004083d6\n.text:00000000004083d9\n.text:00000000004083dc\n.text:00000000004083e1\n.text:00000000004083e4\n.text:00000000004083e7\n.text:00000000004083e9\n.text:00000000004083f0\n.text:00000000004083f2\n.text:00000000004083f7\n.text:00000000004083fd\n.text:0000000000408400\n.text:0000000000408405\n.text:000000000040840a\n.text:000000000040840f\n.text:0000000000408412\n.text:0000000000408415\n.text:0000000000408417\n.text:000000000040841a\n.text:000000000040841d\n.text:0000000000408422\n.text:0000000000408425\n.text:0000000000408428\n.text:000000000040842b\n.text:000000000040842d\n.text:0000000000408430\n.text:0000000000408433\n.text:0000000000408437\n.text:0000000000408439\n.text:000000000040843c\n.text:0000000000408440\n.text:0000000000408443\n.text:0000000000408446\n.text:0000000000408450\n.text:0000000000408454\n.text:0000000000408458\n.text:000000000040845c\n.text:000000000040845f\n.text:0000000000408462\n.text:0000000000408467\n.text:000000000040846a\n.text:000000000040846d\n.text:0000000000408470\n.text:0000000000408473\n.text:0000000000408478\n.text:000000000040847b\n.text:000000000040847e\n.text:0000000000408480\n.text:0000000000408483\n.text:0000000000408486\n.text:000000000040848a\n.text:000000000040848b\n.text:000000000040848d\n.text:000000000040848f\n.text:0000000000408491\n.text:0000000000408493\n.text:0000000000408494\n'
p762
tp763
sS'posix_fadvise'
p764
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060e148)();\u000a  return iVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0060e148]\n'
p767
S'ff 25 42 c6 20 00\n'
p768
S'.plt:0000000000401b00\n'
p769
tp770
sS'default_block_size'
p771
(S'\n__stdcall default_block_size()\n'
p772
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p773
S'PUSH RAX\nMOV EDI,0x40a02b\nCALL 0x004018b0\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p774
S'50\nbf 2b a0 40 00\ne8 25 ba ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p775
S'.text:0000000000405e80\n.text:0000000000405e81\n.text:0000000000405e86\n.text:0000000000405e8b\n.text:0000000000405e8e\n.text:0000000000405e93\n.text:0000000000405e98\n.text:0000000000405e9c\n.text:0000000000405e9d\n'
p776
tp777
sS'lseek'
p778
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060e110)();\u000a  return _Var1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060e110]\n'
p781
S'ff 25 7a c6 20 00\n'
p782
S'.plt:0000000000401a90\n'
p783
tp784
sS'quotearg_n_mem'
p785
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p786
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p787
S'MOV ECX,0x60e670\nJMP 0x00406f90\n'
p788
S'b9 70 e6 60 00\ne9 36 fe ff ff\n'
p789
S'.text:0000000000407150\n.text:0000000000407155\n'
p790
tp791
sS'__printf_chk'
p792
(S'\n__stdcall __printf_chk()\n'
p793
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060e1f8)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060e1f8]\n'
p795
S'ff 25 92 c5 20 00\n'
p796
S'.plt:0000000000401c60\n'
p797
tp798
sS'ioctl'
p799
(S'\n__stdcall ioctl(int __fd, ulong __request)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ioctl(int __fd,ulong __request,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ioctl_0060e138)();\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060e138]\n'
p802
S'ff 25 52 c6 20 00\n'
p803
S'.plt:0000000000401ae0\n'
p804
tp805
sS'verror_at_line'
p806
(S'\n__stdcall verror_at_line(char * file, char * format, __va_list_tag * args)\n'
p807
V\u000avoid verror_at_line(char *file,char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  char *__ptr;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  uint in_ECX;\u000a  char *format_00;\u000a  __va_list_tag *args_00;\u000a  \u000a  __ptr = xvasprintf(format_00,args_00);\u000a  if (__ptr != (char *)0x0) {\u000a    if (args == (__va_list_tag *)0x0) {\u000a      error((ulong)file & 0xffffffff,(ulong)format & 0xffffffff,&DAT_0040b89c,__ptr);\u000a    }\u000a    else {\u000a      error_at_line((ulong)file & 0xffffffff,(ulong)format & 0xffffffff,args,(ulong)in_ECX,\u000a                    &DAT_0040b89c,__ptr);\u000a    }\u000a    free(__ptr);\u000a    return;\u000a  }\u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  uVar3 = dcgettext(0,"unable to display error message",5);\u000a  error(0,(ulong)uVar1,uVar3,uVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15D,ECX\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R12D,EDI\nMOV RDI,R8\nMOV RSI,R9\nCALL 0x00408300\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040790f\nTEST RBP,RBP\nJZ 0x004078ea\nMOV R8D,0x40b89c\nXOR EAX,EAX\nMOV EDI,R12D\nMOV ESI,R14D\nMOV RDX,RBP\nMOV ECX,R15D\nMOV R9,RBX\nCALL 0x00401920\nJMP 0x004078ff\nMOV EDX,0x40b89c\nXOR EAX,EAX\nMOV EDI,R12D\nMOV ESI,R14D\nMOV RCX,RBX\nCALL 0x00401c80\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004018e0\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40b277\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401c80\nCALL 0x004018f0\n'
p809
S'55\n41 57\n41 56\n41 54\n53\n41 89 cf\n48 89 d5\n41 89 f6\n41 89 fc\n4c 89 c7\n4c 89 ce\ne8 41 0a 00 00\n48 89 c3\n48 85 db\n74 48\n48 85 ed\n74 1e\n41 b8 9c b8 40 00\n31 c0\n44 89 e7\n44 89 f6\n48 89 ea\n44 89 f9\n49 89 d9\ne8 38 a0 ff ff\neb 15\nba 9c b8 40 00\n31 c0\n44 89 e7\n44 89 f6\n48 89 d9\ne8 81 a3 ff ff\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 d1 9f ff ff\ne8 ec 9f ff ff\n8b 18\n31 ff\nbe 77 b2 40 00\nba 05 00 00 00\ne8 d9 a0 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 48 a3 ff ff\ne8 b3 9f ff ff\n'
p810
S'.text:00000000004078a0\n.text:00000000004078a1\n.text:00000000004078a3\n.text:00000000004078a5\n.text:00000000004078a7\n.text:00000000004078a8\n.text:00000000004078ab\n.text:00000000004078ae\n.text:00000000004078b1\n.text:00000000004078b4\n.text:00000000004078b7\n.text:00000000004078ba\n.text:00000000004078bf\n.text:00000000004078c2\n.text:00000000004078c5\n.text:00000000004078c7\n.text:00000000004078ca\n.text:00000000004078cc\n.text:00000000004078d2\n.text:00000000004078d4\n.text:00000000004078d7\n.text:00000000004078da\n.text:00000000004078dd\n.text:00000000004078e0\n.text:00000000004078e3\n.text:00000000004078e8\n.text:00000000004078ea\n.text:00000000004078ef\n.text:00000000004078f1\n.text:00000000004078f4\n.text:00000000004078f7\n.text:00000000004078fa\n.text:00000000004078ff\n.text:0000000000407902\n.text:0000000000407903\n.text:0000000000407905\n.text:0000000000407907\n.text:0000000000407909\n.text:000000000040790a\n.text:000000000040790f\n.text:0000000000407914\n.text:0000000000407916\n.text:0000000000407918\n.text:000000000040791d\n.text:0000000000407922\n.text:0000000000407927\n.text:000000000040792a\n.text:000000000040792c\n.text:000000000040792e\n.text:0000000000407930\n.text:0000000000407933\n.text:0000000000407938\n'
p811
tp812
sS'emit_ancillary_info'
p813
(S'\n__stdcall emit_ancillary_info()\n'
p814
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x0040a5c0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("dd",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "dd";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00409d9d,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00409d9d);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40b3c9;\u000a  if (__s2 == "dd") {\u000a    uVar3 = 0x409f01;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p815
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x40a5c0\nMOV ESI,0x409ee5\nNOP\nMOV EDI,0x409d9d\nCALL 0x00401b60\nTEST EAX,EAX\nJZ 0x0040222b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00402210\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x409d9d\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x409f44\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409f5b\nMOV ECX,0x409f69\nXOR EAX,EAX\nCALL 0x00401c60\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401c50\nTEST RAX,RAX\nJZ 0x004022b4\nMOV ESI,0x409f90\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401930\nTEST EAX,EAX\nJZ 0x004022b4\nXOR EDI,EDI\nMOV ESI,0x409f94\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x409d9d\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x409fd9\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,RAX\nMOV R14D,0x409d9d\nMOV EDI,0x1\nMOV EDX,0x409f69\nMOV ECX,0x409d9d\nXOR EAX,EAX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x409ff8\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x409f01\nMOV ECX,0x40b3c9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401c60\n'
p816
S'41 56\n53\n50\nbb c0 a5 40 00\nbe e5 9e 40 00\n66 90\nbf 9d 9d 40 00\ne8 46 f9 ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 9d 9d 40 00\n48 0f 45 d8\n31 ff\nbe 44 9f 40 00\nba 05 00 00 00\ne8 b4 f7 ff ff\n48 89 c6\nbf 01 00 00 00\nba 5b 9f 40 00\nb9 69 9f 40 00\n31 c0\ne8 fb f9 ff ff\nbf 05 00 00 00\n31 f6\ne8 df f9 ff ff\n48 85 c0\n74 3e\nbe 90 9f 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f6 ff ff\n85 c0\n74 28\n31 ff\nbe 94 9f 40 00\nba 05 00 00 00\ne8 63 f7 ff ff\n48 89 c1\nbf 01 00 00 00\nba 9d 9d 40 00\n31 c0\n48 89 ce\ne8 ac f9 ff ff\n31 ff\nbe d9 9f 40 00\nba 05 00 00 00\ne8 3b f7 ff ff\n48 89 c6\n41 be 9d 9d 40 00\nbf 01 00 00 00\nba 69 9f 40 00\nb9 9d 9d 40 00\n31 c0\ne8 7c f9 ff ff\n31 ff\nbe f8 9f 40 00\nba 05 00 00 00\ne8 0b f7 ff ff\n48 89 c2\n4c 39 f3\nb8 01 9f 40 00\nb9 c9 b3 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 3e f9 ff ff\n'
p817
S'.text:0000000000402200\n.text:0000000000402202\n.text:0000000000402203\n.text:0000000000402204\n.text:0000000000402209\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402215\n.text:000000000040221a\n.text:000000000040221c\n.text:000000000040221e\n.text:0000000000402222\n.text:0000000000402226\n.text:0000000000402229\n.text:000000000040222b\n.text:000000000040222f\n.text:0000000000402232\n.text:0000000000402237\n.text:000000000040223b\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402247\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402254\n.text:0000000000402259\n.text:000000000040225e\n.text:0000000000402260\n.text:0000000000402265\n.text:000000000040226a\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402276\n.text:000000000040227b\n.text:0000000000402280\n.text:0000000000402283\n.text:0000000000402288\n.text:000000000040228a\n.text:000000000040228c\n.text:000000000040228e\n.text:0000000000402293\n.text:0000000000402298\n.text:000000000040229d\n.text:00000000004022a0\n.text:00000000004022a5\n.text:00000000004022aa\n.text:00000000004022ac\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b6\n.text:00000000004022bb\n.text:00000000004022c0\n.text:00000000004022c5\n.text:00000000004022c8\n.text:00000000004022ce\n.text:00000000004022d3\n.text:00000000004022d8\n.text:00000000004022dd\n.text:00000000004022df\n.text:00000000004022e4\n.text:00000000004022e6\n.text:00000000004022eb\n.text:00000000004022f0\n.text:00000000004022f5\n.text:00000000004022f8\n.text:00000000004022fb\n.text:0000000000402300\n.text:0000000000402305\n.text:0000000000402309\n.text:000000000040230e\n.text:0000000000402310\n.text:0000000000402313\n.text:0000000000402316\n.text:000000000040231a\n.text:000000000040231b\n.text:000000000040231d\n'
p818
tp819
sS'version_etc_va'
p820
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p821
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p822
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00407d00\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00407d0c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00407d21\nINC R9\nCMP R9,0xa\nJC 0x00407ce0\nMOV R8,RSP\nCALL 0x00407940\nADD RSP,0x58\nRET\n'
p823
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p824
S'.text:0000000000407cd0\n.text:0000000000407cd4\n.text:0000000000407cd7\n.text:0000000000407ce0\n.text:0000000000407ce3\n.text:0000000000407ce7\n.text:0000000000407ce9\n.text:0000000000407cec\n.text:0000000000407cf0\n.text:0000000000407cf4\n.text:0000000000407cf7\n.text:0000000000407d00\n.text:0000000000407d04\n.text:0000000000407d08\n.text:0000000000407d0c\n.text:0000000000407d0f\n.text:0000000000407d13\n.text:0000000000407d16\n.text:0000000000407d18\n.text:0000000000407d1b\n.text:0000000000407d1f\n.text:0000000000407d21\n.text:0000000000407d24\n.text:0000000000407d29\n.text:0000000000407d2d\n'
p825
tp826
sS'xzalloc'
p827
(S'\n__stdcall xzalloc(size_t s)\n'
p828
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p829
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00407e60\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401ac0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p830
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 9b ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p831
S'.text:0000000000407f50\n.text:0000000000407f52\n.text:0000000000407f53\n.text:0000000000407f54\n.text:0000000000407f57\n.text:0000000000407f5c\n.text:0000000000407f5f\n.text:0000000000407f61\n.text:0000000000407f64\n.text:0000000000407f67\n.text:0000000000407f6c\n.text:0000000000407f6f\n.text:0000000000407f73\n.text:0000000000407f74\n.text:0000000000407f76\n'
p832
tp833
sS'abbreviation_lacks_prefix'
p834
(S'\n__stdcall abbreviation_lacks_prefix(char * message)\n'
p835
V\u000a_Bool abbreviation_lacks_prefix(char *message)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strlen(message);\u000a  return (_Bool)(message[sVar1 - 2] == ' ');\u000a}\u000a\u000a
p836
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a20\nCMP byte ptr [RBX + RAX*0x1 + -0x2],0x20\nSETZ AL\nPOP RBX\nRET\n'
p837
S'53\n48 89 fb\ne8 e7 d4 ff ff\n80 7c 03 fe 20\n0f 94 c0\n5b\nc3\n'
p838
S'.text:0000000000404530\n.text:0000000000404531\n.text:0000000000404534\n.text:0000000000404539\n.text:000000000040453e\n.text:0000000000404541\n.text:0000000000404542\n'
p839
tp840
sS'gettext_quote'
p841
(S'\n__stdcall gettext_quote(char * msgid)\n'
p842
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040b270;\u000a        pcVar2 = &DAT_0040b274;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401a00\nCMP RAX,RBX\nJNZ 0x00407548\nCALL 0x00408c90\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00407550\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004074f8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b260\nMOV EAX,0x40b264\nJMP 0x00407544\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00407550\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00407536\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b270\nMOV EAX,0x40b274\nJMP 0x00407544\nCMP R14D,0x9\nMOV ECX,0x40b254\nMOV EAX,0x40b258\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p844
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 57 a5 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 d9 17 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 60 b2 40 00\nb8 64 b2 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 70 b2 40 00\nb8 74 b2 40 00\neb 0e\n41 83 fe 09\nb9 54 b2 40 00\nb8 58 b2 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p845
S'.text:0000000000407490\n.text:0000000000407491\n.text:0000000000407493\n.text:0000000000407494\n.text:0000000000407497\n.text:000000000040749a\n.text:000000000040749c\n.text:00000000004074a1\n.text:00000000004074a4\n.text:00000000004074a9\n.text:00000000004074ac\n.text:00000000004074b2\n.text:00000000004074b7\n.text:00000000004074ba\n.text:00000000004074bf\n.text:00000000004074c4\n.text:00000000004074c9\n.text:00000000004074cf\n.text:00000000004074d5\n.text:00000000004074d8\n.text:00000000004074da\n.text:00000000004074dc\n.text:00000000004074e1\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074e9\n.text:00000000004074ec\n.text:00000000004074f1\n.text:00000000004074f6\n.text:00000000004074f8\n.text:00000000004074fd\n.text:0000000000407502\n.text:0000000000407507\n.text:000000000040750d\n.text:0000000000407513\n.text:0000000000407516\n.text:0000000000407518\n.text:000000000040751a\n.text:000000000040751f\n.text:0000000000407523\n.text:0000000000407525\n.text:0000000000407527\n.text:000000000040752a\n.text:000000000040752f\n.text:0000000000407534\n.text:0000000000407536\n.text:000000000040753a\n.text:000000000040753f\n.text:0000000000407544\n.text:0000000000407548\n.text:0000000000407549\n.text:000000000040754b\n.text:000000000040754c\n'
p846
tp847
sS'fclose'
p848
(S'\n__stdcall fclose(FILE * __stream)\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060e0b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x0060e0b8]\n'
p851
S'ff 25 d2 c6 20 00\n'
p852
S'.plt:00000000004019e0\n'
p853
tp854
sS'__ctype_get_mb_cur_max'
p855
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060e0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060e0d0]\n'
p858
S'ff 25 ba c6 20 00\n'
p859
S'.plt:0000000000401a10\n'
p860
tp861
sS'quotearg_n_style'
p862
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p863
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004071c0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00406f90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p865
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p866
S'.text:0000000000407180\n.text:0000000000407181\n.text:0000000000407183\n.text:0000000000407184\n.text:0000000000407188\n.text:000000000040718b\n.text:000000000040718d\n.text:0000000000407192\n.text:0000000000407195\n.text:000000000040719a\n.text:00000000004071a1\n.text:00000000004071a3\n.text:00000000004071a6\n.text:00000000004071a9\n.text:00000000004071ae\n.text:00000000004071b2\n.text:00000000004071b3\n.text:00000000004071b5\n.text:00000000004071b6\n'
p867
tp868
sS'xsum'
p869
(S'\n__stdcall xsum(size_t size1, size_t size2)\n'
p870
V\u000asize_t xsum(size_t size1,size_t size2)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = 0xffffffffffffffff;\u000a  if (size1 <= size2 + size1) {\u000a    sVar1 = size2 + size1;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p871
S'ADD RSI,RDI\nCMP RSI,RDI\nMOV RAX,-0x1\nCMOVNC RAX,RSI\nRET\n'
p872
S'48 01 fe\n48 39 fe\n48 c7 c0 ff ff ff ff\n48 0f 43 c6\nc3\n'
p873
S'.text:0000000000408fc0\n.text:0000000000408fc3\n.text:0000000000408fc6\n.text:0000000000408fcd\n.text:0000000000408fd1\n'
p874
tp875
sS'copy_simple'
p876
(S'\n__stdcall copy_simple(char * buf, size_t nread)\n'
p877
V\u000avoid copy_simple(char *buf,size_t nread)\u000a\u000a{\u000a  ulong __n;\u000a  \u000a  do {\u000a    __n = output_blocksize - oc;\u000a    if (nread < output_blocksize - oc) {\u000a      __n = nread;\u000a    }\u000a    memcpy(obuf + oc,buf,__n);\u000a    nread = nread - __n;\u000a    oc = oc + __n;\u000a    if (output_blocksize <= oc) {\u000a      write_output();\u000a    }\u000a    buf = buf + __n;\u000a  } while (nread != 0);\u000a  return;\u000a}\u000a\u000a
p878
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nNOP dword ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [0x0060e4d8]\nMOV RDI,qword ptr [0x0060e620]\nSUB RBX,RDI\nCMP R14,RBX\nCMOVC RBX,R14\nADD RDI,qword ptr [0x0060e608]\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401b90\nSUB R14,RBX\nMOV RAX,qword ptr [0x0060e620]\nADD RAX,RBX\nMOV qword ptr [0x0060e620],RAX\nCMP RAX,qword ptr [0x0060e4d8]\nJC 0x0040507c\nCALL 0x00405090\nADD R15,RBX\nTEST R14,R14\nJNZ 0x00405030\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p879
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n0f 1f 44 00 00\n48 8b 1d a1 94 20 00\n48 8b 3d e2 95 20 00\n48 29 fb\n49 39 de\n49 0f 42 de\n48 03 3d b9 95 20 00\n4c 89 fe\n48 89 da\ne8 36 cb ff ff\n49 29 de\n48 8b 05 bc 95 20 00\n48 01 d8\n48 89 05 b2 95 20 00\n48 3b 05 63 94 20 00\n72 05\ne8 14 00 00 00\n49 01 df\n4d 85 f6\n75 ac\n5b\n41 5e\n41 5f\nc3\n'
p880
S'.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405024\n.text:0000000000405025\n.text:0000000000405028\n.text:000000000040502b\n.text:0000000000405030\n.text:0000000000405037\n.text:000000000040503e\n.text:0000000000405041\n.text:0000000000405044\n.text:0000000000405048\n.text:000000000040504f\n.text:0000000000405052\n.text:0000000000405055\n.text:000000000040505a\n.text:000000000040505d\n.text:0000000000405064\n.text:0000000000405067\n.text:000000000040506e\n.text:0000000000405075\n.text:0000000000405077\n.text:000000000040507c\n.text:000000000040507f\n.text:0000000000405082\n.text:0000000000405084\n.text:0000000000405085\n.text:0000000000405087\n.text:0000000000405089\n'
p881
tp882
sS'quote_n'
p883
(S'\n__stdcall quote_n(char * arg)\n'
p884
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p885
S'MOV RDX,-0x1\nJMP 0x00407450\n'
p886
S'48 c7 c2 ff ff ff ff\neb d7\n'
p887
S'.text:0000000000407470\n.text:0000000000407477\n'
p888
tp889
sS'quotearg_alloc'
p890
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p891
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00406e00\n'
p893
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p894
S'.text:0000000000406df0\n.text:0000000000406df3\n.text:0000000000406df5\n.text:0000000000406df8\n'
p895
tp896
sS'close_stdout_set_file_name'
p897
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p898
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p899
S'MOV qword ptr [0x0060e650],RDI\nRET\n'
p900
S'48 89 3d 09 93 20 00\nc3\n'
p901
S'.text:0000000000405340\n.text:0000000000405347\n'
p902
tp903
sS'finish_up'
p904
(S'\n__stdcall finish_up()\n'
p905
V\u000avoid finish_up(EVP_PKEY_CTX *pEParm1)\u000a\u000a{\u000a  cleanup(pEParm1);\u000a  print_stats();\u000a  process_signals();\u000a  return;\u000a}\u000a\u000a
p906
S'PUSH RAX\nCALL 0x00404160\nCALL 0x00404210\nPOP RAX\nJMP 0x004040b0\n'
p907
S'50\ne8 ea 03 00 00\ne8 95 04 00 00\n58\ne9 2f 03 00 00\n'
p908
S'.text:0000000000403d70\n.text:0000000000403d71\n.text:0000000000403d76\n.text:0000000000403d7b\n.text:0000000000403d7c\n'
p909
tp910
sS'iwrite'
p911
(S'\n__stdcall iwrite()\n'
p912
V\u000asize_t iwrite(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  ulong uVar8;\u000a  __off_t _Var9;\u000a  ulong uVar10;\u000a  int *piVar11;\u000a  ulong length;\u000a  void *buf;\u000a  \u000a  if (((output_flags & 0x4000U) != 0) && (length < output_blocksize)) {\u000a    uVar3 = rpl_fcntl(1,3);\u000a    iVar4 = rpl_fcntl(1,4,(ulong)(uVar3 & 0xffffbfff),(ulong)(uVar3 & 0xffffbfff));\u000a    if ((iVar4 != 0) && (status_level != 1)) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar3 = *puVar5;\u000a      uVar6 = dcgettext(0,"failed to turn off O_DIRECT: %s",5);\u000a      pcVar7 = quotearg_n_style_colon((char *)0x0);\u000a      nl_error((char *)0x0,(ulong)uVar3,uVar6,pcVar7);\u000a    }\u000a    invalidate_cache(1);\u000a    conversions_mask._1_1_ = conversions_mask._1_1_ | 0x80;\u000a  }\u000a  uVar1 = 0;\u000aLAB_004048fa:\u000a  uVar8 = uVar1;\u000a  if (uVar8 < length) {\u000a    do {\u000a      process_signals();\u000a      final_op_was_seek = 0;\u000a      if (((conversions_mask._2_1_ & 1) == 0) || (_Var2 = is_nul(buf,length), _Var2 == false)) {\u000aLAB_00404980:\u000a        uVar10 = write(1,(void *)((long)buf + uVar8),length - uVar8);\u000a        if (-1 < (long)uVar10) goto LAB_004049b0;\u000a      }\u000a      else {\u000a        _Var9 = lseek(1,length,1);\u000a        if (_Var9 < 0) {\u000a          conversions_mask._2_1_ = conversions_mask._2_1_ & 0xfe;\u000a          goto LAB_00404980;\u000a        }\u000a        final_op_was_seek = 1;\u000a        uVar10 = length;\u000a        if (-1 < (long)length) goto LAB_004049b0;\u000a      }\u000a      piVar11 = __errno_location();\u000a      if (*piVar11 != 4 || uVar8 >= length) break;\u000a    } while( true );\u000a  }\u000a  goto LAB_004049c8;\u000aLAB_004049b0:\u000a  uVar1 = uVar10 + uVar8;\u000a  if (uVar10 == 0) {\u000a    piVar11 = __errno_location();\u000a    *piVar11 = 0x1c;\u000aLAB_004049c8:\u000a    if ((uVar8 != 0) && ((o_nocache & 1) != 0)) {\u000a      invalidate_cache(1);\u000a    }\u000a    return uVar8;\u000a  }\u000a  goto LAB_004048fa;\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R14,RDI\nMOV EAX,dword ptr [0x0060e4c8]\nTEST AH,0x40\nJZ 0x004048f8\nCMP qword ptr [0x0060e4d8],R12\nJBE 0x004048f8\nMOV EDI,0x1\nMOV ESI,0x3\nXOR EAX,EAX\nCALL 0x00408570\nMOV ECX,EAX\nAND ECX,0xffffbfff\nMOV EDI,0x1\nMOV ESI,0x4\nXOR EAX,EAX\nMOV EDX,ECX\nCALL 0x00408570\nTEST EAX,EAX\nJZ 0x004048e5\nCMP dword ptr [0x0060e2b0],0x1\nJZ 0x004048e5\nCALL 0x00401900\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a4aa\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RDX,qword ptr [0x0060e4c0]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00403360\nMOV EDI,0x1\nXOR ESI,ESI\nCALL 0x00403c50\nOR byte ptr [0x0060e4cd],0x80\nXOR EAX,EAX\nMOV R15,RAX\nLEA R13,[R14 + R15*0x1]\nMOV RBX,R12\nSUB RBX,R15\nCMP R15,R12\nJNC 0x004049c8\nSETNC BPL\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004040b0\nMOV byte ptr [0x0060e630],0x0\nTEST byte ptr [0x0060e4ce],0x1\nJZ 0x00404980\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405220\nTEST AL,AL\nJZ 0x00404980\nMOV EDI,0x1\nMOV EDX,0x1\nMOV RSI,R12\nCALL 0x00401a90\nTEST RAX,RAX\nJS 0x0040496c\nMOV byte ptr [0x0060e630],0x1\nMOV RAX,R12\nTEST RAX,RAX\nJS 0x00404995\nJMP 0x004049b0\nAND byte ptr [0x0060e4ce],0xfe\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x1\nMOV RSI,R13\nMOV RDX,RBX\nCALL 0x004019c0\nTEST RAX,RAX\nJNS 0x004049b0\nCALL 0x00401900\nCMP dword ptr [RAX],0x4\nSETNZ AL\nOR AL,BPL\nJZ 0x00404920\nJMP 0x004049c8\nTEST RAX,RAX\nLEA RAX,[RAX + R15*0x1]\nJNZ 0x004048fa\nCALL 0x00401900\nMOV dword ptr [RAX],0x1c\nTEST R15,R15\nJZ 0x004049e3\nTEST byte ptr [0x0060e501],0x1\nJZ 0x004049e3\nMOV EDI,0x1\nMOV RSI,R15\nCALL 0x00403c50\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p914
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f4\n49 89 fe\n8b 05 71 9c 20 00\nf6 c4 40\n0f 84 98 00 00 00\n4c 39 25 71 9c 20 00\n0f 86 8b 00 00 00\nbf 01 00 00 00\nbe 03 00 00 00\n31 c0\ne8 f2 3c 00 00\n89 c1\n81 e1 ff bf ff ff\nbf 01 00 00 00\nbe 04 00 00 00\n31 c0\n89 ca\ne8 d7 3c 00 00\n85 c0\n74 48\n83 3d 0c 9a 20 00 01\n74 3f\ne8 55 d0 ff ff\n8b 28\n31 ff\nbe aa a4 40 00\nba 05 00 00 00\ne8 42 d1 ff ff\n48 89 c3\n48 8b 15 f8 9b 20 00\n31 ff\nbe 03 00 00 00\ne8 6c 2a 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 7b ea ff ff\nbf 01 00 00 00\n31 f6\ne8 5f f3 ff ff\n80 0d d5 9b 20 00 80\n31 c0\n49 89 c7\n4f 8d 2c 3e\n4c 89 e3\n4c 29 fb\n4d 39 e7\n0f 83 b8 00 00 00\n40 0f 93 c5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 8b f7 ff ff\nc6 05 04 9d 20 00 00\nf6 05 9b 9b 20 00 01\n74 4b\n4c 89 f7\n4c 89 e6\ne8 e0 08 00 00\n84 c0\n74 3c\nbf 01 00 00 00\nba 01 00 00 00\n4c 89 e6\ne8 3a d1 ff ff\n48 85 c0\n78 11\nc6 05 ce 9c 20 00 01\n4c 89 e0\n48 85 c0\n78 2b\neb 44\n80 25 5b 9b 20 00 fe\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nbf 01 00 00 00\n4c 89 ee\n48 89 da\ne8 30 d0 ff ff\n48 85 c0\n79 1b\ne8 66 cf ff ff\n83 38 04\n0f 95 c0\n40 08 e8\n0f 84 77 ff ff ff\neb 1d\n48 85 c0\n4a 8d 04 38\n0f 85 3d ff ff ff\ne8 3e cf ff ff\nc7 00 1c 00 00 00\n4d 85 ff\n74 16\nf6 05 2d 9b 20 00 01\n74 0d\nbf 01 00 00 00\n4c 89 fe\ne8 6d f2 ff ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p915
S'.text:0000000000404840\n.text:0000000000404841\n.text:0000000000404843\n.text:0000000000404845\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484a\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404851\n.text:0000000000404857\n.text:000000000040485a\n.text:0000000000404860\n.text:0000000000404867\n.text:000000000040486d\n.text:0000000000404872\n.text:0000000000404877\n.text:0000000000404879\n.text:000000000040487e\n.text:0000000000404880\n.text:0000000000404886\n.text:000000000040488b\n.text:0000000000404890\n.text:0000000000404892\n.text:0000000000404894\n.text:0000000000404899\n.text:000000000040489b\n.text:000000000040489d\n.text:00000000004048a4\n.text:00000000004048a6\n.text:00000000004048ab\n.text:00000000004048ad\n.text:00000000004048af\n.text:00000000004048b4\n.text:00000000004048b9\n.text:00000000004048be\n.text:00000000004048c1\n.text:00000000004048c8\n.text:00000000004048ca\n.text:00000000004048cf\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048d9\n.text:00000000004048db\n.text:00000000004048dd\n.text:00000000004048e0\n.text:00000000004048e5\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048f1\n.text:00000000004048f8\n.text:00000000004048fa\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404904\n.text:0000000000404907\n.text:000000000040490a\n.text:0000000000404910\n.text:0000000000404914\n.text:0000000000404920\n.text:0000000000404925\n.text:000000000040492c\n.text:0000000000404933\n.text:0000000000404935\n.text:0000000000404938\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404942\n.text:0000000000404944\n.text:0000000000404949\n.text:000000000040494e\n.text:0000000000404951\n.text:0000000000404956\n.text:0000000000404959\n.text:000000000040495b\n.text:0000000000404962\n.text:0000000000404965\n.text:0000000000404968\n.text:000000000040496a\n.text:000000000040496c\n.text:0000000000404973\n.text:0000000000404980\n.text:0000000000404985\n.text:0000000000404988\n.text:000000000040498b\n.text:0000000000404990\n.text:0000000000404993\n.text:0000000000404995\n.text:000000000040499a\n.text:000000000040499d\n.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a9\n.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b7\n.text:00000000004049bd\n.text:00000000004049c2\n.text:00000000004049c8\n.text:00000000004049cb\n.text:00000000004049cd\n.text:00000000004049d4\n.text:00000000004049d6\n.text:00000000004049db\n.text:00000000004049de\n.text:00000000004049e3\n.text:00000000004049e6\n.text:00000000004049ea\n.text:00000000004049eb\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f1\n.text:00000000004049f3\n.text:00000000004049f4\n'
p916
tp917
sS'parse_long_options'
p918
(S'\n__stdcall parse_long_options(char * * argv, char * command_name, char * package, char * version, anon_subr_void_int * usage_func)\n'
p919
V\u000avoid parse_long_options(char **argv,char *command_name,char *package,char *version,\u000a                       void (*usage_func)(int),...)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  char in_AL;\u000a  int iVar2;\u000a  code *in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_f8;\u000a  undefined local_d8 [48];\u000a  undefined4 local_a8;\u000a  undefined4 local_98;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  \u000a  uVar1 = opterr;\u000a  if (in_AL != 0) {\u000a    local_a8 = in_XMM0_Da;\u000a    local_98 = in_XMM1_Da;\u000a    local_88 = in_XMM2_Da;\u000a    local_78 = in_XMM3_Da;\u000a    local_68 = in_XMM4_Da;\u000a    local_58 = in_XMM5_Da;\u000a    local_48 = in_XMM6_Da;\u000a    local_38 = in_XMM7_Da;\u000a  }\u000a  opterr = 0;\u000a  if ((int)argv != 2) {\u000a    optind = 0;\u000a    opterr = uVar1;\u000a    return;\u000a  }\u000a  iVar2 = getopt_long(argv,command_name,&DAT_0040ac70,long_options,0);\u000a  if (iVar2 != 0x76) {\u000a    if (iVar2 != 0x68) {\u000a      optind = 0;\u000a      opterr = uVar1;\u000a      return;\u000a    }\u000a    (*in_R9)(0);\u000a  }\u000a  local_f8.reg_save_area = local_d8;\u000a  local_f8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_f8.fp_offset = 0x30;\u000a  local_f8.gp_offset = 0x30;\u000a  version_etc_va(stdout,package,version,(char *)usage_func,&local_f8);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p920
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0xd0\nMOV RBX,R9\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RDX\nTEST AL,AL\nJZ 0x00405ef6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV EBP,dword ptr [0x0060e360]\nMOV dword ptr [0x0060e360],0x0\nCMP EDI,0x2\nJNZ 0x00405f27\nMOV EDX,0x40ac70\nMOV ECX,0x40ac80\nXOR R8D,R8D\nCALL 0x00401a30\nCMP EAX,0x76\nJZ 0x00405f4b\nCMP EAX,0x68\nJZ 0x00405f47\nMOV dword ptr [0x0060e360],EBP\nMOV dword ptr [0x0060e350],0x0\nADD RSP,0xd0\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nCALL RBX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x30\nMOV RDI,qword ptr [0x0060e348]\nMOV R8,RSP\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00407cd0\nXOR EDI,EDI\nCALL 0x00401d10\n'
p921
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec d0 00 00 00\n4c 89 cb\n4d 89 c6\n49 89 cf\n49 89 d4\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n8b 2d 64 84 20 00\nc7 05 5a 84 20 00 00 00 00 00\n83 ff 02\n75 1c\nba 70 ac 40 00\nb9 80 ac 40 00\n45 31 c0\ne8 13 bb ff ff\n83 f8 76\n74 29\n83 f8 68\n74 20\n89 2d 33 84 20 00\nc7 05 19 84 20 00 00 00 00 00\n48 81 c4 d0 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 ff\nff d3\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 30 00 00 00\n48 8b 3d d0 83 20 00\n49 89 e0\n4c 89 e6\n4c 89 fa\n4c 89 f1\ne8 47 1d 00 00\n31 ff\ne8 80 bd ff ff\n'
p922
S'.text:0000000000405ea0\n.text:0000000000405ea1\n.text:0000000000405ea3\n.text:0000000000405ea5\n.text:0000000000405ea7\n.text:0000000000405ea8\n.text:0000000000405eaf\n.text:0000000000405eb2\n.text:0000000000405eb5\n.text:0000000000405eb8\n.text:0000000000405ebb\n.text:0000000000405ebd\n.text:0000000000405ebf\n.text:0000000000405ec4\n.text:0000000000405ec9\n.text:0000000000405ece\n.text:0000000000405ed6\n.text:0000000000405ede\n.text:0000000000405ee6\n.text:0000000000405eee\n.text:0000000000405ef6\n.text:0000000000405efc\n.text:0000000000405f06\n.text:0000000000405f09\n.text:0000000000405f0b\n.text:0000000000405f10\n.text:0000000000405f15\n.text:0000000000405f18\n.text:0000000000405f1d\n.text:0000000000405f20\n.text:0000000000405f22\n.text:0000000000405f25\n.text:0000000000405f27\n.text:0000000000405f2d\n.text:0000000000405f37\n.text:0000000000405f3e\n.text:0000000000405f3f\n.text:0000000000405f41\n.text:0000000000405f43\n.text:0000000000405f45\n.text:0000000000405f46\n.text:0000000000405f47\n.text:0000000000405f49\n.text:0000000000405f4b\n.text:0000000000405f50\n.text:0000000000405f55\n.text:0000000000405f5d\n.text:0000000000405f62\n.text:0000000000405f6a\n.text:0000000000405f71\n.text:0000000000405f78\n.text:0000000000405f7b\n.text:0000000000405f7e\n.text:0000000000405f81\n.text:0000000000405f84\n.text:0000000000405f89\n.text:0000000000405f8b\n'
p923
tp924
sS'sigismember'
p925
(S'\n__stdcall sigismember(sigset_t * __set, int __signo)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigismember(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigismember_0060e248)();\u000a  return iVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060e248]\n'
p928
S'ff 25 42 c5 20 00\n'
p929
S'.plt:0000000000401d00\n'
p930
tp931
sS'__libc_csu_init'
p932
(S'\n__stdcall __libc_csu_init()\n'
p933
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p934
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60de08]\nPUSH RBP\nLEA RBP,[0x60de10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401878\nTEST RBP,RBP\nJZ 0x00409096\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00409080\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p935
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 b6 4d 20 00\n55\n48 8d 2d b6 4d 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 07 88 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p936
S'.text:0000000000409040\n.text:0000000000409042\n.text:0000000000409044\n.text:0000000000409047\n.text:0000000000409049\n.text:000000000040904b\n.text:0000000000409052\n.text:0000000000409053\n.text:000000000040905a\n.text:000000000040905b\n.text:000000000040905e\n.text:0000000000409061\n.text:0000000000409064\n.text:0000000000409068\n.text:000000000040906c\n.text:0000000000409071\n.text:0000000000409074\n.text:0000000000409076\n.text:0000000000409078\n.text:0000000000409080\n.text:0000000000409083\n.text:0000000000409086\n.text:0000000000409089\n.text:000000000040908d\n.text:0000000000409091\n.text:0000000000409094\n.text:0000000000409096\n.text:000000000040909a\n.text:000000000040909b\n.text:000000000040909c\n.text:000000000040909e\n.text:00000000004090a0\n.text:00000000004090a2\n.text:00000000004090a4\n'
p937
tp938
sS'argmatch_to_argument'
p939
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p940
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p941
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00408b21\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x00408b24\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00408b00\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p942
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 12 90 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p943
S'.text:0000000000408ad0\n.text:0000000000408ad2\n.text:0000000000408ad4\n.text:0000000000408ad6\n.text:0000000000408ad8\n.text:0000000000408ad9\n.text:0000000000408adc\n.text:0000000000408adf\n.text:0000000000408ae2\n.text:0000000000408ae5\n.text:0000000000408ae8\n.text:0000000000408aeb\n.text:0000000000408aed\n.text:0000000000408af1\n.text:0000000000408b00\n.text:0000000000408b03\n.text:0000000000408b06\n.text:0000000000408b09\n.text:0000000000408b0e\n.text:0000000000408b10\n.text:0000000000408b12\n.text:0000000000408b15\n.text:0000000000408b19\n.text:0000000000408b1c\n.text:0000000000408b1f\n.text:0000000000408b21\n.text:0000000000408b24\n.text:0000000000408b27\n.text:0000000000408b28\n.text:0000000000408b2a\n.text:0000000000408b2c\n.text:0000000000408b2e\n.text:0000000000408b30\n'
p944
tp945
sS'c_isdigit'
p946
(S'\n__stdcall c_isdigit()\n'
p947
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p948
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p949
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p950
S'.text:0000000000408bc0\n.text:0000000000408bc3\n.text:0000000000408bc6\n.text:0000000000408bc9\n'
p951
tp952
sS'usage'
p953
(S'\n__stdcall usage()\n'
p954
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,0x409148,5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "Copy a file, converting and formatting according to the operands.\u005cn\u005cn  bs=BYTES        read and write up to BYTES bytes at a time\u005cn  cbs=BYTES       convert BYTES bytes at a time\u005cn  conv=CONVS      convert the file as per the comma separated symbol list\u005cn  count=N         copy only N input blocks\u005cn  ibs=BYTES       read up to BYTES bytes at a time (default: 512)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  if=FILE         read from FILE instead of stdin\u005cn  iflag=FLAGS     read as per the comma separated symbol list\u005cn  obs=BYTES       write BYTES bytes at a time (default: 512)\u005cn  of=FILE         write to FILE instead of stdout\u005cn  oflag=FLAGS     write as per the comma separated symbol list\u005cn  seek=N          skip N obs-sized blocks at start of output\u005cn  skip=N          skip N ibs-sized blocks at start of input\u005cn  status=LEVEL    The LEVEL of information to print to stderr;\u005cn                  \u005c'none\u005c' suppresses everything but error messages,\u005cn                  \u005c'noxfer\u005c' suppresses the final transfer statistics,\u005cn                  \u005c'progress\u005c' shows periodic transfer statistics\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnN and BYTES may be followed by the following multiplicative suffixes:\u005cnc =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M\u005cnGB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.\u005cn\u005cnEach CONV symbol may be:\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  ascii     from EBCDIC to ASCII\u005cn  ebcdic    from ASCII to EBCDIC\u005cn  ibm       from ASCII to alternate EBCDIC\u005cn  block     pad newline-terminated records with spaces to cbs-size\u005cn  unblock   replace trailing spaces in cbs-size records with newline\u005cn  lcase     change upper case to lower case\u005cn  ucase     change lower case to upper case\u005cn  sparse    try to seek rather than write the output for NUL input blocks\u005cn  swab      swap every pair of input bytes\u005cn  sync      pad every input block with NULs to ibs-size; when used\u005cn            with block or unblock, pad with spaces rather than NULs\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  excl      fail if the output file already exists\u005cn  nocreat   do not create the output file\u005cn  notrunc   do not truncate the output file\u005cn  noerror   continue after read errors\u005cn  fdatasync  physically write output file data before finishing\u005cn  fsync     likewise, but also write metadata\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnEach FLAG symbol may be:\u005cn\u005cn  append    append mode (makes sense only for output; conv=notrunc suggested)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  direct    use direct I/O for data\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  directory  fail unless a directory\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  dsync     use synchronized I/O for data\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  sync      likewise, but also for metadata\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  fullblock  accumulate full blocks of input (iflag only)\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  nonblock  use non-blocking I/O\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  noatime   do not update access time\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  nocache   Request to drop cache.  See also oflag=sync\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  noctty    do not assign controlling terminal from file\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  nofollow  do not follow symlinks\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  count_bytes  treat \u005c'count=N\u005c' as a byte count (iflag only)\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  skip_bytes  treat \u005c'skip=N\u005c' as a byte count (iflag only)\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  seek_bytes  treat \u005c'seek=N\u005c' as a byte count (oflag only)\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnSending a %s signal to a running \u005c'dd\u005c' process makes it\u005cnprint I/O statistics to standard error and then resume copying.\u005cn\u005cnOptions are:\u005cn\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,&DAT_00409d35,uVar1);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p955
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004021ac\nXOR EDI,EDI\nMOV ESI,0x409148\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e660]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x409171\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x4092d9\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409578\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409669\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x4098b3\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x4099d2\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409a3c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409a61\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409a87\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409ab2\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409adf\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409b1a\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409b3c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409b63\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409b9c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409bd6\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409bfa\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409c37\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409c72\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409cad\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x409d35\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401c60\nXOR EDI,EDI\nMOV ESI,0x409d3a\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x409d67\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RSI,qword ptr [0x0060e348]\nMOV RDI,RAX\nCALL 0x00401b30\nCALL 0x00402200\nMOV EDI,EBX\nCALL 0x00401d10\nCALL 0x004021c0\nMOV EDI,EBX\nCALL 0x00401d10\n'
p956
S'53\n89 fb\n85 db\n0f 85 01 03 00 00\n31 ff\nbe 48 91 40 00\nba 05 00 00 00\ne8 44 fb ff ff\n48 89 c1\n48 8b 15 9a c7 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 88 fd ff ff\n31 ff\nbe 71 91 40 00\nba 05 00 00 00\ne8 17 fb ff ff\n48 8b 35 58 c4 20 00\n48 89 c7\ne8 38 fc ff ff\n31 ff\nbe d9 92 40 00\nba 05 00 00 00\ne8 f7 fa ff ff\n48 8b 35 38 c4 20 00\n48 89 c7\ne8 18 fc ff ff\n31 ff\nbe 78 95 40 00\nba 05 00 00 00\ne8 d7 fa ff ff\n48 8b 35 18 c4 20 00\n48 89 c7\ne8 f8 fb ff ff\n31 ff\nbe 69 96 40 00\nba 05 00 00 00\ne8 b7 fa ff ff\n48 8b 35 f8 c3 20 00\n48 89 c7\ne8 d8 fb ff ff\n31 ff\nbe b3 98 40 00\nba 05 00 00 00\ne8 97 fa ff ff\n48 8b 35 d8 c3 20 00\n48 89 c7\ne8 b8 fb ff ff\n31 ff\nbe d2 99 40 00\nba 05 00 00 00\ne8 77 fa ff ff\n48 8b 35 b8 c3 20 00\n48 89 c7\ne8 98 fb ff ff\n31 ff\nbe 3c 9a 40 00\nba 05 00 00 00\ne8 57 fa ff ff\n48 8b 35 98 c3 20 00\n48 89 c7\ne8 78 fb ff ff\n31 ff\nbe 61 9a 40 00\nba 05 00 00 00\ne8 37 fa ff ff\n48 8b 35 78 c3 20 00\n48 89 c7\ne8 58 fb ff ff\n31 ff\nbe 87 9a 40 00\nba 05 00 00 00\ne8 17 fa ff ff\n48 8b 35 58 c3 20 00\n48 89 c7\ne8 38 fb ff ff\n31 ff\nbe b2 9a 40 00\nba 05 00 00 00\ne8 f7 f9 ff ff\n48 8b 35 38 c3 20 00\n48 89 c7\ne8 18 fb ff ff\n31 ff\nbe df 9a 40 00\nba 05 00 00 00\ne8 d7 f9 ff ff\n48 8b 35 18 c3 20 00\n48 89 c7\ne8 f8 fa ff ff\n31 ff\nbe 1a 9b 40 00\nba 05 00 00 00\ne8 b7 f9 ff ff\n48 8b 35 f8 c2 20 00\n48 89 c7\ne8 d8 fa ff ff\n31 ff\nbe 3c 9b 40 00\nba 05 00 00 00\ne8 97 f9 ff ff\n48 8b 35 d8 c2 20 00\n48 89 c7\ne8 b8 fa ff ff\n31 ff\nbe 63 9b 40 00\nba 05 00 00 00\ne8 77 f9 ff ff\n48 8b 35 b8 c2 20 00\n48 89 c7\ne8 98 fa ff ff\n31 ff\nbe 9c 9b 40 00\nba 05 00 00 00\ne8 57 f9 ff ff\n48 8b 35 98 c2 20 00\n48 89 c7\ne8 78 fa ff ff\n31 ff\nbe d6 9b 40 00\nba 05 00 00 00\ne8 37 f9 ff ff\n48 8b 35 78 c2 20 00\n48 89 c7\ne8 58 fa ff ff\n31 ff\nbe fa 9b 40 00\nba 05 00 00 00\ne8 17 f9 ff ff\n48 8b 35 58 c2 20 00\n48 89 c7\ne8 38 fa ff ff\n31 ff\nbe 37 9c 40 00\nba 05 00 00 00\ne8 f7 f8 ff ff\n48 8b 35 38 c2 20 00\n48 89 c7\ne8 18 fa ff ff\n31 ff\nbe 72 9c 40 00\nba 05 00 00 00\ne8 d7 f8 ff ff\n48 8b 35 18 c2 20 00\n48 89 c7\ne8 f8 f9 ff ff\n31 ff\nbe ad 9c 40 00\nba 05 00 00 00\ne8 b7 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 35 9d 40 00\n31 c0\n48 89 ce\ne8 00 fb ff ff\n31 ff\nbe 3a 9d 40 00\nba 05 00 00 00\ne8 8f f8 ff ff\n48 8b 35 d0 c1 20 00\n48 89 c7\ne8 b0 f9 ff ff\n31 ff\nbe 67 9d 40 00\nba 05 00 00 00\ne8 6f f8 ff ff\n48 8b 35 b0 c1 20 00\n48 89 c7\ne8 90 f9 ff ff\ne8 5b 00 00 00\n89 df\ne8 64 fb ff ff\ne8 0f 00 00 00\n89 df\ne8 58 fb ff ff\n'
p957
S'.text:0000000000401ea0\n.text:0000000000401ea1\n.text:0000000000401ea3\n.text:0000000000401ea5\n.text:0000000000401eab\n.text:0000000000401ead\n.text:0000000000401eb2\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ebf\n.text:0000000000401ec6\n.text:0000000000401ecb\n.text:0000000000401ecd\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401eda\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401ef0\n.text:0000000000401ef3\n.text:0000000000401ef8\n.text:0000000000401efa\n.text:0000000000401eff\n.text:0000000000401f04\n.text:0000000000401f09\n.text:0000000000401f10\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1a\n.text:0000000000401f1f\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f30\n.text:0000000000401f33\n.text:0000000000401f38\n.text:0000000000401f3a\n.text:0000000000401f3f\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f50\n.text:0000000000401f53\n.text:0000000000401f58\n.text:0000000000401f5a\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f69\n.text:0000000000401f70\n.text:0000000000401f73\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f84\n.text:0000000000401f89\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9a\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fb0\n.text:0000000000401fb3\n.text:0000000000401fb8\n.text:0000000000401fba\n.text:0000000000401fbf\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fd0\n.text:0000000000401fd3\n.text:0000000000401fd8\n.text:0000000000401fda\n.text:0000000000401fdf\n.text:0000000000401fe4\n.text:0000000000401fe9\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff8\n.text:0000000000401ffa\n.text:0000000000401fff\n.text:0000000000402004\n.text:0000000000402009\n.text:0000000000402010\n.text:0000000000402013\n.text:0000000000402018\n.text:000000000040201a\n.text:000000000040201f\n.text:0000000000402024\n.text:0000000000402029\n.text:0000000000402030\n.text:0000000000402033\n.text:0000000000402038\n.text:000000000040203a\n.text:000000000040203f\n.text:0000000000402044\n.text:0000000000402049\n.text:0000000000402050\n.text:0000000000402053\n.text:0000000000402058\n.text:000000000040205a\n.text:000000000040205f\n.text:0000000000402064\n.text:0000000000402069\n.text:0000000000402070\n.text:0000000000402073\n.text:0000000000402078\n.text:000000000040207a\n.text:000000000040207f\n.text:0000000000402084\n.text:0000000000402089\n.text:0000000000402090\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209f\n.text:00000000004020a4\n.text:00000000004020a9\n.text:00000000004020b0\n.text:00000000004020b3\n.text:00000000004020b8\n.text:00000000004020ba\n.text:00000000004020bf\n.text:00000000004020c4\n.text:00000000004020c9\n.text:00000000004020d0\n.text:00000000004020d3\n.text:00000000004020d8\n.text:00000000004020da\n.text:00000000004020df\n.text:00000000004020e4\n.text:00000000004020e9\n.text:00000000004020f0\n.text:00000000004020f3\n.text:00000000004020f8\n.text:00000000004020fa\n.text:00000000004020ff\n.text:0000000000402104\n.text:0000000000402109\n.text:0000000000402110\n.text:0000000000402113\n.text:0000000000402118\n.text:000000000040211a\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402129\n.text:0000000000402130\n.text:0000000000402133\n.text:0000000000402138\n.text:000000000040213a\n.text:000000000040213f\n.text:0000000000402144\n.text:0000000000402149\n.text:000000000040214c\n.text:0000000000402151\n.text:0000000000402156\n.text:0000000000402158\n.text:000000000040215b\n.text:0000000000402160\n.text:0000000000402162\n.text:0000000000402167\n.text:000000000040216c\n.text:0000000000402171\n.text:0000000000402178\n.text:000000000040217b\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402187\n.text:000000000040218c\n.text:0000000000402191\n.text:0000000000402198\n.text:000000000040219b\n.text:00000000004021a0\n.text:00000000004021a5\n.text:00000000004021a7\n.text:00000000004021ac\n.text:00000000004021b1\n.text:00000000004021b3\n'
p958
tp959
sS'quoting_options_from_style'
p960
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p961
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p962
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040720d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004018f0\n'
p963
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 de a6 ff ff\n'
p964
S'.text:00000000004071c0\n.text:00000000004071c4\n.text:00000000004071c7\n.text:00000000004071cc\n.text:00000000004071d1\n.text:00000000004071d5\n.text:00000000004071dd\n.text:00000000004071e0\n.text:00000000004071e2\n.text:00000000004071e4\n.text:00000000004071e8\n.text:00000000004071eb\n.text:00000000004071ef\n.text:00000000004071f4\n.text:00000000004071f9\n.text:00000000004071fd\n.text:0000000000407201\n.text:0000000000407205\n.text:0000000000407208\n.text:000000000040720c\n.text:000000000040720d\n'
p965
tp966
sS'strcpy'
p967
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060e070)();\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060e070]\n'
p970
S'ff 25 1a c7 20 00\n'
p971
S'.plt:0000000000401950\n'
p972
tp973
sS'parse_integer'
p974
(S'\n__stdcall parse_integer(char * str, strtol_error * invalid)\n'
p975
V\u000auintmax_t parse_integer(char *str,strtol_error *invalid)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  uintmax_t local_18;\u000a  char *local_10;\u000a  \u000a  sVar1 = xstrtoumax(str,&local_10,(uintmax_t *)0xa,(char *)&local_18);\u000a  if (sVar1 != LONGINT_OK) {\u000a    if ((sVar1 == LONGINT_INVALID_SUFFIX_CHAR) && (*local_10 == 'x')) {\u000a      uVar2 = parse_integer(local_10 + 1,invalid);\u000a      if ((uVar2 == 0) || ((uVar2 * local_18) / uVar2 == local_18)) {\u000a        return local_18 * uVar2;\u000a      }\u000a      *invalid = LONGINT_OVERFLOW;\u000a    }\u000a    else {\u000a      *invalid = sVar1;\u000a    }\u000a    local_18 = 0;\u000a  }\u000a  return local_18;\u000a}\u000a\u000a
p976
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RSI,[RSP + 0x8]\nMOV RCX,RSP\nMOV EDX,0xa\nMOV R8D,0x40a1b9\nCALL 0x00408020\nTEST EAX,EAX\nJZ 0x00403f27\nCMP EAX,0x2\nJNZ 0x00403f2d\nMOV RDI,qword ptr [RSP + 0x8]\nCMP byte ptr [RDI],0x78\nJNZ 0x00403f2d\nINC RDI\nMOV RSI,RBX\nCALL 0x00403ec0\nMOV RCX,RAX\nTEST RCX,RCX\nJZ 0x00403f1b\nMOV RSI,qword ptr [RSP]\nMOV RAX,RCX\nIMUL RAX,RSI\nXOR EDX,EDX\nDIV RCX\nCMP RAX,RSI\nJNZ 0x00403f37\nMOV RAX,qword ptr [RSP]\nIMUL RAX,RCX\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP]\nJMP 0x00403f31\nMOV dword ptr [RBX],EAX\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nRET\nMOV dword ptr [RBX],0x1\nJMP 0x00403f2f\n'
p977
S'53\n48 83 ec 10\n48 89 f3\n48 8d 74 24 08\n48 89 e1\nba 0a 00 00 00\n41 b8 b9 a1 40 00\ne8 40 41 00 00\n85 c0\n74 43\n83 f8 02\n75 44\n48 8b 7c 24 08\n80 3f 78\n75 3a\n48 ff c7\n48 89 de\ne8 c2 ff ff ff\n48 89 c1\n48 85 c9\n74 15\n48 8b 34 24\n48 89 c8\n48 0f af c6\n31 d2\n48 f7 f1\n48 39 f0\n75 1c\n48 8b 04 24\n48 0f af c1\n48 89 04 24\n48 8b 04 24\neb 04\n89 03\n31 c0\n48 83 c4 10\n5b\nc3\nc7 03 01 00 00 00\neb f0\n'
p978
S'.text:0000000000403ec0\n.text:0000000000403ec1\n.text:0000000000403ec5\n.text:0000000000403ec8\n.text:0000000000403ecd\n.text:0000000000403ed0\n.text:0000000000403ed5\n.text:0000000000403edb\n.text:0000000000403ee0\n.text:0000000000403ee2\n.text:0000000000403ee4\n.text:0000000000403ee7\n.text:0000000000403ee9\n.text:0000000000403eee\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef6\n.text:0000000000403ef9\n.text:0000000000403efe\n.text:0000000000403f01\n.text:0000000000403f04\n.text:0000000000403f06\n.text:0000000000403f0a\n.text:0000000000403f0d\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1b\n.text:0000000000403f1f\n.text:0000000000403f23\n.text:0000000000403f27\n.text:0000000000403f2b\n.text:0000000000403f2d\n.text:0000000000403f2f\n.text:0000000000403f31\n.text:0000000000403f35\n.text:0000000000403f36\n.text:0000000000403f37\n.text:0000000000403f3d\n'
p979
tp980
sS'xsum4'
p981
(S'\n__stdcall xsum4(size_t size1, size_t size2, size_t size3, size_t size4)\n'
p982
V\u000asize_t xsum4(size_t size1,size_t size2,size_t size3,size_t size4)\u000a\u000a{\u000a  size_t size1_00;\u000a  \u000a  size1_00 = xsum(size1,size2);\u000a  size1_00 = xsum(size1_00,size3);\u000a  size1_00 = xsum(size1_00,size4);\u000a  return size1_00;\u000a}\u000a\u000a
p983
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV RBX,RDX\nCALL 0x00408fc0\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00408fc0\nMOV RDI,RAX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00408fc0\n'
p984
S'41 56\n53\n50\n49 89 ce\n48 89 d3\ne8 b1 ff ff ff\n48 89 c7\n48 89 de\ne8 a6 ff ff ff\n48 89 c7\n4c 89 f6\n48 83 c4 08\n5b\n41 5e\neb 97\n'
p985
S'.text:0000000000409000\n.text:0000000000409002\n.text:0000000000409003\n.text:0000000000409004\n.text:0000000000409007\n.text:000000000040900a\n.text:000000000040900f\n.text:0000000000409012\n.text:0000000000409015\n.text:000000000040901a\n.text:000000000040901d\n.text:0000000000409020\n.text:0000000000409024\n.text:0000000000409025\n.text:0000000000409027\n'
p986
tp987
sS'xsum3'
p988
(S'\n__stdcall xsum3(size_t size1, size_t size2, size_t size3)\n'
p989
V\u000asize_t xsum3(size_t size1,size_t size2,size_t size3)\u000a\u000a{\u000a  size_t size1_00;\u000a  \u000a  size1_00 = xsum(size1,size2);\u000a  size1_00 = xsum(size1_00,size3);\u000a  return size1_00;\u000a}\u000a\u000a
p990
S'PUSH RBX\nMOV RBX,RDX\nCALL 0x00408fc0\nMOV RDI,RAX\nMOV RSI,RBX\nPOP RBX\nJMP 0x00408fc0\n'
p991
S'53\n48 89 d3\ne8 d7 ff ff ff\n48 89 c7\n48 89 de\n5b\neb ce\n'
p992
S'.text:0000000000408fe0\n.text:0000000000408fe1\n.text:0000000000408fe4\n.text:0000000000408fe9\n.text:0000000000408fec\n.text:0000000000408fef\n.text:0000000000408ff0\n'
p993
tp994
sS'gethrxtime'
p995
(S'\n__stdcall gethrxtime()\n'
p996
V\u000axtime_t gethrxtime(void)\u000a\u000a{\u000a  int iVar1;\u000a  xtime_t xVar2;\u000a  timespec ts;\u000a  timespec local_10;\u000a  \u000a  iVar1 = clock_gettime(1,&local_10);\u000a  if (iVar1 != 0) {\u000a    gettime((timespec *)&local_10);\u000a  }\u000a  xVar2 = xtime_make(local_10.tv_sec,local_10.tv_nsec);\u000a  return xVar2;\u000a}\u000a\u000a
p997
S'SUB RSP,0x18\nLEA RSI,[RSP + 0x8]\nMOV EDI,0x1\nCALL 0x004019b0\nTEST EAX,EAX\nJZ 0x004054a1\nLEA RDI,[RSP + 0x8]\nCALL 0x00405590\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x004054c0\nADD RSP,0x18\nRET\n'
p998
S'48 83 ec 18\n48 8d 74 24 08\nbf 01 00 00 00\ne8 1d c5 ff ff\n85 c0\n74 0a\n48 8d 7c 24 08\ne8 ef 00 00 00\n48 8b 7c 24 08\n48 8b 74 24 10\ne8 10 00 00 00\n48 83 c4 18\nc3\n'
p999
S'.text:0000000000405480\n.text:0000000000405484\n.text:0000000000405489\n.text:000000000040548e\n.text:0000000000405493\n.text:0000000000405495\n.text:0000000000405497\n.text:000000000040549c\n.text:00000000004054a1\n.text:00000000004054a6\n.text:00000000004054ab\n.text:00000000004054b0\n.text:00000000004054b4\n'
p1000
tp1001
sS'advance_input_offset'
p1002
(S'\n__stdcall advance_input_offset(uintmax_t offset)\n'
p1003
V\u000avoid advance_input_offset(uintmax_t offset)\u000a\u000a{\u000a  if (CARRY8(offset,input_offset)) {\u000a    input_offset_overflow = true;\u000a  }\u000a  input_offset = offset + input_offset;\u000a  return;\u000a}\u000a\u000a
p1004
S'ADD RDI,qword ptr [0x0060e4b0]\nMOV qword ptr [0x0060e4b0],RDI\nJNC 0x00404d17\nMOV byte ptr [0x0060e601],0x1\nRET\n'
p1005
S'48 03 3d a9 97 20 00\n48 89 3d a2 97 20 00\n73 07\nc6 05 ea 98 20 00 01\nc3\n'
p1006
S'.text:0000000000404d00\n.text:0000000000404d07\n.text:0000000000404d0e\n.text:0000000000404d10\n.text:0000000000404d17\n'
p1007
tp1008
sS'c_isgraph'
p1009
(S'\n__stdcall c_isgraph()\n'
p1010
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1011
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1012
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1013
S'.text:0000000000408bd0\n.text:0000000000408bd3\n.text:0000000000408bd6\n.text:0000000000408bd9\n'
p1014
tp1015
sS'write'
p1016
(S'\n__stdcall write(int __fd, void * __buf, size_t __n)\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t write(int __fd,void *__buf,size_t __n)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_write_0060e0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060e0a8]\n'
p1019
S'ff 25 e2 c6 20 00\n'
p1020
S'.plt:00000000004019c0\n'
p1021
tp1022
sS'quotearg_buffer_restyled'
p1023
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1024
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040623c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040623c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040623c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040623c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040623c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040623c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040623c_caseD_7;\u000aswitchD_0040623c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040623c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040623c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00406d00;\u000aLAB_00406420:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00406d09:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00406d18:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040642b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040646f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040646f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00406d18;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00406c45;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00406b50;\u000a    }\u000a    goto LAB_00406d18;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00406c7a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00406d18;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00406ca9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00406768;\u000a  case '\u005ca':\u000a    goto joined_r0x00406658;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00406658;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00406486_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00406658;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00406658;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00406486_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00406658:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00406bbe;\u000a    }\u000a    goto LAB_00406d18;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00406d18;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00406d18;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00406d18;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00406d18;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00406d18;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00406486_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00406c16;\u000a      goto joined_r0x00406c08;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00406711:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00406c08;\u000a      goto LAB_00406c16;\u000a    }\u000a    goto LAB_00406d18;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00406d18;\u000a  }\u000a  goto joined_r0x00406b50;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00406c7a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00406ca9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00406ca9:\u000a  if (1 < uVar10) {\u000aLAB_00406786:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00406842;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00406711;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00406842:\u000a        if (bVar6 != 0) goto LAB_00406d18;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00406768:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00406786;\u000ajoined_r0x00406b50:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00406b50:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00406b77;\u000aLAB_00406bb0:\u000a    if (bVar22) goto LAB_00406bb5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00406bb0;\u000aLAB_00406b77:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00406bb5:\u000a      if (bVar6 != 0) goto LAB_00406d18;\u000aLAB_00406bbe:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00406c08;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00406c16:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00406c08:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00406c45:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00406420;\u000aLAB_00406d00:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00406d09;\u000a  goto LAB_0040642b;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401a10\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00406de5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40ad30 + RAX*0x8]\nMOV EDI,0x40b256\nMOV ESI,R15D\nCALL 0x00407490\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40b258\nMOV ESI,R15D\nCALL 0x00407490\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040629d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004062a0\nNOP\nCMP R12,RSI\nJNC 0x0040628e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00406280\nJMP 0x004062a0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401a20\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040636c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040636c\nMOV ECX,0x40b254\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00406366\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00406307\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00406334\nTEST RSI,RSI\nJZ 0x00406321\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40b258\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00406342\nMOV ECX,0x40b258\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040636c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00406dbc\nMOV ECX,0x40b254\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00406d00\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00406d09\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040646f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040646a\nCMP R11,-0x1\nJNZ 0x0040646a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401a20\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004064c0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040671c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40ad88 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00406d18\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00406b70\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00406b77\nJMP 0x00406bb0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401b20\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040650d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00406471\nJMP 0x00406d18\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00406471\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040649b\nCMP EBX,0x2\nJNZ 0x0040649b\nTEST R13,R13\nJNZ 0x0040649b\nJMP 0x00406d18\nCMP R11,-0x1\nJZ 0x004068f3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00406913\nJMP 0x0040649b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406924\nTEST R8B,R8B\nJNZ 0x00406d18\nCMP EBX,0x2\nJNZ 0x004065c8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004065c8\nCMP R12,RSI\nJNC 0x004065a3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004065b2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004065c1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004065d2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00406a98\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00406a98\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00406a98\nCMP RCX,RSI\nJNC 0x0040660c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040661b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nJMP 0x00406b70\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406499\nJMP 0x0040667a\nMOV DL,0x74\nJMP 0x00406662\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406499\nJMP 0x0040667a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406499\nJMP 0x0040667a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00406d18\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406499\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00406bbe\nJMP 0x00406d18\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00406499\nTEST R8B,R8B\nJNZ 0x00406d18\nCMP R12,RSI\nJNC 0x004066aa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004066b9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004066c8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00406499\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00406aab\nCMP EBX,0x2\nJNZ 0x00406499\nTEST R8B,R8B\nJZ 0x00406499\nJMP 0x00406d18\nCMP EBX,0x2\nJNZ 0x00406944\nTEST R8B,R8B\nJNZ 0x00406d18\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00406c16\nJMP 0x00406c39\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00406965\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401d80\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00406b58\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00406b58\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00406842\nJMP 0x00406810\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004067f9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004067f6\nCMP R12,RSI\nJNC 0x004067db\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004067ea\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00406830\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00406830\nTEST BPL,0x1\nJZ 0x004068d3\nCMP R12,RSI\nJNC 0x00406824\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004068d3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00406810\nTEST R8B,R8B\nJNZ 0x00406d18\nCMP EBX,0x2\nJNZ 0x0040688a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040688a\nCMP R12,RSI\nJNC 0x00406862\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406871\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406880\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00406894\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004068ab\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004068c5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004067c0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00406c16\nJMP 0x00406c39\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040649b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040649b\nJMP 0x00406d18\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00406c45\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nJMP 0x00406b70\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00406662\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00406c16\nJMP 0x00406c39\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00406987\nMOV RDI,R10\nCALL 0x00401a20\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401a40\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00406c5f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00406c57\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00406c66\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00406a4e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00406a46\nBT RDI,RDX\nJC 0x00406db2\nINC RCX\nCMP RCX,R14\nJC 0x00406a30\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401d50\nTEST EAX,EAX\nJNZ 0x00406a63\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401d40\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004069a5\nJMP 0x00406ca9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nJMP 0x00406b70\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00406499\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00406499\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00406499\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040649b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00406ce2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00406d18\nCMP R12,RSI\nJNC 0x00406b0e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00406b21\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406b30\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00406b3f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nJMP 0x00406b70\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00406bb0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00406bb5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00406c10\nJMP 0x00406bb5\nTEST BPL,BPL\nJZ 0x00406c10\nTEST R8B,R8B\nJNZ 0x00406d18\nCMP EBX,0x2\nJNZ 0x00406bf8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00406bf8\nCMP R12,RSI\nJNC 0x00406bd3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406be2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406bf1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00406c02\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00406c42\nJMP 0x00406c3e\nTEST DIL,0x1\nJZ 0x00406c39\nAND AL,0x1\nJNZ 0x00406c39\nCMP R12,RSI\nJNC 0x00406c24\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406c33\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00406c42\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00406d00\nJMP 0x00406420\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00406ca4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00406c9c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00406cd8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00406c7a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00406ca9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00406768\nJMP 0x00406786\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00406ca9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004064a6\nJMP 0x00406b70\nCMP R13,R11\nJNZ 0x0040642b\nTEST R8B,R8B\nJZ 0x00406d72\nCMP EBX,0x2\nJNZ 0x00406d72\nTEST R12,R12\nJNZ 0x00406d72\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004061b0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00406da6\nTEST R8B,R8B\nJNZ 0x00406da6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00406da6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00406d99\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00406d90\nCMP R12,RSI\nJNC 0x00406d5d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00406d5d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00406d18\nTEST RSI,RSI\nJZ 0x00406dc9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40b254\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040636c\nCALL 0x004018f0\n'
p1026
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 32 b8 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 30 ad 40 00\nbf 56 b2 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 58 b2 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 73 b7 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 54 b2 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 58 b2 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 58 b2 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 54 b2 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 d3 b5 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 88 ad 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 47 b6 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 47 b6 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 a1 b0 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 b0 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 f9 b2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 c2 b2 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 54 b2 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 06 ab ff ff\n'
p1027
S'.text:00000000004061b0\n.text:00000000004061b1\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061b7\n.text:00000000004061b9\n.text:00000000004061ba\n.text:00000000004061c1\n.text:00000000004061c4\n.text:00000000004061c7\n.text:00000000004061ca\n.text:00000000004061cf\n.text:00000000004061d4\n.text:00000000004061d9\n.text:00000000004061de\n.text:00000000004061e6\n.text:00000000004061ea\n.text:00000000004061f0\n.text:00000000004061f8\n.text:00000000004061fd\n.text:0000000000406205\n.text:000000000040620a\n.text:000000000040620e\n.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406216\n.text:0000000000406219\n.text:000000000040621e\n.text:0000000000406221\n.text:0000000000406224\n.text:0000000000406227\n.text:000000000040622a\n.text:000000000040622c\n.text:000000000040622f\n.text:0000000000406234\n.text:0000000000406237\n.text:000000000040623c\n.text:0000000000406243\n.text:0000000000406248\n.text:000000000040624b\n.text:0000000000406250\n.text:0000000000406255\n.text:000000000040625a\n.text:000000000040625d\n.text:0000000000406262\n.text:0000000000406267\n.text:000000000040626c\n.text:000000000040626e\n.text:0000000000406270\n.text:0000000000406275\n.text:0000000000406277\n.text:000000000040627a\n.text:000000000040627c\n.text:000000000040627e\n.text:0000000000406280\n.text:0000000000406283\n.text:0000000000406285\n.text:000000000040628a\n.text:000000000040628e\n.text:0000000000406294\n.text:0000000000406297\n.text:0000000000406299\n.text:000000000040629b\n.text:000000000040629d\n.text:00000000004062a0\n.text:00000000004062a5\n.text:00000000004062a8\n.text:00000000004062ad\n.text:00000000004062b2\n.text:00000000004062b5\n.text:00000000004062b8\n.text:00000000004062bb\n.text:00000000004062be\n.text:00000000004062c3\n.text:00000000004062c6\n.text:00000000004062c9\n.text:00000000004062ce\n.text:00000000004062d1\n.text:00000000004062d3\n.text:00000000004062d6\n.text:00000000004062d8\n.text:00000000004062da\n.text:00000000004062dd\n.text:00000000004062e2\n.text:00000000004062e7\n.text:00000000004062ec\n.text:00000000004062ef\n.text:00000000004062f5\n.text:00000000004062f7\n.text:00000000004062fa\n.text:00000000004062fd\n.text:0000000000406300\n.text:0000000000406302\n.text:0000000000406304\n.text:0000000000406307\n.text:000000000040630a\n.text:000000000040630f\n.text:0000000000406312\n.text:0000000000406314\n.text:0000000000406317\n.text:0000000000406319\n.text:000000000040631e\n.text:0000000000406321\n.text:0000000000406326\n.text:000000000040632c\n.text:0000000000406332\n.text:0000000000406334\n.text:0000000000406339\n.text:000000000040633f\n.text:0000000000406342\n.text:0000000000406345\n.text:0000000000406348\n.text:000000000040634a\n.text:000000000040634f\n.text:0000000000406352\n.text:0000000000406358\n.text:000000000040635d\n.text:0000000000406363\n.text:0000000000406366\n.text:0000000000406369\n.text:000000000040636c\n.text:0000000000406374\n.text:0000000000406376\n.text:0000000000406378\n.text:000000000040637b\n.text:000000000040637f\n.text:0000000000406381\n.text:0000000000406384\n.text:0000000000406388\n.text:000000000040638a\n.text:000000000040638d\n.text:0000000000406390\n.text:0000000000406393\n.text:0000000000406395\n.text:0000000000406399\n.text:000000000040639b\n.text:000000000040639f\n.text:00000000004063a2\n.text:00000000004063a5\n.text:00000000004063a8\n.text:00000000004063aa\n.text:00000000004063ae\n.text:00000000004063b7\n.text:00000000004063ba\n.text:00000000004063bc\n.text:00000000004063c0\n.text:00000000004063c2\n.text:00000000004063c6\n.text:00000000004063c8\n.text:00000000004063cb\n.text:00000000004063cf\n.text:00000000004063d1\n.text:00000000004063d4\n.text:00000000004063d8\n.text:00000000004063dd\n.text:00000000004063e0\n.text:00000000004063e4\n.text:00000000004063ec\n.text:00000000004063ef\n.text:00000000004063f2\n.text:00000000004063f4\n.text:00000000004063f8\n.text:00000000004063fb\n.text:00000000004063fd\n.text:0000000000406402\n.text:0000000000406406\n.text:000000000040640b\n.text:0000000000406410\n.text:0000000000406414\n.text:000000000040641a\n.text:0000000000406420\n.text:0000000000406425\n.text:000000000040642b\n.text:0000000000406430\n.text:0000000000406432\n.text:0000000000406437\n.text:000000000040643b\n.text:000000000040643d\n.text:0000000000406441\n.text:0000000000406443\n.text:0000000000406445\n.text:0000000000406448\n.text:000000000040644d\n.text:000000000040644f\n.text:0000000000406454\n.text:0000000000406459\n.text:000000000040645d\n.text:0000000000406462\n.text:0000000000406467\n.text:000000000040646a\n.text:000000000040646d\n.text:000000000040646f\n.text:0000000000406471\n.text:0000000000406476\n.text:000000000040647a\n.text:0000000000406480\n.text:0000000000406482\n.text:0000000000406484\n.text:0000000000406486\n.text:000000000040648e\n.text:0000000000406493\n.text:0000000000406499\n.text:000000000040649b\n.text:00000000004064a0\n.text:00000000004064a6\n.text:00000000004064af\n.text:00000000004064b5\n.text:00000000004064c0\n.text:00000000004064c2\n.text:00000000004064c5\n.text:00000000004064c9\n.text:00000000004064d1\n.text:00000000004064d4\n.text:00000000004064d9\n.text:00000000004064db\n.text:00000000004064de\n.text:00000000004064e0\n.text:00000000004064e5\n.text:00000000004064e8\n.text:00000000004064ed\n.text:00000000004064f0\n.text:00000000004064f5\n.text:00000000004064f9\n.text:00000000004064fe\n.text:0000000000406500\n.text:0000000000406502\n.text:0000000000406508\n.text:000000000040650d\n.text:0000000000406512\n.text:0000000000406515\n.text:000000000040651a\n.text:000000000040651e\n.text:0000000000406523\n.text:0000000000406528\n.text:000000000040652a\n.text:000000000040652c\n.text:0000000000406531\n.text:0000000000406533\n.text:0000000000406536\n.text:000000000040653c\n.text:000000000040653f\n.text:0000000000406545\n.text:0000000000406548\n.text:000000000040654e\n.text:0000000000406553\n.text:0000000000406557\n.text:000000000040655d\n.text:0000000000406560\n.text:0000000000406563\n.text:0000000000406567\n.text:000000000040656a\n.text:000000000040656c\n.text:000000000040656f\n.text:0000000000406575\n.text:000000000040657a\n.text:000000000040657f\n.text:0000000000406585\n.text:0000000000406588\n.text:000000000040658e\n.text:0000000000406591\n.text:0000000000406593\n.text:0000000000406595\n.text:0000000000406597\n.text:0000000000406599\n.text:000000000040659c\n.text:000000000040659e\n.text:00000000004065a3\n.text:00000000004065a8\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065b2\n.text:00000000004065b7\n.text:00000000004065ba\n.text:00000000004065bc\n.text:00000000004065c1\n.text:00000000004065c5\n.text:00000000004065c8\n.text:00000000004065cb\n.text:00000000004065cd\n.text:00000000004065d2\n.text:00000000004065d7\n.text:00000000004065d9\n.text:00000000004065dc\n.text:00000000004065df\n.text:00000000004065e5\n.text:00000000004065e9\n.text:00000000004065ec\n.text:00000000004065f2\n.text:00000000004065f6\n.text:00000000004065f9\n.text:00000000004065fc\n.text:0000000000406602\n.text:0000000000406605\n.text:0000000000406607\n.text:000000000040660c\n.text:0000000000406611\n.text:0000000000406614\n.text:0000000000406616\n.text:000000000040661b\n.text:000000000040661f\n.text:0000000000406624\n.text:000000000040662a\n.text:000000000040662f\n.text:0000000000406631\n.text:0000000000406636\n.text:000000000040663c\n.text:000000000040663e\n.text:0000000000406640\n.text:0000000000406642\n.text:0000000000406644\n.text:0000000000406649\n.text:000000000040664f\n.text:0000000000406651\n.text:0000000000406653\n.text:0000000000406658\n.text:000000000040665e\n.text:0000000000406660\n.text:0000000000406662\n.text:0000000000406667\n.text:0000000000406669\n.text:000000000040666f\n.text:0000000000406674\n.text:000000000040667a\n.text:000000000040667d\n.text:0000000000406680\n.text:0000000000406686\n.text:000000000040668b\n.text:000000000040668e\n.text:0000000000406691\n.text:0000000000406697\n.text:000000000040669a\n.text:00000000004066a0\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066aa\n.text:00000000004066af\n.text:00000000004066b2\n.text:00000000004066b4\n.text:00000000004066b9\n.text:00000000004066be\n.text:00000000004066c1\n.text:00000000004066c3\n.text:00000000004066c8\n.text:00000000004066cc\n.text:00000000004066ce\n.text:00000000004066d3\n.text:00000000004066d6\n.text:00000000004066d9\n.text:00000000004066df\n.text:00000000004066e2\n.text:00000000004066e8\n.text:00000000004066eb\n.text:00000000004066f1\n.text:00000000004066f6\n.text:00000000004066f9\n.text:00000000004066ff\n.text:0000000000406702\n.text:0000000000406708\n.text:000000000040670b\n.text:000000000040670d\n.text:0000000000406711\n.text:0000000000406717\n.text:000000000040671c\n.text:0000000000406720\n.text:0000000000406729\n.text:000000000040672f\n.text:0000000000406734\n.text:0000000000406739\n.text:000000000040673e\n.text:0000000000406741\n.text:0000000000406746\n.text:0000000000406749\n.text:000000000040674c\n.text:0000000000406751\n.text:0000000000406756\n.text:000000000040675a\n.text:000000000040675f\n.text:0000000000406764\n.text:0000000000406768\n.text:000000000040676a\n.text:000000000040676f\n.text:0000000000406775\n.text:0000000000406778\n.text:000000000040677a\n.text:000000000040677d\n.text:0000000000406780\n.text:0000000000406786\n.text:000000000040678b\n.text:000000000040678e\n.text:0000000000406791\n.text:0000000000406794\n.text:0000000000406797\n.text:0000000000406799\n.text:000000000040679d\n.text:000000000040679f\n.text:00000000004067a4\n.text:00000000004067a9\n.text:00000000004067af\n.text:00000000004067c0\n.text:00000000004067c5\n.text:00000000004067c7\n.text:00000000004067ca\n.text:00000000004067cc\n.text:00000000004067cf\n.text:00000000004067d1\n.text:00000000004067d4\n.text:00000000004067d6\n.text:00000000004067db\n.text:00000000004067e0\n.text:00000000004067e3\n.text:00000000004067e5\n.text:00000000004067ea\n.text:00000000004067ee\n.text:00000000004067f6\n.text:00000000004067f9\n.text:00000000004067fc\n.text:00000000004067fe\n.text:0000000000406802\n.text:0000000000406810\n.text:0000000000406814\n.text:000000000040681a\n.text:000000000040681d\n.text:000000000040681f\n.text:0000000000406824\n.text:0000000000406827\n.text:0000000000406829\n.text:0000000000406830\n.text:0000000000406833\n.text:0000000000406838\n.text:000000000040683b\n.text:0000000000406840\n.text:0000000000406842\n.text:0000000000406845\n.text:000000000040684b\n.text:000000000040684e\n.text:0000000000406850\n.text:0000000000406854\n.text:0000000000406856\n.text:0000000000406858\n.text:000000000040685b\n.text:000000000040685d\n.text:0000000000406862\n.text:0000000000406867\n.text:000000000040686a\n.text:000000000040686c\n.text:0000000000406871\n.text:0000000000406876\n.text:0000000000406879\n.text:000000000040687b\n.text:0000000000406880\n.text:0000000000406884\n.text:0000000000406886\n.text:000000000040688a\n.text:000000000040688d\n.text:000000000040688f\n.text:0000000000406894\n.text:0000000000406899\n.text:000000000040689c\n.text:000000000040689e\n.text:00000000004068a1\n.text:00000000004068a4\n.text:00000000004068a7\n.text:00000000004068ab\n.text:00000000004068b0\n.text:00000000004068b3\n.text:00000000004068b5\n.text:00000000004068b8\n.text:00000000004068bb\n.text:00000000004068be\n.text:00000000004068c1\n.text:00000000004068c5\n.text:00000000004068c9\n.text:00000000004068cd\n.text:00000000004068d1\n.text:00000000004068d3\n.text:00000000004068d7\n.text:00000000004068da\n.text:00000000004068e0\n.text:00000000004068e4\n.text:00000000004068e8\n.text:00000000004068ee\n.text:00000000004068f3\n.text:00000000004068f6\n.text:00000000004068f9\n.text:00000000004068fe\n.text:0000000000406901\n.text:0000000000406903\n.text:0000000000406906\n.text:000000000040690d\n.text:0000000000406913\n.text:0000000000406915\n.text:0000000000406919\n.text:000000000040691f\n.text:0000000000406924\n.text:0000000000406929\n.text:000000000040692f\n.text:0000000000406932\n.text:0000000000406934\n.text:0000000000406939\n.text:000000000040693f\n.text:0000000000406944\n.text:0000000000406946\n.text:000000000040694b\n.text:0000000000406951\n.text:0000000000406953\n.text:0000000000406956\n.text:000000000040695a\n.text:0000000000406960\n.text:0000000000406965\n.text:0000000000406971\n.text:0000000000406975\n.text:0000000000406977\n.text:000000000040697a\n.text:000000000040697f\n.text:0000000000406984\n.text:0000000000406987\n.text:000000000040698b\n.text:0000000000406990\n.text:0000000000406992\n.text:0000000000406996\n.text:0000000000406998\n.text:00000000004069a0\n.text:00000000004069a5\n.text:00000000004069aa\n.text:00000000004069ae\n.text:00000000004069b2\n.text:00000000004069ba\n.text:00000000004069bd\n.text:00000000004069c2\n.text:00000000004069c5\n.text:00000000004069c8\n.text:00000000004069cd\n.text:00000000004069d0\n.text:00000000004069d3\n.text:00000000004069d9\n.text:00000000004069dd\n.text:00000000004069e7\n.text:00000000004069ed\n.text:00000000004069f1\n.text:00000000004069f6\n.text:00000000004069fc\n.text:0000000000406a00\n.text:0000000000406a03\n.text:0000000000406a07\n.text:0000000000406a09\n.text:0000000000406a0e\n.text:0000000000406a13\n.text:0000000000406a17\n.text:0000000000406a19\n.text:0000000000406a1e\n.text:0000000000406a23\n.text:0000000000406a27\n.text:0000000000406a2c\n.text:0000000000406a30\n.text:0000000000406a34\n.text:0000000000406a37\n.text:0000000000406a3a\n.text:0000000000406a3c\n.text:0000000000406a40\n.text:0000000000406a46\n.text:0000000000406a49\n.text:0000000000406a4c\n.text:0000000000406a4e\n.text:0000000000406a52\n.text:0000000000406a57\n.text:0000000000406a59\n.text:0000000000406a5b\n.text:0000000000406a63\n.text:0000000000406a68\n.text:0000000000406a6b\n.text:0000000000406a73\n.text:0000000000406a76\n.text:0000000000406a79\n.text:0000000000406a7e\n.text:0000000000406a81\n.text:0000000000406a83\n.text:0000000000406a88\n.text:0000000000406a8d\n.text:0000000000406a93\n.text:0000000000406a98\n.text:0000000000406a9b\n.text:0000000000406aa0\n.text:0000000000406aa6\n.text:0000000000406aab\n.text:0000000000406ab0\n.text:0000000000406ab6\n.text:0000000000406aba\n.text:0000000000406abd\n.text:0000000000406ac3\n.text:0000000000406ac9\n.text:0000000000406acf\n.text:0000000000406ad4\n.text:0000000000406ad6\n.text:0000000000406ad9\n.text:0000000000406adf\n.text:0000000000406ae3\n.text:0000000000406ae5\n.text:0000000000406aef\n.text:0000000000406af3\n.text:0000000000406af9\n.text:0000000000406afc\n.text:0000000000406afe\n.text:0000000000406b04\n.text:0000000000406b07\n.text:0000000000406b09\n.text:0000000000406b0e\n.text:0000000000406b13\n.text:0000000000406b16\n.text:0000000000406b1a\n.text:0000000000406b1c\n.text:0000000000406b21\n.text:0000000000406b26\n.text:0000000000406b29\n.text:0000000000406b2b\n.text:0000000000406b30\n.text:0000000000406b35\n.text:0000000000406b38\n.text:0000000000406b3a\n.text:0000000000406b3f\n.text:0000000000406b43\n.text:0000000000406b45\n.text:0000000000406b48\n.text:0000000000406b4b\n.text:0000000000406b50\n.text:0000000000406b56\n.text:0000000000406b58\n.text:0000000000406b5d\n.text:0000000000406b62\n.text:0000000000406b68\n.text:0000000000406b70\n.text:0000000000406b75\n.text:0000000000406b77\n.text:0000000000406b7c\n.text:0000000000406b7f\n.text:0000000000406b81\n.text:0000000000406b84\n.text:0000000000406b86\n.text:0000000000406b89\n.text:0000000000406b8c\n.text:0000000000406b8f\n.text:0000000000406b91\n.text:0000000000406b99\n.text:0000000000406b9c\n.text:0000000000406b9e\n.text:0000000000406ba0\n.text:0000000000406bb0\n.text:0000000000406bb3\n.text:0000000000406bb5\n.text:0000000000406bb8\n.text:0000000000406bbe\n.text:0000000000406bc1\n.text:0000000000406bc3\n.text:0000000000406bc5\n.text:0000000000406bc7\n.text:0000000000406bc9\n.text:0000000000406bcc\n.text:0000000000406bce\n.text:0000000000406bd3\n.text:0000000000406bd8\n.text:0000000000406bdb\n.text:0000000000406bdd\n.text:0000000000406be2\n.text:0000000000406be7\n.text:0000000000406bea\n.text:0000000000406bec\n.text:0000000000406bf1\n.text:0000000000406bf5\n.text:0000000000406bf8\n.text:0000000000406bfb\n.text:0000000000406bfd\n.text:0000000000406c02\n.text:0000000000406c05\n.text:0000000000406c08\n.text:0000000000406c0a\n.text:0000000000406c10\n.text:0000000000406c14\n.text:0000000000406c16\n.text:0000000000406c18\n.text:0000000000406c1a\n.text:0000000000406c1d\n.text:0000000000406c1f\n.text:0000000000406c24\n.text:0000000000406c29\n.text:0000000000406c2c\n.text:0000000000406c2e\n.text:0000000000406c33\n.text:0000000000406c37\n.text:0000000000406c39\n.text:0000000000406c3c\n.text:0000000000406c3e\n.text:0000000000406c42\n.text:0000000000406c45\n.text:0000000000406c48\n.text:0000000000406c4c\n.text:0000000000406c52\n.text:0000000000406c57\n.text:0000000000406c5f\n.text:0000000000406c64\n.text:0000000000406c66\n.text:0000000000406c6e\n.text:0000000000406c73\n.text:0000000000406c75\n.text:0000000000406c7a\n.text:0000000000406c7f\n.text:0000000000406c83\n.text:0000000000406c85\n.text:0000000000406c8a\n.text:0000000000406c8d\n.text:0000000000406c90\n.text:0000000000406c92\n.text:0000000000406c9a\n.text:0000000000406c9c\n.text:0000000000406ca4\n.text:0000000000406ca9\n.text:0000000000406cad\n.text:0000000000406cb2\n.text:0000000000406cb7\n.text:0000000000406cbb\n.text:0000000000406cc0\n.text:0000000000406cc5\n.text:0000000000406cc9\n.text:0000000000406ccd\n.text:0000000000406cd3\n.text:0000000000406cd8\n.text:0000000000406ce0\n.text:0000000000406ce2\n.text:0000000000406ce4\n.text:0000000000406ce8\n.text:0000000000406ced\n.text:0000000000406cf3\n.text:0000000000406d00\n.text:0000000000406d03\n.text:0000000000406d09\n.text:0000000000406d0c\n.text:0000000000406d0e\n.text:0000000000406d11\n.text:0000000000406d13\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d20\n.text:0000000000406d26\n.text:0000000000406d2a\n.text:0000000000406d2d\n.text:0000000000406d31\n.text:0000000000406d36\n.text:0000000000406d3a\n.text:0000000000406d3e\n.text:0000000000406d41\n.text:0000000000406d44\n.text:0000000000406d47\n.text:0000000000406d4b\n.text:0000000000406d4f\n.text:0000000000406d51\n.text:0000000000406d56\n.text:0000000000406d5a\n.text:0000000000406d5d\n.text:0000000000406d60\n.text:0000000000406d67\n.text:0000000000406d68\n.text:0000000000406d6a\n.text:0000000000406d6c\n.text:0000000000406d6e\n.text:0000000000406d70\n.text:0000000000406d71\n.text:0000000000406d72\n.text:0000000000406d7a\n.text:0000000000406d7d\n.text:0000000000406d7f\n.text:0000000000406d82\n.text:0000000000406d84\n.text:0000000000406d86\n.text:0000000000406d88\n.text:0000000000406d8a\n.text:0000000000406d8d\n.text:0000000000406d90\n.text:0000000000406d93\n.text:0000000000406d95\n.text:0000000000406d99\n.text:0000000000406d9c\n.text:0000000000406d9f\n.text:0000000000406da2\n.text:0000000000406da4\n.text:0000000000406da6\n.text:0000000000406da9\n.text:0000000000406dab\n.text:0000000000406db0\n.text:0000000000406db2\n.text:0000000000406db7\n.text:0000000000406dbc\n.text:0000000000406dbf\n.text:0000000000406dc1\n.text:0000000000406dc6\n.text:0000000000406dc9\n.text:0000000000406dce\n.text:0000000000406dd1\n.text:0000000000406dd7\n.text:0000000000406ddd\n.text:0000000000406de0\n.text:0000000000406de5\n'
p1028
tp1029
sS'siginfo_handler'
p1030
(S'\n__stdcall siginfo_handler()\n'
p1031
V\u000avoid siginfo_handler(void)\u000a\u000a{\u000a  info_signal_count = info_signal_count + 1;\u000a  return;\u000a}\u000a\u000a
p1032
S'INC dword ptr [0x0060e588]\nRET\n'
p1033
S'ff 05 f2 a7 20 00\nc3\n'
p1034
S'.text:0000000000403d90\n.text:0000000000403d96\n'
p1035
tp1036
sS'set_quoting_style'
p1037
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1038
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1039
S'TEST RDI,RDI\nMOV EAX,0x60e670\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1040
S'48 85 ff\nb8 70 e6 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1041
S'.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406098\n.text:000000000040609c\n.text:000000000040609e\n'
p1042
tp1043
sS'textdomain'
p1044
(S'\n__stdcall textdomain()\n'
p1045
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060e0b0)();\u000a  return;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060e0b0]\n'
p1047
S'ff 25 da c6 20 00\n'
p1048
S'.plt:00000000004019d0\n'
p1049
tp1050
sS'xmemdup'
p1051
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1052
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1053
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00407e60\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401b90\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1054
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 cc 9b ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1055
S'.text:0000000000407fa0\n.text:0000000000407fa2\n.text:0000000000407fa4\n.text:0000000000407fa5\n.text:0000000000407fa8\n.text:0000000000407fab\n.text:0000000000407fae\n.text:0000000000407fb3\n.text:0000000000407fb6\n.text:0000000000407fb9\n.text:0000000000407fbc\n.text:0000000000407fbf\n.text:0000000000407fc4\n.text:0000000000407fc7\n.text:0000000000407fc8\n.text:0000000000407fca\n.text:0000000000407fcc\n'
p1056
tp1057
sS'getpagesize'
p1058
(S'\n__stdcall getpagesize()\n'
p1059
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getpagesize(void)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getpagesize_0060e240)();\u000a  return iVar1;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x0060e240]\n'
p1061
S'ff 25 4a c5 20 00\n'
p1062
S'.plt:0000000000401cf0\n'
p1063
tp1064
sS'get_quoting_style'
p1065
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1066
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1067
S'TEST RDI,RDI\nMOV EAX,0x60e670\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1068
S'48 85 ff\nb8 70 e6 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1069
S'.text:0000000000406080\n.text:0000000000406083\n.text:0000000000406088\n.text:000000000040608c\n.text:000000000040608e\n'
p1070
tp1071
sS'exit'
p1072
(S'\n__stdcall exit(int __status)\n'
p1073
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060e250)();\u000a  return;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x0060e250]\n'
p1075
S'ff 25 3a c5 20 00\n'
p1076
S'.plt:0000000000401d10\n'
p1077
tp1078
sS'ferror_unlocked'
p1079
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060e168)();\u000a  return iVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x0060e168]\n'
p1082
S'ff 25 22 c6 20 00\n'
p1083
S'.plt:0000000000401b40\n'
p1084
tp1085
sS'cache_round'
p1086
(S'\n__stdcall cache_round(off_t len)\n'
p1087
V\u000aoff_t cache_round(off_t len)\u000a\u000a{\u000a  off_t i_pending;\u000a  off_t o_pending;\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  long in_RSI;\u000a  off_t *poVar4;\u000a  \u000a  poVar4 = (off_t *)&ram0x0060e648;\u000a  if ((int)len == 0) {\u000a    poVar4 = (off_t *)&ram0x0060e640;\u000a  }\u000a  uVar2 = *poVar4;\u000a  if (in_RSI != 0) {\u000a    uVar1 = *poVar4 + in_RSI;\u000a    uVar3 = uVar1 % page_size;\u000a    *poVar4 = uVar3;\u000a    uVar2 = uVar1 - uVar3;\u000a    if (uVar1 < uVar3 || uVar1 - uVar3 == 0) {\u000a      uVar2 = 0;\u000a    }\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p1088
S'TEST EDI,EDI\nMOV EAX,0x60e640\nMOV EDI,0x60e648\nCMOVZ RDI,RAX\nTEST RSI,RSI\nMOV RCX,qword ptr [RDI]\nJZ 0x004052c3\nADD RCX,RSI\nXOR EDX,EDX\nMOV RAX,RCX\nDIV qword ptr [0x0060e390]\nMOV qword ptr [RDI],RDX\nXOR EAX,EAX\nSUB RCX,RDX\nCMOVBE RCX,RAX\nMOV RAX,RCX\nRET\n'
p1089
S'85 ff\nb8 40 e6 60 00\nbf 48 e6 60 00\n48 0f 44 f8\n48 85 f6\n48 8b 0f\n74 1b\n48 01 f1\n31 d2\n48 89 c8\n48 f7 35 d9 90 20 00\n48 89 17\n31 c0\n48 29 d1\n48 0f 46 c8\n48 89 c8\nc3\n'
p1090
S'.text:0000000000405290\n.text:0000000000405292\n.text:0000000000405297\n.text:000000000040529c\n.text:00000000004052a0\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052a8\n.text:00000000004052ab\n.text:00000000004052ad\n.text:00000000004052b0\n.text:00000000004052b7\n.text:00000000004052ba\n.text:00000000004052bc\n.text:00000000004052bf\n.text:00000000004052c3\n.text:00000000004052c6\n'
p1091
tp1092
sS'locale_charset'
p1093
(S'\n__stdcall locale_charset()\n'
p1094
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00408d0d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00408d0d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401be0\nTEST RAX,RAX\nMOV R14D,0x40b3c9\nCMOVNZ R14,RAX\nCALL 0x00408d20\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00408ce5\nJMP 0x00408d0d\nMOV RDI,RBX\nCALL 0x00401a20\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401a20\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00408d0d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401b60\nTEST EAX,EAX\nJZ 0x00408d00\nCMP BPL,0x2a\nJNZ 0x00408cc0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408cc0\nMOV RDI,RBX\nCALL 0x00401a20\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40bcb8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1096
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 8f ff ff\n48 85 c0\n41 be c9 b3 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 58 8d ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 4a 8d ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 70 8e ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 18 8d ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 b8 bc 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1097
S'.text:0000000000408c90\n.text:0000000000408c91\n.text:0000000000408c93\n.text:0000000000408c94\n.text:0000000000408c99\n.text:0000000000408c9e\n.text:0000000000408ca1\n.text:0000000000408ca7\n.text:0000000000408cab\n.text:0000000000408cb0\n.text:0000000000408cb3\n.text:0000000000408cb6\n.text:0000000000408cb9\n.text:0000000000408cbb\n.text:0000000000408cc0\n.text:0000000000408cc3\n.text:0000000000408cc8\n.text:0000000000408ccc\n.text:0000000000408cd1\n.text:0000000000408cd6\n.text:0000000000408cdb\n.text:0000000000408ce0\n.text:0000000000408ce3\n.text:0000000000408ce5\n.text:0000000000408ce8\n.text:0000000000408ceb\n.text:0000000000408cf0\n.text:0000000000408cf2\n.text:0000000000408cf4\n.text:0000000000408cf8\n.text:0000000000408cfa\n.text:0000000000408cfe\n.text:0000000000408d00\n.text:0000000000408d03\n.text:0000000000408d08\n.text:0000000000408d0d\n.text:0000000000408d11\n.text:0000000000408d16\n.text:0000000000408d1a\n.text:0000000000408d1b\n.text:0000000000408d1d\n.text:0000000000408d1e\n'
p1098
tp1099
sS'set_program_name'
p1100
(S'\n__stdcall set_program_name(char * argv0)\n'
p1101
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1102
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00406011\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401a70\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00405ffb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40ad18\nMOV EDX,0x7\nCALL 0x00401930\nTEST EAX,EAX\nJNZ 0x00405ffb\nMOV ESI,0x40ad20\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401930\nTEST EAX,EAX\nJNZ 0x00405ff8\nADD R14,0x3\nMOV qword ptr [0x0060e340],R14\nMOV RBX,R14\nMOV qword ptr [0x0060e660],RBX\nMOV qword ptr [0x0060e358],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060e380]\nMOV EDI,0x40ace0\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401d20\nCALL 0x004018f0\n'
p1103
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 c7 ba ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 18 ad 40 00\nba 07 00 00 00\ne8 5d b9 ff ff\n85 c0\n75 24\nbe 20 ad 40 00\nba 03 00 00 00\n4c 89 f7\ne8 47 b9 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 48 83 20 00\n4c 89 f3\n48 89 1d 5e 86 20 00\n48 89 1d 4f 83 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 68 83 20 00\nbf e0 ac 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 f4 bc ff ff\ne8 bf b8 ff ff\n'
p1104
S'.text:0000000000405f90\n.text:0000000000405f92\n.text:0000000000405f93\n.text:0000000000405f94\n.text:0000000000405f97\n.text:0000000000405f9a\n.text:0000000000405f9c\n.text:0000000000405fa1\n.text:0000000000405fa4\n.text:0000000000405fa9\n.text:0000000000405fac\n.text:0000000000405fb0\n.text:0000000000405fb4\n.text:0000000000405fb7\n.text:0000000000405fba\n.text:0000000000405fbe\n.text:0000000000405fc0\n.text:0000000000405fc4\n.text:0000000000405fc9\n.text:0000000000405fce\n.text:0000000000405fd3\n.text:0000000000405fd5\n.text:0000000000405fd7\n.text:0000000000405fdc\n.text:0000000000405fe1\n.text:0000000000405fe4\n.text:0000000000405fe9\n.text:0000000000405feb\n.text:0000000000405fed\n.text:0000000000405ff1\n.text:0000000000405ff8\n.text:0000000000405ffb\n.text:0000000000406002\n.text:0000000000406009\n.text:000000000040600d\n.text:000000000040600e\n.text:0000000000406010\n.text:0000000000406011\n.text:0000000000406018\n.text:000000000040601d\n.text:0000000000406022\n.text:0000000000406027\n.text:000000000040602c\n'
p1105
tp1106
sS'quotearg_buffer'
p1107
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1108
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60e670\nCMOVNZ RBP,R8\nCALL 0x00401900\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004061b0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 70 e6 60 00\n49 0f 45 e8\ne8 a8 b7 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:0000000000406130\n.text:0000000000406131\n.text:0000000000406133\n.text:0000000000406135\n.text:0000000000406137\n.text:0000000000406139\n.text:000000000040613a\n.text:000000000040613b\n.text:000000000040613e\n.text:0000000000406141\n.text:0000000000406144\n.text:0000000000406147\n.text:000000000040614a\n.text:000000000040614f\n.text:0000000000406153\n.text:0000000000406158\n.text:000000000040615b\n.text:000000000040615d\n.text:0000000000406161\n.text:0000000000406165\n.text:0000000000406169\n.text:000000000040616d\n.text:0000000000406170\n.text:0000000000406173\n.text:0000000000406176\n.text:0000000000406179\n.text:000000000040617c\n.text:000000000040617f\n.text:0000000000406183\n.text:0000000000406184\n.text:0000000000406189\n.text:000000000040618d\n.text:0000000000406191\n.text:0000000000406193\n.text:0000000000406197\n.text:0000000000406198\n.text:000000000040619a\n.text:000000000040619c\n.text:000000000040619e\n.text:00000000004061a0\n.text:00000000004061a1\n'
p1112
tp1113
sS'quotearg_colon'
p1114
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1115
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1116
S'MOV ESI,0x3a\nJMP 0x00407310\n'
p1117
S'be 3a 00 00 00\neb e9\n'
p1118
S'.text:0000000000407320\n.text:0000000000407325\n'
p1119
tp1120
sS'rpl_fflush'
p1121
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1122
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060e1b0)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1123
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040874d\nMOV RDI,RBX\nCALL 0x00401c20\nTEST EAX,EAX\nJZ 0x0040874d\nMOV RDI,RBX\nCALL 0x00408760\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401bd0\n'
p1124
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 df 94 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 7a 94 ff ff\n'
p1125
S'.text:0000000000408730\n.text:0000000000408731\n.text:0000000000408734\n.text:0000000000408737\n.text:0000000000408739\n.text:000000000040873c\n.text:0000000000408741\n.text:0000000000408743\n.text:0000000000408745\n.text:0000000000408748\n.text:000000000040874d\n.text:0000000000408750\n.text:0000000000408751\n'
p1126
tp1127
sS'__assert_fail'
p1128
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060e120)();\u000a  return;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x0060e120]\n'
p1131
S'ff 25 6a c6 20 00\n'
p1132
S'.plt:0000000000401ab0\n'
p1133
tp1134
sS'bindtextdomain'
p1135
(S'\n__stdcall bindtextdomain()\n'
p1136
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060e0c0)();\u000a  return;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060e0c0]\n'
p1138
S'ff 25 ca c6 20 00\n'
p1139
S'.plt:00000000004019f0\n'
p1140
tp1141
sS'xtime_nsec'
p1142
(S'\n__stdcall xtime_nsec(xtime_t t)\n'
p1143
V\u000along xtime_nsec(xtime_t t)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  \u000a  lVar2 = t / 1000000000 + (t >> 0x3f);\u000a  lVar1 = t + lVar2 * -1000000000;\u000a  if (lVar1 < 0) {\u000a    lVar1 = t + lVar2 * -1000000000 + 1000000000;\u000a  }\u000a  return lVar1;\u000a}\u000a\u000a
p1144
S'MOV RCX,RDI\nMOV RDX,0x112e0be826d694b3\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nMOV RDX,RCX\nSUB RDX,RAX\nADD RDX,0x3b9aca00\nSUB RCX,RAX\nCMOVS RCX,RDX\nMOV RAX,RCX\nRET\n'
p1145
S'48 89 f9\n48 ba b3 94 d6 26 e8 0b 2e 11\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 89 ca\n48 29 c2\n48 81 c2 00 ca 9a 3b\n48 29 c1\n48 0f 48 ca\n48 89 c8\nc3\n'
p1146
S'.text:0000000000405550\n.text:0000000000405553\n.text:000000000040555d\n.text:0000000000405560\n.text:0000000000405563\n.text:0000000000405566\n.text:000000000040556a\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405578\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405585\n.text:0000000000405588\n.text:000000000040558c\n.text:000000000040558f\n'
p1147
tp1148
sS'set_char_quoting'
p1149
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1150
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1151
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60e670\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1152
S'89 f1\n48 85 ff\nbe 70 e6 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1153
S'.text:00000000004060a0\n.text:00000000004060a2\n.text:00000000004060a5\n.text:00000000004060aa\n.text:00000000004060ae\n.text:00000000004060b0\n.text:00000000004060b3\n.text:00000000004060b7\n.text:00000000004060bc\n.text:00000000004060bf\n.text:00000000004060c1\n.text:00000000004060c3\n.text:00000000004060c6\n.text:00000000004060c8\n.text:00000000004060cb\n.text:00000000004060cd\n.text:00000000004060d0\n.text:00000000004060d5\n'
p1154
tp1155
sS'quotearg_n'
p1156
(S'\n__stdcall quotearg_n(char * arg)\n'
p1157
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1158
S'MOV RDX,-0x1\nMOV ECX,0x60e670\nJMP 0x00406f90\n'
p1159
S'48 c7 c2 ff ff ff ff\nb9 70 e6 60 00\neb 02\n'
p1160
S'.text:0000000000406f80\n.text:0000000000406f87\n.text:0000000000406f8c\n'
p1161
tp1162
sS'close_stream'
p1163
(S'\n__stdcall close_stream(FILE * stream)\n'
p1164
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401960\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401b40\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004084f0\nTEST EBP,EBP\nJZ 0x0040530b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040532f\nCALL 0x00401900\nMOV dword ptr [RAX],0x0\nJMP 0x0040532f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040532f\nTEST CL,CL\nJNZ 0x0040532f\nCALL 0x00401900\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1166
S'55\n41 56\n53\n48 89 fb\ne8 84 c6 ff ff\n49 89 c6\n48 89 df\ne8 59 c8 ff ff\n89 c5\n48 89 df\ne8 ff 31 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 fd c5 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 de c5 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1167
S'.text:00000000004052d0\n.text:00000000004052d1\n.text:00000000004052d3\n.text:00000000004052d4\n.text:00000000004052d7\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e2\n.text:00000000004052e7\n.text:00000000004052e9\n.text:00000000004052ec\n.text:00000000004052f1\n.text:00000000004052f3\n.text:00000000004052f5\n.text:00000000004052fa\n.text:00000000004052fc\n.text:00000000004052fe\n.text:0000000000405303\n.text:0000000000405309\n.text:000000000040530b\n.text:000000000040530d\n.text:0000000000405310\n.text:0000000000405312\n.text:0000000000405314\n.text:0000000000405317\n.text:0000000000405319\n.text:000000000040531b\n.text:000000000040531d\n.text:0000000000405322\n.text:0000000000405324\n.text:0000000000405327\n.text:000000000040532c\n.text:000000000040532f\n.text:0000000000405331\n.text:0000000000405332\n.text:0000000000405334\n.text:0000000000405335\n'
p1168
tp1169
sS'quotearg_colon_mem'
p1170
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1171
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1172
S'MOV EDX,0x3a\nJMP 0x004072a0\n'
p1173
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1174
S'.text:0000000000407330\n.text:0000000000407335\n'
p1175
tp1176
sS'skip'
p1177
(S'\n__stdcall skip(char * file, uintmax_t records, size_t blocksize, size_t * bytes)\n'
p1178
V\u000auintmax_t skip(char *file,uintmax_t records,size_t blocksize,size_t *bytes)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  off_t oVar5;\u000a  undefined8 uVar6;\u000a  char *pcVar7;\u000a  ulong offset;\u000a  char **ppcVar8;\u000a  uintmax_t offset_00;\u000a  size_t *offset_01;\u000a  uint uVar9;\u000a  size_t **in_R8;\u000a  stat local_c0;\u000a  \u000a  offset = (ulong)file & 0xffffffff;\u000a  offset_01 = *in_R8;\u000a  puVar4 = (uint *)__errno_location();\u000a  *puVar4 = 0;\u000a  iVar3 = (int)offset;\u000a  if (blocksize <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x7fffffffffffffff)) / ZEXT816(bytes),0)) {\u000a    offset_01 = (size_t *)((long)offset_01 + (long)bytes * blocksize);\u000a    oVar5 = skip_via_lseek((char *)records,offset);\u000a    if (-1 < oVar5) {\u000a      if (iVar3 == 0) {\u000a        iVar3 = fstat(0,(stat *)&local_c0);\u000a        if (iVar3 != 0) {\u000a          uVar1 = *puVar4;\u000a          uVar6 = dcgettext(0,"cannot fstat %s",5);\u000a          pcVar7 = quotearg_style((char *)0x4);\u000a          nl_error((char *)0x1,(ulong)uVar1,uVar6,pcVar7);\u000a        }\u000a        _Var2 = usable_st_size(&local_c0);\u000a        if ((_Var2 == false) || (input_offset + (long)offset_01 <= local_c0.st_size)) {\u000a          offset = 0;\u000a        }\u000a        else {\u000a          offset = (ulong)((long)offset_01 - local_c0.st_size) / (ulong)bytes;\u000a          offset_01 = (size_t *)(local_c0.st_size - input_offset);\u000a        }\u000a        advance_input_offset((uintmax_t)offset_01);\u000a        return offset;\u000a      }\u000a      goto LAB_00404725;\u000a    }\u000a  }\u000a  uVar1 = *puVar4;\u000a  oVar5 = skip_via_lseek((char *)records,offset);\u000a  if (-1 < oVar5) {\u000a    uVar9 = 0x4b;\u000a    if (uVar1 != 0) {\u000a      uVar9 = uVar1;\u000a    }\u000a    if (iVar3 == 0) {\u000a      pcVar7 = "%s: cannot skip";\u000a    }\u000a    else {\u000a      pcVar7 = "%s: cannot seek";\u000a    }\u000a    uVar6 = dcgettext(0,pcVar7,5);\u000a    pcVar7 = quotearg_n_style_colon((char *)0x0);\u000a    nl_error((char *)0x0,(ulong)uVar9,uVar6,pcVar7);\u000a                    /* WARNING: Subroutine does not return */\u000a    quit();\u000a  }\u000a  if (iVar3 == 0) {\u000a    alloc_ibuf();\u000a    ppcVar8 = &ibuf;\u000a  }\u000a  else {\u000a    alloc_obuf();\u000a    ppcVar8 = &obuf;\u000a  }\u000a  pcVar7 = *ppcVar8;\u000a  while( true ) {\u000a    offset_01 = bytes;\u000a    if (blocksize == 0) {\u000a      offset_01 = *in_R8;\u000a    }\u000a    offset_00 = (*iread_fnc)(iVar3,pcVar7,(size_t)offset_01);\u000a    if ((long)offset_00 < 0) {\u000a      if (iVar3 == 0) {\u000a        uVar1 = *puVar4;\u000a        uVar6 = dcgettext(0,"error reading %s",5);\u000a        pcVar7 = quotearg_style((char *)0x4);\u000a        nl_error((char *)0x0,(ulong)uVar1,uVar6,pcVar7);\u000a        if ((conversions_mask._1_1_ & 1) != 0) {\u000a          print_stats();\u000a                    /* WARNING: Subroutine does not return */\u000a          quit();\u000a        }\u000a      }\u000a      else {\u000a        uVar6 = dcgettext(0,"%s: cannot seek",5);\u000a        pcVar7 = quotearg_n_style_colon((char *)0x0);\u000a        nl_error((char *)0x0,(ulong)uVar1,uVar6,pcVar7);\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      quit();\u000a    }\u000a    if (offset_00 == 0) {\u000a      return blocksize;\u000a    }\u000a    if (iVar3 == 0) {\u000a      advance_input_offset(offset_00);\u000a    }\u000a    if (blocksize == 0) break;\u000a    blocksize = blocksize - 1;\u000a    if ((blocksize == 0) && (blocksize = 0, *in_R8 == (size_t *)0x0)) {\u000a      return 0;\u000a    }\u000a  }\u000aLAB_00404725:\u000a  *in_R8 = (size_t *)0x0;\u000a  return 0;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R13,R8\nMOV R12,RCX\nMOV RBX,RDX\nMOV R15,RSI\nMOV EBP,EDI\nMOV R14,qword ptr [R13]\nCALL 0x00401900\nMOV qword ptr [RSP],RAX\nMOV dword ptr [RAX],0x0\nMOV RAX,0x7fffffffffffffff\nXOR EDX,EDX\nDIV R12\nCMP RAX,RBX\nJC 0x00404686\nMOV RAX,R12\nIMUL RAX,RBX\nADD R14,RAX\nMOV ECX,0x1\nMOV RDI,R15\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00405130\nTEST RAX,RAX\nJS 0x00404686\nTEST EBP,EBP\nJNZ 0x00404725\nLEA RSI,[RSP + 0x18]\nXOR EDI,EDI\nCALL 0x004090f0\nTEST EAX,EAX\nJZ 0x00404642\nMOV RAX,qword ptr [RSP]\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409e5c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nLEA RDI,[RSP + 0x18]\nCALL 0x00405200\nTEST AL,AL\nJZ 0x00404737\nMOV RCX,qword ptr [RSP + 0x48]\nMOV RSI,qword ptr [0x0060e4b0]\nLEA RAX,[RSI + R14*0x1]\nCMP RCX,RAX\nJNC 0x00404737\nSUB R14,RCX\nXOR EDX,EDX\nMOV RAX,R14\nDIV R12\nMOV R15,RAX\nSUB RCX,RSI\nMOV R14,RCX\nJMP 0x0040473a\nMOV RAX,qword ptr [RSP]\nMOV R14D,dword ptr [RAX]\nXOR EDX,EDX\nMOV ECX,0x2\nMOV RDI,R15\nMOV ESI,EBP\nCALL 0x00405130\nTEST RAX,RAX\nJNS 0x004047e5\nTEST EBP,EBP\nMOV qword ptr [RSP + 0x10],R15\nMOV dword ptr [RSP + 0xc],R14D\nJZ 0x004046c1\nCALL 0x00404ac0\nMOV EAX,0x60e608\nJMP 0x004046cb\nCALL 0x00404a10\nMOV EAX,0x60e610\nMOV R14,qword ptr [RAX]\nXOR R15D,R15D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060e5b8]\nTEST RBX,RBX\nMOV RDX,R12\nJNZ 0x004046f3\nMOV RDX,qword ptr [R13]\nMOV EDI,EBP\nMOV RSI,R14\nCALL RAX\nTEST RAX,RAX\nJS 0x00404757\nJZ 0x00404732\nTEST EBP,EBP\nJNZ 0x0040470d\nMOV RDI,RAX\nCALL 0x00404d00\nTEST RBX,RBX\nJZ 0x00404725\nDEC RBX\nJNZ 0x004046e0\nCMP qword ptr [R13],0x0\nMOV EBX,0x0\nJNZ 0x004046e0\nJMP 0x00404742\nMOV qword ptr [R13],0x0\nXOR R15D,R15D\nJMP 0x00404742\nMOV R15,RBX\nJMP 0x00404742\nXOR R15D,R15D\nMOV RDI,R14\nCALL 0x00404d00\nMOV RAX,R15\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST EBP,EBP\nJNZ 0x004047a8\nMOV RAX,qword ptr [RSP]\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a395\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00407260\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nTEST byte ptr [0x0060e4cd],0x1\nJZ 0x004047e0\nCALL 0x00404210\nCALL 0x00404a00\nXOR EDI,EDI\nMOV ESI,0x40a425\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x10]\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0xc]\nMOV RDX,RBX\nCALL 0x00403360\nCALL 0x00404a00\nMOV EAX,R14D\nTEST EAX,EAX\nMOV EBX,0x4b\nCMOVNZ EBX,EAX\nXOR EDI,EDI\nTEST EBP,EBP\nJNZ 0x004047ff\nMOV ESI,0x40a415\nJMP 0x00404804\nMOV ESI,0x40a425\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nCALL 0x00404a00\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n4d 89 c5\n49 89 cc\n48 89 d3\n49 89 f7\n89 fd\n4d 8b 75 00\ne8 58 d3 ff ff\n48 89 04 24\nc7 00 00 00 00 00\n48 b8 ff ff ff ff ff ff ff 7f\n31 d2\n49 f7 f4\n48 39 d8\n0f 82 bc 00 00 00\n4c 89 e0\n48 0f af c3\n49 01 c6\nb9 01 00 00 00\n4c 89 ff\n89 ee\n4c 89 f2\ne8 4a 0b 00 00\n48 85 c0\n0f 88 97 00 00 00\n85 ed\n0f 85 2e 01 00 00\n48 8d 74 24 18\n31 ff\ne8 ed 4a 00 00\n85 c0\n74 3b\n48 8b 04 24\n8b 18\n31 ff\nbe 5c 9e 40 00\nba 05 00 00 00\ne8 e2 d3 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 fe\ne8 32 2c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 1e ed ff ff\n48 8d 7c 24 18\ne8 b4 0b 00 00\n84 c0\n0f 84 e3 00 00 00\n48 8b 4c 24 48\n48 8b 35 50 9e 20 00\n4a 8d 04 36\n48 39 c1\n0f 83 ca 00 00 00\n49 29 ce\n31 d2\n4c 89 f0\n49 f7 f4\n49 89 c7\n48 29 f1\n49 89 ce\ne9 b4 00 00 00\n48 8b 04 24\n44 8b 30\n31 d2\nb9 02 00 00 00\n4c 89 ff\n89 ee\ne8 92 0a 00 00\n48 85 c0\n0f 89 3e 01 00 00\n85 ed\n4c 89 7c 24 10\n44 89 74 24 0c\n74 0c\ne8 06 04 00 00\nb8 08 e6 60 00\neb 0a\ne8 4a 03 00 00\nb8 10 e6 60 00\n4c 8b 30\n45 31 ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 d1 9e 20 00\n48 85 db\n4c 89 e2\n75 04\n49 8b 55 00\n89 ef\n4c 89 f6\nff d0\n48 85 c0\n78 58\n74 31\n85 ed\n75 08\n48 89 c7\ne8 f3 05 00 00\n48 85 db\n74 13\n48 ff cb\n75 c9\n49 83 7d 00 00\nbb 00 00 00 00\n75 bd\neb 1d\n49 c7 45 00 00 00 00 00\n45 31 ff\neb 10\n49 89 df\neb 0b\n45 31 ff\n4c 89 f7\ne8 be 05 00 00\n4c 89 f8\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n85 ed\n75 4d\n48 8b 04 24\n8b 18\n31 ff\nbe 95 a3 40 00\nba 05 00 00 00\ne8 8e d2 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 10\ne8 dc 2a 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 cb eb ff ff\nf6 05 31 9d 20 00 01\n74 42\ne8 6d fa ff ff\ne8 58 02 00 00\n31 ff\nbe 25 a4 40 00\nba 05 00 00 00\ne8 47 d2 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n48 8b 54 24 10\ne8 73 2b 00 00\n48 89 c1\n31 ff\n31 c0\n8b 74 24 0c\n48 89 da\ne8 80 eb ff ff\ne8 1b 02 00 00\n44 89 f0\n85 c0\nbb 4b 00 00 00\n0f 45 d8\n31 ff\n85 ed\n75 07\nbe 15 a4 40 00\neb 05\nbe 25 a4 40 00\nba 05 00 00 00\ne8 f2 d1 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 20 2b 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 2f eb ff ff\ne8 ca 01 00 00\n'
p1181
S'.text:0000000000404580\n.text:0000000000404581\n.text:0000000000404583\n.text:0000000000404585\n.text:0000000000404587\n.text:0000000000404589\n.text:000000000040458a\n.text:0000000000404591\n.text:0000000000404594\n.text:0000000000404597\n.text:000000000040459a\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a3\n.text:00000000004045a8\n.text:00000000004045ac\n.text:00000000004045b2\n.text:00000000004045bc\n.text:00000000004045be\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045ca\n.text:00000000004045cd\n.text:00000000004045d1\n.text:00000000004045d4\n.text:00000000004045d9\n.text:00000000004045dc\n.text:00000000004045de\n.text:00000000004045e1\n.text:00000000004045e6\n.text:00000000004045e9\n.text:00000000004045ef\n.text:00000000004045f1\n.text:00000000004045f7\n.text:00000000004045fc\n.text:00000000004045fe\n.text:0000000000404603\n.text:0000000000404605\n.text:0000000000404607\n.text:000000000040460b\n.text:000000000040460d\n.text:000000000040460f\n.text:0000000000404614\n.text:0000000000404619\n.text:000000000040461e\n.text:0000000000404621\n.text:0000000000404626\n.text:0000000000404629\n.text:000000000040462e\n.text:0000000000404631\n.text:0000000000404636\n.text:0000000000404638\n.text:000000000040463a\n.text:000000000040463d\n.text:0000000000404642\n.text:0000000000404647\n.text:000000000040464c\n.text:000000000040464e\n.text:0000000000404654\n.text:0000000000404659\n.text:0000000000404660\n.text:0000000000404664\n.text:0000000000404667\n.text:000000000040466d\n.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404675\n.text:0000000000404678\n.text:000000000040467b\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404686\n.text:000000000040468a\n.text:000000000040468d\n.text:000000000040468f\n.text:0000000000404694\n.text:0000000000404697\n.text:0000000000404699\n.text:000000000040469e\n.text:00000000004046a1\n.text:00000000004046a7\n.text:00000000004046a9\n.text:00000000004046ae\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046ba\n.text:00000000004046bf\n.text:00000000004046c1\n.text:00000000004046c6\n.text:00000000004046cb\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046e0\n.text:00000000004046e7\n.text:00000000004046ea\n.text:00000000004046ed\n.text:00000000004046ef\n.text:00000000004046f3\n.text:00000000004046f5\n.text:00000000004046f8\n.text:00000000004046fa\n.text:00000000004046fd\n.text:00000000004046ff\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404708\n.text:000000000040470d\n.text:0000000000404710\n.text:0000000000404712\n.text:0000000000404715\n.text:0000000000404717\n.text:000000000040471c\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404725\n.text:000000000040472d\n.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404735\n.text:0000000000404737\n.text:000000000040473a\n.text:000000000040473d\n.text:0000000000404742\n.text:0000000000404745\n.text:000000000040474c\n.text:000000000040474d\n.text:000000000040474f\n.text:0000000000404751\n.text:0000000000404753\n.text:0000000000404755\n.text:0000000000404756\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475b\n.text:000000000040475f\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404768\n.text:000000000040476d\n.text:0000000000404772\n.text:0000000000404775\n.text:000000000040477a\n.text:000000000040477f\n.text:0000000000404784\n.text:0000000000404787\n.text:0000000000404789\n.text:000000000040478b\n.text:000000000040478d\n.text:0000000000404790\n.text:0000000000404795\n.text:000000000040479c\n.text:000000000040479e\n.text:00000000004047a3\n.text:00000000004047a8\n.text:00000000004047aa\n.text:00000000004047af\n.text:00000000004047b4\n.text:00000000004047b9\n.text:00000000004047bc\n.text:00000000004047be\n.text:00000000004047c3\n.text:00000000004047c8\n.text:00000000004047cd\n.text:00000000004047d0\n.text:00000000004047d2\n.text:00000000004047d4\n.text:00000000004047d8\n.text:00000000004047db\n.text:00000000004047e0\n.text:00000000004047e5\n.text:00000000004047e8\n.text:00000000004047ea\n.text:00000000004047ef\n.text:00000000004047f2\n.text:00000000004047f4\n.text:00000000004047f6\n.text:00000000004047f8\n.text:00000000004047fd\n.text:00000000004047ff\n.text:0000000000404804\n.text:0000000000404809\n.text:000000000040480e\n.text:0000000000404811\n.text:0000000000404813\n.text:0000000000404818\n.text:000000000040481b\n.text:0000000000404820\n.text:0000000000404823\n.text:0000000000404825\n.text:0000000000404827\n.text:0000000000404829\n.text:000000000040482c\n.text:0000000000404831\n'
p1182
tp1183
sS'xcalloc'
p1184
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1185
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1186
S'PUSH RAX\nCALL 0x004084a0\nTEST RAX,RAX\nJZ 0x00407f8d\nPOP RCX\nRET\nCALL 0x00407ff0\n'
p1187
S'50\ne8 1a 05 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1188
S'.text:0000000000407f80\n.text:0000000000407f81\n.text:0000000000407f86\n.text:0000000000407f89\n.text:0000000000407f8b\n.text:0000000000407f8c\n.text:0000000000407f8d\n'
p1189
tp1190
sS'clear_ungetc_buffer_preserving_position'
p1191
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1192
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1193
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00408767\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00408780\n'
p1194
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1195
S'.text:0000000000408760\n.text:0000000000408764\n.text:0000000000408766\n.text:0000000000408767\n.text:0000000000408769\n.text:000000000040876e\n'
p1196
tp1197
sS'xnmalloc'
p1198
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1199
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1200
S'MOV RAX,RDI\nMUL RSI\nJO 0x00407e51\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00407e60\nPUSH RAX\nCALL 0x00407ff0\n'
p1201
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1202
S'.text:0000000000407e40\n.text:0000000000407e43\n.text:0000000000407e46\n.text:0000000000407e48\n.text:0000000000407e4c\n.text:0000000000407e4f\n.text:0000000000407e51\n.text:0000000000407e52\n'
p1203
tp1204
sS'is_nul'
p1205
(S'\n__stdcall is_nul(void * buf, size_t length)\n'
p1206
V\u000a_Bool is_nul(void *buf,size_t length)\u000a\u000a{\u000a  ulong uVar1;\u000a  int iVar2;\u000a  ulong __n;\u000a  char *__s2;\u000a  bool bVar3;\u000a  \u000a  bVar3 = true;\u000a  if (length != 0) {\u000a    uVar1 = length - 1;\u000a    __s2 = (char *)buf;\u000a    do {\u000a      __n = uVar1;\u000a      if (*__s2 != 0) {\u000a        return false;\u000a      }\u000a      if (__n == 0) {\u000a        return true;\u000a      }\u000a      __s2 = __s2 + 1;\u000a      uVar1 = __n - 1;\u000a    } while ((__n & 0xf) != 0);\u000a    iVar2 = memcmp(buf,__s2,__n);\u000a    bVar3 = iVar2 == 0;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p1207
S'MOV RCX,RSI\nMOV AL,0x1\nTEST RCX,RCX\nJZ 0x0040525c\nDEC RCX\nMOV RSI,RDI\nCMP byte ptr [RSI],0x0\nJNZ 0x0040525d\nTEST RCX,RCX\nJZ 0x0040525c\nINC RSI\nMOV EDX,ECX\nDEC RCX\nTEST DL,0xf\nJNZ 0x00405230\nPUSH RAX\nINC RCX\nMOV RDX,RCX\nCALL 0x00401b20\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nRET\nXOR EAX,EAX\nRET\n'
p1208
S'48 89 f1\nb0 01\n48 85 c9\n74 32\n48 ff c9\n48 89 fe\n80 3e 00\n75 28\n48 85 c9\n74 22\n48 ff c6\n89 ca\n48 ff c9\nf6 c2 0f\n75 e9\n50\n48 ff c1\n48 89 ca\ne8 cd c8 ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\nc3\n31 c0\nc3\n'
p1209
S'.text:0000000000405220\n.text:0000000000405223\n.text:0000000000405225\n.text:0000000000405228\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405230\n.text:0000000000405233\n.text:0000000000405235\n.text:0000000000405238\n.text:000000000040523a\n.text:000000000040523d\n.text:000000000040523f\n.text:0000000000405242\n.text:0000000000405245\n.text:0000000000405247\n.text:0000000000405248\n.text:000000000040524b\n.text:000000000040524e\n.text:0000000000405253\n.text:0000000000405255\n.text:0000000000405258\n.text:000000000040525c\n.text:000000000040525d\n.text:000000000040525f\n'
p1210
tp1211
sS'quotearg_char'
p1212
(S'\n__stdcall quotearg_char(char * arg)\n'
p1213
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004072a0\n'
p1215
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1216
S'.text:0000000000407310\n.text:0000000000407312\n.text:0000000000407319\n.text:000000000040731b\n'
p1217
tp1218
sS'malloc'
p1219
(S'\n__stdcall malloc(size_t __size)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060e1a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060e1a8]\n'
p1222
S'ff 25 e2 c5 20 00\n'
p1223
S'.plt:0000000000401bc0\n'
p1224
tp1225
sS'argmatch_invalid'
p1226
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1227
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1228
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40b845\nMOV ESI,0x40b860\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00407180\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00407470\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c80\n'
p1229
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 45 b8 40 00\nbe 60 b8 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 d4 90 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 42 e8 ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 22 eb ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 10 93 ff ff\n'
p1230
S'.text:0000000000408900\n.text:0000000000408902\n.text:0000000000408904\n.text:0000000000408906\n.text:0000000000408907\n.text:0000000000408908\n.text:000000000040890b\n.text:000000000040890e\n.text:0000000000408912\n.text:0000000000408917\n.text:000000000040891c\n.text:0000000000408920\n.text:0000000000408922\n.text:0000000000408927\n.text:000000000040892c\n.text:000000000040892f\n.text:0000000000408931\n.text:0000000000408936\n.text:0000000000408939\n.text:000000000040893e\n.text:0000000000408941\n.text:0000000000408946\n.text:0000000000408949\n.text:000000000040894e\n.text:0000000000408951\n.text:0000000000408953\n.text:0000000000408955\n.text:0000000000408957\n.text:000000000040895a\n.text:000000000040895d\n.text:0000000000408960\n.text:0000000000408964\n.text:0000000000408965\n.text:0000000000408967\n.text:0000000000408969\n.text:000000000040896b\n'
p1231
tp1232
sS'c_tolower'
p1233
(S'\n__stdcall c_tolower()\n'
p1234
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1236
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1237
S'.text:0000000000408c70\n.text:0000000000408c73\n.text:0000000000408c76\n.text:0000000000408c79\n.text:0000000000408c7c\n'
p1238
tp1239
sS'getopt_long'
p1240
(S'\n__stdcall getopt_long()\n'
p1241
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060e0e0)();\u000a  return;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060e0e0]\n'
p1243
S'ff 25 aa c6 20 00\n'
p1244
S'.plt:0000000000401a30\n'
p1245
tp1246
sS'error_at_line'
p1247
(S'\n__stdcall error_at_line()\n'
p1248
V\u000avoid error_at_line(void)\u000a\u000a{\u000a  (*(code *)PTR_error_at_line_0060e058)();\u000a  return;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x0060e058]\n'
p1250
S'ff 25 32 c7 20 00\n'
p1251
S'.plt:0000000000401920\n'
p1252
tp1253
sS'quotearg_style'
p1254
(S'\n__stdcall quotearg_style(char * arg)\n'
p1255
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1256
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00407180\n'
p1257
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1258
S'.text:0000000000407260\n.text:0000000000407263\n.text:0000000000407265\n.text:0000000000407267\n.text:0000000000407269\n.text:000000000040726c\n'
p1259
tp1260
sS'fd_reopen'
p1261
(S'\n__stdcall fd_reopen(char * file)\n'
p1262
V\u000aint fd_reopen(char *file)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int *piVar3;\u000a  uint in_ECX;\u000a  int __oflag;\u000a  char *__file;\u000a  \u000a  __fd = open(__file,__oflag,(ulong)in_ECX);\u000a  if ((__fd != (int)file) && (-1 < __fd)) {\u000a    iVar2 = dup2(__fd,(int)file);\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = iVar2;\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nMOV EDX,ECX\nCALL 0x00401ca0\nMOV EBX,EAX\nCMP EBX,EBP\nJZ 0x00405469\nTEST EBX,EBX\nJS 0x00405469\nMOV EDI,EBX\nMOV ESI,EBP\nCALL 0x00401a50\nMOV R14D,EAX\nCALL 0x00401900\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401af0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x0040546b\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1264
S'55\n41 57\n41 56\n53\n50\n89 fd\n31 c0\n48 89 f7\n89 d6\n89 ca\ne8 69 c8 ff ff\n89 c3\n39 eb\n74 2c\n85 db\n78 28\n89 df\n89 ee\ne8 06 c6 ff ff\n41 89 c6\ne8 ae c4 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 90 c6 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1265
S'.text:0000000000405420\n.text:0000000000405421\n.text:0000000000405423\n.text:0000000000405425\n.text:0000000000405426\n.text:0000000000405427\n.text:0000000000405429\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405430\n.text:0000000000405432\n.text:0000000000405437\n.text:0000000000405439\n.text:000000000040543b\n.text:000000000040543d\n.text:000000000040543f\n.text:0000000000405441\n.text:0000000000405443\n.text:0000000000405445\n.text:000000000040544a\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405455\n.text:0000000000405459\n.text:000000000040545b\n.text:0000000000405460\n.text:0000000000405464\n.text:0000000000405467\n.text:0000000000405469\n.text:000000000040546b\n.text:000000000040546f\n.text:0000000000405470\n.text:0000000000405472\n.text:0000000000405474\n.text:0000000000405475\n'
p1266
tp1267
sS'sigprocmask'
p1268
(S'\n__stdcall sigprocmask(int __how, sigset_t * __set, sigset_t * __oset)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigprocmask(int __how,sigset_t *__set,sigset_t *__oset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigprocmask_0060e028)();\u000a  return iVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060e028]\n'
p1271
S'ff 25 62 c7 20 00\n'
p1272
S'.plt:00000000004018c0\n'
p1273
tp1274
sS'__argmatch_die'
p1275
(S'\n__stdcall __argmatch_die()\n'
p1276
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a                    /* WARNING: Subroutine does not return */\u000a  usage(1);\u000a}\u000a\u000a
p1277
S'MOV EDI,0x1\nJMP 0x00401ea0\n'
p1278
S'bf 01 00 00 00\ne9 a6 96 ff ff\n'
p1279
S'.text:00000000004087f0\n.text:00000000004087f5\n'
p1280
tp1281
sS'emit_try_help'
p1282
(S'\n__stdcall emit_try_help()\n'
p1283
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1284
S'PUSH RBX\nMOV RBX,qword ptr [0x0060e380]\nXOR EDI,EDI\nMOV ESI,0x409ebe\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e660]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401d30\n'
p1285
S'53\n48 8b 1d b8 c1 20 00\n31 ff\nbe be 9e 40 00\nba 05 00 00 00\ne8 27 f8 ff ff\n48 89 c2\n48 8b 0d 7d c4 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 3d fb ff ff\n'
p1286
S'.text:00000000004021c0\n.text:00000000004021c1\n.text:00000000004021c8\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021dc\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021ea\n.text:00000000004021ed\n.text:00000000004021ee\n'
p1287
tp1288
sS'strrchr'
p1289
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1290
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060e100)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x0060e100]\n'
p1292
S'ff 25 8a c6 20 00\n'
p1293
S'.plt:0000000000401a70\n'
p1294
tp1295
sS'quotearg_alloc_mem'
p1296
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1297
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60e670\nCMOVNZ R12,RCX\nCALL 0x00401900\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004061b0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00407f30\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004061b0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00406eda\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 70 e6 60 00\n4c 0f 45 e1\ne8 c8 aa ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 a1 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000406e00\n.text:0000000000406e01\n.text:0000000000406e03\n.text:0000000000406e05\n.text:0000000000406e07\n.text:0000000000406e09\n.text:0000000000406e0a\n.text:0000000000406e0e\n.text:0000000000406e11\n.text:0000000000406e16\n.text:0000000000406e19\n.text:0000000000406e1e\n.text:0000000000406e21\n.text:0000000000406e26\n.text:0000000000406e29\n.text:0000000000406e2f\n.text:0000000000406e33\n.text:0000000000406e38\n.text:0000000000406e3d\n.text:0000000000406e3f\n.text:0000000000406e43\n.text:0000000000406e45\n.text:0000000000406e48\n.text:0000000000406e4c\n.text:0000000000406e51\n.text:0000000000406e55\n.text:0000000000406e5a\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e62\n.text:0000000000406e65\n.text:0000000000406e68\n.text:0000000000406e6b\n.text:0000000000406e70\n.text:0000000000406e75\n.text:0000000000406e77\n.text:0000000000406e7c\n.text:0000000000406e80\n.text:0000000000406e83\n.text:0000000000406e87\n.text:0000000000406e8a\n.text:0000000000406e8f\n.text:0000000000406e92\n.text:0000000000406e96\n.text:0000000000406e9a\n.text:0000000000406e9d\n.text:0000000000406ea0\n.text:0000000000406ea5\n.text:0000000000406eaa\n.text:0000000000406ead\n.text:0000000000406eb2\n.text:0000000000406eb7\n.text:0000000000406eb9\n.text:0000000000406ebe\n.text:0000000000406ec3\n.text:0000000000406ec7\n.text:0000000000406eca\n.text:0000000000406ece\n.text:0000000000406ed3\n.text:0000000000406ed5\n.text:0000000000406ed7\n.text:0000000000406eda\n.text:0000000000406edd\n.text:0000000000406ee1\n.text:0000000000406ee2\n.text:0000000000406ee4\n.text:0000000000406ee6\n.text:0000000000406ee8\n.text:0000000000406eea\n.text:0000000000406eeb\n'
p1301
tp1302
sS'copy_with_block'
p1303
(S'\n__stdcall copy_with_block(char * buf, size_t nread)\n'
p1304
V\u000avoid copy_with_block(char *buf,size_t nread)\u000a\u000a{\u000a  ulong uVar1;\u000a  char *pcVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  \u000a  if (nread != 0) {\u000a    do {\u000a      if (*buf == newline_character) {\u000a        if (col < conversion_blocksize) {\u000a          sVar3 = 0;\u000a          sVar4 = col;\u000a          if (conversion_blocksize <= col) goto LAB_00404eba;\u000a          do {\u000a            uVar1 = oc + 1;\u000a            pcVar2 = obuf + oc;\u000a            oc = uVar1;\u000a            *pcVar2 = space_character;\u000a            if (output_blocksize <= uVar1) {\u000a              write_output();\u000a            }\u000a            sVar4 = sVar4 + 1;\u000a          } while (sVar4 < conversion_blocksize);\u000a        }\u000a        sVar3 = 0;\u000a      }\u000a      else {\u000a        if (col == conversion_blocksize) {\u000a          r_truncate = r_truncate + 1;\u000a        }\u000a        else {\u000a          if (col < conversion_blocksize) {\u000a            uVar1 = oc + 1;\u000a            pcVar2 = obuf + oc;\u000a            oc = uVar1;\u000a            *pcVar2 = *buf;\u000a            if (output_blocksize <= uVar1) {\u000a              write_output();\u000a            }\u000a          }\u000a        }\u000a        sVar3 = col + 1;\u000a      }\u000aLAB_00404eba:\u000a      buf = buf + 1;\u000a      nread = nread - 1;\u000a      col = sVar3;\u000a    } while (nread != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1305
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00404ecd\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV AL,byte ptr [R15]\nMOV RBX,qword ptr [0x0060e628]\nMOV RCX,qword ptr [0x0060e598]\nCMP AL,byte ptr [0x0060e2b4]\nJNZ 0x00404e70\nCMP RBX,RCX\nJNC 0x00404e5d\nCMP RBX,qword ptr [0x0060e598]\nMOV EAX,0x0\nJNC 0x00404eba\nMOVZX EAX,byte ptr [0x0060e2b5]\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x00404e51\nCALL 0x00405090\nINC RBX\nCMP RBX,qword ptr [0x0060e598]\nJC 0x00404e20\nXOR EAX,EAX\nJMP 0x00404eba\nCMP RBX,RCX\nJNZ 0x00404e80\nINC qword ptr [0x0060e5f0]\nJMP 0x00404eb0\nJNC 0x00404eb0\nMOV RCX,qword ptr [0x0060e608]\nMOV RDX,qword ptr [0x0060e620]\nLEA RSI,[RDX + 0x1]\nMOV qword ptr [0x0060e620],RSI\nMOV byte ptr [RCX + RDX*0x1],AL\nCMP RSI,qword ptr [0x0060e4d8]\nJC 0x00404eb0\nCALL 0x00405090\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x0060e628]\nINC RAX\nMOV qword ptr [0x0060e628],RAX\nINC R15\nDEC R14\nJNZ 0x00404df0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1306
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 e9 00 00 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 8a 07\n48 8b 1d 2e 98 20 00\n48 8b 0d 97 97 20 00\n3a 05 ad 94 20 00\n75 67\n48 39 cb\n73 4f\n48 3b 1d 83 97 20 00\nb8 00 00 00 00\n0f 83 9a 00 00 00\n0f b6 05 8e 94 20 00\n48 8b 0d da 97 20 00\n48 8b 15 eb 97 20 00\n48 8d 72 01\n48 89 35 e0 97 20 00\n88 04 11\n48 3b 35 8e 96 20 00\n72 05\ne8 3f 02 00 00\n48 ff c3\n48 3b 1d 3d 97 20 00\n72 c3\n31 c0\neb 59\n48 39 cb\n75 0b\n48 ff 05 74 97 20 00\neb 32\n73 2e\n48 8b 0d 7f 97 20 00\n48 8b 15 90 97 20 00\n48 8d 72 01\n48 89 35 85 97 20 00\n88 04 11\n48 3b 35 33 96 20 00\n72 09\ne8 e4 01 00 00\n0f 1f 40 00\n48 8b 05 71 97 20 00\n48 ff c0\n48 89 05 67 97 20 00\n49 ff c7\n49 ff ce\n0f 85 23 ff ff ff\n5b\n41 5e\n41 5f\nc3\n'
p1307
S'.text:0000000000404dd0\n.text:0000000000404dd2\n.text:0000000000404dd4\n.text:0000000000404dd5\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404dde\n.text:0000000000404de4\n.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404dfa\n.text:0000000000404e01\n.text:0000000000404e07\n.text:0000000000404e09\n.text:0000000000404e0c\n.text:0000000000404e0e\n.text:0000000000404e15\n.text:0000000000404e1a\n.text:0000000000404e20\n.text:0000000000404e27\n.text:0000000000404e2e\n.text:0000000000404e35\n.text:0000000000404e39\n.text:0000000000404e40\n.text:0000000000404e43\n.text:0000000000404e4a\n.text:0000000000404e4c\n.text:0000000000404e51\n.text:0000000000404e54\n.text:0000000000404e5b\n.text:0000000000404e5d\n.text:0000000000404e5f\n.text:0000000000404e70\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e7c\n.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e89\n.text:0000000000404e90\n.text:0000000000404e94\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea5\n.text:0000000000404ea7\n.text:0000000000404eac\n.text:0000000000404eb0\n.text:0000000000404eb7\n.text:0000000000404eba\n.text:0000000000404ec1\n.text:0000000000404ec4\n.text:0000000000404ec7\n.text:0000000000404ecd\n.text:0000000000404ece\n.text:0000000000404ed0\n.text:0000000000404ed2\n'
p1308
tp1309
sS'bkm_scale'
p1310
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1311
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1312
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1313
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1314
S'.text:0000000000408290\n.text:0000000000408293\n.text:000000000040829a\n.text:00000000004082a1\n.text:00000000004082a3\n.text:00000000004082a6\n.text:00000000004082a9\n.text:00000000004082ad\n.text:00000000004082b0\n.text:00000000004082b4\n.text:00000000004082b6\n.text:00000000004082b9\n.text:00000000004082bc\n'
p1315
tp1316
sS'quotearg_style_mem'
p1317
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1318
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1319
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00407220\n'
p1320
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1321
S'.text:0000000000407280\n.text:0000000000407283\n.text:0000000000407286\n.text:0000000000407288\n.text:000000000040728a\n.text:000000000040728c\n.text:000000000040728f\n.text:0000000000407292\n'
p1322
tp1323
sS'xalloc_die'
p1324
(S'\n__stdcall xalloc_die()\n'
p1325
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040b89c,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1326
S'PUSH RBX\nMOV EBX,dword ptr [0x0060e2c8]\nXOR EDI,EDI\nMOV ESI,0x40b5ff\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40b89c\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401c80\nCALL 0x004018f0\n'
p1327
S'53\n8b 1d d1 62 20 00\n31 ff\nbe ff b5 40 00\nba 05 00 00 00\ne8 f8 99 ff ff\n48 89 c1\n31 f6\nba 9c b8 40 00\n31 c0\n89 df\ne8 65 9c ff ff\ne8 d0 98 ff ff\n'
p1328
S'.text:0000000000407ff0\n.text:0000000000407ff1\n.text:0000000000407ff7\n.text:0000000000407ff9\n.text:0000000000407ffe\n.text:0000000000408003\n.text:0000000000408008\n.text:000000000040800b\n.text:000000000040800d\n.text:0000000000408012\n.text:0000000000408014\n.text:0000000000408016\n.text:000000000040801b\n'
p1329
tp1330
sS'__sprintf_chk'
p1331
(S'\n__stdcall __sprintf_chk()\n'
p1332
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060e290)();\u000a  return;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x0060e290]\n'
p1334
S'ff 25 fa c4 20 00\n'
p1335
S'.plt:0000000000401d90\n'
p1336
tp1337
sS'quotearg_n_custom'
p1338
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1339
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1340
S'MOV R8,-0x1\nJMP 0x004073a0\n'
p1341
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1342
S'.text:0000000000407390\n.text:0000000000407397\n'
p1343
tp1344
sS'nl_error'
p1345
(S'\n__stdcall nl_error(char * fmt)\n'
p1346
V\u000avoid nl_error(char *fmt,...)\u000a\u000a{\u000a  uint in_ESI;\u000a  va_list ap;\u000a  \u000a  if (0 < progress_len) {\u000a    fputc_unlocked(10,stderr);\u000a    progress_len = 0;\u000a  }\u000a  verror((char *)((ulong)fmt & 0xffffffff),(__va_list_tag *)(ulong)in_ESI);\u000a  return;\u000a}\u000a\u000a
p1347
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xd0\nMOV R14,RDX\nMOV EBP,ESI\nMOV EBX,EDI\nTEST AL,AL\nJZ 0x004033ad\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nCMP dword ptr [0x0060e5c8],0x0\nJLE 0x004033e0\nMOV RSI,qword ptr [0x0060e380]\nMOV EDI,0xa\nCALL 0x00401b70\nMOV dword ptr [0x0060e5c8],0x0\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xf0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOV RCX,RSP\nMOV EDI,EBX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00407890\nADD RSP,0xd0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1348
S'55\n41 56\n53\n48 81 ec d0 00 00 00\n49 89 d6\n89 f5\n89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n83 3d 05 b2 20 00 00\n7e 1b\n48 8b 35 b4 af 20 00\nbf 0a 00 00 00\ne8 9a e7 ff ff\nc7 05 e8 b1 20 00 00 00 00 00\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 f0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 89 e1\n89 df\n89 ee\n4c 89 f2\ne8 7b 44 00 00\n48 81 c4 d0 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1349
S'.text:0000000000403360\n.text:0000000000403361\n.text:0000000000403363\n.text:0000000000403364\n.text:000000000040336b\n.text:000000000040336e\n.text:0000000000403370\n.text:0000000000403372\n.text:0000000000403374\n.text:0000000000403376\n.text:000000000040337b\n.text:0000000000403380\n.text:0000000000403385\n.text:000000000040338d\n.text:0000000000403395\n.text:000000000040339d\n.text:00000000004033a5\n.text:00000000004033ad\n.text:00000000004033b2\n.text:00000000004033b7\n.text:00000000004033bc\n.text:00000000004033c3\n.text:00000000004033c5\n.text:00000000004033cc\n.text:00000000004033d1\n.text:00000000004033d6\n.text:00000000004033e0\n.text:00000000004033e5\n.text:00000000004033ea\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033ff\n.text:0000000000403406\n.text:0000000000403409\n.text:000000000040340b\n.text:000000000040340d\n.text:0000000000403410\n.text:0000000000403415\n.text:000000000040341c\n.text:000000000040341d\n.text:000000000040341f\n.text:0000000000403420\n'
p1350
tp1351
sS'__freading'
p1352
(S'\n__stdcall __freading()\n'
p1353
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060e1d8)();\u000a  return;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060e1d8]\n'
p1355
S'ff 25 b2 c5 20 00\n'
p1356
S'.plt:0000000000401c20\n'
p1357
tp1358
sS'operand_is'
p1359
(S'\n__stdcall operand_is(char * operand, char * name)\n'
p1360
V\u000a_Bool operand_is(char *operand,char *name)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = operand_matches(operand,name);\u000a  return _Var1;\u000a}\u000a\u000a
p1361
S'MOV EDX,0x3d\nJMP 0x00404080\n'
p1362
S'ba 3d 00 00 00\ne9 c6 02 00 00\n'
p1363
S'.text:0000000000403db0\n.text:0000000000403db5\n'
p1364
tp1365
sS'fputs_unlocked'
p1366
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1367
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060e160)();\u000a  return iVar1;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0060e160]\n'
p1369
S'ff 25 2a c6 20 00\n'
p1370
S'.plt:0000000000401b30\n'
p1371
tp1372
sS'main'
p1373
(S'\n__stdcall main(char * * argv)\n'
p1374
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  size_t sVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  long lVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *pcVar9;\u000a  char **command_name;\u000a  undefined auStack184 [24];\u000a  ushort local_a0;\u000a  \u000a  install_signal_handlers();\u000a  set_program_name(*command_name);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x409f5f,"/usr/local/share/locale");\u000a  textdomain(0x409f5f);\u000a  atexit(maybe_close_stdout);\u000a  iVar5 = getpagesize();\u000a  page_size = SEXT48(iVar5);\u000a  parse_long_options((char **)((ulong)argv & 0xffffffff),(char *)command_name,"dd","coreutils",\u000a                     (void (*)(int))Version,usage,"Paul Rubin","David MacKenzie","Stuart Kemp",0);\u000a  close_stdout_required = 1;\u000a  iVar5 = getopt_long();\u000a  if (iVar5 == -1) {\u000a    lVar6 = 0;\u000a    do {\u000a      trans_table[lVar6] = (uchar)lVar6;\u000a      lVar6 = lVar6 + 1;\u000a    } while (lVar6 != 0x100);\u000a    scanargs((char **)((ulong)argv & 0xffffffff));\u000a    apply_translations();\u000a    if (input_file == (char *)0x0) {\u000a      input_file = (char *)dcgettext(0,"standard input",5);\u000a      set_fd_flags((char *)0x0);\u000a    }\u000a    else {\u000a      iVar5 = ifd_reopen((char *)0x0);\u000a      if (iVar5 < 0) {\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar1 = *puVar7;\u000a        uVar8 = dcgettext(0,"failed to open %s",5);\u000a        quotearg_style((char *)0x4);\u000a        nl_error((char *)0x1,(ulong)uVar1,uVar8);\u000a      }\u000a    }\u000a    input_offset = lseek(0,0,1);\u000a    input_seekable = (_Bool)(-1 < (long)input_offset);\u000a    if (!(bool)input_seekable) {\u000a      input_offset = 0;\u000a    }\u000a    puVar7 = (uint *)__errno_location();\u000a    input_seek_errno = *puVar7;\u000a    if (output_file == (char *)0x0) {\u000a      output_file = (char *)dcgettext(0,"standard output",5);\u000a      set_fd_flags((char *)0x1);\u000a    }\u000a    else {\u000a      if (((seek_records == 0) || (iVar5 = ifd_reopen((char *)0x1), iVar5 < 0)) &&\u000a         (iVar5 = ifd_reopen((char *)0x1), iVar5 < 0)) {\u000a        uVar1 = *puVar7;\u000a        uVar8 = dcgettext(0,"failed to open %s",5);\u000a        pcVar9 = quotearg_style((char *)0x4);\u000a        nl_error((char *)0x1,(ulong)uVar1,uVar8,pcVar9);\u000a      }\u000a      sVar3 = output_blocksize;\u000a      if ((seek_records != 0) && ((conversions_mask._1_1_ & 2) == 0)) {\u000a        lVar6 = output_blocksize * seek_records + seek_bytes;\u000a        if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x7fffffffffffffff)) / ZEXT816(output_blocksize),0)\u000a            < seek_records) {\u000a          uVar8 = dcgettext(0,\u000a                            "offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks"\u000a                            ,5);\u000a          nl_error((char *)0x1,0,uVar8,seek_records,sVar3);\u000a        }\u000a        iVar5 = iftruncate();\u000a        if (iVar5 != 0) {\u000a          uVar1 = *puVar7;\u000a          iVar5 = fstat(1,(stat *)auStack184);\u000a          if (iVar5 != 0) {\u000a            uVar2 = *puVar7;\u000a            uVar8 = dcgettext(0,"cannot fstat %s",5);\u000a            pcVar9 = quotearg_style((char *)0x4);\u000a            nl_error((char *)0x1,(ulong)uVar2,uVar8,pcVar9);\u000a          }\u000a          if (((local_a0 & 0xf000) == 0x4000) || ((local_a0 & 0xf000) == 0x8000)) {\u000a            uVar8 = dcgettext(0,"failed to truncate to %lu bytes in output file %s",5);\u000a            pcVar9 = quotearg_style((char *)0x4);\u000a            nl_error((char *)0x1,(ulong)uVar1,uVar8,lVar6,pcVar9);\u000a          }\u000a        }\u000a      }\u000a    }\u000a    start_time = gethrxtime();\u000a    next_time = start_time + 1000000000;\u000a    iVar5 = dd_copy();\u000a    if ((max_bytes | max_records) == 0) {\u000a      if ((i_nocache == 1) && (_Var4 = invalidate_cache(0), _Var4 == false)) {\u000a        uVar1 = *puVar7;\u000a        uVar8 = dcgettext(0,"failed to discard cache for: %s",5);\u000a        pcVar9 = quotearg_n_style_colon((char *)0x0);\u000a        nl_error((char *)0x0,(ulong)uVar1,uVar8,pcVar9);\u000a        iVar5 = 1;\u000a      }\u000a      if ((o_nocache == 1) && (_Var4 = invalidate_cache(1), _Var4 == false)) {\u000a        uVar1 = *puVar7;\u000a        uVar8 = dcgettext(0,"failed to discard cache for: %s",5);\u000a        pcVar9 = quotearg_n_style_colon((char *)0x0);\u000a        nl_error((char *)0x0,(ulong)uVar1,uVar8,pcVar9);\u000a        iVar5 = 1;\u000a      }\u000a    }\u000a    else {\u000a      if (max_records != 0xffffffffffffffff) {\u000a        if (i_nocache == 1) {\u000a          invalidate_cache(0);\u000a        }\u000a        if (o_nocache == 1) {\u000a          invalidate_cache(1);\u000a        }\u000a      }\u000a    }\u000a    finish_up();\u000a    return iVar5;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  usage(1);\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00402840\nMOV RDI,qword ptr [RBX]\nCALL 0x00405f90\nMOV EDI,0x6\nMOV ESI,0x40b3c9\nCALL 0x00401c50\nMOV EDI,0x409f5f\nMOV ESI,0x409da0\nCALL 0x004019f0\nMOV EDI,0x409f5f\nCALL 0x004019d0\nMOV EDI,0x402980\nCALL 0x004090c0\nCALL 0x00401cf0\nCDQE\nMOV qword ptr [0x0060e390],RAX\nMOV R8,qword ptr [0x0060e2c0]\nMOV EDX,0x409d9d\nMOV ECX,0x409f5f\nMOV R9D,0x401ea0\nMOV EAX,0x0\nMOV EDI,EBP\nMOV RSI,RBX\nPUSH 0x0\nPUSH 0x409dd3\nPUSH 0x409dc3\nPUSH 0x409db8\nCALL 0x00405ea0\nADD RSP,0x20\nMOV byte ptr [0x0060e398],0x1\nMOV EDX,0x40b3c9\nXOR ECX,ECX\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x00401a30\nCMP EAX,-0x1\nJNZ 0x0040282d\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV byte ptr [0x60e3a0 + RAX],AL\nINC RAX\nCMP RAX,0x100\nJNZ 0x00402400\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x004029b0\nCALL 0x00403130\nMOV RSI,qword ptr [0x0060e4a0]\nTEST RSI,RSI\nJZ 0x00402481\nMOV EDX,dword ptr [0x0060e4a8]\nXOR EDI,EDI\nXOR ECX,ECX\nCALL 0x00403310\nTEST EAX,EAX\nJNS 0x004024a9\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409dee\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4a0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nJMP 0x004024a9\nXOR EDI,EDI\nMOV ESI,0x409ddf\nMOV EDX,0x5\nCALL 0x00401a00\nMOV qword ptr [0x0060e4a0],RAX\nMOV ESI,dword ptr [0x0060e4a8]\nXOR EDI,EDI\nMOV RDX,RAX\nCALL 0x00403210\nXOR EBP,EBP\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x1\nCALL 0x00401a90\nTEST RAX,RAX\nSETNS byte ptr [0x0060e4ac]\nCMOVS RAX,RBP\nMOV qword ptr [0x0060e4b0],RAX\nCALL 0x00401900\nMOV R14,RAX\nMOV EAX,dword ptr [R14]\nMOV dword ptr [0x0060e4b8],EAX\nMOV RSI,qword ptr [0x0060e4c0]\nTEST RSI,RSI\nJZ 0x004026cf\nMOV EAX,dword ptr [0x0060e4cc]\nMOV EBX,EAX\nNOT EBX\nSHR EAX,0x6\nMOV ECX,EAX\nNOT ECX\nAND ECX,0x40\nAND EAX,0x80\nAND EBX,0x200\nMOV RDX,qword ptr [0x0060e4d0]\nCMP RDX,0x0\nCMOVNZ EBX,EBP\nOR EAX,dword ptr [0x0060e4c8]\nOR EBX,ECX\nOR EBX,EAX\nCMP RDX,0x0\nJZ 0x00402544\nMOV EDX,EBX\nOR EDX,0x2\nMOV EDI,0x1\nMOV ECX,0x1b6\nCALL 0x00403310\nTEST EAX,EAX\nJNS 0x0040259f\nMOV RSI,qword ptr [0x0060e4c0]\nOR EBX,0x1\nMOV EDI,0x1\nMOV ECX,0x1b6\nMOV EDX,EBX\nCALL 0x00403310\nTEST EAX,EAX\nJNS 0x0040259f\nMOV EBX,dword ptr [R14]\nXOR EDI,EDI\nMOV ESI,0x409dee\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nMOV RCX,qword ptr [0x0060e4d0]\nTEST RCX,RCX\nJZ 0x004026fa\nTEST byte ptr [0x0060e4cd],0x2\nJNZ 0x004026fa\nMOV RBP,qword ptr [0x0060e4d8]\nMOV RBX,RBP\nIMUL RBX,RCX\nADD RBX,qword ptr [0x0060e4e0]\nMOV RAX,0x7fffffffffffffff\nXOR EDX,EDX\nDIV RBP\nCMP RAX,RCX\nJNC 0x00402611\nXOR EDI,EDI\nMOV ESI,0x409e10\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e4d0]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,RBP\nCALL 0x00403360\nMOV RDI,RBX\nCALL 0x00403430\nTEST EAX,EAX\nJZ 0x004026fa\nMOV R15D,dword ptr [R14]\nMOV RSI,RSP\nMOV EDI,0x1\nCALL 0x004090f0\nTEST EAX,EAX\nJZ 0x00402672\nMOV R12D,dword ptr [R14]\nXOR EDI,EDI\nMOV ESI,0x409e5c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nCALL 0x00403360\nMOVZX EAX,word ptr [RSP + 0x18]\nAND EAX,0xf000\nCMP EAX,0x4000\nJZ 0x0040268d\nMOVZX EAX,AX\nCMP EAX,0x8000\nJNZ 0x004026fa\nXOR EDI,EDI\nMOV ESI,0x409e6c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R12,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RBP,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,RBP\nCALL 0x00403360\nJMP 0x004026fa\nXOR EDI,EDI\nMOV ESI,0x409e00\nMOV EDX,0x5\nCALL 0x00401a00\nMOV qword ptr [0x0060e4c0],RAX\nMOV ESI,dword ptr [0x0060e4c8]\nMOV EDI,0x1\nMOV RDX,RAX\nCALL 0x00403210\nCALL 0x00405480\nMOV qword ptr [0x0060e4e8],RAX\nADD RAX,0x3b9aca00\nMOV qword ptr [0x0060e4f0],RAX\nCALL 0x00403470\nMOV EBX,EAX\nMOV RAX,qword ptr [0x0060e2a8]\nMOV RCX,qword ptr [0x0060e4f8]\nOR RCX,RAX\nJZ 0x00402767\nCMP RAX,-0x1\nJZ 0x00402816\nCMP byte ptr [0x0060e500],0x1\nJNZ 0x00402749\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00403c50\nCMP byte ptr [0x0060e501],0x1\nJNZ 0x00402816\nMOV EDI,0x1\nXOR ESI,ESI\nCALL 0x00403c50\nJMP 0x00402816\nCMP byte ptr [0x0060e500],0x1\nJNZ 0x004027bd\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00403c50\nTEST AL,AL\nJNZ 0x004027bd\nMOV EBX,dword ptr [R14]\nXOR EDI,EDI\nMOV ESI,0x409e9e\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RDX,qword ptr [0x0060e4a0]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nMOV EBX,0x1\nCMP byte ptr [0x0060e501],0x1\nJNZ 0x00402816\nMOV EDI,0x1\nXOR ESI,ESI\nCALL 0x00403c50\nTEST AL,AL\nJNZ 0x00402816\nMOV EBX,dword ptr [R14]\nXOR EDI,EDI\nMOV ESI,0x409e9e\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RDX,qword ptr [0x0060e4c0]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00407340\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00403360\nMOV EBX,0x1\nCALL 0x00403d70\nMOV EAX,EBX\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x1\nCALL 0x00401ea0\n'
p1376
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n48 89 f3\n89 fd\ne8 f7 04 00 00\n48 8b 3b\ne8 3f 3c 00 00\nbf 06 00 00 00\nbe c9 b3 40 00\ne8 f0 f8 ff ff\nbf 5f 9f 40 00\nbe a0 9d 40 00\ne8 81 f6 ff ff\nbf 5f 9f 40 00\ne8 57 f6 ff ff\nbf 80 29 40 00\ne8 3d 6d 00 00\ne8 68 f9 ff ff\n48 98\n48 89 05 ff bf 20 00\n4c 8b 05 28 bf 20 00\nba 9d 9d 40 00\nb9 5f 9f 40 00\n41 b9 a0 1e 40 00\nb8 00 00 00 00\n89 ef\n48 89 de\n6a 00\n68 d3 9d 40 00\n68 c3 9d 40 00\n68 b8 9d 40 00\ne8 d8 3a 00 00\n48 83 c4 20\nc6 05 c5 bf 20 00 01\nba c9 b3 40 00\n31 c9\n45 31 c0\n89 ef\n48 89 de\ne8 49 f6 ff ff\n83 f8 ff\n0f 85 3d 04 00 00\n31 c0\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n88 80 a0 e3 60 00\n48 ff c0\n48 3d 00 01 00 00\n75 ef\n89 ef\n48 89 de\ne8 95 05 00 00\ne8 10 0d 00 00\n48 8b 35 79 c0 20 00\n48 85 f6\n74 55\n8b 15 76 c0 20 00\n31 ff\n31 c9\ne8 d5 0e 00 00\n85 c0\n79 6a\ne8 bc f4 ff ff\n8b 18\n31 ff\nbe ee 9d 40 00\nba 05 00 00 00\ne8 a9 f5 ff ff\n48 89 c5\n48 8b 35 3f c0 20 00\nbf 04 00 00 00\ne8 f5 4d 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 e1 0e 00 00\neb 28\n31 ff\nbe df 9d 40 00\nba 05 00 00 00\ne8 6e f5 ff ff\n48 89 05 07 c0 20 00\n8b 35 09 c0 20 00\n31 ff\n48 89 c2\ne8 67 0d 00 00\n31 ed\n31 ff\n31 f6\nba 01 00 00 00\ne8 d7 f5 ff ff\n48 85 c0\n0f 99 05 e9 bf 20 00\n48 0f 48 c5\n48 89 05 e2 bf 20 00\ne8 2d f4 ff ff\n49 89 c6\n41 8b 06\n89 05 d9 bf 20 00\n48 8b 35 da bf 20 00\n48 85 f6\n0f 84 e0 01 00 00\n8b 05 d7 bf 20 00\n89 c3\nf7 d3\nc1 e8 06\n89 c1\nf7 d1\n83 e1 40\n25 80 00 00 00\n81 e3 00 02 00 00\n48 8b 15 bb bf 20 00\n48 83 fa 00\n0f 45 dd\n0b 05 a6 bf 20 00\n09 cb\n09 c3\n48 83 fa 00\n74 18\n89 da\n83 ca 02\nbf 01 00 00 00\nb9 b6 01 00 00\ne8 d0 0d 00 00\n85 c0\n79 5b\n48 8b 35 75 bf 20 00\n83 cb 01\nbf 01 00 00 00\nb9 b6 01 00 00\n89 da\ne8 b1 0d 00 00\n85 c0\n79 3c\n41 8b 1e\n31 ff\nbe ee 9d 40 00\nba 05 00 00 00\ne8 89 f4 ff ff\n48 89 c5\n48 8b 35 3f bf 20 00\nbf 04 00 00 00\ne8 d5 4c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 c1 0d 00 00\n48 8b 0d 2a bf 20 00\n48 85 c9\n0f 84 4b 01 00 00\nf6 05 17 bf 20 00 02\n0f 85 3e 01 00 00\n48 8b 2d 15 bf 20 00\n48 89 eb\n48 0f af d9\n48 03 1d 0f bf 20 00\n48 b8 ff ff ff ff ff ff ff 7f\n31 d2\n48 f7 f5\n48 39 c8\n73 2c\n31 ff\nbe 10 9e 40 00\nba 05 00 00 00\ne8 0a f4 ff ff\n48 89 c2\n48 8b 0d d0 be 20 00\nbf 01 00 00 00\n31 f6\n31 c0\n49 89 e8\ne8 4f 0d 00 00\n48 89 df\ne8 17 0e 00 00\n85 c0\n0f 84 d9 00 00 00\n45 8b 3e\n48 89 e6\nbf 01 00 00 00\ne8 bf 6a 00 00\n85 c0\n74 3d\n45 8b 26\n31 ff\nbe 5c 9e 40 00\nba 05 00 00 00\ne8 b7 f3 ff ff\n48 89 c5\n48 8b 35 6d be 20 00\nbf 04 00 00 00\ne8 03 4c 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 e6\n48 89 ea\ne8 ee 0c 00 00\n0f b7 44 24 18\n25 00 f0 00 00\n3d 00 40 00 00\n74 0a\n0f b7 c0\n3d 00 80 00 00\n75 6d\n31 ff\nbe 6c 9e 40 00\nba 05 00 00 00\ne8 62 f3 ff ff\n49 89 c4\n48 8b 35 18 be 20 00\nbf 04 00 00 00\ne8 ae 4b 00 00\n48 89 c5\nbf 01 00 00 00\n31 c0\n44 89 fe\n4c 89 e2\n48 89 d9\n49 89 e8\ne8 93 0c 00 00\neb 2b\n31 ff\nbe 00 9e 40 00\nba 05 00 00 00\ne8 20 f3 ff ff\n48 89 05 d9 bd 20 00\n8b 35 db bd 20 00\nbf 01 00 00 00\n48 89 c2\ne8 16 0b 00 00\ne8 81 2d 00 00\n48 89 05 e2 bd 20 00\n48 05 00 ca 9a 3b\n48 89 05 dd bd 20 00\ne8 58 0d 00 00\n89 c3\n48 8b 05 87 bb 20 00\n48 8b 0d d0 bd 20 00\n48 09 c1\n74 3a\n48 83 f8 ff\n0f 84 df 00 00 00\n80 3d c2 bd 20 00 01\n75 09\n31 ff\n31 f6\ne8 07 15 00 00\n80 3d b1 bd 20 00 01\n0f 85 c0 00 00 00\nbf 01 00 00 00\n31 f6\ne8 ee 14 00 00\ne9 af 00 00 00\n80 3d 92 bd 20 00 01\n75 4d\n31 ff\n31 f6\ne8 d7 14 00 00\n84 c0\n75 40\n41 8b 1e\n31 ff\nbe 9e 9e 40 00\nba 05 00 00 00\ne8 6f f2 ff ff\n48 89 c5\n48 8b 15 05 bd 20 00\n31 ff\nbe 03 00 00 00\ne8 99 4b 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 a8 0b 00 00\nbb 01 00 00 00\n80 3d 3d bd 20 00 01\n75 50\nbf 01 00 00 00\n31 f6\ne8 7e 14 00 00\n84 c0\n75 40\n41 8b 1e\n31 ff\nbe 9e 9e 40 00\nba 05 00 00 00\ne8 16 f2 ff ff\n48 89 c5\n48 8b 15 cc bc 20 00\n31 ff\nbe 03 00 00 00\ne8 40 4b 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 4f 0b 00 00\nbb 01 00 00 00\ne8 55 15 00 00\n89 d8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nbf 01 00 00 00\ne8 69 f6 ff ff\n'
p1377
S'.text:0000000000402330\n.text:0000000000402331\n.text:0000000000402333\n.text:0000000000402335\n.text:0000000000402337\n.text:0000000000402338\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402344\n.text:0000000000402349\n.text:000000000040234c\n.text:0000000000402351\n.text:0000000000402356\n.text:000000000040235b\n.text:0000000000402360\n.text:0000000000402365\n.text:000000000040236a\n.text:000000000040236f\n.text:0000000000402374\n.text:0000000000402379\n.text:000000000040237e\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238a\n.text:0000000000402391\n.text:0000000000402398\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a8\n.text:00000000004023ad\n.text:00000000004023af\n.text:00000000004023b2\n.text:00000000004023b4\n.text:00000000004023b9\n.text:00000000004023be\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023cc\n.text:00000000004023d3\n.text:00000000004023d8\n.text:00000000004023da\n.text:00000000004023dd\n.text:00000000004023df\n.text:00000000004023e2\n.text:00000000004023e7\n.text:00000000004023ea\n.text:00000000004023f0\n.text:00000000004023f2\n.text:0000000000402400\n.text:0000000000402406\n.text:0000000000402409\n.text:000000000040240f\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402416\n.text:000000000040241b\n.text:0000000000402420\n.text:0000000000402427\n.text:000000000040242a\n.text:000000000040242c\n.text:0000000000402432\n.text:0000000000402434\n.text:0000000000402436\n.text:000000000040243b\n.text:000000000040243d\n.text:000000000040243f\n.text:0000000000402444\n.text:0000000000402446\n.text:0000000000402448\n.text:000000000040244d\n.text:0000000000402452\n.text:0000000000402457\n.text:000000000040245a\n.text:0000000000402461\n.text:0000000000402466\n.text:000000000040246b\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402475\n.text:0000000000402477\n.text:000000000040247a\n.text:000000000040247f\n.text:0000000000402481\n.text:0000000000402483\n.text:0000000000402488\n.text:000000000040248d\n.text:0000000000402492\n.text:0000000000402499\n.text:000000000040249f\n.text:00000000004024a1\n.text:00000000004024a4\n.text:00000000004024a9\n.text:00000000004024ab\n.text:00000000004024ad\n.text:00000000004024af\n.text:00000000004024b4\n.text:00000000004024b9\n.text:00000000004024bc\n.text:00000000004024c3\n.text:00000000004024c7\n.text:00000000004024ce\n.text:00000000004024d3\n.text:00000000004024d6\n.text:00000000004024d9\n.text:00000000004024df\n.text:00000000004024e6\n.text:00000000004024e9\n.text:00000000004024ef\n.text:00000000004024f5\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fc\n.text:00000000004024fe\n.text:0000000000402500\n.text:0000000000402503\n.text:0000000000402508\n.text:000000000040250e\n.text:0000000000402515\n.text:0000000000402519\n.text:000000000040251c\n.text:0000000000402522\n.text:0000000000402524\n.text:0000000000402526\n.text:000000000040252a\n.text:000000000040252c\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402536\n.text:000000000040253b\n.text:0000000000402540\n.text:0000000000402542\n.text:0000000000402544\n.text:000000000040254b\n.text:000000000040254e\n.text:0000000000402553\n.text:0000000000402558\n.text:000000000040255a\n.text:000000000040255f\n.text:0000000000402561\n.text:0000000000402563\n.text:0000000000402566\n.text:0000000000402568\n.text:000000000040256d\n.text:0000000000402572\n.text:0000000000402577\n.text:000000000040257a\n.text:0000000000402581\n.text:0000000000402586\n.text:000000000040258b\n.text:000000000040258e\n.text:0000000000402593\n.text:0000000000402595\n.text:0000000000402597\n.text:000000000040259a\n.text:000000000040259f\n.text:00000000004025a6\n.text:00000000004025a9\n.text:00000000004025af\n.text:00000000004025b6\n.text:00000000004025bc\n.text:00000000004025c3\n.text:00000000004025c6\n.text:00000000004025ca\n.text:00000000004025d1\n.text:00000000004025db\n.text:00000000004025dd\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e5\n.text:00000000004025e7\n.text:00000000004025ec\n.text:00000000004025f1\n.text:00000000004025f6\n.text:00000000004025f9\n.text:0000000000402600\n.text:0000000000402605\n.text:0000000000402607\n.text:0000000000402609\n.text:000000000040260c\n.text:0000000000402611\n.text:0000000000402614\n.text:0000000000402619\n.text:000000000040261b\n.text:0000000000402621\n.text:0000000000402624\n.text:0000000000402627\n.text:000000000040262c\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263a\n.text:000000000040263f\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264c\n.text:0000000000402653\n.text:0000000000402658\n.text:000000000040265d\n.text:0000000000402660\n.text:0000000000402665\n.text:0000000000402667\n.text:000000000040266a\n.text:000000000040266d\n.text:0000000000402672\n.text:0000000000402677\n.text:000000000040267c\n.text:0000000000402681\n.text:0000000000402683\n.text:0000000000402686\n.text:000000000040268b\n.text:000000000040268d\n.text:000000000040268f\n.text:0000000000402694\n.text:0000000000402699\n.text:000000000040269e\n.text:00000000004026a1\n.text:00000000004026a8\n.text:00000000004026ad\n.text:00000000004026b2\n.text:00000000004026b5\n.text:00000000004026ba\n.text:00000000004026bc\n.text:00000000004026bf\n.text:00000000004026c2\n.text:00000000004026c5\n.text:00000000004026c8\n.text:00000000004026cd\n.text:00000000004026cf\n.text:00000000004026d1\n.text:00000000004026d6\n.text:00000000004026db\n.text:00000000004026e0\n.text:00000000004026e7\n.text:00000000004026ed\n.text:00000000004026f2\n.text:00000000004026f5\n.text:00000000004026fa\n.text:00000000004026ff\n.text:0000000000402706\n.text:000000000040270c\n.text:0000000000402713\n.text:0000000000402718\n.text:000000000040271a\n.text:0000000000402721\n.text:0000000000402728\n.text:000000000040272b\n.text:000000000040272d\n.text:0000000000402731\n.text:0000000000402737\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402744\n.text:0000000000402749\n.text:0000000000402750\n.text:0000000000402756\n.text:000000000040275b\n.text:000000000040275d\n.text:0000000000402762\n.text:0000000000402767\n.text:000000000040276e\n.text:0000000000402770\n.text:0000000000402772\n.text:0000000000402774\n.text:0000000000402779\n.text:000000000040277b\n.text:000000000040277d\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402787\n.text:000000000040278c\n.text:0000000000402791\n.text:0000000000402794\n.text:000000000040279b\n.text:000000000040279d\n.text:00000000004027a2\n.text:00000000004027a7\n.text:00000000004027aa\n.text:00000000004027ac\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027bd\n.text:00000000004027c4\n.text:00000000004027c6\n.text:00000000004027cb\n.text:00000000004027cd\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d6\n.text:00000000004027d9\n.text:00000000004027db\n.text:00000000004027e0\n.text:00000000004027e5\n.text:00000000004027ea\n.text:00000000004027ed\n.text:00000000004027f4\n.text:00000000004027f6\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402805\n.text:0000000000402807\n.text:0000000000402809\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402816\n.text:000000000040281b\n.text:000000000040281d\n.text:0000000000402824\n.text:0000000000402825\n.text:0000000000402827\n.text:0000000000402829\n.text:000000000040282b\n.text:000000000040282c\n.text:000000000040282d\n.text:0000000000402832\n'
p1378
tp1379
sS'invalidate_cache'
p1380
(S'\n__stdcall invalidate_cache(off_t len)\n'
p1381
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool invalidate_cache(off_t len)\u000a\u000a{\u000a  off_t output_offset;\u000a  int iVar1;\u000a  ulong __len;\u000a  long lVar2;\u000a  int *piVar3;\u000a  __off_t _Var4;\u000a  int iVar5;\u000a  ulong in_RSI;\u000a  \u000a  __len = cache_round(len);\u000a  if ((in_RSI != 0) && (__len == 0)) {\u000a    return true;\u000a  }\u000a  if (((__len | in_RSI) == 0) && (max_records != 0)) {\u000a    return true;\u000a  }\u000a  iVar5 = (int)(len & 0xffffffffU);\u000a  if (in_RSI == 0) {\u000a    lVar2 = 0;\u000a  }\u000a  else {\u000a    lVar2 = cache_round(len & 0xffffffffU);\u000a  }\u000a  if (iVar5 == 0) {\u000a    if (input_seekable == false) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x1d;\u000a      iVar1 = -1;\u000a    }\u000a    else {\u000a      iVar1 = posix_fadvise(0,input_offset - (lVar2 + __len),__len,4);\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if ((iVar5 == 1) && (output_offset != -1)) {\u000a      if (output_offset < 0) {\u000a        _Var4 = lseek(1,0,1);\u000a        output_offset = _Var4 - (lVar2 + __len);\u000a      }\u000a      if (-1 < output_offset) {\u000a        iVar1 = posix_fadvise(1,output_offset,__len,4);\u000a      }\u000a    }\u000a  }\u000a  return (_Bool)(iVar1 != -1);\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV RBX,RSI\nMOV EBP,EDI\nCALL 0x00405290\nMOV R12,RAX\nTEST RBX,RBX\nMOV AL,0x1\nJZ 0x00403c75\nTEST R12,R12\nJZ 0x00403d62\nMOV RCX,R12\nOR RCX,RBX\nJNZ 0x00403c8d\nMOV RCX,qword ptr [0x0060e2a8]\nTEST RCX,RCX\nJNZ 0x00403d62\nTEST RBX,RBX\nJZ 0x00403ca4\nXOR ESI,ESI\nMOV EDI,EBP\nCALL 0x00405290\nMOV R14,RAX\nTEST EBP,EBP\nJNZ 0x00403cab\nJMP 0x00403cde\nXOR R14D,R14D\nTEST EBP,EBP\nJZ 0x00403cde\nMOV R15D,0xffffffff\nCMP EBP,0x1\nJNZ 0x00403d5b\nMOV RAX,qword ptr [0x0060e2b8]\nCMP RAX,-0x1\nJZ 0x00403d5b\nTEST RAX,RAX\nJS 0x00403d1b\nMOV RSI,qword ptr [0x0060e2b8]\nTEST RSI,RSI\nJNS 0x00403d3f\nJMP 0x00403d5b\nCMP byte ptr [0x0060e4ac],0x0\nJZ 0x00403d08\nMOV RSI,qword ptr [0x0060e4b0]\nADD R14,R12\nSUB RSI,R14\nMOV ECX,0x4\nMOV EDI,EBP\nMOV RDX,R12\nCALL 0x00401b00\nMOV R15D,EAX\nJMP 0x00403d5b\nCALL 0x00401900\nMOV dword ptr [RAX],0x1d\nMOV R15D,0xffffffff\nJMP 0x00403d5b\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EBP\nCALL 0x00401a90\nMOV RSI,RAX\nLEA RAX,[R14 + R12*0x1]\nSUB RSI,RAX\nMOV qword ptr [0x0060e2b8],RSI\nTEST RSI,RSI\nJS 0x00403d5b\nMOV ECX,0x4\nMOV EDI,EBP\nMOV RDX,R12\nCALL 0x00401b00\nMOV R15D,EAX\nADD R14,R12\nADD qword ptr [0x0060e2b8],R14\nCMP R15D,-0x1\nSETNZ AL\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1383
S'55\n41 57\n41 56\n41 54\n53\n48 89 f3\n89 fd\ne8 2e 16 00 00\n49 89 c4\n48 85 db\nb0 01\n74 09\n4d 85 e4\n0f 84 ed 00 00 00\n4c 89 e1\n48 09 d9\n75 10\n48 8b 0d 24 a6 20 00\n48 85 c9\n0f 85 d5 00 00 00\n48 85 db\n74 12\n31 f6\n89 ef\ne8 f5 15 00 00\n49 89 c6\n85 ed\n75 09\neb 3a\n45 31 f6\n85 ed\n74 33\n41 bf ff ff ff ff\n83 fd 01\n0f 85 a1 00 00 00\n48 8b 05 f7 a5 20 00\n48 83 f8 ff\n0f 84 90 00 00 00\n48 85 c0\n78 4b\n48 8b 35 e1 a5 20 00\n48 85 f6\n79 63\neb 7d\n80 3d c7 a7 20 00 00\n74 21\n48 8b 35 c2 a7 20 00\n4d 01 e6\n4c 29 f6\nb9 04 00 00 00\n89 ef\n4c 89 e2\ne8 fd dd ff ff\n41 89 c7\neb 53\ne8 f3 db ff ff\nc7 00 1d 00 00 00\n41 bf ff ff ff ff\neb 40\n31 f6\nba 01 00 00 00\n89 ef\ne8 67 dd ff ff\n48 89 c6\n4b 8d 04 26\n48 29 c6\n48 89 35 7e a5 20 00\n48 85 f6\n78 1c\nb9 04 00 00 00\n89 ef\n4c 89 e2\ne8 b2 dd ff ff\n41 89 c7\n4d 01 e6\n4c 01 35 5d a5 20 00\n41 83 ff ff\n0f 95 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1384
S'.text:0000000000403c50\n.text:0000000000403c51\n.text:0000000000403c53\n.text:0000000000403c55\n.text:0000000000403c57\n.text:0000000000403c58\n.text:0000000000403c5b\n.text:0000000000403c5d\n.text:0000000000403c62\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6a\n.text:0000000000403c6c\n.text:0000000000403c6f\n.text:0000000000403c75\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c7d\n.text:0000000000403c84\n.text:0000000000403c87\n.text:0000000000403c8d\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c94\n.text:0000000000403c96\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca0\n.text:0000000000403ca2\n.text:0000000000403ca4\n.text:0000000000403ca7\n.text:0000000000403ca9\n.text:0000000000403cab\n.text:0000000000403cb1\n.text:0000000000403cb4\n.text:0000000000403cba\n.text:0000000000403cc1\n.text:0000000000403cc5\n.text:0000000000403ccb\n.text:0000000000403cce\n.text:0000000000403cd0\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce5\n.text:0000000000403ce7\n.text:0000000000403cee\n.text:0000000000403cf1\n.text:0000000000403cf4\n.text:0000000000403cf9\n.text:0000000000403cfb\n.text:0000000000403cfe\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d08\n.text:0000000000403d0d\n.text:0000000000403d13\n.text:0000000000403d19\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d29\n.text:0000000000403d2c\n.text:0000000000403d30\n.text:0000000000403d33\n.text:0000000000403d3a\n.text:0000000000403d3d\n.text:0000000000403d3f\n.text:0000000000403d44\n.text:0000000000403d46\n.text:0000000000403d49\n.text:0000000000403d4e\n.text:0000000000403d51\n.text:0000000000403d54\n.text:0000000000403d5b\n.text:0000000000403d5f\n.text:0000000000403d62\n.text:0000000000403d63\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6a\n'
p1385
tp1386
sS'xcharalloc'
p1387
(S'\n__stdcall xcharalloc(size_t n)\n'
p1388
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1389
S'JMP 0x00407e60\n'
p1390
S'e9 2b ff ff ff\n'
p1391
S'.text:0000000000407f30\n'
p1392
tp1393
sS'c_isupper'
p1394
(S'\n__stdcall c_isupper()\n'
p1395
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1396
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1397
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1398
S'.text:0000000000408c40\n.text:0000000000408c43\n.text:0000000000408c46\n.text:0000000000408c49\n'
p1399
tp1400
sS'alloc_obuf'
p1401
(S'\n__stdcall alloc_obuf()\n'
p1402
V\u000avoid alloc_obuf(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  void *ptr;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char hbuf [652];\u000a  char acStack680 [656];\u000a  \u000a  sVar1 = output_blocksize;\u000a  if (obuf == (char *)0x0) {\u000a    if ((conversions_mask._1_1_ & 8) == 0) {\u000a      alloc_ibuf();\u000a      obuf = ibuf;\u000a    }\u000a    else {\u000a      ptr = malloc((output_blocksize - 1) + page_size);\u000a      if (ptr == (void *)0x0) {\u000a        uVar2 = dcgettext(0,"memory exhausted by output buffer of size %lu bytes (%s)",5);\u000a        pcVar3 = human_readable(output_blocksize,acStack680,0x1f1,1);\u000a        nl_error((char *)0x1,0,uVar2,sVar1,pcVar3);\u000a      }\u000a      obuf = (char *)ptr_align(ptr,page_size);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1403
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x290\nCMP qword ptr [0x0060e608],0x0\nJNZ 0x00404b71\nTEST byte ptr [0x0060e4cd],0x8\nJNZ 0x00404af1\nCALL 0x00404a10\nMOV RAX,qword ptr [0x0060e610]\nJMP 0x00404b6a\nMOV R14,qword ptr [0x0060e4d8]\nMOV RAX,qword ptr [0x0060e390]\nLEA RDI,[R14 + RAX*0x1 + -0x1]\nCALL 0x00401bc0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00404b5b\nXOR EDI,EDI\nMOV ESI,0x40a502\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060e4d8]\nMOV RSI,RSP\nMOV EDX,0x1f1\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x004055d0\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00403360\nMOV RSI,qword ptr [0x0060e390]\nMOV RDI,RBX\nCALL 0x00405260\nMOV qword ptr [0x0060e608],RAX\nADD RSP,0x290\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1404
S'41 57\n41 56\n53\n48 81 ec 90 02 00 00\n48 83 3d 34 9b 20 00 00\n0f 85 97 00 00 00\nf6 05 ec 99 20 00 08\n75 0e\ne8 28 ff ff ff\n48 8b 05 21 9b 20 00\neb 79\n4c 8b 35 e0 99 20 00\n48 8b 05 91 98 20 00\n49 8d 7c 06 ff\ne8 b7 d0 ff ff\n48 89 c3\n48 85 db\n75 4a\n31 ff\nbe 02 a5 40 00\nba 05 00 00 00\ne8 de ce ff ff\n49 89 c7\n48 8b 3d ac 99 20 00\n48 89 e6\nba f1 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 8c 0a 00 00\n49 89 c0\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\n4c 89 f1\ne8 05 e8 ff ff\n48 8b 35 2e 98 20 00\n48 89 df\ne8 f6 06 00 00\n48 89 05 97 9a 20 00\n48 81 c4 90 02 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1405
S'.text:0000000000404ac0\n.text:0000000000404ac2\n.text:0000000000404ac4\n.text:0000000000404ac5\n.text:0000000000404acc\n.text:0000000000404ad4\n.text:0000000000404ada\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae8\n.text:0000000000404aef\n.text:0000000000404af1\n.text:0000000000404af8\n.text:0000000000404aff\n.text:0000000000404b04\n.text:0000000000404b09\n.text:0000000000404b0c\n.text:0000000000404b0f\n.text:0000000000404b11\n.text:0000000000404b13\n.text:0000000000404b18\n.text:0000000000404b1d\n.text:0000000000404b22\n.text:0000000000404b25\n.text:0000000000404b2c\n.text:0000000000404b2f\n.text:0000000000404b34\n.text:0000000000404b39\n.text:0000000000404b3f\n.text:0000000000404b44\n.text:0000000000404b47\n.text:0000000000404b4c\n.text:0000000000404b4e\n.text:0000000000404b50\n.text:0000000000404b53\n.text:0000000000404b56\n.text:0000000000404b5b\n.text:0000000000404b62\n.text:0000000000404b65\n.text:0000000000404b6a\n.text:0000000000404b71\n.text:0000000000404b78\n.text:0000000000404b79\n.text:0000000000404b7b\n.text:0000000000404b7d\n'
p1406
tp1407
sS'c_isalnum'
p1408
(S'\n__stdcall c_isalnum()\n'
p1409
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1410
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00408b5b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00408b5b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00408b5a\nXOR EAX,EAX\nRET\n'
p1411
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1412
S'.text:0000000000408b40\n.text:0000000000408b42\n.text:0000000000408b45\n.text:0000000000408b48\n.text:0000000000408b4a\n.text:0000000000408b54\n.text:0000000000408b58\n.text:0000000000408b5a\n.text:0000000000408b5b\n.text:0000000000408b5e\n.text:0000000000408b61\n.text:0000000000408b63\n.text:0000000000408b65\n'
p1413
tp1414
sS'print_xfer_stats'
p1415
(S'\n__stdcall print_xfer_stats(xtime_t progress_time)\n'
p1416
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid print_xfer_stats(xtime_t progress_time)\u000a\u000a{\u000a  undefined auVar1 [12];\u000a  FILE *pFVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  xtime_t xVar5;\u000a  char *message;\u000a  char *message_00;\u000a  char *pcVar6;\u000a  ulong uVar7;\u000a  undefined8 uVar8;\u000a  undefined auVar9 [16];\u000a  char hbuf [3] [652];\u000a  double local_7e8;\u000a  undefined8 uStack2016;\u000a  char local_7d8 [652];\u000a  char local_54c [652];\u000a  char local_2c0 [664];\u000a  \u000a  xVar5 = progress_time;\u000a  if (progress_time == 0) {\u000a    xVar5 = gethrxtime();\u000a  }\u000a  message = human_readable(w_bytes,local_7d8,0x1d1,1);\u000a  message_00 = human_readable(w_bytes,local_54c,0x1f1,1);\u000a  if (xVar5 - start_time == 0 || xVar5 < start_time) {\u000a    pcVar6 = (char *)dcgettext(0,"Infinity B",5);\u000a    local_7e8 = 0.00000000;\u000a    uStack2016 = 0;\u000a  }\u000a  else {\u000a    auVar1 = ZEXT812((ulong)(xVar5 - start_time)) & (undefined  [12])0xffffffffffffffff;\u000a    auVar9 = subpd(CONCAT88(SUB168(CONCAT412(DAT_00409124,auVar1 | (undefined  [12])0x0 << 0x40) >>\u000a                                   0x40,0),CONCAT44(DAT_00409120,SUB124(auVar1,0))),_DAT_00409130);\u000a    auVar9 = addpd(CONCAT412(SUB164(auVar9 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar9,0),SUB168(auVar9 >> 0x40,0))),auVar9);\u000a    uStack2016 = SUB168(auVar9 >> 0x40,0);\u000a    local_7e8 = SUB168(auVar9,0) / _DAT_00409140;\u000a    pcVar6 = human_readable(w_bytes,local_2c0,0x1d1,1000000000);\u000a  }\u000a  if (progress_time != 0) {\u000a    fputc_unlocked(0xd,stderr);\u000a  }\u000a  _Var3 = abbreviation_lacks_prefix(message);\u000a  pFVar2 = stderr;\u000a  if (_Var3 == false) {\u000a    _Var3 = abbreviation_lacks_prefix(message_00);\u000a    pFVar2 = stderr;\u000a    if (_Var3 == false) {\u000a      uVar8 = dcgettext(0,"%lu bytes (%s, %s) copied, %g s, %s/s",5);\u000a      iVar4 = __fprintf_chk(CONCAT88(uStack2016,local_7e8),pFVar2,1,uVar8,w_bytes,message,message_00\u000a                            ,pcVar6);\u000a    }\u000a    else {\u000a      uVar8 = dcgettext(0,"%lu bytes (%s) copied, %g s, %s/s",5);\u000a      iVar4 = __fprintf_chk(CONCAT88(uStack2016,local_7e8),pFVar2,1,uVar8,w_bytes,message,pcVar6);\u000a    }\u000a  }\u000a  else {\u000a    uVar7 = select_plural(w_bytes);\u000a    uVar8 = dcngettext(0,"%lu byte copied, %g s, %s/s","%lu bytes copied, %g s, %s/s",uVar7,5);\u000a    iVar4 = __fprintf_chk(CONCAT88(uStack2016,local_7e8),pFVar2,1,uVar8,w_bytes,pcVar6);\u000a  }\u000a  if (progress_time == 0) {\u000a    fputc_unlocked(10,stderr);\u000a    iVar4 = progress_len;\u000a  }\u000a  else {\u000a    if ((-1 < iVar4) && (progress_len - iVar4 != 0 && iVar4 <= progress_len)) {\u000a      __fprintf_chk(stderr,1,&DAT_0040a34a,(ulong)(uint)(progress_len - iVar4),0x40b3c9);\u000a    }\u000a  }\u000a  progress_len = iVar4;\u000a  return;\u000a}\u000a\u000a
p1417
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x7d0\nMOV R13,RDI\nTEST R13,R13\nMOV RBX,R13\nJNZ 0x00404313\nCALL 0x00405480\nMOV RBX,RAX\nMOV RDI,qword ptr [0x0060e5f8]\nLEA RSI,[RSP + 0x20]\nMOV EDX,0x1d1\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x004055d0\nMOV R14,RAX\nMOV RDI,qword ptr [0x0060e5f8]\nLEA RSI,[0x2ac + RSP]\nMOV EDX,0x1f1\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x004055d0\nMOV R12,RAX\nSUB RBX,qword ptr [0x0060e4e8]\nJLE 0x004043be\nMOVQ XMM0,RBX\nPUNPCKLDQ XMM0,xmmword ptr [0x00409120]\nSUBPD XMM0,xmmword ptr [0x00409130]\nPSHUFD XMM1,XMM0,0x4e\nADDPD XMM1,XMM0\nDIVSD XMM1,qword ptr [0x00409140]\nMOVAPD xmmword ptr [RSP + 0x10],XMM1\nMOV RDI,qword ptr [0x0060e5f8]\nLEA RSI,[0x538 + RSP]\nMOV EDX,0x1d1\nMOV ECX,0x3b9aca00\nMOV R8,RBX\nCALL 0x004055d0\nMOV R15,RAX\nTEST R13,R13\nJNZ 0x004043e1\nJMP 0x004043f2\nXOR EDI,EDI\nMOV ESI,0x40a2be\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R15,RAX\nXORPD XMM0,XMM0\nMOVAPD xmmword ptr [RSP + 0x10],XMM0\nTEST R13,R13\nJZ 0x004043f2\nMOV RSI,qword ptr [0x0060e380]\nMOV EDI,0xd\nCALL 0x00401b70\nMOV RDI,R14\nCALL 0x00404530\nTEST AL,AL\nJZ 0x00404451\nMOV RBX,qword ptr [0x0060e380]\nMOV RDI,qword ptr [0x0060e5f8]\nCALL 0x00404150\nXOR EDI,EDI\nMOV ESI,0x40a2c9\nMOV EDX,0x40a2e5\nMOV R8D,0x5\nMOV RCX,RAX\nCALL 0x00401cc0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e5f8]\nMOV ESI,0x1\nMOV AL,0x1\nMOV RDI,RBX\nMOVAPS XMM0,xmmword ptr [RSP + 0x10]\nMOV R8,R15\nCALL 0x00401d30\nJMP 0x004044d2\nMOV RDI,R12\nCALL 0x00404530\nMOV RBX,qword ptr [0x0060e380]\nXOR EDI,EDI\nTEST AL,AL\nJZ 0x0040449b\nMOV ESI,0x40a302\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e5f8]\nMOV ESI,0x1\nMOV AL,0x1\nMOV RDI,RBX\nMOV R8,R14\nMOVAPS XMM0,xmmword ptr [RSP + 0x10]\nMOV R9,R15\nCALL 0x00401d30\nJMP 0x004044d2\nMOV ESI,0x40a324\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e5f8]\nMOV qword ptr [RSP],R15\nMOV ESI,0x1\nMOV AL,0x1\nMOV RDI,RBX\nMOV R8,R14\nMOV R9,R12\nMOVAPS XMM0,xmmword ptr [RSP + 0x10]\nCALL 0x00401d30\nMOV EBX,EAX\nTEST R13,R13\nJZ 0x0040450d\nTEST EBX,EBX\nJS 0x00404505\nMOV ECX,dword ptr [0x0060e5c8]\nSUB ECX,EBX\nJLE 0x00404505\nMOV RDI,qword ptr [0x0060e380]\nMOV ESI,0x1\nMOV EDX,0x40a34a\nMOV R8D,0x40b3c9\nXOR EAX,EAX\nCALL 0x00401d30\nMOV dword ptr [0x0060e5c8],EBX\nJMP 0x0040451e\nMOV RSI,qword ptr [0x0060e380]\nMOV EDI,0xa\nCALL 0x00401b70\nADD RSP,0x7d0\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1418
S'41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d0 07 00 00\n49 89 fd\n4d 85 ed\n4c 89 eb\n75 08\ne8 70 11 00 00\n48 89 c3\n48 8b 3d de a2 20 00\n48 8d 74 24 20\nba d1 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 9c 12 00 00\n49 89 c6\n48 8b 3d ba a2 20 00\n48 8d b4 24 ac 02 00 00\nba f1 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 75 12 00 00\n49 89 c4\n48 2b 1d 83 a1 20 00\n7e 57\n66 48 0f 6e c3\n66 0f 62 05 ac 4d 00 00\n66 0f 5c 05 b4 4d 00 00\n66 0f 70 c8 4e\n66 0f 58 c8\nf2 0f 5e 0d b3 4d 00 00\n66 0f 29 4c 24 10\n48 8b 3d 5e a2 20 00\n48 8d b4 24 38 05 00 00\nba d1 01 00 00\nb9 00 ca 9a 3b\n49 89 d8\ne8 1c 12 00 00\n49 89 c7\n4d 85 ed\n75 25\neb 34\n31 ff\nbe be a2 40 00\nba 05 00 00 00\ne8 31 d6 ff ff\n49 89 c7\n66 0f 57 c0\n66 0f 29 44 24 10\n4d 85 ed\n74 11\n48 8b 35 98 9f 20 00\nbf 0d 00 00 00\ne8 7e d7 ff ff\n4c 89 f7\ne8 36 01 00 00\n84 c0\n74 53\n48 8b 1d 7b 9f 20 00\n48 8b 3d ec a1 20 00\ne8 3f fd ff ff\n31 ff\nbe c9 a2 40 00\nba e5 a2 40 00\n41 b8 05 00 00 00\n48 89 c1\ne8 95 d8 ff ff\n48 89 c2\n48 8b 0d c3 a1 20 00\nbe 01 00 00 00\nb0 01\n48 89 df\n0f 28 44 24 10\n4d 89 f8\ne8 e4 d8 ff ff\ne9 81 00 00 00\n4c 89 e7\ne8 d7 00 00 00\n48 8b 1d 20 9f 20 00\n31 ff\n84 c0\n74 35\nbe 02 a3 40 00\nba 05 00 00 00\ne8 8b d5 ff ff\n48 89 c2\n48 8b 0d 79 a1 20 00\nbe 01 00 00 00\nb0 01\n48 89 df\n4d 89 f0\n0f 28 44 24 10\n4d 89 f9\ne8 97 d8 ff ff\neb 37\nbe 24 a3 40 00\nba 05 00 00 00\ne8 56 d5 ff ff\n48 89 c2\n48 8b 0d 44 a1 20 00\n4c 89 3c 24\nbe 01 00 00 00\nb0 01\n48 89 df\n4d 89 f0\n4d 89 e1\n0f 28 44 24 10\ne8 5e d8 ff ff\n89 c3\n4d 85 ed\n74 34\n85 db\n78 28\n8b 0d e5 a0 20 00\n29 d9\n7e 1e\n48 8b 3d 92 9e 20 00\nbe 01 00 00 00\nba 4a a3 40 00\n41 b8 c9 b3 40 00\n31 c0\ne8 2b d8 ff ff\n89 1d bd a0 20 00\neb 11\n48 8b 35 6c 9e 20 00\nbf 0a 00 00 00\ne8 52 d6 ff ff\n48 81 c4 d0 07 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1419
S'.text:00000000004042f0\n.text:00000000004042f2\n.text:00000000004042f4\n.text:00000000004042f6\n.text:00000000004042f8\n.text:00000000004042f9\n.text:0000000000404300\n.text:0000000000404303\n.text:0000000000404306\n.text:0000000000404309\n.text:000000000040430b\n.text:0000000000404310\n.text:0000000000404313\n.text:000000000040431a\n.text:000000000040431f\n.text:0000000000404324\n.text:0000000000404329\n.text:000000000040432f\n.text:0000000000404334\n.text:0000000000404337\n.text:000000000040433e\n.text:0000000000404346\n.text:000000000040434b\n.text:0000000000404350\n.text:0000000000404356\n.text:000000000040435b\n.text:000000000040435e\n.text:0000000000404365\n.text:0000000000404367\n.text:000000000040436c\n.text:0000000000404374\n.text:000000000040437c\n.text:0000000000404381\n.text:0000000000404385\n.text:000000000040438d\n.text:0000000000404393\n.text:000000000040439a\n.text:00000000004043a2\n.text:00000000004043a7\n.text:00000000004043ac\n.text:00000000004043af\n.text:00000000004043b4\n.text:00000000004043b7\n.text:00000000004043ba\n.text:00000000004043bc\n.text:00000000004043be\n.text:00000000004043c0\n.text:00000000004043c5\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d2\n.text:00000000004043d6\n.text:00000000004043dc\n.text:00000000004043df\n.text:00000000004043e1\n.text:00000000004043e8\n.text:00000000004043ed\n.text:00000000004043f2\n.text:00000000004043f5\n.text:00000000004043fa\n.text:00000000004043fc\n.text:00000000004043fe\n.text:0000000000404405\n.text:000000000040440c\n.text:0000000000404411\n.text:0000000000404413\n.text:0000000000404418\n.text:000000000040441d\n.text:0000000000404423\n.text:0000000000404426\n.text:000000000040442b\n.text:000000000040442e\n.text:0000000000404435\n.text:000000000040443a\n.text:000000000040443c\n.text:000000000040443f\n.text:0000000000404444\n.text:0000000000404447\n.text:000000000040444c\n.text:0000000000404451\n.text:0000000000404454\n.text:0000000000404459\n.text:0000000000404460\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404466\n.text:000000000040446b\n.text:0000000000404470\n.text:0000000000404475\n.text:0000000000404478\n.text:000000000040447f\n.text:0000000000404484\n.text:0000000000404486\n.text:0000000000404489\n.text:000000000040448c\n.text:0000000000404491\n.text:0000000000404494\n.text:0000000000404499\n.text:000000000040449b\n.text:00000000004044a0\n.text:00000000004044a5\n.text:00000000004044aa\n.text:00000000004044ad\n.text:00000000004044b4\n.text:00000000004044b8\n.text:00000000004044bd\n.text:00000000004044bf\n.text:00000000004044c2\n.text:00000000004044c5\n.text:00000000004044c8\n.text:00000000004044cd\n.text:00000000004044d2\n.text:00000000004044d4\n.text:00000000004044d7\n.text:00000000004044d9\n.text:00000000004044db\n.text:00000000004044dd\n.text:00000000004044e3\n.text:00000000004044e5\n.text:00000000004044e7\n.text:00000000004044ee\n.text:00000000004044f3\n.text:00000000004044f8\n.text:00000000004044fe\n.text:0000000000404500\n.text:0000000000404505\n.text:000000000040450b\n.text:000000000040450d\n.text:0000000000404514\n.text:0000000000404519\n.text:000000000040451e\n.text:0000000000404525\n.text:0000000000404526\n.text:0000000000404528\n.text:000000000040452a\n.text:000000000040452c\n.text:000000000040452e\n'
p1420
tp1421
sS'human_options'
p1422
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p1423
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p1424
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00405d70\nCMP qword ptr [RBX],0x0\nJNZ 0x00405d65\nCALL 0x00405e80\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p1425
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p1426
S'.text:0000000000405d40\n.text:0000000000405d41\n.text:0000000000405d44\n.text:0000000000405d47\n.text:0000000000405d4a\n.text:0000000000405d4d\n.text:0000000000405d52\n.text:0000000000405d56\n.text:0000000000405d58\n.text:0000000000405d5d\n.text:0000000000405d60\n.text:0000000000405d65\n.text:0000000000405d66\n'
p1427
tp1428
sS'raise'
p1429
(S'\n__stdcall raise(int __sig)\n'
p1430
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint raise(int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_raise_0060e030)();\u000a  return iVar1;\u000a}\u000a\u000a
p1431
S'JMP qword ptr [0x0060e030]\n'
p1432
S'ff 25 5a c7 20 00\n'
p1433
S'.plt:00000000004018d0\n'
p1434
tp1435
sS'__errno_location'
p1436
(S'\n__stdcall __errno_location()\n'
p1437
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060e048)();\u000a  return piVar1;\u000a}\u000a\u000a
p1438
S'JMP qword ptr [0x0060e048]\n'
p1439
S'ff 25 42 c7 20 00\n'
p1440
S'.plt:0000000000401900\n'
p1441
tp1442
sS'x2nrealloc'
p1443
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1444
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1445
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00407efc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00407f29\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00407f1a\nTEST RCX,RCX\nJNZ 0x00407f1a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00407ea0\nPUSH RAX\nCALL 0x00407ff0\n'
p1446
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1447
S'.text:0000000000407ed0\n.text:0000000000407ed3\n.text:0000000000407ed6\n.text:0000000000407ed9\n.text:0000000000407edb\n.text:0000000000407ee5\n.text:0000000000407ee7\n.text:0000000000407eea\n.text:0000000000407eed\n.text:0000000000407eef\n.text:0000000000407ef2\n.text:0000000000407ef5\n.text:0000000000407efa\n.text:0000000000407efc\n.text:0000000000407eff\n.text:0000000000407f01\n.text:0000000000407f06\n.text:0000000000407f08\n.text:0000000000407f0b\n.text:0000000000407f0d\n.text:0000000000407f14\n.text:0000000000407f17\n.text:0000000000407f1a\n.text:0000000000407f1d\n.text:0000000000407f21\n.text:0000000000407f24\n.text:0000000000407f29\n.text:0000000000407f2a\n'
p1448
tp1449
sS'quotearg_n_options'
p1450
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1451
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1452
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401900\nTEST R12D,R12D\nJS 0x00407141\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060e2d0]\nCMP dword ptr [0x0060e2d8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040705b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60e2e0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00407ea0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060e2d0],R15\nJNZ 0x00407022\nMOVUPS XMM0,xmmword ptr [0x0060e2e0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060e2d8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401ac0\nMOV dword ptr [0x0060e2d8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004061b0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004070bd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040712b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60e6b0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004070e8\nCALL 0x004018e0\nMOV RDI,R15\nCALL 0x00407f30\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004061b0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004018f0\n'
p1453
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 51 a9 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 06 73 20 00\n44 39 25 07 73 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd e0 e2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 98 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d bb 72 20 00\n75 0b\n0f 10 05 c2 72 20 00\n41 0f 11 07\n8b 05 b0 72 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d aa ff ff\n89 1d 8f 72 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 b0 e6 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 f8 a7 ff ff\n4c 89 ff\ne8 40 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 aa a7 ff ff\n'
p1454
S'.text:0000000000406f90\n.text:0000000000406f91\n.text:0000000000406f93\n.text:0000000000406f95\n.text:0000000000406f97\n.text:0000000000406f99\n.text:0000000000406f9a\n.text:0000000000406f9e\n.text:0000000000406fa1\n.text:0000000000406fa4\n.text:0000000000406fa7\n.text:0000000000406faa\n.text:0000000000406faf\n.text:0000000000406fb2\n.text:0000000000406fb8\n.text:0000000000406fbd\n.text:0000000000406fbf\n.text:0000000000406fc3\n.text:0000000000406fca\n.text:0000000000406fd1\n.text:0000000000406fd6\n.text:0000000000406fdb\n.text:0000000000406fe0\n.text:0000000000406fe2\n.text:0000000000406fe7\n.text:0000000000406fea\n.text:0000000000406fed\n.text:0000000000406ff3\n.text:0000000000406ff5\n.text:0000000000406ff8\n.text:0000000000406ffc\n.text:0000000000406fff\n.text:0000000000407003\n.text:0000000000407008\n.text:000000000040700b\n.text:000000000040700e\n.text:0000000000407015\n.text:0000000000407017\n.text:000000000040701e\n.text:0000000000407022\n.text:0000000000407028\n.text:000000000040702b\n.text:000000000040702f\n.text:0000000000407032\n.text:0000000000407035\n.text:0000000000407039\n.text:000000000040703b\n.text:000000000040703e\n.text:0000000000407043\n.text:0000000000407049\n.text:000000000040704c\n.text:0000000000407051\n.text:0000000000407056\n.text:000000000040705b\n.text:000000000040705e\n.text:0000000000407062\n.text:0000000000407066\n.text:000000000040706b\n.text:000000000040706f\n.text:0000000000407073\n.text:0000000000407077\n.text:000000000040707b\n.text:000000000040707f\n.text:0000000000407084\n.text:0000000000407087\n.text:000000000040708a\n.text:000000000040708d\n.text:0000000000407092\n.text:0000000000407095\n.text:0000000000407098\n.text:000000000040709b\n.text:000000000040709c\n.text:00000000004070a1\n.text:00000000004070a5\n.text:00000000004070a8\n.text:00000000004070ab\n.text:00000000004070ad\n.text:00000000004070b2\n.text:00000000004070b6\n.text:00000000004070bb\n.text:00000000004070bd\n.text:00000000004070c1\n.text:00000000004070c6\n.text:00000000004070c9\n.text:00000000004070cc\n.text:00000000004070d1\n.text:00000000004070d6\n.text:00000000004070d9\n.text:00000000004070de\n.text:00000000004070e1\n.text:00000000004070e3\n.text:00000000004070e8\n.text:00000000004070eb\n.text:00000000004070f0\n.text:00000000004070f3\n.text:00000000004070f6\n.text:00000000004070fb\n.text:00000000004070fe\n.text:0000000000407102\n.text:0000000000407105\n.text:0000000000407108\n.text:000000000040710d\n.text:0000000000407112\n.text:0000000000407117\n.text:000000000040711a\n.text:000000000040711d\n.text:000000000040711e\n.text:0000000000407123\n.text:0000000000407127\n.text:000000000040712b\n.text:000000000040712f\n.text:0000000000407132\n.text:0000000000407136\n.text:0000000000407137\n.text:0000000000407139\n.text:000000000040713b\n.text:000000000040713d\n.text:000000000040713f\n.text:0000000000407140\n.text:0000000000407141\n'
p1455
tp1456
sS'strcmp'
p1457
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1458
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060e178)();\u000a  return iVar1;\u000a}\u000a\u000a
p1459
S'JMP qword ptr [0x0060e178]\n'
p1460
S'ff 25 12 c6 20 00\n'
p1461
S'.plt:0000000000401b60\n'
p1462
tp1463
sS'read'
p1464
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1465
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060e150)();\u000a  return sVar1;\u000a}\u000a\u000a
p1466
S'JMP qword ptr [0x0060e150]\n'
p1467
S'ff 25 3a c6 20 00\n'
p1468
S'.plt:0000000000401b10\n'
p1469
tp1470
sS'set_custom_quoting'
p1471
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1472
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1473
S'TEST RDI,RDI\nMOV EAX,0x60e670\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00406125\nTEST RDX,RDX\nJZ 0x00406125\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004018f0\n'
p1474
S'48 85 ff\nb8 70 e6 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 c5 b7 ff ff\n'
p1475
S'.text:0000000000406100\n.text:0000000000406103\n.text:0000000000406108\n.text:000000000040610c\n.text:0000000000406112\n.text:0000000000406115\n.text:0000000000406117\n.text:000000000040611a\n.text:000000000040611c\n.text:0000000000406120\n.text:0000000000406124\n.text:0000000000406125\n.text:0000000000406126\n'
p1476
tp1477
sS'c_isalpha'
p1478
(S'\n__stdcall c_isalpha()\n'
p1479
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1480
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00408b8b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1481
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1482
S'.text:0000000000408b70\n.text:0000000000408b73\n.text:0000000000408b76\n.text:0000000000408b78\n.text:0000000000408b82\n.text:0000000000408b84\n.text:0000000000408b87\n.text:0000000000408b8a\n.text:0000000000408b8b\n.text:0000000000408b8d\n'
p1483
tp1484
sS'quotearg_custom_mem'
p1485
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1486
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1487
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004073a0\n'
p1488
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1489
S'.text:0000000000407430\n.text:0000000000407433\n.text:0000000000407436\n.text:0000000000407439\n.text:000000000040743c\n.text:000000000040743e\n.text:0000000000407441\n'
p1490
tp1491
sS'dcngettext'
p1492
(S'\n__stdcall dcngettext()\n'
p1493
V\u000avoid dcngettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcngettext_0060e228)();\u000a  return;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x0060e228]\n'
p1495
S'ff 25 62 c5 20 00\n'
p1496
S'.plt:0000000000401cc0\n'
p1497
tp1498
sS'sigaction'
p1499
(S'\n__stdcall sigaction(int __sig, sigaction * __act, sigaction * __oact)\n'
p1500
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaction(int __sig,sigaction *__act,sigaction *__oact)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaction_0060e088)();\u000a  return iVar1;\u000a}\u000a\u000a
p1501
S'JMP qword ptr [0x0060e088]\n'
p1502
S'ff 25 02 c7 20 00\n'
p1503
S'.plt:0000000000401980\n'
p1504
tp1505
sS'rpl_calloc'
p1506
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1507
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060e170)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1508
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004084db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004084e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004084e0\nPUSH RAX\nCALL 0x00401900\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401b50\n'
p1509
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 2f 94 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 65 96 ff ff\n'
p1510
S'.text:00000000004084a0\n.text:00000000004084a3\n.text:00000000004084a8\n.text:00000000004084aa\n.text:00000000004084ad\n.text:00000000004084b2\n.text:00000000004084b4\n.text:00000000004084b7\n.text:00000000004084bb\n.text:00000000004084bd\n.text:00000000004084c0\n.text:00000000004084c3\n.text:00000000004084c6\n.text:00000000004084c9\n.text:00000000004084cb\n.text:00000000004084cc\n.text:00000000004084d1\n.text:00000000004084d7\n.text:00000000004084d9\n.text:00000000004084da\n.text:00000000004084db\n.text:00000000004084e0\n.text:00000000004084e3\n.text:00000000004084e6\n'
p1511
tp1512
sS'memset'
p1513
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1514
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060e128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0060e128]\n'
p1516
S'ff 25 62 c6 20 00\n'
p1517
S'.plt:0000000000401ac0\n'
p1518
tp1519
sS'getc_unlocked'
p1520
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1521
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060e080)();\u000a  return iVar1;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0060e080]\n'
p1523
S'ff 25 0a c7 20 00\n'
p1524
S'.plt:0000000000401970\n'
p1525
tp1526
sS'cleanup'
p1527
(S'\n__stdcall cleanup(EVP_PKEY_CTX * ctx)\n'
p1528
V\u000avoid cleanup(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  iVar2 = close(0);\u000a  if (iVar2 < 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"closing input file %s",5);\u000a    pcVar5 = quotearg_style((char *)0x4);\u000a    nl_error((char *)0x1,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a  iVar2 = close(1);\u000a  if (-1 < iVar2) {\u000a    return;\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar1 = *puVar3;\u000a  uVar4 = dcgettext(0,"closing output file %s",5);\u000a  pcVar5 = quotearg_style((char *)0x4);\u000a  nl_error((char *)0x1,(ulong)uVar1,uVar4,pcVar5);\u000a  return;\u000a}\u000a\u000a
p1529
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nXOR EDI,EDI\nCALL 0x00401af0\nTEST EAX,EAX\nJNS 0x004041ae\nCALL 0x00401900\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a23c\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBX,RAX\nMOV RSI,qword ptr [0x0060e4a0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00403360\nMOV EDI,0x1\nCALL 0x00401af0\nTEST EAX,EAX\nJS 0x004041c3\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x00401900\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a252\nMOV EDX,0x5\nCALL 0x00401a00\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060e4c0]\nMOV EDI,0x4\nCALL 0x00407260\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00403360\n'
p1530
S'55\n53\n50\n31 ff\ne8 86 d9 ff ff\n85 c0\n79 40\ne8 8d d7 ff ff\n8b 28\n31 ff\nbe 3c a2 40 00\nba 05 00 00 00\ne8 7a d8 ff ff\n48 89 c3\n48 8b 35 10 a3 20 00\nbf 04 00 00 00\ne8 c6 30 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 da\ne8 b2 f1 ff ff\nbf 01 00 00 00\ne8 38 d9 ff ff\n85 c0\n78 07\n48 83 c4 08\n5b\n5d\nc3\ne8 38 d7 ff ff\n8b 18\n31 ff\nbe 52 a2 40 00\nba 05 00 00 00\ne8 25 d8 ff ff\n48 89 c5\n48 8b 35 db a2 20 00\nbf 04 00 00 00\ne8 71 30 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\n48 83 c4 08\n5b\n5d\ne9 57 f1 ff ff\n'
p1531
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404162\n.text:0000000000404163\n.text:0000000000404165\n.text:000000000040416a\n.text:000000000040416c\n.text:000000000040416e\n.text:0000000000404173\n.text:0000000000404175\n.text:0000000000404177\n.text:000000000040417c\n.text:0000000000404181\n.text:0000000000404186\n.text:0000000000404189\n.text:0000000000404190\n.text:0000000000404195\n.text:000000000040419a\n.text:000000000040419d\n.text:00000000004041a2\n.text:00000000004041a4\n.text:00000000004041a6\n.text:00000000004041a9\n.text:00000000004041ae\n.text:00000000004041b3\n.text:00000000004041b8\n.text:00000000004041ba\n.text:00000000004041bc\n.text:00000000004041c0\n.text:00000000004041c1\n.text:00000000004041c2\n.text:00000000004041c3\n.text:00000000004041c8\n.text:00000000004041ca\n.text:00000000004041cc\n.text:00000000004041d1\n.text:00000000004041d6\n.text:00000000004041db\n.text:00000000004041de\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041ef\n.text:00000000004041f2\n.text:00000000004041f7\n.text:00000000004041f9\n.text:00000000004041fb\n.text:00000000004041fe\n.text:0000000000404202\n.text:0000000000404203\n.text:0000000000404204\n'
p1532
tp1533
sS'memmove'
p1534
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060e200)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x0060e200]\n'
p1537
S'ff 25 8a c5 20 00\n'
p1538
S'.plt:0000000000401c70\n'
p1539
tp1540
sS'c_isascii'
p1541
(S'\n__stdcall c_isascii()\n'
p1542
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1543
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1544
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1545
S'.text:0000000000408b90\n.text:0000000000408b96\n.text:0000000000408b99\n'
p1546
tp1547
sS'__xargmatch_internal'
p1548
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1549
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1550
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00408800\nTEST RAX,RAX\nJNS 0x00408ab9\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00408900\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00408970\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1551
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1552
S'.text:0000000000408a60\n.text:0000000000408a61\n.text:0000000000408a63\n.text:0000000000408a65\n.text:0000000000408a67\n.text:0000000000408a69\n.text:0000000000408a6a\n.text:0000000000408a6b\n.text:0000000000408a6e\n.text:0000000000408a71\n.text:0000000000408a74\n.text:0000000000408a77\n.text:0000000000408a7a\n.text:0000000000408a7d\n.text:0000000000408a80\n.text:0000000000408a83\n.text:0000000000408a86\n.text:0000000000408a89\n.text:0000000000408a8e\n.text:0000000000408a91\n.text:0000000000408a93\n.text:0000000000408a96\n.text:0000000000408a99\n.text:0000000000408a9c\n.text:0000000000408aa1\n.text:0000000000408aa4\n.text:0000000000408aa7\n.text:0000000000408aaa\n.text:0000000000408aaf\n.text:0000000000408ab2\n.text:0000000000408ab9\n.text:0000000000408abd\n.text:0000000000408abe\n.text:0000000000408ac0\n.text:0000000000408ac2\n.text:0000000000408ac4\n.text:0000000000408ac6\n.text:0000000000408ac7\n'
p1553
tp1554
sS'__ctype_b_loc'
p1555
(S'\n__stdcall __ctype_b_loc()\n'
p1556
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060e288)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1557
S'JMP qword ptr [0x0060e288]\n'
p1558
S'ff 25 02 c5 20 00\n'
p1559
S'.plt:0000000000401d80\n'
p1560
tp1561
sS'sigaddset'
p1562
(S'\n__stdcall sigaddset(sigset_t * __set, int __signo)\n'
p1563
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaddset(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaddset_0060e278)();\u000a  return iVar1;\u000a}\u000a\u000a
p1564
S'JMP qword ptr [0x0060e278]\n'
p1565
S'ff 25 12 c5 20 00\n'
p1566
S'.plt:0000000000401d60\n'
p1567
tp1568
sS'__vasprintf_chk'
p1569
(S'\n__stdcall __vasprintf_chk()\n'
p1570
V\u000avoid __vasprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___vasprintf_chk_0060e1c0)();\u000a  return;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060e1c0]\n'
p1572
S'ff 25 ca c5 20 00\n'
p1573
S'.plt:0000000000401bf0\n'
p1574
tp1575
sS'quotearg'
p1576
(S'\n__stdcall quotearg(char * arg)\n'
p1577
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1578
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00406f80\n'
p1579
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1580
S'.text:0000000000407160\n.text:0000000000407163\n.text:0000000000407165\n.text:0000000000407168\n'
p1581
tp1582
sS'_start'
p1583
(S'\n__stdcall _start()\n'
p1584
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060dff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1585
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4090b0\nMOV RCX,0x409040\nMOV RDI,0x402330\nCALL qword ptr [0x0060dff0]\nHLT\n'
p1586
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 b0 90 40 00\n48 c7 c1 40 90 40 00\n48 c7 c7 30 23 40 00\nff 15 26 c2 20 00\nf4\n'
p1587
S'.text:0000000000401da0\n.text:0000000000401da2\n.text:0000000000401da5\n.text:0000000000401da6\n.text:0000000000401da9\n.text:0000000000401dad\n.text:0000000000401dae\n.text:0000000000401daf\n.text:0000000000401db6\n.text:0000000000401dbd\n.text:0000000000401dc4\n.text:0000000000401dca\n'
p1588
tp1589
sS'c_iscntrl'
p1590
(S'\n__stdcall c_iscntrl()\n'
p1591
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1592
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00408bb8\nRET\nCMP EDI,0x7f\nJZ 0x00408bb7\nXOR EAX,EAX\nRET\n'
p1593
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1594
S'.text:0000000000408bb0\n.text:0000000000408bb2\n.text:0000000000408bb5\n.text:0000000000408bb7\n.text:0000000000408bb8\n.text:0000000000408bbb\n.text:0000000000408bbd\n.text:0000000000408bbf\n'
p1595
tp1596
sS'humblock'
p1597
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p1598
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_00405dea;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_00405dea:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x00405daa\nMOV EDI,0x40abfe\nCALL 0x004018b0\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x00405daa\nMOV EDI,0x40ac09\nCALL 0x004018b0\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00405e46\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x40ac50\nMOV EDX,0x40ac68\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00408800\nTEST EAX,EAX\nJS 0x00405df1\nCDQE\nOR EBP,dword ptr [0x40ac68 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x00405e12\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x40ac13\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x00408020\nTEST EAX,EAX\nJZ 0x00405e1d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x00405dea\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x00405e4f\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x00405e30\nJMP 0x00405dea\nXOR EBP,EBP\nCALL 0x00405e80\nJMP 0x00405de7\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x00405e70\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x00405dea\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x00405dea\n'
p1600
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf fe ab 40 00\ne8 24 bb ff ff\n48 89 c7\n48 85 ff\n75 16\nbf 09 ac 40 00\ne8 12 bb ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe 50 ac 40 00\nba 68 ac 40 00\nb9 04 00 00 00\n48 89 df\ne8 2b 2a 00 00\n85 c0\n78 18\n48 98\n0b 2c 85 68 ac 40 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 13 ac 40 00\n48 89 df\n4c 89 f9\ne8 19 22 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p1601
S'.text:0000000000405d70\n.text:0000000000405d71\n.text:0000000000405d73\n.text:0000000000405d75\n.text:0000000000405d76\n.text:0000000000405d77\n.text:0000000000405d7a\n.text:0000000000405d7d\n.text:0000000000405d80\n.text:0000000000405d82\n.text:0000000000405d87\n.text:0000000000405d8c\n.text:0000000000405d8f\n.text:0000000000405d92\n.text:0000000000405d94\n.text:0000000000405d99\n.text:0000000000405d9e\n.text:0000000000405da1\n.text:0000000000405da4\n.text:0000000000405daa\n.text:0000000000405dac\n.text:0000000000405daf\n.text:0000000000405db3\n.text:0000000000405db7\n.text:0000000000405dbb\n.text:0000000000405dbe\n.text:0000000000405dc3\n.text:0000000000405dc8\n.text:0000000000405dcd\n.text:0000000000405dd0\n.text:0000000000405dd5\n.text:0000000000405dd7\n.text:0000000000405dd9\n.text:0000000000405ddb\n.text:0000000000405de2\n.text:0000000000405de7\n.text:0000000000405dea\n.text:0000000000405ded\n.text:0000000000405def\n.text:0000000000405df1\n.text:0000000000405df4\n.text:0000000000405df6\n.text:0000000000405dfc\n.text:0000000000405dff\n.text:0000000000405e02\n.text:0000000000405e07\n.text:0000000000405e09\n.text:0000000000405e0b\n.text:0000000000405e12\n.text:0000000000405e16\n.text:0000000000405e17\n.text:0000000000405e19\n.text:0000000000405e1b\n.text:0000000000405e1c\n.text:0000000000405e1d\n.text:0000000000405e1f\n.text:0000000000405e21\n.text:0000000000405e23\n.text:0000000000405e25\n.text:0000000000405e29\n.text:0000000000405e30\n.text:0000000000405e33\n.text:0000000000405e35\n.text:0000000000405e39\n.text:0000000000405e3c\n.text:0000000000405e3f\n.text:0000000000405e42\n.text:0000000000405e44\n.text:0000000000405e46\n.text:0000000000405e48\n.text:0000000000405e4d\n.text:0000000000405e4f\n.text:0000000000405e51\n.text:0000000000405e57\n.text:0000000000405e5d\n.text:0000000000405e61\n.text:0000000000405e64\n.text:0000000000405e66\n.text:0000000000405e6a\n.text:0000000000405e70\n.text:0000000000405e73\n.text:0000000000405e75\n'
p1602
tp1603
sS'c_isblank'
p1604
(S'\n__stdcall c_isblank()\n'
p1605
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1606
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1607
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1608
S'.text:0000000000408ba0\n.text:0000000000408ba3\n.text:0000000000408ba6\n.text:0000000000408ba9\n.text:0000000000408bac\n.text:0000000000408bae\n'
p1609
tp1610
sS'atexit'
p1611
(S'\n__stdcall atexit(__func * __func)\n'
p1612
V\u000a/* WARNING: Removing unreachable block (ram,0x004090e0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060e238)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1613
S'MOV RAX,0x60e2a0\nTEST RAX,RAX\nJZ 0x004090e0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401ce0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401ce0\n'
p1614
S'48 c7 c0 a0 e2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 0a 8c ff ff\n31 d2\n31 f6\ne9 f7 8b ff ff\n'
p1615
S'.text:00000000004090c0\n.text:00000000004090c7\n.text:00000000004090ca\n.text:00000000004090cc\n.text:00000000004090cf\n.text:00000000004090d1\n.text:00000000004090e0\n.text:00000000004090e2\n.text:00000000004090e4\n'
p1616
tp1617
sS'fdopen'
p1618
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1619
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060e1e8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0060e1e8]\n'
p1621
S'ff 25 a2 c5 20 00\n'
p1622
S'.plt:0000000000401c40\n'
p1623
tp1624
sS'error'
p1625
(S'\n__stdcall error()\n'
p1626
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060e208)();\u000a  return;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x0060e208]\n'
p1628
S'ff 25 82 c5 20 00\n'
p1629
S'.plt:0000000000401c80\n'
p1630
tp1631
sS'strcaseeq6'
p1632
(S'\n__stdcall strcaseeq6()\n'
p1633
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1634
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00407822\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407829\nJMP 0x0040783e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040783e\nTEST BPL,BPL\nJZ 0x00407839\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00407850\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1635
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 31 14 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1636
S'.text:0000000000407800\n.text:0000000000407801\n.text:0000000000407802\n.text:0000000000407803\n.text:0000000000407805\n.text:0000000000407808\n.text:000000000040780a\n.text:000000000040780f\n.text:0000000000407813\n.text:0000000000407815\n.text:0000000000407817\n.text:000000000040781a\n.text:000000000040781c\n.text:000000000040781e\n.text:0000000000407820\n.text:0000000000407822\n.text:0000000000407824\n.text:0000000000407827\n.text:0000000000407829\n.text:000000000040782c\n.text:000000000040782e\n.text:0000000000407831\n.text:0000000000407835\n.text:0000000000407836\n.text:0000000000407837\n.text:0000000000407839\n.text:000000000040783e\n.text:0000000000407842\n.text:0000000000407843\n.text:0000000000407844\n'
p1637
tp1638
sS'strcaseeq5'
p1639
(S'\n__stdcall strcaseeq5()\n'
p1640
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1641
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004077d6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004077dd\nJMP 0x004077f4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004077f4\nTEST BPL,BPL\nJZ 0x004077ef\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00407800\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1642
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 7d 14 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1643
S'.text:00000000004077b0\n.text:00000000004077b1\n.text:00000000004077b3\n.text:00000000004077b4\n.text:00000000004077b7\n.text:00000000004077b9\n.text:00000000004077bc\n.text:00000000004077be\n.text:00000000004077c3\n.text:00000000004077c7\n.text:00000000004077c9\n.text:00000000004077cb\n.text:00000000004077ce\n.text:00000000004077d0\n.text:00000000004077d2\n.text:00000000004077d4\n.text:00000000004077d6\n.text:00000000004077d8\n.text:00000000004077db\n.text:00000000004077dd\n.text:00000000004077e0\n.text:00000000004077e2\n.text:00000000004077e6\n.text:00000000004077e9\n.text:00000000004077ea\n.text:00000000004077ec\n.text:00000000004077ed\n.text:00000000004077ef\n.text:00000000004077f4\n.text:00000000004077f5\n.text:00000000004077f7\n.text:00000000004077f8\n'
p1644
tp1645
sS'fsync'
p1646
(S'\n__stdcall fsync(int __fd)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fsync(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fsync_0060e210)();\u000a  return iVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x0060e210]\n'
p1649
S'ff 25 7a c5 20 00\n'
p1650
S'.plt:0000000000401c90\n'
p1651
tp1652
sS'strcaseeq7'
p1653
(S'\n__stdcall strcaseeq7()\n'
p1654
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1655
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00407872\nTEST ECX,0xffffffdf\nJNZ 0x00407876\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040787a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1656
S'53\n48 89 fb\n31 ff\ne8 e5 13 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1657
S'.text:0000000000407850\n.text:0000000000407851\n.text:0000000000407854\n.text:0000000000407856\n.text:000000000040785b\n.text:000000000040785f\n.text:0000000000407861\n.text:0000000000407863\n.text:0000000000407869\n.text:000000000040786b\n.text:0000000000407870\n.text:0000000000407871\n.text:0000000000407872\n.text:0000000000407874\n.text:0000000000407876\n.text:0000000000407878\n.text:0000000000407879\n.text:000000000040787a\n.text:000000000040787f\n.text:0000000000407880\n'
p1658
tp1659
sS'xmax'
p1660
(S'\n__stdcall xmax(size_t size1, size_t size2)\n'
p1661
V\u000asize_t xmax(size_t size1,size_t size2)\u000a\u000a{\u000a  if (size2 <= size1) {\u000a    size2 = size1;\u000a  }\u000a  return size2;\u000a}\u000a\u000a
p1662
S'CMP RDI,RSI\nCMOVNC RSI,RDI\nMOV RAX,RSI\nRET\n'
p1663
S'48 39 f7\n48 0f 43 f7\n48 89 f0\nc3\n'
p1664
S'.text:0000000000409030\n.text:0000000000409033\n.text:0000000000409037\n.text:000000000040903a\n'
p1665
tp1666
sS'alloc_ibuf'
p1667
(S'\n__stdcall alloc_ibuf()\n'
p1668
V\u000avoid alloc_ibuf(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  void *pvVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  char hbuf [652];\u000a  char acStack680 [656];\u000a  \u000a  sVar1 = input_blocksize;\u000a  if (ibuf == (char *)0x0) {\u000a    pvVar2 = malloc(input_blocksize + 3 + page_size * 2);\u000a    if (pvVar2 == (void *)0x0) {\u000a      uVar3 = dcgettext(0,"memory exhausted by input buffer of size %lu bytes (%s)",5);\u000a      pcVar4 = human_readable(input_blocksize,acStack680,0x1f1,1);\u000a      nl_error((char *)0x1,0,uVar3,sVar1,pcVar4);\u000a    }\u000a    ibuf = (char *)ptr_align((void *)((long)pvVar2 + 2),page_size);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1669
S'CMP qword ptr [0x0060e610],0x0\nJNZ 0x00404aba\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x290\nMOV R14,qword ptr [0x0060e590]\nMOV RAX,qword ptr [0x0060e390]\nLEA RDI,[R14 + RAX*0x2 + 0x3]\nCALL 0x00401bc0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00404a94\nXOR EDI,EDI\nMOV ESI,0x40a4ca\nMOV EDX,0x5\nCALL 0x00401a00\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060e590]\nMOV RSI,RSP\nMOV EDX,0x1f1\nMOV ECX,0x1\nMOV R8D,0x1\nCALL 0x004055d0\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00403360\nADD RBX,0x2\nMOV RSI,qword ptr [0x0060e390]\nMOV RDI,RBX\nCALL 0x00405260\nMOV qword ptr [0x0060e610],RAX\nADD RSP,0x290\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1670
S'48 83 3d f8 9b 20 00 00\n0f 85 9c 00 00 00\n41 57\n41 56\n53\n48 81 ec 90 02 00 00\n4c 8b 35 5f 9b 20 00\n48 8b 05 58 99 20 00\n49 8d 7c 46 03\ne8 7e d1 ff ff\n48 89 c3\n48 85 db\n75 4a\n31 ff\nbe ca a4 40 00\nba 05 00 00 00\ne8 a5 cf ff ff\n49 89 c7\n48 8b 3d 2b 9b 20 00\n48 89 e6\nba f1 01 00 00\nb9 01 00 00 00\n41 b8 01 00 00 00\ne8 53 0b 00 00\n49 89 c0\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\n4c 89 f1\ne8 cc e8 ff ff\n48 83 c3 02\n48 8b 35 f1 98 20 00\n48 89 df\ne8 b9 07 00 00\n48 89 05 62 9b 20 00\n48 81 c4 90 02 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1671
S'.text:0000000000404a10\n.text:0000000000404a18\n.text:0000000000404a1e\n.text:0000000000404a20\n.text:0000000000404a22\n.text:0000000000404a23\n.text:0000000000404a2a\n.text:0000000000404a31\n.text:0000000000404a38\n.text:0000000000404a3d\n.text:0000000000404a42\n.text:0000000000404a45\n.text:0000000000404a48\n.text:0000000000404a4a\n.text:0000000000404a4c\n.text:0000000000404a51\n.text:0000000000404a56\n.text:0000000000404a5b\n.text:0000000000404a5e\n.text:0000000000404a65\n.text:0000000000404a68\n.text:0000000000404a6d\n.text:0000000000404a72\n.text:0000000000404a78\n.text:0000000000404a7d\n.text:0000000000404a80\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a89\n.text:0000000000404a8c\n.text:0000000000404a8f\n.text:0000000000404a94\n.text:0000000000404a98\n.text:0000000000404a9f\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aae\n.text:0000000000404ab5\n.text:0000000000404ab6\n.text:0000000000404ab8\n.text:0000000000404aba\n'
p1672
tp1673
sS'strcaseeq0'
p1674
(S'\n__stdcall strcaseeq0()\n'
p1675
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1676
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00407585\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040758c\nJMP 0x004075c0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004075c0\nTEST BPL,BPL\nJZ 0x004075bb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004075d0\nJMP 0x004075c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1677
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 16 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1678
S'.text:0000000000407550\n.text:0000000000407551\n.text:0000000000407553\n.text:0000000000407555\n.text:0000000000407557\n.text:0000000000407559\n.text:000000000040755a\n.text:000000000040755b\n.text:000000000040755e\n.text:0000000000407561\n.text:0000000000407564\n.text:0000000000407567\n.text:0000000000407569\n.text:000000000040756c\n.text:000000000040756e\n.text:0000000000407573\n.text:0000000000407576\n.text:0000000000407578\n.text:000000000040757a\n.text:000000000040757d\n.text:000000000040757f\n.text:0000000000407581\n.text:0000000000407583\n.text:0000000000407585\n.text:0000000000407587\n.text:000000000040758a\n.text:000000000040758c\n.text:000000000040758f\n.text:0000000000407591\n.text:0000000000407595\n.text:000000000040759a\n.text:000000000040759d\n.text:00000000004075a1\n.text:00000000004075a5\n.text:00000000004075a9\n.text:00000000004075ad\n.text:00000000004075b1\n.text:00000000004075b4\n.text:00000000004075b9\n.text:00000000004075bb\n.text:00000000004075c0\n.text:00000000004075c4\n.text:00000000004075c5\n.text:00000000004075c7\n.text:00000000004075c9\n.text:00000000004075cb\n.text:00000000004075cd\n.text:00000000004075ce\n'
p1679
tp1680
sS'strcaseeq2'
p1681
(S'\n__stdcall strcaseeq2()\n'
p1682
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1683
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00407696\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040769d\nJMP 0x004076ca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004076ca\nTEST BPL,BPL\nJZ 0x004076c5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004076e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1684
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 15 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1685
S'.text:0000000000407660\n.text:0000000000407661\n.text:0000000000407663\n.text:0000000000407665\n.text:0000000000407667\n.text:0000000000407669\n.text:000000000040766a\n.text:000000000040766b\n.text:000000000040766e\n.text:0000000000407671\n.text:0000000000407674\n.text:0000000000407677\n.text:0000000000407679\n.text:000000000040767c\n.text:000000000040767e\n.text:0000000000407683\n.text:0000000000407687\n.text:0000000000407689\n.text:000000000040768b\n.text:000000000040768e\n.text:0000000000407690\n.text:0000000000407692\n.text:0000000000407694\n.text:0000000000407696\n.text:0000000000407698\n.text:000000000040769b\n.text:000000000040769d\n.text:00000000004076a0\n.text:00000000004076a2\n.text:00000000004076a6\n.text:00000000004076aa\n.text:00000000004076ae\n.text:00000000004076b2\n.text:00000000004076b5\n.text:00000000004076b9\n.text:00000000004076ba\n.text:00000000004076bc\n.text:00000000004076be\n.text:00000000004076c0\n.text:00000000004076c2\n.text:00000000004076c3\n.text:00000000004076c5\n.text:00000000004076ca\n.text:00000000004076ce\n.text:00000000004076cf\n.text:00000000004076d1\n.text:00000000004076d3\n.text:00000000004076d5\n.text:00000000004076d7\n.text:00000000004076d8\n'
p1686
tp1687
sS'strcaseeq1'
p1688
(S'\n__stdcall strcaseeq1()\n'
p1689
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1690
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040760d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407614\nJMP 0x00407647\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00407647\nTEST BPL,BPL\nJZ 0x00407642\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407660\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1691
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 46 16 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1692
S'.text:00000000004075d0\n.text:00000000004075d1\n.text:00000000004075d3\n.text:00000000004075d5\n.text:00000000004075d7\n.text:00000000004075d9\n.text:00000000004075da\n.text:00000000004075db\n.text:00000000004075e0\n.text:00000000004075e3\n.text:00000000004075e6\n.text:00000000004075e9\n.text:00000000004075eb\n.text:00000000004075ee\n.text:00000000004075f3\n.text:00000000004075f5\n.text:00000000004075fa\n.text:00000000004075fe\n.text:0000000000407600\n.text:0000000000407602\n.text:0000000000407605\n.text:0000000000407607\n.text:0000000000407609\n.text:000000000040760b\n.text:000000000040760d\n.text:000000000040760f\n.text:0000000000407612\n.text:0000000000407614\n.text:0000000000407617\n.text:0000000000407619\n.text:000000000040761d\n.text:0000000000407621\n.text:0000000000407625\n.text:000000000040762b\n.text:000000000040762f\n.text:0000000000407632\n.text:0000000000407636\n.text:0000000000407637\n.text:0000000000407639\n.text:000000000040763b\n.text:000000000040763d\n.text:000000000040763f\n.text:0000000000407640\n.text:0000000000407642\n.text:0000000000407647\n.text:000000000040764b\n.text:000000000040764c\n.text:000000000040764e\n.text:0000000000407650\n.text:0000000000407652\n.text:0000000000407654\n.text:0000000000407655\n'
p1693
tp1694
sS'strcaseeq4'
p1695
(S'\n__stdcall strcaseeq4()\n'
p1696
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1697
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040777c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407783\nJMP 0x004077a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004077a4\nTEST BPL,BPL\nJZ 0x0040779f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004077b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1698
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 d7 14 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1699
S'.text:0000000000407750\n.text:0000000000407751\n.text:0000000000407753\n.text:0000000000407755\n.text:0000000000407756\n.text:0000000000407757\n.text:000000000040775a\n.text:000000000040775d\n.text:000000000040775f\n.text:0000000000407762\n.text:0000000000407764\n.text:0000000000407769\n.text:000000000040776d\n.text:000000000040776f\n.text:0000000000407771\n.text:0000000000407774\n.text:0000000000407776\n.text:0000000000407778\n.text:000000000040777a\n.text:000000000040777c\n.text:000000000040777e\n.text:0000000000407781\n.text:0000000000407783\n.text:0000000000407786\n.text:0000000000407788\n.text:000000000040778c\n.text:0000000000407790\n.text:0000000000407793\n.text:0000000000407797\n.text:0000000000407798\n.text:000000000040779a\n.text:000000000040779c\n.text:000000000040779d\n.text:000000000040779f\n.text:00000000004077a4\n.text:00000000004077a8\n.text:00000000004077a9\n.text:00000000004077ab\n.text:00000000004077ad\n.text:00000000004077ae\n'
p1700
tp1701
sS'strcaseeq3'
p1702
(S'\n__stdcall strcaseeq3()\n'
p1703
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1704
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00408c40\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00407710\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00407717\nJMP 0x0040773a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040773a\nTEST BPL,BPL\nJZ 0x00407735\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407750\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1705
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 43 15 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1706
S'.text:00000000004076e0\n.text:00000000004076e1\n.text:00000000004076e3\n.text:00000000004076e5\n.text:00000000004076e7\n.text:00000000004076e8\n.text:00000000004076eb\n.text:00000000004076ee\n.text:00000000004076f1\n.text:00000000004076f3\n.text:00000000004076f6\n.text:00000000004076f8\n.text:00000000004076fd\n.text:0000000000407701\n.text:0000000000407703\n.text:0000000000407705\n.text:0000000000407708\n.text:000000000040770a\n.text:000000000040770c\n.text:000000000040770e\n.text:0000000000407710\n.text:0000000000407712\n.text:0000000000407715\n.text:0000000000407717\n.text:000000000040771a\n.text:000000000040771c\n.text:0000000000407720\n.text:0000000000407724\n.text:0000000000407728\n.text:000000000040772b\n.text:000000000040772c\n.text:000000000040772e\n.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407733\n.text:0000000000407735\n.text:000000000040773a\n.text:000000000040773b\n.text:000000000040773d\n.text:000000000040773f\n.text:0000000000407741\n.text:0000000000407742\n'
p1707
tp1708
sS'register_tm_clones'
p1709
(S'\n__stdcall register_tm_clones()\n'
p1710
V\u000a/* WARNING: Removing unreachable block (ram,0x00401e33) */\u000a/* WARNING: Removing unreachable block (ram,0x00401e3d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1711
S'MOV ESI,0x60e330\nPUSH RBP\nSUB RSI,0x60e330\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401e48\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401e48\nPOP RBP\nMOV EDI,0x60e330\nJMP RAX\nPOP RBP\nRET\n'
p1712
S'be 30 e3 60 00\n55\n48 81 ee 30 e3 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 30 e3 60 00\nff e0\n5d\nc3\n'
p1713
S'.text:0000000000401e10\n.text:0000000000401e15\n.text:0000000000401e16\n.text:0000000000401e1d\n.text:0000000000401e21\n.text:0000000000401e24\n.text:0000000000401e27\n.text:0000000000401e2b\n.text:0000000000401e2e\n.text:0000000000401e31\n.text:0000000000401e33\n.text:0000000000401e38\n.text:0000000000401e3b\n.text:0000000000401e3d\n.text:0000000000401e3e\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e49\n'
p1714
tp1715
sS'c_islower'
p1716
(S'\n__stdcall c_islower()\n'
p1717
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1718
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1719
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1720
S'.text:0000000000408be0\n.text:0000000000408be3\n.text:0000000000408be6\n.text:0000000000408be9\n'
p1721
tp1722
sS'xtime_nonnegative_nsec'
p1723
(S'\n__stdcall xtime_nonnegative_nsec(xtime_t t)\n'
p1724
V\u000along xtime_nonnegative_nsec(xtime_t t)\u000a\u000a{\u000a  return t + (t / 1000000000 + (t >> 0x3f)) * -1000000000;\u000a}\u000a\u000a
p1725
S'MOV RCX,RDI\nMOV RDX,0x112e0be826d694b3\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nSUB RCX,RAX\nMOV RAX,RCX\nRET\n'
p1726
S'48 89 f9\n48 ba b3 94 d6 26 e8 0b 2e 11\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 29 c1\n48 89 c8\nc3\n'
p1727
S'.text:0000000000405520\n.text:0000000000405523\n.text:000000000040552d\n.text:0000000000405530\n.text:0000000000405533\n.text:0000000000405536\n.text:000000000040553a\n.text:000000000040553e\n.text:0000000000405541\n.text:0000000000405548\n.text:000000000040554b\n.text:000000000040554e\n'
p1728
tp1729
sS'argmatch'
p1730
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1731
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1732
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401a20\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x004088c7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401930\nTEST EAX,EAX\nJNZ 0x004088b0\nMOV RDI,R15\nCALL 0x00401a20\nCMP RAX,RBX\nJZ 0x004088e9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x004088a5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x0040889c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401b20\nTEST EAX,EAX\nJZ 0x004088b0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x004088b0\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00408850\nJMP 0x004088d7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1733
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 01 92 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 d2 90 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 b6 91 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 88 92 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1734
S'.text:0000000000408800\n.text:0000000000408801\n.text:0000000000408803\n.text:0000000000408805\n.text:0000000000408807\n.text:0000000000408809\n.text:000000000040880a\n.text:000000000040880e\n.text:0000000000408811\n.text:0000000000408814\n.text:0000000000408817\n.text:000000000040881a\n.text:000000000040881f\n.text:0000000000408822\n.text:0000000000408827\n.text:000000000040882b\n.text:000000000040882e\n.text:0000000000408834\n.text:000000000040883d\n.text:000000000040883f\n.text:0000000000408844\n.text:0000000000408849\n.text:000000000040884b\n.text:0000000000408850\n.text:0000000000408853\n.text:0000000000408856\n.text:0000000000408859\n.text:000000000040885e\n.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408865\n.text:000000000040886a\n.text:000000000040886d\n.text:000000000040886f\n.text:0000000000408875\n.text:0000000000408877\n.text:000000000040887c\n.text:000000000040887f\n.text:0000000000408881\n.text:0000000000408886\n.text:000000000040888a\n.text:000000000040888d\n.text:0000000000408890\n.text:0000000000408893\n.text:0000000000408898\n.text:000000000040889a\n.text:000000000040889c\n.text:000000000040889e\n.text:00000000004088a3\n.text:00000000004088a5\n.text:00000000004088aa\n.text:00000000004088b0\n.text:00000000004088b5\n.text:00000000004088ba\n.text:00000000004088bd\n.text:00000000004088c0\n.text:00000000004088c3\n.text:00000000004088c5\n.text:00000000004088c7\n.text:00000000004088d0\n.text:00000000004088d2\n.text:00000000004088d7\n.text:00000000004088dc\n.text:00000000004088e3\n.text:00000000004088e9\n.text:00000000004088ec\n.text:00000000004088f0\n.text:00000000004088f1\n.text:00000000004088f3\n.text:00000000004088f5\n.text:00000000004088f7\n.text:00000000004088f9\n.text:00000000004088fa\n'
p1735
tp1736
sS'fwrite'
p1737
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1738
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060e258)();\u000a  return sVar1;\u000a}\u000a\u000a
p1739
S'JMP qword ptr [0x0060e258]\n'
p1740
S'ff 25 32 c5 20 00\n'
p1741
S'.plt:0000000000401d20\n'
p1742
tp1743
sS'translate_charset'
p1744
(S'\n__stdcall translate_charset(char * new_trans)\n'
p1745
V\u000avoid translate_charset(char *new_trans)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = -0x100;\u000a  do {\u000a    *(char *)((long)&input_file + lVar1) = new_trans[(ulong)*(byte *)((long)&input_file + lVar1)];\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 0);\u000a  translation_needed = 1;\u000a  return;\u000a}\u000a\u000a
p1746
S'MOV RAX,-0x100\nNOP word ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [0x60e4a0 + RAX]\nMOVZX ECX,byte ptr [RDI + RCX*0x1]\nMOV byte ptr [0x60e4a0 + RAX],CL\nINC RAX\nJNZ 0x00404560\nMOV byte ptr [0x0060e600],0x1\nRET\n'
p1747
S'48 c7 c0 00 ff ff ff\n66 0f 1f 84 00 00 00 00 00\n0f b6 88 a0 e4 60 00\n0f b6 0c 0f\n88 88 a0 e4 60 00\n48 ff c0\n75 ea\nc6 05 83 a0 20 00 01\nc3\n'
p1748
S'.text:0000000000404550\n.text:0000000000404557\n.text:0000000000404560\n.text:0000000000404567\n.text:000000000040456b\n.text:0000000000404571\n.text:0000000000404574\n.text:0000000000404576\n.text:000000000040457d\n'
p1749
tp1750
sS'__do_global_dtors_aux'
p1751
(S'\n__stdcall __do_global_dtors_aux()\n'
p1752
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1753
S'CMP byte ptr [0x0060e388],0x0\nJNZ 0x00401e6a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401dd0\nPOP RBP\nMOV byte ptr [0x0060e388],0x1\nRET\n'
p1754
S'80 3d 31 c5 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 1e c5 20 00 01\nf3 c3\n'
p1755
S'.text:0000000000401e50\n.text:0000000000401e57\n.text:0000000000401e59\n.text:0000000000401e5a\n.text:0000000000401e5d\n.text:0000000000401e62\n.text:0000000000401e63\n.text:0000000000401e6a\n'
p1756
tp1757
sS'c_isprint'
p1758
(S'\n__stdcall c_isprint()\n'
p1759
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1760
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1761
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1762
S'.text:0000000000408bf0\n.text:0000000000408bf3\n.text:0000000000408bf6\n.text:0000000000408bf9\n'
p1763
tp1764
sS'_fini'
p1765
(S'\n__stdcall _fini()\n'
p1766
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1767
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1768
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1769
S'.fini:0000000000409100\n.fini:0000000000409104\n.fini:0000000000409108\n'
p1770
tp1771
sS'FUN_00401890'
p1772
(S'\n__stdcall FUN_00401890()\n'
p1773
V\u000avoid FUN_00401890(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060e010)();\u000a  return;\u000a}\u000a\u000a
p1774
S'PUSH qword ptr [0x0060e008]\nJMP qword ptr [0x0060e010]\n'
p1775
S'ff 35 72 c7 20 00\nff 25 74 c7 20 00\n'
p1776
S'.plt:0000000000401890\n.plt:0000000000401896\n'
p1777
tp1778
sS'rpl_fcntl'
p1779
(S'\n__stdcall rpl_fcntl()\n'
p1780
V\u000a/* WARNING: Removing unreachable block (ram,0x0040862b) */\u000a/* WARNING: Removing unreachable block (ram,0x00408694) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00408639 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1781
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004085bb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00408616\nCMP EAX,0x28\nJA 0x0040862b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00408639\nCMP EAX,0x28\nJA 0x00408694\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004086a2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060e7b0],0x0\nJS 0x004086b3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004019a0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00408684\nCALL 0x00401900\nCMP dword ptr [RAX],0x16\nJNZ 0x00408684\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00408570\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00408716\nMOV dword ptr [0x0060e7b0],R15D\nTEST EBP,EBP\nJNS 0x004086c7\nJMP 0x00408716\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004019a0\nMOV EBP,EAX\nJMP 0x00408716\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00408570\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408716\nCMP dword ptr [0x0060e7b0],-0x1\nJNZ 0x00408716\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004019a0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004086fc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004019a0\nCMP EAX,-0x1\nJNZ 0x00408716\nCALL 0x00401900\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401af0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1782
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 6e 61 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 50 93 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 92 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 25 61 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 f1 92 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d e2 60 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 c2 92 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 a9 92 ff ff\n83 f8 ff\n75 1a\ne8 ff 91 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 e2 93 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1783
S'.text:0000000000408570\n.text:0000000000408571\n.text:0000000000408573\n.text:0000000000408575\n.text:0000000000408576\n.text:000000000040857d\n.text:0000000000408580\n.text:0000000000408582\n.text:0000000000408584\n.text:0000000000408589\n.text:000000000040858e\n.text:0000000000408593\n.text:000000000040859b\n.text:00000000004085a3\n.text:00000000004085ab\n.text:00000000004085b3\n.text:00000000004085bb\n.text:00000000004085c0\n.text:00000000004085c5\n.text:00000000004085ca\n.text:00000000004085cf\n.text:00000000004085d4\n.text:00000000004085d9\n.text:00000000004085e1\n.text:00000000004085e6\n.text:00000000004085ee\n.text:00000000004085f5\n.text:00000000004085f9\n.text:00000000004085ff\n.text:0000000000408601\n.text:0000000000408604\n.text:0000000000408606\n.text:000000000040860b\n.text:000000000040860e\n.text:0000000000408611\n.text:0000000000408614\n.text:0000000000408616\n.text:0000000000408619\n.text:000000000040861b\n.text:000000000040861e\n.text:0000000000408623\n.text:0000000000408626\n.text:0000000000408629\n.text:000000000040862b\n.text:0000000000408630\n.text:0000000000408634\n.text:0000000000408639\n.text:000000000040863b\n.text:0000000000408642\n.text:0000000000408644\n.text:0000000000408646\n.text:0000000000408649\n.text:000000000040864b\n.text:0000000000408650\n.text:0000000000408652\n.text:0000000000408658\n.text:000000000040865a\n.text:000000000040865c\n.text:0000000000408661\n.text:0000000000408664\n.text:0000000000408666\n.text:0000000000408668\n.text:000000000040866a\n.text:000000000040866d\n.text:000000000040866f\n.text:0000000000408674\n.text:0000000000408676\n.text:000000000040867c\n.text:000000000040867e\n.text:0000000000408684\n.text:000000000040868b\n.text:000000000040868d\n.text:000000000040868f\n.text:0000000000408694\n.text:0000000000408699\n.text:000000000040869d\n.text:00000000004086a2\n.text:00000000004086a5\n.text:00000000004086a7\n.text:00000000004086aa\n.text:00000000004086af\n.text:00000000004086b1\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086b7\n.text:00000000004086ba\n.text:00000000004086bc\n.text:00000000004086c1\n.text:00000000004086c3\n.text:00000000004086c5\n.text:00000000004086c7\n.text:00000000004086ce\n.text:00000000004086d0\n.text:00000000004086d5\n.text:00000000004086d7\n.text:00000000004086d9\n.text:00000000004086de\n.text:00000000004086e0\n.text:00000000004086e2\n.text:00000000004086e4\n.text:00000000004086e7\n.text:00000000004086ec\n.text:00000000004086ee\n.text:00000000004086f0\n.text:00000000004086f2\n.text:00000000004086f7\n.text:00000000004086fa\n.text:00000000004086fc\n.text:0000000000408701\n.text:0000000000408704\n.text:0000000000408707\n.text:0000000000408709\n.text:000000000040870e\n.text:0000000000408711\n.text:0000000000408716\n.text:0000000000408718\n.text:000000000040871f\n.text:0000000000408720\n.text:0000000000408722\n.text:0000000000408724\n.text:0000000000408725\n'
p1784
tp1785
sS'__fpending'
p1786
(S'\n__stdcall __fpending()\n'
p1787
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060e078)();\u000a  return;\u000a}\u000a\u000a
p1788
S'JMP qword ptr [0x0060e078]\n'
p1789
S'ff 25 12 c7 20 00\n'
p1790
S'.plt:0000000000401960\n'
p1791
tp1792
s.