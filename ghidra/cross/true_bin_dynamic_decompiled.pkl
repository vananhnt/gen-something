(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x606e08]\nPUSH RBP\nLEA RBP,[0x606e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401000\nTEST RBP,RBP\nJZ 0x00403e56\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00403e40\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 f6 2f 20 00\n55\n48 8d 2d f6 2f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 cf d1 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000403e00\n.text:0000000000403e02\n.text:0000000000403e04\n.text:0000000000403e07\n.text:0000000000403e09\n.text:0000000000403e0b\n.text:0000000000403e12\n.text:0000000000403e13\n.text:0000000000403e1a\n.text:0000000000403e1b\n.text:0000000000403e1e\n.text:0000000000403e21\n.text:0000000000403e24\n.text:0000000000403e28\n.text:0000000000403e2c\n.text:0000000000403e31\n.text:0000000000403e34\n.text:0000000000403e36\n.text:0000000000403e38\n.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e46\n.text:0000000000403e49\n.text:0000000000403e4d\n.text:0000000000403e51\n.text:0000000000403e54\n.text:0000000000403e56\n.text:0000000000403e5a\n.text:0000000000403e5b\n.text:0000000000403e5c\n.text:0000000000403e5e\n.text:0000000000403e60\n.text:0000000000403e62\n.text:0000000000403e64\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00607110)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00607110]\n'
p11
S'ff 25 ea 5e 20 00\n'
p12
S'.plt:0000000000401220\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403856\n.text:0000000000403859\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00404863,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x403247;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4032c8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40335c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004030d8\nMOV EDX,0x404850\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004012e0\nJMP 0x004030ed\nMOV EDX,0x40485c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004012e0\nXOR EDI,EDI\nMOV ESI,0x404863\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x404b30\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004012e0\nXOR EDI,EDI\nMOV ESI,0x404867\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401190\nCMP R12,0x9\nJA 0x00403176\nJMP qword ptr [0x404800 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x404932\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004012e0\nXOR EDI,EDI\nMOV ESI,0x404a71\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x38\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x404942\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004012e0\nXOR EDI,EDI\nMOV ESI,0x404959\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004012e0\nXOR EDI,EDI\nMOV ESI,0x404975\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x18\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x404995\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x18\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x4049b9\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x28\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x4049e1\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x28\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x404a0d\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x38\nJMP 0x004033e7\nXOR EDI,EDI\nMOV ESI,0x404a3d\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004012e0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401050\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 50 48 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 0a e2 ff ff\neb 15\nba 5c 48 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 f3 e1 ff ff\n31 ff\nbe 63 48 40 00\nba 05 00 00 00\ne8 f2 df ff ff\n48 89 c1\nbe 01 00 00 00\nba 30 4b 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 c5 e1 ff ff\n31 ff\nbe 67 48 40 00\nba 05 00 00 00\ne8 c4 df ff ff\n48 89 c7\n4c 89 f6\ne8 59 e0 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 00 48 40 00\n31 ff\nbe 32 49 40 00\nba 05 00 00 00\ne8 9a df ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a e1 ff ff\n31 ff\nbe 71 4a 40 00\nba 05 00 00 00\ne8 69 df ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 21 e1 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 42 49 40 00\nba 05 00 00 00\ne8 17 df ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 e3 e0 ff ff\n31 ff\nbe 59 49 40 00\nba 05 00 00 00\ne8 e2 de ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa e0 ff ff\n31 ff\nbe 75 49 40 00\nba 05 00 00 00\ne8 a9 de ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 74 e0 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 95 49 40 00\nba 05 00 00 00\ne8 6a de ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 32 e0 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe b9 49 40 00\nba 05 00 00 00\ne8 28 de ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e8 df ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe e1 49 40 00\nba 05 00 00 00\ne8 de dd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9e df ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 0d 4a 40 00\nba 05 00 00 00\ne8 94 dd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4c df ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 3d 4a 40 00\nba 05 00 00 00\ne8 45 dd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fd de ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c dc ff ff\n'
p26
S'.text:00000000004030a0\n.text:00000000004030a2\n.text:00000000004030a4\n.text:00000000004030a6\n.text:00000000004030a7\n.text:00000000004030a8\n.text:00000000004030ab\n.text:00000000004030ae\n.text:00000000004030b1\n.text:00000000004030b4\n.text:00000000004030b7\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c2\n.text:00000000004030c4\n.text:00000000004030c9\n.text:00000000004030cb\n.text:00000000004030ce\n.text:00000000004030d1\n.text:00000000004030d6\n.text:00000000004030d8\n.text:00000000004030dd\n.text:00000000004030df\n.text:00000000004030e2\n.text:00000000004030e5\n.text:00000000004030e8\n.text:00000000004030ed\n.text:00000000004030ef\n.text:00000000004030f4\n.text:00000000004030f9\n.text:00000000004030fe\n.text:0000000000403101\n.text:0000000000403106\n.text:000000000040310b\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403116\n.text:000000000040311b\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403132\n.text:0000000000403137\n.text:000000000040313b\n.text:000000000040313d\n.text:0000000000403145\n.text:0000000000403147\n.text:000000000040314c\n.text:0000000000403151\n.text:0000000000403156\n.text:0000000000403159\n.text:000000000040315c\n.text:0000000000403161\n.text:0000000000403163\n.text:0000000000403166\n.text:000000000040316a\n.text:000000000040316b\n.text:000000000040316d\n.text:000000000040316f\n.text:0000000000403171\n.text:0000000000403176\n.text:0000000000403178\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403187\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403191\n.text:0000000000403195\n.text:000000000040319a\n.text:000000000040319f\n.text:00000000004031a2\n.text:00000000004031a6\n.text:00000000004031aa\n.text:00000000004031ae\n.text:00000000004031b2\n.text:00000000004031b6\n.text:00000000004031ba\n.text:00000000004031bf\n.text:00000000004031c3\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cf\n.text:00000000004031d4\n.text:00000000004031d9\n.text:00000000004031dc\n.text:00000000004031df\n.text:00000000004031e3\n.text:00000000004031e8\n.text:00000000004031ea\n.text:00000000004031ed\n.text:00000000004031f1\n.text:00000000004031f2\n.text:00000000004031f4\n.text:00000000004031f6\n.text:00000000004031f8\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403204\n.text:0000000000403209\n.text:000000000040320e\n.text:0000000000403211\n.text:0000000000403214\n.text:0000000000403218\n.text:000000000040321c\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403226\n.text:000000000040322a\n.text:000000000040322b\n.text:000000000040322d\n.text:000000000040322f\n.text:0000000000403231\n.text:0000000000403236\n.text:0000000000403238\n.text:000000000040323d\n.text:0000000000403242\n.text:0000000000403247\n.text:000000000040324a\n.text:000000000040324d\n.text:0000000000403251\n.text:0000000000403255\n.text:0000000000403259\n.text:000000000040325e\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403267\n.text:000000000040326c\n.text:0000000000403270\n.text:0000000000403275\n.text:0000000000403277\n.text:000000000040327c\n.text:0000000000403281\n.text:0000000000403286\n.text:0000000000403289\n.text:000000000040328c\n.text:0000000000403290\n.text:0000000000403294\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a1\n.text:00000000004032a5\n.text:00000000004032a9\n.text:00000000004032ae\n.text:00000000004032b2\n.text:00000000004032b7\n.text:00000000004032b9\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032ce\n.text:00000000004032d2\n.text:00000000004032d6\n.text:00000000004032da\n.text:00000000004032df\n.text:00000000004032e4\n.text:00000000004032e7\n.text:00000000004032eb\n.text:00000000004032ef\n.text:00000000004032f3\n.text:00000000004032f8\n.text:00000000004032fc\n.text:0000000000403301\n.text:0000000000403303\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403312\n.text:0000000000403315\n.text:0000000000403318\n.text:000000000040331c\n.text:0000000000403320\n.text:0000000000403325\n.text:000000000040332a\n.text:000000000040332d\n.text:0000000000403331\n.text:0000000000403335\n.text:0000000000403339\n.text:000000000040333d\n.text:0000000000403342\n.text:0000000000403346\n.text:000000000040334b\n.text:000000000040334d\n.text:0000000000403352\n.text:0000000000403357\n.text:000000000040335c\n.text:000000000040335f\n.text:0000000000403362\n.text:0000000000403366\n.text:000000000040336a\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337b\n.text:000000000040337f\n.text:0000000000403383\n.text:0000000000403387\n.text:000000000040338b\n.text:000000000040338f\n.text:0000000000403394\n.text:0000000000403398\n.text:000000000040339a\n.text:000000000040339c\n.text:00000000004033a1\n.text:00000000004033a6\n.text:00000000004033ab\n.text:00000000004033ae\n.text:00000000004033b1\n.text:00000000004033b5\n.text:00000000004033b9\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c6\n.text:00000000004033ca\n.text:00000000004033ce\n.text:00000000004033d2\n.text:00000000004033d6\n.text:00000000004033da\n.text:00000000004033de\n.text:00000000004033e3\n.text:00000000004033e7\n.text:00000000004033e8\n.text:00000000004033ea\n.text:00000000004033ec\n.text:00000000004033ee\n.text:00000000004033ef\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"Usage: %s [ignored command line arguments]\u005cn  or:  %s OPTION\u005cn",5);\u000a  __printf_chk(1,uVar1,program_name,program_name);\u000a  uVar1 = dcgettext(0,"Exit with a status code indicating success.",5);\u000a  __printf_chk(1,&DAT_00403f01,uVar1,uVar1);\u000a  __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  uVar1 = dcgettext(0,\u000a                    "\u005cnNOTE: your shell may have its own version of %s, which usually supersedes\u005cnthe version described here.  Please refer to your shell\u005c's documentation\u005cnfor details about the options it supports.\u005cn"\u000a                    ,5);\u000a  __printf_chk(1,uVar1,&DAT_00404054,uVar1);\u000a  emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nXOR EDI,EDI\nMOV ESI,0x403ec4\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00607260]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x403f06\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x403f01\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x403f32\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,qword ptr [0x00607228]\nMOV RDI,RAX\nCALL 0x00401190\nXOR EDI,EDI\nMOV ESI,0x403f5f\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,qword ptr [0x00607228]\nMOV RDI,RAX\nCALL 0x00401190\nXOR EDI,EDI\nMOV ESI,0x403f95\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x404054\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401270\nCALL 0x004014f0\nMOV EDI,EBX\nCALL 0x004012c0\n'
p32
S'53\n89 fb\n31 ff\nbe c4 3e 40 00\nba 05 00 00 00\ne8 bc fc ff ff\n48 89 c1\n48 8b 15 22 5e 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 20 fe ff ff\n31 ff\nbe 06 3f 40 00\nba 05 00 00 00\ne8 8f fc ff ff\n48 89 c1\nbf 01 00 00 00\nbe 01 3f 40 00\n31 c0\n48 89 ca\ne8 f8 fd ff ff\n31 ff\nbe 32 3f 40 00\nba 05 00 00 00\ne8 67 fc ff ff\n48 8b 35 98 5d 20 00\n48 89 c7\ne8 f8 fc ff ff\n31 ff\nbe 5f 3f 40 00\nba 05 00 00 00\ne8 47 fc ff ff\n48 8b 35 78 5d 20 00\n48 89 c7\ne8 d8 fc ff ff\n31 ff\nbe 95 3f 40 00\nba 05 00 00 00\ne8 27 fc ff ff\n48 89 c1\nbf 01 00 00 00\nba 54 40 40 00\n31 c0\n48 89 ce\ne8 90 fd ff ff\ne8 0b 00 00 00\n89 df\ne8 d4 fd ff ff\n'
p33
S'.text:0000000000401420\n.text:0000000000401421\n.text:0000000000401423\n.text:0000000000401425\n.text:000000000040142a\n.text:000000000040142f\n.text:0000000000401434\n.text:0000000000401437\n.text:000000000040143e\n.text:0000000000401443\n.text:0000000000401445\n.text:0000000000401448\n.text:000000000040144b\n.text:0000000000401450\n.text:0000000000401452\n.text:0000000000401457\n.text:000000000040145c\n.text:0000000000401461\n.text:0000000000401464\n.text:0000000000401469\n.text:000000000040146e\n.text:0000000000401470\n.text:0000000000401473\n.text:0000000000401478\n.text:000000000040147a\n.text:000000000040147f\n.text:0000000000401484\n.text:0000000000401489\n.text:0000000000401490\n.text:0000000000401493\n.text:0000000000401498\n.text:000000000040149a\n.text:000000000040149f\n.text:00000000004014a4\n.text:00000000004014a9\n.text:00000000004014b0\n.text:00000000004014b3\n.text:00000000004014b8\n.text:00000000004014ba\n.text:00000000004014bf\n.text:00000000004014c4\n.text:00000000004014c9\n.text:00000000004014cc\n.text:00000000004014d1\n.text:00000000004014d6\n.text:00000000004014d8\n.text:00000000004014db\n.text:00000000004014e0\n.text:00000000004014e5\n.text:00000000004014e7\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00402a1d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401050\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e e6 ff ff\n'
p40
S'.text:00000000004029d0\n.text:00000000004029d4\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029e1\n.text:00000000004029e5\n.text:00000000004029ed\n.text:00000000004029f0\n.text:00000000004029f2\n.text:00000000004029f4\n.text:00000000004029f8\n.text:00000000004029fb\n.text:00000000004029ff\n.text:0000000000402a04\n.text:0000000000402a09\n.text:0000000000402a0d\n.text:0000000000402a11\n.text:0000000000402a15\n.text:0000000000402a18\n.text:0000000000402a1c\n.text:0000000000402a1d\n'
p41
tp42
sS'rpl_fclose'
p43
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p44
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00403d29;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00403d29:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004011e0\nTEST EAX,EAX\nJS 0x00403d29\nMOV RDI,RBX\nCALL 0x00401230\nTEST EAX,EAX\nJZ 0x00403cf7\nMOV RDI,RBX\nCALL 0x004011e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401140\nCMP RAX,-0x1\nJZ 0x00403d29\nMOV RDI,RBX\nCALL 0x00403d40\nTEST EAX,EAX\nJZ 0x00403d29\nCALL 0x00401060\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004010d0\nTEST EBP,EBP\nJZ 0x00403d22\nCALL 0x00401060\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004010d0\n'
p46
S'55\n53\n50\n48 89 fb\ne8 15 d5 ff ff\n85 c0\n78 5a\n48 89 df\ne8 59 d5 ff ff\n85 c0\n74 1c\n48 89 df\ne8 fd d4 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 4f d4 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 58 d3 ff ff\n8b 28\n48 89 df\ne8 be d3 ff ff\n85 ed\n74 0c\ne8 45 d3 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 99 d3 ff ff\n'
p47
S'.text:0000000000403cc0\n.text:0000000000403cc1\n.text:0000000000403cc2\n.text:0000000000403cc3\n.text:0000000000403cc6\n.text:0000000000403ccb\n.text:0000000000403ccd\n.text:0000000000403ccf\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cd9\n.text:0000000000403cdb\n.text:0000000000403cde\n.text:0000000000403ce3\n.text:0000000000403ce5\n.text:0000000000403cea\n.text:0000000000403cec\n.text:0000000000403cf1\n.text:0000000000403cf5\n.text:0000000000403cf7\n.text:0000000000403cfa\n.text:0000000000403cff\n.text:0000000000403d01\n.text:0000000000403d03\n.text:0000000000403d08\n.text:0000000000403d0a\n.text:0000000000403d0d\n.text:0000000000403d12\n.text:0000000000403d14\n.text:0000000000403d16\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d26\n.text:0000000000403d27\n.text:0000000000403d28\n.text:0000000000403d29\n.text:0000000000403d2c\n.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d32\n'
p48
tp49
sS'strcpy'
p50
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00607048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00607048]\n'
p53
S'ff 25 b2 5f 20 00\n'
p54
S'.plt:0000000000401090\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00607038)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00607038]\n'
p60
S'ff 25 c2 5f 20 00\n'
p61
S'.plt:0000000000401070\n'
p62
tp63
sS'xnrealloc'
p64
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p65
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p66
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x004035f4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00403600\nPUSH RAX\nCALL 0x00403750\n'
p67
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p68
S'.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e6\n.text:00000000004035e9\n.text:00000000004035eb\n.text:00000000004035ef\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f5\n'
p69
tp70
sS'quote'
p71
(S'\n__stdcall quote(char * arg)\n'
p72
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00402c80\n'
p74
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p75
S'.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c95\n.text:0000000000402c98\n'
p76
tp77
sS'emit_bug_reporting_address'
p78
(S'\n__stdcall emit_bug_reporting_address()\n'
p79
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x404aad\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x404ac2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x404ad8\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x404082\nMOV ECX,0x404113\nXOR EAX,EAX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x404aec\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,qword ptr [0x00607228]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401190\n'
p81
S'50\n31 ff\nbe ad 4a 40 00\nba 05 00 00 00\ne8 be db ff ff\n48 89 c1\nbf 01 00 00 00\nba c2 4a 40 00\n31 c0\n48 89 ce\ne8 27 dd ff ff\n31 ff\nbe d8 4a 40 00\nba 05 00 00 00\ne8 96 db ff ff\n48 89 c6\nbf 01 00 00 00\nba 82 40 40 00\nb9 13 41 40 00\n31 c0\ne8 fd dc ff ff\n31 ff\nbe ec 4a 40 00\nba 05 00 00 00\ne8 6c db ff ff\n48 8b 35 9d 3c 20 00\n48 89 c7\n58\ne9 fc db ff ff\n'
p82
S'.text:0000000000403520\n.text:0000000000403521\n.text:0000000000403523\n.text:0000000000403528\n.text:000000000040352d\n.text:0000000000403532\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353f\n.text:0000000000403541\n.text:0000000000403544\n.text:0000000000403549\n.text:000000000040354b\n.text:0000000000403550\n.text:0000000000403555\n.text:000000000040355a\n.text:000000000040355d\n.text:0000000000403562\n.text:0000000000403567\n.text:000000000040356c\n.text:000000000040356e\n.text:0000000000403573\n.text:0000000000403575\n.text:000000000040357a\n.text:000000000040357f\n.text:0000000000403584\n.text:000000000040358b\n.text:000000000040358e\n.text:000000000040358f\n'
p83
tp84
sS'clone_quoting_options'
p85
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p86
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401060\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x607270\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00403700\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p88
S'55\n41 56\n53\n48 89 fb\ne8 04 f8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 70 72 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p89
S'.text:0000000000401850\n.text:0000000000401851\n.text:0000000000401853\n.text:0000000000401854\n.text:0000000000401857\n.text:000000000040185c\n.text:000000000040185f\n.text:0000000000401862\n.text:0000000000401865\n.text:000000000040186a\n.text:000000000040186e\n.text:0000000000401873\n.text:0000000000401876\n.text:000000000040187b\n.text:000000000040187e\n.text:000000000040187f\n.text:0000000000401881\n.text:0000000000401882\n'
p90
tp91
sS'xmalloc'
p92
(S'\n__stdcall xmalloc(size_t n)\n'
p93
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p94
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004011f0\nTEST RBX,RBX\nJZ 0x004035d3\nTEST RAX,RAX\nJZ 0x004035d5\nPOP RBX\nRET\nCALL 0x00403750\n'
p95
S'53\n48 89 fb\ne8 27 dc ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p96
S'.text:00000000004035c0\n.text:00000000004035c1\n.text:00000000004035c4\n.text:00000000004035c9\n.text:00000000004035cc\n.text:00000000004035ce\n.text:00000000004035d1\n.text:00000000004035d3\n.text:00000000004035d4\n.text:00000000004035d5\n'
p97
tp98
sS'quotearg_char_mem'
p99
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p100
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x006072a0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00607290]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00607280]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00607270]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004018b0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004027a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p102
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d d8 47 20 00\n48 89 4c 24 30\n0f 10 05 bc 47 20 00\n0f 29 44 24 20\n0f 10 05 a0 47 20 00\n0f 29 44 24 10\n0f 10 05 84 47 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p103
S'.text:0000000000402ab0\n.text:0000000000402ab2\n.text:0000000000402ab4\n.text:0000000000402ab5\n.text:0000000000402ab9\n.text:0000000000402abb\n.text:0000000000402abe\n.text:0000000000402ac1\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402ae0\n.text:0000000000402ae5\n.text:0000000000402aec\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afb\n.text:0000000000402afd\n.text:0000000000402b02\n.text:0000000000402b04\n.text:0000000000402b07\n.text:0000000000402b0a\n.text:0000000000402b0d\n.text:0000000000402b12\n.text:0000000000402b16\n.text:0000000000402b17\n.text:0000000000402b19\n.text:0000000000402b1b\n'
p104
tp105
sS'c_isgraph'
p106
(S'\n__stdcall c_isgraph()\n'
p107
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p108
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p109
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p110
S'.text:0000000000403860\n.text:0000000000403863\n.text:0000000000403866\n.text:0000000000403869\n'
p111
tp112
sS'frame_dummy'
p113
(S'\n__stdcall frame_dummy()\n'
p114
V\u000a/* WARNING: Removing unreachable block (ram,0x0040140a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p115
S'MOV EDI,0x606e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401400\nJMP 0x00401390\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004013fb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401390\n'
p116
S'bf 18 6e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p117
S'.text:00000000004013f0\n.text:00000000004013f5\n.text:00000000004013f9\n.text:00000000004013fb\n.text:0000000000401400\n.text:0000000000401405\n.text:0000000000401408\n.text:000000000040140a\n.text:000000000040140b\n.text:000000000040140e\n.text:0000000000401410\n.text:0000000000401411\n'
p118
tp119
sS'quotearg_buffer_restyled'
p120
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p121
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00401a4c_caseD_7;\u000a  case 2:\u000a    goto switchD_00401a4c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00401a4c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00401a4c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00401a4c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00401a4c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00401a4c_caseD_7;\u000aswitchD_00401a4c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00401a4c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00401a4c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00402510;\u000aLAB_00401c30:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00402519:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00402528:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00401c3b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00401c7f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00401c7f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00402528;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00402455;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00402360;\u000a    }\u000a    goto LAB_00402528;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040248a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00402528;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004024b9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00401f78;\u000a  case '\u005ca':\u000a    goto joined_r0x00401e68;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00401e68;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00401c96_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00401e68;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00401e68;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00401c96_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00401e68:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004023ce;\u000a    }\u000a    goto LAB_00402528;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00402528;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00402528;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00402528;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00402528;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00402528;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00401c96_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00402426;\u000a      goto joined_r0x00402418;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00401f21:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00402418;\u000a      goto LAB_00402426;\u000a    }\u000a    goto LAB_00402528;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00402528;\u000a  }\u000a  goto joined_r0x00402360;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040248a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004024b9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004024b9:\u000a  if (1 < uVar10) {\u000aLAB_00401f96:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00402052;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00401f21;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00402052:\u000a        if (bVar6 != 0) goto LAB_00402528;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00401f78:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00401f96;\u000ajoined_r0x00402360:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00402360:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00402387;\u000aLAB_004023c0:\u000a    if (bVar22) goto LAB_004023c5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004023c0;\u000aLAB_00402387:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004023c5:\u000a      if (bVar6 != 0) goto LAB_00402528;\u000aLAB_004023ce:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00402418;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00402426:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00402418:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00402455:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00401c30;\u000aLAB_00402510:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00402519;\u000a  goto LAB_00401c3b;\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401100\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004025f5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4042b0 + RAX*0x8]\nMOV EDI,0x4047d8\nMOV ESI,R15D\nCALL 0x00402ca0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4047da\nMOV ESI,R15D\nCALL 0x00402ca0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00401aad\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00401ab0\nNOP\nCMP R12,RSI\nJNC 0x00401a9e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00401a90\nJMP 0x00401ab0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401110\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00401b7c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00401b7c\nMOV ECX,0x4047d6\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00401b76\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00401b17\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00401b44\nTEST RSI,RSI\nJZ 0x00401b31\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4047da\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00401b52\nMOV ECX,0x4047da\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00401b7c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004025cc\nMOV ECX,0x4047d6\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00402510\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00402519\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00401c7f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00401c7a\nCMP R11,-0x1\nJNZ 0x00401c7a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401110\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00401cd0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00401f2c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x404308 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00402528\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00402380\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00402387\nJMP 0x004023c0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401180\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00401d1d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00401c81\nJMP 0x00402528\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00401c81\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00401cab\nCMP EBX,0x2\nJNZ 0x00401cab\nTEST R13,R13\nJNZ 0x00401cab\nJMP 0x00402528\nCMP R11,-0x1\nJZ 0x00402103\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00402123\nJMP 0x00401cab\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402134\nTEST R8B,R8B\nJNZ 0x00402528\nCMP EBX,0x2\nJNZ 0x00401dd8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00401dd8\nCMP R12,RSI\nJNC 0x00401db3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00401dc2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00401dd1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00401de2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004022a8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004022a8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004022a8\nCMP RCX,RSI\nJNC 0x00401e1c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00401e2b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nJMP 0x00402380\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00401ca9\nJMP 0x00401e8a\nMOV DL,0x74\nJMP 0x00401e72\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00401ca9\nJMP 0x00401e8a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00401ca9\nJMP 0x00401e8a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00402528\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00401ca9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004023ce\nJMP 0x00402528\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00401ca9\nTEST R8B,R8B\nJNZ 0x00402528\nCMP R12,RSI\nJNC 0x00401eba\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00401ec9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00401ed8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00401ca9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004022bb\nCMP EBX,0x2\nJNZ 0x00401ca9\nTEST R8B,R8B\nJZ 0x00401ca9\nJMP 0x00402528\nCMP EBX,0x2\nJNZ 0x00402154\nTEST R8B,R8B\nJNZ 0x00402528\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00402426\nJMP 0x00402449\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00402175\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401310\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402368\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00402368\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00402052\nJMP 0x00402020\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00402009\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00402006\nCMP R12,RSI\nJNC 0x00401feb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00401ffa\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00402040\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00402040\nTEST BPL,0x1\nJZ 0x004020e3\nCMP R12,RSI\nJNC 0x00402034\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004020e3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00402020\nTEST R8B,R8B\nJNZ 0x00402528\nCMP EBX,0x2\nJNZ 0x0040209a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040209a\nCMP R12,RSI\nJNC 0x00402072\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402081\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402090\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004020a4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004020bb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004020d5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00401fd0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00402426\nJMP 0x00402449\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00401cab\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00401cab\nJMP 0x00402528\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00402455\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nJMP 0x00402380\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00401e72\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00402426\nJMP 0x00402449\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00402197\nMOV RDI,R10\nCALL 0x00401110\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401120\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040246f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00402467\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00402476\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040225e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00402256\nBT RDI,RDX\nJC 0x004025c2\nINC RCX\nCMP RCX,R14\nJC 0x00402240\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401300\nTEST EAX,EAX\nJNZ 0x00402273\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004012f0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004021b5\nJMP 0x004024b9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nJMP 0x00402380\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00401ca9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00401ca9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00401ca9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00401cab\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004024f2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00402528\nCMP R12,RSI\nJNC 0x0040231e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00402331\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402340\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040234f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nJMP 0x00402380\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004023c0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004023c5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00402420\nJMP 0x004023c5\nTEST BPL,BPL\nJZ 0x00402420\nTEST R8B,R8B\nJNZ 0x00402528\nCMP EBX,0x2\nJNZ 0x00402408\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402408\nCMP R12,RSI\nJNC 0x004023e3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004023f2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402401\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402412\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00402452\nJMP 0x0040244e\nTEST DIL,0x1\nJZ 0x00402449\nAND AL,0x1\nJNZ 0x00402449\nCMP R12,RSI\nJNC 0x00402434\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402443\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00402452\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00402510\nJMP 0x00401c30\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004024b4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004024ac\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004024e8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040248a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004024b9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00401f78\nJMP 0x00401f96\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004024b9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00401cb6\nJMP 0x00402380\nCMP R13,R11\nJNZ 0x00401c3b\nTEST R8B,R8B\nJZ 0x00402582\nCMP EBX,0x2\nJNZ 0x00402582\nTEST R12,R12\nJNZ 0x00402582\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004019c0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004025b6\nTEST R8B,R8B\nJNZ 0x004025b6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004025b6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004025a9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004025a0\nCMP R12,RSI\nJNC 0x0040256d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040256d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00402528\nTEST RSI,RSI\nJZ 0x004025d9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x4047d6\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00401b7c\nCALL 0x00401050\n'
p123
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 12 f7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 b0 42 40 00\nbf d8 47 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf da 47 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 53 f6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 d6 47 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 da 47 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 da 47 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 d6 47 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 b3 f4 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 08 43 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 97 f4 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 c7 f3 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 81 ef ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 43 ef ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 99 f0 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 62 f0 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 d6 47 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 ea ff ff\n'
p124
S'.text:00000000004019c0\n.text:00000000004019c1\n.text:00000000004019c3\n.text:00000000004019c5\n.text:00000000004019c7\n.text:00000000004019c9\n.text:00000000004019ca\n.text:00000000004019d1\n.text:00000000004019d4\n.text:00000000004019d7\n.text:00000000004019da\n.text:00000000004019df\n.text:00000000004019e4\n.text:00000000004019e9\n.text:00000000004019ee\n.text:00000000004019f6\n.text:00000000004019fa\n.text:0000000000401a00\n.text:0000000000401a08\n.text:0000000000401a0d\n.text:0000000000401a15\n.text:0000000000401a1a\n.text:0000000000401a1e\n.text:0000000000401a20\n.text:0000000000401a23\n.text:0000000000401a26\n.text:0000000000401a29\n.text:0000000000401a2e\n.text:0000000000401a31\n.text:0000000000401a34\n.text:0000000000401a37\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a3f\n.text:0000000000401a44\n.text:0000000000401a47\n.text:0000000000401a4c\n.text:0000000000401a53\n.text:0000000000401a58\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a6a\n.text:0000000000401a6d\n.text:0000000000401a72\n.text:0000000000401a77\n.text:0000000000401a7c\n.text:0000000000401a7e\n.text:0000000000401a80\n.text:0000000000401a85\n.text:0000000000401a87\n.text:0000000000401a8a\n.text:0000000000401a8c\n.text:0000000000401a8e\n.text:0000000000401a90\n.text:0000000000401a93\n.text:0000000000401a95\n.text:0000000000401a9a\n.text:0000000000401a9e\n.text:0000000000401aa4\n.text:0000000000401aa7\n.text:0000000000401aa9\n.text:0000000000401aab\n.text:0000000000401aad\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401ab8\n.text:0000000000401abd\n.text:0000000000401ac2\n.text:0000000000401ac5\n.text:0000000000401ac8\n.text:0000000000401acb\n.text:0000000000401ace\n.text:0000000000401ad3\n.text:0000000000401ad6\n.text:0000000000401ad9\n.text:0000000000401ade\n.text:0000000000401ae1\n.text:0000000000401ae3\n.text:0000000000401ae6\n.text:0000000000401ae8\n.text:0000000000401aea\n.text:0000000000401aed\n.text:0000000000401af2\n.text:0000000000401af7\n.text:0000000000401afc\n.text:0000000000401aff\n.text:0000000000401b05\n.text:0000000000401b07\n.text:0000000000401b0a\n.text:0000000000401b0d\n.text:0000000000401b10\n.text:0000000000401b12\n.text:0000000000401b14\n.text:0000000000401b17\n.text:0000000000401b1a\n.text:0000000000401b1f\n.text:0000000000401b22\n.text:0000000000401b24\n.text:0000000000401b27\n.text:0000000000401b29\n.text:0000000000401b2e\n.text:0000000000401b31\n.text:0000000000401b36\n.text:0000000000401b3c\n.text:0000000000401b42\n.text:0000000000401b44\n.text:0000000000401b49\n.text:0000000000401b4f\n.text:0000000000401b52\n.text:0000000000401b55\n.text:0000000000401b58\n.text:0000000000401b5a\n.text:0000000000401b5f\n.text:0000000000401b62\n.text:0000000000401b68\n.text:0000000000401b6d\n.text:0000000000401b73\n.text:0000000000401b76\n.text:0000000000401b79\n.text:0000000000401b7c\n.text:0000000000401b84\n.text:0000000000401b86\n.text:0000000000401b88\n.text:0000000000401b8b\n.text:0000000000401b8f\n.text:0000000000401b91\n.text:0000000000401b94\n.text:0000000000401b98\n.text:0000000000401b9a\n.text:0000000000401b9d\n.text:0000000000401ba0\n.text:0000000000401ba3\n.text:0000000000401ba5\n.text:0000000000401ba9\n.text:0000000000401bab\n.text:0000000000401baf\n.text:0000000000401bb2\n.text:0000000000401bb5\n.text:0000000000401bb8\n.text:0000000000401bba\n.text:0000000000401bbe\n.text:0000000000401bc7\n.text:0000000000401bca\n.text:0000000000401bcc\n.text:0000000000401bd0\n.text:0000000000401bd2\n.text:0000000000401bd6\n.text:0000000000401bd8\n.text:0000000000401bdb\n.text:0000000000401bdf\n.text:0000000000401be1\n.text:0000000000401be4\n.text:0000000000401be8\n.text:0000000000401bed\n.text:0000000000401bf0\n.text:0000000000401bf4\n.text:0000000000401bfc\n.text:0000000000401bff\n.text:0000000000401c02\n.text:0000000000401c04\n.text:0000000000401c08\n.text:0000000000401c0b\n.text:0000000000401c0d\n.text:0000000000401c12\n.text:0000000000401c16\n.text:0000000000401c1b\n.text:0000000000401c20\n.text:0000000000401c24\n.text:0000000000401c2a\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c3b\n.text:0000000000401c40\n.text:0000000000401c42\n.text:0000000000401c47\n.text:0000000000401c4b\n.text:0000000000401c4d\n.text:0000000000401c51\n.text:0000000000401c53\n.text:0000000000401c55\n.text:0000000000401c58\n.text:0000000000401c5d\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6d\n.text:0000000000401c72\n.text:0000000000401c77\n.text:0000000000401c7a\n.text:0000000000401c7d\n.text:0000000000401c7f\n.text:0000000000401c81\n.text:0000000000401c86\n.text:0000000000401c8a\n.text:0000000000401c90\n.text:0000000000401c92\n.text:0000000000401c94\n.text:0000000000401c96\n.text:0000000000401c9e\n.text:0000000000401ca3\n.text:0000000000401ca9\n.text:0000000000401cab\n.text:0000000000401cb0\n.text:0000000000401cb6\n.text:0000000000401cbf\n.text:0000000000401cc5\n.text:0000000000401cd0\n.text:0000000000401cd2\n.text:0000000000401cd5\n.text:0000000000401cd9\n.text:0000000000401ce1\n.text:0000000000401ce4\n.text:0000000000401ce9\n.text:0000000000401ceb\n.text:0000000000401cee\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cf8\n.text:0000000000401cfd\n.text:0000000000401d00\n.text:0000000000401d05\n.text:0000000000401d09\n.text:0000000000401d0e\n.text:0000000000401d10\n.text:0000000000401d12\n.text:0000000000401d18\n.text:0000000000401d1d\n.text:0000000000401d22\n.text:0000000000401d25\n.text:0000000000401d2a\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3a\n.text:0000000000401d3c\n.text:0000000000401d41\n.text:0000000000401d43\n.text:0000000000401d46\n.text:0000000000401d4c\n.text:0000000000401d4f\n.text:0000000000401d55\n.text:0000000000401d58\n.text:0000000000401d5e\n.text:0000000000401d63\n.text:0000000000401d67\n.text:0000000000401d6d\n.text:0000000000401d70\n.text:0000000000401d73\n.text:0000000000401d77\n.text:0000000000401d7a\n.text:0000000000401d7c\n.text:0000000000401d7f\n.text:0000000000401d85\n.text:0000000000401d8a\n.text:0000000000401d8f\n.text:0000000000401d95\n.text:0000000000401d98\n.text:0000000000401d9e\n.text:0000000000401da1\n.text:0000000000401da3\n.text:0000000000401da5\n.text:0000000000401da7\n.text:0000000000401da9\n.text:0000000000401dac\n.text:0000000000401dae\n.text:0000000000401db3\n.text:0000000000401db8\n.text:0000000000401dbb\n.text:0000000000401dbd\n.text:0000000000401dc2\n.text:0000000000401dc7\n.text:0000000000401dca\n.text:0000000000401dcc\n.text:0000000000401dd1\n.text:0000000000401dd5\n.text:0000000000401dd8\n.text:0000000000401ddb\n.text:0000000000401ddd\n.text:0000000000401de2\n.text:0000000000401de7\n.text:0000000000401de9\n.text:0000000000401dec\n.text:0000000000401def\n.text:0000000000401df5\n.text:0000000000401df9\n.text:0000000000401dfc\n.text:0000000000401e02\n.text:0000000000401e06\n.text:0000000000401e09\n.text:0000000000401e0c\n.text:0000000000401e12\n.text:0000000000401e15\n.text:0000000000401e17\n.text:0000000000401e1c\n.text:0000000000401e21\n.text:0000000000401e24\n.text:0000000000401e26\n.text:0000000000401e2b\n.text:0000000000401e2f\n.text:0000000000401e34\n.text:0000000000401e3a\n.text:0000000000401e3f\n.text:0000000000401e41\n.text:0000000000401e46\n.text:0000000000401e4c\n.text:0000000000401e4e\n.text:0000000000401e50\n.text:0000000000401e52\n.text:0000000000401e54\n.text:0000000000401e59\n.text:0000000000401e5f\n.text:0000000000401e61\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e72\n.text:0000000000401e77\n.text:0000000000401e79\n.text:0000000000401e7f\n.text:0000000000401e84\n.text:0000000000401e8a\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e96\n.text:0000000000401e9b\n.text:0000000000401e9e\n.text:0000000000401ea1\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb5\n.text:0000000000401eba\n.text:0000000000401ebf\n.text:0000000000401ec2\n.text:0000000000401ec4\n.text:0000000000401ec9\n.text:0000000000401ece\n.text:0000000000401ed1\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401edc\n.text:0000000000401ede\n.text:0000000000401ee3\n.text:0000000000401ee6\n.text:0000000000401ee9\n.text:0000000000401eef\n.text:0000000000401ef2\n.text:0000000000401ef8\n.text:0000000000401efb\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f09\n.text:0000000000401f0f\n.text:0000000000401f12\n.text:0000000000401f18\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f21\n.text:0000000000401f27\n.text:0000000000401f2c\n.text:0000000000401f30\n.text:0000000000401f39\n.text:0000000000401f3f\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f51\n.text:0000000000401f56\n.text:0000000000401f59\n.text:0000000000401f5c\n.text:0000000000401f61\n.text:0000000000401f66\n.text:0000000000401f6a\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f85\n.text:0000000000401f88\n.text:0000000000401f8a\n.text:0000000000401f8d\n.text:0000000000401f90\n.text:0000000000401f96\n.text:0000000000401f9b\n.text:0000000000401f9e\n.text:0000000000401fa1\n.text:0000000000401fa4\n.text:0000000000401fa7\n.text:0000000000401fa9\n.text:0000000000401fad\n.text:0000000000401faf\n.text:0000000000401fb4\n.text:0000000000401fb9\n.text:0000000000401fbf\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fd7\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fdf\n.text:0000000000401fe1\n.text:0000000000401fe4\n.text:0000000000401fe6\n.text:0000000000401feb\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff5\n.text:0000000000401ffa\n.text:0000000000401ffe\n.text:0000000000402006\n.text:0000000000402009\n.text:000000000040200c\n.text:000000000040200e\n.text:0000000000402012\n.text:0000000000402020\n.text:0000000000402024\n.text:000000000040202a\n.text:000000000040202d\n.text:000000000040202f\n.text:0000000000402034\n.text:0000000000402037\n.text:0000000000402039\n.text:0000000000402040\n.text:0000000000402043\n.text:0000000000402048\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402052\n.text:0000000000402055\n.text:000000000040205b\n.text:000000000040205e\n.text:0000000000402060\n.text:0000000000402064\n.text:0000000000402066\n.text:0000000000402068\n.text:000000000040206b\n.text:000000000040206d\n.text:0000000000402072\n.text:0000000000402077\n.text:000000000040207a\n.text:000000000040207c\n.text:0000000000402081\n.text:0000000000402086\n.text:0000000000402089\n.text:000000000040208b\n.text:0000000000402090\n.text:0000000000402094\n.text:0000000000402096\n.text:000000000040209a\n.text:000000000040209d\n.text:000000000040209f\n.text:00000000004020a4\n.text:00000000004020a9\n.text:00000000004020ac\n.text:00000000004020ae\n.text:00000000004020b1\n.text:00000000004020b4\n.text:00000000004020b7\n.text:00000000004020bb\n.text:00000000004020c0\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020c8\n.text:00000000004020cb\n.text:00000000004020ce\n.text:00000000004020d1\n.text:00000000004020d5\n.text:00000000004020d9\n.text:00000000004020dd\n.text:00000000004020e1\n.text:00000000004020e3\n.text:00000000004020e7\n.text:00000000004020ea\n.text:00000000004020f0\n.text:00000000004020f4\n.text:00000000004020f8\n.text:00000000004020fe\n.text:0000000000402103\n.text:0000000000402106\n.text:0000000000402109\n.text:000000000040210e\n.text:0000000000402111\n.text:0000000000402113\n.text:0000000000402116\n.text:000000000040211d\n.text:0000000000402123\n.text:0000000000402125\n.text:0000000000402129\n.text:000000000040212f\n.text:0000000000402134\n.text:0000000000402139\n.text:000000000040213f\n.text:0000000000402142\n.text:0000000000402144\n.text:0000000000402149\n.text:000000000040214f\n.text:0000000000402154\n.text:0000000000402156\n.text:000000000040215b\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402166\n.text:000000000040216a\n.text:0000000000402170\n.text:0000000000402175\n.text:0000000000402181\n.text:0000000000402185\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218f\n.text:0000000000402194\n.text:0000000000402197\n.text:000000000040219b\n.text:00000000004021a0\n.text:00000000004021a2\n.text:00000000004021a6\n.text:00000000004021a8\n.text:00000000004021b0\n.text:00000000004021b5\n.text:00000000004021ba\n.text:00000000004021be\n.text:00000000004021c2\n.text:00000000004021ca\n.text:00000000004021cd\n.text:00000000004021d2\n.text:00000000004021d5\n.text:00000000004021d8\n.text:00000000004021dd\n.text:00000000004021e0\n.text:00000000004021e3\n.text:00000000004021e9\n.text:00000000004021ed\n.text:00000000004021f7\n.text:00000000004021fd\n.text:0000000000402201\n.text:0000000000402206\n.text:000000000040220c\n.text:0000000000402210\n.text:0000000000402213\n.text:0000000000402217\n.text:0000000000402219\n.text:000000000040221e\n.text:0000000000402223\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402237\n.text:000000000040223c\n.text:0000000000402240\n.text:0000000000402244\n.text:0000000000402247\n.text:000000000040224a\n.text:000000000040224c\n.text:0000000000402250\n.text:0000000000402256\n.text:0000000000402259\n.text:000000000040225c\n.text:000000000040225e\n.text:0000000000402262\n.text:0000000000402267\n.text:0000000000402269\n.text:000000000040226b\n.text:0000000000402273\n.text:0000000000402278\n.text:000000000040227b\n.text:0000000000402283\n.text:0000000000402286\n.text:0000000000402289\n.text:000000000040228e\n.text:0000000000402291\n.text:0000000000402293\n.text:0000000000402298\n.text:000000000040229d\n.text:00000000004022a3\n.text:00000000004022a8\n.text:00000000004022ab\n.text:00000000004022b0\n.text:00000000004022b6\n.text:00000000004022bb\n.text:00000000004022c0\n.text:00000000004022c6\n.text:00000000004022ca\n.text:00000000004022cd\n.text:00000000004022d3\n.text:00000000004022d9\n.text:00000000004022df\n.text:00000000004022e4\n.text:00000000004022e6\n.text:00000000004022e9\n.text:00000000004022ef\n.text:00000000004022f3\n.text:00000000004022f5\n.text:00000000004022ff\n.text:0000000000402303\n.text:0000000000402309\n.text:000000000040230c\n.text:000000000040230e\n.text:0000000000402314\n.text:0000000000402317\n.text:0000000000402319\n.text:000000000040231e\n.text:0000000000402323\n.text:0000000000402326\n.text:000000000040232a\n.text:000000000040232c\n.text:0000000000402331\n.text:0000000000402336\n.text:0000000000402339\n.text:000000000040233b\n.text:0000000000402340\n.text:0000000000402345\n.text:0000000000402348\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402358\n.text:000000000040235b\n.text:0000000000402360\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236d\n.text:0000000000402372\n.text:0000000000402378\n.text:0000000000402380\n.text:0000000000402385\n.text:0000000000402387\n.text:000000000040238c\n.text:000000000040238f\n.text:0000000000402391\n.text:0000000000402394\n.text:0000000000402396\n.text:0000000000402399\n.text:000000000040239c\n.text:000000000040239f\n.text:00000000004023a1\n.text:00000000004023a9\n.text:00000000004023ac\n.text:00000000004023ae\n.text:00000000004023b0\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c5\n.text:00000000004023c8\n.text:00000000004023ce\n.text:00000000004023d1\n.text:00000000004023d3\n.text:00000000004023d5\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023dc\n.text:00000000004023de\n.text:00000000004023e3\n.text:00000000004023e8\n.text:00000000004023eb\n.text:00000000004023ed\n.text:00000000004023f2\n.text:00000000004023f7\n.text:00000000004023fa\n.text:00000000004023fc\n.text:0000000000402401\n.text:0000000000402405\n.text:0000000000402408\n.text:000000000040240b\n.text:000000000040240d\n.text:0000000000402412\n.text:0000000000402415\n.text:0000000000402418\n.text:000000000040241a\n.text:0000000000402420\n.text:0000000000402424\n.text:0000000000402426\n.text:0000000000402428\n.text:000000000040242a\n.text:000000000040242d\n.text:000000000040242f\n.text:0000000000402434\n.text:0000000000402439\n.text:000000000040243c\n.text:000000000040243e\n.text:0000000000402443\n.text:0000000000402447\n.text:0000000000402449\n.text:000000000040244c\n.text:000000000040244e\n.text:0000000000402452\n.text:0000000000402455\n.text:0000000000402458\n.text:000000000040245c\n.text:0000000000402462\n.text:0000000000402467\n.text:000000000040246f\n.text:0000000000402474\n.text:0000000000402476\n.text:000000000040247e\n.text:0000000000402483\n.text:0000000000402485\n.text:000000000040248a\n.text:000000000040248f\n.text:0000000000402493\n.text:0000000000402495\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a0\n.text:00000000004024a2\n.text:00000000004024aa\n.text:00000000004024ac\n.text:00000000004024b4\n.text:00000000004024b9\n.text:00000000004024bd\n.text:00000000004024c2\n.text:00000000004024c7\n.text:00000000004024cb\n.text:00000000004024d0\n.text:00000000004024d5\n.text:00000000004024d9\n.text:00000000004024dd\n.text:00000000004024e3\n.text:00000000004024e8\n.text:00000000004024f0\n.text:00000000004024f2\n.text:00000000004024f4\n.text:00000000004024f8\n.text:00000000004024fd\n.text:0000000000402503\n.text:0000000000402510\n.text:0000000000402513\n.text:0000000000402519\n.text:000000000040251c\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402523\n.text:0000000000402526\n.text:0000000000402528\n.text:0000000000402530\n.text:0000000000402536\n.text:000000000040253a\n.text:000000000040253d\n.text:0000000000402541\n.text:0000000000402546\n.text:000000000040254a\n.text:000000000040254e\n.text:0000000000402551\n.text:0000000000402554\n.text:0000000000402557\n.text:000000000040255b\n.text:000000000040255f\n.text:0000000000402561\n.text:0000000000402566\n.text:000000000040256a\n.text:000000000040256d\n.text:0000000000402570\n.text:0000000000402577\n.text:0000000000402578\n.text:000000000040257a\n.text:000000000040257c\n.text:000000000040257e\n.text:0000000000402580\n.text:0000000000402581\n.text:0000000000402582\n.text:000000000040258a\n.text:000000000040258d\n.text:000000000040258f\n.text:0000000000402592\n.text:0000000000402594\n.text:0000000000402596\n.text:0000000000402598\n.text:000000000040259a\n.text:000000000040259d\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a5\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025af\n.text:00000000004025b2\n.text:00000000004025b4\n.text:00000000004025b6\n.text:00000000004025b9\n.text:00000000004025bb\n.text:00000000004025c0\n.text:00000000004025c2\n.text:00000000004025c7\n.text:00000000004025cc\n.text:00000000004025cf\n.text:00000000004025d1\n.text:00000000004025d6\n.text:00000000004025d9\n.text:00000000004025de\n.text:00000000004025e1\n.text:00000000004025e7\n.text:00000000004025ed\n.text:00000000004025f0\n.text:00000000004025f5\n'
p125
tp126
sS'set_quoting_style'
p127
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p128
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p129
S'TEST RDI,RDI\nMOV EAX,0x607270\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p130
S'48 85 ff\nb8 70 72 60 00\n48 0f 45 c7\n89 30\nc3\n'
p131
S'.text:00000000004018a0\n.text:00000000004018a3\n.text:00000000004018a8\n.text:00000000004018ac\n.text:00000000004018ae\n'
p132
tp133
sS'quotearg_n_style_colon'
p134
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p135
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004029d0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004018b0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004027a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p137
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p138
S'.text:0000000000402b50\n.text:0000000000402b51\n.text:0000000000402b53\n.text:0000000000402b54\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b62\n.text:0000000000402b65\n.text:0000000000402b6a\n.text:0000000000402b6f\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b83\n.text:0000000000402b85\n.text:0000000000402b88\n.text:0000000000402b8b\n.text:0000000000402b90\n.text:0000000000402b94\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b98\n'
p139
tp140
sS'textdomain'
p141
(S'\n__stdcall textdomain()\n'
p142
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00607060)();\u000a  return;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x00607060]\n'
p144
S'ff 25 9a 5f 20 00\n'
p145
S'.plt:00000000004010c0\n'
p146
tp147
sS'xmemdup'
p148
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p149
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p150
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004035c0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004011d0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p151
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ac da ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p152
S'.text:0000000000403700\n.text:0000000000403702\n.text:0000000000403704\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370b\n.text:000000000040370e\n.text:0000000000403713\n.text:0000000000403716\n.text:0000000000403719\n.text:000000000040371c\n.text:000000000040371f\n.text:0000000000403724\n.text:0000000000403727\n.text:0000000000403728\n.text:000000000040372a\n.text:000000000040372c\n'
p153
tp154
sS'get_quoting_style'
p155
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p156
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p157
S'TEST RDI,RDI\nMOV EAX,0x607270\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p158
S'48 85 ff\nb8 70 72 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p159
S'.text:0000000000401890\n.text:0000000000401893\n.text:0000000000401898\n.text:000000000040189c\n.text:000000000040189e\n'
p160
tp161
sS'ferror_unlocked'
p162
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_006070d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x006070d0]\n'
p165
S'ff 25 2a 5f 20 00\n'
p166
S'.plt:00000000004011a0\n'
p167
tp168
sS'exit'
p169
(S'\n__stdcall exit(int __status)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00607160)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00607160]\n'
p172
S'ff 25 9a 5e 20 00\n'
p173
S'.plt:00000000004012c0\n'
p174
tp175
sS'quote_mem'
p176
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p177
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00402c60\n'
p179
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p180
S'.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c78\n.text:0000000000402c7b\n.text:0000000000402c7e\n'
p181
tp182
sS'locale_charset'
p183
(S'\n__stdcall locale_charset()\n'
p184
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00403a0d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00403a0d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401210\nTEST RAX,RAX\nMOV R14D,0x404931\nCMOVNZ R14,RAX\nCALL 0x00403a20\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004039e5\nJMP 0x00403a0d\nMOV RDI,RBX\nCALL 0x00401110\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401110\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00403a0d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004011c0\nTEST EAX,EAX\nJZ 0x00403a00\nCMP BPL,0x2a\nJNZ 0x004039c0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004039c0\nMOV RDI,RBX\nCALL 0x00401110\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x404f88\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p186
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 72 d8 ff ff\n48 85 c0\n41 be 31 49 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 48 d7 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 3a d7 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 d0 d7 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 08 d7 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 88 4f 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p187
S'.text:0000000000403990\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403994\n.text:0000000000403999\n.text:000000000040399e\n.text:00000000004039a1\n.text:00000000004039a7\n.text:00000000004039ab\n.text:00000000004039b0\n.text:00000000004039b3\n.text:00000000004039b6\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c8\n.text:00000000004039cc\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039db\n.text:00000000004039e0\n.text:00000000004039e3\n.text:00000000004039e5\n.text:00000000004039e8\n.text:00000000004039eb\n.text:00000000004039f0\n.text:00000000004039f2\n.text:00000000004039f4\n.text:00000000004039f8\n.text:00000000004039fa\n.text:00000000004039fe\n.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a08\n.text:0000000000403a0d\n.text:0000000000403a11\n.text:0000000000403a16\n.text:0000000000403a1a\n.text:0000000000403a1b\n.text:0000000000403a1d\n.text:0000000000403a1e\n'
p188
tp189
sS'set_program_name'
p190
(S'\n__stdcall set_program_name(char * argv0)\n'
p191
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00401821\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401130\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040180b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4042a0\nMOV EDX,0x7\nCALL 0x00401070\nTEST EAX,EAX\nJNZ 0x0040180b\nMOV ESI,0x4042a8\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401070\nTEST EAX,EAX\nJNZ 0x00401808\nADD R14,0x3\nMOV qword ptr [0x00607220],R14\nMOV RBX,R14\nMOV qword ptr [0x00607260],RBX\nMOV qword ptr [0x00607230],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00607240]\nMOV EDI,0x404268\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004012d0\nCALL 0x00401050\n'
p193
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 77 f9 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe a0 42 40 00\nba 07 00 00 00\ne8 8d f8 ff ff\n85 c0\n75 24\nbe a8 42 40 00\nba 03 00 00 00\n4c 89 f7\ne8 77 f8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 5a 20 00\n4c 89 f3\n48 89 1d 4e 5a 20 00\n48 89 1d 17 5a 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 18 5a 20 00\nbf 68 42 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 94 fa ff ff\ne8 0f f8 ff ff\n'
p194
S'.text:00000000004017a0\n.text:00000000004017a2\n.text:00000000004017a3\n.text:00000000004017a4\n.text:00000000004017a7\n.text:00000000004017aa\n.text:00000000004017ac\n.text:00000000004017b1\n.text:00000000004017b4\n.text:00000000004017b9\n.text:00000000004017bc\n.text:00000000004017c0\n.text:00000000004017c4\n.text:00000000004017c7\n.text:00000000004017ca\n.text:00000000004017ce\n.text:00000000004017d0\n.text:00000000004017d4\n.text:00000000004017d9\n.text:00000000004017de\n.text:00000000004017e3\n.text:00000000004017e5\n.text:00000000004017e7\n.text:00000000004017ec\n.text:00000000004017f1\n.text:00000000004017f4\n.text:00000000004017f9\n.text:00000000004017fb\n.text:00000000004017fd\n.text:0000000000401801\n.text:0000000000401808\n.text:000000000040180b\n.text:0000000000401812\n.text:0000000000401819\n.text:000000000040181d\n.text:000000000040181e\n.text:0000000000401820\n.text:0000000000401821\n.text:0000000000401828\n.text:000000000040182d\n.text:0000000000401832\n.text:0000000000401837\n.text:000000000040183c\n'
p195
tp196
sS'fileno'
p197
(S'\n__stdcall fileno(FILE * __stream)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_006070f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x006070f0]\n'
p200
S'ff 25 0a 5f 20 00\n'
p201
S'.plt:00000000004011e0\n'
p202
tp203
sS'quotearg_buffer'
p204
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p205
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x607270\nCMOVNZ RBP,R8\nCALL 0x00401060\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004019c0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p207
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 70 72 60 00\n49 0f 45 e8\ne8 f8 f6 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p208
S'.text:0000000000401940\n.text:0000000000401941\n.text:0000000000401943\n.text:0000000000401945\n.text:0000000000401947\n.text:0000000000401949\n.text:000000000040194a\n.text:000000000040194b\n.text:000000000040194e\n.text:0000000000401951\n.text:0000000000401954\n.text:0000000000401957\n.text:000000000040195a\n.text:000000000040195f\n.text:0000000000401963\n.text:0000000000401968\n.text:000000000040196b\n.text:000000000040196d\n.text:0000000000401971\n.text:0000000000401975\n.text:0000000000401979\n.text:000000000040197d\n.text:0000000000401980\n.text:0000000000401983\n.text:0000000000401986\n.text:0000000000401989\n.text:000000000040198c\n.text:000000000040198f\n.text:0000000000401993\n.text:0000000000401994\n.text:0000000000401999\n.text:000000000040199d\n.text:00000000004019a1\n.text:00000000004019a3\n.text:00000000004019a7\n.text:00000000004019a8\n.text:00000000004019aa\n.text:00000000004019ac\n.text:00000000004019ae\n.text:00000000004019b0\n.text:00000000004019b1\n'
p209
tp210
sS'quotearg_colon'
p211
(S'\n__stdcall quotearg_colon(char * arg)\n'
p212
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p213
S'MOV ESI,0x3a\nJMP 0x00402b20\n'
p214
S'be 3a 00 00 00\neb e9\n'
p215
S'.text:0000000000402b30\n.text:0000000000402b35\n'
p216
tp217
sS'mbrtowc'
p218
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_00607090)();\u000a  return sVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x00607090]\n'
p221
S'ff 25 6a 5f 20 00\n'
p222
S'.plt:0000000000401120\n'
p223
tp224
sS'rpl_fflush'
p225
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p226
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00607100)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403d5d\nMOV RDI,RBX\nCALL 0x00401230\nTEST EAX,EAX\nJZ 0x00403d5d\nMOV RDI,RBX\nCALL 0x00403d70\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401200\n'
p228
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 df d4 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 9a d4 ff ff\n'
p229
S'.text:0000000000403d40\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d47\n.text:0000000000403d49\n.text:0000000000403d4c\n.text:0000000000403d51\n.text:0000000000403d53\n.text:0000000000403d55\n.text:0000000000403d58\n.text:0000000000403d5d\n.text:0000000000403d60\n.text:0000000000403d61\n'
p230
tp231
sS'setlocale'
p232
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00607130)();\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00607130]\n'
p235
S'ff 25 ca 5e 20 00\n'
p236
S'.plt:0000000000401260\n'
p237
tp238
sS'c_toupper'
p239
(S'\n__stdcall c_toupper()\n'
p240
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p242
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p243
S'.text:0000000000403910\n.text:0000000000403913\n.text:0000000000403916\n.text:0000000000403919\n.text:000000000040391c\n'
p244
tp245
sS'bindtextdomain'
p246
(S'\n__stdcall bindtextdomain()\n'
p247
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00607070)();\u000a  return;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00607070]\n'
p249
S'ff 25 8a 5f 20 00\n'
p250
S'.plt:00000000004010e0\n'
p251
tp252
sS'set_char_quoting'
p253
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p254
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p255
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x607270\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p256
S'89 f1\n48 85 ff\nbe 70 72 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p257
S'.text:00000000004018b0\n.text:00000000004018b2\n.text:00000000004018b5\n.text:00000000004018ba\n.text:00000000004018be\n.text:00000000004018c0\n.text:00000000004018c3\n.text:00000000004018c7\n.text:00000000004018cc\n.text:00000000004018cf\n.text:00000000004018d1\n.text:00000000004018d3\n.text:00000000004018d6\n.text:00000000004018d8\n.text:00000000004018db\n.text:00000000004018dd\n.text:00000000004018e0\n.text:00000000004018e5\n'
p258
tp259
sS'quotearg_n'
p260
(S'\n__stdcall quotearg_n(char * arg)\n'
p261
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'MOV RDX,-0x1\nMOV ECX,0x607270\nJMP 0x004027a0\n'
p263
S'48 c7 c2 ff ff ff ff\nb9 70 72 60 00\neb 02\n'
p264
S'.text:0000000000402790\n.text:0000000000402797\n.text:000000000040279c\n'
p265
tp266
sS'mbsinit'
p267
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00607178)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x00607178]\n'
p270
S'ff 25 82 5e 20 00\n'
p271
S'.plt:00000000004012f0\n'
p272
tp273
sS'dcgettext'
p274
(S'\n__stdcall dcgettext()\n'
p275
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00607078)();\u000a  return;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00607078]\n'
p277
S'ff 25 82 5f 20 00\n'
p278
S'.plt:00000000004010f0\n'
p279
tp280
sS'close_stream'
p281
(S'\n__stdcall close_stream(FILE * stream)\n'
p282
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004010a0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004011a0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00403cc0\nTEST EBP,EBP\nJZ 0x0040395b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040397f\nCALL 0x00401060\nMOV dword ptr [RAX],0x0\nJMP 0x0040397f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040397f\nTEST CL,CL\nJNZ 0x0040397f\nCALL 0x00401060\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p284
S'55\n41 56\n53\n48 89 fb\ne8 74 d7 ff ff\n49 89 c6\n48 89 df\ne8 69 d8 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 0d d7 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ee d6 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p285
S'.text:0000000000403920\n.text:0000000000403921\n.text:0000000000403923\n.text:0000000000403924\n.text:0000000000403927\n.text:000000000040392c\n.text:000000000040392f\n.text:0000000000403932\n.text:0000000000403937\n.text:0000000000403939\n.text:000000000040393c\n.text:0000000000403941\n.text:0000000000403943\n.text:0000000000403945\n.text:000000000040394a\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403953\n.text:0000000000403959\n.text:000000000040395b\n.text:000000000040395d\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403967\n.text:0000000000403969\n.text:000000000040396b\n.text:000000000040396d\n.text:0000000000403972\n.text:0000000000403974\n.text:0000000000403977\n.text:000000000040397c\n.text:000000000040397f\n.text:0000000000403981\n.text:0000000000403982\n.text:0000000000403984\n.text:0000000000403985\n'
p286
tp287
sS'quotearg_colon_mem'
p288
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p289
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV EDX,0x3a\nJMP 0x00402ab0\n'
p291
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p292
S'.text:0000000000402b40\n.text:0000000000402b45\n'
p293
tp294
sS'quotearg_free'
p295
(S'\n__stdcall quotearg_free()\n'
p296
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p297
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006071b0]\nCMP dword ptr [0x006071b8],0x2\nJC 0x0040273a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401040\nINC RBX\nMOV EAX,dword ptr [0x006071b8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00402720\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x6072b0\nCMP RDI,RAX\nJZ 0x00402763\nCALL 0x00401040\nMOV qword ptr [0x006071c0],0x100\nMOV qword ptr [0x006071c8],0x6072b0\nMOV EAX,0x6071c0\nCMP R14,RAX\nJZ 0x00402780\nMOV RDI,R14\nCALL 0x00401040\nMOV qword ptr [0x006071b0],0x6071c0\nMOV dword ptr [0x006071b8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p298
S'41 57\n41 56\n53\n4c 8b 35 a4 4a 20 00\n83 3d a5 4a 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 18 e9 ff ff\n48 ff c3\n8b 05 87 4a 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 b0 72 60 00\n48 39 c7\n74 1b\ne8 f3 e8 ff ff\n48 c7 05 68 4a 20 00 00 01 00 00\n48 c7 05 65 4a 20 00 b0 72 60 00\nb8 c0 71 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 cb e8 ff ff\n48 c7 05 30 4a 20 00 c0 71 60 00\nc7 05 2e 4a 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p299
S'.text:0000000000402700\n.text:0000000000402702\n.text:0000000000402704\n.text:0000000000402705\n.text:000000000040270c\n.text:0000000000402713\n.text:0000000000402715\n.text:0000000000402719\n.text:000000000040271e\n.text:0000000000402720\n.text:0000000000402723\n.text:0000000000402728\n.text:000000000040272b\n.text:0000000000402731\n.text:0000000000402735\n.text:0000000000402738\n.text:000000000040273a\n.text:000000000040273e\n.text:0000000000402743\n.text:0000000000402746\n.text:0000000000402748\n.text:000000000040274d\n.text:0000000000402758\n.text:0000000000402763\n.text:0000000000402768\n.text:000000000040276b\n.text:000000000040276d\n.text:0000000000402770\n.text:0000000000402775\n.text:0000000000402780\n.text:000000000040278a\n.text:000000000040278b\n.text:000000000040278d\n.text:000000000040278f\n'
p300
tp301
sS'quotearg_mem'
p302
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p303
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00402960\n'
p305
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p306
S'.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402986\n.text:0000000000402988\n.text:000000000040298b\n.text:000000000040298e\n'
p307
tp308
sS'xcalloc'
p309
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p310
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p311
S'PUSH RAX\nCALL 0x00403780\nTEST RAX,RAX\nJZ 0x004036ed\nPOP RCX\nRET\nCALL 0x00403750\n'
p312
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p313
S'.text:00000000004036e0\n.text:00000000004036e1\n.text:00000000004036e6\n.text:00000000004036e9\n.text:00000000004036eb\n.text:00000000004036ec\n.text:00000000004036ed\n'
p314
tp315
sS'deregister_tm_clones'
p316
(S'\n__stdcall deregister_tm_clones()\n'
p317
V\u000a/* WARNING: Removing unreachable block (ram,0x00401365) */\u000a/* WARNING: Removing unreachable block (ram,0x0040136f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p318
S'MOV EAX,0x60720f\nPUSH RBP\nSUB RAX,0x607208\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401380\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401380\nPOP RBP\nMOV EDI,0x607208\nJMP RAX\nPOP RBP\nRET\n'
p319
S'b8 0f 72 60 00\n55\n48 2d 08 72 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 08 72 60 00\nff e0\n5d\nc3\n'
p320
S'.text:0000000000401350\n.text:0000000000401355\n.text:0000000000401356\n.text:000000000040135c\n.text:0000000000401360\n.text:0000000000401363\n.text:0000000000401365\n.text:000000000040136a\n.text:000000000040136d\n.text:000000000040136f\n.text:0000000000401370\n.text:0000000000401375\n.text:0000000000401380\n.text:0000000000401381\n'
p321
tp322
sS'clear_ungetc_buffer_preserving_position'
p323
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p324
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p325
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00403d77\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00403d90\n'
p326
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p327
S'.text:0000000000403d70\n.text:0000000000403d74\n.text:0000000000403d76\n.text:0000000000403d77\n.text:0000000000403d79\n.text:0000000000403d7e\n'
p328
tp329
sS'xnmalloc'
p330
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p331
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p332
S'MOV RAX,RDI\nMUL RSI\nJO 0x004035b1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004035c0\nPUSH RAX\nCALL 0x00403750\n'
p333
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p334
S'.text:00000000004035a0\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035ac\n.text:00000000004035af\n.text:00000000004035b1\n.text:00000000004035b2\n'
p335
tp336
sS'quotearg_custom'
p337
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p338
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00402ba0\n'
p340
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p341
S'.text:0000000000402c20\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c29\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c31\n.text:0000000000402c34\n'
p342
tp343
sS'free'
p344
(S'\n__stdcall free(void * __ptr)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00607020)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x00607020]\n'
p347
S'ff 25 da 5f 20 00\n'
p348
S'.plt:0000000000401040\n'
p349
tp350
sS'close'
p351
(S'\n__stdcall close(int __fd)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006070b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x006070b8]\n'
p354
S'ff 25 42 5f 20 00\n'
p355
S'.plt:0000000000401170\n'
p356
tp357
sS'getenv'
p358
(S'\n__stdcall getenv(char * __name)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00607018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00607018]\n'
p361
S'ff 25 e2 5f 20 00\n'
p362
S'.plt:0000000000401030\n'
p363
tp364
sS'quotearg_char'
p365
(S'\n__stdcall quotearg_char(char * arg)\n'
p366
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p367
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00402ab0\n'
p368
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p369
S'.text:0000000000402b20\n.text:0000000000402b22\n.text:0000000000402b29\n.text:0000000000402b2b\n'
p370
tp371
sS'malloc'
p372
(S'\n__stdcall malloc(size_t __size)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_006070f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x006070f8]\n'
p375
S'ff 25 02 5f 20 00\n'
p376
S'.plt:00000000004011f0\n'
p377
tp378
sS'c_tolower'
p379
(S'\n__stdcall c_tolower()\n'
p380
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p382
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p383
S'.text:0000000000403900\n.text:0000000000403903\n.text:0000000000403906\n.text:0000000000403909\n.text:000000000040390c\n'
p384
tp385
sS'rpl_fseeko'
p386
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p387
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00607150)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00403db8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00403db8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00403dca\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004012a0\nMOV RDI,RBX\nCALL 0x004011e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401140\nCMP RAX,-0x1\nJZ 0x00403df3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00403df8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p389
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 d4 ff ff\n48 89 df\ne8 0e d4 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 61 d3 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p390
S'.text:0000000000403d90\n.text:0000000000403d91\n.text:0000000000403d93\n.text:0000000000403d94\n.text:0000000000403d97\n.text:0000000000403d9a\n.text:0000000000403d9d\n.text:0000000000403da1\n.text:0000000000403da5\n.text:0000000000403da7\n.text:0000000000403dab\n.text:0000000000403daf\n.text:0000000000403db1\n.text:0000000000403db6\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dbe\n.text:0000000000403dc1\n.text:0000000000403dc2\n.text:0000000000403dc4\n.text:0000000000403dc5\n.text:0000000000403dca\n.text:0000000000403dcd\n.text:0000000000403dd2\n.text:0000000000403dd4\n.text:0000000000403dd7\n.text:0000000000403dda\n.text:0000000000403ddf\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403de8\n.text:0000000000403def\n.text:0000000000403df1\n.text:0000000000403df3\n.text:0000000000403df8\n.text:0000000000403df9\n.text:0000000000403dfb\n.text:0000000000403dfc\n'
p391
tp392
sS'quote_n_mem'
p393
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV ECX,0x6071d0\nJMP 0x004027a0\n'
p396
S'b9 d0 71 60 00\ne9 36 fb ff ff\n'
p397
S'.text:0000000000402c60\n.text:0000000000402c65\n'
p398
tp399
sS'xstrdup'
p400
(S'\n__stdcall xstrdup(char * string)\n'
p401
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p402
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401110\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00403700\n'
p403
S'53\n48 89 fb\ne8 d7 d9 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p404
S'.text:0000000000403730\n.text:0000000000403731\n.text:0000000000403734\n.text:0000000000403739\n.text:000000000040373d\n.text:0000000000403740\n.text:0000000000403741\n'
p405
tp406
sS'c_ispunct'
p407
(S'\n__stdcall c_ispunct()\n'
p408
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p409
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004038a2\nMOV AL,0x1\nJMP qword ptr [0x404b70 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p410
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 70 4b 40 00\nc3\n31 c0\nc3\n'
p411
S'.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403896\n.text:0000000000403898\n.text:000000000040389a\n.text:00000000004038a1\n.text:00000000004038a2\n.text:00000000004038a4\n'
p412
tp413
sS'quotearg_style'
p414
(S'\n__stdcall quotearg_style(char * arg)\n'
p415
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00402990\n'
p417
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p418
S'.text:0000000000402a70\n.text:0000000000402a73\n.text:0000000000402a75\n.text:0000000000402a77\n.text:0000000000402a79\n.text:0000000000402a7c\n'
p419
tp420
sS'fscanf'
p421
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006070b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x006070b0]\n'
p424
S'ff 25 4a 5f 20 00\n'
p425
S'.plt:0000000000401160\n'
p426
tp427
sS'memcpy'
p428
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_006070e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x006070e8]\n'
p431
S'ff 25 12 5f 20 00\n'
p432
S'.plt:00000000004011d0\n'
p433
tp434
sS'strrchr'
p435
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_00607098)();\u000a  return pcVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00607098]\n'
p438
S'ff 25 62 5f 20 00\n'
p439
S'.plt:0000000000401130\n'
p440
tp441
sS'close_stdout_set_ignore_EPIPE'
p442
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p443
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p444
S'MOV byte ptr [0x00607258],DIL\nRET\n'
p445
S'40 88 3d 81 5b 20 00\nc3\n'
p446
S'.text:00000000004016d0\n.text:00000000004016d7\n'
p447
tp448
sS'quotearg_alloc_mem'
p449
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p450
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x607270\nCMOVNZ R12,RCX\nCALL 0x00401060\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004019c0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00403690\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004019c0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004026ea\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p452
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 70 72 60 00\n4c 0f 45 e1\ne8 18 ea ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p453
S'.text:0000000000402610\n.text:0000000000402611\n.text:0000000000402613\n.text:0000000000402615\n.text:0000000000402617\n.text:0000000000402619\n.text:000000000040261a\n.text:000000000040261e\n.text:0000000000402621\n.text:0000000000402626\n.text:0000000000402629\n.text:000000000040262e\n.text:0000000000402631\n.text:0000000000402636\n.text:0000000000402639\n.text:000000000040263f\n.text:0000000000402643\n.text:0000000000402648\n.text:000000000040264d\n.text:000000000040264f\n.text:0000000000402653\n.text:0000000000402655\n.text:0000000000402658\n.text:000000000040265c\n.text:0000000000402661\n.text:0000000000402665\n.text:000000000040266a\n.text:000000000040266e\n.text:0000000000402670\n.text:0000000000402672\n.text:0000000000402675\n.text:0000000000402678\n.text:000000000040267b\n.text:0000000000402680\n.text:0000000000402685\n.text:0000000000402687\n.text:000000000040268c\n.text:0000000000402690\n.text:0000000000402693\n.text:0000000000402697\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a2\n.text:00000000004026a6\n.text:00000000004026aa\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b5\n.text:00000000004026ba\n.text:00000000004026bd\n.text:00000000004026c2\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026ce\n.text:00000000004026d3\n.text:00000000004026d7\n.text:00000000004026da\n.text:00000000004026de\n.text:00000000004026e3\n.text:00000000004026e5\n.text:00000000004026e7\n.text:00000000004026ea\n.text:00000000004026ed\n.text:00000000004026f1\n.text:00000000004026f2\n.text:00000000004026f4\n.text:00000000004026f6\n.text:00000000004026f8\n.text:00000000004026fa\n.text:00000000004026fb\n'
p454
tp455
sS'iswprint'
p456
(S'\n__stdcall iswprint(wint_t __wc)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00607180)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00607180]\n'
p459
S'ff 25 7a 5e 20 00\n'
p460
S'.plt:0000000000401300\n'
p461
tp462
sS'quotearg_style_mem'
p463
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p464
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00402a30\n'
p466
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p467
S'.text:0000000000402a90\n.text:0000000000402a93\n.text:0000000000402a96\n.text:0000000000402a98\n.text:0000000000402a9a\n.text:0000000000402a9c\n.text:0000000000402a9f\n.text:0000000000402aa2\n'
p468
tp469
sS'xalloc_die'
p470
(S'\n__stdcall xalloc_die()\n'
p471
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x404265,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV EBX,dword ptr [0x006071a8]\nXOR EDI,EDI\nMOV ESI,0x404b5f\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x404265\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401280\nCALL 0x00401050\n'
p473
S'53\n8b 1d 51 3a 20 00\n31 ff\nbe 5f 4b 40 00\nba 05 00 00 00\ne8 88 d9 ff ff\n48 89 c1\n31 f6\nba 65 42 40 00\n31 c0\n89 df\ne8 05 db ff ff\ne8 d0 d8 ff ff\n'
p474
S'.text:0000000000403750\n.text:0000000000403751\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375e\n.text:0000000000403763\n.text:0000000000403768\n.text:000000000040376b\n.text:000000000040376d\n.text:0000000000403772\n.text:0000000000403774\n.text:0000000000403776\n.text:000000000040377b\n'
p475
tp476
sS'c_isspace'
p477
(S'\n__stdcall c_isspace()\n'
p478
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p479
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004038c5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p481
S'.text:00000000004038b0\n.text:00000000004038b3\n.text:00000000004038b6\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038bf\n.text:00000000004038c1\n.text:00000000004038c4\n.text:00000000004038c5\n.text:00000000004038c7\n'
p482
tp483
sS'quotearg_n_custom'
p484
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p485
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV R8,-0x1\nJMP 0x00402bb0\n'
p487
S'49 c7 c0 ff ff ff ff\neb 07\n'
p488
S'.text:0000000000402ba0\n.text:0000000000402ba7\n'
p489
tp490
sS'open'
p491
(S'\n__stdcall open(char * __file, int __oflag)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00607148)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x00607148]\n'
p494
S'ff 25 b2 5e 20 00\n'
p495
S'.plt:0000000000401290\n'
p496
tp497
sS'quotearg_n_custom_mem'
p498
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p499
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x006072a0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00607290]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00607280]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00607270]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00401910\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004027a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 d7 46 20 00\n48 89 44 24 30\n0f 10 05 bb 46 20 00\n0f 29 44 24 20\n0f 10 05 9f 46 20 00\n0f 29 44 24 10\n0f 10 05 83 46 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:0000000000402bb0\n.text:0000000000402bb1\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bb6\n.text:0000000000402bba\n.text:0000000000402bbd\n.text:0000000000402bc0\n.text:0000000000402bc2\n.text:0000000000402bc9\n.text:0000000000402bce\n.text:0000000000402bd5\n.text:0000000000402bda\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402bed\n.text:0000000000402bf1\n.text:0000000000402bf4\n.text:0000000000402bf7\n.text:0000000000402bfc\n.text:0000000000402bfe\n.text:0000000000402c01\n.text:0000000000402c04\n.text:0000000000402c07\n.text:0000000000402c0c\n.text:0000000000402c10\n.text:0000000000402c11\n.text:0000000000402c13\n.text:0000000000402c15\n.text:0000000000402c16\n'
p503
tp504
sS'_init'
p505
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p506
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00606ff8;\u000a  if (PTR___gmon_start___00606ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00606ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00606ff8]\nTEST RAX,RAX\nJZ 0x00401012\nCALL RAX\nADD RSP,0x8\nRET\n'
p508
S'48 83 ec 08\n48 8b 05 ed 5f 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p509
S'.init:0000000000401000\n.init:0000000000401004\n.init:000000000040100b\n.init:000000000040100e\n.init:0000000000401010\n.init:0000000000401012\n.init:0000000000401016\n'
p510
tp511
sS'__freading'
p512
(S'\n__stdcall __freading()\n'
p513
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00607118)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00607118]\n'
p515
S'ff 25 e2 5e 20 00\n'
p516
S'.plt:0000000000401230\n'
p517
tp518
sS'set_quoting_flags'
p519
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p520
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'TEST RDI,RDI\nMOV ECX,0x607270\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p522
S'48 85 ff\nb9 70 72 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p523
S'.text:00000000004018f0\n.text:00000000004018f3\n.text:00000000004018f8\n.text:00000000004018fc\n.text:00000000004018ff\n.text:0000000000401902\n'
p524
tp525
sS'fputs_unlocked'
p526
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006070c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006070c8]\n'
p529
S'ff 25 32 5f 20 00\n'
p530
S'.plt:0000000000401190\n'
p531
tp532
sS'main'
p533
(S'\n__stdcall main(char * * argv)\n'
p534
V\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  char **in_RSI;\u000a  char *__s1;\u000a  \u000a  if ((int)argv == 2) {\u000a    set_program_name(*in_RSI);\u000a    setlocale(6,\u000a                "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                + 0xca);\u000a    bindtextdomain(0x404086,"/usr/local/share/locale");\u000a    textdomain(0x404086);\u000a    atexit(close_stdout);\u000a    __s1 = in_RSI[1];\u000a    iVar1 = strcmp(__s1,"--help");\u000a    if (iVar1 == 0) {\u000a      __s1 = (char *)0x0;\u000a      iVar1 = usage();\u000a      file_name = __s1;\u000a      return iVar1;\u000a    }\u000a    iVar1 = strcmp(__s1,"--version");\u000a    if (iVar1 == 0) {\u000a      version_etc(stdout,"true","GNU coreutils",Version,"Jim Meyering",0);\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,RSI\nCMP EDI,0x2\nJNZ 0x004016b5\nMOV RDI,qword ptr [RBX]\nCALL 0x004017a0\nMOV EDI,0x6\nMOV ESI,0x404931\nCALL 0x00401260\nMOV EDI,0x404086\nMOV ESI,0x404059\nCALL 0x004010e0\nMOV EDI,0x404086\nCALL 0x004010c0\nMOV EDI,0x4016e0\nCALL 0x00403e80\nMOV RBX,qword ptr [RBX + 0x8]\nMOV ESI,0x404071\nMOV RDI,RBX\nCALL 0x004011c0\nTEST EAX,EAX\nJZ 0x004016b9\nMOV ESI,0x404078\nMOV RDI,RBX\nCALL 0x004011c0\nTEST EAX,EAX\nJNZ 0x004016b5\nMOV RDI,qword ptr [0x00607228]\nMOV RCX,qword ptr [0x006071a0]\nMOV ESI,0x404054\nMOV EDX,0x404082\nMOV R8D,0x404090\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00403490\nXOR EAX,EAX\nPOP RBX\nRET\nXOR EDI,EDI\nCALL 0x00401420\n'
p536
S'53\n48 89 f3\n83 ff 02\n0f 85 88 00 00 00\n48 8b 3b\ne8 6b 01 00 00\nbf 06 00 00 00\nbe 31 49 40 00\ne8 1c fc ff ff\nbf 86 40 40 00\nbe 59 40 40 00\ne8 8d fa ff ff\nbf 86 40 40 00\ne8 63 fa ff ff\nbf e0 16 40 00\ne8 19 28 00 00\n48 8b 5b 08\nbe 71 40 40 00\n48 89 df\ne8 48 fb ff ff\n85 c0\n74 3d\nbe 78 40 40 00\n48 89 df\ne8 37 fb ff ff\n85 c0\n75 28\n48 8b 3d 94 5b 20 00\n48 8b 0d 05 5b 20 00\nbe 54 40 40 00\nba 82 40 40 00\n41 b8 90 40 40 00\n45 31 c9\n31 c0\ne8 db 1d 00 00\n31 c0\n5b\nc3\n31 ff\ne8 60 fd ff ff\n'
p537
S'.text:0000000000401620\n.text:0000000000401621\n.text:0000000000401624\n.text:0000000000401627\n.text:000000000040162d\n.text:0000000000401630\n.text:0000000000401635\n.text:000000000040163a\n.text:000000000040163f\n.text:0000000000401644\n.text:0000000000401649\n.text:000000000040164e\n.text:0000000000401653\n.text:0000000000401658\n.text:000000000040165d\n.text:0000000000401662\n.text:0000000000401667\n.text:000000000040166b\n.text:0000000000401670\n.text:0000000000401673\n.text:0000000000401678\n.text:000000000040167a\n.text:000000000040167c\n.text:0000000000401681\n.text:0000000000401684\n.text:0000000000401689\n.text:000000000040168b\n.text:000000000040168d\n.text:0000000000401694\n.text:000000000040169b\n.text:00000000004016a0\n.text:00000000004016a5\n.text:00000000004016ab\n.text:00000000004016ae\n.text:00000000004016b0\n.text:00000000004016b5\n.text:00000000004016b7\n.text:00000000004016b8\n.text:00000000004016b9\n.text:00000000004016bb\n'
p538
tp539
sS'realloc'
p540
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00607120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x00607120]\n'
p543
S'ff 25 da 5e 20 00\n'
p544
S'.plt:0000000000401240\n'
p545
tp546
sS'xcharalloc'
p547
(S'\n__stdcall xcharalloc(size_t n)\n'
p548
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p549
S'JMP 0x004035c0\n'
p550
S'e9 2b ff ff ff\n'
p551
S'.text:0000000000403690\n'
p552
tp553
sS'c_isupper'
p554
(S'\n__stdcall c_isupper()\n'
p555
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p556
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p557
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p558
S'.text:00000000004038d0\n.text:00000000004038d3\n.text:00000000004038d6\n.text:00000000004038d9\n'
p559
tp560
sS'__fprintf_chk'
p561
(S'\n__stdcall __fprintf_chk()\n'
p562
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00607170)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x00607170]\n'
p564
S'ff 25 8a 5e 20 00\n'
p565
S'.plt:00000000004012e0\n'
p566
tp567
sS'get_charset_aliases'
p568
(S'\n__stdcall get_charset_aliases()\n'
p569
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00403c34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00403c34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00403c34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00403c34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00403c34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00403c34_caseD_9;\u000a      case -1:\u000a        goto switchD_00403c34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00403c8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00403c93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00403c34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00403c93;\u000a  }\u000a  goto LAB_00403c8d;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x006073b0]\nTEST R15,R15\nJNZ 0x00403ca2\nMOV EDI,0x404f9c\nCALL 0x00401030\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403a58\nCMP byte ptr [RBX],0x0\nJNZ 0x00403a5d\nMOV EBX,0x404fac\nMOV RDI,RBX\nCALL 0x00401110\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00403a77\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00403a79\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004011f0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00403acd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004011d0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00403ad8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00403af5\nMOV R15D,0x404931\nJMP 0x00403c9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401290\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403c8d\nMOV ESI,0x40425f\nMOV EDI,EBP\nCALL 0x00401250\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00403c54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00403c20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401090\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401090\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00403c20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401220\nMOV ESI,0x404fbb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401160\nCMP EAX,0x2\nJL 0x00403c74\nMOV RDI,R12\nCALL 0x00401110\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401110\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00403bfd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401240\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00403b44\nJMP 0x00403c5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004011f0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00403b44\nJMP 0x00403c5d\nMOV RDI,RBX\nCALL 0x004010b0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00403b87\nJMP qword ptr [0x404e60 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004010b0\nCMP EAX,-0x1\nJZ 0x00403c74\nCMP EAX,0xa\nJNZ 0x00403c40\nJMP 0x00403c20\nMOV EDI,EBP\nCALL 0x00401170\nJMP 0x00403c8d\nMOV RDI,R15\nCALL 0x00401040\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00403cc0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00403c8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00403c93\nMOV R15D,0x404931\nMOV RDI,R13\nCALL 0x00401040\nMOV qword ptr [0x006073b0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 78 39 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 9c 4f 40 00\ne8 e5 d5 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb ac 4f 40 00\n48 89 df\ne8 ab d6 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 69 d7 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 d7 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 31 49 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 8c d7 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 5f 42 40 00\n89 ef\ne8 36 d7 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 2b d5 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 1b d5 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 8f d6 ff ff\nbe bb 4f 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 ba d5 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 59 d5 ff ff\n49 89 c4\n48 89 ef\ne8 4e d5 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 56 d6 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 e5 d5 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 88 d4 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 60 4e 40 00\n48 89 df\ne8 68 d4 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 15 d5 ff ff\neb 30\n4c 89 ff\ne8 db d3 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 31 49 40 00\n4c 89 ef\ne8 a5 d3 ff ff\n4c 89 3d 0e 37 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000403a20\n.text:0000000000403a21\n.text:0000000000403a23\n.text:0000000000403a25\n.text:0000000000403a27\n.text:0000000000403a29\n.text:0000000000403a2a\n.text:0000000000403a31\n.text:0000000000403a38\n.text:0000000000403a3b\n.text:0000000000403a41\n.text:0000000000403a46\n.text:0000000000403a4b\n.text:0000000000403a4e\n.text:0000000000403a51\n.text:0000000000403a53\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5d\n.text:0000000000403a60\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a6d\n.text:0000000000403a72\n.text:0000000000403a75\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7d\n.text:0000000000403a82\n.text:0000000000403a87\n.text:0000000000403a8a\n.text:0000000000403a8d\n.text:0000000000403a8f\n.text:0000000000403a92\n.text:0000000000403a95\n.text:0000000000403a98\n.text:0000000000403a9d\n.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa6\n.text:0000000000403aa8\n.text:0000000000403aae\n.text:0000000000403ab8\n.text:0000000000403abd\n.text:0000000000403ac7\n.text:0000000000403acb\n.text:0000000000403acd\n.text:0000000000403ad3\n.text:0000000000403ad8\n.text:0000000000403ae2\n.text:0000000000403ae7\n.text:0000000000403af1\n.text:0000000000403af5\n.text:0000000000403afa\n.text:0000000000403afc\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b06\n.text:0000000000403b08\n.text:0000000000403b0e\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b1a\n.text:0000000000403b1d\n.text:0000000000403b20\n.text:0000000000403b26\n.text:0000000000403b2b\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b37\n.text:0000000000403b3a\n.text:0000000000403b3f\n.text:0000000000403b44\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b4f\n.text:0000000000403b52\n.text:0000000000403b55\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b68\n.text:0000000000403b6d\n.text:0000000000403b70\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b82\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8c\n.text:0000000000403b91\n.text:0000000000403b96\n.text:0000000000403b98\n.text:0000000000403b9b\n.text:0000000000403b9e\n.text:0000000000403ba1\n.text:0000000000403ba6\n.text:0000000000403ba9\n.text:0000000000403baf\n.text:0000000000403bb2\n.text:0000000000403bb7\n.text:0000000000403bba\n.text:0000000000403bbd\n.text:0000000000403bc2\n.text:0000000000403bc5\n.text:0000000000403bca\n.text:0000000000403bcf\n.text:0000000000403bd2\n.text:0000000000403bd4\n.text:0000000000403bd8\n.text:0000000000403bdd\n.text:0000000000403be2\n.text:0000000000403be5\n.text:0000000000403bea\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bfb\n.text:0000000000403bfd\n.text:0000000000403c02\n.text:0000000000403c06\n.text:0000000000403c0b\n.text:0000000000403c0e\n.text:0000000000403c11\n.text:0000000000403c17\n.text:0000000000403c20\n.text:0000000000403c23\n.text:0000000000403c28\n.text:0000000000403c2b\n.text:0000000000403c2e\n.text:0000000000403c34\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c4d\n.text:0000000000403c50\n.text:0000000000403c52\n.text:0000000000403c54\n.text:0000000000403c56\n.text:0000000000403c5b\n.text:0000000000403c5d\n.text:0000000000403c60\n.text:0000000000403c65\n.text:0000000000403c67\n.text:0000000000403c6c\n.text:0000000000403c6f\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c7c\n.text:0000000000403c81\n.text:0000000000403c84\n.text:0000000000403c86\n.text:0000000000403c8b\n.text:0000000000403c8d\n.text:0000000000403c93\n.text:0000000000403c96\n.text:0000000000403c9b\n.text:0000000000403ca2\n.text:0000000000403ca5\n.text:0000000000403cac\n.text:0000000000403cad\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb5\n.text:0000000000403cb6\n'
p573
tp574
sS'nl_langinfo'
p575
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00607108)();\u000a  return pcVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00607108]\n'
p578
S'ff 25 f2 5e 20 00\n'
p579
S'.plt:0000000000401210\n'
p580
tp581
sS'c_isalnum'
p582
(S'\n__stdcall c_isalnum()\n'
p583
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p584
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004037eb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004037eb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004037ea\nXOR EAX,EAX\nRET\n'
p585
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p586
S'.text:00000000004037d0\n.text:00000000004037d2\n.text:00000000004037d5\n.text:00000000004037d8\n.text:00000000004037da\n.text:00000000004037e4\n.text:00000000004037e8\n.text:00000000004037ea\n.text:00000000004037eb\n.text:00000000004037ee\n.text:00000000004037f1\n.text:00000000004037f3\n.text:00000000004037f5\n'
p587
tp588
sS'x2realloc'
p589
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p590
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p591
S'MOV EDX,0x1\nJMP 0x00403630\n'
p592
S'ba 01 00 00 00\neb 89\n'
p593
S'.text:00000000004036a0\n.text:00000000004036a5\n'
p594
tp595
sS'strlen'
p596
(S'\n__stdcall strlen(char * __s)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00607088)();\u000a  return sVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x00607088]\n'
p599
S'ff 25 72 5f 20 00\n'
p600
S'.plt:0000000000401110\n'
p601
tp602
sS'memcmp'
p603
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006070c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x006070c0]\n'
p606
S'ff 25 3a 5f 20 00\n'
p607
S'.plt:0000000000401180\n'
p608
tp609
sS'quotearg_n_style_mem'
p610
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p611
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004029d0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004027a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000402a30\n.text:0000000000402a31\n.text:0000000000402a33\n.text:0000000000402a35\n.text:0000000000402a36\n.text:0000000000402a3a\n.text:0000000000402a3d\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a48\n.text:0000000000402a4d\n.text:0000000000402a4f\n.text:0000000000402a52\n.text:0000000000402a55\n.text:0000000000402a58\n.text:0000000000402a5d\n.text:0000000000402a61\n.text:0000000000402a62\n.text:0000000000402a64\n.text:0000000000402a66\n.text:0000000000402a67\n'
p615
tp616
sS'_exit'
p617
(S'\n__stdcall _exit(int __status)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00607040)();\u000a  return;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x00607040]\n'
p620
S'ff 25 ba 5f 20 00\n'
p621
S'.plt:0000000000401080\n'
p622
tp623
sS'__errno_location'
p624
(S'\n__stdcall __errno_location()\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00607030)();\u000a  return piVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00607030]\n'
p627
S'ff 25 ca 5f 20 00\n'
p628
S'.plt:0000000000401060\n'
p629
tp630
sS'x2nrealloc'
p631
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p632
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p633
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040365c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00403689\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040367a\nTEST RCX,RCX\nJNZ 0x0040367a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00403600\nPUSH RAX\nCALL 0x00403750\n'
p634
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p635
S'.text:0000000000403630\n.text:0000000000403633\n.text:0000000000403636\n.text:0000000000403639\n.text:000000000040363b\n.text:0000000000403645\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364d\n.text:000000000040364f\n.text:0000000000403652\n.text:0000000000403655\n.text:000000000040365a\n.text:000000000040365c\n.text:000000000040365f\n.text:0000000000403661\n.text:0000000000403666\n.text:0000000000403668\n.text:000000000040366b\n.text:000000000040366d\n.text:0000000000403674\n.text:0000000000403677\n.text:000000000040367a\n.text:000000000040367d\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403689\n.text:000000000040368a\n'
p636
tp637
sS'xrealloc'
p638
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p639
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p640
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00403617\nTEST RBX,RBX\nJNZ 0x00403617\nCALL 0x00401040\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401240\nTEST RBX,RBX\nJZ 0x00403629\nTEST RAX,RAX\nJZ 0x0040362b\nPOP RBX\nRET\nCALL 0x00403750\n'
p641
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 2d da ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 21 dc ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p642
S'.text:0000000000403600\n.text:0000000000403601\n.text:0000000000403604\n.text:0000000000403607\n.text:0000000000403609\n.text:000000000040360c\n.text:000000000040360e\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403616\n.text:0000000000403617\n.text:000000000040361a\n.text:000000000040361f\n.text:0000000000403622\n.text:0000000000403624\n.text:0000000000403627\n.text:0000000000403629\n.text:000000000040362a\n.text:000000000040362b\n'
p643
tp644
sS'quotearg_n_options'
p645
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p646
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401060\nTEST R12D,R12D\nJS 0x00402951\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006071b0]\nCMP dword ptr [0x006071b8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040286b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x6071c0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00403600\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006071b0],R15\nJNZ 0x00402832\nMOVUPS XMM0,xmmword ptr [0x006071c0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006071b8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401150\nMOV dword ptr [0x006071b8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004019c0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004028cd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040293b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x6072b0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004028f8\nCALL 0x00401040\nMOV RDI,R15\nCALL 0x00403690\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004019c0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401050\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 a1 e8 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 d6 49 20 00\n44 39 25 d7 49 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd c0 71 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 8b 49 20 00\n75 0b\n0f 10 05 92 49 20 00\n41 0f 11 07\n8b 05 80 49 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 fd e8 ff ff\n89 1d 5f 49 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 b0 72 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 48 e7 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa e6 ff ff\n'
p649
S'.text:00000000004027a0\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a5\n.text:00000000004027a7\n.text:00000000004027a9\n.text:00000000004027aa\n.text:00000000004027ae\n.text:00000000004027b1\n.text:00000000004027b4\n.text:00000000004027b7\n.text:00000000004027ba\n.text:00000000004027bf\n.text:00000000004027c2\n.text:00000000004027c8\n.text:00000000004027cd\n.text:00000000004027cf\n.text:00000000004027d3\n.text:00000000004027da\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027eb\n.text:00000000004027f0\n.text:00000000004027f2\n.text:00000000004027f7\n.text:00000000004027fa\n.text:00000000004027fd\n.text:0000000000402803\n.text:0000000000402805\n.text:0000000000402808\n.text:000000000040280c\n.text:000000000040280f\n.text:0000000000402813\n.text:0000000000402818\n.text:000000000040281b\n.text:000000000040281e\n.text:0000000000402825\n.text:0000000000402827\n.text:000000000040282e\n.text:0000000000402832\n.text:0000000000402838\n.text:000000000040283b\n.text:000000000040283f\n.text:0000000000402842\n.text:0000000000402845\n.text:0000000000402849\n.text:000000000040284b\n.text:000000000040284e\n.text:0000000000402853\n.text:0000000000402859\n.text:000000000040285c\n.text:0000000000402861\n.text:0000000000402866\n.text:000000000040286b\n.text:000000000040286e\n.text:0000000000402872\n.text:0000000000402876\n.text:000000000040287b\n.text:000000000040287f\n.text:0000000000402883\n.text:0000000000402887\n.text:000000000040288b\n.text:000000000040288f\n.text:0000000000402894\n.text:0000000000402897\n.text:000000000040289a\n.text:000000000040289d\n.text:00000000004028a2\n.text:00000000004028a5\n.text:00000000004028a8\n.text:00000000004028ab\n.text:00000000004028ac\n.text:00000000004028b1\n.text:00000000004028b5\n.text:00000000004028b8\n.text:00000000004028bb\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c6\n.text:00000000004028cb\n.text:00000000004028cd\n.text:00000000004028d1\n.text:00000000004028d6\n.text:00000000004028d9\n.text:00000000004028dc\n.text:00000000004028e1\n.text:00000000004028e6\n.text:00000000004028e9\n.text:00000000004028ee\n.text:00000000004028f1\n.text:00000000004028f3\n.text:00000000004028f8\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402903\n.text:0000000000402906\n.text:000000000040290b\n.text:000000000040290e\n.text:0000000000402912\n.text:0000000000402915\n.text:0000000000402918\n.text:000000000040291d\n.text:0000000000402922\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292d\n.text:000000000040292e\n.text:0000000000402933\n.text:0000000000402937\n.text:000000000040293b\n.text:000000000040293f\n.text:0000000000402942\n.text:0000000000402946\n.text:0000000000402947\n.text:0000000000402949\n.text:000000000040294b\n.text:000000000040294d\n.text:000000000040294f\n.text:0000000000402950\n.text:0000000000402951\n'
p650
tp651
sS'strcmp'
p652
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_006070e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x006070e0]\n'
p655
S'ff 25 1a 5f 20 00\n'
p656
S'.plt:00000000004011c0\n'
p657
tp658
sS'set_custom_quoting'
p659
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p660
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p661
S'TEST RDI,RDI\nMOV EAX,0x607270\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00401935\nTEST RDX,RDX\nJZ 0x00401935\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401050\n'
p662
S'48 85 ff\nb8 70 72 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 f7 ff ff\n'
p663
S'.text:0000000000401910\n.text:0000000000401913\n.text:0000000000401918\n.text:000000000040191c\n.text:0000000000401922\n.text:0000000000401925\n.text:0000000000401927\n.text:000000000040192a\n.text:000000000040192c\n.text:0000000000401930\n.text:0000000000401934\n.text:0000000000401935\n.text:0000000000401936\n'
p664
tp665
sS'c_isalpha'
p666
(S'\n__stdcall c_isalpha()\n'
p667
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p668
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040381b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p669
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p670
S'.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403806\n.text:0000000000403808\n.text:0000000000403812\n.text:0000000000403814\n.text:0000000000403817\n.text:000000000040381a\n.text:000000000040381b\n.text:000000000040381d\n'
p671
tp672
sS'quotearg_custom_mem'
p673
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p674
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00402bb0\n'
p676
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p677
S'.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c46\n.text:0000000000402c49\n.text:0000000000402c4c\n.text:0000000000402c4e\n.text:0000000000402c51\n'
p678
tp679
sS'close_stdout'
p680
(S'\n__stdcall close_stdout()\n'
p681
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00401707;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x404265,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00401707:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00607228]\nCALL 0x00403920\nTEST EAX,EAX\nJZ 0x00401707\nCMP byte ptr [0x00607258],0x0\nJZ 0x0040171c\nCALL 0x00401060\nCMP dword ptr [RAX],0x20\nJNZ 0x0040171c\nMOV RDI,qword ptr [0x00607240]\nCALL 0x00403920\nTEST EAX,EAX\nJNZ 0x00401761\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x404255\nMOV EDX,0x5\nCALL 0x004010f0\nMOV R14,RAX\nMOV RBX,qword ptr [0x00607250]\nCALL 0x00401060\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040176c\nXOR EDI,EDI\nMOV EDX,0x404265\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401280\nMOV EDI,dword ptr [0x006071a8]\nCALL 0x00401080\nMOV EDI,dword ptr [0x006071a8]\nCALL 0x00401080\nMOV RDI,RBX\nCALL 0x00402b30\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x404261\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401280\nMOV EDI,dword ptr [0x006071a8]\nCALL 0x00401080\n'
p683
S'55\n41 56\n53\n48 8b 3d 3d 5b 20 00\ne8 30 22 00 00\n85 c0\n74 13\n80 3d 5d 5b 20 00 00\n74 1f\ne8 5e f9 ff ff\n83 38 20\n75 15\n48 8b 3d 32 5b 20 00\ne8 0d 22 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 55 42 40 00\nba 05 00 00 00\ne8 c3 f9 ff ff\n49 89 c6\n48 8b 1d 19 5b 20 00\ne8 24 f9 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 65 42 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 2a fb ff ff\n8b 3d 4c 5a 20 00\ne8 1f f9 ff ff\n8b 3d 41 5a 20 00\ne8 14 f9 ff ff\n48 89 df\ne8 bc 13 00 00\n48 89 c1\n31 ff\nba 61 42 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 f6 fa ff ff\n8b 3d 18 5a 20 00\ne8 eb f8 ff ff\n'
p684
S'.text:00000000004016e0\n.text:00000000004016e1\n.text:00000000004016e3\n.text:00000000004016e4\n.text:00000000004016eb\n.text:00000000004016f0\n.text:00000000004016f2\n.text:00000000004016f4\n.text:00000000004016fb\n.text:00000000004016fd\n.text:0000000000401702\n.text:0000000000401705\n.text:0000000000401707\n.text:000000000040170e\n.text:0000000000401713\n.text:0000000000401715\n.text:0000000000401717\n.text:0000000000401718\n.text:000000000040171a\n.text:000000000040171b\n.text:000000000040171c\n.text:000000000040171e\n.text:0000000000401723\n.text:0000000000401728\n.text:000000000040172d\n.text:0000000000401730\n.text:0000000000401737\n.text:000000000040173c\n.text:000000000040173f\n.text:0000000000401741\n.text:0000000000401743\n.text:0000000000401745\n.text:000000000040174a\n.text:000000000040174c\n.text:000000000040174e\n.text:0000000000401751\n.text:0000000000401756\n.text:000000000040175c\n.text:0000000000401761\n.text:0000000000401767\n.text:000000000040176c\n.text:000000000040176f\n.text:0000000000401774\n.text:0000000000401777\n.text:0000000000401779\n.text:000000000040177e\n.text:0000000000401780\n.text:0000000000401782\n.text:0000000000401785\n.text:000000000040178a\n.text:0000000000401790\n'
p685
tp686
sS'version_etc_ar'
p687
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p688
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p689
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00403410\nJMP 0x004030a0\n'
p690
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p691
S'.text:0000000000403400\n.text:0000000000403407\n.text:0000000000403410\n.text:0000000000403416\n.text:000000000040341a\n.text:000000000040341c\n'
p692
tp693
sS'rpl_calloc'
p694
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p695
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_006070d8)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004037bb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004037c0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004037c0\nPUSH RAX\nCALL 0x00401060\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004011b0\n'
p697
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af d8 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 e5 d9 ff ff\n'
p698
S'.text:0000000000403780\n.text:0000000000403783\n.text:0000000000403788\n.text:000000000040378a\n.text:000000000040378d\n.text:0000000000403792\n.text:0000000000403794\n.text:0000000000403797\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a0\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037a9\n.text:00000000004037ab\n.text:00000000004037ac\n.text:00000000004037b1\n.text:00000000004037b7\n.text:00000000004037b9\n.text:00000000004037ba\n.text:00000000004037bb\n.text:00000000004037c0\n.text:00000000004037c3\n.text:00000000004037c6\n'
p699
tp700
sS'memset'
p701
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006070a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x006070a8]\n'
p704
S'ff 25 52 5f 20 00\n'
p705
S'.plt:0000000000401150\n'
p706
tp707
sS'c_isxdigit'
p708
(S'\n__stdcall c_isxdigit()\n'
p709
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p710
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004038fb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p711
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p712
S'.text:00000000004038e0\n.text:00000000004038e3\n.text:00000000004038e6\n.text:00000000004038e8\n.text:00000000004038f2\n.text:00000000004038f4\n.text:00000000004038f7\n.text:00000000004038fa\n.text:00000000004038fb\n.text:00000000004038fd\n'
p713
tp714
sS'__libc_csu_fini'
p715
(S'\n__stdcall __libc_csu_fini()\n'
p716
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p717
S'RET\n'
p718
S'f3 c3\n'
p719
S'.text:0000000000403e70\n'
p720
tp721
sS'getc_unlocked'
p722
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00607058)();\u000a  return iVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00607058]\n'
p725
S'ff 25 a2 5f 20 00\n'
p726
S'.plt:00000000004010b0\n'
p727
tp728
sS'abort'
p729
(S'\n__stdcall abort()\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00607028)();\u000a  return;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00607028]\n'
p732
S'ff 25 d2 5f 20 00\n'
p733
S'.plt:0000000000401050\n'
p734
tp735
sS'c_isascii'
p736
(S'\n__stdcall c_isascii()\n'
p737
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p738
S'CMP EDI,0x80\nSETC AL\nRET\n'
p739
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p740
S'.text:0000000000403820\n.text:0000000000403826\n.text:0000000000403829\n'
p741
tp742
sS'version_etc'
p743
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p744
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p745
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004034d2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00403430\nADD RSP,0xd8\nRET\n'
p746
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p747
S'.text:0000000000403490\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349b\n.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034aa\n.text:00000000004034b2\n.text:00000000004034ba\n.text:00000000004034c2\n.text:00000000004034ca\n.text:00000000004034d2\n.text:00000000004034d7\n.text:00000000004034dc\n.text:00000000004034e1\n.text:00000000004034e6\n.text:00000000004034ee\n.text:00000000004034f3\n.text:00000000004034fb\n.text:0000000000403502\n.text:0000000000403505\n.text:000000000040350a\n.text:0000000000403511\n'
p748
tp749
sS'__ctype_b_loc'
p750
(S'\n__stdcall __ctype_b_loc()\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00607188)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x00607188]\n'
p753
S'ff 25 72 5e 20 00\n'
p754
S'.plt:0000000000401310\n'
p755
tp756
sS'lseek'
p757
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006070a0)();\u000a  return _Var1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x006070a0]\n'
p760
S'ff 25 5a 5f 20 00\n'
p761
S'.plt:0000000000401140\n'
p762
tp763
sS'quotearg'
p764
(S'\n__stdcall quotearg(char * arg)\n'
p765
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00402790\n'
p767
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p768
S'.text:0000000000402970\n.text:0000000000402973\n.text:0000000000402975\n.text:0000000000402978\n'
p769
tp770
sS'_start'
p771
(S'\n__stdcall _start()\n'
p772
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00606ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p773
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x403e70\nMOV RCX,0x403e00\nMOV RDI,0x401620\nCALL qword ptr [0x00606ff0]\nHLT\n'
p774
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 70 3e 40 00\n48 c7 c1 00 3e 40 00\n48 c7 c7 20 16 40 00\nff 15 a6 5c 20 00\nf4\n'
p775
S'.text:0000000000401320\n.text:0000000000401322\n.text:0000000000401325\n.text:0000000000401326\n.text:0000000000401329\n.text:000000000040132d\n.text:000000000040132e\n.text:000000000040132f\n.text:0000000000401336\n.text:000000000040133d\n.text:0000000000401344\n.text:000000000040134a\n'
p776
tp777
sS'c_iscntrl'
p778
(S'\n__stdcall c_iscntrl()\n'
p779
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p780
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00403848\nRET\nCMP EDI,0x7f\nJZ 0x00403847\nXOR EAX,EAX\nRET\n'
p781
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p782
S'.text:0000000000403840\n.text:0000000000403842\n.text:0000000000403845\n.text:0000000000403847\n.text:0000000000403848\n.text:000000000040384b\n.text:000000000040384d\n.text:000000000040384f\n'
p783
tp784
sS'c_isblank'
p785
(S'\n__stdcall c_isblank()\n'
p786
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p787
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p788
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p789
S'.text:0000000000403830\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383c\n.text:000000000040383e\n'
p790
tp791
sS'quotearg_n_mem'
p792
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p793
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p794
S'MOV ECX,0x607270\nJMP 0x004027a0\n'
p795
S'b9 70 72 60 00\ne9 36 fe ff ff\n'
p796
S'.text:0000000000402960\n.text:0000000000402965\n'
p797
tp798
sS'atexit'
p799
(S'\n__stdcall atexit(__func * __func)\n'
p800
V\u000a/* WARNING: Removing unreachable block (ram,0x00403ea0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00607158)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'MOV RAX,0x607198\nTEST RAX,RAX\nJZ 0x00403ea0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004012b0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004012b0\n'
p802
S'48 c7 c0 98 71 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 1a d4 ff ff\n31 d2\n31 f6\ne9 07 d4 ff ff\n'
p803
S'.text:0000000000403e80\n.text:0000000000403e87\n.text:0000000000403e8a\n.text:0000000000403e8c\n.text:0000000000403e8f\n.text:0000000000403e91\n.text:0000000000403ea0\n.text:0000000000403ea2\n.text:0000000000403ea4\n'
p804
tp805
sS'__printf_chk'
p806
(S'\n__stdcall __printf_chk()\n'
p807
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00607138)();\u000a  return;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x00607138]\n'
p809
S'ff 25 c2 5e 20 00\n'
p810
S'.plt:0000000000401270\n'
p811
tp812
sS'fdopen'
p813
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00607128)();\u000a  return pFVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x00607128]\n'
p816
S'ff 25 d2 5e 20 00\n'
p817
S'.plt:0000000000401250\n'
p818
tp819
sS'error'
p820
(S'\n__stdcall error()\n'
p821
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00607140)();\u000a  return;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x00607140]\n'
p823
S'ff 25 ba 5e 20 00\n'
p824
S'.plt:0000000000401280\n'
p825
tp826
sS'strcaseeq6'
p827
(S'\n__stdcall strcaseeq6()\n'
p828
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00403032\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403039\nJMP 0x0040304e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040304e\nTEST BPL,BPL\nJZ 0x00403049\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00403060\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p830
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 b1 08 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p831
S'.text:0000000000403010\n.text:0000000000403011\n.text:0000000000403012\n.text:0000000000403013\n.text:0000000000403015\n.text:0000000000403018\n.text:000000000040301a\n.text:000000000040301f\n.text:0000000000403023\n.text:0000000000403025\n.text:0000000000403027\n.text:000000000040302a\n.text:000000000040302c\n.text:000000000040302e\n.text:0000000000403030\n.text:0000000000403032\n.text:0000000000403034\n.text:0000000000403037\n.text:0000000000403039\n.text:000000000040303c\n.text:000000000040303e\n.text:0000000000403041\n.text:0000000000403045\n.text:0000000000403046\n.text:0000000000403047\n.text:0000000000403049\n.text:000000000040304e\n.text:0000000000403052\n.text:0000000000403053\n.text:0000000000403054\n'
p832
tp833
sS'strcaseeq5'
p834
(S'\n__stdcall strcaseeq5()\n'
p835
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00402fe6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402fed\nJMP 0x00403004\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403004\nTEST BPL,BPL\nJZ 0x00402fff\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00403010\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p837
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 fd 08 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p838
S'.text:0000000000402fc0\n.text:0000000000402fc1\n.text:0000000000402fc3\n.text:0000000000402fc4\n.text:0000000000402fc7\n.text:0000000000402fc9\n.text:0000000000402fcc\n.text:0000000000402fce\n.text:0000000000402fd3\n.text:0000000000402fd7\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe2\n.text:0000000000402fe4\n.text:0000000000402fe6\n.text:0000000000402fe8\n.text:0000000000402feb\n.text:0000000000402fed\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff6\n.text:0000000000402ff9\n.text:0000000000402ffa\n.text:0000000000402ffc\n.text:0000000000402ffd\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403005\n.text:0000000000403007\n.text:0000000000403008\n'
p839
tp840
sS'emit_ancillary_info'
p841
(S'\n__stdcall emit_ancillary_info()\n'
p842
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004041e0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("true",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "true";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00404054,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00404054);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x404931;\u000a  if (__s2 == "true") {\u000a    uVar3 = 0x4040b9;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p843
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4041e0\nMOV ESI,0x40409d\nNOP\nMOV EDI,0x404054\nCALL 0x004011c0\nTEST EAX,EAX\nJZ 0x0040151b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401500\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x404054\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4040fc\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x404082\nMOV ECX,0x404113\nXOR EAX,EAX\nCALL 0x00401270\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x004015a4\nMOV ESI,0x40413a\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401070\nTEST EAX,EAX\nJZ 0x004015a4\nXOR EDI,EDI\nMOV ESI,0x40413e\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x404054\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x404183\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RSI,RAX\nMOV R14D,0x404054\nMOV EDI,0x1\nMOV EDX,0x404113\nMOV ECX,0x404054\nXOR EAX,EAX\nCALL 0x00401270\nXOR EDI,EDI\nMOV ESI,0x4041a2\nMOV EDX,0x5\nCALL 0x004010f0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4040b9\nMOV ECX,0x404931\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401270\n'
p844
S'41 56\n53\n50\nbb e0 41 40 00\nbe 9d 40 40 00\n66 90\nbf 54 40 40 00\ne8 b6 fc ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 54 40 40 00\n48 0f 45 d8\n31 ff\nbe fc 40 40 00\nba 05 00 00 00\ne8 b4 fb ff ff\n48 89 c6\nbf 01 00 00 00\nba 82 40 40 00\nb9 13 41 40 00\n31 c0\ne8 1b fd ff ff\nbf 05 00 00 00\n31 f6\ne8 ff fc ff ff\n48 85 c0\n74 3e\nbe 3a 41 40 00\nba 03 00 00 00\n48 89 c7\ne8 f8 fa ff ff\n85 c0\n74 28\n31 ff\nbe 3e 41 40 00\nba 05 00 00 00\ne8 63 fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 54 40 40 00\n31 c0\n48 89 ce\ne8 cc fc ff ff\n31 ff\nbe 83 41 40 00\nba 05 00 00 00\ne8 3b fb ff ff\n48 89 c6\n41 be 54 40 40 00\nbf 01 00 00 00\nba 13 41 40 00\nb9 54 40 40 00\n31 c0\ne8 9c fc ff ff\n31 ff\nbe a2 41 40 00\nba 05 00 00 00\ne8 0b fb ff ff\n48 89 c2\n4c 39 f3\nb8 b9 40 40 00\nb9 31 49 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 5e fc ff ff\n'
p845
S'.text:00000000004014f0\n.text:00000000004014f2\n.text:00000000004014f3\n.text:00000000004014f4\n.text:00000000004014f9\n.text:00000000004014fe\n.text:0000000000401500\n.text:0000000000401505\n.text:000000000040150a\n.text:000000000040150c\n.text:000000000040150e\n.text:0000000000401512\n.text:0000000000401516\n.text:0000000000401519\n.text:000000000040151b\n.text:000000000040151f\n.text:0000000000401522\n.text:0000000000401527\n.text:000000000040152b\n.text:000000000040152d\n.text:0000000000401532\n.text:0000000000401537\n.text:000000000040153c\n.text:000000000040153f\n.text:0000000000401544\n.text:0000000000401549\n.text:000000000040154e\n.text:0000000000401550\n.text:0000000000401555\n.text:000000000040155a\n.text:000000000040155c\n.text:0000000000401561\n.text:0000000000401564\n.text:0000000000401566\n.text:000000000040156b\n.text:0000000000401570\n.text:0000000000401573\n.text:0000000000401578\n.text:000000000040157a\n.text:000000000040157c\n.text:000000000040157e\n.text:0000000000401583\n.text:0000000000401588\n.text:000000000040158d\n.text:0000000000401590\n.text:0000000000401595\n.text:000000000040159a\n.text:000000000040159c\n.text:000000000040159f\n.text:00000000004015a4\n.text:00000000004015a6\n.text:00000000004015ab\n.text:00000000004015b0\n.text:00000000004015b5\n.text:00000000004015b8\n.text:00000000004015be\n.text:00000000004015c3\n.text:00000000004015c8\n.text:00000000004015cd\n.text:00000000004015cf\n.text:00000000004015d4\n.text:00000000004015d6\n.text:00000000004015db\n.text:00000000004015e0\n.text:00000000004015e5\n.text:00000000004015e8\n.text:00000000004015eb\n.text:00000000004015f0\n.text:00000000004015f5\n.text:00000000004015f9\n.text:00000000004015fe\n.text:0000000000401600\n.text:0000000000401603\n.text:0000000000401606\n.text:000000000040160a\n.text:000000000040160b\n.text:000000000040160d\n'
p846
tp847
sS'strcaseeq7'
p848
(S'\n__stdcall strcaseeq7()\n'
p849
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p850
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00403082\nTEST ECX,0xffffffdf\nJNZ 0x00403086\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040308a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p851
S'53\n48 89 fb\n31 ff\ne8 65 08 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p852
S'.text:0000000000403060\n.text:0000000000403061\n.text:0000000000403064\n.text:0000000000403066\n.text:000000000040306b\n.text:000000000040306f\n.text:0000000000403071\n.text:0000000000403073\n.text:0000000000403079\n.text:000000000040307b\n.text:0000000000403080\n.text:0000000000403081\n.text:0000000000403082\n.text:0000000000403084\n.text:0000000000403086\n.text:0000000000403088\n.text:0000000000403089\n.text:000000000040308a\n.text:000000000040308f\n.text:0000000000403090\n'
p853
tp854
sS'version_etc_va'
p855
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p856
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p857
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00403460\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040346c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00403481\nINC R9\nCMP R9,0xa\nJC 0x00403440\nMOV R8,RSP\nCALL 0x004030a0\nADD RSP,0x58\nRET\n'
p858
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p859
S'.text:0000000000403430\n.text:0000000000403434\n.text:0000000000403437\n.text:0000000000403440\n.text:0000000000403443\n.text:0000000000403447\n.text:0000000000403449\n.text:000000000040344c\n.text:0000000000403450\n.text:0000000000403454\n.text:0000000000403457\n.text:0000000000403460\n.text:0000000000403464\n.text:0000000000403468\n.text:000000000040346c\n.text:000000000040346f\n.text:0000000000403473\n.text:0000000000403476\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347f\n.text:0000000000403481\n.text:0000000000403484\n.text:0000000000403489\n.text:000000000040348d\n'
p860
tp861
sS'xzalloc'
p862
(S'\n__stdcall xzalloc(size_t s)\n'
p863
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p864
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004035c0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401150\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p865
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 84 da ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p866
S'.text:00000000004036b0\n.text:00000000004036b2\n.text:00000000004036b3\n.text:00000000004036b4\n.text:00000000004036b7\n.text:00000000004036bc\n.text:00000000004036bf\n.text:00000000004036c1\n.text:00000000004036c4\n.text:00000000004036c7\n.text:00000000004036cc\n.text:00000000004036cf\n.text:00000000004036d3\n.text:00000000004036d4\n.text:00000000004036d6\n'
p867
tp868
sS'FUN_00401020'
p869
(S'\n__stdcall FUN_00401020()\n'
p870
V\u000avoid FUN_00401020(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00607010)();\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH qword ptr [0x00607008]\nJMP qword ptr [0x00607010]\n'
p872
S'ff 35 e2 5f 20 00\nff 25 e4 5f 20 00\n'
p873
S'.plt:0000000000401020\n.plt:0000000000401026\n'
p874
tp875
sS'strcaseeq0'
p876
(S'\n__stdcall strcaseeq0()\n'
p877
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00402d95\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402d9c\nJMP 0x00402dd0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00402dd0\nTEST BPL,BPL\nJZ 0x00402dcb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00402de0\nJMP 0x00402dd0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p879
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d 0b 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p880
S'.text:0000000000402d60\n.text:0000000000402d61\n.text:0000000000402d63\n.text:0000000000402d65\n.text:0000000000402d67\n.text:0000000000402d69\n.text:0000000000402d6a\n.text:0000000000402d6b\n.text:0000000000402d6e\n.text:0000000000402d71\n.text:0000000000402d74\n.text:0000000000402d77\n.text:0000000000402d79\n.text:0000000000402d7c\n.text:0000000000402d7e\n.text:0000000000402d83\n.text:0000000000402d86\n.text:0000000000402d88\n.text:0000000000402d8a\n.text:0000000000402d8d\n.text:0000000000402d8f\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d9a\n.text:0000000000402d9c\n.text:0000000000402d9f\n.text:0000000000402da1\n.text:0000000000402da5\n.text:0000000000402daa\n.text:0000000000402dad\n.text:0000000000402db1\n.text:0000000000402db5\n.text:0000000000402db9\n.text:0000000000402dbd\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcb\n.text:0000000000402dd0\n.text:0000000000402dd4\n.text:0000000000402dd5\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402dde\n'
p881
tp882
sS'strcaseeq2'
p883
(S'\n__stdcall strcaseeq2()\n'
p884
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00402ea6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402ead\nJMP 0x00402eda\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00402eda\nTEST BPL,BPL\nJZ 0x00402ed5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402ef0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 3d 0a 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p887
S'.text:0000000000402e70\n.text:0000000000402e71\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e79\n.text:0000000000402e7a\n.text:0000000000402e7b\n.text:0000000000402e7e\n.text:0000000000402e81\n.text:0000000000402e84\n.text:0000000000402e87\n.text:0000000000402e89\n.text:0000000000402e8c\n.text:0000000000402e8e\n.text:0000000000402e93\n.text:0000000000402e97\n.text:0000000000402e99\n.text:0000000000402e9b\n.text:0000000000402e9e\n.text:0000000000402ea0\n.text:0000000000402ea2\n.text:0000000000402ea4\n.text:0000000000402ea6\n.text:0000000000402ea8\n.text:0000000000402eab\n.text:0000000000402ead\n.text:0000000000402eb0\n.text:0000000000402eb2\n.text:0000000000402eb6\n.text:0000000000402eba\n.text:0000000000402ebe\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402ec9\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ece\n.text:0000000000402ed0\n.text:0000000000402ed2\n.text:0000000000402ed3\n.text:0000000000402ed5\n.text:0000000000402eda\n.text:0000000000402ede\n.text:0000000000402edf\n.text:0000000000402ee1\n.text:0000000000402ee3\n.text:0000000000402ee5\n.text:0000000000402ee7\n.text:0000000000402ee8\n'
p888
tp889
sS'strcaseeq1'
p890
(S'\n__stdcall strcaseeq1()\n'
p891
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00402e1d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402e24\nJMP 0x00402e57\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00402e57\nTEST BPL,BPL\nJZ 0x00402e52\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402e70\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p893
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 c6 0a 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p894
S'.text:0000000000402de0\n.text:0000000000402de1\n.text:0000000000402de3\n.text:0000000000402de5\n.text:0000000000402de7\n.text:0000000000402de9\n.text:0000000000402dea\n.text:0000000000402deb\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402df9\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e03\n.text:0000000000402e05\n.text:0000000000402e0a\n.text:0000000000402e0e\n.text:0000000000402e10\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e19\n.text:0000000000402e1b\n.text:0000000000402e1d\n.text:0000000000402e1f\n.text:0000000000402e22\n.text:0000000000402e24\n.text:0000000000402e27\n.text:0000000000402e29\n.text:0000000000402e2d\n.text:0000000000402e31\n.text:0000000000402e35\n.text:0000000000402e3b\n.text:0000000000402e3f\n.text:0000000000402e42\n.text:0000000000402e46\n.text:0000000000402e47\n.text:0000000000402e49\n.text:0000000000402e4b\n.text:0000000000402e4d\n.text:0000000000402e4f\n.text:0000000000402e50\n.text:0000000000402e52\n.text:0000000000402e57\n.text:0000000000402e5b\n.text:0000000000402e5c\n.text:0000000000402e5e\n.text:0000000000402e60\n.text:0000000000402e62\n.text:0000000000402e64\n.text:0000000000402e65\n'
p895
tp896
sS'strcaseeq4'
p897
(S'\n__stdcall strcaseeq4()\n'
p898
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p899
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00402f8c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402f93\nJMP 0x00402fb4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00402fb4\nTEST BPL,BPL\nJZ 0x00402faf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402fc0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p900
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 57 09 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p901
S'.text:0000000000402f60\n.text:0000000000402f61\n.text:0000000000402f63\n.text:0000000000402f65\n.text:0000000000402f66\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6d\n.text:0000000000402f6f\n.text:0000000000402f72\n.text:0000000000402f74\n.text:0000000000402f79\n.text:0000000000402f7d\n.text:0000000000402f7f\n.text:0000000000402f81\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f88\n.text:0000000000402f8a\n.text:0000000000402f8c\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f98\n.text:0000000000402f9c\n.text:0000000000402fa0\n.text:0000000000402fa3\n.text:0000000000402fa7\n.text:0000000000402fa8\n.text:0000000000402faa\n.text:0000000000402fac\n.text:0000000000402fad\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fb8\n.text:0000000000402fb9\n.text:0000000000402fbb\n.text:0000000000402fbd\n.text:0000000000402fbe\n'
p902
tp903
sS'strcaseeq3'
p904
(S'\n__stdcall strcaseeq3()\n'
p905
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004038d0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00402f20\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00402f27\nJMP 0x00402f4a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00402f4a\nTEST BPL,BPL\nJZ 0x00402f45\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402f60\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p907
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 c3 09 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p908
S'.text:0000000000402ef0\n.text:0000000000402ef1\n.text:0000000000402ef3\n.text:0000000000402ef5\n.text:0000000000402ef7\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402efe\n.text:0000000000402f01\n.text:0000000000402f03\n.text:0000000000402f06\n.text:0000000000402f08\n.text:0000000000402f0d\n.text:0000000000402f11\n.text:0000000000402f13\n.text:0000000000402f15\n.text:0000000000402f18\n.text:0000000000402f1a\n.text:0000000000402f1c\n.text:0000000000402f1e\n.text:0000000000402f20\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f27\n.text:0000000000402f2a\n.text:0000000000402f2c\n.text:0000000000402f30\n.text:0000000000402f34\n.text:0000000000402f38\n.text:0000000000402f3b\n.text:0000000000402f3c\n.text:0000000000402f3e\n.text:0000000000402f40\n.text:0000000000402f42\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f4a\n.text:0000000000402f4b\n.text:0000000000402f4d\n.text:0000000000402f4f\n.text:0000000000402f51\n.text:0000000000402f52\n'
p909
tp910
sS'register_tm_clones'
p911
(S'\n__stdcall register_tm_clones()\n'
p912
V\u000a/* WARNING: Removing unreachable block (ram,0x004013b3) */\u000a/* WARNING: Removing unreachable block (ram,0x004013bd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p913
S'MOV ESI,0x607208\nPUSH RBP\nSUB RSI,0x607208\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004013c8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004013c8\nPOP RBP\nMOV EDI,0x607208\nJMP RAX\nPOP RBP\nRET\n'
p914
S'be 08 72 60 00\n55\n48 81 ee 08 72 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 08 72 60 00\nff e0\n5d\nc3\n'
p915
S'.text:0000000000401390\n.text:0000000000401395\n.text:0000000000401396\n.text:000000000040139d\n.text:00000000004013a1\n.text:00000000004013a4\n.text:00000000004013a7\n.text:00000000004013ab\n.text:00000000004013ae\n.text:00000000004013b1\n.text:00000000004013b3\n.text:00000000004013b8\n.text:00000000004013bb\n.text:00000000004013bd\n.text:00000000004013be\n.text:00000000004013c3\n.text:00000000004013c8\n.text:00000000004013c9\n'
p916
tp917
sS'gettext_quote'
p918
(S'\n__stdcall gettext_quote(char * msgid)\n'
p919
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004047f2;\u000a        pcVar2 = &DAT_004047f6;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p920
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004010f0\nCMP RAX,RBX\nJNZ 0x00402d58\nCALL 0x00403990\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00402d60\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00402d08\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4047e2\nMOV EAX,0x4047e6\nJMP 0x00402d54\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00402d60\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00402d46\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4047f2\nMOV EAX,0x4047f6\nJMP 0x00402d54\nCMP R14D,0x9\nMOV ECX,0x4047d6\nMOV EAX,0x4047da\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p921
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 37 e4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 c9 0c 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 e2 47 40 00\nb8 e6 47 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 f2 47 40 00\nb8 f6 47 40 00\neb 0e\n41 83 fe 09\nb9 d6 47 40 00\nb8 da 47 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p922
S'.text:0000000000402ca0\n.text:0000000000402ca1\n.text:0000000000402ca3\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402caa\n.text:0000000000402cac\n.text:0000000000402cb1\n.text:0000000000402cb4\n.text:0000000000402cb9\n.text:0000000000402cbc\n.text:0000000000402cc2\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccf\n.text:0000000000402cd4\n.text:0000000000402cd9\n.text:0000000000402cdf\n.text:0000000000402ce5\n.text:0000000000402ce8\n.text:0000000000402cea\n.text:0000000000402cec\n.text:0000000000402cf1\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d06\n.text:0000000000402d08\n.text:0000000000402d0d\n.text:0000000000402d12\n.text:0000000000402d17\n.text:0000000000402d1d\n.text:0000000000402d23\n.text:0000000000402d26\n.text:0000000000402d28\n.text:0000000000402d2a\n.text:0000000000402d2f\n.text:0000000000402d33\n.text:0000000000402d35\n.text:0000000000402d37\n.text:0000000000402d3a\n.text:0000000000402d3f\n.text:0000000000402d44\n.text:0000000000402d46\n.text:0000000000402d4a\n.text:0000000000402d4f\n.text:0000000000402d54\n.text:0000000000402d58\n.text:0000000000402d59\n.text:0000000000402d5b\n.text:0000000000402d5c\n'
p923
tp924
sS'c_islower'
p925
(S'\n__stdcall c_islower()\n'
p926
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p927
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p928
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p929
S'.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403876\n.text:0000000000403879\n'
p930
tp931
sS'fclose'
p932
(S'\n__stdcall fclose(FILE * __stream)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00607068)();\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00607068]\n'
p935
S'ff 25 92 5f 20 00\n'
p936
S'.plt:00000000004010d0\n'
p937
tp938
sS'__ctype_get_mb_cur_max'
p939
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00607080)();\u000a  return sVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x00607080]\n'
p942
S'ff 25 7a 5f 20 00\n'
p943
S'.plt:0000000000401100\n'
p944
tp945
sS'quotearg_n_style'
p946
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p947
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004029d0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004027a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p949
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p950
S'.text:0000000000402990\n.text:0000000000402991\n.text:0000000000402993\n.text:0000000000402994\n.text:0000000000402998\n.text:000000000040299b\n.text:000000000040299d\n.text:00000000004029a2\n.text:00000000004029a5\n.text:00000000004029aa\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b6\n.text:00000000004029b9\n.text:00000000004029be\n.text:00000000004029c2\n.text:00000000004029c3\n.text:00000000004029c5\n.text:00000000004029c6\n'
p951
tp952
sS'fwrite'
p953
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00607168)();\u000a  return sVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00607168]\n'
p956
S'ff 25 92 5e 20 00\n'
p957
S'.plt:00000000004012d0\n'
p958
tp959
sS'quote_n'
p960
(S'\n__stdcall quote_n(char * arg)\n'
p961
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV RDX,-0x1\nJMP 0x00402c60\n'
p963
S'48 c7 c2 ff ff ff ff\neb d7\n'
p964
S'.text:0000000000402c80\n.text:0000000000402c87\n'
p965
tp966
sS'quotearg_alloc'
p967
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p968
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00402610\n'
p970
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p971
S'.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402605\n.text:0000000000402608\n'
p972
tp973
sS'__do_global_dtors_aux'
p974
(S'\n__stdcall __do_global_dtors_aux()\n'
p975
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p976
S'CMP byte ptr [0x00607248],0x0\nJNZ 0x004013ea\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401350\nPOP RBP\nMOV byte ptr [0x00607248],0x1\nRET\n'
p977
S'80 3d 71 5e 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 5e 5e 20 00 01\nf3 c3\n'
p978
S'.text:00000000004013d0\n.text:00000000004013d7\n.text:00000000004013d9\n.text:00000000004013da\n.text:00000000004013dd\n.text:00000000004013e2\n.text:00000000004013e3\n.text:00000000004013ea\n'
p979
tp980
sS'close_stdout_set_file_name'
p981
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p982
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p983
S'MOV qword ptr [0x00607250],RDI\nRET\n'
p984
S'48 89 3d 89 5b 20 00\nc3\n'
p985
S'.text:00000000004016c0\n.text:00000000004016c7\n'
p986
tp987
sS'c_isprint'
p988
(S'\n__stdcall c_isprint()\n'
p989
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p990
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p991
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p992
S'.text:0000000000403880\n.text:0000000000403883\n.text:0000000000403886\n.text:0000000000403889\n'
p993
tp994
sS'_fini'
p995
(S'\n__stdcall _fini()\n'
p996
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p997
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p998
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p999
S'.fini:0000000000403eac\n.fini:0000000000403eb0\n.fini:0000000000403eb4\n'
p1000
tp1001
sS'__fpending'
p1002
(S'\n__stdcall __fpending()\n'
p1003
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00607050)();\u000a  return;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00607050]\n'
p1005
S'ff 25 aa 5f 20 00\n'
p1006
S'.plt:00000000004010a0\n'
p1007
tp1008
s.