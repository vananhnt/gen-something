(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x602e08]\nPUSH RBP\nLEA RBP,[0x602e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004008f0\nTEST RBP,RBP\nJZ 0x00401756\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00401740\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 f6 16 20 00\n55\n48 8d 2d f6 16 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 bf f1 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000401700\n.text:0000000000401702\n.text:0000000000401704\n.text:0000000000401707\n.text:0000000000401709\n.text:000000000040170b\n.text:0000000000401712\n.text:0000000000401713\n.text:000000000040171a\n.text:000000000040171b\n.text:000000000040171e\n.text:0000000000401721\n.text:0000000000401724\n.text:0000000000401728\n.text:000000000040172c\n.text:0000000000401731\n.text:0000000000401734\n.text:0000000000401736\n.text:0000000000401738\n.text:0000000000401740\n.text:0000000000401743\n.text:0000000000401746\n.text:0000000000401749\n.text:000000000040174d\n.text:0000000000401751\n.text:0000000000401754\n.text:0000000000401756\n.text:000000000040175a\n.text:000000000040175b\n.text:000000000040175c\n.text:000000000040175e\n.text:0000000000401760\n.text:0000000000401762\n.text:0000000000401764\n'
p6
tp7
sS'_init'
p8
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p9
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00602ff8;\u000a  if (PTR___gmon_start___00602ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00602ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00602ff8]\nTEST RAX,RAX\nJZ 0x00400902\nCALL RAX\nADD RSP,0x8\nRET\n'
p11
S'48 83 ec 08\n48 8b 05 fd 26 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p12
S'.init:00000000004008f0\n.init:00000000004008f4\n.init:00000000004008fb\n.init:00000000004008fe\n.init:0000000000400900\n.init:0000000000400902\n.init:0000000000400906\n'
p13
tp14
sS'usage'
p15
(S'\n__stdcall usage(char * name)\n'
p16
V\u000avoid usage(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  fprintf(stderr,"Usage: %s [options] iface\u005cn",name,name);\u000a  lVar1 = -0x2b8;\u000a  do {\u000a    fprintf(stderr,"  %5s   %s\u005cn",*(undefined8 *)("%d.%d.%d.%d" + lVar1),\u000a            *(undefined8 *)("%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x" + lVar1 + 4));\u000a    lVar1 = lVar1 + 0x18;\u000a  } while (lVar1 != 0);\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH RBX\nMOV RCX,RDI\nMOV RDI,qword ptr [0x006030e0]\nMOV ESI,0x402161\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004009d0\nMOV RBX,-0x2b8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x006030e0]\nMOV RDX,qword ptr [0x401c48 + RBX]\nMOV RCX,qword ptr [0x401c58 + RBX]\nMOV ESI,0x40217c\nXOR EAX,EAX\nCALL 0x004009d0\nADD RBX,0x18\nJNZ 0x00401140\nPOP RBX\nRET\n'
p18
S'53\n48 89 f9\n48 8b 3d c5 1f 20 00\nbe 61 21 40 00\n31 c0\n48 89 ca\ne8 a6 f8 ff ff\n48 c7 c3 48 fd ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 99 1f 20 00\n48 8b 93 48 1c 40 00\n48 8b 8b 58 1c 40 00\nbe 7c 21 40 00\n31 c0\ne8 6f f8 ff ff\n48 83 c3 18\n75 d9\n5b\nc3\n'
p19
S'.text:0000000000401110\n.text:0000000000401111\n.text:0000000000401114\n.text:000000000040111b\n.text:0000000000401120\n.text:0000000000401122\n.text:0000000000401125\n.text:000000000040112a\n.text:0000000000401131\n.text:0000000000401140\n.text:0000000000401147\n.text:000000000040114e\n.text:0000000000401155\n.text:000000000040115a\n.text:000000000040115c\n.text:0000000000401161\n.text:0000000000401165\n.text:0000000000401167\n.text:0000000000401168\n'
p20
tp21
sS'if_hwaddr'
p22
(S'\n__stdcall if_hwaddr(char * iface)\n'
p23
V\u000avoid if_hwaddr(char *iface)\u000a\u000a{\u000a  int iVar1;\u000a  ifreq r;\u000a  ifreq local_28;\u000a  \u000a  iVar1 = do_socket_ioctl(iface,0x8927,&local_28,(int *)0x0);\u000a  if (iVar1 == 0) {\u000a    printf("%02X:%02X:%02X:%02X:%02X:%02X",(ulong)local_28.ifr_ifru[2],(ulong)local_28.ifr_ifru[3],\u000a           (ulong)local_28.ifr_ifru[4],(ulong)local_28.ifr_ifru[5],(ulong)local_28.ifr_ifru[6],\u000a           (uint)local_28.ifr_ifru[7]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'SUB RSP,0x38\nLEA RDX,[RSP + 0x10]\nMOV ESI,0x8927\nXOR ECX,ECX\nXOR R8D,R8D\nCALL 0x00400c70\nTEST EAX,EAX\nJNZ 0x00400e3b\nMOVZX ESI,byte ptr [RSP + 0x22]\nMOVZX EDX,byte ptr [RSP + 0x23]\nMOVZX ECX,byte ptr [RSP + 0x24]\nMOVZX R8D,byte ptr [RSP + 0x25]\nMOVZX R9D,byte ptr [RSP + 0x26]\nMOVZX EAX,byte ptr [RSP + 0x27]\nMOV dword ptr [RSP],EAX\nMOV EDI,0x401d3c\nXOR EAX,EAX\nCALL 0x00400990\nADD RSP,0x38\nRET\n'
p25
S'48 83 ec 38\n48 8d 54 24 10\nbe 27 89 00 00\n31 c9\n45 31 c0\ne8 68 fe ff ff\n85 c0\n75 2f\n0f b6 74 24 22\n0f b6 54 24 23\n0f b6 4c 24 24\n44 0f b6 44 24 25\n44 0f b6 4c 24 26\n0f b6 44 24 27\n89 04 24\nbf 3c 1d 40 00\n31 c0\ne8 55 fb ff ff\n48 83 c4 38\nc3\n'
p26
S'.text:0000000000400df0\n.text:0000000000400df4\n.text:0000000000400df9\n.text:0000000000400dfe\n.text:0000000000400e00\n.text:0000000000400e03\n.text:0000000000400e08\n.text:0000000000400e0a\n.text:0000000000400e0c\n.text:0000000000400e11\n.text:0000000000400e16\n.text:0000000000400e1b\n.text:0000000000400e21\n.text:0000000000400e27\n.text:0000000000400e2c\n.text:0000000000400e2f\n.text:0000000000400e34\n.text:0000000000400e36\n.text:0000000000400e3b\n.text:0000000000400e3f\n'
p27
tp28
sS'main'
p29
(S'\n__stdcall main(char * * argv)\n'
p30
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  char *__s1;\u000a  int iVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  char **in_RSI;\u000a  long lVar4;\u000a  uint *puVar5;\u000a  uint local_50;\u000a  uint local_4c;\u000a  long local_48;\u000a  int *local_40;\u000a  long local_38;\u000a  \u000a  iVar1 = (int)argv;\u000a  local_4c = 0;\u000a  local_40 = (int *)0x0;\u000a  if ((iVar1 != 1) && (1 < iVar1)) {\u000a    local_38 = (long)(iVar1 + -1);\u000a    local_50 = 0;\u000a    lVar4 = 0;\u000a    do {\u000a      local_48 = lVar4 + 1;\u000a      __s1 = in_RSI[lVar4 + 1];\u000a      puVar5 = &options[0].is_stat;\u000a      uVar3 = 0;\u000a      while (iVar2 = strcmp(__s1,*(char **)(puVar5 + -3)), iVar2 != 0) {\u000a        uVar3 = uVar3 + 1;\u000a        puVar5 = puVar5 + 6;\u000a        if (0x1c < uVar3) {\u000a          __s1 = in_RSI[(long)(int)local_48];\u000a          if (((*__s1 != '-') && (iVar1 <= (int)lVar4 + 2)) && (__s1 != (char *)0x0)) {\u000a            if ((local_50 != 0) && (ifstats = get_stats(__s1), ifstats == (if_stat *)0x0)) {\u000a              fprintf(stderr,"Error getting statistics for %s\u005cn",__s1);\u000a              return 1;\u000a            }\u000a            please_do((int *)(ulong)local_4c,(char *)local_40);\u000a            return 0;\u000a          }\u000a          goto LAB_0040168b;\u000a        }\u000a      }\u000a      add_do((int *)&local_4c,&local_40);\u000a      local_50 = local_50 | *puVar5;\u000a      lVar4 = local_48;\u000a    } while (local_48 < local_38);\u000a  }\u000aLAB_0040168b:\u000a  usage(*in_RSI);\u000a  return 1;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV R13D,EDI\nMOV dword ptr [RSP + 0xc],0x0\nMOV qword ptr [RSP + 0x18],0x0\nCMP R13D,0x1\nJZ 0x0040168b\nCMP R13D,0x2\nJL 0x0040168b\nLEA EAX,[R13 + -0x1]\nCDQE\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nMOV dword ptr [RSP + 0x8],0x0\nLEA RAX,[R12 + 0x1]\nMOV qword ptr [RSP + 0x10],RAX\nMOV RBX,qword ptr [R14 + R12*0x8 + 0x8]\nMOV R15D,0x40199c\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15 + -0xc]\nMOV RDI,RBX\nCALL 0x004009c0\nTEST EAX,EAX\nJZ 0x00401650\nINC RBP\nADD R15,0x18\nCMP RBP,0x1c\nJBE 0x00401630\nJMP 0x0040167c\nMOV EDX,dword ptr [R15 + -0x4]\nLEA RDI,[RSP + 0xc]\nLEA RSI,[RSP + 0x18]\nCALL 0x00401170\nMOV EAX,dword ptr [RSP + 0x8]\nOR EAX,dword ptr [R15]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R12,qword ptr [RSP + 0x10]\nCMP R12,qword ptr [RSP + 0x20]\nJL 0x0040160f\nJMP 0x0040168b\nMOVSXD RAX,dword ptr [RSP + 0x10]\nMOV R15,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [R15],0x2d\nJNZ 0x004016a7\nMOV RDI,qword ptr [R14]\nCALL 0x00401110\nMOV EAX,0x1\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nADD R12D,0x2\nCMP R12D,R13D\nJL 0x0040168b\nTEST R15,R15\nJZ 0x0040168b\nCMP dword ptr [RSP + 0x8],0x0\nJZ 0x004016d0\nMOV RDI,R15\nCALL 0x00400f20\nMOV qword ptr [0x00603170],RAX\nTEST RAX,RAX\nJZ 0x004016e5\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x18]\nMOV RDX,R15\nCALL 0x004011b0\nXOR EAX,EAX\nJMP 0x00401698\nMOV RDI,qword ptr [0x006030e0]\nMOV ESI,0x4021c2\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x004009d0\nJMP 0x00401693\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f6\n41 89 fd\nc7 44 24 0c 00 00 00 00\n48 c7 44 24 18 00 00 00 00\n41 83 fd 01\n0f 84 9c 00 00 00\n41 83 fd 02\n0f 8c 92 00 00 00\n41 8d 45 ff\n48 98\n48 89 44 24 20\n45 31 e4\nc7 44 24 08 00 00 00 00\n49 8d 44 24 01\n48 89 44 24 10\n4b 8b 5c e6 08\n41 bf 9c 19 40 00\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\n49 8b 77 f4\n48 89 df\ne8 84 f3 ff ff\n85 c0\n74 10\n48 ff c5\n49 83 c7 18\n48 83 fd 1c\n76 e3\neb 2d\n41 8b 57 fc\n48 8d 7c 24 0c\n48 8d 74 24 18\ne8 0d fb ff ff\n8b 44 24 08\n41 0b 07\n89 44 24 08\n4c 8b 64 24 10\n4c 3b 64 24 20\n7c 95\neb 0f\n48 63 44 24 10\n4d 8b 3c c6\n41 80 3f 2d\n75 1c\n49 8b 3e\ne8 7d fa ff ff\nb8 01 00 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 83 c4 02\n45 39 ec\n7c db\n4d 85 ff\n74 d6\n83 7c 24 08 00\n74 14\n4c 89 ff\ne8 5c f8 ff ff\n48 89 05 a5 1a 20 00\n48 85 c0\n74 15\n8b 7c 24 0c\n48 8b 74 24 18\n4c 89 fa\ne8 cf fa ff ff\n31 c0\neb b3\n48 8b 3d f4 19 20 00\nbe c2 21 40 00\n31 c0\n4c 89 fa\ne8 d5 f2 ff ff\neb 96\n'
p33
S'.text:00000000004015c0\n.text:00000000004015c1\n.text:00000000004015c3\n.text:00000000004015c5\n.text:00000000004015c7\n.text:00000000004015c9\n.text:00000000004015ca\n.text:00000000004015ce\n.text:00000000004015d1\n.text:00000000004015d4\n.text:00000000004015dc\n.text:00000000004015e5\n.text:00000000004015e9\n.text:00000000004015ef\n.text:00000000004015f3\n.text:00000000004015f9\n.text:00000000004015fd\n.text:00000000004015ff\n.text:0000000000401604\n.text:0000000000401607\n.text:000000000040160f\n.text:0000000000401614\n.text:0000000000401619\n.text:000000000040161e\n.text:0000000000401624\n.text:0000000000401626\n.text:0000000000401630\n.text:0000000000401634\n.text:0000000000401637\n.text:000000000040163c\n.text:000000000040163e\n.text:0000000000401640\n.text:0000000000401643\n.text:0000000000401647\n.text:000000000040164b\n.text:000000000040164d\n.text:0000000000401650\n.text:0000000000401654\n.text:0000000000401659\n.text:000000000040165e\n.text:0000000000401663\n.text:0000000000401667\n.text:000000000040166a\n.text:000000000040166e\n.text:0000000000401673\n.text:0000000000401678\n.text:000000000040167a\n.text:000000000040167c\n.text:0000000000401681\n.text:0000000000401685\n.text:0000000000401689\n.text:000000000040168b\n.text:000000000040168e\n.text:0000000000401693\n.text:0000000000401698\n.text:000000000040169c\n.text:000000000040169d\n.text:000000000040169f\n.text:00000000004016a1\n.text:00000000004016a3\n.text:00000000004016a5\n.text:00000000004016a6\n.text:00000000004016a7\n.text:00000000004016ab\n.text:00000000004016ae\n.text:00000000004016b0\n.text:00000000004016b3\n.text:00000000004016b5\n.text:00000000004016ba\n.text:00000000004016bc\n.text:00000000004016bf\n.text:00000000004016c4\n.text:00000000004016cb\n.text:00000000004016ce\n.text:00000000004016d0\n.text:00000000004016d4\n.text:00000000004016d9\n.text:00000000004016dc\n.text:00000000004016e1\n.text:00000000004016e3\n.text:00000000004016e5\n.text:00000000004016ec\n.text:00000000004016f1\n.text:00000000004016f3\n.text:00000000004016f6\n.text:00000000004016fb\n'
p34
tp35
sS'realloc'
p36
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00603090)();\u000a  return pvVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x00603090]\n'
p39
S'ff 25 7a 26 20 00\n'
p40
S'.plt:0000000000400a10\n'
p41
tp42
sS'strncmp'
p43
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00603038)();\u000a  return iVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x00603038]\n'
p46
S'ff 25 d2 26 20 00\n'
p47
S'.plt:0000000000400960\n'
p48
tp49
sS'putchar'
p50
(S'\n__stdcall putchar(int __c)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_00603020)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00603020]\n'
p53
S'ff 25 ea 26 20 00\n'
p54
S'.plt:0000000000400930\n'
p55
tp56
sS'skipline'
p57
(S'\n__stdcall skipline(FILE * fd)\n'
p58
V\u000avoid skipline(FILE *fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  do {\u000a    iVar1 = _IO_getc((_IO_FILE *)fd);\u000a    if (iVar1 == 10) {\u000a      return;\u000a    }\u000a  } while (iVar1 != -1);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RBX\nMOV RBX,RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00400a00\nCMP EAX,0xa\nJZ 0x00401102\nCMP EAX,-0x1\nJNZ 0x004010f0\nPOP RBX\nRET\n'
p60
S'53\n48 89 fb\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\ne8 08 f9 ff ff\n83 f8 0a\n74 05\n83 f8 ff\n75 ee\n5b\nc3\n'
p61
S'.text:00000000004010e0\n.text:00000000004010e1\n.text:00000000004010e4\n.text:00000000004010f0\n.text:00000000004010f3\n.text:00000000004010f8\n.text:00000000004010fb\n.text:00000000004010fd\n.text:0000000000401100\n.text:0000000000401102\n.text:0000000000401103\n'
p62
tp63
sS'__errno_location'
p64
(S'\n__stdcall __errno_location()\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00603028)();\u000a  return piVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00603028]\n'
p67
S'ff 25 e2 26 20 00\n'
p68
S'.plt:0000000000400940\n'
p69
tp70
sS'frame_dummy'
p71
(S'\n__stdcall frame_dummy()\n'
p72
V\u000a/* WARNING: Removing unreachable block (ram,0x00400b7a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p73
S'MOV EDI,0x602e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00400b70\nJMP 0x00400b00\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400b6b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00400b00\n'
p74
S'bf 18 2e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p75
S'.text:0000000000400b60\n.text:0000000000400b65\n.text:0000000000400b69\n.text:0000000000400b6b\n.text:0000000000400b70\n.text:0000000000400b75\n.text:0000000000400b78\n.text:0000000000400b7a\n.text:0000000000400b7b\n.text:0000000000400b7e\n.text:0000000000400b80\n.text:0000000000400b81\n'
p76
tp77
sS'strcmp'
p78
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00603068)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00603068]\n'
p81
S'ff 25 a2 26 20 00\n'
p82
S'.plt:00000000004009c0\n'
p83
tp84
sS'if_mask'
p85
(S'\n__stdcall if_mask(char * iface, ifreq * r)\n'
p86
V\u000asockaddr * if_mask(char *iface,ifreq *r)\u000a\u000a{\u000a  sockaddr *psVar1;\u000a  \u000a  psVar1 = if_addr_value(iface,r,0x891b);\u000a  return psVar1;\u000a}\u000a\u000a
p87
S'MOV EDX,0x891b\nJMP 0x00400e50\n'
p88
S'ba 1b 89 00 00\neb b9\n'
p89
S'.text:0000000000400e90\n.text:0000000000400e95\n'
p90
tp91
sS'do_socket_ioctl'
p92
(S'\n__stdcall do_socket_ioctl(char * ifname, ulong request, ifreq * req, int * ioctl_errno)\n'
p93
V\u000aint do_socket_ioctl(char *ifname,ulong request,ifreq *req,int *ioctl_errno)\u000a\u000a{\u000a  FILE *__stream;\u000a  int __fd;\u000a  int iVar1;\u000a  int *piVar2;\u000a  char *pcVar3;\u000a  int in_R8D;\u000a  int iVar4;\u000a  \u000a  __fd = socket(2,2,0);\u000a  iVar4 = 1;\u000a  if (__fd != -1) {\u000a    strncpy((char *)req,ifname,0x10);\u000a    req->ifr_ifrn[0xf] = 0;\u000a    iVar1 = ioctl(__fd,request,req);\u000a    if (iVar1 == -1) {\u000a      if (ioctl_errno != (int *)0x0) {\u000a        piVar2 = __errno_location();\u000a        *ioctl_errno = *piVar2;\u000a      }\u000a      if (in_R8D == 0) {\u000a        piVar2 = __errno_location();\u000a        __stream = stderr;\u000a        if (*piVar2 == 0x13) {\u000a          fprintf(stderr,"No such network interface: %s\u005cn",ifname);\u000a                    /* WARNING: Subroutine does not return */\u000a          exit(1);\u000a        }\u000a        pcVar3 = strerror(*piVar2);\u000a        fprintf(__stream,"ioctl on %s: %s\u005cn",ifname,pcVar3);\u000a      }\u000a      close(__fd);\u000a    }\u000a    else {\u000a      close(__fd);\u000a      iVar4 = 0;\u000a    }\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R8D\nMOV R12,RCX\nMOV RBP,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV EDI,0x2\nMOV ESI,0x2\nXOR EDX,EDX\nCALL 0x00400a80\nMOV EBX,EAX\nMOV R13D,0x1\nCMP EBX,-0x1\nJZ 0x00400d29\nMOV EDX,0x10\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x00400950\nMOV byte ptr [RBP + 0xf],0x0\nXOR EAX,EAX\nMOV EDI,EBX\nMOV RSI,R14\nMOV RDX,RBP\nCALL 0x004009a0\nCMP EAX,-0x1\nJZ 0x00400cde\nMOV EDI,EBX\nCALL 0x004009b0\nXOR R13D,R13D\nJMP 0x00400d29\nTEST R12,R12\nJZ 0x00400cee\nCALL 0x00400940\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12],EAX\nCMP dword ptr [RSP + 0x4],0x0\nJNZ 0x00400d22\nCALL 0x00400940\nMOV EDI,dword ptr [RAX]\nMOV R14,qword ptr [0x006030e0]\nCMP EDI,0x13\nJZ 0x00400d3b\nCALL 0x00400a60\nMOV RCX,RAX\nMOV ESI,0x4021e3\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x004009d0\nMOV EDI,EBX\nCALL 0x004009b0\nMOV EAX,R13D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV ESI,0x402188\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x004009d0\nMOV EDI,0x1\nCALL 0x00400a40\n'
p95
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 44 24 04\n49 89 cc\n48 89 d5\n49 89 f6\n49 89 ff\nbf 02 00 00 00\nbe 02 00 00 00\n31 d2\ne8 e3 fd ff ff\n89 c3\n41 bd 01 00 00 00\n83 fb ff\n74 7f\nba 10 00 00 00\n48 89 ef\n4c 89 fe\ne8 96 fc ff ff\nc6 45 0f 00\n31 c0\n89 df\n4c 89 f6\n48 89 ea\ne8 d3 fc ff ff\n83 f8 ff\n74 0c\n89 df\ne8 d7 fc ff ff\n45 31 ed\neb 4b\n4d 85 e4\n74 0b\ne8 58 fc ff ff\n8b 00\n41 89 04 24\n83 7c 24 04 00\n75 2d\ne8 46 fc ff ff\n8b 38\n4c 8b 35 dd 23 20 00\n83 ff 13\n74 33\ne8 53 fd ff ff\n48 89 c1\nbe e3 21 40 00\n31 c0\n4c 89 f7\n4c 89 fa\ne8 ae fc ff ff\n89 df\ne8 87 fc ff ff\n44 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbe 88 21 40 00\n31 c0\n4c 89 f7\n4c 89 fa\ne8 83 fc ff ff\nbf 01 00 00 00\ne8 e9 fc ff ff\n'
p96
S'.text:0000000000400c70\n.text:0000000000400c71\n.text:0000000000400c73\n.text:0000000000400c75\n.text:0000000000400c77\n.text:0000000000400c79\n.text:0000000000400c7a\n.text:0000000000400c7b\n.text:0000000000400c80\n.text:0000000000400c83\n.text:0000000000400c86\n.text:0000000000400c89\n.text:0000000000400c8c\n.text:0000000000400c91\n.text:0000000000400c96\n.text:0000000000400c98\n.text:0000000000400c9d\n.text:0000000000400c9f\n.text:0000000000400ca5\n.text:0000000000400ca8\n.text:0000000000400caa\n.text:0000000000400caf\n.text:0000000000400cb2\n.text:0000000000400cb5\n.text:0000000000400cba\n.text:0000000000400cbe\n.text:0000000000400cc0\n.text:0000000000400cc2\n.text:0000000000400cc5\n.text:0000000000400cc8\n.text:0000000000400ccd\n.text:0000000000400cd0\n.text:0000000000400cd2\n.text:0000000000400cd4\n.text:0000000000400cd9\n.text:0000000000400cdc\n.text:0000000000400cde\n.text:0000000000400ce1\n.text:0000000000400ce3\n.text:0000000000400ce8\n.text:0000000000400cea\n.text:0000000000400cee\n.text:0000000000400cf3\n.text:0000000000400cf5\n.text:0000000000400cfa\n.text:0000000000400cfc\n.text:0000000000400d03\n.text:0000000000400d06\n.text:0000000000400d08\n.text:0000000000400d0d\n.text:0000000000400d10\n.text:0000000000400d15\n.text:0000000000400d17\n.text:0000000000400d1a\n.text:0000000000400d1d\n.text:0000000000400d22\n.text:0000000000400d24\n.text:0000000000400d29\n.text:0000000000400d2c\n.text:0000000000400d30\n.text:0000000000400d31\n.text:0000000000400d33\n.text:0000000000400d35\n.text:0000000000400d37\n.text:0000000000400d39\n.text:0000000000400d3a\n.text:0000000000400d3b\n.text:0000000000400d40\n.text:0000000000400d42\n.text:0000000000400d45\n.text:0000000000400d48\n.text:0000000000400d4d\n.text:0000000000400d52\n'
p97
tp98
sS'get_stats'
p99
(S'\n__stdcall get_stats(char * iface)\n'
p100
V\u000aif_stat * get_stats(char *iface)\u000a\u000a{\u000a  int iVar1;\u000a  if_stat *__ptr;\u000a  FILE *fd;\u000a  char name [10];\u000a  undefined8 uVar2;\u000a  char local_92 [10];\u000a  char *local_88;\u000a  ulonglong *local_80;\u000a  ulonglong *local_78;\u000a  ulonglong *local_70;\u000a  ulonglong *local_68;\u000a  ulonglong *local_60;\u000a  ulonglong *local_58;\u000a  ulonglong *local_50;\u000a  ulonglong *local_48;\u000a  ulonglong *local_40;\u000a  ulonglong *local_38;\u000a  \u000a  local_88 = iface;\u000a  __ptr = (if_stat *)malloc(0x80);\u000a  if (__ptr == (if_stat *)0x0) {\u000a    perror("malloc");\u000a  }\u000a  else {\u000a    fd = (FILE *)fopen("/proc/net/dev","r");\u000a    if (fd == (FILE *)0x0) {\u000a      perror("fopen(\u005c"/proc/net/dev\u005c")");\u000a    }\u000a    else {\u000a      skipline(fd);\u000a      uVar2 = 0x400f74;\u000a      skipline(fd);\u000a      local_80 = &__ptr->in_bytes;\u000a      local_38 = &__ptr->in_frame;\u000a      local_40 = &__ptr->in_compress;\u000a      local_48 = &__ptr->in_multicast;\u000a      local_50 = &__ptr->out_bytes;\u000a      local_58 = &__ptr->out_packets;\u000a      local_60 = &__ptr->out_errors;\u000a      local_68 = &__ptr->out_drops;\u000a      local_70 = &__ptr->out_fifo;\u000a      local_78 = &__ptr->out_colls;\u000a      do {\u000a        iVar1 = __isoc99_fscanf(fd,\u000a                                " %20[^:]:%llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu %llu"\u000a                                ,local_92,local_80,__ptr,&__ptr->in_errors,&__ptr->in_drops,\u000a                                &__ptr->in_fifo,local_38,local_40,local_48,local_50,local_58,\u000a                                local_60,local_68,local_70,local_78,&__ptr->out_carrier,\u000a                                &__ptr->out_carrier,uVar2);\u000a        if (iVar1 == -1) break;\u000a        if (iVar1 != 0x11) {\u000a          fwrite("Invalid data read, check!\u005cn",0x1a,1,stderr);\u000a          break;\u000a        }\u000a        iVar1 = strncmp(local_92,local_88,10);\u000a        if (iVar1 == 0) {\u000a          fclose((FILE *)fd);\u000a          return __ptr;\u000a        }\u000a        uVar2 = 0x40106d;\u000a        iVar1 = feof((FILE *)fd);\u000a      } while (iVar1 == 0);\u000a      fclose((FILE *)fd);\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return (if_stat *)0x0;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x68\nMOV qword ptr [RSP + 0x10],RDI\nMOV EDI,0x80\nCALL 0x004009f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004010be\nMOV EDI,0x401d61\nMOV ESI,0x401d1b\nCALL 0x00400a20\nMOV R15,RAX\nTEST R15,R15\nJZ 0x004010ca\nMOV RDI,R15\nCALL 0x004010e0\nMOV RDI,R15\nCALL 0x004010e0\nLEA RAX,[RBX + 0x8]\nLEA RBP,[RBX + 0x10]\nLEA R12,[RBX + 0x18]\nLEA R11,[RBX + 0x20]\nLEA RCX,[RBX + 0x28]\nMOV qword ptr [RSP + 0x60],RCX\nLEA RCX,[RBX + 0x30]\nMOV qword ptr [RSP + 0x58],RCX\nLEA RCX,[RBX + 0x38]\nMOV qword ptr [RSP + 0x50],RCX\nLEA RCX,[RBX + 0x40]\nMOV qword ptr [RSP + 0x48],RCX\nLEA RCX,[RBX + 0x48]\nMOV qword ptr [RSP + 0x40],RCX\nLEA RCX,[RBX + 0x50]\nMOV qword ptr [RSP + 0x38],RCX\nLEA RCX,[RBX + 0x58]\nMOV qword ptr [RSP + 0x30],RCX\nLEA RCX,[RBX + 0x60]\nMOV qword ptr [RSP + 0x28],RCX\nLEA RCX,[RBX + 0x68]\nMOV qword ptr [RSP + 0x20],RCX\nLEA R13,[RBX + 0x70]\nLEA RDX,[RSP + 0x6]\nMOV qword ptr [RSP + 0x18],RAX\nSUB RSP,0x8\nMOV ESI,0x401d86\nMOV EAX,0x0\nMOV RDI,R15\nMOV RCX,qword ptr [RSP + 0x20]\nMOV R8,RBX\nMOV R9,RBP\nPUSH R13\nPUSH R13\nPUSH qword ptr [RSP + 0x38]\nPUSH qword ptr [RSP + 0x48]\nPUSH qword ptr [RSP + 0x58]\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x78]\nPUSH qword ptr [0x88 + RSP]\nPUSH qword ptr [0x98 + RSP]\nPUSH qword ptr [0xa8 + RSP]\nPUSH qword ptr [0xb8 + RSP]\nPUSH R11\nPUSH R12\nMOV R14,R11\nCALL 0x00400970\nLEA RDI,[RSP + 0x76]\nADD RSP,0x70\nCMP EAX,-0x1\nJZ 0x0040109a\nCMP EAX,0x11\nJNZ 0x0040107f\nMOV EDX,0xa\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00400960\nTEST EAX,EAX\nJZ 0x004010d6\nMOV RDI,R15\nCALL 0x004009e0\nTEST EAX,EAX\nMOV R11,R14\nLEA RDX,[RSP + 0x6]\nJZ 0x00400fe3\nJMP 0x0040109a\nMOV RCX,qword ptr [0x006030e0]\nMOV EDI,0x401ddf\nMOV ESI,0x1a\nMOV EDX,0x1\nCALL 0x00400a50\nMOV RDI,R15\nCALL 0x00400980\nMOV RDI,RBX\nCALL 0x00400920\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x68\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x401d5a\nCALL 0x00400a30\nJMP 0x004010aa\nMOV EDI,0x401d6f\nCALL 0x00400a30\nJMP 0x004010a2\nMOV RDI,R15\nCALL 0x00400980\nJMP 0x004010ac\n'
p102
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 68\n48 89 7c 24 10\nbf 80 00 00 00\ne8 b3 fa ff ff\n48 89 c3\n48 85 db\n0f 84 75 01 00 00\nbf 61 1d 40 00\nbe 1b 1d 40 00\ne8 c8 fa ff ff\n49 89 c7\n4d 85 ff\n0f 84 66 01 00 00\n4c 89 ff\ne8 74 01 00 00\n4c 89 ff\ne8 6c 01 00 00\n48 8d 43 08\n48 8d 6b 10\n4c 8d 63 18\n4c 8d 5b 20\n48 8d 4b 28\n48 89 4c 24 60\n48 8d 4b 30\n48 89 4c 24 58\n48 8d 4b 38\n48 89 4c 24 50\n48 8d 4b 40\n48 89 4c 24 48\n48 8d 4b 48\n48 89 4c 24 40\n48 8d 4b 50\n48 89 4c 24 38\n48 8d 4b 58\n48 89 4c 24 30\n48 8d 4b 60\n48 89 4c 24 28\n48 8d 4b 68\n48 89 4c 24 20\n4c 8d 6b 70\n48 8d 54 24 06\n48 89 44 24 18\n48 83 ec 08\nbe 86 1d 40 00\nb8 00 00 00 00\n4c 89 ff\n48 8b 4c 24 20\n49 89 d8\n49 89 e9\n41 55\n41 55\nff 74 24 38\nff 74 24 48\nff 74 24 58\nff 74 24 68\nff 74 24 78\nff b4 24 88 00 00 00\nff b4 24 98 00 00 00\nff b4 24 a8 00 00 00\nff b4 24 b8 00 00 00\n41 53\n41 54\n4d 89 de\ne8 31 f9 ff ff\n48 8d 7c 24 76\n48 83 c4 70\n83 f8 ff\n74 4d\n83 f8 11\n75 2d\nba 0a 00 00 00\n48 8b 74 24 10\ne8 ff f8 ff ff\n85 c0\n74 71\n4c 89 ff\ne8 73 f9 ff ff\n85 c0\n4d 89 f3\n48 8d 54 24 06\n0f 84 66 ff ff ff\neb 1b\n48 8b 0d 5a 20 20 00\nbf df 1d 40 00\nbe 1a 00 00 00\nba 01 00 00 00\ne8 b6 f9 ff ff\n4c 89 ff\ne8 de f8 ff ff\n48 89 df\ne8 76 f8 ff ff\n31 db\n48 89 d8\n48 83 c4 68\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 5a 1d 40 00\ne8 68 f9 ff ff\neb e0\nbf 6f 1d 40 00\ne8 5c f9 ff ff\neb cc\n4c 89 ff\ne8 a2 f8 ff ff\neb cc\n'
p103
S'.text:0000000000400f20\n.text:0000000000400f21\n.text:0000000000400f23\n.text:0000000000400f25\n.text:0000000000400f27\n.text:0000000000400f29\n.text:0000000000400f2a\n.text:0000000000400f2e\n.text:0000000000400f33\n.text:0000000000400f38\n.text:0000000000400f3d\n.text:0000000000400f40\n.text:0000000000400f43\n.text:0000000000400f49\n.text:0000000000400f4e\n.text:0000000000400f53\n.text:0000000000400f58\n.text:0000000000400f5b\n.text:0000000000400f5e\n.text:0000000000400f64\n.text:0000000000400f67\n.text:0000000000400f6c\n.text:0000000000400f6f\n.text:0000000000400f74\n.text:0000000000400f78\n.text:0000000000400f7c\n.text:0000000000400f80\n.text:0000000000400f84\n.text:0000000000400f88\n.text:0000000000400f8d\n.text:0000000000400f91\n.text:0000000000400f96\n.text:0000000000400f9a\n.text:0000000000400f9f\n.text:0000000000400fa3\n.text:0000000000400fa8\n.text:0000000000400fac\n.text:0000000000400fb1\n.text:0000000000400fb5\n.text:0000000000400fba\n.text:0000000000400fbe\n.text:0000000000400fc3\n.text:0000000000400fc7\n.text:0000000000400fcc\n.text:0000000000400fd0\n.text:0000000000400fd5\n.text:0000000000400fd9\n.text:0000000000400fde\n.text:0000000000400fe3\n.text:0000000000400fe7\n.text:0000000000400fec\n.text:0000000000400ff1\n.text:0000000000400ff4\n.text:0000000000400ff9\n.text:0000000000400ffc\n.text:0000000000400fff\n.text:0000000000401001\n.text:0000000000401003\n.text:0000000000401007\n.text:000000000040100b\n.text:000000000040100f\n.text:0000000000401013\n.text:0000000000401017\n.text:000000000040101e\n.text:0000000000401025\n.text:000000000040102c\n.text:0000000000401033\n.text:0000000000401035\n.text:0000000000401037\n.text:000000000040103a\n.text:000000000040103f\n.text:0000000000401044\n.text:0000000000401048\n.text:000000000040104b\n.text:000000000040104d\n.text:0000000000401050\n.text:0000000000401052\n.text:0000000000401057\n.text:000000000040105c\n.text:0000000000401061\n.text:0000000000401063\n.text:0000000000401065\n.text:0000000000401068\n.text:000000000040106d\n.text:000000000040106f\n.text:0000000000401072\n.text:0000000000401077\n.text:000000000040107d\n.text:000000000040107f\n.text:0000000000401086\n.text:000000000040108b\n.text:0000000000401090\n.text:0000000000401095\n.text:000000000040109a\n.text:000000000040109d\n.text:00000000004010a2\n.text:00000000004010a5\n.text:00000000004010aa\n.text:00000000004010ac\n.text:00000000004010af\n.text:00000000004010b3\n.text:00000000004010b4\n.text:00000000004010b6\n.text:00000000004010b8\n.text:00000000004010ba\n.text:00000000004010bc\n.text:00000000004010bd\n.text:00000000004010be\n.text:00000000004010c3\n.text:00000000004010c8\n.text:00000000004010ca\n.text:00000000004010cf\n.text:00000000004010d4\n.text:00000000004010d6\n.text:00000000004010d9\n.text:00000000004010de\n'
p104
tp105
sS'strerror'
p106
(S'\n__stdcall strerror(int __errnum)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strerror(int __errnum)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strerror_006030b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x006030b8]\n'
p109
S'ff 25 52 26 20 00\n'
p110
S'.plt:0000000000400a60\n'
p111
tp112
sS'exit'
p113
(S'\n__stdcall exit(int __status)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006030a8)();\u000a  return;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x006030a8]\n'
p116
S'ff 25 62 26 20 00\n'
p117
S'.plt:0000000000400a40\n'
p118
tp119
sS'__libc_csu_fini'
p120
(S'\n__stdcall __libc_csu_fini()\n'
p121
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p122
S'RET\n'
p123
S'f3 c3\n'
p124
S'.text:0000000000401770\n'
p125
tp126
sS'if_addr_value'
p127
(S'\n__stdcall if_addr_value(char * iface, ifreq * r, ulong request)\n'
p128
V\u000asockaddr * if_addr_value(char *iface,ifreq *r,ulong request)\u000a\u000a{\u000a  int iVar1;\u000a  sockaddr *psVar2;\u000a  int e;\u000a  int local_c;\u000a  \u000a  iVar1 = do_socket_ioctl(iface,request,r,&local_c);\u000a  if ((iVar1 == 0) || (local_c == 99)) {\u000a    psVar2 = (sockaddr *)r->ifr_ifru;\u000a  }\u000a  else {\u000a    psVar2 = (sockaddr *)0x0;\u000a  }\u000a  return psVar2;\u000a}\u000a\u000a
p129
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RCX,[RSP + 0xc]\nMOV R8D,0x1\nMOV RSI,RDX\nMOV RDX,RBX\nCALL 0x00400c70\nTEST EAX,EAX\nJZ 0x00400e79\nCMP dword ptr [RSP + 0xc],0x63\nJNZ 0x00400e7f\nADD RBX,0x10\nJMP 0x00400e81\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p130
S'53\n48 83 ec 10\n48 89 f3\n48 8d 4c 24 0c\n41 b8 01 00 00 00\n48 89 d6\n48 89 da\ne8 02 fe ff ff\n85 c0\n74 07\n83 7c 24 0c 63\n75 06\n48 83 c3 10\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p131
S'.text:0000000000400e50\n.text:0000000000400e51\n.text:0000000000400e55\n.text:0000000000400e58\n.text:0000000000400e5d\n.text:0000000000400e63\n.text:0000000000400e66\n.text:0000000000400e69\n.text:0000000000400e6e\n.text:0000000000400e70\n.text:0000000000400e72\n.text:0000000000400e77\n.text:0000000000400e79\n.text:0000000000400e7d\n.text:0000000000400e7f\n.text:0000000000400e81\n.text:0000000000400e84\n.text:0000000000400e88\n.text:0000000000400e89\n'
p132
tp133
sS'if_addr'
p134
(S'\n__stdcall if_addr(char * iface, ifreq * r)\n'
p135
V\u000asockaddr * if_addr(char *iface,ifreq *r)\u000a\u000a{\u000a  sockaddr *psVar1;\u000a  \u000a  psVar1 = if_addr_value(iface,r,0x8915);\u000a  return psVar1;\u000a}\u000a\u000a
p136
S'MOV EDX,0x8915\nJMP 0x00400e50\n'
p137
S'ba 15 89 00 00\neb 09\n'
p138
S'.text:0000000000400e40\n.text:0000000000400e45\n'
p139
tp140
sS'if_bcast'
p141
(S'\n__stdcall if_bcast(char * iface, ifreq * r)\n'
p142
V\u000asockaddr * if_bcast(char *iface,ifreq *r)\u000a\u000a{\u000a  sockaddr *psVar1;\u000a  \u000a  psVar1 = if_addr_value(iface,r,0x8919);\u000a  return psVar1;\u000a}\u000a\u000a
p143
S'MOV EDX,0x8919\nJMP 0x00400e50\n'
p144
S'ba 19 89 00 00\neb a9\n'
p145
S'.text:0000000000400ea0\n.text:0000000000400ea5\n'
p146
tp147
sS'_start'
p148
(S'\n__stdcall _start()\n'
p149
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00602ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p150
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x401770\nMOV RCX,0x401700\nMOV RDI,0x4015c0\nCALL qword ptr [0x00602ff0]\nHLT\n'
p151
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 70 17 40 00\n48 c7 c1 00 17 40 00\n48 c7 c7 c0 15 40 00\nff 15 36 25 20 00\nf4\n'
p152
S'.text:0000000000400a90\n.text:0000000000400a92\n.text:0000000000400a95\n.text:0000000000400a96\n.text:0000000000400a99\n.text:0000000000400a9d\n.text:0000000000400a9e\n.text:0000000000400a9f\n.text:0000000000400aa6\n.text:0000000000400aad\n.text:0000000000400ab4\n.text:0000000000400aba\n'
p153
tp154
sS'ioctl'
p155
(S'\n__stdcall ioctl(int __fd, ulong __request)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ioctl(int __fd,ulong __request,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ioctl_00603058)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00603058]\n'
p158
S'ff 25 b2 26 20 00\n'
p159
S'.plt:00000000004009a0\n'
p160
tp161
sS'please_do'
p162
(S'\n__stdcall please_do(int * todo, char * ifname)\n'
p163
V\u000avoid please_do(int *todo,char *ifname)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  ifreq req;\u000a  int iVar3;\u000a  sockaddr *sadr;\u000a  char *iface;\u000a  long lVar4;\u000a  char *__format;\u000a  undefined8 uVar5;\u000a  \u000a  iVar2 = (int)todo;\u000a  if (iVar2 != 0) {\u000a    uVar5 = 0x4011d3;\u000a    iVar3 = if_exists(iface);\u000a    if (0 < iVar2) {\u000a      lVar4 = 0;\u000a      do {\u000a        iVar1 = *(int *)(ifname + lVar4 * 4);\u000a        if (iVar3 == 0) {\u000a          if (iVar1 != 2) {\u000a            if (iVar1 != 1) {\u000a              fprintf(stderr,"No such network interface: %s\u005cn",iface);\u000a                    /* WARNING: Subroutine does not return */\u000a              exit(1);\u000a            }\u000a            goto switchD_00401211_caseD_1;\u000a          }\u000aswitchD_00401211_caseD_2:\u000a          __format = "%s";\u000a          goto LAB_00401527;\u000a        }\u000a        switch(iVar1) {\u000a        case 1:\u000aswitchD_00401211_caseD_1:\u000a                    /* WARNING: Subroutine does not return */\u000a          exit((uint)(iVar3 == 0));\u000a        case 2:\u000a          goto switchD_00401211_caseD_2;\u000a        case 3:\u000a          sadr = if_addr(iface,(ifreq *)&ram0x00603148);\u000a          goto LAB_00401492;\u000a        case 4:\u000a          sadr = if_mask(iface,(ifreq *)0x603148);\u000a          goto LAB_00401492;\u000a        case 6:\u000a          sadr = if_bcast(iface,(ifreq *)0x603148);\u000a          goto LAB_00401492;\u000a        case 7:\u000a          sadr = if_addr(iface,(ifreq *)0x603148);\u000a          print_addr(sadr);\u000a          putchar(0x20);\u000a          sadr = if_mask(iface,(ifreq *)0x603148);\u000a          print_addr(sadr);\u000a          putchar(0x20);\u000a          sadr = if_bcast(iface,(ifreq *)0x603148);\u000a          print_addr(sadr);\u000a          putchar(0x20);\u000a        case 5:\u000a          if_mtu(iface);\u000a          __format = "%d";\u000a          goto LAB_004012e8;\u000a        case 8:\u000a          if_flags(iface);\u000a          goto LAB_0040152c;\u000a        case 9:\u000a          break;\u000a        case 10:\u000a          break;\u000a        case 0xb:\u000a          break;\u000a        case 0xc:\u000a          break;\u000a        case 0xd:\u000a          printf("%llu %llu %llu %llu %llu %llu %llu %llu",ifstats->in_bytes,ifstats->in_packets,\u000a                 ifstats->in_errors,ifstats->in_drops,ifstats->in_fifo,ifstats->in_frame,\u000a                 ifstats->in_compress,ifstats->in_multicast,uVar5);\u000a          goto LAB_0040152c;\u000a        case 0xe:\u000a          break;\u000a        case 0xf:\u000a          break;\u000a        case 0x10:\u000a          break;\u000a        case 0x11:\u000a          break;\u000a        case 0x12:\u000a          printf("%llu %llu %llu %llu %llu %llu %llu %llu",ifstats->out_bytes,ifstats->out_packets,\u000a                 ifstats->out_errors,ifstats->out_drops,ifstats->out_fifo,ifstats->out_colls,\u000a                 ifstats->out_carrier,ifstats->out_multicast,uVar5);\u000a          goto LAB_0040152c;\u000a        case 0x13:\u000a          break;\u000a        case 0x14:\u000a          break;\u000a        case 0x15:\u000a          break;\u000a        case 0x16:\u000a          break;\u000a        case 0x17:\u000a          break;\u000a        case 0x18:\u000a          break;\u000a        case 0x19:\u000a          break;\u000a        case 0x1a:\u000a          break;\u000a        case 0x1b:\u000a          sadr = if_network(iface);\u000aLAB_00401492:\u000a          print_addr(sadr);\u000a          goto LAB_0040152c;\u000a        case 0x1c:\u000a          if_hwaddr(iface);\u000a          goto LAB_0040152c;\u000a        case 0x1d:\u000a          if (ifstats2 == (if_stat *)0x0) {\u000a            sleep(1);\u000a            ifstats2 = get_stats(iface);\u000a          }\u000a          break;\u000a        case 0x1e:\u000a          if (ifstats2 == (if_stat *)0x0) {\u000a            sleep(1);\u000a            ifstats2 = get_stats(iface);\u000a          }\u000a          break;\u000a        default:\u000a          __format = "Unknown command: %d";\u000aLAB_004012e8:\u000a          printf(__format);\u000a          goto LAB_0040152c;\u000a        }\u000a        __format = "%llu";\u000aLAB_00401527:\u000a        printf(__format);\u000aLAB_0040152c:\u000a        uVar5 = 0x401536;\u000a        putchar(10);\u000a        lVar4 = lVar4 + 1;\u000a      } while (lVar4 < (long)iVar2);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R12,RSI\nMOV EBX,EDI\nTEST EBX,EBX\nJZ 0x00401542\nMOV RDI,RBP\nCALL 0x00400c40\nMOV R14D,EAX\nTEST EBX,EBX\nJLE 0x00401542\nTEST R14D,R14D\nMOV EAX,0x4021a7\nMOV R15D,0x4021ab\nCMOVNZ R15,RAX\nMOVSXD R13,EBX\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST R14D,R14D\nMOV ESI,dword ptr [R12 + RBX*0x4]\nJZ 0x00401230\nLEA EAX,[RSI + -0x1]\nCMP EAX,0x1d\nJA 0x00401248\nJMP qword ptr [0x401790 + RAX*0x8]\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400e40\nJMP 0x00401492\nCMP ESI,0x2\nJNZ 0x00401551\nMOV EDI,0x401d2f\nXOR EAX,EAX\nMOV RSI,R15\nJMP 0x00401527\nMOV EDI,0x4021ae\nXOR EAX,EAX\nJMP 0x004012e8\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400e90\nJMP 0x00401492\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400ea0\nJMP 0x00401492\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400e40\nMOV RDI,RAX\nCALL 0x00401590\nMOV EDI,0x20\nCALL 0x00400930\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400e90\nMOV RDI,RAX\nCALL 0x00401590\nMOV EDI,0x20\nCALL 0x00400930\nMOV ESI,0x603148\nMOV RDI,RBP\nCALL 0x00400ea0\nMOV RDI,RAX\nCALL 0x00401590\nMOV EDI,0x20\nCALL 0x00400930\nMOV RDI,RBP\nCALL 0x00400ef0\nMOV ECX,EAX\nMOV EDI,0x4021bf\nXOR EAX,EAX\nMOV ESI,ECX\nCALL 0x00400990\nJMP 0x0040152c\nMOV RDI,RBP\nCALL 0x00400d60\nJMP 0x0040152c\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x8]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x10]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x18]\nJMP 0x00401520\nMOV R10,RBP\nMOV RBP,qword ptr [0x00603170]\nMOV RDX,qword ptr [RBP]\nMOV RSI,qword ptr [RBP + 0x8]\nMOV RCX,qword ptr [RBP + 0x10]\nMOV R8,qword ptr [RBP + 0x18]\nMOV R9,qword ptr [RBP + 0x20]\nSUB RSP,0x8\nMOV EDI,0x401db7\nMOV EAX,0x0\nPUSH qword ptr [RBP + 0x38]\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,R10\nCALL 0x00400990\nADD RSP,0x20\nJMP 0x0040152c\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x20]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x28]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x30]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x38]\nJMP 0x00401520\nMOV R10,RBP\nMOV RBP,qword ptr [0x00603170]\nMOV RSI,qword ptr [RBP + 0x40]\nMOV RDX,qword ptr [RBP + 0x48]\nMOV RCX,qword ptr [RBP + 0x50]\nMOV R8,qword ptr [RBP + 0x58]\nMOV R9,qword ptr [RBP + 0x60]\nSUB RSP,0x8\nMOV EDI,0x401db7\nMOV EAX,0x0\nPUSH qword ptr [RBP + 0x78]\nPUSH qword ptr [RBP + 0x70]\nPUSH qword ptr [RBP + 0x68]\nMOV RBP,R10\nCALL 0x00400990\nADD RSP,0x20\nJMP 0x0040152c\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x40]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x48]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x50]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x58]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x60]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x68]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x70]\nJMP 0x00401520\nMOV RAX,qword ptr [0x00603170]\nMOV RSI,qword ptr [RAX + 0x78]\nJMP 0x00401520\nMOV RDI,RBP\nCALL 0x00400eb0\nMOV RDI,RAX\nCALL 0x00401590\nJMP 0x0040152c\nMOV RDI,RBP\nCALL 0x00400df0\nJMP 0x0040152c\nCMP qword ptr [0x00603140],0x0\nJNZ 0x004014cf\nMOV EDI,0x1\nCALL 0x00400a70\nMOV RDI,RBP\nCALL 0x00400f20\nMOV qword ptr [0x00603140],RAX\nMOV RAX,qword ptr [0x00603140]\nMOV RSI,qword ptr [RAX + 0x8]\nMOV RAX,qword ptr [0x00603170]\nSUB RSI,qword ptr [RAX + 0x8]\nJMP 0x00401520\nCMP qword ptr [0x00603140],0x0\nJNZ 0x0040150a\nMOV EDI,0x1\nCALL 0x00400a70\nMOV RDI,RBP\nCALL 0x00400f20\nMOV qword ptr [0x00603140],RAX\nMOV RAX,qword ptr [0x00603140]\nMOV RSI,qword ptr [RAX + 0x40]\nMOV RAX,qword ptr [0x00603170]\nSUB RSI,qword ptr [RAX + 0x40]\nMOV EDI,0x401dda\nXOR EAX,EAX\nCALL 0x00400990\nMOV EDI,0xa\nCALL 0x00400930\nINC RBX\nCMP RBX,R13\nJL 0x00401200\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP ESI,0x1\nJNZ 0x00401564\nXOR EDI,EDI\nTEST R14D,R14D\nSETZ DIL\nCALL 0x00400a40\nMOV RDI,qword ptr [0x006030e0]\nMOV ESI,0x402188\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004009d0\nMOV EDI,0x1\nCALL 0x00400a40\n'
p165
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f4\n89 fb\n85 db\n0f 84 77 03 00 00\n48 89 ef\ne8 6d fa ff ff\n41 89 c6\n85 db\n0f 8e 64 03 00 00\n45 85 f6\nb8 a7 21 40 00\n41 bf ab 21 40 00\n4c 0f 45 f8\n4c 63 eb\n31 db\n66 66 2e 0f 1f 84 00 00 00 00 00\n45 85 f6\n41 8b 34 9c\n74 27\n8d 46 ff\n83 f8 1d\n77 37\nff 24 c5 90 17 40 00\nbe 48 31 60 00\n48 89 ef\ne8 1b fc ff ff\ne9 68 02 00 00\n83 fe 02\n0f 85 18 03 00 00\nbf 2f 1d 40 00\n31 c0\n4c 89 fe\ne9 df 02 00 00\nbf ae 21 40 00\n31 c0\ne9 94 00 00 00\nbe 48 31 60 00\n48 89 ef\ne8 2f fc ff ff\ne9 2c 02 00 00\nbe 48 31 60 00\n48 89 ef\ne8 2d fc ff ff\ne9 1a 02 00 00\nbe 48 31 60 00\n48 89 ef\ne8 bb fb ff ff\n48 89 c7\ne8 03 03 00 00\nbf 20 00 00 00\ne8 99 f6 ff ff\nbe 48 31 60 00\n48 89 ef\ne8 ec fb ff ff\n48 89 c7\ne8 e4 02 00 00\nbf 20 00 00 00\ne8 7a f6 ff ff\nbe 48 31 60 00\n48 89 ef\ne8 dd fb ff ff\n48 89 c7\ne8 c5 02 00 00\nbf 20 00 00 00\ne8 5b f6 ff ff\n48 89 ef\ne8 13 fc ff ff\n89 c1\nbf bf 21 40 00\n31 c0\n89 ce\ne8 a3 f6 ff ff\ne9 3a 02 00 00\n48 89 ef\ne8 66 fa ff ff\ne9 2d 02 00 00\n48 8b 05 6a 1e 20 00\n48 8b 30\ne9 12 02 00 00\n48 8b 05 5b 1e 20 00\n48 8b 70 08\ne9 02 02 00 00\n48 8b 05 4b 1e 20 00\n48 8b 70 10\ne9 f2 01 00 00\n48 8b 05 3b 1e 20 00\n48 8b 70 18\ne9 e2 01 00 00\n49 89 ea\n48 8b 2d 28 1e 20 00\n48 8b 55 00\n48 8b 75 08\n48 8b 4d 10\n4c 8b 45 18\n4c 8b 4d 20\n48 83 ec 08\nbf b7 1d 40 00\nb8 00 00 00 00\nff 75 38\nff 75 30\nff 75 28\n4c 89 d5\ne8 15 f6 ff ff\n48 83 c4 20\ne9 a8 01 00 00\n48 8b 05 e5 1d 20 00\n48 8b 70 20\ne9 8c 01 00 00\n48 8b 05 d5 1d 20 00\n48 8b 70 28\ne9 7c 01 00 00\n48 8b 05 c5 1d 20 00\n48 8b 70 30\ne9 6c 01 00 00\n48 8b 05 b5 1d 20 00\n48 8b 70 38\ne9 5c 01 00 00\n49 89 ea\n48 8b 2d a2 1d 20 00\n48 8b 75 40\n48 8b 55 48\n48 8b 4d 50\n4c 8b 45 58\n4c 8b 4d 60\n48 83 ec 08\nbf b7 1d 40 00\nb8 00 00 00 00\nff 75 78\nff 75 70\nff 75 68\n4c 89 d5\ne8 8f f5 ff ff\n48 83 c4 20\ne9 22 01 00 00\n48 8b 05 5f 1d 20 00\n48 8b 70 40\ne9 06 01 00 00\n48 8b 05 4f 1d 20 00\n48 8b 70 48\ne9 f6 00 00 00\n48 8b 05 3f 1d 20 00\n48 8b 70 50\ne9 e6 00 00 00\n48 8b 05 2f 1d 20 00\n48 8b 70 58\ne9 d6 00 00 00\n48 8b 05 1f 1d 20 00\n48 8b 70 60\ne9 c6 00 00 00\n48 8b 05 0f 1d 20 00\n48 8b 70 68\ne9 b6 00 00 00\n48 8b 05 ff 1c 20 00\n48 8b 70 70\ne9 a6 00 00 00\n48 8b 05 ef 1c 20 00\n48 8b 70 78\ne9 96 00 00 00\n48 89 ef\ne8 1e fa ff ff\n48 89 c7\ne8 f6 00 00 00\ne9 8d 00 00 00\n48 89 ef\ne8 49 f9 ff ff\ne9 80 00 00 00\n48 83 3d 8c 1c 20 00 00\n75 19\nbf 01 00 00 00\ne8 b0 f5 ff ff\n48 89 ef\ne8 58 fa ff ff\n48 89 05 71 1c 20 00\n48 8b 05 6a 1c 20 00\n48 8b 70 08\n48 8b 05 8f 1c 20 00\n48 2b 70 08\neb 39\n48 83 3d 51 1c 20 00 00\n75 19\nbf 01 00 00 00\ne8 75 f5 ff ff\n48 89 ef\ne8 1d fa ff ff\n48 89 05 36 1c 20 00\n48 8b 05 2f 1c 20 00\n48 8b 70 40\n48 8b 05 54 1c 20 00\n48 2b 70 40\nbf da 1d 40 00\n31 c0\ne8 64 f4 ff ff\nbf 0a 00 00 00\ne8 fa f3 ff ff\n48 ff c3\n4c 39 eb\n0f 8c be fc ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n83 fe 01\n75 0e\n31 ff\n45 85 f6\n40 0f 94 c7\ne8 dc f4 ff ff\n48 8b 3d 75 1b 20 00\nbe 88 21 40 00\n31 c0\n48 89 ea\ne8 56 f4 ff ff\nbf 01 00 00 00\ne8 bc f4 ff ff\n'
p166
S'.text:00000000004011b0\n.text:00000000004011b1\n.text:00000000004011b3\n.text:00000000004011b5\n.text:00000000004011b7\n.text:00000000004011b9\n.text:00000000004011ba\n.text:00000000004011bb\n.text:00000000004011be\n.text:00000000004011c1\n.text:00000000004011c3\n.text:00000000004011c5\n.text:00000000004011cb\n.text:00000000004011ce\n.text:00000000004011d3\n.text:00000000004011d6\n.text:00000000004011d8\n.text:00000000004011de\n.text:00000000004011e1\n.text:00000000004011e6\n.text:00000000004011ec\n.text:00000000004011f0\n.text:00000000004011f3\n.text:00000000004011f5\n.text:0000000000401200\n.text:0000000000401203\n.text:0000000000401207\n.text:0000000000401209\n.text:000000000040120c\n.text:000000000040120f\n.text:0000000000401211\n.text:0000000000401218\n.text:000000000040121d\n.text:0000000000401220\n.text:0000000000401225\n.text:0000000000401230\n.text:0000000000401233\n.text:0000000000401239\n.text:000000000040123e\n.text:0000000000401240\n.text:0000000000401243\n.text:0000000000401248\n.text:000000000040124d\n.text:000000000040124f\n.text:0000000000401254\n.text:0000000000401259\n.text:000000000040125c\n.text:0000000000401261\n.text:0000000000401266\n.text:000000000040126b\n.text:000000000040126e\n.text:0000000000401273\n.text:0000000000401278\n.text:000000000040127d\n.text:0000000000401280\n.text:0000000000401285\n.text:0000000000401288\n.text:000000000040128d\n.text:0000000000401292\n.text:0000000000401297\n.text:000000000040129c\n.text:000000000040129f\n.text:00000000004012a4\n.text:00000000004012a7\n.text:00000000004012ac\n.text:00000000004012b1\n.text:00000000004012b6\n.text:00000000004012bb\n.text:00000000004012be\n.text:00000000004012c3\n.text:00000000004012c6\n.text:00000000004012cb\n.text:00000000004012d0\n.text:00000000004012d5\n.text:00000000004012d8\n.text:00000000004012dd\n.text:00000000004012df\n.text:00000000004012e4\n.text:00000000004012e6\n.text:00000000004012e8\n.text:00000000004012ed\n.text:00000000004012f2\n.text:00000000004012f5\n.text:00000000004012fa\n.text:00000000004012ff\n.text:0000000000401306\n.text:0000000000401309\n.text:000000000040130e\n.text:0000000000401315\n.text:0000000000401319\n.text:000000000040131e\n.text:0000000000401325\n.text:0000000000401329\n.text:000000000040132e\n.text:0000000000401335\n.text:0000000000401339\n.text:000000000040133e\n.text:0000000000401341\n.text:0000000000401348\n.text:000000000040134c\n.text:0000000000401350\n.text:0000000000401354\n.text:0000000000401358\n.text:000000000040135c\n.text:0000000000401360\n.text:0000000000401365\n.text:000000000040136a\n.text:000000000040136d\n.text:0000000000401370\n.text:0000000000401373\n.text:0000000000401376\n.text:000000000040137b\n.text:000000000040137f\n.text:0000000000401384\n.text:000000000040138b\n.text:000000000040138f\n.text:0000000000401394\n.text:000000000040139b\n.text:000000000040139f\n.text:00000000004013a4\n.text:00000000004013ab\n.text:00000000004013af\n.text:00000000004013b4\n.text:00000000004013bb\n.text:00000000004013bf\n.text:00000000004013c4\n.text:00000000004013c7\n.text:00000000004013ce\n.text:00000000004013d2\n.text:00000000004013d6\n.text:00000000004013da\n.text:00000000004013de\n.text:00000000004013e2\n.text:00000000004013e6\n.text:00000000004013eb\n.text:00000000004013f0\n.text:00000000004013f3\n.text:00000000004013f6\n.text:00000000004013f9\n.text:00000000004013fc\n.text:0000000000401401\n.text:0000000000401405\n.text:000000000040140a\n.text:0000000000401411\n.text:0000000000401415\n.text:000000000040141a\n.text:0000000000401421\n.text:0000000000401425\n.text:000000000040142a\n.text:0000000000401431\n.text:0000000000401435\n.text:000000000040143a\n.text:0000000000401441\n.text:0000000000401445\n.text:000000000040144a\n.text:0000000000401451\n.text:0000000000401455\n.text:000000000040145a\n.text:0000000000401461\n.text:0000000000401465\n.text:000000000040146a\n.text:0000000000401471\n.text:0000000000401475\n.text:000000000040147a\n.text:0000000000401481\n.text:0000000000401485\n.text:000000000040148a\n.text:000000000040148d\n.text:0000000000401492\n.text:0000000000401495\n.text:000000000040149a\n.text:000000000040149f\n.text:00000000004014a2\n.text:00000000004014a7\n.text:00000000004014ac\n.text:00000000004014b4\n.text:00000000004014b6\n.text:00000000004014bb\n.text:00000000004014c0\n.text:00000000004014c3\n.text:00000000004014c8\n.text:00000000004014cf\n.text:00000000004014d6\n.text:00000000004014da\n.text:00000000004014e1\n.text:00000000004014e5\n.text:00000000004014e7\n.text:00000000004014ef\n.text:00000000004014f1\n.text:00000000004014f6\n.text:00000000004014fb\n.text:00000000004014fe\n.text:0000000000401503\n.text:000000000040150a\n.text:0000000000401511\n.text:0000000000401515\n.text:000000000040151c\n.text:0000000000401520\n.text:0000000000401525\n.text:0000000000401527\n.text:000000000040152c\n.text:0000000000401531\n.text:0000000000401536\n.text:0000000000401539\n.text:000000000040153c\n.text:0000000000401542\n.text:0000000000401546\n.text:0000000000401547\n.text:0000000000401549\n.text:000000000040154b\n.text:000000000040154d\n.text:000000000040154f\n.text:0000000000401550\n.text:0000000000401551\n.text:0000000000401554\n.text:0000000000401556\n.text:0000000000401558\n.text:000000000040155b\n.text:000000000040155f\n.text:0000000000401564\n.text:000000000040156b\n.text:0000000000401570\n.text:0000000000401572\n.text:0000000000401575\n.text:000000000040157a\n.text:000000000040157f\n'
p167
tp168
sS'printf'
p169
(S'\n__stdcall printf(char * __format)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_00603050)();\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00603050]\n'
p172
S'ff 25 ba 26 20 00\n'
p173
S'.plt:0000000000400990\n'
p174
tp175
sS'sleep'
p176
(S'\n__stdcall sleep(uint __seconds)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint sleep(uint __seconds)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_sleep_006030c0)();\u000a  return uVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x006030c0]\n'
p179
S'ff 25 4a 26 20 00\n'
p180
S'.plt:0000000000400a70\n'
p181
tp182
sS'deregister_tm_clones'
p183
(S'\n__stdcall deregister_tm_clones()\n'
p184
V\u000a/* WARNING: Removing unreachable block (ram,0x00400ad5) */\u000a/* WARNING: Removing unreachable block (ram,0x00400adf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p185
S'MOV EAX,0x6030e7\nPUSH RBP\nSUB RAX,0x6030e0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00400af0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400af0\nPOP RBP\nMOV EDI,0x6030e0\nJMP RAX\nPOP RBP\nRET\n'
p186
S'b8 e7 30 60 00\n55\n48 2d e0 30 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf e0 30 60 00\nff e0\n5d\nc3\n'
p187
S'.text:0000000000400ac0\n.text:0000000000400ac5\n.text:0000000000400ac6\n.text:0000000000400acc\n.text:0000000000400ad0\n.text:0000000000400ad3\n.text:0000000000400ad5\n.text:0000000000400ada\n.text:0000000000400add\n.text:0000000000400adf\n.text:0000000000400ae0\n.text:0000000000400ae5\n.text:0000000000400af0\n.text:0000000000400af1\n'
p188
tp189
sS'if_network'
p190
(S'\n__stdcall if_network(char * iface)\n'
p191
V\u000asockaddr * if_network(char *iface)\u000a\u000a{\u000a  uint uVar1;\u000a  ifreq req;\u000a  sockaddr *psVar2;\u000a  \u000a  psVar2 = if_mask(iface,(ifreq *)&ram0x006030f0);\u000a  if (psVar2 != (sockaddr *)0x0) {\u000a    uVar1 = *(uint *)(psVar2->sa_data + 2);\u000a    psVar2 = if_addr(iface,(ifreq *)0x6030f0);\u000a    if (psVar2 != (sockaddr *)0x0) {\u000a      *(uint *)(psVar2->sa_data + 2) = *(uint *)(psVar2->sa_data + 2) & uVar1;\u000a      return psVar2;\u000a    }\u000a  }\u000a  return (sockaddr *)0x0;\u000a}\u000a\u000a
p192
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV ESI,0x6030f0\nCALL 0x00400e90\nTEST RAX,RAX\nJZ 0x00400edf\nMOV EBP,dword ptr [RAX + 0x4]\nMOV ESI,0x6030f0\nMOV RDI,RBX\nCALL 0x00400e40\nTEST RAX,RAX\nJZ 0x00400edf\nAND dword ptr [RAX + 0x4],EBP\nJMP 0x00400ee1\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p193
S'55\n53\n50\n48 89 fb\nbe f0 30 60 00\ne8 d0 ff ff ff\n48 85 c0\n74 1a\n8b 68 04\nbe f0 30 60 00\n48 89 df\ne8 6b ff ff ff\n48 85 c0\n74 05\n21 68 04\neb 02\n31 c0\n48 83 c4 08\n5b\n5d\nc3\n'
p194
S'.text:0000000000400eb0\n.text:0000000000400eb1\n.text:0000000000400eb2\n.text:0000000000400eb3\n.text:0000000000400eb6\n.text:0000000000400ebb\n.text:0000000000400ec0\n.text:0000000000400ec3\n.text:0000000000400ec5\n.text:0000000000400ec8\n.text:0000000000400ecd\n.text:0000000000400ed0\n.text:0000000000400ed5\n.text:0000000000400ed8\n.text:0000000000400eda\n.text:0000000000400edd\n.text:0000000000400edf\n.text:0000000000400ee1\n.text:0000000000400ee5\n.text:0000000000400ee6\n.text:0000000000400ee7\n'
p195
tp196
sS'free'
p197
(S'\n__stdcall free(void * __ptr)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00603018)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x00603018]\n'
p200
S'ff 25 f2 26 20 00\n'
p201
S'.plt:0000000000400920\n'
p202
tp203
sS'print_quad'
p204
(S'\n__stdcall print_quad(sockaddr * adr)\n'
p205
V\u000avoid print_quad(sockaddr *adr)\u000a\u000a{\u000a  if (adr->sa_family == 10) {\u000a    print_quad_ipv6((uint16_t *)(adr->sa_data + 6));\u000a    return;\u000a  }\u000a  if (adr->sa_family == 2) {\u000a    print_quad_ipv4((ulong)*(uint *)(adr->sa_data + 2));\u000a    return;\u000a  }\u000a  printf("NON-IP");\u000a  return;\u000a}\u000a\u000a
p206
S'MOVZX EAX,word ptr [RDI]\nCMP EAX,0xa\nJZ 0x00400c28\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00400c2e\nMOV EDI,dword ptr [RDI + 0x4]\nJMP 0x00400b90\nADD RDI,0x8\nJMP 0x00400bc0\nMOV EDI,0x401c7c\nXOR EAX,EAX\nJMP 0x00400990\n'
p207
S'0f b7 07\n83 f8 0a\n74 10\n0f b7 c0\n83 f8 02\n75 0e\n8b 7f 04\ne9 68 ff ff ff\n48 83 c7 08\neb 92\nbf 7c 1c 40 00\n31 c0\ne9 56 fd ff ff\n'
p208
S'.text:0000000000400c10\n.text:0000000000400c13\n.text:0000000000400c16\n.text:0000000000400c18\n.text:0000000000400c1b\n.text:0000000000400c1e\n.text:0000000000400c20\n.text:0000000000400c23\n.text:0000000000400c28\n.text:0000000000400c2c\n.text:0000000000400c2e\n.text:0000000000400c33\n.text:0000000000400c35\n'
p209
tp210
sS'close'
p211
(S'\n__stdcall close(int __fd)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00603060)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00603060]\n'
p214
S'ff 25 aa 26 20 00\n'
p215
S'.plt:00000000004009b0\n'
p216
tp217
sS'add_do'
p218
(S'\n__stdcall add_do(int * ndo, int * * todo)\n'
p219
V\u000avoid add_do(int *ndo,int **todo)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  int in_EDX;\u000a  \u000a  piVar2 = (int *)realloc(*todo,(long)*ndo * 4 + 4);\u000a  *todo = piVar2;\u000a  iVar1 = *ndo;\u000a  piVar2[(long)iVar1] = in_EDX;\u000a  *ndo = iVar1 + 1;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,qword ptr [RBX]\nMOVSXD RAX,dword ptr [RBP]\nLEA RSI,[0x4 + RAX*0x4]\nCALL 0x00400a10\nMOV qword ptr [RBX],RAX\nMOVSXD RCX,dword ptr [RBP]\nMOV dword ptr [RAX + RCX*0x4],R14D\nLEA EAX,[RCX + 0x1]\nMOV dword ptr [RBP],EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p221
S'55\n41 56\n53\n41 89 d6\n48 89 f3\n48 89 fd\n48 8b 3b\n48 63 45 00\n48 8d 34 85 04 00 00 00\ne8 7f f8 ff ff\n48 89 03\n48 63 4d 00\n44 89 34 88\n8d 41 01\n89 45 00\n5b\n41 5e\n5d\nc3\n'
p222
S'.text:0000000000401170\n.text:0000000000401171\n.text:0000000000401173\n.text:0000000000401174\n.text:0000000000401177\n.text:000000000040117a\n.text:000000000040117d\n.text:0000000000401180\n.text:0000000000401184\n.text:000000000040118c\n.text:0000000000401191\n.text:0000000000401194\n.text:0000000000401198\n.text:000000000040119c\n.text:000000000040119f\n.text:00000000004011a2\n.text:00000000004011a3\n.text:00000000004011a5\n.text:00000000004011a6\n'
p223
tp224
sS'malloc'
p225
(S'\n__stdcall malloc(size_t __size)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00603080)();\u000a  return pvVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00603080]\n'
p228
S'ff 25 8a 26 20 00\n'
p229
S'.plt:00000000004009f0\n'
p230
tp231
sS'fopen'
p232
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_00603098)();\u000a  return pFVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00603098]\n'
p235
S'ff 25 72 26 20 00\n'
p236
S'.plt:0000000000400a20\n'
p237
tp238
sS'register_tm_clones'
p239
(S'\n__stdcall register_tm_clones()\n'
p240
V\u000a/* WARNING: Removing unreachable block (ram,0x00400b23) */\u000a/* WARNING: Removing unreachable block (ram,0x00400b2d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p241
S'MOV ESI,0x6030e0\nPUSH RBP\nSUB RSI,0x6030e0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00400b38\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00400b38\nPOP RBP\nMOV EDI,0x6030e0\nJMP RAX\nPOP RBP\nRET\n'
p242
S'be e0 30 60 00\n55\n48 81 ee e0 30 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf e0 30 60 00\nff e0\n5d\nc3\n'
p243
S'.text:0000000000400b00\n.text:0000000000400b05\n.text:0000000000400b06\n.text:0000000000400b0d\n.text:0000000000400b11\n.text:0000000000400b14\n.text:0000000000400b17\n.text:0000000000400b1b\n.text:0000000000400b1e\n.text:0000000000400b21\n.text:0000000000400b23\n.text:0000000000400b28\n.text:0000000000400b2b\n.text:0000000000400b2d\n.text:0000000000400b2e\n.text:0000000000400b33\n.text:0000000000400b38\n.text:0000000000400b39\n'
p244
tp245
sS'if_exists'
p246
(S'\n__stdcall if_exists(char * iface)\n'
p247
V\u000aint if_exists(char *iface)\u000a\u000a{\u000a  int iVar1;\u000a  ifreq iStack40;\u000a  \u000a  iVar1 = do_socket_ioctl(iface,0x8913,&iStack40,(int *)0x0);\u000a  return (int)(uint)(iVar1 == 0);\u000a}\u000a\u000a
p248
S'SUB RSP,0x28\nMOV RDX,RSP\nMOV ESI,0x8913\nXOR ECX,ECX\nMOV R8D,0x1\nCALL 0x00400c70\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nMOV EAX,ECX\nADD RSP,0x28\nRET\n'
p249
S'48 83 ec 28\n48 89 e2\nbe 13 89 00 00\n31 c9\n41 b8 01 00 00 00\ne8 17 00 00 00\n31 c9\n85 c0\n0f 94 c1\n89 c8\n48 83 c4 28\nc3\n'
p250
S'.text:0000000000400c40\n.text:0000000000400c44\n.text:0000000000400c47\n.text:0000000000400c4c\n.text:0000000000400c4e\n.text:0000000000400c54\n.text:0000000000400c59\n.text:0000000000400c5b\n.text:0000000000400c5d\n.text:0000000000400c60\n.text:0000000000400c62\n.text:0000000000400c66\n'
p251
tp252
sS'FUN_00400910'
p253
(S'\n__stdcall FUN_00400910()\n'
p254
V\u000avoid FUN_00400910(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00603010)();\u000a  return;\u000a}\u000a\u000a
p255
S'PUSH qword ptr [0x00603008]\nJMP qword ptr [0x00603010]\n'
p256
S'ff 35 f2 26 20 00\nff 25 f4 26 20 00\n'
p257
S'.plt:0000000000400910\n.plt:0000000000400916\n'
p258
tp259
sS'fclose'
p260
(S'\n__stdcall fclose(FILE * __stream)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00603048)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x00603048]\n'
p263
S'ff 25 c2 26 20 00\n'
p264
S'.plt:0000000000400980\n'
p265
tp266
sS'if_flags'
p267
(S'\n__stdcall if_flags(char * iface)\n'
p268
V\u000avoid if_flags(char *iface)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  ifreq r;\u000a  undefined local_40 [16];\u000a  short local_30;\u000a  \u000a  iVar1 = do_socket_ioctl(iface,0x8913,(ifreq *)local_40,(int *)0x0);\u000a  if (iVar1 == 0) {\u000a    lVar3 = -0x110;\u000a    do {\u000a      puVar4 = &DAT_00401d37;\u000a      if ((*(uint *)((long)&options[0].option + lVar3) & (int)local_30) != 0) {\u000a        puVar4 = &DAT_00401d32;\u000a      }\u000a      uVar2 = 0x401df8;\u000a      if (lVar3 == -0x10) {\u000a        uVar2 = 0x401df9;\u000a      }\u000a      printf("%s%s%s",puVar4,*(undefined8 *)((long)&options[0].flag + lVar3),uVar2);\u000a      lVar3 = lVar3 + 0x10;\u000a    } while (lVar3 != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x30\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x8913\nXOR ECX,ECX\nXOR R8D,R8D\nCALL 0x00400c70\nTEST EAX,EAX\nJNZ 0x00400dda\nMOV RBX,-0x110\nMOV R14D,0x401d32\nMOV R15D,0x401df9\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,word ptr [RSP + 0x18]\nTEST dword ptr [0x401990 + RBX],EAX\nMOV ESI,0x401d37\nCMOVNZ RSI,R14\nMOV RDX,qword ptr [0x401998 + RBX]\nCMP RBX,-0x10\nMOV ECX,0x401df8\nCMOVZ RCX,R15\nMOV EDI,0x401d2b\nXOR EAX,EAX\nCALL 0x00400990\nADD RBX,0x10\nJNZ 0x00400da0\nADD RSP,0x30\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p270
S'41 57\n41 56\n53\n48 83 ec 30\n48 8d 54 24 08\nbe 13 89 00 00\n31 c9\n45 31 c0\ne8 f3 fe ff ff\n85 c0\n75 59\n48 c7 c3 f0 fe ff ff\n41 be 32 1d 40 00\n41 bf f9 1d 40 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f bf 44 24 18\n85 83 90 19 40 00\nbe 37 1d 40 00\n49 0f 45 f6\n48 8b 93 98 19 40 00\n48 83 fb f0\nb9 f8 1d 40 00\n49 0f 44 cf\nbf 2b 1d 40 00\n31 c0\ne8 bc fb ff ff\n48 83 c3 10\n75 c6\n48 83 c4 30\n5b\n41 5e\n41 5f\nc3\n'
p271
S'.text:0000000000400d60\n.text:0000000000400d62\n.text:0000000000400d64\n.text:0000000000400d65\n.text:0000000000400d69\n.text:0000000000400d6e\n.text:0000000000400d73\n.text:0000000000400d75\n.text:0000000000400d78\n.text:0000000000400d7d\n.text:0000000000400d7f\n.text:0000000000400d81\n.text:0000000000400d88\n.text:0000000000400d8e\n.text:0000000000400d94\n.text:0000000000400da0\n.text:0000000000400da5\n.text:0000000000400dab\n.text:0000000000400db0\n.text:0000000000400db4\n.text:0000000000400dbb\n.text:0000000000400dbf\n.text:0000000000400dc4\n.text:0000000000400dc8\n.text:0000000000400dcd\n.text:0000000000400dcf\n.text:0000000000400dd4\n.text:0000000000400dd8\n.text:0000000000400dda\n.text:0000000000400dde\n.text:0000000000400ddf\n.text:0000000000400de1\n.text:0000000000400de3\n'
p272
tp273
sS'fwrite'
p274
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006030b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x006030b0]\n'
p277
S'ff 25 5a 26 20 00\n'
p278
S'.plt:0000000000400a50\n'
p279
tp280
sS'print_quad_ipv4'
p281
(S'\n__stdcall print_quad_ipv4()\n'
p282
V\u000avoid print_quad_ipv4(uint uParm1)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (uParm1 & 0xff00) << 8;\u000a  printf("%d.%d.%d.%d",(ulong)(uParm1 & 0xff),(ulong)(byte)(uVar1 >> 0x10),\u000a         (ulong)(((uParm1 & 0xff0000) >> 8 | uVar1) >> 8) & 0xff,(ulong)(byte)(uParm1 >> 0x18));\u000a  return;\u000a}\u000a\u000a
p283
S'MOV EAX,EDI\nBSWAP EAX\nMOV EDX,EAX\nMOVZX ECX,AH\nMOVZX R8D,AL\nMOV ESI,EAX\nSHR ESI,0x18\nSHR EDX,0x10\nMOVZX EDX,DL\nMOV EDI,0x401c48\nXOR EAX,EAX\nJMP 0x00400990\n'
p284
S'89 f8\n0f c8\n89 c2\n0f b6 cc\n44 0f b6 c0\n89 c6\nc1 ee 18\nc1 ea 10\n0f b6 d2\nbf 48 1c 40 00\n31 c0\ne9 dc fd ff ff\n'
p285
S'.text:0000000000400b90\n.text:0000000000400b92\n.text:0000000000400b94\n.text:0000000000400b96\n.text:0000000000400b99\n.text:0000000000400b9d\n.text:0000000000400b9f\n.text:0000000000400ba2\n.text:0000000000400ba5\n.text:0000000000400ba8\n.text:0000000000400bad\n.text:0000000000400baf\n'
p286
tp287
sS'fprintf'
p288
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_00603070)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00603070]\n'
p291
S'ff 25 9a 26 20 00\n'
p292
S'.plt:00000000004009d0\n'
p293
tp294
sS'print_quad_ipv6'
p295
(S'\n__stdcall print_quad_ipv6(uint16_t * a)\n'
p296
V\u000avoid print_quad_ipv6(uint16_t *a)\u000a\u000a{\u000a  printf("%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x",(ulong)*a,(ulong)a[1],(ulong)a[2],(ulong)a[3],\u000a         (ulong)a[4],(ulong)a[5],(ulong)a[6],(ulong)a[7]);\u000a  return;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOVZX ESI,word ptr [RDI]\nMOVZX EDX,word ptr [RDI + 0x2]\nMOVZX ECX,word ptr [RDI + 0x4]\nMOVZX R8D,word ptr [RDI + 0x6]\nMOVZX R9D,word ptr [RDI + 0x8]\nMOVZX R10D,word ptr [RDI + 0xa]\nMOVZX R11D,word ptr [RDI + 0xc]\nMOVZX EBX,word ptr [RDI + 0xe]\nSUB RSP,0x8\nMOV EDI,0x401c54\nMOV EAX,0x0\nPUSH RBX\nPUSH R11\nPUSH R10\nCALL 0x00400990\nADD RSP,0x20\nPOP RBX\nRET\n'
p298
S'53\n0f b7 37\n0f b7 57 02\n0f b7 4f 04\n44 0f b7 47 06\n44 0f b7 4f 08\n44 0f b7 57 0a\n44 0f b7 5f 0c\n0f b7 5f 0e\n48 83 ec 08\nbf 54 1c 40 00\nb8 00 00 00 00\n53\n41 53\n41 52\ne8 94 fd ff ff\n48 83 c4 20\n5b\nc3\n'
p299
S'.text:0000000000400bc0\n.text:0000000000400bc1\n.text:0000000000400bc4\n.text:0000000000400bc8\n.text:0000000000400bcc\n.text:0000000000400bd1\n.text:0000000000400bd6\n.text:0000000000400bdb\n.text:0000000000400be0\n.text:0000000000400be4\n.text:0000000000400be8\n.text:0000000000400bed\n.text:0000000000400bf2\n.text:0000000000400bf3\n.text:0000000000400bf5\n.text:0000000000400bf7\n.text:0000000000400bfc\n.text:0000000000400c00\n.text:0000000000400c01\n'
p300
tp301
sS'__isoc99_fscanf'
p302
(S'\n__stdcall __isoc99_fscanf()\n'
p303
V\u000avoid __isoc99_fscanf(void)\u000a\u000a{\u000a  (*(code *)PTR___isoc99_fscanf_00603040)();\u000a  return;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00603040]\n'
p305
S'ff 25 ca 26 20 00\n'
p306
S'.plt:0000000000400970\n'
p307
tp308
sS'__do_global_dtors_aux'
p309
(S'\n__stdcall __do_global_dtors_aux()\n'
p310
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p311
S'CMP byte ptr [0x006030e8],0x0\nJNZ 0x00400b5a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00400ac0\nPOP RBP\nMOV byte ptr [0x006030e8],0x1\nRET\n'
p312
S'80 3d a1 25 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 8e 25 20 00 01\nf3 c3\n'
p313
S'.text:0000000000400b40\n.text:0000000000400b47\n.text:0000000000400b49\n.text:0000000000400b4a\n.text:0000000000400b4d\n.text:0000000000400b52\n.text:0000000000400b53\n.text:0000000000400b5a\n'
p314
tp315
sS'_IO_getc'
p316
(S'\n__stdcall _IO_getc(_IO_FILE * __fp)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_getc(_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_getc_00603088)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00603088]\n'
p319
S'ff 25 82 26 20 00\n'
p320
S'.plt:0000000000400a00\n'
p321
tp322
sS'strncpy'
p323
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_00603030)();\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x00603030]\n'
p326
S'ff 25 da 26 20 00\n'
p327
S'.plt:0000000000400950\n'
p328
tp329
sS'_fini'
p330
(S'\n__stdcall _fini()\n'
p331
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p332
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p333
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p334
S'.fini:0000000000401774\n.fini:0000000000401778\n.fini:000000000040177c\n'
p335
tp336
sS'feof'
p337
(S'\n__stdcall feof(FILE * __stream)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_00603078)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x00603078]\n'
p340
S'ff 25 92 26 20 00\n'
p341
S'.plt:00000000004009e0\n'
p342
tp343
sS'perror'
p344
(S'\n__stdcall perror(char * __s)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid perror(char *__s)\u000a\u000a{\u000a  (*(code *)PTR_perror_006030a0)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x006030a0]\n'
p347
S'ff 25 6a 26 20 00\n'
p348
S'.plt:0000000000400a30\n'
p349
tp350
sS'socket'
p351
(S'\n__stdcall socket(int __domain, int __type, int __protocol)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint socket(int __domain,int __type,int __protocol)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_socket_006030c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x006030c8]\n'
p354
S'ff 25 42 26 20 00\n'
p355
S'.plt:0000000000400a80\n'
p356
tp357
sS'if_mtu'
p358
(S'\n__stdcall if_mtu(char * iface)\n'
p359
V\u000aint if_mtu(char *iface)\u000a\u000a{\u000a  ifreq req;\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  iVar1 = do_socket_ioctl(iface,0x8921,(ifreq *)0x603118,(int *)0x0);\u000a  iVar2 = 0;\u000a  if (iVar1 == 0) {\u000a    iVar2 = req.ifr_ifru._0_4_;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p360
S'PUSH RBX\nXOR EBX,EBX\nMOV ESI,0x8921\nMOV EDX,0x603118\nXOR ECX,ECX\nXOR R8D,R8D\nCALL 0x00400c70\nTEST EAX,EAX\nCMOVZ EBX,dword ptr [0x00603128]\nMOV EAX,EBX\nPOP RBX\nRET\n'
p361
S'53\n31 db\nbe 21 89 00 00\nba 18 31 60 00\n31 c9\n45 31 c0\ne8 69 fd ff ff\n85 c0\n0f 44 1d 18 22 20 00\n89 d8\n5b\nc3\n'
p362
S'.text:0000000000400ef0\n.text:0000000000400ef1\n.text:0000000000400ef3\n.text:0000000000400ef8\n.text:0000000000400efd\n.text:0000000000400eff\n.text:0000000000400f02\n.text:0000000000400f07\n.text:0000000000400f09\n.text:0000000000400f10\n.text:0000000000400f12\n.text:0000000000400f13\n'
p363
tp364
sS'print_addr'
p365
(S'\n__stdcall print_addr(sockaddr * sadr)\n'
p366
V\u000avoid print_addr(sockaddr *sadr)\u000a\u000a{\u000a  if (sadr != (sockaddr *)0x0) {\u000a    print_quad(sadr);\u000a    return;\u000a  }\u000a  fwrite("Error\u005cn",6,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p367
S'TEST RDI,RDI\nJZ 0x0040159a\nJMP 0x00400c10\nPUSH RAX\nMOV RCX,qword ptr [0x006030e0]\nMOV EDI,0x4021f4\nMOV ESI,0x6\nMOV EDX,0x1\nCALL 0x00400a50\nMOV EDI,0x1\nCALL 0x00400a40\n'
p368
S'48 85 ff\n74 05\ne9 76 f6 ff ff\n50\n48 8b 0d 3e 1b 20 00\nbf f4 21 40 00\nbe 06 00 00 00\nba 01 00 00 00\ne8 9a f4 ff ff\nbf 01 00 00 00\ne8 80 f4 ff ff\n'
p369
S'.text:0000000000401590\n.text:0000000000401593\n.text:0000000000401595\n.text:000000000040159a\n.text:000000000040159b\n.text:00000000004015a2\n.text:00000000004015a7\n.text:00000000004015ac\n.text:00000000004015b1\n.text:00000000004015b6\n.text:00000000004015bb\n'
p370
tp371
s.