(dp0
S'fread_file'
p1
(S'\n__stdcall fread_file(FILE * stream, size_t * length)\n'
p2
V\u000achar * fread_file(FILE *stream,size_t *length)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  char *pcVar3;\u000a  size_t __size;\u000a  int *piVar4;\u000a  size_t __n;\u000a  ulong uVar5;\u000a  char *__ptr;\u000a  long lVar6;\u000a  size_t __size_00;\u000a  stat st;\u000a  stat local_c0;\u000a  \u000a  __fd = fileno((FILE *)stream);\u000a  __fd = fstat(__fd,&local_c0);\u000a  if ((((__fd < 0) || ((local_c0.st_mode & 0xf000) != 0x8000)) ||\u000a      (_Var2 = ftello((FILE *)stream), _Var2 < 0)) ||\u000a     (lVar6 = local_c0.st_size - _Var2, lVar6 == 0 || local_c0.st_size < _Var2)) {\u000a    __size_00 = 0x2000;\u000a  }\u000a  else {\u000a    if (lVar6 == -1) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0xc;\u000a      return (char *)0x0;\u000a    }\u000a    __size_00 = lVar6 + 1;\u000a  }\u000a  pcVar3 = (char *)malloc(__size_00);\u000a  if (pcVar3 != (char *)0x0) {\u000a    uVar5 = 0;\u000a    do {\u000a      __ptr = pcVar3;\u000a      __n = __size_00 - uVar5;\u000a      __size = fread(__ptr + uVar5,1,__n,(FILE *)stream);\u000a      uVar5 = uVar5 + __size;\u000a      if (__size != __n) {\u000a        piVar4 = __errno_location();\u000a        __fd = *piVar4;\u000a        iVar1 = ferror((FILE *)stream);\u000a        if (iVar1 == 0) {\u000a          if ((uVar5 < __size_00 - 1) &&\u000a             (pcVar3 = (char *)realloc(__ptr,uVar5 + 1), pcVar3 != (char *)0x0)) {\u000a            __ptr = pcVar3;\u000a          }\u000a          __ptr[uVar5] = 0;\u000a          *length = uVar5;\u000a          return __ptr;\u000a        }\u000a        goto LAB_00405c3e;\u000a      }\u000a      if (__size_00 == 0xffffffffffffffff) {\u000a        __fd = 0xc;\u000a        goto LAB_00405c3e;\u000a      }\u000a      __size = (__size_00 >> 1) + __size_00;\u000a      if (~(__size_00 >> 1) <= __size_00) {\u000a        __size = 0xffffffffffffffff;\u000a      }\u000a      pcVar3 = (char *)realloc(__ptr,__size);\u000a      __size_00 = __size;\u000a    } while (pcVar3 != (char *)0x0);\u000a    piVar4 = __errno_location();\u000a    __fd = *piVar4;\u000aLAB_00405c3e:\u000a    free(__ptr);\u000a    piVar4 = __errno_location();\u000a    *piVar4 = __fd;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p3
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RSI\nMOV R15,RDI\nCALL 0x004019a0\nLEA RSI,[RSP + 0x8]\nMOV EDI,EAX\nCALL 0x004084d0\nTEST EAX,EAX\nJS 0x00405b72\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x20]\nCMP EAX,0x8000\nJNZ 0x00405b72\nMOV RDI,R15\nCALL 0x00401750\nTEST RAX,RAX\nJS 0x00405b72\nMOV R13,qword ptr [RSP + 0x38]\nSUB R13,RAX\nJLE 0x00405b72\nCMP R13,-0x1\nJZ 0x00405c65\nINC R13\nJMP 0x00405b78\nMOV R13D,0x2000\nMOV RDI,R13\nCALL 0x004019c0\nTEST RAX,RAX\nJZ 0x00405c4d\nMOV qword ptr [RSP],RBX\nXOR EBP,EBP\nMOV R14,-0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R12,RAX\nMOV RBX,R13\nSUB RBX,RBP\nLEA RDI,[R12 + RBP*0x1]\nMOV ESI,0x1\nMOV RDX,RBX\nMOV RCX,R15\nCALL 0x00401790\nADD RBP,RAX\nCMP RAX,RBX\nJNZ 0x00405bfd\nCMP R13,-0x1\nJZ 0x00405c39\nMOV RBX,R13\nSHR RBX,1\nMOV RAX,RBX\nNOT RAX\nADD RBX,R13\nCMP R13,RAX\nCMOVNC RBX,R14\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00401a30\nTEST RAX,RAX\nMOV R13,RBX\nJNZ 0x00405ba0\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nJMP 0x00405c3e\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nMOV RDI,R15\nCALL 0x00401770\nTEST EAX,EAX\nJNZ 0x00405c3e\nDEC R13\nCMP RBP,R13\nJNC 0x00405c2b\nLEA RSI,[RBP + 0x1]\nMOV RDI,R12\nCALL 0x00401a30\nTEST RAX,RAX\nCMOVNZ R12,RAX\nMOV RAX,qword ptr [RSP]\nMOV byte ptr [R12 + RBP*0x1],0x0\nMOV qword ptr [RAX],RBP\nJMP 0x00405c50\nMOV EBX,0xc\nMOV RDI,R12\nCALL 0x004016f0\nCALL 0x00401710\nMOV dword ptr [RAX],EBX\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401710\nMOV dword ptr [RAX],0xc\nJMP 0x00405c4d\n'
p4
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 f3\n49 89 ff\ne8 74 be ff ff\n48 8d 74 24 08\n89 c7\ne8 98 29 00 00\n85 c0\n78 36\nb8 00 f0 00 00\n23 44 24 20\n3d 00 80 00 00\n75 26\n4c 89 ff\ne8 fc bb ff ff\n48 85 c0\n78 19\n4c 8b 6c 24 38\n49 29 c5\n7e 0f\n49 83 fd ff\n0f 84 f8 00 00 00\n49 ff c5\neb 06\n41 bd 00 20 00 00\n4c 89 ef\ne8 40 be ff ff\n48 85 c0\n0f 84 c4 00 00 00\n48 89 1c 24\n31 ed\n49 c7 c6 ff ff ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n49 89 c4\n4c 89 eb\n48 29 eb\n49 8d 3c 2c\nbe 01 00 00 00\n48 89 da\n4c 89 f9\ne8 d3 bb ff ff\n48 01 c5\n48 39 d8\n75 38\n49 83 fd ff\n74 6e\n4c 89 eb\n48 d1 eb\n48 89 d8\n48 f7 d0\n4c 01 eb\n49 39 c5\n49 0f 43 de\n4c 89 e7\n48 89 de\ne8 44 be ff ff\n48 85 c0\n49 89 dd\n75 ac\ne8 17 bb ff ff\n8b 18\neb 41\ne8 0e bb ff ff\n8b 18\n4c 89 ff\ne8 64 bb ff ff\n85 c0\n75 2e\n49 ff cd\n4c 39 ed\n73 13\n48 8d 75 01\n4c 89 e7\ne8 0c be ff ff\n48 85 c0\n4c 0f 45 e0\n48 8b 04 24\n41 c6 04 2c 00\n48 89 28\neb 17\nbb 0c 00 00 00\n4c 89 e7\ne8 aa ba ff ff\ne8 c5 ba ff ff\n89 18\n45 31 e4\n4c 89 e0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 a6 ba ff ff\nc7 00 0c 00 00 00\neb db\n'
p5
S'.text:0000000000405b10\n.text:0000000000405b11\n.text:0000000000405b13\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b19\n.text:0000000000405b1a\n.text:0000000000405b21\n.text:0000000000405b24\n.text:0000000000405b27\n.text:0000000000405b2c\n.text:0000000000405b31\n.text:0000000000405b33\n.text:0000000000405b38\n.text:0000000000405b3a\n.text:0000000000405b3c\n.text:0000000000405b41\n.text:0000000000405b45\n.text:0000000000405b4a\n.text:0000000000405b4c\n.text:0000000000405b4f\n.text:0000000000405b54\n.text:0000000000405b57\n.text:0000000000405b59\n.text:0000000000405b5e\n.text:0000000000405b61\n.text:0000000000405b63\n.text:0000000000405b67\n.text:0000000000405b6d\n.text:0000000000405b70\n.text:0000000000405b72\n.text:0000000000405b78\n.text:0000000000405b7b\n.text:0000000000405b80\n.text:0000000000405b83\n.text:0000000000405b89\n.text:0000000000405b8d\n.text:0000000000405b8f\n.text:0000000000405b96\n.text:0000000000405ba0\n.text:0000000000405ba3\n.text:0000000000405ba6\n.text:0000000000405ba9\n.text:0000000000405bad\n.text:0000000000405bb2\n.text:0000000000405bb5\n.text:0000000000405bb8\n.text:0000000000405bbd\n.text:0000000000405bc0\n.text:0000000000405bc3\n.text:0000000000405bc5\n.text:0000000000405bc9\n.text:0000000000405bcb\n.text:0000000000405bce\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd7\n.text:0000000000405bda\n.text:0000000000405bdd\n.text:0000000000405be1\n.text:0000000000405be4\n.text:0000000000405be7\n.text:0000000000405bec\n.text:0000000000405bef\n.text:0000000000405bf2\n.text:0000000000405bf4\n.text:0000000000405bf9\n.text:0000000000405bfb\n.text:0000000000405bfd\n.text:0000000000405c02\n.text:0000000000405c04\n.text:0000000000405c07\n.text:0000000000405c0c\n.text:0000000000405c0e\n.text:0000000000405c10\n.text:0000000000405c13\n.text:0000000000405c16\n.text:0000000000405c18\n.text:0000000000405c1c\n.text:0000000000405c1f\n.text:0000000000405c24\n.text:0000000000405c27\n.text:0000000000405c2b\n.text:0000000000405c2f\n.text:0000000000405c34\n.text:0000000000405c37\n.text:0000000000405c39\n.text:0000000000405c3e\n.text:0000000000405c41\n.text:0000000000405c46\n.text:0000000000405c4b\n.text:0000000000405c4d\n.text:0000000000405c50\n.text:0000000000405c53\n.text:0000000000405c5a\n.text:0000000000405c5b\n.text:0000000000405c5d\n.text:0000000000405c5f\n.text:0000000000405c61\n.text:0000000000405c63\n.text:0000000000405c64\n.text:0000000000405c65\n.text:0000000000405c6a\n.text:0000000000405c70\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060d1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060d1a0]\n'
p11
S'ff 25 aa b7 20 00\n'
p12
S'.plt:00000000004019f0\n'
p13
tp14
sS'version_etc_arn'
p15
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p16
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004093fb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x405eb7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405f38;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x405fcc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405d48\nMOV EDX,0x4093e8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401b20\nJMP 0x00405d5d\nMOV EDX,0x4093f4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401b20\nXOR EDI,EDI\nMOV ESI,0x4093fb\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4096d0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401b20\nXOR EDI,EDI\nMOV ESI,0x4093ff\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401950\nCMP R12,0x9\nJA 0x00405de6\nJMP qword ptr [0x409398 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4094ca\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b20\nXOR EDI,EDI\nMOV ESI,0x409609\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x38\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x4094da\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b20\nXOR EDI,EDI\nMOV ESI,0x4094f1\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b20\nXOR EDI,EDI\nMOV ESI,0x40950d\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x18\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x40952d\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x18\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x409551\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x28\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x409579\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x28\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x4095a5\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x38\nJMP 0x00406057\nXOR EDI,EDI\nMOV ESI,0x4095d5\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b20\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401700\n'
p18
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba e8 93 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 da bd ff ff\neb 15\nba f4 93 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 c3 bd ff ff\n31 ff\nbe fb 93 40 00\nba 05 00 00 00\ne8 a2 ba ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 96 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 95 bd ff ff\n31 ff\nbe ff 93 40 00\nba 05 00 00 00\ne8 74 ba ff ff\n48 89 c7\n4c 89 f6\ne8 a9 bb ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 98 93 40 00\n31 ff\nbe ca 94 40 00\nba 05 00 00 00\ne8 4a ba ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a bd ff ff\n31 ff\nbe 09 96 40 00\nba 05 00 00 00\ne8 19 ba ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 f1 bc ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe da 94 40 00\nba 05 00 00 00\ne8 c7 b9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 b3 bc ff ff\n31 ff\nbe f1 94 40 00\nba 05 00 00 00\ne8 92 b9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 7a bc ff ff\n31 ff\nbe 0d 95 40 00\nba 05 00 00 00\ne8 59 b9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 44 bc ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 2d 95 40 00\nba 05 00 00 00\ne8 1a b9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 02 bc ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 51 95 40 00\nba 05 00 00 00\ne8 d8 b8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b8 bb ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 79 95 40 00\nba 05 00 00 00\ne8 8e b8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6e bb ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe a5 95 40 00\nba 05 00 00 00\ne8 44 b8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1c bb ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe d5 95 40 00\nba 05 00 00 00\ne8 f5 b7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 cd ba ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 9c b6 ff ff\n'
p19
S'.text:0000000000405d10\n.text:0000000000405d12\n.text:0000000000405d14\n.text:0000000000405d16\n.text:0000000000405d17\n.text:0000000000405d18\n.text:0000000000405d1b\n.text:0000000000405d1e\n.text:0000000000405d21\n.text:0000000000405d24\n.text:0000000000405d27\n.text:0000000000405d2a\n.text:0000000000405d2f\n.text:0000000000405d32\n.text:0000000000405d34\n.text:0000000000405d39\n.text:0000000000405d3b\n.text:0000000000405d3e\n.text:0000000000405d41\n.text:0000000000405d46\n.text:0000000000405d48\n.text:0000000000405d4d\n.text:0000000000405d4f\n.text:0000000000405d52\n.text:0000000000405d55\n.text:0000000000405d58\n.text:0000000000405d5d\n.text:0000000000405d5f\n.text:0000000000405d64\n.text:0000000000405d69\n.text:0000000000405d6e\n.text:0000000000405d71\n.text:0000000000405d76\n.text:0000000000405d7b\n.text:0000000000405d81\n.text:0000000000405d83\n.text:0000000000405d86\n.text:0000000000405d8b\n.text:0000000000405d8d\n.text:0000000000405d92\n.text:0000000000405d97\n.text:0000000000405d9c\n.text:0000000000405d9f\n.text:0000000000405da2\n.text:0000000000405da7\n.text:0000000000405dab\n.text:0000000000405dad\n.text:0000000000405db5\n.text:0000000000405db7\n.text:0000000000405dbc\n.text:0000000000405dc1\n.text:0000000000405dc6\n.text:0000000000405dc9\n.text:0000000000405dcc\n.text:0000000000405dd1\n.text:0000000000405dd3\n.text:0000000000405dd6\n.text:0000000000405dda\n.text:0000000000405ddb\n.text:0000000000405ddd\n.text:0000000000405ddf\n.text:0000000000405de1\n.text:0000000000405de6\n.text:0000000000405de8\n.text:0000000000405ded\n.text:0000000000405df2\n.text:0000000000405df7\n.text:0000000000405dfa\n.text:0000000000405dfd\n.text:0000000000405e01\n.text:0000000000405e05\n.text:0000000000405e0a\n.text:0000000000405e0f\n.text:0000000000405e12\n.text:0000000000405e16\n.text:0000000000405e1a\n.text:0000000000405e1e\n.text:0000000000405e22\n.text:0000000000405e26\n.text:0000000000405e2a\n.text:0000000000405e2f\n.text:0000000000405e33\n.text:0000000000405e38\n.text:0000000000405e3a\n.text:0000000000405e3f\n.text:0000000000405e44\n.text:0000000000405e49\n.text:0000000000405e4c\n.text:0000000000405e4f\n.text:0000000000405e53\n.text:0000000000405e58\n.text:0000000000405e5a\n.text:0000000000405e5d\n.text:0000000000405e61\n.text:0000000000405e62\n.text:0000000000405e64\n.text:0000000000405e66\n.text:0000000000405e68\n.text:0000000000405e6d\n.text:0000000000405e6f\n.text:0000000000405e74\n.text:0000000000405e79\n.text:0000000000405e7e\n.text:0000000000405e81\n.text:0000000000405e84\n.text:0000000000405e88\n.text:0000000000405e8c\n.text:0000000000405e91\n.text:0000000000405e93\n.text:0000000000405e96\n.text:0000000000405e9a\n.text:0000000000405e9b\n.text:0000000000405e9d\n.text:0000000000405e9f\n.text:0000000000405ea1\n.text:0000000000405ea6\n.text:0000000000405ea8\n.text:0000000000405ead\n.text:0000000000405eb2\n.text:0000000000405eb7\n.text:0000000000405eba\n.text:0000000000405ebd\n.text:0000000000405ec1\n.text:0000000000405ec5\n.text:0000000000405ec9\n.text:0000000000405ece\n.text:0000000000405ed0\n.text:0000000000405ed3\n.text:0000000000405ed7\n.text:0000000000405edc\n.text:0000000000405ee0\n.text:0000000000405ee5\n.text:0000000000405ee7\n.text:0000000000405eec\n.text:0000000000405ef1\n.text:0000000000405ef6\n.text:0000000000405ef9\n.text:0000000000405efc\n.text:0000000000405f00\n.text:0000000000405f04\n.text:0000000000405f09\n.text:0000000000405f0e\n.text:0000000000405f11\n.text:0000000000405f15\n.text:0000000000405f19\n.text:0000000000405f1e\n.text:0000000000405f22\n.text:0000000000405f27\n.text:0000000000405f29\n.text:0000000000405f2e\n.text:0000000000405f33\n.text:0000000000405f38\n.text:0000000000405f3b\n.text:0000000000405f3e\n.text:0000000000405f42\n.text:0000000000405f46\n.text:0000000000405f4a\n.text:0000000000405f4f\n.text:0000000000405f54\n.text:0000000000405f57\n.text:0000000000405f5b\n.text:0000000000405f5f\n.text:0000000000405f63\n.text:0000000000405f68\n.text:0000000000405f6c\n.text:0000000000405f71\n.text:0000000000405f73\n.text:0000000000405f78\n.text:0000000000405f7d\n.text:0000000000405f82\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8c\n.text:0000000000405f90\n.text:0000000000405f95\n.text:0000000000405f9a\n.text:0000000000405f9d\n.text:0000000000405fa1\n.text:0000000000405fa5\n.text:0000000000405fa9\n.text:0000000000405fad\n.text:0000000000405fb2\n.text:0000000000405fb6\n.text:0000000000405fbb\n.text:0000000000405fbd\n.text:0000000000405fc2\n.text:0000000000405fc7\n.text:0000000000405fcc\n.text:0000000000405fcf\n.text:0000000000405fd2\n.text:0000000000405fd6\n.text:0000000000405fda\n.text:0000000000405fde\n.text:0000000000405fe3\n.text:0000000000405fe8\n.text:0000000000405feb\n.text:0000000000405fef\n.text:0000000000405ff3\n.text:0000000000405ff7\n.text:0000000000405ffb\n.text:0000000000405fff\n.text:0000000000406004\n.text:0000000000406008\n.text:000000000040600a\n.text:000000000040600c\n.text:0000000000406011\n.text:0000000000406016\n.text:000000000040601b\n.text:000000000040601e\n.text:0000000000406021\n.text:0000000000406025\n.text:0000000000406029\n.text:000000000040602e\n.text:0000000000406033\n.text:0000000000406036\n.text:000000000040603a\n.text:000000000040603e\n.text:0000000000406042\n.text:0000000000406046\n.text:000000000040604a\n.text:000000000040604e\n.text:0000000000406053\n.text:0000000000406057\n.text:0000000000406058\n.text:000000000040605a\n.text:000000000040605c\n.text:000000000040605e\n.text:000000000040605f\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060d0e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x0060d0e8]\n'
p25
S'ff 25 62 b8 20 00\n'
p26
S'.plt:0000000000401880\n'
p27
tp28
sS'transfer_entries'
p29
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p30
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x004078a2\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00407892\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x0040783a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004070b0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00407820\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00407832\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407e20\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x004077f0\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00407892\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004070b0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00407880\nMOV RDI,R14\nCALL 0x00407b60\nTEST RAX,RAX\nJZ 0x004078b1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00407887\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x004077d0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x004078a2\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p33
S'.text:00000000004077a0\n.text:00000000004077a1\n.text:00000000004077a3\n.text:00000000004077a5\n.text:00000000004077a7\n.text:00000000004077a9\n.text:00000000004077aa\n.text:00000000004077ab\n.text:00000000004077ae\n.text:00000000004077b1\n.text:00000000004077b4\n.text:00000000004077b8\n.text:00000000004077ba\n.text:00000000004077be\n.text:00000000004077c4\n.text:00000000004077c8\n.text:00000000004077d0\n.text:00000000004077d4\n.text:00000000004077da\n.text:00000000004077de\n.text:00000000004077e1\n.text:00000000004077e3\n.text:00000000004077f0\n.text:00000000004077f3\n.text:00000000004077f6\n.text:00000000004077f9\n.text:00000000004077fe\n.text:0000000000407802\n.text:0000000000407806\n.text:0000000000407808\n.text:000000000040780c\n.text:0000000000407810\n.text:0000000000407814\n.text:0000000000407820\n.text:0000000000407823\n.text:0000000000407827\n.text:000000000040782a\n.text:000000000040782d\n.text:0000000000407832\n.text:0000000000407835\n.text:0000000000407838\n.text:000000000040783a\n.text:000000000040783d\n.text:0000000000407845\n.text:0000000000407848\n.text:000000000040784c\n.text:000000000040784e\n.text:0000000000407851\n.text:0000000000407854\n.text:0000000000407859\n.text:000000000040785c\n.text:0000000000407860\n.text:0000000000407862\n.text:0000000000407865\n.text:000000000040786a\n.text:000000000040786d\n.text:000000000040786f\n.text:0000000000407872\n.text:0000000000407876\n.text:000000000040787a\n.text:000000000040787e\n.text:0000000000407880\n.text:0000000000407883\n.text:0000000000407887\n.text:000000000040788e\n.text:0000000000407892\n.text:0000000000407896\n.text:000000000040789a\n.text:00000000004078a0\n.text:00000000004078a2\n.text:00000000004078a6\n.text:00000000004078a7\n.text:00000000004078a9\n.text:00000000004078ab\n.text:00000000004078ad\n.text:00000000004078af\n.text:00000000004078b0\n.text:00000000004078b1\n.text:00000000004078b3\n'
p34
tp35
sS'rpl_fclose'
p36
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p37
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00406b69;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00406b69:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004019a0\nTEST EAX,EAX\nJS 0x00406b69\nMOV RDI,RBX\nCALL 0x00401a10\nTEST EAX,EAX\nJZ 0x00406b37\nMOV RDI,RBX\nCALL 0x004019a0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004018a0\nCMP RAX,-0x1\nJZ 0x00406b69\nMOV RDI,RBX\nCALL 0x00406b80\nTEST EAX,EAX\nJZ 0x00406b69\nCALL 0x00401710\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004017e0\nTEST EBP,EBP\nJZ 0x00406b62\nCALL 0x00401710\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004017e0\n'
p39
S'55\n53\n50\n48 89 fb\ne8 95 ae ff ff\n85 c0\n78 5a\n48 89 df\ne8 f9 ae ff ff\n85 c0\n74 1c\n48 89 df\ne8 7d ae ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 6f ad ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 c8 ab ff ff\n8b 28\n48 89 df\ne8 8e ac ff ff\n85 ed\n74 0c\ne8 b5 ab ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 69 ac ff ff\n'
p40
S'.text:0000000000406b00\n.text:0000000000406b01\n.text:0000000000406b02\n.text:0000000000406b03\n.text:0000000000406b06\n.text:0000000000406b0b\n.text:0000000000406b0d\n.text:0000000000406b0f\n.text:0000000000406b12\n.text:0000000000406b17\n.text:0000000000406b19\n.text:0000000000406b1b\n.text:0000000000406b1e\n.text:0000000000406b23\n.text:0000000000406b25\n.text:0000000000406b2a\n.text:0000000000406b2c\n.text:0000000000406b31\n.text:0000000000406b35\n.text:0000000000406b37\n.text:0000000000406b3a\n.text:0000000000406b3f\n.text:0000000000406b41\n.text:0000000000406b43\n.text:0000000000406b48\n.text:0000000000406b4a\n.text:0000000000406b4d\n.text:0000000000406b52\n.text:0000000000406b54\n.text:0000000000406b56\n.text:0000000000406b5b\n.text:0000000000406b5d\n.text:0000000000406b62\n.text:0000000000406b66\n.text:0000000000406b67\n.text:0000000000406b68\n.text:0000000000406b69\n.text:0000000000406b6c\n.text:0000000000406b70\n.text:0000000000406b71\n.text:0000000000406b72\n'
p41
tp42
sS'fwrite_unlocked'
p43
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060d1b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x0060d1b8]\n'
p46
S'ff 25 92 b7 20 00\n'
p47
S'.plt:0000000000401a20\n'
p48
tp49
sS'strncmp'
p50
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060d038)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0060d038]\n'
p53
S'ff 25 12 b9 20 00\n'
p54
S'.plt:0000000000401720\n'
p55
tp56
sS'xnrealloc'
p57
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p58
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p59
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00406264\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00406270\nPUSH RAX\nCALL 0x004063c0\n'
p60
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p61
S'.text:0000000000406250\n.text:0000000000406253\n.text:0000000000406256\n.text:0000000000406259\n.text:000000000040625b\n.text:000000000040625f\n.text:0000000000406262\n.text:0000000000406264\n.text:0000000000406265\n'
p62
tp63
sS'quote'
p64
(S'\n__stdcall quote(char * arg)\n'
p65
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404670\n'
p67
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p68
S'.text:0000000000404680\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404688\n'
p69
tp70
sS'emit_bug_reporting_address'
p71
(S'\n__stdcall emit_bug_reporting_address()\n'
p72
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409645\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40965a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a60\nXOR EDI,EDI\nMOV ESI,0x409670\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x408b0b\nMOV ECX,0x408c98\nXOR EAX,EAX\nCALL 0x00401a60\nXOR EDI,EDI\nMOV ESI,0x409684\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401950\n'
p74
S'50\n31 ff\nbe 45 96 40 00\nba 05 00 00 00\ne8 6e b6 ff ff\n48 89 c1\nbf 01 00 00 00\nba 5a 96 40 00\n31 c0\n48 89 ce\ne8 a7 b8 ff ff\n31 ff\nbe 70 96 40 00\nba 05 00 00 00\ne8 46 b6 ff ff\n48 89 c6\nbf 01 00 00 00\nba 0b 8b 40 00\nb9 98 8c 40 00\n31 c0\ne8 7d b8 ff ff\n31 ff\nbe 84 96 40 00\nba 05 00 00 00\ne8 1c b6 ff ff\n48 8b 35 ed 70 20 00\n48 89 c7\n58\ne9 4c b7 ff ff\n'
p75
S'.text:0000000000406190\n.text:0000000000406191\n.text:0000000000406193\n.text:0000000000406198\n.text:000000000040619d\n.text:00000000004061a2\n.text:00000000004061a5\n.text:00000000004061aa\n.text:00000000004061af\n.text:00000000004061b1\n.text:00000000004061b4\n.text:00000000004061b9\n.text:00000000004061bb\n.text:00000000004061c0\n.text:00000000004061c5\n.text:00000000004061ca\n.text:00000000004061cd\n.text:00000000004061d2\n.text:00000000004061d7\n.text:00000000004061dc\n.text:00000000004061de\n.text:00000000004061e3\n.text:00000000004061e5\n.text:00000000004061ea\n.text:00000000004061ef\n.text:00000000004061f4\n.text:00000000004061fb\n.text:00000000004061fe\n.text:00000000004061ff\n'
p76
tp77
sS'clone_quoting_options'
p78
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p79
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401710\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60d350\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00406370\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p81
S'55\n41 56\n53\n48 89 fb\ne8 c4 e4 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 50 d3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 05 31 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p82
S'.text:0000000000403240\n.text:0000000000403241\n.text:0000000000403243\n.text:0000000000403244\n.text:0000000000403247\n.text:000000000040324c\n.text:000000000040324f\n.text:0000000000403252\n.text:0000000000403255\n.text:000000000040325a\n.text:000000000040325e\n.text:0000000000403263\n.text:0000000000403266\n.text:000000000040326b\n.text:000000000040326e\n.text:000000000040326f\n.text:0000000000403271\n.text:0000000000403272\n'
p83
tp84
sS'xmalloc'
p85
(S'\n__stdcall xmalloc(size_t n)\n'
p86
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p87
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004019c0\nTEST RBX,RBX\nJZ 0x00406243\nTEST RAX,RAX\nJZ 0x00406245\nPOP RBX\nRET\nCALL 0x004063c0\n'
p88
S'53\n48 89 fb\ne8 87 b7 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p89
S'.text:0000000000406230\n.text:0000000000406231\n.text:0000000000406234\n.text:0000000000406239\n.text:000000000040623c\n.text:000000000040623e\n.text:0000000000406241\n.text:0000000000406243\n.text:0000000000406244\n.text:0000000000406245\n'
p90
tp91
sS'quotearg_char_mem'
p92
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p93
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060d380]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060d370]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d360]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d350]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004032a0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404190\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p95
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d c8 8e 20 00\n48 89 4c 24 30\n0f 10 05 ac 8e 20 00\n0f 29 44 24 20\n0f 10 05 90 8e 20 00\n0f 29 44 24 10\n0f 10 05 74 8e 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p96
S'.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a5\n.text:00000000004044a9\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b8\n.text:00000000004044bd\n.text:00000000004044c4\n.text:00000000004044c9\n.text:00000000004044d0\n.text:00000000004044d5\n.text:00000000004044dc\n.text:00000000004044e0\n.text:00000000004044e3\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044f2\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fa\n.text:00000000004044fd\n.text:0000000000404502\n.text:0000000000404506\n.text:0000000000404507\n.text:0000000000404509\n.text:000000000040450b\n'
p97
tp98
sS'sparse_swap'
p99
(S'\n__stdcall sparse_swap(sparse_map * sv, size_t * v, size_t i, size_t j)\n'
p100
V\u000avoid sparse_swap(sparse_map *sv,size_t *v,size_t i,size_t j)\u000a\u000a{\u000a  size_t sVar1;\u000a  void *pvVar2;\u000a  size_t *entry;\u000a  size_t *entry_00;\u000a  size_t local_50;\u000a  undefined8 local_48;\u000a  size_t local_40;\u000a  undefined8 local_38;\u000a  \u000a  local_38 = 0;\u000a  local_40 = i;\u000a  entry = (size_t *)hash_delete((Hash_table *)sv,&local_40);\u000a  local_48 = 0;\u000a  local_50 = j;\u000a  entry_00 = (size_t *)hash_delete((Hash_table *)sv,&local_50);\u000a  if (entry == (size_t *)0x0) {\u000a    entry = (size_t *)xmalloc(0x10);\u000a    entry[1] = i;\u000a    *entry = i;\u000a  }\u000a  if (entry_00 == (size_t *)0x0) {\u000a    entry_00 = (size_t *)xmalloc(0x10);\u000a    entry_00[1] = j;\u000a    *entry_00 = j;\u000a  }\u000a  sVar1 = entry[1];\u000a  entry[1] = entry_00[1];\u000a  entry_00[1] = sVar1;\u000a  pvVar2 = hash_insert((Hash_table *)sv,entry);\u000a  if (pvVar2 != (void *)0x0) {\u000a    pvVar2 = hash_insert((Hash_table *)sv,entry_00);\u000a    if (pvVar2 != (void *)0x0) {\u000a      v[i] = entry[1];\u000a      return;\u000a    }\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R15,RDX\nMOV R14,RSI\nMOV R12,RDI\nMOV qword ptr [RSP + 0x18],R15\nMOV qword ptr [RSP + 0x20],0x0\nLEA RSI,[RSP + 0x18]\nCALL 0x00407bc0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x8],R13\nMOV qword ptr [RSP + 0x10],0x0\nLEA RSI,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x00407bc0\nMOV RBP,RAX\nTEST RBX,RBX\nJNZ 0x00404eac\nMOV EDI,0x10\nCALL 0x00406230\nMOV RBX,RAX\nMOV qword ptr [RBX + 0x8],R15\nMOV qword ptr [RBX],R15\nTEST RBP,RBP\nJNZ 0x00404ec6\nMOV EDI,0x10\nCALL 0x00406230\nMOV RBP,RAX\nMOV qword ptr [RBP + 0x8],R13\nMOV qword ptr [RBP],R13\nMOV RAX,qword ptr [RBX + 0x8]\nMOV RCX,qword ptr [RBP + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RBP + 0x8],RAX\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00407b90\nTEST RAX,RAX\nJZ 0x00404f0d\nMOV RDI,R12\nMOV RSI,RBP\nCALL 0x00407b90\nTEST RAX,RAX\nJZ 0x00404f0d\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [R14 + R15*0x8],RAX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004063c0\n'
p102
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d7\n49 89 f6\n49 89 fc\n4c 89 7c 24 18\n48 c7 44 24 20 00 00 00 00\n48 8d 74 24 18\ne8 4e 2d 00 00\n48 89 c3\n4c 89 6c 24 08\n48 c7 44 24 10 00 00 00 00\n48 8d 74 24 08\n4c 89 e7\ne8 30 2d 00 00\n48 89 c5\n48 85 db\n75 14\nbf 10 00 00 00\ne8 8e 13 00 00\n48 89 c3\n4c 89 7b 08\n4c 89 3b\n48 85 ed\n75 15\nbf 10 00 00 00\ne8 75 13 00 00\n48 89 c5\n4c 89 6d 08\n4c 89 6d 00\n48 8b 43 08\n48 8b 4d 08\n48 89 4b 08\n48 89 45 08\n4c 89 e7\n48 89 de\ne8 af 2c 00 00\n48 85 c0\n74 27\n4c 89 e7\n48 89 ee\ne8 9f 2c 00 00\n48 85 c0\n74 17\n48 8b 43 08\n4b 89 04 fe\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ae 14 00 00\n'
p103
S'.text:0000000000404e40\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e45\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4a\n.text:0000000000404e4e\n.text:0000000000404e51\n.text:0000000000404e54\n.text:0000000000404e57\n.text:0000000000404e5a\n.text:0000000000404e5f\n.text:0000000000404e68\n.text:0000000000404e6d\n.text:0000000000404e72\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e83\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e90\n.text:0000000000404e93\n.text:0000000000404e96\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea5\n.text:0000000000404ea9\n.text:0000000000404eac\n.text:0000000000404eaf\n.text:0000000000404eb1\n.text:0000000000404eb6\n.text:0000000000404ebb\n.text:0000000000404ebe\n.text:0000000000404ec2\n.text:0000000000404ec6\n.text:0000000000404eca\n.text:0000000000404ece\n.text:0000000000404ed2\n.text:0000000000404ed6\n.text:0000000000404ed9\n.text:0000000000404edc\n.text:0000000000404ee1\n.text:0000000000404ee4\n.text:0000000000404ee6\n.text:0000000000404ee9\n.text:0000000000404eec\n.text:0000000000404ef1\n.text:0000000000404ef4\n.text:0000000000404ef6\n.text:0000000000404efa\n.text:0000000000404efe\n.text:0000000000404f02\n.text:0000000000404f03\n.text:0000000000404f05\n.text:0000000000404f07\n.text:0000000000404f09\n.text:0000000000404f0b\n.text:0000000000404f0c\n.text:0000000000404f0d\n'
p104
tp105
sS'sparse_hash_'
p106
(S'\n__stdcall sparse_hash_(void * x, size_t table_size)\n'
p107
V\u000asize_t sparse_hash_(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p108
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p109
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p110
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f55\n.text:0000000000404f58\n.text:0000000000404f5b\n'
p111
tp112
sS'frame_dummy'
p113
(S'\n__stdcall frame_dummy()\n'
p114
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c5a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p115
S'MOV EDI,0x60ce18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401c50\nJMP 0x00401be0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c4b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401be0\n'
p116
S'bf 18 ce 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p117
S'.text:0000000000401c40\n.text:0000000000401c45\n.text:0000000000401c49\n.text:0000000000401c4b\n.text:0000000000401c50\n.text:0000000000401c55\n.text:0000000000401c58\n.text:0000000000401c5a\n.text:0000000000401c5b\n.text:0000000000401c5e\n.text:0000000000401c60\n.text:0000000000401c61\n'
p118
tp119
sS'gettimeofday'
p120
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0060d100)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060d100]\n'
p123
S'ff 25 4a b8 20 00\n'
p124
S'.plt:00000000004018b0\n'
p125
tp126
sS'quotearg_n_style_colon'
p127
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p128
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004043c0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004032a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404190\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p130
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p131
S'.text:0000000000404540\n.text:0000000000404541\n.text:0000000000404543\n.text:0000000000404544\n.text:0000000000404548\n.text:000000000040454b\n.text:000000000040454d\n.text:0000000000404552\n.text:0000000000404555\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404564\n.text:0000000000404567\n.text:000000000040456c\n.text:0000000000404573\n.text:0000000000404575\n.text:0000000000404578\n.text:000000000040457b\n.text:0000000000404580\n.text:0000000000404584\n.text:0000000000404585\n.text:0000000000404587\n.text:0000000000404588\n'
p132
tp133
sS'rotl64'
p134
(S'\n__stdcall rotl64(uint64_t x)\n'
p135
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p136
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p137
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p138
S'.text:0000000000408340\n.text:0000000000408342\n.text:0000000000408345\n.text:0000000000408348\n'
p139
tp140
sS'randint_new'
p141
(S'\n__stdcall randint_new(randread_source * source)\n'
p142
V\u000arandint_source * randint_new(randread_source *source)\u000a\u000a{\u000a  randint_source *prVar1;\u000a  \u000a  prVar1 = (randint_source *)xmalloc(0x18);\u000a  prVar1->source = source;\u000a  *(undefined4 *)&prVar1->randnum = 0;\u000a  *(undefined4 *)((long)&prVar1->randnum + 4) = 0;\u000a  *(undefined4 *)&prVar1->randmax = 0;\u000a  *(undefined4 *)((long)&prVar1->randmax + 4) = 0;\u000a  return prVar1;\u000a}\u000a\u000a
p143
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x18\nCALL 0x00406230\nMOV qword ptr [RAX],RBX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RAX + 0x8],XMM0\nPOP RBX\nRET\n'
p144
S'53\n48 89 fb\nbf 18 00 00 00\ne8 92 17 00 00\n48 89 18\n0f 57 c0\n0f 11 40 08\n5b\nc3\n'
p145
S'.text:0000000000404a90\n.text:0000000000404a91\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9e\n.text:0000000000404aa1\n.text:0000000000404aa4\n.text:0000000000404aa8\n.text:0000000000404aa9\n'
p146
tp147
sS'quote_mem'
p148
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p149
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404650\n'
p151
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p152
S'.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404666\n.text:0000000000404668\n.text:000000000040466b\n.text:000000000040466e\n'
p153
tp154
sS'fadvise'
p155
(S'\n__stdcall fadvise(FILE * fp)\n'
p156
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00402f28\nCALL 0x004019a0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00402f00\nPOP RBX\nRET\n'
p158
S'53\n89 f3\n48 85 ff\n74 10\ne8 83 ea ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p159
S'.text:0000000000402f10\n.text:0000000000402f11\n.text:0000000000402f13\n.text:0000000000402f16\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f1f\n.text:0000000000402f21\n.text:0000000000402f23\n.text:0000000000402f25\n.text:0000000000402f26\n.text:0000000000402f28\n.text:0000000000402f29\n'
p160
tp161
sS'fileno'
p162
(S'\n__stdcall fileno(FILE * __stream)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060d178)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060d178]\n'
p165
S'ff 25 d2 b7 20 00\n'
p166
S'.plt:00000000004019a0\n'
p167
tp168
sS'mbrtowc'
p169
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060d0d8)();\u000a  return sVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060d0d8]\n'
p172
S'ff 25 72 b8 20 00\n'
p173
S'.plt:0000000000401860\n'
p174
tp175
sS'rotr16'
p176
(S'\n__stdcall rotr16()\n'
p177
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p178
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p179
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p180
S'.text:00000000004083c0\n.text:00000000004083c2\n.text:00000000004083c4\n.text:00000000004083c6\n.text:00000000004083cb\n.text:00000000004083cd\n.text:00000000004083cf\n.text:00000000004083d1\n.text:00000000004083d3\n'
p181
tp182
sS'dup2'
p183
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0060d0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060d0e0]\n'
p186
S'ff 25 6a b8 20 00\n'
p187
S'.plt:0000000000401870\n'
p188
tp189
sS'xstrtoumax'
p190
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p191
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00406a06;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00406a06;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00406935_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00406913:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00406913;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004069e7;\u000a  default:\u000aswitchD_00406935_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004069e7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004069e7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00406a06:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p192
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00406a23\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401710\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401b60\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00406820\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00406a12\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401ac0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00406880\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004068b1\nCMP EAX,0x22\nJNZ 0x00406a12\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004068bc\nJMP 0x00406a06\nTEST R12,R12\nJZ 0x00406a12\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00406a12\nMOV RDI,R12\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x00406a12\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004068bc\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00406a06\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00406a06\nMOV RDI,R12\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x0040694e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401880\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00406913\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040691a\nCMP EAX,0x44\nJZ 0x0040691a\nCMP EAX,0x69\nJNZ 0x00406913\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00406924\nMOV EBP,0x1\nJMP 0x00406924\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040694e\nXOR EAX,EAX\nJMP qword ptr [0x409948 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00406a12\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004069e7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00406a70\nJMP 0x004069ec\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004069e7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00406a40\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4098c0\nMOV ESI,0x4098e6\nMOV EDX,0x60\nMOV ECX,0x409af8\nCALL 0x004018c0\n'
p193
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 12 af ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 53 b3 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 6c b2 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 e4 af ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 ac af ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 9a af ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 48 99 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 98 40 00\nbe e6 98 40 00\nba 60 00 00 00\nb9 f8 9a 40 00\ne8 84 ae ff ff\n'
p194
S'.text:00000000004067d0\n.text:00000000004067d1\n.text:00000000004067d3\n.text:00000000004067d5\n.text:00000000004067d7\n.text:00000000004067d9\n.text:00000000004067da\n.text:00000000004067de\n.text:00000000004067e1\n.text:00000000004067e4\n.text:00000000004067e7\n.text:00000000004067ea\n.text:00000000004067ee\n.text:00000000004067f4\n.text:00000000004067f9\n.text:00000000004067fe\n.text:0000000000406801\n.text:0000000000406808\n.text:000000000040680d\n.text:0000000000406810\n.text:0000000000406813\n.text:0000000000406820\n.text:0000000000406823\n.text:0000000000406826\n.text:000000000040682b\n.text:000000000040682d\n.text:0000000000406830\n.text:0000000000406835\n.text:0000000000406839\n.text:000000000040683e\n.text:0000000000406840\n.text:0000000000406846\n.text:0000000000406849\n.text:000000000040684c\n.text:000000000040684f\n.text:0000000000406854\n.text:0000000000406858\n.text:000000000040685c\n.text:000000000040685f\n.text:0000000000406861\n.text:0000000000406864\n.text:0000000000406866\n.text:0000000000406868\n.text:000000000040686b\n.text:0000000000406871\n.text:0000000000406876\n.text:0000000000406879\n.text:000000000040687b\n.text:0000000000406880\n.text:0000000000406883\n.text:0000000000406889\n.text:000000000040688c\n.text:000000000040688e\n.text:0000000000406894\n.text:0000000000406897\n.text:000000000040689c\n.text:000000000040689f\n.text:00000000004068a5\n.text:00000000004068ad\n.text:00000000004068af\n.text:00000000004068b1\n.text:00000000004068b3\n.text:00000000004068b6\n.text:00000000004068bc\n.text:00000000004068c0\n.text:00000000004068c4\n.text:00000000004068c6\n.text:00000000004068cc\n.text:00000000004068cf\n.text:00000000004068d4\n.text:00000000004068d7\n.text:00000000004068d9\n.text:00000000004068de\n.text:00000000004068e1\n.text:00000000004068e6\n.text:00000000004068eb\n.text:00000000004068ee\n.text:00000000004068f0\n.text:00000000004068f4\n.text:00000000004068f7\n.text:00000000004068f9\n.text:00000000004068fc\n.text:00000000004068fe\n.text:0000000000406901\n.text:0000000000406903\n.text:0000000000406905\n.text:0000000000406909\n.text:000000000040690c\n.text:0000000000406911\n.text:0000000000406913\n.text:0000000000406918\n.text:000000000040691a\n.text:000000000040691f\n.text:0000000000406924\n.text:0000000000406928\n.text:000000000040692b\n.text:000000000040692e\n.text:0000000000406931\n.text:0000000000406933\n.text:0000000000406935\n.text:000000000040693c\n.text:000000000040693f\n.text:0000000000406944\n.text:0000000000406949\n.text:000000000040694e\n.text:0000000000406952\n.text:0000000000406957\n.text:000000000040695a\n.text:000000000040695d\n.text:0000000000406962\n.text:0000000000406965\n.text:000000000040696a\n.text:000000000040696f\n.text:0000000000406971\n.text:0000000000406974\n.text:0000000000406979\n.text:000000000040697e\n.text:0000000000406980\n.text:0000000000406983\n.text:0000000000406988\n.text:000000000040698d\n.text:000000000040698f\n.text:0000000000406992\n.text:0000000000406997\n.text:0000000000406999\n.text:000000000040699c\n.text:00000000004069a1\n.text:00000000004069a6\n.text:00000000004069a8\n.text:00000000004069ab\n.text:00000000004069b0\n.text:00000000004069b5\n.text:00000000004069b7\n.text:00000000004069ba\n.text:00000000004069bf\n.text:00000000004069c4\n.text:00000000004069c6\n.text:00000000004069c9\n.text:00000000004069ce\n.text:00000000004069d3\n.text:00000000004069d5\n.text:00000000004069d8\n.text:00000000004069dd\n.text:00000000004069df\n.text:00000000004069e2\n.text:00000000004069e7\n.text:00000000004069ec\n.text:00000000004069ee\n.text:00000000004069f2\n.text:00000000004069f6\n.text:00000000004069fa\n.text:00000000004069fc\n.text:00000000004069ff\n.text:0000000000406a03\n.text:0000000000406a06\n.text:0000000000406a0a\n.text:0000000000406a0f\n.text:0000000000406a12\n.text:0000000000406a14\n.text:0000000000406a18\n.text:0000000000406a19\n.text:0000000000406a1b\n.text:0000000000406a1d\n.text:0000000000406a1f\n.text:0000000000406a21\n.text:0000000000406a22\n.text:0000000000406a23\n.text:0000000000406a28\n.text:0000000000406a2d\n.text:0000000000406a32\n.text:0000000000406a37\n'
p195
tp196
sS'initbuffer'
p197
(S'\n__stdcall initbuffer(linebuffer * linebuffer)\n'
p198
V\u000avoid initbuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  *(undefined4 *)&linebuffer->size = 0;\u000a  *(undefined4 *)((long)&linebuffer->size + 4) = 0;\u000a  *(undefined4 *)&linebuffer->length = 0;\u000a  *(undefined4 *)((long)&linebuffer->length + 4) = 0;\u000a  linebuffer->buffer = (char *)0x0;\u000a  return;\u000a}\u000a\u000a
p199
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x10],0x0\nRET\n'
p200
S'0f 57 c0\n0f 11 07\n48 c7 47 10 00 00 00 00\nc3\n'
p201
S'.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030ae\n'
p202
tp203
sS'setlocale'
p204
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060d1d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060d1d0]\n'
p207
S'ff 25 7a b7 20 00\n'
p208
S'.plt:0000000000401a50\n'
p209
tp210
sS'c_toupper'
p211
(S'\n__stdcall c_toupper()\n'
p212
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p214
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p215
S'.text:0000000000406d80\n.text:0000000000406d83\n.text:0000000000406d86\n.text:0000000000406d89\n.text:0000000000406d8c\n'
p216
tp217
sS'fcntl'
p218
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060d078)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060d078]\n'
p221
S'ff 25 d2 b8 20 00\n'
p222
S'.plt:00000000004017a0\n'
p223
tp224
sS'mbsinit'
p225
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060d240)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060d240]\n'
p228
S'ff 25 0a b7 20 00\n'
p229
S'.plt:0000000000401b30\n'
p230
tp231
sS'dcgettext'
p232
(S'\n__stdcall dcgettext()\n'
p233
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060d0b0)();\u000a  return;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060d0b0]\n'
p235
S'ff 25 9a b8 20 00\n'
p236
S'.plt:0000000000401810\n'
p237
tp238
sS'quotearg_free'
p239
(S'\n__stdcall quotearg_free()\n'
p240
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060d280]\nCMP dword ptr [0x0060d288],0x2\nJC 0x0040412a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004016f0\nINC RBX\nMOV EAX,dword ptr [0x0060d288]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404110\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60d390\nCMP RDI,RAX\nJZ 0x00404153\nCALL 0x004016f0\nMOV qword ptr [0x0060d290],0x100\nMOV qword ptr [0x0060d298],0x60d390\nMOV EAX,0x60d290\nCMP R14,RAX\nJZ 0x00404170\nMOV RDI,R14\nCALL 0x004016f0\nMOV qword ptr [0x0060d280],0x60d290\nMOV dword ptr [0x0060d288],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p242
S'41 57\n41 56\n53\n4c 8b 35 84 91 20 00\n83 3d 85 91 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 d8 d5 ff ff\n48 ff c3\n8b 05 67 91 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 90 d3 60 00\n48 39 c7\n74 1b\ne8 b3 d5 ff ff\n48 c7 05 48 91 20 00 00 01 00 00\n48 c7 05 45 91 20 00 90 d3 60 00\nb8 90 d2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 8b d5 ff ff\n48 c7 05 10 91 20 00 90 d2 60 00\nc7 05 0e 91 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p243
S'.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f5\n.text:00000000004040fc\n.text:0000000000404103\n.text:0000000000404105\n.text:0000000000404109\n.text:000000000040410e\n.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404118\n.text:000000000040411b\n.text:0000000000404121\n.text:0000000000404125\n.text:0000000000404128\n.text:000000000040412a\n.text:000000000040412e\n.text:0000000000404133\n.text:0000000000404136\n.text:0000000000404138\n.text:000000000040413d\n.text:0000000000404148\n.text:0000000000404153\n.text:0000000000404158\n.text:000000000040415b\n.text:000000000040415d\n.text:0000000000404160\n.text:0000000000404165\n.text:0000000000404170\n.text:000000000040417a\n.text:000000000040417b\n.text:000000000040417d\n.text:000000000040417f\n'
p244
tp245
sS'quotearg_mem'
p246
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p247
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404350\n'
p249
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p250
S'.text:0000000000404370\n.text:0000000000404373\n.text:0000000000404376\n.text:0000000000404378\n.text:000000000040437b\n.text:000000000040437e\n'
p251
tp252
sS'rotl32'
p253
(S'\n__stdcall rotl32()\n'
p254
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p255
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p256
S'89 f1\nd3 c7\n89 f8\nc3\n'
p257
S'.text:0000000000408360\n.text:0000000000408362\n.text:0000000000408364\n.text:0000000000408366\n'
p258
tp259
sS'deregister_tm_clones'
p260
(S'\n__stdcall deregister_tm_clones()\n'
p261
V\u000a/* WARNING: Removing unreachable block (ram,0x00401bb5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401bbf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p262
S'MOV EAX,0x60d2df\nPUSH RBP\nSUB RAX,0x60d2d8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401bd0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401bd0\nPOP RBP\nMOV EDI,0x60d2d8\nJMP RAX\nPOP RBP\nRET\n'
p263
S'b8 df d2 60 00\n55\n48 2d d8 d2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf d8 d2 60 00\nff e0\n5d\nc3\n'
p264
S'.text:0000000000401ba0\n.text:0000000000401ba5\n.text:0000000000401ba6\n.text:0000000000401bac\n.text:0000000000401bb0\n.text:0000000000401bb3\n.text:0000000000401bb5\n.text:0000000000401bba\n.text:0000000000401bbd\n.text:0000000000401bbf\n.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bd0\n.text:0000000000401bd1\n'
p265
tp266
sS'randint_free'
p267
(S'\n__stdcall randint_free(void * __ptr)\n'
p268
V\u000a/* WARNING: Switch with 1 destination removed at 0x004016f0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid randint_free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p269
S'JMP 0x004016f0\n'
p270
S'e9 db ca ff ff\n'
p271
S'.text:0000000000404c10\n'
p272
tp273
sS'quotearg_custom'
p274
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p275
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p276
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404590\n'
p277
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p278
S'.text:0000000000404610\n.text:0000000000404613\n.text:0000000000404616\n.text:0000000000404619\n.text:000000000040461b\n.text:000000000040461e\n.text:0000000000404621\n.text:0000000000404624\n'
p279
tp280
sS'free'
p281
(S'\n__stdcall free(void * __ptr)\n'
p282
V\u000a/* WARNING: Switch with 1 destination removed at 0x004016f0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x0060d020]\n'
p284
S'ff 25 2a b9 20 00\n'
p285
S'.plt:00000000004016f0\n'
p286
tp287
sS'close'
p288
(S'\n__stdcall close(int __fd)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060d128)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x0060d128]\n'
p291
S'ff 25 22 b8 20 00\n'
p292
S'.plt:0000000000401900\n'
p293
tp294
sS'getenv'
p295
(S'\n__stdcall getenv(char * __name)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060d018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x0060d018]\n'
p298
S'ff 25 32 b9 20 00\n'
p299
S'.plt:00000000004016e0\n'
p300
tp301
sS'fopen'
p302
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060d200)();\u000a  return pFVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060d200]\n'
p305
S'ff 25 4a b7 20 00\n'
p306
S'.plt:0000000000401ab0\n'
p307
tp308
sS'rpl_fseeko'
p309
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p310
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060d1f8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p311
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00406bf8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00406bf8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00406c0a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401aa0\nMOV RDI,RBX\nCALL 0x004019a0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004018a0\nCMP RAX,-0x1\nJZ 0x00406c33\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00406c38\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p312
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 96 ae ff ff\n48 89 df\ne8 8e ad ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 81 ac ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p313
S'.text:0000000000406bd0\n.text:0000000000406bd1\n.text:0000000000406bd3\n.text:0000000000406bd4\n.text:0000000000406bd7\n.text:0000000000406bda\n.text:0000000000406bdd\n.text:0000000000406be1\n.text:0000000000406be5\n.text:0000000000406be7\n.text:0000000000406beb\n.text:0000000000406bef\n.text:0000000000406bf1\n.text:0000000000406bf6\n.text:0000000000406bf8\n.text:0000000000406bfb\n.text:0000000000406bfe\n.text:0000000000406c01\n.text:0000000000406c02\n.text:0000000000406c04\n.text:0000000000406c05\n.text:0000000000406c0a\n.text:0000000000406c0d\n.text:0000000000406c12\n.text:0000000000406c14\n.text:0000000000406c17\n.text:0000000000406c1a\n.text:0000000000406c1f\n.text:0000000000406c23\n.text:0000000000406c25\n.text:0000000000406c28\n.text:0000000000406c2f\n.text:0000000000406c31\n.text:0000000000406c33\n.text:0000000000406c38\n.text:0000000000406c39\n.text:0000000000406c3b\n.text:0000000000406c3c\n'
p314
tp315
sS'quote_n_mem'
p316
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p317
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV ECX,0x60d2a0\nJMP 0x00404190\n'
p319
S'b9 a0 d2 60 00\ne9 36 fb ff ff\n'
p320
S'.text:0000000000404650\n.text:0000000000404655\n'
p321
tp322
sS'xstrdup'
p323
(S'\n__stdcall xstrdup(char * string)\n'
p324
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p325
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401830\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00406370\n'
p326
S'53\n48 89 fb\ne8 87 b4 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p327
S'.text:00000000004063a0\n.text:00000000004063a1\n.text:00000000004063a4\n.text:00000000004063a9\n.text:00000000004063ad\n.text:00000000004063b0\n.text:00000000004063b1\n'
p328
tp329
sS'c_ispunct'
p330
(S'\n__stdcall c_ispunct()\n'
p331
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p332
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00406d12\nMOV AL,0x1\nJMP qword ptr [0x409b48 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p333
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 48 9b 40 00\nc3\n31 c0\nc3\n'
p334
S'.text:0000000000406d00\n.text:0000000000406d03\n.text:0000000000406d06\n.text:0000000000406d08\n.text:0000000000406d0a\n.text:0000000000406d11\n.text:0000000000406d12\n.text:0000000000406d14\n'
p335
tp336
sS'rotr8'
p337
(S'\n__stdcall rotr8()\n'
p338
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p339
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p340
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p341
S'.text:0000000000408400\n.text:0000000000408402\n.text:0000000000408404\n.text:0000000000408406\n.text:000000000040840b\n.text:000000000040840d\n.text:000000000040840f\n.text:0000000000408411\n.text:0000000000408413\n'
p342
tp343
sS'fstat'
p344
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p345
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060d1a8)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401a00\n'
p347
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 21 95 ff ff\n'
p348
S'.text:00000000004084d0\n.text:00000000004084d3\n.text:00000000004084d5\n.text:00000000004084da\n'
p349
tp350
sS'randperm_bound'
p351
(S'\n__stdcall randperm_bound(size_t h, size_t n)\n'
p352
V\u000asize_t randperm_bound(size_t h,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = ceil_lg(n);\u000a  return sVar1 * h + 7 >> 3;\u000a}\u000a\u000a
p353
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,RSI\nCALL 0x00404c80\nIMUL RAX,RBX\nADD RAX,0x7\nSHR RAX,0x3\nPOP RBX\nRET\n'
p354
S'53\n48 89 fb\n48 89 f7\ne8 14 00 00 00\n48 0f af c3\n48 83 c0 07\n48 c1 e8 03\n5b\nc3\n'
p355
S'.text:0000000000404c60\n.text:0000000000404c61\n.text:0000000000404c64\n.text:0000000000404c67\n.text:0000000000404c6c\n.text:0000000000404c70\n.text:0000000000404c74\n.text:0000000000404c78\n.text:0000000000404c79\n'
p356
tp357
sS'is_prime'
p358
(S'\n__stdcall is_prime(size_t candidate)\n'
p359
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p360
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00407e15\nTEST CL,CL\nJNZ 0x00407e15\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00407e15\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00407df0\nRET\n'
p361
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p362
S'.text:0000000000407db0\n.text:0000000000407db3\n.text:0000000000407dbd\n.text:0000000000407dc0\n.text:0000000000407dc3\n.text:0000000000407dc6\n.text:0000000000407dca\n.text:0000000000407dcd\n.text:0000000000407dd0\n.text:0000000000407dd3\n.text:0000000000407dd7\n.text:0000000000407dd9\n.text:0000000000407ddb\n.text:0000000000407ddd\n.text:0000000000407de2\n.text:0000000000407de7\n.text:0000000000407dec\n.text:0000000000407df0\n.text:0000000000407df3\n.text:0000000000407df5\n.text:0000000000407df8\n.text:0000000000407dfb\n.text:0000000000407dfe\n.text:0000000000407e01\n.text:0000000000407e04\n.text:0000000000407e07\n.text:0000000000407e09\n.text:0000000000407e0d\n.text:0000000000407e11\n.text:0000000000407e13\n.text:0000000000407e15\n'
p363
tp364
sS'fscanf'
p365
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060d120)();\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060d120]\n'
p368
S'ff 25 2a b8 20 00\n'
p369
S'.plt:00000000004018f0\n'
p370
tp371
sS'memcpy'
p372
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060d170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060d170]\n'
p375
S'ff 25 da b7 20 00\n'
p376
S'.plt:0000000000401990\n'
p377
tp378
sS'close_stdout_set_ignore_EPIPE'
p379
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p380
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p381
S'MOV byte ptr [0x0060d338],DIL\nRET\n'
p382
S'40 88 3d 01 a5 20 00\nc3\n'
p383
S'.text:0000000000402e30\n.text:0000000000402e37\n'
p384
tp385
sS'hash_get_n_buckets_used'
p386
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p387
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p388
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p389
S'48 8b 47 18\nc3\n'
p390
S'.text:0000000000406ea0\n.text:0000000000406ea4\n'
p391
tp392
sS'iswprint'
p393
(S'\n__stdcall iswprint(wint_t __wc)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060d248)();\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x0060d248]\n'
p396
S'ff 25 02 b7 20 00\n'
p397
S'.plt:0000000000401b40\n'
p398
tp399
sS'isaac_refill'
p400
(S'\n__stdcall isaac_refill(isaac_state * s, isaac_word * result)\n'
p401
V\u000avoid isaac_refill(isaac_state *s,isaac_word *result)\u000a\u000a{\u000a  isaac_state *piVar1;\u000a  isaac_word x;\u000a  isaac_state *piVar2;\u000a  isaac_word iVar3;\u000a  ulong uVar4;\u000a  isaac_word iVar5;\u000a  ulong a;\u000a  isaac_word *piVar6;\u000a  isaac_word *piVar7;\u000a  ulong a_00;\u000a  isaac_word *local_48;\u000a  \u000a  uVar4 = s->a;\u000a  x = s->c + 1;\u000a  iVar5 = s->b + x;\u000a  s->c = x;\u000a  piVar1 = (isaac_state *)(s->m + 0x80);\u000a  piVar2 = (isaac_state *)(s->m + 4);\u000a  if ((isaac_state *)(s->m + 4) < piVar1) {\u000a    piVar2 = piVar1;\u000a  }\u000a  a_00 = (long)piVar2->m + ~(ulong)s;\u000a  local_48 = (isaac_word *)((long)result + (a_00 & 0xffffffffffffffe0) + 0x20);\u000a  piVar2 = s;\u000a  do {\u000a    a = ~(uVar4 << 0x15 ^ uVar4) + piVar2->m[0x80];\u000a    x = piVar2->m[0];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a;\u000a    piVar2->m[0] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *result = iVar5;\u000a    x = just(a);\u000a    a = (x >> 5 ^ a) + piVar2->m[0x81];\u000a    x = piVar2->m[1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[1] = iVar5;\u000a    a = (a * 0x1000 ^ a) + piVar2->m[0x82];\u000a    x = piVar2->m[2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[2] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[2] = iVar5;\u000a    x = just(a);\u000a    uVar4 = (x >> 0x21 ^ a) + piVar2->m[0x83];\u000a    x = piVar2->m[3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a = iVar5 + uVar4 + iVar3;\u000a    piVar2->m[3] = a;\u000a    iVar5 = ind((isaac_word *)s,a >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[3] = iVar5;\u000a    piVar2 = (isaac_state *)(piVar2->m + 4);\u000a    result = result + 4;\u000a  } while (piVar2 < piVar1);\u000a  piVar6 = (isaac_word *)((long)s->m + (a_00 & 0xffffffffffffffe0) + 0x38);\u000a  do {\u000a    a_00 = ~(uVar4 << 0x15 ^ uVar4) + piVar6[-0x83];\u000a    x = piVar6[-3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a_00;\u000a    piVar6[-3] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *local_48 = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 5 ^ a_00) + piVar6[-0x82];\u000a    x = piVar6[-2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    piVar6[-2] = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[1] = iVar5;\u000a    a_00 = (uVar4 * 0x1000 ^ uVar4) + piVar6[-0x81];\u000a    x = piVar6[-1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a_00 + iVar3;\u000a    piVar6[-1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[2] = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 0x21 ^ a_00) + piVar6[-0x80];\u000a    x = *piVar6;\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    *piVar6 = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[3] = iVar5;\u000a    piVar7 = piVar6 + 1;\u000a    local_48 = local_48 + 4;\u000a    piVar6 = piVar6 + 4;\u000a  } while (piVar7 < &s->a);\u000a  s->a = uVar4;\u000a  s->b = iVar5;\u000a  return;\u000a}\u000a\u000a
p402
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBP,RSI\nMOV R14,RDI\nMOV RBX,qword ptr [0x800 + R14]\nMOV RAX,qword ptr [0x810 + R14]\nINC RAX\nMOV R12,qword ptr [0x808 + R14]\nADD R12,RAX\nMOV qword ptr [0x810 + R14],RAX\nLEA RCX,[0x400 + R14]\nLEA RAX,[R14 + 0x20]\nCMP RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nCMOVA RAX,RCX\nMOV RCX,R14\nNOT RCX\nADD RCX,RAX\nSHR RCX,0x5\nLEA RAX,[RCX*0x4]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RCX,0x5\nLEA RAX,[RBP + RCX*0x1 + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,qword ptr [RSP + 0x8]\nNOP\nMOV qword ptr [RSP],RBP\nMOV R13,RBX\nSHL R13,0x15\nXOR R13,RBX\nNOT R13\nADD R13,qword ptr [0x400 + R14]\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004057d0\nADD RAX,R12\nADD RAX,R13\nMOV qword ptr [R14],RAX\nSHR RAX,0x8\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x004057d0\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x004057e0\nMOV RBX,RAX\nMOV qword ptr [RBP],RBX\nMOV RDI,R13\nCALL 0x004057e0\nMOV RBP,RAX\nSHR RBP,0x5\nXOR RBP,R13\nADD RBP,qword ptr [0x408 + R14]\nMOV R12,qword ptr [R14 + 0x8]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x004057d0\nADD RBX,RBP\nADD RBX,RAX\nMOV qword ptr [R14 + 0x8],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004057d0\nADD R12,RAX\nMOV RDI,R12\nCALL 0x004057e0\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x8],RBX\nMOV R12,RBP\nSHL R12,0xc\nXOR R12,RBP\nADD R12,qword ptr [0x410 + R14]\nMOV RBP,qword ptr [R14 + 0x10]\nMOV RDI,R15\nMOV RSI,RBP\nCALL 0x004057d0\nADD RBX,R12\nADD RBX,RAX\nMOV qword ptr [R14 + 0x10],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004057d0\nADD RBP,RAX\nMOV RDI,RBP\nCALL 0x004057e0\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x10],RBP\nMOV RDI,R12\nCALL 0x004057e0\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R12\nADD RBX,qword ptr [0x418 + R14]\nMOV R12,qword ptr [R14 + 0x18]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x004057d0\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R14 + 0x18],RBP\nSHR RBP,0x8\nMOV RDI,R15\nMOV RSI,RBP\nMOV RBP,qword ptr [RSP]\nCALL 0x004057d0\nADD R12,RAX\nMOV RDI,R12\nCALL 0x004057e0\nMOV R12,RAX\nMOV qword ptr [RBP + 0x18],R12\nADD R14,0x20\nADD RBP,0x20\nCMP R14,qword ptr [RSP + 0x20]\nJC 0x004054b0\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[0x800 + RCX]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nLEA R13,[RCX + RAX*0x8 + 0x38]\nMOV R14,qword ptr [RSP + 0x8]\nNOP\nMOV R15,RBX\nSHL R15,0x15\nXOR R15,RBX\nNOT R15\nADD R15,qword ptr [-0x418 + R13]\nMOV RBX,qword ptr [R13 + -0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004057d0\nADD RAX,R12\nADD RAX,R15\nMOV qword ptr [R13 + -0x18],RAX\nSHR RAX,0x8\nMOV RDI,R14\nMOV RSI,RAX\nCALL 0x004057d0\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x004057e0\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],RBP\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x004057e0\nMOV RBX,RAX\nSHR RBX,0x5\nXOR RBX,R15\nADD RBX,qword ptr [-0x410 + R13]\nMOV R15,qword ptr [R13 + -0x10]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004057d0\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13 + -0x10],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x004057d0\nADD R15,RAX\nMOV RDI,R15\nCALL 0x004057e0\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x8],RBP\nMOV qword ptr [RSP + 0x10],R12\nMOV R15,RBX\nSHL R15,0xc\nXOR R15,RBX\nADD R15,qword ptr [-0x408 + R13]\nMOV RBX,qword ptr [R13 + -0x8]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004057d0\nADD RBP,R15\nADD RBP,RAX\nMOV qword ptr [R13 + -0x8],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x004057d0\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x004057e0\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x10],RBP\nMOV RDI,R15\nCALL 0x004057e0\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R15\nADD RBX,qword ptr [-0x400 + R13]\nMOV R15,qword ptr [R13]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004057d0\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x004057d0\nADD R15,RAX\nMOV RDI,R15\nCALL 0x004057e0\nMOV R12,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + 0x18],R12\nLEA RAX,[R13 + 0x20]\nADD R13,0x8\nADD RCX,0x20\nMOV qword ptr [RSP + 0x10],RCX\nCMP R13,qword ptr [RSP]\nMOV R13,RAX\nJC 0x00405630\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x800 + RAX],RBX\nMOV qword ptr [0x808 + RAX],R12\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p403
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 f5\n49 89 fe\n49 8b 9e 00 08 00 00\n49 8b 86 10 08 00 00\n48 ff c0\n4d 8b a6 08 08 00 00\n49 01 c4\n49 89 86 10 08 00 00\n49 8d 8e 00 04 00 00\n49 8d 46 20\n48 39 c1\n48 89 4c 24 20\n48 0f 47 c1\n4c 89 f1\n48 f7 d1\n48 01 c1\n48 c1 e9 05\n48 8d 04 8d 00 00 00 00\n48 89 44 24 18\n48 c1 e1 05\n48 8d 44 0d 20\n48 89 44 24 10\n4c 89 74 24 08\n4c 8b 7c 24 08\n90\n48 89 2c 24\n49 89 dd\n49 c1 e5 15\n49 31 dd\n49 f7 d5\n4d 03 ae 00 04 00 00\n49 8b 1e\n4c 89 ff\n48 89 de\ne8 fa 02 00 00\n4c 01 e0\n4c 01 e8\n49 89 06\n48 c1 e8 08\n4c 89 ff\n48 89 c6\ne8 e2 02 00 00\n48 01 c3\n48 89 df\ne8 e7 02 00 00\n48 89 c3\n48 89 5d 00\n4c 89 ef\ne8 d8 02 00 00\n48 89 c5\n48 c1 ed 05\n4c 31 ed\n49 03 ae 08 04 00 00\n4d 8b 66 08\n4c 89 ff\n4c 89 e6\ne8 a8 02 00 00\n48 01 eb\n48 01 c3\n49 89 5e 08\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 8f 02 00 00\n49 01 c4\n4c 89 e7\ne8 94 02 00 00\n48 89 c3\n48 8b 04 24\n48 89 58 08\n49 89 ec\n49 c1 e4 0c\n49 31 ec\n4d 03 a6 10 04 00 00\n49 8b 6e 10\n4c 89 ff\n48 89 ee\ne8 59 02 00 00\n4c 01 e3\n48 01 c3\n49 89 5e 10\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 40 02 00 00\n48 01 c5\n48 89 ef\ne8 45 02 00 00\n48 89 c5\n48 8b 04 24\n48 89 68 10\n4c 89 e7\ne8 32 02 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 e3\n49 03 9e 18 04 00 00\n4d 8b 66 18\n4c 89 ff\n4c 89 e6\ne8 02 02 00 00\n48 01 dd\n48 01 c5\n49 89 6e 18\n48 c1 ed 08\n4c 89 ff\n48 89 ee\n48 8b 2c 24\ne8 e5 01 00 00\n49 01 c4\n4c 89 e7\ne8 ea 01 00 00\n49 89 c4\n4c 89 65 18\n49 83 c6 20\n48 83 c5 20\n4c 3b 74 24 20\n0f 82 a0 fe ff ff\n48 8b 4c 24 08\n48 8d 81 00 08 00 00\n48 89 04 24\n48 8b 44 24 18\n4c 8d 6c c1 38\n4c 8b 74 24 08\n90\n49 89 df\n49 c1 e7 15\n49 31 df\n49 f7 d7\n4d 03 bd e8 fb ff ff\n49 8b 5d e8\n4c 89 f7\n48 89 de\ne8 7d 01 00 00\n4c 01 e0\n4c 01 f8\n49 89 45 e8\n48 c1 e8 08\n4c 89 f7\n48 89 c6\ne8 64 01 00 00\n48 01 c3\n48 89 df\ne8 69 01 00 00\n48 89 c5\n48 8b 44 24 10\n48 89 28\n49 89 c4\n4c 89 ff\ne8 53 01 00 00\n48 89 c3\n48 c1 eb 05\n4c 31 fb\n49 03 9d f0 fb ff ff\n4d 8b 7d f0\n4c 89 f7\n4c 89 fe\ne8 23 01 00 00\n48 01 dd\n48 01 c5\n49 89 6d f0\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 0a 01 00 00\n49 01 c7\n4c 89 ff\ne8 0f 01 00 00\n48 89 c5\n49 89 6c 24 08\n4c 89 64 24 10\n49 89 df\n49 c1 e7 0c\n49 31 df\n4d 03 bd f8 fb ff ff\n49 8b 5d f8\n4c 89 f7\n48 89 de\ne8 d2 00 00 00\n4c 01 fd\n48 01 c5\n49 89 6d f8\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 b9 00 00 00\n48 01 c3\n48 89 df\ne8 be 00 00 00\n48 89 c5\n49 89 6c 24 10\n4c 89 ff\ne8 ae 00 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 fb\n49 03 9d 00 fc ff ff\n4d 8b 7d 00\n4c 89 f7\n4c 89 fe\ne8 7e 00 00 00\n48 01 dd\n48 01 c5\n49 89 6d 00\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 65 00 00 00\n49 01 c7\n4c 89 ff\ne8 6a 00 00 00\n49 89 c4\n48 8b 4c 24 10\n4c 89 61 18\n49 8d 45 20\n49 83 c5 08\n48 83 c1 20\n48 89 4c 24 10\n4c 3b 2c 24\n49 89 c5\n0f 82 90 fe ff ff\n48 8b 44 24 08\n48 89 98 00 08 00 00\n4c 89 a0 08 08 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p404
S'.text:0000000000405430\n.text:0000000000405431\n.text:0000000000405433\n.text:0000000000405435\n.text:0000000000405437\n.text:0000000000405439\n.text:000000000040543a\n.text:000000000040543e\n.text:0000000000405441\n.text:0000000000405444\n.text:000000000040544b\n.text:0000000000405452\n.text:0000000000405455\n.text:000000000040545c\n.text:000000000040545f\n.text:0000000000405466\n.text:000000000040546d\n.text:0000000000405471\n.text:0000000000405474\n.text:0000000000405479\n.text:000000000040547d\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n.text:000000000040548a\n.text:0000000000405492\n.text:0000000000405497\n.text:000000000040549b\n.text:00000000004054a0\n.text:00000000004054a5\n.text:00000000004054aa\n.text:00000000004054af\n.text:00000000004054b0\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c1\n.text:00000000004054c8\n.text:00000000004054cb\n.text:00000000004054ce\n.text:00000000004054d1\n.text:00000000004054d6\n.text:00000000004054d9\n.text:00000000004054dc\n.text:00000000004054df\n.text:00000000004054e3\n.text:00000000004054e6\n.text:00000000004054e9\n.text:00000000004054ee\n.text:00000000004054f1\n.text:00000000004054f4\n.text:00000000004054f9\n.text:00000000004054fc\n.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405508\n.text:000000000040550b\n.text:000000000040550f\n.text:0000000000405512\n.text:0000000000405519\n.text:000000000040551d\n.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405528\n.text:000000000040552b\n.text:000000000040552e\n.text:0000000000405532\n.text:0000000000405536\n.text:0000000000405539\n.text:000000000040553c\n.text:0000000000405541\n.text:0000000000405544\n.text:0000000000405547\n.text:000000000040554c\n.text:000000000040554f\n.text:0000000000405553\n.text:0000000000405557\n.text:000000000040555a\n.text:000000000040555e\n.text:0000000000405561\n.text:0000000000405568\n.text:000000000040556c\n.text:000000000040556f\n.text:0000000000405572\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557d\n.text:0000000000405581\n.text:0000000000405585\n.text:0000000000405588\n.text:000000000040558b\n.text:0000000000405590\n.text:0000000000405593\n.text:0000000000405596\n.text:000000000040559b\n.text:000000000040559e\n.text:00000000004055a2\n.text:00000000004055a6\n.text:00000000004055a9\n.text:00000000004055ae\n.text:00000000004055b1\n.text:00000000004055b5\n.text:00000000004055b8\n.text:00000000004055bf\n.text:00000000004055c3\n.text:00000000004055c6\n.text:00000000004055c9\n.text:00000000004055ce\n.text:00000000004055d1\n.text:00000000004055d4\n.text:00000000004055d8\n.text:00000000004055dc\n.text:00000000004055df\n.text:00000000004055e2\n.text:00000000004055e6\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f1\n.text:00000000004055f6\n.text:00000000004055f9\n.text:00000000004055fd\n.text:0000000000405601\n.text:0000000000405605\n.text:000000000040560a\n.text:0000000000405610\n.text:0000000000405615\n.text:000000000040561c\n.text:0000000000405620\n.text:0000000000405625\n.text:000000000040562a\n.text:000000000040562f\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405637\n.text:000000000040563a\n.text:000000000040563d\n.text:0000000000405644\n.text:0000000000405648\n.text:000000000040564b\n.text:000000000040564e\n.text:0000000000405653\n.text:0000000000405656\n.text:0000000000405659\n.text:000000000040565d\n.text:0000000000405661\n.text:0000000000405664\n.text:0000000000405667\n.text:000000000040566c\n.text:000000000040566f\n.text:0000000000405672\n.text:0000000000405677\n.text:000000000040567a\n.text:000000000040567f\n.text:0000000000405682\n.text:0000000000405685\n.text:0000000000405688\n.text:000000000040568d\n.text:0000000000405690\n.text:0000000000405694\n.text:0000000000405697\n.text:000000000040569e\n.text:00000000004056a2\n.text:00000000004056a5\n.text:00000000004056a8\n.text:00000000004056ad\n.text:00000000004056b0\n.text:00000000004056b3\n.text:00000000004056b7\n.text:00000000004056bb\n.text:00000000004056be\n.text:00000000004056c1\n.text:00000000004056c6\n.text:00000000004056c9\n.text:00000000004056cc\n.text:00000000004056d1\n.text:00000000004056d4\n.text:00000000004056d9\n.text:00000000004056de\n.text:00000000004056e1\n.text:00000000004056e5\n.text:00000000004056e8\n.text:00000000004056ef\n.text:00000000004056f3\n.text:00000000004056f6\n.text:00000000004056f9\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405704\n.text:0000000000405708\n.text:000000000040570c\n.text:000000000040570f\n.text:0000000000405712\n.text:0000000000405717\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405722\n.text:0000000000405725\n.text:000000000040572a\n.text:000000000040572d\n.text:0000000000405732\n.text:0000000000405735\n.text:0000000000405739\n.text:000000000040573c\n.text:0000000000405743\n.text:0000000000405747\n.text:000000000040574a\n.text:000000000040574d\n.text:0000000000405752\n.text:0000000000405755\n.text:0000000000405758\n.text:000000000040575c\n.text:0000000000405760\n.text:0000000000405763\n.text:0000000000405766\n.text:000000000040576b\n.text:000000000040576e\n.text:0000000000405771\n.text:0000000000405776\n.text:0000000000405779\n.text:000000000040577e\n.text:0000000000405782\n.text:0000000000405786\n.text:000000000040578a\n.text:000000000040578e\n.text:0000000000405793\n.text:0000000000405797\n.text:000000000040579a\n.text:00000000004057a0\n.text:00000000004057a5\n.text:00000000004057ac\n.text:00000000004057b3\n.text:00000000004057b7\n.text:00000000004057b8\n.text:00000000004057ba\n.text:00000000004057bc\n.text:00000000004057be\n.text:00000000004057c0\n.text:00000000004057c1\n'
p405
tp406
sS'c_isspace'
p407
(S'\n__stdcall c_isspace()\n'
p408
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p409
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00406d35\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p410
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p411
S'.text:0000000000406d20\n.text:0000000000406d23\n.text:0000000000406d26\n.text:0000000000406d28\n.text:0000000000406d2d\n.text:0000000000406d2f\n.text:0000000000406d31\n.text:0000000000406d34\n.text:0000000000406d35\n.text:0000000000406d37\n'
p412
tp413
sS'open'
p414
(S'\n__stdcall open(char * __file, int __oflag)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060d1f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060d1f0]\n'
p417
S'ff 25 5a b7 20 00\n'
p418
S'.plt:0000000000401a90\n'
p419
tp420
sS'quotearg_n_custom_mem'
p421
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p422
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060d380]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060d370]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d360]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d350]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403300\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404190\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p424
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 c7 8d 20 00\n48 89 44 24 30\n0f 10 05 ab 8d 20 00\n0f 29 44 24 20\n0f 10 05 8f 8d 20 00\n0f 29 44 24 10\n0f 10 05 73 8d 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p425
S'.text:00000000004045a0\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a5\n.text:00000000004045a6\n.text:00000000004045aa\n.text:00000000004045ad\n.text:00000000004045b0\n.text:00000000004045b2\n.text:00000000004045b9\n.text:00000000004045be\n.text:00000000004045c5\n.text:00000000004045ca\n.text:00000000004045d1\n.text:00000000004045d6\n.text:00000000004045dd\n.text:00000000004045e1\n.text:00000000004045e4\n.text:00000000004045e7\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045f1\n.text:00000000004045f4\n.text:00000000004045f7\n.text:00000000004045fc\n.text:0000000000404600\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404605\n.text:0000000000404606\n'
p426
tp427
sS'rotl16'
p428
(S'\n__stdcall rotl16()\n'
p429
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p430
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p431
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p432
S'.text:00000000004083a0\n.text:00000000004083a2\n.text:00000000004083a4\n.text:00000000004083a6\n.text:00000000004083ab\n.text:00000000004083ad\n.text:00000000004083af\n.text:00000000004083b1\n.text:00000000004083b3\n'
p433
tp434
sS'_init'
p435
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p436
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060cff8;\u000a  if (PTR___gmon_start___0060cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060cff8]\nTEST RAX,RAX\nJZ 0x004016c2\nCALL RAX\nADD RSP,0x8\nRET\n'
p438
S'48 83 ec 08\n48 8b 05 3d b9 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p439
S'.init:00000000004016b0\n.init:00000000004016b4\n.init:00000000004016bb\n.init:00000000004016be\n.init:00000000004016c0\n.init:00000000004016c2\n.init:00000000004016c6\n'
p440
tp441
sS'set_quoting_flags'
p442
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p443
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'TEST RDI,RDI\nMOV ECX,0x60d350\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p445
S'48 85 ff\nb9 50 d3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p446
S'.text:00000000004032e0\n.text:00000000004032e3\n.text:00000000004032e8\n.text:00000000004032ec\n.text:00000000004032ef\n.text:00000000004032f2\n'
p447
tp448
sS'realloc'
p449
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060d1c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060d1c0]\n'
p452
S'ff 25 8a b7 20 00\n'
p453
S'.plt:0000000000401a30\n'
p454
tp455
sS'__fprintf_chk'
p456
(S'\n__stdcall __fprintf_chk()\n'
p457
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060d238)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060d238]\n'
p459
S'ff 25 12 b7 20 00\n'
p460
S'.plt:0000000000401b20\n'
p461
tp462
sS'get_charset_aliases'
p463
(S'\n__stdcall get_charset_aliases()\n'
p464
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004080e4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004080e4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004080e4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004080e4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004080e4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004080e4_caseD_9;\u000a      case -1:\u000a        goto switchD_004080e4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040813d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00408143:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004080e4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408143;\u000a  }\u000a  goto LAB_0040813d;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060d490]\nTEST R15,R15\nJNZ 0x00408152\nMOV EDI,0x40a04c\nCALL 0x004016e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407f08\nCMP byte ptr [RBX],0x0\nJNZ 0x00407f0d\nMOV EBX,0x40a05c\nMOV RDI,RBX\nCALL 0x00401830\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407f27\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00407f29\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004019c0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00407f7d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401990\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00407f88\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00407fa5\nMOV R15D,0x4094c9\nJMP 0x0040814b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401a90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040813d\nMOV ESI,0x409387\nMOV EDI,EBP\nCALL 0x00401a40\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408104\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004080d0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401740\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401740\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004080d0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004019f0\nMOV ESI,0x40a06b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004018f0\nCMP EAX,0x2\nJL 0x00408124\nMOV RDI,R12\nCALL 0x00401830\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401830\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004080ad\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401a30\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00407ff4\nJMP 0x0040810d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004019c0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00407ff4\nJMP 0x0040810d\nMOV RDI,RBX\nCALL 0x00401780\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408037\nJMP qword ptr [0x409f10 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401780\nCMP EAX,-0x1\nJZ 0x00408124\nCMP EAX,0xa\nJNZ 0x004080f0\nJMP 0x004080d0\nMOV EDI,EBP\nCALL 0x00401900\nJMP 0x0040813d\nMOV RDI,R15\nCALL 0x004016f0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00406b00\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040813d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408143\nMOV R15D,0x4094c9\nMOV RDI,R13\nCALL 0x004016f0\nMOV qword ptr [0x0060d490],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p466
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d a8 55 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 4c a0 40 00\ne8 e5 97 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 5c a0 40 00\n48 89 df\ne8 1b 99 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 89 9a ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 43 9a ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf c9 94 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 dc 9a ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 87 93 40 00\n89 ef\ne8 76 9a ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 2b 97 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 1b 97 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 af 99 ff ff\nbe 6b a0 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 9a 98 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 c9 97 ff ff\n49 89 c4\n48 89 ef\ne8 be 97 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 96 99 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 05 99 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 a8 96 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 10 9f 40 00\n48 89 df\ne8 88 96 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 f5 97 ff ff\neb 30\n4c 89 ff\ne8 db 95 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 d4 e9 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf c9 94 40 00\n4c 89 ef\ne8 a5 95 ff ff\n4c 89 3d 3e 53 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p467
S'.text:0000000000407ed0\n.text:0000000000407ed1\n.text:0000000000407ed3\n.text:0000000000407ed5\n.text:0000000000407ed7\n.text:0000000000407ed9\n.text:0000000000407eda\n.text:0000000000407ee1\n.text:0000000000407ee8\n.text:0000000000407eeb\n.text:0000000000407ef1\n.text:0000000000407ef6\n.text:0000000000407efb\n.text:0000000000407efe\n.text:0000000000407f01\n.text:0000000000407f03\n.text:0000000000407f06\n.text:0000000000407f08\n.text:0000000000407f0d\n.text:0000000000407f10\n.text:0000000000407f15\n.text:0000000000407f18\n.text:0000000000407f1b\n.text:0000000000407f1d\n.text:0000000000407f22\n.text:0000000000407f25\n.text:0000000000407f27\n.text:0000000000407f29\n.text:0000000000407f2d\n.text:0000000000407f32\n.text:0000000000407f37\n.text:0000000000407f3a\n.text:0000000000407f3d\n.text:0000000000407f3f\n.text:0000000000407f42\n.text:0000000000407f45\n.text:0000000000407f48\n.text:0000000000407f4d\n.text:0000000000407f50\n.text:0000000000407f53\n.text:0000000000407f56\n.text:0000000000407f58\n.text:0000000000407f5e\n.text:0000000000407f68\n.text:0000000000407f6d\n.text:0000000000407f77\n.text:0000000000407f7b\n.text:0000000000407f7d\n.text:0000000000407f83\n.text:0000000000407f88\n.text:0000000000407f92\n.text:0000000000407f97\n.text:0000000000407fa1\n.text:0000000000407fa5\n.text:0000000000407faa\n.text:0000000000407fac\n.text:0000000000407faf\n.text:0000000000407fb4\n.text:0000000000407fb6\n.text:0000000000407fb8\n.text:0000000000407fbe\n.text:0000000000407fc3\n.text:0000000000407fc5\n.text:0000000000407fca\n.text:0000000000407fcd\n.text:0000000000407fd0\n.text:0000000000407fd6\n.text:0000000000407fdb\n.text:0000000000407fe0\n.text:0000000000407fe2\n.text:0000000000407fe7\n.text:0000000000407fea\n.text:0000000000407fef\n.text:0000000000407ff4\n.text:0000000000407ff9\n.text:0000000000407ffc\n.text:0000000000407fff\n.text:0000000000408002\n.text:0000000000408005\n.text:0000000000408008\n.text:000000000040800d\n.text:0000000000408010\n.text:0000000000408015\n.text:0000000000408018\n.text:000000000040801d\n.text:0000000000408020\n.text:0000000000408025\n.text:000000000040802a\n.text:000000000040802d\n.text:0000000000408032\n.text:0000000000408037\n.text:0000000000408039\n.text:000000000040803c\n.text:0000000000408041\n.text:0000000000408046\n.text:0000000000408048\n.text:000000000040804b\n.text:000000000040804e\n.text:0000000000408051\n.text:0000000000408056\n.text:0000000000408059\n.text:000000000040805f\n.text:0000000000408062\n.text:0000000000408067\n.text:000000000040806a\n.text:000000000040806d\n.text:0000000000408072\n.text:0000000000408075\n.text:000000000040807a\n.text:000000000040807f\n.text:0000000000408082\n.text:0000000000408084\n.text:0000000000408088\n.text:000000000040808d\n.text:0000000000408092\n.text:0000000000408095\n.text:000000000040809a\n.text:000000000040809d\n.text:00000000004080a2\n.text:00000000004080a5\n.text:00000000004080ab\n.text:00000000004080ad\n.text:00000000004080b2\n.text:00000000004080b6\n.text:00000000004080bb\n.text:00000000004080be\n.text:00000000004080c1\n.text:00000000004080c7\n.text:00000000004080d0\n.text:00000000004080d3\n.text:00000000004080d8\n.text:00000000004080db\n.text:00000000004080de\n.text:00000000004080e4\n.text:00000000004080f0\n.text:00000000004080f3\n.text:00000000004080f8\n.text:00000000004080fb\n.text:00000000004080fd\n.text:0000000000408100\n.text:0000000000408102\n.text:0000000000408104\n.text:0000000000408106\n.text:000000000040810b\n.text:000000000040810d\n.text:0000000000408110\n.text:0000000000408115\n.text:0000000000408117\n.text:000000000040811c\n.text:000000000040811f\n.text:0000000000408124\n.text:0000000000408127\n.text:000000000040812c\n.text:0000000000408131\n.text:0000000000408134\n.text:0000000000408136\n.text:000000000040813b\n.text:000000000040813d\n.text:0000000000408143\n.text:0000000000408146\n.text:000000000040814b\n.text:0000000000408152\n.text:0000000000408155\n.text:000000000040815c\n.text:000000000040815d\n.text:000000000040815f\n.text:0000000000408161\n.text:0000000000408163\n.text:0000000000408165\n.text:0000000000408166\n'
p468
tp469
sS'nl_langinfo'
p470
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060d198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060d198]\n'
p473
S'ff 25 b2 b7 20 00\n'
p474
S'.plt:00000000004019e0\n'
p475
tp476
sS'x2realloc'
p477
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p478
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'MOV EDX,0x1\nJMP 0x004062a0\n'
p480
S'ba 01 00 00 00\neb 89\n'
p481
S'.text:0000000000406310\n.text:0000000000406315\n'
p482
tp483
sS'strlen'
p484
(S'\n__stdcall strlen(char * __s)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060d0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060d0c0]\n'
p487
S'ff 25 8a b8 20 00\n'
p488
S'.plt:0000000000401830\n'
p489
tp490
sS'memcmp'
p491
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060d148)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060d148]\n'
p494
S'ff 25 02 b8 20 00\n'
p495
S'.plt:0000000000401940\n'
p496
tp497
sS'hash_free'
p498
(S'\n__stdcall hash_free(Hash_table * table)\n'
p499
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p500
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x004075f2\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x004075f2\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x004075ca\nJMP 0x004075f2\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x004075f2\nCMP qword ptr [R14],0x0\nJZ 0x004075c0\nTEST R14,R14\nJZ 0x004075c0\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x004075e0\nJMP 0x004075c0\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040760a\nJMP 0x00407633\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00407633\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00407600\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016f0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00407620\nJMP 0x00407600\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00407651\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016f0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00407640\nMOV RDI,qword ptr [R15]\nCALL 0x004016f0\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004016f0\n'
p501
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 c7 a0 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 a7 a0 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 97 a0 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 8a a0 ff ff\n'
p502
S'.text:0000000000407590\n.text:0000000000407592\n.text:0000000000407594\n.text:0000000000407595\n.text:0000000000407598\n.text:000000000040759d\n.text:000000000040759f\n.text:00000000004075a4\n.text:00000000004075a6\n.text:00000000004075a9\n.text:00000000004075ad\n.text:00000000004075af\n.text:00000000004075c0\n.text:00000000004075c4\n.text:00000000004075c8\n.text:00000000004075ca\n.text:00000000004075ce\n.text:00000000004075d0\n.text:00000000004075d3\n.text:00000000004075d5\n.text:00000000004075d8\n.text:00000000004075e0\n.text:00000000004075e3\n.text:00000000004075e7\n.text:00000000004075eb\n.text:00000000004075ee\n.text:00000000004075f0\n.text:00000000004075f2\n.text:00000000004075f5\n.text:00000000004075f9\n.text:00000000004075fb\n.text:0000000000407600\n.text:0000000000407604\n.text:0000000000407608\n.text:000000000040760a\n.text:000000000040760e\n.text:0000000000407611\n.text:0000000000407613\n.text:0000000000407620\n.text:0000000000407624\n.text:0000000000407629\n.text:000000000040762c\n.text:000000000040762f\n.text:0000000000407631\n.text:0000000000407633\n.text:0000000000407637\n.text:000000000040763a\n.text:000000000040763c\n.text:0000000000407640\n.text:0000000000407644\n.text:0000000000407649\n.text:000000000040764c\n.text:000000000040764f\n.text:0000000000407651\n.text:0000000000407654\n.text:0000000000407659\n.text:000000000040765c\n.text:000000000040765d\n.text:000000000040765f\n.text:0000000000407661\n'
p503
tp504
sS'quotearg_n_style_mem'
p505
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p506
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p507
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004043c0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404190\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p508
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p509
S'.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404426\n.text:000000000040442a\n.text:000000000040442d\n.text:0000000000404430\n.text:0000000000404432\n.text:0000000000404435\n.text:0000000000404438\n.text:000000000040443d\n.text:000000000040443f\n.text:0000000000404442\n.text:0000000000404445\n.text:0000000000404448\n.text:000000000040444d\n.text:0000000000404451\n.text:0000000000404452\n.text:0000000000404454\n.text:0000000000404456\n.text:0000000000404457\n'
p510
tp511
sS'_exit'
p512
(S'\n__stdcall _exit(int __status)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060d040)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060d040]\n'
p515
S'ff 25 0a b9 20 00\n'
p516
S'.plt:0000000000401730\n'
p517
tp518
sS'emit_stdin_note'
p519
(S'\n__stdcall emit_stdin_note()\n'
p520
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p521
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x408b9f\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401950\n'
p522
S'50\n31 ff\nbe 9f 8b 40 00\nba 05 00 00 00\ne8 4e fa ff ff\n48 8b 35 1f b5 20 00\n48 89 c7\n58\ne9 7e fb ff ff\n'
p523
S'.text:0000000000401db0\n.text:0000000000401db1\n.text:0000000000401db3\n.text:0000000000401db8\n.text:0000000000401dbd\n.text:0000000000401dc2\n.text:0000000000401dc9\n.text:0000000000401dcc\n.text:0000000000401dcd\n'
p524
tp525
sS'free_entry'
p526
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p527
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p528
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p529
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p530
S'.text:0000000000407e20\n.text:0000000000407e27\n.text:0000000000407e2b\n.text:0000000000407e2f\n.text:0000000000407e33\n'
p531
tp532
sS'ftello'
p533
(S'\n__stdcall ftello(FILE * __stream)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t ftello(FILE *__stream)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_ftello_0060d050)();\u000a  return _Var1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060d050]\n'
p536
S'ff 25 fa b8 20 00\n'
p537
S'.plt:0000000000401750\n'
p538
tp539
sS'xdectoumax'
p540
(S'\n__stdcall xdectoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p541
V\u000auintmax_t xdectoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = xnumtoumax(n_str,10,min,(char *)max,suffixes);\u000a  return uVar1;\u000a}\u000a\u000a
p542
S'PUSH RAX\nMOV R10,R8\nMOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV dword ptr [RSP],R9D\nMOV ESI,0xa\nMOV R8,RAX\nMOV R9,R10\nCALL 0x004063f0\nPOP RCX\nRET\n'
p543
S'50\n4d 89 c2\n48 89 c8\n48 89 d1\n48 89 f2\n44 89 0c 24\nbe 0a 00 00 00\n49 89 c0\n4d 89 d1\ne8 0f ff ff ff\n59\nc3\n'
p544
S'.text:00000000004064c0\n.text:00000000004064c1\n.text:00000000004064c4\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064cd\n.text:00000000004064d1\n.text:00000000004064d6\n.text:00000000004064d9\n.text:00000000004064dc\n.text:00000000004064e1\n.text:00000000004064e2\n'
p545
tp546
sS'bkm_scale_by_power'
p547
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p548
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00406aa1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00406a40\nOR EBP,EAX\nDEC EBX\nJNZ 0x00406a90\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000406a70\n.text:0000000000406a71\n.text:0000000000406a73\n.text:0000000000406a75\n.text:0000000000406a76\n.text:0000000000406a77\n.text:0000000000406a79\n.text:0000000000406a7c\n.text:0000000000406a7f\n.text:0000000000406a81\n.text:0000000000406a83\n.text:0000000000406a85\n.text:0000000000406a90\n.text:0000000000406a93\n.text:0000000000406a96\n.text:0000000000406a9b\n.text:0000000000406a9d\n.text:0000000000406a9f\n.text:0000000000406aa1\n.text:0000000000406aa3\n.text:0000000000406aa7\n.text:0000000000406aa8\n.text:0000000000406aaa\n.text:0000000000406aac\n.text:0000000000406aad\n'
p552
tp553
sS'xrealloc'
p554
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p555
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p556
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00406287\nTEST RBX,RBX\nJNZ 0x00406287\nCALL 0x004016f0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401a30\nTEST RBX,RBX\nJZ 0x00406299\nTEST RAX,RAX\nJZ 0x0040629b\nPOP RBX\nRET\nCALL 0x004063c0\n'
p557
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 6d b4 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 a1 b7 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p558
S'.text:0000000000406270\n.text:0000000000406271\n.text:0000000000406274\n.text:0000000000406277\n.text:0000000000406279\n.text:000000000040627c\n.text:000000000040627e\n.text:0000000000406283\n.text:0000000000406285\n.text:0000000000406286\n.text:0000000000406287\n.text:000000000040628a\n.text:000000000040628f\n.text:0000000000406292\n.text:0000000000406294\n.text:0000000000406297\n.text:0000000000406299\n.text:000000000040629a\n.text:000000000040629b\n'
p559
tp560
sS'hash_initialize'
p561
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p562
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x4073a0\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x4073c0\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x004019c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407385\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x409efc\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x004073d0\nTEST AL,AL\nJZ 0x0040737d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00407450\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x0040737d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00406ab0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x0040737d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00407387\nMOV RDI,RBX\nCALL 0x004016f0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd a0 73 40 00\n48 0f 45 ea\n48 85 c9\n41 be c0 73 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 c9 a6 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd fc 9e 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 6b f7 ff ff\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 6b a3 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:00000000004072c0\n.text:00000000004072c1\n.text:00000000004072c3\n.text:00000000004072c5\n.text:00000000004072c7\n.text:00000000004072c9\n.text:00000000004072ca\n.text:00000000004072cb\n.text:00000000004072ce\n.text:00000000004072d1\n.text:00000000004072d4\n.text:00000000004072d7\n.text:00000000004072dc\n.text:00000000004072e0\n.text:00000000004072e3\n.text:00000000004072e9\n.text:00000000004072ed\n.text:00000000004072f2\n.text:00000000004072f7\n.text:00000000004072fa\n.text:00000000004072fd\n.text:0000000000407303\n.text:0000000000407307\n.text:000000000040730a\n.text:0000000000407310\n.text:0000000000407314\n.text:0000000000407318\n.text:000000000040731b\n.text:0000000000407320\n.text:0000000000407322\n.text:0000000000407324\n.text:0000000000407327\n.text:000000000040732a\n.text:000000000040732f\n.text:0000000000407333\n.text:0000000000407336\n.text:0000000000407338\n.text:000000000040733d\n.text:0000000000407340\n.text:0000000000407345\n.text:0000000000407348\n.text:000000000040734b\n.text:000000000040734d\n.text:0000000000407351\n.text:0000000000407355\n.text:0000000000407358\n.text:000000000040735c\n.text:000000000040735f\n.text:0000000000407363\n.text:0000000000407367\n.text:000000000040736b\n.text:000000000040736f\n.text:0000000000407373\n.text:000000000040737b\n.text:000000000040737d\n.text:0000000000407380\n.text:0000000000407385\n.text:0000000000407387\n.text:000000000040738a\n.text:000000000040738e\n.text:000000000040738f\n.text:0000000000407391\n.text:0000000000407393\n.text:0000000000407395\n.text:0000000000407397\n.text:0000000000407398\n'
p566
tp567
sS'freopen_safer'
p568
(S'\n__stdcall freopen_safer(char * name, char * mode, FILE * f)\n'
p569
V\u000aFILE * freopen_safer(char *name,char *mode,FILE *f)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  FILE *pFVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  \u000a  iVar4 = fileno((FILE *)f);\u000a  bVar7 = false;\u000a  bVar8 = false;\u000a  if (iVar4 == 0) {\u000a    bVar1 = false;\u000a    bVar2 = false;\u000aLAB_00402ff4:\u000a    pFVar6 = (FILE *)freopen(name,mode,(FILE *)f);\u000a    bVar8 = bVar7;\u000a  }\u000a  else {\u000a    if (iVar4 == 1) {\u000a      bVar1 = false;\u000a    }\u000a    else {\u000a      if (iVar4 != 2) {\u000a        iVar4 = dup2(2,2);\u000a        bVar7 = iVar4 != 2;\u000a      }\u000a      iVar4 = dup2(1,1);\u000a      bVar8 = iVar4 != 1;\u000a      bVar1 = bVar7;\u000a    }\u000a    bVar2 = false;\u000a    iVar4 = dup2(0,0);\u000a    if (iVar4 != 0) {\u000a      pFVar6 = (FILE *)0x0;\u000a      _Var3 = protect_fd();\u000a      bVar2 = true;\u000a      if (_Var3 == false) {\u000a        bVar2 = true;\u000a        goto LAB_00403012;\u000a      }\u000a    }\u000a    if ((bVar8) && (_Var3 = protect_fd(), _Var3 == false)) {\u000a      bVar8 = true;\u000a    }\u000a    else {\u000a      bVar7 = bVar8;\u000a      if ((!bVar1) || (_Var3 = protect_fd(), bVar7 = bVar8, _Var3 != false)) goto LAB_00402ff4;\u000a    }\u000a    pFVar6 = (FILE *)0x0;\u000a  }\u000aLAB_00403012:\u000a  piVar5 = __errno_location();\u000a  iVar4 = *piVar5;\u000a  if (bVar1) {\u000a    close(2);\u000a  }\u000a  if (bVar8) {\u000a    close(1);\u000a  }\u000a  if (bVar2) {\u000a    close(0);\u000a  }\u000a  if (pFVar6 == (FILE *)0x0) {\u000a    *piVar5 = iVar4;\u000a  }\u000a  return pFVar6;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV RBX,RDI\nMOV RDI,RBP\nCALL 0x004019a0\nXOR R14D,R14D\nTEST EAX,EAX\nJZ 0x00402f8e\nCMP EAX,0x1\nJZ 0x00402f96\nCMP EAX,0x2\nJZ 0x00402f73\nMOV EDI,0x2\nMOV ESI,0x2\nCALL 0x00401870\nCMP EAX,0x2\nSETNZ R14B\nMOV R15B,R14B\nMOV EDI,0x1\nMOV ESI,0x1\nCALL 0x00401870\nCMP EAX,0x1\nSETNZ R14B\nJMP 0x00402f99\nXOR R15D,R15D\nXOR R12D,R12D\nJMP 0x00402ff4\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401870\nTEST EAX,EAX\nJZ 0x00402fce\nMOV qword ptr [RSP],RBP\nMOV RBP,RBX\nMOV RBX,R13\nXOR R13D,R13D\nXOR EDI,EDI\nCALL 0x00403060\nMOV R12B,0x1\nTEST AL,AL\nJZ 0x00403007\nMOV R13,RBX\nMOV RBX,RBP\nMOV RBP,qword ptr [RSP]\nTEST R14B,R14B\nJZ 0x00402fe1\nMOV EDI,0x1\nCALL 0x00403060\nTEST AL,AL\nJZ 0x0040300c\nTEST R15B,R15B\nJZ 0x00402ff4\nMOV EDI,0x2\nCALL 0x00403060\nTEST AL,AL\nJZ 0x0040300f\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x004018e0\nMOV R13,RAX\nJMP 0x00403012\nMOV R12B,0x1\nJMP 0x00403012\nMOV R14B,0x1\nXOR R13D,R13D\nCALL 0x00401710\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nTEST R15B,R15B\nJZ 0x0040302b\nMOV EDI,0x2\nCALL 0x00401900\nTEST R14B,R14B\nJZ 0x0040303a\nMOV EDI,0x1\nCALL 0x00401900\nTEST R12B,R12B\nJZ 0x00403046\nXOR EDI,EDI\nCALL 0x00401900\nTEST R13,R13\nJNZ 0x0040304d\nMOV dword ptr [RBX],EBP\nMOV RAX,R13\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n48 89 fb\n48 89 ef\ne8 54 ea ff ff\n45 31 f6\n85 c0\n74 3b\n83 f8 01\n74 3e\n83 f8 02\n74 16\nbf 02 00 00 00\nbe 02 00 00 00\ne8 04 e9 ff ff\n83 f8 02\n41 0f 95 c6\n45 88 f7\nbf 01 00 00 00\nbe 01 00 00 00\ne8 eb e8 ff ff\n83 f8 01\n41 0f 95 c6\neb 0b\n45 31 ff\n45 31 e4\neb 5e\n45 31 ff\n45 31 e4\n31 ff\n31 f6\ne8 cb e8 ff ff\n85 c0\n74 25\n48 89 2c 24\n48 89 dd\n4c 89 eb\n45 31 ed\n31 ff\ne8 a3 00 00 00\n41 b4 01\n84 c0\n74 43\n49 89 dd\n48 89 eb\n48 8b 2c 24\n45 84 f6\n74 0e\nbf 01 00 00 00\ne8 83 00 00 00\n84 c0\n74 2b\n45 84 ff\n74 0e\nbf 02 00 00 00\ne8 70 00 00 00\n84 c0\n74 1b\n48 89 df\n4c 89 ee\n48 89 ea\ne8 de e8 ff ff\n49 89 c5\neb 0b\n41 b4 01\neb 06\n41 b6 01\n45 31 ed\ne8 f9 e6 ff ff\n48 89 c3\n8b 2b\n45 84 ff\n74 0a\nbf 02 00 00 00\ne8 d5 e8 ff ff\n45 84 f6\n74 0a\nbf 01 00 00 00\ne8 c6 e8 ff ff\n45 84 e4\n74 07\n31 ff\ne8 ba e8 ff ff\n4d 85 ed\n75 02\n89 2b\n4c 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000402f30\n.text:0000000000402f31\n.text:0000000000402f33\n.text:0000000000402f35\n.text:0000000000402f37\n.text:0000000000402f39\n.text:0000000000402f3a\n.text:0000000000402f3b\n.text:0000000000402f3e\n.text:0000000000402f41\n.text:0000000000402f44\n.text:0000000000402f47\n.text:0000000000402f4c\n.text:0000000000402f4f\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f56\n.text:0000000000402f58\n.text:0000000000402f5b\n.text:0000000000402f5d\n.text:0000000000402f62\n.text:0000000000402f67\n.text:0000000000402f6c\n.text:0000000000402f6f\n.text:0000000000402f73\n.text:0000000000402f76\n.text:0000000000402f7b\n.text:0000000000402f80\n.text:0000000000402f85\n.text:0000000000402f88\n.text:0000000000402f8c\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f94\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9e\n.text:0000000000402fa0\n.text:0000000000402fa5\n.text:0000000000402fa7\n.text:0000000000402fa9\n.text:0000000000402fad\n.text:0000000000402fb0\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fb8\n.text:0000000000402fbd\n.text:0000000000402fc0\n.text:0000000000402fc2\n.text:0000000000402fc4\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fce\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd8\n.text:0000000000402fdd\n.text:0000000000402fdf\n.text:0000000000402fe1\n.text:0000000000402fe4\n.text:0000000000402fe6\n.text:0000000000402feb\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff4\n.text:0000000000402ff7\n.text:0000000000402ffa\n.text:0000000000402ffd\n.text:0000000000403002\n.text:0000000000403005\n.text:0000000000403007\n.text:000000000040300a\n.text:000000000040300c\n.text:000000000040300f\n.text:0000000000403012\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301c\n.text:000000000040301f\n.text:0000000000403021\n.text:0000000000403026\n.text:000000000040302b\n.text:000000000040302e\n.text:0000000000403030\n.text:0000000000403035\n.text:000000000040303a\n.text:000000000040303d\n.text:000000000040303f\n.text:0000000000403041\n.text:0000000000403046\n.text:0000000000403049\n.text:000000000040304b\n.text:000000000040304d\n.text:0000000000403050\n.text:0000000000403054\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305b\n.text:000000000040305d\n.text:000000000040305e\n'
p573
tp574
sS'randread_set_handler_arg'
p575
(S'\n__stdcall randread_set_handler_arg(randread_source * s, void * handler_arg)\n'
p576
V\u000avoid randread_set_handler_arg(randread_source *s,void *handler_arg)\u000a\u000a{\u000a  s->handler_arg = handler_arg;\u000a  return;\u000a}\u000a\u000a
p577
S'MOV qword ptr [RDI + 0x10],RSI\nRET\n'
p578
S'48 89 77 10\nc3\n'
p579
S'.text:0000000000405200\n.text:0000000000405204\n'
p580
tp581
sS'feof_unlocked'
p582
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_0060d250)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060d250]\n'
p585
S'ff 25 fa b6 20 00\n'
p586
S'.plt:0000000000401b50\n'
p587
tp588
sS'close_stdout'
p589
(S'\n__stdcall close_stdout()\n'
p590
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402e67;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x408aaf,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402e67:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060d2e8]\nCALL 0x00406d90\nTEST EAX,EAX\nJZ 0x00402e67\nCMP byte ptr [0x0060d338],0x0\nJZ 0x00402e7c\nCALL 0x00401710\nCMP dword ptr [RAX],0x20\nJNZ 0x00402e7c\nMOV RDI,qword ptr [0x0060d320]\nCALL 0x00406d90\nTEST EAX,EAX\nJNZ 0x00402ec1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x408b6c\nMOV EDX,0x5\nCALL 0x00401810\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d330]\nCALL 0x00401710\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402ecc\nXOR EDI,EDI\nMOV EDX,0x408aaf\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401a80\nMOV EDI,dword ptr [0x0060d278]\nCALL 0x00401730\nMOV EDI,dword ptr [0x0060d278]\nCALL 0x00401730\nMOV RDI,RBX\nCALL 0x00404520\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x408aab\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401a80\nMOV EDI,dword ptr [0x0060d278]\nCALL 0x00401730\n'
p592
S'55\n41 56\n53\n48 8b 3d 9d a4 20 00\ne8 40 3f 00 00\n85 c0\n74 13\n80 3d dd a4 20 00 00\n74 1f\ne8 ae e8 ff ff\n83 38 20\n75 15\n48 8b 3d b2 a4 20 00\ne8 1d 3f 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 6c 8b 40 00\nba 05 00 00 00\ne8 83 e9 ff ff\n49 89 c6\n48 8b 1d 99 a4 20 00\ne8 74 e8 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba af 8a 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca eb ff ff\n8b 3d bc a3 20 00\ne8 6f e8 ff ff\n8b 3d b1 a3 20 00\ne8 64 e8 ff ff\n48 89 df\ne8 4c 16 00 00\n48 89 c1\n31 ff\nba ab 8a 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 eb ff ff\n8b 3d 88 a3 20 00\ne8 3b e8 ff ff\n'
p593
S'.text:0000000000402e40\n.text:0000000000402e41\n.text:0000000000402e43\n.text:0000000000402e44\n.text:0000000000402e4b\n.text:0000000000402e50\n.text:0000000000402e52\n.text:0000000000402e54\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e62\n.text:0000000000402e65\n.text:0000000000402e67\n.text:0000000000402e6e\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e78\n.text:0000000000402e7a\n.text:0000000000402e7b\n.text:0000000000402e7c\n.text:0000000000402e7e\n.text:0000000000402e83\n.text:0000000000402e88\n.text:0000000000402e8d\n.text:0000000000402e90\n.text:0000000000402e97\n.text:0000000000402e9c\n.text:0000000000402e9f\n.text:0000000000402ea1\n.text:0000000000402ea3\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402eac\n.text:0000000000402eae\n.text:0000000000402eb1\n.text:0000000000402eb6\n.text:0000000000402ebc\n.text:0000000000402ec1\n.text:0000000000402ec7\n.text:0000000000402ecc\n.text:0000000000402ecf\n.text:0000000000402ed4\n.text:0000000000402ed7\n.text:0000000000402ed9\n.text:0000000000402ede\n.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee5\n.text:0000000000402eea\n.text:0000000000402ef0\n'
p594
tp595
sS'version_etc_ar'
p596
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p597
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p598
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00406080\nJMP 0x00405d10\n'
p599
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p600
S'.text:0000000000406070\n.text:0000000000406077\n.text:0000000000406080\n.text:0000000000406086\n.text:000000000040608a\n.text:000000000040608c\n'
p601
tp602
sS'strtoumax'
p603
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060d208)();\u000a  return uVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0060d208]\n'
p606
S'ff 25 42 b7 20 00\n'
p607
S'.plt:0000000000401ac0\n'
p608
tp609
sS'read_binary_file'
p610
(S'\n__stdcall read_binary_file(char * filename, size_t * length)\n'
p611
V\u000achar * read_binary_file(char *filename,size_t *length)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = internal_read_file(filename,length,"rb");\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'MOV EDX,0x409367\nJMP 0x00405c90\n'
p613
S'ba 67 93 40 00\neb 89\n'
p614
S'.text:0000000000405d00\n.text:0000000000405d05\n'
p615
tp616
sS'c_isxdigit'
p617
(S'\n__stdcall c_isxdigit()\n'
p618
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p619
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00406d6b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p620
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p621
S'.text:0000000000406d50\n.text:0000000000406d53\n.text:0000000000406d56\n.text:0000000000406d58\n.text:0000000000406d62\n.text:0000000000406d64\n.text:0000000000406d67\n.text:0000000000406d6a\n.text:0000000000406d6b\n.text:0000000000406d6d\n'
p622
tp623
sS'ferror'
p624
(S'\n__stdcall ferror(FILE * __stream)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0060d060)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060d060]\n'
p627
S'ff 25 ea b8 20 00\n'
p628
S'.plt:0000000000401770\n'
p629
tp630
sS'__libc_csu_fini'
p631
(S'\n__stdcall __libc_csu_fini()\n'
p632
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p633
S'RET\n'
p634
S'f3 c3\n'
p635
S'.text:0000000000408490\n'
p636
tp637
sS'getuid'
p638
(S'\n__stdcall getuid()\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t getuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getuid_0060d0c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x0060d0c8]\n'
p641
S'ff 25 82 b8 20 00\n'
p642
S'.plt:0000000000401840\n'
p643
tp644
sS'abort'
p645
(S'\n__stdcall abort()\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060d028)();\u000a  return;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x0060d028]\n'
p648
S'ff 25 22 b9 20 00\n'
p649
S'.plt:0000000000401700\n'
p650
tp651
sS'randint_all_free'
p652
(S'\n__stdcall randint_all_free(randint_source * s)\n'
p653
V\u000aint randint_all_free(randint_source *s)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  \u000a  iVar2 = randread_free(s->source);\u000a  piVar3 = __errno_location();\u000a  iVar1 = *piVar3;\u000a  randint_free(s);\u000a  *piVar3 = iVar1;\u000a  return iVar2;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x004053b0\nMOV R14D,EAX\nCALL 0x00401710\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00404c10\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p655
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 8b 3b\ne8 7e 07 00 00\n41 89 c6\ne8 d6 ca ff ff\n48 89 c5\n44 8b 7d 00\n48 89 df\ne8 c7 ff ff ff\n44 89 7d 00\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p656
S'.text:0000000000404c20\n.text:0000000000404c21\n.text:0000000000404c23\n.text:0000000000404c25\n.text:0000000000404c26\n.text:0000000000404c27\n.text:0000000000404c2a\n.text:0000000000404c2d\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c3a\n.text:0000000000404c3d\n.text:0000000000404c41\n.text:0000000000404c44\n.text:0000000000404c49\n.text:0000000000404c4d\n.text:0000000000404c50\n.text:0000000000404c54\n.text:0000000000404c55\n.text:0000000000404c57\n.text:0000000000404c59\n.text:0000000000404c5a\n'
p657
tp658
sS'internal_read_file'
p659
(S'\n__stdcall internal_read_file(char * filename, size_t * length, char * mode)\n'
p660
V\u000achar * internal_read_file(char *filename,size_t *length,char *mode)\u000a\u000a{\u000a  int iVar1;\u000a  FILE *stream;\u000a  char *__ptr;\u000a  int *piVar2;\u000a  int iVar3;\u000a  \u000a  stream = (FILE *)fopen(filename,mode);\u000a  if (stream != (FILE *)0x0) {\u000a    __ptr = fread_file(stream,length);\u000a    piVar2 = __errno_location();\u000a    iVar3 = *piVar2;\u000a    iVar1 = rpl_fclose(stream);\u000a    if (iVar1 == 0) {\u000a      return __ptr;\u000a    }\u000a    if (__ptr != (char *)0x0) {\u000a      iVar3 = *piVar2;\u000a      free(__ptr);\u000a    }\u000a    *piVar2 = iVar3;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RSI,RDX\nCALL 0x00401ab0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405ce2\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00405b10\nMOV R15,RAX\nCALL 0x00401710\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x00406b00\nTEST EAX,EAX\nJZ 0x00405ce5\nTEST R15,R15\nJZ 0x00405cdf\nMOV EBP,dword ptr [R14]\nMOV RDI,R15\nCALL 0x004016f0\nMOV dword ptr [R14],EBP\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p662
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 d6\ne8 0e be ff ff\n48 89 c3\n48 85 db\n74 38\n48 89 df\n4c 89 f6\ne8 5b fe ff ff\n49 89 c7\ne8 53 ba ff ff\n49 89 c6\n41 8b 2e\n48 89 df\ne8 35 0e 00 00\n85 c0\n74 16\n4d 85 ff\n74 0b\n41 8b 2e\n4c 89 ff\ne8 11 ba ff ff\n41 89 2e\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p663
S'.text:0000000000405c90\n.text:0000000000405c91\n.text:0000000000405c93\n.text:0000000000405c95\n.text:0000000000405c96\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405c9d\n.text:0000000000405ca2\n.text:0000000000405ca5\n.text:0000000000405ca8\n.text:0000000000405caa\n.text:0000000000405cad\n.text:0000000000405cb0\n.text:0000000000405cb5\n.text:0000000000405cb8\n.text:0000000000405cbd\n.text:0000000000405cc0\n.text:0000000000405cc3\n.text:0000000000405cc6\n.text:0000000000405ccb\n.text:0000000000405ccd\n.text:0000000000405ccf\n.text:0000000000405cd2\n.text:0000000000405cd4\n.text:0000000000405cd7\n.text:0000000000405cda\n.text:0000000000405cdf\n.text:0000000000405ce2\n.text:0000000000405ce5\n.text:0000000000405ce8\n.text:0000000000405cec\n.text:0000000000405ced\n.text:0000000000405cef\n.text:0000000000405cf1\n.text:0000000000405cf2\n'
p664
tp665
sS'compute_bucket_size'
p666
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p667
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_00409e88 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_00409e88) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_00409e8c <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p668
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x004074b2\nTEST RDI,RDI\nJS 0x00407462\nCVTSI2SS XMM0,RDI\nJMP 0x00407477\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x00409e88]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x00409e8c]\nJNC 0x004074d1\nPUSH RAX\nCALL 0x00407d50\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p669
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 04 2a 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 dc 29 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p670
S'.text:0000000000407450\n.text:0000000000407454\n.text:0000000000407456\n.text:0000000000407459\n.text:000000000040745b\n.text:0000000000407460\n.text:0000000000407462\n.text:0000000000407465\n.text:0000000000407468\n.text:000000000040746b\n.text:000000000040746e\n.text:0000000000407473\n.text:0000000000407477\n.text:000000000040747c\n.text:0000000000407484\n.text:0000000000407487\n.text:000000000040748b\n.text:0000000000407490\n.text:000000000040749a\n.text:000000000040749d\n.text:00000000004074a2\n.text:00000000004074a5\n.text:00000000004074a9\n.text:00000000004074b0\n.text:00000000004074b2\n.text:00000000004074b3\n.text:00000000004074b8\n.text:00000000004074bb\n.text:00000000004074c0\n.text:00000000004074c2\n.text:00000000004074c5\n.text:00000000004074c9\n.text:00000000004074cd\n.text:00000000004074d0\n.text:00000000004074d1\n.text:00000000004074d3\n.text:00000000004074d6\n'
p671
tp672
sS'usable_st_size'
p673
(S'\n__stdcall usable_st_size(stat * sb)\n'
p674
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p675
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x00402df8\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p676
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p677
S'.text:0000000000402de0\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df3\n.text:0000000000402df5\n.text:0000000000402df7\n.text:0000000000402df8\n.text:0000000000402dfa\n'
p678
tp679
sS'version_etc'
p680
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p681
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p682
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00406142\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004060a0\nADD RSP,0xd8\nRET\n'
p683
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p684
S'.text:0000000000406100\n.text:0000000000406107\n.text:0000000000406109\n.text:000000000040610b\n.text:0000000000406110\n.text:0000000000406115\n.text:000000000040611a\n.text:0000000000406122\n.text:000000000040612a\n.text:0000000000406132\n.text:000000000040613a\n.text:0000000000406142\n.text:0000000000406147\n.text:000000000040614c\n.text:0000000000406151\n.text:0000000000406156\n.text:000000000040615e\n.text:0000000000406163\n.text:000000000040616b\n.text:0000000000406172\n.text:0000000000406175\n.text:000000000040617a\n.text:0000000000406181\n'
p685
tp686
sS'hash_rehash'
p687
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p688
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00407450\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407781\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00407784\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00406ab0\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00407781\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004077a0\nTEST AL,AL\nJZ 0x0040774a\nMOV RDI,qword ptr [RBX]\nCALL 0x004016f0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00407784\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004077a0\nTEST AL,AL\nJZ 0x00407790\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x004077a0\nTEST AL,AL\nJZ 0x00407790\nMOV RDI,qword ptr [RSP]\nCALL 0x004016f0\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401700\n'
p690
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 00 f4 ff ff\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 d3 9f ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 6f 9f ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 6b 9f ff ff\n'
p691
S'.text:0000000000407670\n.text:0000000000407671\n.text:0000000000407673\n.text:0000000000407674\n.text:0000000000407678\n.text:000000000040767b\n.text:000000000040767f\n.text:0000000000407682\n.text:0000000000407685\n.text:000000000040768a\n.text:000000000040768d\n.text:0000000000407690\n.text:0000000000407696\n.text:0000000000407699\n.text:000000000040769d\n.text:00000000004076a3\n.text:00000000004076a8\n.text:00000000004076ab\n.text:00000000004076b0\n.text:00000000004076b4\n.text:00000000004076b7\n.text:00000000004076bd\n.text:00000000004076c2\n.text:00000000004076c6\n.text:00000000004076ca\n.text:00000000004076cf\n.text:00000000004076d2\n.text:00000000004076d7\n.text:00000000004076db\n.text:00000000004076e0\n.text:00000000004076e4\n.text:00000000004076e9\n.text:00000000004076ed\n.text:00000000004076f2\n.text:00000000004076f6\n.text:00000000004076fb\n.text:00000000004076ff\n.text:0000000000407704\n.text:0000000000407707\n.text:0000000000407709\n.text:000000000040770c\n.text:0000000000407711\n.text:0000000000407713\n.text:0000000000407715\n.text:0000000000407718\n.text:000000000040771d\n.text:0000000000407721\n.text:0000000000407724\n.text:0000000000407729\n.text:000000000040772d\n.text:0000000000407732\n.text:0000000000407736\n.text:000000000040773b\n.text:000000000040773f\n.text:0000000000407744\n.text:0000000000407748\n.text:000000000040774a\n.text:000000000040774f\n.text:0000000000407753\n.text:0000000000407756\n.text:000000000040775b\n.text:000000000040775e\n.text:0000000000407763\n.text:0000000000407765\n.text:0000000000407767\n.text:000000000040776a\n.text:000000000040776c\n.text:000000000040776f\n.text:0000000000407774\n.text:0000000000407776\n.text:0000000000407778\n.text:000000000040777c\n.text:0000000000407781\n.text:0000000000407784\n.text:0000000000407787\n.text:000000000040778b\n.text:000000000040778c\n.text:000000000040778e\n.text:000000000040778f\n.text:0000000000407790\n'
p692
tp693
sS'randread_new'
p694
(S'\n__stdcall randread_new(char * name, size_t bytes_bound)\n'
p695
V\u000arandread_source * randread_new(char *name,size_t bytes_bound)\u000a\u000a{\u000a  FILE *source;\u000a  randread_source *prVar1;\u000a  size_t min_len;\u000a  size_t __n;\u000a  int entropy;\u000a  size_t max_len;\u000a  \u000a  if (bytes_bound != 0) {\u000a    if (name == (char *)0x0) {\u000a      prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a      *(undefined8 *)prVar1->buf = 0;\u000a      get_nonce((DRBG_CTX *)(isaac_state *)(prVar1->buf + 8),(uchar **)bytes_bound,entropy,min_len,\u000a                max_len);\u000a      isaac_seed((isaac_state *)(prVar1->buf + 8));\u000a    }\u000a    else {\u000a      source = fopen_safer(name,"rb");\u000a      if (source == (FILE *)0x0) {\u000a        prVar1 = (randread_source *)0x0;\u000a      }\u000a      else {\u000a        prVar1 = simple_new(source,name);\u000a        __n = 0x1000;\u000a        if (bytes_bound < 0x1000) {\u000a          __n = bytes_bound;\u000a        }\u000a        setvbuf((FILE *)source,(char *)prVar1->buf,0,__n);\u000a      }\u000a    }\u000a    return prVar1;\u000a  }\u000a  prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a  return prVar1;\u000a}\u000a\u000a
p696
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nTEST R15,R15\nJZ 0x00404fcb\nTEST RBX,RBX\nJZ 0x00404fdc\nMOV ESI,0x409367\nMOV RDI,RBX\nCALL 0x00406e00\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040500d\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00405020\nMOV R14,RAX\nLEA RSI,[R14 + 0x18]\nCMP R15,0x1000\nMOV ECX,0x1000\nCMOVC RCX,R15\nXOR EDX,EDX\nMOV RDI,R12\nCALL 0x00401a70\nJMP 0x00405010\nXOR EDI,EDI\nXOR ESI,ESI\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00405020\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00405020\nMOV R14,RAX\nMOV qword ptr [R14 + 0x18],0x0\nMOV RBX,R14\nADD RBX,0x20\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00405050\nMOV RDI,RBX\nCALL 0x004057f0\nJMP 0x00405010\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p697
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n48 89 fb\n4d 85 ff\n74 48\n48 85 db\n74 54\nbe 67 93 40 00\n48 89 df\ne8 6b 1e 00 00\n49 89 c4\n4d 85 e4\n74 70\n4c 89 e7\n48 89 de\ne8 78 00 00 00\n49 89 c6\n49 8d 76 18\n49 81 ff 00 10 00 00\nb9 00 10 00 00\n49 0f 42 cf\n31 d2\n4c 89 e7\ne8 a7 ca ff ff\neb 45\n31 ff\n31 f6\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\neb 44\n31 ff\n48 89 de\ne8 3a 00 00 00\n49 89 c6\n49 c7 46 18 00 00 00 00\n4c 89 f3\n48 83 c3 20\n48 89 df\n4c 89 fe\ne8 4d 00 00 00\n48 89 df\ne8 e5 07 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p698
S'.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f74\n.text:0000000000404f76\n.text:0000000000404f77\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f7e\n.text:0000000000404f81\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f88\n.text:0000000000404f8d\n.text:0000000000404f90\n.text:0000000000404f95\n.text:0000000000404f98\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa8\n.text:0000000000404fab\n.text:0000000000404faf\n.text:0000000000404fb6\n.text:0000000000404fbb\n.text:0000000000404fbf\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc9\n.text:0000000000404fcb\n.text:0000000000404fcd\n.text:0000000000404fcf\n.text:0000000000404fd3\n.text:0000000000404fd4\n.text:0000000000404fd6\n.text:0000000000404fd8\n.text:0000000000404fda\n.text:0000000000404fdc\n.text:0000000000404fde\n.text:0000000000404fe1\n.text:0000000000404fe6\n.text:0000000000404fe9\n.text:0000000000404ff1\n.text:0000000000404ff4\n.text:0000000000404ff8\n.text:0000000000404ffb\n.text:0000000000404ffe\n.text:0000000000405003\n.text:0000000000405006\n.text:000000000040500b\n.text:000000000040500d\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405017\n.text:0000000000405018\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501e\n'
p699
tp700
sS'posix_fadvise'
p701
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060d130)();\u000a  return iVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x0060d130]\n'
p704
S'ff 25 1a b8 20 00\n'
p705
S'.plt:0000000000401910\n'
p706
tp707
sS'sparse_new'
p708
(S'\n__stdcall sparse_new(size_t size_hint)\n'
p709
V\u000asparse_map * sparse_new(size_t size_hint)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  \u000a  pHVar1 = hash_initialize(size_hint,(Hash_tuning *)0x0,sparse_hash_,sparse_cmp_,free);\u000a  return (sparse_map *)pHVar1;\u000a}\u000a\u000a
p710
S'XOR ESI,ESI\nMOV EDX,0x404f50\nMOV ECX,0x404f60\nMOV R8D,0x4016f0\nJMP 0x004072c0\n'
p711
S'31 f6\nba 50 4f 40 00\nb9 60 4f 40 00\n41 b8 f0 16 40 00\ne9 89 24 00 00\n'
p712
S'.text:0000000000404e20\n.text:0000000000404e22\n.text:0000000000404e27\n.text:0000000000404e2c\n.text:0000000000404e32\n'
p713
tp714
sS'lseek'
p715
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060d0f8)();\u000a  return _Var1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060d0f8]\n'
p718
S'ff 25 52 b8 20 00\n'
p719
S'.plt:00000000004018a0\n'
p720
tp721
sS'hash_get_first'
p722
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p723
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p724
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00407113\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040710a\nJMP 0x00407116\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407116\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00407100\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00401700\n'
p725
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 e4 a5 ff ff\n'
p726
S'.text:00000000004070e0\n.text:00000000004070e5\n.text:00000000004070e7\n.text:00000000004070ea\n.text:00000000004070ee\n.text:00000000004070f0\n.text:0000000000407100\n.text:0000000000407104\n.text:0000000000407108\n.text:000000000040710a\n.text:000000000040710d\n.text:0000000000407110\n.text:0000000000407112\n.text:0000000000407113\n.text:0000000000407115\n.text:0000000000407116\n.text:0000000000407117\n'
p727
tp728
sS'hash_get_n_entries'
p729
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p730
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p731
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p732
S'48 8b 47 20\nc3\n'
p733
S'.text:0000000000406eb0\n.text:0000000000406eb4\n'
p734
tp735
sS'quotearg_n_mem'
p736
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p737
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p738
S'MOV ECX,0x60d350\nJMP 0x00404190\n'
p739
S'b9 50 d3 60 00\ne9 36 fe ff ff\n'
p740
S'.text:0000000000404350\n.text:0000000000404355\n'
p741
tp742
sS'__printf_chk'
p743
(S'\n__stdcall __printf_chk()\n'
p744
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060d1d8)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x0060d1d8]\n'
p746
S'ff 25 72 b7 20 00\n'
p747
S'.plt:0000000000401a60\n'
p748
tp749
sS'hash_lookup'
p750
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p751
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p752
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x004070b0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x004070a1\nTEST RBX,RBX\nJZ 0x004070a1\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x0040709e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040709e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00407080\nJMP 0x004070a1\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p753
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p754
S'.text:0000000000407050\n.text:0000000000407052\n.text:0000000000407054\n.text:0000000000407056\n.text:0000000000407057\n.text:0000000000407058\n.text:000000000040705b\n.text:000000000040705e\n.text:0000000000407063\n.text:0000000000407066\n.text:0000000000407069\n.text:000000000040706d\n.text:000000000040706f\n.text:0000000000407072\n.text:0000000000407074\n.text:0000000000407077\n.text:0000000000407080\n.text:0000000000407083\n.text:0000000000407086\n.text:0000000000407088\n.text:000000000040708b\n.text:000000000040708f\n.text:0000000000407091\n.text:0000000000407093\n.text:0000000000407097\n.text:000000000040709a\n.text:000000000040709c\n.text:000000000040709e\n.text:00000000004070a1\n.text:00000000004070a4\n.text:00000000004070a8\n.text:00000000004070a9\n.text:00000000004070ab\n.text:00000000004070ad\n.text:00000000004070af\n'
p755
tp756
sS'randint_genmax'
p757
(S'\n__stdcall randint_genmax(randint_source * s, randint genmax)\n'
p758
V\u000arandint randint_genmax(randint_source *s,randint genmax)\u000a\u000a{\u000a  ulong uVar1;\u000a  randread_source *s_00;\u000a  randint rVar2;\u000a  ulong x;\u000a  randint x_00;\u000a  ulong x_01;\u000a  ulong uVar3;\u000a  byte *buf_00;\u000a  ulong uVar4;\u000a  size_t size;\u000a  randread_source *source;\u000a  uchar buf [8];\u000a  byte local_38 [8];\u000a  \u000a  s_00 = s->source;\u000a  x_01 = s->randmax;\u000a  uVar1 = genmax + 1;\u000a  x = s->randnum;\u000a  while( true ) {\u000a    x_00 = x;\u000a    if (x_01 < genmax) {\u000a      size = 0;\u000a      x = x_01;\u000a      do {\u000a        rVar2 = shift_left(x);\u000a        x = rVar2 + 0xff;\u000a        size = size + 1;\u000a      } while (x < genmax);\u000a      buf_00 = local_38;\u000a      randread(s_00,buf_00,size);\u000a      do {\u000a        x_00 = shift_left(x_00);\u000a        x_00 = (ulong)*buf_00 + x_00;\u000a        rVar2 = shift_left(x_01);\u000a        x_01 = rVar2 + 0xff;\u000a        buf_00 = buf_00 + 1;\u000a      } while (x_01 < genmax);\u000a    }\u000a    uVar4 = x_01 - genmax;\u000a    if (uVar4 == 0) break;\u000a    uVar3 = x_01 - uVar4 % uVar1;\u000a    x_01 = uVar4 % uVar1 - 1;\u000a    x = x_00 % uVar1;\u000a    if (x_00 <= uVar3) {\u000a      s->randnum = x_00 / uVar1;\u000a      s->randmax = uVar4 / uVar1;\u000a      return x_00 % uVar1;\u000a    }\u000a  }\u000a  *(undefined4 *)&s->randnum = 0;\u000a  *(undefined4 *)((long)&s->randnum + 4) = 0;\u000a  *(undefined4 *)&s->randmax = 0;\u000a  *(undefined4 *)((long)&s->randmax + 4) = 0;\u000a  return x_00;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RSI\nMOV RAX,qword ptr [RDI]\nMOV qword ptr [RSP + 0x18],RAX\nMOV R15,qword ptr [RDI + 0x8]\nLEA RAX,[RDI + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [RSP + 0x10],RDI\nMOV RBX,qword ptr [RDI + 0x10]\nLEA R12,[R13 + 0x1]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RBX,R13\nJNC 0x00404b8a\nMOV RAX,RBX\nXOR R14D,R14D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RAX\nCALL 0x00404c00\nADD RAX,0xff\nINC R14\nCMP RAX,R13\nJC 0x00404b30\nMOV RDI,qword ptr [RSP + 0x18]\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nMOV RDX,R14\nCALL 0x00405210\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x00404c00\nMOVZX R15D,byte ptr [RBP]\nADD R15,RAX\nMOV RDI,RBX\nCALL 0x00404c00\nMOV RBX,RAX\nADD RBX,0xff\nINC RBP\nCMP RBX,R13\nJC 0x00404b60\nMOV RCX,R15\nMOV RSI,RBX\nSUB RSI,R13\nJZ 0x00404bdf\nXOR EDX,EDX\nMOV RAX,RSI\nDIV R12\nMOV RDI,RDX\nSUB RBX,RDI\nXOR EDX,EDX\nMOV RAX,RCX\nDIV R12\nMOV R15,RDX\nDEC RDI\nCMP RCX,RBX\nMOV RBX,RDI\nJA 0x00404b20\nXOR EDX,EDX\nMOV RAX,RCX\nDIV R12\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + 0x8],RAX\nXOR EDX,EDX\nMOV RAX,RSI\nDIV R12\nMOV qword ptr [RCX + 0x10],RAX\nMOV RCX,R15\nJMP 0x00404bea\nXORPS XMM0,XMM0\nMOV RAX,qword ptr [RSP + 0x8]\nMOVUPS xmmword ptr [RAX],XMM0\nMOV RAX,RCX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f5\n48 8b 07\n48 89 44 24 18\n4c 8b 7f 08\n48 8d 47 08\n48 89 44 24 08\n48 89 7c 24 10\n48 8b 5f 10\n4d 8d 65 01\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 eb\n73 65\n48 89 d8\n45 31 f6\n0f 1f 44 00 00\n48 89 c7\ne8 c8 00 00 00\n48 05 ff 00 00 00\n49 ff c6\n4c 39 e8\n72 ea\n48 8b 7c 24 18\n48 8d 6c 24 20\n48 89 ee\n4c 89 f2\ne8 b5 06 00 00\n0f 1f 44 00 00\n4c 89 ff\ne8 98 00 00 00\n44 0f b6 7d 00\n49 01 c7\n48 89 df\ne8 88 00 00 00\n48 89 c3\n48 81 c3 ff 00 00 00\n48 ff c5\n4c 39 eb\n72 d6\n4c 89 f9\n48 89 de\n4c 29 ee\n74 4a\n31 d2\n48 89 f0\n49 f7 f4\n48 89 d7\n48 29 fb\n31 d2\n48 89 c8\n49 f7 f4\n49 89 d7\n48 ff cf\n48 39 d9\n48 89 fb\n0f 87 63 ff ff ff\n31 d2\n48 89 c8\n49 f7 f4\n48 8b 4c 24 10\n48 89 41 08\n31 d2\n48 89 f0\n49 f7 f4\n48 89 41 10\n4c 89 f9\neb 0b\n0f 57 c0\n48 8b 44 24 08\n0f 11 00\n48 89 c8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p761
S'.text:0000000000404ae0\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae5\n.text:0000000000404ae7\n.text:0000000000404ae9\n.text:0000000000404aea\n.text:0000000000404aee\n.text:0000000000404af1\n.text:0000000000404af4\n.text:0000000000404af9\n.text:0000000000404afd\n.text:0000000000404b01\n.text:0000000000404b06\n.text:0000000000404b0b\n.text:0000000000404b0f\n.text:0000000000404b13\n.text:0000000000404b20\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b28\n.text:0000000000404b2b\n.text:0000000000404b30\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3e\n.text:0000000000404b41\n.text:0000000000404b44\n.text:0000000000404b46\n.text:0000000000404b4b\n.text:0000000000404b50\n.text:0000000000404b53\n.text:0000000000404b56\n.text:0000000000404b5b\n.text:0000000000404b60\n.text:0000000000404b63\n.text:0000000000404b68\n.text:0000000000404b6d\n.text:0000000000404b70\n.text:0000000000404b73\n.text:0000000000404b78\n.text:0000000000404b7b\n.text:0000000000404b82\n.text:0000000000404b85\n.text:0000000000404b88\n.text:0000000000404b8a\n.text:0000000000404b8d\n.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b95\n.text:0000000000404b97\n.text:0000000000404b9a\n.text:0000000000404b9d\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bab\n.text:0000000000404bae\n.text:0000000000404bb1\n.text:0000000000404bb4\n.text:0000000000404bb7\n.text:0000000000404bbd\n.text:0000000000404bbf\n.text:0000000000404bc2\n.text:0000000000404bc5\n.text:0000000000404bca\n.text:0000000000404bce\n.text:0000000000404bd0\n.text:0000000000404bd3\n.text:0000000000404bd6\n.text:0000000000404bda\n.text:0000000000404bdd\n.text:0000000000404bdf\n.text:0000000000404be2\n.text:0000000000404be7\n.text:0000000000404bea\n.text:0000000000404bed\n.text:0000000000404bf1\n.text:0000000000404bf2\n.text:0000000000404bf4\n.text:0000000000404bf6\n.text:0000000000404bf8\n.text:0000000000404bfa\n.text:0000000000404bfb\n'
p762
tp763
sS'emit_ancillary_info'
p764
(S'\n__stdcall emit_ancillary_info()\n'
p765
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00408720;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("shuf",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "shuf";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00408a52,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00408a52);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4094c9;\u000a  if (__s2 == "shuf") {\u000a    uVar3 = 0x408c3e;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p766
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x408720\nMOV ESI,0x408c22\nNOP\nMOV EDI,0x408a52\nCALL 0x00401980\nTEST EAX,EAX\nJZ 0x00401e3b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401e20\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x408a52\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x408c81\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x408b0b\nMOV ECX,0x408c98\nXOR EAX,EAX\nCALL 0x00401a60\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401a50\nTEST RAX,RAX\nJZ 0x00401ec4\nMOV ESI,0x408cbf\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401720\nTEST EAX,EAX\nJZ 0x00401ec4\nXOR EDI,EDI\nMOV ESI,0x408cc3\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x408a52\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a60\nXOR EDI,EDI\nMOV ESI,0x408d08\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,RAX\nMOV R14D,0x408a52\nMOV EDI,0x1\nMOV EDX,0x408c98\nMOV ECX,0x408a52\nXOR EAX,EAX\nCALL 0x00401a60\nXOR EDI,EDI\nMOV ESI,0x408d27\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x408c3e\nMOV ECX,0x4094c9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401a60\n'
p767
S'41 56\n53\n50\nbb 20 87 40 00\nbe 22 8c 40 00\n66 90\nbf 52 8a 40 00\ne8 56 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 52 8a 40 00\n48 0f 45 d8\n31 ff\nbe 81 8c 40 00\nba 05 00 00 00\ne8 b4 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 0b 8b 40 00\nb9 98 8c 40 00\n31 c0\ne8 eb fb ff ff\nbf 05 00 00 00\n31 f6\ne8 cf fb ff ff\n48 85 c0\n74 3e\nbe bf 8c 40 00\nba 03 00 00 00\n48 89 c7\ne8 88 f8 ff ff\n85 c0\n74 28\n31 ff\nbe c3 8c 40 00\nba 05 00 00 00\ne8 63 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 52 8a 40 00\n31 c0\n48 89 ce\ne8 9c fb ff ff\n31 ff\nbe 08 8d 40 00\nba 05 00 00 00\ne8 3b f9 ff ff\n48 89 c6\n41 be 52 8a 40 00\nbf 01 00 00 00\nba 98 8c 40 00\nb9 52 8a 40 00\n31 c0\ne8 6c fb ff ff\n31 ff\nbe 27 8d 40 00\nba 05 00 00 00\ne8 0b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 3e 8c 40 00\nb9 c9 94 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 2e fb ff ff\n'
p768
S'.text:0000000000401e10\n.text:0000000000401e12\n.text:0000000000401e13\n.text:0000000000401e14\n.text:0000000000401e19\n.text:0000000000401e1e\n.text:0000000000401e20\n.text:0000000000401e25\n.text:0000000000401e2a\n.text:0000000000401e2c\n.text:0000000000401e2e\n.text:0000000000401e32\n.text:0000000000401e36\n.text:0000000000401e39\n.text:0000000000401e3b\n.text:0000000000401e3f\n.text:0000000000401e42\n.text:0000000000401e47\n.text:0000000000401e4b\n.text:0000000000401e4d\n.text:0000000000401e52\n.text:0000000000401e57\n.text:0000000000401e5c\n.text:0000000000401e5f\n.text:0000000000401e64\n.text:0000000000401e69\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e75\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e81\n.text:0000000000401e84\n.text:0000000000401e86\n.text:0000000000401e8b\n.text:0000000000401e90\n.text:0000000000401e93\n.text:0000000000401e98\n.text:0000000000401e9a\n.text:0000000000401e9c\n.text:0000000000401e9e\n.text:0000000000401ea3\n.text:0000000000401ea8\n.text:0000000000401ead\n.text:0000000000401eb0\n.text:0000000000401eb5\n.text:0000000000401eba\n.text:0000000000401ebc\n.text:0000000000401ebf\n.text:0000000000401ec4\n.text:0000000000401ec6\n.text:0000000000401ecb\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401ed8\n.text:0000000000401ede\n.text:0000000000401ee3\n.text:0000000000401ee8\n.text:0000000000401eed\n.text:0000000000401eef\n.text:0000000000401ef4\n.text:0000000000401ef6\n.text:0000000000401efb\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f08\n.text:0000000000401f0b\n.text:0000000000401f10\n.text:0000000000401f15\n.text:0000000000401f19\n.text:0000000000401f1e\n.text:0000000000401f20\n.text:0000000000401f23\n.text:0000000000401f26\n.text:0000000000401f2a\n.text:0000000000401f2b\n.text:0000000000401f2d\n'
p769
tp770
sS'version_etc_va'
p771
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p772
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p773
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004060d0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004060dc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004060f1\nINC R9\nCMP R9,0xa\nJC 0x004060b0\nMOV R8,RSP\nCALL 0x00405d10\nADD RSP,0x58\nRET\n'
p774
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p775
S'.text:00000000004060a0\n.text:00000000004060a4\n.text:00000000004060a7\n.text:00000000004060b0\n.text:00000000004060b3\n.text:00000000004060b7\n.text:00000000004060b9\n.text:00000000004060bc\n.text:00000000004060c0\n.text:00000000004060c4\n.text:00000000004060c7\n.text:00000000004060d0\n.text:00000000004060d4\n.text:00000000004060d8\n.text:00000000004060dc\n.text:00000000004060df\n.text:00000000004060e3\n.text:00000000004060e6\n.text:00000000004060e8\n.text:00000000004060eb\n.text:00000000004060ef\n.text:00000000004060f1\n.text:00000000004060f4\n.text:00000000004060f9\n.text:00000000004060fd\n'
p776
tp777
sS'xzalloc'
p778
(S'\n__stdcall xzalloc(size_t s)\n'
p779
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p780
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00406230\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004018d0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p781
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 94 b5 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p782
S'.text:0000000000406320\n.text:0000000000406322\n.text:0000000000406323\n.text:0000000000406324\n.text:0000000000406327\n.text:000000000040632c\n.text:000000000040632f\n.text:0000000000406331\n.text:0000000000406334\n.text:0000000000406337\n.text:000000000040633c\n.text:000000000040633f\n.text:0000000000406343\n.text:0000000000406344\n.text:0000000000406346\n'
p783
tp784
sS'hash_print_statistics'
p785
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p786
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x409e90,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_00409e40 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00409e40,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00409e58,DAT_00409e50));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00409e40,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00409e58,DAT_00409e50));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_00409e70) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00406eb0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00406e90\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00406ea0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00406ec0\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x409e90\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401b20\nMOV ESI,0x1\nMOV EDX,0x409ea8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401b20\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x00409e40]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x00409e50]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00409e70]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x409ec0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401b20\nMOV ESI,0x1\nMOV EDX,0x409ee1\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401b20\n'
p788
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 90 9e 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 6f ab ff ff\nbe 01 00 00 00\nba a8 9e 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 58 ab ff ff\n66 49 0f 6e cf\n66 0f 6f 15 6b 2e 00 00\n66 0f 62 ca\n66 0f 28 1d 6f 2e 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 7a 2e 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba c0 9e 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 f9 aa ff ff\nbe 01 00 00 00\nba e1 9e 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 d4 aa ff ff\n'
p789
S'.text:0000000000406f60\n.text:0000000000406f61\n.text:0000000000406f63\n.text:0000000000406f65\n.text:0000000000406f67\n.text:0000000000406f69\n.text:0000000000406f6a\n.text:0000000000406f6b\n.text:0000000000406f6e\n.text:0000000000406f71\n.text:0000000000406f76\n.text:0000000000406f79\n.text:0000000000406f7c\n.text:0000000000406f81\n.text:0000000000406f84\n.text:0000000000406f87\n.text:0000000000406f8c\n.text:0000000000406f8f\n.text:0000000000406f92\n.text:0000000000406f97\n.text:0000000000406f9a\n.text:0000000000406f9f\n.text:0000000000406fa4\n.text:0000000000406fa6\n.text:0000000000406fa9\n.text:0000000000406fac\n.text:0000000000406fb1\n.text:0000000000406fb6\n.text:0000000000406fbb\n.text:0000000000406fbd\n.text:0000000000406fc0\n.text:0000000000406fc3\n.text:0000000000406fc8\n.text:0000000000406fcd\n.text:0000000000406fd5\n.text:0000000000406fd9\n.text:0000000000406fe1\n.text:0000000000406fe5\n.text:0000000000406fea\n.text:0000000000406fee\n.text:0000000000406ff6\n.text:0000000000406ffb\n.text:0000000000406fff\n.text:0000000000407003\n.text:0000000000407008\n.text:000000000040700c\n.text:0000000000407010\n.text:0000000000407015\n.text:000000000040701a\n.text:000000000040701c\n.text:000000000040701f\n.text:0000000000407022\n.text:0000000000407027\n.text:000000000040702c\n.text:0000000000407031\n.text:0000000000407033\n.text:0000000000407036\n.text:0000000000407039\n.text:000000000040703d\n.text:000000000040703e\n.text:0000000000407040\n.text:0000000000407042\n.text:0000000000407044\n.text:0000000000407046\n.text:0000000000407047\n'
p790
tp791
sS'sparse_cmp_'
p792
(S'\n__stdcall sparse_cmp_(void * x, void * y)\n'
p793
V\u000a_Bool sparse_cmp_(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p794
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p795
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p796
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f69\n'
p797
tp798
sS'next_prime'
p799
(S'\n__stdcall next_prime(size_t candidate)\n'
p800
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p801
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x00407d8a\nJMP 0x00407d99\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00407d99\nMOV RDI,RBX\nCALL 0x00407db0\nTEST AL,AL\nJZ 0x00407d80\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p802
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p803
S'.text:0000000000407d50\n.text:0000000000407d52\n.text:0000000000407d53\n.text:0000000000407d54\n.text:0000000000407d58\n.text:0000000000407d5d\n.text:0000000000407d61\n.text:0000000000407d65\n.text:0000000000407d6c\n.text:0000000000407d70\n.text:0000000000407d72\n.text:0000000000407d80\n.text:0000000000407d84\n.text:0000000000407d88\n.text:0000000000407d8a\n.text:0000000000407d8d\n.text:0000000000407d92\n.text:0000000000407d94\n.text:0000000000407d96\n.text:0000000000407d99\n.text:0000000000407d9c\n.text:0000000000407da0\n.text:0000000000407da1\n.text:0000000000407da3\n'
p804
tp805
sS'isaac_seed'
p806
(S'\n__stdcall isaac_seed(isaac_state * s)\n'
p807
V\u000avoid isaac_seed(isaac_state *s)\u000a\u000a{\u000a  isaac_word iVar1;\u000a  isaac_word iVar2;\u000a  isaac_word iVar3;\u000a  isaac_word iVar4;\u000a  isaac_word iVar5;\u000a  isaac_word iVar6;\u000a  long lVar7;\u000a  isaac_word a;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  isaac_word a_00;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  long lVar14;\u000a  ulong uVar15;\u000a  long lVar16;\u000a  ulong uVar17;\u000a  isaac_word a_01;\u000a  \u000a  uVar9 = 0x647c4677a2884b7c;\u000a  uVar17 = 0xb9f8b322c73ac862;\u000a  uVar15 = 0x8c0ea5053d4712a0;\u000a  uVar8 = 0xb29b2e824a595524;\u000a  uVar13 = 0x82f053db8355e0ce;\u000a  a = 0x48fe4a0fa5a09315;\u000a  iVar5 = 0xae985bf2cbfc89ed;\u000a  a_00 = 0x98f5704f6c44c0ab;\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar11 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar11;\u000a    iVar5 = just(a_01);\u000a    uVar12 = a_00 + lVar10 ^ iVar5 >> 0x17;\u000a    a = (uVar8 + iVar2) - uVar12;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = iVar5 >> 0xe ^ a_01 + lVar16;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar11 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = iVar5 >> 0x11 ^ a + lVar14;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar12 - uVar8;\u000a    uVar13 = lVar10 * 0x4000 ^ lVar14 + a_01;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar12 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar12;\u000a    iVar5 = just(a_01);\u000a    uVar11 = iVar5 >> 0x17 ^ a_00 + lVar10;\u000a    a = (uVar8 + iVar2) - uVar11;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = a_01 + lVar16 ^ iVar5 >> 0xe;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar12 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = a + lVar14 ^ iVar5 >> 0x11;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar11 - uVar8;\u000a    uVar13 = lVar14 + a_01 ^ lVar10 * 0x4000;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  *(undefined4 *)&s->a = 0;\u000a  *(undefined4 *)((long)&s->a + 4) = 0;\u000a  *(undefined4 *)&s->b = 0;\u000a  *(undefined4 *)((long)&s->b + 4) = 0;\u000a  s->c = 0;\u000a  return;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,0x647c4677a2884b7c\nMOV R15,-0x46074cdd38c5379e\nMOV R14,-0x73f15afac2b8ed60\nMOV RBX,-0x4d64d17db5a6aadc\nMOV R13,-0x7d0fac247caa1f32\nMOV RDX,0x48fe4a0fa5a09315\nMOV RAX,-0x5167a40d34037613\nMOV R12,-0x670a8fb093bb3f55\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x28],RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x004057e0\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RBP\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x004057e0\nSHR RAX,0x17\nXOR R12,RAX\nADD R15,R14\nMOV qword ptr [RSP + 0x30],R15\nSUB RBX,R12\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nMOV RBP,R14\nXOR RBP,qword ptr [RSP + 0x18]\nSUB R13,RBP\nMOV RDI,RBX\nCALL 0x004057e0\nMOV R15,RAX\nSHR R15,0xe\nXOR R15,qword ptr [RSP + 0x30]\nADD RBX,R13\nMOV qword ptr [RSP + 0x18],RBX\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nMOV qword ptr [RSP + 0x10],R13\nMOV R13,qword ptr [RSP + 0x8]\nSUB R13,R14\nCALL 0x004057e0\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RBX,RAX\nSHR RBX,0x11\nXOR RBX,qword ptr [RSP + 0x18]\nMOV RDX,qword ptr [RSP]\nMOV RAX,R13\nADD RDX,RAX\nSUB R12,RBX\nSHL R13,0xe\nXOR R13,qword ptr [RSP + 0x10]\nADD RAX,R12\nMOV qword ptr [RDI + RCX*0x8],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RAX\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nJL 0x00405860\nXOR ECX,ECX\nNOP\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x004057e0\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x004057e0\nSHR RAX,0x17\nXOR RAX,R12\nADD R15,R14\nSUB RBX,RAX\nMOV R12,RAX\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nXOR R14,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP + 0x8],R14\nSUB R13,R14\nMOV RDI,RBX\nCALL 0x004057e0\nSHR RAX,0xe\nXOR R15,RAX\nADD RBX,R13\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nSUB RBP,R14\nCALL 0x004057e0\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nSHR RAX,0x11\nXOR RBX,RAX\nMOV RDX,qword ptr [RSP]\nADD RDX,RBP\nSUB R12,RBX\nMOV RAX,RBP\nSHL RAX,0xe\nXOR R13,RAX\nADD RBP,R12\nMOV RSI,qword ptr [RSP + 0x8]\nMOV qword ptr [RDI + RCX*0x8],RSI\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nMOV RAX,RBP\nMOV RBP,RSI\nJL 0x004059b0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x800 + RDI],XMM0\nMOV qword ptr [0x810 + RDI],0x0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 bd 7c 4b 88 a2 77 46 7c 64\n49 bf 62 c8 3a c7 22 b3 f8 b9\n49 be a0 12 47 3d 05 a5 0e 8c\n48 bb 24 55 59 4a 82 2e 9b b2\n49 bd ce e0 55 83 db 53 f0 82\n48 ba 15 93 a0 a5 0f 4a fe 48\n48 b8 ed 89 fc cb f2 5b 98 ae\n49 bc ab c0 44 6c 4f 70 f5 98\n31 c9\n48 89 7c 24 28\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 40 ff ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n48 89 6c 24 08\n49 29 ee\n4c 89 ff\ne8 0c ff ff ff\n48 c1 e8 17\n49 31 c4\n4d 01 f7\n4c 89 7c 24 30\n4c 29 e3\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 89 f5\n48 33 6c 24 18\n49 29 ed\n48 89 df\ne8 da fe ff ff\n49 89 c7\n49 c1 ef 0e\n4c 33 7c 24 30\n4c 01 eb\n48 89 5c 24 18\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 89 6c 24 10\n4c 8b 6c 24 08\n4d 29 f5\ne8 9a fe ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 89 c3\n48 c1 eb 11\n48 33 5c 24 18\n48 8b 14 24\n4c 89 e8\n48 01 c2\n49 29 dc\n49 c1 e5 0e\n4c 33 6c 24 10\n4c 01 e0\n48 89 2c cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 44 cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n0f 8c b3 fe ff ff\n31 c9\n90\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 f0 fd ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n49 29 ee\n4c 89 ff\ne8 c1 fd ff ff\n48 c1 e8 17\n4c 31 e0\n4d 01 f7\n48 29 c3\n49 89 c4\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 33 74 24 18\n4c 89 74 24 08\n4d 29 f5\n48 89 df\ne8 8f fd ff ff\n48 c1 e8 0e\n49 31 c7\n4c 01 eb\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 29 f5\ne8 63 fd ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 c1 e8 11\n48 31 c3\n48 8b 14 24\n48 01 ea\n49 29 dc\n48 89 e8\n48 c1 e0 0e\n49 31 c5\n4c 01 e5\n48 8b 74 24 08\n48 89 34 cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 6c cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n48 89 e8\n48 89 f5\n0f 8c c8 fe ff ff\n0f 57 c0\n0f 11 87 00 08 00 00\n48 c7 87 10 08 00 00 00 00 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:00000000004057f0\n.text:00000000004057f1\n.text:00000000004057f3\n.text:00000000004057f5\n.text:00000000004057f7\n.text:00000000004057f9\n.text:00000000004057fa\n.text:00000000004057fe\n.text:0000000000405808\n.text:0000000000405812\n.text:000000000040581c\n.text:0000000000405826\n.text:0000000000405830\n.text:000000000040583a\n.text:0000000000405844\n.text:000000000040584e\n.text:0000000000405850\n.text:0000000000405855\n.text:0000000000405860\n.text:0000000000405865\n.text:0000000000405869\n.text:000000000040586e\n.text:0000000000405873\n.text:0000000000405878\n.text:000000000040587d\n.text:0000000000405882\n.text:0000000000405886\n.text:000000000040588b\n.text:0000000000405890\n.text:0000000000405895\n.text:0000000000405898\n.text:000000000040589b\n.text:00000000004058a0\n.text:00000000004058a4\n.text:00000000004058a8\n.text:00000000004058ac\n.text:00000000004058af\n.text:00000000004058b2\n.text:00000000004058b6\n.text:00000000004058bb\n.text:00000000004058bf\n.text:00000000004058c4\n.text:00000000004058c9\n.text:00000000004058cc\n.text:00000000004058cf\n.text:00000000004058d4\n.text:00000000004058d8\n.text:00000000004058db\n.text:00000000004058de\n.text:00000000004058e3\n.text:00000000004058e6\n.text:00000000004058ea\n.text:00000000004058ef\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058fb\n.text:00000000004058fe\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590d\n.text:0000000000405912\n.text:0000000000405915\n.text:000000000040591a\n.text:000000000040591e\n.text:0000000000405921\n.text:0000000000405925\n.text:0000000000405928\n.text:000000000040592c\n.text:0000000000405931\n.text:0000000000405934\n.text:0000000000405939\n.text:000000000040593e\n.text:0000000000405941\n.text:0000000000405946\n.text:000000000040594b\n.text:0000000000405950\n.text:0000000000405953\n.text:0000000000405957\n.text:000000000040595c\n.text:0000000000405960\n.text:0000000000405963\n.text:0000000000405966\n.text:0000000000405969\n.text:000000000040596d\n.text:0000000000405972\n.text:0000000000405975\n.text:0000000000405979\n.text:000000000040597e\n.text:0000000000405983\n.text:0000000000405988\n.text:000000000040598d\n.text:0000000000405992\n.text:0000000000405997\n.text:000000000040599c\n.text:00000000004059a0\n.text:00000000004059a7\n.text:00000000004059ad\n.text:00000000004059af\n.text:00000000004059b0\n.text:00000000004059b5\n.text:00000000004059b9\n.text:00000000004059be\n.text:00000000004059c3\n.text:00000000004059c8\n.text:00000000004059cd\n.text:00000000004059d2\n.text:00000000004059d6\n.text:00000000004059db\n.text:00000000004059e0\n.text:00000000004059e5\n.text:00000000004059e8\n.text:00000000004059eb\n.text:00000000004059f0\n.text:00000000004059f4\n.text:00000000004059f8\n.text:00000000004059fc\n.text:00000000004059ff\n.text:0000000000405a02\n.text:0000000000405a06\n.text:0000000000405a0b\n.text:0000000000405a0f\n.text:0000000000405a14\n.text:0000000000405a17\n.text:0000000000405a1a\n.text:0000000000405a1f\n.text:0000000000405a23\n.text:0000000000405a26\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a2f\n.text:0000000000405a33\n.text:0000000000405a38\n.text:0000000000405a3c\n.text:0000000000405a41\n.text:0000000000405a46\n.text:0000000000405a49\n.text:0000000000405a4c\n.text:0000000000405a51\n.text:0000000000405a55\n.text:0000000000405a58\n.text:0000000000405a5b\n.text:0000000000405a5f\n.text:0000000000405a62\n.text:0000000000405a66\n.text:0000000000405a69\n.text:0000000000405a6d\n.text:0000000000405a72\n.text:0000000000405a75\n.text:0000000000405a78\n.text:0000000000405a7d\n.text:0000000000405a82\n.text:0000000000405a87\n.text:0000000000405a8b\n.text:0000000000405a8e\n.text:0000000000405a92\n.text:0000000000405a95\n.text:0000000000405a98\n.text:0000000000405a9b\n.text:0000000000405a9f\n.text:0000000000405aa2\n.text:0000000000405aa5\n.text:0000000000405aaa\n.text:0000000000405aae\n.text:0000000000405ab3\n.text:0000000000405ab8\n.text:0000000000405abd\n.text:0000000000405ac2\n.text:0000000000405ac7\n.text:0000000000405acc\n.text:0000000000405ad1\n.text:0000000000405ad5\n.text:0000000000405adc\n.text:0000000000405adf\n.text:0000000000405ae2\n.text:0000000000405ae8\n.text:0000000000405aeb\n.text:0000000000405af2\n.text:0000000000405afd\n.text:0000000000405b01\n.text:0000000000405b02\n.text:0000000000405b04\n.text:0000000000405b06\n.text:0000000000405b08\n.text:0000000000405b0a\n.text:0000000000405b0b\n'
p811
tp812
sS'just'
p813
(S'\n__stdcall just(isaac_word a)\n'
p814
V\u000aisaac_word just(isaac_word a)\u000a\u000a{\u000a  return a;\u000a}\u000a\u000a
p815
S'MOV RAX,RDI\nRET\n'
p816
S'48 89 f8\nc3\n'
p817
S'.text:00000000004057e0\n.text:00000000004057e3\n'
p818
tp819
sS'hash_insert'
p820
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p821
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p822
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x004078c0\nCMP EAX,-0x1\nJZ 0x00407bb1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00407bb3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p823
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p824
S'.text:0000000000407b90\n.text:0000000000407b91\n.text:0000000000407b95\n.text:0000000000407b98\n.text:0000000000407b9d\n.text:0000000000407ba2\n.text:0000000000407ba5\n.text:0000000000407ba7\n.text:0000000000407ba9\n.text:0000000000407baf\n.text:0000000000407bb1\n.text:0000000000407bb3\n.text:0000000000407bb6\n.text:0000000000407bba\n.text:0000000000407bbb\n'
p825
tp826
sS'gettext_quote'
p827
(S'\n__stdcall gettext_quote(char * msgid)\n'
p828
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00409360;\u000a        pcVar2 = &DAT_00409364;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401810\nCMP RAX,RBX\nJNZ 0x00404748\nCALL 0x00407e40\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404750\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004046f8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x409350\nMOV EAX,0x409354\nJMP 0x00404744\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404750\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404736\nCMP byte ptr [RBX],0x60\nMOV ECX,0x409360\nMOV EAX,0x409364\nJMP 0x00404744\nCMP R14D,0x9\nMOV ECX,0x409344\nMOV EAX,0x409348\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p830
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 67 d1 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 89 37 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 50 93 40 00\nb8 54 93 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 60 93 40 00\nb8 64 93 40 00\neb 0e\n41 83 fe 09\nb9 44 93 40 00\nb8 48 93 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p831
S'.text:0000000000404690\n.text:0000000000404691\n.text:0000000000404693\n.text:0000000000404694\n.text:0000000000404697\n.text:000000000040469a\n.text:000000000040469c\n.text:00000000004046a1\n.text:00000000004046a4\n.text:00000000004046a9\n.text:00000000004046ac\n.text:00000000004046b2\n.text:00000000004046b7\n.text:00000000004046ba\n.text:00000000004046bf\n.text:00000000004046c4\n.text:00000000004046c9\n.text:00000000004046cf\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046da\n.text:00000000004046dc\n.text:00000000004046e1\n.text:00000000004046e5\n.text:00000000004046e7\n.text:00000000004046e9\n.text:00000000004046ec\n.text:00000000004046f1\n.text:00000000004046f6\n.text:00000000004046f8\n.text:00000000004046fd\n.text:0000000000404702\n.text:0000000000404707\n.text:000000000040470d\n.text:0000000000404713\n.text:0000000000404716\n.text:0000000000404718\n.text:000000000040471a\n.text:000000000040471f\n.text:0000000000404723\n.text:0000000000404725\n.text:0000000000404727\n.text:000000000040472a\n.text:000000000040472f\n.text:0000000000404734\n.text:0000000000404736\n.text:000000000040473a\n.text:000000000040473f\n.text:0000000000404744\n.text:0000000000404748\n.text:0000000000404749\n.text:000000000040474b\n.text:000000000040474c\n'
p832
tp833
sS'getppid'
p834
(S'\n__stdcall getppid()\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getppid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getppid_0060d220)();\u000a  return _Var1;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060d220]\n'
p837
S'ff 25 2a b7 20 00\n'
p838
S'.plt:0000000000401af0\n'
p839
tp840
sS'freopen'
p841
(S'\n__stdcall freopen(char * __filename, char * __modes, FILE * __stream)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * freopen(char *__filename,char *__modes,FILE *__stream)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_freopen_0060d118)();\u000a  return pFVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060d118]\n'
p844
S'ff 25 32 b8 20 00\n'
p845
S'.plt:00000000004018e0\n'
p846
tp847
sS'shift_left'
p848
(S'\n__stdcall shift_left(randint x)\n'
p849
V\u000arandint shift_left(randint x)\u000a\u000a{\u000a  return x << 8;\u000a}\u000a\u000a
p850
S'SHL RDI,0x8\nMOV RAX,RDI\nRET\n'
p851
S'48 c1 e7 08\n48 89 f8\nc3\n'
p852
S'.text:0000000000404c00\n.text:0000000000404c04\n.text:0000000000404c07\n'
p853
tp854
sS'fclose'
p855
(S'\n__stdcall fclose(FILE * __stream)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060d098)();\u000a  return iVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060d098]\n'
p858
S'ff 25 b2 b8 20 00\n'
p859
S'.plt:00000000004017e0\n'
p860
tp861
sS'__ctype_get_mb_cur_max'
p862
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060d0b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060d0b8]\n'
p865
S'ff 25 92 b8 20 00\n'
p866
S'.plt:0000000000401820\n'
p867
tp868
sS'quotearg_n_style'
p869
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p870
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004043c0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404190\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p872
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p873
S'.text:0000000000404380\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404384\n.text:0000000000404388\n.text:000000000040438b\n.text:000000000040438d\n.text:0000000000404392\n.text:0000000000404395\n.text:000000000040439a\n.text:00000000004043a1\n.text:00000000004043a3\n.text:00000000004043a6\n.text:00000000004043a9\n.text:00000000004043ae\n.text:00000000004043b2\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043b6\n'
p874
tp875
sS'hash_clear'
p876
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p877
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p878
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040751a\nJMP 0x00407575\nTEST CL,CL\nJZ 0x00407509\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00407575\nCMP qword ptr [R14],0x0\nJZ 0x00407510\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00407500\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x0040754a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00407540\nJMP 0x00407500\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p879
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p880
S'.text:00000000004074e0\n.text:00000000004074e2\n.text:00000000004074e4\n.text:00000000004074e5\n.text:00000000004074e8\n.text:00000000004074eb\n.text:00000000004074ef\n.text:00000000004074f1\n.text:0000000000407500\n.text:0000000000407502\n.text:0000000000407504\n.text:0000000000407507\n.text:0000000000407509\n.text:000000000040750c\n.text:0000000000407510\n.text:0000000000407514\n.text:0000000000407518\n.text:000000000040751a\n.text:000000000040751e\n.text:0000000000407520\n.text:0000000000407524\n.text:0000000000407528\n.text:000000000040752b\n.text:000000000040752e\n.text:0000000000407531\n.text:0000000000407533\n.text:0000000000407540\n.text:0000000000407543\n.text:0000000000407545\n.text:0000000000407548\n.text:000000000040754a\n.text:0000000000407551\n.text:0000000000407555\n.text:0000000000407559\n.text:000000000040755d\n.text:0000000000407561\n.text:0000000000407565\n.text:0000000000407568\n.text:000000000040756b\n.text:000000000040756e\n.text:0000000000407571\n.text:0000000000407573\n.text:0000000000407575\n.text:0000000000407578\n.text:000000000040757d\n.text:000000000040757e\n.text:0000000000407580\n.text:0000000000407582\n'
p881
tp882
sS'randperm_new'
p883
(S'\n__stdcall randperm_new(randint_source * r, size_t h, size_t n)\n'
p884
V\u000asize_t * randperm_new(randint_source *r,size_t h,size_t n)\u000a\u000a{\u000a  bool bVar1;\u000a  randint *prVar2;\u000a  randint rVar3;\u000a  size_t i;\u000a  size_t *v;\u000a  sparse_map *local_38;\u000a  \u000a  if (h == 0) {\u000a    return (size_t *)0x0;\u000a  }\u000a  if (h == 1) {\u000a    prVar2 = (randint *)xmalloc(8);\u000a    rVar3 = randint_choose(r,n);\u000a    *prVar2 = rVar3;\u000a    return prVar2;\u000a  }\u000a  if (n < 0x20000) {\u000a    v = (size_t *)xnmalloc(n,8);\u000a    if (n != 0) goto LAB_00404d54;\u000aLAB_00404d71:\u000a    local_38 = (sparse_map *)0x0;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    if (n / h < 0x20) {\u000a      v = (size_t *)xnmalloc(n,8);\u000aLAB_00404d54:\u000a      i = 0;\u000a      do {\u000a        v[i] = i;\u000a        i = i + 1;\u000a      } while (n != i);\u000a      if (h == 0) goto LAB_00404dd9;\u000a      goto LAB_00404d71;\u000a    }\u000a    local_38 = sparse_new(h * 2);\u000a    if (local_38 == (sparse_map *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    v = (size_t *)xnmalloc(h,8);\u000a    bVar1 = true;\u000a  }\u000a  i = 0;\u000a  do {\u000a    rVar3 = randint_choose(r,n);\u000a    if (bVar1) {\u000a      sparse_swap(local_38,v,i,rVar3 + i);\u000a    }\u000a    else {\u000a      swap(v,i,rVar3 + i);\u000a    }\u000a    i = i + 1;\u000a    n = n - 1;\u000a  } while (h != i);\u000a  if (bVar1) {\u000a    sparse_free((Hash_table *)local_38);\u000a    return v;\u000a  }\u000aLAB_00404dd9:\u000a  v = (size_t *)xnrealloc(v,h,8);\u000a  return v;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00404ce0\nCMP R14,0x1\nJNZ 0x00404ce8\nMOV EDI,0x8\nCALL 0x00406230\nMOV R12,RAX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00404e10\nMOV qword ptr [R12],RAX\nJMP 0x00404dec\nXOR R12D,R12D\nJMP 0x00404dec\nCMP RBX,0x20000\nJC 0x00404d2d\nXOR EDX,EDX\nMOV RAX,RBX\nDIV R14\nCMP RAX,0x1f\nJBE 0x00404d44\nLEA RDI,[R14 + R14*0x1]\nCALL 0x00404e20\nMOV RCX,RAX\nMOV qword ptr [RSP],RCX\nTEST RAX,RAX\nJZ 0x00404dfe\nMOV ESI,0x8\nMOV RDI,R14\nCALL 0x00406210\nMOV R12,RAX\nMOV R13B,0x1\nJMP 0x00404d7a\nMOV ESI,0x8\nMOV RDI,RBX\nCALL 0x00406210\nMOV R12,RAX\nTEST RBX,RBX\nJNZ 0x00404d54\nJMP 0x00404d71\nMOV ESI,0x8\nMOV RDI,RBX\nCALL 0x00406210\nMOV R12,RAX\nXOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [R12 + RAX*0x8],RAX\nINC RAX\nCMP RBX,RAX\nJNZ 0x00404d60\nTEST R14,R14\nJZ 0x00404dd9\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nXOR R13D,R13D\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00404e10\nADD RAX,RBP\nTEST R13B,R13B\nJZ 0x00404db0\nMOV RDI,qword ptr [RSP]\nMOV RSI,R12\nMOV RDX,RBP\nMOV RCX,RAX\nCALL 0x00404e40\nJMP 0x00404dbe\nMOV RDI,R12\nMOV RSI,RBP\nMOV RDX,RAX\nCALL 0x00404f20\nINC RBP\nDEC RBX\nCMP R14,RBP\nJNZ 0x00404d80\nTEST R13B,R13B\nJZ 0x00404dd9\nMOV RDI,qword ptr [RSP]\nCALL 0x00404f40\nJMP 0x00404dec\nMOV EDX,0x8\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00406250\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004063c0\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n74 27\n49 83 fe 01\n75 29\nbf 08 00 00 00\ne8 67 15 00 00\n49 89 c4\n4c 89 ff\n48 89 de\ne8 39 01 00 00\n49 89 04 24\ne9 0c 01 00 00\n45 31 e4\ne9 04 01 00 00\n48 81 fb 00 00 02 00\n72 3c\n31 d2\n48 89 d8\n49 f7 f6\n48 83 f8 1f\n76 45\n4b 8d 3c 36\ne8 18 01 00 00\n48 89 c1\n48 89 0c 24\n48 85 c0\n0f 84 e6 00 00 00\nbe 08 00 00 00\n4c 89 f7\ne8 eb 14 00 00\n49 89 c4\n41 b5 01\neb 4d\nbe 08 00 00 00\n48 89 df\ne8 d6 14 00 00\n49 89 c4\n48 85 db\n75 12\neb 2d\nbe 08 00 00 00\n48 89 df\ne8 bf 14 00 00\n49 89 c4\n31 c0\n66 2e 0f 1f 84 00 00 00 00 00\n49 89 04 c4\n48 ff c0\n48 39 c3\n75 f4\n4d 85 f6\n74 68\n31 c0\n48 89 04 24\n45 31 ed\n31 ed\n0f 1f 40 00\n4c 89 ff\n48 89 de\ne8 85 00 00 00\n48 01 e8\n45 84 ed\n74 1d\n48 8b 3c 24\n4c 89 e6\n48 89 ea\n48 89 c1\ne8 9b 00 00 00\neb 17\n4c 89 e7\n48 89 ee\n48 89 c2\ne8 62 01 00 00\n48 ff c5\n48 ff cb\n49 39 ee\n75 b7\n45 84 ed\n74 0b\n48 8b 3c 24\ne8 69 01 00 00\neb 13\nba 08 00 00 00\n4c 89 e7\n4c 89 f6\ne8 67 14 00 00\n49 89 c4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 bd 15 00 00\n'
p887
S'.text:0000000000404ca0\n.text:0000000000404ca1\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404caa\n.text:0000000000404cab\n.text:0000000000404cae\n.text:0000000000404cb1\n.text:0000000000404cb4\n.text:0000000000404cb7\n.text:0000000000404cb9\n.text:0000000000404cbd\n.text:0000000000404cbf\n.text:0000000000404cc4\n.text:0000000000404cc9\n.text:0000000000404ccc\n.text:0000000000404ccf\n.text:0000000000404cd2\n.text:0000000000404cd7\n.text:0000000000404cdb\n.text:0000000000404ce0\n.text:0000000000404ce3\n.text:0000000000404ce8\n.text:0000000000404cef\n.text:0000000000404cf1\n.text:0000000000404cf3\n.text:0000000000404cf6\n.text:0000000000404cf9\n.text:0000000000404cfd\n.text:0000000000404cff\n.text:0000000000404d03\n.text:0000000000404d08\n.text:0000000000404d0b\n.text:0000000000404d0f\n.text:0000000000404d12\n.text:0000000000404d18\n.text:0000000000404d1d\n.text:0000000000404d20\n.text:0000000000404d25\n.text:0000000000404d28\n.text:0000000000404d2b\n.text:0000000000404d2d\n.text:0000000000404d32\n.text:0000000000404d35\n.text:0000000000404d3a\n.text:0000000000404d3d\n.text:0000000000404d40\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d49\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d56\n.text:0000000000404d60\n.text:0000000000404d64\n.text:0000000000404d67\n.text:0000000000404d6a\n.text:0000000000404d6c\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d73\n.text:0000000000404d77\n.text:0000000000404d7a\n.text:0000000000404d7c\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d86\n.text:0000000000404d8b\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d97\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404da0\n.text:0000000000404da5\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db9\n.text:0000000000404dbe\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dcc\n.text:0000000000404dce\n.text:0000000000404dd2\n.text:0000000000404dd7\n.text:0000000000404dd9\n.text:0000000000404dde\n.text:0000000000404de1\n.text:0000000000404de4\n.text:0000000000404de9\n.text:0000000000404dec\n.text:0000000000404def\n.text:0000000000404df3\n.text:0000000000404df4\n.text:0000000000404df6\n.text:0000000000404df8\n.text:0000000000404dfa\n.text:0000000000404dfc\n.text:0000000000404dfd\n.text:0000000000404dfe\n'
p888
tp889
sS'raw_hasher'
p890
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p891
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p892
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00408390\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p893
S'53\n48 89 f3\nbe 03 00 00 00\ne8 e2 0f 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p894
S'.text:00000000004073a0\n.text:00000000004073a1\n.text:00000000004073a4\n.text:00000000004073a9\n.text:00000000004073ae\n.text:00000000004073b0\n.text:00000000004073b3\n.text:00000000004073b6\n.text:00000000004073b7\n'
p895
tp896
sS'quote_n'
p897
(S'\n__stdcall quote_n(char * arg)\n'
p898
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV RDX,-0x1\nJMP 0x00404650\n'
p900
S'48 c7 c2 ff ff ff ff\neb d7\n'
p901
S'.text:0000000000404670\n.text:0000000000404677\n'
p902
tp903
sS'quotearg_alloc'
p904
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p905
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p906
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404000\n'
p907
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p908
S'.text:0000000000403ff0\n.text:0000000000403ff3\n.text:0000000000403ff5\n.text:0000000000403ff8\n'
p909
tp910
sS'close_stdout_set_file_name'
p911
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p912
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p913
S'MOV qword ptr [0x0060d330],RDI\nRET\n'
p914
S'48 89 3d 09 a5 20 00\nc3\n'
p915
S'.text:0000000000402e20\n.text:0000000000402e27\n'
p916
tp917
sS'check_tuning'
p918
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p919
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_00409e78 || (DAT_00409e7c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_00409e80)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_00409e78, fVar1 <= fVar4)) ||\u000a       ((DAT_00409e84 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p920
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x409efc\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00407443\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x00409e78]\nJBE 0x00407439\nMOVSS XMM1,dword ptr [0x00409e7c]\nUCOMISS XMM1,XMM0\nJBE 0x00407439\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x00409e80]\nJBE 0x00407439\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00407439\nADDSS XMM1,dword ptr [0x00409e78]\nUCOMISS XMM0,XMM1\nJBE 0x00407439\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x00409e84]\nUCOMISS XMM2,XMM0\nJC 0x00407439\nUCOMISS XMM0,XMM1\nJA 0x00407443\nMOV qword ptr [RDI + 0x28],0x409efc\nXOR EAX,EAX\nRET\n'
p921
S'48 8b 4f 28\nba fc 9e 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 8c 2a 00 00\n76 4b\nf3 0f 10 0d 86 2a 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 79 2a 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 5b 2a 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 55 2a 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 fc 9e 40 00\n31 c0\nc3\n'
p922
S'.text:00000000004073d0\n.text:00000000004073d4\n.text:00000000004073d9\n.text:00000000004073db\n.text:00000000004073de\n.text:00000000004073e0\n.text:00000000004073e5\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f6\n.text:00000000004073f9\n.text:00000000004073fb\n.text:0000000000407400\n.text:0000000000407407\n.text:0000000000407409\n.text:000000000040740d\n.text:0000000000407410\n.text:0000000000407413\n.text:0000000000407415\n.text:000000000040741d\n.text:0000000000407420\n.text:0000000000407422\n.text:0000000000407427\n.text:000000000040742f\n.text:0000000000407432\n.text:0000000000407434\n.text:0000000000407437\n.text:0000000000407439\n.text:0000000000407441\n.text:0000000000407443\n'
p923
tp924
sS'__libc_csu_init'
p925
(S'\n__stdcall __libc_csu_init()\n'
p926
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ce08]\nPUSH RBP\nLEA RBP,[0x60ce10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004016b0\nTEST RBP,RBP\nJZ 0x00408476\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00408460\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p928
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 49 20 00\n55\n48 8d 2d d6 49 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 5f 92 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p929
S'.text:0000000000408420\n.text:0000000000408422\n.text:0000000000408424\n.text:0000000000408427\n.text:0000000000408429\n.text:000000000040842b\n.text:0000000000408432\n.text:0000000000408433\n.text:000000000040843a\n.text:000000000040843b\n.text:000000000040843e\n.text:0000000000408441\n.text:0000000000408444\n.text:0000000000408448\n.text:000000000040844c\n.text:0000000000408451\n.text:0000000000408454\n.text:0000000000408456\n.text:0000000000408458\n.text:0000000000408460\n.text:0000000000408463\n.text:0000000000408466\n.text:0000000000408469\n.text:000000000040846d\n.text:0000000000408471\n.text:0000000000408474\n.text:0000000000408476\n.text:000000000040847a\n.text:000000000040847b\n.text:000000000040847c\n.text:000000000040847e\n.text:0000000000408480\n.text:0000000000408482\n.text:0000000000408484\n'
p930
tp931
sS'c_isdigit'
p932
(S'\n__stdcall c_isdigit()\n'
p933
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p934
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p935
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p936
S'.text:0000000000406cc0\n.text:0000000000406cc3\n.text:0000000000406cc6\n.text:0000000000406cc9\n'
p937
tp938
sS'hash_do_for_each'
p939
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p940
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p941
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00407247\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040723a\nTEST R13,R13\nJZ 0x0040723a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00407249\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00407220\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00407211\nJMP 0x00407249\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p942
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p943
S'.text:00000000004071f0\n.text:00000000004071f1\n.text:00000000004071f3\n.text:00000000004071f5\n.text:00000000004071f7\n.text:00000000004071f9\n.text:00000000004071fa\n.text:00000000004071fb\n.text:00000000004071fe\n.text:0000000000407201\n.text:0000000000407204\n.text:0000000000407208\n.text:000000000040720d\n.text:000000000040720f\n.text:0000000000407211\n.text:0000000000407216\n.text:0000000000407218\n.text:000000000040721b\n.text:000000000040721d\n.text:0000000000407220\n.text:0000000000407224\n.text:0000000000407227\n.text:000000000040722a\n.text:000000000040722c\n.text:000000000040722e\n.text:0000000000407231\n.text:0000000000407235\n.text:0000000000407238\n.text:000000000040723a\n.text:000000000040723e\n.text:0000000000407243\n.text:0000000000407245\n.text:0000000000407247\n.text:0000000000407249\n.text:000000000040724c\n.text:0000000000407250\n.text:0000000000407251\n.text:0000000000407253\n.text:0000000000407255\n.text:0000000000407257\n.text:0000000000407259\n.text:000000000040725a\n'
p944
tp945
sS'usage'
p946
(S'\n__stdcall usage()\n'
p947
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... [FILE]\u005cn  or:  %s -e [OPTION]... [ARG]...\u005cn  or:  %s -i LO-HI [OPTION]...\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,"Write a random permutation of the input lines to standard output.\u005cn",\u000a                            5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -e, --echo                treat each ARG as an input line\u005cn  -i, --input-range=LO-HI   treat each number LO through HI as an input line\u005cn  -n, --head-count=COUNT    output at most COUNT lines\u005cn  -o, --output=FILE         write result to FILE instead of standard output\u005cn      --random-source=FILE  get random bytes from FILE\u005cn  -r, --repeat              output lines can be repeated\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated     line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p948
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401d61\nXOR EDI,EDI\nMOV ESI,0x408790\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060d340]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x00401a60\nXOR EDI,EDI\nMOV ESI,0x4087ef\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401950\nCALL 0x00401db0\nCALL 0x00401de0\nXOR EDI,EDI\nMOV ESI,0x408832\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401950\nXOR EDI,EDI\nMOV ESI,0x4089af\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401950\nXOR EDI,EDI\nMOV ESI,0x4089ef\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401950\nXOR EDI,EDI\nMOV ESI,0x408a1c\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nCALL 0x00401950\nCALL 0x00401e10\nMOV EDI,EBX\nCALL 0x00401b00\nCALL 0x00401d70\nMOV EDI,EBX\nCALL 0x00401b00\n'
p949
S'53\n89 fb\n85 db\n0f 85 e6 00 00 00\n31 ff\nbe 90 87 40 00\nba 05 00 00 00\ne8 84 fb ff ff\n48 89 c1\n48 8b 15 aa b6 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 b5 fd ff ff\n31 ff\nbe ef 87 40 00\nba 05 00 00 00\ne8 54 fb ff ff\n48 8b 35 25 b6 20 00\n48 89 c7\ne8 85 fc ff ff\ne8 e0 00 00 00\ne8 0b 01 00 00\n31 ff\nbe 32 88 40 00\nba 05 00 00 00\ne8 2a fb ff ff\n48 8b 35 fb b5 20 00\n48 89 c7\ne8 5b fc ff ff\n31 ff\nbe af 89 40 00\nba 05 00 00 00\ne8 0a fb ff ff\n48 8b 35 db b5 20 00\n48 89 c7\ne8 3b fc ff ff\n31 ff\nbe ef 89 40 00\nba 05 00 00 00\ne8 ea fa ff ff\n48 8b 35 bb b5 20 00\n48 89 c7\ne8 1b fc ff ff\n31 ff\nbe 1c 8a 40 00\nba 05 00 00 00\ne8 ca fa ff ff\n48 8b 35 9b b5 20 00\n48 89 c7\ne8 fb fb ff ff\ne8 b6 00 00 00\n89 df\ne8 9f fd ff ff\ne8 0a 00 00 00\n89 df\ne8 93 fd ff ff\n'
p950
S'.text:0000000000401c70\n.text:0000000000401c71\n.text:0000000000401c73\n.text:0000000000401c75\n.text:0000000000401c7b\n.text:0000000000401c7d\n.text:0000000000401c82\n.text:0000000000401c87\n.text:0000000000401c8c\n.text:0000000000401c8f\n.text:0000000000401c96\n.text:0000000000401c9b\n.text:0000000000401c9d\n.text:0000000000401ca0\n.text:0000000000401ca3\n.text:0000000000401ca6\n.text:0000000000401cab\n.text:0000000000401cad\n.text:0000000000401cb2\n.text:0000000000401cb7\n.text:0000000000401cbc\n.text:0000000000401cc3\n.text:0000000000401cc6\n.text:0000000000401ccb\n.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cd7\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ced\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d06\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d17\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d2d\n.text:0000000000401d30\n.text:0000000000401d35\n.text:0000000000401d37\n.text:0000000000401d3c\n.text:0000000000401d41\n.text:0000000000401d46\n.text:0000000000401d4d\n.text:0000000000401d50\n.text:0000000000401d55\n.text:0000000000401d5a\n.text:0000000000401d5c\n.text:0000000000401d61\n.text:0000000000401d66\n.text:0000000000401d68\n'
p951
tp952
sS'quoting_options_from_style'
p953
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p954
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p955
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040440d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401700\n'
p956
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ee d2 ff ff\n'
p957
S'.text:00000000004043c0\n.text:00000000004043c4\n.text:00000000004043c7\n.text:00000000004043cc\n.text:00000000004043d1\n.text:00000000004043d5\n.text:00000000004043dd\n.text:00000000004043e0\n.text:00000000004043e2\n.text:00000000004043e4\n.text:00000000004043e8\n.text:00000000004043eb\n.text:00000000004043ef\n.text:00000000004043f4\n.text:00000000004043f9\n.text:00000000004043fd\n.text:0000000000404401\n.text:0000000000404405\n.text:0000000000404408\n.text:000000000040440c\n.text:000000000040440d\n'
p958
tp959
sS'strcpy'
p960
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p961
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060d048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x0060d048]\n'
p963
S'ff 25 02 b9 20 00\n'
p964
S'.plt:0000000000401740\n'
p965
tp966
sS'rotl8'
p967
(S'\n__stdcall rotl8()\n'
p968
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p969
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p970
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p971
S'.text:00000000004083e0\n.text:00000000004083e2\n.text:00000000004083e4\n.text:00000000004083e6\n.text:00000000004083eb\n.text:00000000004083ed\n.text:00000000004083ef\n.text:00000000004083f1\n.text:00000000004083f3\n'
p972
tp973
sS'c_isgraph'
p974
(S'\n__stdcall c_isgraph()\n'
p975
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p976
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p977
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p978
S'.text:0000000000406cd0\n.text:0000000000406cd3\n.text:0000000000406cd6\n.text:0000000000406cd9\n'
p979
tp980
sS'hash_get_next'
p981
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p982
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p983
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004070b0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00407156\nTEST DL,DL\nJZ 0x00407183\nTEST RCX,RCX\nJNZ 0x00407140\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00407188\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00407170\nJMP 0x0040718a\nMOV RCX,qword ptr [RCX]\nJMP 0x0040718a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p984
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p985
S'.text:0000000000407120\n.text:0000000000407122\n.text:0000000000407123\n.text:0000000000407124\n.text:0000000000407127\n.text:000000000040712a\n.text:000000000040712f\n.text:0000000000407132\n.text:0000000000407140\n.text:0000000000407143\n.text:0000000000407147\n.text:000000000040714a\n.text:000000000040714d\n.text:0000000000407150\n.text:0000000000407152\n.text:0000000000407154\n.text:0000000000407156\n.text:0000000000407159\n.text:000000000040715b\n.text:000000000040715f\n.text:0000000000407163\n.text:0000000000407170\n.text:0000000000407173\n.text:0000000000407175\n.text:0000000000407178\n.text:000000000040717c\n.text:000000000040717f\n.text:0000000000407181\n.text:0000000000407183\n.text:0000000000407186\n.text:0000000000407188\n.text:000000000040718a\n.text:000000000040718d\n.text:0000000000407191\n.text:0000000000407192\n.text:0000000000407194\n'
p986
tp987
sS'read_file'
p988
(S'\n__stdcall read_file(char * filename, size_t * length)\n'
p989
V\u000achar * read_file(char *filename,size_t *length)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = internal_read_file(filename,length,"r");\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'MOV EDX,0x409387\nJMP 0x00405c90\n'
p991
S'ba 87 93 40 00\neb 09\n'
p992
S'.text:0000000000405c80\n.text:0000000000405c85\n'
p993
tp994
sS'quotearg_buffer_restyled'
p995
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p996
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040343c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040343c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040343c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040343c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040343c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040343c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040343c_caseD_7;\u000aswitchD_0040343c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040343c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040343c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403f00;\u000aLAB_00403620:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403f09:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403f18:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040362b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040366f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040366f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403f18;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403e45;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403d50;\u000a    }\u000a    goto LAB_00403f18;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403e7a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403f18;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403ea9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403968;\u000a  case '\u005ca':\u000a    goto joined_r0x00403858;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403858;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403686_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403858;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403858;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403686_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403858:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403dbe;\u000a    }\u000a    goto LAB_00403f18;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403f18;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403f18;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403f18;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403f18;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403f18;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403686_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403e16;\u000a      goto joined_r0x00403e08;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403911:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403e08;\u000a      goto LAB_00403e16;\u000a    }\u000a    goto LAB_00403f18;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403f18;\u000a  }\u000a  goto joined_r0x00403d50;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403e7a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403ea9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403ea9:\u000a  if (1 < uVar10) {\u000aLAB_00403986:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403a42;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403911;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403a42:\u000a        if (bVar6 != 0) goto LAB_00403f18;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403968:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403986;\u000ajoined_r0x00403d50:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403d50:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403d77;\u000aLAB_00403db0:\u000a    if (bVar22) goto LAB_00403db5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403db0;\u000aLAB_00403d77:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403db5:\u000a      if (bVar6 != 0) goto LAB_00403f18;\u000aLAB_00403dbe:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403e08;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403e16:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403e08:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403e45:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403620;\u000aLAB_00403f00:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403f09;\u000a  goto LAB_0040362b;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401820\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403fe5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x408e20 + RAX*0x8]\nMOV EDI,0x409346\nMOV ESI,R15D\nCALL 0x00404690\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x409348\nMOV ESI,R15D\nCALL 0x00404690\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040349d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004034a0\nNOP\nCMP R12,RSI\nJNC 0x0040348e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403480\nJMP 0x004034a0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401830\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040356c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040356c\nMOV ECX,0x409344\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403566\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403507\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403534\nTEST RSI,RSI\nJZ 0x00403521\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x409348\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403542\nMOV ECX,0x409348\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040356c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403fbc\nMOV ECX,0x409344\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403f00\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403f09\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040366f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040366a\nCMP R11,-0x1\nJNZ 0x0040366a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401830\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004036c0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040391c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x408e78 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403f18\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403d70\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403d77\nJMP 0x00403db0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401940\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040370d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403671\nJMP 0x00403f18\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403671\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040369b\nCMP EBX,0x2\nJNZ 0x0040369b\nTEST R13,R13\nJNZ 0x0040369b\nJMP 0x00403f18\nCMP R11,-0x1\nJZ 0x00403af3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403b13\nJMP 0x0040369b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b24\nTEST R8B,R8B\nJNZ 0x00403f18\nCMP EBX,0x2\nJNZ 0x004037c8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004037c8\nCMP R12,RSI\nJNC 0x004037a3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004037b2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004037c1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004037d2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403c98\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403c98\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403c98\nCMP RCX,RSI\nJNC 0x0040380c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040381b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nJMP 0x00403d70\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403699\nJMP 0x0040387a\nMOV DL,0x74\nJMP 0x00403862\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403699\nJMP 0x0040387a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403699\nJMP 0x0040387a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403f18\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403699\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403dbe\nJMP 0x00403f18\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403699\nTEST R8B,R8B\nJNZ 0x00403f18\nCMP R12,RSI\nJNC 0x004038aa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004038b9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004038c8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403699\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403cab\nCMP EBX,0x2\nJNZ 0x00403699\nTEST R8B,R8B\nJZ 0x00403699\nJMP 0x00403f18\nCMP EBX,0x2\nJNZ 0x00403b44\nTEST R8B,R8B\nJNZ 0x00403f18\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403e16\nJMP 0x00403e39\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403b65\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401b60\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403d58\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403d58\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403a42\nJMP 0x00403a10\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004039f9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004039f6\nCMP R12,RSI\nJNC 0x004039db\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004039ea\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403a30\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403a30\nTEST BPL,0x1\nJZ 0x00403ad3\nCMP R12,RSI\nJNC 0x00403a24\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403ad3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403a10\nTEST R8B,R8B\nJNZ 0x00403f18\nCMP EBX,0x2\nJNZ 0x00403a8a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403a8a\nCMP R12,RSI\nJNC 0x00403a62\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a71\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a80\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403a94\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403aab\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403ac5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004039c0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403e16\nJMP 0x00403e39\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040369b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040369b\nJMP 0x00403f18\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403e45\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nJMP 0x00403d70\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403862\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403e16\nJMP 0x00403e39\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403b87\nMOV RDI,R10\nCALL 0x00401830\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401860\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403e5f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403e57\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403e66\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403c4e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403c46\nBT RDI,RDX\nJC 0x00403fb2\nINC RCX\nCMP RCX,R14\nJC 0x00403c30\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401b40\nTEST EAX,EAX\nJNZ 0x00403c63\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401b30\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403ba5\nJMP 0x00403ea9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nJMP 0x00403d70\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403699\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403699\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403699\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040369b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403ee2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403f18\nCMP R12,RSI\nJNC 0x00403d0e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403d21\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403d30\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403d3f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nJMP 0x00403d70\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403db0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403db5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403e10\nJMP 0x00403db5\nTEST BPL,BPL\nJZ 0x00403e10\nTEST R8B,R8B\nJNZ 0x00403f18\nCMP EBX,0x2\nJNZ 0x00403df8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403df8\nCMP R12,RSI\nJNC 0x00403dd3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403de2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403df1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403e02\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403e42\nJMP 0x00403e3e\nTEST DIL,0x1\nJZ 0x00403e39\nAND AL,0x1\nJNZ 0x00403e39\nCMP R12,RSI\nJNC 0x00403e24\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403e33\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403e42\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403f00\nJMP 0x00403620\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403ea4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403e9c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403ed8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403e7a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ea9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403968\nJMP 0x00403986\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ea9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004036a6\nJMP 0x00403d70\nCMP R13,R11\nJNZ 0x0040362b\nTEST R8B,R8B\nJZ 0x00403f72\nCMP EBX,0x2\nJNZ 0x00403f72\nTEST R12,R12\nJNZ 0x00403f72\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004033b0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403fa6\nTEST R8B,R8B\nJNZ 0x00403fa6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403fa6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403f99\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403f90\nCMP R12,RSI\nJNC 0x00403f5d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403f5d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403f18\nTEST RSI,RSI\nJZ 0x00403fc9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x409344\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040356c\nCALL 0x00401700\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 42 e4 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 20 8e 40 00\nbf 46 93 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 48 93 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 83 e3 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 44 93 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 48 93 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 48 93 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 44 93 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 e3 e1 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 78 8e 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 67 e2 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 27 e2 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 b1 dc ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 93 dc ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 e9 de ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 b2 de ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 44 93 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 16 d7 ff ff\n'
p999
S'.text:00000000004033b0\n.text:00000000004033b1\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b7\n.text:00000000004033b9\n.text:00000000004033ba\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033c7\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d4\n.text:00000000004033d9\n.text:00000000004033de\n.text:00000000004033e6\n.text:00000000004033ea\n.text:00000000004033f0\n.text:00000000004033f8\n.text:00000000004033fd\n.text:0000000000403405\n.text:000000000040340a\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403416\n.text:0000000000403419\n.text:000000000040341e\n.text:0000000000403421\n.text:0000000000403424\n.text:0000000000403427\n.text:000000000040342a\n.text:000000000040342c\n.text:000000000040342f\n.text:0000000000403434\n.text:0000000000403437\n.text:000000000040343c\n.text:0000000000403443\n.text:0000000000403448\n.text:000000000040344b\n.text:0000000000403450\n.text:0000000000403455\n.text:000000000040345a\n.text:000000000040345d\n.text:0000000000403462\n.text:0000000000403467\n.text:000000000040346c\n.text:000000000040346e\n.text:0000000000403470\n.text:0000000000403475\n.text:0000000000403477\n.text:000000000040347a\n.text:000000000040347c\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403483\n.text:0000000000403485\n.text:000000000040348a\n.text:000000000040348e\n.text:0000000000403494\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349b\n.text:000000000040349d\n.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034a8\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034b8\n.text:00000000004034bb\n.text:00000000004034be\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034c9\n.text:00000000004034ce\n.text:00000000004034d1\n.text:00000000004034d3\n.text:00000000004034d6\n.text:00000000004034d8\n.text:00000000004034da\n.text:00000000004034dd\n.text:00000000004034e2\n.text:00000000004034e7\n.text:00000000004034ec\n.text:00000000004034ef\n.text:00000000004034f5\n.text:00000000004034f7\n.text:00000000004034fa\n.text:00000000004034fd\n.text:0000000000403500\n.text:0000000000403502\n.text:0000000000403504\n.text:0000000000403507\n.text:000000000040350a\n.text:000000000040350f\n.text:0000000000403512\n.text:0000000000403514\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351e\n.text:0000000000403521\n.text:0000000000403526\n.text:000000000040352c\n.text:0000000000403532\n.text:0000000000403534\n.text:0000000000403539\n.text:000000000040353f\n.text:0000000000403542\n.text:0000000000403545\n.text:0000000000403548\n.text:000000000040354a\n.text:000000000040354f\n.text:0000000000403552\n.text:0000000000403558\n.text:000000000040355d\n.text:0000000000403563\n.text:0000000000403566\n.text:0000000000403569\n.text:000000000040356c\n.text:0000000000403574\n.text:0000000000403576\n.text:0000000000403578\n.text:000000000040357b\n.text:000000000040357f\n.text:0000000000403581\n.text:0000000000403584\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358d\n.text:0000000000403590\n.text:0000000000403593\n.text:0000000000403595\n.text:0000000000403599\n.text:000000000040359b\n.text:000000000040359f\n.text:00000000004035a2\n.text:00000000004035a5\n.text:00000000004035a8\n.text:00000000004035aa\n.text:00000000004035ae\n.text:00000000004035b7\n.text:00000000004035ba\n.text:00000000004035bc\n.text:00000000004035c0\n.text:00000000004035c2\n.text:00000000004035c6\n.text:00000000004035c8\n.text:00000000004035cb\n.text:00000000004035cf\n.text:00000000004035d1\n.text:00000000004035d4\n.text:00000000004035d8\n.text:00000000004035dd\n.text:00000000004035e0\n.text:00000000004035e4\n.text:00000000004035ec\n.text:00000000004035ef\n.text:00000000004035f2\n.text:00000000004035f4\n.text:00000000004035f8\n.text:00000000004035fb\n.text:00000000004035fd\n.text:0000000000403602\n.text:0000000000403606\n.text:000000000040360b\n.text:0000000000403610\n.text:0000000000403614\n.text:000000000040361a\n.text:0000000000403620\n.text:0000000000403625\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403632\n.text:0000000000403637\n.text:000000000040363b\n.text:000000000040363d\n.text:0000000000403641\n.text:0000000000403643\n.text:0000000000403645\n.text:0000000000403648\n.text:000000000040364d\n.text:000000000040364f\n.text:0000000000403654\n.text:0000000000403659\n.text:000000000040365d\n.text:0000000000403662\n.text:0000000000403667\n.text:000000000040366a\n.text:000000000040366d\n.text:000000000040366f\n.text:0000000000403671\n.text:0000000000403676\n.text:000000000040367a\n.text:0000000000403680\n.text:0000000000403682\n.text:0000000000403684\n.text:0000000000403686\n.text:000000000040368e\n.text:0000000000403693\n.text:0000000000403699\n.text:000000000040369b\n.text:00000000004036a0\n.text:00000000004036a6\n.text:00000000004036af\n.text:00000000004036b5\n.text:00000000004036c0\n.text:00000000004036c2\n.text:00000000004036c5\n.text:00000000004036c9\n.text:00000000004036d1\n.text:00000000004036d4\n.text:00000000004036d9\n.text:00000000004036db\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e5\n.text:00000000004036e8\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f5\n.text:00000000004036f9\n.text:00000000004036fe\n.text:0000000000403700\n.text:0000000000403702\n.text:0000000000403708\n.text:000000000040370d\n.text:0000000000403712\n.text:0000000000403715\n.text:000000000040371a\n.text:000000000040371e\n.text:0000000000403723\n.text:0000000000403728\n.text:000000000040372a\n.text:000000000040372c\n.text:0000000000403731\n.text:0000000000403733\n.text:0000000000403736\n.text:000000000040373c\n.text:000000000040373f\n.text:0000000000403745\n.text:0000000000403748\n.text:000000000040374e\n.text:0000000000403753\n.text:0000000000403757\n.text:000000000040375d\n.text:0000000000403760\n.text:0000000000403763\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376c\n.text:000000000040376f\n.text:0000000000403775\n.text:000000000040377a\n.text:000000000040377f\n.text:0000000000403785\n.text:0000000000403788\n.text:000000000040378e\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403795\n.text:0000000000403797\n.text:0000000000403799\n.text:000000000040379c\n.text:000000000040379e\n.text:00000000004037a3\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b7\n.text:00000000004037ba\n.text:00000000004037bc\n.text:00000000004037c1\n.text:00000000004037c5\n.text:00000000004037c8\n.text:00000000004037cb\n.text:00000000004037cd\n.text:00000000004037d2\n.text:00000000004037d7\n.text:00000000004037d9\n.text:00000000004037dc\n.text:00000000004037df\n.text:00000000004037e5\n.text:00000000004037e9\n.text:00000000004037ec\n.text:00000000004037f2\n.text:00000000004037f6\n.text:00000000004037f9\n.text:00000000004037fc\n.text:0000000000403802\n.text:0000000000403805\n.text:0000000000403807\n.text:000000000040380c\n.text:0000000000403811\n.text:0000000000403814\n.text:0000000000403816\n.text:000000000040381b\n.text:000000000040381f\n.text:0000000000403824\n.text:000000000040382a\n.text:000000000040382f\n.text:0000000000403831\n.text:0000000000403836\n.text:000000000040383c\n.text:000000000040383e\n.text:0000000000403840\n.text:0000000000403842\n.text:0000000000403844\n.text:0000000000403849\n.text:000000000040384f\n.text:0000000000403851\n.text:0000000000403853\n.text:0000000000403858\n.text:000000000040385e\n.text:0000000000403860\n.text:0000000000403862\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386f\n.text:0000000000403874\n.text:000000000040387a\n.text:000000000040387d\n.text:0000000000403880\n.text:0000000000403886\n.text:000000000040388b\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403897\n.text:000000000040389a\n.text:00000000004038a0\n.text:00000000004038a3\n.text:00000000004038a5\n.text:00000000004038aa\n.text:00000000004038af\n.text:00000000004038b2\n.text:00000000004038b4\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c1\n.text:00000000004038c3\n.text:00000000004038c8\n.text:00000000004038cc\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d6\n.text:00000000004038d9\n.text:00000000004038df\n.text:00000000004038e2\n.text:00000000004038e8\n.text:00000000004038eb\n.text:00000000004038f1\n.text:00000000004038f6\n.text:00000000004038f9\n.text:00000000004038ff\n.text:0000000000403902\n.text:0000000000403908\n.text:000000000040390b\n.text:000000000040390d\n.text:0000000000403911\n.text:0000000000403917\n.text:000000000040391c\n.text:0000000000403920\n.text:0000000000403929\n.text:000000000040392f\n.text:0000000000403934\n.text:0000000000403939\n.text:000000000040393e\n.text:0000000000403941\n.text:0000000000403946\n.text:0000000000403949\n.text:000000000040394c\n.text:0000000000403951\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403964\n.text:0000000000403968\n.text:000000000040396a\n.text:000000000040396f\n.text:0000000000403975\n.text:0000000000403978\n.text:000000000040397a\n.text:000000000040397d\n.text:0000000000403980\n.text:0000000000403986\n.text:000000000040398b\n.text:000000000040398e\n.text:0000000000403991\n.text:0000000000403994\n.text:0000000000403997\n.text:0000000000403999\n.text:000000000040399d\n.text:000000000040399f\n.text:00000000004039a4\n.text:00000000004039a9\n.text:00000000004039af\n.text:00000000004039c0\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039ca\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d4\n.text:00000000004039d6\n.text:00000000004039db\n.text:00000000004039e0\n.text:00000000004039e3\n.text:00000000004039e5\n.text:00000000004039ea\n.text:00000000004039ee\n.text:00000000004039f6\n.text:00000000004039f9\n.text:00000000004039fc\n.text:00000000004039fe\n.text:0000000000403a02\n.text:0000000000403a10\n.text:0000000000403a14\n.text:0000000000403a1a\n.text:0000000000403a1d\n.text:0000000000403a1f\n.text:0000000000403a24\n.text:0000000000403a27\n.text:0000000000403a29\n.text:0000000000403a30\n.text:0000000000403a33\n.text:0000000000403a38\n.text:0000000000403a3b\n.text:0000000000403a40\n.text:0000000000403a42\n.text:0000000000403a45\n.text:0000000000403a4b\n.text:0000000000403a4e\n.text:0000000000403a50\n.text:0000000000403a54\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5b\n.text:0000000000403a5d\n.text:0000000000403a62\n.text:0000000000403a67\n.text:0000000000403a6a\n.text:0000000000403a6c\n.text:0000000000403a71\n.text:0000000000403a76\n.text:0000000000403a79\n.text:0000000000403a7b\n.text:0000000000403a80\n.text:0000000000403a84\n.text:0000000000403a86\n.text:0000000000403a8a\n.text:0000000000403a8d\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9c\n.text:0000000000403a9e\n.text:0000000000403aa1\n.text:0000000000403aa4\n.text:0000000000403aa7\n.text:0000000000403aab\n.text:0000000000403ab0\n.text:0000000000403ab3\n.text:0000000000403ab5\n.text:0000000000403ab8\n.text:0000000000403abb\n.text:0000000000403abe\n.text:0000000000403ac1\n.text:0000000000403ac5\n.text:0000000000403ac9\n.text:0000000000403acd\n.text:0000000000403ad1\n.text:0000000000403ad3\n.text:0000000000403ad7\n.text:0000000000403ada\n.text:0000000000403ae0\n.text:0000000000403ae4\n.text:0000000000403ae8\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403af9\n.text:0000000000403afe\n.text:0000000000403b01\n.text:0000000000403b03\n.text:0000000000403b06\n.text:0000000000403b0d\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b19\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b29\n.text:0000000000403b2f\n.text:0000000000403b32\n.text:0000000000403b34\n.text:0000000000403b39\n.text:0000000000403b3f\n.text:0000000000403b44\n.text:0000000000403b46\n.text:0000000000403b4b\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b56\n.text:0000000000403b5a\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b71\n.text:0000000000403b75\n.text:0000000000403b77\n.text:0000000000403b7a\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b8b\n.text:0000000000403b90\n.text:0000000000403b92\n.text:0000000000403b96\n.text:0000000000403b98\n.text:0000000000403ba0\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bae\n.text:0000000000403bb2\n.text:0000000000403bba\n.text:0000000000403bbd\n.text:0000000000403bc2\n.text:0000000000403bc5\n.text:0000000000403bc8\n.text:0000000000403bcd\n.text:0000000000403bd0\n.text:0000000000403bd3\n.text:0000000000403bd9\n.text:0000000000403bdd\n.text:0000000000403be7\n.text:0000000000403bed\n.text:0000000000403bf1\n.text:0000000000403bf6\n.text:0000000000403bfc\n.text:0000000000403c00\n.text:0000000000403c03\n.text:0000000000403c07\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c13\n.text:0000000000403c17\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c23\n.text:0000000000403c27\n.text:0000000000403c2c\n.text:0000000000403c30\n.text:0000000000403c34\n.text:0000000000403c37\n.text:0000000000403c3a\n.text:0000000000403c3c\n.text:0000000000403c40\n.text:0000000000403c46\n.text:0000000000403c49\n.text:0000000000403c4c\n.text:0000000000403c4e\n.text:0000000000403c52\n.text:0000000000403c57\n.text:0000000000403c59\n.text:0000000000403c5b\n.text:0000000000403c63\n.text:0000000000403c68\n.text:0000000000403c6b\n.text:0000000000403c73\n.text:0000000000403c76\n.text:0000000000403c79\n.text:0000000000403c7e\n.text:0000000000403c81\n.text:0000000000403c83\n.text:0000000000403c88\n.text:0000000000403c8d\n.text:0000000000403c93\n.text:0000000000403c98\n.text:0000000000403c9b\n.text:0000000000403ca0\n.text:0000000000403ca6\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb6\n.text:0000000000403cba\n.text:0000000000403cbd\n.text:0000000000403cc3\n.text:0000000000403cc9\n.text:0000000000403ccf\n.text:0000000000403cd4\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdf\n.text:0000000000403ce3\n.text:0000000000403ce5\n.text:0000000000403cef\n.text:0000000000403cf3\n.text:0000000000403cf9\n.text:0000000000403cfc\n.text:0000000000403cfe\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d16\n.text:0000000000403d1a\n.text:0000000000403d1c\n.text:0000000000403d21\n.text:0000000000403d26\n.text:0000000000403d29\n.text:0000000000403d2b\n.text:0000000000403d30\n.text:0000000000403d35\n.text:0000000000403d38\n.text:0000000000403d3a\n.text:0000000000403d3f\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d48\n.text:0000000000403d4b\n.text:0000000000403d50\n.text:0000000000403d56\n.text:0000000000403d58\n.text:0000000000403d5d\n.text:0000000000403d62\n.text:0000000000403d68\n.text:0000000000403d70\n.text:0000000000403d75\n.text:0000000000403d77\n.text:0000000000403d7c\n.text:0000000000403d7f\n.text:0000000000403d81\n.text:0000000000403d84\n.text:0000000000403d86\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d8f\n.text:0000000000403d91\n.text:0000000000403d99\n.text:0000000000403d9c\n.text:0000000000403d9e\n.text:0000000000403da0\n.text:0000000000403db0\n.text:0000000000403db3\n.text:0000000000403db5\n.text:0000000000403db8\n.text:0000000000403dbe\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dc9\n.text:0000000000403dcc\n.text:0000000000403dce\n.text:0000000000403dd3\n.text:0000000000403dd8\n.text:0000000000403ddb\n.text:0000000000403ddd\n.text:0000000000403de2\n.text:0000000000403de7\n.text:0000000000403dea\n.text:0000000000403dec\n.text:0000000000403df1\n.text:0000000000403df5\n.text:0000000000403df8\n.text:0000000000403dfb\n.text:0000000000403dfd\n.text:0000000000403e02\n.text:0000000000403e05\n.text:0000000000403e08\n.text:0000000000403e0a\n.text:0000000000403e10\n.text:0000000000403e14\n.text:0000000000403e16\n.text:0000000000403e18\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e1f\n.text:0000000000403e24\n.text:0000000000403e29\n.text:0000000000403e2c\n.text:0000000000403e2e\n.text:0000000000403e33\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3c\n.text:0000000000403e3e\n.text:0000000000403e42\n.text:0000000000403e45\n.text:0000000000403e48\n.text:0000000000403e4c\n.text:0000000000403e52\n.text:0000000000403e57\n.text:0000000000403e5f\n.text:0000000000403e64\n.text:0000000000403e66\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e7a\n.text:0000000000403e7f\n.text:0000000000403e83\n.text:0000000000403e85\n.text:0000000000403e8a\n.text:0000000000403e8d\n.text:0000000000403e90\n.text:0000000000403e92\n.text:0000000000403e9a\n.text:0000000000403e9c\n.text:0000000000403ea4\n.text:0000000000403ea9\n.text:0000000000403ead\n.text:0000000000403eb2\n.text:0000000000403eb7\n.text:0000000000403ebb\n.text:0000000000403ec0\n.text:0000000000403ec5\n.text:0000000000403ec9\n.text:0000000000403ecd\n.text:0000000000403ed3\n.text:0000000000403ed8\n.text:0000000000403ee0\n.text:0000000000403ee2\n.text:0000000000403ee4\n.text:0000000000403ee8\n.text:0000000000403eed\n.text:0000000000403ef3\n.text:0000000000403f00\n.text:0000000000403f03\n.text:0000000000403f09\n.text:0000000000403f0c\n.text:0000000000403f0e\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f18\n.text:0000000000403f20\n.text:0000000000403f26\n.text:0000000000403f2a\n.text:0000000000403f2d\n.text:0000000000403f31\n.text:0000000000403f36\n.text:0000000000403f3a\n.text:0000000000403f3e\n.text:0000000000403f41\n.text:0000000000403f44\n.text:0000000000403f47\n.text:0000000000403f4b\n.text:0000000000403f4f\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f5a\n.text:0000000000403f5d\n.text:0000000000403f60\n.text:0000000000403f67\n.text:0000000000403f68\n.text:0000000000403f6a\n.text:0000000000403f6c\n.text:0000000000403f6e\n.text:0000000000403f70\n.text:0000000000403f71\n.text:0000000000403f72\n.text:0000000000403f7a\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f84\n.text:0000000000403f86\n.text:0000000000403f88\n.text:0000000000403f8a\n.text:0000000000403f8d\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f99\n.text:0000000000403f9c\n.text:0000000000403f9f\n.text:0000000000403fa2\n.text:0000000000403fa4\n.text:0000000000403fa6\n.text:0000000000403fa9\n.text:0000000000403fab\n.text:0000000000403fb0\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fbc\n.text:0000000000403fbf\n.text:0000000000403fc1\n.text:0000000000403fc6\n.text:0000000000403fc9\n.text:0000000000403fce\n.text:0000000000403fd1\n.text:0000000000403fd7\n.text:0000000000403fdd\n.text:0000000000403fe0\n.text:0000000000403fe5\n'
p1000
tp1001
sS'simple_new'
p1002
(S'\n__stdcall simple_new(FILE * source, void * handler_arg)\n'
p1003
V\u000arandread_source * simple_new(FILE *source,void *handler_arg)\u000a\u000a{\u000a  randread_source *prVar1;\u000a  \u000a  prVar1 = (randread_source *)xmalloc(0x1038);\u000a  prVar1->source = source;\u000a  prVar1->handler = randread_error;\u000a  prVar1->handler_arg = handler_arg;\u000a  return prVar1;\u000a}\u000a\u000a
p1004
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,0x1038\nCALL 0x00406230\nMOV qword ptr [RAX],RBX\nMOV qword ptr [RAX + 0x8],0x4053d0\nMOV qword ptr [RAX + 0x10],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1005
S'41 56\n53\n50\n49 89 f6\n48 89 fb\nbf 38 10 00 00\ne8 fc 11 00 00\n48 89 18\n48 c7 40 08 d0 53 40 00\n4c 89 70 10\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1006
S'.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405023\n.text:0000000000405024\n.text:0000000000405027\n.text:000000000040502a\n.text:000000000040502f\n.text:0000000000405034\n.text:0000000000405037\n.text:000000000040503f\n.text:0000000000405043\n.text:0000000000405047\n.text:0000000000405048\n.text:000000000040504a\n'
p1007
tp1008
sS'rotr_sz'
p1009
(S'\n__stdcall rotr_sz(size_t x)\n'
p1010
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1011
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1012
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1013
S'.text:0000000000408390\n.text:0000000000408392\n.text:0000000000408395\n.text:0000000000408398\n'
p1014
tp1015
sS'getgid'
p1016
(S'\n__stdcall getgid()\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getgid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getgid_0060d180)();\u000a  return _Var1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060d180]\n'
p1019
S'ff 25 ca b7 20 00\n'
p1020
S'.plt:00000000004019b0\n'
p1021
tp1022
sS'set_quoting_style'
p1023
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1024
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1025
S'TEST RDI,RDI\nMOV EAX,0x60d350\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1026
S'48 85 ff\nb8 50 d3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1027
S'.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403298\n.text:000000000040329c\n.text:000000000040329e\n'
p1028
tp1029
sS'write_random_lines'
p1030
(S'\n__stdcall write_random_lines(randint_source * s, size_t count, char * * lines, size_t n_lines)\n'
p1031
V\u000aint write_random_lines(randint_source *s,size_t count,char **lines,size_t n_lines)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *__ptr;\u000a  randint rVar2;\u000a  char *pcVar3;\u000a  ulong uVar4;\u000a  \u000a  if (count != 0) {\u000a    uVar4 = 0;\u000a    do {\u000a      rVar2 = randint_choose(s,n_lines);\u000a      pcVar1 = lines[rVar2 + 1];\u000a      __ptr = lines[rVar2];\u000a      pcVar3 = (char *)fwrite_unlocked(__ptr,1,(size_t)(pcVar1 + -(long)__ptr),stdout);\u000a      if (pcVar3 != pcVar1 + -(long)__ptr) {\u000a        return -1;\u000a      }\u000a      uVar4 = uVar4 + 1;\u000a    } while (uVar4 < count);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R13,RDX\nMOV R15,RSI\nMOV R12,RDI\nTEST R15,R15\nJZ 0x00402c79\nXOR EBP,EBP\nNOP\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00402e10\nMOV RBX,qword ptr [R13 + RAX*0x8 + 0x8]\nMOV RDI,qword ptr [R13 + RAX*0x8]\nSUB RBX,RDI\nMOV RCX,qword ptr [0x0060d2e8]\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x00401a20\nCMP RAX,RBX\nJNZ 0x00402c7d\nINC RBP\nCMP RBP,R15\nJC 0x00402c40\nXOR EAX,EAX\nJMP 0x00402c82\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1033
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d5\n49 89 f7\n49 89 fc\n4d 85 ff\n74 3d\n31 ed\n66 90\n4c 89 e7\n4c 89 f6\ne8 c5 01 00 00\n49 8b 5c c5 08\n49 8b 7c c5 00\n48 29 fb\n48 8b 0d 89 a6 20 00\nbe 01 00 00 00\n48 89 da\ne8 b4 ed ff ff\n48 39 d8\n75 0c\n48 ff c5\n4c 39 fd\n72 c7\n31 c0\neb 05\nb8 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1034
S'.text:0000000000402c20\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c25\n.text:0000000000402c27\n.text:0000000000402c29\n.text:0000000000402c2a\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c31\n.text:0000000000402c34\n.text:0000000000402c37\n.text:0000000000402c3a\n.text:0000000000402c3c\n.text:0000000000402c3e\n.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c46\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c55\n.text:0000000000402c58\n.text:0000000000402c5f\n.text:0000000000402c64\n.text:0000000000402c67\n.text:0000000000402c6c\n.text:0000000000402c6f\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c77\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c7d\n.text:0000000000402c82\n.text:0000000000402c86\n.text:0000000000402c87\n.text:0000000000402c89\n.text:0000000000402c8b\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c90\n'
p1035
tp1036
sS'hash_get_entries'
p1037
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p1038
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p1039
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x004071e3\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x004071d8\nTEST R8,R8\nJZ 0x004071d8\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x004071e2\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x004071c0\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x004071ab\nRET\nXOR EAX,EAX\nRET\n'
p1040
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p1041
S'.text:00000000004071a0\n.text:00000000004071a3\n.text:00000000004071a7\n.text:00000000004071a9\n.text:00000000004071ab\n.text:00000000004071af\n.text:00000000004071b1\n.text:00000000004071b4\n.text:00000000004071b6\n.text:00000000004071b9\n.text:00000000004071c0\n.text:00000000004071c3\n.text:00000000004071c5\n.text:00000000004071c8\n.text:00000000004071cc\n.text:00000000004071cf\n.text:00000000004071d3\n.text:00000000004071d6\n.text:00000000004071d8\n.text:00000000004071dc\n.text:00000000004071e0\n.text:00000000004071e2\n.text:00000000004071e3\n.text:00000000004071e5\n'
p1042
tp1043
sS'textdomain'
p1044
(S'\n__stdcall textdomain()\n'
p1045
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060d090)();\u000a  return;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060d090]\n'
p1047
S'ff 25 ba b8 20 00\n'
p1048
S'.plt:00000000004017d0\n'
p1049
tp1050
sS'xmemdup'
p1051
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1052
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1053
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00406230\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401990\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1054
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 fc b5 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1055
S'.text:0000000000406370\n.text:0000000000406372\n.text:0000000000406374\n.text:0000000000406375\n.text:0000000000406378\n.text:000000000040637b\n.text:000000000040637e\n.text:0000000000406383\n.text:0000000000406386\n.text:0000000000406389\n.text:000000000040638c\n.text:000000000040638f\n.text:0000000000406394\n.text:0000000000406397\n.text:0000000000406398\n.text:000000000040639a\n.text:000000000040639c\n'
p1056
tp1057
sS'readisaac'
p1058
(S'\n__stdcall readisaac(isaac * isaac, void * p, size_t size)\n'
p1059
V\u000avoid readisaac(isaac *isaac,void *p,size_t size)\u000a\u000a{\u000a  isaac_state *s;\u000a  isaac_word *result;\u000a  ulong __n;\u000a  isaac_word *__src;\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  \u000a  __n = isaac->buffered;\u000a  result = (isaac_word *)isaac->data;\u000a  __src = (isaac_word *)((long)result + (0x800 - __n));\u000a  uVar1 = __n;\u000a  if (__n < size) {\u000a    s = &isaac->state;\u000a    uVar1 = 0x800;\u000a    do {\u000a      memcpy(p,__src,__n);\u000a      p = (void *)((long)p + __n);\u000a      size = size - __n;\u000a      if (((ulong)p & 7) == 0) {\u000a        sVar2 = 0;\u000a        goto LAB_00405370;\u000a      }\u000a      isaac_refill(s,result);\u000a      __n = 0x800;\u000a      __src = result;\u000a    } while (0x800 < size);\u000a  }\u000aLAB_0040533a:\u000a  memcpy(p,__src,size);\u000a  sVar2 = uVar1 - size;\u000a  goto LAB_0040534b;\u000a  while( true ) {\u000a    isaac_refill(s,(isaac_word *)p);\u000a    p = (isaac_word *)p + 0x100;\u000a    size = size + 0xfffff800;\u000a    if (size == 0) break;\u000aLAB_00405370:\u000a    if (size < 0x800) {\u000a      isaac_refill(s,result);\u000a      __src = result;\u000a      uVar1 = 0x800;\u000a      goto LAB_0040533a;\u000a    }\u000a  }\u000aLAB_0040534b:\u000a  isaac->buffered = sVar2;\u000a  return;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV RBX,RSI\nMOV RBP,qword ptr [RDI]\nLEA R12,[0x820 + RDI]\nMOV RSI,R12\nSUB RSI,RBP\nADD RSI,0x800\nCMP RBP,R15\nMOV qword ptr [RSP],RDI\nJNC 0x00405334\nLEA R13,[RDI + 0x8]\nMOV R14D,0x800\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x00401990\nADD RBX,RBP\nSUB R15,RBP\nTEST BL,0x7\nJZ 0x00405361\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00405430\nCMP R15,0x800\nMOV RSI,R12\nMOV EBP,0x800\nJA 0x00405300\nJMP 0x0040533a\nMOV R14,RBP\nMOV R12,RSI\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00401990\nSUB R14,R15\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX],R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP R15,0x800\nJC 0x00405396\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00405430\nADD RBX,0x800\nADD R15,0xfffff800\nJNZ 0x00405370\nJMP 0x0040534b\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00405430\nMOV R14D,0x800\nJMP 0x0040533a\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n48 89 f3\n48 8b 2f\n4c 8d a7 20 08 00 00\n4c 89 e6\n48 29 ee\n48 81 c6 00 08 00 00\n4c 39 fd\n48 89 3c 24\n73 43\n4c 8d 6f 08\n41 be 00 08 00 00\n0f 1f 44 00 00\n48 89 df\n48 89 ea\ne8 85 c6 ff ff\n48 01 eb\n49 29 ef\nf6 c3 07\n74 4b\n4c 89 ef\n4c 89 e6\ne8 0f 01 00 00\n49 81 ff 00 08 00 00\n4c 89 e6\nbd 00 08 00 00\n77 ce\neb 06\n49 89 ee\n49 89 f4\n48 89 df\n4c 89 e6\n4c 89 fa\ne8 48 c6 ff ff\n4d 29 fe\n48 8b 04 24\n4c 89 30\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 81 ff 00 08 00 00\n72 1d\n4c 89 ef\n48 89 de\ne8 ac 00 00 00\n48 81 c3 00 08 00 00\n49 81 c7 00 f8 ff ff\n75 dc\neb b5\n4c 89 ef\n4c 89 e6\ne8 8f 00 00 00\n41 be 00 08 00 00\neb 91\n'
p1062
S'.text:00000000004052c0\n.text:00000000004052c1\n.text:00000000004052c3\n.text:00000000004052c5\n.text:00000000004052c7\n.text:00000000004052c9\n.text:00000000004052ca\n.text:00000000004052cb\n.text:00000000004052ce\n.text:00000000004052d1\n.text:00000000004052d4\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e1\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052ef\n.text:00000000004052f1\n.text:00000000004052f5\n.text:00000000004052fb\n.text:0000000000405300\n.text:0000000000405303\n.text:0000000000405306\n.text:000000000040530b\n.text:000000000040530e\n.text:0000000000405311\n.text:0000000000405314\n.text:0000000000405316\n.text:0000000000405319\n.text:000000000040531c\n.text:0000000000405321\n.text:0000000000405328\n.text:000000000040532b\n.text:0000000000405330\n.text:0000000000405332\n.text:0000000000405334\n.text:0000000000405337\n.text:000000000040533a\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405343\n.text:0000000000405348\n.text:000000000040534b\n.text:000000000040534f\n.text:0000000000405352\n.text:0000000000405356\n.text:0000000000405357\n.text:0000000000405359\n.text:000000000040535b\n.text:000000000040535d\n.text:000000000040535f\n.text:0000000000405360\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405370\n.text:0000000000405377\n.text:0000000000405379\n.text:000000000040537c\n.text:000000000040537f\n.text:0000000000405384\n.text:000000000040538b\n.text:0000000000405392\n.text:0000000000405394\n.text:0000000000405396\n.text:0000000000405399\n.text:000000000040539c\n.text:00000000004053a1\n.text:00000000004053a7\n'
p1063
tp1064
sS'fread'
p1065
(S'\n__stdcall fread(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_0060d070)();\u000a  return sVar1;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x0060d070]\n'
p1068
S'ff 25 da b8 20 00\n'
p1069
S'.plt:0000000000401790\n'
p1070
tp1071
sS'get_quoting_style'
p1072
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1073
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1074
S'TEST RDI,RDI\nMOV EAX,0x60d350\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1075
S'48 85 ff\nb8 50 d3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1076
S'.text:0000000000403280\n.text:0000000000403283\n.text:0000000000403288\n.text:000000000040328c\n.text:000000000040328e\n'
p1077
tp1078
sS'fread_unlocked'
p1079
(S'\n__stdcall fread_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_unlocked_0060d088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x0060d088]\n'
p1082
S'ff 25 c2 b8 20 00\n'
p1083
S'.plt:00000000004017c0\n'
p1084
tp1085
sS'ferror_unlocked'
p1086
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060d158)();\u000a  return iVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0060d158]\n'
p1089
S'ff 25 f2 b7 20 00\n'
p1090
S'.plt:0000000000401960\n'
p1091
tp1092
sS'exit'
p1093
(S'\n__stdcall exit(int __status)\n'
p1094
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060d228)();\u000a  return;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x0060d228]\n'
p1096
S'ff 25 22 b7 20 00\n'
p1097
S'.plt:0000000000401b00\n'
p1098
tp1099
sS'safe_hasher'
p1100
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1101
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1102
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x004070d0\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00401700\n'
p1103
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 2b a6 ff ff\n'
p1104
S'.text:00000000004070b0\n.text:00000000004070b1\n.text:00000000004070b4\n.text:00000000004070b8\n.text:00000000004070bb\n.text:00000000004070be\n.text:00000000004070c1\n.text:00000000004070c5\n.text:00000000004070c7\n.text:00000000004070cb\n.text:00000000004070ce\n.text:00000000004070cf\n.text:00000000004070d0\n'
p1105
tp1106
sS'locale_charset'
p1107
(S'\n__stdcall locale_charset()\n'
p1108
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00407ebd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00407ebd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004019e0\nTEST RAX,RAX\nMOV R14D,0x4094c9\nCMOVNZ R14,RAX\nCALL 0x00407ed0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00407e95\nJMP 0x00407ebd\nMOV RDI,RBX\nCALL 0x00401830\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401830\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00407ebd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401980\nTEST EAX,EAX\nJZ 0x00407eb0\nCMP BPL,0x2a\nJNZ 0x00407e70\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00407e70\nMOV RDI,RBX\nCALL 0x00401830\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40a038\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1110
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 92 9b ff ff\n48 85 c0\n41 be c9 94 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 b8 99 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 aa 99 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 e0 9a ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 78 99 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 38 a0 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1111
S'.text:0000000000407e40\n.text:0000000000407e41\n.text:0000000000407e43\n.text:0000000000407e44\n.text:0000000000407e49\n.text:0000000000407e4e\n.text:0000000000407e51\n.text:0000000000407e57\n.text:0000000000407e5b\n.text:0000000000407e60\n.text:0000000000407e63\n.text:0000000000407e66\n.text:0000000000407e69\n.text:0000000000407e6b\n.text:0000000000407e70\n.text:0000000000407e73\n.text:0000000000407e78\n.text:0000000000407e7c\n.text:0000000000407e81\n.text:0000000000407e86\n.text:0000000000407e8b\n.text:0000000000407e90\n.text:0000000000407e93\n.text:0000000000407e95\n.text:0000000000407e98\n.text:0000000000407e9b\n.text:0000000000407ea0\n.text:0000000000407ea2\n.text:0000000000407ea4\n.text:0000000000407ea8\n.text:0000000000407eaa\n.text:0000000000407eae\n.text:0000000000407eb0\n.text:0000000000407eb3\n.text:0000000000407eb8\n.text:0000000000407ebd\n.text:0000000000407ec1\n.text:0000000000407ec6\n.text:0000000000407eca\n.text:0000000000407ecb\n.text:0000000000407ecd\n.text:0000000000407ece\n'
p1112
tp1113
sS'set_program_name'
p1114
(S'\n__stdcall set_program_name(char * argv0)\n'
p1115
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1116
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403211\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401890\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004031fb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x408e0a\nMOV EDX,0x7\nCALL 0x00401720\nTEST EAX,EAX\nJNZ 0x004031fb\nMOV ESI,0x408e12\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401720\nTEST EAX,EAX\nJNZ 0x004031f8\nADD R14,0x3\nMOV qword ptr [0x0060d2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060d340],RBX\nMOV qword ptr [0x0060d308],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060d320]\nMOV EDI,0x408dd2\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401b10\nCALL 0x00401700\n'
p1117
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 e6 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 0a 8e 40 00\nba 07 00 00 00\ne8 4d e5 ff ff\n85 c0\n75 24\nbe 12 8e 40 00\nba 03 00 00 00\n4c 89 f7\ne8 37 e5 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 e8 a0 20 00\n4c 89 f3\n48 89 1d 3e a1 20 00\n48 89 1d ff a0 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 08 a1 20 00\nbf d2 8d 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 e4 e8 ff ff\ne8 cf e4 ff ff\n'
p1118
S'.text:0000000000403190\n.text:0000000000403192\n.text:0000000000403193\n.text:0000000000403194\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319c\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031a9\n.text:00000000004031ac\n.text:00000000004031b0\n.text:00000000004031b4\n.text:00000000004031b7\n.text:00000000004031ba\n.text:00000000004031be\n.text:00000000004031c0\n.text:00000000004031c4\n.text:00000000004031c9\n.text:00000000004031ce\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031d7\n.text:00000000004031dc\n.text:00000000004031e1\n.text:00000000004031e4\n.text:00000000004031e9\n.text:00000000004031eb\n.text:00000000004031ed\n.text:00000000004031f1\n.text:00000000004031f8\n.text:00000000004031fb\n.text:0000000000403202\n.text:0000000000403209\n.text:000000000040320d\n.text:000000000040320e\n.text:0000000000403210\n.text:0000000000403211\n.text:0000000000403218\n.text:000000000040321d\n.text:0000000000403222\n.text:0000000000403227\n.text:000000000040322c\n'
p1119
tp1120
sS'randint_get_source'
p1121
(S'\n__stdcall randint_get_source(randint_source * s)\n'
p1122
V\u000arandread_source * randint_get_source(randint_source *s)\u000a\u000a{\u000a  return s->source;\u000a}\u000a\u000a
p1123
S'MOV RAX,qword ptr [RDI]\nRET\n'
p1124
S'48 8b 07\nc3\n'
p1125
S'.text:0000000000404ad0\n.text:0000000000404ad3\n'
p1126
tp1127
sS'quotearg_buffer'
p1128
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1129
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60d350\nCMOVNZ RBP,R8\nCALL 0x00401710\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004033b0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 50 d3 60 00\n49 0f 45 e8\ne8 b8 e3 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:0000000000403330\n.text:0000000000403331\n.text:0000000000403333\n.text:0000000000403335\n.text:0000000000403337\n.text:0000000000403339\n.text:000000000040333a\n.text:000000000040333b\n.text:000000000040333e\n.text:0000000000403341\n.text:0000000000403344\n.text:0000000000403347\n.text:000000000040334a\n.text:000000000040334f\n.text:0000000000403353\n.text:0000000000403358\n.text:000000000040335b\n.text:000000000040335d\n.text:0000000000403361\n.text:0000000000403365\n.text:0000000000403369\n.text:000000000040336d\n.text:0000000000403370\n.text:0000000000403373\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337c\n.text:000000000040337f\n.text:0000000000403383\n.text:0000000000403384\n.text:0000000000403389\n.text:000000000040338d\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403397\n.text:0000000000403398\n.text:000000000040339a\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a0\n.text:00000000004033a1\n'
p1133
tp1134
sS'hash_delete'
p1135
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1136
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_00409e88 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_00409e88) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1137
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00407aa0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00407c0a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x00407d39\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00407c12\nCVTSI2SS XMM0,RAX\nJMP 0x00407c27\nXOR R14D,R14D\nJMP 0x00407d39\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x00407c3b\nCVTSI2SS XMM1,RCX\nJMP 0x00407c50\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x00407d39\nMOV RDI,R15\nCALL 0x004073d0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00407c7c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00407c94\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00407ca7\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00407cbf\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x00407d39\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x00407cdc\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x00409e88]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00407670\nTEST AL,AL\nJNZ 0x00407d39\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00407d31\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016f0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00407d20\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1138
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d a4 21 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 c7 99 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1139
S'.text:0000000000407bc0\n.text:0000000000407bc2\n.text:0000000000407bc4\n.text:0000000000407bc5\n.text:0000000000407bc9\n.text:0000000000407bcc\n.text:0000000000407bd1\n.text:0000000000407bd6\n.text:0000000000407bdb\n.text:0000000000407bde\n.text:0000000000407be1\n.text:0000000000407be3\n.text:0000000000407be7\n.text:0000000000407bec\n.text:0000000000407bf0\n.text:0000000000407bf6\n.text:0000000000407bfa\n.text:0000000000407bfd\n.text:0000000000407c01\n.text:0000000000407c03\n.text:0000000000407c08\n.text:0000000000407c0a\n.text:0000000000407c0d\n.text:0000000000407c12\n.text:0000000000407c15\n.text:0000000000407c18\n.text:0000000000407c1b\n.text:0000000000407c1e\n.text:0000000000407c23\n.text:0000000000407c27\n.text:0000000000407c2b\n.text:0000000000407c2f\n.text:0000000000407c32\n.text:0000000000407c34\n.text:0000000000407c39\n.text:0000000000407c3b\n.text:0000000000407c3e\n.text:0000000000407c41\n.text:0000000000407c44\n.text:0000000000407c47\n.text:0000000000407c4c\n.text:0000000000407c50\n.text:0000000000407c54\n.text:0000000000407c57\n.text:0000000000407c5d\n.text:0000000000407c60\n.text:0000000000407c65\n.text:0000000000407c69\n.text:0000000000407c6d\n.text:0000000000407c70\n.text:0000000000407c72\n.text:0000000000407c75\n.text:0000000000407c7a\n.text:0000000000407c7c\n.text:0000000000407c7f\n.text:0000000000407c82\n.text:0000000000407c85\n.text:0000000000407c88\n.text:0000000000407c8b\n.text:0000000000407c90\n.text:0000000000407c94\n.text:0000000000407c98\n.text:0000000000407c9b\n.text:0000000000407c9d\n.text:0000000000407ca0\n.text:0000000000407ca5\n.text:0000000000407ca7\n.text:0000000000407caa\n.text:0000000000407cad\n.text:0000000000407cb0\n.text:0000000000407cb3\n.text:0000000000407cb6\n.text:0000000000407cbb\n.text:0000000000407cbf\n.text:0000000000407cc3\n.text:0000000000407cc7\n.text:0000000000407cca\n.text:0000000000407ccc\n.text:0000000000407cd1\n.text:0000000000407cd5\n.text:0000000000407cd7\n.text:0000000000407cdc\n.text:0000000000407ce4\n.text:0000000000407ce7\n.text:0000000000407ceb\n.text:0000000000407cf0\n.text:0000000000407cfa\n.text:0000000000407cfd\n.text:0000000000407d02\n.text:0000000000407d05\n.text:0000000000407d09\n.text:0000000000407d0c\n.text:0000000000407d11\n.text:0000000000407d13\n.text:0000000000407d15\n.text:0000000000407d19\n.text:0000000000407d1c\n.text:0000000000407d1e\n.text:0000000000407d20\n.text:0000000000407d24\n.text:0000000000407d29\n.text:0000000000407d2c\n.text:0000000000407d2f\n.text:0000000000407d31\n.text:0000000000407d39\n.text:0000000000407d3c\n.text:0000000000407d40\n.text:0000000000407d41\n.text:0000000000407d43\n.text:0000000000407d45\n'
p1140
tp1141
sS'quotearg_colon'
p1142
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1143
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'MOV ESI,0x3a\nJMP 0x00404510\n'
p1145
S'be 3a 00 00 00\neb e9\n'
p1146
S'.text:0000000000404520\n.text:0000000000404525\n'
p1147
tp1148
sS'rpl_fflush'
p1149
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1150
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060d190)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1151
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00406b9d\nMOV RDI,RBX\nCALL 0x00401a10\nTEST EAX,EAX\nJZ 0x00406b9d\nMOV RDI,RBX\nCALL 0x00406bb0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004019d0\n'
p1152
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 7f ae ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 2a ae ff ff\n'
p1153
S'.text:0000000000406b80\n.text:0000000000406b81\n.text:0000000000406b84\n.text:0000000000406b87\n.text:0000000000406b89\n.text:0000000000406b8c\n.text:0000000000406b91\n.text:0000000000406b93\n.text:0000000000406b95\n.text:0000000000406b98\n.text:0000000000406b9d\n.text:0000000000406ba0\n.text:0000000000406ba1\n'
p1154
tp1155
sS'__assert_fail'
p1156
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060d108)();\u000a  return;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060d108]\n'
p1159
S'ff 25 42 b8 20 00\n'
p1160
S'.plt:00000000004018c0\n'
p1161
tp1162
sS'bindtextdomain'
p1163
(S'\n__stdcall bindtextdomain()\n'
p1164
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060d0a0)();\u000a  return;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x0060d0a0]\n'
p1166
S'ff 25 aa b8 20 00\n'
p1167
S'.plt:00000000004017f0\n'
p1168
tp1169
sS'set_char_quoting'
p1170
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1171
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1172
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60d350\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1173
S'89 f1\n48 85 ff\nbe 50 d3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1174
S'.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a5\n.text:00000000004032aa\n.text:00000000004032ae\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b7\n.text:00000000004032bc\n.text:00000000004032bf\n.text:00000000004032c1\n.text:00000000004032c3\n.text:00000000004032c6\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032cd\n.text:00000000004032d0\n.text:00000000004032d5\n'
p1175
tp1176
sS'quotearg_n'
p1177
(S'\n__stdcall quotearg_n(char * arg)\n'
p1178
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1179
S'MOV RDX,-0x1\nMOV ECX,0x60d350\nJMP 0x00404190\n'
p1180
S'48 c7 c2 ff ff ff ff\nb9 50 d3 60 00\neb 02\n'
p1181
S'.text:0000000000404180\n.text:0000000000404187\n.text:000000000040418c\n'
p1182
tp1183
sS'close_stream'
p1184
(S'\n__stdcall close_stream(FILE * stream)\n'
p1185
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401760\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401960\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00406b00\nTEST EBP,EBP\nJZ 0x00406dcb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00406def\nCALL 0x00401710\nMOV dword ptr [RAX],0x0\nJMP 0x00406def\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00406def\nTEST CL,CL\nJNZ 0x00406def\nCALL 0x00401710\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n48 89 fb\ne8 c4 a9 ff ff\n49 89 c6\n48 89 df\ne8 b9 ab ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 4d a9 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 2e a9 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:0000000000406d90\n.text:0000000000406d91\n.text:0000000000406d93\n.text:0000000000406d94\n.text:0000000000406d97\n.text:0000000000406d9c\n.text:0000000000406d9f\n.text:0000000000406da2\n.text:0000000000406da7\n.text:0000000000406da9\n.text:0000000000406dac\n.text:0000000000406db1\n.text:0000000000406db3\n.text:0000000000406db5\n.text:0000000000406dba\n.text:0000000000406dbc\n.text:0000000000406dbe\n.text:0000000000406dc3\n.text:0000000000406dc9\n.text:0000000000406dcb\n.text:0000000000406dcd\n.text:0000000000406dd0\n.text:0000000000406dd2\n.text:0000000000406dd4\n.text:0000000000406dd7\n.text:0000000000406dd9\n.text:0000000000406ddb\n.text:0000000000406ddd\n.text:0000000000406de2\n.text:0000000000406de4\n.text:0000000000406de7\n.text:0000000000406dec\n.text:0000000000406def\n.text:0000000000406df1\n.text:0000000000406df2\n.text:0000000000406df4\n.text:0000000000406df5\n'
p1189
tp1190
sS'quotearg_colon_mem'
p1191
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1192
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1193
S'MOV EDX,0x3a\nJMP 0x004044a0\n'
p1194
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1195
S'.text:0000000000404530\n.text:0000000000404535\n'
p1196
tp1197
sS'next_line'
p1198
(S'\n__stdcall next_line(char * line, size_t n)\n'
p1199
V\u000achar * next_line(char *line,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t __n;\u000a  \u000a  pvVar1 = memchr(line,(int)n,__n);\u000a  return (char *)((long)pvVar1 + 1);\u000a}\u000a\u000a
p1200
S'PUSH RAX\nCALL 0x00401920\nINC RAX\nPOP RCX\nRET\n'
p1201
S'50\ne8 1a eb ff ff\n48 ff c0\n59\nc3\n'
p1202
S'.text:0000000000402e00\n.text:0000000000402e01\n.text:0000000000402e06\n.text:0000000000402e09\n.text:0000000000402e0a\n'
p1203
tp1204
sS'xcalloc'
p1205
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1206
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1207
S'PUSH RAX\nCALL 0x00406ab0\nTEST RAX,RAX\nJZ 0x0040635d\nPOP RCX\nRET\nCALL 0x004063c0\n'
p1208
S'50\ne8 5a 07 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1209
S'.text:0000000000406350\n.text:0000000000406351\n.text:0000000000406356\n.text:0000000000406359\n.text:000000000040635b\n.text:000000000040635c\n.text:000000000040635d\n'
p1210
tp1211
sS'xnumtoumax'
p1212
(S'\n__stdcall xnumtoumax(char * n_str, uintmax_t min, uintmax_t max, char * suffixes, char * err)\n'
p1213
V\u000auintmax_t xnumtoumax(char *n_str,uintmax_t min,uintmax_t max,char *suffixes,char *err)\u000a\u000a{\u000a  char *pcVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  int *piVar3;\u000a  uint *puVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  uint in_stack_00000008;\u000a  char *local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  sVar2 = xstrtoumax(n_str,(char **)0x0,(uintmax_t *)(min & 0xffffffff),(char *)&local_38);\u000a  pcVar1 = local_38;\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW) {\u000a    piVar3 = __errno_location();\u000a    *piVar3 = 0;\u000a  }\u000a  else {\u000a    if (sVar2 == LONGINT_OVERFLOW) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x4b;\u000a    }\u000a    else {\u000a      if (sVar2 == LONGINT_OK) {\u000a        if ((max <= local_38) && (local_38 <= suffixes)) {\u000a          return (uintmax_t)local_38;\u000a        }\u000a        piVar3 = __errno_location();\u000a        iVar5 = 0x22;\u000a        if ((char *)0x3fffffff < pcVar1) {\u000a          iVar5 = 0x4b;\u000a        }\u000a        *piVar3 = iVar5;\u000a      }\u000a    }\u000a  }\u000a  uVar7 = 1;\u000a  if (in_stack_00000008 != 0) {\u000a    uVar7 = in_stack_00000008;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar6 = *puVar4;\u000a  if (uVar6 == 0x16) {\u000a    uVar6 = 0;\u000a  }\u000a  quote(n_str);\u000a  error((ulong)uVar7,(ulong)uVar6,"%s: %s");\u000a  return (uintmax_t)local_38;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,RCX\nMOV R12,RDX\nMOV EAX,ESI\nMOV R13,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,EAX\nCALL 0x004067d0\nCMP EAX,0x3\nJZ 0x0040644e\nCMP EAX,0x1\nJZ 0x0040645b\nTEST EAX,EAX\nJNZ 0x00406466\nMOV RBX,qword ptr [RSP]\nCMP RBX,R12\nJC 0x00406431\nCMP RBX,R15\nJBE 0x004064a1\nCALL 0x00401710\nCMP RBX,0x3fffffff\nMOV ECX,0x4b\nMOV EDX,0x22\nCMOVA EDX,ECX\nMOV dword ptr [RAX],EDX\nJMP 0x00406466\nCALL 0x00401710\nMOV dword ptr [RAX],0x0\nJMP 0x00406466\nCALL 0x00401710\nMOV dword ptr [RAX],0x4b\nMOV EAX,dword ptr [RSP + 0x40]\nTEST EAX,EAX\nMOV EBP,0x1\nCMOVNZ EBP,EAX\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nXOR EAX,EAX\nCMP EBX,0x16\nCMOVZ EBX,EAX\nMOV RDI,R13\nCALL 0x00404680\nMOV R8,RAX\nMOV EDX,0x408aab\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RCX,R14\nCALL 0x00401a80\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1215
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n49 89 cf\n49 89 d4\n89 f0\n49 89 fd\n48 89 e1\n31 f6\n89 c2\ne8 bb 03 00 00\n83 f8 03\n74 34\n83 f8 01\n74 3c\n85 c0\n75 43\n48 8b 1c 24\n4c 39 e3\n72 05\n4c 39 fb\n76 70\ne8 da b2 ff ff\n48 81 fb ff ff ff 3f\nb9 4b 00 00 00\nba 22 00 00 00\n0f 47 d1\n89 10\neb 18\ne8 bd b2 ff ff\nc7 00 00 00 00 00\neb 0b\ne8 b0 b2 ff ff\nc7 00 4b 00 00 00\n8b 44 24 40\n85 c0\nbd 01 00 00 00\n0f 45 e8\ne8 97 b2 ff ff\n8b 18\n31 c0\n83 fb 16\n0f 44 d8\n4c 89 ef\ne8 f5 e1 ff ff\n49 89 c0\nba ab 8a 40 00\n31 c0\n89 ef\n89 de\n4c 89 f1\ne8 df b5 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1216
S'.text:00000000004063f0\n.text:00000000004063f1\n.text:00000000004063f3\n.text:00000000004063f5\n.text:00000000004063f7\n.text:00000000004063f9\n.text:00000000004063fa\n.text:00000000004063fb\n.text:00000000004063fe\n.text:0000000000406401\n.text:0000000000406404\n.text:0000000000406406\n.text:0000000000406409\n.text:000000000040640c\n.text:000000000040640e\n.text:0000000000406410\n.text:0000000000406415\n.text:0000000000406418\n.text:000000000040641a\n.text:000000000040641d\n.text:000000000040641f\n.text:0000000000406421\n.text:0000000000406423\n.text:0000000000406427\n.text:000000000040642a\n.text:000000000040642c\n.text:000000000040642f\n.text:0000000000406431\n.text:0000000000406436\n.text:000000000040643d\n.text:0000000000406442\n.text:0000000000406447\n.text:000000000040644a\n.text:000000000040644c\n.text:000000000040644e\n.text:0000000000406453\n.text:0000000000406459\n.text:000000000040645b\n.text:0000000000406460\n.text:0000000000406466\n.text:000000000040646a\n.text:000000000040646c\n.text:0000000000406471\n.text:0000000000406474\n.text:0000000000406479\n.text:000000000040647b\n.text:000000000040647d\n.text:0000000000406480\n.text:0000000000406483\n.text:0000000000406486\n.text:000000000040648b\n.text:000000000040648e\n.text:0000000000406493\n.text:0000000000406495\n.text:0000000000406497\n.text:0000000000406499\n.text:000000000040649c\n.text:00000000004064a1\n.text:00000000004064a5\n.text:00000000004064a9\n.text:00000000004064aa\n.text:00000000004064ac\n.text:00000000004064ae\n.text:00000000004064b0\n.text:00000000004064b2\n.text:00000000004064b3\n'
p1217
tp1218
sS'input_from_argv'
p1219
(S'\n__stdcall input_from_argv(char * * operand)\n'
p1220
V\u000avoid input_from_argv(char **operand)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  char *__dest;\u000a  char in_DL;\u000a  size_t n;\u000a  size_t n_00;\u000a  ulong uVar3;\u000a  char **ppcVar4;\u000a  uint in_ESI;\u000a  ulong uVar5;\u000a  \u000a  n = SEXT48((int)in_ESI);\u000a  if ((int)in_ESI < 1) {\u000a    __dest = (char *)xmalloc(n);\u000a  }\u000a  else {\u000a    uVar5 = (ulong)in_ESI;\u000a    n_00 = n;\u000a    uVar3 = uVar5;\u000a    ppcVar4 = operand;\u000a    do {\u000a      sVar1 = strlen(*ppcVar4);\u000a      n_00 = n_00 + sVar1;\u000a      ppcVar4 = ppcVar4 + 1;\u000a      uVar3 = uVar3 - 1;\u000a    } while (uVar3 != 0);\u000a    __dest = (char *)xmalloc(n_00);\u000a    ppcVar4 = operand;\u000a    if (0 < (int)in_ESI) {\u000a      do {\u000a        pcVar2 = stpcpy(__dest,*ppcVar4);\u000a        *ppcVar4 = __dest;\u000a        *pcVar2 = in_DL;\u000a        __dest = pcVar2 + 1;\u000a        uVar5 = uVar5 - 1;\u000a        ppcVar4 = ppcVar4 + 1;\u000a      } while (uVar5 != 0);\u000a    }\u000a  }\u000a  operand[n] = __dest;\u000a  return;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13D,EDX\nMOV R12D,ESI\nMOV R15,RDI\nMOVSXD RBX,R12D\nTEST EBX,EBX\nMOV qword ptr [RSP + 0x10],RBX\nJLE 0x00402814\nMOV R14D,R12D\nMOV RBP,R14\nMOV qword ptr [RSP + 0x8],R15\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401830\nADD RBX,RAX\nADD R15,0x8\nDEC RBP\nJNZ 0x004027c0\nMOV RDI,RBX\nCALL 0x00406230\nMOV RBX,RAX\nTEST R12D,R12D\nJLE 0x0040281e\nMOV R15,qword ptr [RSP + 0x8]\nMOV RBP,R15\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00401800\nMOV qword ptr [RBP],RBX\nMOV byte ptr [RAX],R13B\nINC RAX\nADD RBP,0x8\nDEC R14\nMOV RBX,RAX\nJNZ 0x004027f0\nJMP 0x00402826\nMOV RDI,RBX\nCALL 0x00406230\nJMP 0x00402826\nMOV RAX,RBX\nMOV R15,qword ptr [RSP + 0x8]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [R15 + RCX*0x8],RAX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1222
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d5\n41 89 f4\n49 89 ff\n49 63 dc\n85 db\n48 89 5c 24 10\n7e 61\n45 89 e6\n4c 89 f5\n4c 89 7c 24 08\n66 90\n49 8b 3f\ne8 68 f0 ff ff\n48 01 c3\n49 83 c7 08\n48 ff cd\n75 ec\n48 89 df\ne8 54 3a 00 00\n48 89 c3\n45 85 e4\n7e 3a\n4c 8b 7c 24 08\n4c 89 fd\n0f 1f 40 00\n48 8b 75 00\n48 89 df\ne8 04 f0 ff ff\n48 89 5d 00\n44 88 28\n48 ff c0\n48 83 c5 08\n49 ff ce\n48 89 c3\n75 de\neb 12\n48 89 df\ne8 14 3a 00 00\neb 08\n48 89 d8\n4c 8b 7c 24 08\n48 8b 4c 24 10\n49 89 04 cf\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1223
S'.text:0000000000402790\n.text:0000000000402791\n.text:0000000000402793\n.text:0000000000402795\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279a\n.text:000000000040279e\n.text:00000000004027a1\n.text:00000000004027a4\n.text:00000000004027a7\n.text:00000000004027aa\n.text:00000000004027ac\n.text:00000000004027b1\n.text:00000000004027b3\n.text:00000000004027b6\n.text:00000000004027b9\n.text:00000000004027be\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c8\n.text:00000000004027cb\n.text:00000000004027cf\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027dc\n.text:00000000004027df\n.text:00000000004027e2\n.text:00000000004027e4\n.text:00000000004027e9\n.text:00000000004027ec\n.text:00000000004027f0\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027fc\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402806\n.text:000000000040280a\n.text:000000000040280d\n.text:0000000000402810\n.text:0000000000402812\n.text:0000000000402814\n.text:0000000000402817\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402821\n.text:0000000000402826\n.text:000000000040282b\n.text:000000000040282f\n.text:0000000000402833\n.text:0000000000402834\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283a\n.text:000000000040283c\n.text:000000000040283d\n'
p1224
tp1225
sS'clear_ungetc_buffer_preserving_position'
p1226
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1227
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1228
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00406bb7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00406bd0\n'
p1229
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1230
S'.text:0000000000406bb0\n.text:0000000000406bb4\n.text:0000000000406bb6\n.text:0000000000406bb7\n.text:0000000000406bb9\n.text:0000000000406bbe\n'
p1231
tp1232
sS'xnmalloc'
p1233
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1234
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1235
S'MOV RAX,RDI\nMUL RSI\nJO 0x00406221\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00406230\nPUSH RAX\nCALL 0x004063c0\n'
p1236
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1237
S'.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406216\n.text:0000000000406218\n.text:000000000040621c\n.text:000000000040621f\n.text:0000000000406221\n.text:0000000000406222\n'
p1238
tp1239
sS'hash_string'
p1240
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1241
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1242
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00407293\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00407270\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1243
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1244
S'.text:0000000000407260\n.text:0000000000407262\n.text:0000000000407264\n.text:0000000000407266\n.text:0000000000407269\n.text:000000000040726b\n.text:0000000000407270\n.text:0000000000407273\n.text:0000000000407277\n.text:000000000040727a\n.text:000000000040727d\n.text:0000000000407280\n.text:0000000000407282\n.text:0000000000407285\n.text:0000000000407288\n.text:000000000040728b\n.text:000000000040728d\n.text:000000000040728f\n.text:0000000000407292\n.text:0000000000407293\n.text:0000000000407295\n.text:0000000000407298\n'
p1245
tp1246
sS'quotearg_char'
p1247
(S'\n__stdcall quotearg_char(char * arg)\n'
p1248
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1249
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004044a0\n'
p1250
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1251
S'.text:0000000000404510\n.text:0000000000404512\n.text:0000000000404519\n.text:000000000040451b\n'
p1252
tp1253
sS'malloc'
p1254
(S'\n__stdcall malloc(size_t __size)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060d188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0060d188]\n'
p1257
S'ff 25 c2 b7 20 00\n'
p1258
S'.plt:00000000004019c0\n'
p1259
tp1260
sS'c_tolower'
p1261
(S'\n__stdcall c_tolower()\n'
p1262
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1264
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1265
S'.text:0000000000406d70\n.text:0000000000406d73\n.text:0000000000406d76\n.text:0000000000406d79\n.text:0000000000406d7c\n'
p1266
tp1267
sS'getopt_long'
p1268
(S'\n__stdcall getopt_long()\n'
p1269
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060d0d0)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060d0d0]\n'
p1271
S'ff 25 7a b8 20 00\n'
p1272
S'.plt:0000000000401850\n'
p1273
tp1274
sS'randint_all_new'
p1275
(S'\n__stdcall randint_all_new(char * name, size_t bytes_bound)\n'
p1276
V\u000arandint_source * randint_all_new(char *name,size_t bytes_bound)\u000a\u000a{\u000a  randread_source *source;\u000a  randint_source *prVar1;\u000a  \u000a  source = randread_new(name,bytes_bound);\u000a  if (source != (randread_source *)0x0) {\u000a    prVar1 = randint_new(source);\u000a    return prVar1;\u000a  }\u000a  return (randint_source *)0x0;\u000a}\u000a\u000a
p1277
S'PUSH RAX\nCALL 0x00404f70\nTEST RAX,RAX\nJZ 0x00404ac1\nMOV RDI,RAX\nPOP RAX\nJMP 0x00404a90\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1278
S'50\ne8 ba 04 00 00\n48 85 c0\n74 06\n48 89 c7\n58\neb cf\n31 c0\n59\nc3\n'
p1279
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab6\n.text:0000000000404ab9\n.text:0000000000404abb\n.text:0000000000404abe\n.text:0000000000404abf\n.text:0000000000404ac1\n.text:0000000000404ac3\n.text:0000000000404ac4\n'
p1280
tp1281
sS'sparse_free'
p1282
(S'\n__stdcall sparse_free(Hash_table * table)\n'
p1283
V\u000avoid sparse_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p1284
S'JMP 0x00407590\n'
p1285
S'e9 4b 26 00 00\n'
p1286
S'.text:0000000000404f40\n'
p1287
tp1288
sS'quotearg_style'
p1289
(S'\n__stdcall quotearg_style(char * arg)\n'
p1290
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1291
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404380\n'
p1292
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1293
S'.text:0000000000404460\n.text:0000000000404463\n.text:0000000000404465\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446c\n'
p1294
tp1295
sS'write_random_numbers'
p1296
(S'\n__stdcall write_random_numbers(randint_source * s, size_t count, size_t lo_input, size_t hi_input)\n'
p1297
V\u000aint write_random_numbers(randint_source *s,size_t count,size_t lo_input,size_t hi_input)\u000a\u000a{\u000a  int iVar1;\u000a  randint rVar2;\u000a  ulong uVar3;\u000a  char in_R8B;\u000a  \u000a  if (count != 0) {\u000a    uVar3 = 0;\u000a    do {\u000a      rVar2 = randint_choose(s,(1 - lo_input) + hi_input);\u000a      iVar1 = __printf_chk(1,&DAT_00408dbd,rVar2 + lo_input,(ulong)(uint)(int)in_R8B);\u000a      if (iVar1 < 0) {\u000a        return -1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < count);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R12,RSI\nMOV R15,RDI\nTEST R12,R12\nJZ 0x00402bff\nMOV EBX,0x1\nSUB RBX,R14\nADD RBX,RCX\nMOVSX R13D,R8B\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00402e10\nLEA RDX,[RAX + R14*0x1]\nMOV EDI,0x1\nMOV ESI,0x408dbd\nXOR EAX,EAX\nMOV ECX,R13D\nCALL 0x00401a60\nTEST EAX,EAX\nJS 0x00402c03\nINC RBP\nCMP RBP,R12\nJC 0x00402bd0\nXOR EAX,EAX\nJMP 0x00402c08\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f4\n49 89 ff\n4d 85 e4\n74 46\nbb 01 00 00 00\n4c 29 f3\n48 01 cb\n45 0f be e8\n31 ed\n66 0f 1f 44 00 00\n4c 89 ff\n48 89 de\ne8 35 02 00 00\n4a 8d 14 30\nbf 01 00 00 00\nbe bd 8d 40 00\n31 c0\n44 89 e9\ne8 6d ee ff ff\n85 c0\n78 0c\n48 ff c5\n4c 39 e5\n72 d1\n31 c0\neb 05\nb8 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000402ba0\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba5\n.text:0000000000402ba7\n.text:0000000000402ba9\n.text:0000000000402baa\n.text:0000000000402bab\n.text:0000000000402bae\n.text:0000000000402bb1\n.text:0000000000402bb4\n.text:0000000000402bb7\n.text:0000000000402bb9\n.text:0000000000402bbe\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc8\n.text:0000000000402bca\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bd6\n.text:0000000000402bdb\n.text:0000000000402bdf\n.text:0000000000402be4\n.text:0000000000402be9\n.text:0000000000402beb\n.text:0000000000402bee\n.text:0000000000402bf3\n.text:0000000000402bf5\n.text:0000000000402bf7\n.text:0000000000402bfa\n.text:0000000000402bfd\n.text:0000000000402bff\n.text:0000000000402c01\n.text:0000000000402c03\n.text:0000000000402c08\n.text:0000000000402c0c\n.text:0000000000402c0d\n.text:0000000000402c0f\n.text:0000000000402c11\n.text:0000000000402c13\n.text:0000000000402c15\n.text:0000000000402c16\n'
p1301
tp1302
sS'hash_get_n_buckets'
p1303
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1304
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1305
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1306
S'48 8b 47 10\nc3\n'
p1307
S'.text:0000000000406e90\n.text:0000000000406e94\n'
p1308
tp1309
sS'emit_try_help'
p1310
(S'\n__stdcall emit_try_help()\n'
p1311
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1312
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d320]\nXOR EDI,EDI\nMOV ESI,0x408b78\nMOV EDX,0x5\nCALL 0x00401810\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060d340]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401b20\n'
p1313
S'53\n48 8b 1d a8 b5 20 00\n31 ff\nbe 78 8b 40 00\nba 05 00 00 00\ne8 87 fa ff ff\n48 89 c2\n48 8b 0d ad b5 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 7d fd ff ff\n'
p1314
S'.text:0000000000401d70\n.text:0000000000401d71\n.text:0000000000401d78\n.text:0000000000401d7a\n.text:0000000000401d7f\n.text:0000000000401d84\n.text:0000000000401d89\n.text:0000000000401d8c\n.text:0000000000401d93\n.text:0000000000401d98\n.text:0000000000401d9a\n.text:0000000000401d9d\n.text:0000000000401d9e\n'
p1315
tp1316
sS'write_permuted_output_reservoir'
p1317
(S'\n__stdcall write_permuted_output_reservoir(size_t n_lines, linebuffer * lines, size_t * permutation)\n'
p1318
V\u000aint write_permuted_output_reservoir(size_t n_lines,linebuffer *lines,size_t *permutation)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  \u000a  if (n_lines != 0) {\u000a    uVar3 = 0;\u000a    do {\u000a      sVar1 = permutation[uVar3];\u000a      sVar2 = fwrite_unlocked(lines[sVar1].buffer,1,lines[sVar1].length,stdout);\u000a      if (sVar2 != lines[sVar1].length) {\u000a        return -1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < n_lines);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1319
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RDX\nMOV R12,RSI\nMOV R15,RDI\nTEST R15,R15\nJZ 0x00402cf2\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [R14 + RBX*0x8]\nLEA R13,[RAX + RAX*0x2]\nMOV RDI,qword ptr [R12 + R13*0x8 + 0x10]\nMOV RDX,qword ptr [R12 + R13*0x8 + 0x8]\nMOV RCX,qword ptr [0x0060d2e8]\nMOV ESI,0x1\nCALL 0x00401a20\nCMP RAX,qword ptr [R12 + R13*0x8 + 0x8]\nJNZ 0x00402cf6\nINC RBX\nCMP RBX,R15\nJC 0x00402cc0\nXOR EAX,EAX\nJMP 0x00402cfb\nMOV EAX,0xffffffff\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1320
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d6\n49 89 f4\n49 89 ff\n4d 85 ff\n74 3b\n31 db\n0f 1f 80 00 00 00 00\n49 8b 04 de\n4c 8d 2c 40\n4b 8b 7c ec 10\n4b 8b 54 ec 08\n48 8b 0d 0f a6 20 00\nbe 01 00 00 00\ne8 3d ed ff ff\n4b 3b 44 ec 08\n75 0c\n48 ff c3\n4c 39 fb\n72 ce\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1321
S'.text:0000000000402ca0\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca6\n.text:0000000000402ca8\n.text:0000000000402ca9\n.text:0000000000402cac\n.text:0000000000402caf\n.text:0000000000402cb2\n.text:0000000000402cb5\n.text:0000000000402cb7\n.text:0000000000402cb9\n.text:0000000000402cc0\n.text:0000000000402cc4\n.text:0000000000402cc8\n.text:0000000000402ccd\n.text:0000000000402cd2\n.text:0000000000402cd9\n.text:0000000000402cde\n.text:0000000000402ce3\n.text:0000000000402ce8\n.text:0000000000402cea\n.text:0000000000402ced\n.text:0000000000402cf0\n.text:0000000000402cf2\n.text:0000000000402cf4\n.text:0000000000402cf6\n.text:0000000000402cfb\n.text:0000000000402cfc\n.text:0000000000402cfe\n.text:0000000000402d00\n.text:0000000000402d02\n.text:0000000000402d04\n'
p1322
tp1323
sS'strrchr'
p1324
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1325
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060d0f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x0060d0f0]\n'
p1327
S'ff 25 5a b8 20 00\n'
p1328
S'.plt:0000000000401890\n'
p1329
tp1330
sS'quotearg_alloc_mem'
p1331
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1332
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60d350\nCMOVNZ R12,RCX\nCALL 0x00401710\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004033b0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00406300\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004033b0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004040da\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1334
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 50 d3 60 00\n4c 0f 45 e1\ne8 d8 d6 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 71 22 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1335
S'.text:0000000000404000\n.text:0000000000404001\n.text:0000000000404003\n.text:0000000000404005\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400a\n.text:000000000040400e\n.text:0000000000404011\n.text:0000000000404016\n.text:0000000000404019\n.text:000000000040401e\n.text:0000000000404021\n.text:0000000000404026\n.text:0000000000404029\n.text:000000000040402f\n.text:0000000000404033\n.text:0000000000404038\n.text:000000000040403d\n.text:000000000040403f\n.text:0000000000404043\n.text:0000000000404045\n.text:0000000000404048\n.text:000000000040404c\n.text:0000000000404051\n.text:0000000000404055\n.text:000000000040405a\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404062\n.text:0000000000404065\n.text:0000000000404068\n.text:000000000040406b\n.text:0000000000404070\n.text:0000000000404075\n.text:0000000000404077\n.text:000000000040407c\n.text:0000000000404080\n.text:0000000000404083\n.text:0000000000404087\n.text:000000000040408a\n.text:000000000040408f\n.text:0000000000404092\n.text:0000000000404096\n.text:000000000040409a\n.text:000000000040409d\n.text:00000000004040a0\n.text:00000000004040a5\n.text:00000000004040aa\n.text:00000000004040ad\n.text:00000000004040b2\n.text:00000000004040b7\n.text:00000000004040b9\n.text:00000000004040be\n.text:00000000004040c3\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040ce\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d7\n.text:00000000004040da\n.text:00000000004040dd\n.text:00000000004040e1\n.text:00000000004040e2\n.text:00000000004040e4\n.text:00000000004040e6\n.text:00000000004040e8\n.text:00000000004040ea\n.text:00000000004040eb\n'
p1336
tp1337
sS'bkm_scale'
p1338
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1339
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1340
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1341
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1342
S'.text:0000000000406a40\n.text:0000000000406a43\n.text:0000000000406a4a\n.text:0000000000406a51\n.text:0000000000406a53\n.text:0000000000406a56\n.text:0000000000406a59\n.text:0000000000406a5d\n.text:0000000000406a60\n.text:0000000000406a64\n.text:0000000000406a66\n.text:0000000000406a69\n.text:0000000000406a6c\n'
p1343
tp1344
sS'memchr'
p1345
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1346
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060d138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x0060d138]\n'
p1348
S'ff 25 12 b8 20 00\n'
p1349
S'.plt:0000000000401920\n'
p1350
tp1351
sS'quotearg_style_mem'
p1352
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1353
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1354
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404420\n'
p1355
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1356
S'.text:0000000000404480\n.text:0000000000404483\n.text:0000000000404486\n.text:0000000000404488\n.text:000000000040448a\n.text:000000000040448c\n.text:000000000040448f\n.text:0000000000404492\n'
p1357
tp1358
sS'xalloc_die'
p1359
(S'\n__stdcall xalloc_die()\n'
p1360
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x408aaf,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1361
S'PUSH RBX\nMOV EBX,dword ptr [0x0060d278]\nXOR EDI,EDI\nMOV ESI,0x4096ff\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x408aaf\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401a80\nCALL 0x00401700\n'
p1362
S'53\n8b 1d b1 6e 20 00\n31 ff\nbe ff 96 40 00\nba 05 00 00 00\ne8 38 b4 ff ff\n48 89 c1\n31 f6\nba af 8a 40 00\n31 c0\n89 df\ne8 95 b6 ff ff\ne8 10 b3 ff ff\n'
p1363
S'.text:00000000004063c0\n.text:00000000004063c1\n.text:00000000004063c7\n.text:00000000004063c9\n.text:00000000004063ce\n.text:00000000004063d3\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063dd\n.text:00000000004063e2\n.text:00000000004063e4\n.text:00000000004063e6\n.text:00000000004063eb\n'
p1364
tp1365
sS'fopen_safer'
p1366
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1367
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1368
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x00401ab0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406e7b\nMOV RDI,RBX\nCALL 0x004019a0\nCMP EAX,0x2\nJA 0x00406e7d\nMOV EDI,EAX\nCALL 0x00408170\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00406e63\nMOV RDI,RBX\nCALL 0x00406b00\nTEST EAX,EAX\nJNZ 0x00406e4c\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401a40\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00406e7d\nCALL 0x00401710\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401900\nMOV dword ptr [RBX],R14D\nJMP 0x00406e7b\nCALL 0x00401710\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00406b00\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1369
S'55\n41 56\n53\n49 89 f6\ne8 a4 ac ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 84 ab ff ff\n83 f8 02\n77 5c\n89 c7\ne8 48 13 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 ca fc ff ff\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 fc ab ff ff\n48 89 c3\n48 85 db\n75 31\ne8 bf a8 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 a2 aa ff ff\n44 89 33\neb 18\ne8 a8 a8 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 89 fc ff ff\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1370
S'.text:0000000000406e00\n.text:0000000000406e01\n.text:0000000000406e03\n.text:0000000000406e04\n.text:0000000000406e07\n.text:0000000000406e0c\n.text:0000000000406e0f\n.text:0000000000406e12\n.text:0000000000406e14\n.text:0000000000406e17\n.text:0000000000406e1c\n.text:0000000000406e1f\n.text:0000000000406e21\n.text:0000000000406e23\n.text:0000000000406e28\n.text:0000000000406e2a\n.text:0000000000406e2c\n.text:0000000000406e2e\n.text:0000000000406e31\n.text:0000000000406e36\n.text:0000000000406e38\n.text:0000000000406e3a\n.text:0000000000406e3c\n.text:0000000000406e3f\n.text:0000000000406e44\n.text:0000000000406e47\n.text:0000000000406e4a\n.text:0000000000406e4c\n.text:0000000000406e51\n.text:0000000000406e54\n.text:0000000000406e57\n.text:0000000000406e59\n.text:0000000000406e5e\n.text:0000000000406e61\n.text:0000000000406e63\n.text:0000000000406e68\n.text:0000000000406e6b\n.text:0000000000406e6f\n.text:0000000000406e72\n.text:0000000000406e77\n.text:0000000000406e7b\n.text:0000000000406e7d\n.text:0000000000406e80\n.text:0000000000406e81\n.text:0000000000406e83\n.text:0000000000406e84\n'
p1371
tp1372
sS'quotearg_n_custom'
p1373
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1374
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1375
S'MOV R8,-0x1\nJMP 0x004045a0\n'
p1376
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1377
S'.text:0000000000404590\n.text:0000000000404597\n'
p1378
tp1379
sS'__freading'
p1380
(S'\n__stdcall __freading()\n'
p1381
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060d1b0)();\u000a  return;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060d1b0]\n'
p1383
S'ff 25 9a b7 20 00\n'
p1384
S'.plt:0000000000401a10\n'
p1385
tp1386
sS'fputs_unlocked'
p1387
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060d150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x0060d150]\n'
p1390
S'ff 25 fa b7 20 00\n'
p1391
S'.plt:0000000000401950\n'
p1392
tp1393
sS'main'
p1394
(S'\n__stdcall main(char * * argv)\n'
p1395
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  bool bVar4;\u000a  char cVar5;\u000a  int iVar6;\u000a  strtol_error sVar7;\u000a  char *err;\u000a  uint *puVar8;\u000a  off_t oVar9;\u000a  randint_source *r;\u000a  size_t *permutation;\u000a  FILE *pFVar10;\u000a  undefined8 uVar11;\u000a  char *n_str;\u000a  size_t sVar12;\u000a  char *pcVar13;\u000a  char extraout_DL;\u000a  randint_source *n;\u000a  size_t bytes_bound;\u000a  size_t n_00;\u000a  uintmax_t lo_input;\u000a  ulong uVar14;\u000a  char **ppcVar15;\u000a  uint uVar16;\u000a  char **in_RSI;\u000a  char **ppcVar17;\u000a  randint_source *s;\u000a  ulong uVar18;\u000a  byte **local_78;\u000a  char *local_68;\u000a  uintmax_t local_58;\u000a  char *local_50;\u000a  randint_source *local_38;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x408b0f,"/usr/local/share/locale");\u000a  textdomain(0x408b0f);\u000a  atexit(close_stdout);\u000a  cVar5 = 10;\u000a  bVar1 = false;\u000a  local_50 = (char *)0x0;\u000a  local_68 = (char *)0x0;\u000a  local_58 = 0;\u000a  lo_input = 0xffffffffffffffff;\u000a  bVar3 = false;\u000a  s = (randint_source *)0xffffffffffffffff;\u000a  bVar2 = (bool)0;\u000a  do {\u000a    bVar4 = bVar2;\u000a    iVar6 = getopt_long((ulong)argv & 0xffffffff,in_RSI,"ei:n:o:rz",long_opts,0);\u000a    n_str = optarg;\u000a    if (iVar6 < 0x65) {\u000a      if (iVar6 == -1) {\u000a        uVar14 = (ulong)!bVar3;\u000a        if ((bVar3) && (bVar4)) goto LAB_0040271e;\u000a        n = (randint_source *)((long)(int)((ulong)argv & 0xffffffff) - (long)optind);\u000a        local_78 = (byte **)(in_RSI + (long)optind);\u000a        iVar6 = (int)n;\u000a        if (bVar3) {\u000a          if (0 < iVar6) goto LAB_0040274a;\u000a        }\u000a        else {\u000a          if (1 < iVar6 && !bVar4) goto LAB_0040274a;\u000a        }\u000a        if (bVar4) {\u000a          input_from_argv((char **)local_78);\u000a        }\u000a        else {\u000a          if (bVar3) {\u000a            n = (randint_source *)((local_58 + 1) - lo_input);\u000a          }\u000a          else {\u000a            if (iVar6 == 1) {\u000a              iVar6 = 0x2d - (uint)**local_78;\u000a              if (iVar6 == 0) {\u000a                iVar6 = -(uint)(*local_78)[1];\u000a              }\u000a              if (((s != (randint_source *)0x0) && (iVar6 != 0)) &&\u000a                 (pFVar10 = freopen_safer((char *)*local_78,"r",stdin), pFVar10 == (FILE *)0x0)) {\u000a                puVar8 = (uint *)__errno_location();\u000a                uVar16 = *puVar8;\u000a                n_str = quotearg_n_style_colon((char *)0x0);\u000a                error(1,(ulong)uVar16,0x408aaf,n_str);\u000a              }\u000a            }\u000a            fadvise(stdin);\u000a            if ((!bVar1) && (s != (randint_source *)0xffffffffffffffff)) {\u000a              n = (randint_source *)0xffffffffffffffff;\u000a              bVar2 = true;\u000a              if (s == (randint_source *)0x0) {\u000a                s = (randint_source *)0x0;\u000a              }\u000a              else {\u000a                oVar9 = input_size();\u000a                if (oVar9 < 0x800001) goto LAB_00402403;\u000a              }\u000a              bVar1 = false;\u000a              local_78 = (byte **)0x0;\u000a              bytes_bound = 0xffffffffffffffff;\u000a              goto LAB_0040245a;\u000a            }\u000aLAB_00402403:\u000a            n = (randint_source *)read_input(stdin,(char ***)(ulong)(uint)(int)cVar5);\u000a          }\u000a          local_78 = (byte **)0x0;\u000a        }\u000a        r = n;\u000a        if (s < n) {\u000a          r = s;\u000a        }\u000a        if (bVar1) {\u000a          bVar2 = false;\u000a          bytes_bound = 0xffffffffffffffff;\u000a          bVar1 = true;\u000a        }\u000a        else {\u000a          bytes_bound = randperm_bound((size_t)r,(size_t)n);\u000a          bVar1 = false;\u000a          bVar2 = false;\u000a          s = r;\u000a        }\u000aLAB_0040245a:\u000a        r = randint_all_new(local_50,bytes_bound);\u000a        if (r == (randint_source *)0x0) {\u000a          puVar8 = (uint *)__errno_location();\u000a          uVar16 = *puVar8;\u000a          n_str = quotearg_n_style_colon((char *)0x0);\u000a          error(1,(ulong)uVar16,0x408aaf,n_str);\u000a        }\u000a        if (bVar2) {\u000a          n = (randint_source *)\u000a              read_input_reservoir_sampling(stdin,(ulong)(uint)(int)cVar5,s,(linebuffer **)r);\u000a          s = n;\u000a        }\u000a        if ((!(bool)(bVar4 | bVar3)) && (iVar6 = rpl_fclose(stdin), iVar6 != 0)) {\u000a          puVar8 = (uint *)__errno_location();\u000a          uVar16 = *puVar8;\u000a          uVar11 = dcgettext(0,0x40937e,5);\u000a          error(1,(ulong)uVar16,uVar11,uVar11);\u000a        }\u000a        if (bVar1) {\u000a          permutation = (size_t *)0x0;\u000a        }\u000a        else {\u000a          permutation = randperm_new(r,(size_t)s,(size_t)n);\u000a        }\u000a        if ((local_68 != (char *)0x0) &&\u000a           (pFVar10 = freopen_safer(local_68,"w",stdout), pFVar10 == (FILE *)0x0)) {\u000a          puVar8 = (uint *)__errno_location();\u000a          uVar16 = *puVar8;\u000a          n_str = quotearg_n_style_colon((char *)0x0);\u000a          error(1,(ulong)uVar16,0x408aaf,n_str);\u000a        }\u000a        if (bVar1) {\u000a          if (s == (randint_source *)0x0) {\u000a            return 0;\u000a          }\u000a          if (n == (randint_source *)0x0) {\u000a            uVar11 = dcgettext(0,"no lines to repeat",5);\u000a            error(1,0,uVar11,uVar11);\u000a          }\u000a          if (bVar3) {\u000a            iVar6 = write_random_numbers(r,(size_t)s,lo_input,local_58);\u000a          }\u000a          else {\u000a            iVar6 = write_random_lines(r,(size_t)s,(char **)local_78,(size_t)n);\u000a          }\u000a        }\u000a        else {\u000a          if (bVar2) {\u000a            iVar6 = write_permuted_output_reservoir((size_t)n,(linebuffer *)0x0,permutation);\u000a          }\u000a          else {\u000a            if (bVar3) {\u000a              iVar6 = write_permuted_numbers((size_t)s,lo_input,permutation);\u000a            }\u000a            else {\u000a              iVar6 = write_permuted_lines((size_t)s,(char **)local_78,permutation);\u000a            }\u000a          }\u000a        }\u000a        if (iVar6 != 0) {\u000a          puVar8 = (uint *)__errno_location();\u000a          uVar16 = *puVar8;\u000a          uVar11 = dcgettext(0,"write error",5);\u000a          error(1,(ulong)uVar16,uVar11,uVar11);\u000a        }\u000a        return 0;\u000a      }\u000a      if (iVar6 != -0x83) {\u000a        if (iVar6 != -0x82) goto switchD_00402022_caseD_66;\u000a        usage(0);\u000a      }\u000a      version_etc(stdout,"shuf","GNU coreutils",Version,"Paul Eggert",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    bVar2 = (bool)1;\u000a    switch(iVar6) {\u000a    case 0x65:\u000a      break;\u000a    default:\u000aswitchD_00402022_caseD_66:\u000a      usage(1);\u000a      uVar14 = lo_input;\u000aLAB_0040271e:\u000a      uVar11 = dcgettext(0,"cannot combine -e and -i options",5);\u000a      local_78 = (byte **)0x0;\u000a      error(0,0,uVar11,uVar11);\u000a      usage(1);\u000aLAB_0040274a:\u000a      uVar11 = dcgettext(0,"extra operand %s",5);\u000a      n_str = quote((char *)local_78[uVar14 & 0xff]);\u000a      uVar16 = 0;\u000a      error(0,0,uVar11,n_str);\u000a      ppcVar17 = (char **)0x1;\u000a      usage();\u000a      bytes_bound = SEXT48((int)uVar16);\u000a      if ((int)uVar16 < 1) {\u000a        n_str = (char *)xmalloc(bytes_bound);\u000a      }\u000a      else {\u000a        uVar18 = (ulong)uVar16;\u000a        n_00 = bytes_bound;\u000a        uVar14 = uVar18;\u000a        ppcVar15 = ppcVar17;\u000a        do {\u000a          sVar12 = strlen(*ppcVar15);\u000a          n_00 = n_00 + sVar12;\u000a          ppcVar15 = ppcVar15 + 1;\u000a          uVar14 = uVar14 - 1;\u000a        } while (uVar14 != 0);\u000a        n_str = (char *)xmalloc(n_00);\u000a        ppcVar15 = ppcVar17;\u000a        if (0 < (int)uVar16) {\u000a          do {\u000a            pcVar13 = stpcpy(n_str,*ppcVar15);\u000a            *ppcVar15 = n_str;\u000a            *pcVar13 = extraout_DL;\u000a            n_str = pcVar13 + 1;\u000a            uVar18 = uVar18 - 1;\u000a            ppcVar15 = ppcVar15 + 1;\u000a          } while (uVar18 != 0);\u000a        }\u000a      }\u000a      ppcVar17[bytes_bound] = n_str;\u000a      return (int)n_str;\u000a    case 0x69:\u000a      pcVar13 = strchr(optarg,0x2d);\u000a      if (bVar3) {\u000a        uVar11 = dcgettext(0,"multiple -i options specified",5);\u000a        error(1,0,uVar11,uVar11);\u000a      }\u000a      if (pcVar13 != (char *)0x0) {\u000a        *pcVar13 = 0;\u000a        n_str = optarg;\u000a        err = (char *)dcgettext(0,"invalid input range",5);\u000a        lo_input = xdectoumax(n_str,0,0xffffffffffffffff,\u000a                                                            \u000a                              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                              + 0xca,err);\u000a        *pcVar13 = '-';\u000a        n_str = pcVar13 + 1;\u000a      }\u000a      err = (char *)dcgettext(0,"invalid input range",5);\u000a      local_58 = xdectoumax(n_str,0,0xffffffffffffffff,\u000a                                                        \u000a                            "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                            + 0xca,err);\u000a      bVar3 = true;\u000a      if ((pcVar13 == (char *)0x0) ||\u000a         (bVar2 = bVar4, lo_input <= local_58 == (local_58 - lo_input == -1))) {\u000a        puVar8 = (uint *)__errno_location();\u000a        uVar16 = *puVar8;\u000a        dcgettext(0,"invalid input range",5);\u000a        quote(optarg);\u000a        error(1,(ulong)uVar16,"%s: %s");\u000a        bVar2 = bVar4;\u000a      }\u000a      break;\u000a    case 0x6e:\u000a      sVar7 = xstrtoul(optarg,(char **)0x0,(ulong *)0xa,(char *)&local_38);\u000a      bVar2 = bVar4;\u000a      if (sVar7 != LONGINT_OVERFLOW) {\u000a        if (sVar7 == LONGINT_OK) {\u000a          bVar2 = bVar4;\u000a          if (local_38 <= s) {\u000a            s = local_38;\u000a            bVar2 = bVar4;\u000a          }\u000a        }\u000a        else {\u000a          uVar11 = dcgettext(0,"invalid line count: %s",5);\u000a          quote(optarg);\u000a          error(1,0,uVar11);\u000a          bVar2 = bVar4;\u000a        }\u000a      }\u000a      break;\u000a    case 0x6f:\u000a      if ((local_68 != (char *)0x0) && (iVar6 = strcmp(local_68,optarg), iVar6 != 0)) {\u000a        uVar11 = dcgettext(0,"multiple output files specified",5);\u000a        error(1,0,uVar11);\u000a      }\u000a      local_68 = optarg;\u000a      bVar2 = bVar4;\u000a      break;\u000a    case 0x72:\u000a      bVar1 = true;\u000a      bVar2 = bVar4;\u000a      break;\u000a    case 0x7a:\u000a      cVar5 = 0;\u000a      bVar2 = bVar4;\u000a      break;\u000a    case 0x80:\u000a      if ((local_50 != (char *)0x0) && (iVar6 = strcmp(local_50,optarg), iVar6 != 0)) {\u000a        uVar11 = dcgettext(0,"multiple random sources specified",5);\u000a        error(1,0,uVar11);\u000a      }\u000a      local_50 = optarg;\u000a      bVar2 = bVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1396
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x68\nMOV R13,RSI\nMOV R14D,EDI\nMOV qword ptr [RSP + 0x58],0x0\nMOV qword ptr [RSP + 0x50],0x0\nMOV RDI,qword ptr [R13]\nCALL 0x00403190\nMOV EDI,0x6\nMOV ESI,0x4094c9\nCALL 0x00401a50\nMOV EDI,0x408b0f\nMOV ESI,0x408a57\nCALL 0x004017f0\nMOV EDI,0x408b0f\nCALL 0x004017d0\nMOV EDI,0x402e40\nCALL 0x004084a0\nMOV R15,-0x1\nMOV AL,0xa\nMOV dword ptr [RSP + 0xc],EAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x48],RAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x30],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nMOV RBP,-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR ECX,ECX\nJMP 0x00401ff0\nMOV dword ptr [RSP + 0xc],0x0\nMOV CL,R12B\nMOV R12D,ECX\nMOV EDX,0x408a6f\nMOV ECX,0x4085e0\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,R13\nCALL 0x00401850\nCMP EAX,0x64\nJLE 0x004022af\nADD EAX,-0x65\nCMP EAX,0x1b\nJA 0x00402714\nMOV CL,0x1\nJMP qword ptr [0x408500 + RAX*0x8]\nMOV qword ptr [RSP + 0x28],R15\nMOV R15,qword ptr [0x0060d300]\nMOV ESI,0x2d\nMOV RDI,R15\nCALL 0x00401880\nMOV RBX,RAX\nCMP byte ptr [RSP + 0x18],0x0\nJZ 0x00402071\nXOR EDI,EDI\nMOV ESI,0x408a79\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nTEST RBX,RBX\nJZ 0x004020b7\nMOV byte ptr [RBX],0x0\nMOV RBP,qword ptr [0x0060d300]\nXOR EDI,EDI\nMOV ESI,0x408a97\nMOV EDX,0x5\nCALL 0x00401810\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV ECX,0x4094c9\nXOR R9D,R9D\nMOV RDI,RBP\nMOV R8,RAX\nCALL 0x004064c0\nMOV RBP,RAX\nMOV byte ptr [RBX],0x2d\nLEA R15,[RBX + 0x1]\nXOR EDI,EDI\nMOV ESI,0x408a97\nMOV EDX,0x5\nCALL 0x00401810\nXOR ESI,ESI\nMOV RDX,-0x1\nMOV ECX,0x4094c9\nXOR R9D,R9D\nMOV RDI,R15\nMOV R8,RAX\nCALL 0x004064c0\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nSUB RCX,RBP\nSETNC AL\nCMP RCX,-0x1\nSETZ CL\nMOV DL,0x1\nMOV qword ptr [RSP + 0x18],RDX\nTEST RBX,RBX\nMOV R15,qword ptr [RSP + 0x28]\nJZ 0x00402115\nXOR AL,CL\nMOV CL,R12B\nJNZ 0x00401ff0\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x408a97\nMOV EDX,0x5\nCALL 0x00401810\nMOV R15,RBP\nMOV qword ptr [RSP + 0x38],R13\nMOV R13D,R14D\nMOV R14,RAX\nMOV RDI,qword ptr [0x0060d300]\nCALL 0x00404680\nMOV R8,RAX\nMOV EDI,0x1\nMOV EDX,0x408aab\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RBP,qword ptr [RSP + 0x28]\nMOV RCX,R14\nMOV R14D,R13D\nMOV R13,qword ptr [RSP + 0x38]\nMOV RBX,R15\nMOV R15,RBP\nMOV RBP,RBX\nCALL 0x00401a80\nMOV CL,R12B\nJMP 0x00401ff0\nMOV RDI,qword ptr [0x0060d300]\nXOR ESI,ESI\nMOV EDX,0xa\nXOR R8D,R8D\nLEA RCX,[RSP + 0x60]\nCALL 0x004064f0\nCMP EAX,0x1\nJZ 0x004022a7\nTEST EAX,EAX\nJNZ 0x00402273\nMOV RAX,qword ptr [RSP + 0x60]\nCMP R15,RAX\nCMOVNC R15,RAX\nMOV CL,R12B\nJMP 0x00401ff0\nMOV RDI,qword ptr [RSP + 0x30]\nTEST RDI,RDI\nJZ 0x004021fd\nMOV RSI,qword ptr [0x0060d300]\nCALL 0x00401980\nTEST EAX,EAX\nJZ 0x004021fd\nXOR EDI,EDI\nMOV ESI,0x408ac9\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nMOV RAX,qword ptr [0x0060d300]\nMOV qword ptr [RSP + 0x30],RAX\nMOV CL,R12B\nJMP 0x00401ff0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV CL,R12B\nJMP 0x00401ff0\nMOV RDI,qword ptr [RSP + 0x48]\nTEST RDI,RDI\nJZ 0x0040225f\nMOV RSI,qword ptr [0x0060d300]\nCALL 0x00401980\nTEST EAX,EAX\nJZ 0x0040225f\nXOR EDI,EDI\nMOV ESI,0x408ae9\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nMOV RAX,qword ptr [0x0060d300]\nMOV qword ptr [RSP + 0x48],RAX\nMOV CL,R12B\nJMP 0x00401ff0\nXOR EDI,EDI\nMOV ESI,0x408ab2\nMOV EDX,0x5\nCALL 0x00401810\nMOV RBX,RAX\nMOV RDI,qword ptr [0x0060d300]\nCALL 0x00404680\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401a80\nMOV CL,R12B\nJMP 0x00401ff0\nMOV qword ptr [RSP + 0x38],RBP\nCMP EAX,-0x1\nJNZ 0x004026d0\nMOVSXD RCX,dword ptr [0x0060d2f8]\nTEST R12B,R12B\nSETZ AL\nCMP byte ptr [RSP + 0x18],0x0\nSETZ BPL\nJZ 0x004022dd\nTEST AL,AL\nJZ 0x0040271e\nMOVSXD RBX,R14D\nSUB RBX,RCX\nLEA RSI,[R13 + RCX*0x8]\nCMP byte ptr [RSP + 0x18],0x0\nJZ 0x004022fd\nTEST EBX,EBX\nMOV R13,qword ptr [RSP + 0x10]\nJLE 0x00402313\nJMP 0x0040274a\nCMP EBX,0x1\nSETG CL\nAND CL,AL\nCMP CL,0x1\nMOV R13,qword ptr [RSP + 0x10]\nJZ 0x0040274a\nTEST R12B,R12B\nJZ 0x00402337\nMOVSX EDX,byte ptr [RSP + 0xc]\nMOV RAX,RSI\nMOV qword ptr [RSP + 0x20],RAX\nMOV RDI,RSI\nMOV ESI,EBX\nCALL 0x00402790\nMOV R14,R15\nJMP 0x00402426\nCMP byte ptr [RSP + 0x18],0x0\nMOV R14,R15\nJZ 0x00402356\nMOV RAX,qword ptr [RSP + 0x40]\nLEA RBX,[RAX + 0x1]\nSUB RBX,qword ptr [RSP + 0x38]\nXOR EAX,EAX\nJMP 0x00402421\nCMP EBX,0x1\nJNZ 0x004023c3\nMOV RCX,qword ptr [RSI]\nMOVZX EDX,byte ptr [RCX]\nMOV EAX,0x2d\nSUB EAX,EDX\nJNZ 0x00402370\nMOVZX EAX,byte ptr [RCX + 0x1]\nNEG EAX\nTEST R14,R14\nJZ 0x004023c3\nTEST EAX,EAX\nJZ 0x004023c3\nMOV RBX,RSI\nMOV RDI,qword ptr [RBX]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x409387\nCALL 0x00402f30\nTEST RAX,RAX\nJNZ 0x004023c3\nCALL 0x00401710\nMOV R15D,dword ptr [RAX]\nMOV RDX,qword ptr [RBX]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404540\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x408aaf\nXOR EAX,EAX\nMOV ESI,R15D\nCALL 0x00401a80\nMOV RDI,qword ptr [0x0060d2f0]\nMOV ESI,0x2\nCALL 0x00402f10\nTEST R13B,R13B\nJNZ 0x00402403\nCMP R14,-0x1\nJZ 0x00402403\nMOV RBX,-0x1\nMOV BPL,0x1\nTEST R14,R14\nJZ 0x004026b7\nCALL 0x00402840\nCMP RAX,0x800000\nJG 0x004026ba\nMOV RDI,qword ptr [0x0060d2f0]\nMOVSX ESI,byte ptr [RSP + 0xc]\nLEA RDX,[RSP + 0x58]\nCALL 0x004028a0\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP + 0x58]\nMOV qword ptr [RSP + 0x20],RAX\nCMP R14,RBX\nMOV RAX,RBX\nCMOVC RAX,R14\nTEST R13B,R13B\nCMOVZ R14,RAX\nJZ 0x00402447\nXOR EBP,EBP\nMOV RSI,-0x1\nMOV R15B,0x1\nJMP 0x0040245a\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00404c60\nMOV RSI,RAX\nXOR R15D,R15D\nXOR EBP,EBP\nMOV R13,qword ptr [RSP + 0x48]\nMOV RDI,R13\nCALL 0x00404ab0\nMOV qword ptr [RSP + 0x10],RAX\nTEST RAX,RAX\nJNZ 0x004024ad\nCALL 0x00401710\nMOV dword ptr [RSP + 0x28],EBP\nMOV RBP,R15\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R13\nCALL 0x00404540\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x408aaf\nXOR EAX,EAX\nMOV ESI,R15D\nMOV R15,RBP\nMOV EBP,dword ptr [RSP + 0x28]\nCALL 0x00401a80\nTEST BPL,BPL\nJZ 0x004024d6\nMOV RDI,qword ptr [0x0060d2f0]\nMOVSX ESI,byte ptr [RSP + 0xc]\nLEA R8,[RSP + 0x50]\nMOV RDX,R14\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x004029c0\nMOV RBX,RAX\nMOV R14,RBX\nOR R12B,byte ptr [RSP + 0x18]\nJNZ 0x00402521\nMOV RDI,qword ptr [0x0060d2f0]\nCALL 0x00406b00\nTEST EAX,EAX\nJZ 0x00402521\nCALL 0x00401710\nMOV R12,R15\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40937e\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV R15,R12\nMOV RDX,RCX\nCALL 0x00401a80\nTEST R15B,R15B\nJZ 0x0040252b\nXOR R12D,R12D\nJMP 0x0040253e\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00404ca0\nMOV R12,RAX\nMOV RAX,qword ptr [RSP + 0x30]\nTEST RAX,RAX\nJZ 0x004025a9\nMOV RDX,qword ptr [0x0060d2e8]\nMOV ESI,0x408b57\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00402f30\nMOV RCX,qword ptr [RSP + 0x30]\nTEST RAX,RAX\nJNZ 0x004025a9\nMOV R13,R15\nMOV R15,RCX\nCALL 0x00401710\nMOV qword ptr [RSP + 0x28],R14\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nMOV R15,R13\nCALL 0x00404540\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x408aaf\nXOR EAX,EAX\nMOV ESI,R14D\nMOV R14,qword ptr [RSP + 0x28]\nCALL 0x00401a80\nTEST R15B,R15B\nJZ 0x0040260e\nTEST R14,R14\nJZ 0x004026a6\nTEST RBX,RBX\nJNZ 0x004025e1\nXOR EDI,EDI\nMOV ESI,0x408b59\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nCMP byte ptr [RSP + 0x18],0x0\nJZ 0x0040264b\nMOVSX R8D,byte ptr [RSP + 0xc]\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R14\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RCX,qword ptr [RSP + 0x40]\nCALL 0x00402ba0\nTEST EAX,EAX\nJNZ 0x0040267a\nJMP 0x004026a6\nTEST BPL,BPL\nJZ 0x00402629\nMOV RSI,qword ptr [RSP + 0x50]\nMOV RDI,RBX\nMOV RDX,R12\nCALL 0x00402ca0\nTEST EAX,EAX\nJNZ 0x0040267a\nJMP 0x004026a6\nCMP byte ptr [RSP + 0x18],0x0\nJZ 0x00402666\nMOVSX ECX,byte ptr [RSP + 0xc]\nMOV RDI,R14\nMOV RSI,qword ptr [RSP + 0x38]\nMOV RDX,R12\nCALL 0x00402d10\nTEST EAX,EAX\nJNZ 0x0040267a\nJMP 0x004026a6\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R14\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,RBX\nCALL 0x00402c20\nTEST EAX,EAX\nJNZ 0x0040267a\nJMP 0x004026a6\nMOV RDI,R14\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R12\nCALL 0x00402d70\nTEST EAX,EAX\nJZ 0x004026a6\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x408b6c\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401a80\nXOR EAX,EAX\nADD RSP,0x68\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nXOR R15D,R15D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nMOV RSI,-0x1\nJMP 0x0040245a\nCMP EAX,0xffffff7d\nJZ 0x004026e5\nCMP EAX,0xffffff7e\nJNZ 0x00402714\nXOR EDI,EDI\nCALL 0x00401c70\nMOV RDI,qword ptr [0x0060d2e8]\nMOV RCX,qword ptr [0x0060d270]\nMOV ESI,0x408a52\nMOV EDX,0x408b0b\nMOV R8D,0x408b19\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00406100\nXOR EDI,EDI\nCALL 0x00401b00\nMOV EDI,0x1\nCALL 0x00401c70\nXOR EDI,EDI\nMOV ESI,0x408b25\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nMOV EDI,0x1\nCALL 0x00401c70\nMOV R15,RSI\nXOR EDI,EDI\nMOV ESI,0x408b46\nXOR EBX,EBX\nMOV EDX,0x5\nCALL 0x00401810\nMOV R14,RAX\nMOV BL,BPL\nMOV RDI,qword ptr [R15 + RBX*0x8]\nCALL 0x00404680\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401a80\nMOV EDI,0x1\nCALL 0x00401c70\nNOP word ptr [RAX + RAX*0x1]\n'
p1397
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 68\n49 89 f5\n41 89 fe\n48 c7 44 24 58 00 00 00 00\n48 c7 44 24 50 00 00 00 00\n49 8b 7d 00\ne8 21 12 00 00\nbf 06 00 00 00\nbe c9 94 40 00\ne8 d2 fa ff ff\nbf 0f 8b 40 00\nbe 57 8a 40 00\ne8 63 f8 ff ff\nbf 0f 8b 40 00\ne8 39 f8 ff ff\nbf 40 2e 40 00\ne8 ff 64 00 00\n49 c7 c7 ff ff ff ff\nb0 0a\n89 44 24 0c\nb8 00 00 00 00\n48 89 44 24 10\nb8 00 00 00 00\n48 89 44 24 48\nb8 00 00 00 00\n48 89 44 24 30\n31 c0\n48 89 44 24 40\n48 c7 c5 ff ff ff ff\n31 c0\n48 89 44 24 18\n31 c9\neb 0b\nc7 44 24 0c 00 00 00 00\n44 88 e1\n41 89 cc\nba 6f 8a 40 00\nb9 e0 85 40 00\n45 31 c0\n44 89 f7\n4c 89 ee\ne8 45 f8 ff ff\n83 f8 64\n0f 8e 9b 02 00 00\n83 c0 9b\n83 f8 1b\n0f 87 f4 06 00 00\nb1 01\nff 24 c5 00 85 40 00\n4c 89 7c 24 28\n4c 8b 3d cb b2 20 00\nbe 2d 00 00 00\n4c 89 ff\ne8 3e f8 ff ff\n48 89 c3\n80 7c 24 18 00\n74 25\n31 ff\nbe 79 8a 40 00\nba 05 00 00 00\ne8 b3 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 0f fa ff ff\n48 85 db\n74 41\nc6 03 00\n48 8b 2d 80 b2 20 00\n31 ff\nbe 97 8a 40 00\nba 05 00 00 00\ne8 7f f7 ff ff\n31 f6\n48 c7 c2 ff ff ff ff\nb9 c9 94 40 00\n45 31 c9\n48 89 ef\n49 89 c0\ne8 13 44 00 00\n48 89 c5\nc6 03 2d\n4c 8d 7b 01\n31 ff\nbe 97 8a 40 00\nba 05 00 00 00\ne8 48 f7 ff ff\n31 f6\n48 c7 c2 ff ff ff ff\nb9 c9 94 40 00\n45 31 c9\n4c 89 ff\n49 89 c0\ne8 dc 43 00 00\n48 89 c1\n48 89 4c 24 40\n48 29 e9\n0f 93 c0\n48 83 f9 ff\n0f 94 c1\nb2 01\n48 89 54 24 18\n48 85 db\n4c 8b 7c 24 28\n74 0b\n30 c8\n44 88 e1\n0f 85 db fe ff ff\ne8 f6 f5 ff ff\n8b 18\n31 ff\nbe 97 8a 40 00\nba 05 00 00 00\ne8 e3 f6 ff ff\n49 89 ef\n4c 89 6c 24 38\n45 89 f5\n49 89 c6\n48 8b 3d be b1 20 00\ne8 39 25 00 00\n49 89 c0\nbf 01 00 00 00\nba ab 8a 40 00\n31 c0\n89 de\n48 8b 6c 24 28\n4c 89 f1\n45 89 ee\n4c 8b 6c 24 38\n4c 89 fb\n49 89 ef\n48 89 dd\ne8 0a f9 ff ff\n44 88 e1\ne9 72 fe ff ff\n48 8b 3d 7b b1 20 00\n31 f6\nba 0a 00 00 00\n45 31 c0\n48 8d 4c 24 60\ne8 57 43 00 00\n83 f8 01\n0f 84 05 01 00 00\n85 c0\n0f 85 c9 00 00 00\n48 8b 44 24 60\n49 39 c7\n4c 0f 43 f8\n44 88 e1\ne9 32 fe ff ff\n48 8b 7c 24 30\n48 85 ff\n74 35\n48 8b 35 31 b1 20 00\ne8 ac f7 ff ff\n85 c0\n74 25\n31 ff\nbe c9 8a 40 00\nba 05 00 00 00\ne8 27 f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 83 f8 ff ff\n48 8b 05 fc b0 20 00\n48 89 44 24 30\n44 88 e1\ne9 df fd ff ff\nb0 01\n48 89 44 24 10\n44 88 e1\ne9 d0 fd ff ff\n48 8b 7c 24 48\n48 85 ff\n74 35\n48 8b 35 cf b0 20 00\ne8 4a f7 ff ff\n85 c0\n74 25\n31 ff\nbe e9 8a 40 00\nba 05 00 00 00\ne8 c5 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 21 f8 ff ff\n48 8b 05 9a b0 20 00\n48 89 44 24 48\n44 88 e1\ne9 7d fd ff ff\n31 ff\nbe b2 8a 40 00\nba 05 00 00 00\ne8 8c f5 ff ff\n48 89 c3\n48 8b 3d 72 b0 20 00\ne8 ed 23 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 d9 f7 ff ff\n44 88 e1\ne9 41 fd ff ff\n48 89 6c 24 38\n83 f8 ff\n0f 85 13 04 00 00\n48 63 0d 34 b0 20 00\n45 84 e4\n0f 94 c0\n80 7c 24 18 00\n40 0f 94 c5\n74 08\n84 c0\n0f 84 41 04 00 00\n49 63 de\n48 29 cb\n49 8d 74 cd 00\n80 7c 24 18 00\n74 0e\n85 db\n4c 8b 6c 24 10\n7e 1b\ne9 4d 04 00 00\n83 fb 01\n0f 9f c1\n20 c1\n80 f9 01\n4c 8b 6c 24 10\n0f 84 37 04 00 00\n45 84 e4\n74 1f\n0f be 54 24 0c\n48 89 f0\n48 89 44 24 20\n48 89 f7\n89 de\ne8 61 04 00 00\n4d 89 fe\ne9 ef 00 00 00\n80 7c 24 18 00\n4d 89 fe\n74 15\n48 8b 44 24 40\n48 8d 58 01\n48 2b 5c 24 38\n31 c0\ne9 cb 00 00 00\n83 fb 01\n75 68\n48 8b 0e\n0f b6 11\nb8 2d 00 00 00\n29 d0\n75 06\n0f b6 41 01\nf7 d8\n4d 85 f6\n74 4e\n85 c0\n74 4a\n48 89 f3\n48 8b 3b\n48 8b 15 6a af 20 00\nbe 87 93 40 00\ne8 a0 0b 00 00\n48 85 c0\n75 2e\ne8 76 f3 ff ff\n44 8b 38\n48 8b 13\n31 ff\nbe 03 00 00 00\ne8 94 21 00 00\n48 89 c1\nbf 01 00 00 00\nba af 8a 40 00\n31 c0\n44 89 fe\ne8 bd f6 ff ff\n48 8b 3d 26 af 20 00\nbe 02 00 00 00\ne8 3c 0b 00 00\n45 84 ed\n75 2a\n49 83 fe ff\n74 24\n48 c7 c3 ff ff ff ff\n40 b5 01\n4d 85 f6\n0f 84 c5 02 00 00\ne8 49 04 00 00\n48 3d 00 00 80 00\n0f 8f b7 02 00 00\n48 8b 3d e6 ae 20 00\n0f be 74 24 0c\n48 8d 54 24 58\ne8 87 04 00 00\n48 89 c3\n48 8b 44 24 58\n48 89 44 24 20\n49 39 de\n48 89 d8\n49 0f 42 c6\n45 84 ed\n4c 0f 44 f0\n74 0e\n31 ed\n48 c7 c6 ff ff ff ff\n41 b7 01\neb 13\n4c 89 f7\n48 89 de\ne8 0e 28 00 00\n48 89 c6\n45 31 ff\n31 ed\n4c 8b 6c 24 48\n4c 89 ef\ne8 49 26 00 00\n48 89 44 24 10\n48 85 c0\n75 3c\ne8 9a f2 ff ff\n89 6c 24 28\n4c 89 fd\n44 8b 38\n31 ff\nbe 03 00 00 00\n4c 89 ea\ne8 b1 20 00 00\n48 89 c1\nbf 01 00 00 00\nba af 8a 40 00\n31 c0\n44 89 fe\n49 89 ef\n8b 6c 24 28\ne8 d3 f5 ff ff\n40 84 ed\n74 24\n48 8b 3d 37 ae 20 00\n0f be 74 24 0c\n4c 8d 44 24 50\n4c 89 f2\n48 8b 4c 24 10\ne8 f0 04 00 00\n48 89 c3\n49 89 de\n44 0a 64 24 18\n75 44\n48 8b 3d 0c ae 20 00\ne8 17 46 00 00\n85 c0\n74 34\ne8 1e f2 ff ff\n4d 89 fc\n44 8b 38\n31 ff\nbe 7e 93 40 00\nba 05 00 00 00\ne8 07 f3 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 fe\n4d 89 e7\n48 89 ca\ne8 5f f5 ff ff\n45 84 ff\n74 05\n45 31 e4\neb 13\n48 8b 7c 24 10\n4c 89 f6\n48 89 da\ne8 65 27 00 00\n49 89 c4\n48 8b 44 24 30\n48 85 c0\n74 61\n48 8b 15 99 ad 20 00\nbe 57 8b 40 00\n48 8b 7c 24 30\ne8 d2 09 00 00\n48 8b 4c 24 30\n48 85 c0\n75 41\n4d 89 fd\n49 89 cf\ne8 9d f1 ff ff\n4c 89 74 24 28\n44 8b 30\n31 ff\nbe 03 00 00 00\n4c 89 fa\n4d 89 ef\ne8 b3 1f 00 00\n48 89 c1\nbf 01 00 00 00\nba af 8a 40 00\n31 c0\n44 89 f6\n4c 8b 74 24 28\ne8 d7 f4 ff ff\n45 84 ff\n74 60\n4d 85 f6\n0f 84 ef 00 00 00\n48 85 db\n75 25\n31 ff\nbe 59 8b 40 00\nba 05 00 00 00\ne8 43 f2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 9f f4 ff ff\n80 7c 24 18 00\n74 63\n44 0f be 44 24 0c\n48 8b 7c 24 10\n4c 89 f6\n48 8b 54 24 38\n48 8b 4c 24 40\ne8 9b 05 00 00\n85 c0\n75 71\ne9 98 00 00 00\n40 84 ed\n74 16\n48 8b 74 24 50\n48 89 df\n4c 89 e2\ne8 7d 06 00 00\n85 c0\n75 53\neb 7d\n80 7c 24 18 00\n74 36\n0f be 4c 24 0c\n4c 89 f7\n48 8b 74 24 38\n4c 89 e2\ne8 cb 06 00 00\n85 c0\n75 31\neb 5b\n48 8b 7c 24 10\n4c 89 f6\n48 8b 54 24 20\n48 89 d9\ne8 c0 05 00 00\n85 c0\n75 16\neb 40\n4c 89 f7\n48 8b 74 24 20\n4c 89 e2\ne8 fa 06 00 00\n85 c0\n74 2c\ne8 91 f0 ff ff\n8b 18\n31 ff\nbe 6c 8b 40 00\nba 05 00 00 00\ne8 7e f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 da f3 ff ff\n31 c0\n48 83 c4 68\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\n45 31 ff\n31 c0\n48 89 44 24 20\n48 c7 c6 ff ff ff ff\ne9 8a fd ff ff\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 36\n31 ff\ne8 8b f5 ff ff\n48 8b 3d fc ab 20 00\n48 8b 0d 7d ab 20 00\nbe 52 8a 40 00\nba 0b 8b 40 00\n41 b8 19 8b 40 00\n45 31 c9\n31 c0\ne8 f3 39 00 00\n31 ff\ne8 ec f3 ff ff\nbf 01 00 00 00\ne8 52 f5 ff ff\n31 ff\nbe 25 8b 40 00\nba 05 00 00 00\ne8 e1 f0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 40 f3 ff ff\nbf 01 00 00 00\ne8 26 f5 ff ff\n49 89 f7\n31 ff\nbe 46 8b 40 00\n31 db\nba 05 00 00 00\ne8 b0 f0 ff ff\n49 89 c6\n40 88 eb\n49 8b 3c df\ne8 11 1f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 00 f3 ff ff\nbf 01 00 00 00\ne8 e6 f4 ff ff\n66 0f 1f 44 00 00\n'
p1398
S'.text:0000000000401f40\n.text:0000000000401f41\n.text:0000000000401f43\n.text:0000000000401f45\n.text:0000000000401f47\n.text:0000000000401f49\n.text:0000000000401f4a\n.text:0000000000401f4e\n.text:0000000000401f51\n.text:0000000000401f54\n.text:0000000000401f5d\n.text:0000000000401f66\n.text:0000000000401f6a\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f83\n.text:0000000000401f88\n.text:0000000000401f8d\n.text:0000000000401f92\n.text:0000000000401f97\n.text:0000000000401f9c\n.text:0000000000401fa1\n.text:0000000000401fa8\n.text:0000000000401faa\n.text:0000000000401fae\n.text:0000000000401fb3\n.text:0000000000401fb8\n.text:0000000000401fbd\n.text:0000000000401fc2\n.text:0000000000401fc7\n.text:0000000000401fcc\n.text:0000000000401fce\n.text:0000000000401fd3\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fe1\n.text:0000000000401fe3\n.text:0000000000401fe5\n.text:0000000000401fed\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff8\n.text:0000000000401ffd\n.text:0000000000402000\n.text:0000000000402003\n.text:0000000000402006\n.text:000000000040200b\n.text:000000000040200e\n.text:0000000000402014\n.text:0000000000402017\n.text:000000000040201a\n.text:0000000000402020\n.text:0000000000402022\n.text:0000000000402029\n.text:000000000040202e\n.text:0000000000402035\n.text:000000000040203a\n.text:000000000040203d\n.text:0000000000402042\n.text:0000000000402045\n.text:000000000040204a\n.text:000000000040204c\n.text:000000000040204e\n.text:0000000000402053\n.text:0000000000402058\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402067\n.text:0000000000402069\n.text:000000000040206c\n.text:0000000000402071\n.text:0000000000402074\n.text:0000000000402076\n.text:0000000000402079\n.text:0000000000402080\n.text:0000000000402082\n.text:0000000000402087\n.text:000000000040208c\n.text:0000000000402091\n.text:0000000000402093\n.text:000000000040209a\n.text:000000000040209f\n.text:00000000004020a2\n.text:00000000004020a5\n.text:00000000004020a8\n.text:00000000004020ad\n.text:00000000004020b0\n.text:00000000004020b3\n.text:00000000004020b7\n.text:00000000004020b9\n.text:00000000004020be\n.text:00000000004020c3\n.text:00000000004020c8\n.text:00000000004020ca\n.text:00000000004020d1\n.text:00000000004020d6\n.text:00000000004020d9\n.text:00000000004020dc\n.text:00000000004020df\n.text:00000000004020e4\n.text:00000000004020e7\n.text:00000000004020ec\n.text:00000000004020ef\n.text:00000000004020f2\n.text:00000000004020f6\n.text:00000000004020f9\n.text:00000000004020fb\n.text:0000000000402100\n.text:0000000000402103\n.text:0000000000402108\n.text:000000000040210a\n.text:000000000040210c\n.text:000000000040210f\n.text:0000000000402115\n.text:000000000040211a\n.text:000000000040211c\n.text:000000000040211e\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212d\n.text:0000000000402130\n.text:0000000000402135\n.text:0000000000402138\n.text:000000000040213b\n.text:0000000000402142\n.text:0000000000402147\n.text:000000000040214a\n.text:000000000040214f\n.text:0000000000402154\n.text:0000000000402156\n.text:0000000000402158\n.text:000000000040215d\n.text:0000000000402160\n.text:0000000000402163\n.text:0000000000402168\n.text:000000000040216b\n.text:000000000040216e\n.text:0000000000402171\n.text:0000000000402176\n.text:0000000000402179\n.text:000000000040217e\n.text:0000000000402185\n.text:0000000000402187\n.text:000000000040218c\n.text:000000000040218f\n.text:0000000000402194\n.text:0000000000402199\n.text:000000000040219c\n.text:00000000004021a2\n.text:00000000004021a4\n.text:00000000004021aa\n.text:00000000004021af\n.text:00000000004021b2\n.text:00000000004021b6\n.text:00000000004021b9\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021c8\n.text:00000000004021cf\n.text:00000000004021d4\n.text:00000000004021d6\n.text:00000000004021d8\n.text:00000000004021da\n.text:00000000004021df\n.text:00000000004021e4\n.text:00000000004021e9\n.text:00000000004021ec\n.text:00000000004021f1\n.text:00000000004021f3\n.text:00000000004021f5\n.text:00000000004021f8\n.text:00000000004021fd\n.text:0000000000402204\n.text:0000000000402209\n.text:000000000040220c\n.text:0000000000402211\n.text:0000000000402213\n.text:0000000000402218\n.text:000000000040221b\n.text:0000000000402220\n.text:0000000000402225\n.text:0000000000402228\n.text:000000000040222a\n.text:0000000000402231\n.text:0000000000402236\n.text:0000000000402238\n.text:000000000040223a\n.text:000000000040223c\n.text:0000000000402241\n.text:0000000000402246\n.text:000000000040224b\n.text:000000000040224e\n.text:0000000000402253\n.text:0000000000402255\n.text:0000000000402257\n.text:000000000040225a\n.text:000000000040225f\n.text:0000000000402266\n.text:000000000040226b\n.text:000000000040226e\n.text:0000000000402273\n.text:0000000000402275\n.text:000000000040227a\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402287\n.text:000000000040228e\n.text:0000000000402293\n.text:0000000000402296\n.text:000000000040229b\n.text:000000000040229d\n.text:000000000040229f\n.text:00000000004022a2\n.text:00000000004022a7\n.text:00000000004022aa\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b7\n.text:00000000004022bd\n.text:00000000004022c4\n.text:00000000004022c7\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022dd\n.text:00000000004022e0\n.text:00000000004022e3\n.text:00000000004022e8\n.text:00000000004022ed\n.text:00000000004022ef\n.text:00000000004022f1\n.text:00000000004022f6\n.text:00000000004022f8\n.text:00000000004022fd\n.text:0000000000402300\n.text:0000000000402303\n.text:0000000000402305\n.text:0000000000402308\n.text:000000000040230d\n.text:0000000000402313\n.text:0000000000402316\n.text:0000000000402318\n.text:000000000040231d\n.text:0000000000402320\n.text:0000000000402325\n.text:0000000000402328\n.text:000000000040232a\n.text:000000000040232f\n.text:0000000000402332\n.text:0000000000402337\n.text:000000000040233c\n.text:000000000040233f\n.text:0000000000402341\n.text:0000000000402346\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402351\n.text:0000000000402356\n.text:0000000000402359\n.text:000000000040235b\n.text:000000000040235e\n.text:0000000000402361\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236a\n.text:000000000040236e\n.text:0000000000402370\n.text:0000000000402373\n.text:0000000000402375\n.text:0000000000402377\n.text:0000000000402379\n.text:000000000040237c\n.text:000000000040237f\n.text:0000000000402386\n.text:000000000040238b\n.text:0000000000402390\n.text:0000000000402393\n.text:0000000000402395\n.text:000000000040239a\n.text:000000000040239d\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023ac\n.text:00000000004023af\n.text:00000000004023b4\n.text:00000000004023b9\n.text:00000000004023bb\n.text:00000000004023be\n.text:00000000004023c3\n.text:00000000004023ca\n.text:00000000004023cf\n.text:00000000004023d4\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023dd\n.text:00000000004023df\n.text:00000000004023e6\n.text:00000000004023e9\n.text:00000000004023ec\n.text:00000000004023f2\n.text:00000000004023f7\n.text:00000000004023fd\n.text:0000000000402403\n.text:000000000040240a\n.text:000000000040240f\n.text:0000000000402414\n.text:0000000000402419\n.text:000000000040241c\n.text:0000000000402421\n.text:0000000000402426\n.text:0000000000402429\n.text:000000000040242c\n.text:0000000000402430\n.text:0000000000402433\n.text:0000000000402437\n.text:0000000000402439\n.text:000000000040243b\n.text:0000000000402442\n.text:0000000000402445\n.text:0000000000402447\n.text:000000000040244a\n.text:000000000040244d\n.text:0000000000402452\n.text:0000000000402455\n.text:0000000000402458\n.text:000000000040245a\n.text:000000000040245f\n.text:0000000000402462\n.text:0000000000402467\n.text:000000000040246c\n.text:000000000040246f\n.text:0000000000402471\n.text:0000000000402476\n.text:000000000040247a\n.text:000000000040247d\n.text:0000000000402480\n.text:0000000000402482\n.text:0000000000402487\n.text:000000000040248a\n.text:000000000040248f\n.text:0000000000402492\n.text:0000000000402497\n.text:000000000040249c\n.text:000000000040249e\n.text:00000000004024a1\n.text:00000000004024a4\n.text:00000000004024a8\n.text:00000000004024ad\n.text:00000000004024b0\n.text:00000000004024b2\n.text:00000000004024b9\n.text:00000000004024be\n.text:00000000004024c3\n.text:00000000004024c6\n.text:00000000004024cb\n.text:00000000004024d0\n.text:00000000004024d3\n.text:00000000004024d6\n.text:00000000004024db\n.text:00000000004024dd\n.text:00000000004024e4\n.text:00000000004024e9\n.text:00000000004024eb\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f5\n.text:00000000004024f8\n.text:00000000004024fa\n.text:00000000004024ff\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251c\n.text:0000000000402521\n.text:0000000000402524\n.text:0000000000402526\n.text:0000000000402529\n.text:000000000040252b\n.text:0000000000402530\n.text:0000000000402533\n.text:0000000000402536\n.text:000000000040253b\n.text:000000000040253e\n.text:0000000000402543\n.text:0000000000402546\n.text:0000000000402548\n.text:000000000040254f\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255e\n.text:0000000000402563\n.text:0000000000402566\n.text:0000000000402568\n.text:000000000040256b\n.text:000000000040256e\n.text:0000000000402573\n.text:0000000000402578\n.text:000000000040257b\n.text:000000000040257d\n.text:0000000000402582\n.text:0000000000402585\n.text:0000000000402588\n.text:000000000040258d\n.text:0000000000402590\n.text:0000000000402595\n.text:000000000040259a\n.text:000000000040259c\n.text:000000000040259f\n.text:00000000004025a4\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025ae\n.text:00000000004025b1\n.text:00000000004025b7\n.text:00000000004025ba\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c3\n.text:00000000004025c8\n.text:00000000004025cd\n.text:00000000004025d0\n.text:00000000004025d5\n.text:00000000004025d7\n.text:00000000004025d9\n.text:00000000004025dc\n.text:00000000004025e1\n.text:00000000004025e6\n.text:00000000004025e8\n.text:00000000004025ee\n.text:00000000004025f3\n.text:00000000004025f6\n.text:00000000004025fb\n.text:0000000000402600\n.text:0000000000402605\n.text:0000000000402607\n.text:0000000000402609\n.text:000000000040260e\n.text:0000000000402611\n.text:0000000000402613\n.text:0000000000402618\n.text:000000000040261b\n.text:000000000040261e\n.text:0000000000402623\n.text:0000000000402625\n.text:0000000000402627\n.text:0000000000402629\n.text:000000000040262e\n.text:0000000000402630\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263d\n.text:0000000000402640\n.text:0000000000402645\n.text:0000000000402647\n.text:0000000000402649\n.text:000000000040264b\n.text:0000000000402650\n.text:0000000000402653\n.text:0000000000402658\n.text:000000000040265b\n.text:0000000000402660\n.text:0000000000402662\n.text:0000000000402664\n.text:0000000000402666\n.text:0000000000402669\n.text:000000000040266e\n.text:0000000000402671\n.text:0000000000402676\n.text:0000000000402678\n.text:000000000040267a\n.text:000000000040267f\n.text:0000000000402681\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268d\n.text:0000000000402692\n.text:0000000000402695\n.text:000000000040269a\n.text:000000000040269c\n.text:000000000040269e\n.text:00000000004026a1\n.text:00000000004026a6\n.text:00000000004026a8\n.text:00000000004026ac\n.text:00000000004026ad\n.text:00000000004026af\n.text:00000000004026b1\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026b6\n.text:00000000004026b7\n.text:00000000004026ba\n.text:00000000004026bd\n.text:00000000004026bf\n.text:00000000004026c4\n.text:00000000004026cb\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026d7\n.text:00000000004026dc\n.text:00000000004026de\n.text:00000000004026e0\n.text:00000000004026e5\n.text:00000000004026ec\n.text:00000000004026f3\n.text:00000000004026f8\n.text:00000000004026fd\n.text:0000000000402703\n.text:0000000000402706\n.text:0000000000402708\n.text:000000000040270d\n.text:000000000040270f\n.text:0000000000402714\n.text:0000000000402719\n.text:000000000040271e\n.text:0000000000402720\n.text:0000000000402725\n.text:000000000040272a\n.text:000000000040272f\n.text:0000000000402732\n.text:0000000000402734\n.text:0000000000402736\n.text:0000000000402738\n.text:000000000040273b\n.text:0000000000402740\n.text:0000000000402745\n.text:000000000040274a\n.text:000000000040274d\n.text:000000000040274f\n.text:0000000000402754\n.text:0000000000402756\n.text:000000000040275b\n.text:0000000000402760\n.text:0000000000402763\n.text:0000000000402766\n.text:000000000040276a\n.text:000000000040276f\n.text:0000000000402772\n.text:0000000000402774\n.text:0000000000402776\n.text:0000000000402778\n.text:000000000040277b\n.text:0000000000402780\n.text:0000000000402785\n.text:000000000040278a\n'
p1399
tp1400
sS'xcharalloc'
p1401
(S'\n__stdcall xcharalloc(size_t n)\n'
p1402
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1403
S'JMP 0x00406230\n'
p1404
S'e9 2b ff ff ff\n'
p1405
S'.text:0000000000406300\n'
p1406
tp1407
sS'c_isupper'
p1408
(S'\n__stdcall c_isupper()\n'
p1409
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1410
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1411
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1412
S'.text:0000000000406d40\n.text:0000000000406d43\n.text:0000000000406d46\n.text:0000000000406d49\n'
p1413
tp1414
sS'allocate_entry'
p1415
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1416
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1417
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00407b72\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x004019c0\nADD RSP,0x8\nRET\n'
p1418
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 43 9e ff ff\n48 83 c4 08\nc3\n'
p1419
S'.text:0000000000407b60\n.text:0000000000407b64\n.text:0000000000407b67\n.text:0000000000407b69\n.text:0000000000407b6d\n.text:0000000000407b71\n.text:0000000000407b72\n.text:0000000000407b73\n.text:0000000000407b78\n.text:0000000000407b7d\n.text:0000000000407b81\n'
p1420
tp1421
sS'randread_set_handler'
p1422
(S'\n__stdcall randread_set_handler(randread_source * s, anon_subr_void_void_ptr * handler)\n'
p1423
V\u000avoid randread_set_handler(randread_source *s,void (*handler)(void *))\u000a\u000a{\u000a  s->handler = handler;\u000a  return;\u000a}\u000a\u000a
p1424
S'MOV qword ptr [RDI + 0x8],RSI\nRET\n'
p1425
S'48 89 77 08\nc3\n'
p1426
S'.text:00000000004051f0\n.text:00000000004051f4\n'
p1427
tp1428
sS'c_isalnum'
p1429
(S'\n__stdcall c_isalnum()\n'
p1430
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1431
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00406c5b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00406c5b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00406c5a\nXOR EAX,EAX\nRET\n'
p1432
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1433
S'.text:0000000000406c40\n.text:0000000000406c42\n.text:0000000000406c45\n.text:0000000000406c48\n.text:0000000000406c4a\n.text:0000000000406c54\n.text:0000000000406c58\n.text:0000000000406c5a\n.text:0000000000406c5b\n.text:0000000000406c5e\n.text:0000000000406c61\n.text:0000000000406c63\n.text:0000000000406c65\n'
p1434
tp1435
sS'readlinebuffer_delim'
p1436
(S'\n__stdcall readlinebuffer_delim(linebuffer * linebuffer, FILE * stream)\n'
p1437
V\u000alinebuffer * readlinebuffer_delim(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  int iVar2;\u000a  char in_DL;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char *p;\u000a  \u000a  sVar1 = linebuffer->size;\u000a  pcVar3 = linebuffer->buffer;\u000a  iVar2 = feof_unlocked((FILE *)stream);\u000a  if (iVar2 == 0) {\u000a    pcVar4 = pcVar3 + sVar1;\u000a    p = pcVar3;\u000a    do {\u000a      iVar2 = getc_unlocked((FILE *)stream);\u000a      if (iVar2 == -1) {\u000a        if (pcVar3 == p) goto LAB_004030e6;\u000a        iVar2 = ferror_unlocked((FILE *)stream);\u000a        if (iVar2 != 0) goto LAB_004030e6;\u000a        iVar2 = (int)in_DL;\u000a        if (pcVar3[-1] == in_DL) break;\u000a      }\u000a      if (pcVar3 == pcVar4) {\u000a        sVar1 = linebuffer->size;\u000a        p = (char *)x2realloc(p,(size_t *)linebuffer);\u000a        pcVar3 = p + sVar1;\u000a        linebuffer->buffer = p;\u000a        pcVar4 = p + linebuffer->size;\u000a      }\u000a      *pcVar3 = (char)iVar2;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (iVar2 != (int)in_DL);\u000a    *(char **)&linebuffer->length = pcVar3 + -(long)p;\u000a  }\u000a  else {\u000aLAB_004030e6:\u000a    linebuffer = (linebuffer *)0x0;\u000a  }\u000a  return linebuffer;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R12,RSI\nMOV R14,RDI\nMOV R13,qword ptr [R14]\nMOV R15,qword ptr [R14 + 0x10]\nMOV RDI,R12\nCALL 0x00401b50\nTEST EAX,EAX\nJZ 0x004030eb\nXOR R14D,R14D\nJMP 0x00403161\nADD R13,R15\nMOV dword ptr [RSP + 0x4],EBX\nMOVSX EAX,BL\nMOV dword ptr [RSP],EAX\nMOV RBX,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R12\nCALL 0x00401780\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x0040312c\nCMP RBX,R15\nJZ 0x004030e6\nMOV RDI,R12\nCALL 0x00401960\nTEST EAX,EAX\nJNZ 0x004030e6\nMOV EAX,dword ptr [RSP + 0x4]\nCMP byte ptr [RBX + -0x1],AL\nMOV EBP,dword ptr [RSP]\nJZ 0x0040315a\nCMP RBX,R13\nJNZ 0x0040314f\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00406310\nMOV R15,RAX\nADD RBX,R15\nMOV qword ptr [R14 + 0x10],R15\nMOV R13,R15\nADD R13,qword ptr [R14]\nMOV byte ptr [RBX],BPL\nINC RBX\nCMP EBP,dword ptr [RSP]\nJNZ 0x00403100\nSUB RBX,R15\nMOV qword ptr [R14 + 0x8],RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1439
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 d3\n49 89 f4\n49 89 fe\n4d 8b 2e\n4d 8b 7e 10\n4c 89 e7\ne8 6e ea ff ff\n85 c0\n74 05\n45 31 f6\neb 76\n4d 01 fd\n89 5c 24 04\n0f be c3\n89 04 24\n4c 89 fb\n0f 1f 44 00 00\n4c 89 e7\ne8 78 e6 ff ff\n89 c5\n83 fd ff\n75 1d\n4c 39 fb\n74 d2\n4c 89 e7\ne8 44 e8 ff ff\n85 c0\n75 c6\n8b 44 24 04\n38 43 ff\n8b 2c 24\n74 2e\n4c 39 eb\n75 1e\n49 8b 1e\n4c 89 ff\n4c 89 f6\ne8 d1 31 00 00\n49 89 c7\n4c 01 fb\n4d 89 7e 10\n4d 89 fd\n4d 03 2e\n40 88 2b\n48 ff c3\n3b 2c 24\n75 a6\n4c 29 fb\n49 89 5e 08\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1440
S'.text:00000000004030c0\n.text:00000000004030c1\n.text:00000000004030c3\n.text:00000000004030c5\n.text:00000000004030c7\n.text:00000000004030c9\n.text:00000000004030ca\n.text:00000000004030cb\n.text:00000000004030cd\n.text:00000000004030d0\n.text:00000000004030d3\n.text:00000000004030d6\n.text:00000000004030da\n.text:00000000004030dd\n.text:00000000004030e2\n.text:00000000004030e4\n.text:00000000004030e6\n.text:00000000004030e9\n.text:00000000004030eb\n.text:00000000004030ee\n.text:00000000004030f2\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403103\n.text:0000000000403108\n.text:000000000040310a\n.text:000000000040310d\n.text:000000000040310f\n.text:0000000000403112\n.text:0000000000403114\n.text:0000000000403117\n.text:000000000040311c\n.text:000000000040311e\n.text:0000000000403120\n.text:0000000000403124\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403131\n.text:0000000000403134\n.text:0000000000403137\n.text:000000000040313a\n.text:000000000040313f\n.text:0000000000403142\n.text:0000000000403145\n.text:0000000000403149\n.text:000000000040314c\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403155\n.text:0000000000403158\n.text:000000000040315a\n.text:000000000040315d\n.text:0000000000403161\n.text:0000000000403164\n.text:0000000000403168\n.text:0000000000403169\n.text:000000000040316b\n.text:000000000040316d\n.text:000000000040316f\n.text:0000000000403171\n.text:0000000000403172\n'
p1441
tp1442
sS'__errno_location'
p1443
(S'\n__stdcall __errno_location()\n'
p1444
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060d030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1445
S'JMP qword ptr [0x0060d030]\n'
p1446
S'ff 25 1a b9 20 00\n'
p1447
S'.plt:0000000000401710\n'
p1448
tp1449
sS'x2nrealloc'
p1450
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1451
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1452
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004062cc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004062f9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004062ea\nTEST RCX,RCX\nJNZ 0x004062ea\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00406270\nPUSH RAX\nCALL 0x004063c0\n'
p1453
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1454
S'.text:00000000004062a0\n.text:00000000004062a3\n.text:00000000004062a6\n.text:00000000004062a9\n.text:00000000004062ab\n.text:00000000004062b5\n.text:00000000004062b7\n.text:00000000004062ba\n.text:00000000004062bd\n.text:00000000004062bf\n.text:00000000004062c2\n.text:00000000004062c5\n.text:00000000004062ca\n.text:00000000004062cc\n.text:00000000004062cf\n.text:00000000004062d1\n.text:00000000004062d6\n.text:00000000004062d8\n.text:00000000004062db\n.text:00000000004062dd\n.text:00000000004062e4\n.text:00000000004062e7\n.text:00000000004062ea\n.text:00000000004062ed\n.text:00000000004062f1\n.text:00000000004062f4\n.text:00000000004062f9\n.text:00000000004062fa\n'
p1455
tp1456
sS'quotearg_n_options'
p1457
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1458
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401710\nTEST R12D,R12D\nJS 0x00404341\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060d280]\nCMP dword ptr [0x0060d288],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040425b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60d290\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00406270\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060d280],R15\nJNZ 0x00404222\nMOVUPS XMM0,xmmword ptr [0x0060d290]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060d288]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004018d0\nMOV dword ptr [0x0060d288],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004033b0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004042bd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040432b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60d390\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004042e8\nCALL 0x004016f0\nMOV RDI,R15\nCALL 0x00406300\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004033b0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\n'
p1460
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 61 d5 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 b6 90 20 00\n44 39 25 b7 90 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 90 d2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 68 20 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 6b 90 20 00\n75 0b\n0f 10 05 72 90 20 00\n41 0f 11 07\n8b 05 60 90 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 8d d6 ff ff\n89 1d 3f 90 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 90 d3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 08 d4 ff ff\n4c 89 ff\ne8 10 20 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ba d3 ff ff\n'
p1461
S'.text:0000000000404190\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404195\n.text:0000000000404197\n.text:0000000000404199\n.text:000000000040419a\n.text:000000000040419e\n.text:00000000004041a1\n.text:00000000004041a4\n.text:00000000004041a7\n.text:00000000004041aa\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b8\n.text:00000000004041bd\n.text:00000000004041bf\n.text:00000000004041c3\n.text:00000000004041ca\n.text:00000000004041d1\n.text:00000000004041d6\n.text:00000000004041db\n.text:00000000004041e0\n.text:00000000004041e2\n.text:00000000004041e7\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041f8\n.text:00000000004041fc\n.text:00000000004041ff\n.text:0000000000404203\n.text:0000000000404208\n.text:000000000040420b\n.text:000000000040420e\n.text:0000000000404215\n.text:0000000000404217\n.text:000000000040421e\n.text:0000000000404222\n.text:0000000000404228\n.text:000000000040422b\n.text:000000000040422f\n.text:0000000000404232\n.text:0000000000404235\n.text:0000000000404239\n.text:000000000040423b\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404249\n.text:000000000040424c\n.text:0000000000404251\n.text:0000000000404256\n.text:000000000040425b\n.text:000000000040425e\n.text:0000000000404262\n.text:0000000000404266\n.text:000000000040426b\n.text:000000000040426f\n.text:0000000000404273\n.text:0000000000404277\n.text:000000000040427b\n.text:000000000040427f\n.text:0000000000404284\n.text:0000000000404287\n.text:000000000040428a\n.text:000000000040428d\n.text:0000000000404292\n.text:0000000000404295\n.text:0000000000404298\n.text:000000000040429b\n.text:000000000040429c\n.text:00000000004042a1\n.text:00000000004042a5\n.text:00000000004042a8\n.text:00000000004042ab\n.text:00000000004042ad\n.text:00000000004042b2\n.text:00000000004042b6\n.text:00000000004042bb\n.text:00000000004042bd\n.text:00000000004042c1\n.text:00000000004042c6\n.text:00000000004042c9\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d6\n.text:00000000004042d9\n.text:00000000004042de\n.text:00000000004042e1\n.text:00000000004042e3\n.text:00000000004042e8\n.text:00000000004042eb\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f6\n.text:00000000004042fb\n.text:00000000004042fe\n.text:0000000000404302\n.text:0000000000404305\n.text:0000000000404308\n.text:000000000040430d\n.text:0000000000404312\n.text:0000000000404317\n.text:000000000040431a\n.text:000000000040431d\n.text:000000000040431e\n.text:0000000000404323\n.text:0000000000404327\n.text:000000000040432b\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404336\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433b\n.text:000000000040433d\n.text:000000000040433f\n.text:0000000000404340\n.text:0000000000404341\n'
p1462
tp1463
sS'strcmp'
p1464
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1465
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060d168)();\u000a  return iVar1;\u000a}\u000a\u000a
p1466
S'JMP qword ptr [0x0060d168]\n'
p1467
S'ff 25 e2 b7 20 00\n'
p1468
S'.plt:0000000000401980\n'
p1469
tp1470
sS'rotr64'
p1471
(S'\n__stdcall rotr64(uint64_t x)\n'
p1472
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1473
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1474
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1475
S'.text:0000000000408350\n.text:0000000000408352\n.text:0000000000408355\n.text:0000000000408358\n'
p1476
tp1477
sS'set_custom_quoting'
p1478
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1479
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1480
S'TEST RDI,RDI\nMOV EAX,0x60d350\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403325\nTEST RDX,RDX\nJZ 0x00403325\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401700\n'
p1481
S'48 85 ff\nb8 50 d3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 d5 e3 ff ff\n'
p1482
S'.text:0000000000403300\n.text:0000000000403303\n.text:0000000000403308\n.text:000000000040330c\n.text:0000000000403312\n.text:0000000000403315\n.text:0000000000403317\n.text:000000000040331a\n.text:000000000040331c\n.text:0000000000403320\n.text:0000000000403324\n.text:0000000000403325\n.text:0000000000403326\n'
p1483
tp1484
sS'read'
p1485
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1486
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060d140)();\u000a  return sVar1;\u000a}\u000a\u000a
p1487
S'JMP qword ptr [0x0060d140]\n'
p1488
S'ff 25 0a b8 20 00\n'
p1489
S'.plt:0000000000401930\n'
p1490
tp1491
sS'c_isalpha'
p1492
(S'\n__stdcall c_isalpha()\n'
p1493
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1494
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00406c8b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1495
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1496
S'.text:0000000000406c70\n.text:0000000000406c73\n.text:0000000000406c76\n.text:0000000000406c78\n.text:0000000000406c82\n.text:0000000000406c84\n.text:0000000000406c87\n.text:0000000000406c8a\n.text:0000000000406c8b\n.text:0000000000406c8d\n'
p1497
tp1498
sS'swap'
p1499
(S'\n__stdcall swap(size_t * v, size_t i, size_t j)\n'
p1500
V\u000avoid swap(size_t *v,size_t i,size_t j)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = v[i];\u000a  v[i] = v[j];\u000a  v[j] = sVar1;\u000a  return;\u000a}\u000a\u000a
p1501
S'MOV RAX,qword ptr [RDI + RSI*0x8]\nMOV RCX,qword ptr [RDI + RDX*0x8]\nMOV qword ptr [RDI + RSI*0x8],RCX\nMOV qword ptr [RDI + RDX*0x8],RAX\nRET\n'
p1502
S'48 8b 04 f7\n48 8b 0c d7\n48 89 0c f7\n48 89 04 d7\nc3\n'
p1503
S'.text:0000000000404f20\n.text:0000000000404f24\n.text:0000000000404f28\n.text:0000000000404f2c\n.text:0000000000404f30\n'
p1504
tp1505
sS'quotearg_custom_mem'
p1506
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1507
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1508
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004045a0\n'
p1509
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1510
S'.text:0000000000404630\n.text:0000000000404633\n.text:0000000000404636\n.text:0000000000404639\n.text:000000000040463c\n.text:000000000040463e\n.text:0000000000404641\n'
p1511
tp1512
sS'ceil_lg'
p1513
(S'\n__stdcall ceil_lg(size_t n)\n'
p1514
V\u000asize_t ceil_lg(size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  ulong uVar2;\u000a  \u000a  sVar1 = 0;\u000a  uVar2 = n - 1;\u000a  while (uVar2 != 0) {\u000a    sVar1 = sVar1 + 1;\u000a    uVar2 = uVar2 >> 1;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p1515
S'XOR EAX,EAX\nDEC RDI\nJZ 0x00404c98\nNOP word ptr [RAX + RAX*0x1]\nINC RAX\nSHR RDI,1\nJNZ 0x00404c90\nRET\n'
p1516
S'31 c0\n48 ff cf\n74 11\n66 0f 1f 84 00 00 00 00 00\n48 ff c0\n48 d1 ef\n75 f8\nc3\n'
p1517
S'.text:0000000000404c80\n.text:0000000000404c82\n.text:0000000000404c85\n.text:0000000000404c87\n.text:0000000000404c90\n.text:0000000000404c93\n.text:0000000000404c96\n.text:0000000000404c98\n'
p1518
tp1519
sS'hash_get_max_bucket_length'
p1520
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1521
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1522
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00406efd\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00406ef3\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00406ee0\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00406ed0\nRET\nXOR EAX,EAX\nRET\n'
p1523
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1524
S'.text:0000000000406ec0\n.text:0000000000406ec3\n.text:0000000000406ec7\n.text:0000000000406ec9\n.text:0000000000406ecd\n.text:0000000000406ecf\n.text:0000000000406ed0\n.text:0000000000406ed4\n.text:0000000000406ed6\n.text:0000000000406ed8\n.text:0000000000406edb\n.text:0000000000406ee0\n.text:0000000000406ee4\n.text:0000000000406ee7\n.text:0000000000406eea\n.text:0000000000406eec\n.text:0000000000406eef\n.text:0000000000406ef3\n.text:0000000000406ef7\n.text:0000000000406efa\n.text:0000000000406efc\n.text:0000000000406efd\n.text:0000000000406eff\n'
p1525
tp1526
sS'FUN_004016d0'
p1527
(S'\n__stdcall FUN_004016d0()\n'
p1528
V\u000avoid FUN_004016d0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060d010)();\u000a  return;\u000a}\u000a\u000a
p1529
S'PUSH qword ptr [0x0060d008]\nJMP qword ptr [0x0060d010]\n'
p1530
S'ff 35 32 b9 20 00\nff 25 34 b9 20 00\n'
p1531
S'.plt:00000000004016d0\n.plt:00000000004016d6\n'
p1532
tp1533
sS'rpl_calloc'
p1534
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1535
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060d160)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1536
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00406aeb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00406af0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00406af0\nPUSH RAX\nCALL 0x00401710\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401970\n'
p1537
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 2f ac ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 75 ae ff ff\n'
p1538
S'.text:0000000000406ab0\n.text:0000000000406ab3\n.text:0000000000406ab8\n.text:0000000000406aba\n.text:0000000000406abd\n.text:0000000000406ac2\n.text:0000000000406ac4\n.text:0000000000406ac7\n.text:0000000000406acb\n.text:0000000000406acd\n.text:0000000000406ad0\n.text:0000000000406ad3\n.text:0000000000406ad6\n.text:0000000000406ad9\n.text:0000000000406adb\n.text:0000000000406adc\n.text:0000000000406ae1\n.text:0000000000406ae7\n.text:0000000000406ae9\n.text:0000000000406aea\n.text:0000000000406aeb\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406af6\n'
p1539
tp1540
sS'memset'
p1541
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1542
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060d110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1543
S'JMP qword ptr [0x0060d110]\n'
p1544
S'ff 25 3a b8 20 00\n'
p1545
S'.plt:00000000004018d0\n'
p1546
tp1547
sS'getc_unlocked'
p1548
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1549
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060d068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1550
S'JMP qword ptr [0x0060d068]\n'
p1551
S'ff 25 e2 b8 20 00\n'
p1552
S'.plt:0000000000401780\n'
p1553
tp1554
sS'readsource'
p1555
(S'\n__stdcall readsource(randread_source * s, uchar * p, size_t size)\n'
p1556
V\u000avoid readsource(randread_source *s,uchar *p,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  size_t __n;\u000a  \u000a  sVar2 = fread_unlocked(p,1,size,(FILE *)s->source);\u000a  piVar3 = __errno_location();\u000a  __n = size - sVar2;\u000a  while (__n != 0) {\u000a    p = p + sVar2;\u000a    iVar4 = *piVar3;\u000a    iVar1 = ferror_unlocked((FILE *)s->source);\u000a    if (iVar1 == 0) {\u000a      iVar4 = iVar1;\u000a    }\u000a    *piVar3 = iVar4;\u000a    (*s->handler)(s->handler_arg);\u000a    sVar2 = fread_unlocked(p,1,__n,(FILE *)s->source);\u000a    __n = __n - sVar2;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1557
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nCALL 0x004017c0\nMOV RBX,RAX\nCALL 0x00401710\nMOV R12,RAX\nSUB R13,RBX\nJZ 0x004052ab\nNOP word ptr CS:[RAX + RAX*0x1]\nADD R14,RBX\nMOV EBX,dword ptr [R12]\nMOV RDI,qword ptr [R15]\nCALL 0x00401960\nTEST EAX,EAX\nCMOVZ EBX,EAX\nMOV dword ptr [R12],EBX\nMOV RDI,qword ptr [R15 + 0x10]\nCALL qword ptr [R15 + 0x8]\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nMOV RDX,R13\nCALL 0x004017c0\nMOV RBX,RAX\nSUB R13,RBX\nJNZ 0x00405270\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1558
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\ne8 6e c5 ff ff\n48 89 c3\ne8 b6 c4 ff ff\n49 89 c4\n49 29 dd\n74 49\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 01 de\n41 8b 1c 24\n49 8b 3f\ne8 e1 c6 ff ff\n85 c0\n0f 44 d8\n41 89 1c 24\n49 8b 7f 10\n41 ff 57 08\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\n4c 89 ea\ne8 1d c5 ff ff\n48 89 c3\n49 29 dd\n75 c5\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1559
S'.text:0000000000405230\n.text:0000000000405232\n.text:0000000000405234\n.text:0000000000405236\n.text:0000000000405238\n.text:0000000000405239\n.text:000000000040523c\n.text:000000000040523f\n.text:0000000000405242\n.text:0000000000405245\n.text:000000000040524a\n.text:000000000040524d\n.text:0000000000405252\n.text:0000000000405255\n.text:000000000040525a\n.text:000000000040525d\n.text:0000000000405260\n.text:0000000000405262\n.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405277\n.text:000000000040527a\n.text:000000000040527f\n.text:0000000000405281\n.text:0000000000405284\n.text:0000000000405288\n.text:000000000040528c\n.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405298\n.text:000000000040529b\n.text:000000000040529e\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052a9\n.text:00000000004052ab\n.text:00000000004052ac\n.text:00000000004052ae\n.text:00000000004052b0\n.text:00000000004052b2\n.text:00000000004052b4\n'
p1560
tp1561
sS'c_isascii'
p1562
(S'\n__stdcall c_isascii()\n'
p1563
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1564
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1565
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1566
S'.text:0000000000406c90\n.text:0000000000406c96\n.text:0000000000406c99\n'
p1567
tp1568
sS'hash_insert_if_absent'
p1569
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1570
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_00409e8c <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_00409e88 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_00409e88) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_00407a8d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_00407a8d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1571
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00407a8d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00407aa0\nTEST RAX,RAX\nJZ 0x00407901\nTEST RBX,RBX\nJZ 0x00407a80\nMOV qword ptr [RBX],RAX\nJMP 0x00407a80\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00407915\nCVTSI2SS XMM0,RCX\nJMP 0x0040792a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040793a\nCVTSI2SS XMM1,RAX\nJMP 0x0040794f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00407a39\nMOV RDI,R15\nCALL 0x004073d0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00407979\nCVTSI2SS XMM2,RCX\nJMP 0x0040798e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x004079a6\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x004079be\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00407a39\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x004079d9\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x00409e8c]\nJNC 0x00407a80\nMOVSS XMM1,dword ptr [0x00409e88]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00407670\nTEST AL,AL\nJZ 0x00407a80\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00407aa0\nTEST RAX,RAX\nJNZ 0x00407a8d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00407a69\nMOV RDI,R15\nCALL 0x00407b60\nTEST RAX,RAX\nJZ 0x00407a7b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00407a74\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00407a80\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\n'
p1572
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 a7 24 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d 95 24 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 6e 9c ff ff\n'
p1573
S'.text:00000000004078c0\n.text:00000000004078c1\n.text:00000000004078c3\n.text:00000000004078c5\n.text:00000000004078c6\n.text:00000000004078c7\n.text:00000000004078ca\n.text:00000000004078cd\n.text:00000000004078d0\n.text:00000000004078d3\n.text:00000000004078d9\n.text:00000000004078dc\n.text:00000000004078de\n.text:00000000004078e0\n.text:00000000004078e3\n.text:00000000004078e6\n.text:00000000004078eb\n.text:00000000004078ee\n.text:00000000004078f0\n.text:00000000004078f3\n.text:00000000004078f9\n.text:00000000004078fc\n.text:0000000000407901\n.text:0000000000407905\n.text:0000000000407909\n.text:000000000040790c\n.text:000000000040790e\n.text:0000000000407913\n.text:0000000000407915\n.text:0000000000407918\n.text:000000000040791b\n.text:000000000040791e\n.text:0000000000407921\n.text:0000000000407926\n.text:000000000040792a\n.text:000000000040792e\n.text:0000000000407931\n.text:0000000000407933\n.text:0000000000407938\n.text:000000000040793a\n.text:000000000040793d\n.text:0000000000407940\n.text:0000000000407943\n.text:0000000000407946\n.text:000000000040794b\n.text:000000000040794f\n.text:0000000000407954\n.text:0000000000407957\n.text:000000000040795d\n.text:0000000000407960\n.text:0000000000407965\n.text:0000000000407969\n.text:000000000040796d\n.text:0000000000407970\n.text:0000000000407972\n.text:0000000000407977\n.text:0000000000407979\n.text:000000000040797c\n.text:000000000040797f\n.text:0000000000407982\n.text:0000000000407985\n.text:000000000040798a\n.text:000000000040798e\n.text:0000000000407992\n.text:0000000000407997\n.text:000000000040799a\n.text:000000000040799c\n.text:000000000040799f\n.text:00000000004079a4\n.text:00000000004079a6\n.text:00000000004079a9\n.text:00000000004079ac\n.text:00000000004079af\n.text:00000000004079b2\n.text:00000000004079b5\n.text:00000000004079ba\n.text:00000000004079be\n.text:00000000004079c1\n.text:00000000004079c5\n.text:00000000004079c8\n.text:00000000004079ca\n.text:00000000004079ce\n.text:00000000004079d3\n.text:00000000004079d5\n.text:00000000004079d9\n.text:00000000004079de\n.text:00000000004079e5\n.text:00000000004079eb\n.text:00000000004079f3\n.text:00000000004079f6\n.text:00000000004079fa\n.text:00000000004079ff\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a11\n.text:0000000000407a14\n.text:0000000000407a18\n.text:0000000000407a1b\n.text:0000000000407a20\n.text:0000000000407a22\n.text:0000000000407a24\n.text:0000000000407a27\n.text:0000000000407a29\n.text:0000000000407a2c\n.text:0000000000407a2f\n.text:0000000000407a34\n.text:0000000000407a37\n.text:0000000000407a39\n.text:0000000000407a3d\n.text:0000000000407a41\n.text:0000000000407a43\n.text:0000000000407a46\n.text:0000000000407a4b\n.text:0000000000407a4e\n.text:0000000000407a50\n.text:0000000000407a53\n.text:0000000000407a57\n.text:0000000000407a5b\n.text:0000000000407a5f\n.text:0000000000407a63\n.text:0000000000407a67\n.text:0000000000407a69\n.text:0000000000407a6c\n.text:0000000000407a70\n.text:0000000000407a74\n.text:0000000000407a79\n.text:0000000000407a7b\n.text:0000000000407a80\n.text:0000000000407a82\n.text:0000000000407a86\n.text:0000000000407a87\n.text:0000000000407a89\n.text:0000000000407a8b\n.text:0000000000407a8c\n.text:0000000000407a8d\n'
p1574
tp1575
sS'dup_safer'
p1576
(S'\n__stdcall dup_safer()\n'
p1577
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1578
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00408180\n'
p1579
S'31 f6\nba 03 00 00 00\n31 c0\ne9 02 00 00 00\n'
p1580
S'.text:0000000000408170\n.text:0000000000408172\n.text:0000000000408177\n.text:0000000000408179\n'
p1581
tp1582
sS'protect_fd'
p1583
(S'\n__stdcall protect_fd()\n'
p1584
V\u000a_Bool protect_fd(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int __fd;\u000a  int *piVar2;\u000a  int in_EDI;\u000a  \u000a  __fd = open("/dev/null",0);\u000a  uVar1 = 1;\u000a  if (__fd != in_EDI) {\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 9;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1585
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x408dc8\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401a90\nMOV ECX,EAX\nMOV AL,0x1\nCMP ECX,EBX\nJZ 0x00403091\nTEST ECX,ECX\nJS 0x0040308f\nMOV EDI,ECX\nCALL 0x00401900\nCALL 0x00401710\nMOV dword ptr [RAX],0x9\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1586
S'53\n89 fb\nbf c8 8d 40 00\n31 f6\n31 c0\ne8 1f ea ff ff\n89 c1\nb0 01\n39 d9\n74 18\n85 c9\n78 12\n89 cf\ne8 7c e8 ff ff\ne8 87 e6 ff ff\nc7 00 09 00 00 00\n31 c0\n5b\nc3\n'
p1587
S'.text:0000000000403060\n.text:0000000000403061\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306a\n.text:000000000040306c\n.text:0000000000403071\n.text:0000000000403073\n.text:0000000000403075\n.text:0000000000403077\n.text:0000000000403079\n.text:000000000040307b\n.text:000000000040307d\n.text:000000000040307f\n.text:0000000000403084\n.text:0000000000403089\n.text:000000000040308f\n.text:0000000000403091\n.text:0000000000403092\n'
p1588
tp1589
sS'randint_choose'
p1590
(S'\n__stdcall randint_choose(randint_source * s, randint choices)\n'
p1591
V\u000arandint randint_choose(randint_source *s,randint choices)\u000a\u000a{\u000a  randint rVar1;\u000a  \u000a  rVar1 = randint_genmax(s,choices - 1);\u000a  return rVar1;\u000a}\u000a\u000a
p1592
S'DEC RSI\nJMP 0x00404ae0\n'
p1593
S'48 ff ce\ne9 c8 fc ff ff\n'
p1594
S'.text:0000000000404e10\n.text:0000000000404e13\n'
p1595
tp1596
sS'read_input_reservoir_sampling'
p1597
(S'\n__stdcall read_input_reservoir_sampling(FILE * in, size_t k, randint_source * s, linebuffer * * out_rsrv)\n'
p1598
V\u000asize_t read_input_reservoir_sampling(FILE *in,size_t k,randint_source *s,linebuffer **out_rsrv)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  linebuffer *linebuffer;\u000a  randint_source *prVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  randint_source *n;\u000a  randint_source *prVar6;\u000a  void **in_R8;\u000a  long lVar7;\u000a  void *local_68;\u000a  linebuffer local_48;\u000a  \u000a  n = (randint_source *)0x400;\u000a  if (s < (randint_source *)0x400) {\u000a    n = s;\u000a  }\u000a  local_68 = xcalloc((size_t)n,0x18);\u000a  linebuffer = (linebuffer *)0x0;\u000a  prVar6 = (randint_source *)0x0;\u000a  do {\u000a    lVar7 = (long)prVar6 * 0x18;\u000a    do {\u000a      if (s <= prVar6) {\u000a        if (linebuffer != (linebuffer *)0x0) {\u000a          initbuffer(&local_48);\u000a          do {\u000a            n = (randint_source *)((long)&prVar6->source + 1);\u000a            prVar3 = (randint_source *)randint_choose((randint_source *)out_rsrv,(randint)n);\u000a            linebuffer = (linebuffer *)((long)local_68 + (long)prVar3 * 0x18);\u000a            if (s <= prVar3) {\u000a              linebuffer = &local_48;\u000a            }\u000a            linebuffer = readlinebuffer_delim(linebuffer,in);\u000a          } while ((linebuffer != (linebuffer *)0x0) && (prVar6 = n, n != (randint_source *)0x1));\u000a          if (prVar6 == (randint_source *)0x0) {\u000a            uVar5 = dcgettext(0,"too many input lines",5);\u000a            error(1,0x4b,uVar5,uVar5);\u000a          }\u000a          freebuffer(&local_48);\u000a        }\u000aLAB_00402b36:\u000a        iVar2 = ferror_unlocked((FILE *)in);\u000a        if (iVar2 != 0) {\u000a          puVar4 = (uint *)__errno_location();\u000a          uVar1 = *puVar4;\u000a          uVar5 = dcgettext(0,0x40937e,5);\u000a          error(1,(ulong)uVar1,uVar5,uVar5);\u000a        }\u000a        *in_R8 = local_68;\u000a        if (s < prVar6) {\u000a          prVar6 = s;\u000a        }\u000a        return (size_t)prVar6;\u000a      }\u000a      linebuffer = readlinebuffer_delim((linebuffer *)((long)local_68 + lVar7),in);\u000a      if (linebuffer == (linebuffer *)0x0) goto LAB_00402b36;\u000a      prVar6 = (randint_source *)((long)&prVar6->source + 1);\u000a      lVar7 = lVar7 + 0x18;\u000a    } while (prVar6 < n);\u000a    n = (randint_source *)&n[0x2a].randmax;\u000a    local_68 = xnrealloc(local_68,(size_t)n,0x18);\u000a    memset((void *)(lVar7 + (long)local_68),0,0x6000);\u000a  } while( true );\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV qword ptr [RSP + 0x8],R8\nMOV qword ptr [RSP + 0x18],RCX\nMOV R14D,ESI\nMOV R13,RDI\nCMP RDX,0x400\nMOV EBX,0x400\nMOV qword ptr [RSP + 0x10],RDX\nCMOVC RBX,RDX\nMOV ESI,0x18\nMOV RDI,RBX\nCALL 0x00406350\nMOV qword ptr [RSP],RAX\nXOR R15D,R15D\nXOR EBP,EBP\nJMP 0x00402a3e\nADD RBX,0x400\nMOV EDX,0x18\nMOV RDI,qword ptr [RSP]\nMOV RSI,RBX\nCALL 0x00406250\nMOV qword ptr [RSP],RAX\nADD R12,RAX\nXOR ESI,ESI\nMOV EDX,0x6000\nMOV RDI,R12\nCALL 0x004018d0\nLEA RAX,[RBP*0x8]\nLEA R12,[RAX + RAX*0x2]\nNOP word ptr [RAX + RAX*0x1]\nCMP RBP,qword ptr [RSP + 0x10]\nJNC 0x00402a85\nMOV RAX,qword ptr [RSP]\nLEA RDI,[RAX + R12*0x1]\nMOVSX EDX,R14B\nMOV RSI,R13\nCALL 0x004030c0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00402b2e\nINC RBP\nADD R12,0x18\nCMP RBP,RBX\nJC 0x00402a50\nJMP 0x00402a10\nTEST R15,R15\nJZ 0x00402b2e\nLEA R15,[RSP + 0x20]\nMOV RDI,R15\nCALL 0x004030a0\nMOVSX R12D,R14B\nMOV RBX,qword ptr [RSP + 0x18]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,RBP\nLEA RBP,[R14 + 0x1]\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x00402e10\nCMP RAX,qword ptr [RSP + 0x10]\nLEA RAX,[RAX + RAX*0x2]\nMOV RCX,qword ptr [RSP]\nLEA RDI,[RCX + RAX*0x8]\nCMOVNC RDI,R15\nMOV RSI,R13\nMOV EDX,R12D\nCALL 0x004030c0\nTEST RAX,RAX\nJZ 0x00402af0\nCMP RBP,0x1\nMOV R14,RBP\nJNZ 0x00402ab0\nTEST R14,R14\nMOV RBP,qword ptr [RSP + 0x8]\nJNZ 0x00402b22\nXOR EDI,EDI\nMOV ESI,0x408da8\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x4b\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a80\nLEA RDI,[RSP + 0x20]\nCALL 0x00403180\nJMP 0x00402b36\nMOV R14,RBP\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,R13\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00402b6e\nCALL 0x00401710\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40937e\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401a80\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBP],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nCMP R14,RAX\nCMOVA R14,RAX\nMOV RAX,R14\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1600
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n4c 89 44 24 08\n48 89 4c 24 18\n41 89 f6\n49 89 fd\n48 81 fa 00 04 00 00\nbb 00 04 00 00\n48 89 54 24 10\n48 0f 42 da\nbe 18 00 00 00\n48 89 df\ne8 50 39 00 00\n48 89 04 24\n45 31 ff\n31 ed\neb 33\n48 81 c3 00 04 00 00\nba 18 00 00 00\n48 8b 3c 24\n48 89 de\ne8 28 38 00 00\n48 89 04 24\n49 01 c4\n31 f6\nba 00 60 00 00\n4c 89 e7\ne8 92 ee ff ff\n48 8d 04 ed 00 00 00 00\n4c 8d 24 40\n66 0f 1f 44 00 00\n48 3b 6c 24 10\n73 2e\n48 8b 04 24\n4a 8d 3c 20\n41 0f be d6\n4c 89 ee\ne8 55 06 00 00\n49 89 c7\n4d 85 ff\n0f 84 b7 00 00 00\n48 ff c5\n49 83 c4 18\n48 39 dd\n72 cd\neb 8b\n4d 85 ff\n0f 84 a0 00 00 00\n4c 8d 7c 24 20\n4c 89 ff\ne8 05 06 00 00\n45 0f be e6\n48 8b 5c 24 18\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 ee\n49 8d 6e 01\n48 89 df\n48 89 ee\ne8 4e 03 00 00\n48 3b 44 24 10\n48 8d 04 40\n48 8b 0c 24\n48 8d 3c c1\n49 0f 43 ff\n4c 89 ee\n44 89 e2\ne8 de 05 00 00\n48 85 c0\n74 09\n48 83 fd 01\n49 89 ee\n75 c0\n4d 85 f6\n48 8b 6c 24 08\n75 28\n31 ff\nbe a8 8d 40 00\nba 05 00 00 00\ne8 05 ed ff ff\n48 89 c1\nbf 01 00 00 00\nbe 4b 00 00 00\n31 c0\n48 89 ca\ne8 5e ef ff ff\n48 8d 7c 24 20\ne8 54 06 00 00\neb 08\n49 89 ee\n48 8b 6c 24 08\n4c 89 ef\ne8 22 ee ff ff\n85 c0\n74 2c\ne8 c9 eb ff ff\n8b 18\n31 ff\nbe 7e 93 40 00\nba 05 00 00 00\ne8 b6 ec ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 12 ef ff ff\n48 8b 04 24\n48 89 45 00\n48 8b 44 24 10\n49 39 c6\n4c 0f 47 f0\n4c 89 f0\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1601
S'.text:00000000004029c0\n.text:00000000004029c1\n.text:00000000004029c3\n.text:00000000004029c5\n.text:00000000004029c7\n.text:00000000004029c9\n.text:00000000004029ca\n.text:00000000004029ce\n.text:00000000004029d3\n.text:00000000004029d8\n.text:00000000004029db\n.text:00000000004029de\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f3\n.text:00000000004029f8\n.text:00000000004029fb\n.text:0000000000402a00\n.text:0000000000402a04\n.text:0000000000402a07\n.text:0000000000402a09\n.text:0000000000402a10\n.text:0000000000402a17\n.text:0000000000402a1c\n.text:0000000000402a20\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2c\n.text:0000000000402a2f\n.text:0000000000402a31\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a46\n.text:0000000000402a4a\n.text:0000000000402a50\n.text:0000000000402a55\n.text:0000000000402a57\n.text:0000000000402a5b\n.text:0000000000402a5f\n.text:0000000000402a63\n.text:0000000000402a66\n.text:0000000000402a6b\n.text:0000000000402a6e\n.text:0000000000402a71\n.text:0000000000402a77\n.text:0000000000402a7a\n.text:0000000000402a7e\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a85\n.text:0000000000402a88\n.text:0000000000402a8e\n.text:0000000000402a93\n.text:0000000000402a96\n.text:0000000000402a9b\n.text:0000000000402a9f\n.text:0000000000402aa4\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab7\n.text:0000000000402aba\n.text:0000000000402abd\n.text:0000000000402ac2\n.text:0000000000402ac7\n.text:0000000000402acb\n.text:0000000000402acf\n.text:0000000000402ad3\n.text:0000000000402ad7\n.text:0000000000402ada\n.text:0000000000402add\n.text:0000000000402ae2\n.text:0000000000402ae5\n.text:0000000000402ae7\n.text:0000000000402aeb\n.text:0000000000402aee\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afa\n.text:0000000000402afc\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b0b\n.text:0000000000402b0e\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b2c\n.text:0000000000402b2e\n.text:0000000000402b31\n.text:0000000000402b36\n.text:0000000000402b39\n.text:0000000000402b3e\n.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b47\n.text:0000000000402b49\n.text:0000000000402b4b\n.text:0000000000402b50\n.text:0000000000402b55\n.text:0000000000402b5a\n.text:0000000000402b5d\n.text:0000000000402b62\n.text:0000000000402b64\n.text:0000000000402b66\n.text:0000000000402b69\n.text:0000000000402b6e\n.text:0000000000402b72\n.text:0000000000402b76\n.text:0000000000402b7b\n.text:0000000000402b7e\n.text:0000000000402b82\n.text:0000000000402b85\n.text:0000000000402b89\n.text:0000000000402b8a\n.text:0000000000402b8c\n.text:0000000000402b8e\n.text:0000000000402b90\n.text:0000000000402b92\n.text:0000000000402b93\n'
p1602
tp1603
sS'setvbuf'
p1604
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p1605
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_0060d1e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1606
S'JMP qword ptr [0x0060d1e0]\n'
p1607
S'ff 25 6a b7 20 00\n'
p1608
S'.plt:0000000000401a70\n'
p1609
tp1610
sS'rotr32'
p1611
(S'\n__stdcall rotr32()\n'
p1612
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1613
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1614
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1615
S'.text:0000000000408370\n.text:0000000000408372\n.text:0000000000408374\n.text:0000000000408376\n'
p1616
tp1617
sS'__ctype_b_loc'
p1618
(S'\n__stdcall __ctype_b_loc()\n'
p1619
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060d258)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0060d258]\n'
p1621
S'ff 25 f2 b6 20 00\n'
p1622
S'.plt:0000000000401b60\n'
p1623
tp1624
sS'fdadvise'
p1625
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060d130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1627
S'JMP 0x00401910\n'
p1628
S'e9 0b ea ff ff\n'
p1629
S'.text:0000000000402f00\n'
p1630
tp1631
sS'quotearg'
p1632
(S'\n__stdcall quotearg(char * arg)\n'
p1633
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1634
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404180\n'
p1635
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1636
S'.text:0000000000404360\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404368\n'
p1637
tp1638
sS'_start'
p1639
(S'\n__stdcall _start()\n'
p1640
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1641
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x408490\nMOV RCX,0x408420\nMOV RDI,0x401f40\nCALL qword ptr [0x0060cff0]\nHLT\n'
p1642
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 90 84 40 00\n48 c7 c1 20 84 40 00\n48 c7 c7 40 1f 40 00\nff 15 56 b4 20 00\nf4\n'
p1643
S'.text:0000000000401b70\n.text:0000000000401b72\n.text:0000000000401b75\n.text:0000000000401b76\n.text:0000000000401b79\n.text:0000000000401b7d\n.text:0000000000401b7e\n.text:0000000000401b7f\n.text:0000000000401b86\n.text:0000000000401b8d\n.text:0000000000401b94\n.text:0000000000401b9a\n'
p1644
tp1645
sS'c_iscntrl'
p1646
(S'\n__stdcall c_iscntrl()\n'
p1647
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1648
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00406cb8\nRET\nCMP EDI,0x7f\nJZ 0x00406cb7\nXOR EAX,EAX\nRET\n'
p1649
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1650
S'.text:0000000000406cb0\n.text:0000000000406cb2\n.text:0000000000406cb5\n.text:0000000000406cb7\n.text:0000000000406cb8\n.text:0000000000406cbb\n.text:0000000000406cbd\n.text:0000000000406cbf\n'
p1651
tp1652
sS'hash_reset_tuning'
p1653
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1654
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1655
S'MOV EAX,dword ptr [0x00409f0c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x00409efc]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1656
S'8b 05 66 2c 00 00\n89 47 10\n0f 10 05 4c 2c 00 00\n0f 11 07\nc3\n'
p1657
S'.text:00000000004072a0\n.text:00000000004072a6\n.text:00000000004072a9\n.text:00000000004072b0\n.text:00000000004072b3\n'
p1658
tp1659
sS'c_isblank'
p1660
(S'\n__stdcall c_isblank()\n'
p1661
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1662
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1663
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1664
S'.text:0000000000406ca0\n.text:0000000000406ca3\n.text:0000000000406ca6\n.text:0000000000406ca9\n.text:0000000000406cac\n.text:0000000000406cae\n'
p1665
tp1666
sS'stpcpy'
p1667
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p1668
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_0060d0a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1669
S'JMP qword ptr [0x0060d0a8]\n'
p1670
S'ff 25 a2 b8 20 00\n'
p1671
S'.plt:0000000000401800\n'
p1672
tp1673
sS'randread_free'
p1674
(S'\n__stdcall randread_free(randread_source * s)\n'
p1675
V\u000aint randread_free(randread_source *s)\u000a\u000a{\u000a  FILE *fp;\u000a  int iVar1;\u000a  \u000a  fp = s->source;\u000a  free(s);\u000a  if (fp != (FILE *)0x0) {\u000a    iVar1 = rpl_fclose(fp);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1676
S'PUSH RBX\nMOV RBX,qword ptr [RDI]\nCALL 0x004016f0\nTEST RBX,RBX\nJZ 0x004053c7\nMOV RDI,RBX\nPOP RBX\nJMP 0x00406b00\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1677
S'53\n48 8b 1f\ne8 37 c3 ff ff\n48 85 db\n74 09\n48 89 df\n5b\ne9 39 17 00 00\n31 c0\n5b\nc3\n'
p1678
S'.text:00000000004053b0\n.text:00000000004053b1\n.text:00000000004053b4\n.text:00000000004053b9\n.text:00000000004053bc\n.text:00000000004053be\n.text:00000000004053c1\n.text:00000000004053c2\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053ca\n'
p1679
tp1680
sS'atexit'
p1681
(S'\n__stdcall atexit(__func * __func)\n'
p1682
V\u000a/* WARNING: Removing unreachable block (ram,0x004084c0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060d218)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1683
S'MOV RAX,0x60d268\nTEST RAX,RAX\nJZ 0x004084c0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401ae0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401ae0\n'
p1684
S'48 c7 c0 68 d2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a 96 ff ff\n31 d2\n31 f6\ne9 17 96 ff ff\n'
p1685
S'.text:00000000004084a0\n.text:00000000004084a7\n.text:00000000004084aa\n.text:00000000004084ac\n.text:00000000004084af\n.text:00000000004084b1\n.text:00000000004084c0\n.text:00000000004084c2\n.text:00000000004084c4\n'
p1686
tp1687
sS'fdopen'
p1688
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1689
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060d1c8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1690
S'JMP qword ptr [0x0060d1c8]\n'
p1691
S'ff 25 82 b7 20 00\n'
p1692
S'.plt:0000000000401a40\n'
p1693
tp1694
sS'hash_find_entry'
p1695
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1696
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1697
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x004070b0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x00407b25\nCMP RSI,RBP\nJZ 0x00407ad7\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00407af0\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x00407b4d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x00407b2a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x00407b45\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x00407b25\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x00407b33\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00407b33\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00407b00\nJMP 0x00407b4d\nXOR R14D,R14D\nJMP 0x00407b4d\nMOV qword ptr [RBX],0x0\nJMP 0x00407b4d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x00407b4d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00407e20\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1698
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1699
S'.text:0000000000407aa0\n.text:0000000000407aa1\n.text:0000000000407aa3\n.text:0000000000407aa5\n.text:0000000000407aa7\n.text:0000000000407aa8\n.text:0000000000407aab\n.text:0000000000407aae\n.text:0000000000407ab1\n.text:0000000000407ab4\n.text:0000000000407ab9\n.text:0000000000407abc\n.text:0000000000407abf\n.text:0000000000407ac2\n.text:0000000000407ac5\n.text:0000000000407ac7\n.text:0000000000407aca\n.text:0000000000407acc\n.text:0000000000407acf\n.text:0000000000407ad3\n.text:0000000000407ad5\n.text:0000000000407ad7\n.text:0000000000407ada\n.text:0000000000407add\n.text:0000000000407adf\n.text:0000000000407ae3\n.text:0000000000407ae6\n.text:0000000000407ae8\n.text:0000000000407aeb\n.text:0000000000407aee\n.text:0000000000407af0\n.text:0000000000407af4\n.text:0000000000407af7\n.text:0000000000407af9\n.text:0000000000407afd\n.text:0000000000407b00\n.text:0000000000407b03\n.text:0000000000407b06\n.text:0000000000407b08\n.text:0000000000407b0b\n.text:0000000000407b0f\n.text:0000000000407b11\n.text:0000000000407b13\n.text:0000000000407b16\n.text:0000000000407b1a\n.text:0000000000407b1e\n.text:0000000000407b21\n.text:0000000000407b23\n.text:0000000000407b25\n.text:0000000000407b28\n.text:0000000000407b2a\n.text:0000000000407b31\n.text:0000000000407b33\n.text:0000000000407b36\n.text:0000000000407b39\n.text:0000000000407b3c\n.text:0000000000407b3e\n.text:0000000000407b42\n.text:0000000000407b45\n.text:0000000000407b48\n.text:0000000000407b4d\n.text:0000000000407b50\n.text:0000000000407b51\n.text:0000000000407b53\n.text:0000000000407b55\n.text:0000000000407b57\n.text:0000000000407b58\n'
p1700
tp1701
sS'error'
p1702
(S'\n__stdcall error()\n'
p1703
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060d1e8)();\u000a  return;\u000a}\u000a\u000a
p1704
S'JMP qword ptr [0x0060d1e8]\n'
p1705
S'ff 25 62 b7 20 00\n'
p1706
S'.plt:0000000000401a80\n'
p1707
tp1708
sS'raw_comparator'
p1709
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1710
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1711
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1712
S'48 39 f7\n0f 94 c0\nc3\n'
p1713
S'.text:00000000004073c0\n.text:00000000004073c3\n.text:00000000004073c6\n'
p1714
tp1715
sS'strcaseeq6'
p1716
(S'\n__stdcall strcaseeq6()\n'
p1717
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1718
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404a22\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a29\nJMP 0x00404a3e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a3e\nTEST BPL,BPL\nJZ 0x00404a39\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404a50\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1719
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 31 23 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1720
S'.text:0000000000404a00\n.text:0000000000404a01\n.text:0000000000404a02\n.text:0000000000404a03\n.text:0000000000404a05\n.text:0000000000404a08\n.text:0000000000404a0a\n.text:0000000000404a0f\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a17\n.text:0000000000404a1a\n.text:0000000000404a1c\n.text:0000000000404a1e\n.text:0000000000404a20\n.text:0000000000404a22\n.text:0000000000404a24\n.text:0000000000404a27\n.text:0000000000404a29\n.text:0000000000404a2c\n.text:0000000000404a2e\n.text:0000000000404a31\n.text:0000000000404a35\n.text:0000000000404a36\n.text:0000000000404a37\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a42\n.text:0000000000404a43\n.text:0000000000404a44\n'
p1721
tp1722
sS'readlinebuffer'
p1723
(S'\n__stdcall readlinebuffer(linebuffer * linebuffer, FILE * stream)\n'
p1724
V\u000alinebuffer * readlinebuffer(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  linebuffer *plVar1;\u000a  \u000a  plVar1 = readlinebuffer_delim(linebuffer,stream);\u000a  return plVar1;\u000a}\u000a\u000a
p1725
S'MOV EDX,0xa\nJMP 0x004030c0\n'
p1726
S'ba 0a 00 00 00\neb 09\n'
p1727
S'.text:00000000004030b0\n.text:00000000004030b5\n'
p1728
tp1729
sS'strcaseeq5'
p1730
(S'\n__stdcall strcaseeq5()\n'
p1731
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1732
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004049d6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004049dd\nJMP 0x004049f4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004049f4\nTEST BPL,BPL\nJZ 0x004049ef\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404a00\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1733
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 7d 23 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1734
S'.text:00000000004049b0\n.text:00000000004049b1\n.text:00000000004049b3\n.text:00000000004049b4\n.text:00000000004049b7\n.text:00000000004049b9\n.text:00000000004049bc\n.text:00000000004049be\n.text:00000000004049c3\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049cb\n.text:00000000004049ce\n.text:00000000004049d0\n.text:00000000004049d2\n.text:00000000004049d4\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049db\n.text:00000000004049dd\n.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e6\n.text:00000000004049e9\n.text:00000000004049ea\n.text:00000000004049ec\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f4\n.text:00000000004049f5\n.text:00000000004049f7\n.text:00000000004049f8\n'
p1735
tp1736
sS'strcaseeq7'
p1737
(S'\n__stdcall strcaseeq7()\n'
p1738
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1739
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404a72\nTEST ECX,0xffffffdf\nJNZ 0x00404a76\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404a7a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1740
S'53\n48 89 fb\n31 ff\ne8 e5 22 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1741
S'.text:0000000000404a50\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a56\n.text:0000000000404a5b\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a69\n.text:0000000000404a6b\n.text:0000000000404a70\n.text:0000000000404a71\n.text:0000000000404a72\n.text:0000000000404a74\n.text:0000000000404a76\n.text:0000000000404a78\n.text:0000000000404a79\n.text:0000000000404a7a\n.text:0000000000404a7f\n.text:0000000000404a80\n'
p1742
tp1743
sS'randread'
p1744
(S'\n__stdcall randread(randread_source * s, void * buf, size_t size)\n'
p1745
V\u000avoid randread(randread_source *s,void *buf,size_t size)\u000a\u000a{\u000a  if (s->source != (FILE *)0x0) {\u000a    readsource(s,(uchar *)buf,size);\u000a    return;\u000a  }\u000a  readisaac((isaac *)s->buf,buf,size);\u000a  return;\u000a}\u000a\u000a
p1746
S'CMP qword ptr [RDI],0x0\nJZ 0x00405218\nJMP 0x00405230\nADD RDI,0x18\nJMP 0x004052c0\n'
p1747
S'48 83 3f 00\n74 02\neb 18\n48 83 c7 18\ne9 9f 00 00 00\n'
p1748
S'.text:0000000000405210\n.text:0000000000405214\n.text:0000000000405216\n.text:0000000000405218\n.text:000000000040521c\n'
p1749
tp1750
sS'get_nonce'
p1751
(S'\n__stdcall get_nonce(DRBG_CTX * ctx, uchar * * pout, int entropy, size_t min_len, size_t max_len)\n'
p1752
V\u000asize_t get_nonce(DRBG_CTX *ctx,uchar **pout,int entropy,size_t min_len,size_t max_len)\u000a\u000a{\u000a  int __fd;\u000a  ulong uVar1;\u000a  undefined4 extraout_var;\u000a  void *pvVar2;\u000a  undefined4 in_register_00000014;\u000a  uchar **__nbytes;\u000a  size_t __n;\u000a  timeval v;\u000a  __gid_t local_30 [4];\u000a  \u000a  uVar1 = 0;\u000a  __fd = open("/dev/urandom",0,CONCAT44(in_register_00000014,entropy));\u000a  if (-1 < __fd) {\u000a    __nbytes = (uchar **)0x800;\u000a    if (pout < (uchar **)0x800) {\u000a      __nbytes = pout;\u000a    }\u000a    uVar1 = read(__fd,ctx,(size_t)__nbytes);\u000a    __fd = close(__fd);\u000a    if ((long)uVar1 < 1) {\u000a      uVar1 = 0;\u000a    }\u000a    else {\u000a      if (0x7ff < uVar1) {\u000a        return CONCAT44(extraout_var,__fd);\u000a      }\u000a    }\u000a  }\u000a  __n = 0x10;\u000a  if (0x800 - uVar1 < 0x10) {\u000a    __n = 0x800 - uVar1;\u000a  }\u000a  gettimeofday((timeval *)local_30,(__timezone_ptr_t)0x0);\u000a  pvVar2 = memcpy(ctx + uVar1,(timeval *)local_30,__n);\u000a  uVar1 = __n + uVar1;\u000a  if (uVar1 < 0x800) {\u000a    __n = 4;\u000a    if (0x800 - uVar1 < 4) {\u000a      __n = 0x800 - uVar1;\u000a    }\u000a    local_30[0] = getpid();\u000a    pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a    uVar1 = __n + uVar1;\u000a    if (uVar1 < 0x800) {\u000a      __n = 4;\u000a      if (0x800 - uVar1 < 4) {\u000a        __n = 0x800 - uVar1;\u000a      }\u000a      local_30[0] = getppid();\u000a      pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a      uVar1 = __n + uVar1;\u000a      if (uVar1 < 0x800) {\u000a        __n = 4;\u000a        if (0x800 - uVar1 < 4) {\u000a          __n = 0x800 - uVar1;\u000a        }\u000a        local_30[0] = getuid();\u000a        pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        uVar1 = __n + uVar1;\u000a        if (uVar1 < 0x800) {\u000a          __n = 4;\u000a          if (0x800 - uVar1 < 4) {\u000a            __n = 0x800 - uVar1;\u000a          }\u000a          local_30[0] = getgid();\u000a          pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return (size_t)pvVar2;\u000a}\u000a\u000a
p1753
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV R14,RDI\nXOR R15D,R15D\nMOV EDI,0x409389\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401a90\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004050b1\nCMP RBX,0x800\nMOV EDX,0x800\nCMOVC RDX,RBX\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401930\nMOV R15,RAX\nMOV EDI,EBP\nCALL 0x00401900\nTEST R15,R15\nJLE 0x004050ae\nCMP R15,0x7ff\nJBE 0x004050b1\nJMP 0x004051dc\nXOR R15D,R15D\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x10\nMOV EBX,0x10\nCMOVC RBX,RAX\nLEA RBP,[RSP + 0x8]\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x004018b0\nLEA RDI,[R14 + R15*0x1]\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x00401990\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x004051dc\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x004017b0\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x00401990\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x004051dc\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x00401af0\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + R15*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,RBX\nCALL 0x00401990\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x004051dc\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x00401840\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x00401990\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x004051dc\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x004019b0\nMOV dword ptr [RSP + 0x8],EAX\nADD R14,R15\nLEA RSI,[RSP + 0x8]\nMOV RDI,R14\nMOV RDX,RBX\nCALL 0x00401990\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1754
S'55\n41 57\n41 56\n53\n48 83 ec 18\n48 89 f3\n49 89 fe\n45 31 ff\nbf 89 93 40 00\n31 f6\n31 c0\ne8 1f ca ff ff\n89 c5\n85 ed\n78 3a\n48 81 fb 00 08 00 00\nba 00 08 00 00\n48 0f 42 d3\n89 ef\n4c 89 f6\ne8 9f c8 ff ff\n49 89 c7\n89 ef\ne8 65 c8 ff ff\n4d 85 ff\n7e 0e\n49 81 ff ff 07 00 00\n76 08\ne9 2e 01 00 00\n45 31 ff\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 10\nbb 10 00 00 00\n48 0f 42 d8\n48 8d 6c 24 08\n31 f6\n48 89 ef\ne8 db c7 ff ff\n4b 8d 3c 3e\n48 89 ee\n48 89 da\ne8 ac c8 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n0f 87 e8 00 00 00\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 a1 c6 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 6c c8 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n0f 87 a8 00 00 00\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 a2 c9 ff ff\n89 44 24 08\n4b 8d 3c 3e\n48 8d 74 24 08\n48 89 da\ne8 2d c8 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n77 6d\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 b6 c6 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 f1 c7 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n77 31\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 eb c7 ff ff\n89 44 24 08\n4d 01 fe\n48 8d 74 24 08\n4c 89 f7\n48 89 da\ne8 b4 c7 ff ff\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1755
S'.text:0000000000405050\n.text:0000000000405051\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405056\n.text:000000000040505a\n.text:000000000040505d\n.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405068\n.text:000000000040506a\n.text:000000000040506c\n.text:0000000000405071\n.text:0000000000405073\n.text:0000000000405075\n.text:0000000000405077\n.text:000000000040507e\n.text:0000000000405083\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508c\n.text:0000000000405091\n.text:0000000000405094\n.text:0000000000405096\n.text:000000000040509b\n.text:000000000040509e\n.text:00000000004050a0\n.text:00000000004050a7\n.text:00000000004050a9\n.text:00000000004050ae\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050b9\n.text:00000000004050bd\n.text:00000000004050c2\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050cd\n.text:00000000004050d0\n.text:00000000004050d5\n.text:00000000004050d9\n.text:00000000004050dc\n.text:00000000004050df\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050ee\n.text:00000000004050f4\n.text:00000000004050f9\n.text:00000000004050fc\n.text:0000000000405100\n.text:0000000000405106\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405113\n.text:0000000000405117\n.text:000000000040511c\n.text:000000000040511f\n.text:0000000000405124\n.text:0000000000405127\n.text:000000000040512e\n.text:0000000000405134\n.text:0000000000405139\n.text:000000000040513c\n.text:0000000000405140\n.text:0000000000405145\n.text:0000000000405149\n.text:000000000040514e\n.text:0000000000405152\n.text:0000000000405156\n.text:000000000040515b\n.text:000000000040515e\n.text:0000000000405163\n.text:0000000000405166\n.text:000000000040516d\n.text:000000000040516f\n.text:0000000000405174\n.text:0000000000405177\n.text:000000000040517b\n.text:0000000000405181\n.text:0000000000405185\n.text:000000000040518a\n.text:000000000040518e\n.text:0000000000405192\n.text:0000000000405197\n.text:000000000040519a\n.text:000000000040519f\n.text:00000000004051a2\n.text:00000000004051a9\n.text:00000000004051ab\n.text:00000000004051b0\n.text:00000000004051b3\n.text:00000000004051b7\n.text:00000000004051bc\n.text:00000000004051c0\n.text:00000000004051c5\n.text:00000000004051c9\n.text:00000000004051cc\n.text:00000000004051d1\n.text:00000000004051d4\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051e0\n.text:00000000004051e1\n.text:00000000004051e3\n.text:00000000004051e5\n.text:00000000004051e6\n'
p1756
tp1757
sS'strtoul'
p1758
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1759
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060d210)();\u000a  return uVar1;\u000a}\u000a\u000a
p1760
S'JMP qword ptr [0x0060d210]\n'
p1761
S'ff 25 3a b7 20 00\n'
p1762
S'.plt:0000000000401ad0\n'
p1763
tp1764
sS'emit_mandatory_arg_note'
p1765
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1766
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1767
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x408bd7\nMOV EDX,0x5\nCALL 0x00401810\nMOV RSI,qword ptr [0x0060d2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401950\n'
p1768
S'50\n31 ff\nbe d7 8b 40 00\nba 05 00 00 00\ne8 1e fa ff ff\n48 8b 35 ef b4 20 00\n48 89 c7\n58\ne9 4e fb ff ff\n'
p1769
S'.text:0000000000401de0\n.text:0000000000401de1\n.text:0000000000401de3\n.text:0000000000401de8\n.text:0000000000401ded\n.text:0000000000401df2\n.text:0000000000401df9\n.text:0000000000401dfc\n.text:0000000000401dfd\n'
p1770
tp1771
sS'strcaseeq0'
p1772
(S'\n__stdcall strcaseeq0()\n'
p1773
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1774
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404785\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040478c\nJMP 0x004047c0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004047c0\nTEST BPL,BPL\nJZ 0x004047bb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004047d0\nJMP 0x004047c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1775
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 25 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1776
S'.text:0000000000404750\n.text:0000000000404751\n.text:0000000000404753\n.text:0000000000404755\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475a\n.text:000000000040475b\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404764\n.text:0000000000404767\n.text:0000000000404769\n.text:000000000040476c\n.text:000000000040476e\n.text:0000000000404773\n.text:0000000000404776\n.text:0000000000404778\n.text:000000000040477a\n.text:000000000040477d\n.text:000000000040477f\n.text:0000000000404781\n.text:0000000000404783\n.text:0000000000404785\n.text:0000000000404787\n.text:000000000040478a\n.text:000000000040478c\n.text:000000000040478f\n.text:0000000000404791\n.text:0000000000404795\n.text:000000000040479a\n.text:000000000040479d\n.text:00000000004047a1\n.text:00000000004047a5\n.text:00000000004047a9\n.text:00000000004047ad\n.text:00000000004047b1\n.text:00000000004047b4\n.text:00000000004047b9\n.text:00000000004047bb\n.text:00000000004047c0\n.text:00000000004047c4\n.text:00000000004047c5\n.text:00000000004047c7\n.text:00000000004047c9\n.text:00000000004047cb\n.text:00000000004047cd\n.text:00000000004047ce\n'
p1777
tp1778
sS'strcaseeq2'
p1779
(S'\n__stdcall strcaseeq2()\n'
p1780
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1781
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404896\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040489d\nJMP 0x004048ca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004048ca\nTEST BPL,BPL\nJZ 0x004048c5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004048e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1782
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 24 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1783
S'.text:0000000000404860\n.text:0000000000404861\n.text:0000000000404863\n.text:0000000000404865\n.text:0000000000404867\n.text:0000000000404869\n.text:000000000040486a\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404874\n.text:0000000000404877\n.text:0000000000404879\n.text:000000000040487c\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404887\n.text:0000000000404889\n.text:000000000040488b\n.text:000000000040488e\n.text:0000000000404890\n.text:0000000000404892\n.text:0000000000404894\n.text:0000000000404896\n.text:0000000000404898\n.text:000000000040489b\n.text:000000000040489d\n.text:00000000004048a0\n.text:00000000004048a2\n.text:00000000004048a6\n.text:00000000004048aa\n.text:00000000004048ae\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048b9\n.text:00000000004048ba\n.text:00000000004048bc\n.text:00000000004048be\n.text:00000000004048c0\n.text:00000000004048c2\n.text:00000000004048c3\n.text:00000000004048c5\n.text:00000000004048ca\n.text:00000000004048ce\n.text:00000000004048cf\n.text:00000000004048d1\n.text:00000000004048d3\n.text:00000000004048d5\n.text:00000000004048d7\n.text:00000000004048d8\n'
p1784
tp1785
sS'hash_table_ok'
p1786
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1787
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1788
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x00406f4a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x00406f3f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00406f30\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00406f20\nJMP 0x00406f4e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x00406f5c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x00406f5e\nXOR EAX,EAX\nRET\n'
p1789
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1790
S'.text:0000000000406f00\n.text:0000000000406f03\n.text:0000000000406f07\n.text:0000000000406f09\n.text:0000000000406f0d\n.text:0000000000406f0f\n.text:0000000000406f11\n.text:0000000000406f20\n.text:0000000000406f24\n.text:0000000000406f26\n.text:0000000000406f29\n.text:0000000000406f30\n.text:0000000000406f33\n.text:0000000000406f37\n.text:0000000000406f3a\n.text:0000000000406f3c\n.text:0000000000406f3f\n.text:0000000000406f43\n.text:0000000000406f46\n.text:0000000000406f48\n.text:0000000000406f4a\n.text:0000000000406f4c\n.text:0000000000406f4e\n.text:0000000000406f52\n.text:0000000000406f54\n.text:0000000000406f56\n.text:0000000000406f5a\n.text:0000000000406f5c\n.text:0000000000406f5e\n'
p1791
tp1792
sS'strcaseeq1'
p1793
(S'\n__stdcall strcaseeq1()\n'
p1794
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1795
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040480d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404814\nJMP 0x00404847\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404847\nTEST BPL,BPL\nJZ 0x00404842\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404860\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1796
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 46 25 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1797
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d7\n.text:00000000004047d9\n.text:00000000004047da\n.text:00000000004047db\n.text:00000000004047e0\n.text:00000000004047e3\n.text:00000000004047e6\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ee\n.text:00000000004047f3\n.text:00000000004047f5\n.text:00000000004047fa\n.text:00000000004047fe\n.text:0000000000404800\n.text:0000000000404802\n.text:0000000000404805\n.text:0000000000404807\n.text:0000000000404809\n.text:000000000040480b\n.text:000000000040480d\n.text:000000000040480f\n.text:0000000000404812\n.text:0000000000404814\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481d\n.text:0000000000404821\n.text:0000000000404825\n.text:000000000040482b\n.text:000000000040482f\n.text:0000000000404832\n.text:0000000000404836\n.text:0000000000404837\n.text:0000000000404839\n.text:000000000040483b\n.text:000000000040483d\n.text:000000000040483f\n.text:0000000000404840\n.text:0000000000404842\n.text:0000000000404847\n.text:000000000040484b\n.text:000000000040484c\n.text:000000000040484e\n.text:0000000000404850\n.text:0000000000404852\n.text:0000000000404854\n.text:0000000000404855\n'
p1798
tp1799
sS'strcaseeq4'
p1800
(S'\n__stdcall strcaseeq4()\n'
p1801
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1802
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040497c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404983\nJMP 0x004049a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004049a4\nTEST BPL,BPL\nJZ 0x0040499f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004049b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1803
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 d7 23 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1804
S'.text:0000000000404950\n.text:0000000000404951\n.text:0000000000404953\n.text:0000000000404955\n.text:0000000000404956\n.text:0000000000404957\n.text:000000000040495a\n.text:000000000040495d\n.text:000000000040495f\n.text:0000000000404962\n.text:0000000000404964\n.text:0000000000404969\n.text:000000000040496d\n.text:000000000040496f\n.text:0000000000404971\n.text:0000000000404974\n.text:0000000000404976\n.text:0000000000404978\n.text:000000000040497a\n.text:000000000040497c\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404986\n.text:0000000000404988\n.text:000000000040498c\n.text:0000000000404990\n.text:0000000000404993\n.text:0000000000404997\n.text:0000000000404998\n.text:000000000040499a\n.text:000000000040499c\n.text:000000000040499d\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a8\n.text:00000000004049a9\n.text:00000000004049ab\n.text:00000000004049ad\n.text:00000000004049ae\n'
p1805
tp1806
sS'ind'
p1807
(S'\n__stdcall ind(isaac_word * m, isaac_word x)\n'
p1808
V\u000aisaac_word ind(isaac_word *m,isaac_word x)\u000a\u000a{\u000a  return *(isaac_word *)((long)m + (ulong)((uint)x & 0x7f8));\u000a}\u000a\u000a
p1809
S'AND ESI,0x7f8\nMOV RAX,qword ptr [RDI + RSI*0x1]\nRET\n'
p1810
S'81 e6 f8 07 00 00\n48 8b 04 37\nc3\n'
p1811
S'.text:00000000004057d0\n.text:00000000004057d6\n.text:00000000004057da\n'
p1812
tp1813
sS'strcaseeq3'
p1814
(S'\n__stdcall strcaseeq3()\n'
p1815
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1816
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406d40\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404910\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404917\nJMP 0x0040493a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040493a\nTEST BPL,BPL\nJZ 0x00404935\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404950\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1817
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 43 24 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1818
S'.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e7\n.text:00000000004048e8\n.text:00000000004048eb\n.text:00000000004048ee\n.text:00000000004048f1\n.text:00000000004048f3\n.text:00000000004048f6\n.text:00000000004048f8\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404903\n.text:0000000000404905\n.text:0000000000404908\n.text:000000000040490a\n.text:000000000040490c\n.text:000000000040490e\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404915\n.text:0000000000404917\n.text:000000000040491a\n.text:000000000040491c\n.text:0000000000404920\n.text:0000000000404924\n.text:0000000000404928\n.text:000000000040492b\n.text:000000000040492c\n.text:000000000040492e\n.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404933\n.text:0000000000404935\n.text:000000000040493a\n.text:000000000040493b\n.text:000000000040493d\n.text:000000000040493f\n.text:0000000000404941\n.text:0000000000404942\n'
p1819
tp1820
sS'write_permuted_lines'
p1821
(S'\n__stdcall write_permuted_lines(size_t n_lines, char * * line, size_t * permutation)\n'
p1822
V\u000aint write_permuted_lines(size_t n_lines,char **line,size_t *permutation)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *__ptr;\u000a  char *pcVar2;\u000a  ulong uVar3;\u000a  \u000a  if (n_lines != 0) {\u000a    uVar3 = 0;\u000a    do {\u000a      pcVar1 = line[permutation[uVar3] + 1];\u000a      __ptr = line[permutation[uVar3]];\u000a      pcVar2 = (char *)fwrite_unlocked(__ptr,1,(size_t)(pcVar1 + -(long)__ptr),stdout);\u000a      if (pcVar2 != pcVar1 + -(long)__ptr) {\u000a        return -1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < n_lines);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1823
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RDX\nMOV R12,RSI\nMOV R15,RDI\nTEST R15,R15\nJZ 0x00402dc1\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [R14 + RBX*0x8]\nMOV R13,qword ptr [R12 + RAX*0x8 + 0x8]\nMOV RDI,qword ptr [R12 + RAX*0x8]\nSUB R13,RDI\nMOV RCX,qword ptr [0x0060d2e8]\nMOV ESI,0x1\nMOV RDX,R13\nCALL 0x00401a20\nCMP RAX,R13\nJNZ 0x00402dc5\nINC RBX\nCMP RBX,R15\nJC 0x00402d90\nXOR EAX,EAX\nJMP 0x00402dca\nMOV EAX,0xffffffff\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1824
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d6\n49 89 f4\n49 89 ff\n4d 85 ff\n74 3a\n31 db\n0f 1f 80 00 00 00 00\n49 8b 04 de\n4d 8b 6c c4 08\n49 8b 3c c4\n49 29 fd\n48 8b 0d 41 a5 20 00\nbe 01 00 00 00\n4c 89 ea\ne8 6c ec ff ff\n4c 39 e8\n75 0c\n48 ff c3\n4c 39 fb\n72 cf\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1825
S'.text:0000000000402d70\n.text:0000000000402d72\n.text:0000000000402d74\n.text:0000000000402d76\n.text:0000000000402d78\n.text:0000000000402d79\n.text:0000000000402d7c\n.text:0000000000402d7f\n.text:0000000000402d82\n.text:0000000000402d85\n.text:0000000000402d87\n.text:0000000000402d89\n.text:0000000000402d90\n.text:0000000000402d94\n.text:0000000000402d99\n.text:0000000000402d9d\n.text:0000000000402da0\n.text:0000000000402da7\n.text:0000000000402dac\n.text:0000000000402daf\n.text:0000000000402db4\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbc\n.text:0000000000402dbf\n.text:0000000000402dc1\n.text:0000000000402dc3\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dcb\n.text:0000000000402dcd\n.text:0000000000402dcf\n.text:0000000000402dd1\n.text:0000000000402dd3\n'
p1826
tp1827
sS'register_tm_clones'
p1828
(S'\n__stdcall register_tm_clones()\n'
p1829
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c03) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c0d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1830
S'MOV ESI,0x60d2d8\nPUSH RBP\nSUB RSI,0x60d2d8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401c18\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c18\nPOP RBP\nMOV EDI,0x60d2d8\nJMP RAX\nPOP RBP\nRET\n'
p1831
S'be d8 d2 60 00\n55\n48 81 ee d8 d2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf d8 d2 60 00\nff e0\n5d\nc3\n'
p1832
S'.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401be6\n.text:0000000000401bed\n.text:0000000000401bf1\n.text:0000000000401bf4\n.text:0000000000401bf7\n.text:0000000000401bfb\n.text:0000000000401bfe\n.text:0000000000401c01\n.text:0000000000401c03\n.text:0000000000401c08\n.text:0000000000401c0b\n.text:0000000000401c0d\n.text:0000000000401c0e\n.text:0000000000401c13\n.text:0000000000401c18\n.text:0000000000401c19\n'
p1833
tp1834
sS'xstrtoul'
p1835
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1836
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00406726;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00406726;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00406655_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00406633:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00406633;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00406707;\u000a  default:\u000aswitchD_00406655_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00406707;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00406707:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00406726:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1837
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00406743\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401710\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401b60\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00406540\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00406732\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401ad0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x004065a0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004065d1\nCMP EAX,0x22\nJNZ 0x00406732\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004065dc\nJMP 0x00406726\nTEST R12,R12\nJZ 0x00406732\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00406732\nMOV RDI,R12\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x00406732\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004065dc\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00406726\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00406726\nMOV RDI,R12\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x0040666e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401880\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00406633\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040663a\nCMP EAX,0x44\nJZ 0x0040663a\nCMP EAX,0x69\nJNZ 0x00406633\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00406644\nMOV EBP,0x1\nJMP 0x00406644\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040666e\nXOR EAX,EAX\nJMP qword ptr [0x409710 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00406790\nJMP 0x0040670c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00406732\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00406707\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00406790\nJMP 0x0040670c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00406707\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00406760\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4098c0\nMOV ESI,0x4098e6\nMOV EDX,0x60\nMOV ECX,0x4098f6\nCALL 0x004018c0\n'
p1838
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 f2 b1 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 33 b6 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 5c b5 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 c4 b2 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 8c b2 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 7a b2 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 10 97 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c0 98 40 00\nbe e6 98 40 00\nba 60 00 00 00\nb9 f6 98 40 00\ne8 64 b1 ff ff\n'
p1839
S'.text:00000000004064f0\n.text:00000000004064f1\n.text:00000000004064f3\n.text:00000000004064f5\n.text:00000000004064f7\n.text:00000000004064f9\n.text:00000000004064fa\n.text:00000000004064fe\n.text:0000000000406501\n.text:0000000000406504\n.text:0000000000406507\n.text:000000000040650a\n.text:000000000040650e\n.text:0000000000406514\n.text:0000000000406519\n.text:000000000040651e\n.text:0000000000406521\n.text:0000000000406528\n.text:000000000040652d\n.text:0000000000406530\n.text:0000000000406533\n.text:0000000000406540\n.text:0000000000406543\n.text:0000000000406546\n.text:000000000040654b\n.text:000000000040654d\n.text:0000000000406550\n.text:0000000000406555\n.text:0000000000406559\n.text:000000000040655e\n.text:0000000000406560\n.text:0000000000406566\n.text:0000000000406569\n.text:000000000040656c\n.text:000000000040656f\n.text:0000000000406574\n.text:0000000000406578\n.text:000000000040657c\n.text:000000000040657f\n.text:0000000000406581\n.text:0000000000406584\n.text:0000000000406586\n.text:0000000000406588\n.text:000000000040658b\n.text:0000000000406591\n.text:0000000000406596\n.text:0000000000406599\n.text:000000000040659b\n.text:00000000004065a0\n.text:00000000004065a3\n.text:00000000004065a9\n.text:00000000004065ac\n.text:00000000004065ae\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065bc\n.text:00000000004065bf\n.text:00000000004065c5\n.text:00000000004065cd\n.text:00000000004065cf\n.text:00000000004065d1\n.text:00000000004065d3\n.text:00000000004065d6\n.text:00000000004065dc\n.text:00000000004065e0\n.text:00000000004065e4\n.text:00000000004065e6\n.text:00000000004065ec\n.text:00000000004065ef\n.text:00000000004065f4\n.text:00000000004065f7\n.text:00000000004065f9\n.text:00000000004065fe\n.text:0000000000406601\n.text:0000000000406606\n.text:000000000040660b\n.text:000000000040660e\n.text:0000000000406610\n.text:0000000000406614\n.text:0000000000406617\n.text:0000000000406619\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406621\n.text:0000000000406623\n.text:0000000000406625\n.text:0000000000406629\n.text:000000000040662c\n.text:0000000000406631\n.text:0000000000406633\n.text:0000000000406638\n.text:000000000040663a\n.text:000000000040663f\n.text:0000000000406644\n.text:0000000000406648\n.text:000000000040664b\n.text:000000000040664e\n.text:0000000000406651\n.text:0000000000406653\n.text:0000000000406655\n.text:000000000040665c\n.text:000000000040665f\n.text:0000000000406664\n.text:0000000000406669\n.text:000000000040666e\n.text:0000000000406672\n.text:0000000000406677\n.text:000000000040667a\n.text:000000000040667d\n.text:0000000000406682\n.text:0000000000406685\n.text:000000000040668a\n.text:000000000040668f\n.text:0000000000406691\n.text:0000000000406694\n.text:0000000000406699\n.text:000000000040669e\n.text:00000000004066a0\n.text:00000000004066a3\n.text:00000000004066a8\n.text:00000000004066ad\n.text:00000000004066af\n.text:00000000004066b2\n.text:00000000004066b7\n.text:00000000004066b9\n.text:00000000004066bc\n.text:00000000004066c1\n.text:00000000004066c6\n.text:00000000004066c8\n.text:00000000004066cb\n.text:00000000004066d0\n.text:00000000004066d5\n.text:00000000004066d7\n.text:00000000004066da\n.text:00000000004066df\n.text:00000000004066e4\n.text:00000000004066e6\n.text:00000000004066e9\n.text:00000000004066ee\n.text:00000000004066f3\n.text:00000000004066f5\n.text:00000000004066f8\n.text:00000000004066fd\n.text:00000000004066ff\n.text:0000000000406702\n.text:0000000000406707\n.text:000000000040670c\n.text:000000000040670e\n.text:0000000000406712\n.text:0000000000406716\n.text:000000000040671a\n.text:000000000040671c\n.text:000000000040671f\n.text:0000000000406723\n.text:0000000000406726\n.text:000000000040672a\n.text:000000000040672f\n.text:0000000000406732\n.text:0000000000406734\n.text:0000000000406738\n.text:0000000000406739\n.text:000000000040673b\n.text:000000000040673d\n.text:000000000040673f\n.text:0000000000406741\n.text:0000000000406742\n.text:0000000000406743\n.text:0000000000406748\n.text:000000000040674d\n.text:0000000000406752\n.text:0000000000406757\n'
p1840
tp1841
sS'c_islower'
p1842
(S'\n__stdcall c_islower()\n'
p1843
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1844
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1845
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1846
S'.text:0000000000406ce0\n.text:0000000000406ce3\n.text:0000000000406ce6\n.text:0000000000406ce9\n'
p1847
tp1848
sS'write_permuted_numbers'
p1849
(S'\n__stdcall write_permuted_numbers(size_t n_lines, size_t lo_input, size_t * permutation)\n'
p1850
V\u000aint write_permuted_numbers(size_t n_lines,size_t lo_input,size_t *permutation)\u000a\u000a{\u000a  int iVar1;\u000a  char in_CL;\u000a  ulong uVar2;\u000a  \u000a  if (n_lines != 0) {\u000a    uVar2 = 0;\u000a    do {\u000a      iVar1 = __printf_chk(1,&DAT_00408dbd,permutation[uVar2] + lo_input,(ulong)(uint)(int)in_CL);\u000a      if (iVar1 < 0) {\u000a        return -1;\u000a      }\u000a      uVar2 = uVar2 + 1;\u000a    } while (uVar2 < n_lines);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1851
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402d57\nMOVSX R12D,CL\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOV RDX,qword ptr [R14 + RBP*0x8]\nADD RDX,R15\nMOV EDI,0x1\nMOV ESI,0x408dbd\nXOR EAX,EAX\nMOV ECX,R12D\nCALL 0x00401a60\nTEST EAX,EAX\nJS 0x00402d5b\nINC RBP\nCMP RBP,RBX\nJC 0x00402d30\nXOR EAX,EAX\nJMP 0x00402d60\nMOV EAX,0xffffffff\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1852
S'55\n41 57\n41 56\n41 54\n53\n49 89 d6\n49 89 f7\n48 89 fb\n48 85 db\n74 31\n44 0f be e1\n31 ed\n0f 1f 40 00\n49 8b 14 ee\n4c 01 fa\nbf 01 00 00 00\nbe bd 8d 40 00\n31 c0\n44 89 e1\ne8 15 ed ff ff\n85 c0\n78 0c\n48 ff c5\n48 39 dd\n72 d9\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1853
S'.text:0000000000402d10\n.text:0000000000402d11\n.text:0000000000402d13\n.text:0000000000402d15\n.text:0000000000402d17\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d24\n.text:0000000000402d26\n.text:0000000000402d2a\n.text:0000000000402d2c\n.text:0000000000402d30\n.text:0000000000402d34\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d41\n.text:0000000000402d43\n.text:0000000000402d46\n.text:0000000000402d4b\n.text:0000000000402d4d\n.text:0000000000402d4f\n.text:0000000000402d52\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d59\n.text:0000000000402d5b\n.text:0000000000402d60\n.text:0000000000402d61\n.text:0000000000402d63\n.text:0000000000402d65\n.text:0000000000402d67\n.text:0000000000402d68\n'
p1854
tp1855
sS'freebuffer'
p1856
(S'\n__stdcall freebuffer(linebuffer * linebuffer)\n'
p1857
V\u000avoid freebuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  free(linebuffer->buffer);\u000a  return;\u000a}\u000a\u000a
p1858
S'MOV RDI,qword ptr [RDI + 0x10]\nJMP 0x004016f0\n'
p1859
S'48 8b 7f 10\ne9 67 e5 ff ff\n'
p1860
S'.text:0000000000403180\n.text:0000000000403184\n'
p1861
tp1862
sS'fwrite'
p1863
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1864
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060d230)();\u000a  return sVar1;\u000a}\u000a\u000a
p1865
S'JMP qword ptr [0x0060d230]\n'
p1866
S'ff 25 1a b7 20 00\n'
p1867
S'.plt:0000000000401b10\n'
p1868
tp1869
sS'read_input'
p1870
(S'\n__stdcall read_input(FILE * in, char * * * pline)\n'
p1871
V\u000asize_t read_input(FILE *in,char ***pline)\u000a\u000a{\u000a  uint uVar1;\u000a  char cVar2;\u000a  size_t in_RAX;\u000a  char *line;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *line_00;\u000a  char **ppcVar5;\u000a  char **in_RDX;\u000a  ulong uVar6;\u000a  size_t n;\u000a  char *pcVar7;\u000a  ulong uVar8;\u000a  size_t local_38;\u000a  \u000a  cVar2 = (char)pline;\u000a  local_38 = in_RAX;\u000a  line = fread_file(in,&local_38);\u000a  if (line == (char *)0x0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,0x40937e,5);\u000a    error(1,(ulong)uVar1,uVar4,uVar4);\u000a  }\u000a  if (local_38 != 0) {\u000a    if (line[local_38 - 1] != cVar2) {\u000a      line[local_38] = cVar2;\u000a      local_38 = local_38 + 1;\u000a    }\u000a    pcVar7 = line + local_38;\u000a    if (0 < (long)local_38) {\u000a      line_00 = line;\u000a      uVar6 = 0;\u000a      do {\u000a        uVar8 = uVar6;\u000a        line_00 = next_line(line_00,(ulong)(uint)(int)cVar2);\u000a        uVar6 = uVar8 + 1;\u000a      } while (line_00 < pcVar7);\u000a      n = uVar8 + 2;\u000a      goto LAB_0040295c;\u000a    }\u000a  }\u000a  n = 1;\u000a  uVar6 = 0;\u000aLAB_0040295c:\u000a  ppcVar5 = (char **)xnmalloc(n,8);\u000a  *(char ***)in_RDX = ppcVar5;\u000a  *ppcVar5 = line;\u000a  if (uVar6 != 0) {\u000a    uVar8 = 1;\u000a    do {\u000a      line = next_line(line,(ulong)(uint)(int)cVar2);\u000a      ppcVar5[uVar8] = line;\u000a      uVar8 = uVar8 + 1;\u000a    } while (uVar8 <= uVar6);\u000a  }\u000a  return uVar6;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R14D,ESI\nMOV RSI,RSP\nCALL 0x00405b10\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x004028ed\nCALL 0x00401710\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40937e\nMOV EDX,0x5\nCALL 0x00401810\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401a80\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJZ 0x0040294f\nCMP byte ptr [RBX + RAX*0x1 + -0x1],R14B\nJZ 0x00402909\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP],RCX\nMOV byte ptr [RBX + RAX*0x1],R14B\nMOV RAX,qword ptr [RSP]\nMOV R13,RBX\nADD R13,RAX\nTEST RAX,RAX\nJLE 0x00402955\nXOR EBP,EBP\nMOVSX R12D,R14B\nMOV RAX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDX,R13\nSUB RDX,RAX\nMOV RDI,RAX\nMOV ESI,R12D\nCALL 0x00402e00\nINC RBP\nCMP RAX,R13\nJC 0x00402930\nLEA RDI,[RBP + 0x1]\nJMP 0x0040295c\nMOV R13,RBX\nADD R13,RAX\nMOV EDI,0x1\nXOR EBP,EBP\nMOV ESI,0x8\nCALL 0x00406210\nMOV R12,RAX\nMOV qword ptr [R15],R12\nMOV qword ptr [R12],RBX\nTEST RBP,RBP\nJZ 0x004029a0\nMOV R15D,0x1\nMOVSX R14D,R14B\nNOP\nMOV RDX,R13\nSUB RDX,RBX\nMOV RDI,RBX\nMOV ESI,R14D\nCALL 0x00402e00\nMOV RBX,RAX\nMOV qword ptr [R12 + R15*0x8],RBX\nINC R15\nCMP R15,RBP\nJBE 0x00402980\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1873
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n41 89 f6\n48 89 e6\ne8 57 32 00 00\n48 89 c3\n48 85 db\n75 2c\ne8 4a ee ff ff\n8b 28\n31 ff\nbe 7e 93 40 00\nba 05 00 00 00\ne8 37 ef ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 93 f1 ff ff\n48 8b 04 24\n48 85 c0\n74 59\n44 38 74 03 ff\n74 0c\n48 8d 48 01\n48 89 0c 24\n44 88 34 03\n48 8b 04 24\n49 89 dd\n49 01 c5\n48 85 c0\n7e 3d\n31 ed\n45 0f be e6\n48 89 d8\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ea\n48 29 c2\n48 89 c7\n44 89 e6\ne8 bf 04 00 00\n48 ff c5\n4c 39 e8\n72 e7\n48 8d 7d 01\neb 0d\n49 89 dd\n49 01 c5\nbf 01 00 00 00\n31 ed\nbe 08 00 00 00\ne8 aa 38 00 00\n49 89 c4\n4d 89 27\n49 89 1c 24\n48 85 ed\n74 2b\n41 bf 01 00 00 00\n45 0f be f6\n90\n4c 89 ea\n48 29 da\n48 89 df\n44 89 f6\ne8 6f 04 00 00\n48 89 c3\n4b 89 1c fc\n49 ff c7\n49 39 ef\n76 e0\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1874
S'.text:00000000004028a0\n.text:00000000004028a1\n.text:00000000004028a3\n.text:00000000004028a5\n.text:00000000004028a7\n.text:00000000004028a9\n.text:00000000004028aa\n.text:00000000004028ab\n.text:00000000004028ae\n.text:00000000004028b1\n.text:00000000004028b4\n.text:00000000004028b9\n.text:00000000004028bc\n.text:00000000004028bf\n.text:00000000004028c1\n.text:00000000004028c6\n.text:00000000004028c8\n.text:00000000004028ca\n.text:00000000004028cf\n.text:00000000004028d4\n.text:00000000004028d9\n.text:00000000004028dc\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e5\n.text:00000000004028e8\n.text:00000000004028ed\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028f6\n.text:00000000004028fb\n.text:00000000004028fd\n.text:0000000000402901\n.text:0000000000402905\n.text:0000000000402909\n.text:000000000040290d\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402916\n.text:0000000000402918\n.text:000000000040291a\n.text:000000000040291e\n.text:0000000000402921\n.text:0000000000402930\n.text:0000000000402933\n.text:0000000000402936\n.text:0000000000402939\n.text:000000000040293c\n.text:0000000000402941\n.text:0000000000402944\n.text:0000000000402947\n.text:0000000000402949\n.text:000000000040294d\n.text:000000000040294f\n.text:0000000000402952\n.text:0000000000402955\n.text:000000000040295a\n.text:000000000040295c\n.text:0000000000402961\n.text:0000000000402966\n.text:0000000000402969\n.text:000000000040296c\n.text:0000000000402970\n.text:0000000000402973\n.text:0000000000402975\n.text:000000000040297b\n.text:000000000040297f\n.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402986\n.text:0000000000402989\n.text:000000000040298c\n.text:0000000000402991\n.text:0000000000402994\n.text:0000000000402998\n.text:000000000040299b\n.text:000000000040299e\n.text:00000000004029a0\n.text:00000000004029a3\n.text:00000000004029a7\n.text:00000000004029a8\n.text:00000000004029aa\n.text:00000000004029ac\n.text:00000000004029ae\n.text:00000000004029b0\n.text:00000000004029b1\n'
p1875
tp1876
sS'randread_error'
p1877
(S'\n__stdcall randread_error(void * file_name)\n'
p1878
V\u000avoid randread_error(void *file_name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  iVar2 = exit_failure;\u000a  if (file_name != (void *)0x0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar5 = "%s: read error";\u000a    if (uVar1 == 0) {\u000a      pcVar5 = "%s: end of file";\u000a    }\u000a    uVar4 = dcgettext(0,pcVar5,5);\u000a    pcVar5 = quote((char *)file_name);\u000a    error((ulong)(uint)iVar2,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405426\nMOV R14D,dword ptr [0x0060d278]\nCALL 0x00401710\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nMOV EAX,0x40936a\nMOV ESI,0x40937a\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401810\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00404680\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBP\nMOV RDX,R15\nCALL 0x00401a80\nCALL 0x00401700\n'
p1880
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 85 db\n74 47\n44 8b 35 92 7e 20 00\ne8 25 c3 ff ff\n8b 28\n85 ed\nb8 6a 93 40 00\nbe 7a 93 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 07 c4 ff ff\n49 89 c7\n48 89 df\ne8 6c f2 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 ee\n4c 89 fa\ne8 5a c6 ff ff\ne8 d5 c2 ff ff\n'
p1881
S'.text:00000000004053d0\n.text:00000000004053d1\n.text:00000000004053d3\n.text:00000000004053d5\n.text:00000000004053d6\n.text:00000000004053d7\n.text:00000000004053da\n.text:00000000004053dd\n.text:00000000004053df\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f9\n.text:00000000004053fd\n.text:00000000004053ff\n.text:0000000000405404\n.text:0000000000405409\n.text:000000000040540c\n.text:000000000040540f\n.text:0000000000405414\n.text:0000000000405417\n.text:0000000000405419\n.text:000000000040541c\n.text:000000000040541e\n.text:0000000000405421\n.text:0000000000405426\n'
p1882
tp1883
sS'input_size'
p1884
(S'\n__stdcall input_size()\n'
p1885
V\u000aoff_t input_size(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  __off_t _Var3;\u000a  off_t oVar4;\u000a  stat local_a0;\u000a  \u000a  oVar4 = 0x7fffffffffffffff;\u000a  iVar2 = fstat(0,(stat *)&local_a0);\u000a  if (iVar2 == 0) {\u000a    _Var1 = usable_st_size(&local_a0);\u000a    if (_Var1 != false) {\u000a      _Var3 = lseek(0,0,1);\u000a      if (-1 < _Var3) {\u000a        oVar4 = local_a0.st_size - _Var3;\u000a      }\u000a    }\u000a  }\u000a  return oVar4;\u000a}\u000a\u000a
p1886
S'PUSH R14\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,0x7fffffffffffffff\nLEA RSI,[RSP + 0x8]\nXOR EDI,EDI\nCALL 0x004084d0\nTEST EAX,EAX\nJNZ 0x0040288f\nLEA RDI,[RSP + 0x8]\nCALL 0x00402de0\nTEST AL,AL\nJZ 0x0040288f\nMOV R14,qword ptr [RSP + 0x38]\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x1\nCALL 0x004018a0\nSUB R14,RAX\nTEST RAX,RAX\nCMOVNS RBX,R14\nMOV RAX,RBX\nADD RSP,0x98\nPOP RBX\nPOP R14\nRET\n'
p1887
S'41 56\n53\n48 81 ec 98 00 00 00\n48 bb ff ff ff ff ff ff ff 7f\n48 8d 74 24 08\n31 ff\ne8 70 5c 00 00\n85 c0\n75 2b\n48 8d 7c 24 08\ne8 72 05 00 00\n84 c0\n74 1d\n4c 8b 74 24 38\n31 ff\n31 f6\nba 01 00 00 00\ne8 1b f0 ff ff\n49 29 c6\n48 85 c0\n49 0f 49 de\n48 89 d8\n48 81 c4 98 00 00 00\n5b\n41 5e\nc3\n'
p1888
S'.text:0000000000402840\n.text:0000000000402842\n.text:0000000000402843\n.text:000000000040284a\n.text:0000000000402854\n.text:0000000000402859\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402862\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402870\n.text:0000000000402872\n.text:0000000000402877\n.text:0000000000402879\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402885\n.text:0000000000402888\n.text:000000000040288b\n.text:000000000040288f\n.text:0000000000402892\n.text:0000000000402899\n.text:000000000040289a\n.text:000000000040289c\n'
p1889
tp1890
sS'rotl_sz'
p1891
(S'\n__stdcall rotl_sz(size_t x)\n'
p1892
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1893
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1894
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1895
S'.text:0000000000408380\n.text:0000000000408382\n.text:0000000000408385\n.text:0000000000408388\n'
p1896
tp1897
sS'__do_global_dtors_aux'
p1898
(S'\n__stdcall __do_global_dtors_aux()\n'
p1899
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1900
S'CMP byte ptr [0x0060d328],0x0\nJNZ 0x00401c3a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401ba0\nPOP RBP\nMOV byte ptr [0x0060d328],0x1\nRET\n'
p1901
S'80 3d 01 b7 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ee b6 20 00 01\nf3 c3\n'
p1902
S'.text:0000000000401c20\n.text:0000000000401c27\n.text:0000000000401c29\n.text:0000000000401c2a\n.text:0000000000401c2d\n.text:0000000000401c32\n.text:0000000000401c33\n.text:0000000000401c3a\n'
p1903
tp1904
sS'c_isprint'
p1905
(S'\n__stdcall c_isprint()\n'
p1906
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1907
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1908
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1909
S'.text:0000000000406cf0\n.text:0000000000406cf3\n.text:0000000000406cf6\n.text:0000000000406cf9\n'
p1910
tp1911
sS'_fini'
p1912
(S'\n__stdcall _fini()\n'
p1913
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1914
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1915
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1916
S'.fini:00000000004084e0\n.fini:00000000004084e4\n.fini:00000000004084e8\n'
p1917
tp1918
sS'getpid'
p1919
(S'\n__stdcall getpid()\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getpid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getpid_0060d080)();\u000a  return _Var1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x0060d080]\n'
p1922
S'ff 25 ca b8 20 00\n'
p1923
S'.plt:00000000004017b0\n'
p1924
tp1925
sS'rpl_fcntl'
p1926
(S'\n__stdcall rpl_fcntl()\n'
p1927
V\u000a/* WARNING: Removing unreachable block (ram,0x0040823b) */\u000a/* WARNING: Removing unreachable block (ram,0x004082a4) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00408249 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1928
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004081cb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00408226\nCMP EAX,0x28\nJA 0x0040823b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00408249\nCMP EAX,0x28\nJA 0x004082a4\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004082b2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060d498],0x0\nJS 0x004082c3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004017a0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00408294\nCALL 0x00401710\nCMP dword ptr [RAX],0x16\nJNZ 0x00408294\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00408180\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00408326\nMOV dword ptr [0x0060d498],R15D\nTEST EBP,EBP\nJNS 0x004082d7\nJMP 0x00408326\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004017a0\nMOV EBP,EAX\nJMP 0x00408326\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00408180\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408326\nCMP dword ptr [0x0060d498],-0x1\nJNZ 0x00408326\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004017a0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x0040830c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004017a0\nCMP EAX,-0x1\nJNZ 0x00408326\nCALL 0x00401710\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401900\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1929
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 46 52 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 40 95 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 94 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d fd 51 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 e1 94 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d ba 51 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 b2 94 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 99 94 ff ff\n83 f8 ff\n75 1a\ne8 ff 93 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 e2 95 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1930
S'.text:0000000000408180\n.text:0000000000408181\n.text:0000000000408183\n.text:0000000000408185\n.text:0000000000408186\n.text:000000000040818d\n.text:0000000000408190\n.text:0000000000408192\n.text:0000000000408194\n.text:0000000000408199\n.text:000000000040819e\n.text:00000000004081a3\n.text:00000000004081ab\n.text:00000000004081b3\n.text:00000000004081bb\n.text:00000000004081c3\n.text:00000000004081cb\n.text:00000000004081d0\n.text:00000000004081d5\n.text:00000000004081da\n.text:00000000004081df\n.text:00000000004081e4\n.text:00000000004081e9\n.text:00000000004081f1\n.text:00000000004081f6\n.text:00000000004081fe\n.text:0000000000408205\n.text:0000000000408209\n.text:000000000040820f\n.text:0000000000408211\n.text:0000000000408214\n.text:0000000000408216\n.text:000000000040821b\n.text:000000000040821e\n.text:0000000000408221\n.text:0000000000408224\n.text:0000000000408226\n.text:0000000000408229\n.text:000000000040822b\n.text:000000000040822e\n.text:0000000000408233\n.text:0000000000408236\n.text:0000000000408239\n.text:000000000040823b\n.text:0000000000408240\n.text:0000000000408244\n.text:0000000000408249\n.text:000000000040824b\n.text:0000000000408252\n.text:0000000000408254\n.text:0000000000408256\n.text:0000000000408259\n.text:000000000040825b\n.text:0000000000408260\n.text:0000000000408262\n.text:0000000000408268\n.text:000000000040826a\n.text:000000000040826c\n.text:0000000000408271\n.text:0000000000408274\n.text:0000000000408276\n.text:0000000000408278\n.text:000000000040827a\n.text:000000000040827d\n.text:000000000040827f\n.text:0000000000408284\n.text:0000000000408286\n.text:000000000040828c\n.text:000000000040828e\n.text:0000000000408294\n.text:000000000040829b\n.text:000000000040829d\n.text:000000000040829f\n.text:00000000004082a4\n.text:00000000004082a9\n.text:00000000004082ad\n.text:00000000004082b2\n.text:00000000004082b5\n.text:00000000004082b7\n.text:00000000004082ba\n.text:00000000004082bf\n.text:00000000004082c1\n.text:00000000004082c3\n.text:00000000004082c5\n.text:00000000004082c7\n.text:00000000004082ca\n.text:00000000004082cc\n.text:00000000004082d1\n.text:00000000004082d3\n.text:00000000004082d5\n.text:00000000004082d7\n.text:00000000004082de\n.text:00000000004082e0\n.text:00000000004082e5\n.text:00000000004082e7\n.text:00000000004082e9\n.text:00000000004082ee\n.text:00000000004082f0\n.text:00000000004082f2\n.text:00000000004082f4\n.text:00000000004082f7\n.text:00000000004082fc\n.text:00000000004082fe\n.text:0000000000408300\n.text:0000000000408302\n.text:0000000000408307\n.text:000000000040830a\n.text:000000000040830c\n.text:0000000000408311\n.text:0000000000408314\n.text:0000000000408317\n.text:0000000000408319\n.text:000000000040831e\n.text:0000000000408321\n.text:0000000000408326\n.text:0000000000408328\n.text:000000000040832f\n.text:0000000000408330\n.text:0000000000408332\n.text:0000000000408334\n.text:0000000000408335\n'
p1931
tp1932
sS'__fpending'
p1933
(S'\n__stdcall __fpending()\n'
p1934
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060d058)();\u000a  return;\u000a}\u000a\u000a
p1935
S'JMP qword ptr [0x0060d058]\n'
p1936
S'ff 25 f2 b8 20 00\n'
p1937
S'.plt:0000000000401760\n'
p1938
tp1939
s.