(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060f188)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060f188]\n'
p4
S'ff 25 d2 d7 20 00\n'
p5
S'.plt:00000000004019b0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040b24b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404bb7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404c38;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404ccc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404a48\nMOV EDX,0x40b238\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401ae0\nJMP 0x00404a5d\nMOV EDX,0x40b244\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b24b\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b520\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b24f\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004018f0\nCMP R12,0x9\nJA 0x00404ae6\nJMP qword ptr [0x40b1e8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40b31a\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b459\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x38\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b32a\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b341\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40b35d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x18\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b37d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x18\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b3a1\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x28\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b3c9\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x28\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b3f5\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x38\nJMP 0x00404d57\nXOR EDI,EDI\nMOV ESI,0x40b425\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401ae0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004016f0\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 38 b2 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9a d0 ff ff\neb 15\nba 44 b2 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 83 d0 ff ff\n31 ff\nbe 4b b2 40 00\nba 05 00 00 00\ne8 42 cd ff ff\n48 89 c1\nbe 01 00 00 00\nba 20 b5 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 55 d0 ff ff\n31 ff\nbe 4f b2 40 00\nba 05 00 00 00\ne8 14 cd ff ff\n48 89 c7\n4c 89 f6\ne8 49 ce ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 e8 b1 40 00\n31 ff\nbe 1a b3 40 00\nba 05 00 00 00\ne8 ea cc ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa cf ff ff\n31 ff\nbe 59 b4 40 00\nba 05 00 00 00\ne8 b9 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b1 cf ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 2a b3 40 00\nba 05 00 00 00\ne8 67 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 73 cf ff ff\n31 ff\nbe 41 b3 40 00\nba 05 00 00 00\ne8 32 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a cf ff ff\n31 ff\nbe 5d b3 40 00\nba 05 00 00 00\ne8 f9 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 04 cf ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 7d b3 40 00\nba 05 00 00 00\ne8 ba cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 c2 ce ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe a1 b3 40 00\nba 05 00 00 00\ne8 78 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 78 ce ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe c9 b3 40 00\nba 05 00 00 00\ne8 2e cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2e ce ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe f5 b3 40 00\nba 05 00 00 00\ne8 e4 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dc cd ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 25 b4 40 00\nba 05 00 00 00\ne8 95 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8d cd ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 8c c9 ff ff\n'
p12
S'.text:0000000000404a10\n.text:0000000000404a12\n.text:0000000000404a14\n.text:0000000000404a16\n.text:0000000000404a17\n.text:0000000000404a18\n.text:0000000000404a1b\n.text:0000000000404a1e\n.text:0000000000404a21\n.text:0000000000404a24\n.text:0000000000404a27\n.text:0000000000404a2a\n.text:0000000000404a2f\n.text:0000000000404a32\n.text:0000000000404a34\n.text:0000000000404a39\n.text:0000000000404a3b\n.text:0000000000404a3e\n.text:0000000000404a41\n.text:0000000000404a46\n.text:0000000000404a48\n.text:0000000000404a4d\n.text:0000000000404a4f\n.text:0000000000404a52\n.text:0000000000404a55\n.text:0000000000404a58\n.text:0000000000404a5d\n.text:0000000000404a5f\n.text:0000000000404a64\n.text:0000000000404a69\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a76\n.text:0000000000404a7b\n.text:0000000000404a81\n.text:0000000000404a83\n.text:0000000000404a86\n.text:0000000000404a8b\n.text:0000000000404a8d\n.text:0000000000404a92\n.text:0000000000404a97\n.text:0000000000404a9c\n.text:0000000000404a9f\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aab\n.text:0000000000404aad\n.text:0000000000404ab5\n.text:0000000000404ab7\n.text:0000000000404abc\n.text:0000000000404ac1\n.text:0000000000404ac6\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ad1\n.text:0000000000404ad3\n.text:0000000000404ad6\n.text:0000000000404ada\n.text:0000000000404adb\n.text:0000000000404add\n.text:0000000000404adf\n.text:0000000000404ae1\n.text:0000000000404ae6\n.text:0000000000404ae8\n.text:0000000000404aed\n.text:0000000000404af2\n.text:0000000000404af7\n.text:0000000000404afa\n.text:0000000000404afd\n.text:0000000000404b01\n.text:0000000000404b05\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b12\n.text:0000000000404b16\n.text:0000000000404b1a\n.text:0000000000404b1e\n.text:0000000000404b22\n.text:0000000000404b26\n.text:0000000000404b2a\n.text:0000000000404b2f\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3a\n.text:0000000000404b3f\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4c\n.text:0000000000404b4f\n.text:0000000000404b53\n.text:0000000000404b58\n.text:0000000000404b5a\n.text:0000000000404b5d\n.text:0000000000404b61\n.text:0000000000404b62\n.text:0000000000404b64\n.text:0000000000404b66\n.text:0000000000404b68\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b74\n.text:0000000000404b79\n.text:0000000000404b7e\n.text:0000000000404b81\n.text:0000000000404b84\n.text:0000000000404b88\n.text:0000000000404b8c\n.text:0000000000404b91\n.text:0000000000404b93\n.text:0000000000404b96\n.text:0000000000404b9a\n.text:0000000000404b9b\n.text:0000000000404b9d\n.text:0000000000404b9f\n.text:0000000000404ba1\n.text:0000000000404ba6\n.text:0000000000404ba8\n.text:0000000000404bad\n.text:0000000000404bb2\n.text:0000000000404bb7\n.text:0000000000404bba\n.text:0000000000404bbd\n.text:0000000000404bc1\n.text:0000000000404bc5\n.text:0000000000404bc9\n.text:0000000000404bce\n.text:0000000000404bd0\n.text:0000000000404bd3\n.text:0000000000404bd7\n.text:0000000000404bdc\n.text:0000000000404be0\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404bec\n.text:0000000000404bf1\n.text:0000000000404bf6\n.text:0000000000404bf9\n.text:0000000000404bfc\n.text:0000000000404c00\n.text:0000000000404c04\n.text:0000000000404c09\n.text:0000000000404c0e\n.text:0000000000404c11\n.text:0000000000404c15\n.text:0000000000404c19\n.text:0000000000404c1e\n.text:0000000000404c22\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c2e\n.text:0000000000404c33\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c3e\n.text:0000000000404c42\n.text:0000000000404c46\n.text:0000000000404c4a\n.text:0000000000404c4f\n.text:0000000000404c54\n.text:0000000000404c57\n.text:0000000000404c5b\n.text:0000000000404c5f\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6c\n.text:0000000000404c71\n.text:0000000000404c73\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c82\n.text:0000000000404c85\n.text:0000000000404c88\n.text:0000000000404c8c\n.text:0000000000404c90\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9d\n.text:0000000000404ca1\n.text:0000000000404ca5\n.text:0000000000404ca9\n.text:0000000000404cad\n.text:0000000000404cb2\n.text:0000000000404cb6\n.text:0000000000404cbb\n.text:0000000000404cbd\n.text:0000000000404cc2\n.text:0000000000404cc7\n.text:0000000000404ccc\n.text:0000000000404ccf\n.text:0000000000404cd2\n.text:0000000000404cd6\n.text:0000000000404cda\n.text:0000000000404cde\n.text:0000000000404ce3\n.text:0000000000404ce8\n.text:0000000000404ceb\n.text:0000000000404cef\n.text:0000000000404cf3\n.text:0000000000404cf7\n.text:0000000000404cfb\n.text:0000000000404cff\n.text:0000000000404d04\n.text:0000000000404d08\n.text:0000000000404d0a\n.text:0000000000404d0c\n.text:0000000000404d11\n.text:0000000000404d16\n.text:0000000000404d1b\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d25\n.text:0000000000404d29\n.text:0000000000404d2e\n.text:0000000000404d33\n.text:0000000000404d36\n.text:0000000000404d3a\n.text:0000000000404d3e\n.text:0000000000404d42\n.text:0000000000404d46\n.text:0000000000404d4a\n.text:0000000000404d4e\n.text:0000000000404d53\n.text:0000000000404d57\n.text:0000000000404d58\n.text:0000000000404d5a\n.text:0000000000404d5c\n.text:0000000000404d5e\n.text:0000000000404d5f\n'
p13
tp14
sS'fts_maxarglen'
p15
(S'\n__stdcall fts_maxarglen(char * * argv)\n'
p16
V\u000asize_t fts_maxarglen(char **argv)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *__s;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 1;\u000a  }\u000a  else {\u000a    argv = argv + 1;\u000a    uVar2 = 0;\u000a    do {\u000a      sVar1 = strlen(__s);\u000a      if (uVar2 < sVar1) {\u000a        uVar2 = sVar1;\u000a      }\u000a      __s = *argv;\u000a      argv = argv + 1;\u000a    } while (__s != (char *)0x0);\u000a    sVar3 = uVar2 + 1;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p17
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x0040554d\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004017d0\nCMP RAX,R14\nCMOVA R14,RAX\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x00405530\nINC R14\nJMP 0x00405553\nMOV R14D,0x1\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p18
S'41 56\n53\n50\n48 89 fb\n48 8b 3b\n48 85 ff\n74 2e\n48 83 c3 08\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\ne8 9b c2 ff ff\n4c 39 f0\n4c 0f 47 f0\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 e8\n49 ff c6\neb 06\n41 be 01 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p19
S'.text:0000000000405510\n.text:0000000000405512\n.text:0000000000405513\n.text:0000000000405514\n.text:0000000000405517\n.text:000000000040551a\n.text:000000000040551d\n.text:000000000040551f\n.text:0000000000405523\n.text:0000000000405526\n.text:0000000000405530\n.text:0000000000405535\n.text:0000000000405538\n.text:000000000040553c\n.text:000000000040553f\n.text:0000000000405543\n.text:0000000000405546\n.text:0000000000405548\n.text:000000000040554b\n.text:000000000040554d\n.text:0000000000405553\n.text:0000000000405556\n.text:000000000040555a\n.text:000000000040555b\n.text:000000000040555d\n'
p20
tp21
sS'transfer_entries'
p22
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p23
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00408432\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00408422\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x004083ca\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407c40\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x004083b0\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x004083c2\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004089b0\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00408380\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00408422\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407c40\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00408410\nMOV RDI,R14\nCALL 0x004086f0\nTEST RAX,RAX\nJZ 0x00408441\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00408417\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00408360\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00408432\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p26
S'.text:0000000000408330\n.text:0000000000408331\n.text:0000000000408333\n.text:0000000000408335\n.text:0000000000408337\n.text:0000000000408339\n.text:000000000040833a\n.text:000000000040833b\n.text:000000000040833e\n.text:0000000000408341\n.text:0000000000408344\n.text:0000000000408348\n.text:000000000040834a\n.text:000000000040834e\n.text:0000000000408354\n.text:0000000000408358\n.text:0000000000408360\n.text:0000000000408364\n.text:000000000040836a\n.text:000000000040836e\n.text:0000000000408371\n.text:0000000000408373\n.text:0000000000408380\n.text:0000000000408383\n.text:0000000000408386\n.text:0000000000408389\n.text:000000000040838e\n.text:0000000000408392\n.text:0000000000408396\n.text:0000000000408398\n.text:000000000040839c\n.text:00000000004083a0\n.text:00000000004083a4\n.text:00000000004083b0\n.text:00000000004083b3\n.text:00000000004083b7\n.text:00000000004083ba\n.text:00000000004083bd\n.text:00000000004083c2\n.text:00000000004083c5\n.text:00000000004083c8\n.text:00000000004083ca\n.text:00000000004083cd\n.text:00000000004083d5\n.text:00000000004083d8\n.text:00000000004083dc\n.text:00000000004083de\n.text:00000000004083e1\n.text:00000000004083e4\n.text:00000000004083e9\n.text:00000000004083ec\n.text:00000000004083f0\n.text:00000000004083f2\n.text:00000000004083f5\n.text:00000000004083fa\n.text:00000000004083fd\n.text:00000000004083ff\n.text:0000000000408402\n.text:0000000000408406\n.text:000000000040840a\n.text:000000000040840e\n.text:0000000000408410\n.text:0000000000408413\n.text:0000000000408417\n.text:000000000040841e\n.text:0000000000408422\n.text:0000000000408426\n.text:000000000040842a\n.text:0000000000408430\n.text:0000000000408432\n.text:0000000000408436\n.text:0000000000408437\n.text:0000000000408439\n.text:000000000040843b\n.text:000000000040843d\n.text:000000000040843f\n.text:0000000000408440\n.text:0000000000408441\n.text:0000000000408443\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00409359;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00409359:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401950\nTEST EAX,EAX\nJS 0x00409359\nMOV RDI,RBX\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x00409327\nMOV RDI,RBX\nCALL 0x00401950\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401850\nCMP RAX,-0x1\nJZ 0x00409359\nMOV RDI,RBX\nCALL 0x00409530\nTEST EAX,EAX\nJZ 0x00409359\nCALL 0x00401700\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401790\nTEST EBP,EBP\nJZ 0x00409352\nCALL 0x00401700\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401790\n'
p32
S'55\n53\n50\n48 89 fb\ne8 55 86 ff ff\n85 c0\n78 5a\n48 89 df\ne8 c9 86 ff ff\n85 c0\n74 1c\n48 89 df\ne8 3d 86 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 2f 85 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 c8 83 ff ff\n8b 28\n48 89 df\ne8 4e 84 ff ff\n85 ed\n74 0c\ne8 b5 83 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 29 84 ff ff\n'
p33
S'.text:00000000004092f0\n.text:00000000004092f1\n.text:00000000004092f2\n.text:00000000004092f3\n.text:00000000004092f6\n.text:00000000004092fb\n.text:00000000004092fd\n.text:00000000004092ff\n.text:0000000000409302\n.text:0000000000409307\n.text:0000000000409309\n.text:000000000040930b\n.text:000000000040930e\n.text:0000000000409313\n.text:0000000000409315\n.text:000000000040931a\n.text:000000000040931c\n.text:0000000000409321\n.text:0000000000409325\n.text:0000000000409327\n.text:000000000040932a\n.text:000000000040932f\n.text:0000000000409331\n.text:0000000000409333\n.text:0000000000409338\n.text:000000000040933a\n.text:000000000040933d\n.text:0000000000409342\n.text:0000000000409344\n.text:0000000000409346\n.text:000000000040934b\n.text:000000000040934d\n.text:0000000000409352\n.text:0000000000409356\n.text:0000000000409357\n.text:0000000000409358\n.text:0000000000409359\n.text:000000000040935c\n.text:0000000000409360\n.text:0000000000409361\n.text:0000000000409362\n'
p34
tp35
sS'leave_dir'
p36
(S'\n__stdcall leave_dir(FTS * fts, FTSENT * ent)\n'
p37
V\u000avoid leave_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  __ino_t *p_Var2;\u000a  void *__ptr;\u000a  __dev_t local_18;\u000a  __ino_t local_10;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) != 0) {\u000a    local_18 = ent->fts_statp[0].st_dev;\u000a    local_10 = ent->fts_statp[0].st_ino;\u000a    __ptr = hash_delete((Hash_table *)fts->fts_cycle,&local_18);\u000a    if (__ptr != (void *)0x0) {\u000a      free(__ptr);\u000a      return;\u000a    }\u000aLAB_00406198:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  p_Var1 = ent->fts_parent;\u000a  if ((p_Var1 != (_ftsent *)0x0) && (-1 < p_Var1->fts_level)) {\u000a    p_Var2 = (__ino_t *)fts->fts_cycle;\u000a    if (p_Var2[2] == 0) goto LAB_00406198;\u000a    if ((*p_Var2 == ent->fts_statp[0].st_ino) && (p_Var2[1] == ent->fts_statp[0].st_dev)) {\u000a      p_Var2[1] = p_Var1->fts_statp[0].st_dev;\u000a      *p_Var2 = p_Var1->fts_statp[0].st_ino;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'SUB RSP,0x18\nMOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00406150\nMOV RAX,qword ptr [RSI + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x80 + RSI]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,qword ptr [RDI + 0x58]\nMOV RSI,RSP\nCALL 0x00408750\nTEST RAX,RAX\nJZ 0x00406198\nMOV RDI,RAX\nCALL 0x004016e0\nADD RSP,0x18\nRET\nMOV RAX,qword ptr [RSI + 0x8]\nTEST RAX,RAX\nJZ 0x00406193\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x00406193\nMOV RCX,qword ptr [RDI + 0x58]\nCMP qword ptr [RCX + 0x10],0x0\nJZ 0x00406198\nMOV RDX,qword ptr [RCX]\nCMP RDX,qword ptr [0x80 + RSI]\nJNZ 0x00406193\nMOV RDX,qword ptr [RCX + 0x8]\nCMP RDX,qword ptr [RSI + 0x78]\nJNZ 0x00406193\nMOV RDX,qword ptr [RAX + 0x78]\nMOV qword ptr [RCX + 0x8],RDX\nMOV RAX,qword ptr [0x80 + RAX]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nRET\nCALL 0x004016f0\n'
p39
S'48 83 ec 18\n0f b7 47 48\n66 a9 02 01\n74 32\n48 8b 46 78\n48 89 04 24\n48 8b 86 80 00 00 00\n48 89 44 24 08\n48 8b 7f 58\n48 89 e6\ne8 12 26 00 00\n48 85 c0\n74 55\n48 89 c7\ne8 95 b5 ff ff\n48 83 c4 18\nc3\n48 8b 46 08\n48 85 c0\n74 3a\n48 83 78 58 00\n78 33\n48 8b 4f 58\n48 83 79 10 00\n74 2d\n48 8b 11\n48 3b 96 80 00 00 00\n75 1c\n48 8b 51 08\n48 3b 56 78\n75 12\n48 8b 50 78\n48 89 51 08\n48 8b 80 80 00 00 00\n48 89 01\n48 83 c4 18\nc3\ne8 53 b5 ff ff\n'
p40
S'.text:0000000000406110\n.text:0000000000406114\n.text:0000000000406118\n.text:000000000040611c\n.text:000000000040611e\n.text:0000000000406122\n.text:0000000000406126\n.text:000000000040612d\n.text:0000000000406132\n.text:0000000000406136\n.text:0000000000406139\n.text:000000000040613e\n.text:0000000000406141\n.text:0000000000406143\n.text:0000000000406146\n.text:000000000040614b\n.text:000000000040614f\n.text:0000000000406150\n.text:0000000000406154\n.text:0000000000406157\n.text:0000000000406159\n.text:000000000040615e\n.text:0000000000406160\n.text:0000000000406164\n.text:0000000000406169\n.text:000000000040616b\n.text:000000000040616e\n.text:0000000000406175\n.text:0000000000406177\n.text:000000000040617b\n.text:000000000040617f\n.text:0000000000406181\n.text:0000000000406185\n.text:0000000000406189\n.text:0000000000406190\n.text:0000000000406193\n.text:0000000000406197\n.text:0000000000406198\n'
p41
tp42
sS'lgetfileconat'
p43
(S'\n__stdcall lgetfileconat(char * file, security_context_t * con)\n'
p44
V\u000aint lgetfileconat(char *file,security_context_t *con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t *con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*(char *)con == '/')) {\u000a    __fd = lgetfilecon((char *)con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = lgetfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_00407354:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = lgetfilecon((char *)con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_00407354;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x004071f3\nCMP byte ptr [RBX],0x2f\nJNZ 0x0040720f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004048c0\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004095f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040727f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004048c0\nMOV R15D,EAX\nCALL 0x00401700\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x00407256\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x004016e0\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x00407333\nCMP EDX,0x26\nJA 0x00407323\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x00407323\nLEA RDI,[RSP + 0x10]\nCALL 0x00408ef0\nTEST EAX,EAX\nJNZ 0x00407348\nTEST EBP,EBP\nJS 0x004072b8\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x004072b8\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nCALL 0x00401700\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x00407333\nMOV EDI,EBP\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x004072e1\nCALL 0x00401700\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x00407333\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004048c0\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x004072fe\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f40\nTEST EAX,EAX\nJNZ 0x00407354\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nTEST EBX,EBX\nJZ 0x00407333\nCALL 0x00401700\nMOV dword ptr [RAX],EBX\nJMP 0x00407333\nCMP EDX,0x5f\nJZ 0x0040727f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408db0\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408df0\n'
p46
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 b1 d6 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 cf 23 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 8c d6 ff ff\n41 89 c7\ne8 c4 a4 ff ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 8d a4 ff ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 67 1c 00 00\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 bb 1c 00 00\ne8 56 a4 ff ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 21 a7 ff ff\n85 c0\n74 1e\ne8 38 a4 ff ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 89 1c 00 00\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 d4 d5 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 04 a4 ff ff\n8b 18\n48 8d 7c 24 10\ne8 38 1c 00 00\n85 c0\n75 48\n48 8d 7c 24 10\ne8 4a 1c 00 00\n85 db\n74 19\ne8 e1 a3 ff ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 b3 a3 ff ff\n8b 38\ne8 5c 1a 00 00\ne8 a7 a3 ff ff\n8b 38\ne8 90 1a 00 00\n'
p47
S'.text:00000000004071d0\n.text:00000000004071d1\n.text:00000000004071d3\n.text:00000000004071d5\n.text:00000000004071d7\n.text:00000000004071d9\n.text:00000000004071da\n.text:00000000004071e1\n.text:00000000004071e4\n.text:00000000004071e7\n.text:00000000004071e9\n.text:00000000004071ec\n.text:00000000004071ee\n.text:00000000004071f1\n.text:00000000004071f3\n.text:00000000004071f6\n.text:00000000004071f9\n.text:0000000000407200\n.text:0000000000407201\n.text:0000000000407203\n.text:0000000000407205\n.text:0000000000407207\n.text:0000000000407209\n.text:000000000040720a\n.text:000000000040720f\n.text:0000000000407214\n.text:0000000000407217\n.text:0000000000407219\n.text:000000000040721c\n.text:0000000000407221\n.text:0000000000407224\n.text:0000000000407227\n.text:0000000000407229\n.text:000000000040722c\n.text:000000000040722f\n.text:0000000000407234\n.text:0000000000407237\n.text:000000000040723c\n.text:0000000000407241\n.text:0000000000407243\n.text:0000000000407246\n.text:0000000000407248\n.text:000000000040724b\n.text:000000000040724e\n.text:0000000000407253\n.text:0000000000407256\n.text:000000000040725a\n.text:0000000000407260\n.text:0000000000407263\n.text:0000000000407269\n.text:000000000040726b\n.text:0000000000407275\n.text:0000000000407279\n.text:000000000040727f\n.text:0000000000407284\n.text:0000000000407289\n.text:000000000040728b\n.text:0000000000407291\n.text:0000000000407293\n.text:0000000000407295\n.text:0000000000407299\n.text:000000000040729b\n.text:00000000004072a0\n.text:00000000004072a5\n.text:00000000004072aa\n.text:00000000004072b0\n.text:00000000004072b6\n.text:00000000004072b8\n.text:00000000004072ba\n.text:00000000004072bf\n.text:00000000004072c1\n.text:00000000004072c3\n.text:00000000004072c8\n.text:00000000004072cb\n.text:00000000004072cd\n.text:00000000004072d2\n.text:00000000004072d7\n.text:00000000004072d9\n.text:00000000004072df\n.text:00000000004072e1\n.text:00000000004072e4\n.text:00000000004072e7\n.text:00000000004072ec\n.text:00000000004072ef\n.text:00000000004072f1\n.text:00000000004072f5\n.text:00000000004072f7\n.text:00000000004072fc\n.text:00000000004072fe\n.text:0000000000407303\n.text:0000000000407308\n.text:000000000040730a\n.text:000000000040730c\n.text:0000000000407311\n.text:0000000000407316\n.text:0000000000407318\n.text:000000000040731a\n.text:000000000040731f\n.text:0000000000407321\n.text:0000000000407323\n.text:0000000000407326\n.text:000000000040732c\n.text:0000000000407331\n.text:0000000000407333\n.text:0000000000407336\n.text:000000000040733d\n.text:000000000040733e\n.text:0000000000407340\n.text:0000000000407342\n.text:0000000000407344\n.text:0000000000407346\n.text:0000000000407347\n.text:0000000000407348\n.text:000000000040734d\n.text:000000000040734f\n.text:0000000000407354\n.text:0000000000407359\n.text:000000000040735b\n'
p48
tp49
sS'strncmp'
p50
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060f038)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0060f038]\n'
p53
S'ff 25 22 d9 20 00\n'
p54
S'.plt:0000000000401710\n'
p55
tp56
sS'xnrealloc'
p57
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p58
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p59
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404f64\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404f70\nPUSH RAX\nCALL 0x004050c0\n'
p60
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p61
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f59\n.text:0000000000404f5b\n.text:0000000000404f5f\n.text:0000000000404f62\n.text:0000000000404f64\n.text:0000000000404f65\n'
p62
tp63
sS'quote'
p64
(S'\n__stdcall quote(char * arg)\n'
p65
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004042c0\n'
p67
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p68
S'.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d5\n.text:00000000004042d8\n'
p69
tp70
sS'emit_bug_reporting_address'
p71
(S'\n__stdcall emit_bug_reporting_address()\n'
p72
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40b495\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40b4aa\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a20\nXOR EDI,EDI\nMOV ESI,0x40b4c0\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40a6c1\nMOV ECX,0x40a8bd\nXOR EAX,EAX\nCALL 0x00401a20\nXOR EDI,EDI\nMOV ESI,0x40b4d4\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004018f0\n'
p74
S'50\n31 ff\nbe 95 b4 40 00\nba 05 00 00 00\ne8 0e c9 ff ff\n48 89 c1\nbf 01 00 00 00\nba aa b4 40 00\n31 c0\n48 89 ce\ne8 67 cb ff ff\n31 ff\nbe c0 b4 40 00\nba 05 00 00 00\ne8 e6 c8 ff ff\n48 89 c6\nbf 01 00 00 00\nba c1 a6 40 00\nb9 bd a8 40 00\n31 c0\ne8 3d cb ff ff\n31 ff\nbe d4 b4 40 00\nba 05 00 00 00\ne8 bc c8 ff ff\n48 8b 35 cd a3 20 00\n48 89 c7\n58\ne9 ec c9 ff ff\n'
p75
S'.text:0000000000404e90\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea5\n.text:0000000000404eaa\n.text:0000000000404eaf\n.text:0000000000404eb1\n.text:0000000000404eb4\n.text:0000000000404eb9\n.text:0000000000404ebb\n.text:0000000000404ec0\n.text:0000000000404ec5\n.text:0000000000404eca\n.text:0000000000404ecd\n.text:0000000000404ed2\n.text:0000000000404ed7\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404eea\n.text:0000000000404eef\n.text:0000000000404ef4\n.text:0000000000404efb\n.text:0000000000404efe\n.text:0000000000404eff\n'
p76
tp77
sS'clone_quoting_options'
p78
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p79
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401700\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60f380\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405070\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p81
S'55\n41 56\n53\n48 89 fb\ne8 64 e8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 80 f3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 b5 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p82
S'.text:0000000000402e90\n.text:0000000000402e91\n.text:0000000000402e93\n.text:0000000000402e94\n.text:0000000000402e97\n.text:0000000000402e9c\n.text:0000000000402e9f\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402eae\n.text:0000000000402eb3\n.text:0000000000402eb6\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ebf\n.text:0000000000402ec1\n.text:0000000000402ec2\n'
p83
tp84
sS'xmalloc'
p85
(S'\n__stdcall xmalloc(size_t n)\n'
p86
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p87
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401980\nTEST RBX,RBX\nJZ 0x00404f43\nTEST RAX,RAX\nJZ 0x00404f45\nPOP RBX\nRET\nCALL 0x004050c0\n'
p88
S'53\n48 89 fb\ne8 47 ca ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p89
S'.text:0000000000404f30\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f39\n.text:0000000000404f3c\n.text:0000000000404f3e\n.text:0000000000404f41\n.text:0000000000404f43\n.text:0000000000404f44\n.text:0000000000404f45\n'
p90
tp91
sS'cwd_advance_fd'
p92
(S'\n__stdcall cwd_advance_fd(FTS * sp)\n'
p93
V\u000avoid cwd_advance_fd(FTS *sp)\u000a\u000a{\u000a  int __fd;\u000a  char in_DL;\u000a  int in_ESI;\u000a  \u000a  __fd = sp->fts_cwd_fd;\u000a  if ((__fd == in_ESI) && (__fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  if (in_DL == 0) {\u000a    if ((__fd < 0) || ((sp->fts_options & 4U) != 0)) goto LAB_00406cbc;\u000a  }\u000a  else {\u000a    __fd = i_ring_push(&sp->fts_fd_ring);\u000a    if (__fd < 0) goto LAB_00406cbc;\u000a  }\u000a  close(__fd);\u000aLAB_00406cbc:\u000a  sp->fts_cwd_fd = in_ESI;\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,dword ptr [RBX + 0x2c]\nCMP ESI,EBP\nJNZ 0x00406c94\nCMP ESI,-0x64\nJNZ 0x00406cc6\nTEST DL,DL\nJZ 0x00406ca9\nLEA RDI,[RBX + 0x60]\nCALL 0x00408a00\nTEST EAX,EAX\nJS 0x00406cbc\nMOV EDI,EAX\nJMP 0x00406cb7\nTEST ESI,ESI\nJS 0x00406cbc\nMOV EAX,dword ptr [RBX + 0x48]\nAND EAX,0x4\nJNZ 0x00406cbc\nMOV EDI,ESI\nCALL 0x004018a0\nMOV dword ptr [RBX + 0x2c],EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x004016f0\n'
p95
S'55\n53\n50\n89 f5\n48 89 fb\n8b 73 2c\n39 ee\n75 05\n83 fe 9c\n75 32\n84 d2\n74 11\n48 8d 7b 60\ne8 5f 1d 00 00\n85 c0\n78 17\n89 c7\neb 0e\n85 f6\n78 0f\n8b 43 48\n83 e0 04\n75 07\n89 f7\ne8 e4 ab ff ff\n89 6b 2c\n48 83 c4 08\n5b\n5d\nc3\ne8 25 aa ff ff\n'
p96
S'.text:0000000000406c80\n.text:0000000000406c81\n.text:0000000000406c82\n.text:0000000000406c83\n.text:0000000000406c85\n.text:0000000000406c88\n.text:0000000000406c8b\n.text:0000000000406c8d\n.text:0000000000406c8f\n.text:0000000000406c92\n.text:0000000000406c94\n.text:0000000000406c96\n.text:0000000000406c98\n.text:0000000000406c9c\n.text:0000000000406ca1\n.text:0000000000406ca3\n.text:0000000000406ca5\n.text:0000000000406ca7\n.text:0000000000406ca9\n.text:0000000000406cab\n.text:0000000000406cad\n.text:0000000000406cb0\n.text:0000000000406cb3\n.text:0000000000406cb5\n.text:0000000000406cb7\n.text:0000000000406cbc\n.text:0000000000406cbf\n.text:0000000000406cc3\n.text:0000000000406cc4\n.text:0000000000406cc5\n.text:0000000000406cc6\n'
p97
tp98
sS'context_range_set'
p99
(S'\n__stdcall context_range_set(char * s)\n'
p100
V\u000aint context_range_set(char *s)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p101
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p102
S'50\ne8 6a cf ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p103
S'.text:0000000000404790\n.text:0000000000404791\n.text:0000000000404796\n.text:000000000040479c\n.text:00000000004047a1\n.text:00000000004047a2\n'
p104
tp105
sS'quotearg_char_mem'
p106
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p107
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060f3b0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060f3a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f390]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f380]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402ef0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403de0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p109
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d a8 b2 20 00\n48 89 4c 24 30\n0f 10 05 8c b2 20 00\n0f 29 44 24 20\n0f 10 05 70 b2 20 00\n0f 29 44 24 10\n0f 10 05 54 b2 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p110
S'.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f5\n.text:00000000004040f9\n.text:00000000004040fb\n.text:00000000004040fe\n.text:0000000000404101\n.text:0000000000404108\n.text:000000000040410d\n.text:0000000000404114\n.text:0000000000404119\n.text:0000000000404120\n.text:0000000000404125\n.text:000000000040412c\n.text:0000000000404130\n.text:0000000000404133\n.text:0000000000404138\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404144\n.text:0000000000404147\n.text:000000000040414a\n.text:000000000040414d\n.text:0000000000404152\n.text:0000000000404156\n.text:0000000000404157\n.text:0000000000404159\n.text:000000000040415b\n'
p111
tp112
sS'frame_dummy'
p113
(S'\n__stdcall frame_dummy()\n'
p114
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c1a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p115
S'MOV EDI,0x60ee18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401c10\nJMP 0x00401ba0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c0b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401ba0\n'
p116
S'bf 18 ee 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p117
S'.text:0000000000401c00\n.text:0000000000401c05\n.text:0000000000401c09\n.text:0000000000401c0b\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c18\n.text:0000000000401c1a\n.text:0000000000401c1b\n.text:0000000000401c1e\n.text:0000000000401c20\n.text:0000000000401c21\n'
p118
tp119
sS'context_user_get'
p120
(S'\n__stdcall context_user_get()\n'
p121
V\u000achar * context_user_get(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p122
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p123
S'50\ne8 fa ce ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p124
S'.text:0000000000404800\n.text:0000000000404801\n.text:0000000000404806\n.text:000000000040480c\n.text:000000000040480e\n.text:000000000040480f\n'
p125
tp126
sS'compute_context_from_mask'
p127
(S'\n__stdcall compute_context_from_mask(char * context, context_t * ret)\n'
p128
V\u000aint compute_context_from_mask(char *context,context_t *ret)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  uint *puVar7;\u000a  int *piVar8;\u000a  \u000a  uVar3 = context_new(context);\u000a  if (uVar3 == 0) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar3 = *puVar7;\u000a    uVar5 = dcgettext(0,"failed to create security context: %s",5);\u000a    pcVar6 = quote(context);\u000a    error(0,(ulong)uVar3,uVar5,pcVar6);\u000a    return 1;\u000a  }\u000a  bVar2 = true;\u000a  if ((specified_user != (char *)0x0) &&\u000a     (iVar4 = context_user_set((char *)(ulong)uVar3), iVar4 != 0)) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    bVar2 = false;\u000a    uVar5 = dcgettext(0,"failed to set %s security context component to %s",5);\u000a    pcVar6 = quote(specified_user);\u000a    error(0,(ulong)uVar1,uVar5,&DAT_0040a9a9,pcVar6);\u000a  }\u000a  if ((specified_range != (char *)0x0) &&\u000a     (iVar4 = context_range_set((char *)(ulong)uVar3), iVar4 != 0)) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    bVar2 = false;\u000a    uVar5 = dcgettext(0,"failed to set %s security context component to %s",5);\u000a    pcVar6 = quote(specified_range);\u000a    error(0,(ulong)uVar1,uVar5,"range",pcVar6);\u000a  }\u000a  if ((specified_role != (char *)0x0) &&\u000a     (iVar4 = context_role_set((char *)(ulong)uVar3), iVar4 != 0)) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    bVar2 = false;\u000a    uVar5 = dcgettext(0,"failed to set %s security context component to %s",5);\u000a    pcVar6 = quote(specified_role);\u000a    error(0,(ulong)uVar1,uVar5,&DAT_0040a9ae,pcVar6);\u000a  }\u000a  if ((specified_type == (char *)0x0) ||\u000a     (iVar4 = context_type_set((char *)(ulong)uVar3), iVar4 == 0)) {\u000a    if (bVar2) {\u000a      *ret = uVar3;\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    uVar5 = dcgettext(0,"failed to set %s security context component to %s",5);\u000a    pcVar6 = quote(specified_type);\u000a    error(0,(ulong)uVar1,uVar5,&DAT_0040a9b3,pcVar6);\u000a  }\u000a  piVar8 = __errno_location();\u000a  iVar4 = *piVar8;\u000a  context_free((ulong)uVar3);\u000a  *piVar8 = iVar4;\u000a  return 1;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RSI\nMOV RBX,RDI\nCALL 0x00404720\nMOV R14D,EAX\nTEST R14D,R14D\nJZ 0x00402c8a\nMOV RSI,qword ptr [0x0060f318]\nMOV R13B,0x1\nTEST RSI,RSI\nJZ 0x00402b72\nMOV EDI,R14D\nCALL 0x00404750\nTEST EAX,EAX\nJZ 0x00402b72\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x40ac0d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R12,RAX\nMOV RDI,qword ptr [0x0060f318]\nCALL 0x004042d0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ECX,0x40a9a9\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV R8,RBX\nCALL 0x00401a40\nMOV RSI,qword ptr [0x0060f330]\nTEST RSI,RSI\nJZ 0x00402bcf\nMOV EDI,R14D\nCALL 0x00404790\nTEST EAX,EAX\nJZ 0x00402bcf\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x40ac0d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R12,RAX\nMOV RDI,qword ptr [0x0060f330]\nCALL 0x004042d0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ECX,0x40a9b8\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV R8,RBX\nCALL 0x00401a40\nMOV RSI,qword ptr [0x0060f320]\nTEST RSI,RSI\nJZ 0x00402c2c\nMOV EDI,R14D\nCALL 0x00404770\nTEST EAX,EAX\nJZ 0x00402c2c\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x40ac0d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R12,RAX\nMOV RDI,qword ptr [0x0060f320]\nCALL 0x004042d0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ECX,0x40a9ae\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV R8,RBX\nCALL 0x00401a40\nMOV RSI,qword ptr [0x0060f328]\nTEST RSI,RSI\nJZ 0x00402cc7\nMOV EDI,R14D\nCALL 0x004047b0\nTEST EAX,EAX\nJZ 0x00402cc7\nCALL 0x00401700\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40ac0d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060f328]\nCALL 0x004042d0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ECX,0x40a9b3\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R15\nMOV R8,RBX\nCALL 0x00401a40\nJMP 0x00402ccc\nCALL 0x00401700\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40abe7\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004042d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401a40\nMOV EAX,0x1\nJMP 0x00402ced\nTEST R13B,R13B\nJNZ 0x00402ce7\nCALL 0x00401700\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV EDI,R14D\nCALL 0x00404740\nMOV dword ptr [RBX],EBP\nMOV EAX,0x1\nJMP 0x00402ced\nMOV dword ptr [RBP],R14D\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p130
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 f5\n48 89 fb\ne8 1a 1c 00 00\n41 89 c6\n45 85 f6\n0f 84 78 01 00 00\n48 8b 35 ff c7 20 00\n41 b5 01\n48 85 f6\n74 51\n44 89 f7\ne8 27 1c 00 00\n85 c0\n74 45\ne8 ce eb ff ff\n44 8b 38\n45 31 ed\n31 ff\nbe 0d ac 40 00\nba 05 00 00 00\ne8 67 ec ff ff\n49 89 c4\n48 8b 3d c5 c7 20 00\ne8 78 17 00 00\n48 89 c3\n31 ff\nb9 a9 a9 40 00\n31 c0\n44 89 fe\n4c 89 e2\n49 89 d8\ne8 ce ee ff ff\n48 8b 35 b7 c7 20 00\n48 85 f6\n74 51\n44 89 f7\ne8 0a 1c 00 00\n85 c0\n74 45\ne8 71 eb ff ff\n44 8b 38\n45 31 ed\n31 ff\nbe 0d ac 40 00\nba 05 00 00 00\ne8 0a ec ff ff\n49 89 c4\n48 8b 3d 80 c7 20 00\ne8 1b 17 00 00\n48 89 c3\n31 ff\nb9 b8 a9 40 00\n31 c0\n44 89 fe\n4c 89 e2\n49 89 d8\ne8 71 ee ff ff\n48 8b 35 4a c7 20 00\n48 85 f6\n74 51\n44 89 f7\ne8 8d 1b 00 00\n85 c0\n74 45\ne8 14 eb ff ff\n44 8b 38\n45 31 ed\n31 ff\nbe 0d ac 40 00\nba 05 00 00 00\ne8 ad eb ff ff\n49 89 c4\n48 8b 3d 13 c7 20 00\ne8 be 16 00 00\n48 89 c3\n31 ff\nb9 ae a9 40 00\n31 c0\n44 89 fe\n4c 89 e2\n49 89 d8\ne8 14 ee ff ff\n48 8b 35 f5 c6 20 00\n48 85 f6\n0f 84 8b 00 00 00\n44 89 f7\ne8 6c 1b 00 00\n85 c0\n74 7f\ne8 b3 ea ff ff\n8b 28\n31 ff\nbe 0d ac 40 00\nba 05 00 00 00\ne8 50 eb ff ff\n49 89 c7\n48 8b 3d be c6 20 00\ne8 61 16 00 00\n48 89 c3\n31 ff\nb9 b3 a9 40 00\n31 c0\n89 ee\n4c 89 fa\n49 89 d8\ne8 b8 ed ff ff\neb 42\ne8 71 ea ff ff\n44 8b 30\n31 ff\nbe e7 ab 40 00\nba 05 00 00 00\ne8 0d eb ff ff\n48 89 c5\n48 89 df\ne8 22 16 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 80 ed ff ff\nb8 01 00 00 00\neb 26\n45 84 ed\n75 1b\ne8 2f ea ff ff\n48 89 c3\n8b 2b\n44 89 f7\ne8 62 1a 00 00\n89 2b\nb8 01 00 00 00\neb 06\n44 89 75 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p131
S'.text:0000000000402af0\n.text:0000000000402af1\n.text:0000000000402af3\n.text:0000000000402af5\n.text:0000000000402af7\n.text:0000000000402af9\n.text:0000000000402afa\n.text:0000000000402afb\n.text:0000000000402afe\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b09\n.text:0000000000402b0c\n.text:0000000000402b12\n.text:0000000000402b19\n.text:0000000000402b1c\n.text:0000000000402b1f\n.text:0000000000402b21\n.text:0000000000402b24\n.text:0000000000402b29\n.text:0000000000402b2b\n.text:0000000000402b2d\n.text:0000000000402b32\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3a\n.text:0000000000402b3f\n.text:0000000000402b44\n.text:0000000000402b49\n.text:0000000000402b4c\n.text:0000000000402b53\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b62\n.text:0000000000402b64\n.text:0000000000402b67\n.text:0000000000402b6a\n.text:0000000000402b6d\n.text:0000000000402b72\n.text:0000000000402b79\n.text:0000000000402b7c\n.text:0000000000402b7e\n.text:0000000000402b81\n.text:0000000000402b86\n.text:0000000000402b88\n.text:0000000000402b8a\n.text:0000000000402b8f\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b9c\n.text:0000000000402ba1\n.text:0000000000402ba6\n.text:0000000000402ba9\n.text:0000000000402bb0\n.text:0000000000402bb5\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc7\n.text:0000000000402bca\n.text:0000000000402bcf\n.text:0000000000402bd6\n.text:0000000000402bd9\n.text:0000000000402bdb\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402be5\n.text:0000000000402be7\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf2\n.text:0000000000402bf4\n.text:0000000000402bf9\n.text:0000000000402bfe\n.text:0000000000402c03\n.text:0000000000402c06\n.text:0000000000402c0d\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c17\n.text:0000000000402c1c\n.text:0000000000402c1e\n.text:0000000000402c21\n.text:0000000000402c24\n.text:0000000000402c27\n.text:0000000000402c2c\n.text:0000000000402c33\n.text:0000000000402c36\n.text:0000000000402c3c\n.text:0000000000402c3f\n.text:0000000000402c44\n.text:0000000000402c46\n.text:0000000000402c48\n.text:0000000000402c4d\n.text:0000000000402c4f\n.text:0000000000402c51\n.text:0000000000402c56\n.text:0000000000402c5b\n.text:0000000000402c60\n.text:0000000000402c63\n.text:0000000000402c6a\n.text:0000000000402c6f\n.text:0000000000402c72\n.text:0000000000402c74\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c7d\n.text:0000000000402c80\n.text:0000000000402c83\n.text:0000000000402c88\n.text:0000000000402c8a\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c94\n.text:0000000000402c99\n.text:0000000000402c9e\n.text:0000000000402ca3\n.text:0000000000402ca6\n.text:0000000000402ca9\n.text:0000000000402cae\n.text:0000000000402cb1\n.text:0000000000402cb3\n.text:0000000000402cb5\n.text:0000000000402cb8\n.text:0000000000402cbb\n.text:0000000000402cc0\n.text:0000000000402cc5\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccc\n.text:0000000000402cd1\n.text:0000000000402cd4\n.text:0000000000402cd6\n.text:0000000000402cd9\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402ceb\n.text:0000000000402ced\n.text:0000000000402cf1\n.text:0000000000402cf2\n.text:0000000000402cf4\n.text:0000000000402cf6\n.text:0000000000402cf8\n.text:0000000000402cfa\n.text:0000000000402cfb\n'
p132
tp133
sS'restore_initial_cwd'
p134
(S'\n__stdcall restore_initial_cwd(FTS * sp)\n'
p135
V\u000aint restore_initial_cwd(FTS *sp)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  if ((sp->fts_options & 4U) == 0) {\u000a    if ((sp->fts_options & 0x200U) == 0) {\u000a      iVar1 = fchdir(sp->fts_rfd);\u000a      bVar2 = iVar1 != 0;\u000a      goto LAB_00406a55;\u000a    }\u000a    cwd_advance_fd(sp);\u000a  }\u000a  bVar2 = false;\u000aLAB_00406a55:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x48]\nTEST AL,0x4\nJNZ 0x00406a53\nTEST AH,0x2\nJNZ 0x00406a41\nMOV EDI,dword ptr [RBX + 0x28]\nCALL 0x004019e0\nTEST EAX,EAX\nSETNZ AL\nJMP 0x00406a55\nMOV ESI,0xffffff9c\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00406c80\nXOR EAX,EAX\nMOVZX EBP,AL\nADD RBX,0x60\nMOV RDI,RBX\nCALL 0x00405af0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p137
S'55\n53\n50\n48 89 fb\n8b 43 48\na8 04\n75 26\nf6 c4 02\n75 0f\n8b 7b 28\ne8 a6 af ff ff\n85 c0\n0f 95 c0\neb 14\nbe 9c ff ff ff\nba 01 00 00 00\n48 89 df\ne8 2d 02 00 00\n31 c0\n0f b6 e8\n48 83 c3 60\n48 89 df\ne8 8c f0 ff ff\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p138
S'.text:0000000000406a20\n.text:0000000000406a21\n.text:0000000000406a22\n.text:0000000000406a23\n.text:0000000000406a26\n.text:0000000000406a29\n.text:0000000000406a2b\n.text:0000000000406a2d\n.text:0000000000406a30\n.text:0000000000406a32\n.text:0000000000406a35\n.text:0000000000406a3a\n.text:0000000000406a3c\n.text:0000000000406a3f\n.text:0000000000406a41\n.text:0000000000406a46\n.text:0000000000406a4b\n.text:0000000000406a4e\n.text:0000000000406a53\n.text:0000000000406a55\n.text:0000000000406a58\n.text:0000000000406a5c\n.text:0000000000406a5f\n.text:0000000000406a64\n.text:0000000000406a66\n.text:0000000000406a6a\n.text:0000000000406a6b\n.text:0000000000406a6c\n'
p139
tp140
sS'find_non_slash'
p141
(S'\n__stdcall find_non_slash(char * s)\n'
p142
V\u000achar * find_non_slash(char *s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = strspn(s,"/");\u000a  return s + sVar1;\u000a}\u000a\u000a
p143
S'PUSH RBX\nMOV RBX,RDI\nMOV ESI,0x40bcbf\nCALL 0x004018b0\nADD RAX,RBX\nPOP RBX\nRET\n'
p144
S'53\n48 89 fb\nbe bf bc 40 00\ne8 12 86 ff ff\n48 01 d8\n5b\nc3\n'
p145
S'.text:0000000000409290\n.text:0000000000409291\n.text:0000000000409294\n.text:0000000000409299\n.text:000000000040929e\n.text:00000000004092a1\n.text:00000000004092a2\n'
p146
tp147
sS'quotearg_n_style_colon'
p148
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p149
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404010\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402ef0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403de0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p151
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p152
S'.text:0000000000404190\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404194\n.text:0000000000404198\n.text:000000000040419b\n.text:000000000040419d\n.text:00000000004041a2\n.text:00000000004041a5\n.text:00000000004041aa\n.text:00000000004041af\n.text:00000000004041b4\n.text:00000000004041b7\n.text:00000000004041bc\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041c8\n.text:00000000004041cb\n.text:00000000004041d0\n.text:00000000004041d4\n.text:00000000004041d5\n.text:00000000004041d7\n.text:00000000004041d8\n'
p153
tp154
sS'rotl64'
p155
(S'\n__stdcall rotl64(uint64_t x)\n'
p156
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p157
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p158
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p159
S'.text:0000000000409700\n.text:0000000000409702\n.text:0000000000409705\n.text:0000000000409708\n'
p160
tp161
sS'LCO_compare'
p162
(S'\n__stdcall LCO_compare(void * x, void * y)\n'
p163
V\u000a_Bool LCO_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p164
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p165
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p166
S'.text:0000000000406e70\n.text:0000000000406e73\n.text:0000000000406e76\n.text:0000000000406e79\n'
p167
tp168
sS'fts_children'
p169
(S'\n__stdcall fts_children(FTS * sp)\n'
p170
V\u000aFTSENT * fts_children(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  _ftsent *p_Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  FTSENT *pFVar5;\u000a  uint in_ESI;\u000a  \u000a  piVar4 = __errno_location();\u000a  if ((in_ESI | 0x2000) == 0x2000) {\u000a    p_Var2 = sp->fts_cur;\u000a    *piVar4 = 0;\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) == 0) {\u000a      if (p_Var2->fts_info != 1) {\u000a        if (p_Var2->fts_info != 9) {\u000a          return (FTSENT *)0x0;\u000a        }\u000a        return (FTSENT *)p_Var2->fts_link;\u000a      }\u000a      if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a        fts_lfree((FTSENT *)sp->fts_child);\u000a      }\u000a      if (in_ESI == 0x2000) {\u000a        pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a        *pbVar1 = *pbVar1 | 0x20;\u000a      }\u000a      if (((p_Var2->fts_level == 0) && (*p_Var2->fts_accpath != '/')) &&\u000a         ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a        __fd = diropen(sp,".");\u000a        if (__fd < 0) {\u000a          sp->fts_child = (_ftsent *)0x0;\u000a          return (FTSENT *)0x0;\u000a        }\u000a        pFVar5 = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = pFVar5;\u000a        if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000a          iVar3 = fchdir(__fd);\u000a          if (iVar3 != 0) {\u000a            iVar3 = *piVar4;\u000a            close(__fd);\u000a            *piVar4 = iVar3;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          close(__fd);\u000a        }\u000a        else {\u000a          cwd_advance_fd(sp);\u000a        }\u000a        return (FTSENT *)sp->fts_child;\u000a      }\u000a      pFVar5 = fts_build(sp);\u000a      *(FTSENT **)&sp->fts_child = pFVar5;\u000a      return pFVar5;\u000a    }\u000a  }\u000a  else {\u000a    *piVar4 = 0x16;\u000a  }\u000a  return (FTSENT *)0x0;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00401700\nMOV R14,RAX\nMOV EAX,EBP\nOR EAX,0x2000\nCMP EAX,0x2000\nJNZ 0x00406d4f\nMOV R15,qword ptr [RBX]\nMOV dword ptr [R14],0x0\nTEST byte ptr [RBX + 0x49],0x40\nJNZ 0x00406d56\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x1\nJZ 0x00406d61\nMOVZX EAX,AX\nCMP EAX,0x9\nJNZ 0x00406de1\nMOV RAX,qword ptr [R15 + 0x10]\nJMP 0x00406d58\nMOV dword ptr [R14],0x16\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x00406d6f\nCALL 0x004059a0\nMOV R12D,0x1\nCMP EBP,0x2000\nJNZ 0x00406d87\nOR byte ptr [RBX + 0x49],0x20\nMOV R12D,0x2\nCMP qword ptr [R15 + 0x58],0x0\nJNZ 0x00406de8\nMOV RAX,qword ptr [R15 + 0x30]\nCMP byte ptr [RAX],0x2f\nJZ 0x00406de8\nTEST byte ptr [RBX + 0x48],0x4\nJNZ 0x00406de8\nMOV ESI,0x40b5ca\nMOV RDI,RBX\nCALL 0x00405940\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x00406dfc\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406330\nMOV qword ptr [RBX + 0x8],RAX\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x00406e0b\nMOV EDI,R15D\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00406e1d\nMOV EBX,dword ptr [R14]\nMOV EDI,R15D\nCALL 0x004018a0\nMOV dword ptr [R14],EBX\nXOR EAX,EAX\nJMP 0x00406d58\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406330\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00406d58\nMOV qword ptr [RBX + 0x8],0x0\nXOR EAX,EAX\nJMP 0x00406d58\nMOV EDX,0x1\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00406c80\nJMP 0x00406e25\nMOV EDI,R15D\nCALL 0x004018a0\nMOV RAX,qword ptr [RBX + 0x8]\nJMP 0x00406d58\n'
p172
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\ne8 ee a9 ff ff\n49 89 c6\n89 e8\n0d 00 20 00 00\n3d 00 20 00 00\n75 2c\n4c 8b 3b\n41 c7 06 00 00 00 00\nf6 43 49 40\n75 23\n41 0f b7 47 70\n83 f8 01\n74 24\n0f b7 c0\n83 f8 09\n0f 85 98 00 00 00\n49 8b 47 10\neb 09\n41 c7 06 16 00 00 00\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 7b 08\n48 85 ff\n74 05\ne8 31 ec ff ff\n41 bc 01 00 00 00\n81 fd 00 20 00 00\n75 0a\n80 4b 49 20\n41 bc 02 00 00 00\n49 83 7f 58 00\n75 5a\n49 8b 47 30\n80 38 2f\n74 51\nf6 43 48 04\n75 4b\nbe ca b5 40 00\n48 89 df\ne8 96 eb ff ff\n41 89 c7\n45 85 ff\n78 4a\n48 89 df\n44 89 e6\ne8 73 f5 ff ff\n48 89 43 08\nf6 43 49 02\n75 44\n44 89 ff\ne8 11 ac ff ff\n85 c0\n74 4a\n41 8b 1e\n44 89 ff\ne8 c2 aa ff ff\n41 89 1e\n31 c0\ne9 70 ff ff ff\n48 89 df\n44 89 e6\ne8 3d f5 ff ff\n48 89 43 08\ne9 5c ff ff ff\n48 c7 43 08 00 00 00 00\n31 c0\ne9 4d ff ff ff\nba 01 00 00 00\n48 89 df\n44 89 fe\ne8 65 fe ff ff\neb 08\n44 89 ff\ne8 7b aa ff ff\n48 8b 43 08\ne9 2a ff ff ff\n'
p173
S'.text:0000000000406d00\n.text:0000000000406d01\n.text:0000000000406d03\n.text:0000000000406d05\n.text:0000000000406d07\n.text:0000000000406d08\n.text:0000000000406d0a\n.text:0000000000406d0d\n.text:0000000000406d12\n.text:0000000000406d15\n.text:0000000000406d17\n.text:0000000000406d1c\n.text:0000000000406d21\n.text:0000000000406d23\n.text:0000000000406d26\n.text:0000000000406d2d\n.text:0000000000406d31\n.text:0000000000406d33\n.text:0000000000406d38\n.text:0000000000406d3b\n.text:0000000000406d3d\n.text:0000000000406d40\n.text:0000000000406d43\n.text:0000000000406d49\n.text:0000000000406d4d\n.text:0000000000406d4f\n.text:0000000000406d56\n.text:0000000000406d58\n.text:0000000000406d59\n.text:0000000000406d5b\n.text:0000000000406d5d\n.text:0000000000406d5f\n.text:0000000000406d60\n.text:0000000000406d61\n.text:0000000000406d65\n.text:0000000000406d68\n.text:0000000000406d6a\n.text:0000000000406d6f\n.text:0000000000406d75\n.text:0000000000406d7b\n.text:0000000000406d7d\n.text:0000000000406d81\n.text:0000000000406d87\n.text:0000000000406d8c\n.text:0000000000406d8e\n.text:0000000000406d92\n.text:0000000000406d95\n.text:0000000000406d97\n.text:0000000000406d9b\n.text:0000000000406d9d\n.text:0000000000406da2\n.text:0000000000406da5\n.text:0000000000406daa\n.text:0000000000406dad\n.text:0000000000406db0\n.text:0000000000406db2\n.text:0000000000406db5\n.text:0000000000406db8\n.text:0000000000406dbd\n.text:0000000000406dc1\n.text:0000000000406dc5\n.text:0000000000406dc7\n.text:0000000000406dca\n.text:0000000000406dcf\n.text:0000000000406dd1\n.text:0000000000406dd3\n.text:0000000000406dd6\n.text:0000000000406dd9\n.text:0000000000406dde\n.text:0000000000406de1\n.text:0000000000406de3\n.text:0000000000406de8\n.text:0000000000406deb\n.text:0000000000406dee\n.text:0000000000406df3\n.text:0000000000406df7\n.text:0000000000406dfc\n.text:0000000000406e04\n.text:0000000000406e06\n.text:0000000000406e0b\n.text:0000000000406e10\n.text:0000000000406e13\n.text:0000000000406e16\n.text:0000000000406e1b\n.text:0000000000406e1d\n.text:0000000000406e20\n.text:0000000000406e25\n.text:0000000000406e29\n'
p174
tp175
sS'quote_mem'
p176
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p177
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004042a0\n'
p179
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p180
S'.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b8\n.text:00000000004042bb\n.text:00000000004042be\n'
p181
tp182
sS'fileno'
p183
(S'\n__stdcall fileno(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060f158)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060f158]\n'
p186
S'ff 25 02 d8 20 00\n'
p187
S'.plt:0000000000401950\n'
p188
tp189
sS'fts_load'
p190
(S'\n__stdcall fts_load(FTS * sp, FTSENT * p)\n'
p191
V\u000avoid fts_load(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  FTSENT *__src;\u000a  FTSENT *pFVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  \u000a  p->fts_pathlen = p->fts_namelen;\u000a  __src = p + 1;\u000a  memmove(sp->fts_path,__src,p->fts_namelen + 1);\u000a  pFVar1 = (FTSENT *)strrchr((char *)__src,0x2f);\u000a  if ((pFVar1 != (FTSENT *)0x0) &&\u000a     ((pFVar1 != __src || (*(char *)((long)&pFVar1->fts_cycle + 1) != 0)))) {\u000a    __s = (char *)((long)&pFVar1->fts_cycle + 1);\u000a    sVar2 = strlen(__s);\u000a    memmove(__src,__s,sVar2 + 1);\u000a    p->fts_namelen = sVar2;\u000a  }\u000a  __s = sp->fts_path;\u000a  p->fts_path = __s;\u000a  p->fts_accpath = __s;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,qword ptr [R12 + 0x60]\nMOV qword ptr [R12 + 0x48],RDX\nMOV RDI,qword ptr [R14 + 0x20]\nLEA R15,[0x108 + R12]\nINC RDX\nMOV RSI,R15\nCALL 0x00401a30\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x00401840\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406ae2\nCMP RBX,R15\nJNZ 0x00406ac0\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00406ae2\nINC RBX\nMOV RDI,RBX\nCALL 0x004017d0\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00401a30\nMOV qword ptr [R12 + 0x60],R13\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [R12 + 0x38],RAX\nMOV qword ptr [R12 + 0x30],RAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 54 24 60\n49 89 54 24 48\n49 8b 7e 20\n4d 8d bc 24 08 01 00 00\n48 ff c2\n4c 89 fe\ne8 90 af ff ff\nbe 2f 00 00 00\n4c 89 ff\ne8 93 ad ff ff\n48 89 c3\n48 85 db\n74 2d\n4c 39 fb\n75 06\n80 7b 01 00\n74 22\n48 ff c3\n48 89 df\ne8 05 ad ff ff\n49 89 c5\n49 8d 55 01\n4c 89 ff\n48 89 de\ne8 53 af ff ff\n4d 89 6c 24 60\n49 8b 46 20\n49 89 44 24 38\n49 89 44 24 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p194
S'.text:0000000000406a70\n.text:0000000000406a72\n.text:0000000000406a74\n.text:0000000000406a76\n.text:0000000000406a78\n.text:0000000000406a79\n.text:0000000000406a7c\n.text:0000000000406a7f\n.text:0000000000406a84\n.text:0000000000406a89\n.text:0000000000406a8d\n.text:0000000000406a95\n.text:0000000000406a98\n.text:0000000000406a9b\n.text:0000000000406aa0\n.text:0000000000406aa5\n.text:0000000000406aa8\n.text:0000000000406aad\n.text:0000000000406ab0\n.text:0000000000406ab3\n.text:0000000000406ab5\n.text:0000000000406ab8\n.text:0000000000406aba\n.text:0000000000406abe\n.text:0000000000406ac0\n.text:0000000000406ac3\n.text:0000000000406ac6\n.text:0000000000406acb\n.text:0000000000406ace\n.text:0000000000406ad2\n.text:0000000000406ad5\n.text:0000000000406ad8\n.text:0000000000406add\n.text:0000000000406ae2\n.text:0000000000406ae6\n.text:0000000000406aeb\n.text:0000000000406af0\n.text:0000000000406af1\n.text:0000000000406af3\n.text:0000000000406af5\n.text:0000000000406af7\n.text:0000000000406af9\n'
p195
tp196
sS'mbrtowc'
p197
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060f0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060f0c0]\n'
p200
S'ff 25 9a d8 20 00\n'
p201
S'.plt:0000000000401820\n'
p202
tp203
sS'rotr16'
p204
(S'\n__stdcall rotr16()\n'
p205
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p206
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p207
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p208
S'.text:0000000000409780\n.text:0000000000409782\n.text:0000000000409784\n.text:0000000000409786\n.text:000000000040978b\n.text:000000000040978d\n.text:000000000040978f\n.text:0000000000409791\n.text:0000000000409793\n'
p209
tp210
sS'openat'
p211
(S'\n__stdcall openat(int __fd, char * __file, int __oflag)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint openat(int __fd,char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_openat_0060f0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060f0a8]\n'
p214
S'ff 25 b2 d8 20 00\n'
p215
S'.plt:00000000004017f0\n'
p216
tp217
sS'AD_hash'
p218
(S'\n__stdcall AD_hash(void * x, size_t table_size)\n'
p219
V\u000asize_t AD_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p220
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p221
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p222
S'.text:0000000000406e30\n.text:0000000000406e34\n.text:0000000000406e36\n.text:0000000000406e39\n.text:0000000000406e3c\n'
p223
tp224
sS'setlocale'
p225
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060f1b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060f1b8]\n'
p228
S'ff 25 a2 d7 20 00\n'
p229
S'.plt:0000000000401a10\n'
p230
tp231
sS'context_str'
p232
(S'\n__stdcall context_str()\n'
p233
V\u000achar * context_str(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p234
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p235
S'50\ne8 ca cf ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p236
S'.text:0000000000404730\n.text:0000000000404731\n.text:0000000000404736\n.text:000000000040473c\n.text:000000000040473e\n.text:000000000040473f\n'
p237
tp238
sS'access'
p239
(S'\n__stdcall access(char * __name, int __type)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint access(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_access_0060f1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060f1e8]\n'
p242
S'ff 25 72 d7 20 00\n'
p243
S'.plt:0000000000401a70\n'
p244
tp245
sS'c_toupper'
p246
(S'\n__stdcall c_toupper()\n'
p247
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p249
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p250
S'.text:00000000004077c0\n.text:00000000004077c3\n.text:00000000004077c6\n.text:00000000004077c9\n.text:00000000004077cc\n'
p251
tp252
sS'fcntl'
p253
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060f068)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060f068]\n'
p256
S'ff 25 f2 d8 20 00\n'
p257
S'.plt:0000000000401770\n'
p258
tp259
sS'mbsinit'
p260
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060f228)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060f228]\n'
p263
S'ff 25 32 d7 20 00\n'
p264
S'.plt:0000000000401af0\n'
p265
tp266
sS'enter_dir'
p267
(S'\n__stdcall enter_dir(FTS * fts, FTSENT * ent)\n'
p268
V\u000a_Bool enter_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var2;\u000a  undefined uVar3;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    _Var1 = cycle_check((cycle_check_state *)fts->fts_cycle,ent->fts_statp);\u000a    if (_Var1 == false) {\u000a      return true;\u000a    }\u000a    *(FTSENT **)&ent->fts_cycle = ent;\u000aLAB_00406c63:\u000a    uVar3 = 1;\u000a    ent->fts_info = 2;\u000a  }\u000a  else {\u000a    entry = (__dev_t *)malloc(0x18);\u000a    if (entry != (__dev_t *)0x0) {\u000a      *entry = ent->fts_statp[0].st_dev;\u000a      entry[1] = ent->fts_statp[0].st_ino;\u000a      *(FTSENT **)(entry + 2) = ent;\u000a      p_Var2 = (__dev_t *)hash_insert((Hash_table *)fts->fts_cycle,entry);\u000a      if (p_Var2 == entry) {\u000a        return true;\u000a      }\u000a      free(entry);\u000a      if (p_Var2 != (__dev_t *)0x0) {\u000a        ent->fts_cycle = (_ftsent *)p_Var2[2];\u000a        goto LAB_00406c63;\u000a      }\u000a    }\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p269
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EAX,word ptr [RBP + 0x48]\nTEST AX,0x102\nJZ 0x00406c4c\nMOV EDI,0x18\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406c6c\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x80 + R14]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nMOV RDI,qword ptr [RBP + 0x58]\nMOV RSI,RBX\nCALL 0x00408720\nMOV R15,RAX\nMOV BPL,0x1\nCMP R15,RBX\nJZ 0x00406c6e\nMOV RDI,RBX\nCALL 0x004016e0\nTEST R15,R15\nJZ 0x00406c6c\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [R14],RAX\nJMP 0x00406c63\nMOV RDI,qword ptr [RBP + 0x58]\nLEA RSI,[R14 + 0x78]\nCALL 0x004078c0\nMOV BPL,0x1\nTEST AL,AL\nJZ 0x00406c6e\nMOV qword ptr [R14],R14\nMOV word ptr [R14 + 0x70],0x2\nJMP 0x00406c6e\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p270
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fd\n0f b7 45 48\n66 a9 02 01\n74 55\nbf 18 00 00 00\ne8 7f ad ff ff\n48 89 c3\n48 85 db\n74 63\n49 8b 46 78\n48 89 03\n49 8b 86 80 00 00 00\n48 89 43 08\n4c 89 73 10\n48 8b 7d 58\n48 89 de\ne8 f5 1a 00 00\n49 89 c7\n40 b5 01\n49 39 df\n74 38\n48 89 df\ne8 a2 aa ff ff\n4d 85 ff\n74 29\n49 8b 47 10\n49 89 06\neb 17\n48 8b 7d 58\n49 8d 76 78\ne8 67 0c 00 00\n40 b5 01\n84 c0\n74 0e\n4d 89 36\n66 41 c7 46 70 02 00\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p271
S'.text:0000000000406be0\n.text:0000000000406be1\n.text:0000000000406be3\n.text:0000000000406be5\n.text:0000000000406be6\n.text:0000000000406be7\n.text:0000000000406bea\n.text:0000000000406bed\n.text:0000000000406bf1\n.text:0000000000406bf5\n.text:0000000000406bf7\n.text:0000000000406bfc\n.text:0000000000406c01\n.text:0000000000406c04\n.text:0000000000406c07\n.text:0000000000406c09\n.text:0000000000406c0d\n.text:0000000000406c10\n.text:0000000000406c17\n.text:0000000000406c1b\n.text:0000000000406c1f\n.text:0000000000406c23\n.text:0000000000406c26\n.text:0000000000406c2b\n.text:0000000000406c2e\n.text:0000000000406c31\n.text:0000000000406c34\n.text:0000000000406c36\n.text:0000000000406c39\n.text:0000000000406c3e\n.text:0000000000406c41\n.text:0000000000406c43\n.text:0000000000406c47\n.text:0000000000406c4a\n.text:0000000000406c4c\n.text:0000000000406c50\n.text:0000000000406c54\n.text:0000000000406c59\n.text:0000000000406c5c\n.text:0000000000406c5e\n.text:0000000000406c60\n.text:0000000000406c63\n.text:0000000000406c6a\n.text:0000000000406c6c\n.text:0000000000406c6e\n.text:0000000000406c70\n.text:0000000000406c74\n.text:0000000000406c75\n.text:0000000000406c77\n.text:0000000000406c79\n.text:0000000000406c7a\n'
p272
tp273
sS'dcgettext'
p274
(S'\n__stdcall dcgettext()\n'
p275
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060f088)();\u000a  return;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x0060f088]\n'
p277
S'ff 25 d2 d8 20 00\n'
p278
S'.plt:00000000004017b0\n'
p279
tp280
sS'set_cloexec_flag'
p281
(S'\n__stdcall set_cloexec_flag()\n'
p282
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x00409370\nTEST EAX,EAX\nJS 0x00407819\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x0040781e\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00409370\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x00407820\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p284
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 87 1b 00 00\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 5f 1b 00 00\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p285
S'.text:00000000004077d0\n.text:00000000004077d1\n.text:00000000004077d3\n.text:00000000004077d4\n.text:00000000004077d7\n.text:00000000004077d9\n.text:00000000004077db\n.text:00000000004077e0\n.text:00000000004077e2\n.text:00000000004077e4\n.text:00000000004077e9\n.text:00000000004077eb\n.text:00000000004077ed\n.text:00000000004077ef\n.text:00000000004077f2\n.text:00000000004077f4\n.text:00000000004077f7\n.text:00000000004077fa\n.text:00000000004077fd\n.text:00000000004077ff\n.text:0000000000407801\n.text:0000000000407803\n.text:0000000000407808\n.text:000000000040780a\n.text:000000000040780c\n.text:0000000000407811\n.text:0000000000407814\n.text:0000000000407817\n.text:0000000000407819\n.text:000000000040781e\n.text:0000000000407820\n.text:0000000000407821\n.text:0000000000407823\n.text:0000000000407824\n'
p286
tp287
sS'quotearg_free'
p288
(S'\n__stdcall quotearg_free()\n'
p289
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p290
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060f268]\nCMP dword ptr [0x0060f270],0x2\nJC 0x00403d7a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004016e0\nINC RBX\nMOV EAX,dword ptr [0x0060f270]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403d60\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60f3c0\nCMP RDI,RAX\nJZ 0x00403da3\nCALL 0x004016e0\nMOV qword ptr [0x0060f278],0x100\nMOV qword ptr [0x0060f280],0x60f3c0\nMOV EAX,0x60f278\nCMP R14,RAX\nJZ 0x00403dc0\nMOV RDI,R14\nCALL 0x004016e0\nMOV qword ptr [0x0060f268],0x60f278\nMOV dword ptr [0x0060f270],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p291
S'41 57\n41 56\n53\n4c 8b 35 1c b5 20 00\n83 3d 1d b5 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 78 d9 ff ff\n48 ff c3\n8b 05 ff b4 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 c0 f3 60 00\n48 39 c7\n74 1b\ne8 53 d9 ff ff\n48 c7 05 e0 b4 20 00 00 01 00 00\n48 c7 05 dd b4 20 00 c0 f3 60 00\nb8 78 f2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 2b d9 ff ff\n48 c7 05 a8 b4 20 00 78 f2 60 00\nc7 05 a6 b4 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p292
S'.text:0000000000403d40\n.text:0000000000403d42\n.text:0000000000403d44\n.text:0000000000403d45\n.text:0000000000403d4c\n.text:0000000000403d53\n.text:0000000000403d55\n.text:0000000000403d59\n.text:0000000000403d5e\n.text:0000000000403d60\n.text:0000000000403d63\n.text:0000000000403d68\n.text:0000000000403d6b\n.text:0000000000403d71\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7a\n.text:0000000000403d7e\n.text:0000000000403d83\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8d\n.text:0000000000403d98\n.text:0000000000403da3\n.text:0000000000403da8\n.text:0000000000403dab\n.text:0000000000403dad\n.text:0000000000403db0\n.text:0000000000403db5\n.text:0000000000403dc0\n.text:0000000000403dca\n.text:0000000000403dcb\n.text:0000000000403dcd\n.text:0000000000403dcf\n'
p293
tp294
sS'dirent_inode_sort_may_be_useful'
p295
(S'\n__stdcall dirent_inode_sort_may_be_useful()\n'
p296
V\u000a_Bool dirent_inode_sort_may_be_useful(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  uVar1 = 1;\u000a  if (iVar2 == 0) {\u000a    uVar1 = 0;\u000a    if ((local_78.f_type != 0x6969) && (local_78.f_type != 0x1021994)) {\u000a      uVar1 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p297
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401aa0\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x00406fd9\nADD RSP,0x78\nRET\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x6969\nJZ 0x00406fd4\nCMP RCX,0x1021994\nJZ 0x00406fd4\nMOV AL,0x1\nJMP 0x00406fd4\n'
p298
S'48 83 ec 78\n48 89 e6\ne8 d4 aa ff ff\n89 c1\nb0 01\n85 c9\n74 05\n48 83 c4 78\nc3\n31 c0\n48 8b 0c 24\n48 81 f9 69 69 00 00\n74 ec\n48 81 f9 94 19 02 01\n74 e3\nb0 01\neb df\n'
p299
S'.text:0000000000406fc0\n.text:0000000000406fc4\n.text:0000000000406fc7\n.text:0000000000406fcc\n.text:0000000000406fce\n.text:0000000000406fd0\n.text:0000000000406fd2\n.text:0000000000406fd4\n.text:0000000000406fd8\n.text:0000000000406fd9\n.text:0000000000406fdb\n.text:0000000000406fdf\n.text:0000000000406fe6\n.text:0000000000406fe8\n.text:0000000000406fef\n.text:0000000000406ff1\n.text:0000000000406ff3\n'
p300
tp301
sS'quotearg_mem'
p302
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p303
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403fa0\n'
p305
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p306
S'.text:0000000000403fc0\n.text:0000000000403fc3\n.text:0000000000403fc6\n.text:0000000000403fc8\n.text:0000000000403fcb\n.text:0000000000403fce\n'
p307
tp308
sS'security_check_context'
p309
(S'\n__stdcall security_check_context(security_context_t con)\n'
p310
V\u000aint security_check_context(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p311
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p312
S'50\ne8 9a cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p313
S'.text:0000000000404960\n.text:0000000000404961\n.text:0000000000404966\n.text:000000000040496c\n.text:0000000000404971\n.text:0000000000404972\n'
p314
tp315
sS'free_cwd'
p316
(S'\n__stdcall free_cwd(saved_cwd * cwd)\n'
p317
V\u000avoid free_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  if (-1 < cwd->desc) {\u000a    close(cwd->desc);\u000a  }\u000a  free(cwd->name);\u000a  return;\u000a}\u000a\u000a
p318
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJS 0x00408f6f\nCALL 0x004018a0\nMOV RDI,qword ptr [RBX + 0x8]\nPOP RBX\nJMP 0x004016e0\n'
p319
S'53\n48 89 fb\n8b 3b\n85 ff\n78 05\ne8 31 89 ff ff\n48 8b 7b 08\n5b\ne9 67 87 ff ff\n'
p320
S'.text:0000000000408f60\n.text:0000000000408f61\n.text:0000000000408f64\n.text:0000000000408f66\n.text:0000000000408f68\n.text:0000000000408f6a\n.text:0000000000408f6f\n.text:0000000000408f73\n.text:0000000000408f74\n'
p321
tp322
sS'rotl32'
p323
(S'\n__stdcall rotl32()\n'
p324
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p325
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p326
S'89 f1\nd3 c7\n89 f8\nc3\n'
p327
S'.text:0000000000409720\n.text:0000000000409722\n.text:0000000000409724\n.text:0000000000409726\n'
p328
tp329
sS'deregister_tm_clones'
p330
(S'\n__stdcall deregister_tm_clones()\n'
p331
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b75) */\u000a/* WARNING: Removing unreachable block (ram,0x00401b7f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p332
S'MOV EAX,0x60f2c7\nPUSH RBP\nSUB RAX,0x60f2c0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401b90\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b90\nPOP RBP\nMOV EDI,0x60f2c0\nJMP RAX\nPOP RBP\nRET\n'
p333
S'b8 c7 f2 60 00\n55\n48 2d c0 f2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf c0 f2 60 00\nff e0\n5d\nc3\n'
p334
S'.text:0000000000401b60\n.text:0000000000401b65\n.text:0000000000401b66\n.text:0000000000401b6c\n.text:0000000000401b70\n.text:0000000000401b73\n.text:0000000000401b75\n.text:0000000000401b7a\n.text:0000000000401b7d\n.text:0000000000401b7f\n.text:0000000000401b80\n.text:0000000000401b85\n.text:0000000000401b90\n.text:0000000000401b91\n'
p335
tp336
sS'quotearg_custom'
p337
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p338
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004041e0\n'
p340
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p341
S'.text:0000000000404260\n.text:0000000000404263\n.text:0000000000404266\n.text:0000000000404269\n.text:000000000040426b\n.text:000000000040426e\n.text:0000000000404271\n.text:0000000000404274\n'
p342
tp343
sS'fts_palloc'
p344
(S'\n__stdcall fts_palloc(FTS * sp, size_t more)\n'
p345
V\u000a_Bool fts_palloc(FTS *sp,size_t more)\u000a\u000a{\u000a  int *piVar1;\u000a  char *pcVar2;\u000a  size_t __size;\u000a  \u000a  __size = more + 0x100 + sp->fts_pathlen;\u000a  if (CARRY8(more + 0x100,sp->fts_pathlen)) {\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x24;\u000a  }\u000a  else {\u000a    sp->fts_pathlen = __size;\u000a    pcVar2 = (char *)realloc(sp->fts_path,__size);\u000a    if (pcVar2 != (char *)0x0) {\u000a      sp->fts_path = pcVar2;\u000a      return true;\u000a    }\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p346
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,0x100\nADD RSI,qword ptr [RBX + 0x30]\nMOV RDI,qword ptr [RBX + 0x20]\nJNC 0x0040558f\nCALL 0x004016e0\nMOV qword ptr [RBX + 0x20],0x0\nCALL 0x00401700\nMOV dword ptr [RAX],0x24\nJMP 0x004055b6\nMOV qword ptr [RBX + 0x30],RSI\nCALL 0x004019f0\nTEST RAX,RAX\nJZ 0x004055a5\nMOV qword ptr [RBX + 0x20],RAX\nMOV AL,0x1\nJMP 0x004055b8\nMOV RDI,qword ptr [RBX + 0x20]\nCALL 0x004016e0\nMOV qword ptr [RBX + 0x20],0x0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p347
S'53\n48 89 fb\n48 81 c6 00 01 00 00\n48 03 73 30\n48 8b 7b 20\n73 1a\ne8 66 c1 ff ff\n48 c7 43 20 00 00 00 00\ne8 79 c1 ff ff\nc7 00 24 00 00 00\neb 27\n48 89 73 30\ne8 58 c4 ff ff\n48 85 c0\n74 08\n48 89 43 20\nb0 01\neb 13\n48 8b 7b 20\ne8 32 c1 ff ff\n48 c7 43 20 00 00 00 00\n31 c0\n5b\nc3\n'
p348
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405564\n.text:000000000040556b\n.text:000000000040556f\n.text:0000000000405573\n.text:0000000000405575\n.text:000000000040557a\n.text:0000000000405582\n.text:0000000000405587\n.text:000000000040558d\n.text:000000000040558f\n.text:0000000000405593\n.text:0000000000405598\n.text:000000000040559b\n.text:000000000040559d\n.text:00000000004055a1\n.text:00000000004055a3\n.text:00000000004055a5\n.text:00000000004055a9\n.text:00000000004055ae\n.text:00000000004055b6\n.text:00000000004055b8\n.text:00000000004055b9\n'
p349
tp350
sS'free'
p351
(S'\n__stdcall free(void * __ptr)\n'
p352
V\u000a/* WARNING: Switch with 1 destination removed at 0x004016e0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060f020]\n'
p354
S'ff 25 3a d9 20 00\n'
p355
S'.plt:00000000004016e0\n'
p356
tp357
sS'close'
p358
(S'\n__stdcall close(int __fd)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060f100)();\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0060f100]\n'
p361
S'ff 25 5a d8 20 00\n'
p362
S'.plt:00000000004018a0\n'
p363
tp364
sS'getenv'
p365
(S'\n__stdcall getenv(char * __name)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060f018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060f018]\n'
p368
S'ff 25 42 d9 20 00\n'
p369
S'.plt:00000000004016d0\n'
p370
tp371
sS'LCO_hash'
p372
(S'\n__stdcall LCO_hash(void * x, size_t table_size)\n'
p373
V\u000asize_t LCO_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p374
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p375
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p376
S'.text:0000000000406e60\n.text:0000000000406e63\n.text:0000000000406e65\n.text:0000000000406e68\n.text:0000000000406e6b\n'
p377
tp378
sS'stat'
p379
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p380
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060f160)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401960\n'
p382
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 c0 80 ff ff\n'
p383
S'.text:0000000000409890\n.text:0000000000409893\n.text:0000000000409896\n.text:000000000040989b\n'
p384
tp385
sS'rpl_fseeko'
p386
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p387
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060f1f0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004095a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004095a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004095ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401a80\nMOV RDI,RBX\nCALL 0x00401950\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401850\nCMP RAX,-0x1\nJZ 0x004095e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004095e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p389
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 c6 84 ff ff\n48 89 df\ne8 8e 83 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 81 82 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p390
S'.text:0000000000409580\n.text:0000000000409581\n.text:0000000000409583\n.text:0000000000409584\n.text:0000000000409587\n.text:000000000040958a\n.text:000000000040958d\n.text:0000000000409591\n.text:0000000000409595\n.text:0000000000409597\n.text:000000000040959b\n.text:000000000040959f\n.text:00000000004095a1\n.text:00000000004095a6\n.text:00000000004095a8\n.text:00000000004095ab\n.text:00000000004095ae\n.text:00000000004095b1\n.text:00000000004095b2\n.text:00000000004095b4\n.text:00000000004095b5\n.text:00000000004095ba\n.text:00000000004095bd\n.text:00000000004095c2\n.text:00000000004095c4\n.text:00000000004095c7\n.text:00000000004095ca\n.text:00000000004095cf\n.text:00000000004095d3\n.text:00000000004095d5\n.text:00000000004095d8\n.text:00000000004095df\n.text:00000000004095e1\n.text:00000000004095e3\n.text:00000000004095e8\n.text:00000000004095e9\n.text:00000000004095eb\n.text:00000000004095ec\n'
p391
tp392
sS'quote_n_mem'
p393
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV ECX,0x60f288\nJMP 0x00403de0\n'
p396
S'b9 88 f2 60 00\ne9 36 fb ff ff\n'
p397
S'.text:00000000004042a0\n.text:00000000004042a5\n'
p398
tp399
sS'xstrdup'
p400
(S'\n__stdcall xstrdup(char * string)\n'
p401
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p402
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004017d0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405070\n'
p403
S'53\n48 89 fb\ne8 27 c7 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p404
S'.text:00000000004050a0\n.text:00000000004050a1\n.text:00000000004050a4\n.text:00000000004050a9\n.text:00000000004050ad\n.text:00000000004050b0\n.text:00000000004050b1\n'
p405
tp406
sS'c_ispunct'
p407
(S'\n__stdcall c_ispunct()\n'
p408
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p409
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407752\nMOV AL,0x1\nJMP qword ptr [0x40b600 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p410
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 00 b6 40 00\nc3\n31 c0\nc3\n'
p411
S'.text:0000000000407740\n.text:0000000000407743\n.text:0000000000407746\n.text:0000000000407748\n.text:000000000040774a\n.text:0000000000407751\n.text:0000000000407752\n.text:0000000000407754\n'
p412
tp413
sS'rotr8'
p414
(S'\n__stdcall rotr8()\n'
p415
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p416
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p417
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p418
S'.text:00000000004097c0\n.text:00000000004097c2\n.text:00000000004097c4\n.text:00000000004097c6\n.text:00000000004097cb\n.text:00000000004097cd\n.text:00000000004097cf\n.text:00000000004097d1\n.text:00000000004097d3\n'
p419
tp420
sS'free_dir'
p421
(S'\n__stdcall free_dir(FTS * sp)\n'
p422
V\u000avoid free_dir(FTS *sp)\u000a\u000a{\u000a  if ((*(ushort *)&sp->fts_options & 0x102) == 0) {\u000a    free((void *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  if ((Hash_table *)sp->fts_cycle != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p423
S'MOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00405b48\nMOV RDI,qword ptr [RDI + 0x58]\nTEST RDI,RDI\nJZ 0x00405b51\nJMP 0x00408120\nMOV RDI,qword ptr [RDI + 0x58]\nJMP 0x004016e0\nRET\n'
p424
S'0f b7 47 48\n66 a9 02 01\n74 0e\n48 8b 7f 58\n48 85 ff\n74 0e\ne9 d8 25 00 00\n48 8b 7f 58\ne9 8f bb ff ff\nc3\n'
p425
S'.text:0000000000405b30\n.text:0000000000405b34\n.text:0000000000405b38\n.text:0000000000405b3a\n.text:0000000000405b3e\n.text:0000000000405b41\n.text:0000000000405b43\n.text:0000000000405b48\n.text:0000000000405b4c\n.text:0000000000405b51\n'
p426
tp427
sS'fstat'
p428
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p429
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060f190)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x004019c0\n'
p431
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 11 81 ff ff\n'
p432
S'.text:00000000004098a0\n.text:00000000004098a3\n.text:00000000004098a5\n.text:00000000004098aa\n'
p433
tp434
sS'fdopendir'
p435
(S'\n__stdcall fdopendir(int __fd)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0060f1f8)();\u000a  return pDVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060f1f8]\n'
p438
S'ff 25 62 d7 20 00\n'
p439
S'.plt:0000000000401a90\n'
p440
tp441
sS'leaf_optimization_applies'
p442
(S'\n__stdcall leaf_optimization_applies()\n'
p443
V\u000a_Bool leaf_optimization_applies(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  if ((iVar2 != 0) ||\u000a     ((uVar1 = 1, local_78.f_type != 0x52654973 && (local_78.f_type != 0x58465342)))) {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p444
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401aa0\nTEST EAX,EAX\nJZ 0x00406e97\nXOR EAX,EAX\nADD RSP,0x78\nRET\nMOV AL,0x1\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x52654973\nJZ 0x00406e92\nCMP RCX,0x58465342\nJZ 0x00406e92\nJMP 0x00406e90\n'
p445
S'48 83 ec 78\n48 89 e6\ne8 14 ac ff ff\n85 c0\n74 07\n31 c0\n48 83 c4 78\nc3\nb0 01\n48 8b 0c 24\n48 81 f9 73 49 65 52\n74 ec\n48 81 f9 42 53 46 58\n74 e3\neb df\n'
p446
S'.text:0000000000406e80\n.text:0000000000406e84\n.text:0000000000406e87\n.text:0000000000406e8c\n.text:0000000000406e8e\n.text:0000000000406e90\n.text:0000000000406e92\n.text:0000000000406e96\n.text:0000000000406e97\n.text:0000000000406e99\n.text:0000000000406e9d\n.text:0000000000406ea4\n.text:0000000000406ea6\n.text:0000000000406ead\n.text:0000000000406eaf\n'
p447
tp448
sS'is_prime'
p449
(S'\n__stdcall is_prime(size_t candidate)\n'
p450
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p451
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x004089a5\nTEST CL,CL\nJNZ 0x004089a5\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x004089a5\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00408980\nRET\n'
p452
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p453
S'.text:0000000000408940\n.text:0000000000408943\n.text:000000000040894d\n.text:0000000000408950\n.text:0000000000408953\n.text:0000000000408956\n.text:000000000040895a\n.text:000000000040895d\n.text:0000000000408960\n.text:0000000000408963\n.text:0000000000408967\n.text:0000000000408969\n.text:000000000040896b\n.text:000000000040896d\n.text:0000000000408972\n.text:0000000000408977\n.text:000000000040897c\n.text:0000000000408980\n.text:0000000000408983\n.text:0000000000408985\n.text:0000000000408988\n.text:000000000040898b\n.text:000000000040898e\n.text:0000000000408991\n.text:0000000000408994\n.text:0000000000408997\n.text:0000000000408999\n.text:000000000040899d\n.text:00000000004089a1\n.text:00000000004089a3\n.text:00000000004089a5\n'
p454
tp455
sS'context_free'
p456
(S'\n__stdcall context_free()\n'
p457
V\u000avoid context_free(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p458
S'RET\n'
p459
S'c3\n'
p460
S'.text:0000000000404740\n'
p461
tp462
sS'i_ring_push'
p463
(S'\n__stdcall i_ring_push(I_ring * ir)\n'
p464
V\u000aint i_ring_push(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int in_ESI;\u000a  \u000a  uVar2 = (uint)(ir->ir_empty ^ 1) + ir->ir_front & 3;\u000a  iVar1 = ir->ir_data[(ulong)uVar2];\u000a  ir->ir_data[(ulong)uVar2] = in_ESI;\u000a  ir->ir_front = uVar2;\u000a  if (uVar2 == ir->ir_back) {\u000a    ir->ir_back = (uint)(ir->ir_empty ^ 1) + ir->ir_back & 3;\u000a  }\u000a  ir->ir_empty = false;\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'MOV AL,byte ptr [RDI + 0x1c]\nXOR AL,0x1\nMOVZX EDX,AL\nADD EDX,dword ptr [RDI + 0x14]\nAND EDX,0x3\nMOV EAX,dword ptr [RDI + RDX*0x4]\nMOV dword ptr [RDI + RDX*0x4],ESI\nMOV dword ptr [RDI + 0x14],EDX\nMOV ECX,dword ptr [RDI + 0x18]\nCMP EDX,ECX\nJNZ 0x00408a2f\nMOV DL,byte ptr [RDI + 0x1c]\nXOR DL,0x1\nMOVZX EDX,DL\nADD EDX,ECX\nAND EDX,0x3\nMOV dword ptr [RDI + 0x18],EDX\nMOV byte ptr [RDI + 0x1c],0x0\nRET\n'
p466
S'8a 47 1c\n34 01\n0f b6 d0\n03 57 14\n83 e2 03\n8b 04 97\n89 34 97\n89 57 14\n8b 4f 18\n39 ca\n75 11\n8a 57 1c\n80 f2 01\n0f b6 d2\n01 ca\n83 e2 03\n89 57 18\nc6 47 1c 00\nc3\n'
p467
S'.text:0000000000408a00\n.text:0000000000408a03\n.text:0000000000408a05\n.text:0000000000408a08\n.text:0000000000408a0b\n.text:0000000000408a0e\n.text:0000000000408a11\n.text:0000000000408a14\n.text:0000000000408a17\n.text:0000000000408a1a\n.text:0000000000408a1c\n.text:0000000000408a1e\n.text:0000000000408a21\n.text:0000000000408a24\n.text:0000000000408a27\n.text:0000000000408a29\n.text:0000000000408a2c\n.text:0000000000408a2f\n.text:0000000000408a33\n'
p468
tp469
sS'fscanf'
p470
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060f0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060f0f0]\n'
p473
S'ff 25 6a d8 20 00\n'
p474
S'.plt:0000000000401880\n'
p475
tp476
sS'memcpy'
p477
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060f150)();\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0060f150]\n'
p480
S'ff 25 0a d8 20 00\n'
p481
S'.plt:0000000000401940\n'
p482
tp483
sS'close_stdout_set_ignore_EPIPE'
p484
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p485
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p486
S'MOV byte ptr [0x0060f368],DIL\nRET\n'
p487
S'40 88 3d 51 c6 20 00\nc3\n'
p488
S'.text:0000000000402d10\n.text:0000000000402d17\n'
p489
tp490
sS'hash_get_n_buckets_used'
p491
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p492
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p493
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p494
S'48 8b 47 18\nc3\n'
p495
S'.text:0000000000407a30\n.text:0000000000407a34\n'
p496
tp497
sS'iswprint'
p498
(S'\n__stdcall iswprint(wint_t __wc)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060f230)();\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x0060f230]\n'
p501
S'ff 25 2a d7 20 00\n'
p502
S'.plt:0000000000401b00\n'
p503
tp504
sS'openat_safer'
p505
(S'\n__stdcall openat_safer(char * file)\n'
p506
V\u000a/* WARNING: Removing unreachable block (ram,0x00408ec8) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff60 : 0x00408ed6 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint openat_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  char *__file;\u000a  va_list ap;\u000a  uint local_a0;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a0;\u000a  }\u000a  openat((int)file,__file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00408e72\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nXOR ECX,ECX\nTEST DL,0x40\nJZ 0x00408ed8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00408ec8\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00408ed6\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV ECX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x004017f0\nMOV EDI,EAX\nCALL 0x00408f90\nADD RSP,0xd8\nRET\n'
p508
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n31 c9\nf6 c2 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 08\n31 c0\ne8 11 89 ff ff\n89 c7\ne8 aa 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p509
S'.text:0000000000408e30\n.text:0000000000408e37\n.text:0000000000408e39\n.text:0000000000408e3b\n.text:0000000000408e40\n.text:0000000000408e45\n.text:0000000000408e4a\n.text:0000000000408e52\n.text:0000000000408e5a\n.text:0000000000408e62\n.text:0000000000408e6a\n.text:0000000000408e72\n.text:0000000000408e77\n.text:0000000000408e7c\n.text:0000000000408e81\n.text:0000000000408e83\n.text:0000000000408e86\n.text:0000000000408e88\n.text:0000000000408e8d\n.text:0000000000408e92\n.text:0000000000408e9a\n.text:0000000000408e9f\n.text:0000000000408ea7\n.text:0000000000408eae\n.text:0000000000408eb2\n.text:0000000000408eb6\n.text:0000000000408eb8\n.text:0000000000408ebb\n.text:0000000000408ec0\n.text:0000000000408ec3\n.text:0000000000408ec6\n.text:0000000000408ec8\n.text:0000000000408ecd\n.text:0000000000408ed1\n.text:0000000000408ed6\n.text:0000000000408ed8\n.text:0000000000408eda\n.text:0000000000408edf\n.text:0000000000408ee1\n.text:0000000000408ee6\n.text:0000000000408eed\n'
p510
tp511
sS'c_isspace'
p512
(S'\n__stdcall c_isspace()\n'
p513
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p514
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00407775\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p515
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p516
S'.text:0000000000407760\n.text:0000000000407763\n.text:0000000000407766\n.text:0000000000407768\n.text:000000000040776d\n.text:000000000040776f\n.text:0000000000407771\n.text:0000000000407774\n.text:0000000000407775\n.text:0000000000407777\n'
p517
tp518
sS'open'
p519
(S'\n__stdcall open(char * __file, int __oflag)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060f1e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060f1e0]\n'
p522
S'ff 25 7a d7 20 00\n'
p523
S'.plt:0000000000401a60\n'
p524
tp525
sS'quotearg_n_custom_mem'
p526
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p527
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060f3b0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060f3a0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f390]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f380]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402f50\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403de0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p529
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 a7 b1 20 00\n48 89 44 24 30\n0f 10 05 8b b1 20 00\n0f 29 44 24 20\n0f 10 05 6f b1 20 00\n0f 29 44 24 10\n0f 10 05 53 b1 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p530
S'.text:00000000004041f0\n.text:00000000004041f1\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041f6\n.text:00000000004041fa\n.text:00000000004041fd\n.text:0000000000404200\n.text:0000000000404202\n.text:0000000000404209\n.text:000000000040420e\n.text:0000000000404215\n.text:000000000040421a\n.text:0000000000404221\n.text:0000000000404226\n.text:000000000040422d\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404237\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404241\n.text:0000000000404244\n.text:0000000000404247\n.text:000000000040424c\n.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404256\n'
p531
tp532
sS'rotl16'
p533
(S'\n__stdcall rotl16()\n'
p534
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p535
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p536
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p537
S'.text:0000000000409760\n.text:0000000000409762\n.text:0000000000409764\n.text:0000000000409766\n.text:000000000040976b\n.text:000000000040976d\n.text:000000000040976f\n.text:0000000000409771\n.text:0000000000409773\n'
p538
tp539
sS'fts_compar'
p540
(S'\n__stdcall fts_compar(void * a, void * b)\n'
p541
V\u000aint fts_compar(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (**(code **)(*(long *)(*(long *)a + 0x50) + 0x40))();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [RAX + 0x50]\nCALL qword ptr [RAX + 0x40]\nPOP RCX\nRET\n'
p543
S'50\n48 8b 07\n48 8b 40 50\nff 50 40\n59\nc3\n'
p544
S'.text:0000000000407030\n.text:0000000000407031\n.text:0000000000407034\n.text:0000000000407038\n.text:000000000040703b\n.text:000000000040703c\n'
p545
tp546
sS'fts_padjust'
p547
(S'\n__stdcall fts_padjust(FTS * sp, FTSENT * head)\n'
p548
V\u000avoid fts_padjust(FTS *sp,FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  char *pcVar2;\u000a  _ftsent **pp_Var3;\u000a  \u000a  p_Var1 = sp->fts_child;\u000a  pcVar2 = sp->fts_path;\u000a  while (p_Var1 != (_ftsent *)0x0) {\u000a    if ((_ftsent *)p_Var1->fts_accpath != p_Var1 + 1) {\u000a      p_Var1->fts_accpath =\u000a           pcVar2 + (long)&((_ftsent *)\u000a                           ((long)(_ftsent *)p_Var1->fts_accpath - (long)p_Var1->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    p_Var1->fts_path = pcVar2;\u000a    p_Var1 = p_Var1->fts_link;\u000a  }\u000a  while (-1 < head->fts_level) {\u000a    if ((FTSENT *)head->fts_accpath != head + 1) {\u000a      head->fts_accpath =\u000a           pcVar2 + (long)&((FTSENT *)((long)(FTSENT *)head->fts_accpath - (long)head->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    head->fts_path = pcVar2;\u000a    pp_Var3 = &head->fts_link;\u000a    if (head->fts_link == (_ftsent *)0x0) {\u000a      pp_Var3 = &head->fts_parent;\u000a    }\u000a    head = (FTSENT *)*pp_Var3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p549
S'MOV RCX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RDI + 0x20]\nTEST RCX,RCX\nJNZ 0x00406f5d\nJMP 0x00406f98\nMOV qword ptr [RCX + 0x38],RAX\nMOV RCX,qword ptr [RCX + 0x10]\nTEST RCX,RCX\nJZ 0x00406f98\nMOV RDX,qword ptr [RCX + 0x30]\nLEA RDI,[0x108 + RCX]\nCMP RDX,RDI\nJZ 0x00406f50\nSUB RDX,qword ptr [RCX + 0x38]\nADD RDX,RAX\nMOV qword ptr [RCX + 0x30],RDX\nJMP 0x00406f50\nMOV qword ptr [RSI + 0x38],RAX\nCMP qword ptr [RSI + 0x10],0x0\nLEA RCX,[RSI + 0x10]\nLEA RDX,[RSI + 0x8]\nCMOVZ RCX,RDX\nMOV RSI,qword ptr [RCX]\nCMP qword ptr [RSI + 0x58],0x0\nJS 0x00406fbc\nMOV RCX,qword ptr [RSI + 0x30]\nLEA RDX,[0x108 + RSI]\nCMP RCX,RDX\nJZ 0x00406f80\nSUB RCX,qword ptr [RSI + 0x38]\nADD RCX,RAX\nMOV qword ptr [RSI + 0x30],RCX\nJMP 0x00406f80\nRET\n'
p550
S'48 8b 4f 08\n48 8b 47 20\n48 85 c9\n75 10\neb 49\n48 89 41 38\n48 8b 49 10\n48 85 c9\n74 3b\n48 8b 51 30\n48 8d b9 08 01 00 00\n48 39 fa\n74 e3\n48 2b 51 38\n48 01 c2\n48 89 51 30\neb d6\n48 89 46 38\n48 83 7e 10 00\n48 8d 4e 10\n48 8d 56 08\n48 0f 44 ca\n48 8b 31\n48 83 7e 58 00\n78 1d\n48 8b 4e 30\n48 8d 96 08 01 00 00\n48 39 d1\n74 d1\n48 2b 4e 38\n48 01 c1\n48 89 4e 30\neb c4\nc3\n'
p551
S'.text:0000000000406f40\n.text:0000000000406f44\n.text:0000000000406f48\n.text:0000000000406f4b\n.text:0000000000406f4d\n.text:0000000000406f50\n.text:0000000000406f54\n.text:0000000000406f58\n.text:0000000000406f5b\n.text:0000000000406f5d\n.text:0000000000406f61\n.text:0000000000406f68\n.text:0000000000406f6b\n.text:0000000000406f6d\n.text:0000000000406f71\n.text:0000000000406f74\n.text:0000000000406f78\n.text:0000000000406f80\n.text:0000000000406f84\n.text:0000000000406f89\n.text:0000000000406f8d\n.text:0000000000406f91\n.text:0000000000406f95\n.text:0000000000406f98\n.text:0000000000406f9d\n.text:0000000000406f9f\n.text:0000000000406fa3\n.text:0000000000406faa\n.text:0000000000406fad\n.text:0000000000406faf\n.text:0000000000406fb3\n.text:0000000000406fb6\n.text:0000000000406fba\n.text:0000000000406fbc\n'
p552
tp553
sS'_init'
p554
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p555
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060eff8;\u000a  if (PTR___gmon_start___0060eff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060eff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060eff8]\nTEST RAX,RAX\nJZ 0x004016b2\nCALL RAX\nADD RSP,0x8\nRET\n'
p557
S'48 83 ec 08\n48 8b 05 4d d9 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p558
S'.init:00000000004016a0\n.init:00000000004016a4\n.init:00000000004016ab\n.init:00000000004016ae\n.init:00000000004016b0\n.init:00000000004016b2\n.init:00000000004016b6\n'
p559
tp560
sS'set_quoting_flags'
p561
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p562
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'TEST RDI,RDI\nMOV ECX,0x60f380\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p564
S'48 85 ff\nb9 80 f3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p565
S'.text:0000000000402f30\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3c\n.text:0000000000402f3f\n.text:0000000000402f42\n'
p566
tp567
sS'realloc'
p568
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060f1a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060f1a8]\n'
p571
S'ff 25 b2 d7 20 00\n'
p572
S'.plt:00000000004019f0\n'
p573
tp574
sS'__fprintf_chk'
p575
(S'\n__stdcall __fprintf_chk()\n'
p576
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060f220)();\u000a  return;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060f220]\n'
p578
S'ff 25 3a d7 20 00\n'
p579
S'.plt:0000000000401ae0\n'
p580
tp581
sS'get_charset_aliases'
p582
(S'\n__stdcall get_charset_aliases()\n'
p583
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a         + 0x1d0;\u000a    return \u000a           "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a           + 0x1d0;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00408d24_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00408d24_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00408d24_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00408d24_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00408d24_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00408d24_caseD_9;\u000a      case -1:\u000a        goto switchD_00408d24_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00408d7d:\u000a  __s = \u000a        "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a        + 0x1d0;\u000aLAB_00408d83:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00408d24_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408d83;\u000a  }\u000a  goto LAB_00408d7d;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060f4c0]\nTEST R15,R15\nJNZ 0x00408d92\nMOV EDI,0x40bb6c\nCALL 0x004016d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408b48\nCMP byte ptr [RBX],0x0\nJNZ 0x00408b4d\nMOV EBX,0x40bb7c\nMOV RDI,RBX\nCALL 0x004017d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408b67\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408b69\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401980\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00408bbd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401940\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00408bc8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00408be5\nMOV R15D,0x40a630\nJMP 0x00408d8b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401a60\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408d7d\nMOV ESI,0x40a6db\nMOV EDI,EBP\nCALL 0x00401a00\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408d44\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00408d10\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401730\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401730\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00408d10\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004019b0\nMOV ESI,0x40bb8b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401880\nCMP EAX,0x2\nJL 0x00408d64\nMOV RDI,R12\nCALL 0x004017d0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004017d0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408ced\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004019f0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408c34\nJMP 0x00408d4d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401980\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408c34\nJMP 0x00408d4d\nMOV RDI,RBX\nCALL 0x00401750\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408c77\nJMP qword ptr [0x40ba30 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401750\nCMP EAX,-0x1\nJZ 0x00408d64\nCMP EAX,0xa\nJNZ 0x00408d30\nJMP 0x00408d10\nMOV EDI,EBP\nCALL 0x004018a0\nJMP 0x00408d7d\nMOV RDI,R15\nCALL 0x004016e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004092f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408d7d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408d83\nMOV R15D,0x40a630\nMOV RDI,R13\nCALL 0x004016e0\nMOV qword ptr [0x0060f4c0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 98 69 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 6c bb 40 00\ne8 95 8b ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 7c bb 40 00\n48 89 df\ne8 7b 8c ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 09 8e ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 b3 8d ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 30 a6 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 6c 8e ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe db a6 40 00\n89 ef\ne8 f6 8d ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 db 8a ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 cb 8a ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 2f 8d ff ff\nbe 8b bb 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 ea 8b ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 29 8b ff ff\n49 89 c4\n48 89 ef\ne8 1e 8b ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 8d ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 85 8c ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 38 8a ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 30 ba 40 00\n48 89 df\ne8 18 8a ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 55 8b ff ff\neb 30\n4c 89 ff\ne8 8b 89 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 84 05 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 30 a6 40 00\n4c 89 ef\ne8 55 89 ff ff\n4c 89 3d 2e 67 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000408b10\n.text:0000000000408b11\n.text:0000000000408b13\n.text:0000000000408b15\n.text:0000000000408b17\n.text:0000000000408b19\n.text:0000000000408b1a\n.text:0000000000408b21\n.text:0000000000408b28\n.text:0000000000408b2b\n.text:0000000000408b31\n.text:0000000000408b36\n.text:0000000000408b3b\n.text:0000000000408b3e\n.text:0000000000408b41\n.text:0000000000408b43\n.text:0000000000408b46\n.text:0000000000408b48\n.text:0000000000408b4d\n.text:0000000000408b50\n.text:0000000000408b55\n.text:0000000000408b58\n.text:0000000000408b5b\n.text:0000000000408b5d\n.text:0000000000408b62\n.text:0000000000408b65\n.text:0000000000408b67\n.text:0000000000408b69\n.text:0000000000408b6d\n.text:0000000000408b72\n.text:0000000000408b77\n.text:0000000000408b7a\n.text:0000000000408b7d\n.text:0000000000408b7f\n.text:0000000000408b82\n.text:0000000000408b85\n.text:0000000000408b88\n.text:0000000000408b8d\n.text:0000000000408b90\n.text:0000000000408b93\n.text:0000000000408b96\n.text:0000000000408b98\n.text:0000000000408b9e\n.text:0000000000408ba8\n.text:0000000000408bad\n.text:0000000000408bb7\n.text:0000000000408bbb\n.text:0000000000408bbd\n.text:0000000000408bc3\n.text:0000000000408bc8\n.text:0000000000408bd2\n.text:0000000000408bd7\n.text:0000000000408be1\n.text:0000000000408be5\n.text:0000000000408bea\n.text:0000000000408bec\n.text:0000000000408bef\n.text:0000000000408bf4\n.text:0000000000408bf6\n.text:0000000000408bf8\n.text:0000000000408bfe\n.text:0000000000408c03\n.text:0000000000408c05\n.text:0000000000408c0a\n.text:0000000000408c0d\n.text:0000000000408c10\n.text:0000000000408c16\n.text:0000000000408c1b\n.text:0000000000408c20\n.text:0000000000408c22\n.text:0000000000408c27\n.text:0000000000408c2a\n.text:0000000000408c2f\n.text:0000000000408c34\n.text:0000000000408c39\n.text:0000000000408c3c\n.text:0000000000408c3f\n.text:0000000000408c42\n.text:0000000000408c45\n.text:0000000000408c48\n.text:0000000000408c4d\n.text:0000000000408c50\n.text:0000000000408c55\n.text:0000000000408c58\n.text:0000000000408c5d\n.text:0000000000408c60\n.text:0000000000408c65\n.text:0000000000408c6a\n.text:0000000000408c6d\n.text:0000000000408c72\n.text:0000000000408c77\n.text:0000000000408c79\n.text:0000000000408c7c\n.text:0000000000408c81\n.text:0000000000408c86\n.text:0000000000408c88\n.text:0000000000408c8b\n.text:0000000000408c8e\n.text:0000000000408c91\n.text:0000000000408c96\n.text:0000000000408c99\n.text:0000000000408c9f\n.text:0000000000408ca2\n.text:0000000000408ca7\n.text:0000000000408caa\n.text:0000000000408cad\n.text:0000000000408cb2\n.text:0000000000408cb5\n.text:0000000000408cba\n.text:0000000000408cbf\n.text:0000000000408cc2\n.text:0000000000408cc4\n.text:0000000000408cc8\n.text:0000000000408ccd\n.text:0000000000408cd2\n.text:0000000000408cd5\n.text:0000000000408cda\n.text:0000000000408cdd\n.text:0000000000408ce2\n.text:0000000000408ce5\n.text:0000000000408ceb\n.text:0000000000408ced\n.text:0000000000408cf2\n.text:0000000000408cf6\n.text:0000000000408cfb\n.text:0000000000408cfe\n.text:0000000000408d01\n.text:0000000000408d07\n.text:0000000000408d10\n.text:0000000000408d13\n.text:0000000000408d18\n.text:0000000000408d1b\n.text:0000000000408d1e\n.text:0000000000408d24\n.text:0000000000408d30\n.text:0000000000408d33\n.text:0000000000408d38\n.text:0000000000408d3b\n.text:0000000000408d3d\n.text:0000000000408d40\n.text:0000000000408d42\n.text:0000000000408d44\n.text:0000000000408d46\n.text:0000000000408d4b\n.text:0000000000408d4d\n.text:0000000000408d50\n.text:0000000000408d55\n.text:0000000000408d57\n.text:0000000000408d5c\n.text:0000000000408d5f\n.text:0000000000408d64\n.text:0000000000408d67\n.text:0000000000408d6c\n.text:0000000000408d71\n.text:0000000000408d74\n.text:0000000000408d76\n.text:0000000000408d7b\n.text:0000000000408d7d\n.text:0000000000408d83\n.text:0000000000408d86\n.text:0000000000408d8b\n.text:0000000000408d92\n.text:0000000000408d95\n.text:0000000000408d9c\n.text:0000000000408d9d\n.text:0000000000408d9f\n.text:0000000000408da1\n.text:0000000000408da3\n.text:0000000000408da5\n.text:0000000000408da6\n'
p587
tp588
sS'nl_langinfo'
p589
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060f180)();\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060f180]\n'
p592
S'ff 25 da d7 20 00\n'
p593
S'.plt:00000000004019a0\n'
p594
tp595
sS'fstatfs'
p596
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_0060f200)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060f200]\n'
p599
S'ff 25 5a d7 20 00\n'
p600
S'.plt:0000000000401aa0\n'
p601
tp602
sS'context_type_set'
p603
(S'\n__stdcall context_type_set(char * s)\n'
p604
V\u000aint context_type_set(char *s)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p605
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p606
S'50\ne8 4a cf ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p607
S'.text:00000000004047b0\n.text:00000000004047b1\n.text:00000000004047b6\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c2\n'
p608
tp609
sS'matchpathcon'
p610
(S'\n__stdcall matchpathcon(char * file, security_context_t * con)\n'
p611
V\u000aint matchpathcon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p612
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p613
S'50\ne8 7a ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p614
S'.text:0000000000404880\n.text:0000000000404881\n.text:0000000000404886\n.text:000000000040488c\n.text:0000000000404891\n.text:0000000000404892\n'
p615
tp616
sS'x2realloc'
p617
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p618
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p619
S'MOV EDX,0x1\nJMP 0x00404fa0\n'
p620
S'ba 01 00 00 00\neb 89\n'
p621
S'.text:0000000000405010\n.text:0000000000405015\n'
p622
tp623
sS'restore_cwd'
p624
(S'\n__stdcall restore_cwd(saved_cwd * cwd)\n'
p625
V\u000aint restore_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < cwd->desc) {\u000a    iVar1 = fchdir(cwd->desc);\u000a    return iVar1;\u000a  }\u000a  iVar1 = chdir_long(cwd->name);\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'MOV EAX,dword ptr [RDI]\nTEST EAX,EAX\nJS 0x00408f4d\nMOV EDI,EAX\nJMP 0x004019e0\nMOV RDI,qword ptr [RDI + 0x8]\nJMP 0x00408fe0\n'
p627
S'8b 07\n85 c0\n78 07\n89 c7\ne9 93 8a ff ff\n48 8b 7f 08\ne9 8a 00 00 00\n'
p628
S'.text:0000000000408f40\n.text:0000000000408f42\n.text:0000000000408f44\n.text:0000000000408f46\n.text:0000000000408f48\n.text:0000000000408f4d\n.text:0000000000408f51\n'
p629
tp630
sS'strlen'
p631
(S'\n__stdcall strlen(char * __s)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060f098)();\u000a  return sVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x0060f098]\n'
p634
S'ff 25 c2 d8 20 00\n'
p635
S'.plt:00000000004017d0\n'
p636
tp637
sS'set_stat_type'
p638
(S'\n__stdcall set_stat_type(stat * st)\n'
p639
V\u000avoid set_stat_type(stat *st)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  int in_ESI;\u000a  \u000a  _Var1 = 0;\u000a  if (in_ESI - 1U < 0xc) {\u000a    _Var1 = *(__mode_t *)(&DAT_0040b5d0 + (long)(int)(in_ESI - 1U) * 4);\u000a  }\u000a  st->st_mode = _Var1;\u000a  return;\u000a}\u000a\u000a
p640
S'DEC ESI\nXOR EAX,EAX\nCMP ESI,0xb\nJA 0x00406f33\nMOVSXD RAX,ESI\nMOV EAX,dword ptr [0x40b5d0 + RAX*0x4]\nMOV dword ptr [RDI + 0x18],EAX\nRET\n'
p641
S'ff ce\n31 c0\n83 fe 0b\n77 0a\n48 63 c6\n8b 04 85 d0 b5 40 00\n89 47 18\nc3\n'
p642
S'.text:0000000000406f20\n.text:0000000000406f22\n.text:0000000000406f24\n.text:0000000000406f27\n.text:0000000000406f29\n.text:0000000000406f2c\n.text:0000000000406f33\n.text:0000000000406f36\n'
p643
tp644
sS'memcmp'
p645
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060f120)();\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x0060f120]\n'
p648
S'ff 25 3a d8 20 00\n'
p649
S'.plt:00000000004018e0\n'
p650
tp651
sS'fts_compare_ino'
p652
(S'\n__stdcall fts_compare_ino(_ftsent * * a, _ftsent * * b)\n'
p653
V\u000aint fts_compare_ino(_ftsent **a,_ftsent **b)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  \u000a  uVar1 = (*a)->fts_statp[0].st_ino;\u000a  uVar2 = (*b)->fts_statp[0].st_ino;\u000a  uVar3 = 0xffffffff;\u000a  if (uVar2 <= uVar1) {\u000a    uVar3 = -(uint)(uVar2 < uVar1) & 1;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p654
S'MOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [0x80 + RAX]\nMOV RCX,qword ptr [RSI]\nMOV RCX,qword ptr [0x80 + RCX]\nCMP RCX,RAX\nSBB EDX,EDX\nAND EDX,0x1\nCMP RAX,RCX\nMOV EAX,0xffffffff\nCMOVNC EAX,EDX\nRET\n'
p655
S'48 8b 07\n48 8b 80 80 00 00 00\n48 8b 0e\n48 8b 89 80 00 00 00\n48 39 c1\n19 d2\n83 e2 01\n48 39 c8\nb8 ff ff ff ff\n0f 43 c2\nc3\n'
p656
S'.text:0000000000407000\n.text:0000000000407003\n.text:000000000040700a\n.text:000000000040700d\n.text:0000000000407014\n.text:0000000000407017\n.text:0000000000407019\n.text:000000000040701c\n.text:000000000040701f\n.text:0000000000407024\n.text:0000000000407027\n'
p657
tp658
sS'hash_free'
p659
(S'\n__stdcall hash_free(Hash_table * table)\n'
p660
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p661
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00408182\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00408182\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040815a\nJMP 0x00408182\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408182\nCMP qword ptr [R14],0x0\nJZ 0x00408150\nTEST R14,R14\nJZ 0x00408150\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00408170\nJMP 0x00408150\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040819a\nJMP 0x004081c3\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x004081c3\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00408190\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004081b0\nJMP 0x00408190\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x004081e1\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004081d0\nMOV RDI,qword ptr [R15]\nCALL 0x004016e0\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004016e0\n'
p662
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 27 95 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 07 95 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 f7 94 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 ea 94 ff ff\n'
p663
S'.text:0000000000408120\n.text:0000000000408122\n.text:0000000000408124\n.text:0000000000408125\n.text:0000000000408128\n.text:000000000040812d\n.text:000000000040812f\n.text:0000000000408134\n.text:0000000000408136\n.text:0000000000408139\n.text:000000000040813d\n.text:000000000040813f\n.text:0000000000408150\n.text:0000000000408154\n.text:0000000000408158\n.text:000000000040815a\n.text:000000000040815e\n.text:0000000000408160\n.text:0000000000408163\n.text:0000000000408165\n.text:0000000000408168\n.text:0000000000408170\n.text:0000000000408173\n.text:0000000000408177\n.text:000000000040817b\n.text:000000000040817e\n.text:0000000000408180\n.text:0000000000408182\n.text:0000000000408185\n.text:0000000000408189\n.text:000000000040818b\n.text:0000000000408190\n.text:0000000000408194\n.text:0000000000408198\n.text:000000000040819a\n.text:000000000040819e\n.text:00000000004081a1\n.text:00000000004081a3\n.text:00000000004081b0\n.text:00000000004081b4\n.text:00000000004081b9\n.text:00000000004081bc\n.text:00000000004081bf\n.text:00000000004081c1\n.text:00000000004081c3\n.text:00000000004081c7\n.text:00000000004081ca\n.text:00000000004081cc\n.text:00000000004081d0\n.text:00000000004081d4\n.text:00000000004081d9\n.text:00000000004081dc\n.text:00000000004081df\n.text:00000000004081e1\n.text:00000000004081e4\n.text:00000000004081e9\n.text:00000000004081ec\n.text:00000000004081ed\n.text:00000000004081ef\n.text:00000000004081f1\n'
p664
tp665
sS'quotearg_n_style_mem'
p666
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p667
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404010\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403de0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p669
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p670
S'.text:0000000000404070\n.text:0000000000404071\n.text:0000000000404073\n.text:0000000000404075\n.text:0000000000404076\n.text:000000000040407a\n.text:000000000040407d\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404085\n.text:0000000000404088\n.text:000000000040408d\n.text:000000000040408f\n.text:0000000000404092\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409d\n.text:00000000004040a1\n.text:00000000004040a2\n.text:00000000004040a4\n.text:00000000004040a6\n.text:00000000004040a7\n'
p671
tp672
sS'xfts_open'
p673
(S'\n__stdcall xfts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p674
V\u000aFTS * xfts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  FTS *pFVar1;\u000a  int *piVar2;\u000a  \u000a  pFVar1 = fts_open(argv,(int (*)(FTSENT **,FTSENT **))(ulong)((uint)compar | 0x200));\u000a  if (pFVar1 != (FTS *)0x0) {\u000a    return pFVar1;\u000a  }\u000a  piVar2 = __errno_location();\u000a  if (*piVar2 == 0x16) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("errno != EINVAL","lib/xfts.c",0x29,\u000a                  "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))");\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p675
S'PUSH RAX\nOR ESI,0x200\nCALL 0x004051a0\nTEST RAX,RAX\nJZ 0x00405103\nPOP RCX\nRET\nCALL 0x00401700\nCMP dword ptr [RAX],0x16\nJNZ 0x00405126\nMOV EDI,0x40b560\nMOV ESI,0x40b570\nMOV EDX,0x29\nMOV ECX,0x40b57b\nCALL 0x00401860\nCALL 0x004050c0\n'
p676
S'50\n81 ce 00 02 00 00\ne8 a4 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 f8 c5 ff ff\n83 38 16\n75 19\nbf 60 b5 40 00\nbe 70 b5 40 00\nba 29 00 00 00\nb9 7b b5 40 00\ne8 3a c7 ff ff\ne8 95 ff ff ff\n'
p677
S'.text:00000000004050f0\n.text:00000000004050f1\n.text:00000000004050f7\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405101\n.text:0000000000405102\n.text:0000000000405103\n.text:0000000000405108\n.text:000000000040510b\n.text:000000000040510d\n.text:0000000000405112\n.text:0000000000405117\n.text:000000000040511c\n.text:0000000000405121\n.text:0000000000405126\n'
p678
tp679
sS'_exit'
p680
(S'\n__stdcall _exit(int __status)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060f040)();\u000a  return;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x0060f040]\n'
p683
S'ff 25 1a d9 20 00\n'
p684
S'.plt:0000000000401720\n'
p685
tp686
sS'free_entry'
p687
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p688
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p689
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p690
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p691
S'.text:00000000004089b0\n.text:00000000004089b7\n.text:00000000004089bb\n.text:00000000004089bf\n.text:00000000004089c3\n'
p692
tp693
sS'xrealloc'
p694
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p695
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404f87\nTEST RBX,RBX\nJNZ 0x00404f87\nCALL 0x004016e0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004019f0\nTEST RBX,RBX\nJZ 0x00404f99\nTEST RAX,RAX\nJZ 0x00404f9b\nPOP RBX\nRET\nCALL 0x004050c0\n'
p697
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 5d c7 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 61 ca ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p698
S'.text:0000000000404f70\n.text:0000000000404f71\n.text:0000000000404f74\n.text:0000000000404f77\n.text:0000000000404f79\n.text:0000000000404f7c\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f85\n.text:0000000000404f86\n.text:0000000000404f87\n.text:0000000000404f8a\n.text:0000000000404f8f\n.text:0000000000404f92\n.text:0000000000404f94\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9a\n.text:0000000000404f9b\n'
p699
tp700
sS'hash_initialize'
p701
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p702
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x407f30\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x407f50\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407f15\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x40ba1c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00407f60\nTEST AL,AL\nJZ 0x00407f0d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00407fe0\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x00407f0d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00405150\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x00407f0d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00407f17\nMOV RDI,RBX\nCALL 0x004016e0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p704
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 30 7f 40 00\n48 0f 45 ea\n48 85 c9\n41 be 50 7f 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 f9 9a ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 1c ba 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 7b d2 ff ff\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 cb 97 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p705
S'.text:0000000000407e50\n.text:0000000000407e51\n.text:0000000000407e53\n.text:0000000000407e55\n.text:0000000000407e57\n.text:0000000000407e59\n.text:0000000000407e5a\n.text:0000000000407e5b\n.text:0000000000407e5e\n.text:0000000000407e61\n.text:0000000000407e64\n.text:0000000000407e67\n.text:0000000000407e6c\n.text:0000000000407e70\n.text:0000000000407e73\n.text:0000000000407e79\n.text:0000000000407e7d\n.text:0000000000407e82\n.text:0000000000407e87\n.text:0000000000407e8a\n.text:0000000000407e8d\n.text:0000000000407e93\n.text:0000000000407e97\n.text:0000000000407e9a\n.text:0000000000407ea0\n.text:0000000000407ea4\n.text:0000000000407ea8\n.text:0000000000407eab\n.text:0000000000407eb0\n.text:0000000000407eb2\n.text:0000000000407eb4\n.text:0000000000407eb7\n.text:0000000000407eba\n.text:0000000000407ebf\n.text:0000000000407ec3\n.text:0000000000407ec6\n.text:0000000000407ec8\n.text:0000000000407ecd\n.text:0000000000407ed0\n.text:0000000000407ed5\n.text:0000000000407ed8\n.text:0000000000407edb\n.text:0000000000407edd\n.text:0000000000407ee1\n.text:0000000000407ee5\n.text:0000000000407ee8\n.text:0000000000407eec\n.text:0000000000407eef\n.text:0000000000407ef3\n.text:0000000000407ef7\n.text:0000000000407efb\n.text:0000000000407eff\n.text:0000000000407f03\n.text:0000000000407f0b\n.text:0000000000407f0d\n.text:0000000000407f10\n.text:0000000000407f15\n.text:0000000000407f17\n.text:0000000000407f1a\n.text:0000000000407f1e\n.text:0000000000407f1f\n.text:0000000000407f21\n.text:0000000000407f23\n.text:0000000000407f25\n.text:0000000000407f27\n.text:0000000000407f28\n'
p706
tp707
sS'cycle_warning_required'
p708
(S'\n__stdcall cycle_warning_required(FTS * fts, FTSENT * ent)\n'
p709
V\u000a_Bool cycle_warning_required(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = fts->fts_options & 0x11;\u000a  _Var1 = (_Bool)(uVar2 == 0x10);\u000a  if (uVar2 == 0x11) {\u000a    _Var1 = (_Bool)(ent->fts_level != 0);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p710
S'MOV ECX,dword ptr [RDI + 0x48]\nAND ECX,0x11\nCMP ECX,0x10\nSETZ AL\nCMP ECX,0x11\nJNZ 0x0040514e\nCMP ECX,0x10\nJZ 0x0040514e\nCMP qword ptr [RSI + 0x58],0x0\nSETNZ AL\nRET\n'
p711
S'8b 4f 48\n83 e1 11\n83 f9 10\n0f 94 c0\n83 f9 11\n75 0d\n83 f9 10\n74 08\n48 83 7e 58 00\n0f 95 c0\nc3\n'
p712
S'.text:0000000000405130\n.text:0000000000405133\n.text:0000000000405136\n.text:0000000000405139\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405141\n.text:0000000000405144\n.text:0000000000405146\n.text:000000000040514b\n.text:000000000040514e\n'
p713
tp714
sS'fts_set'
p715
(S'\n__stdcall fts_set(FTS * sp, FTSENT * p)\n'
p716
V\u000aint fts_set(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  int *piVar1;\u000a  uint in_EDX;\u000a  \u000a  if (4 < in_EDX) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x16;\u000a    return 1;\u000a  }\u000a  p->fts_instr = (unsigned_short)in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p717
S'CMP EDX,0x5\nJC 0x00406ceb\nPUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x16\nMOV EAX,0x1\nADD RSP,0x8\nRET\nMOV word ptr [RSI + 0x74],DX\nXOR EAX,EAX\nRET\n'
p718
S'83 fa 05\n72 16\n50\ne8 25 aa ff ff\nc7 00 16 00 00 00\nb8 01 00 00 00\n48 83 c4 08\nc3\n66 89 56 74\n31 c0\nc3\n'
p719
S'.text:0000000000406cd0\n.text:0000000000406cd3\n.text:0000000000406cd5\n.text:0000000000406cd6\n.text:0000000000406cdb\n.text:0000000000406ce1\n.text:0000000000406ce6\n.text:0000000000406cea\n.text:0000000000406ceb\n.text:0000000000406cef\n.text:0000000000406cf1\n'
p720
tp721
sS'close_stdout'
p722
(S'\n__stdcall close_stdout()\n'
p723
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402d47;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40ac54,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402d47:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p724
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060f2c8]\nCALL 0x00407840\nTEST EAX,EAX\nJZ 0x00402d47\nCMP byte ptr [0x0060f368],0x0\nJZ 0x00402d5c\nCALL 0x00401700\nCMP dword ptr [RAX],0x20\nJNZ 0x00402d5c\nMOV RDI,qword ptr [0x0060f300]\nCALL 0x00407840\nTEST EAX,EAX\nJNZ 0x00402da1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40ac44\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060f360]\nCALL 0x00401700\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402dac\nXOR EDI,EDI\nMOV EDX,0x40ac54\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401a40\nMOV EDI,dword ptr [0x0060f260]\nCALL 0x00401720\nMOV EDI,dword ptr [0x0060f260]\nCALL 0x00401720\nMOV RDI,RBX\nCALL 0x00404170\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40ac50\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401a40\nMOV EDI,dword ptr [0x0060f260]\nCALL 0x00401720\n'
p725
S'55\n41 56\n53\n48 8b 3d 9d c5 20 00\ne8 10 4b 00 00\n85 c0\n74 13\n80 3d 2d c6 20 00 00\n74 1f\ne8 be e9 ff ff\n83 38 20\n75 15\n48 8b 3d b2 c5 20 00\ne8 ed 4a 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 44 ac 40 00\nba 05 00 00 00\ne8 43 ea ff ff\n49 89 c6\n48 8b 1d e9 c5 20 00\ne8 84 e9 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 54 ac 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 aa ec ff ff\n8b 3d c4 c4 20 00\ne8 7f e9 ff ff\n8b 3d b9 c4 20 00\ne8 74 e9 ff ff\n48 89 df\ne8 bc 13 00 00\n48 89 c1\n31 ff\nba 50 ac 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 76 ec ff ff\n8b 3d 90 c4 20 00\ne8 4b e9 ff ff\n'
p726
S'.text:0000000000402d20\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d24\n.text:0000000000402d2b\n.text:0000000000402d30\n.text:0000000000402d32\n.text:0000000000402d34\n.text:0000000000402d3b\n.text:0000000000402d3d\n.text:0000000000402d42\n.text:0000000000402d45\n.text:0000000000402d47\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5b\n.text:0000000000402d5c\n.text:0000000000402d5e\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d70\n.text:0000000000402d77\n.text:0000000000402d7c\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d85\n.text:0000000000402d8a\n.text:0000000000402d8c\n.text:0000000000402d8e\n.text:0000000000402d91\n.text:0000000000402d96\n.text:0000000000402d9c\n.text:0000000000402da1\n.text:0000000000402da7\n.text:0000000000402dac\n.text:0000000000402daf\n.text:0000000000402db4\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbe\n.text:0000000000402dc0\n.text:0000000000402dc2\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dd0\n'
p727
tp728
sS'version_etc_ar'
p729
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p730
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p731
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404d80\nJMP 0x00404a10\n'
p732
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p733
S'.text:0000000000404d70\n.text:0000000000404d77\n.text:0000000000404d80\n.text:0000000000404d86\n.text:0000000000404d8a\n.text:0000000000404d8c\n'
p734
tp735
sS'c_isxdigit'
p736
(S'\n__stdcall c_isxdigit()\n'
p737
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p738
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004077ab\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p739
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p740
S'.text:0000000000407790\n.text:0000000000407793\n.text:0000000000407796\n.text:0000000000407798\n.text:00000000004077a2\n.text:00000000004077a4\n.text:00000000004077a7\n.text:00000000004077aa\n.text:00000000004077ab\n.text:00000000004077ad\n'
p741
tp742
sS'__libc_csu_fini'
p743
(S'\n__stdcall __libc_csu_fini()\n'
p744
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p745
S'RET\n'
p746
S'f3 c3\n'
p747
S'.text:0000000000409850\n'
p748
tp749
sS'abort'
p750
(S'\n__stdcall abort()\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060f028)();\u000a  return;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060f028]\n'
p753
S'ff 25 32 d9 20 00\n'
p754
S'.plt:00000000004016f0\n'
p755
tp756
sS'closedir'
p757
(S'\n__stdcall closedir(DIR * __dirp)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0060f110)();\u000a  return iVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x0060f110]\n'
p760
S'ff 25 4a d8 20 00\n'
p761
S'.plt:00000000004018c0\n'
p762
tp763
sS'compute_bucket_size'
p764
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p765
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_0040b9a8 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_0040b9a8) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040b9ac <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p766
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00408042\nTEST RDI,RDI\nJS 0x00407ff2\nCVTSI2SS XMM0,RDI\nJMP 0x00408007\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x0040b9a8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040b9ac]\nJNC 0x00408061\nPUSH RAX\nCALL 0x004088e0\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p767
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 94 39 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 6c 39 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p768
S'.text:0000000000407fe0\n.text:0000000000407fe4\n.text:0000000000407fe6\n.text:0000000000407fe9\n.text:0000000000407feb\n.text:0000000000407ff0\n.text:0000000000407ff2\n.text:0000000000407ff5\n.text:0000000000407ff8\n.text:0000000000407ffb\n.text:0000000000407ffe\n.text:0000000000408003\n.text:0000000000408007\n.text:000000000040800c\n.text:0000000000408014\n.text:0000000000408017\n.text:000000000040801b\n.text:0000000000408020\n.text:000000000040802a\n.text:000000000040802d\n.text:0000000000408032\n.text:0000000000408035\n.text:0000000000408039\n.text:0000000000408040\n.text:0000000000408042\n.text:0000000000408043\n.text:0000000000408048\n.text:000000000040804b\n.text:0000000000408050\n.text:0000000000408052\n.text:0000000000408055\n.text:0000000000408059\n.text:000000000040805d\n.text:0000000000408060\n.text:0000000000408061\n.text:0000000000408063\n.text:0000000000408066\n'
p769
tp770
sS'openat_proc_name'
p771
(S'\n__stdcall openat_proc_name(char * buf, char * file)\n'
p772
V\u000achar * openat_proc_name(char *buf,char *file)\u000a\u000a{\u000a  int proc_status;\u000a  uint __fd;\u000a  int iVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  char dotdot_buf [32];\u000a  char acStack72 [32];\u000a  \u000a  if (*__s == 0) {\u000a    *buf = 0;\u000a    return buf;\u000a  }\u000a  if (proc_status == 0) {\u000a    __fd = open("/proc/self/fd",0x10900);\u000a    if ((int)__fd < 0) {\u000a      return (char *)0x0;\u000a    }\u000a    __sprintf_chk(acStack72,1,0x20,"/proc/self/fd/%d/../fd",(ulong)__fd);\u000a    iVar1 = access(acStack72,0);\u000a    proc_status = ~-(uint)(iVar1 == 0) | 1;\u000a    close(__fd);\u000a  }\u000a  if (-1 < proc_status) {\u000a    sVar2 = strlen(__s);\u000a    if ((sVar2 + 0x1b < 0xfc1) || (buf = (char *)malloc(sVar2 + 0x1b), buf != (char *)0x0)) {\u000a      iVar1 = __sprintf_chk(buf,1,0xffffffffffffffff,"/proc/self/fd/%d/",(ulong)file & 0xffffffff);\u000a      strcpy(buf + (long)iVar1,__s);\u000a      return buf;\u000a    }\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RDX\nMOV R15D,ESI\nMOV RBX,RDI\nCMP byte ptr [R14],0x0\nJZ 0x004096d0\nMOV EAX,dword ptr [0x0060f4cc]\nTEST EAX,EAX\nJNZ 0x0040967a\nMOV EDI,0x40bc8a\nMOV ESI,0x10900\nXOR EAX,EAX\nCALL 0x00401a60\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004096d5\nMOV R12,RSP\nMOV ESI,0x1\nMOV EDX,0x20\nMOV ECX,0x40bc98\nXOR EAX,EAX\nMOV RDI,R12\nMOV R8D,EBP\nCALL 0x00401b20\nXOR ESI,ESI\nMOV RDI,R12\nCALL 0x00401a70\nCMP EAX,0x1\nSBB EAX,EAX\nNOT EAX\nOR EAX,0x1\nMOV dword ptr [0x0060f4cc],EAX\nMOV EDI,EBP\nCALL 0x004018a0\nMOV EAX,dword ptr [0x0060f4cc]\nTEST EAX,EAX\nJS 0x004096df\nMOV RDI,R14\nCALL 0x004017d0\nADD RAX,0x1b\nCMP RAX,0xfc1\nJC 0x004096a2\nMOV RDI,RAX\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004096df\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40bcaf\nXOR EAX,EAX\nMOV RDI,RBX\nMOV R8D,R15D\nCALL 0x00401b20\nMOVSXD RDI,EAX\nADD RDI,RBX\nMOV RSI,R14\nCALL 0x00401730\nJMP 0x004096e1\nMOV byte ptr [RBX],0x0\nJMP 0x004096e1\nMOV dword ptr [0x0060f4cc],0xffffffff\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p774
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 d6\n41 89 f7\n48 89 fb\n41 80 3e 00\n0f 84 c1 00 00 00\n8b 05 b7 5e 20 00\n85 c0\n75 61\nbf 8a bc 40 00\nbe 00 09 01 00\n31 c0\ne8 36 84 ff ff\n89 c5\n85 ed\n0f 88 a1 00 00 00\n49 89 e4\nbe 01 00 00 00\nba 20 00 00 00\nb9 98 bc 40 00\n31 c0\n4c 89 e7\n41 89 e8\ne8 cd 84 ff ff\n31 f6\n4c 89 e7\ne8 13 84 ff ff\n83 f8 01\n19 c0\nf7 d0\n83 c8 01\n89 05 5f 5e 20 00\n89 ef\ne8 2c 82 ff ff\n8b 05 52 5e 20 00\n85 c0\n78 61\n4c 89 f7\ne8 4a 81 ff ff\n48 83 c0 1b\n48 3d c1 0f 00 00\n72 10\n48 89 c7\ne8 e6 82 ff ff\n48 89 c3\n48 85 db\n74 3d\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 af bc 40 00\n31 c0\n48 89 df\n45 89 f8\ne8 60 84 ff ff\n48 63 f8\n48 01 df\n4c 89 f6\ne8 62 80 ff ff\neb 11\nc6 03 00\neb 0c\nc7 05 ed 5d 20 00 ff ff ff ff\n31 db\n48 89 d8\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p775
S'.text:00000000004095f0\n.text:00000000004095f1\n.text:00000000004095f3\n.text:00000000004095f5\n.text:00000000004095f7\n.text:00000000004095f8\n.text:00000000004095fc\n.text:00000000004095ff\n.text:0000000000409602\n.text:0000000000409605\n.text:0000000000409609\n.text:000000000040960f\n.text:0000000000409615\n.text:0000000000409617\n.text:0000000000409619\n.text:000000000040961e\n.text:0000000000409623\n.text:0000000000409625\n.text:000000000040962a\n.text:000000000040962c\n.text:000000000040962e\n.text:0000000000409634\n.text:0000000000409637\n.text:000000000040963c\n.text:0000000000409641\n.text:0000000000409646\n.text:0000000000409648\n.text:000000000040964b\n.text:000000000040964e\n.text:0000000000409653\n.text:0000000000409655\n.text:0000000000409658\n.text:000000000040965d\n.text:0000000000409660\n.text:0000000000409662\n.text:0000000000409664\n.text:0000000000409667\n.text:000000000040966d\n.text:000000000040966f\n.text:0000000000409674\n.text:000000000040967a\n.text:000000000040967c\n.text:000000000040967e\n.text:0000000000409681\n.text:0000000000409686\n.text:000000000040968a\n.text:0000000000409690\n.text:0000000000409692\n.text:0000000000409695\n.text:000000000040969a\n.text:000000000040969d\n.text:00000000004096a0\n.text:00000000004096a2\n.text:00000000004096a7\n.text:00000000004096ae\n.text:00000000004096b3\n.text:00000000004096b5\n.text:00000000004096b8\n.text:00000000004096bb\n.text:00000000004096c0\n.text:00000000004096c3\n.text:00000000004096c6\n.text:00000000004096c9\n.text:00000000004096ce\n.text:00000000004096d0\n.text:00000000004096d3\n.text:00000000004096d5\n.text:00000000004096df\n.text:00000000004096e1\n.text:00000000004096e4\n.text:00000000004096e8\n.text:00000000004096e9\n.text:00000000004096eb\n.text:00000000004096ed\n.text:00000000004096ef\n.text:00000000004096f0\n'
p776
tp777
sS'security_check_context_raw'
p778
(S'\n__stdcall security_check_context_raw(security_context_t con)\n'
p779
V\u000aint security_check_context_raw(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p780
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p781
S'50\ne8 7a cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p782
S'.text:0000000000404980\n.text:0000000000404981\n.text:0000000000404986\n.text:000000000040498c\n.text:0000000000404991\n.text:0000000000404992\n'
p783
tp784
sS'version_etc'
p785
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p786
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p787
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404e42\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404da0\nADD RSP,0xd8\nRET\n'
p788
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p789
S'.text:0000000000404e00\n.text:0000000000404e07\n.text:0000000000404e09\n.text:0000000000404e0b\n.text:0000000000404e10\n.text:0000000000404e15\n.text:0000000000404e1a\n.text:0000000000404e22\n.text:0000000000404e2a\n.text:0000000000404e32\n.text:0000000000404e3a\n.text:0000000000404e42\n.text:0000000000404e47\n.text:0000000000404e4c\n.text:0000000000404e51\n.text:0000000000404e56\n.text:0000000000404e5e\n.text:0000000000404e63\n.text:0000000000404e6b\n.text:0000000000404e72\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e81\n'
p790
tp791
sS'hash_rehash'
p792
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p793
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00407fe0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408311\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00408314\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00405150\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00408311\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00408330\nTEST AL,AL\nJZ 0x004082da\nMOV RDI,qword ptr [RBX]\nCALL 0x004016e0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00408314\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00408330\nTEST AL,AL\nJZ 0x00408320\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00408330\nTEST AL,AL\nJZ 0x00408320\nMOV RDI,qword ptr [RSP]\nCALL 0x004016e0\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x004016f0\n'
p795
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 10 cf ff ff\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 33 94 ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 cf 93 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 cb 93 ff ff\n'
p796
S'.text:0000000000408200\n.text:0000000000408201\n.text:0000000000408203\n.text:0000000000408204\n.text:0000000000408208\n.text:000000000040820b\n.text:000000000040820f\n.text:0000000000408212\n.text:0000000000408215\n.text:000000000040821a\n.text:000000000040821d\n.text:0000000000408220\n.text:0000000000408226\n.text:0000000000408229\n.text:000000000040822d\n.text:0000000000408233\n.text:0000000000408238\n.text:000000000040823b\n.text:0000000000408240\n.text:0000000000408244\n.text:0000000000408247\n.text:000000000040824d\n.text:0000000000408252\n.text:0000000000408256\n.text:000000000040825a\n.text:000000000040825f\n.text:0000000000408262\n.text:0000000000408267\n.text:000000000040826b\n.text:0000000000408270\n.text:0000000000408274\n.text:0000000000408279\n.text:000000000040827d\n.text:0000000000408282\n.text:0000000000408286\n.text:000000000040828b\n.text:000000000040828f\n.text:0000000000408294\n.text:0000000000408297\n.text:0000000000408299\n.text:000000000040829c\n.text:00000000004082a1\n.text:00000000004082a3\n.text:00000000004082a5\n.text:00000000004082a8\n.text:00000000004082ad\n.text:00000000004082b1\n.text:00000000004082b4\n.text:00000000004082b9\n.text:00000000004082bd\n.text:00000000004082c2\n.text:00000000004082c6\n.text:00000000004082cb\n.text:00000000004082cf\n.text:00000000004082d4\n.text:00000000004082d8\n.text:00000000004082da\n.text:00000000004082df\n.text:00000000004082e3\n.text:00000000004082e6\n.text:00000000004082eb\n.text:00000000004082ee\n.text:00000000004082f3\n.text:00000000004082f5\n.text:00000000004082f7\n.text:00000000004082fa\n.text:00000000004082fc\n.text:00000000004082ff\n.text:0000000000408304\n.text:0000000000408306\n.text:0000000000408308\n.text:000000000040830c\n.text:0000000000408311\n.text:0000000000408314\n.text:0000000000408317\n.text:000000000040831b\n.text:000000000040831c\n.text:000000000040831e\n.text:000000000040831f\n.text:0000000000408320\n'
p797
tp798
sS'lseek'
p799
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060f0d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060f0d8]\n'
p802
S'ff 25 82 d8 20 00\n'
p803
S'.plt:0000000000401850\n'
p804
tp805
sS'AD_compare'
p806
(S'\n__stdcall AD_compare(void * x, void * y)\n'
p807
V\u000a_Bool AD_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)((long)x + 8) == *(long *)((long)y + 8)) {\u000a    return (_Bool)(*(long *)x == *(long *)y);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p808
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x00406e54\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p809
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p810
S'.text:0000000000406e40\n.text:0000000000406e44\n.text:0000000000406e48\n.text:0000000000406e4a\n.text:0000000000406e4d\n.text:0000000000406e50\n.text:0000000000406e53\n.text:0000000000406e54\n.text:0000000000406e56\n'
p811
tp812
sS'cdb_init'
p813
(S'\n__stdcall cdb_init(cd_buf * cdb)\n'
p814
V\u000avoid cdb_init(cd_buf *cdb)\u000a\u000a{\u000a  *cdb = (cd_buf)0xffffff9c;\u000a  return;\u000a}\u000a\u000a
p815
S'MOV dword ptr [RDI],0xffffff9c\nRET\n'
p816
S'c7 07 9c ff ff ff\nc3\n'
p817
S'.text:0000000000409240\n.text:0000000000409246\n'
p818
tp819
sS'hash_get_first'
p820
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p821
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p822
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00407ca3\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x00407c9a\nJMP 0x00407ca6\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407ca6\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00407c90\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x004016f0\n'
p823
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 44 9a ff ff\n'
p824
S'.text:0000000000407c70\n.text:0000000000407c75\n.text:0000000000407c77\n.text:0000000000407c7a\n.text:0000000000407c7e\n.text:0000000000407c80\n.text:0000000000407c90\n.text:0000000000407c94\n.text:0000000000407c98\n.text:0000000000407c9a\n.text:0000000000407c9d\n.text:0000000000407ca0\n.text:0000000000407ca2\n.text:0000000000407ca3\n.text:0000000000407ca5\n.text:0000000000407ca6\n.text:0000000000407ca7\n'
p825
tp826
sS'memrchr'
p827
(S'\n__stdcall memrchr(void * __s, int __c, size_t __n)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memrchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memrchr_0060f1d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x0060f1d8]\n'
p830
S'ff 25 82 d7 20 00\n'
p831
S'.plt:0000000000401a50\n'
p832
tp833
sS'hash_get_n_entries'
p834
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p835
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p836
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p837
S'48 8b 47 20\nc3\n'
p838
S'.text:0000000000407a40\n.text:0000000000407a44\n'
p839
tp840
sS'quotearg_n_mem'
p841
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p842
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p843
S'MOV ECX,0x60f380\nJMP 0x00403de0\n'
p844
S'b9 80 f3 60 00\ne9 36 fe ff ff\n'
p845
S'.text:0000000000403fa0\n.text:0000000000403fa5\n'
p846
tp847
sS'__printf_chk'
p848
(S'\n__stdcall __printf_chk()\n'
p849
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060f1c0)();\u000a  return;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x0060f1c0]\n'
p851
S'ff 25 9a d7 20 00\n'
p852
S'.plt:0000000000401a20\n'
p853
tp854
sS'hash_lookup'
p855
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p856
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p857
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x00407c40\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00407c31\nTEST RBX,RBX\nJZ 0x00407c31\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x00407c2e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00407c2e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00407c10\nJMP 0x00407c31\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p858
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p859
S'.text:0000000000407be0\n.text:0000000000407be2\n.text:0000000000407be4\n.text:0000000000407be6\n.text:0000000000407be7\n.text:0000000000407be8\n.text:0000000000407beb\n.text:0000000000407bee\n.text:0000000000407bf3\n.text:0000000000407bf6\n.text:0000000000407bf9\n.text:0000000000407bfd\n.text:0000000000407bff\n.text:0000000000407c02\n.text:0000000000407c04\n.text:0000000000407c07\n.text:0000000000407c10\n.text:0000000000407c13\n.text:0000000000407c16\n.text:0000000000407c18\n.text:0000000000407c1b\n.text:0000000000407c1f\n.text:0000000000407c21\n.text:0000000000407c23\n.text:0000000000407c27\n.text:0000000000407c2a\n.text:0000000000407c2c\n.text:0000000000407c2e\n.text:0000000000407c31\n.text:0000000000407c34\n.text:0000000000407c38\n.text:0000000000407c39\n.text:0000000000407c3b\n.text:0000000000407c3d\n.text:0000000000407c3f\n'
p860
tp861
sS'fchdir'
p862
(S'\n__stdcall fchdir(int __fd)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_0060f1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060f1a0]\n'
p865
S'ff 25 ba d7 20 00\n'
p866
S'.plt:00000000004019e0\n'
p867
tp868
sS'emit_ancillary_info'
p869
(S'\n__stdcall emit_ancillary_info()\n'
p870
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00409f40;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("chcon",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "chcon";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"chcon",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","chcon");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40a630;\u000a  if (__s2 == "chcon") {\u000a    uVar3 = 0x40a863;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x409f40\nMOV ESI,0x40a847\nNOP\nMOV EDI,0x40a694\nCALL 0x00401920\nTEST EAX,EAX\nJZ 0x00401e6b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401e50\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40a694\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40a8a6\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40a6c1\nMOV ECX,0x40a8bd\nXOR EAX,EAX\nCALL 0x00401a20\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401a10\nTEST RAX,RAX\nJZ 0x00401ef4\nMOV ESI,0x40a8e4\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401710\nTEST EAX,EAX\nJZ 0x00401ef4\nXOR EDI,EDI\nMOV ESI,0x40a8e8\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a694\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a20\nXOR EDI,EDI\nMOV ESI,0x40a92d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,RAX\nMOV R14D,0x40a694\nMOV EDI,0x1\nMOV EDX,0x40a8bd\nMOV ECX,0x40a694\nXOR EAX,EAX\nCALL 0x00401a20\nXOR EDI,EDI\nMOV ESI,0x40a94c\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40a863\nMOV ECX,0x40a630\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401a20\n'
p872
S'41 56\n53\n50\nbb 40 9f 40 00\nbe 47 a8 40 00\n66 90\nbf 94 a6 40 00\ne8 c6 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 94 a6 40 00\n48 0f 45 d8\n31 ff\nbe a6 a8 40 00\nba 05 00 00 00\ne8 24 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba c1 a6 40 00\nb9 bd a8 40 00\n31 c0\ne8 7b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 5f fb ff ff\n48 85 c0\n74 3e\nbe e4 a8 40 00\nba 03 00 00 00\n48 89 c7\ne8 48 f8 ff ff\n85 c0\n74 28\n31 ff\nbe e8 a8 40 00\nba 05 00 00 00\ne8 d3 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 94 a6 40 00\n31 c0\n48 89 ce\ne8 2c fb ff ff\n31 ff\nbe 2d a9 40 00\nba 05 00 00 00\ne8 ab f8 ff ff\n48 89 c6\n41 be 94 a6 40 00\nbf 01 00 00 00\nba bd a8 40 00\nb9 94 a6 40 00\n31 c0\ne8 fc fa ff ff\n31 ff\nbe 4c a9 40 00\nba 05 00 00 00\ne8 7b f8 ff ff\n48 89 c2\n4c 39 f3\nb8 63 a8 40 00\nb9 30 a6 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 be fa ff ff\n'
p873
S'.text:0000000000401e40\n.text:0000000000401e42\n.text:0000000000401e43\n.text:0000000000401e44\n.text:0000000000401e49\n.text:0000000000401e4e\n.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e5e\n.text:0000000000401e62\n.text:0000000000401e66\n.text:0000000000401e69\n.text:0000000000401e6b\n.text:0000000000401e6f\n.text:0000000000401e72\n.text:0000000000401e77\n.text:0000000000401e7b\n.text:0000000000401e7d\n.text:0000000000401e82\n.text:0000000000401e87\n.text:0000000000401e8c\n.text:0000000000401e8f\n.text:0000000000401e94\n.text:0000000000401e99\n.text:0000000000401e9e\n.text:0000000000401ea0\n.text:0000000000401ea5\n.text:0000000000401eaa\n.text:0000000000401eac\n.text:0000000000401eb1\n.text:0000000000401eb4\n.text:0000000000401eb6\n.text:0000000000401ebb\n.text:0000000000401ec0\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401eca\n.text:0000000000401ecc\n.text:0000000000401ece\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401ee0\n.text:0000000000401ee5\n.text:0000000000401eea\n.text:0000000000401eec\n.text:0000000000401eef\n.text:0000000000401ef4\n.text:0000000000401ef6\n.text:0000000000401efb\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f08\n.text:0000000000401f0e\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1d\n.text:0000000000401f1f\n.text:0000000000401f24\n.text:0000000000401f26\n.text:0000000000401f2b\n.text:0000000000401f30\n.text:0000000000401f35\n.text:0000000000401f38\n.text:0000000000401f3b\n.text:0000000000401f40\n.text:0000000000401f45\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f50\n.text:0000000000401f53\n.text:0000000000401f56\n.text:0000000000401f5a\n.text:0000000000401f5b\n.text:0000000000401f5d\n'
p874
tp875
sS'getcwd'
p876
(S'\n__stdcall getcwd(char * __buf, size_t __size)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getcwd(char *__buf,size_t __size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getcwd_0060f0f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x0060f0f8]\n'
p879
S'ff 25 62 d8 20 00\n'
p880
S'.plt:0000000000401890\n'
p881
tp882
sS'lsetfileconat'
p883
(S'\n__stdcall lsetfileconat(char * file, security_context_t con)\n'
p884
V\u000aint lsetfileconat(char *file,security_context_t con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*con == '/')) {\u000a    __fd = lsetfilecon(con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = lsetfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_00407674:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = lsetfilecon(con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_00407674;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x00407513\nCMP byte ptr [RBX],0x2f\nJNZ 0x0040752f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404920\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004095f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040759f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00404920\nMOV R15D,EAX\nCALL 0x00401700\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x00407576\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x004016e0\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x00407653\nCMP EDX,0x26\nJA 0x00407643\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x00407643\nLEA RDI,[RSP + 0x10]\nCALL 0x00408ef0\nTEST EAX,EAX\nJNZ 0x00407668\nTEST EBP,EBP\nJS 0x004075d8\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x004075d8\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nCALL 0x00401700\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x00407653\nMOV EDI,EBP\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00407601\nCALL 0x00401700\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x00407653\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00404920\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0040761e\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f40\nTEST EAX,EAX\nJNZ 0x00407674\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nTEST EBX,EBX\nJZ 0x00407653\nCALL 0x00401700\nMOV dword ptr [RAX],EBX\nJMP 0x00407653\nCMP EDX,0x5f\nJZ 0x0040759f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408db0\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408df0\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 f1 d3 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 af 20 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 cc d3 ff ff\n41 89 c7\ne8 a4 a1 ff ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 6d a1 ff ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 47 19 00 00\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 9b 19 00 00\ne8 36 a1 ff ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 01 a4 ff ff\n85 c0\n74 1e\ne8 18 a1 ff ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 69 19 00 00\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 14 d3 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 e4 a0 ff ff\n8b 18\n48 8d 7c 24 10\ne8 18 19 00 00\n85 c0\n75 48\n48 8d 7c 24 10\ne8 2a 19 00 00\n85 db\n74 19\ne8 c1 a0 ff ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 93 a0 ff ff\n8b 38\ne8 3c 17 00 00\ne8 87 a0 ff ff\n8b 38\ne8 70 17 00 00\n'
p887
S'.text:00000000004074f0\n.text:00000000004074f1\n.text:00000000004074f3\n.text:00000000004074f5\n.text:00000000004074f7\n.text:00000000004074f9\n.text:00000000004074fa\n.text:0000000000407501\n.text:0000000000407504\n.text:0000000000407507\n.text:0000000000407509\n.text:000000000040750c\n.text:000000000040750e\n.text:0000000000407511\n.text:0000000000407513\n.text:0000000000407516\n.text:0000000000407519\n.text:0000000000407520\n.text:0000000000407521\n.text:0000000000407523\n.text:0000000000407525\n.text:0000000000407527\n.text:0000000000407529\n.text:000000000040752a\n.text:000000000040752f\n.text:0000000000407534\n.text:0000000000407537\n.text:0000000000407539\n.text:000000000040753c\n.text:0000000000407541\n.text:0000000000407544\n.text:0000000000407547\n.text:0000000000407549\n.text:000000000040754c\n.text:000000000040754f\n.text:0000000000407554\n.text:0000000000407557\n.text:000000000040755c\n.text:0000000000407561\n.text:0000000000407563\n.text:0000000000407566\n.text:0000000000407568\n.text:000000000040756b\n.text:000000000040756e\n.text:0000000000407573\n.text:0000000000407576\n.text:000000000040757a\n.text:0000000000407580\n.text:0000000000407583\n.text:0000000000407589\n.text:000000000040758b\n.text:0000000000407595\n.text:0000000000407599\n.text:000000000040759f\n.text:00000000004075a4\n.text:00000000004075a9\n.text:00000000004075ab\n.text:00000000004075b1\n.text:00000000004075b3\n.text:00000000004075b5\n.text:00000000004075b9\n.text:00000000004075bb\n.text:00000000004075c0\n.text:00000000004075c5\n.text:00000000004075ca\n.text:00000000004075d0\n.text:00000000004075d6\n.text:00000000004075d8\n.text:00000000004075da\n.text:00000000004075df\n.text:00000000004075e1\n.text:00000000004075e3\n.text:00000000004075e8\n.text:00000000004075eb\n.text:00000000004075ed\n.text:00000000004075f2\n.text:00000000004075f7\n.text:00000000004075f9\n.text:00000000004075ff\n.text:0000000000407601\n.text:0000000000407604\n.text:0000000000407607\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407611\n.text:0000000000407615\n.text:0000000000407617\n.text:000000000040761c\n.text:000000000040761e\n.text:0000000000407623\n.text:0000000000407628\n.text:000000000040762a\n.text:000000000040762c\n.text:0000000000407631\n.text:0000000000407636\n.text:0000000000407638\n.text:000000000040763a\n.text:000000000040763f\n.text:0000000000407641\n.text:0000000000407643\n.text:0000000000407646\n.text:000000000040764c\n.text:0000000000407651\n.text:0000000000407653\n.text:0000000000407656\n.text:000000000040765d\n.text:000000000040765e\n.text:0000000000407660\n.text:0000000000407662\n.text:0000000000407664\n.text:0000000000407666\n.text:0000000000407667\n.text:0000000000407668\n.text:000000000040766d\n.text:000000000040766f\n.text:0000000000407674\n.text:0000000000407679\n.text:000000000040767b\n'
p888
tp889
sS'save_cwd'
p890
(S'\n__stdcall save_cwd(saved_cwd * cwd)\n'
p891
V\u000aint save_cwd(saved_cwd *cwd)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  int iVar3;\u000a  \u000a  cwd->name = (char *)0x0;\u000a  iVar3 = 0;\u000a  iVar1 = open_safer(".");\u000a  cwd->desc = iVar1;\u000a  if (iVar1 < 0) {\u000a    pcVar2 = getcwd((char *)0x0,0);\u000a    cwd->name = pcVar2;\u000a    iVar3 = -(uint)(pcVar2 == (char *)0x0);\u000a  }\u000a  else {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV qword ptr [RBX + 0x8],0x0\nXOR EBP,EBP\nMOV EDI,0x40b5ca\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00407950\nMOV dword ptr [RBX],EAX\nTEST EAX,EAX\nJS 0x00408f22\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x004077d0\nJMP 0x00408f35\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401890\nMOV qword ptr [RBX + 0x8],RAX\nCMP RAX,0x1\nSBB EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p893
S'55\n53\n50\n48 89 fb\n48 c7 43 08 00 00 00 00\n31 ed\nbf ca b5 40 00\n31 f6\n31 c0\ne8 42 ea ff ff\n89 03\n85 c0\n78 0e\nbe 01 00 00 00\n89 c7\ne8 b0 e8 ff ff\neb 13\n31 ff\n31 f6\ne8 65 89 ff ff\n48 89 43 08\n48 83 f8 01\n19 ed\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p894
S'.text:0000000000408ef0\n.text:0000000000408ef1\n.text:0000000000408ef2\n.text:0000000000408ef3\n.text:0000000000408ef6\n.text:0000000000408efe\n.text:0000000000408f00\n.text:0000000000408f05\n.text:0000000000408f07\n.text:0000000000408f09\n.text:0000000000408f0e\n.text:0000000000408f10\n.text:0000000000408f12\n.text:0000000000408f14\n.text:0000000000408f19\n.text:0000000000408f1b\n.text:0000000000408f20\n.text:0000000000408f22\n.text:0000000000408f24\n.text:0000000000408f26\n.text:0000000000408f2b\n.text:0000000000408f2f\n.text:0000000000408f33\n.text:0000000000408f35\n.text:0000000000408f37\n.text:0000000000408f3b\n.text:0000000000408f3c\n.text:0000000000408f3d\n'
p895
tp896
sS'version_etc_va'
p897
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p898
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p899
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404dd0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404ddc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404df1\nINC R9\nCMP R9,0xa\nJC 0x00404db0\nMOV R8,RSP\nCALL 0x00404a10\nADD RSP,0x58\nRET\n'
p900
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p901
S'.text:0000000000404da0\n.text:0000000000404da4\n.text:0000000000404da7\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db7\n.text:0000000000404db9\n.text:0000000000404dbc\n.text:0000000000404dc0\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dd0\n.text:0000000000404dd4\n.text:0000000000404dd8\n.text:0000000000404ddc\n.text:0000000000404ddf\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404de8\n.text:0000000000404deb\n.text:0000000000404def\n.text:0000000000404df1\n.text:0000000000404df4\n.text:0000000000404df9\n.text:0000000000404dfd\n'
p902
tp903
sS'xzalloc'
p904
(S'\n__stdcall xzalloc(size_t s)\n'
p905
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p906
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404f30\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401870\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p907
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 34 c8 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p908
S'.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405023\n.text:0000000000405024\n.text:0000000000405027\n.text:000000000040502c\n.text:000000000040502f\n.text:0000000000405031\n.text:0000000000405034\n.text:0000000000405037\n.text:000000000040503c\n.text:000000000040503f\n.text:0000000000405043\n.text:0000000000405044\n.text:0000000000405046\n'
p909
tp910
sS'hash_print_statistics'
p911
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p912
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x40b9b0,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_0040b960 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040b960,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040b978,DAT_0040b970));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040b960,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040b978,DAT_0040b970));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_0040b990) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00407a40\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00407a20\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00407a30\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00407a50\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x40b9b0\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401ae0\nMOV ESI,0x1\nMOV EDX,0x40b9c8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401ae0\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x0040b960]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0040b970]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x0040b990]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x40b9e0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401ae0\nMOV ESI,0x1\nMOV EDX,0x40ba01\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401ae0\n'
p914
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba b0 b9 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 9f 9f ff ff\nbe 01 00 00 00\nba c8 b9 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 88 9f ff ff\n66 49 0f 6e cf\n66 0f 6f 15 fb 3d 00 00\n66 0f 62 ca\n66 0f 28 1d ff 3d 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 0a 3e 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba e0 b9 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 29 9f ff ff\nbe 01 00 00 00\nba 01 ba 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 04 9f ff ff\n'
p915
S'.text:0000000000407af0\n.text:0000000000407af1\n.text:0000000000407af3\n.text:0000000000407af5\n.text:0000000000407af7\n.text:0000000000407af9\n.text:0000000000407afa\n.text:0000000000407afb\n.text:0000000000407afe\n.text:0000000000407b01\n.text:0000000000407b06\n.text:0000000000407b09\n.text:0000000000407b0c\n.text:0000000000407b11\n.text:0000000000407b14\n.text:0000000000407b17\n.text:0000000000407b1c\n.text:0000000000407b1f\n.text:0000000000407b22\n.text:0000000000407b27\n.text:0000000000407b2a\n.text:0000000000407b2f\n.text:0000000000407b34\n.text:0000000000407b36\n.text:0000000000407b39\n.text:0000000000407b3c\n.text:0000000000407b41\n.text:0000000000407b46\n.text:0000000000407b4b\n.text:0000000000407b4d\n.text:0000000000407b50\n.text:0000000000407b53\n.text:0000000000407b58\n.text:0000000000407b5d\n.text:0000000000407b65\n.text:0000000000407b69\n.text:0000000000407b71\n.text:0000000000407b75\n.text:0000000000407b7a\n.text:0000000000407b7e\n.text:0000000000407b86\n.text:0000000000407b8b\n.text:0000000000407b8f\n.text:0000000000407b93\n.text:0000000000407b98\n.text:0000000000407b9c\n.text:0000000000407ba0\n.text:0000000000407ba5\n.text:0000000000407baa\n.text:0000000000407bac\n.text:0000000000407baf\n.text:0000000000407bb2\n.text:0000000000407bb7\n.text:0000000000407bbc\n.text:0000000000407bc1\n.text:0000000000407bc3\n.text:0000000000407bc6\n.text:0000000000407bc9\n.text:0000000000407bcd\n.text:0000000000407bce\n.text:0000000000407bd0\n.text:0000000000407bd2\n.text:0000000000407bd4\n.text:0000000000407bd6\n.text:0000000000407bd7\n'
p916
tp917
sS'i_ring_empty'
p918
(S'\n__stdcall i_ring_empty(I_ring * ir)\n'
p919
V\u000a_Bool i_ring_empty(I_ring *ir)\u000a\u000a{\u000a  return ir->ir_empty;\u000a}\u000a\u000a
p920
S'MOV AL,byte ptr [RDI + 0x1c]\nRET\n'
p921
S'8a 47 1c\nc3\n'
p922
S'.text:00000000004089f0\n.text:00000000004089f3\n'
p923
tp924
sS'next_prime'
p925
(S'\n__stdcall next_prime(size_t candidate)\n'
p926
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p927
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040891a\nJMP 0x00408929\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00408929\nMOV RDI,RBX\nCALL 0x00408940\nTEST AL,AL\nJZ 0x00408910\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p928
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p929
S'.text:00000000004088e0\n.text:00000000004088e2\n.text:00000000004088e3\n.text:00000000004088e4\n.text:00000000004088e8\n.text:00000000004088ed\n.text:00000000004088f1\n.text:00000000004088f5\n.text:00000000004088fc\n.text:0000000000408900\n.text:0000000000408902\n.text:0000000000408910\n.text:0000000000408914\n.text:0000000000408918\n.text:000000000040891a\n.text:000000000040891d\n.text:0000000000408922\n.text:0000000000408924\n.text:0000000000408926\n.text:0000000000408929\n.text:000000000040892c\n.text:0000000000408930\n.text:0000000000408931\n.text:0000000000408933\n'
p930
tp931
sS'process_files'
p932
(S'\n__stdcall process_files(char * * files)\n'
p933
V\u000a_Bool process_files(char **files)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  FTS *sp;\u000a  FTSENT *ent;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  byte bVar6;\u000a  int (*compar)(FTSENT **,FTSENT **);\u000a  \u000a  sp = xfts_open(files,compar);\u000a  ent = fts_read(sp);\u000a  bVar6 = 1;\u000a  while (ent != (FTSENT *)0x0) {\u000a    _Var2 = process_file(sp,ent);\u000a    bVar6 = bVar6 & _Var2;\u000a    ent = fts_read(sp);\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar1 = *puVar4;\u000a  if (uVar1 != 0) {\u000a    bVar6 = 0;\u000a    uVar5 = dcgettext(0,"fts_read failed",5);\u000a    error(0,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  iVar3 = fts_close(sp);\u000a  if (iVar3 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    bVar6 = 0;\u000a    uVar5 = dcgettext(0,"fts_close failed",5);\u000a    error(0,(ulong)uVar1,uVar5,uVar5);\u000a  }\u000a  return (_Bool)bVar6;\u000a}\u000a\u000a
p934
S'PUSH RBP\nPUSH R14\nPUSH RBX\nXOR EDX,EDX\nCALL 0x004050f0\nMOV R14,RAX\nMOV RDI,R14\nCALL 0x00405b60\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040245a\nNOP dword ptr [RAX]\nMOV RDI,R14\nMOV RSI,RAX\nCALL 0x004024d0\nAND BL,AL\nMOV RDI,R14\nCALL 0x00405b60\nTEST RAX,RAX\nJNZ 0x00402440\nCALL 0x00401700\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nJZ 0x00402489\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40a9d3\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401a40\nMOV RDI,R14\nCALL 0x004059e0\nTEST EAX,EAX\nJZ 0x004024c0\nCALL 0x00401700\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40a9e3\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401a40\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p935
S'55\n41 56\n53\n31 d2\ne8 c5 2c 00 00\n49 89 c6\n4c 89 f7\ne8 2a 37 00 00\nb3 01\n48 85 c0\n74 1d\n0f 1f 00\n4c 89 f7\n48 89 c6\ne8 85 00 00 00\n20 c3\n4c 89 f7\ne8 0b 37 00 00\n48 85 c0\n75 e6\ne8 a1 f2 ff ff\n8b 28\n85 ed\n74 24\n31 db\n31 ff\nbe d3 a9 40 00\nba 05 00 00 00\ne8 38 f3 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 b7 f5 ff ff\n4c 89 f7\ne8 4f 35 00 00\n85 c0\n74 2b\ne8 66 f2 ff ff\n8b 28\n31 db\n31 ff\nbe e3 a9 40 00\nba 05 00 00 00\ne8 01 f3 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 80 f5 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p936
S'.text:0000000000402420\n.text:0000000000402421\n.text:0000000000402423\n.text:0000000000402424\n.text:0000000000402426\n.text:000000000040242b\n.text:000000000040242e\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402438\n.text:000000000040243b\n.text:000000000040243d\n.text:0000000000402440\n.text:0000000000402443\n.text:0000000000402446\n.text:000000000040244b\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402455\n.text:0000000000402458\n.text:000000000040245a\n.text:000000000040245f\n.text:0000000000402461\n.text:0000000000402463\n.text:0000000000402465\n.text:0000000000402467\n.text:0000000000402469\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402478\n.text:000000000040247b\n.text:000000000040247d\n.text:000000000040247f\n.text:0000000000402481\n.text:0000000000402484\n.text:0000000000402489\n.text:000000000040248c\n.text:0000000000402491\n.text:0000000000402493\n.text:0000000000402495\n.text:000000000040249a\n.text:000000000040249c\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a5\n.text:00000000004024aa\n.text:00000000004024af\n.text:00000000004024b2\n.text:00000000004024b4\n.text:00000000004024b6\n.text:00000000004024b8\n.text:00000000004024bb\n.text:00000000004024c0\n.text:00000000004024c2\n.text:00000000004024c3\n.text:00000000004024c5\n.text:00000000004024c6\n'
p937
tp938
sS'lsetfilecon'
p939
(S'\n__stdcall lsetfilecon(char * file, security_context_t con)\n'
p940
V\u000aint lsetfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p941
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p942
S'50\ne8 da cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p943
S'.text:0000000000404920\n.text:0000000000404921\n.text:0000000000404926\n.text:000000000040492c\n.text:0000000000404931\n.text:0000000000404932\n'
p944
tp945
sS'openat_restore_fail'
p946
(S'\n__stdcall openat_restore_fail()\n'
p947
V\u000avoid openat_restore_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"failed to return to initial working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x0060f260]\nXOR EDI,EDI\nMOV ESI,0x40bbc0\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401a40\nCALL 0x004016f0\n'
p949
S'55\n53\n50\n89 fb\n8b 2d 65 64 20 00\n31 ff\nbe c0 bb 40 00\nba 05 00 00 00\ne8 a4 89 ff ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 23 8c ff ff\ne8 ce 88 ff ff\n'
p950
S'.text:0000000000408df0\n.text:0000000000408df1\n.text:0000000000408df2\n.text:0000000000408df3\n.text:0000000000408df5\n.text:0000000000408dfb\n.text:0000000000408dfd\n.text:0000000000408e02\n.text:0000000000408e07\n.text:0000000000408e0c\n.text:0000000000408e0f\n.text:0000000000408e11\n.text:0000000000408e13\n.text:0000000000408e15\n.text:0000000000408e18\n.text:0000000000408e1d\n'
p951
tp952
sS'chdir_long'
p953
(S'\n__stdcall chdir_long(char * dir)\n'
p954
V\u000aint chdir_long(char *dir)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  undefined *puVar5;\u000a  char *pcVar6;\u000a  cd_buf local_30 [2];\u000a  \u000a  iVar2 = chdir(dir);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  piVar3 = __errno_location();\u000a  if (*piVar3 != 0x24) {\u000a    return iVar2;\u000a  }\u000a  sVar4 = strlen(dir);\u000a  cdb_init(local_30);\u000a  if (sVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 < len","lib/chdir-long.c",0x7e,"int chdir_long(char *)");\u000a  }\u000a  if (sVar4 < 0x1000) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("4096 <= len","lib/chdir-long.c",0x7f,"int chdir_long(char *)");\u000a  }\u000a  pcVar6 = dir + sVar4;\u000a  sVar4 = strspn(dir,"/");\u000a  if (sVar4 == 0) {\u000aLAB_004090cf:\u000a    cVar1 = *dir;\u000a  }\u000a  else {\u000a    if (sVar4 != 2) {\u000a      iVar2 = cdb_advance_fd(local_30,"/");\u000a      if (iVar2 != 0) goto LAB_00409183;\u000a      dir = dir + sVar4;\u000a      goto LAB_004090cf;\u000a    }\u000a    puVar5 = (undefined *)memchr(dir + 3,0x2f,(size_t)(pcVar6 + -(long)(dir + 3)));\u000a    if (puVar5 == (undefined *)0x0) {\u000aLAB_00409195:\u000a      *piVar3 = 0x24;\u000a      return -1;\u000a    }\u000a    *puVar5 = 0;\u000a    iVar2 = cdb_advance_fd(local_30,dir);\u000a    *puVar5 = 0x2f;\u000a    if (iVar2 != 0) goto LAB_00409183;\u000a    dir = find_non_slash(puVar5 + 1);\u000a    cVar1 = *dir;\u000a  }\u000a  if (cVar1 == '/') {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("*dir != \u005c'/\u005c'","lib/chdir-long.c",0xa2,"int chdir_long(char *)");\u000a  }\u000a  if (pcVar6 < dir) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("dir <= dir_end","lib/chdir-long.c",0xa3,"int chdir_long(char *)");\u000a  }\u000a  if (0xfff < (long)(pcVar6 + -(long)dir)) {\u000a    do {\u000a      puVar5 = (undefined *)memrchr(dir,0x2f,0x1000);\u000a      if (puVar5 == (undefined *)0x0) goto LAB_00409195;\u000a      *puVar5 = 0;\u000a      if (0xfff < (long)(puVar5 + -(long)dir)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("slash - dir < 4096","lib/chdir-long.c",0xb3,"int chdir_long(char *)");\u000a      }\u000a      iVar2 = cdb_advance_fd(local_30,dir);\u000a      *puVar5 = 0x2f;\u000a      if (iVar2 != 0) goto LAB_00409183;\u000a      dir = find_non_slash(puVar5 + 1);\u000a    } while (0xfff < (long)(pcVar6 + -(long)dir));\u000a  }\u000a  if (((pcVar6 <= dir) || (iVar2 = cdb_advance_fd(local_30,dir), iVar2 == 0)) &&\u000a     (iVar2 = cdb_fchdir(local_30), iVar2 == 0)) {\u000a    cdb_free(local_30);\u000a    return 0;\u000a  }\u000aLAB_00409183:\u000a  iVar2 = *piVar3;\u000a  cdb_free(local_30);\u000a  *piVar3 = iVar2;\u000a  return -1;\u000a}\u000a\u000a
p955
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nCALL 0x00401800\nMOV EBP,EAX\nTEST EBP,EBP\nJZ 0x004090ae\nCALL 0x00401700\nMOV R14,RAX\nCMP dword ptr [R14],0x24\nJNZ 0x004091a1\nMOV RDI,RBX\nCALL 0x004017d0\nMOV R15,RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x00409240\nTEST R15,R15\nJZ 0x004091d7\nCMP R15,0xfff\nJBE 0x004091f0\nADD R15,RBX\nMOV ESI,0x40bcbf\nMOV RDI,RBX\nCALL 0x004018b0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004090cf\nCMP RBP,0x2\nJNZ 0x004090b5\nLEA RDI,[RBX + 0x3]\nMOV RDX,R15\nSUB RDX,RDI\nMOV ESI,0x2f\nCALL 0x004018d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00409195\nMOV byte ptr [RBP],0x0\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00409250\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00409183\nINC RBP\nMOV RDI,RBP\nCALL 0x00409290\nMOV RBX,RAX\nCMP byte ptr [RBX],0x2f\nJNZ 0x004090d8\nJMP 0x00409209\nXOR EBP,EBP\nJMP 0x004091a1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x40bcbf\nCALL 0x00409250\nTEST EAX,EAX\nJNZ 0x00409183\nADD RBX,RBP\nCMP byte ptr [RBX],0x2f\nJZ 0x00409209\nCMP RBX,R15\nJA 0x00409222\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0x1000\nJL 0x0040915f\nLEA R12,[RSP + 0x8]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV ESI,0x2f\nMOV EDX,0x1000\nMOV RDI,RBX\nCALL 0x00401a50\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00409195\nMOV byte ptr [RBP],0x0\nMOV RAX,RBP\nSUB RAX,RBX\nCMP RAX,0x1000\nJGE 0x004091be\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00409250\nMOV byte ptr [RBP],0x2f\nTEST EAX,EAX\nJNZ 0x00409183\nINC RBP\nMOV RDI,RBP\nCALL 0x00409290\nMOV RBX,RAX\nMOV RAX,R15\nSUB RAX,RBX\nCMP RAX,0xfff\nJG 0x00409100\nCMP RBX,R15\nJNC 0x00409175\nLEA RDI,[RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00409250\nTEST EAX,EAX\nJNZ 0x00409183\nLEA RDI,[RSP + 0x8]\nCALL 0x004092b0\nTEST EAX,EAX\nJZ 0x004091b0\nMOV EBX,dword ptr [R14]\nLEA RDI,[RSP + 0x8]\nCALL 0x004092c0\nMOV dword ptr [R14],EBX\nJMP 0x0040919c\nMOV dword ptr [R14],0x24\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nLEA RDI,[RSP + 0x8]\nCALL 0x004092c0\nXOR EBP,EBP\nJMP 0x004091a1\nMOV EDI,0x40bc45\nMOV ESI,0x40bbf6\nMOV EDX,0xb3\nMOV ECX,0x40bc07\nCALL 0x00401860\nMOV EDI,0x40bbee\nMOV ESI,0x40bbf6\nMOV EDX,0x7e\nMOV ECX,0x40bc07\nCALL 0x00401860\nMOV EDI,0x40bc1e\nMOV ESI,0x40bbf6\nMOV EDX,0x7f\nMOV ECX,0x40bc07\nCALL 0x00401860\nMOV EDI,0x40bc2a\nMOV ESI,0x40bbf6\nMOV EDX,0xa2\nMOV ECX,0x40bc07\nCALL 0x00401860\nMOV EDI,0x40bc36\nMOV ESI,0x40bbf6\nMOV EDX,0xa3\nMOV ECX,0x40bc07\nCALL 0x00401860\n'
p956
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n48 89 fb\ne8 0c 88 ff ff\n89 c5\n85 ed\n0f 84 b0 00 00 00\ne8 fd 86 ff ff\n49 89 c6\n41 83 3e 24\n0f 85 91 01 00 00\n48 89 df\ne8 b8 87 ff ff\n49 89 c7\n48 8d 7c 24 08\ne8 1b 02 00 00\n4d 85 ff\n0f 84 a9 01 00 00\n49 81 ff ff 0f 00 00\n0f 86 b5 01 00 00\n49 01 df\nbe bf bc 40 00\n48 89 df\ne8 65 88 ff ff\n48 89 c5\n48 85 ed\n74 7c\n48 83 fd 02\n75 5c\n48 8d 7b 03\n4c 89 fa\n48 29 fa\nbe 2f 00 00 00\ne8 63 88 ff ff\n48 89 c5\n48 85 ed\n0f 84 1c 01 00 00\nc6 45 00 00\n48 8d 7c 24 08\n48 89 de\ne8 c6 01 00 00\nc6 45 00 2f\n85 c0\n0f 85 ed 00 00 00\n48 ff c5\n48 89 ef\ne8 ef 01 00 00\n48 89 c3\n80 3b 2f\n75 2f\ne9 5b 01 00 00\n31 ed\ne9 ec 00 00 00\n48 8d 7c 24 08\nbe bf bc 40 00\ne8 8c 01 00 00\n85 c0\n0f 85 b7 00 00 00\n48 01 eb\n80 3b 2f\n0f 84 31 01 00 00\n4c 39 fb\n0f 87 41 01 00 00\n4c 89 f8\n48 29 d8\n48 3d 00 10 00 00\n7c 70\n4c 8d 64 24 08\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nbe 2f 00 00 00\nba 00 10 00 00\n48 89 df\ne8 3e 89 ff ff\n48 89 c5\n48 85 ed\n74 7b\nc6 45 00 00\n48 89 e8\n48 29 d8\n48 3d 00 10 00 00\n0f 8d 8e 00 00 00\n4c 89 e7\n48 89 de\ne8 15 01 00 00\nc6 45 00 2f\n85 c0\n75 40\n48 ff c5\n48 89 ef\ne8 42 01 00 00\n48 89 c3\n4c 89 f8\n48 29 d8\n48 3d ff 0f 00 00\n7f a1\n4c 39 fb\n73 11\n48 8d 7c 24 08\n48 89 de\ne8 df 00 00 00\n85 c0\n75 0e\n48 8d 7c 24 08\ne8 31 01 00 00\n85 c0\n74 2d\n41 8b 1e\n48 8d 7c 24 08\ne8 30 01 00 00\n41 89 1e\neb 07\n41 c7 06 24 00 00 00\nbd ff ff ff ff\n89 e8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8d 7c 24 08\ne8 06 01 00 00\n31 ed\neb e3\nbf 45 bc 40 00\nbe f6 bb 40 00\nba b3 00 00 00\nb9 07 bc 40 00\ne8 89 86 ff ff\nbf ee bb 40 00\nbe f6 bb 40 00\nba 7e 00 00 00\nb9 07 bc 40 00\ne8 70 86 ff ff\nbf 1e bc 40 00\nbe f6 bb 40 00\nba 7f 00 00 00\nb9 07 bc 40 00\ne8 57 86 ff ff\nbf 2a bc 40 00\nbe f6 bb 40 00\nba a2 00 00 00\nb9 07 bc 40 00\ne8 3e 86 ff ff\nbf 36 bc 40 00\nbe f6 bb 40 00\nba a3 00 00 00\nb9 07 bc 40 00\ne8 25 86 ff ff\n'
p957
S'.text:0000000000408fe0\n.text:0000000000408fe1\n.text:0000000000408fe3\n.text:0000000000408fe5\n.text:0000000000408fe7\n.text:0000000000408fe8\n.text:0000000000408fec\n.text:0000000000408fef\n.text:0000000000408ff4\n.text:0000000000408ff6\n.text:0000000000408ff8\n.text:0000000000408ffe\n.text:0000000000409003\n.text:0000000000409006\n.text:000000000040900a\n.text:0000000000409010\n.text:0000000000409013\n.text:0000000000409018\n.text:000000000040901b\n.text:0000000000409020\n.text:0000000000409025\n.text:0000000000409028\n.text:000000000040902e\n.text:0000000000409035\n.text:000000000040903b\n.text:000000000040903e\n.text:0000000000409043\n.text:0000000000409046\n.text:000000000040904b\n.text:000000000040904e\n.text:0000000000409051\n.text:0000000000409053\n.text:0000000000409057\n.text:0000000000409059\n.text:000000000040905d\n.text:0000000000409060\n.text:0000000000409063\n.text:0000000000409068\n.text:000000000040906d\n.text:0000000000409070\n.text:0000000000409073\n.text:0000000000409079\n.text:000000000040907d\n.text:0000000000409082\n.text:0000000000409085\n.text:000000000040908a\n.text:000000000040908e\n.text:0000000000409090\n.text:0000000000409096\n.text:0000000000409099\n.text:000000000040909c\n.text:00000000004090a1\n.text:00000000004090a4\n.text:00000000004090a7\n.text:00000000004090a9\n.text:00000000004090ae\n.text:00000000004090b0\n.text:00000000004090b5\n.text:00000000004090ba\n.text:00000000004090bf\n.text:00000000004090c4\n.text:00000000004090c6\n.text:00000000004090cc\n.text:00000000004090cf\n.text:00000000004090d2\n.text:00000000004090d8\n.text:00000000004090db\n.text:00000000004090e1\n.text:00000000004090e4\n.text:00000000004090e7\n.text:00000000004090ed\n.text:00000000004090ef\n.text:00000000004090f4\n.text:0000000000409100\n.text:0000000000409105\n.text:000000000040910a\n.text:000000000040910d\n.text:0000000000409112\n.text:0000000000409115\n.text:0000000000409118\n.text:000000000040911a\n.text:000000000040911e\n.text:0000000000409121\n.text:0000000000409124\n.text:000000000040912a\n.text:0000000000409130\n.text:0000000000409133\n.text:0000000000409136\n.text:000000000040913b\n.text:000000000040913f\n.text:0000000000409141\n.text:0000000000409143\n.text:0000000000409146\n.text:0000000000409149\n.text:000000000040914e\n.text:0000000000409151\n.text:0000000000409154\n.text:0000000000409157\n.text:000000000040915d\n.text:000000000040915f\n.text:0000000000409162\n.text:0000000000409164\n.text:0000000000409169\n.text:000000000040916c\n.text:0000000000409171\n.text:0000000000409173\n.text:0000000000409175\n.text:000000000040917a\n.text:000000000040917f\n.text:0000000000409181\n.text:0000000000409183\n.text:0000000000409186\n.text:000000000040918b\n.text:0000000000409190\n.text:0000000000409193\n.text:0000000000409195\n.text:000000000040919c\n.text:00000000004091a1\n.text:00000000004091a3\n.text:00000000004091a7\n.text:00000000004091a8\n.text:00000000004091aa\n.text:00000000004091ac\n.text:00000000004091ae\n.text:00000000004091af\n.text:00000000004091b0\n.text:00000000004091b5\n.text:00000000004091ba\n.text:00000000004091bc\n.text:00000000004091be\n.text:00000000004091c3\n.text:00000000004091c8\n.text:00000000004091cd\n.text:00000000004091d2\n.text:00000000004091d7\n.text:00000000004091dc\n.text:00000000004091e1\n.text:00000000004091e6\n.text:00000000004091eb\n.text:00000000004091f0\n.text:00000000004091f5\n.text:00000000004091fa\n.text:00000000004091ff\n.text:0000000000409204\n.text:0000000000409209\n.text:000000000040920e\n.text:0000000000409213\n.text:0000000000409218\n.text:000000000040921d\n.text:0000000000409222\n.text:0000000000409227\n.text:000000000040922c\n.text:0000000000409231\n.text:0000000000409236\n'
p958
tp959
sS'hash_insert'
p960
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p961
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p962
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00408450\nCMP EAX,-0x1\nJZ 0x00408741\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00408743\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p963
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p964
S'.text:0000000000408720\n.text:0000000000408721\n.text:0000000000408725\n.text:0000000000408728\n.text:000000000040872d\n.text:0000000000408732\n.text:0000000000408735\n.text:0000000000408737\n.text:0000000000408739\n.text:000000000040873f\n.text:0000000000408741\n.text:0000000000408743\n.text:0000000000408746\n.text:000000000040874a\n.text:000000000040874b\n'
p965
tp966
sS'gettext_quote'
p967
(S'\n__stdcall gettext_quote(char * msgid)\n'
p968
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040b1de;\u000a        pcVar2 = &DAT_0040b1e2;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004017b0\nCMP RAX,RBX\nJNZ 0x00404398\nCALL 0x00408a80\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004043a0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404348\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b1ce\nMOV EAX,0x40b1d2\nJMP 0x00404394\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004043a0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404386\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b1de\nMOV EAX,0x40b1e2\nJMP 0x00404394\nCMP R14D,0x9\nMOV ECX,0x40b1c4\nMOV EAX,0x40bc34\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p970
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 b7 d4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 79 47 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 ce b1 40 00\nb8 d2 b1 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 de b1 40 00\nb8 e2 b1 40 00\neb 0e\n41 83 fe 09\nb9 c4 b1 40 00\nb8 34 bc 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p971
S'.text:00000000004042e0\n.text:00000000004042e1\n.text:00000000004042e3\n.text:00000000004042e4\n.text:00000000004042e7\n.text:00000000004042ea\n.text:00000000004042ec\n.text:00000000004042f1\n.text:00000000004042f4\n.text:00000000004042f9\n.text:00000000004042fc\n.text:0000000000404302\n.text:0000000000404307\n.text:000000000040430a\n.text:000000000040430f\n.text:0000000000404314\n.text:0000000000404319\n.text:000000000040431f\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432a\n.text:000000000040432c\n.text:0000000000404331\n.text:0000000000404335\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433c\n.text:0000000000404341\n.text:0000000000404346\n.text:0000000000404348\n.text:000000000040434d\n.text:0000000000404352\n.text:0000000000404357\n.text:000000000040435d\n.text:0000000000404363\n.text:0000000000404366\n.text:0000000000404368\n.text:000000000040436a\n.text:000000000040436f\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404377\n.text:000000000040437a\n.text:000000000040437f\n.text:0000000000404384\n.text:0000000000404386\n.text:000000000040438a\n.text:000000000040438f\n.text:0000000000404394\n.text:0000000000404398\n.text:0000000000404399\n.text:000000000040439b\n.text:000000000040439c\n'
p972
tp973
sS'fsetfilecon'
p974
(S'\n__stdcall fsetfilecon(security_context_t con)\n'
p975
V\u000aint fsetfilecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p976
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p977
S'50\ne8 ba cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p978
S'.text:0000000000404940\n.text:0000000000404941\n.text:0000000000404946\n.text:000000000040494c\n.text:0000000000404951\n.text:0000000000404952\n'
p979
tp980
sS'fts_close'
p981
(S'\n__stdcall fts_close(FTS * sp)\n'
p982
V\u000aint fts_close(FTS *sp)\u000a\u000a{\u000a  _ftsent *__ptr;\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  _ftsent **pp_Var5;\u000a  int *piVar6;\u000a  \u000a  __ptr = sp->fts_cur;\u000a  if (__ptr != (_ftsent *)0x0) {\u000a    lVar2 = __ptr->fts_level;\u000a    while (-1 < lVar2) {\u000a      pp_Var5 = &__ptr->fts_link;\u000a      if (__ptr->fts_link == (_ftsent *)0x0) {\u000a        pp_Var5 = &__ptr->fts_parent;\u000a      }\u000a      p_Var1 = *pp_Var5;\u000a      free(__ptr);\u000a      lVar2 = p_Var1->fts_level;\u000a      __ptr = p_Var1;\u000a    }\u000a    free(__ptr);\u000a  }\u000a  if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a    fts_lfree((FTSENT *)sp->fts_child);\u000a  }\u000a  free(sp->fts_array);\u000a  free(sp->fts_path);\u000a  if ((sp->fts_options & 0x200U) == 0) {\u000a    iVar3 = 0;\u000a    if ((sp->fts_options & 4U) != 0) goto LAB_00405a9f;\u000a    iVar3 = fchdir(sp->fts_rfd);\u000a    if (iVar3 == 0) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar3 = *piVar6;\u000a    }\u000a    iVar4 = close(sp->fts_rfd);\u000a    if (iVar3 != 0) goto LAB_00405a9f;\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a    if (sp->fts_cwd_fd < 0) goto LAB_00405a9f;\u000a    iVar4 = close(sp->fts_cwd_fd);\u000a  }\u000a  if (iVar4 != 0) {\u000a    piVar6 = __errno_location();\u000a    iVar3 = *piVar6;\u000a  }\u000aLAB_00405a9f:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  if ((Hash_table *)sp->fts_leaf_optimization_works_ht != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_leaf_optimization_works_ht);\u000a  }\u000a  free_dir(sp);\u000a  free(sp);\u000a  if (iVar3 == 0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar3;\u000a    iVar3 = -1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p983
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nTEST RBX,RBX\nJZ 0x00405a2b\nCMP qword ptr [RBX + 0x58],0x0\nJS 0x00405a23\nMOV RDI,RBX\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + 0x10],0x0\nLEA RAX,[RBX + 0x10]\nLEA RCX,[RBX + 0x8]\nCMOVZ RAX,RCX\nMOV RBX,qword ptr [RAX]\nCALL 0x004016e0\nCMP qword ptr [RBX + 0x58],0x0\nMOV RDI,RBX\nJNS 0x00405a00\nMOV RDI,RBX\nCALL 0x004016e0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00405a39\nCALL 0x004059a0\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x004016e0\nMOV RDI,qword ptr [R14 + 0x20]\nCALL 0x004016e0\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AH,0x2\nJNZ 0x00405a70\nXOR EBX,EBX\nTEST AL,0x4\nJNZ 0x00405a9f\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00405a85\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nJMP 0x00405a87\nMOV EDI,dword ptr [R14 + 0x2c]\nXOR EBX,EBX\nTEST EDI,EDI\nJS 0x00405a9f\nCALL 0x004018a0\nTEST EAX,EAX\nJNZ 0x00405a98\nJMP 0x00405a9f\nXOR EBX,EBX\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x004018a0\nTEST EBX,EBX\nJNZ 0x00405a9f\nTEST EAX,EAX\nJZ 0x00405a9f\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nLEA RDI,[R14 + 0x60]\nCALL 0x00405af0\nMOV RDI,qword ptr [R14 + 0x50]\nTEST RDI,RDI\nJZ 0x00405ab6\nCALL 0x00408120\nMOV RDI,R14\nCALL 0x00405b30\nMOV RDI,R14\nCALL 0x004016e0\nTEST EBX,EBX\nJZ 0x00405ad8\nCALL 0x00401700\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nJMP 0x00405ada\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p984
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n48 85 db\n74 3c\n48 83 7b 58 00\n78 2d\n48 89 df\n0f 1f 80 00 00 00 00\n48 83 7b 10 00\n48 8d 43 10\n48 8d 4b 08\n48 0f 44 c1\n48 8b 18\ne8 c7 bc ff ff\n48 83 7b 58 00\n48 89 df\n79 dd\n48 89 df\ne8 b5 bc ff ff\n49 8b 7e 08\n48 85 ff\n74 05\ne8 67 ff ff ff\n49 8b 7e 10\ne8 9e bc ff ff\n49 8b 7e 20\ne8 95 bc ff ff\n41 8b 46 48\nf6 c4 02\n75 1c\n31 db\na8 04\n75 45\n41 8b 7e 28\ne8 7d bf ff ff\n85 c0\n74 1e\ne8 94 bc ff ff\n8b 18\neb 17\n41 8b 7e 2c\n31 db\n85 ff\n78 25\ne8 21 be ff ff\n85 c0\n75 15\neb 1a\n31 db\n41 8b 7e 28\ne8 10 be ff ff\n85 db\n75 0b\n85 c0\n74 07\ne8 63 bc ff ff\n8b 18\n49 8d 7e 60\ne8 48 00 00 00\n49 8b 7e 50\n48 85 ff\n74 05\ne8 6a 26 00 00\n4c 89 f7\ne8 72 00 00 00\n4c 89 f7\ne8 1a bc ff ff\n85 db\n74 0e\ne8 31 bc ff ff\n89 18\nb8 ff ff ff ff\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p985
S'.text:00000000004059e0\n.text:00000000004059e2\n.text:00000000004059e3\n.text:00000000004059e4\n.text:00000000004059e7\n.text:00000000004059ea\n.text:00000000004059ed\n.text:00000000004059ef\n.text:00000000004059f4\n.text:00000000004059f6\n.text:00000000004059f9\n.text:0000000000405a00\n.text:0000000000405a05\n.text:0000000000405a09\n.text:0000000000405a0d\n.text:0000000000405a11\n.text:0000000000405a14\n.text:0000000000405a19\n.text:0000000000405a1e\n.text:0000000000405a21\n.text:0000000000405a23\n.text:0000000000405a26\n.text:0000000000405a2b\n.text:0000000000405a2f\n.text:0000000000405a32\n.text:0000000000405a34\n.text:0000000000405a39\n.text:0000000000405a3d\n.text:0000000000405a42\n.text:0000000000405a46\n.text:0000000000405a4b\n.text:0000000000405a4f\n.text:0000000000405a52\n.text:0000000000405a54\n.text:0000000000405a56\n.text:0000000000405a58\n.text:0000000000405a5a\n.text:0000000000405a5e\n.text:0000000000405a63\n.text:0000000000405a65\n.text:0000000000405a67\n.text:0000000000405a6c\n.text:0000000000405a6e\n.text:0000000000405a70\n.text:0000000000405a74\n.text:0000000000405a76\n.text:0000000000405a78\n.text:0000000000405a7a\n.text:0000000000405a7f\n.text:0000000000405a81\n.text:0000000000405a83\n.text:0000000000405a85\n.text:0000000000405a87\n.text:0000000000405a8b\n.text:0000000000405a90\n.text:0000000000405a92\n.text:0000000000405a94\n.text:0000000000405a96\n.text:0000000000405a98\n.text:0000000000405a9d\n.text:0000000000405a9f\n.text:0000000000405aa3\n.text:0000000000405aa8\n.text:0000000000405aac\n.text:0000000000405aaf\n.text:0000000000405ab1\n.text:0000000000405ab6\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac1\n.text:0000000000405ac6\n.text:0000000000405ac8\n.text:0000000000405aca\n.text:0000000000405acf\n.text:0000000000405ad1\n.text:0000000000405ad6\n.text:0000000000405ad8\n.text:0000000000405ada\n.text:0000000000405ade\n.text:0000000000405adf\n.text:0000000000405ae1\n'
p986
tp987
sS'fclose'
p988
(S'\n__stdcall fclose(FILE * __stream)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060f078)();\u000a  return iVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x0060f078]\n'
p991
S'ff 25 e2 d8 20 00\n'
p992
S'.plt:0000000000401790\n'
p993
tp994
sS'context_role_set'
p995
(S'\n__stdcall context_role_set(char * s)\n'
p996
V\u000aint context_role_set(char *s)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p997
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p998
S'50\ne8 8a cf ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p999
S'.text:0000000000404770\n.text:0000000000404771\n.text:0000000000404776\n.text:000000000040477c\n.text:0000000000404781\n.text:0000000000404782\n'
p1000
tp1001
sS'__ctype_get_mb_cur_max'
p1002
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060f090)();\u000a  return sVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060f090]\n'
p1005
S'ff 25 ca d8 20 00\n'
p1006
S'.plt:00000000004017c0\n'
p1007
tp1008
sS'lstat'
p1009
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p1010
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060f0a0)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1011
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004017e0\n'
p1012
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 20 7f ff ff\n'
p1013
S'.text:00000000004098b0\n.text:00000000004098b3\n.text:00000000004098b6\n.text:00000000004098bb\n'
p1014
tp1015
sS'quotearg_n_style'
p1016
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1017
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404010\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403de0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1019
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1020
S'.text:0000000000403fd0\n.text:0000000000403fd1\n.text:0000000000403fd3\n.text:0000000000403fd4\n.text:0000000000403fd8\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fe2\n.text:0000000000403fe5\n.text:0000000000403fea\n.text:0000000000403ff1\n.text:0000000000403ff3\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffe\n.text:0000000000404002\n.text:0000000000404003\n.text:0000000000404005\n.text:0000000000404006\n'
p1021
tp1022
sS'hash_clear'
p1023
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p1024
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p1025
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x004080aa\nJMP 0x00408105\nTEST CL,CL\nJZ 0x00408099\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408105\nCMP qword ptr [R14],0x0\nJZ 0x004080a0\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00408090\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x004080da\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x004080d0\nJMP 0x00408090\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1026
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p1027
S'.text:0000000000408070\n.text:0000000000408072\n.text:0000000000408074\n.text:0000000000408075\n.text:0000000000408078\n.text:000000000040807b\n.text:000000000040807f\n.text:0000000000408081\n.text:0000000000408090\n.text:0000000000408092\n.text:0000000000408094\n.text:0000000000408097\n.text:0000000000408099\n.text:000000000040809c\n.text:00000000004080a0\n.text:00000000004080a4\n.text:00000000004080a8\n.text:00000000004080aa\n.text:00000000004080ae\n.text:00000000004080b0\n.text:00000000004080b4\n.text:00000000004080b8\n.text:00000000004080bb\n.text:00000000004080be\n.text:00000000004080c1\n.text:00000000004080c3\n.text:00000000004080d0\n.text:00000000004080d3\n.text:00000000004080d5\n.text:00000000004080d8\n.text:00000000004080da\n.text:00000000004080e1\n.text:00000000004080e5\n.text:00000000004080e9\n.text:00000000004080ed\n.text:00000000004080f1\n.text:00000000004080f5\n.text:00000000004080f8\n.text:00000000004080fb\n.text:00000000004080fe\n.text:0000000000408101\n.text:0000000000408103\n.text:0000000000408105\n.text:0000000000408108\n.text:000000000040810d\n.text:000000000040810e\n.text:0000000000408110\n.text:0000000000408112\n'
p1028
tp1029
sS'setfilecon'
p1030
(S'\n__stdcall setfilecon(char * file, security_context_t con)\n'
p1031
V\u000aint setfilecon(char *file,security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1032
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1033
S'50\ne8 fa cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1034
S'.text:0000000000404900\n.text:0000000000404901\n.text:0000000000404906\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404912\n'
p1035
tp1036
sS'raw_hasher'
p1037
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p1038
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p1039
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00409750\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p1040
S'53\n48 89 f3\nbe 03 00 00 00\ne8 12 18 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p1041
S'.text:0000000000407f30\n.text:0000000000407f31\n.text:0000000000407f34\n.text:0000000000407f39\n.text:0000000000407f3e\n.text:0000000000407f40\n.text:0000000000407f43\n.text:0000000000407f46\n.text:0000000000407f47\n'
p1042
tp1043
sS'quote_n'
p1044
(S'\n__stdcall quote_n(char * arg)\n'
p1045
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV RDX,-0x1\nJMP 0x004042a0\n'
p1047
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1048
S'.text:00000000004042c0\n.text:00000000004042c7\n'
p1049
tp1050
sS'context_new'
p1051
(S'\n__stdcall context_new(char * s)\n'
p1052
V\u000acontext_t context_new(char *s)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return 0;\u000a}\u000a\u000a
p1053
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1054
S'50\ne8 da cf ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p1055
S'.text:0000000000404720\n.text:0000000000404721\n.text:0000000000404726\n.text:000000000040472c\n.text:000000000040472e\n.text:000000000040472f\n'
p1056
tp1057
sS'quotearg_alloc'
p1058
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1059
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403c50\n'
p1061
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1062
S'.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c48\n'
p1063
tp1064
sS'close_stdout_set_file_name'
p1065
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1066
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1067
S'MOV qword ptr [0x0060f360],RDI\nRET\n'
p1068
S'48 89 3d 59 c6 20 00\nc3\n'
p1069
S'.text:0000000000402d00\n.text:0000000000402d07\n'
p1070
tp1071
sS'check_tuning'
p1072
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p1073
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_0040b998 || (DAT_0040b99c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_0040b9a0)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_0040b998, fVar1 <= fVar4)) ||\u000a       ((DAT_0040b9a4 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p1074
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x40ba1c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00407fd3\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0040b998]\nJBE 0x00407fc9\nMOVSS XMM1,dword ptr [0x0040b99c]\nUCOMISS XMM1,XMM0\nJBE 0x00407fc9\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x0040b9a0]\nJBE 0x00407fc9\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00407fc9\nADDSS XMM1,dword ptr [0x0040b998]\nUCOMISS XMM0,XMM1\nJBE 0x00407fc9\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x0040b9a4]\nUCOMISS XMM2,XMM0\nJC 0x00407fc9\nUCOMISS XMM0,XMM1\nJA 0x00407fd3\nMOV qword ptr [RDI + 0x28],0x40ba1c\nXOR EAX,EAX\nRET\n'
p1075
S'48 8b 4f 28\nba 1c ba 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 1c 3a 00 00\n76 4b\nf3 0f 10 0d 16 3a 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 09 3a 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d eb 39 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 e5 39 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 1c ba 40 00\n31 c0\nc3\n'
p1076
S'.text:0000000000407f60\n.text:0000000000407f64\n.text:0000000000407f69\n.text:0000000000407f6b\n.text:0000000000407f6e\n.text:0000000000407f70\n.text:0000000000407f75\n.text:0000000000407f7c\n.text:0000000000407f7e\n.text:0000000000407f86\n.text:0000000000407f89\n.text:0000000000407f8b\n.text:0000000000407f90\n.text:0000000000407f97\n.text:0000000000407f99\n.text:0000000000407f9d\n.text:0000000000407fa0\n.text:0000000000407fa3\n.text:0000000000407fa5\n.text:0000000000407fad\n.text:0000000000407fb0\n.text:0000000000407fb2\n.text:0000000000407fb7\n.text:0000000000407fbf\n.text:0000000000407fc2\n.text:0000000000407fc4\n.text:0000000000407fc7\n.text:0000000000407fc9\n.text:0000000000407fd1\n.text:0000000000407fd3\n'
p1077
tp1078
sS'__libc_csu_init'
p1079
(S'\n__stdcall __libc_csu_init()\n'
p1080
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p1081
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ee08]\nPUSH RBP\nLEA RBP,[0x60ee10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004016a0\nTEST RBP,RBP\nJZ 0x00409836\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00409820\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1082
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 16 56 20 00\n55\n48 8d 2d 16 56 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 8f 7e ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1083
S'.text:00000000004097e0\n.text:00000000004097e2\n.text:00000000004097e4\n.text:00000000004097e7\n.text:00000000004097e9\n.text:00000000004097eb\n.text:00000000004097f2\n.text:00000000004097f3\n.text:00000000004097fa\n.text:00000000004097fb\n.text:00000000004097fe\n.text:0000000000409801\n.text:0000000000409804\n.text:0000000000409808\n.text:000000000040980c\n.text:0000000000409811\n.text:0000000000409814\n.text:0000000000409816\n.text:0000000000409818\n.text:0000000000409820\n.text:0000000000409823\n.text:0000000000409826\n.text:0000000000409829\n.text:000000000040982d\n.text:0000000000409831\n.text:0000000000409834\n.text:0000000000409836\n.text:000000000040983a\n.text:000000000040983b\n.text:000000000040983c\n.text:000000000040983e\n.text:0000000000409840\n.text:0000000000409842\n.text:0000000000409844\n'
p1084
tp1085
sS'c_isdigit'
p1086
(S'\n__stdcall c_isdigit()\n'
p1087
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p1088
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p1089
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p1090
S'.text:0000000000407700\n.text:0000000000407703\n.text:0000000000407706\n.text:0000000000407709\n'
p1091
tp1092
sS'hash_do_for_each'
p1093
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p1094
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00407dd7\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x00407dca\nTEST R13,R13\nJZ 0x00407dca\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00407dd9\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00407db0\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00407da1\nJMP 0x00407dd9\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000407d80\n.text:0000000000407d81\n.text:0000000000407d83\n.text:0000000000407d85\n.text:0000000000407d87\n.text:0000000000407d89\n.text:0000000000407d8a\n.text:0000000000407d8b\n.text:0000000000407d8e\n.text:0000000000407d91\n.text:0000000000407d94\n.text:0000000000407d98\n.text:0000000000407d9d\n.text:0000000000407d9f\n.text:0000000000407da1\n.text:0000000000407da6\n.text:0000000000407da8\n.text:0000000000407dab\n.text:0000000000407dad\n.text:0000000000407db0\n.text:0000000000407db4\n.text:0000000000407db7\n.text:0000000000407dba\n.text:0000000000407dbc\n.text:0000000000407dbe\n.text:0000000000407dc1\n.text:0000000000407dc5\n.text:0000000000407dc8\n.text:0000000000407dca\n.text:0000000000407dce\n.text:0000000000407dd3\n.text:0000000000407dd5\n.text:0000000000407dd7\n.text:0000000000407dd9\n.text:0000000000407ddc\n.text:0000000000407de0\n.text:0000000000407de1\n.text:0000000000407de3\n.text:0000000000407de5\n.text:0000000000407de7\n.text:0000000000407de9\n.text:0000000000407dea\n'
p1098
tp1099
sS'usage'
p1100
(S'\n__stdcall usage()\n'
p1101
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... CONTEXT FILE...\u005cn  or:  %s [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FILE...\u005cn  or:  %s [OPTION]... --reference=RFILE FILE...\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "Change the SELinux security context of each FILE to CONTEXT.\u005cnWith --reference, change the security context of each FILE to that of RFILE.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "      --dereference      affect the referent of each symbolic link (this is\u005cn                         the default), rather than the symbolic link itself\u005cn  -h, --no-dereference   affect symbolic links instead of any referenced file\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -u, --user=USER        set user USER in the target security context\u005cn  -r, --role=ROLE        set role ROLE in the target security context\u005cn  -t, --type=TYPE        set type TYPE in the target security context\u005cn  -l, --range=RANGE      set range RANGE in the target security context\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --no-preserve-root  do not treat \u005c'/\u005c' specially (the default)\u005cn      --preserve-root    fail to operate recursively on \u005c'/\u005c'\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --reference=RFILE  use RFILE\u005c's security context rather than specifying\u005cn                         a CONTEXT value\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -R, --recursive        operate on files and directories recursively\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -v, --verbose          output a diagnostic for every file processed\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p1102
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401dbc\nXOR EDI,EDI\nMOV ESI,0x409fb0\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f370]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x00401a20\nXOR EDI,EDI\nMOV ESI,0x40a04e\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nCALL 0x00401e10\nXOR EDI,EDI\nMOV ESI,0x40a0d9\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a1c0\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a2db\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a35b\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a3d2\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a419\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a460\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a631\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nXOR EDI,EDI\nMOV ESI,0x40a65e\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nCALL 0x004018f0\nCALL 0x00401e40\nMOV EDI,EBX\nCALL 0x00401ac0\nCALL 0x00401dd0\nMOV EDI,EBX\nCALL 0x00401ac0\n'
p1103
S'53\n89 fb\n85 db\n0f 85 81 01 00 00\n31 ff\nbe b0 9f 40 00\nba 05 00 00 00\ne8 64 fb ff ff\n48 89 c1\n48 8b 15 1a d7 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 b5 fd ff ff\n31 ff\nbe 4e a0 40 00\nba 05 00 00 00\ne8 34 fb ff ff\n48 8b 35 45 d6 20 00\n48 89 c7\ne8 65 fc ff ff\ne8 80 01 00 00\n31 ff\nbe d9 a0 40 00\nba 05 00 00 00\ne8 0f fb ff ff\n48 8b 35 20 d6 20 00\n48 89 c7\ne8 40 fc ff ff\n31 ff\nbe c0 a1 40 00\nba 05 00 00 00\ne8 ef fa ff ff\n48 8b 35 00 d6 20 00\n48 89 c7\ne8 20 fc ff ff\n31 ff\nbe db a2 40 00\nba 05 00 00 00\ne8 cf fa ff ff\n48 8b 35 e0 d5 20 00\n48 89 c7\ne8 00 fc ff ff\n31 ff\nbe 5b a3 40 00\nba 05 00 00 00\ne8 af fa ff ff\n48 8b 35 c0 d5 20 00\n48 89 c7\ne8 e0 fb ff ff\n31 ff\nbe d2 a3 40 00\nba 05 00 00 00\ne8 8f fa ff ff\n48 8b 35 a0 d5 20 00\n48 89 c7\ne8 c0 fb ff ff\n31 ff\nbe 19 a4 40 00\nba 05 00 00 00\ne8 6f fa ff ff\n48 8b 35 80 d5 20 00\n48 89 c7\ne8 a0 fb ff ff\n31 ff\nbe 60 a4 40 00\nba 05 00 00 00\ne8 4f fa ff ff\n48 8b 35 60 d5 20 00\n48 89 c7\ne8 80 fb ff ff\n31 ff\nbe 31 a6 40 00\nba 05 00 00 00\ne8 2f fa ff ff\n48 8b 35 40 d5 20 00\n48 89 c7\ne8 60 fb ff ff\n31 ff\nbe 5e a6 40 00\nba 05 00 00 00\ne8 0f fa ff ff\n48 8b 35 20 d5 20 00\n48 89 c7\ne8 40 fb ff ff\ne8 8b 00 00 00\n89 df\ne8 04 fd ff ff\ne8 0f 00 00 00\n89 df\ne8 f8 fc ff ff\n'
p1104
S'.text:0000000000401c30\n.text:0000000000401c31\n.text:0000000000401c33\n.text:0000000000401c35\n.text:0000000000401c3b\n.text:0000000000401c3d\n.text:0000000000401c42\n.text:0000000000401c47\n.text:0000000000401c4c\n.text:0000000000401c4f\n.text:0000000000401c56\n.text:0000000000401c5b\n.text:0000000000401c5d\n.text:0000000000401c60\n.text:0000000000401c63\n.text:0000000000401c66\n.text:0000000000401c6b\n.text:0000000000401c6d\n.text:0000000000401c72\n.text:0000000000401c77\n.text:0000000000401c7c\n.text:0000000000401c83\n.text:0000000000401c86\n.text:0000000000401c8b\n.text:0000000000401c90\n.text:0000000000401c92\n.text:0000000000401c97\n.text:0000000000401c9c\n.text:0000000000401ca1\n.text:0000000000401ca8\n.text:0000000000401cab\n.text:0000000000401cb0\n.text:0000000000401cb2\n.text:0000000000401cb7\n.text:0000000000401cbc\n.text:0000000000401cc1\n.text:0000000000401cc8\n.text:0000000000401ccb\n.text:0000000000401cd0\n.text:0000000000401cd2\n.text:0000000000401cd7\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce8\n.text:0000000000401ceb\n.text:0000000000401cf0\n.text:0000000000401cf2\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d08\n.text:0000000000401d0b\n.text:0000000000401d10\n.text:0000000000401d12\n.text:0000000000401d17\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d28\n.text:0000000000401d2b\n.text:0000000000401d30\n.text:0000000000401d32\n.text:0000000000401d37\n.text:0000000000401d3c\n.text:0000000000401d41\n.text:0000000000401d48\n.text:0000000000401d4b\n.text:0000000000401d50\n.text:0000000000401d52\n.text:0000000000401d57\n.text:0000000000401d5c\n.text:0000000000401d61\n.text:0000000000401d68\n.text:0000000000401d6b\n.text:0000000000401d70\n.text:0000000000401d72\n.text:0000000000401d77\n.text:0000000000401d7c\n.text:0000000000401d81\n.text:0000000000401d88\n.text:0000000000401d8b\n.text:0000000000401d90\n.text:0000000000401d92\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da8\n.text:0000000000401dab\n.text:0000000000401db0\n.text:0000000000401db5\n.text:0000000000401db7\n.text:0000000000401dbc\n.text:0000000000401dc1\n.text:0000000000401dc3\n'
p1105
tp1106
sS'setfileconat'
p1107
(S'\n__stdcall setfileconat(char * file, security_context_t con)\n'
p1108
V\u000aint setfileconat(char *file,security_context_t con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*con == '/')) {\u000a    __fd = setfilecon(con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = setfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_004074e4:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = setfilecon(con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_004074e4;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x00407383\nCMP byte ptr [RBX],0x2f\nJNZ 0x0040739f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404900\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004095f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040740f\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00404900\nMOV R15D,EAX\nCALL 0x00401700\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x004073e6\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x004016e0\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x004074c3\nCMP EDX,0x26\nJA 0x004074b3\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x004074b3\nLEA RDI,[RSP + 0x10]\nCALL 0x00408ef0\nTEST EAX,EAX\nJNZ 0x004074d8\nTEST EBP,EBP\nJS 0x00407448\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x00407448\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nCALL 0x00401700\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x004074c3\nMOV EDI,EBP\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00407471\nCALL 0x00401700\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x004074c3\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00404900\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0040748e\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f40\nTEST EAX,EAX\nJNZ 0x004074e4\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nTEST EBX,EBX\nJZ 0x004074c3\nCALL 0x00401700\nMOV dword ptr [RAX],EBX\nJMP 0x004074c3\nCMP EDX,0x5f\nJZ 0x0040740f\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408db0\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408df0\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 61 d5 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 3f 22 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 3c d5 ff ff\n41 89 c7\ne8 34 a3 ff ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 fd a2 ff ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 d7 1a 00 00\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 2b 1b 00 00\ne8 c6 a2 ff ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 91 a5 ff ff\n85 c0\n74 1e\ne8 a8 a2 ff ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 f9 1a 00 00\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 84 d4 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 74 a2 ff ff\n8b 18\n48 8d 7c 24 10\ne8 a8 1a 00 00\n85 c0\n75 48\n48 8d 7c 24 10\ne8 ba 1a 00 00\n85 db\n74 19\ne8 51 a2 ff ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 23 a2 ff ff\n8b 38\ne8 cc 18 00 00\ne8 17 a2 ff ff\n8b 38\ne8 00 19 00 00\n'
p1111
S'.text:0000000000407360\n.text:0000000000407361\n.text:0000000000407363\n.text:0000000000407365\n.text:0000000000407367\n.text:0000000000407369\n.text:000000000040736a\n.text:0000000000407371\n.text:0000000000407374\n.text:0000000000407377\n.text:0000000000407379\n.text:000000000040737c\n.text:000000000040737e\n.text:0000000000407381\n.text:0000000000407383\n.text:0000000000407386\n.text:0000000000407389\n.text:0000000000407390\n.text:0000000000407391\n.text:0000000000407393\n.text:0000000000407395\n.text:0000000000407397\n.text:0000000000407399\n.text:000000000040739a\n.text:000000000040739f\n.text:00000000004073a4\n.text:00000000004073a7\n.text:00000000004073a9\n.text:00000000004073ac\n.text:00000000004073b1\n.text:00000000004073b4\n.text:00000000004073b7\n.text:00000000004073b9\n.text:00000000004073bc\n.text:00000000004073bf\n.text:00000000004073c4\n.text:00000000004073c7\n.text:00000000004073cc\n.text:00000000004073d1\n.text:00000000004073d3\n.text:00000000004073d6\n.text:00000000004073d8\n.text:00000000004073db\n.text:00000000004073de\n.text:00000000004073e3\n.text:00000000004073e6\n.text:00000000004073ea\n.text:00000000004073f0\n.text:00000000004073f3\n.text:00000000004073f9\n.text:00000000004073fb\n.text:0000000000407405\n.text:0000000000407409\n.text:000000000040740f\n.text:0000000000407414\n.text:0000000000407419\n.text:000000000040741b\n.text:0000000000407421\n.text:0000000000407423\n.text:0000000000407425\n.text:0000000000407429\n.text:000000000040742b\n.text:0000000000407430\n.text:0000000000407435\n.text:000000000040743a\n.text:0000000000407440\n.text:0000000000407446\n.text:0000000000407448\n.text:000000000040744a\n.text:000000000040744f\n.text:0000000000407451\n.text:0000000000407453\n.text:0000000000407458\n.text:000000000040745b\n.text:000000000040745d\n.text:0000000000407462\n.text:0000000000407467\n.text:0000000000407469\n.text:000000000040746f\n.text:0000000000407471\n.text:0000000000407474\n.text:0000000000407477\n.text:000000000040747c\n.text:000000000040747f\n.text:0000000000407481\n.text:0000000000407485\n.text:0000000000407487\n.text:000000000040748c\n.text:000000000040748e\n.text:0000000000407493\n.text:0000000000407498\n.text:000000000040749a\n.text:000000000040749c\n.text:00000000004074a1\n.text:00000000004074a6\n.text:00000000004074a8\n.text:00000000004074aa\n.text:00000000004074af\n.text:00000000004074b1\n.text:00000000004074b3\n.text:00000000004074b6\n.text:00000000004074bc\n.text:00000000004074c1\n.text:00000000004074c3\n.text:00000000004074c6\n.text:00000000004074cd\n.text:00000000004074ce\n.text:00000000004074d0\n.text:00000000004074d2\n.text:00000000004074d4\n.text:00000000004074d6\n.text:00000000004074d7\n.text:00000000004074d8\n.text:00000000004074dd\n.text:00000000004074df\n.text:00000000004074e4\n.text:00000000004074e9\n.text:00000000004074eb\n'
p1112
tp1113
sS'quoting_options_from_style'
p1114
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p1115
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1116
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040405d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004016f0\n'
p1117
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 8e d6 ff ff\n'
p1118
S'.text:0000000000404010\n.text:0000000000404014\n.text:0000000000404017\n.text:000000000040401c\n.text:0000000000404021\n.text:0000000000404025\n.text:000000000040402d\n.text:0000000000404030\n.text:0000000000404032\n.text:0000000000404034\n.text:0000000000404038\n.text:000000000040403b\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404049\n.text:000000000040404d\n.text:0000000000404051\n.text:0000000000404055\n.text:0000000000404058\n.text:000000000040405c\n.text:000000000040405d\n'
p1119
tp1120
sS'string_to_security_class'
p1121
(S'\n__stdcall string_to_security_class(char * name)\n'
p1122
V\u000asecurity_class_t string_to_security_class(char *name)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return 0;\u000a}\u000a\u000a
p1123
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1124
S'50\ne8 1a cd ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p1125
S'.text:00000000004049e0\n.text:00000000004049e1\n.text:00000000004049e6\n.text:00000000004049ec\n.text:00000000004049ee\n.text:00000000004049ef\n'
p1126
tp1127
sS'context_range_get'
p1128
(S'\n__stdcall context_range_get()\n'
p1129
V\u000achar * context_range_get(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1130
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1131
S'50\ne8 1a cf ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p1132
S'.text:00000000004047e0\n.text:00000000004047e1\n.text:00000000004047e6\n.text:00000000004047ec\n.text:00000000004047ee\n.text:00000000004047ef\n'
p1133
tp1134
sS'matchpathcon_init_prefix'
p1135
(S'\n__stdcall matchpathcon_init_prefix(char * path, char * prefix)\n'
p1136
V\u000aint matchpathcon_init_prefix(char *path,char *prefix)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1137
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1138
S'50\ne8 0a cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1139
S'.text:00000000004049f0\n.text:00000000004049f1\n.text:00000000004049f6\n.text:00000000004049fc\n.text:0000000000404a01\n.text:0000000000404a02\n'
p1140
tp1141
sS'strcpy'
p1142
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060f048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060f048]\n'
p1145
S'ff 25 12 d9 20 00\n'
p1146
S'.plt:0000000000401730\n'
p1147
tp1148
sS'rotl8'
p1149
(S'\n__stdcall rotl8()\n'
p1150
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1151
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1152
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1153
S'.text:00000000004097a0\n.text:00000000004097a2\n.text:00000000004097a4\n.text:00000000004097a6\n.text:00000000004097ab\n.text:00000000004097ad\n.text:00000000004097af\n.text:00000000004097b1\n.text:00000000004097b3\n'
p1154
tp1155
sS'opendirat'
p1156
(S'\n__stdcall opendirat(char * dir, int * pdir_fd)\n'
p1157
V\u000aDIR * opendirat(char *dir,int *pdir_fd)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int *in_RCX;\u000a  uint in_EDX;\u000a  \u000a  pDVar2 = (DIR *)0x0;\u000a  __fd = openat_safer(dir,pdir_fd,(ulong)(in_EDX | 0x10900));\u000a  if (-1 < __fd) {\u000a    set_cloexec_flag();\u000a    pDVar2 = fdopendir(__fd);\u000a    if (pDVar2 == (DIR *)0x0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar1;\u000a      pDVar2 = (DIR *)0x0;\u000a    }\u000a    else {\u000a      *in_RCX = __fd;\u000a    }\u000a  }\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nOR EDX,0x10900\nXOR EBX,EBX\nXOR EAX,EAX\nCALL 0x00408e30\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00406f13\nMOV ESI,0x1\nMOV EDI,EBP\nCALL 0x004077d0\nMOV EDI,EBP\nCALL 0x00401a90\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406efc\nMOV dword ptr [R14],EBP\nJMP 0x00406f13\nCALL 0x00401700\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004018a0\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1159
S'55\n41 56\n53\n49 89 ce\n81 ca 00 09 01 00\n31 db\n31 c0\ne8 5a 1f 00 00\n89 c5\n85 ed\n78 37\nbe 01 00 00 00\n89 ef\ne8 e8 08 00 00\n89 ef\ne8 a1 ab ff ff\n48 89 c3\n48 85 db\n74 05\n41 89 2e\neb 17\ne8 ff a7 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 92 a9 ff ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1160
S'.text:0000000000406ec0\n.text:0000000000406ec1\n.text:0000000000406ec3\n.text:0000000000406ec4\n.text:0000000000406ec7\n.text:0000000000406ecd\n.text:0000000000406ecf\n.text:0000000000406ed1\n.text:0000000000406ed6\n.text:0000000000406ed8\n.text:0000000000406eda\n.text:0000000000406edc\n.text:0000000000406ee1\n.text:0000000000406ee3\n.text:0000000000406ee8\n.text:0000000000406eea\n.text:0000000000406eef\n.text:0000000000406ef2\n.text:0000000000406ef5\n.text:0000000000406ef7\n.text:0000000000406efa\n.text:0000000000406efc\n.text:0000000000406f01\n.text:0000000000406f04\n.text:0000000000406f07\n.text:0000000000406f09\n.text:0000000000406f0e\n.text:0000000000406f11\n.text:0000000000406f13\n.text:0000000000406f16\n.text:0000000000406f17\n.text:0000000000406f19\n.text:0000000000406f1a\n'
p1161
tp1162
sS'c_isgraph'
p1163
(S'\n__stdcall c_isgraph()\n'
p1164
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1165
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1166
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1167
S'.text:0000000000407710\n.text:0000000000407713\n.text:0000000000407716\n.text:0000000000407719\n'
p1168
tp1169
sS'hash_get_next'
p1170
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p1171
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p1172
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00407c40\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00407ce6\nTEST DL,DL\nJZ 0x00407d13\nTEST RCX,RCX\nJNZ 0x00407cd0\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00407d18\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00407d00\nJMP 0x00407d1a\nMOV RCX,qword ptr [RCX]\nJMP 0x00407d1a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1173
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1174
S'.text:0000000000407cb0\n.text:0000000000407cb2\n.text:0000000000407cb3\n.text:0000000000407cb4\n.text:0000000000407cb7\n.text:0000000000407cba\n.text:0000000000407cbf\n.text:0000000000407cc2\n.text:0000000000407cd0\n.text:0000000000407cd3\n.text:0000000000407cd7\n.text:0000000000407cda\n.text:0000000000407cdd\n.text:0000000000407ce0\n.text:0000000000407ce2\n.text:0000000000407ce4\n.text:0000000000407ce6\n.text:0000000000407ce9\n.text:0000000000407ceb\n.text:0000000000407cef\n.text:0000000000407cf3\n.text:0000000000407d00\n.text:0000000000407d03\n.text:0000000000407d05\n.text:0000000000407d08\n.text:0000000000407d0c\n.text:0000000000407d0f\n.text:0000000000407d11\n.text:0000000000407d13\n.text:0000000000407d16\n.text:0000000000407d18\n.text:0000000000407d1a\n.text:0000000000407d1d\n.text:0000000000407d21\n.text:0000000000407d22\n.text:0000000000407d24\n'
p1175
tp1176
sS'i_ring_pop'
p1177
(S'\n__stdcall i_ring_pop(I_ring * ir)\n'
p1178
V\u000aint i_ring_pop(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  \u000a  _Var2 = i_ring_empty(ir);\u000a  if (_Var2 != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = ir->ir_data[(ulong)ir->ir_front];\u000a  ir->ir_data[(ulong)ir->ir_front] = ir->ir_default_val;\u000a  if (ir->ir_front == ir->ir_back) {\u000a    ir->ir_empty = true;\u000a    return iVar1;\u000a  }\u000a  ir->ir_front = ir->ir_front + 3 & 3;\u000a  return iVar1;\u000a}\u000a\u000a
p1179
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004089f0\nTEST AL,AL\nJNZ 0x00408a72\nMOV ECX,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV EAX,dword ptr [RBX + RDX*0x4]\nMOV dword ptr [RBX + RDX*0x4],ECX\nMOV ECX,dword ptr [RBX + 0x14]\nCMP ECX,dword ptr [RBX + 0x18]\nJNZ 0x00408a67\nMOV byte ptr [RBX + 0x1c],0x1\nPOP RBX\nRET\nADD ECX,0x3\nAND ECX,0x3\nMOV dword ptr [RBX + 0x14],ECX\nPOP RBX\nRET\nCALL 0x004016f0\n'
p1180
S'53\n48 89 fb\ne8 a7 ff ff ff\n84 c0\n75 25\n8b 4b 10\n8b 53 14\n8b 04 93\n89 0c 93\n8b 4b 14\n3b 4b 18\n75 06\nc6 43 1c 01\n5b\nc3\n83 c1 03\n83 e1 03\n89 4b 14\n5b\nc3\ne8 79 8c ff ff\n'
p1181
S'.text:0000000000408a40\n.text:0000000000408a41\n.text:0000000000408a44\n.text:0000000000408a49\n.text:0000000000408a4b\n.text:0000000000408a4d\n.text:0000000000408a50\n.text:0000000000408a53\n.text:0000000000408a56\n.text:0000000000408a59\n.text:0000000000408a5c\n.text:0000000000408a5f\n.text:0000000000408a61\n.text:0000000000408a65\n.text:0000000000408a66\n.text:0000000000408a67\n.text:0000000000408a6a\n.text:0000000000408a6d\n.text:0000000000408a70\n.text:0000000000408a71\n.text:0000000000408a72\n'
p1182
tp1183
sS'quotearg_buffer_restyled'
p1184
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1185
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040308c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040308c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040308c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040308c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040308c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040308c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040308c_caseD_7;\u000aswitchD_0040308c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040308c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040308c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403b50;\u000aLAB_00403270:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403b59:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403b68:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040327b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004032bf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004032bf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403b68;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403a95;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004039a0;\u000a    }\u000a    goto LAB_00403b68;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403aca;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403b68;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403af9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004035b8;\u000a  case '\u005ca':\u000a    goto joined_r0x004034a8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004034a8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004032d6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004034a8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004034a8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004032d6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004034a8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403a0e;\u000a    }\u000a    goto LAB_00403b68;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403b68;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403b68;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403b68;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403b68;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403b68;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004032d6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403a66;\u000a      goto joined_r0x00403a58;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403561:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403a58;\u000a      goto LAB_00403a66;\u000a    }\u000a    goto LAB_00403b68;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403b68;\u000a  }\u000a  goto joined_r0x004039a0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403aca:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403af9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403af9:\u000a  if (1 < uVar10) {\u000aLAB_004035d6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403692;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403561;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403692:\u000a        if (bVar6 != 0) goto LAB_00403b68;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004035b8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_004035d6;\u000ajoined_r0x004039a0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004039a0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004039c7;\u000aLAB_00403a00:\u000a    if (bVar22) goto LAB_00403a05;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403a00;\u000aLAB_004039c7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403a05:\u000a      if (bVar6 != 0) goto LAB_00403b68;\u000aLAB_00403a0e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403a58;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403a66:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403a58:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403a95:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403270;\u000aLAB_00403b50:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403b59;\u000a  goto LAB_0040327b;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004017c0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403c35\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40aca0 + RAX*0x8]\nMOV EDI,0x40b1c6\nMOV ESI,R15D\nCALL 0x004042e0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40bc34\nMOV ESI,R15D\nCALL 0x004042e0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004030ed\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004030f0\nNOP\nCMP R12,RSI\nJNC 0x004030de\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004030d0\nJMP 0x004030f0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004017d0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004031bc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004031bc\nMOV ECX,0x40b1c4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004031b6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403157\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403184\nTEST RSI,RSI\nJZ 0x00403171\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40bc34\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403192\nMOV ECX,0x40bc34\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004031bc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403c0c\nMOV ECX,0x40b1c4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403b50\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403b59\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004032bf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004032ba\nCMP R11,-0x1\nJNZ 0x004032ba\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004017d0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403310\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040356c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40acf8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403b68\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004039c0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004039c7\nJMP 0x00403a00\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004018e0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040335d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004032c1\nJMP 0x00403b68\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004032c1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004032eb\nCMP EBX,0x2\nJNZ 0x004032eb\nTEST R13,R13\nJNZ 0x004032eb\nJMP 0x00403b68\nCMP R11,-0x1\nJZ 0x00403743\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403763\nJMP 0x004032eb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403774\nTEST R8B,R8B\nJNZ 0x00403b68\nCMP EBX,0x2\nJNZ 0x00403418\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403418\nCMP R12,RSI\nJNC 0x004033f3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403402\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403411\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403422\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004038e8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004038e8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004038e8\nCMP RCX,RSI\nJNC 0x0040345c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040346b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nJMP 0x004039c0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032e9\nJMP 0x004034ca\nMOV DL,0x74\nJMP 0x004034b2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032e9\nJMP 0x004034ca\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032e9\nJMP 0x004034ca\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403b68\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032e9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403a0e\nJMP 0x00403b68\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004032e9\nTEST R8B,R8B\nJNZ 0x00403b68\nCMP R12,RSI\nJNC 0x004034fa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403509\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403518\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004032e9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004038fb\nCMP EBX,0x2\nJNZ 0x004032e9\nTEST R8B,R8B\nJZ 0x004032e9\nJMP 0x00403b68\nCMP EBX,0x2\nJNZ 0x00403794\nTEST R8B,R8B\nJNZ 0x00403b68\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403a66\nJMP 0x00403a89\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004037b5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401b10\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039a8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004039a8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403692\nJMP 0x00403660\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403649\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403646\nCMP R12,RSI\nJNC 0x0040362b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040363a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403680\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403680\nTEST BPL,0x1\nJZ 0x00403723\nCMP R12,RSI\nJNC 0x00403674\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403723\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403660\nTEST R8B,R8B\nJNZ 0x00403b68\nCMP EBX,0x2\nJNZ 0x004036da\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004036da\nCMP R12,RSI\nJNC 0x004036b2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036c1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036d0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004036e4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036fb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403715\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403610\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403a66\nJMP 0x00403a89\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004032eb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004032eb\nJMP 0x00403b68\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403a95\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nJMP 0x004039c0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004034b2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403a66\nJMP 0x00403a89\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004037d7\nMOV RDI,R10\nCALL 0x004017d0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401820\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403aaf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403aa7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403ab6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040389e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403896\nBT RDI,RDX\nJC 0x00403c02\nINC RCX\nCMP RCX,R14\nJC 0x00403880\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401b00\nTEST EAX,EAX\nJNZ 0x004038b3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401af0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004037f5\nJMP 0x00403af9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nJMP 0x004039c0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004032e9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004032e9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004032e9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004032eb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403b32\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403b68\nCMP R12,RSI\nJNC 0x0040395e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403971\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403980\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040398f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nJMP 0x004039c0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403a00\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403a05\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403a60\nJMP 0x00403a05\nTEST BPL,BPL\nJZ 0x00403a60\nTEST R8B,R8B\nJNZ 0x00403b68\nCMP EBX,0x2\nJNZ 0x00403a48\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403a48\nCMP R12,RSI\nJNC 0x00403a23\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a32\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a41\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403a52\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403a92\nJMP 0x00403a8e\nTEST DIL,0x1\nJZ 0x00403a89\nAND AL,0x1\nJNZ 0x00403a89\nCMP R12,RSI\nJNC 0x00403a74\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a83\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403a92\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403b50\nJMP 0x00403270\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403af4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403aec\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403b28\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403aca\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403af9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004035b8\nJMP 0x004035d6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403af9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032f6\nJMP 0x004039c0\nCMP R13,R11\nJNZ 0x0040327b\nTEST R8B,R8B\nJZ 0x00403bc2\nCMP EBX,0x2\nJNZ 0x00403bc2\nTEST R12,R12\nJNZ 0x00403bc2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403000\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403bf6\nTEST R8B,R8B\nJNZ 0x00403bf6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403bf6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403be9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403be0\nCMP R12,RSI\nJNC 0x00403bad\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403bad\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403b68\nTEST RSI,RSI\nJZ 0x00403c19\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40b1c4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004031bc\nCALL 0x004016f0\n'
p1187
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 92 e7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 a0 ac 40 00\nbf c6 b1 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 34 bc 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 d3 e6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 c4 b1 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 34 bc 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 34 bc 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 c4 b1 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 33 e5 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd f8 ac 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 b7 e5 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 87 e5 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 01 e0 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 e0 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 59 e2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 22 e2 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 c4 b1 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 b6 da ff ff\n'
p1188
S'.text:0000000000403000\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403005\n.text:0000000000403007\n.text:0000000000403009\n.text:000000000040300a\n.text:0000000000403011\n.text:0000000000403014\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301f\n.text:0000000000403024\n.text:0000000000403029\n.text:000000000040302e\n.text:0000000000403036\n.text:000000000040303a\n.text:0000000000403040\n.text:0000000000403048\n.text:000000000040304d\n.text:0000000000403055\n.text:000000000040305a\n.text:000000000040305e\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403066\n.text:0000000000403069\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403074\n.text:0000000000403077\n.text:000000000040307a\n.text:000000000040307c\n.text:000000000040307f\n.text:0000000000403084\n.text:0000000000403087\n.text:000000000040308c\n.text:0000000000403093\n.text:0000000000403098\n.text:000000000040309b\n.text:00000000004030a0\n.text:00000000004030a5\n.text:00000000004030aa\n.text:00000000004030ad\n.text:00000000004030b2\n.text:00000000004030b7\n.text:00000000004030bc\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c5\n.text:00000000004030c7\n.text:00000000004030ca\n.text:00000000004030cc\n.text:00000000004030ce\n.text:00000000004030d0\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030da\n.text:00000000004030de\n.text:00000000004030e4\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030eb\n.text:00000000004030ed\n.text:00000000004030f0\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403105\n.text:0000000000403108\n.text:000000000040310b\n.text:000000000040310e\n.text:0000000000403113\n.text:0000000000403116\n.text:0000000000403119\n.text:000000000040311e\n.text:0000000000403121\n.text:0000000000403123\n.text:0000000000403126\n.text:0000000000403128\n.text:000000000040312a\n.text:000000000040312d\n.text:0000000000403132\n.text:0000000000403137\n.text:000000000040313c\n.text:000000000040313f\n.text:0000000000403145\n.text:0000000000403147\n.text:000000000040314a\n.text:000000000040314d\n.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403157\n.text:000000000040315a\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403164\n.text:0000000000403167\n.text:0000000000403169\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403176\n.text:000000000040317c\n.text:0000000000403182\n.text:0000000000403184\n.text:0000000000403189\n.text:000000000040318f\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403198\n.text:000000000040319a\n.text:000000000040319f\n.text:00000000004031a2\n.text:00000000004031a8\n.text:00000000004031ad\n.text:00000000004031b3\n.text:00000000004031b6\n.text:00000000004031b9\n.text:00000000004031bc\n.text:00000000004031c4\n.text:00000000004031c6\n.text:00000000004031c8\n.text:00000000004031cb\n.text:00000000004031cf\n.text:00000000004031d1\n.text:00000000004031d4\n.text:00000000004031d8\n.text:00000000004031da\n.text:00000000004031dd\n.text:00000000004031e0\n.text:00000000004031e3\n.text:00000000004031e5\n.text:00000000004031e9\n.text:00000000004031eb\n.text:00000000004031ef\n.text:00000000004031f2\n.text:00000000004031f5\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fe\n.text:0000000000403207\n.text:000000000040320a\n.text:000000000040320c\n.text:0000000000403210\n.text:0000000000403212\n.text:0000000000403216\n.text:0000000000403218\n.text:000000000040321b\n.text:000000000040321f\n.text:0000000000403221\n.text:0000000000403224\n.text:0000000000403228\n.text:000000000040322d\n.text:0000000000403230\n.text:0000000000403234\n.text:000000000040323c\n.text:000000000040323f\n.text:0000000000403242\n.text:0000000000403244\n.text:0000000000403248\n.text:000000000040324b\n.text:000000000040324d\n.text:0000000000403252\n.text:0000000000403256\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403264\n.text:000000000040326a\n.text:0000000000403270\n.text:0000000000403275\n.text:000000000040327b\n.text:0000000000403280\n.text:0000000000403282\n.text:0000000000403287\n.text:000000000040328b\n.text:000000000040328d\n.text:0000000000403291\n.text:0000000000403293\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329d\n.text:000000000040329f\n.text:00000000004032a4\n.text:00000000004032a9\n.text:00000000004032ad\n.text:00000000004032b2\n.text:00000000004032b7\n.text:00000000004032ba\n.text:00000000004032bd\n.text:00000000004032bf\n.text:00000000004032c1\n.text:00000000004032c6\n.text:00000000004032ca\n.text:00000000004032d0\n.text:00000000004032d2\n.text:00000000004032d4\n.text:00000000004032d6\n.text:00000000004032de\n.text:00000000004032e3\n.text:00000000004032e9\n.text:00000000004032eb\n.text:00000000004032f0\n.text:00000000004032f6\n.text:00000000004032ff\n.text:0000000000403305\n.text:0000000000403310\n.text:0000000000403312\n.text:0000000000403315\n.text:0000000000403319\n.text:0000000000403321\n.text:0000000000403324\n.text:0000000000403329\n.text:000000000040332b\n.text:000000000040332e\n.text:0000000000403330\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333d\n.text:0000000000403340\n.text:0000000000403345\n.text:0000000000403349\n.text:000000000040334e\n.text:0000000000403350\n.text:0000000000403352\n.text:0000000000403358\n.text:000000000040335d\n.text:0000000000403362\n.text:0000000000403365\n.text:000000000040336a\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337a\n.text:000000000040337c\n.text:0000000000403381\n.text:0000000000403383\n.text:0000000000403386\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403395\n.text:0000000000403398\n.text:000000000040339e\n.text:00000000004033a3\n.text:00000000004033a7\n.text:00000000004033ad\n.text:00000000004033b0\n.text:00000000004033b3\n.text:00000000004033b7\n.text:00000000004033ba\n.text:00000000004033bc\n.text:00000000004033bf\n.text:00000000004033c5\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d5\n.text:00000000004033d8\n.text:00000000004033de\n.text:00000000004033e1\n.text:00000000004033e3\n.text:00000000004033e5\n.text:00000000004033e7\n.text:00000000004033e9\n.text:00000000004033ec\n.text:00000000004033ee\n.text:00000000004033f3\n.text:00000000004033f8\n.text:00000000004033fb\n.text:00000000004033fd\n.text:0000000000403402\n.text:0000000000403407\n.text:000000000040340a\n.text:000000000040340c\n.text:0000000000403411\n.text:0000000000403415\n.text:0000000000403418\n.text:000000000040341b\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342c\n.text:000000000040342f\n.text:0000000000403435\n.text:0000000000403439\n.text:000000000040343c\n.text:0000000000403442\n.text:0000000000403446\n.text:0000000000403449\n.text:000000000040344c\n.text:0000000000403452\n.text:0000000000403455\n.text:0000000000403457\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403464\n.text:0000000000403466\n.text:000000000040346b\n.text:000000000040346f\n.text:0000000000403474\n.text:000000000040347a\n.text:000000000040347f\n.text:0000000000403481\n.text:0000000000403486\n.text:000000000040348c\n.text:000000000040348e\n.text:0000000000403490\n.text:0000000000403492\n.text:0000000000403494\n.text:0000000000403499\n.text:000000000040349f\n.text:00000000004034a1\n.text:00000000004034a3\n.text:00000000004034a8\n.text:00000000004034ae\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034b9\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034ca\n.text:00000000004034cd\n.text:00000000004034d0\n.text:00000000004034d6\n.text:00000000004034db\n.text:00000000004034de\n.text:00000000004034e1\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034f0\n.text:00000000004034f3\n.text:00000000004034f5\n.text:00000000004034fa\n.text:00000000004034ff\n.text:0000000000403502\n.text:0000000000403504\n.text:0000000000403509\n.text:000000000040350e\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403518\n.text:000000000040351c\n.text:000000000040351e\n.text:0000000000403523\n.text:0000000000403526\n.text:0000000000403529\n.text:000000000040352f\n.text:0000000000403532\n.text:0000000000403538\n.text:000000000040353b\n.text:0000000000403541\n.text:0000000000403546\n.text:0000000000403549\n.text:000000000040354f\n.text:0000000000403552\n.text:0000000000403558\n.text:000000000040355b\n.text:000000000040355d\n.text:0000000000403561\n.text:0000000000403567\n.text:000000000040356c\n.text:0000000000403570\n.text:0000000000403579\n.text:000000000040357f\n.text:0000000000403584\n.text:0000000000403589\n.text:000000000040358e\n.text:0000000000403591\n.text:0000000000403596\n.text:0000000000403599\n.text:000000000040359c\n.text:00000000004035a1\n.text:00000000004035a6\n.text:00000000004035aa\n.text:00000000004035af\n.text:00000000004035b4\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035bf\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035ca\n.text:00000000004035cd\n.text:00000000004035d0\n.text:00000000004035d6\n.text:00000000004035db\n.text:00000000004035de\n.text:00000000004035e1\n.text:00000000004035e4\n.text:00000000004035e7\n.text:00000000004035e9\n.text:00000000004035ed\n.text:00000000004035ef\n.text:00000000004035f4\n.text:00000000004035f9\n.text:00000000004035ff\n.text:0000000000403610\n.text:0000000000403615\n.text:0000000000403617\n.text:000000000040361a\n.text:000000000040361c\n.text:000000000040361f\n.text:0000000000403621\n.text:0000000000403624\n.text:0000000000403626\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403633\n.text:0000000000403635\n.text:000000000040363a\n.text:000000000040363e\n.text:0000000000403646\n.text:0000000000403649\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403652\n.text:0000000000403660\n.text:0000000000403664\n.text:000000000040366a\n.text:000000000040366d\n.text:000000000040366f\n.text:0000000000403674\n.text:0000000000403677\n.text:0000000000403679\n.text:0000000000403680\n.text:0000000000403683\n.text:0000000000403688\n.text:000000000040368b\n.text:0000000000403690\n.text:0000000000403692\n.text:0000000000403695\n.text:000000000040369b\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036a4\n.text:00000000004036a6\n.text:00000000004036a8\n.text:00000000004036ab\n.text:00000000004036ad\n.text:00000000004036b2\n.text:00000000004036b7\n.text:00000000004036ba\n.text:00000000004036bc\n.text:00000000004036c1\n.text:00000000004036c6\n.text:00000000004036c9\n.text:00000000004036cb\n.text:00000000004036d0\n.text:00000000004036d4\n.text:00000000004036d6\n.text:00000000004036da\n.text:00000000004036dd\n.text:00000000004036df\n.text:00000000004036e4\n.text:00000000004036e9\n.text:00000000004036ec\n.text:00000000004036ee\n.text:00000000004036f1\n.text:00000000004036f4\n.text:00000000004036f7\n.text:00000000004036fb\n.text:0000000000403700\n.text:0000000000403703\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370b\n.text:000000000040370e\n.text:0000000000403711\n.text:0000000000403715\n.text:0000000000403719\n.text:000000000040371d\n.text:0000000000403721\n.text:0000000000403723\n.text:0000000000403727\n.text:000000000040372a\n.text:0000000000403730\n.text:0000000000403734\n.text:0000000000403738\n.text:000000000040373e\n.text:0000000000403743\n.text:0000000000403746\n.text:0000000000403749\n.text:000000000040374e\n.text:0000000000403751\n.text:0000000000403753\n.text:0000000000403756\n.text:000000000040375d\n.text:0000000000403763\n.text:0000000000403765\n.text:0000000000403769\n.text:000000000040376f\n.text:0000000000403774\n.text:0000000000403779\n.text:000000000040377f\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378f\n.text:0000000000403794\n.text:0000000000403796\n.text:000000000040379b\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037aa\n.text:00000000004037b0\n.text:00000000004037b5\n.text:00000000004037c1\n.text:00000000004037c5\n.text:00000000004037c7\n.text:00000000004037ca\n.text:00000000004037cf\n.text:00000000004037d4\n.text:00000000004037d7\n.text:00000000004037db\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e6\n.text:00000000004037e8\n.text:00000000004037f0\n.text:00000000004037f5\n.text:00000000004037fa\n.text:00000000004037fe\n.text:0000000000403802\n.text:000000000040380a\n.text:000000000040380d\n.text:0000000000403812\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381d\n.text:0000000000403820\n.text:0000000000403823\n.text:0000000000403829\n.text:000000000040382d\n.text:0000000000403837\n.text:000000000040383d\n.text:0000000000403841\n.text:0000000000403846\n.text:000000000040384c\n.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403857\n.text:0000000000403859\n.text:000000000040385e\n.text:0000000000403863\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386e\n.text:0000000000403873\n.text:0000000000403877\n.text:000000000040387c\n.text:0000000000403880\n.text:0000000000403884\n.text:0000000000403887\n.text:000000000040388a\n.text:000000000040388c\n.text:0000000000403890\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389c\n.text:000000000040389e\n.text:00000000004038a2\n.text:00000000004038a7\n.text:00000000004038a9\n.text:00000000004038ab\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bb\n.text:00000000004038c3\n.text:00000000004038c6\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d1\n.text:00000000004038d3\n.text:00000000004038d8\n.text:00000000004038dd\n.text:00000000004038e3\n.text:00000000004038e8\n.text:00000000004038eb\n.text:00000000004038f0\n.text:00000000004038f6\n.text:00000000004038fb\n.text:0000000000403900\n.text:0000000000403906\n.text:000000000040390a\n.text:000000000040390d\n.text:0000000000403913\n.text:0000000000403919\n.text:000000000040391f\n.text:0000000000403924\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392f\n.text:0000000000403933\n.text:0000000000403935\n.text:000000000040393f\n.text:0000000000403943\n.text:0000000000403949\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403954\n.text:0000000000403957\n.text:0000000000403959\n.text:000000000040395e\n.text:0000000000403963\n.text:0000000000403966\n.text:000000000040396a\n.text:000000000040396c\n.text:0000000000403971\n.text:0000000000403976\n.text:0000000000403979\n.text:000000000040397b\n.text:0000000000403980\n.text:0000000000403985\n.text:0000000000403988\n.text:000000000040398a\n.text:000000000040398f\n.text:0000000000403993\n.text:0000000000403995\n.text:0000000000403998\n.text:000000000040399b\n.text:00000000004039a0\n.text:00000000004039a6\n.text:00000000004039a8\n.text:00000000004039ad\n.text:00000000004039b2\n.text:00000000004039b8\n.text:00000000004039c0\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d4\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039dc\n.text:00000000004039df\n.text:00000000004039e1\n.text:00000000004039e9\n.text:00000000004039ec\n.text:00000000004039ee\n.text:00000000004039f0\n.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0e\n.text:0000000000403a11\n.text:0000000000403a13\n.text:0000000000403a15\n.text:0000000000403a17\n.text:0000000000403a19\n.text:0000000000403a1c\n.text:0000000000403a1e\n.text:0000000000403a23\n.text:0000000000403a28\n.text:0000000000403a2b\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a37\n.text:0000000000403a3a\n.text:0000000000403a3c\n.text:0000000000403a41\n.text:0000000000403a45\n.text:0000000000403a48\n.text:0000000000403a4b\n.text:0000000000403a4d\n.text:0000000000403a52\n.text:0000000000403a55\n.text:0000000000403a58\n.text:0000000000403a5a\n.text:0000000000403a60\n.text:0000000000403a64\n.text:0000000000403a66\n.text:0000000000403a68\n.text:0000000000403a6a\n.text:0000000000403a6d\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a7e\n.text:0000000000403a83\n.text:0000000000403a87\n.text:0000000000403a89\n.text:0000000000403a8c\n.text:0000000000403a8e\n.text:0000000000403a92\n.text:0000000000403a95\n.text:0000000000403a98\n.text:0000000000403a9c\n.text:0000000000403aa2\n.text:0000000000403aa7\n.text:0000000000403aaf\n.text:0000000000403ab4\n.text:0000000000403ab6\n.text:0000000000403abe\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403aca\n.text:0000000000403acf\n.text:0000000000403ad3\n.text:0000000000403ad5\n.text:0000000000403ada\n.text:0000000000403add\n.text:0000000000403ae0\n.text:0000000000403ae2\n.text:0000000000403aea\n.text:0000000000403aec\n.text:0000000000403af4\n.text:0000000000403af9\n.text:0000000000403afd\n.text:0000000000403b02\n.text:0000000000403b07\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b15\n.text:0000000000403b19\n.text:0000000000403b1d\n.text:0000000000403b23\n.text:0000000000403b28\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b34\n.text:0000000000403b38\n.text:0000000000403b3d\n.text:0000000000403b43\n.text:0000000000403b50\n.text:0000000000403b53\n.text:0000000000403b59\n.text:0000000000403b5c\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b63\n.text:0000000000403b66\n.text:0000000000403b68\n.text:0000000000403b70\n.text:0000000000403b76\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b81\n.text:0000000000403b86\n.text:0000000000403b8a\n.text:0000000000403b8e\n.text:0000000000403b91\n.text:0000000000403b94\n.text:0000000000403b97\n.text:0000000000403b9b\n.text:0000000000403b9f\n.text:0000000000403ba1\n.text:0000000000403ba6\n.text:0000000000403baa\n.text:0000000000403bad\n.text:0000000000403bb0\n.text:0000000000403bb7\n.text:0000000000403bb8\n.text:0000000000403bba\n.text:0000000000403bbc\n.text:0000000000403bbe\n.text:0000000000403bc0\n.text:0000000000403bc1\n.text:0000000000403bc2\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bcf\n.text:0000000000403bd2\n.text:0000000000403bd4\n.text:0000000000403bd6\n.text:0000000000403bd8\n.text:0000000000403bda\n.text:0000000000403bdd\n.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be5\n.text:0000000000403be9\n.text:0000000000403bec\n.text:0000000000403bef\n.text:0000000000403bf2\n.text:0000000000403bf4\n.text:0000000000403bf6\n.text:0000000000403bf9\n.text:0000000000403bfb\n.text:0000000000403c00\n.text:0000000000403c02\n.text:0000000000403c07\n.text:0000000000403c0c\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c16\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c27\n.text:0000000000403c2d\n.text:0000000000403c30\n.text:0000000000403c35\n'
p1189
tp1190
sS'getfileconat'
p1191
(S'\n__stdcall getfileconat(char * file, security_context_t * con)\n'
p1192
V\u000aint getfileconat(char *file,security_context_t *con)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  int iVar3;\u000a  saved_cwd *__ptr;\u000a  uint *puVar4;\u000a  int *piVar5;\u000a  security_context_t *con_00;\u000a  char proc_buf [4032];\u000a  saved_cwd local_ff8 [252];\u000a  \u000a  __fd = (int)(char *)((ulong)file & 0xffffffff);\u000a  if ((__fd == -100) || (*(char *)con == '/')) {\u000a    __fd = getfilecon((char *)con,con_00);\u000a    return __fd;\u000a  }\u000a  __ptr = (saved_cwd *)openat_proc_name((char *)local_ff8,(char *)((ulong)file & 0xffffffff));\u000a  if (__ptr != (saved_cwd *)0x0) {\u000a    iVar2 = getfilecon((char *)__ptr,con_00);\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (__ptr != local_ff8) {\u000a      free(__ptr);\u000a    }\u000a    if (iVar2 != -1) {\u000a      return iVar2;\u000a    }\u000a    if (((0x26 < uVar1) || ((0x4000102006U >> ((ulong)uVar1 & 0x1f) & 1) == 0)) && (uVar1 != 0x5f))\u000a    {\u000a      *puVar4 = uVar1;\u000a      return -1;\u000a    }\u000a  }\u000a  iVar2 = save_cwd(local_ff8);\u000a  if (iVar2 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    openat_save_fail((ulong)*puVar4);\u000aLAB_004071c4:\u000a    puVar4 = (uint *)__errno_location();\u000a                    /* WARNING: Subroutine does not return */\u000a    openat_restore_fail((ulong)*puVar4);\u000a  }\u000a  if ((__fd < 0) || (local_ff8[0].desc != __fd)) {\u000a    __fd = fchdir(__fd);\u000a    if (__fd == 0) {\u000a      iVar2 = getfilecon((char *)con,con_00);\u000a      __fd = 0;\u000a      if (iVar2 == -1) {\u000a        piVar5 = __errno_location();\u000a        __fd = *piVar5;\u000a      }\u000a      iVar3 = restore_cwd(local_ff8);\u000a      if (iVar3 != 0) goto LAB_004071c4;\u000a      free_cwd(local_ff8);\u000a      if (__fd != 0) {\u000a        piVar5 = __errno_location();\u000a        *piVar5 = __fd;\u000a      }\u000a    }\u000a    else {\u000a      piVar5 = __errno_location();\u000a      __fd = *piVar5;\u000a      free_cwd(local_ff8);\u000a      *piVar5 = __fd;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000a  else {\u000a    free_cwd(local_ff8);\u000a    piVar5 = __errno_location();\u000a    *piVar5 = 9;\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xfd8\nMOV R14,RDX\nMOV RBX,RSI\nMOV EBP,EDI\nCMP EBP,-0x64\nJZ 0x00407063\nCMP byte ptr [RBX],0x2f\nJNZ 0x0040707f\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004048a0\nLEA R13,[RSP + 0x10]\nMOV RDI,R13\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004095f0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004070ef\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004048a0\nMOV R15D,EAX\nCALL 0x00401700\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,dword ptr [RAX]\nCMP R12,R13\nJZ 0x004070c6\nMOV RDI,R12\nMOV R12D,EDX\nCALL 0x004016e0\nMOV EDX,R12D\nCMP R15D,-0x1\nJNZ 0x004071a3\nCMP EDX,0x26\nJA 0x00407193\nMOV EAX,EDX\nMOV RCX,0x4000102006\nBT RCX,RAX\nJNC 0x00407193\nLEA RDI,[RSP + 0x10]\nCALL 0x00408ef0\nTEST EAX,EAX\nJNZ 0x004071b8\nTEST EBP,EBP\nJS 0x00407128\nCMP dword ptr [RSP + 0x10],EBP\nJNZ 0x00407128\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nCALL 0x00401700\nMOV dword ptr [RAX],0x9\nMOV R15D,0xffffffff\nJMP 0x004071a3\nMOV EDI,EBP\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x00407151\nCALL 0x00401700\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nMOV dword ptr [RBX],EBP\nMOV R15D,0xffffffff\nJMP 0x004071a3\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004048a0\nMOV R15D,EAX\nXOR EBX,EBX\nCMP R15D,-0x1\nJNZ 0x0040716e\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f40\nTEST EAX,EAX\nJNZ 0x004071c4\nLEA RDI,[RSP + 0x10]\nCALL 0x00408f60\nTEST EBX,EBX\nJZ 0x004071a3\nCALL 0x00401700\nMOV dword ptr [RAX],EBX\nJMP 0x004071a3\nCMP EDX,0x5f\nJZ 0x004070ef\nMOV RAX,qword ptr [RSP + 0x8]\nMOV dword ptr [RAX],EDX\nMOV EAX,R15D\nADD RSP,0xfd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408db0\nCALL 0x00401700\nMOV EDI,dword ptr [RAX]\nCALL 0x00408df0\n'
p1194
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 0f 00 00\n49 89 d6\n48 89 f3\n89 fd\n83 fd 9c\n74 05\n80 3b 2f\n75 1c\n48 89 df\n4c 89 f6\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 21 d8 ff ff\n4c 8d 6c 24 10\n4c 89 ef\n89 ee\n48 89 da\ne8 5f 25 00 00\n49 89 c4\n4d 85 e4\n74 56\n4c 89 e7\n4c 89 f6\ne8 fc d7 ff ff\n41 89 c7\ne8 54 a6 ff ff\n48 89 44 24 08\n8b 10\n4d 39 ec\n74 0e\n4c 89 e7\n41 89 d4\ne8 1d a6 ff ff\n44 89 e2\n41 83 ff ff\n0f 85 d3 00 00 00\n83 fa 26\n0f 87 ba 00 00 00\n89 d0\n48 b9 06 20 10 00 40 00 00 00\n48 0f a3 c1\n0f 83 a4 00 00 00\n48 8d 7c 24 10\ne8 f7 1d 00 00\n85 c0\n0f 85 b7 00 00 00\n85 ed\n78 23\n39 6c 24 10\n75 1d\n48 8d 7c 24 10\ne8 4b 1e 00 00\ne8 e6 a5 ff ff\nc7 00 09 00 00 00\n41 bf ff ff ff ff\neb 7b\n89 ef\ne8 b1 a8 ff ff\n85 c0\n74 1e\ne8 c8 a5 ff ff\n48 89 c3\n8b 2b\n48 8d 7c 24 10\ne8 19 1e 00 00\n89 2b\n41 bf ff ff ff ff\neb 52\n48 89 df\n4c 89 f6\ne8 44 d7 ff ff\n41 89 c7\n31 db\n41 83 ff ff\n75 07\ne8 94 a5 ff ff\n8b 18\n48 8d 7c 24 10\ne8 c8 1d 00 00\n85 c0\n75 48\n48 8d 7c 24 10\ne8 da 1d 00 00\n85 db\n74 19\ne8 71 a5 ff ff\n89 18\neb 10\n83 fa 5f\n0f 84 53 ff ff ff\n48 8b 44 24 08\n89 10\n44 89 f8\n48 81 c4 d8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 43 a5 ff ff\n8b 38\ne8 ec 1b 00 00\ne8 37 a5 ff ff\n8b 38\ne8 20 1c 00 00\n'
p1195
S'.text:0000000000407040\n.text:0000000000407041\n.text:0000000000407043\n.text:0000000000407045\n.text:0000000000407047\n.text:0000000000407049\n.text:000000000040704a\n.text:0000000000407051\n.text:0000000000407054\n.text:0000000000407057\n.text:0000000000407059\n.text:000000000040705c\n.text:000000000040705e\n.text:0000000000407061\n.text:0000000000407063\n.text:0000000000407066\n.text:0000000000407069\n.text:0000000000407070\n.text:0000000000407071\n.text:0000000000407073\n.text:0000000000407075\n.text:0000000000407077\n.text:0000000000407079\n.text:000000000040707a\n.text:000000000040707f\n.text:0000000000407084\n.text:0000000000407087\n.text:0000000000407089\n.text:000000000040708c\n.text:0000000000407091\n.text:0000000000407094\n.text:0000000000407097\n.text:0000000000407099\n.text:000000000040709c\n.text:000000000040709f\n.text:00000000004070a4\n.text:00000000004070a7\n.text:00000000004070ac\n.text:00000000004070b1\n.text:00000000004070b3\n.text:00000000004070b6\n.text:00000000004070b8\n.text:00000000004070bb\n.text:00000000004070be\n.text:00000000004070c3\n.text:00000000004070c6\n.text:00000000004070ca\n.text:00000000004070d0\n.text:00000000004070d3\n.text:00000000004070d9\n.text:00000000004070db\n.text:00000000004070e5\n.text:00000000004070e9\n.text:00000000004070ef\n.text:00000000004070f4\n.text:00000000004070f9\n.text:00000000004070fb\n.text:0000000000407101\n.text:0000000000407103\n.text:0000000000407105\n.text:0000000000407109\n.text:000000000040710b\n.text:0000000000407110\n.text:0000000000407115\n.text:000000000040711a\n.text:0000000000407120\n.text:0000000000407126\n.text:0000000000407128\n.text:000000000040712a\n.text:000000000040712f\n.text:0000000000407131\n.text:0000000000407133\n.text:0000000000407138\n.text:000000000040713b\n.text:000000000040713d\n.text:0000000000407142\n.text:0000000000407147\n.text:0000000000407149\n.text:000000000040714f\n.text:0000000000407151\n.text:0000000000407154\n.text:0000000000407157\n.text:000000000040715c\n.text:000000000040715f\n.text:0000000000407161\n.text:0000000000407165\n.text:0000000000407167\n.text:000000000040716c\n.text:000000000040716e\n.text:0000000000407173\n.text:0000000000407178\n.text:000000000040717a\n.text:000000000040717c\n.text:0000000000407181\n.text:0000000000407186\n.text:0000000000407188\n.text:000000000040718a\n.text:000000000040718f\n.text:0000000000407191\n.text:0000000000407193\n.text:0000000000407196\n.text:000000000040719c\n.text:00000000004071a1\n.text:00000000004071a3\n.text:00000000004071a6\n.text:00000000004071ad\n.text:00000000004071ae\n.text:00000000004071b0\n.text:00000000004071b2\n.text:00000000004071b4\n.text:00000000004071b6\n.text:00000000004071b7\n.text:00000000004071b8\n.text:00000000004071bd\n.text:00000000004071bf\n.text:00000000004071c4\n.text:00000000004071c9\n.text:00000000004071cb\n'
p1196
tp1197
sS'is_zero_or_power_of_two'
p1198
(S'\n__stdcall is_zero_or_power_of_two(uintmax_t i)\n'
p1199
V\u000a_Bool is_zero_or_power_of_two(uintmax_t i)\u000a\u000a{\u000a  return (_Bool)((i - 1 & i) == 0);\u000a}\u000a\u000a
p1200
S'LEA RAX,[RDI + -0x1]\nTEST RAX,RDI\nSETZ AL\nRET\n'
p1201
S'48 8d 47 ff\n48 85 f8\n0f 94 c0\nc3\n'
p1202
S'.text:0000000000407940\n.text:0000000000407944\n.text:0000000000407947\n.text:000000000040794a\n'
p1203
tp1204
sS'rotr_sz'
p1205
(S'\n__stdcall rotr_sz(size_t x)\n'
p1206
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1207
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1208
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1209
S'.text:0000000000409750\n.text:0000000000409752\n.text:0000000000409755\n.text:0000000000409758\n'
p1210
tp1211
sS'set_quoting_style'
p1212
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1213
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1214
S'TEST RDI,RDI\nMOV EAX,0x60f380\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1215
S'48 85 ff\nb8 80 f3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1216
S'.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee8\n.text:0000000000402eec\n.text:0000000000402eee\n'
p1217
tp1218
sS'hash_get_entries'
p1219
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p1220
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p1221
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00407d73\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00407d68\nTEST R8,R8\nJZ 0x00407d68\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00407d72\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00407d50\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x00407d3b\nRET\nXOR EAX,EAX\nRET\n'
p1222
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p1223
S'.text:0000000000407d30\n.text:0000000000407d33\n.text:0000000000407d37\n.text:0000000000407d39\n.text:0000000000407d3b\n.text:0000000000407d3f\n.text:0000000000407d41\n.text:0000000000407d44\n.text:0000000000407d46\n.text:0000000000407d49\n.text:0000000000407d50\n.text:0000000000407d53\n.text:0000000000407d55\n.text:0000000000407d58\n.text:0000000000407d5c\n.text:0000000000407d5f\n.text:0000000000407d63\n.text:0000000000407d66\n.text:0000000000407d68\n.text:0000000000407d6c\n.text:0000000000407d70\n.text:0000000000407d72\n.text:0000000000407d73\n.text:0000000000407d75\n'
p1224
tp1225
sS'textdomain'
p1226
(S'\n__stdcall textdomain()\n'
p1227
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060f070)();\u000a  return;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060f070]\n'
p1229
S'ff 25 ea d8 20 00\n'
p1230
S'.plt:0000000000401780\n'
p1231
tp1232
sS'xmemdup'
p1233
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1234
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1235
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404f30\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401940\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1236
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ac c8 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1237
S'.text:0000000000405070\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405075\n.text:0000000000405078\n.text:000000000040507b\n.text:000000000040507e\n.text:0000000000405083\n.text:0000000000405086\n.text:0000000000405089\n.text:000000000040508c\n.text:000000000040508f\n.text:0000000000405094\n.text:0000000000405097\n.text:0000000000405098\n.text:000000000040509a\n.text:000000000040509c\n'
p1238
tp1239
sS'context_user_set'
p1240
(S'\n__stdcall context_user_set(char * s)\n'
p1241
V\u000aint context_user_set(char *s)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1242
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1243
S'50\ne8 aa cf ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1244
S'.text:0000000000404750\n.text:0000000000404751\n.text:0000000000404756\n.text:000000000040475c\n.text:0000000000404761\n.text:0000000000404762\n'
p1245
tp1246
sS'setup_dir'
p1247
(S'\n__stdcall setup_dir(FTS * fts)\n'
p1248
V\u000a_Bool setup_dir(FTS *fts)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  cycle_check_state *state;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    state = (cycle_check_state *)malloc(0x20);\u000a    *(cycle_check_state **)&fts->fts_cycle = state;\u000a    if (state == (cycle_check_state *)0x0) {\u000a      return false;\u000a    }\u000a    cycle_check_init(state);\u000a  }\u000a  else {\u000a    pHVar1 = hash_initialize(0x1f,(Hash_tuning *)0x0,AD_hash,AD_compare,free);\u000a    *(Hash_table **)&fts->fts_cycle = pHVar1;\u000a    if (pHVar1 == (Hash_table *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1249
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVZX EAX,word ptr [RBX + 0x48]\nTEST AX,0x102\nJZ 0x0040590b\nXOR R14D,R14D\nMOV EDI,0x1f\nXOR ESI,ESI\nMOV EDX,0x406e30\nMOV ECX,0x406e40\nMOV R8D,0x4016e0\nCALL 0x00407e50\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJNZ 0x00405926\nJMP 0x00405929\nMOV EDI,0x20\nCALL 0x00401980\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJZ 0x00405934\nMOV RDI,RAX\nCALL 0x004078b0\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR R14D,R14D\nJMP 0x00405929\n'
p1250
S'41 56\n53\n50\n48 89 fb\n0f b7 43 48\n66 a9 02 01\n74 2a\n45 31 f6\nbf 1f 00 00 00\n31 f6\nba 30 6e 40 00\nb9 40 6e 40 00\n41 b8 e0 16 40 00\ne8 50 25 00 00\n48 89 43 58\n48 85 c0\n75 1d\neb 1e\nbf 20 00 00 00\ne8 6b c0 ff ff\n48 89 43 58\n48 85 c0\n74 16\n48 89 c7\ne8 8a 1f 00 00\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n45 31 f6\neb f0\n'
p1251
S'.text:00000000004058d0\n.text:00000000004058d2\n.text:00000000004058d3\n.text:00000000004058d4\n.text:00000000004058d7\n.text:00000000004058db\n.text:00000000004058df\n.text:00000000004058e1\n.text:00000000004058e4\n.text:00000000004058e9\n.text:00000000004058eb\n.text:00000000004058f0\n.text:00000000004058f5\n.text:00000000004058fb\n.text:0000000000405900\n.text:0000000000405904\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590b\n.text:0000000000405910\n.text:0000000000405915\n.text:0000000000405919\n.text:000000000040591c\n.text:000000000040591e\n.text:0000000000405921\n.text:0000000000405926\n.text:0000000000405929\n.text:000000000040592c\n.text:0000000000405930\n.text:0000000000405931\n.text:0000000000405933\n.text:0000000000405934\n.text:0000000000405937\n'
p1252
tp1253
sS'get_quoting_style'
p1254
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1255
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1256
S'TEST RDI,RDI\nMOV EAX,0x60f380\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1257
S'48 85 ff\nb8 80 f3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1258
S'.text:0000000000402ed0\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edc\n.text:0000000000402ede\n'
p1259
tp1260
sS'ferror_unlocked'
p1261
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060f130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060f130]\n'
p1264
S'ff 25 2a d8 20 00\n'
p1265
S'.plt:0000000000401900\n'
p1266
tp1267
sS'exit'
p1268
(S'\n__stdcall exit(int __status)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060f210)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060f210]\n'
p1271
S'ff 25 4a d7 20 00\n'
p1272
S'.plt:0000000000401ac0\n'
p1273
tp1274
sS'safe_hasher'
p1275
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1276
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1277
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00407c60\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x004016f0\n'
p1278
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 8b 9a ff ff\n'
p1279
S'.text:0000000000407c40\n.text:0000000000407c41\n.text:0000000000407c44\n.text:0000000000407c48\n.text:0000000000407c4b\n.text:0000000000407c4e\n.text:0000000000407c51\n.text:0000000000407c55\n.text:0000000000407c57\n.text:0000000000407c5b\n.text:0000000000407c5e\n.text:0000000000407c5f\n.text:0000000000407c60\n'
p1280
tp1281
sS'locale_charset'
p1282
(S'\n__stdcall locale_charset()\n'
p1283
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a         + 0x1d0;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00408afd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00408afd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004019a0\nTEST RAX,RAX\nMOV R14D,0x40a630\nCMOVNZ R14,RAX\nCALL 0x00408b10\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00408ad5\nJMP 0x00408afd\nMOV RDI,RBX\nCALL 0x004017d0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004017d0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00408afd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401920\nTEST EAX,EAX\nJZ 0x00408af0\nCMP BPL,0x2a\nJNZ 0x00408ab0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408ab0\nMOV RDI,RBX\nCALL 0x004017d0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40bb58\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1285
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 12 8f ff ff\n48 85 c0\n41 be 30 a6 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 18 8d ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 0a 8d ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 40 8e ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 d8 8c ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 58 bb 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1286
S'.text:0000000000408a80\n.text:0000000000408a81\n.text:0000000000408a83\n.text:0000000000408a84\n.text:0000000000408a89\n.text:0000000000408a8e\n.text:0000000000408a91\n.text:0000000000408a97\n.text:0000000000408a9b\n.text:0000000000408aa0\n.text:0000000000408aa3\n.text:0000000000408aa6\n.text:0000000000408aa9\n.text:0000000000408aab\n.text:0000000000408ab0\n.text:0000000000408ab3\n.text:0000000000408ab8\n.text:0000000000408abc\n.text:0000000000408ac1\n.text:0000000000408ac6\n.text:0000000000408acb\n.text:0000000000408ad0\n.text:0000000000408ad3\n.text:0000000000408ad5\n.text:0000000000408ad8\n.text:0000000000408adb\n.text:0000000000408ae0\n.text:0000000000408ae2\n.text:0000000000408ae4\n.text:0000000000408ae8\n.text:0000000000408aea\n.text:0000000000408aee\n.text:0000000000408af0\n.text:0000000000408af3\n.text:0000000000408af8\n.text:0000000000408afd\n.text:0000000000408b01\n.text:0000000000408b06\n.text:0000000000408b0a\n.text:0000000000408b0b\n.text:0000000000408b0d\n.text:0000000000408b0e\n'
p1287
tp1288
sS'set_program_name'
p1289
(S'\n__stdcall set_program_name(char * argv0)\n'
p1290
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1291
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402e61\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401840\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402e4b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40ac8f\nMOV EDX,0x7\nCALL 0x00401710\nTEST EAX,EAX\nJNZ 0x00402e4b\nMOV ESI,0x40ac97\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401710\nTEST EAX,EAX\nJNZ 0x00402e48\nADD R14,0x3\nMOV qword ptr [0x0060f2c0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060f370],RBX\nMOV qword ptr [0x0060f2e0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060f300]\nMOV EDI,0x40ac57\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401ad0\nCALL 0x004016f0\n'
p1292
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 47 ea ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 8f ac 40 00\nba 07 00 00 00\ne8 ed e8 ff ff\n85 c0\n75 24\nbe 97 ac 40 00\nba 03 00 00 00\n4c 89 f7\ne8 d7 e8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 78 c4 20 00\n4c 89 f3\n48 89 1d 1e c5 20 00\n48 89 1d 87 c4 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 98 c4 20 00\nbf 57 ac 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 54 ec ff ff\ne8 6f e8 ff ff\n'
p1293
S'.text:0000000000402de0\n.text:0000000000402de2\n.text:0000000000402de3\n.text:0000000000402de4\n.text:0000000000402de7\n.text:0000000000402dea\n.text:0000000000402dec\n.text:0000000000402df1\n.text:0000000000402df4\n.text:0000000000402df9\n.text:0000000000402dfc\n.text:0000000000402e00\n.text:0000000000402e04\n.text:0000000000402e07\n.text:0000000000402e0a\n.text:0000000000402e0e\n.text:0000000000402e10\n.text:0000000000402e14\n.text:0000000000402e19\n.text:0000000000402e1e\n.text:0000000000402e23\n.text:0000000000402e25\n.text:0000000000402e27\n.text:0000000000402e2c\n.text:0000000000402e31\n.text:0000000000402e34\n.text:0000000000402e39\n.text:0000000000402e3b\n.text:0000000000402e3d\n.text:0000000000402e41\n.text:0000000000402e48\n.text:0000000000402e4b\n.text:0000000000402e52\n.text:0000000000402e59\n.text:0000000000402e5d\n.text:0000000000402e5e\n.text:0000000000402e60\n.text:0000000000402e61\n.text:0000000000402e68\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e77\n.text:0000000000402e7c\n'
p1294
tp1295
sS'strspn'
p1296
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p1297
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_0060f108)();\u000a  return sVar1;\u000a}\u000a\u000a
p1298
S'JMP qword ptr [0x0060f108]\n'
p1299
S'ff 25 52 d8 20 00\n'
p1300
S'.plt:00000000004018b0\n'
p1301
tp1302
sS'quotearg_buffer'
p1303
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1304
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60f380\nCMOVNZ RBP,R8\nCALL 0x00401700\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403000\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 80 f3 60 00\n49 0f 45 e8\ne8 58 e7 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1307
S'.text:0000000000402f80\n.text:0000000000402f81\n.text:0000000000402f83\n.text:0000000000402f85\n.text:0000000000402f87\n.text:0000000000402f89\n.text:0000000000402f8a\n.text:0000000000402f8b\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f94\n.text:0000000000402f97\n.text:0000000000402f9a\n.text:0000000000402f9f\n.text:0000000000402fa3\n.text:0000000000402fa8\n.text:0000000000402fab\n.text:0000000000402fad\n.text:0000000000402fb1\n.text:0000000000402fb5\n.text:0000000000402fb9\n.text:0000000000402fbd\n.text:0000000000402fc0\n.text:0000000000402fc3\n.text:0000000000402fc6\n.text:0000000000402fc9\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd3\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdd\n.text:0000000000402fe1\n.text:0000000000402fe3\n.text:0000000000402fe7\n.text:0000000000402fe8\n.text:0000000000402fea\n.text:0000000000402fec\n.text:0000000000402fee\n.text:0000000000402ff0\n.text:0000000000402ff1\n'
p1308
tp1309
sS'hash_delete'
p1310
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1311
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_0040b9a8 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_0040b9a8) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1312
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00408630\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040879a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x004088c9\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x004087a2\nCVTSI2SS XMM0,RAX\nJMP 0x004087b7\nXOR R14D,R14D\nJMP 0x004088c9\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x004087cb\nCVTSI2SS XMM1,RCX\nJMP 0x004087e0\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x004088c9\nMOV RDI,R15\nCALL 0x00407f60\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040880c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00408824\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00408837\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040884f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x004088c9\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040886c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x0040b9a8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00408200\nTEST AL,AL\nJNZ 0x004088c9\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x004088c1\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004016e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004088b0\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1313
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 34 31 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 27 8e ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1314
S'.text:0000000000408750\n.text:0000000000408752\n.text:0000000000408754\n.text:0000000000408755\n.text:0000000000408759\n.text:000000000040875c\n.text:0000000000408761\n.text:0000000000408766\n.text:000000000040876b\n.text:000000000040876e\n.text:0000000000408771\n.text:0000000000408773\n.text:0000000000408777\n.text:000000000040877c\n.text:0000000000408780\n.text:0000000000408786\n.text:000000000040878a\n.text:000000000040878d\n.text:0000000000408791\n.text:0000000000408793\n.text:0000000000408798\n.text:000000000040879a\n.text:000000000040879d\n.text:00000000004087a2\n.text:00000000004087a5\n.text:00000000004087a8\n.text:00000000004087ab\n.text:00000000004087ae\n.text:00000000004087b3\n.text:00000000004087b7\n.text:00000000004087bb\n.text:00000000004087bf\n.text:00000000004087c2\n.text:00000000004087c4\n.text:00000000004087c9\n.text:00000000004087cb\n.text:00000000004087ce\n.text:00000000004087d1\n.text:00000000004087d4\n.text:00000000004087d7\n.text:00000000004087dc\n.text:00000000004087e0\n.text:00000000004087e4\n.text:00000000004087e7\n.text:00000000004087ed\n.text:00000000004087f0\n.text:00000000004087f5\n.text:00000000004087f9\n.text:00000000004087fd\n.text:0000000000408800\n.text:0000000000408802\n.text:0000000000408805\n.text:000000000040880a\n.text:000000000040880c\n.text:000000000040880f\n.text:0000000000408812\n.text:0000000000408815\n.text:0000000000408818\n.text:000000000040881b\n.text:0000000000408820\n.text:0000000000408824\n.text:0000000000408828\n.text:000000000040882b\n.text:000000000040882d\n.text:0000000000408830\n.text:0000000000408835\n.text:0000000000408837\n.text:000000000040883a\n.text:000000000040883d\n.text:0000000000408840\n.text:0000000000408843\n.text:0000000000408846\n.text:000000000040884b\n.text:000000000040884f\n.text:0000000000408853\n.text:0000000000408857\n.text:000000000040885a\n.text:000000000040885c\n.text:0000000000408861\n.text:0000000000408865\n.text:0000000000408867\n.text:000000000040886c\n.text:0000000000408874\n.text:0000000000408877\n.text:000000000040887b\n.text:0000000000408880\n.text:000000000040888a\n.text:000000000040888d\n.text:0000000000408892\n.text:0000000000408895\n.text:0000000000408899\n.text:000000000040889c\n.text:00000000004088a1\n.text:00000000004088a3\n.text:00000000004088a5\n.text:00000000004088a9\n.text:00000000004088ac\n.text:00000000004088ae\n.text:00000000004088b0\n.text:00000000004088b4\n.text:00000000004088b9\n.text:00000000004088bc\n.text:00000000004088bf\n.text:00000000004088c1\n.text:00000000004088c9\n.text:00000000004088cc\n.text:00000000004088d0\n.text:00000000004088d1\n.text:00000000004088d3\n.text:00000000004088d5\n'
p1315
tp1316
sS'cdb_fchdir'
p1317
(S'\n__stdcall cdb_fchdir(cd_buf * cdb)\n'
p1318
V\u000aint cdb_fchdir(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = fchdir((int)*cdb);\u000a  return iVar1;\u000a}\u000a\u000a
p1319
S'MOV EDI,dword ptr [RDI]\nJMP 0x004019e0\n'
p1320
S'8b 3f\ne9 29 87 ff ff\n'
p1321
S'.text:00000000004092b0\n.text:00000000004092b2\n'
p1322
tp1323
sS'quotearg_colon'
p1324
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1325
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1326
S'MOV ESI,0x3a\nJMP 0x00404160\n'
p1327
S'be 3a 00 00 00\neb e9\n'
p1328
S'.text:0000000000404170\n.text:0000000000404175\n'
p1329
tp1330
sS'rpl_fflush'
p1331
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1332
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060f178)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1333
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040954d\nMOV RDI,RBX\nCALL 0x004019d0\nTEST EAX,EAX\nJZ 0x0040954d\nMOV RDI,RBX\nCALL 0x00409560\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401990\n'
p1334
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 8f 84 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 3a 84 ff ff\n'
p1335
S'.text:0000000000409530\n.text:0000000000409531\n.text:0000000000409534\n.text:0000000000409537\n.text:0000000000409539\n.text:000000000040953c\n.text:0000000000409541\n.text:0000000000409543\n.text:0000000000409545\n.text:0000000000409548\n.text:000000000040954d\n.text:0000000000409550\n.text:0000000000409551\n'
p1336
tp1337
sS'__assert_fail'
p1338
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1339
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060f0e0)();\u000a  return;\u000a}\u000a\u000a
p1340
S'JMP qword ptr [0x0060f0e0]\n'
p1341
S'ff 25 7a d8 20 00\n'
p1342
S'.plt:0000000000401860\n'
p1343
tp1344
sS'bindtextdomain'
p1345
(S'\n__stdcall bindtextdomain()\n'
p1346
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060f080)();\u000a  return;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x0060f080]\n'
p1348
S'ff 25 da d8 20 00\n'
p1349
S'.plt:00000000004017a0\n'
p1350
tp1351
sS'set_char_quoting'
p1352
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1353
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1354
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60f380\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1355
S'89 f1\n48 85 ff\nbe 80 f3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1356
S'.text:0000000000402ef0\n.text:0000000000402ef2\n.text:0000000000402ef5\n.text:0000000000402efa\n.text:0000000000402efe\n.text:0000000000402f00\n.text:0000000000402f03\n.text:0000000000402f07\n.text:0000000000402f0c\n.text:0000000000402f0f\n.text:0000000000402f11\n.text:0000000000402f13\n.text:0000000000402f16\n.text:0000000000402f18\n.text:0000000000402f1b\n.text:0000000000402f1d\n.text:0000000000402f20\n.text:0000000000402f25\n'
p1357
tp1358
sS'quotearg_n'
p1359
(S'\n__stdcall quotearg_n(char * arg)\n'
p1360
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1361
S'MOV RDX,-0x1\nMOV ECX,0x60f380\nJMP 0x00403de0\n'
p1362
S'48 c7 c2 ff ff ff ff\nb9 80 f3 60 00\neb 02\n'
p1363
S'.text:0000000000403dd0\n.text:0000000000403dd7\n.text:0000000000403ddc\n'
p1364
tp1365
sS'close_stream'
p1366
(S'\n__stdcall close_stream(FILE * stream)\n'
p1367
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1368
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401740\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401900\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004092f0\nTEST EBP,EBP\nJZ 0x0040787b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040789f\nCALL 0x00401700\nMOV dword ptr [RAX],0x0\nJMP 0x0040789f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040789f\nTEST CL,CL\nJNZ 0x0040789f\nCALL 0x00401700\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1369
S'55\n41 56\n53\n48 89 fb\ne8 f4 9e ff ff\n49 89 c6\n48 89 df\ne8 a9 a0 ff ff\n89 c5\n48 89 df\ne8 8f 1a 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 8d 9e ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 6e 9e ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1370
S'.text:0000000000407840\n.text:0000000000407841\n.text:0000000000407843\n.text:0000000000407844\n.text:0000000000407847\n.text:000000000040784c\n.text:000000000040784f\n.text:0000000000407852\n.text:0000000000407857\n.text:0000000000407859\n.text:000000000040785c\n.text:0000000000407861\n.text:0000000000407863\n.text:0000000000407865\n.text:000000000040786a\n.text:000000000040786c\n.text:000000000040786e\n.text:0000000000407873\n.text:0000000000407879\n.text:000000000040787b\n.text:000000000040787d\n.text:0000000000407880\n.text:0000000000407882\n.text:0000000000407884\n.text:0000000000407887\n.text:0000000000407889\n.text:000000000040788b\n.text:000000000040788d\n.text:0000000000407892\n.text:0000000000407894\n.text:0000000000407897\n.text:000000000040789c\n.text:000000000040789f\n.text:00000000004078a1\n.text:00000000004078a2\n.text:00000000004078a4\n.text:00000000004078a5\n'
p1371
tp1372
sS'quotearg_colon_mem'
p1373
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1374
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1375
S'MOV EDX,0x3a\nJMP 0x004040f0\n'
p1376
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1377
S'.text:0000000000404180\n.text:0000000000404185\n'
p1378
tp1379
sS'FUN_004016c0'
p1380
(S'\n__stdcall FUN_004016c0()\n'
p1381
V\u000avoid FUN_004016c0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060f010)();\u000a  return;\u000a}\u000a\u000a
p1382
S'PUSH qword ptr [0x0060f008]\nJMP qword ptr [0x0060f010]\n'
p1383
S'ff 35 42 d9 20 00\nff 25 44 d9 20 00\n'
p1384
S'.plt:00000000004016c0\n.plt:00000000004016c6\n'
p1385
tp1386
sS'xcalloc'
p1387
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1388
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1389
S'PUSH RAX\nCALL 0x00405150\nTEST RAX,RAX\nJZ 0x0040505d\nPOP RCX\nRET\nCALL 0x004050c0\n'
p1390
S'50\ne8 fa 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1391
S'.text:0000000000405050\n.text:0000000000405051\n.text:0000000000405056\n.text:0000000000405059\n.text:000000000040505b\n.text:000000000040505c\n.text:000000000040505d\n'
p1392
tp1393
sS'readdir'
p1394
(S'\n__stdcall readdir(DIR * __dirp)\n'
p1395
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0060f168)();\u000a  return pdVar1;\u000a}\u000a\u000a
p1396
S'JMP qword ptr [0x0060f168]\n'
p1397
S'ff 25 f2 d7 20 00\n'
p1398
S'.plt:0000000000401970\n'
p1399
tp1400
sS'fts_open'
p1401
(S'\n__stdcall fts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p1402
V\u000aFTS * fts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  uint uVar1;\u000a  _ftsent *p_Var2;\u000a  _Bool _Var3;\u000a  unsigned_short uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  FTS *sp;\u000a  size_t sVar7;\u000a  FTSENT *__ptr;\u000a  int *piVar8;\u000a  size_t more;\u000a  FTSENT *p;\u000a  int (*in_RDX)(_ftsent **,_ftsent **);\u000a  ulong nitems;\u000a  char *__s;\u000a  byte local_59;\u000a  FTSENT *local_58;\u000a  FTSENT *local_48;\u000a  \u000a  uVar1 = (uint)compar;\u000a  if (((0x1fff < uVar1) || ((uVar1 & 0x204) == 0x204)) || (((ulong)compar & 0x12) == 0)) {\u000a    piVar8 = __errno_location();\u000a    *piVar8 = 0x16;\u000a    return (FTS *)0x0;\u000a  }\u000a  sp = (FTS *)malloc(0x80);\u000a  if (sp == (FTS *)0x0) {\u000a    return (FTS *)0x0;\u000a  }\u000a  (sp->fts_fd_ring).ir_default_val = 0;\u000a  (sp->fts_fd_ring).ir_front = 0;\u000a  (sp->fts_fd_ring).ir_back = 0;\u000a  *(undefined4 *)&(sp->fts_fd_ring).ir_empty = 0;\u000a  (sp->fts_fd_ring).ir_data[0] = 0;\u000a  (sp->fts_fd_ring).ir_data[1] = 0;\u000a  (sp->fts_fd_ring).ir_data[2] = 0;\u000a  (sp->fts_fd_ring).ir_data[3] = 0;\u000a  *(undefined4 *)&sp->fts_leaf_optimization_works_ht = 0;\u000a  *(undefined4 *)((long)&sp->fts_leaf_optimization_works_ht + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cycle = 0;\u000a  *(undefined4 *)((long)&sp->fts_cycle + 4) = 0;\u000a  *(undefined4 *)&sp->fts_compar = 0;\u000a  *(undefined4 *)((long)&sp->fts_compar + 4) = 0;\u000a  sp->fts_options = 0;\u000a  *(undefined4 *)&sp->field_0x4c = 0;\u000a  *(undefined4 *)&sp->fts_pathlen = 0;\u000a  *(undefined4 *)((long)&sp->fts_pathlen + 4) = 0;\u000a  *(undefined4 *)&sp->fts_nitems = 0;\u000a  *(undefined4 *)((long)&sp->fts_nitems + 4) = 0;\u000a  *(undefined4 *)&sp->fts_path = 0;\u000a  *(undefined4 *)((long)&sp->fts_path + 4) = 0;\u000a  sp->fts_rfd = 0;\u000a  sp->fts_cwd_fd = 0;\u000a  *(undefined4 *)&sp->fts_array = 0;\u000a  *(undefined4 *)((long)&sp->fts_array + 4) = 0;\u000a  *(undefined4 *)&sp->fts_dev = 0;\u000a  *(undefined4 *)((long)&sp->fts_dev + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cur = 0;\u000a  *(undefined4 *)((long)&sp->fts_cur + 4) = 0;\u000a  *(undefined4 *)&sp->fts_child = 0;\u000a  *(undefined4 *)((long)&sp->fts_child + 4) = 0;\u000a  sp->fts_compar = in_RDX;\u000a  uVar5 = uVar1 & 0xfffffdfb | 4;\u000a  if (((ulong)compar & 2) == 0) {\u000a    uVar5 = uVar1;\u000a  }\u000a  sp->fts_options = uVar5;\u000a  sp->fts_cwd_fd = -100;\u000a  sVar7 = fts_maxarglen(argv);\u000a  more = 0x1000;\u000a  if (0x1000 < sVar7) {\u000a    more = sVar7;\u000a  }\u000a  _Var3 = fts_palloc(sp,more);\u000a  if (_Var3 == false) goto LAB_004054f4;\u000a  if (*argv == (char *)0x0) {\u000a    __ptr = (FTSENT *)0x0;\u000aLAB_004052bb:\u000a    if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a      local_59 = 1;\u000a    }\u000a    else {\u000a      local_59 = (byte)(((ulong)*(byte *)((long)&sp->fts_options + 1) & 0xffffffffffffff04) >> 2);\u000a    }\u000a    __s = *argv;\u000a    if (__s == (char *)0x0) {\u000a      local_58 = (FTSENT *)0x0;\u000a    }\u000a    else {\u000a      local_58 = (FTSENT *)0x0;\u000a      local_48 = (FTSENT *)0x0;\u000a      nitems = 0;\u000a      do {\u000a        more = strlen(__s);\u000a        if (((((ulong)compar & 0x1000) == 0) && (2 < more)) && (__s[more - 1] == '/')) {\u000a          do {\u000a            if (__s[more - 2] != '/') break;\u000a            more = more - 1;\u000a          } while (1 < more);\u000a        }\u000a        p = fts_alloc(sp,*argv,more);\u000a        if (p == (FTSENT *)0x0) goto LAB_004054db;\u000a        p->fts_level = 0;\u000a        *(FTSENT **)&p->fts_parent = __ptr;\u000a        *(FTSENT **)&p->fts_accpath = p + 1;\u000a        if ((local_58 != (FTSENT *)0x0 & local_59) == 1) {\u000a          p->fts_info = 0xb;\u000a          fts_set_stat_required(p);\u000a          if (in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405377;\u000aLAB_00405382:\u000a          p->fts_link = (_ftsent *)0x0;\u000a          p_Var2 = (_ftsent *)p;\u000a          if (local_58 != (FTSENT *)0x0) {\u000a            *(FTSENT **)&local_48->fts_link = p;\u000a            p_Var2 = (_ftsent *)local_58;\u000a          }\u000a        }\u000a        else {\u000a          uVar4 = fts_stat(sp,p);\u000a          p->fts_info = uVar4;\u000a          if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405382;\u000aLAB_00405377:\u000a          *(FTSENT **)&p->fts_link = local_58;\u000a          p_Var2 = (_ftsent *)p;\u000a          p = local_48;\u000a        }\u000a        local_48 = p;\u000a        local_58 = (FTSENT *)p_Var2;\u000a        nitems = nitems + 1;\u000a        __s = argv[1];\u000a        argv = argv + 1;\u000a      } while (__s != (char *)0x0);\u000a      if ((in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) && (1 < nitems)) {\u000a        local_58 = fts_sort(sp,local_58,nitems);\u000a      }\u000a    }\u000a    p = fts_alloc(sp,\u000a                     "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                     + 0x1d0,0);\u000a    *(FTSENT **)&sp->fts_cur = p;\u000a    if (p != (FTSENT *)0x0) {\u000a      *(FTSENT **)&p->fts_link = local_58;\u000a      sp->fts_cur->fts_info = 9;\u000a      _Var3 = setup_dir(sp);\u000a      if (_Var3 != false) {\u000a        if ((*(ushort *)&sp->fts_options & 0x204) == 0) {\u000a          iVar6 = diropen(sp,".");\u000a          sp->fts_rfd = iVar6;\u000a          if (iVar6 < 0) {\u000a            *(byte *)&sp->fts_options = *(byte *)&sp->fts_options | 4;\u000a          }\u000a        }\u000a        i_ring_init(&sp->fts_fd_ring);\u000a        return sp;\u000a      }\u000a    }\u000aLAB_004054db:\u000a    fts_lfree(local_58);\u000a    free(__ptr);\u000a  }\u000a  else {\u000a    __ptr = fts_alloc(sp,\u000a                         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                         + 0x1d0,0);\u000a    if (__ptr != (FTSENT *)0x0) {\u000a      __ptr->fts_level = -1;\u000a      goto LAB_004052bb;\u000a    }\u000a  }\u000a  free(sp->fts_path);\u000aLAB_004054f4:\u000a  free(sp);\u000a  return (FTS *)0x0;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R15,RDI\nCMP R14D,0x2000\nJNC 0x00405298\nMOV EAX,R14D\nAND EAX,0x204\nCMP EAX,0x204\nJZ 0x00405298\nTEST R14B,0x12\nJZ 0x00405298\nMOV EDI,0x80\nCALL 0x00401980\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004052a3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV qword ptr [R13 + 0x40],RBP\nMOV EAX,R14D\nAND EAX,0xfffffdfb\nOR EAX,0x4\nTEST R14B,0x2\nCMOVZ EAX,R14D\nMOV dword ptr [R13 + 0x48],EAX\nMOV dword ptr [R13 + 0x2c],0xffffff9c\nMOV RDI,R15\nCALL 0x00405510\nCMP RAX,0x1000\nMOV ESI,0x1000\nCMOVA RSI,RAX\nMOV RDI,R13\nCALL 0x00405560\nTEST AL,AL\nJZ 0x004054f4\nCMP qword ptr [R15],0x0\nJZ 0x004052b8\nMOV ESI,0x40a630\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x004055c0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004054eb\nMOV qword ptr [R12 + 0x58],-0x1\nJMP 0x004052bb\nCALL 0x00401700\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R12D,R12D\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x004052d4\nMOV AL,byte ptr [R13 + 0x49]\nAND AL,0x4\nSHR AL,0x2\nMOV byte ptr [RSP + 0xf],AL\nJMP 0x004052d9\nMOV byte ptr [RSP + 0xf],0x1\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x0040542e\nMOV qword ptr [RSP + 0x18],R12\nMOV qword ptr [RSP + 0x30],RBP\nAND R14D,0x1000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nJMP 0x004053c0\nMOV qword ptr [RBP + 0x58],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBP + 0x8],RAX\nMOV RAX,RBP\nADD RAX,0x108\nMOV qword ptr [RBP + 0x30],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nSETNZ AL\nAND AL,byte ptr [RSP + 0xf]\nCMP AL,0x1\nJNZ 0x0040535e\nMOV word ptr [RBP + 0x70],0xb\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00405650\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x00405377\nJMP 0x00405382\nXOR EDX,EDX\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x00405670\nMOV word ptr [RBP + 0x70],AX\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x00405382\nMOV qword ptr [RBP + 0x10],RBX\nMOV qword ptr [RSP + 0x10],RBP\nJMP 0x0040539d\nMOV qword ptr [RBP + 0x10],0x0\nTEST RBX,RBX\nJZ 0x004053b2\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX + 0x10],RBP\nMOV qword ptr [RSP + 0x20],RBP\nINC R12\nMOV R13,qword ptr [R15 + 0x8]\nADD R15,0x8\nTEST R13,R13\nJNZ 0x004053c0\nJMP 0x00405437\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040537b\nMOV RDI,R13\nCALL 0x004017d0\nTEST R14D,R14D\nJNZ 0x00405400\nCMP RAX,0x3\nJC 0x00405400\nCMP byte ptr [R13 + RAX*0x1 + -0x1],0x2f\nJNZ 0x00405400\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [R13 + RAX*0x1 + -0x2],0x2f\nJNZ 0x00405400\nDEC RAX\nCMP RAX,0x1\nJA 0x004053e0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RDX,RAX\nCALL 0x004055c0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00405310\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004054db\nXOR EBX,EBX\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x0040546e\nCMP qword ptr [RSP + 0x30],0x0\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x00405464\nCMP R12,0x2\nJC 0x00405464\nMOV RDI,R13\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x004057e0\nMOV RBX,RAX\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x0040546e\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nMOV ESI,0x40a630\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x004055c0\nMOV qword ptr [R13],RAX\nTEST RAX,RAX\nJZ 0x004054db\nMOV qword ptr [RAX + 0x10],RBX\nMOV RAX,qword ptr [R13]\nMOV word ptr [RAX + 0x70],0x9\nMOV RDI,R13\nCALL 0x004058d0\nTEST AL,AL\nJZ 0x004054db\nMOVZX EAX,word ptr [R13 + 0x48]\nTEST AX,0x204\nJNZ 0x004054c5\nMOV ESI,0x40b5ca\nMOV RDI,R13\nCALL 0x00405940\nMOV dword ptr [R13 + 0x28],EAX\nTEST EAX,EAX\nJNS 0x004054c5\nOR byte ptr [R13 + 0x48],0x4\nMOV RDI,R13\nADD RDI,0x60\nMOV ESI,0xffffffff\nCALL 0x004089d0\nJMP 0x004052a6\nMOV RDI,RBX\nCALL 0x004059a0\nMOV RDI,R12\nCALL 0x004016e0\nMOV RDI,qword ptr [R13 + 0x20]\nCALL 0x004016e0\nMOV RDI,R13\nCALL 0x004016e0\nJMP 0x004052a3\n'
p1404
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d5\n41 89 f6\n49 89 ff\n41 81 fe 00 20 00 00\n0f 83 d4 00 00 00\n44 89 f0\n25 04 02 00 00\n3d 04 02 00 00\n0f 84 c1 00 00 00\n41 f6 c6 12\n0f 84 b7 00 00 00\nbf 80 00 00 00\ne8 95 c7 ff ff\n49 89 c5\n4d 85 ed\n0f 84 ac 00 00 00\n0f 57 c0\n41 0f 11 45 70\n41 0f 11 45 60\n41 0f 11 45 50\n41 0f 11 45 40\n41 0f 11 45 30\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n49 89 6d 40\n44 89 f0\n25 fb fd ff ff\n83 c8 04\n41 f6 c6 02\n41 0f 44 c6\n41 89 45 48\n41 c7 45 2c 9c ff ff ff\n4c 89 ff\ne8 c3 02 00 00\n48 3d 00 10 00 00\nbe 00 10 00 00\n48 0f 47 f0\n4c 89 ef\ne8 fc 02 00 00\n84 c0\n0f 84 88 02 00 00\n49 83 3f 00\n74 46\nbe 30 a6 40 00\n31 d2\n4c 89 ef\ne8 3f 03 00 00\n49 89 c4\n4d 85 e4\n0f 84 5e 02 00 00\n49 c7 44 24 58 ff ff ff ff\neb 23\ne8 63 c4 ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 e4\n48 85 ed\n4c 89 6c 24 28\n74 0f\n41 8a 45 49\n24 04\nc0 e8 02\n88 44 24 0f\neb 05\nc6 44 24 0f 01\n4d 8b 2f\n4d 85 ed\n0f 84 49 01 00 00\n4c 89 64 24 18\n48 89 6c 24 30\n41 81 e6 00 10 00 00\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 20\n45 31 e4\ne9 b4 00 00 00\n48 c7 45 58 00 00 00 00\n48 8b 44 24 18\n48 89 45 08\n48 89 e8\n48 05 08 01 00 00\n48 89 45 30\n48 8b 5c 24 10\n48 85 db\n0f 95 c0\n22 44 24 0f\n3c 01\n75 1d\n66 c7 45 70 0b 00\nbe 01 00 00 00\n48 89 ef\ne8 fc 02 00 00\n48 83 7c 24 30 00\n75 1b\neb 24\n31 d2\n4c 89 ef\n48 89 ee\ne8 05 03 00 00\n66 89 45 70\n48 83 7c 24 30 00\n74 0b\n48 89 5d 10\n48 89 6c 24 10\neb 1b\n48 c7 45 10 00 00 00 00\n48 85 db\n74 23\n48 8b 44 24 20\n48 89 68 10\n48 89 6c 24 20\n49 ff c4\n4d 8b 6f 08\n49 83 c7 08\n4d 85 ed\n75 13\ne9 85 00 00 00\n48 89 e8\n48 89 44 24 20\neb bf\n4c 89 ef\ne8 08 c4 ff ff\n45 85 f6\n75 33\n48 83 f8 03\n72 2d\n41 80 7c 05 ff 2f\n75 25\n0f 1f 44 00 00\n41 80 7c 05 fe 2f\n75 18\n48 ff c8\n48 83 f8 01\n77 ef\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 37\n4c 8b 6c 24 28\n4c 89 ef\n48 89 c2\ne8 ad 01 00 00\n48 89 c5\n48 85 ed\n0f 85 f1 fe ff ff\n4c 8b 64 24 18\n48 8b 5c 24 10\ne9 ad 00 00 00\n31 db\n4c 8b 6c 24 28\neb 37\n48 83 7c 24 30 00\n4c 8b 6c 24 28\n74 20\n49 83 fc 02\n72 1a\n4c 89 ef\n48 8b 74 24 10\n4c 89 e2\ne8 86 03 00 00\n48 89 c3\n4c 8b 64 24 18\neb 0a\n4c 8b 64 24 18\n48 8b 5c 24 10\nbe 30 a6 40 00\n31 d2\n4c 89 ef\ne8 43 01 00 00\n49 89 45 00\n48 85 c0\n74 55\n48 89 58 10\n49 8b 45 00\n66 c7 40 70 09 00\n4c 89 ef\ne8 34 04 00 00\n84 c0\n74 3b\n41 0f b7 45 48\n66 a9 04 02\n75 1a\nbe ca b5 40 00\n4c 89 ef\ne8 88 04 00 00\n41 89 45 28\n85 c0\n79 05\n41 80 4d 48 04\n4c 89 ef\n48 83 c7 60\nbe ff ff ff ff\ne8 fa 34 00 00\ne9 cb fd ff ff\n48 89 df\ne8 bd 04 00 00\n4c 89 e7\ne8 f5 c1 ff ff\n49 8b 7d 20\ne8 ec c1 ff ff\n4c 89 ef\ne8 e4 c1 ff ff\ne9 a2 fd ff ff\n'
p1405
S'.text:00000000004051a0\n.text:00000000004051a1\n.text:00000000004051a3\n.text:00000000004051a5\n.text:00000000004051a7\n.text:00000000004051a9\n.text:00000000004051aa\n.text:00000000004051ae\n.text:00000000004051b1\n.text:00000000004051b4\n.text:00000000004051b7\n.text:00000000004051be\n.text:00000000004051c4\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051d1\n.text:00000000004051d7\n.text:00000000004051db\n.text:00000000004051e1\n.text:00000000004051e6\n.text:00000000004051eb\n.text:00000000004051ee\n.text:00000000004051f1\n.text:00000000004051f7\n.text:00000000004051fa\n.text:00000000004051ff\n.text:0000000000405204\n.text:0000000000405209\n.text:000000000040520e\n.text:0000000000405213\n.text:0000000000405218\n.text:000000000040521d\n.text:0000000000405222\n.text:0000000000405226\n.text:0000000000405229\n.text:000000000040522e\n.text:0000000000405231\n.text:0000000000405235\n.text:0000000000405239\n.text:000000000040523d\n.text:0000000000405245\n.text:0000000000405248\n.text:000000000040524d\n.text:0000000000405253\n.text:0000000000405258\n.text:000000000040525c\n.text:000000000040525f\n.text:0000000000405264\n.text:0000000000405266\n.text:000000000040526c\n.text:0000000000405270\n.text:0000000000405272\n.text:0000000000405277\n.text:0000000000405279\n.text:000000000040527c\n.text:0000000000405281\n.text:0000000000405284\n.text:0000000000405287\n.text:000000000040528d\n.text:0000000000405296\n.text:0000000000405298\n.text:000000000040529d\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052a9\n.text:00000000004052ad\n.text:00000000004052ae\n.text:00000000004052b0\n.text:00000000004052b2\n.text:00000000004052b4\n.text:00000000004052b6\n.text:00000000004052b7\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052be\n.text:00000000004052c3\n.text:00000000004052c5\n.text:00000000004052c9\n.text:00000000004052cb\n.text:00000000004052ce\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d9\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e5\n.text:00000000004052ea\n.text:00000000004052ef\n.text:00000000004052f6\n.text:00000000004052f8\n.text:00000000004052fd\n.text:00000000004052ff\n.text:0000000000405304\n.text:0000000000405307\n.text:0000000000405310\n.text:0000000000405318\n.text:000000000040531d\n.text:0000000000405321\n.text:0000000000405324\n.text:000000000040532a\n.text:000000000040532e\n.text:0000000000405333\n.text:0000000000405336\n.text:0000000000405339\n.text:000000000040533d\n.text:000000000040533f\n.text:0000000000405341\n.text:0000000000405347\n.text:000000000040534c\n.text:000000000040534f\n.text:0000000000405354\n.text:000000000040535a\n.text:000000000040535c\n.text:000000000040535e\n.text:0000000000405360\n.text:0000000000405363\n.text:0000000000405366\n.text:000000000040536b\n.text:000000000040536f\n.text:0000000000405375\n.text:0000000000405377\n.text:000000000040537b\n.text:0000000000405380\n.text:0000000000405382\n.text:000000000040538a\n.text:000000000040538d\n.text:000000000040538f\n.text:0000000000405394\n.text:0000000000405398\n.text:000000000040539d\n.text:00000000004053a0\n.text:00000000004053a4\n.text:00000000004053a8\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053b2\n.text:00000000004053b5\n.text:00000000004053ba\n.text:00000000004053c0\n.text:00000000004053c3\n.text:00000000004053c8\n.text:00000000004053cb\n.text:00000000004053cd\n.text:00000000004053d1\n.text:00000000004053d3\n.text:00000000004053d9\n.text:00000000004053db\n.text:00000000004053e0\n.text:00000000004053e6\n.text:00000000004053e8\n.text:00000000004053eb\n.text:00000000004053ef\n.text:00000000004053f1\n.text:0000000000405400\n.text:0000000000405403\n.text:0000000000405408\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405413\n.text:0000000000405416\n.text:0000000000405419\n.text:000000000040541f\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542e\n.text:0000000000405430\n.text:0000000000405435\n.text:0000000000405437\n.text:000000000040543d\n.text:0000000000405442\n.text:0000000000405444\n.text:0000000000405448\n.text:000000000040544a\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405455\n.text:000000000040545a\n.text:000000000040545d\n.text:0000000000405462\n.text:0000000000405464\n.text:0000000000405469\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405481\n.text:0000000000405484\n.text:0000000000405486\n.text:000000000040548a\n.text:000000000040548e\n.text:0000000000405494\n.text:0000000000405497\n.text:000000000040549c\n.text:000000000040549e\n.text:00000000004054a0\n.text:00000000004054a5\n.text:00000000004054a9\n.text:00000000004054ab\n.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b8\n.text:00000000004054bc\n.text:00000000004054be\n.text:00000000004054c0\n.text:00000000004054c5\n.text:00000000004054c8\n.text:00000000004054cc\n.text:00000000004054d1\n.text:00000000004054d6\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e3\n.text:00000000004054e6\n.text:00000000004054eb\n.text:00000000004054ef\n.text:00000000004054f4\n.text:00000000004054f7\n.text:00000000004054fc\n'
p1406
tp1407
sS'fts_stat'
p1408
(S'\n__stdcall fts_stat(FTS * sp, FTSENT * p)\n'
p1409
V\u000aunsigned_short fts_stat(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  stat *__buf;\u000a  char cVar1;\u000a  ushort uVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  byte in_DL;\u000a  \u000a  __buf = p->fts_statp;\u000a  if (((sp->fts_options & 2U) == 0) &&\u000a     ((byte)(p->fts_level == 0 & (byte)sp->fts_options & 1 | in_DL) != 1)) {\u000a    iVar3 = fstatat(sp->fts_cwd_fd,p->fts_accpath,(stat *)__buf,0x100);\u000a    if (iVar3 == 0) {\u000aLAB_0040572d:\u000a      uVar2 = *(ushort *)&p->fts_statp[0].st_mode & 0xf000;\u000a      if (uVar2 == 0x8000) {\u000a        return 8;\u000a      }\u000a      if (uVar2 == 0xa000) {\u000a        return 0xc;\u000a      }\u000a      if (uVar2 != 0x4000) {\u000a        return 3;\u000a      }\u000a      p->fts_n_dirs_remaining =\u000a           p->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a      if (*(char *)&p[1].fts_cycle != '.') {\u000a        return 1;\u000a      }\u000a      cVar1 = *(char *)((long)&p[1].fts_cycle + 1);\u000a      if (cVar1 != 0) {\u000a        if (cVar1 != '.') {\u000a          return 1;\u000a        }\u000a        if (*(char *)((long)&p[1].fts_cycle + 2) != 0) {\u000a          return 1;\u000a        }\u000a      }\u000a      if (p->fts_level != 0) {\u000a        return 5;\u000a      }\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a  }\u000a  else {\u000a    iVar3 = stat(p->fts_accpath,(stat *)__buf);\u000a    if (iVar3 == 0) goto LAB_0040572d;\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a    if (iVar3 == 2) {\u000a      iVar4 = lstat(p->fts_accpath,(stat *)__buf);\u000a      iVar3 = 2;\u000a      if (iVar4 == 0) {\u000a        *piVar5 = 0;\u000a        return 0xd;\u000a      }\u000a    }\u000a  }\u000a  p->fts_errno = iVar3;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)p->fts_statp[0].__glibc_reserved = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blocks = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blocks + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_size = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_size + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blksize = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blksize + 4) = 0;\u000a  p->fts_statp[0].st_gid = 0;\u000a  p->fts_statp[0].__pad0 = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_rdev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_rdev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_nlink = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_nlink + 4) = 0;\u000a  p->fts_statp[0].st_mode = 0;\u000a  p->fts_statp[0].st_uid = 0;\u000a  *(undefined4 *)&__buf->st_dev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_dev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ino = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ino + 4) = 0;\u000a  return 10;\u000a}\u000a\u000a
p1410
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nLEA RBX,[R14 + 0x78]\nMOV ECX,dword ptr [R15 + 0x48]\nCMP qword ptr [R14 + 0x58],0x0\nSETZ AL\nTEST CL,0x2\nJNZ 0x004056bd\nAND ECX,0x1\nAND AL,CL\nOR AL,DL\nXOR AL,0x1\nJZ 0x004056bd\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x004098c0\nTEST EAX,EAX\nJZ 0x0040572d\nCALL 0x00401700\nMOV ECX,dword ptr [RAX]\nJMP 0x004056f6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x00409890\nTEST EAX,EAX\nJZ 0x0040572d\nCALL 0x00401700\nMOV R15,RAX\nMOV ECX,dword ptr [R15]\nCMP ECX,0x2\nJNZ 0x004056f6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x004098b0\nMOV ECX,0x2\nTEST EAX,EAX\nJZ 0x004057c2\nMOV dword ptr [R14 + 0x40],ECX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x80 + RBX],XMM0\nMOVUPS xmmword ptr [RBX + 0x70],XMM0\nMOVUPS xmmword ptr [RBX + 0x60],XMM0\nMOVUPS xmmword ptr [RBX + 0x50],XMM0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AX,0xa\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOVZX EAX,word ptr [0x90 + R14]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x004057b0\nMOVZX EAX,AX\nCMP EAX,0xa000\nJZ 0x004057a7\nCMP EAX,0x4000\nJNZ 0x004057b9\nMOV RAX,qword ptr [0x88 + R14]\nMOV ECX,dword ptr [R15 + 0x48]\nSHR ECX,0x4\nNOT ECX\nAND ECX,0x2\nSUB RAX,RCX\nMOV qword ptr [R14 + 0x68],RAX\nMOV AX,0x1\nCMP byte ptr [0x108 + R14],0x2e\nJNZ 0x00405727\nMOV CL,byte ptr [0x109 + R14]\nTEST CL,CL\nJZ 0x00405794\nCMP CL,0x2e\nJNZ 0x00405727\nCMP byte ptr [0x10a + R14],0x0\nJNZ 0x00405727\nCMP qword ptr [R14 + 0x58],0x0\nMOV CX,0x1\nMOV AX,0x5\nCMOVZ AX,CX\nJMP 0x00405727\nMOV AX,0xc\nJMP 0x00405727\nMOV AX,0x8\nJMP 0x00405727\nMOV AX,0x3\nJMP 0x00405727\nMOV dword ptr [R15],0x0\nMOV AX,0xd\nJMP 0x00405727\n'
p1411
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8d 5e 78\n41 8b 4f 48\n49 83 7e 58 00\n0f 94 c0\nf6 c1 02\n75 2d\n83 e1 01\n20 c8\n08 d0\n34 01\n74 22\n41 8b 7f 2c\n49 8b 76 30\nb9 00 01 00 00\n48 89 da\ne8 10 42 00 00\n85 c0\n74 79\ne8 47 c0 ff ff\n8b 08\neb 39\n49 8b 7e 30\n48 89 de\ne8 c7 41 00 00\n85 c0\n74 60\ne8 2e c0 ff ff\n49 89 c7\n41 8b 0f\n83 f9 02\n75 19\n49 8b 7e 30\n48 89 de\ne8 c7 41 00 00\nb9 02 00 00 00\n85 c0\n0f 84 cc 00 00 00\n41 89 4e 40\n0f 57 c0\n0f 11 83 80 00 00 00\n0f 11 43 70\n0f 11 43 60\n0f 11 43 50\n0f 11 43 40\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n66 b8 0a 00\n5b\n41 5e\n41 5f\nc3\n41 0f b7 86 90 00 00 00\n25 00 f0 00 00\n3d 00 80 00 00\n74 6f\n0f b7 c0\n3d 00 a0 00 00\n74 5c\n3d 00 40 00 00\n75 67\n49 8b 86 88 00 00 00\n41 8b 4f 48\nc1 e9 04\nf7 d1\n83 e1 02\n48 29 c8\n49 89 46 68\n66 b8 01 00\n41 80 be 08 01 00 00 2e\n75 ad\n41 8a 8e 09 01 00 00\n84 c9\n74 0f\n80 f9 2e\n75 9d\n41 80 be 0a 01 00 00 00\n75 93\n49 83 7e 58 00\n66 b9 01 00\n66 b8 05 00\n66 0f 44 c1\neb 80\n66 b8 0c 00\ne9 77 ff ff ff\n66 b8 08 00\ne9 6e ff ff ff\n66 b8 03 00\ne9 65 ff ff ff\n41 c7 07 00 00 00 00\n66 b8 0d 00\ne9 55 ff ff ff\n'
p1412
S'.text:0000000000405670\n.text:0000000000405672\n.text:0000000000405674\n.text:0000000000405675\n.text:0000000000405678\n.text:000000000040567b\n.text:000000000040567f\n.text:0000000000405683\n.text:0000000000405688\n.text:000000000040568b\n.text:000000000040568e\n.text:0000000000405690\n.text:0000000000405693\n.text:0000000000405695\n.text:0000000000405697\n.text:0000000000405699\n.text:000000000040569b\n.text:000000000040569f\n.text:00000000004056a3\n.text:00000000004056a8\n.text:00000000004056ab\n.text:00000000004056b0\n.text:00000000004056b2\n.text:00000000004056b4\n.text:00000000004056b9\n.text:00000000004056bb\n.text:00000000004056bd\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c9\n.text:00000000004056cb\n.text:00000000004056cd\n.text:00000000004056d2\n.text:00000000004056d5\n.text:00000000004056d8\n.text:00000000004056db\n.text:00000000004056dd\n.text:00000000004056e1\n.text:00000000004056e4\n.text:00000000004056e9\n.text:00000000004056ee\n.text:00000000004056f0\n.text:00000000004056f6\n.text:00000000004056fa\n.text:00000000004056fd\n.text:0000000000405704\n.text:0000000000405708\n.text:000000000040570c\n.text:0000000000405710\n.text:0000000000405714\n.text:0000000000405718\n.text:000000000040571c\n.text:0000000000405720\n.text:0000000000405723\n.text:0000000000405727\n.text:0000000000405728\n.text:000000000040572a\n.text:000000000040572c\n.text:000000000040572d\n.text:0000000000405735\n.text:000000000040573a\n.text:000000000040573f\n.text:0000000000405741\n.text:0000000000405744\n.text:0000000000405749\n.text:000000000040574b\n.text:0000000000405750\n.text:0000000000405752\n.text:0000000000405759\n.text:000000000040575d\n.text:0000000000405760\n.text:0000000000405762\n.text:0000000000405765\n.text:0000000000405768\n.text:000000000040576c\n.text:0000000000405770\n.text:0000000000405778\n.text:000000000040577a\n.text:0000000000405781\n.text:0000000000405783\n.text:0000000000405785\n.text:0000000000405788\n.text:000000000040578a\n.text:0000000000405792\n.text:0000000000405794\n.text:0000000000405799\n.text:000000000040579d\n.text:00000000004057a1\n.text:00000000004057a5\n.text:00000000004057a7\n.text:00000000004057ab\n.text:00000000004057b0\n.text:00000000004057b4\n.text:00000000004057b9\n.text:00000000004057bd\n.text:00000000004057c2\n.text:00000000004057c9\n.text:00000000004057cd\n'
p1413
tp1414
sS'clear_ungetc_buffer_preserving_position'
p1415
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1416
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1417
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00409567\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00409580\n'
p1418
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1419
S'.text:0000000000409560\n.text:0000000000409564\n.text:0000000000409566\n.text:0000000000409567\n.text:0000000000409569\n.text:000000000040956e\n'
p1420
tp1421
sS'security_compute_create'
p1422
(S'\n__stdcall security_compute_create(security_context_t scon, security_context_t tcon, security_context_t * newcon)\n'
p1423
V\u000aint security_compute_create\u000a              (security_context_t scon,security_context_t tcon,security_context_t *newcon)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1424
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1425
S'50\ne8 3a cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1426
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c6\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d2\n'
p1427
tp1428
sS'xnmalloc'
p1429
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1430
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1431
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404f21\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404f30\nPUSH RAX\nCALL 0x004050c0\n'
p1432
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1433
S'.text:0000000000404f10\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1c\n.text:0000000000404f1f\n.text:0000000000404f21\n.text:0000000000404f22\n'
p1434
tp1435
sS'hash_string'
p1436
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1437
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1438
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00407e23\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00407e00\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1439
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1440
S'.text:0000000000407df0\n.text:0000000000407df2\n.text:0000000000407df4\n.text:0000000000407df6\n.text:0000000000407df9\n.text:0000000000407dfb\n.text:0000000000407e00\n.text:0000000000407e03\n.text:0000000000407e07\n.text:0000000000407e0a\n.text:0000000000407e0d\n.text:0000000000407e10\n.text:0000000000407e12\n.text:0000000000407e15\n.text:0000000000407e18\n.text:0000000000407e1b\n.text:0000000000407e1d\n.text:0000000000407e1f\n.text:0000000000407e22\n.text:0000000000407e23\n.text:0000000000407e25\n.text:0000000000407e28\n'
p1441
tp1442
sS'cycle_check'
p1443
(S'\n__stdcall cycle_check(cycle_check_state * state, stat * sb)\n'
p1444
V\u000a_Bool cycle_check(cycle_check_state *state,stat *sb)\u000a\u000a{\u000a  undefined uVar1;\u000a  _Bool _Var2;\u000a  uintmax_t i;\u000a  \u000a  if (state->magic != 0x95f616) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->magic == 9827862","lib/cycle-check.c",0x3c,\u000a                  "_Bool cycle_check(struct cycle_check_state *, const struct stat *)");\u000a  }\u000a  if (((state->chdir_counter == 0) || (sb->st_ino != (state->dev_ino).st_ino)) ||\u000a     (uVar1 = 1, sb->st_dev != (state->dev_ino).st_dev)) {\u000a    i = state->chdir_counter + 1;\u000a    state->chdir_counter = i;\u000a    _Var2 = is_zero_or_power_of_two(i);\u000a    if (_Var2 != false) {\u000a      if (i == 0) {\u000a        return true;\u000a      }\u000a      (state->dev_ino).st_dev = sb->st_dev;\u000a      (state->dev_ino).st_ino = sb->st_ino;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1445
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCMP dword ptr [R15 + 0x18],0x95f616\nJNZ 0x00407924\nMOV RBX,qword ptr [R15 + 0x10]\nTEST RBX,RBX\nJZ 0x004078f2\nMOV RAX,qword ptr [R14 + 0x8]\nCMP RAX,qword ptr [R15]\nJNZ 0x004078f2\nMOV RCX,qword ptr [R14]\nMOV AL,0x1\nCMP RCX,qword ptr [R15 + 0x8]\nJZ 0x0040791a\nINC RBX\nMOV qword ptr [R15 + 0x10],RBX\nMOV RDI,RBX\nCALL 0x00407940\nTEST AL,AL\nJZ 0x00407918\nTEST RBX,RBX\nJZ 0x00407920\nMOV RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RAX,qword ptr [R14 + 0x8]\nMOV qword ptr [R15],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x0040791a\nMOV EDI,0x40b8f0\nMOV ESI,0x40b908\nMOV EDX,0x3c\nMOV ECX,0x40b91a\nCALL 0x00401860\n'
p1446
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n41 81 7f 18 16 f6 95 00\n75 4f\n49 8b 5f 10\n48 85 db\n74 14\n49 8b 46 08\n49 3b 07\n75 0b\n49 8b 0e\nb0 01\n49 3b 4f 08\n74 28\n48 ff c3\n49 89 5f 10\n48 89 df\ne8 3f 00 00 00\n84 c0\n74 13\n48 85 db\n74 16\n49 8b 06\n49 89 47 08\n49 8b 46 08\n49 89 07\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\nbf f0 b8 40 00\nbe 08 b9 40 00\nba 3c 00 00 00\nb9 1a b9 40 00\ne8 23 9f ff ff\n'
p1447
S'.text:00000000004078c0\n.text:00000000004078c2\n.text:00000000004078c4\n.text:00000000004078c5\n.text:00000000004078c8\n.text:00000000004078cb\n.text:00000000004078d3\n.text:00000000004078d5\n.text:00000000004078d9\n.text:00000000004078dc\n.text:00000000004078de\n.text:00000000004078e2\n.text:00000000004078e5\n.text:00000000004078e7\n.text:00000000004078ea\n.text:00000000004078ec\n.text:00000000004078f0\n.text:00000000004078f2\n.text:00000000004078f5\n.text:00000000004078f9\n.text:00000000004078fc\n.text:0000000000407901\n.text:0000000000407903\n.text:0000000000407905\n.text:0000000000407908\n.text:000000000040790a\n.text:000000000040790d\n.text:0000000000407911\n.text:0000000000407915\n.text:0000000000407918\n.text:000000000040791a\n.text:000000000040791b\n.text:000000000040791d\n.text:000000000040791f\n.text:0000000000407920\n.text:0000000000407922\n.text:0000000000407924\n.text:0000000000407929\n.text:000000000040792e\n.text:0000000000407933\n.text:0000000000407938\n'
p1448
tp1449
sS'quotearg_char'
p1450
(S'\n__stdcall quotearg_char(char * arg)\n'
p1451
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1452
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004040f0\n'
p1453
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1454
S'.text:0000000000404160\n.text:0000000000404162\n.text:0000000000404169\n.text:000000000040416b\n'
p1455
tp1456
sS'malloc'
p1457
(S'\n__stdcall malloc(size_t __size)\n'
p1458
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060f170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1459
S'JMP qword ptr [0x0060f170]\n'
p1460
S'ff 25 ea d7 20 00\n'
p1461
S'.plt:0000000000401980\n'
p1462
tp1463
sS'c_tolower'
p1464
(S'\n__stdcall c_tolower()\n'
p1465
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1466
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1467
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1468
S'.text:00000000004077b0\n.text:00000000004077b3\n.text:00000000004077b6\n.text:00000000004077b9\n.text:00000000004077bc\n'
p1469
tp1470
sS'cdb_free'
p1471
(S'\n__stdcall cdb_free(cd_buf * cdb)\n'
p1472
V\u000avoid cdb_free(cd_buf *cdb)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (-1 < (int)*cdb) {\u000a    iVar1 = close((int)*cdb);\u000a    if (iVar1 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("! close_fail","lib/chdir-long.c",0x40,"void cdb_free(const struct cd_buf *)");\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1473
S'PUSH RAX\nMOV EDI,dword ptr [RDI]\nTEST EDI,EDI\nJS 0x004092d0\nCALL 0x004018a0\nTEST EAX,EAX\nJNZ 0x004092d2\nPOP RAX\nRET\nMOV EDI,0x40bc58\nMOV ESI,0x40bbf6\nMOV EDX,0x40\nMOV ECX,0x40bc65\nCALL 0x00401860\n'
p1474
S'50\n8b 3f\n85 ff\n78 09\ne8 d4 85 ff ff\n85 c0\n75 02\n58\nc3\nbf 58 bc 40 00\nbe f6 bb 40 00\nba 40 00 00 00\nb9 65 bc 40 00\ne8 75 85 ff ff\n'
p1475
S'.text:00000000004092c0\n.text:00000000004092c1\n.text:00000000004092c3\n.text:00000000004092c5\n.text:00000000004092c7\n.text:00000000004092cc\n.text:00000000004092ce\n.text:00000000004092d0\n.text:00000000004092d1\n.text:00000000004092d2\n.text:00000000004092d7\n.text:00000000004092dc\n.text:00000000004092e1\n.text:00000000004092e6\n'
p1476
tp1477
sS'getopt_long'
p1478
(S'\n__stdcall getopt_long()\n'
p1479
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060f0b8)();\u000a  return;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x0060f0b8]\n'
p1481
S'ff 25 a2 d8 20 00\n'
p1482
S'.plt:0000000000401810\n'
p1483
tp1484
sS'fts_build'
p1485
(S'\n__stdcall fts_build(FTS * sp)\n'
p1486
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aFTSENT * fts_build(FTS *sp)\u000a\u000a{\u000a  ulong uVar1;\u000a  byte *pbVar2;\u000a  char cVar3;\u000a  DIR *__dirp;\u000a  size_t sVar4;\u000a  int (*pVar5)(_ftsent **,_ftsent **);\u000a  byte bVar6;\u000a  bool bVar7;\u000a  FTSENT *pFVar8;\u000a  _Bool _Var9;\u000a  unsigned_short uVar10;\u000a  int iVar11;\u000a  DIR *__dirp_00;\u000a  int *piVar12;\u000a  dirent *pdVar13;\u000a  size_t namelen;\u000a  FTSENT *p;\u000a  FTSENT *head;\u000a  FTSENT *ent;\u000a  size_t sVar14;\u000a  int in_ESI;\u000a  char *dir;\u000a  long lVar15;\u000a  ulong nitems;\u000a  uint local_a4;\u000a  char *local_88;\u000a  FTSENT *local_60;\u000a  ulong local_58;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  __dirp = (DIR *)ent->fts_dirp;\u000a  if (__dirp == (DIR *)0x0) {\u000a    dir = (char *)0xffffff9c;\u000a    if ((sp->fts_options & 0x204U) == 0x200) {\u000a      dir = (char *)(ulong)(uint)sp->fts_cwd_fd;\u000a    }\u000a    __dirp_00 = opendirat(dir,(int *)ent->fts_accpath);\u000a    ent->fts_dirp = __dirp_00;\u000a    if (__dirp_00 == (DIR *)0x0) goto joined_r0x004063fd;\u000a    if (ent->fts_info == 0xb) {\u000a      uVar10 = fts_stat(sp,ent);\u000a      ent->fts_info = uVar10;\u000a    }\u000a    else {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 1) != 0) {\u000a        leave_dir(sp,ent);\u000a        fts_stat(sp,ent);\u000a        _Var9 = enter_dir(sp,ent);\u000a        if (_Var9 == false) {\u000a          piVar12 = __errno_location();\u000a          *piVar12 = 0xc;\u000a          return (FTSENT *)0;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_a4 = dirfd(__dirp);\u000a    if ((int)local_a4 < 0) {\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000ajoined_r0x004063fd:\u000a      if (in_ESI == 3) {\u000a        ent->fts_info = 4;\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      return (FTSENT *)0x0;\u000a    }\u000a  }\u000a  pVar5 = sp->fts_compar;\u000a  if (in_ESI == 2) {\u000a    lVar15 = 0;\u000a    if (__dirp != (DIR *)0x0) goto LAB_00406498;\u000aLAB_004064aa:\u000a    if ((in_ESI == 3) || (lVar15 != 0)) {\u000a      bVar6 = 1;\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000aLAB_004064ef:\u000a        if ((-1 < (int)local_a4) &&\u000a           (iVar11 = fts_safe_changedir(sp,ent,(char *)(ulong)local_a4), iVar11 == 0))\u000a        goto LAB_00406498;\u000a      }\u000a      else {\u000a        local_a4 = dup_safer();\u000a        if (-1 < (int)local_a4) {\u000a          set_cloexec_flag();\u000a          goto LAB_004064ef;\u000a        }\u000a      }\u000a      if ((in_ESI == 3) && (lVar15 != 0)) {\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      if (((sp->fts_options & 0x200U) != 0) && (-1 < (int)local_a4)) {\u000a        close(local_a4);\u000a      }\u000a      ent->fts_dirp = (DIR *)0x0;\u000a    }\u000a    else {\u000a      bVar6 = 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar15 = -1;\u000a    if ((sp->fts_options & 0x18U) == 0x18) {\u000a      lVar15 = ent->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a    }\u000a    if (__dirp == (DIR *)0x0) goto LAB_004064aa;\u000aLAB_00406498:\u000a    bVar6 = 0;\u000a  }\u000a  sVar4 = ent->fts_pathlen;\u000a  sVar14 = sVar4 - 1;\u000a  if (ent->fts_path[sVar4 - 1] != '/') {\u000a    sVar14 = sVar4;\u000a  }\u000a  if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a    local_88 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_88 = sp->fts_path + sVar14 + 1;\u000a    sp->fts_path[sVar14] = '/';\u000a  }\u000a  uVar1 = sVar14 + 1;\u000a  local_58 = sp->fts_pathlen - uVar1;\u000a  lVar15 = ent->fts_level;\u000a  bVar7 = false;\u000a  local_60 = (FTSENT *)0x0;\u000a  nitems = 0;\u000a  head = (FTSENT *)0x0;\u000a  do {\u000a    __dirp_00 = ent->fts_dirp;\u000a    if (__dirp_00 == (DIR *)0x0) {\u000a      if (bVar7) goto LAB_0040684a;\u000a      goto LAB_00406855;\u000a    }\u000a    while( true ) {\u000a      pdVar13 = readdir((DIR *)__dirp_00);\u000a      if (pdVar13 == (dirent *)0x0) {\u000a        if ((DIR *)ent->fts_dirp != (DIR *)0x0) {\u000a          closedir((DIR *)ent->fts_dirp);\u000a          ent->fts_dirp = (DIR *)0x0;\u000a        }\u000a        goto LAB_00406843;\u000a      }\u000a      if (((*(byte *)&sp->fts_options & 0x20) != 0) || (pdVar13->d_name[0] != '.')) break;\u000a      cVar3 = pdVar13->d_name[1];\u000a      if (cVar3 == '.') {\u000a        cVar3 = pdVar13->d_name[2];\u000a      }\u000a      if (cVar3 != 0) break;\u000a      __dirp_00 = ent->fts_dirp;\u000a      if (__dirp_00 == (DIR *)0x0) goto LAB_00406843;\u000a    }\u000a    namelen = strlen(pdVar13->d_name);\u000a    p = fts_alloc(sp,pdVar13->d_name,namelen);\u000a    if (p == (FTSENT *)0x0) {\u000aLAB_00406988:\u000a      piVar12 = __errno_location();\u000a      iVar11 = *piVar12;\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = iVar11;\u000a      return (FTSENT *)0;\u000a    }\u000a    if (local_58 <= namelen) {\u000a      dir = sp->fts_path;\u000a      _Var9 = fts_palloc(sp,sVar14 + 2 + namelen);\u000a      if (_Var9 == false) goto LAB_00406988;\u000a      if (dir != sp->fts_path) {\u000a        if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a          local_88 = sp->fts_path + uVar1;\u000a        }\u000a        bVar7 = true;\u000a      }\u000a      local_58 = sp->fts_pathlen - uVar1;\u000a    }\u000a    if (CARRY8(namelen,uVar1)) {\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      piVar12 = __errno_location();\u000a      *piVar12 = 0x24;\u000a      return (FTSENT *)0;\u000a    }\u000a    p->fts_level = lVar15 + 1;\u000a    p->fts_parent = sp->fts_cur;\u000a    p->fts_pathlen = namelen + uVar1;\u000a    p->fts_statp[0].st_ino = pdVar13->d_ino;\u000a    if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a      *(FTSENT **)&p->fts_accpath = p + 1;\u000a    }\u000a    else {\u000a      p->fts_accpath = p->fts_path;\u000a      memmove(local_88,p + 1,p->fts_namelen + 1);\u000a    }\u000a    if ((sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) || ((sp->fts_options & 0x400U) != 0)\u000a       ) {\u000a      p->fts_info = 0xb;\u000a      set_stat_type(p->fts_statp);\u000a      fts_set_stat_required(p);\u000a    }\u000a    else {\u000a      uVar10 = fts_stat(sp,p);\u000a      p->fts_info = uVar10;\u000a    }\u000a    p->fts_link = (_ftsent *)0x0;\u000a    pFVar8 = p;\u000a    if (head != (FTSENT *)0x0) {\u000a      *(FTSENT **)&local_60->fts_link = p;\u000a      pFVar8 = head;\u000a    }\u000a    head = pFVar8;\u000a    nitems = nitems + 1;\u000a    local_60 = p;\u000a  } while (nitems < (~-(ulong)(pVar5 == (int (*)(_ftsent **,_ftsent **))0x0) | 100000));\u000aLAB_00406843:\u000a  if (bVar7) {\u000aLAB_0040684a:\u000a    fts_padjust(sp,head);\u000a  }\u000aLAB_00406855:\u000a  if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a    dir = local_88;\u000a    if (uVar1 == sp->fts_pathlen) {\u000a      dir = local_88 + -1;\u000a    }\u000a    if (nitems == 0) {\u000a      dir = local_88 + -1;\u000a    }\u000a    *dir = 0;\u000a  }\u000a  if (!(bool)(__dirp != (DIR *)0x0 | bVar6)) {\u000a    if ((in_ESI != 1) && (nitems != 0)) goto LAB_004068b0;\u000a    if (ent->fts_level == 0) {\u000a      iVar11 = restore_initial_cwd(sp);\u000a    }\u000a    else {\u000a      iVar11 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a    }\u000a    if (iVar11 != 0) {\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      goto LAB_00406958;\u000a    }\u000a  }\u000a  if (nitems == 0) {\u000a    if (in_ESI == 3) {\u000a      ent->fts_info = 6;\u000a    }\u000aLAB_00406958:\u000a    fts_lfree(head);\u000a    return (FTSENT *)0;\u000a  }\u000aLAB_004068b0:\u000a  if ((((10000 < nitems) && (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0)) &&\u000a      ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0)) &&\u000a     (_Var9 = dirent_inode_sort_may_be_useful(), _Var9 != false)) {\u000a    sp->fts_compar = fts_compare_ino;\u000a    head = fts_sort(sp,head,nitems);\u000a    sp->fts_compar = (int (*)(_ftsent **,_ftsent **))0x0;\u000a  }\u000a  if (nitems < 2) {\u000a    return head;\u000a  }\u000a  if (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a    return head;\u000a  }\u000a  ent = fts_sort(sp,head,nitems);\u000a  return ent;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12D,ESI\nMOV R15,RDI\nMOV RBX,qword ptr [R15]\nMOV R14,qword ptr [RBX + 0x18]\nTEST R14,R14\nJZ 0x00406384\nMOV RDI,R14\nCALL 0x00401930\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJNS 0x0040644a\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004018c0\nMOV qword ptr [RBX + 0x18],0x0\nCMP R12D,0x3\nJZ 0x00406403\nJMP 0x00406960\nMOV ECX,dword ptr [R15 + 0x48]\nMOV EAX,ECX\nAND EAX,0x204\nMOV EDI,0xffffff9c\nCMP EAX,0x200\nJNZ 0x0040639f\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST CL,0x10\nJZ 0x004063bb\nTEST CL,0x1\nJZ 0x004063b6\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x004063bb\nMOV EAX,0x20000\nMOV EDX,dword ptr [R15 + 0x48]\nSHL EDX,0x7\nAND EDX,0x40000\nOR EDX,EAX\nLEA RCX,[RSP + 0x4]\nCALL 0x00406ec0\nMOV qword ptr [RBX + 0x18],RAX\nTEST RAX,RAX\nJZ 0x004063f9\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0xb\nJNZ 0x00406418\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00405670\nMOV word ptr [RBX + 0x70],AX\nJMP 0x0040644a\nCMP R12D,0x3\nJNZ 0x00406960\nMOV word ptr [RBX + 0x70],0x4\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nJMP 0x00406960\nTEST byte ptr [R15 + 0x49],0x1\nJZ 0x0040644a\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406110\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00405670\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406be0\nTEST AL,AL\nJZ 0x004069cb\nMOV qword ptr [RSP + 0x8],RBX\nCMP qword ptr [R15 + 0x40],0x1\nSBB RBP,RBP\nCMP R12D,0x2\nJNZ 0x00406467\nXOR R13D,R13D\nTEST R14,R14\nJNZ 0x00406498\nJMP 0x004064aa\nMOV EAX,dword ptr [R15 + 0x48]\nMOV ECX,EAX\nAND ECX,0x18\nMOV R13,-0x1\nCMP ECX,0x18\nJNZ 0x00406493\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R13,qword ptr [0x88 + RCX]\nSHR EAX,0x4\nNOT EAX\nAND EAX,0x2\nSUB R13,RAX\nTEST R14,R14\nJZ 0x004064aa\nMOV dword ptr [RSP + 0x14],0x0\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x0040655c\nCMP R12D,0x3\nJZ 0x004064c5\nTEST R13,R13\nJNZ 0x004064c5\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x0040655c\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x004064ef\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00408f80\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJS 0x0040650a\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x004077d0\nMOV EDX,dword ptr [RSP + 0x4]\nTEST EDX,EDX\nJS 0x0040650a\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004061a0\nTEST EAX,EAX\nJZ 0x00406498\nCMP R12D,0x3\nJNZ 0x00406524\nTEST R13,R13\nJZ 0x00406524\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX + 0x40],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nOR byte ptr [RBX + 0x72],0x1\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004018c0\nMOV qword ptr [RBX + 0x18],0x0\nMOV EAX,dword ptr [R15 + 0x48]\nTEST AH,0x2\nJZ 0x00406554\nMOV EDI,dword ptr [RSP + 0x4]\nTEST EDI,EDI\nJS 0x00406554\nCALL 0x004018a0\nMOV qword ptr [RBX + 0x18],0x0\nNOT RBP\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RCX,qword ptr [RBX + 0x48]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x2f\nLEA RDX,[RCX + -0x1]\nCMOVNZ RDX,RCX\nTEST byte ptr [R15 + 0x48],0x4\nMOV dword ptr [RSP + 0x2c],R12D\nMOV qword ptr [RSP + 0x60],R14\nJNZ 0x0040658e\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x004065a0\nMOV RAX,qword ptr [R15 + 0x20]\nLEA RCX,[RAX + RDX*0x1 + 0x1]\nMOV qword ptr [RSP + 0x20],RCX\nMOV byte ptr [RAX + RDX*0x1],0x2f\nOR RBP,0x186a0\nMOV qword ptr [RSP + 0x70],RBP\nLEA R13,[RDX + 0x1]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,R13\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RBX + 0x58]\nINC RAX\nMOV qword ptr [RSP + 0x68],RAX\nADD RDX,0x2\nMOV qword ptr [RSP + 0x58],RDX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nXOR R14D,R14D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],R13\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00406975\nMOV qword ptr [RSP + 0x18],RAX\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x00401970\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406828\nTEST byte ptr [R15 + 0x48],0x20\nJNZ 0x00406650\nCMP byte ptr [RBP + 0x13],0x2e\nJNZ 0x00406650\nMOVZX EAX,byte ptr [RBP + 0x14]\nCMP AL,0x2e\nJZ 0x00406630\nTEST AL,AL\nJZ 0x00406636\nJMP 0x00406650\nCMP byte ptr [RBP + 0x15],0x0\nJNZ 0x00406650\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJNZ 0x00406600\nJMP 0x0040683e\nMOV qword ptr [RSP + 0x30],R14\nMOV RBX,RBP\nADD RBX,0x13\nMOV RDI,RBX\nCALL 0x004017d0\nMOV R12,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x004055c0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00406988\nMOV RAX,qword ptr [RSP + 0x50]\nCMP R12,RAX\nJNC 0x004066a0\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nADD R12,RDX\nJNC 0x00406709\nJMP 0x004069d8\nMOV RBX,qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x58]\nLEA RSI,[RAX + R12*0x1]\nMOV RDI,R15\nCALL 0x00405560\nTEST AL,AL\nJZ 0x00406988\nMOV RAX,qword ptr [R15 + 0x20]\nCMP RBX,RAX\nJZ 0x004066ef\nMOV RDX,qword ptr [RSP + 0x38]\nADD RAX,RDX\nTEST byte ptr [R15 + 0x48],0x4\nMOV RCX,qword ptr [RSP + 0x20]\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x40],RAX\nMOV R14,qword ptr [RSP + 0x30]\nJMP 0x004066f9\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,RDX\nADD R12,RDX\nJC 0x004069d8\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RSP + 0x68]\nMOV qword ptr [R13 + 0x58],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [R13 + 0x8],RAX\nMOV qword ptr [R13 + 0x48],R12\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x80 + R13],RAX\nTEST byte ptr [R15 + 0x48],0x4\nJNZ 0x00406750\nLEA RAX,[0x108 + R13]\nMOV qword ptr [R13 + 0x30],RAX\nJMP 0x00406770\nMOV RAX,qword ptr [R13 + 0x38]\nMOV qword ptr [R13 + 0x30],RAX\nLEA RSI,[0x108 + R13]\nMOV RDX,qword ptr [R13 + 0x60]\nINC RDX\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00401a30\nMOV EAX,dword ptr [R15 + 0x48]\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x004067a0\nMOV ECX,EAX\nAND ECX,0x400\nJNZ 0x004067a0\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00405670\nMOV word ptr [R13 + 0x70],AX\nJMP 0x004067e5\nMOV RDI,R13\nADD RDI,0x78\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x004067c0\nMOV AL,byte ptr [RBP + 0x12]\nCMP AL,0x4\nSETNZ CL\nTEST AL,AL\nSETNZ BL\nAND BL,CL\nJMP 0x004067c2\nXOR EBX,EBX\nMOV word ptr [R13 + 0x70],0xb\nMOVZX ESI,byte ptr [RBP + 0x12]\nCALL 0x00406f20\nXOR BL,0x1\nMOVZX ESI,BL\nMOV RDI,R13\nCALL 0x00405650\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [R13 + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nMOV R12,R13\nJZ 0x00406806\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x10],R13\nMOV R12,RAX\nINC R14\nCMP qword ptr [RSP + 0x70],R14\nMOV qword ptr [RSP + 0x48],R13\nMOV RAX,R12\nMOV R13,qword ptr [RSP + 0x38]\nMOV RBX,qword ptr [RSP + 0x8]\nJA 0x004065e9\nJMP 0x00406843\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x0040683e\nCALL 0x004018c0\nMOV qword ptr [RBX + 0x18],0x0\nMOV R12,qword ptr [RSP + 0x18]\nTEST byte ptr [RSP + 0x40],0x1\nJZ 0x00406855\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00406f40\nTEST byte ptr [R15 + 0x48],0x4\nJZ 0x0040687a\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,RAX\nLEA RAX,[RCX + -0x1]\nCMP R13,qword ptr [R15 + 0x30]\nCMOVZ RCX,RAX\nTEST R14,R14\nCMOVZ RCX,RAX\nMOV byte ptr [RCX],0x0\nCMP qword ptr [RSP + 0x60],0x0\nSETNZ AL\nOR AL,byte ptr [RSP + 0x14]\nJZ 0x004068a4\nTEST R14,R14\nJNZ 0x004068b0\nCMP dword ptr [RSP + 0x2c],0x3\nJNZ 0x00406958\nMOV word ptr [RBX + 0x70],0x6\nJMP 0x00406958\nCMP dword ptr [RSP + 0x2c],0x1\nJZ 0x00406917\nTEST R14,R14\nJZ 0x00406917\nCMP R14,0x2711\nJC 0x004068f5\nCMP qword ptr [R15 + 0x40],0x0\nJNZ 0x004068f5\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x004068f5\nMOV EDI,dword ptr [R15 + 0x2c]\nCALL 0x00406fc0\nTEST AL,AL\nJZ 0x004068f5\nMOV qword ptr [R15 + 0x40],0x407000\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004057e0\nMOV R12,RAX\nMOV qword ptr [R15 + 0x40],0x0\nCMP R14,0x2\nJC 0x00406963\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x00406963\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004057e0\nMOV R12,RAX\nJMP 0x00406963\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040693d\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40b5c9\nMOV RDI,R15\nCALL 0x004061a0\nTEST EAX,EAX\nJNZ 0x0040694d\nJMP 0x00406889\nMOV RDI,R15\nCALL 0x00406a20\nTEST EAX,EAX\nJZ 0x00406889\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV RDI,R12\nCALL 0x004059a0\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,RAX\nTEST byte ptr [RSP + 0x40],0x1\nJNZ 0x0040684a\nJMP 0x00406855\nCALL 0x00401700\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV RDI,R13\nCALL 0x004016e0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x004059a0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBP + 0x18]\nCALL 0x004018c0\nMOV qword ptr [RBP + 0x18],0x0\nMOV word ptr [RBP + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV dword ptr [RBX],R14D\nJMP 0x00406960\nCALL 0x00401700\nMOV dword ptr [RAX],0xc\nJMP 0x00406960\nMOV RDI,R13\nCALL 0x004016e0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x004059a0\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004018c0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nCALL 0x00401700\nMOV dword ptr [RAX],0x24\nJMP 0x00406960\n'
p1488
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n41 89 f4\n49 89 ff\n49 8b 1f\n4c 8b 73 18\n4d 85 f6\n74 34\n4c 89 f7\ne8 d8 b5 ff ff\n89 44 24 04\n85 c0\n0f 89 e6 00 00 00\n48 8b 7b 18\ne8 53 b5 ff ff\n48 c7 43 18 00 00 00 00\n41 83 fc 03\n0f 84 84 00 00 00\ne9 dc 05 00 00\n41 8b 4f 48\n89 c8\n25 04 02 00 00\nbf 9c ff ff ff\n3d 00 02 00 00\n75 04\n41 8b 7f 2c\n48 8b 73 30\n31 c0\nf6 c1 10\n74 11\nf6 c1 01\n74 07\n48 83 7b 58 00\n74 05\nb8 00 00 02 00\n41 8b 57 48\nc1 e2 07\n81 e2 00 00 04 00\n09 c2\n48 8d 4c 24 04\ne8 ec 0a 00 00\n48 89 43 18\n48 85 c0\n74 1c\n0f b7 43 70\n83 f8 0b\n75 32\n31 d2\n4c 89 ff\n48 89 de\ne8 7d f2 ff ff\n66 89 43 70\neb 51\n41 83 fc 03\n0f 85 5d 05 00 00\n66 c7 43 70 04 00\ne8 f2 b2 ff ff\n8b 00\n89 43 40\ne9 48 05 00 00\n41 f6 47 49 01\n74 2b\n4c 89 ff\n48 89 de\ne8 e6 fc ff ff\n31 d2\n4c 89 ff\n48 89 de\ne8 39 f2 ff ff\n4c 89 ff\n48 89 de\ne8 9e 07 00 00\n84 c0\n0f 84 81 05 00 00\n48 89 5c 24 08\n49 83 7f 40 01\n48 19 ed\n41 83 fc 02\n75 0a\n45 31 ed\n4d 85 f6\n75 33\neb 43\n41 8b 47 48\n89 c1\n83 e1 18\n49 c7 c5 ff ff ff ff\n83 f9 18\n75 17\n48 8b 4c 24 08\n4c 8b a9 88 00 00 00\nc1 e8 04\nf7 d0\n83 e0 02\n49 29 c5\n4d 85 f6\n74 12\nc7 44 24 14 00 00 00 00\n48 8b 5c 24 08\ne9 b2 00 00 00\n41 83 fc 03\n74 15\n4d 85 ed\n75 10\nb0 01\n89 44 24 14\n48 8b 5c 24 08\ne9 97 00 00 00\nb0 01\n89 44 24 14\n41 f6 47 49 02\n74 1d\n8b 7c 24 04\ne8 a5 2a 00 00\n89 44 24 04\n85 c0\n78 27\nbe 01 00 00 00\n89 c7\ne8 e1 12 00 00\n8b 54 24 04\n85 d2\n78 13\n31 c9\n4c 89 ff\n48 8b 74 24 08\ne8 9a fc ff ff\n85 c0\n74 8e\n41 83 fc 03\n75 14\n4d 85 ed\n74 0f\ne8 e6 b1 ff ff\n8b 00\n48 8b 4c 24 08\n89 41 40\n48 8b 5c 24 08\n80 4b 72 01\n48 8b 7b 18\ne8 8a b3 ff ff\n48 c7 43 18 00 00 00 00\n41 8b 47 48\nf6 c4 02\n74 0d\n8b 7c 24 04\n85 ff\n78 05\ne8 4c b3 ff ff\n48 c7 43 18 00 00 00 00\n48 f7 d5\n48 8b 43 38\n48 8b 4b 48\n80 7c 08 ff 2f\n48 8d 51 ff\n48 0f 45 d1\n41 f6 47 48 04\n44 89 64 24 2c\n4c 89 74 24 60\n75 09\n31 c0\n48 89 44 24 20\neb 12\n49 8b 47 20\n48 8d 4c 10 01\n48 89 4c 24 20\nc6 04 10 2f\n48 81 cd a0 86 01 00\n48 89 6c 24 70\n4c 8d 6a 01\n49 8b 47 30\n4c 29 e8\n48 89 44 24 50\n48 8b 43 58\n48 ff c0\n48 89 44 24 68\n48 83 c2 02\n48 89 54 24 58\n31 c0\n48 89 44 24 40\n31 c0\n48 89 44 24 48\n45 31 f6\n31 c0\n4c 89 6c 24 38\n48 8b 7b 18\n48 85 ff\n0f 84 7f 03 00 00\n48 89 44 24 18\n0f 1f 44 00 00\ne8 6b b3 ff ff\n48 89 c5\n48 85 ed\n0f 84 17 02 00 00\n41 f6 47 48 20\n75 38\n80 7d 13 2e\n75 32\n0f b6 45 14\n3c 2e\n74 0a\n84 c0\n74 0c\neb 24\n80 7d 15 00\n75 1a\n48 8b 7b 18\n48 85 ff\n75 c1\ne9 fa 01 00 00\n4c 89 74 24 30\n48 89 eb\n48 83 c3 13\n48 89 df\ne8 6c b1 ff ff\n49 89 c4\n4c 89 ff\n48 89 de\n4c 89 e2\ne8 4b ef ff ff\n49 89 c5\n4d 85 ed\n0f 84 07 03 00 00\n48 8b 44 24 50\n49 39 c4\n73 15\n4c 8b 74 24 30\n48 8b 54 24 38\n49 01 d4\n73 6f\ne9 39 03 00 00\n49 8b 5f 20\n48 8b 44 24 58\n4a 8d 34 20\n4c 89 ff\ne8 ab ee ff ff\n84 c0\n0f 84 cb 02 00 00\n49 8b 47 20\n48 39 c3\n74 29\n48 8b 54 24 38\n48 01 d0\n41 f6 47 48 04\n48 8b 4c 24 20\n48 0f 45 c8\n48 89 4c 24 20\nb0 01\n48 89 44 24 40\n4c 8b 74 24 30\neb 0a\n4c 8b 74 24 30\n48 8b 54 24 38\n49 8b 47 30\n48 29 d0\n49 01 d4\n0f 82 cf 02 00 00\n48 89 44 24 50\n48 8b 44 24 68\n49 89 45 58\n49 8b 07\n49 89 45 08\n4d 89 65 48\n48 8b 45 00\n49 89 85 80 00 00 00\n41 f6 47 48 04\n75 1c\n49 8d 85 08 01 00 00\n49 89 45 30\neb 2f\n49 8b 45 38\n49 89 45 30\n49 8d b5 08 01 00 00\n49 8b 55 60\n48 ff c2\n48 8b 7c 24 20\ne8 c0 b2 ff ff\n41 8b 47 48\n49 83 7f 40 00\n74 25\n89 c1\n81 e1 00 04 00 00\n75 1b\n31 d2\n4c 89 ff\n4c 89 ee\ne8 de ee ff ff\n66 41 89 45 70\neb 4c\n4c 89 ef\n48 83 c7 78\n83 e0 18\n83 f8 18\n75 11\n8a 45 12\n3c 04\n0f 95 c1\n84 c0\n0f 95 c3\n20 cb\neb 02\n31 db\n66 41 c7 45 70 0b 00\n0f b6 75 12\ne8 4e 07 00 00\n80 f3 01\n0f b6 f3\n4c 89 ef\ne8 70 ee ff ff\n4c 8b 74 24 30\n49 c7 45 10 00 00 00 00\n48 8b 44 24 18\n48 85 c0\n4d 89 ec\n74 0c\n48 8b 4c 24 48\n4c 89 69 10\n49 89 c4\n49 ff c6\n4c 39 74 24 70\n4c 89 6c 24 48\n4c 89 e0\n4c 8b 6c 24 38\n48 8b 5c 24 08\n0f 87 c3 fd ff ff\neb 1b\n48 8b 7b 18\n48 85 ff\n74 0d\ne8 8a b0 ff ff\n48 c7 43 18 00 00 00 00\n4c 8b 64 24 18\nf6 44 24 40 01\n74 0b\n4c 89 ff\n4c 89 e6\ne8 eb 06 00 00\n41 f6 47 48 04\n74 1e\n48 8b 44 24 20\n48 89 c1\n48 8d 41 ff\n4d 3b 6f 30\n48 0f 44 c8\n4d 85 f6\n48 0f 44 c8\nc6 01 00\n48 83 7c 24 60 00\n0f 95 c0\n0a 44 24 14\n74 1b\n4d 85 f6\n75 22\n83 7c 24 2c 03\n0f 85 bf 00 00 00\n66 c7 43 70 06 00\ne9 b4 00 00 00\n83 7c 24 2c 01\n74 6c\n4d 85 f6\n74 67\n49 81 fe 11 27 00 00\n72 3c\n49 83 7f 40 00\n75 35\n41 f6 47 49 02\n74 2e\n41 8b 7f 2c\ne8 f0 06 00 00\n84 c0\n74 21\n49 c7 47 40 00 70 40 00\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 f6 ee ff ff\n49 89 c4\n49 c7 47 40 00 00 00 00\n49 83 fe 02\n72 68\n49 8b 47 40\n48 85 c0\n74 5f\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 ce ee ff ff\n49 89 c4\neb 4c\n48 83 7b 58 00\n74 1f\n48 8b 73 08\nba ff ff ff ff\nb9 c9 b5 40 00\n4c 89 ff\ne8 6c f8 ff ff\n85 c0\n75 15\ne9 4c ff ff ff\n4c 89 ff\ne8 db 00 00 00\n85 c0\n0f 84 3c ff ff ff\n66 c7 43 70 07 00\n41 80 4f 49 40\n4c 89 e7\ne8 40 f0 ff ff\n45 31 e4\n4c 89 e0\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 c4\nf6 44 24 40 01\n0f 85 c7 fe ff ff\ne9 cd fe ff ff\ne8 73 ad ff ff\n48 89 c3\n44 8b 33\n4c 89 ef\ne8 45 ad ff ff\n48 8b 7c 24 18\ne8 fb ef ff ff\n48 8b 6c 24 08\n48 8b 7d 18\ne8 0d af ff ff\n48 c7 45 18 00 00 00 00\n66 c7 45 70 07 00\n41 80 4f 49 40\n44 89 33\neb 95\ne8 30 ad ff ff\nc7 00 0c 00 00 00\neb 88\n4c 89 ef\ne8 00 ad ff ff\n48 8b 7c 24 18\ne8 b6 ef ff ff\n48 8b 5c 24 08\n48 8b 7b 18\ne8 c8 ae ff ff\n48 c7 43 18 00 00 00 00\n66 c7 43 70 07 00\n41 80 4f 49 40\ne8 f0 ac ff ff\nc7 00 24 00 00 00\ne9 45 ff ff ff\n'
p1489
S'.text:0000000000406330\n.text:0000000000406331\n.text:0000000000406333\n.text:0000000000406335\n.text:0000000000406337\n.text:0000000000406339\n.text:000000000040633a\n.text:000000000040633e\n.text:0000000000406341\n.text:0000000000406344\n.text:0000000000406347\n.text:000000000040634b\n.text:000000000040634e\n.text:0000000000406350\n.text:0000000000406353\n.text:0000000000406358\n.text:000000000040635c\n.text:000000000040635e\n.text:0000000000406364\n.text:0000000000406368\n.text:000000000040636d\n.text:0000000000406375\n.text:0000000000406379\n.text:000000000040637f\n.text:0000000000406384\n.text:0000000000406388\n.text:000000000040638a\n.text:000000000040638f\n.text:0000000000406394\n.text:0000000000406399\n.text:000000000040639b\n.text:000000000040639f\n.text:00000000004063a3\n.text:00000000004063a5\n.text:00000000004063a8\n.text:00000000004063aa\n.text:00000000004063ad\n.text:00000000004063af\n.text:00000000004063b4\n.text:00000000004063b6\n.text:00000000004063bb\n.text:00000000004063bf\n.text:00000000004063c2\n.text:00000000004063c8\n.text:00000000004063ca\n.text:00000000004063cf\n.text:00000000004063d4\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063dd\n.text:00000000004063e1\n.text:00000000004063e4\n.text:00000000004063e6\n.text:00000000004063e8\n.text:00000000004063eb\n.text:00000000004063ee\n.text:00000000004063f3\n.text:00000000004063f7\n.text:00000000004063f9\n.text:00000000004063fd\n.text:0000000000406403\n.text:0000000000406409\n.text:000000000040640e\n.text:0000000000406410\n.text:0000000000406413\n.text:0000000000406418\n.text:000000000040641d\n.text:000000000040641f\n.text:0000000000406422\n.text:0000000000406425\n.text:000000000040642a\n.text:000000000040642c\n.text:000000000040642f\n.text:0000000000406432\n.text:0000000000406437\n.text:000000000040643a\n.text:000000000040643d\n.text:0000000000406442\n.text:0000000000406444\n.text:000000000040644a\n.text:000000000040644f\n.text:0000000000406454\n.text:0000000000406457\n.text:000000000040645b\n.text:000000000040645d\n.text:0000000000406460\n.text:0000000000406463\n.text:0000000000406465\n.text:0000000000406467\n.text:000000000040646b\n.text:000000000040646d\n.text:0000000000406470\n.text:0000000000406477\n.text:000000000040647a\n.text:000000000040647c\n.text:0000000000406481\n.text:0000000000406488\n.text:000000000040648b\n.text:000000000040648d\n.text:0000000000406490\n.text:0000000000406493\n.text:0000000000406496\n.text:0000000000406498\n.text:00000000004064a0\n.text:00000000004064a5\n.text:00000000004064aa\n.text:00000000004064ae\n.text:00000000004064b0\n.text:00000000004064b3\n.text:00000000004064b5\n.text:00000000004064b7\n.text:00000000004064bb\n.text:00000000004064c0\n.text:00000000004064c5\n.text:00000000004064c7\n.text:00000000004064cb\n.text:00000000004064d0\n.text:00000000004064d2\n.text:00000000004064d6\n.text:00000000004064db\n.text:00000000004064df\n.text:00000000004064e1\n.text:00000000004064e3\n.text:00000000004064e8\n.text:00000000004064ea\n.text:00000000004064ef\n.text:00000000004064f3\n.text:00000000004064f5\n.text:00000000004064f7\n.text:00000000004064f9\n.text:00000000004064fc\n.text:0000000000406501\n.text:0000000000406506\n.text:0000000000406508\n.text:000000000040650a\n.text:000000000040650e\n.text:0000000000406510\n.text:0000000000406513\n.text:0000000000406515\n.text:000000000040651a\n.text:000000000040651c\n.text:0000000000406521\n.text:0000000000406524\n.text:0000000000406529\n.text:000000000040652d\n.text:0000000000406531\n.text:0000000000406536\n.text:000000000040653e\n.text:0000000000406542\n.text:0000000000406545\n.text:0000000000406547\n.text:000000000040654b\n.text:000000000040654d\n.text:000000000040654f\n.text:0000000000406554\n.text:000000000040655c\n.text:000000000040655f\n.text:0000000000406563\n.text:0000000000406567\n.text:000000000040656c\n.text:0000000000406570\n.text:0000000000406574\n.text:0000000000406579\n.text:000000000040657e\n.text:0000000000406583\n.text:0000000000406585\n.text:0000000000406587\n.text:000000000040658c\n.text:000000000040658e\n.text:0000000000406592\n.text:0000000000406597\n.text:000000000040659c\n.text:00000000004065a0\n.text:00000000004065a7\n.text:00000000004065ac\n.text:00000000004065b0\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065bc\n.text:00000000004065c0\n.text:00000000004065c3\n.text:00000000004065c8\n.text:00000000004065cc\n.text:00000000004065d1\n.text:00000000004065d3\n.text:00000000004065d8\n.text:00000000004065da\n.text:00000000004065df\n.text:00000000004065e2\n.text:00000000004065e4\n.text:00000000004065e9\n.text:00000000004065ed\n.text:00000000004065f0\n.text:00000000004065f6\n.text:00000000004065fb\n.text:0000000000406600\n.text:0000000000406605\n.text:0000000000406608\n.text:000000000040660b\n.text:0000000000406611\n.text:0000000000406616\n.text:0000000000406618\n.text:000000000040661c\n.text:000000000040661e\n.text:0000000000406622\n.text:0000000000406624\n.text:0000000000406626\n.text:0000000000406628\n.text:000000000040662a\n.text:0000000000406630\n.text:0000000000406634\n.text:0000000000406636\n.text:000000000040663a\n.text:000000000040663d\n.text:000000000040663f\n.text:0000000000406650\n.text:0000000000406655\n.text:0000000000406658\n.text:000000000040665c\n.text:000000000040665f\n.text:0000000000406664\n.text:0000000000406667\n.text:000000000040666a\n.text:000000000040666d\n.text:0000000000406670\n.text:0000000000406675\n.text:0000000000406678\n.text:000000000040667b\n.text:0000000000406681\n.text:0000000000406686\n.text:0000000000406689\n.text:000000000040668b\n.text:0000000000406690\n.text:0000000000406695\n.text:0000000000406698\n.text:000000000040669a\n.text:00000000004066a0\n.text:00000000004066a4\n.text:00000000004066a9\n.text:00000000004066ad\n.text:00000000004066b0\n.text:00000000004066b5\n.text:00000000004066b7\n.text:00000000004066bd\n.text:00000000004066c1\n.text:00000000004066c4\n.text:00000000004066c6\n.text:00000000004066cb\n.text:00000000004066ce\n.text:00000000004066d3\n.text:00000000004066d8\n.text:00000000004066dc\n.text:00000000004066e1\n.text:00000000004066e3\n.text:00000000004066e8\n.text:00000000004066ed\n.text:00000000004066ef\n.text:00000000004066f4\n.text:00000000004066f9\n.text:00000000004066fd\n.text:0000000000406700\n.text:0000000000406703\n.text:0000000000406709\n.text:000000000040670e\n.text:0000000000406713\n.text:0000000000406717\n.text:000000000040671a\n.text:000000000040671e\n.text:0000000000406722\n.text:0000000000406726\n.text:000000000040672d\n.text:0000000000406732\n.text:0000000000406734\n.text:000000000040673b\n.text:000000000040673f\n.text:0000000000406750\n.text:0000000000406754\n.text:0000000000406758\n.text:000000000040675f\n.text:0000000000406763\n.text:0000000000406766\n.text:000000000040676b\n.text:0000000000406770\n.text:0000000000406774\n.text:0000000000406779\n.text:000000000040677b\n.text:000000000040677d\n.text:0000000000406783\n.text:0000000000406785\n.text:0000000000406787\n.text:000000000040678a\n.text:000000000040678d\n.text:0000000000406792\n.text:0000000000406797\n.text:00000000004067a0\n.text:00000000004067a3\n.text:00000000004067a7\n.text:00000000004067aa\n.text:00000000004067ad\n.text:00000000004067af\n.text:00000000004067b2\n.text:00000000004067b4\n.text:00000000004067b7\n.text:00000000004067b9\n.text:00000000004067bc\n.text:00000000004067be\n.text:00000000004067c0\n.text:00000000004067c2\n.text:00000000004067c9\n.text:00000000004067cd\n.text:00000000004067d2\n.text:00000000004067d5\n.text:00000000004067d8\n.text:00000000004067db\n.text:00000000004067e0\n.text:00000000004067e5\n.text:00000000004067ed\n.text:00000000004067f2\n.text:00000000004067f5\n.text:00000000004067f8\n.text:00000000004067fa\n.text:00000000004067ff\n.text:0000000000406803\n.text:0000000000406806\n.text:0000000000406809\n.text:000000000040680e\n.text:0000000000406813\n.text:0000000000406816\n.text:000000000040681b\n.text:0000000000406820\n.text:0000000000406826\n.text:0000000000406828\n.text:000000000040682c\n.text:000000000040682f\n.text:0000000000406831\n.text:0000000000406836\n.text:000000000040683e\n.text:0000000000406843\n.text:0000000000406848\n.text:000000000040684a\n.text:000000000040684d\n.text:0000000000406850\n.text:0000000000406855\n.text:000000000040685a\n.text:000000000040685c\n.text:0000000000406861\n.text:0000000000406864\n.text:0000000000406868\n.text:000000000040686c\n.text:0000000000406870\n.text:0000000000406873\n.text:0000000000406877\n.text:000000000040687a\n.text:0000000000406880\n.text:0000000000406883\n.text:0000000000406887\n.text:0000000000406889\n.text:000000000040688c\n.text:000000000040688e\n.text:0000000000406893\n.text:0000000000406899\n.text:000000000040689f\n.text:00000000004068a4\n.text:00000000004068a9\n.text:00000000004068ab\n.text:00000000004068ae\n.text:00000000004068b0\n.text:00000000004068b7\n.text:00000000004068b9\n.text:00000000004068be\n.text:00000000004068c0\n.text:00000000004068c5\n.text:00000000004068c7\n.text:00000000004068cb\n.text:00000000004068d0\n.text:00000000004068d2\n.text:00000000004068d4\n.text:00000000004068dc\n.text:00000000004068df\n.text:00000000004068e2\n.text:00000000004068e5\n.text:00000000004068ea\n.text:00000000004068ed\n.text:00000000004068f5\n.text:00000000004068f9\n.text:00000000004068fb\n.text:00000000004068ff\n.text:0000000000406902\n.text:0000000000406904\n.text:0000000000406907\n.text:000000000040690a\n.text:000000000040690d\n.text:0000000000406912\n.text:0000000000406915\n.text:0000000000406917\n.text:000000000040691c\n.text:000000000040691e\n.text:0000000000406922\n.text:0000000000406927\n.text:000000000040692c\n.text:000000000040692f\n.text:0000000000406934\n.text:0000000000406936\n.text:0000000000406938\n.text:000000000040693d\n.text:0000000000406940\n.text:0000000000406945\n.text:0000000000406947\n.text:000000000040694d\n.text:0000000000406953\n.text:0000000000406958\n.text:000000000040695b\n.text:0000000000406960\n.text:0000000000406963\n.text:0000000000406966\n.text:000000000040696a\n.text:000000000040696b\n.text:000000000040696d\n.text:000000000040696f\n.text:0000000000406971\n.text:0000000000406973\n.text:0000000000406974\n.text:0000000000406975\n.text:0000000000406978\n.text:000000000040697d\n.text:0000000000406983\n.text:0000000000406988\n.text:000000000040698d\n.text:0000000000406990\n.text:0000000000406993\n.text:0000000000406996\n.text:000000000040699b\n.text:00000000004069a0\n.text:00000000004069a5\n.text:00000000004069aa\n.text:00000000004069ae\n.text:00000000004069b3\n.text:00000000004069bb\n.text:00000000004069c1\n.text:00000000004069c6\n.text:00000000004069c9\n.text:00000000004069cb\n.text:00000000004069d0\n.text:00000000004069d6\n.text:00000000004069d8\n.text:00000000004069db\n.text:00000000004069e0\n.text:00000000004069e5\n.text:00000000004069ea\n.text:00000000004069ef\n.text:00000000004069f3\n.text:00000000004069f8\n.text:0000000000406a00\n.text:0000000000406a06\n.text:0000000000406a0b\n.text:0000000000406a10\n.text:0000000000406a16\n'
p1490
tp1491
sS'change_file_context'
p1492
(S'\n__stdcall change_file_context(char * file)\n'
p1493
V\u000a/* WARNING: Removing unreachable block (ram,0x00402a50) */\u000a/* WARNING: Removing unreachable block (ram,0x00402a63) */\u000a/* WARNING: Removing unreachable block (ram,0x0040292f) */\u000a\u000aint change_file_context(char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  security_context_t *con;\u000a  ulong uVar8;\u000a  uint local_2c;\u000a  \u000a  _Var2 = affect_symlink_referent;\u000a  file = (char *)((ulong)file & 0xffffffff);\u000a  if (specified_context != (char *)0x0) {\u000a    se_const(specified_context);\u000a    if (_Var2 == false) {\u000a      iVar3 = lsetfileconat(file,(security_context_t)con);\u000a    }\u000a    else {\u000a      iVar3 = setfileconat(file,(security_context_t)con);\u000a    }\u000a    if (iVar3 != 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar5 = dcgettext(0,"failed to change context of %s to %s",5);\u000a      pcVar6 = quotearg_n_style((char *)0x0);\u000a      pcVar7 = quote_n((char *)0x1);\u000a      error(0,(ulong)uVar1,uVar5,pcVar6,pcVar7);\u000a    }\u000a    if (specified_context == (char *)0x0) {\u000a      context_free((ulong)local_2c);\u000a      freecon((security_context_t)0x0);\u000a    }\u000a    return (int)(uint)(iVar3 != 0);\u000a  }\u000a  if (affect_symlink_referent == false) {\u000a    iVar3 = lgetfileconat(file,con);\u000a  }\u000a  else {\u000a    iVar3 = getfileconat(file,con);\u000a  }\u000a  if (iVar3 < 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (uVar1 != 0x3d) {\u000a      uVar5 = dcgettext(0,"failed to get security context of %s",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      uVar8 = (ulong)uVar1;\u000a      goto LAB_00402ad0;\u000a    }\u000a  }\u000a  uVar5 = dcgettext(0,"can\u005c't apply partial context to unlabeled file %s",5);\u000a  pcVar6 = quotearg_style((char *)0x4);\u000a  uVar8 = 0;\u000aLAB_00402ad0:\u000a  error(0,uVar8,uVar5,pcVar6);\u000a  return 1;\u000a}\u000a\u000a
p1494
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RSI\nMOV R15D,EDI\nMOV qword ptr [RSP],0x0\nMOV RBP,qword ptr [0x0060f340]\nTEST RBP,RBP\nJZ 0x00402969\nMOV RSI,qword ptr [RSP]\nTEST RSI,RSI\nJZ 0x0040293f\nMOV RDI,RBP\nCALL 0x00401920\nTEST EAX,EAX\nJZ 0x00402a02\nMOV BL,byte ptr [0x0060f338]\nMOV RDI,RBP\nCALL 0x00402410\nMOV EDI,R15D\nMOV RSI,R14\nMOV RDX,RAX\nCMP BL,0x0\nJZ 0x00402991\nCALL 0x00407360\nTEST EAX,EAX\nJNZ 0x0040299a\nJMP 0x00402a02\nCMP byte ptr [0x0060f338],0x0\nJZ 0x00402a29\nMOV RDX,RSP\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x00407040\nTEST EAX,EAX\nJNS 0x00402a47\nJMP 0x00402a3b\nCALL 0x004074f0\nTEST EAX,EAX\nJZ 0x00402a02\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40abc2\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R14\nCALL 0x00403fd0\nMOV R14,RAX\nMOV EBX,0x1\nMOV EDI,0x1\nMOV RSI,RBP\nCALL 0x004042c0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nMOV RCX,R14\nMOV R8,RBP\nCALL 0x00401a40\nCMP qword ptr [0x0060f340],0x0\nJNZ 0x00402ada\nJMP 0x00402a12\nXOR EBX,EBX\nCMP qword ptr [0x0060f340],0x0\nJNZ 0x00402ada\nMOV EDI,dword ptr [RSP + 0xc]\nCALL 0x00404740\nMOV RDI,qword ptr [RSP]\nCALL 0x00404830\nJMP 0x00402ada\nMOV RDX,RSP\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x004071d0\nTEST EAX,EAX\nJNS 0x00402a47\nCALL 0x00401700\nMOV EBX,dword ptr [RAX]\nCMP EBX,0x3d\nJNZ 0x00402aa3\nMOV RDI,qword ptr [RSP]\nTEST RDI,RDI\nJZ 0x00402a74\nLEA RSI,[RSP + 0xc]\nCALL 0x00402af0\nMOV EBX,0x1\nTEST EAX,EAX\nJNZ 0x00402ada\nMOV EDI,dword ptr [RSP + 0xc]\nCALL 0x00404730\nMOV RBP,RAX\nJMP 0x00402926\nXOR EDI,EDI\nMOV ESI,0x40ab91\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x00402ad0\nXOR EDI,EDI\nMOV ESI,0x40a74f\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401a40\nMOV EBX,0x1\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1495
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 f6\n41 89 ff\n48 c7 04 24 00 00 00 00\n48 8b 2d 1f ca 20 00\n48 85 ed\n74 43\n48 8b 34 24\n48 85 f6\n74 10\n48 89 ef\ne8 e9 ef ff ff\n85 c0\n0f 84 c3 00 00 00\n8a 1d f3 c9 20 00\n48 89 ef\ne8 c3 fa ff ff\n44 89 ff\n4c 89 f6\n48 89 c2\n80 fb 00\n74 36\ne8 00 4a 00 00\n85 c0\n75 36\ne9 99 00 00 00\n80 3d c8 c9 20 00 00\n0f 84 b3 00 00 00\n48 89 e2\n44 89 ff\n4c 89 f6\ne8 bc 46 00 00\n85 c0\n0f 89 bb 00 00 00\ne9 aa 00 00 00\ne8 5a 4b 00 00\n85 c0\n74 68\ne8 61 ed ff ff\n44 8b 38\n31 ff\nbe c2 ab 40 00\nba 05 00 00 00\ne8 fd ed ff ff\n49 89 c4\n31 ff\nbe 04 00 00 00\n4c 89 f2\ne8 0b 16 00 00\n49 89 c6\nbb 01 00 00 00\nbf 01 00 00 00\n48 89 ee\ne8 e6 18 00 00\n48 89 c5\n31 ff\n31 c0\n44 89 fe\n4c 89 e2\n4c 89 f1\n49 89 e8\ne8 4e f0 ff ff\n48 83 3d 46 c9 20 00 00\n0f 85 da 00 00 00\neb 10\n31 db\n48 83 3d 34 c9 20 00 00\n0f 85 c8 00 00 00\n8b 7c 24 0c\ne8 25 1d 00 00\n48 8b 3c 24\ne8 0c 1e 00 00\ne9 b1 00 00 00\n48 89 e2\n44 89 ff\n4c 89 f6\ne8 99 47 00 00\n85 c0\n79 0c\ne8 c0 ec ff ff\n8b 18\n83 fb 3d\n75 5c\n48 8b 3c 24\n48 85 ff\n74 24\n48 8d 74 24 0c\ne8 96 00 00 00\nbb 01 00 00 00\n85 c0\n75 77\n8b 7c 24 0c\ne8 c4 1c 00 00\n48 89 c5\ne9 b2 fe ff ff\n31 ff\nbe 91 ab 40 00\nba 05 00 00 00\ne8 2b ed ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 f6\ne8 1b 16 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\neb 2d\n31 ff\nbe 4f a7 40 00\nba 05 00 00 00\ne8 fc ec ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 ec 15 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 6b ef ff ff\nbb 01 00 00 00\n89 d8\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1496
S'.text:0000000000402900\n.text:0000000000402901\n.text:0000000000402903\n.text:0000000000402905\n.text:0000000000402907\n.text:0000000000402908\n.text:000000000040290c\n.text:000000000040290f\n.text:0000000000402912\n.text:000000000040291a\n.text:0000000000402921\n.text:0000000000402924\n.text:0000000000402926\n.text:000000000040292a\n.text:000000000040292d\n.text:000000000040292f\n.text:0000000000402932\n.text:0000000000402937\n.text:0000000000402939\n.text:000000000040293f\n.text:0000000000402945\n.text:0000000000402948\n.text:000000000040294d\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402956\n.text:0000000000402959\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402962\n.text:0000000000402964\n.text:0000000000402969\n.text:0000000000402970\n.text:0000000000402976\n.text:0000000000402979\n.text:000000000040297c\n.text:000000000040297f\n.text:0000000000402984\n.text:0000000000402986\n.text:000000000040298c\n.text:0000000000402991\n.text:0000000000402996\n.text:0000000000402998\n.text:000000000040299a\n.text:000000000040299f\n.text:00000000004029a2\n.text:00000000004029a4\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b3\n.text:00000000004029b6\n.text:00000000004029b8\n.text:00000000004029bd\n.text:00000000004029c0\n.text:00000000004029c5\n.text:00000000004029c8\n.text:00000000004029cd\n.text:00000000004029d2\n.text:00000000004029d5\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029df\n.text:00000000004029e1\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029ea\n.text:00000000004029ed\n.text:00000000004029f2\n.text:00000000004029fa\n.text:0000000000402a00\n.text:0000000000402a02\n.text:0000000000402a04\n.text:0000000000402a0c\n.text:0000000000402a12\n.text:0000000000402a16\n.text:0000000000402a1b\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2c\n.text:0000000000402a2f\n.text:0000000000402a32\n.text:0000000000402a37\n.text:0000000000402a39\n.text:0000000000402a3b\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a4b\n.text:0000000000402a4e\n.text:0000000000402a50\n.text:0000000000402a55\n.text:0000000000402a5a\n.text:0000000000402a5f\n.text:0000000000402a61\n.text:0000000000402a63\n.text:0000000000402a67\n.text:0000000000402a6c\n.text:0000000000402a6f\n.text:0000000000402a74\n.text:0000000000402a76\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a88\n.text:0000000000402a8d\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a98\n.text:0000000000402a9a\n.text:0000000000402a9c\n.text:0000000000402a9e\n.text:0000000000402aa1\n.text:0000000000402aa3\n.text:0000000000402aa5\n.text:0000000000402aaa\n.text:0000000000402aaf\n.text:0000000000402ab4\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402abf\n.text:0000000000402ac4\n.text:0000000000402ac7\n.text:0000000000402ac9\n.text:0000000000402acb\n.text:0000000000402acd\n.text:0000000000402ad0\n.text:0000000000402ad5\n.text:0000000000402ada\n.text:0000000000402adc\n.text:0000000000402ae0\n.text:0000000000402ae1\n.text:0000000000402ae3\n.text:0000000000402ae5\n.text:0000000000402ae7\n.text:0000000000402ae8\n'
p1497
tp1498
sS'quotearg_style'
p1499
(S'\n__stdcall quotearg_style(char * arg)\n'
p1500
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1501
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403fd0\n'
p1502
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1503
S'.text:00000000004040b0\n.text:00000000004040b3\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040b9\n.text:00000000004040bc\n'
p1504
tp1505
sS'hash_get_n_buckets'
p1506
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1507
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1508
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1509
S'48 8b 47 10\nc3\n'
p1510
S'.text:0000000000407a20\n.text:0000000000407a24\n'
p1511
tp1512
sS'dup_cloexec'
p1513
(S'\n__stdcall dup_cloexec()\n'
p1514
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1515
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x00409370\n'
p1516
S'be 06 04 00 00\n31 d2\n31 c0\ne9 32 1b 00 00\n'
p1517
S'.text:0000000000407830\n.text:0000000000407835\n.text:0000000000407837\n.text:0000000000407839\n'
p1518
tp1519
sS'emit_try_help'
p1520
(S'\n__stdcall emit_try_help()\n'
p1521
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1522
S'PUSH RBX\nMOV RBX,qword ptr [0x0060f300]\nXOR EDI,EDI\nMOV ESI,0x40a7d5\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060f370]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401ae0\n'
p1523
S'53\n48 8b 1d 28 d5 20 00\n31 ff\nbe d5 a7 40 00\nba 05 00 00 00\ne8 c7 f9 ff ff\n48 89 c2\n48 8b 0d 7d d5 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 dd fc ff ff\n'
p1524
S'.text:0000000000401dd0\n.text:0000000000401dd1\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddf\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401dec\n.text:0000000000401df3\n.text:0000000000401df8\n.text:0000000000401dfa\n.text:0000000000401dfd\n.text:0000000000401dfe\n'
p1525
tp1526
sS'strrchr'
p1527
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1528
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060f0d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1529
S'JMP qword ptr [0x0060f0d0]\n'
p1530
S'ff 25 8a d8 20 00\n'
p1531
S'.plt:0000000000401840\n'
p1532
tp1533
sS'quotearg_alloc_mem'
p1534
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1535
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1536
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60f380\nCMOVNZ R12,RCX\nCALL 0x00401700\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403000\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405000\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403000\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403d2a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1537
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 80 f3 60 00\n4c 0f 45 e1\ne8 78 da ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 21 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1538
S'.text:0000000000403c50\n.text:0000000000403c51\n.text:0000000000403c53\n.text:0000000000403c55\n.text:0000000000403c57\n.text:0000000000403c59\n.text:0000000000403c5a\n.text:0000000000403c5e\n.text:0000000000403c61\n.text:0000000000403c66\n.text:0000000000403c69\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c76\n.text:0000000000403c79\n.text:0000000000403c7f\n.text:0000000000403c83\n.text:0000000000403c88\n.text:0000000000403c8d\n.text:0000000000403c8f\n.text:0000000000403c93\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca5\n.text:0000000000403caa\n.text:0000000000403cae\n.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbb\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cc7\n.text:0000000000403ccc\n.text:0000000000403cd0\n.text:0000000000403cd3\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdf\n.text:0000000000403ce2\n.text:0000000000403ce6\n.text:0000000000403cea\n.text:0000000000403ced\n.text:0000000000403cf0\n.text:0000000000403cf5\n.text:0000000000403cfa\n.text:0000000000403cfd\n.text:0000000000403d02\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d17\n.text:0000000000403d1a\n.text:0000000000403d1e\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d27\n.text:0000000000403d2a\n.text:0000000000403d2d\n.text:0000000000403d31\n.text:0000000000403d32\n.text:0000000000403d34\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3a\n.text:0000000000403d3b\n'
p1539
tp1540
sS'memchr'
p1541
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1542
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060f118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1543
S'JMP qword ptr [0x0060f118]\n'
p1544
S'ff 25 42 d8 20 00\n'
p1545
S'.plt:00000000004018d0\n'
p1546
tp1547
sS'quotearg_style_mem'
p1548
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1549
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1550
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404070\n'
p1551
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1552
S'.text:00000000004040d0\n.text:00000000004040d3\n.text:00000000004040d6\n.text:00000000004040d8\n.text:00000000004040da\n.text:00000000004040dc\n.text:00000000004040df\n.text:00000000004040e2\n'
p1553
tp1554
sS'xalloc_die'
p1555
(S'\n__stdcall xalloc_die()\n'
p1556
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40ac54,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1557
S'PUSH RBX\nMOV EBX,dword ptr [0x0060f260]\nXOR EDI,EDI\nMOV ESI,0x40b54f\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40ac54\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401a40\nCALL 0x004016f0\n'
p1558
S'53\n8b 1d 99 a1 20 00\n31 ff\nbe 4f b5 40 00\nba 05 00 00 00\ne8 d8 c6 ff ff\n48 89 c1\n31 f6\nba 54 ac 40 00\n31 c0\n89 df\ne8 55 c9 ff ff\ne8 00 c6 ff ff\n'
p1559
S'.text:00000000004050c0\n.text:00000000004050c1\n.text:00000000004050c7\n.text:00000000004050c9\n.text:00000000004050ce\n.text:00000000004050d3\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050dd\n.text:00000000004050e2\n.text:00000000004050e4\n.text:00000000004050e6\n.text:00000000004050eb\n'
p1560
tp1561
sS'fts_set_stat_required'
p1562
(S'\n__stdcall fts_set_stat_required(FTSENT * p)\n'
p1563
V\u000avoid fts_set_stat_required(FTSENT *p)\u000a\u000a{\u000a  byte in_SIL;\u000a  \u000a  if (p->fts_info == 0xb) {\u000a    p->fts_statp[0].st_size = (ulong)in_SIL + 1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1564
S'MOVZX EAX,word ptr [RDI + 0x70]\nCMP EAX,0xb\nJNZ 0x00405668\nMOVZX EAX,SIL\nINC RAX\nMOV qword ptr [0xa8 + RDI],RAX\nRET\nPUSH RAX\nCALL 0x004016f0\n'
p1565
S'0f b7 47 70\n83 f8 0b\n75 0f\n40 0f b6 c6\n48 ff c0\n48 89 87 a8 00 00 00\nc3\n50\ne8 82 c0 ff ff\n'
p1566
S'.text:0000000000405650\n.text:0000000000405654\n.text:0000000000405657\n.text:0000000000405659\n.text:000000000040565d\n.text:0000000000405660\n.text:0000000000405667\n.text:0000000000405668\n.text:0000000000405669\n'
p1567
tp1568
sS'__sprintf_chk'
p1569
(S'\n__stdcall __sprintf_chk()\n'
p1570
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060f240)();\u000a  return;\u000a}\u000a\u000a
p1571
S'JMP qword ptr [0x0060f240]\n'
p1572
S'ff 25 1a d7 20 00\n'
p1573
S'.plt:0000000000401b20\n'
p1574
tp1575
sS'open_safer'
p1576
(S'\n__stdcall open_safer(char * file)\n'
p1577
V\u000a/* WARNING: Removing unreachable block (ram,0x004079ee) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x004079fc */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1578
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407992\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x004079fe\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004079ee\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004079fc\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401a60\nMOV EDI,EAX\nCALL 0x00408f90\nADD RSP,0xd8\nRET\n'
p1579
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 5b a0 ff ff\n89 c7\ne8 84 15 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1580
S'.text:0000000000407950\n.text:0000000000407957\n.text:0000000000407959\n.text:000000000040795b\n.text:0000000000407960\n.text:0000000000407965\n.text:000000000040796a\n.text:0000000000407972\n.text:000000000040797a\n.text:0000000000407982\n.text:000000000040798a\n.text:0000000000407992\n.text:0000000000407997\n.text:000000000040799c\n.text:00000000004079a1\n.text:00000000004079a6\n.text:00000000004079a8\n.text:00000000004079ac\n.text:00000000004079ae\n.text:00000000004079b3\n.text:00000000004079b8\n.text:00000000004079c0\n.text:00000000004079c5\n.text:00000000004079cd\n.text:00000000004079d4\n.text:00000000004079d8\n.text:00000000004079dc\n.text:00000000004079de\n.text:00000000004079e1\n.text:00000000004079e6\n.text:00000000004079e9\n.text:00000000004079ec\n.text:00000000004079ee\n.text:00000000004079f3\n.text:00000000004079f7\n.text:00000000004079fc\n.text:00000000004079fe\n.text:0000000000407a00\n.text:0000000000407a05\n.text:0000000000407a07\n.text:0000000000407a0c\n.text:0000000000407a13\n'
p1581
tp1582
sS'quotearg_n_custom'
p1583
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1584
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1585
S'MOV R8,-0x1\nJMP 0x004041f0\n'
p1586
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1587
S'.text:00000000004041e0\n.text:00000000004041e7\n'
p1588
tp1589
sS'fts_sort'
p1590
(S'\n__stdcall fts_sort(FTS * sp, FTSENT * head, size_t nitems)\n'
p1591
V\u000aFTSENT * fts_sort(FTS *sp,FTSENT *head,size_t nitems)\u000a\u000a{\u000a  ulong uVar1;\u000a  int (*__compar)(_ftsent **,_ftsent **);\u000a  _ftsent **pp_Var2;\u000a  FTSENT *pFVar3;\u000a  _ftsent *p_Var4;\u000a  long lVar5;\u000a  _ftsent *p_Var6;\u000a  \u000a  __compar = sp->fts_compar;\u000a  if (sp->fts_nitems < nitems) {\u000a    uVar1 = nitems + 0x28;\u000a    sp->fts_nitems = uVar1;\u000a    if (uVar1 >> 0x3d == 0) {\u000a      pp_Var2 = (_ftsent **)realloc(sp->fts_array,uVar1 * 8);\u000a      if (pp_Var2 != (_ftsent **)0x0) {\u000a        sp->fts_array = pp_Var2;\u000a        goto LAB_00405826;\u000a      }\u000a    }\u000a    free(sp->fts_array);\u000a    sp->fts_array = (_ftsent **)0x0;\u000a    sp->fts_nitems = 0;\u000a  }\u000a  else {\u000aLAB_00405826:\u000a    if (head != (FTSENT *)0x0) {\u000a      pFVar3 = (FTSENT *)sp->fts_array;\u000a      do {\u000a        *(FTSENT **)pFVar3 = head;\u000a        pFVar3 = (FTSENT *)((FTSENT **)pFVar3 + 1);\u000a        head = (FTSENT *)head->fts_link;\u000a      } while (head != (FTSENT *)0x0);\u000a    }\u000a    qsort(sp->fts_array,nitems,8,(__compar_fn_t)__compar);\u000a    p_Var4 = (_ftsent *)sp->fts_array;\u000a    head = (FTSENT *)p_Var4->fts_cycle;\u000a    p_Var6 = (_ftsent *)head;\u000a    if (nitems != 1) {\u000a      lVar5 = 1 - nitems;\u000a      p_Var6 = (_ftsent *)head;\u000a      do {\u000a        p_Var4 = (_ftsent *)((_ftsent **)p_Var4 + 1);\u000a        ((FTSENT *)p_Var6)->fts_link = *(_ftsent **)p_Var4;\u000a        p_Var6 = *(_ftsent **)p_Var4;\u000a        lVar5 = lVar5 + 1;\u000a      } while (lVar5 != 0);\u000a    }\u000a    p_Var6->fts_link = (_ftsent *)0x0;\u000a  }\u000a  return head;\u000a}\u000a\u000a
p1592
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x40]\nCMP qword ptr [R15 + 0x38],R14\nJNC 0x00405826\nLEA RSI,[R14 + 0x28]\nMOV qword ptr [R15 + 0x38],RSI\nMOV RAX,RSI\nSHR RAX,0x3d\nJNZ 0x0040589d\nMOV RDI,qword ptr [R15 + 0x10]\nSHL RSI,0x3\nCALL 0x004019f0\nTEST RAX,RAX\nJZ 0x0040589d\nMOV qword ptr [R15 + 0x10],RAX\nTEST RBX,RBX\nJZ 0x00405840\nMOV RAX,qword ptr [R15 + 0x10]\nNOP\nMOV qword ptr [RAX],RBX\nADD RAX,0x8\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x00405830\nMOV RDI,qword ptr [R15 + 0x10]\nMOV EDX,0x8\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00401760\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RBX,qword ptr [RAX]\nCMP R14,0x1\nMOV RDX,RBX\nJZ 0x00405893\nMOV ECX,0x1\nSUB RCX,R14\nADD RAX,0x8\nMOV RDX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RAX]\nMOV qword ptr [RDX + 0x10],RSI\nMOV RDX,qword ptr [RAX]\nADD RAX,0x8\nINC RCX\nJNZ 0x00405880\nMOV qword ptr [RDX + 0x10],0x0\nJMP 0x004058b6\nMOV RDI,qword ptr [R15 + 0x10]\nCALL 0x004016e0\nMOV qword ptr [R15 + 0x10],0x0\nMOV qword ptr [R15 + 0x38],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1593
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n4d 8b 67 40\n4d 39 77 38\n73 2b\n49 8d 76 28\n49 89 77 38\n48 89 f0\n48 c1 e8 3d\n0f 85 8d 00 00 00\n49 8b 7f 10\n48 c1 e6 03\ne8 d3 c1 ff ff\n48 85 c0\n74 7b\n49 89 47 10\n48 85 db\n74 15\n49 8b 47 10\n90\n48 89 18\n48 83 c0 08\n48 8b 5b 10\n48 85 db\n75 f0\n49 8b 7f 10\nba 08 00 00 00\n4c 89 f6\n4c 89 e1\ne8 0c bf ff ff\n49 8b 47 10\n48 8b 18\n49 83 fe 01\n48 89 da\n74 2f\nb9 01 00 00 00\n4c 29 f1\n48 83 c0 08\n48 89 da\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 30\n48 89 72 10\n48 8b 10\n48 83 c0 08\n48 ff c1\n75 ed\n48 c7 42 10 00 00 00 00\neb 19\n49 8b 7f 10\ne8 3a be ff ff\n49 c7 47 10 00 00 00 00\n49 c7 47 38 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1594
S'.text:00000000004057e0\n.text:00000000004057e2\n.text:00000000004057e4\n.text:00000000004057e6\n.text:00000000004057e7\n.text:00000000004057e8\n.text:00000000004057eb\n.text:00000000004057ee\n.text:00000000004057f1\n.text:00000000004057f5\n.text:00000000004057f9\n.text:00000000004057fb\n.text:00000000004057ff\n.text:0000000000405803\n.text:0000000000405806\n.text:000000000040580a\n.text:0000000000405810\n.text:0000000000405814\n.text:0000000000405818\n.text:000000000040581d\n.text:0000000000405820\n.text:0000000000405822\n.text:0000000000405826\n.text:0000000000405829\n.text:000000000040582b\n.text:000000000040582f\n.text:0000000000405830\n.text:0000000000405833\n.text:0000000000405837\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405840\n.text:0000000000405844\n.text:0000000000405849\n.text:000000000040584c\n.text:000000000040584f\n.text:0000000000405854\n.text:0000000000405858\n.text:000000000040585b\n.text:000000000040585f\n.text:0000000000405862\n.text:0000000000405864\n.text:0000000000405869\n.text:000000000040586c\n.text:0000000000405870\n.text:0000000000405873\n.text:0000000000405880\n.text:0000000000405883\n.text:0000000000405887\n.text:000000000040588a\n.text:000000000040588e\n.text:0000000000405891\n.text:0000000000405893\n.text:000000000040589b\n.text:000000000040589d\n.text:00000000004058a1\n.text:00000000004058a6\n.text:00000000004058ae\n.text:00000000004058b6\n.text:00000000004058b9\n.text:00000000004058bd\n.text:00000000004058be\n.text:00000000004058c0\n.text:00000000004058c2\n.text:00000000004058c4\n'
p1595
tp1596
sS'fd_safer'
p1597
(S'\n__stdcall fd_safer()\n'
p1598
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1599
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00408fc4\nMOV EDI,EBX\nCALL 0x00408f80\nMOV R14D,EAX\nCALL 0x00401700\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x004018a0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00408fc6\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1600
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 53 87 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 e5 88 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1601
S'.text:0000000000408f90\n.text:0000000000408f91\n.text:0000000000408f93\n.text:0000000000408f95\n.text:0000000000408f96\n.text:0000000000408f97\n.text:0000000000408f99\n.text:0000000000408f9c\n.text:0000000000408f9e\n.text:0000000000408fa0\n.text:0000000000408fa5\n.text:0000000000408fa8\n.text:0000000000408fad\n.text:0000000000408fb0\n.text:0000000000408fb4\n.text:0000000000408fb6\n.text:0000000000408fbb\n.text:0000000000408fbf\n.text:0000000000408fc2\n.text:0000000000408fc4\n.text:0000000000408fc6\n.text:0000000000408fca\n.text:0000000000408fcb\n.text:0000000000408fcd\n.text:0000000000408fcf\n.text:0000000000408fd0\n'
p1602
tp1603
sS'context_type_get'
p1604
(S'\n__stdcall context_type_get()\n'
p1605
V\u000achar * context_type_get(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1606
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1607
S'50\ne8 2a cf ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p1608
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d6\n.text:00000000004047dc\n.text:00000000004047de\n.text:00000000004047df\n'
p1609
tp1610
sS'fts_alloc'
p1611
(S'\n__stdcall fts_alloc(FTS * sp, char * name, size_t namelen)\n'
p1612
V\u000aFTSENT * fts_alloc(FTS *sp,char *name,size_t namelen)\u000a\u000a{\u000a  FTSENT *pFVar1;\u000a  \u000a  pFVar1 = (FTSENT *)malloc(namelen + 0x118 & 0xfffffffffffffff0);\u000a  if (pFVar1 == (FTSENT *)0x0) {\u000a    pFVar1 = (FTSENT *)0x0;\u000a  }\u000a  else {\u000a    memcpy(pFVar1 + 1,name,namelen);\u000a    *(undefined *)((long)&pFVar1[1].fts_cycle + namelen) = 0;\u000a    pFVar1->fts_namelen = namelen;\u000a    pFVar1->fts_fts = sp;\u000a    pFVar1->fts_path = sp->fts_path;\u000a    pFVar1->fts_errno = 0;\u000a    pFVar1->fts_dirp = (DIR *)0x0;\u000a    pFVar1->fts_flags = 0;\u000a    pFVar1->fts_instr = 3;\u000a    *(undefined4 *)&pFVar1->fts_number = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_number + 4) = 0;\u000a    *(undefined4 *)&pFVar1->fts_pointer = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_pointer + 4) = 0;\u000a  }\u000a  return pFVar1;\u000a}\u000a\u000a
p1613
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nLEA RDI,[0x118 + R15]\nAND RDI,-0x10\nCALL 0x00401980\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040563b\nMOV RDI,RBX\nADD RDI,0x108\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00401940\nMOV byte ptr [0x108 + RBX + R15*0x1],0x0\nMOV qword ptr [RBX + 0x60],R15\nMOV qword ptr [RBX + 0x50],R14\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [RBX + 0x38],RAX\nMOV dword ptr [RBX + 0x40],0x0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x72],0x0\nMOV word ptr [RBX + 0x74],0x3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nJMP 0x0040563d\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1614
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n49 8d bf 18 01 00 00\n48 83 e7 f0\ne8 9f c3 ff ff\n48 89 c3\n48 85 db\n74 52\n48 89 df\n48 81 c7 08 01 00 00\n4c 89 e6\n4c 89 fa\ne8 42 c3 ff ff\n42 c6 84 3b 08 01 00 00 00\n4c 89 7b 60\n4c 89 73 50\n49 8b 46 20\n48 89 43 38\nc7 43 40 00 00 00 00\n48 c7 43 18 00 00 00 00\n66 c7 43 72 00 00\n66 c7 43 74 03 00\n0f 57 c0\n0f 11 43 20\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1615
S'.text:00000000004055c0\n.text:00000000004055c2\n.text:00000000004055c4\n.text:00000000004055c6\n.text:00000000004055c7\n.text:00000000004055c8\n.text:00000000004055cb\n.text:00000000004055ce\n.text:00000000004055d1\n.text:00000000004055d8\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e4\n.text:00000000004055e7\n.text:00000000004055e9\n.text:00000000004055ec\n.text:00000000004055f3\n.text:00000000004055f6\n.text:00000000004055f9\n.text:00000000004055fe\n.text:0000000000405607\n.text:000000000040560b\n.text:000000000040560f\n.text:0000000000405613\n.text:0000000000405617\n.text:000000000040561e\n.text:0000000000405626\n.text:000000000040562c\n.text:0000000000405632\n.text:0000000000405635\n.text:0000000000405639\n.text:000000000040563b\n.text:000000000040563d\n.text:0000000000405640\n.text:0000000000405644\n.text:0000000000405645\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564b\n'
p1616
tp1617
sS'__freading'
p1618
(S'\n__stdcall __freading()\n'
p1619
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060f198)();\u000a  return;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0060f198]\n'
p1621
S'ff 25 c2 d7 20 00\n'
p1622
S'.plt:00000000004019d0\n'
p1623
tp1624
sS'process_file'
p1625
(S'\n__stdcall process_file(FTS * fts, FTSENT * ent)\n'
p1626
V\u000a_Bool process_file(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  unsigned_short uVar3;\u000a  int iVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  char cVar8;\u000a  ulong uVar9;\u000a  \u000a  pcVar6 = ent->fts_path;\u000a  uVar3 = ent->fts_info;\u000a  cVar8 = 1;\u000a  switch(uVar3) {\u000a  case 1:\u000a    cVar8 = 1;\u000a    if (recurse == 1) {\u000a      if (root_dev_ino == (dev_ino *)0x0) {\u000a        return true;\u000a      }\u000a      if (ent->fts_statp[0].st_ino != root_dev_ino->st_ino) {\u000a        return true;\u000a      }\u000a      if (ent->fts_statp[0].st_dev != root_dev_ino->st_dev) {\u000a        return true;\u000a      }\u000a      if ((*pcVar6 == '/') && (pcVar6[1] == 0)) {\u000a        uVar5 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a        pcVar6 = quotearg_style((char *)0x4);\u000a        error(0,0,uVar5,pcVar6);\u000a      }\u000a      else {\u000a        uVar5 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a        pcVar6 = quotearg_n_style((char *)0x0);\u000a        pcVar7 = quotearg_n_style((char *)0x1);\u000a        error(0,0,uVar5,pcVar6,pcVar7);\u000a      }\u000a      uVar5 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a      error(0,0,uVar5,uVar5);\u000a      fts_set(fts,ent);\u000a      fts_read(fts);\u000a      return false;\u000a    }\u000a    break;\u000a  case 2:\u000a    _Var2 = cycle_warning_required(fts,ent);\u000a    cVar8 = 1;\u000a    if (_Var2 != false) {\u000a      uVar5 = dcgettext(0,\u000a                        "WARNING: Circular directory structure.\u005cnThis almost certainly means that you have a corrupted file system.\u005cnNOTIFY YOUR SYSTEM MANAGER.\u005cnThe following directory is part of the cycle:\u005cn  %s\u005cn"\u000a                        ,5);\u000a      pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a      error(0,0,uVar5,pcVar6);\u000a      return false;\u000a    }\u000a    break;\u000a  default:\u000a    goto switchD_00402503_caseD_3;\u000a  case 4:\u000a    uVar1 = ent->fts_errno;\u000a    uVar5 = dcgettext(0,"cannot read directory %s",5);\u000a    pcVar7 = quotearg_style((char *)0x4);\u000a    uVar9 = (ulong)uVar1;\u000a    goto LAB_004026d1;\u000a  case 6:\u000a    cVar8 = 1;\u000a    if (recurse == 0) {\u000a      return true;\u000a    }\u000a    break;\u000a  case 7:\u000a    uVar1 = ent->fts_errno;\u000a    pcVar7 = quotearg_n_style_colon((char *)0x0);\u000a    uVar5 = 0x40ac54;\u000a    uVar9 = (ulong)uVar1;\u000a    goto LAB_004026d1;\u000a  case 10:\u000a    if ((ent->fts_level == 0) && (ent->fts_number == 0)) {\u000a      ent->fts_number = 1;\u000a      fts_set(fts,ent);\u000a      return true;\u000a    }\u000a    uVar9 = (ulong)(uint)ent->fts_errno;\u000a    uVar5 = dcgettext(0,"cannot access %s",5);\u000a    pcVar7 = quotearg_style((char *)0x4);\u000aLAB_004026d1:\u000a    cVar8 = 0;\u000a    error(0,uVar9,uVar5,pcVar7);\u000a  }\u000a  uVar3 = ent->fts_info;\u000aswitchD_00402503_caseD_3:\u000a  if (((uVar3 == 6) && (cVar8 != 0)) && (root_dev_ino != (dev_ino *)0x0)) {\u000a    cVar8 = 1;\u000a    if ((ent->fts_statp[0].st_ino == root_dev_ino->st_ino) &&\u000a       (ent->fts_statp[0].st_dev == root_dev_ino->st_dev)) {\u000a      if ((*pcVar6 == '/') && (pcVar6[1] == 0)) {\u000a        uVar5 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a        pcVar6 = quotearg_style((char *)0x4);\u000a        error(0,0,uVar5,pcVar6);\u000a      }\u000a      else {\u000a        uVar5 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a        pcVar6 = quotearg_n_style((char *)0x0);\u000a        pcVar7 = quotearg_n_style((char *)0x1);\u000a        error(0,0,uVar5,pcVar6,pcVar7);\u000a      }\u000a      cVar8 = 0;\u000a      uVar5 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a      error(0,0,uVar5,uVar5);\u000a      goto LAB_00402805;\u000a    }\u000a  }\u000a  else {\u000a    if (cVar8 == 0) goto LAB_00402805;\u000a  }\u000a  if (verbose == 1) {\u000a    uVar5 = dcgettext(0,"changing security context of %s\u005cn",5);\u000a    pcVar6 = quotearg_style((char *)0x4);\u000a    __printf_chk(1,uVar5,pcVar6,pcVar6);\u000a  }\u000a  iVar4 = change_file_context((char *)(ulong)(uint)fts->fts_cwd_fd);\u000a  if (iVar4 != 0) {\u000a    cVar8 = 0;\u000a  }\u000aLAB_00402805:\u000a  if (recurse == 0) {\u000a    fts_set(fts,ent);\u000a  }\u000a  return (_Bool)cVar8;\u000a}\u000a\u000a
p1627
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R14,RDI\nMOV R13,qword ptr [R12 + 0x30]\nMOV R15,qword ptr [R12 + 0x38]\nMOVZX EAX,word ptr [R12 + 0x70]\nMOV BL,0x1\nMOV ECX,EAX\nDEC ECX\nMOVZX ECX,CX\nCMP ECX,0x9\nJA 0x004026dc\nJMP qword ptr [0x409d28 + RCX*0x8]\nMOV BL,0x1\nCMP byte ptr [0x0060f310],0x1\nJNZ 0x004026d6\nMOV RAX,qword ptr [0x0060f358]\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00402822\nMOV RCX,qword ptr [0x80 + R12]\nCMP RCX,qword ptr [RAX]\nJNZ 0x00402822\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [RAX + 0x8]\nJNZ 0x00402822\nCMP byte ptr [R15],0x2f\nJNZ 0x0040255c\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x00402887\nXOR EDI,EDI\nMOV ESI,0x40aa21\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R15\nCALL 0x00403fd0\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40bcbf\nCALL 0x00403fd0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,R15\nMOV R8,RBX\nCALL 0x00401a40\nJMP 0x004028b9\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405130\nMOV BL,0x1\nTEST AL,AL\nJZ 0x004026d6\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aab6\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00404190\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401a40\nJMP 0x00402822\nMOV qword ptr [RSP],R14\nMOV R14D,dword ptr [R12 + 0x40]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa9d\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV R14,qword ptr [RSP]\nMOV RDX,RBP\nJMP 0x004026d1\nMOV BL,0x1\nMOV AL,byte ptr [0x0060f310]\nTEST AL,AL\nJNZ 0x004026d6\nJMP 0x00402822\nMOV EBP,dword ptr [R12 + 0x40]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00404190\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40ac54\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x004026d1\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x00402693\nCMP qword ptr [R12 + 0x20],0x0\nJZ 0x00402833\nMOV EAX,dword ptr [R12 + 0x40]\nMOV dword ptr [RSP],EAX\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa8c\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,R14\nMOV R14,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP]\nMOV RDX,R14\nMOV R14,RBP\nCALL 0x00401a40\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x6\nJNZ 0x004027b0\nTEST BL,BL\nJZ 0x004027b0\nMOV RAX,qword ptr [0x0060f358]\nTEST RAX,RAX\nJZ 0x004027b0\nMOV RCX,qword ptr [0x80 + R12]\nMOV BL,0x1\nCMP RCX,qword ptr [RAX]\nJNZ 0x004027b4\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [RAX + 0x8]\nJNZ 0x004027b4\nCMP byte ptr [R15],0x2f\nJNZ 0x00402733\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x00402850\nXOR EDI,EDI\nMOV ESI,0x40aa21\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RDX,R15\nMOV R15,R14\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nCALL 0x00403fd0\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40bcbf\nCALL 0x00403fd0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV R14,R15\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401a40\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa5b\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nJMP 0x00402805\nTEST BL,BL\nJZ 0x00402805\nCMP byte ptr [0x0060f311],0x1\nJNZ 0x004027f3\nXOR EDI,EDI\nMOV ESI,0x40ab70\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004040b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBP\nMOV RDX,RCX\nCALL 0x00401a20\nMOV EDI,dword ptr [R14 + 0x2c]\nMOV RSI,R13\nCALL 0x00402900\nTEST EAX,EAX\nJZ 0x00402805\nXOR EBX,EBX\nMOV AL,byte ptr [0x0060f310]\nTEST AL,AL\nJNZ 0x0040281f\nMOV EDX,0x4\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406cd0\nAND BL,0x1\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV qword ptr [R12 + 0x20],0x1\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406cd0\nMOV BL,0x1\nJMP 0x00402822\nXOR EDI,EDI\nMOV ESI,0x40a9f4\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401a40\nJMP 0x0040278a\nXOR EDI,EDI\nMOV ESI,0x40a9f4\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x004040b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401a40\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa5b\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nMOV EDX,0x4\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406cd0\nMOV RDI,R14\nCALL 0x00405b60\nJMP 0x00402822\n'
p1628
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f4\n49 89 fe\n4d 8b 6c 24 30\n4d 8b 7c 24 38\n41 0f b7 44 24 70\nb3 01\n89 c1\nff c9\n0f b7 c9\n83 f9 09\n0f 87 d9 01 00 00\nff 24 cd 28 9d 40 00\nb3 01\n80 3d fd cd 20 00 01\n0f 85 bd 01 00 00\n48 8b 05 38 ce 20 00\nb3 01\n48 85 c0\n0f 84 f7 02 00 00\n49 8b 8c 24 80 00 00 00\n48 3b 08\n0f 85 e6 02 00 00\n49 8b 4c 24 78\n48 3b 48 08\n0f 85 d7 02 00 00\n41 80 3f 2f\n75 0b\n41 80 7f 01 00\n0f 84 2b 03 00 00\n31 ff\nbe 21 aa 40 00\nba 05 00 00 00\ne8 43 f2 ff ff\n49 89 c5\n31 ff\nbe 04 00 00 00\n4c 89 fa\ne8 51 1a 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\nba bf bc 40 00\ne8 3a 1a 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 ea\n4c 89 f9\n49 89 d8\ne8 93 f4 ff ff\ne9 07 03 00 00\n4c 89 f7\n4c 89 e6\ne8 73 2b 00 00\nb3 01\n84 c0\n0f 84 0f 01 00 00\n31 db\n31 ff\nbe b6 aa 40 00\nba 05 00 00 00\ne8 d6 f1 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 a4 1b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 43 f4 ff ff\ne9 20 02 00 00\n4c 89 34 24\n45 8b 74 24 40\n31 db\n31 ff\nbe 9d aa 40 00\nba 05 00 00 00\ne8 92 f1 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 fe\ne8 82 1a 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 8b 34 24\n48 89 ea\ne9 8d 00 00 00\nb3 01\n8a 05 c4 cc 20 00\n84 c0\n0f 85 82 00 00 00\ne9 c9 01 00 00\n41 8b 6c 24 40\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 21 1b 00 00\n48 89 c1\n31 ff\nba 54 ac 40 00\n31 c0\n89 ee\neb 52\n49 83 7c 24 58 00\n75 0c\n49 83 7c 24 20 00\n0f 84 a0 01 00 00\n41 8b 44 24 40\n89 04 24\n31 db\n31 ff\nbe 8c aa 40 00\nba 05 00 00 00\ne8 02 f1 ff ff\n4c 89 f5\n49 89 c6\nbf 04 00 00 00\n4c 89 fe\ne8 ef 19 00 00\n48 89 c1\n31 ff\n31 c0\n8b 34 24\n4c 89 f2\n49 89 ee\ne8 6a f3 ff ff\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 06\n0f 85 c8 00 00 00\n84 db\n0f 84 c0 00 00 00\n48 8b 05 61 cc 20 00\n48 85 c0\n0f 84 b0 00 00 00\n49 8b 8c 24 80 00 00 00\nb3 01\n48 3b 08\n0f 85 a1 00 00 00\n49 8b 4c 24 78\n48 3b 48 08\n0f 85 92 00 00 00\n41 80 3f 2f\n75 0b\n41 80 7f 01 00\n0f 84 1d 01 00 00\n31 ff\nbe 21 aa 40 00\nba 05 00 00 00\ne8 6c f0 ff ff\n4c 89 fa\n4d 89 f7\n49 89 c6\n31 ff\nbe 04 00 00 00\ne8 77 18 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba bf bc 40 00\ne8 60 18 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4d 89 fe\n48 89 e9\n49 89 d8\ne8 b6 f2 ff ff\n31 db\n31 ff\nbe 5b aa 40 00\nba 05 00 00 00\ne8 13 f0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 92 f2 ff ff\neb 55\n84 db\n74 51\n80 3d 56 cb 20 00 01\n75 36\n31 ff\nbe 70 ab 40 00\nba 05 00 00 00\ne8 e2 ef ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 fe\ne8 d2 18 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ee\n48 89 ca\ne8 2d f2 ff ff\n41 8b 7e 2c\n4c 89 ee\ne8 01 01 00 00\n85 c0\n74 02\n31 db\n8a 05 05 cb 20 00\n84 c0\n75 10\nba 04 00 00 00\n4c 89 f7\n4c 89 e6\ne8 b1 44 00 00\n80 e3 01\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 c7 44 24 20 01 00 00 00\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 84 44 00 00\nb3 01\neb d2\n31 ff\nbe f4 a9 40 00\nba 05 00 00 00\ne8 4f ef ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 3f 18 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 be f1 ff ff\ne9 03 ff ff ff\n31 ff\nbe f4 a9 40 00\nba 05 00 00 00\ne8 18 ef ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 08 18 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 87 f1 ff ff\n31 db\n31 ff\nbe 5b aa 40 00\nba 05 00 00 00\ne8 e4 ee ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 63 f1 ff ff\nba 04 00 00 00\n4c 89 f7\n4c 89 e6\ne8 e3 43 00 00\n4c 89 f7\ne8 6b 32 00 00\ne9 28 ff ff ff\n'
p1629
S'.text:00000000004024d0\n.text:00000000004024d1\n.text:00000000004024d3\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024d9\n.text:00000000004024da\n.text:00000000004024db\n.text:00000000004024de\n.text:00000000004024e1\n.text:00000000004024e6\n.text:00000000004024eb\n.text:00000000004024f1\n.text:00000000004024f3\n.text:00000000004024f5\n.text:00000000004024f7\n.text:00000000004024fa\n.text:00000000004024fd\n.text:0000000000402503\n.text:000000000040250a\n.text:000000000040250c\n.text:0000000000402513\n.text:0000000000402519\n.text:0000000000402520\n.text:0000000000402522\n.text:0000000000402525\n.text:000000000040252b\n.text:0000000000402533\n.text:0000000000402536\n.text:000000000040253c\n.text:0000000000402541\n.text:0000000000402545\n.text:000000000040254b\n.text:000000000040254f\n.text:0000000000402551\n.text:0000000000402556\n.text:000000000040255c\n.text:000000000040255e\n.text:0000000000402563\n.text:0000000000402568\n.text:000000000040256d\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257f\n.text:0000000000402582\n.text:0000000000402587\n.text:000000000040258c\n.text:0000000000402591\n.text:0000000000402596\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259d\n.text:000000000040259f\n.text:00000000004025a2\n.text:00000000004025a5\n.text:00000000004025a8\n.text:00000000004025ad\n.text:00000000004025b2\n.text:00000000004025b5\n.text:00000000004025b8\n.text:00000000004025bd\n.text:00000000004025bf\n.text:00000000004025c1\n.text:00000000004025c7\n.text:00000000004025c9\n.text:00000000004025cb\n.text:00000000004025d0\n.text:00000000004025d5\n.text:00000000004025da\n.text:00000000004025dd\n.text:00000000004025df\n.text:00000000004025e4\n.text:00000000004025e7\n.text:00000000004025ec\n.text:00000000004025ef\n.text:00000000004025f1\n.text:00000000004025f3\n.text:00000000004025f5\n.text:00000000004025f8\n.text:00000000004025fd\n.text:0000000000402602\n.text:0000000000402606\n.text:000000000040260b\n.text:000000000040260d\n.text:000000000040260f\n.text:0000000000402614\n.text:0000000000402619\n.text:000000000040261e\n.text:0000000000402621\n.text:0000000000402626\n.text:0000000000402629\n.text:000000000040262e\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263c\n.text:000000000040263f\n.text:0000000000402644\n.text:0000000000402646\n.text:000000000040264c\n.text:000000000040264e\n.text:0000000000402654\n.text:0000000000402659\n.text:000000000040265e\n.text:0000000000402660\n.text:0000000000402662\n.text:0000000000402667\n.text:000000000040266a\n.text:000000000040266f\n.text:0000000000402672\n.text:0000000000402674\n.text:0000000000402679\n.text:000000000040267b\n.text:000000000040267d\n.text:000000000040267f\n.text:0000000000402685\n.text:0000000000402687\n.text:000000000040268d\n.text:0000000000402693\n.text:0000000000402698\n.text:000000000040269b\n.text:000000000040269d\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a9\n.text:00000000004026ae\n.text:00000000004026b1\n.text:00000000004026b4\n.text:00000000004026b9\n.text:00000000004026bc\n.text:00000000004026c1\n.text:00000000004026c4\n.text:00000000004026c6\n.text:00000000004026c8\n.text:00000000004026cb\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d6\n.text:00000000004026dc\n.text:00000000004026df\n.text:00000000004026e2\n.text:00000000004026e8\n.text:00000000004026ea\n.text:00000000004026f0\n.text:00000000004026f7\n.text:00000000004026fa\n.text:0000000000402700\n.text:0000000000402708\n.text:000000000040270a\n.text:000000000040270d\n.text:0000000000402713\n.text:0000000000402718\n.text:000000000040271c\n.text:0000000000402722\n.text:0000000000402726\n.text:0000000000402728\n.text:000000000040272d\n.text:0000000000402733\n.text:0000000000402735\n.text:000000000040273a\n.text:000000000040273f\n.text:0000000000402744\n.text:0000000000402747\n.text:000000000040274a\n.text:000000000040274d\n.text:000000000040274f\n.text:0000000000402754\n.text:0000000000402759\n.text:000000000040275c\n.text:0000000000402761\n.text:0000000000402766\n.text:000000000040276b\n.text:0000000000402770\n.text:0000000000402773\n.text:0000000000402775\n.text:0000000000402777\n.text:0000000000402779\n.text:000000000040277c\n.text:000000000040277f\n.text:0000000000402782\n.text:0000000000402785\n.text:000000000040278a\n.text:000000000040278c\n.text:000000000040278e\n.text:0000000000402793\n.text:0000000000402798\n.text:000000000040279d\n.text:00000000004027a0\n.text:00000000004027a2\n.text:00000000004027a4\n.text:00000000004027a6\n.text:00000000004027a9\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b2\n.text:00000000004027b4\n.text:00000000004027bb\n.text:00000000004027bd\n.text:00000000004027bf\n.text:00000000004027c4\n.text:00000000004027c9\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d6\n.text:00000000004027d9\n.text:00000000004027de\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027e8\n.text:00000000004027eb\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f7\n.text:00000000004027fa\n.text:00000000004027ff\n.text:0000000000402801\n.text:0000000000402803\n.text:0000000000402805\n.text:000000000040280b\n.text:000000000040280d\n.text:000000000040280f\n.text:0000000000402814\n.text:0000000000402817\n.text:000000000040281a\n.text:000000000040281f\n.text:0000000000402822\n.text:0000000000402824\n.text:0000000000402828\n.text:0000000000402829\n.text:000000000040282b\n.text:000000000040282d\n.text:000000000040282f\n.text:0000000000402831\n.text:0000000000402832\n.text:0000000000402833\n.text:000000000040283c\n.text:0000000000402841\n.text:0000000000402844\n.text:0000000000402847\n.text:000000000040284c\n.text:000000000040284e\n.text:0000000000402850\n.text:0000000000402852\n.text:0000000000402857\n.text:000000000040285c\n.text:0000000000402861\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286c\n.text:0000000000402871\n.text:0000000000402874\n.text:0000000000402876\n.text:0000000000402878\n.text:000000000040287a\n.text:000000000040287d\n.text:0000000000402882\n.text:0000000000402887\n.text:0000000000402889\n.text:000000000040288e\n.text:0000000000402893\n.text:0000000000402898\n.text:000000000040289b\n.text:00000000004028a0\n.text:00000000004028a3\n.text:00000000004028a8\n.text:00000000004028ab\n.text:00000000004028ad\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b4\n.text:00000000004028b9\n.text:00000000004028bb\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c7\n.text:00000000004028cc\n.text:00000000004028cf\n.text:00000000004028d1\n.text:00000000004028d3\n.text:00000000004028d5\n.text:00000000004028d8\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e5\n.text:00000000004028e8\n.text:00000000004028ed\n.text:00000000004028f0\n.text:00000000004028f5\n'
p1630
tp1631
sS'fts_read'
p1632
(S'\n__stdcall fts_read(FTS * sp)\n'
p1633
V\u000aFTSENT * fts_read(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  _ftsent *p_Var3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  _Bool _Var7;\u000a  unsigned_short uVar8;\u000a  int iVar9;\u000a  FTSENT *ent;\u000a  FTSENT *head;\u000a  int *piVar10;\u000a  size_t sVar11;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  if (ent == (FTSENT *)0x0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  uVar8 = ent->fts_instr;\u000a  ent->fts_instr = 3;\u000a  if (uVar8 == 1) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    return ent;\u000a  }\u000a  if ((uVar8 == 2) && ((ent->fts_info & 0xfffe) == 0xc)) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a      iVar9 = diropen(sp,".");\u000a      ent->fts_symfd = iVar9;\u000a      if (iVar9 < 0) {\u000a        piVar10 = __errno_location();\u000a        ent->fts_errno = *piVar10;\u000a        ent->fts_info = 7;\u000a      }\u000a      else {\u000a        *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    head = ent;\u000a    if (ent->fts_info == 1) {\u000a      if ((uVar8 == 4) ||\u000a         ((uVar2 = sp->fts_options, (uVar2 & 0x40) != 0 && (ent->fts_statp[0].st_dev != sp->fts_dev)\u000a          ))) {\u000a        if ((*(byte *)&ent->fts_flags & 2) != 0) {\u000a          close(ent->fts_symfd);\u000a        }\u000a        if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a          fts_lfree((FTSENT *)sp->fts_child);\u000a          sp->fts_child = (_ftsent *)0x0;\u000a        }\u000a        ent->fts_info = 6;\u000a        goto LAB_00405d38;\u000a      }\u000a      head = (FTSENT *)sp->fts_child;\u000a      if (((uVar2 & 0x2000) == 0) || (head == (FTSENT *)0x0)) {\u000a        if (head == (FTSENT *)0x0) goto LAB_00405e10;\u000a        iVar9 = fts_safe_changedir(sp,ent,(char *)0xffffffff);\u000a        if (iVar9 != 0) {\u000a          piVar10 = __errno_location();\u000a          ent->fts_errno = *piVar10;\u000a          *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a          p_Var3 = sp->fts_child;\u000a          while (p_Var3 != (_ftsent *)0x0) {\u000a            p_Var3->fts_accpath = p_Var3->fts_parent->fts_accpath;\u000a            p_Var3 = p_Var3->fts_link;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        sp->fts_options = uVar2 & 0xffffdfff;\u000a        fts_lfree(head);\u000a        sp->fts_child = (_ftsent *)0x0;\u000aLAB_00405e10:\u000a        head = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = head;\u000a        if (head == (FTSENT *)0x0) {\u000a          if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if ((ent->fts_errno != 0) && (ent->fts_info != 4)) {\u000a            ent->fts_info = 7;\u000a          }\u000aLAB_00405d38:\u000a          leave_dir(sp,ent);\u000a          return ent;\u000a        }\u000a      }\u000a      ent = (FTSENT *)sp->fts_child;\u000a      sp->fts_child = (_ftsent *)0x0;\u000a    }\u000a    else {\u000a      do {\u000a        ent = (FTSENT *)head->fts_link;\u000a        if (ent == (FTSENT *)0x0) {\u000a          p_Var3 = head->fts_parent;\u000a          if (p_Var3->fts_dirp != (DIR *)0x0) {\u000a            sp->fts_cur = p_Var3;\u000a            sp->fts_path[p_Var3->fts_pathlen] = 0;\u000a            ent = fts_build(sp);\u000a            if (ent != (FTSENT *)0x0) {\u000a              free(head);\u000a              goto LAB_00405f94;\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a          }\u000a          ent = (FTSENT *)head->fts_parent;\u000a          *(FTSENT **)&sp->fts_cur = ent;\u000a          free(head);\u000a          if (ent->fts_level == -1) {\u000a            free(ent);\u000a            piVar10 = __errno_location();\u000a            *piVar10 = 0;\u000a            sp->fts_cur = (_ftsent *)0x0;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if (ent->fts_info != 0xb) {\u000a            sp->fts_path[ent->fts_pathlen] = 0;\u000a            if (ent->fts_level == 0) {\u000a              iVar9 = restore_initial_cwd(sp);\u000a            }\u000a            else {\u000a              if ((ent->fts_flags & 2) != 0) {\u000a                if ((sp->fts_options & 4U) == 0) {\u000a                  if ((sp->fts_options & 0x200U) == 0) {\u000a                    iVar9 = fchdir(ent->fts_symfd);\u000a                    if (iVar9 != 0) {\u000a                      piVar10 = __errno_location();\u000a                      ent->fts_errno = *piVar10;\u000a                      pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a                      *pbVar1 = *pbVar1 | 0x40;\u000a                    }\u000a                  }\u000a                  else {\u000a                    cwd_advance_fd(sp);\u000a                  }\u000a                }\u000a                close(ent->fts_symfd);\u000a                goto LAB_004060c7;\u000a              }\u000a              if ((ent->fts_flags & 1) != 0) goto LAB_004060c7;\u000a              iVar9 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a            }\u000a            if (iVar9 != 0) {\u000a              piVar10 = __errno_location();\u000a              ent->fts_errno = *piVar10;\u000a              pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a              *pbVar1 = *pbVar1 | 0x40;\u000a            }\u000aLAB_004060c7:\u000a            if ((ent->fts_info != 2) &&\u000a               (ent->fts_info = (ushort)(ent->fts_errno != 0) | 6, ent->fts_errno == 0)) {\u000a              leave_dir(sp,ent);\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a            return ent;\u000a          }\u000a          goto LAB_00406105;\u000a        }\u000a        *(FTSENT **)&sp->fts_cur = ent;\u000a        free(head);\u000a        if (ent->fts_level == 0) {\u000a          iVar9 = restore_initial_cwd(sp);\u000a          if (iVar9 != 0) {\u000a            pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a            *pbVar1 = *pbVar1 | 0x40;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          free_dir(sp);\u000a          fts_load(sp,ent);\u000a          setup_dir(sp);\u000a          goto LAB_00405fd0;\u000a        }\u000a        head = ent;\u000a      } while (ent->fts_instr == 4);\u000a      if (ent->fts_instr == 2) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a          iVar9 = diropen(sp,".");\u000a          ent->fts_symfd = iVar9;\u000a          if (iVar9 < 0) {\u000a            piVar10 = __errno_location();\u000a            ent->fts_errno = *piVar10;\u000a            ent->fts_info = 7;\u000a          }\u000a          else {\u000a            *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a          }\u000a        }\u000a        ent->fts_instr = 3;\u000a      }\u000a    }\u000aLAB_00405f94:\u000a    pcVar4 = sp->fts_path;\u000a    sVar5 = ent->fts_parent->fts_pathlen;\u000a    sVar11 = sVar5 - 1;\u000a    if (ent->fts_parent->fts_path[sVar5 - 1] != '/') {\u000a      sVar11 = sVar5;\u000a    }\u000a    pcVar4[sVar11] = '/';\u000a    memmove(pcVar4 + sVar11 + 1,ent + 1,ent->fts_namelen + 1);\u000a  }\u000aLAB_00405fd0:\u000a  *(FTSENT **)&sp->fts_cur = ent;\u000a  uVar8 = ent->fts_info;\u000a  if (uVar8 == 0xb) {\u000a    lVar6 = ent->fts_statp[0].st_size;\u000a    if (lVar6 != 1) {\u000a      if (lVar6 != 2) {\u000aLAB_00406105:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      head = (FTSENT *)ent->fts_parent;\u000a      if ((((ent->fts_level < 1) || (head->fts_n_dirs_remaining != 0)) ||\u000a          ((sp->fts_options & 0x18U) != 0x18)) ||\u000a         (_Var7 = link_count_optimize_ok(head), _Var7 == false)) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((ent->fts_statp[0].st_mode & 0xf000) != 0x4000) goto LAB_0040606c;\u000a        if ((ent->fts_level != 0) && (head->fts_n_dirs_remaining != 0)) {\u000a          head->fts_n_dirs_remaining = head->fts_n_dirs_remaining - 1;\u000a        }\u000a      }\u000a    }\u000a    uVar8 = ent->fts_info;\u000a  }\u000aLAB_0040606c:\u000a  if (uVar8 != 1) {\u000a    return ent;\u000a  }\u000a  if (ent->fts_level == 0) {\u000a    sp->fts_dev = ent->fts_statp[0].st_dev;\u000a  }\u000a  _Var7 = enter_dir(sp,ent);\u000a  if (_Var7 == false) {\u000a    piVar10 = __errno_location();\u000a    *piVar10 = 0xc;\u000a    return (FTSENT *)0x0;\u000a  }\u000a  return ent;\u000a}\u000a\u000a
p1634
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14]\nTEST R12,R12\nJZ 0x0040609f\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040609f\nMOVZX EAX,word ptr [R12 + 0x74]\nMOV word ptr [R12 + 0x74],0x3\nCMP EAX,0x1\nJNZ 0x00405bad\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405670\nMOV word ptr [R12 + 0x70],AX\nJMP 0x004060a2\nMOVZX ECX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00405c1d\nMOV EDX,ECX\nAND EDX,0xfffe\nMOVZX EDX,DX\nCMP EDX,0xc\nJNZ 0x00405c1d\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405670\nMOV word ptr [R12 + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00405fd0\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x00405fd0\nMOV ESI,0x40b5ca\nMOV RDI,R14\nCALL 0x00405940\nMOV dword ptr [R12 + 0x44],EAX\nTEST EAX,EAX\nJS 0x00405da7\nOR byte ptr [R12 + 0x72],0x2\nJMP 0x00405fd0\nMOVZX ECX,CX\nCMP ECX,0x1\nJNZ 0x00405c80\nCMP EAX,0x4\nJZ 0x00405d08\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x40\nJZ 0x00405c45\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [R14 + 0x18]\nJNZ 0x00405d08\nMOV RDI,qword ptr [R14 + 0x8]\nTEST AH,0x20\nJZ 0x00405dc0\nTEST RDI,RDI\nJZ 0x00405dc0\nAND EAX,0xffffdfff\nMOV dword ptr [R14 + 0x48],EAX\nCALL 0x004059a0\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00405e10\nMOV RBX,qword ptr [R12 + 0x10]\nTEST RBX,RBX\nJZ 0x00405d48\nMOV qword ptr [R14],RBX\nMOV RDI,R12\nCALL 0x004016e0\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x00405d8d\nMOVZX EAX,word ptr [RBX + 0x74]\nCMP EAX,0x4\nMOV R12,RBX\nJZ 0x00405c80\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00405f94\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405670\nMOV word ptr [RBX + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00405f8e\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x00405f8e\nMOV ESI,0x40b5ca\nMOV RDI,R14\nCALL 0x00405940\nMOV dword ptr [RBX + 0x44],EAX\nTEST EAX,EAX\nJS 0x00405f7e\nOR byte ptr [RBX + 0x72],0x2\nJMP 0x00405f8e\nTEST byte ptr [R12 + 0x72],0x2\nJZ 0x00405d1a\nMOV EDI,dword ptr [R12 + 0x44]\nCALL 0x004018a0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00405d30\nCALL 0x004059a0\nMOV qword ptr [R14 + 0x8],0x0\nMOV word ptr [R12 + 0x70],0x6\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406110\nJMP 0x004060a2\nMOV RAX,qword ptr [R12 + 0x8]\nCMP qword ptr [RAX + 0x18],0x0\nJZ 0x00405e95\nMOV qword ptr [R14],RAX\nMOV RCX,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RAX + 0x48]\nMOV byte ptr [RCX + RAX*0x1],0x0\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406330\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405e8a\nMOV RDI,R12\nCALL 0x004016e0\nJMP 0x00405f94\nMOV RDI,R14\nCALL 0x00406a20\nTEST EAX,EAX\nJZ 0x00405e37\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x0040609f\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00405fd0\nTEST RDI,RDI\nJZ 0x00405e10\nMOV RCX,qword ptr [R12 + 0x30]\nMOV EDX,0xffffffff\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x004061a0\nTEST EAX,EAX\nJZ 0x00405e26\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nOR byte ptr [R12 + 0x72],0x1\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nJZ 0x00405e26\nMOV RCX,qword ptr [RAX + 0x8]\nMOV RCX,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + 0x30],RCX\nMOV RAX,qword ptr [RAX + 0x10]\nTEST RAX,RAX\nJNZ 0x00405df9\nJMP 0x00405e26\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406330\nMOV qword ptr [R14 + 0x8],RAX\nTEST RAX,RAX\nJZ 0x00405e57\nMOV RBX,qword ptr [R14 + 0x8]\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00405f94\nMOV RDI,R14\nCALL 0x00405b30\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406a70\nMOV RDI,R14\nCALL 0x004058d0\nJMP 0x00405fcd\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040609f\nCMP dword ptr [R12 + 0x40],0x0\nJZ 0x00405d38\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0x4\nJZ 0x00405d38\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00405d38\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x0040609f\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [R14],R15\nMOV RDI,R12\nCALL 0x004016e0\nCMP qword ptr [R15 + 0x58],-0x1\nJZ 0x00405efd\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0xb\nJZ 0x00406105\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV byte ptr [RAX + RCX*0x1],0x0\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x00405f1c\nMOVZX EAX,word ptr [R15 + 0x72]\nTEST AL,0x2\nJNZ 0x00405f41\nTEST AL,0x1\nJNZ 0x004060c7\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40b5c9\nMOV RDI,R14\nCALL 0x004061a0\nTEST EAX,EAX\nJNZ 0x00405f2c\nJMP 0x004060c7\nMOV RDI,R15\nCALL 0x004016e0\nCALL 0x00401700\nMOV dword ptr [RAX],0x0\nMOV qword ptr [R14],0x0\nJMP 0x0040609f\nMOV RDI,R14\nCALL 0x00406a20\nTEST EAX,EAX\nJZ 0x004060c7\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x004060c7\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x004060be\nTEST AH,0x2\nMOV ESI,dword ptr [R15 + 0x44]\nJNZ 0x004060b1\nMOV EDI,ESI\nCALL 0x004019e0\nTEST EAX,EAX\nJZ 0x004060be\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x004060be\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nMOV word ptr [RBX + 0x70],0x7\nMOV word ptr [RBX + 0x74],0x3\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RCX,qword ptr [RCX + 0x48]\nLEA RSI,[RCX + -0x1]\nCMP byte ptr [RDX + RCX*0x1 + -0x1],0x2f\nCMOVNZ RSI,RCX\nLEA RDI,[RAX + RSI*0x1 + 0x1]\nMOV byte ptr [RAX + RSI*0x1],0x2f\nLEA RSI,[0x108 + RBX]\nMOV RDX,qword ptr [RBX + 0x60]\nINC RDX\nCALL 0x00401a30\nMOV R12,RBX\nMOV qword ptr [R14],R12\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0xb\nJNZ 0x0040606c\nMOV RAX,qword ptr [0xa8 + R12]\nCMP RAX,0x1\nJZ 0x00406066\nCMP RAX,0x2\nJNZ 0x00406105\nMOV RBX,qword ptr [R12 + 0x8]\nCMP qword ptr [R12 + 0x58],0x0\nJLE 0x00406026\nCMP qword ptr [RBX + 0x68],0x0\nJNZ 0x00406026\nMOV EAX,dword ptr [R14 + 0x48]\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00406026\nMOV RDI,RBX\nCALL 0x00406b00\nTEST AL,AL\nJNZ 0x00406066\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405670\nMOV word ptr [R12 + 0x70],AX\nMOV ECX,0xf000\nAND ECX,dword ptr [0x90 + R12]\nCMP ECX,0x4000\nJNZ 0x0040606c\nCMP qword ptr [R12 + 0x58],0x0\nJZ 0x00406066\nMOV RAX,qword ptr [RBX + 0x68]\nTEST RAX,RAX\nJZ 0x00406066\nDEC RAX\nMOV qword ptr [RBX + 0x68],RAX\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x004060a2\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x00406085\nMOV RAX,qword ptr [R12 + 0x78]\nMOV qword ptr [R14 + 0x18],RAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406be0\nTEST AL,AL\nJNZ 0x004060a2\nCALL 0x00401700\nMOV dword ptr [RAX],0xc\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDX,0x1\nMOV RDI,R14\nCALL 0x00406c80\nMOV EDI,dword ptr [R15 + 0x44]\nCALL 0x004018a0\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x2\nJZ 0x004060f5\nMOV EAX,dword ptr [R15 + 0x40]\nXOR ECX,ECX\nCMP EAX,0x0\nSETNZ CL\nOR ECX,0x6\nCMP EAX,0x0\nMOV word ptr [R15 + 0x70],CX\nJNZ 0x004060f5\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00406110\nXOR EAX,EAX\nTEST byte ptr [R14 + 0x49],0x40\nCMOVNZ R15,RAX\nMOV R12,R15\nJMP 0x004060a2\nCALL 0x004016f0\n'
p1635
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4d 8b 26\n4d 85 e4\n0f 84 28 05 00 00\n41 f6 46 49 40\n0f 85 1d 05 00 00\n41 0f b7 44 24 74\n66 41 c7 44 24 74 03 00\n83 f8 01\n75 18\n31 d2\n4c 89 f7\n4c 89 e6\ne8 ce fa ff ff\n66 41 89 44 24 70\ne9 f5 04 00 00\n41 0f b7 4c 24 70\n0f b7 c0\n83 f8 02\n75 62\n89 ca\n81 e2 fe ff 00 00\n0f b7 d2\n83 fa 0c\n75 52\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 95 fa ff ff\n66 41 89 44 24 70\n0f b7 c0\n83 f8 01\n0f 85 e3 03 00 00\n41 f6 46 48 04\n0f 85 d8 03 00 00\nbe ca b5 40 00\n4c 89 f7\ne8 3b fd ff ff\n41 89 44 24 44\n85 c0\n0f 88 95 01 00 00\n41 80 4c 24 72 02\ne9 b3 03 00 00\n0f b7 c9\n83 f9 01\n75 5b\n83 f8 04\n0f 84 da 00 00 00\n41 8b 46 48\na8 40\n74 0f\n49 8b 4c 24 78\n49 3b 4e 18\n0f 85 c3 00 00 00\n49 8b 7e 08\nf6 c4 20\n0f 84 6e 01 00 00\n48 85 ff\n0f 84 65 01 00 00\n25 ff df ff ff\n41 89 46 48\ne8 37 fd ff ff\n49 c7 46 08 00 00 00 00\ne9 9a 01 00 00\n49 8b 5c 24 10\n48 85 db\n0f 84 ba 00 00 00\n49 89 1e\n4c 89 e7\ne8 47 ba ff ff\n48 83 7b 58 00\n0f 84 e9 00 00 00\n0f b7 43 74\n83 f8 04\n49 89 dc\n74 d0\n0f b7 c0\n83 f8 02\n0f 85 d8 02 00 00\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 a4 f9 ff ff\n66 89 43 70\n0f b7 c0\n83 f8 01\n0f 85 b2 02 00 00\n41 f6 46 48 04\n0f 85 a7 02 00 00\nbe ca b5 40 00\n4c 89 f7\ne8 4c fc ff ff\n89 43 44\n85 c0\n0f 88 7f 02 00 00\n80 4b 72 02\ne9 86 02 00 00\n41 f6 44 24 72 02\n74 0a\n41 8b 7c 24 44\ne8 86 bb ff ff\n49 8b 7e 08\n48 85 ff\n74 0d\ne8 78 fc ff ff\n49 c7 46 08 00 00 00 00\n66 41 c7 44 24 70 06 00\n4c 89 f7\n4c 89 e6\ne8 cd 03 00 00\ne9 5a 03 00 00\n49 8b 44 24 08\n48 83 78 18 00\n0f 84 3d 01 00 00\n49 89 06\n49 8b 4e 20\n48 8b 40 48\nc6 04 01 00\nbe 03 00 00 00\n4c 89 f7\ne8 bc 05 00 00\n48 89 c3\n48 85 db\n0f 84 0a 01 00 00\n4c 89 e7\ne8 58 b9 ff ff\ne9 07 02 00 00\n4c 89 f7\ne8 8b 0c 00 00\n85 c0\n0f 84 9a 00 00 00\n41 80 4e 49 40\ne9 f8 02 00 00\ne8 54 b9 ff ff\n8b 00\n41 89 44 24 40\n66 41 c7 44 24 70 07 00\ne9 10 02 00 00\n48 85 ff\n74 4b\n49 8b 4c 24 30\nba ff ff ff ff\n4c 89 f7\n4c 89 e6\ne8 c6 03 00 00\n85 c0\n74 48\ne8 1d b9 ff ff\n8b 00\n41 89 44 24 40\n41 80 4c 24 72 01\n49 8b 46 08\n48 85 c0\n74 2d\n48 8b 48 08\n48 8b 49 30\n48 89 48 30\n48 8b 40 10\n48 85 c0\n75 eb\neb 16\nbe 03 00 00 00\n4c 89 f7\ne8 13 05 00 00\n49 89 46 08\n48 85 c0\n74 31\n49 8b 5e 08\n49 c7 46 08 00 00 00 00\ne9 5d 01 00 00\n4c 89 f7\ne8 f1 fc ff ff\n4c 89 f7\n48 89 de\ne8 26 0c 00 00\n4c 89 f7\ne8 7e fa ff ff\ne9 76 01 00 00\n41 f6 46 49 40\n0f 85 3d 02 00 00\n41 83 7c 24 40 00\n0f 84 ca fe ff ff\n41 0f b7 44 24 70\n83 f8 04\n0f 84 bb fe ff ff\n66 41 c7 44 24 70 07 00\ne9 ae fe ff ff\n41 f6 46 49 40\n0f 85 0a 02 00 00\n4d 8b 7c 24 08\n4d 89 3e\n4c 89 e7\ne8 3b b8 ff ff\n49 83 7f 58 ff\n74 51\n41 0f b7 47 70\n83 f8 0b\n0f 84 4b 02 00 00\n49 8b 46 20\n49 8b 4f 48\nc6 04 08 00\n49 83 7f 58 00\n74 4f\n41 0f b7 47 72\na8 02\n75 6b\na8 01\n0f 85 e9 01 00 00\n49 8b 77 08\nba ff ff ff ff\nb9 c9 b5 40 00\n4c 89 f7\ne8 ac 02 00 00\n85 c0\n75 34\ne9 ca 01 00 00\n4c 89 ff\ne8 db b7 ff ff\ne8 f6 b7 ff ff\nc7 00 00 00 00 00\n49 c7 06 00 00 00 00\ne9 83 01 00 00\n4c 89 f7\ne8 fc 0a 00 00\n85 c0\n0f 84 9b 01 00 00\ne8 cf b7 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 86 01 00 00\n41 8b 46 48\na8 04\n0f 85 71 01 00 00\nf6 c4 02\n41 8b 77 44\n0f 85 57 01 00 00\n89 f7\ne8 7f ba ff ff\n85 c0\n0f 84 55 01 00 00\ne8 92 b7 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 40 01 00 00\ne8 7d b7 ff ff\n8b 00\n89 43 40\n66 c7 43 70 07 00\n66 c7 43 74 03 00\n49 8b 46 20\n48 8b 4b 08\n48 8b 51 38\n48 8b 49 48\n48 8d 71 ff\n80 7c 0a ff 2f\n48 0f 45 f1\n48 8d 7c 30 01\nc6 04 30 2f\n48 8d b3 08 01 00 00\n48 8b 53 60\n48 ff c2\ne8 63 ba ff ff\n49 89 dc\n4d 89 26\n41 0f b7 44 24 70\n83 f8 0b\n0f 85 8a 00 00 00\n49 8b 84 24 a8 00 00 00\n48 83 f8 01\n74 76\n48 83 f8 02\n0f 85 0b 01 00 00\n49 8b 5c 24 08\n49 83 7c 24 58 00\n7e 1f\n48 83 7b 68 00\n75 18\n41 8b 46 48\n83 e0 18\n83 f8 18\n75 0c\n48 89 df\ne8 de 0a 00 00\n84 c0\n75 40\n31 d2\n4c 89 f7\n4c 89 e6\ne8 3d f6 ff ff\n66 41 89 44 24 70\nb9 00 f0 00 00\n41 23 8c 24 90 00 00 00\n81 f9 00 40 00 00\n75 1e\n49 83 7c 24 58 00\n74 10\n48 8b 43 68\n48 85 c0\n74 07\n48 ff c8\n48 89 43 68\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 01\n75 2e\n49 83 7c 24 58 00\n75 09\n49 8b 44 24 78\n49 89 46 18\n4c 89 f7\n4c 89 e6\ne8 50 0b 00 00\n84 c0\n75 0e\ne8 67 b6 ff ff\nc7 00 0c 00 00 00\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nba 01 00 00 00\n4c 89 f7\ne8 c2 0b 00 00\n41 8b 7f 44\ne8 d9 b7 ff ff\n41 0f b7 47 70\n83 f8 02\n74 24\n41 8b 47 40\n31 c9\n83 f8 00\n0f 95 c1\n83 c9 06\n83 f8 00\n66 41 89 4f 70\n75 0b\n4c 89 f7\n4c 89 fe\ne8 1b 00 00 00\n31 c0\n41 f6 46 49 40\n4c 0f 45 f8\n4d 89 fc\neb 9d\ne8 e6 b5 ff ff\n'
p1636
S'.text:0000000000405b60\n.text:0000000000405b62\n.text:0000000000405b64\n.text:0000000000405b66\n.text:0000000000405b67\n.text:0000000000405b68\n.text:0000000000405b6b\n.text:0000000000405b6e\n.text:0000000000405b71\n.text:0000000000405b77\n.text:0000000000405b7c\n.text:0000000000405b82\n.text:0000000000405b88\n.text:0000000000405b90\n.text:0000000000405b93\n.text:0000000000405b95\n.text:0000000000405b97\n.text:0000000000405b9a\n.text:0000000000405b9d\n.text:0000000000405ba2\n.text:0000000000405ba8\n.text:0000000000405bad\n.text:0000000000405bb3\n.text:0000000000405bb6\n.text:0000000000405bb9\n.text:0000000000405bbb\n.text:0000000000405bbd\n.text:0000000000405bc3\n.text:0000000000405bc6\n.text:0000000000405bc9\n.text:0000000000405bcb\n.text:0000000000405bd0\n.text:0000000000405bd3\n.text:0000000000405bd6\n.text:0000000000405bdb\n.text:0000000000405be1\n.text:0000000000405be4\n.text:0000000000405be7\n.text:0000000000405bed\n.text:0000000000405bf2\n.text:0000000000405bf8\n.text:0000000000405bfd\n.text:0000000000405c00\n.text:0000000000405c05\n.text:0000000000405c0a\n.text:0000000000405c0c\n.text:0000000000405c12\n.text:0000000000405c18\n.text:0000000000405c1d\n.text:0000000000405c20\n.text:0000000000405c23\n.text:0000000000405c25\n.text:0000000000405c28\n.text:0000000000405c2e\n.text:0000000000405c32\n.text:0000000000405c34\n.text:0000000000405c36\n.text:0000000000405c3b\n.text:0000000000405c3f\n.text:0000000000405c45\n.text:0000000000405c49\n.text:0000000000405c4c\n.text:0000000000405c52\n.text:0000000000405c55\n.text:0000000000405c5b\n.text:0000000000405c60\n.text:0000000000405c64\n.text:0000000000405c69\n.text:0000000000405c71\n.text:0000000000405c80\n.text:0000000000405c85\n.text:0000000000405c88\n.text:0000000000405c8e\n.text:0000000000405c91\n.text:0000000000405c94\n.text:0000000000405c99\n.text:0000000000405c9e\n.text:0000000000405ca4\n.text:0000000000405ca8\n.text:0000000000405cab\n.text:0000000000405cae\n.text:0000000000405cb0\n.text:0000000000405cb3\n.text:0000000000405cb6\n.text:0000000000405cbc\n.text:0000000000405cc1\n.text:0000000000405cc4\n.text:0000000000405cc7\n.text:0000000000405ccc\n.text:0000000000405cd0\n.text:0000000000405cd3\n.text:0000000000405cd6\n.text:0000000000405cdc\n.text:0000000000405ce1\n.text:0000000000405ce7\n.text:0000000000405cec\n.text:0000000000405cef\n.text:0000000000405cf4\n.text:0000000000405cf7\n.text:0000000000405cf9\n.text:0000000000405cff\n.text:0000000000405d03\n.text:0000000000405d08\n.text:0000000000405d0e\n.text:0000000000405d10\n.text:0000000000405d15\n.text:0000000000405d1a\n.text:0000000000405d1e\n.text:0000000000405d21\n.text:0000000000405d23\n.text:0000000000405d28\n.text:0000000000405d30\n.text:0000000000405d38\n.text:0000000000405d3b\n.text:0000000000405d3e\n.text:0000000000405d43\n.text:0000000000405d48\n.text:0000000000405d4d\n.text:0000000000405d52\n.text:0000000000405d58\n.text:0000000000405d5b\n.text:0000000000405d5f\n.text:0000000000405d63\n.text:0000000000405d67\n.text:0000000000405d6c\n.text:0000000000405d6f\n.text:0000000000405d74\n.text:0000000000405d77\n.text:0000000000405d7a\n.text:0000000000405d80\n.text:0000000000405d83\n.text:0000000000405d88\n.text:0000000000405d8d\n.text:0000000000405d90\n.text:0000000000405d95\n.text:0000000000405d97\n.text:0000000000405d9d\n.text:0000000000405da2\n.text:0000000000405da7\n.text:0000000000405dac\n.text:0000000000405dae\n.text:0000000000405db3\n.text:0000000000405dbb\n.text:0000000000405dc0\n.text:0000000000405dc3\n.text:0000000000405dc5\n.text:0000000000405dca\n.text:0000000000405dcf\n.text:0000000000405dd2\n.text:0000000000405dd5\n.text:0000000000405dda\n.text:0000000000405ddc\n.text:0000000000405dde\n.text:0000000000405de3\n.text:0000000000405de5\n.text:0000000000405dea\n.text:0000000000405df0\n.text:0000000000405df4\n.text:0000000000405df7\n.text:0000000000405df9\n.text:0000000000405dfd\n.text:0000000000405e01\n.text:0000000000405e05\n.text:0000000000405e09\n.text:0000000000405e0c\n.text:0000000000405e0e\n.text:0000000000405e10\n.text:0000000000405e15\n.text:0000000000405e18\n.text:0000000000405e1d\n.text:0000000000405e21\n.text:0000000000405e24\n.text:0000000000405e26\n.text:0000000000405e2a\n.text:0000000000405e32\n.text:0000000000405e37\n.text:0000000000405e3a\n.text:0000000000405e3f\n.text:0000000000405e42\n.text:0000000000405e45\n.text:0000000000405e4a\n.text:0000000000405e4d\n.text:0000000000405e52\n.text:0000000000405e57\n.text:0000000000405e5c\n.text:0000000000405e62\n.text:0000000000405e68\n.text:0000000000405e6e\n.text:0000000000405e74\n.text:0000000000405e77\n.text:0000000000405e7d\n.text:0000000000405e85\n.text:0000000000405e8a\n.text:0000000000405e8f\n.text:0000000000405e95\n.text:0000000000405e9a\n.text:0000000000405e9d\n.text:0000000000405ea0\n.text:0000000000405ea5\n.text:0000000000405eaa\n.text:0000000000405eac\n.text:0000000000405eb1\n.text:0000000000405eb4\n.text:0000000000405eba\n.text:0000000000405ebe\n.text:0000000000405ec2\n.text:0000000000405ec6\n.text:0000000000405ecb\n.text:0000000000405ecd\n.text:0000000000405ed2\n.text:0000000000405ed4\n.text:0000000000405ed6\n.text:0000000000405ed8\n.text:0000000000405ede\n.text:0000000000405ee2\n.text:0000000000405ee7\n.text:0000000000405eec\n.text:0000000000405eef\n.text:0000000000405ef4\n.text:0000000000405ef6\n.text:0000000000405ef8\n.text:0000000000405efd\n.text:0000000000405f00\n.text:0000000000405f05\n.text:0000000000405f0a\n.text:0000000000405f10\n.text:0000000000405f17\n.text:0000000000405f1c\n.text:0000000000405f1f\n.text:0000000000405f24\n.text:0000000000405f26\n.text:0000000000405f2c\n.text:0000000000405f31\n.text:0000000000405f33\n.text:0000000000405f37\n.text:0000000000405f3c\n.text:0000000000405f41\n.text:0000000000405f45\n.text:0000000000405f47\n.text:0000000000405f4d\n.text:0000000000405f50\n.text:0000000000405f54\n.text:0000000000405f5a\n.text:0000000000405f5c\n.text:0000000000405f61\n.text:0000000000405f63\n.text:0000000000405f69\n.text:0000000000405f6e\n.text:0000000000405f70\n.text:0000000000405f74\n.text:0000000000405f79\n.text:0000000000405f7e\n.text:0000000000405f83\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8e\n.text:0000000000405f94\n.text:0000000000405f98\n.text:0000000000405f9c\n.text:0000000000405fa0\n.text:0000000000405fa4\n.text:0000000000405fa8\n.text:0000000000405fad\n.text:0000000000405fb1\n.text:0000000000405fb6\n.text:0000000000405fba\n.text:0000000000405fc1\n.text:0000000000405fc5\n.text:0000000000405fc8\n.text:0000000000405fcd\n.text:0000000000405fd0\n.text:0000000000405fd3\n.text:0000000000405fd9\n.text:0000000000405fdc\n.text:0000000000405fe2\n.text:0000000000405fea\n.text:0000000000405fee\n.text:0000000000405ff0\n.text:0000000000405ff4\n.text:0000000000405ffa\n.text:0000000000405fff\n.text:0000000000406005\n.text:0000000000406007\n.text:000000000040600c\n.text:000000000040600e\n.text:0000000000406012\n.text:0000000000406015\n.text:0000000000406018\n.text:000000000040601a\n.text:000000000040601d\n.text:0000000000406022\n.text:0000000000406024\n.text:0000000000406026\n.text:0000000000406028\n.text:000000000040602b\n.text:000000000040602e\n.text:0000000000406033\n.text:0000000000406039\n.text:000000000040603e\n.text:0000000000406046\n.text:000000000040604c\n.text:000000000040604e\n.text:0000000000406054\n.text:0000000000406056\n.text:000000000040605a\n.text:000000000040605d\n.text:000000000040605f\n.text:0000000000406062\n.text:0000000000406066\n.text:000000000040606c\n.text:000000000040606f\n.text:0000000000406072\n.text:0000000000406074\n.text:000000000040607a\n.text:000000000040607c\n.text:0000000000406081\n.text:0000000000406085\n.text:0000000000406088\n.text:000000000040608b\n.text:0000000000406090\n.text:0000000000406092\n.text:0000000000406094\n.text:0000000000406099\n.text:000000000040609f\n.text:00000000004060a2\n.text:00000000004060a5\n.text:00000000004060a9\n.text:00000000004060aa\n.text:00000000004060ac\n.text:00000000004060ae\n.text:00000000004060b0\n.text:00000000004060b1\n.text:00000000004060b6\n.text:00000000004060b9\n.text:00000000004060be\n.text:00000000004060c2\n.text:00000000004060c7\n.text:00000000004060cc\n.text:00000000004060cf\n.text:00000000004060d1\n.text:00000000004060d5\n.text:00000000004060d7\n.text:00000000004060da\n.text:00000000004060dd\n.text:00000000004060e0\n.text:00000000004060e3\n.text:00000000004060e8\n.text:00000000004060ea\n.text:00000000004060ed\n.text:00000000004060f0\n.text:00000000004060f5\n.text:00000000004060f7\n.text:00000000004060fc\n.text:0000000000406100\n.text:0000000000406103\n.text:0000000000406105\n'
p1637
tp1638
sS'fts_lfree'
p1639
(S'\n__stdcall fts_lfree(FTSENT * head)\n'
p1640
V\u000avoid fts_lfree(FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  \u000a  if (head != (FTSENT *)0x0) {\u000a    do {\u000a      p_Var1 = head->fts_link;\u000a      if ((DIR *)head->fts_dirp != (DIR *)0x0) {\u000a        closedir((DIR *)head->fts_dirp);\u000a      }\u000a      free(head);\u000a      head = (FTSENT *)p_Var1;\u000a    } while (p_Var1 != (_ftsent *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1641
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004059d2\nNOP dword ptr [RAX]\nMOV R14,qword ptr [RBX + 0x10]\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x004059c2\nCALL 0x004018c0\nMOV RDI,RBX\nCALL 0x004016e0\nTEST R14,R14\nMOV RBX,R14\nJNZ 0x004059b0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1642
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 26\n0f 1f 40 00\n4c 8b 73 10\n48 8b 7b 18\n48 85 ff\n74 05\ne8 fe be ff ff\n48 89 df\ne8 16 bd ff ff\n4d 85 f6\n4c 89 f3\n75 de\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1643
S'.text:00000000004059a0\n.text:00000000004059a2\n.text:00000000004059a3\n.text:00000000004059a4\n.text:00000000004059a7\n.text:00000000004059aa\n.text:00000000004059ac\n.text:00000000004059b0\n.text:00000000004059b4\n.text:00000000004059b8\n.text:00000000004059bb\n.text:00000000004059bd\n.text:00000000004059c2\n.text:00000000004059c5\n.text:00000000004059ca\n.text:00000000004059cd\n.text:00000000004059d0\n.text:00000000004059d2\n.text:00000000004059d6\n.text:00000000004059d7\n.text:00000000004059d9\n'
p1644
tp1645
sS'fputs_unlocked'
p1646
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1647
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060f128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x0060f128]\n'
p1649
S'ff 25 32 d8 20 00\n'
p1650
S'.plt:00000000004018f0\n'
p1651
tp1652
sS'main'
p1653
(S'\n__stdcall main(char * * argv)\n'
p1654
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  char cVar3;\u000a  dev_ino dev_ino_buf;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  undefined8 uVar6;\u000a  long lVar7;\u000a  uint *puVar8;\u000a  char *pcVar9;\u000a  char *file;\u000a  int iVar10;\u000a  int iVar11;\u000a  char **in_RSI;\u000a  int iVar12;\u000a  char *ref_context;\u000a  char *local_40;\u000a  char local_38;\u000a  undefined7 uStack55;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a              + 0x1d0);\u000a  bindtextdomain(0x40a6c5,"/usr/local/share/locale");\u000a  textdomain(0x40a6c5);\u000a  atexit(close_stdout);\u000a  iVar12 = 0x10;\u000a  iVar11 = 0xffffffff;\u000a  local_38 = 0;\u000a  bVar2 = false;\u000a  file = (char *)0x0;\u000aswitchD_00402026_caseD_66:\u000a  uStack55 = 0;\u000a  iVar10 = (int)((ulong)argv & 0xffffffff);\u000a  iVar5 = getopt_long((ulong)argv & 0xffffffff);\u000a  switch(iVar5) {\u000a  case 0x48:\u000a    iVar12 = 0x11;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x4c:\u000a    iVar12 = 2;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x50:\u000a    iVar12 = 0x10;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x52:\u000a    recurse = 1;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x68:\u000a    iVar11 = 0;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x6c:\u000a    specified_range = optarg;\u000a    bVar2 = true;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x72:\u000a    specified_role = optarg;\u000a    bVar2 = true;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x74:\u000a    specified_type = optarg;\u000a    bVar2 = true;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x75:\u000a    specified_user = optarg;\u000a    bVar2 = true;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x76:\u000a    verbose = 1;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x80:\u000a    iVar11 = 1;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x81:\u000a    local_38 = 0;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x82:\u000a    local_38 = 1;\u000a    goto switchD_00402026_caseD_66;\u000a  case 0x83:\u000a    break;\u000a  default:\u000a    if (iVar5 == -0x83) goto LAB_0040235d;\u000a    if (iVar5 == -0x82) {\u000a      usage(0);\u000a    }\u000a  case 0:\u000a  case 1:\u000a  case 2:\u000a  case 3:\u000a  case 4:\u000a  case 5:\u000a  case 6:\u000a  case 7:\u000a  case 8:\u000a  case 9:\u000a  case 10:\u000a  case 0xb:\u000a  case 0xc:\u000a  case 0xd:\u000a  case 0xe:\u000a  case 0xf:\u000a  case 0x10:\u000a  case 0x11:\u000a  case 0x12:\u000a  case 0x13:\u000a  case 0x14:\u000a  case 0x15:\u000a  case 0x16:\u000a  case 0x17:\u000a  case 0x18:\u000a  case 0x19:\u000a  case 0x1a:\u000a  case 0x1b:\u000a  case 0x1c:\u000a  case 0x1d:\u000a  case 0x1e:\u000a  case 0x1f:\u000a  case 0x20:\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x30:\u000a  case 0x31:\u000a  case 0x32:\u000a  case 0x33:\u000a  case 0x34:\u000a  case 0x35:\u000a  case 0x36:\u000a  case 0x37:\u000a  case 0x38:\u000a  case 0x39:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x41:\u000a  case 0x42:\u000a  case 0x43:\u000a  case 0x44:\u000a  case 0x45:\u000a  case 0x46:\u000a  case 0x47:\u000a  case 0x49:\u000a  case 0x4a:\u000a  case 0x4b:\u000a  case 0x4d:\u000a  case 0x4e:\u000a  case 0x4f:\u000a  case 0x51:\u000a  case 0x53:\u000a  case 0x54:\u000a  case 0x55:\u000a  case 0x56:\u000a  case 0x57:\u000a  case 0x58:\u000a  case 0x59:\u000a  case 0x5a:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x61:\u000a  case 0x62:\u000a  case 99:\u000a  case 100:\u000a  case 0x65:\u000a  case 0x67:\u000a  case 0x69:\u000a  case 0x6a:\u000a  case 0x6b:\u000a  case 0x6d:\u000a  case 0x6e:\u000a  case 0x6f:\u000a  case 0x70:\u000a  case 0x71:\u000a  case 0x73:\u000a  case 0x77:\u000a  case 0x78:\u000a  case 0x79:\u000a  case 0x7a:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a  case 0x7f:\u000a    usage(1);\u000aLAB_0040235d:\u000a    version_etc(stdout,"chcon","GNU coreutils",Version,"Russell Coker","Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  case -1:\u000a    goto switchD_00402026_caseD_ffffffff;\u000a  }\u000a  file = optarg;\u000a  goto switchD_00402026_caseD_66;\u000aswitchD_00402026_caseD_ffffffff:\u000a  if (recurse == 1) {\u000a    if (iVar12 == 0x10) {\u000a      _Var4 = false;\u000a      if (iVar11 == 1) {\u000a        uVar6 = dcgettext(0,"-R --dereference requires either -H or -L",5);\u000a        error(1,0,uVar6);\u000a      }\u000a    }\u000a    else {\u000a      _Var4 = true;\u000a      if (iVar11 == 0) {\u000a        uVar6 = dcgettext(0,"-R -h requires -P",5);\u000a        error(1,0,uVar6);\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    _Var4 = (_Bool)(iVar11 != 0);\u000a  }\u000a  cVar3 = local_38;\u000a  lVar7 = (long)optind;\u000a  iVar11 = (uint)(file == (char *)0x0) + 1;\u000a  if (bVar2) {\u000a    iVar11 = 1;\u000a  }\u000a  if (iVar10 - optind < iVar11) {\u000a    affect_symlink_referent = _Var4;\u000a    if (optind < iVar10) {\u000a      affect_symlink_referent = _Var4;\u000a      uVar6 = dcgettext(0,"missing operand after %s",5);\u000a      file = quote(in_RSI[(long)iVar10 + -1]);\u000a      error(0,0,uVar6,file);\u000a      usage(1);\u000a    }\u000a    uVar6 = dcgettext();\u000a    error(0,0,uVar6,uVar6);\u000a    iVar11 = 1;\u000a    usage();\u000a    return iVar11;\u000a  }\u000a  affect_symlink_referent = _Var4;\u000a  if (file != (char *)0x0) {\u000a    local_40 = (char *)0x0;\u000a    affect_symlink_referent = _Var4;\u000a    iVar11 = getfilecon(file,&local_40);\u000a    if (iVar11 < 0) {\u000a      puVar8 = (uint *)__errno_location();\u000a      uVar1 = *puVar8;\u000a      uVar6 = dcgettext(0,"failed to get security context of %s",5);\u000a      pcVar9 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar6,pcVar9);\u000a    }\u000a    specified_context = local_40;\u000a    if ((!bVar2) || (file == (char *)0x0)) goto joined_r0x00402236;\u000a    uVar6 = dcgettext(0,"conflicting security context specifiers given",5);\u000a    error(0,0,uVar6);\u000a    lVar7 = usage(1);\u000a  }\u000a  if (bVar2) {\u000a    specified_context = (char *)0x0;\u000a  }\u000a  else {\u000a    optind = (int)lVar7 + 1;\u000a    specified_context = in_RSI[lVar7];\u000a    file = se_const(specified_context);\u000a    iVar11 = security_check_context(file);\u000a    if (iVar11 < 0) {\u000a      puVar8 = (uint *)__errno_location();\u000a      uVar1 = *puVar8;\u000a      uVar6 = dcgettext(0,"invalid context: %s",5);\u000a      file = quote(specified_context);\u000a      error(1,(ulong)uVar1,uVar6,file);\u000a    }\u000a  }\u000ajoined_r0x00402236:\u000a  if ((cVar3 == 0) || (((recurse ^ 1) & 1) != 0)) {\u000a    root_dev_ino = (dev_ino *)0x0;\u000a  }\u000a  else {\u000a    root_dev_ino = get_root_dev_ino((dev_ino *)&ram0x0060f348);\u000a    if (root_dev_ino == (dev_ino *)0x0) {\u000a      puVar8 = (uint *)__errno_location();\u000a      uVar1 = *puVar8;\u000a      uVar6 = dcgettext(0,"failed to get attributes of %s",5);\u000a      file = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar1,uVar6,file);\u000a    }\u000a  }\u000a  _Var4 = process_files(in_RSI + (long)optind);\u000a  return (int)(uint)(_Var4 ^ 1);\u000a}\u000a\u000a
p1655
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00402de0\nMOV EDI,0x6\nMOV ESI,0x40a630\nCALL 0x00401a10\nMOV EDI,0x40a6c5\nMOV ESI,0x40a69a\nCALL 0x004017a0\nMOV EDI,0x40a6c5\nCALL 0x00401780\nMOV EDI,0x402d20\nCALL 0x00409860\nMOV R13D,0x10\nMOV EBX,0xffffffff\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EAX,EAX\nJMP 0x00401fe7\nMOV RAX,qword ptr [0x0060f2d8]\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00402000\nMOV RAX,qword ptr [0x0060f2d8]\nMOV qword ptr [0x0060f330],RAX\nMOV R12B,0x1\nNOP\nMOV EDX,0x40a6b2\nMOV ECX,0x409d80\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401810\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x84\nJA 0x0040233e\nJMP qword ptr [0x409900 + RCX*0x8]\nMOV R13D,0x11\nJMP 0x00402000\nMOV R13D,0x10\nJMP 0x00402000\nXOR EBX,EBX\nJMP 0x00402000\nMOV RAX,qword ptr [0x0060f2d8]\nMOV qword ptr [0x0060f320],RAX\nMOV R12B,0x1\nJMP 0x00402000\nMOV RAX,qword ptr [0x0060f2d8]\nMOV qword ptr [0x0060f328],RAX\nMOV R12B,0x1\nJMP 0x00402000\nMOV EBX,0x1\nJMP 0x00402000\nXOR R15D,R15D\nJMP 0x00402000\nMOV R13D,0x2\nJMP 0x00402000\nMOV byte ptr [0x0060f310],0x1\nJMP 0x00402000\nMOV RAX,qword ptr [0x0060f2d8]\nMOV qword ptr [0x0060f318],RAX\nMOV R12B,0x1\nJMP 0x00402000\nMOV byte ptr [0x0060f311],0x1\nJMP 0x00402000\nMOV R15B,0x1\nJMP 0x00402000\nCMP byte ptr [0x0060f310],0x1\nMOV qword ptr [RSP + 0x20],R15\nJNZ 0x004020ff\nCMP R13D,0x10\nJNZ 0x0040210d\nXOR R15D,R15D\nCMP EBX,0x1\nJNZ 0x004020f2\nXOR EDI,EDI\nMOV ESI,0x40a6ea\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nMOV RBX,qword ptr [RSP + 0x10]\nMOV R13D,0x10\nJMP 0x0040213e\nTEST EBX,EBX\nSETNZ R15B\nMOV R13D,0x10\nJMP 0x00402139\nMOV R15B,0x1\nTEST EBX,EBX\nJNZ 0x00402139\nXOR EDI,EDI\nMOV ESI,0x40a714\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nMOV RBX,qword ptr [RSP + 0x10]\nMOV byte ptr [0x0060f338],R15B\nMOVSXD RAX,dword ptr [0x0060f2d0]\nMOV ECX,EBP\nSUB ECX,EAX\nCMP RBX,0x1\nMOV EDX,0x1\nMOV ESI,0x1\nADC ESI,0x0\nTEST R12B,R12B\nCMOVNZ ESI,EDX\nCMP ECX,ESI\nJL 0x00402397\nTEST RBX,RBX\nMOV RBP,qword ptr [RSP + 0x20]\nJZ 0x00402223\nMOV qword ptr [RSP + 0x18],0x0\nLEA RSI,[RSP + 0x18]\nMOV RDI,RBX\nCALL 0x004048a0\nTEST EAX,EAX\nJNS 0x004021d9\nCALL 0x00401700\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x10],EAX\nXOR EDI,EDI\nMOV ESI,0x40a74f\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,RBX\nCALL 0x004040b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x10]\nMOV RDX,R15\nCALL 0x00401a40\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [0x0060f340],RAX\nTEST R12B,R12B\nJZ 0x0040229f\nTEST RBX,RBX\nJZ 0x0040229f\nXOR EDI,EDI\nMOV ESI,0x40a788\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nMOV EDI,0x1\nCALL 0x00401c30\nTEST R12B,R12B\nJZ 0x0040223d\nMOV qword ptr [0x0060f340],0x0\nTEST BPL,BPL\nJNZ 0x004022a4\nJMP 0x00402308\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x0060f2d0],ECX\nMOV RDI,qword ptr [R14 + RAX*0x8]\nMOV qword ptr [0x0060f340],RDI\nCALL 0x00402410\nMOV RDI,RAX\nCALL 0x00404960\nTEST EAX,EAX\nJNS 0x0040229f\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a774\nMOV EDX,0x5\nCALL 0x004017b0\nMOV R12,RAX\nMOV RDI,qword ptr [0x0060f340]\nCALL 0x004042d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R12\nCALL 0x00401a40\nTEST BPL,BPL\nJZ 0x00402308\nMOV AL,byte ptr [0x0060f310]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x00402308\nMOV EDI,0x60f348\nCALL 0x004046e0\nMOV qword ptr [0x0060f358],RAX\nTEST RAX,RAX\nJNZ 0x00402313\nCALL 0x00401700\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a7b6\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV ESI,0x40bcbf\nCALL 0x004040b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00401a40\nJMP 0x00402313\nMOV qword ptr [0x0060f358],0x0\nMOVSXD RAX,dword ptr [0x0060f2d0]\nLEA RDI,[R14 + RAX*0x8]\nOR R13D,0x8\nMOV ESI,R13D\nCALL 0x00402420\nXOR AL,0x1\nMOVZX EAX,AL\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x0040235d\nCMP EAX,0xffffff7e\nJNZ 0x00402353\nXOR EDI,EDI\nCALL 0x00401c30\nMOV EDI,0x1\nCALL 0x00401c30\nMOV RDI,qword ptr [0x0060f2c8]\nMOV RCX,qword ptr [0x0060f258]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x40a694\nMOV EDX,0x40a6c1\nMOV R8D,0x40a6cf\nMOV R9D,0x40a6dd\nXOR EAX,EAX\nCALL 0x00404e00\nXOR EDI,EDI\nCALL 0x00401ac0\nXOR EDI,EDI\nCMP EAX,EBP\nJGE 0x004023d7\nMOV ESI,0x40a736\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RBX,RAX\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [R14 + RAX*0x8 + -0x8]\nCALL 0x004042d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401a40\nMOV EDI,0x1\nCALL 0x00401c30\nMOV ESI,0x40a726\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401a40\nMOV EDI,0x1\nCALL 0x00401c30\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p1656
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f6\n89 fd\n49 8b 3e\ne8 55 0e 00 00\nbf 06 00 00 00\nbe 30 a6 40 00\ne8 76 fa ff ff\nbf c5 a6 40 00\nbe 9a a6 40 00\ne8 f7 f7 ff ff\nbf c5 a6 40 00\ne8 cd f7 ff ff\nbf 20 2d 40 00\ne8 a3 78 00 00\n41 bd 10 00 00 00\nbb ff ff ff ff\n45 31 ff\n45 31 e4\n31 c0\neb 15\n48 8b 05 f1 d2 20 00\n48 89 44 24 10\neb 12\n48 8b 05 e3 d2 20 00\n48 89 05 34 d3 20 00\n41 b4 01\n90\nba b2 a6 40 00\nb9 80 9d 40 00\n45 31 c0\n89 ef\n4c 89 f6\ne8 f9 f7 ff ff\n8d 48 01\n81 f9 84 00 00 00\n0f 87 18 03 00 00\nff 24 cd 00 99 40 00\n41 bd 11 00 00 00\neb cb\n41 bd 10 00 00 00\neb c3\n31 db\neb bf\n48 8b 05 90 d2 20 00\n48 89 05 d1 d2 20 00\n41 b4 01\neb ac\n48 8b 05 7d d2 20 00\n48 89 05 c6 d2 20 00\n41 b4 01\neb 99\nbb 01 00 00 00\neb 92\n45 31 ff\neb 8d\n41 bd 02 00 00 00\neb 85\nc6 05 8e d2 20 00 01\ne9 79 ff ff ff\n48 8b 05 4a d2 20 00\n48 89 05 83 d2 20 00\n41 b4 01\ne9 63 ff ff ff\nc6 05 6d d2 20 00 01\ne9 57 ff ff ff\n41 b7 01\ne9 4f ff ff ff\n80 3d 58 d2 20 00 01\n4c 89 7c 24 20\n75 40\n41 83 fd 10\n75 48\n45 31 ff\n83 fb 01\n75 25\n31 ff\nbe ea a6 40 00\nba 05 00 00 00\ne8 d2 f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4e f9 ff ff\n48 8b 5c 24 10\n41 bd 10 00 00 00\neb 3f\n85 db\n41 0f 95 c7\n41 bd 10 00 00 00\neb 2c\n41 b7 01\n85 db\n75 25\n31 ff\nbe 14 a7 40 00\nba 05 00 00 00\ne8 8b f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 07 f9 ff ff\n48 8b 5c 24 10\n44 88 3d f3 d1 20 00\n48 63 05 84 d1 20 00\n89 e9\n29 c1\n48 83 fb 01\nba 01 00 00 00\nbe 01 00 00 00\n83 d6 00\n45 84 e4\n0f 45 f2\n39 f1\n0f 8c 28 02 00 00\n48 85 db\n48 8b 6c 24 20\n0f 84 a6 00 00 00\n48 c7 44 24 18 00 00 00 00\n48 8d 74 24 18\n48 89 df\ne8 0d 27 00 00\n85 c0\n79 42\ne8 64 f5 ff ff\n8b 00\n89 44 24 10\n31 ff\nbe 4f a7 40 00\nba 05 00 00 00\ne8 fd f5 ff ff\n49 89 c7\nbf 04 00 00 00\n48 89 de\ne8 ed 1e 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n8b 74 24 10\n4c 89 fa\ne8 67 f8 ff ff\n48 8b 44 24 18\n48 89 05 5b d1 20 00\n45 84 e4\n0f 84 b1 00 00 00\n48 85 db\n0f 84 a8 00 00 00\n31 ff\nbe 88 a7 40 00\nba 05 00 00 00\ne8 a8 f5 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 27 f8 ff ff\nbf 01 00 00 00\ne8 0d fa ff ff\n45 84 e4\n74 15\n48 c7 05 0d d1 20 00 00 00 00 00\n40 84 ed\n75 6c\ne9 cb 00 00 00\n8d 48 01\n89 0d 8a d0 20 00\n49 8b 3c c6\n48 89 3d ef d0 20 00\ne8 ba 01 00 00\n48 89 c7\ne8 02 27 00 00\n85 c0\n79 3d\ne8 99 f4 ff ff\n44 8b 38\n31 ff\nbe 74 a7 40 00\nba 05 00 00 00\ne8 35 f5 ff ff\n49 89 c4\n48 8b 3d bb d0 20 00\ne8 46 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 fe\n4c 89 e2\ne8 a1 f7 ff ff\n40 84 ed\n74 64\n8a 05 66 d0 20 00\n34 01\na8 01\n75 58\nbf 48 f3 60 00\ne8 26 24 00 00\n48 89 05 97 d0 20 00\n48 85 c0\n75 4d\ne8 35 f4 ff ff\n44 8b 38\n31 ff\nbe b6 a7 40 00\nba 05 00 00 00\ne8 d1 f4 ff ff\n48 89 c5\nbf 04 00 00 00\nbe bf bc 40 00\ne8 bf 1d 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 fe\n48 89 ea\ne8 3a f7 ff ff\neb 0b\n48 c7 05 45 d0 20 00 00 00 00 00\n48 63 05 b6 cf 20 00\n49 8d 3c c6\n41 83 cd 08\n44 89 ee\ne8 f6 00 00 00\n34 01\n0f b6 c0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 dd f8 ff ff\nbf 01 00 00 00\ne8 d3 f8 ff ff\n48 8b 3d 64 cf 20 00\n48 8b 0d ed ce 20 00\n48 c7 04 24 00 00 00 00\nbe 94 a6 40 00\nba c1 a6 40 00\n41 b8 cf a6 40 00\n41 b9 dd a6 40 00\n31 c0\ne8 70 2a 00 00\n31 ff\ne8 29 f7 ff ff\n31 ff\n39 e8\n7d 3a\nbe 36 a7 40 00\nba 05 00 00 00\ne8 04 f4 ff ff\n48 89 c3\n48 63 c5\n49 8b 7c c6 f8\ne8 14 1f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 73 f6 ff ff\nbf 01 00 00 00\ne8 59 f8 ff ff\nbe 26 a7 40 00\nba 05 00 00 00\ne8 ca f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 49 f6 ff ff\nbf 01 00 00 00\ne8 2f f8 ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p1657
S'.text:0000000000401f70\n.text:0000000000401f71\n.text:0000000000401f73\n.text:0000000000401f75\n.text:0000000000401f77\n.text:0000000000401f79\n.text:0000000000401f7a\n.text:0000000000401f7e\n.text:0000000000401f81\n.text:0000000000401f83\n.text:0000000000401f86\n.text:0000000000401f8b\n.text:0000000000401f90\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb3\n.text:0000000000401fb8\n.text:0000000000401fbd\n.text:0000000000401fc3\n.text:0000000000401fc8\n.text:0000000000401fcb\n.text:0000000000401fce\n.text:0000000000401fd0\n.text:0000000000401fe0\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401fee\n.text:0000000000401ff5\n.text:0000000000401ffc\n.text:0000000000401fff\n.text:0000000000402000\n.text:0000000000402005\n.text:000000000040200a\n.text:000000000040200d\n.text:000000000040200f\n.text:0000000000402012\n.text:0000000000402017\n.text:000000000040201a\n.text:0000000000402020\n.text:0000000000402026\n.text:000000000040202d\n.text:0000000000402033\n.text:0000000000402035\n.text:000000000040203b\n.text:000000000040203d\n.text:000000000040203f\n.text:0000000000402041\n.text:0000000000402048\n.text:000000000040204f\n.text:0000000000402052\n.text:0000000000402054\n.text:000000000040205b\n.text:0000000000402062\n.text:0000000000402065\n.text:0000000000402067\n.text:000000000040206c\n.text:000000000040206e\n.text:0000000000402071\n.text:0000000000402073\n.text:0000000000402079\n.text:000000000040207b\n.text:0000000000402082\n.text:0000000000402087\n.text:000000000040208e\n.text:0000000000402095\n.text:0000000000402098\n.text:000000000040209d\n.text:00000000004020a4\n.text:00000000004020a9\n.text:00000000004020ac\n.text:00000000004020b1\n.text:00000000004020b8\n.text:00000000004020bd\n.text:00000000004020bf\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020c8\n.text:00000000004020cb\n.text:00000000004020cd\n.text:00000000004020cf\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020de\n.text:00000000004020e1\n.text:00000000004020e6\n.text:00000000004020e8\n.text:00000000004020ea\n.text:00000000004020ed\n.text:00000000004020f2\n.text:00000000004020f7\n.text:00000000004020fd\n.text:00000000004020ff\n.text:0000000000402101\n.text:0000000000402105\n.text:000000000040210b\n.text:000000000040210d\n.text:0000000000402110\n.text:0000000000402112\n.text:0000000000402114\n.text:0000000000402116\n.text:000000000040211b\n.text:0000000000402120\n.text:0000000000402125\n.text:0000000000402128\n.text:000000000040212d\n.text:000000000040212f\n.text:0000000000402131\n.text:0000000000402134\n.text:0000000000402139\n.text:000000000040213e\n.text:0000000000402145\n.text:000000000040214c\n.text:000000000040214e\n.text:0000000000402150\n.text:0000000000402154\n.text:0000000000402159\n.text:000000000040215e\n.text:0000000000402161\n.text:0000000000402164\n.text:0000000000402167\n.text:0000000000402169\n.text:000000000040216f\n.text:0000000000402172\n.text:0000000000402177\n.text:000000000040217d\n.text:0000000000402186\n.text:000000000040218b\n.text:000000000040218e\n.text:0000000000402193\n.text:0000000000402195\n.text:0000000000402197\n.text:000000000040219c\n.text:000000000040219e\n.text:00000000004021a2\n.text:00000000004021a4\n.text:00000000004021a9\n.text:00000000004021ae\n.text:00000000004021b3\n.text:00000000004021b6\n.text:00000000004021bb\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021cb\n.text:00000000004021cd\n.text:00000000004021d1\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e5\n.text:00000000004021e8\n.text:00000000004021ee\n.text:00000000004021f1\n.text:00000000004021f7\n.text:00000000004021f9\n.text:00000000004021fe\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220b\n.text:000000000040220d\n.text:000000000040220f\n.text:0000000000402211\n.text:0000000000402214\n.text:0000000000402219\n.text:000000000040221e\n.text:0000000000402223\n.text:0000000000402226\n.text:0000000000402228\n.text:0000000000402233\n.text:0000000000402236\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402240\n.text:0000000000402246\n.text:000000000040224a\n.text:0000000000402251\n.text:0000000000402256\n.text:0000000000402259\n.text:000000000040225e\n.text:0000000000402260\n.text:0000000000402262\n.text:0000000000402267\n.text:000000000040226a\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402276\n.text:000000000040227b\n.text:000000000040227e\n.text:0000000000402285\n.text:000000000040228a\n.text:000000000040228d\n.text:0000000000402292\n.text:0000000000402294\n.text:0000000000402297\n.text:000000000040229a\n.text:000000000040229f\n.text:00000000004022a2\n.text:00000000004022a4\n.text:00000000004022aa\n.text:00000000004022ac\n.text:00000000004022ae\n.text:00000000004022b0\n.text:00000000004022b5\n.text:00000000004022ba\n.text:00000000004022c1\n.text:00000000004022c4\n.text:00000000004022c6\n.text:00000000004022cb\n.text:00000000004022ce\n.text:00000000004022d0\n.text:00000000004022d5\n.text:00000000004022da\n.text:00000000004022df\n.text:00000000004022e2\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022f1\n.text:00000000004022f4\n.text:00000000004022f9\n.text:00000000004022fb\n.text:00000000004022fe\n.text:0000000000402301\n.text:0000000000402306\n.text:0000000000402308\n.text:0000000000402313\n.text:000000000040231a\n.text:000000000040231e\n.text:0000000000402322\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232c\n.text:000000000040232f\n.text:0000000000402333\n.text:0000000000402334\n.text:0000000000402336\n.text:0000000000402338\n.text:000000000040233a\n.text:000000000040233c\n.text:000000000040233d\n.text:000000000040233e\n.text:0000000000402343\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234c\n.text:000000000040234e\n.text:0000000000402353\n.text:0000000000402358\n.text:000000000040235d\n.text:0000000000402364\n.text:000000000040236b\n.text:0000000000402373\n.text:0000000000402378\n.text:000000000040237d\n.text:0000000000402383\n.text:0000000000402389\n.text:000000000040238b\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402397\n.text:0000000000402399\n.text:000000000040239b\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023ac\n.text:00000000004023af\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023bc\n.text:00000000004023bf\n.text:00000000004023c1\n.text:00000000004023c3\n.text:00000000004023c5\n.text:00000000004023c8\n.text:00000000004023cd\n.text:00000000004023d2\n.text:00000000004023d7\n.text:00000000004023dc\n.text:00000000004023e1\n.text:00000000004023e6\n.text:00000000004023e9\n.text:00000000004023eb\n.text:00000000004023ed\n.text:00000000004023ef\n.text:00000000004023f2\n.text:00000000004023f7\n.text:00000000004023fc\n.text:0000000000402401\n'
p1658
tp1659
sS'xcharalloc'
p1660
(S'\n__stdcall xcharalloc(size_t n)\n'
p1661
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1662
S'JMP 0x00404f30\n'
p1663
S'e9 2b ff ff ff\n'
p1664
S'.text:0000000000405000\n'
p1665
tp1666
sS'c_isupper'
p1667
(S'\n__stdcall c_isupper()\n'
p1668
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1669
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1670
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1671
S'.text:0000000000407780\n.text:0000000000407783\n.text:0000000000407786\n.text:0000000000407789\n'
p1672
tp1673
sS'allocate_entry'
p1674
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1675
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1676
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00408702\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00401980\nADD RSP,0x8\nRET\n'
p1677
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 73 92 ff ff\n48 83 c4 08\nc3\n'
p1678
S'.text:00000000004086f0\n.text:00000000004086f4\n.text:00000000004086f7\n.text:00000000004086f9\n.text:00000000004086fd\n.text:0000000000408701\n.text:0000000000408702\n.text:0000000000408703\n.text:0000000000408708\n.text:000000000040870d\n.text:0000000000408711\n'
p1679
tp1680
sS'c_isalnum'
p1681
(S'\n__stdcall c_isalnum()\n'
p1682
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1683
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040769b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040769b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040769a\nXOR EAX,EAX\nRET\n'
p1684
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1685
S'.text:0000000000407680\n.text:0000000000407682\n.text:0000000000407685\n.text:0000000000407688\n.text:000000000040768a\n.text:0000000000407694\n.text:0000000000407698\n.text:000000000040769a\n.text:000000000040769b\n.text:000000000040769e\n.text:00000000004076a1\n.text:00000000004076a3\n.text:00000000004076a5\n'
p1686
tp1687
sS'freecon'
p1688
(S'\n__stdcall freecon(security_context_t con)\n'
p1689
V\u000avoid freecon(security_context_t con)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1690
S'RET\n'
p1691
S'c3\n'
p1692
S'.text:0000000000404830\n'
p1693
tp1694
sS'fts_safe_changedir'
p1695
(S'\n__stdcall fts_safe_changedir(FTS * sp, FTSENT * p, char * dir)\n'
p1696
V\u000aint fts_safe_changedir(FTS *sp,FTSENT *p,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  byte *dir_00;\u000a  int __fd_00;\u000a  bool bVar5;\u000a  stat sb;\u000a  stat local_c0;\u000a  \u000a  __fd_00 = (int)dir;\u000a  if (dir_00 == (byte *)0x0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    __fd = 0x2e - (uint)*dir_00;\u000a    if ((__fd == 0) && (__fd = 0x2e - (uint)dir_00[1], __fd == 0)) {\u000a      __fd = -(uint)dir_00[2];\u000a    }\u000a    bVar5 = __fd == 0;\u000a  }\u000a  uVar1 = sp->fts_options;\u000a  if ((uVar1 & 4) != 0) {\u000a    if (__fd_00 < 0) {\u000a      return 0;\u000a    }\u000a    if ((uVar1 & 0x200) == 0) {\u000a      return 0;\u000a    }\u000a    close(__fd_00);\u000a    return 0;\u000a  }\u000a  if (((__fd_00 < 0) && (bVar5)) && ((uVar1 & 0x200) != 0)) {\u000a    _Var2 = i_ring_empty(&sp->fts_fd_ring);\u000a    if (_Var2 == false) {\u000a      __fd = i_ring_pop(&sp->fts_fd_ring);\u000a      if (-1 < __fd) {\u000a        dir_00 = (byte *)0x0;\u000a        __fd_00 = __fd;\u000a      }\u000a    }\u000a  }\u000a  __fd = __fd_00;\u000a  if ((__fd_00 < 0) && (__fd = diropen(sp,(char *)dir_00), __fd < 0)) {\u000a    return -1;\u000a  }\u000a  if (((*(byte *)&sp->fts_options & 2) == 0) &&\u000a     (((dir_00 == (byte *)0x0 || (*dir_00 != 0x2e)) || ((dir_00[1] != 0x2e || (dir_00[2] != 0))))))\u000a  {\u000aLAB_004062a1:\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0) {\u000a      cwd_advance_fd(sp);\u000a      return 0;\u000a    }\u000a    iVar3 = fchdir(__fd);\u000a  }\u000a  else {\u000a    iVar3 = fstat(__fd,&local_c0);\u000a    if (iVar3 == 0) {\u000a      if ((p->fts_statp[0].st_dev == local_c0.st_dev) && (p->fts_statp[0].st_ino == local_c0.st_ino)\u000a         ) goto LAB_004062a1;\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 2;\u000a    }\u000a    iVar3 = -1;\u000a  }\u000a  if (__fd_00 < 0) {\u000a    piVar4 = __errno_location();\u000a    __fd_00 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = __fd_00;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1697
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R13D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x004061eb\nMOVZX EDX,byte ptr [RBX]\nMOV ECX,0x2e\nMOV EAX,0x2e\nSUB EAX,EDX\nJNZ 0x004061e3\nMOVZX EAX,byte ptr [RBX + 0x1]\nSUB ECX,EAX\nMOV EAX,ECX\nJNZ 0x004061e3\nMOVZX EAX,byte ptr [RBX + 0x2]\nNEG EAX\nTEST EAX,EAX\nSETZ R15B\nJMP 0x004061ee\nXOR R15D,R15D\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x004062b9\nTEST R13D,R13D\nJNS 0x0040623b\nMOV ECX,R15D\nXOR CL,0x1\nJNZ 0x0040623b\nAND EAX,0x200\nJZ 0x0040623b\nMOV R12,RBP\nLEA RBP,[R14 + 0x60]\nMOV RDI,RBP\nCALL 0x004089f0\nTEST AL,AL\nJNZ 0x00406238\nMOV RDI,RBP\nCALL 0x00408a40\nXOR ECX,ECX\nTEST EAX,EAX\nCMOVNS RBX,RCX\nCMOVNS R13D,EAX\nMOV R15B,0x1\nMOV RBP,R12\nTEST R13D,R13D\nMOV R12D,R13D\nJNS 0x0040625a\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405940\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x004062e8\nTEST byte ptr [R14 + 0x48],0x2\nJNZ 0x00406277\nTEST RBX,RBX\nJZ 0x004062a1\nCMP byte ptr [RBX],0x2e\nJNZ 0x004062a1\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x004062a1\nCMP byte ptr [RBX + 0x2],0x0\nJNZ 0x004062a1\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x004098a0\nTEST EAX,EAX\nJNZ 0x004062fa\nMOV RAX,qword ptr [RBP + 0x78]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x004062ef\nMOV RAX,qword ptr [0x80 + RBP]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x004062ef\nTEST byte ptr [R14 + 0x49],0x2\nJNZ 0x004062d1\nMOV EDI,R12D\nCALL 0x004019e0\nMOV EBX,EAX\nTEST R13D,R13D\nJNS 0x0040631c\nJMP 0x00406304\nXOR EBX,EBX\nTEST R13D,R13D\nJS 0x0040631c\nAND EAX,0x200\nJZ 0x0040631c\nMOV EDI,R13D\nCALL 0x004018a0\nJMP 0x0040631c\nXOR EDX,EDX\nTEST R15B,R15B\nSETZ DL\nMOV RDI,R14\nMOV ESI,R12D\nCALL 0x00406c80\nXOR EBX,EBX\nJMP 0x0040631c\nMOV EBX,0xffffffff\nJMP 0x0040631c\nCALL 0x00401700\nMOV dword ptr [RAX],0x2\nMOV EBX,0xffffffff\nTEST R13D,R13D\nJNS 0x0040631c\nCALL 0x00401700\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x004018a0\nMOV dword ptr [RBP],R14D\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1698
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n41 89 d5\n48 89 f5\n49 89 fe\n48 85 db\n74 29\n0f b6 13\nb9 2e 00 00 00\nb8 2e 00 00 00\n29 d0\n75 10\n0f b6 43 01\n29 c1\n89 c8\n75 06\n0f b6 43 02\nf7 d8\n85 c0\n41 0f 94 c7\neb 03\n45 31 ff\n41 8b 46 48\na8 04\n0f 85 bf 00 00 00\n45 85 ed\n79 3c\n44 89 f9\n80 f1 01\n75 34\n25 00 02 00 00\n74 2d\n49 89 ec\n49 8d 6e 60\n48 89 ef\ne8 d3 27 00 00\n84 c0\n75 17\n48 89 ef\ne8 17 28 00 00\n31 c9\n85 c0\n48 0f 49 d9\n44 0f 49 e8\n41 b7 01\n4c 89 e5\n45 85 ed\n45 89 ec\n79 17\n4c 89 f7\n48 89 de\ne8 f2 f6 ff ff\n41 89 c4\n45 85 e4\n0f 88 8e 00 00 00\n41 f6 46 48 02\n75 16\n48 85 db\n74 3b\n80 3b 2e\n75 36\n80 7b 01 2e\n75 30\n80 7b 02 00\n75 2a\n48 8d 74 24 08\n44 89 e7\ne8 1c 36 00 00\n85 c0\n75 72\n48 8b 45 78\n48 3b 44 24 08\n75 5c\n48 8b 85 80 00 00 00\n48 3b 44 24 10\n75 4e\n41 f6 46 49 02\n75 29\n44 89 e7\ne8 30 b7 ff ff\n89 c3\n45 85 ed\n79 65\neb 4b\n31 db\n45 85 ed\n78 5c\n25 00 02 00 00\n74 55\n44 89 ef\ne8 d1 b5 ff ff\neb 4b\n31 d2\n45 84 ff\n0f 94 c2\n4c 89 f7\n44 89 e6\ne8 9c 09 00 00\n31 db\neb 34\nbb ff ff ff ff\neb 2d\ne8 0c b4 ff ff\nc7 00 02 00 00 00\nbb ff ff ff ff\n45 85 ed\n79 18\ne8 f7 b3 ff ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 88 b5 ff ff\n44 89 75 00\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1699
S'.text:00000000004061a0\n.text:00000000004061a1\n.text:00000000004061a3\n.text:00000000004061a5\n.text:00000000004061a7\n.text:00000000004061a9\n.text:00000000004061aa\n.text:00000000004061b1\n.text:00000000004061b4\n.text:00000000004061b7\n.text:00000000004061ba\n.text:00000000004061bd\n.text:00000000004061c0\n.text:00000000004061c2\n.text:00000000004061c5\n.text:00000000004061ca\n.text:00000000004061cf\n.text:00000000004061d1\n.text:00000000004061d3\n.text:00000000004061d7\n.text:00000000004061d9\n.text:00000000004061db\n.text:00000000004061dd\n.text:00000000004061e1\n.text:00000000004061e3\n.text:00000000004061e5\n.text:00000000004061e9\n.text:00000000004061eb\n.text:00000000004061ee\n.text:00000000004061f2\n.text:00000000004061f4\n.text:00000000004061fa\n.text:00000000004061fd\n.text:00000000004061ff\n.text:0000000000406202\n.text:0000000000406205\n.text:0000000000406207\n.text:000000000040620c\n.text:000000000040620e\n.text:0000000000406211\n.text:0000000000406215\n.text:0000000000406218\n.text:000000000040621d\n.text:000000000040621f\n.text:0000000000406221\n.text:0000000000406224\n.text:0000000000406229\n.text:000000000040622b\n.text:000000000040622d\n.text:0000000000406231\n.text:0000000000406235\n.text:0000000000406238\n.text:000000000040623b\n.text:000000000040623e\n.text:0000000000406241\n.text:0000000000406243\n.text:0000000000406246\n.text:0000000000406249\n.text:000000000040624e\n.text:0000000000406251\n.text:0000000000406254\n.text:000000000040625a\n.text:000000000040625f\n.text:0000000000406261\n.text:0000000000406264\n.text:0000000000406266\n.text:0000000000406269\n.text:000000000040626b\n.text:000000000040626f\n.text:0000000000406271\n.text:0000000000406275\n.text:0000000000406277\n.text:000000000040627c\n.text:000000000040627f\n.text:0000000000406284\n.text:0000000000406286\n.text:0000000000406288\n.text:000000000040628c\n.text:0000000000406291\n.text:0000000000406293\n.text:000000000040629a\n.text:000000000040629f\n.text:00000000004062a1\n.text:00000000004062a6\n.text:00000000004062a8\n.text:00000000004062ab\n.text:00000000004062b0\n.text:00000000004062b2\n.text:00000000004062b5\n.text:00000000004062b7\n.text:00000000004062b9\n.text:00000000004062bb\n.text:00000000004062be\n.text:00000000004062c0\n.text:00000000004062c5\n.text:00000000004062c7\n.text:00000000004062ca\n.text:00000000004062cf\n.text:00000000004062d1\n.text:00000000004062d3\n.text:00000000004062d6\n.text:00000000004062d9\n.text:00000000004062dc\n.text:00000000004062df\n.text:00000000004062e4\n.text:00000000004062e6\n.text:00000000004062e8\n.text:00000000004062ed\n.text:00000000004062ef\n.text:00000000004062f4\n.text:00000000004062fa\n.text:00000000004062ff\n.text:0000000000406302\n.text:0000000000406304\n.text:0000000000406309\n.text:000000000040630c\n.text:0000000000406310\n.text:0000000000406313\n.text:0000000000406318\n.text:000000000040631c\n.text:000000000040631e\n.text:0000000000406325\n.text:0000000000406326\n.text:0000000000406328\n.text:000000000040632a\n.text:000000000040632c\n.text:000000000040632e\n.text:000000000040632f\n'
p1700
tp1701
sS'i_ring_init'
p1702
(S'\n__stdcall i_ring_init(I_ring * ir)\n'
p1703
V\u000avoid i_ring_init(I_ring *ir)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  \u000a  ir->ir_empty = true;\u000a  *(undefined8 *)&ir->ir_front = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    ir->ir_data[lVar1] = in_ESI;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 4);\u000a  ir->ir_default_val = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1704
S'MOV byte ptr [RDI + 0x1c],0x1\nMOV qword ptr [RDI + 0x14],0x0\nXOR EAX,EAX\nNOP\nMOV dword ptr [RDI + RAX*0x4],ESI\nINC RAX\nCMP RAX,0x4\nJNZ 0x004089e0\nMOV dword ptr [RDI + 0x10],ESI\nRET\n'
p1705
S'c6 47 1c 01\n48 c7 47 14 00 00 00 00\n31 c0\n66 90\n89 34 87\n48 ff c0\n48 83 f8 04\n75 f4\n89 77 10\nc3\n'
p1706
S'.text:00000000004089d0\n.text:00000000004089d4\n.text:00000000004089dc\n.text:00000000004089de\n.text:00000000004089e0\n.text:00000000004089e3\n.text:00000000004089e6\n.text:00000000004089ea\n.text:00000000004089ec\n.text:00000000004089ef\n'
p1707
tp1708
sS'__errno_location'
p1709
(S'\n__stdcall __errno_location()\n'
p1710
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060f030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1711
S'JMP qword ptr [0x0060f030]\n'
p1712
S'ff 25 2a d9 20 00\n'
p1713
S'.plt:0000000000401700\n'
p1714
tp1715
sS'x2nrealloc'
p1716
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1717
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1718
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404fcc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404ff9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404fea\nTEST RCX,RCX\nJNZ 0x00404fea\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404f70\nPUSH RAX\nCALL 0x004050c0\n'
p1719
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1720
S'.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa6\n.text:0000000000404fa9\n.text:0000000000404fab\n.text:0000000000404fb5\n.text:0000000000404fb7\n.text:0000000000404fba\n.text:0000000000404fbd\n.text:0000000000404fbf\n.text:0000000000404fc2\n.text:0000000000404fc5\n.text:0000000000404fca\n.text:0000000000404fcc\n.text:0000000000404fcf\n.text:0000000000404fd1\n.text:0000000000404fd6\n.text:0000000000404fd8\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe4\n.text:0000000000404fe7\n.text:0000000000404fea\n.text:0000000000404fed\n.text:0000000000404ff1\n.text:0000000000404ff4\n.text:0000000000404ff9\n.text:0000000000404ffa\n'
p1721
tp1722
sS'quotearg_n_options'
p1723
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1724
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1725
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401700\nTEST R12D,R12D\nJS 0x00403f91\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060f268]\nCMP dword ptr [0x0060f270],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403eab\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60f278\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404f70\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060f268],R15\nJNZ 0x00403e72\nMOVUPS XMM0,xmmword ptr [0x0060f278]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060f270]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401870\nMOV dword ptr [0x0060f270],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403000\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403f0d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403f7b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60f3c0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403f38\nCALL 0x004016e0\nMOV RDI,R15\nCALL 0x00405000\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403000\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004016f0\n'
p1726
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 01 d9 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 4e b4 20 00\n44 39 25 4f b4 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 78 f2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 18 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 03 b4 20 00\n75 0b\n0f 10 05 0a b4 20 00\n41 0f 11 07\n8b 05 f8 b3 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 dd d9 ff ff\n89 1d d7 b3 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 c0 f3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 a8 d7 ff ff\n4c 89 ff\ne8 c0 10 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 5a d7 ff ff\n'
p1727
S'.text:0000000000403de0\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403de7\n.text:0000000000403de9\n.text:0000000000403dea\n.text:0000000000403dee\n.text:0000000000403df1\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403dfa\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e08\n.text:0000000000403e0d\n.text:0000000000403e0f\n.text:0000000000403e13\n.text:0000000000403e1a\n.text:0000000000403e21\n.text:0000000000403e26\n.text:0000000000403e2b\n.text:0000000000403e30\n.text:0000000000403e32\n.text:0000000000403e37\n.text:0000000000403e3a\n.text:0000000000403e3d\n.text:0000000000403e43\n.text:0000000000403e45\n.text:0000000000403e48\n.text:0000000000403e4c\n.text:0000000000403e4f\n.text:0000000000403e53\n.text:0000000000403e58\n.text:0000000000403e5b\n.text:0000000000403e5e\n.text:0000000000403e65\n.text:0000000000403e67\n.text:0000000000403e6e\n.text:0000000000403e72\n.text:0000000000403e78\n.text:0000000000403e7b\n.text:0000000000403e7f\n.text:0000000000403e82\n.text:0000000000403e85\n.text:0000000000403e89\n.text:0000000000403e8b\n.text:0000000000403e8e\n.text:0000000000403e93\n.text:0000000000403e99\n.text:0000000000403e9c\n.text:0000000000403ea1\n.text:0000000000403ea6\n.text:0000000000403eab\n.text:0000000000403eae\n.text:0000000000403eb2\n.text:0000000000403eb6\n.text:0000000000403ebb\n.text:0000000000403ebf\n.text:0000000000403ec3\n.text:0000000000403ec7\n.text:0000000000403ecb\n.text:0000000000403ecf\n.text:0000000000403ed4\n.text:0000000000403ed7\n.text:0000000000403eda\n.text:0000000000403edd\n.text:0000000000403ee2\n.text:0000000000403ee5\n.text:0000000000403ee8\n.text:0000000000403eeb\n.text:0000000000403eec\n.text:0000000000403ef1\n.text:0000000000403ef5\n.text:0000000000403ef8\n.text:0000000000403efb\n.text:0000000000403efd\n.text:0000000000403f02\n.text:0000000000403f06\n.text:0000000000403f0b\n.text:0000000000403f0d\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1c\n.text:0000000000403f21\n.text:0000000000403f26\n.text:0000000000403f29\n.text:0000000000403f2e\n.text:0000000000403f31\n.text:0000000000403f33\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f40\n.text:0000000000403f43\n.text:0000000000403f46\n.text:0000000000403f4b\n.text:0000000000403f4e\n.text:0000000000403f52\n.text:0000000000403f55\n.text:0000000000403f58\n.text:0000000000403f5d\n.text:0000000000403f62\n.text:0000000000403f67\n.text:0000000000403f6a\n.text:0000000000403f6d\n.text:0000000000403f6e\n.text:0000000000403f73\n.text:0000000000403f77\n.text:0000000000403f7b\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f86\n.text:0000000000403f87\n.text:0000000000403f89\n.text:0000000000403f8b\n.text:0000000000403f8d\n.text:0000000000403f8f\n.text:0000000000403f90\n.text:0000000000403f91\n'
p1728
tp1729
sS'strcmp'
p1730
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1731
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060f140)();\u000a  return iVar1;\u000a}\u000a\u000a
p1732
S'JMP qword ptr [0x0060f140]\n'
p1733
S'ff 25 1a d8 20 00\n'
p1734
S'.plt:0000000000401920\n'
p1735
tp1736
sS'rotr64'
p1737
(S'\n__stdcall rotr64(uint64_t x)\n'
p1738
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1739
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1740
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1741
S'.text:0000000000409710\n.text:0000000000409712\n.text:0000000000409715\n.text:0000000000409718\n'
p1742
tp1743
sS'set_custom_quoting'
p1744
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1745
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1746
S'TEST RDI,RDI\nMOV EAX,0x60f380\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402f75\nTEST RDX,RDX\nJZ 0x00402f75\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004016f0\n'
p1747
S'48 85 ff\nb8 80 f3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 75 e7 ff ff\n'
p1748
S'.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f58\n.text:0000000000402f5c\n.text:0000000000402f62\n.text:0000000000402f65\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6c\n.text:0000000000402f70\n.text:0000000000402f74\n.text:0000000000402f75\n.text:0000000000402f76\n'
p1749
tp1750
sS'c_isalpha'
p1751
(S'\n__stdcall c_isalpha()\n'
p1752
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1753
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004076cb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1754
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1755
S'.text:00000000004076b0\n.text:00000000004076b3\n.text:00000000004076b6\n.text:00000000004076b8\n.text:00000000004076c2\n.text:00000000004076c4\n.text:00000000004076c7\n.text:00000000004076ca\n.text:00000000004076cb\n.text:00000000004076cd\n'
p1756
tp1757
sS'quotearg_custom_mem'
p1758
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1759
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1760
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004041f0\n'
p1761
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1762
S'.text:0000000000404280\n.text:0000000000404283\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428c\n.text:000000000040428e\n.text:0000000000404291\n'
p1763
tp1764
sS'hash_get_max_bucket_length'
p1765
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1766
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1767
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407a8d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00407a83\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00407a70\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00407a60\nRET\nXOR EAX,EAX\nRET\n'
p1768
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1769
S'.text:0000000000407a50\n.text:0000000000407a53\n.text:0000000000407a57\n.text:0000000000407a59\n.text:0000000000407a5d\n.text:0000000000407a5f\n.text:0000000000407a60\n.text:0000000000407a64\n.text:0000000000407a66\n.text:0000000000407a68\n.text:0000000000407a6b\n.text:0000000000407a70\n.text:0000000000407a74\n.text:0000000000407a77\n.text:0000000000407a7a\n.text:0000000000407a7c\n.text:0000000000407a7f\n.text:0000000000407a83\n.text:0000000000407a87\n.text:0000000000407a8a\n.text:0000000000407a8c\n.text:0000000000407a8d\n.text:0000000000407a8f\n'
p1770
tp1771
sS'chdir'
p1772
(S'\n__stdcall chdir(char * __path)\n'
p1773
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chdir_0060f0b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1774
S'JMP qword ptr [0x0060f0b0]\n'
p1775
S'ff 25 aa d8 20 00\n'
p1776
S'.plt:0000000000401800\n'
p1777
tp1778
sS'setfscreatecon'
p1779
(S'\n__stdcall setfscreatecon(security_context_t con)\n'
p1780
V\u000aint setfscreatecon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1781
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1782
S'50\ne8 9a ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1783
S'.text:0000000000404860\n.text:0000000000404861\n.text:0000000000404866\n.text:000000000040486c\n.text:0000000000404871\n.text:0000000000404872\n'
p1784
tp1785
sS'rpl_calloc'
p1786
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1787
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060f138)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1788
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040518b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405190\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405190\nPUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401910\n'
p1789
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 7f c5 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 75 c7 ff ff\n'
p1790
S'.text:0000000000405150\n.text:0000000000405153\n.text:0000000000405158\n.text:000000000040515a\n.text:000000000040515d\n.text:0000000000405162\n.text:0000000000405164\n.text:0000000000405167\n.text:000000000040516b\n.text:000000000040516d\n.text:0000000000405170\n.text:0000000000405173\n.text:0000000000405176\n.text:0000000000405179\n.text:000000000040517b\n.text:000000000040517c\n.text:0000000000405181\n.text:0000000000405187\n.text:0000000000405189\n.text:000000000040518a\n.text:000000000040518b\n.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405196\n'
p1791
tp1792
sS'memset'
p1793
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1794
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060f0e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1795
S'JMP qword ptr [0x0060f0e8]\n'
p1796
S'ff 25 72 d8 20 00\n'
p1797
S'.plt:0000000000401870\n'
p1798
tp1799
sS'get_root_dev_ino'
p1800
(S'\n__stdcall get_root_dev_ino(dev_ino * root_d_i)\n'
p1801
V\u000adev_ino * get_root_dev_ino(dev_ino *root_d_i)\u000a\u000a{\u000a  int iVar1;\u000a  stat local_98;\u000a  \u000a  iVar1 = lstat("/",&local_98);\u000a  if (iVar1 == 0) {\u000a    root_d_i->st_ino = local_98.st_ino;\u000a    root_d_i->st_dev = local_98.st_dev;\u000a  }\u000a  else {\u000a    root_d_i = (dev_ino *)0x0;\u000a  }\u000a  return root_d_i;\u000a}\u000a\u000a
p1802
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nMOV RSI,RSP\nMOV EDI,0x40bcbf\nCALL 0x004098b0\nTEST EAX,EAX\nJZ 0x00404700\nXOR EBX,EBX\nJMP 0x00404710\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,RBX\nADD RSP,0x90\nPOP RBX\nRET\n'
p1803
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 89 e6\nbf bf bc 40 00\ne8 b8 51 00 00\n85 c0\n74 04\n31 db\neb 10\n48 8b 44 24 08\n48 89 03\n48 8b 04 24\n48 89 43 08\n48 89 d8\n48 81 c4 90 00 00 00\n5b\nc3\n'
p1804
S'.text:00000000004046e0\n.text:00000000004046e1\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046ee\n.text:00000000004046f3\n.text:00000000004046f8\n.text:00000000004046fa\n.text:00000000004046fc\n.text:00000000004046fe\n.text:0000000000404700\n.text:0000000000404705\n.text:0000000000404708\n.text:000000000040470c\n.text:0000000000404710\n.text:0000000000404713\n.text:000000000040471a\n.text:000000000040471b\n'
p1805
tp1806
sS'getc_unlocked'
p1807
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1808
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060f058)();\u000a  return iVar1;\u000a}\u000a\u000a
p1809
S'JMP qword ptr [0x0060f058]\n'
p1810
S'ff 25 02 d9 20 00\n'
p1811
S'.plt:0000000000401750\n'
p1812
tp1813
sS'memmove'
p1814
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1815
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060f1c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1816
S'JMP qword ptr [0x0060f1c8]\n'
p1817
S'ff 25 92 d7 20 00\n'
p1818
S'.plt:0000000000401a30\n'
p1819
tp1820
sS'c_isascii'
p1821
(S'\n__stdcall c_isascii()\n'
p1822
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1823
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1824
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1825
S'.text:00000000004076d0\n.text:00000000004076d6\n.text:00000000004076d9\n'
p1826
tp1827
sS'hash_insert_if_absent'
p1828
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1829
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040b9ac <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_0040b9a8 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_0040b9a8) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040861d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040861d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1830
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040861d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408630\nTEST RAX,RAX\nJZ 0x00408491\nTEST RBX,RBX\nJZ 0x00408610\nMOV qword ptr [RBX],RAX\nJMP 0x00408610\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x004084a5\nCVTSI2SS XMM0,RCX\nJMP 0x004084ba\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x004084ca\nCVTSI2SS XMM1,RAX\nJMP 0x004084df\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x004085c9\nMOV RDI,R15\nCALL 0x00407f60\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00408509\nCVTSI2SS XMM2,RCX\nJMP 0x0040851e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00408536\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040854e\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x004085c9\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00408569\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040b9ac]\nJNC 0x00408610\nMOVSS XMM1,dword ptr [0x0040b9a8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00408200\nTEST AL,AL\nJZ 0x00408610\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408630\nTEST RAX,RAX\nJNZ 0x0040861d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x004085f9\nMOV RDI,R15\nCALL 0x004086f0\nTEST RAX,RAX\nJZ 0x0040860b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00408604\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00408610\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004016f0\n'
p1831
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 37 34 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d 25 34 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 ce 90 ff ff\n'
p1832
S'.text:0000000000408450\n.text:0000000000408451\n.text:0000000000408453\n.text:0000000000408455\n.text:0000000000408456\n.text:0000000000408457\n.text:000000000040845a\n.text:000000000040845d\n.text:0000000000408460\n.text:0000000000408463\n.text:0000000000408469\n.text:000000000040846c\n.text:000000000040846e\n.text:0000000000408470\n.text:0000000000408473\n.text:0000000000408476\n.text:000000000040847b\n.text:000000000040847e\n.text:0000000000408480\n.text:0000000000408483\n.text:0000000000408489\n.text:000000000040848c\n.text:0000000000408491\n.text:0000000000408495\n.text:0000000000408499\n.text:000000000040849c\n.text:000000000040849e\n.text:00000000004084a3\n.text:00000000004084a5\n.text:00000000004084a8\n.text:00000000004084ab\n.text:00000000004084ae\n.text:00000000004084b1\n.text:00000000004084b6\n.text:00000000004084ba\n.text:00000000004084be\n.text:00000000004084c1\n.text:00000000004084c3\n.text:00000000004084c8\n.text:00000000004084ca\n.text:00000000004084cd\n.text:00000000004084d0\n.text:00000000004084d3\n.text:00000000004084d6\n.text:00000000004084db\n.text:00000000004084df\n.text:00000000004084e4\n.text:00000000004084e7\n.text:00000000004084ed\n.text:00000000004084f0\n.text:00000000004084f5\n.text:00000000004084f9\n.text:00000000004084fd\n.text:0000000000408500\n.text:0000000000408502\n.text:0000000000408507\n.text:0000000000408509\n.text:000000000040850c\n.text:000000000040850f\n.text:0000000000408512\n.text:0000000000408515\n.text:000000000040851a\n.text:000000000040851e\n.text:0000000000408522\n.text:0000000000408527\n.text:000000000040852a\n.text:000000000040852c\n.text:000000000040852f\n.text:0000000000408534\n.text:0000000000408536\n.text:0000000000408539\n.text:000000000040853c\n.text:000000000040853f\n.text:0000000000408542\n.text:0000000000408545\n.text:000000000040854a\n.text:000000000040854e\n.text:0000000000408551\n.text:0000000000408555\n.text:0000000000408558\n.text:000000000040855a\n.text:000000000040855e\n.text:0000000000408563\n.text:0000000000408565\n.text:0000000000408569\n.text:000000000040856e\n.text:0000000000408575\n.text:000000000040857b\n.text:0000000000408583\n.text:0000000000408586\n.text:000000000040858a\n.text:000000000040858f\n.text:0000000000408599\n.text:000000000040859c\n.text:00000000004085a1\n.text:00000000004085a4\n.text:00000000004085a8\n.text:00000000004085ab\n.text:00000000004085b0\n.text:00000000004085b2\n.text:00000000004085b4\n.text:00000000004085b7\n.text:00000000004085b9\n.text:00000000004085bc\n.text:00000000004085bf\n.text:00000000004085c4\n.text:00000000004085c7\n.text:00000000004085c9\n.text:00000000004085cd\n.text:00000000004085d1\n.text:00000000004085d3\n.text:00000000004085d6\n.text:00000000004085db\n.text:00000000004085de\n.text:00000000004085e0\n.text:00000000004085e3\n.text:00000000004085e7\n.text:00000000004085eb\n.text:00000000004085ef\n.text:00000000004085f3\n.text:00000000004085f7\n.text:00000000004085f9\n.text:00000000004085fc\n.text:0000000000408600\n.text:0000000000408604\n.text:0000000000408609\n.text:000000000040860b\n.text:0000000000408610\n.text:0000000000408612\n.text:0000000000408616\n.text:0000000000408617\n.text:0000000000408619\n.text:000000000040861b\n.text:000000000040861c\n.text:000000000040861d\n'
p1833
tp1834
sS'dup_safer'
p1835
(S'\n__stdcall dup_safer()\n'
p1836
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1837
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00409370\n'
p1838
S'31 f6\nba 03 00 00 00\n31 c0\ne9 e2 03 00 00\n'
p1839
S'.text:0000000000408f80\n.text:0000000000408f82\n.text:0000000000408f87\n.text:0000000000408f89\n'
p1840
tp1841
sS'cdb_advance_fd'
p1842
(S'\n__stdcall cdb_advance_fd(cd_buf * cdb, char * dir)\n'
p1843
V\u000aint cdb_advance_fd(cd_buf *cdb,char *dir)\u000a\u000a{\u000a  cd_buf cVar1;\u000a  int iVar2;\u000a  \u000a  iVar2 = 0;\u000a  cVar1 = (cd_buf)openat((int)*cdb,dir,0x10900);\u000a  if ((int)cVar1 < 0) {\u000a    iVar2 = -1;\u000a  }\u000a  else {\u000a    cdb_free(cdb);\u000a    *cdb = cVar1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1844
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nXOR R14D,R14D\nMOV EDX,0x10900\nXOR EAX,EAX\nCALL 0x004017f0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040927a\nMOV RDI,RBX\nCALL 0x004092c0\nMOV dword ptr [RBX],EBP\nJMP 0x00409280\nMOV R14D,0xffffffff\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1845
S'55\n41 56\n53\n48 89 fb\n8b 3b\n45 31 f6\nba 00 09 01 00\n31 c0\ne8 88 85 ff ff\n89 c5\n85 ed\n78 0c\n48 89 df\ne8 4a 00 00 00\n89 2b\neb 06\n41 be ff ff ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p1846
S'.text:0000000000409250\n.text:0000000000409251\n.text:0000000000409253\n.text:0000000000409254\n.text:0000000000409257\n.text:0000000000409259\n.text:000000000040925c\n.text:0000000000409261\n.text:0000000000409263\n.text:0000000000409268\n.text:000000000040926a\n.text:000000000040926c\n.text:000000000040926e\n.text:0000000000409271\n.text:0000000000409276\n.text:0000000000409278\n.text:000000000040927a\n.text:0000000000409280\n.text:0000000000409283\n.text:0000000000409284\n.text:0000000000409286\n.text:0000000000409287\n'
p1847
tp1848
sS'dirfd'
p1849
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p1850
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0060f148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1851
S'JMP qword ptr [0x0060f148]\n'
p1852
S'ff 25 12 d8 20 00\n'
p1853
S'.plt:0000000000401930\n'
p1854
tp1855
sS'diropen'
p1856
(S'\n__stdcall diropen(FTS * sp, char * dir)\n'
p1857
V\u000aint diropen(FTS *sp,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  uVar1 = sp->fts_options;\u000a  uVar3 = (uVar1 & 0x10) * 0x2000;\u000a  uVar4 = (uVar1 & 0x800) * 0x80 + 0x10900 + uVar3;\u000a  if ((uVar1 & 0x200) == 0) {\u000a    iVar2 = open_safer(dir,(ulong)uVar4);\u000a  }\u000a  else {\u000a    iVar2 = openat_safer((char *)(ulong)(uint)sp->fts_cwd_fd,dir,(ulong)uVar4,(ulong)uVar3);\u000a  }\u000a  if (-1 < iVar2) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1858
S'PUSH RBX\nMOV EAX,dword ptr [RDI + 0x48]\nMOV ECX,EAX\nAND ECX,0x10\nSHL ECX,0xd\nMOV EDX,EAX\nSHL EDX,0x7\nAND EDX,0x40000\nLEA EDX,[0x10900 + RDX + RCX*0x1]\nTEST AH,0x2\nJNZ 0x00405971\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nCALL 0x00407950\nJMP 0x0040597b\nMOV EDI,dword ptr [RDI + 0x2c]\nXOR EAX,EAX\nCALL 0x00408e30\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x0040598d\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x004077d0\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1859
S'53\n8b 47 48\n89 c1\n83 e1 10\nc1 e1 0d\n89 c2\nc1 e2 07\n81 e2 00 00 04 00\n8d 94 0a 00 09 01 00\nf6 c4 02\n75 0e\n31 c0\n48 89 f7\n89 d6\ne8 e1 1f 00 00\neb 0a\n8b 7f 2c\n31 c0\ne8 b5 34 00 00\n89 c3\n85 db\n78 0c\nbe 01 00 00 00\n89 df\ne8 43 1e 00 00\n89 d8\n5b\nc3\n'
p1860
S'.text:0000000000405940\n.text:0000000000405941\n.text:0000000000405944\n.text:0000000000405946\n.text:0000000000405949\n.text:000000000040594c\n.text:000000000040594e\n.text:0000000000405951\n.text:0000000000405957\n.text:000000000040595e\n.text:0000000000405961\n.text:0000000000405963\n.text:0000000000405965\n.text:0000000000405968\n.text:000000000040596a\n.text:000000000040596f\n.text:0000000000405971\n.text:0000000000405974\n.text:0000000000405976\n.text:000000000040597b\n.text:000000000040597d\n.text:000000000040597f\n.text:0000000000405981\n.text:0000000000405986\n.text:0000000000405988\n.text:000000000040598d\n.text:000000000040598f\n.text:0000000000405990\n'
p1861
tp1862
sS'rotr32'
p1863
(S'\n__stdcall rotr32()\n'
p1864
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1865
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1866
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1867
S'.text:0000000000409730\n.text:0000000000409732\n.text:0000000000409734\n.text:0000000000409736\n'
p1868
tp1869
sS'__ctype_b_loc'
p1870
(S'\n__stdcall __ctype_b_loc()\n'
p1871
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060f238)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1872
S'JMP qword ptr [0x0060f238]\n'
p1873
S'ff 25 22 d7 20 00\n'
p1874
S'.plt:0000000000401b10\n'
p1875
tp1876
sS'quotearg'
p1877
(S'\n__stdcall quotearg(char * arg)\n'
p1878
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1879
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403dd0\n'
p1880
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1881
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb5\n.text:0000000000403fb8\n'
p1882
tp1883
sS'_start'
p1884
(S'\n__stdcall _start()\n'
p1885
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060eff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1886
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x409850\nMOV RCX,0x4097e0\nMOV RDI,0x401f70\nCALL qword ptr [0x0060eff0]\nHLT\n'
p1887
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 50 98 40 00\n48 c7 c1 e0 97 40 00\n48 c7 c7 70 1f 40 00\nff 15 96 d4 20 00\nf4\n'
p1888
S'.text:0000000000401b30\n.text:0000000000401b32\n.text:0000000000401b35\n.text:0000000000401b36\n.text:0000000000401b39\n.text:0000000000401b3d\n.text:0000000000401b3e\n.text:0000000000401b3f\n.text:0000000000401b46\n.text:0000000000401b4d\n.text:0000000000401b54\n.text:0000000000401b5a\n'
p1889
tp1890
sS'c_iscntrl'
p1891
(S'\n__stdcall c_iscntrl()\n'
p1892
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1893
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004076f8\nRET\nCMP EDI,0x7f\nJZ 0x004076f7\nXOR EAX,EAX\nRET\n'
p1894
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1895
S'.text:00000000004076f0\n.text:00000000004076f2\n.text:00000000004076f5\n.text:00000000004076f7\n.text:00000000004076f8\n.text:00000000004076fb\n.text:00000000004076fd\n.text:00000000004076ff\n'
p1896
tp1897
sS'lgetfilecon'
p1898
(S'\n__stdcall lgetfilecon(char * file, security_context_t * con)\n'
p1899
V\u000aint lgetfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p1900
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p1901
S'50\ne8 3a ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p1902
S'.text:00000000004048c0\n.text:00000000004048c1\n.text:00000000004048c6\n.text:00000000004048cc\n.text:00000000004048d1\n.text:00000000004048d2\n'
p1903
tp1904
sS'hash_reset_tuning'
p1905
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1906
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1907
S'MOV EAX,dword ptr [0x0040ba2c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0040ba1c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1908
S'8b 05 f6 3b 00 00\n89 47 10\n0f 10 05 dc 3b 00 00\n0f 11 07\nc3\n'
p1909
S'.text:0000000000407e30\n.text:0000000000407e36\n.text:0000000000407e39\n.text:0000000000407e40\n.text:0000000000407e43\n'
p1910
tp1911
sS'c_isblank'
p1912
(S'\n__stdcall c_isblank()\n'
p1913
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1914
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1915
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1916
S'.text:00000000004076e0\n.text:00000000004076e3\n.text:00000000004076e6\n.text:00000000004076e9\n.text:00000000004076ec\n.text:00000000004076ee\n'
p1917
tp1918
sS'atexit'
p1919
(S'\n__stdcall atexit(__func * __func)\n'
p1920
V\u000a/* WARNING: Removing unreachable block (ram,0x00409880) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060f208)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1921
S'MOV RAX,0x60f250\nTEST RAX,RAX\nJZ 0x00409880\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401ab0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401ab0\n'
p1922
S'48 c7 c0 50 f2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 3a 82 ff ff\n31 d2\n31 f6\ne9 27 82 ff ff\n'
p1923
S'.text:0000000000409860\n.text:0000000000409867\n.text:000000000040986a\n.text:000000000040986c\n.text:000000000040986f\n.text:0000000000409871\n.text:0000000000409880\n.text:0000000000409882\n.text:0000000000409884\n'
p1924
tp1925
sS'fdopen'
p1926
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1927
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060f1b0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1928
S'JMP qword ptr [0x0060f1b0]\n'
p1929
S'ff 25 aa d7 20 00\n'
p1930
S'.plt:0000000000401a00\n'
p1931
tp1932
sS'hash_find_entry'
p1933
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1934
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1935
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x00407c40\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x004086b5\nCMP RSI,RBP\nJZ 0x00408667\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00408680\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x004086dd\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x004086ba\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x004086d5\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x004086b5\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x004086c3\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004086c3\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00408690\nJMP 0x004086dd\nXOR R14D,R14D\nJMP 0x004086dd\nMOV qword ptr [RBX],0x0\nJMP 0x004086dd\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x004086dd\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x004089b0\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1936
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1937
S'.text:0000000000408630\n.text:0000000000408631\n.text:0000000000408633\n.text:0000000000408635\n.text:0000000000408637\n.text:0000000000408638\n.text:000000000040863b\n.text:000000000040863e\n.text:0000000000408641\n.text:0000000000408644\n.text:0000000000408649\n.text:000000000040864c\n.text:000000000040864f\n.text:0000000000408652\n.text:0000000000408655\n.text:0000000000408657\n.text:000000000040865a\n.text:000000000040865c\n.text:000000000040865f\n.text:0000000000408663\n.text:0000000000408665\n.text:0000000000408667\n.text:000000000040866a\n.text:000000000040866d\n.text:000000000040866f\n.text:0000000000408673\n.text:0000000000408676\n.text:0000000000408678\n.text:000000000040867b\n.text:000000000040867e\n.text:0000000000408680\n.text:0000000000408684\n.text:0000000000408687\n.text:0000000000408689\n.text:000000000040868d\n.text:0000000000408690\n.text:0000000000408693\n.text:0000000000408696\n.text:0000000000408698\n.text:000000000040869b\n.text:000000000040869f\n.text:00000000004086a1\n.text:00000000004086a3\n.text:00000000004086a6\n.text:00000000004086aa\n.text:00000000004086ae\n.text:00000000004086b1\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086b8\n.text:00000000004086ba\n.text:00000000004086c1\n.text:00000000004086c3\n.text:00000000004086c6\n.text:00000000004086c9\n.text:00000000004086cc\n.text:00000000004086ce\n.text:00000000004086d2\n.text:00000000004086d5\n.text:00000000004086d8\n.text:00000000004086dd\n.text:00000000004086e0\n.text:00000000004086e1\n.text:00000000004086e3\n.text:00000000004086e5\n.text:00000000004086e7\n.text:00000000004086e8\n'
p1938
tp1939
sS'error'
p1940
(S'\n__stdcall error()\n'
p1941
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060f1d0)();\u000a  return;\u000a}\u000a\u000a
p1942
S'JMP qword ptr [0x0060f1d0]\n'
p1943
S'ff 25 8a d7 20 00\n'
p1944
S'.plt:0000000000401a40\n'
p1945
tp1946
sS'raw_comparator'
p1947
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1948
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1949
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1950
S'48 39 f7\n0f 94 c0\nc3\n'
p1951
S'.text:0000000000407f50\n.text:0000000000407f53\n.text:0000000000407f56\n'
p1952
tp1953
sS'strcaseeq6'
p1954
(S'\n__stdcall strcaseeq6()\n'
p1955
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1956
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404672\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404679\nJMP 0x0040468e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040468e\nTEST BPL,BPL\nJZ 0x00404689\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004046a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1957
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 31 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1958
S'.text:0000000000404650\n.text:0000000000404651\n.text:0000000000404652\n.text:0000000000404653\n.text:0000000000404655\n.text:0000000000404658\n.text:000000000040465a\n.text:000000000040465f\n.text:0000000000404663\n.text:0000000000404665\n.text:0000000000404667\n.text:000000000040466a\n.text:000000000040466c\n.text:000000000040466e\n.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404677\n.text:0000000000404679\n.text:000000000040467c\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404685\n.text:0000000000404686\n.text:0000000000404687\n.text:0000000000404689\n.text:000000000040468e\n.text:0000000000404692\n.text:0000000000404693\n.text:0000000000404694\n'
p1959
tp1960
sS'strcaseeq5'
p1961
(S'\n__stdcall strcaseeq5()\n'
p1962
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1963
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404626\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040462d\nJMP 0x00404644\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404644\nTEST BPL,BPL\nJZ 0x0040463f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404650\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1964
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 31 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1965
S'.text:0000000000404600\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404604\n.text:0000000000404607\n.text:0000000000404609\n.text:000000000040460c\n.text:000000000040460e\n.text:0000000000404613\n.text:0000000000404617\n.text:0000000000404619\n.text:000000000040461b\n.text:000000000040461e\n.text:0000000000404620\n.text:0000000000404622\n.text:0000000000404624\n.text:0000000000404626\n.text:0000000000404628\n.text:000000000040462b\n.text:000000000040462d\n.text:0000000000404630\n.text:0000000000404632\n.text:0000000000404636\n.text:0000000000404639\n.text:000000000040463a\n.text:000000000040463c\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404644\n.text:0000000000404645\n.text:0000000000404647\n.text:0000000000404648\n'
p1966
tp1967
sS'context_role_get'
p1968
(S'\n__stdcall context_role_get()\n'
p1969
V\u000achar * context_role_get(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1970
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1971
S'50\ne8 0a cf ff ff\nc7 00 5f 00 00 00\n31 c0\n59\nc3\n'
p1972
S'.text:00000000004047f0\n.text:00000000004047f1\n.text:00000000004047f6\n.text:00000000004047fc\n.text:00000000004047fe\n.text:00000000004047ff\n'
p1973
tp1974
sS'strcaseeq7'
p1975
(S'\n__stdcall strcaseeq7()\n'
p1976
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1977
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004046c2\nTEST ECX,0xffffffdf\nJNZ 0x004046c6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004046ca\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1978
S'53\n48 89 fb\n31 ff\ne8 d5 30 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1979
S'.text:00000000004046a0\n.text:00000000004046a1\n.text:00000000004046a4\n.text:00000000004046a6\n.text:00000000004046ab\n.text:00000000004046af\n.text:00000000004046b1\n.text:00000000004046b3\n.text:00000000004046b9\n.text:00000000004046bb\n.text:00000000004046c0\n.text:00000000004046c1\n.text:00000000004046c2\n.text:00000000004046c4\n.text:00000000004046c6\n.text:00000000004046c8\n.text:00000000004046c9\n.text:00000000004046ca\n.text:00000000004046cf\n.text:00000000004046d0\n'
p1980
tp1981
sS'cycle_check_init'
p1982
(S'\n__stdcall cycle_check_init(cycle_check_state * state)\n'
p1983
V\u000avoid cycle_check_init(cycle_check_state *state)\u000a\u000a{\u000a  state->chdir_counter = 0;\u000a  state->magic = 0x95f616;\u000a  return;\u000a}\u000a\u000a
p1984
S'MOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x95f616\nRET\n'
p1985
S'48 c7 47 10 00 00 00 00\nc7 47 18 16 f6 95 00\nc3\n'
p1986
S'.text:00000000004078b0\n.text:00000000004078b8\n.text:00000000004078bf\n'
p1987
tp1988
sS'link_count_optimize_ok'
p1989
(S'\n__stdcall link_count_optimize_ok(FTSENT * p)\n'
p1990
V\u000a_Bool link_count_optimize_ok(FTSENT *p)\u000a\u000a{\u000a  FTS *pFVar1;\u000a  _Bool _Var2;\u000a  void *pvVar3;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var4;\u000a  hash_table *table;\u000a  __dev_t local_38 [2];\u000a  \u000a  pFVar1 = p->fts_fts;\u000a  if ((*(byte *)((long)&pFVar1->fts_options + 1) & 2) == 0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    table = pFVar1->fts_leaf_optimization_works_ht;\u000a    if (table == (hash_table *)0x0) {\u000a      table = (hash_table *)hash_initialize(0xd,(Hash_tuning *)0x0,LCO_hash,LCO_compare,free);\u000a      pFVar1->fts_leaf_optimization_works_ht = table;\u000a      if (table == (hash_table *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    local_38[0] = p->fts_statp[0].st_dev;\u000a    pvVar3 = hash_lookup((Hash_table *)table,local_38);\u000a    if (pvVar3 == (void *)0x0) {\u000a      entry = (__dev_t *)malloc(0x10);\u000a      if (entry == (__dev_t *)0x0) {\u000a        _Var2 = false;\u000a      }\u000a      else {\u000a        _Var2 = leaf_optimization_applies();\u000a        *(_Bool *)(entry + 1) = _Var2;\u000a        *entry = p->fts_statp[0].st_dev;\u000a        p_Var4 = (__dev_t *)hash_insert((Hash_table *)table,entry);\u000a        if (p_Var4 == (__dev_t *)0x0) {\u000a          free(entry);\u000a          _Var2 = false;\u000a        }\u000a        else {\u000a          if (p_Var4 != entry) {\u000a                    /* WARNING: Subroutine does not return */\u000a            abort();\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = (_Bool)(*(char *)((long)pvVar3 + 8) != 0);\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p1991
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x50]\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x00406b1f\nXOR R15D,R15D\nJMP 0x00406b73\nMOV R13,qword ptr [RBX + 0x50]\nTEST R13,R13\nJNZ 0x00406b53\nXOR R15D,R15D\nMOV EDI,0xd\nXOR ESI,ESI\nMOV EDX,0x406e60\nMOV ECX,0x406e70\nMOV R8D,0x4016e0\nCALL 0x00407e50\nMOV R13,RAX\nMOV qword ptr [RBX + 0x50],R13\nTEST R13,R13\nJZ 0x00406b73\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nMOV RDI,R13\nCALL 0x00407be0\nTEST RAX,RAX\nJZ 0x00406b84\nCMP byte ptr [RAX + 0x8],0x0\nSETNZ R15B\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x10\nCALL 0x00401980\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00406bc8\nMOV EDI,dword ptr [RBX + 0x2c]\nCALL 0x00406e80\nMOV R15B,AL\nMOV byte ptr [R12 + 0x8],R15B\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [R12],RAX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00408720\nTEST RAX,RAX\nJZ 0x00406bcd\nCMP RAX,R12\nJZ 0x00406b73\nCALL 0x004016f0\nXOR R15D,R15D\nJMP 0x00406b73\nMOV RDI,R12\nCALL 0x004016e0\nXOR R15D,R15D\nJMP 0x00406b73\n'
p1992
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n49 8b 5e 50\nf6 43 49 02\n75 05\n45 31 ff\neb 54\n4c 8b 6b 50\n4d 85 ed\n75 2b\n45 31 ff\nbf 0d 00 00 00\n31 f6\nba 60 6e 40 00\nb9 70 6e 40 00\n41 b8 e0 16 40 00\ne8 09 13 00 00\n49 89 c5\n4c 89 6b 50\n4d 85 ed\n74 20\n49 8b 46 78\n48 89 04 24\n48 89 e6\n4c 89 ef\ne8 7a 10 00 00\n48 85 c0\n74 19\n80 78 08 00\n41 0f 95 c7\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 10 00 00 00\ne8 f2 ad ff ff\n49 89 c4\n4d 85 e4\n74 32\n8b 7b 2c\ne8 e2 02 00 00\n41 88 c7\n45 88 7c 24 08\n49 8b 46 78\n49 89 04 24\n4c 89 ef\n4c 89 e6\ne8 67 1b 00 00\n48 85 c0\n74 0f\n4c 39 e0\n74 b0\ne8 28 ab ff ff\n45 31 ff\neb a6\n4c 89 e7\ne8 0b ab ff ff\n45 31 ff\neb 99\n'
p1993
S'.text:0000000000406b00\n.text:0000000000406b02\n.text:0000000000406b04\n.text:0000000000406b06\n.text:0000000000406b08\n.text:0000000000406b09\n.text:0000000000406b0d\n.text:0000000000406b10\n.text:0000000000406b14\n.text:0000000000406b18\n.text:0000000000406b1a\n.text:0000000000406b1d\n.text:0000000000406b1f\n.text:0000000000406b23\n.text:0000000000406b26\n.text:0000000000406b28\n.text:0000000000406b2b\n.text:0000000000406b30\n.text:0000000000406b32\n.text:0000000000406b37\n.text:0000000000406b3c\n.text:0000000000406b42\n.text:0000000000406b47\n.text:0000000000406b4a\n.text:0000000000406b4e\n.text:0000000000406b51\n.text:0000000000406b53\n.text:0000000000406b57\n.text:0000000000406b5b\n.text:0000000000406b5e\n.text:0000000000406b61\n.text:0000000000406b66\n.text:0000000000406b69\n.text:0000000000406b6b\n.text:0000000000406b6f\n.text:0000000000406b73\n.text:0000000000406b76\n.text:0000000000406b7a\n.text:0000000000406b7b\n.text:0000000000406b7d\n.text:0000000000406b7f\n.text:0000000000406b81\n.text:0000000000406b83\n.text:0000000000406b84\n.text:0000000000406b89\n.text:0000000000406b8e\n.text:0000000000406b91\n.text:0000000000406b94\n.text:0000000000406b96\n.text:0000000000406b99\n.text:0000000000406b9e\n.text:0000000000406ba1\n.text:0000000000406ba6\n.text:0000000000406baa\n.text:0000000000406bae\n.text:0000000000406bb1\n.text:0000000000406bb4\n.text:0000000000406bb9\n.text:0000000000406bbc\n.text:0000000000406bbe\n.text:0000000000406bc1\n.text:0000000000406bc3\n.text:0000000000406bc8\n.text:0000000000406bcb\n.text:0000000000406bcd\n.text:0000000000406bd0\n.text:0000000000406bd5\n.text:0000000000406bd8\n'
p1994
tp1995
sS'emit_mandatory_arg_note'
p1996
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1997
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1998
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40a7fc\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RSI,qword ptr [0x0060f2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004018f0\n'
p1999
S'50\n31 ff\nbe fc a7 40 00\nba 05 00 00 00\ne8 8e f9 ff ff\n48 8b 35 9f d4 20 00\n48 89 c7\n58\ne9 be fa ff ff\n'
p2000
S'.text:0000000000401e10\n.text:0000000000401e11\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1d\n.text:0000000000401e22\n.text:0000000000401e29\n.text:0000000000401e2c\n.text:0000000000401e2d\n'
p2001
tp2002
sS'strcaseeq0'
p2003
(S'\n__stdcall strcaseeq0()\n'
p2004
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p2005
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004043d5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004043dc\nJMP 0x00404410\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404410\nTEST BPL,BPL\nJZ 0x0040440b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404420\nJMP 0x00404410\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2006
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 33 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2007
S'.text:00000000004043a0\n.text:00000000004043a1\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043a7\n.text:00000000004043a9\n.text:00000000004043aa\n.text:00000000004043ab\n.text:00000000004043ae\n.text:00000000004043b1\n.text:00000000004043b4\n.text:00000000004043b7\n.text:00000000004043b9\n.text:00000000004043bc\n.text:00000000004043be\n.text:00000000004043c3\n.text:00000000004043c6\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d5\n.text:00000000004043d7\n.text:00000000004043da\n.text:00000000004043dc\n.text:00000000004043df\n.text:00000000004043e1\n.text:00000000004043e5\n.text:00000000004043ea\n.text:00000000004043ed\n.text:00000000004043f1\n.text:00000000004043f5\n.text:00000000004043f9\n.text:00000000004043fd\n.text:0000000000404401\n.text:0000000000404404\n.text:0000000000404409\n.text:000000000040440b\n.text:0000000000404410\n.text:0000000000404414\n.text:0000000000404415\n.text:0000000000404417\n.text:0000000000404419\n.text:000000000040441b\n.text:000000000040441d\n.text:000000000040441e\n'
p2008
tp2009
sS'strcaseeq2'
p2010
(S'\n__stdcall strcaseeq2()\n'
p2011
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p2012
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004044e6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044ed\nJMP 0x0040451a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040451a\nTEST BPL,BPL\nJZ 0x00404515\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404530\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2013
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 32 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2014
S'.text:00000000004044b0\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044b5\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044ba\n.text:00000000004044bb\n.text:00000000004044be\n.text:00000000004044c1\n.text:00000000004044c4\n.text:00000000004044c7\n.text:00000000004044c9\n.text:00000000004044cc\n.text:00000000004044ce\n.text:00000000004044d3\n.text:00000000004044d7\n.text:00000000004044d9\n.text:00000000004044db\n.text:00000000004044de\n.text:00000000004044e0\n.text:00000000004044e2\n.text:00000000004044e4\n.text:00000000004044e6\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044f0\n.text:00000000004044f2\n.text:00000000004044f6\n.text:00000000004044fa\n.text:00000000004044fe\n.text:0000000000404502\n.text:0000000000404505\n.text:0000000000404509\n.text:000000000040450a\n.text:000000000040450c\n.text:000000000040450e\n.text:0000000000404510\n.text:0000000000404512\n.text:0000000000404513\n.text:0000000000404515\n.text:000000000040451a\n.text:000000000040451e\n.text:000000000040451f\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404525\n.text:0000000000404527\n.text:0000000000404528\n'
p2015
tp2016
sS'hash_table_ok'
p2017
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p2018
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2019
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x00407ada\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x00407acf\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00407ac0\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00407ab0\nJMP 0x00407ade\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x00407aec\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x00407aee\nXOR EAX,EAX\nRET\n'
p2020
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p2021
S'.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a97\n.text:0000000000407a99\n.text:0000000000407a9d\n.text:0000000000407a9f\n.text:0000000000407aa1\n.text:0000000000407ab0\n.text:0000000000407ab4\n.text:0000000000407ab6\n.text:0000000000407ab9\n.text:0000000000407ac0\n.text:0000000000407ac3\n.text:0000000000407ac7\n.text:0000000000407aca\n.text:0000000000407acc\n.text:0000000000407acf\n.text:0000000000407ad3\n.text:0000000000407ad6\n.text:0000000000407ad8\n.text:0000000000407ada\n.text:0000000000407adc\n.text:0000000000407ade\n.text:0000000000407ae2\n.text:0000000000407ae4\n.text:0000000000407ae6\n.text:0000000000407aea\n.text:0000000000407aec\n.text:0000000000407aee\n'
p2022
tp2023
sS'strcaseeq1'
p2024
(S'\n__stdcall strcaseeq1()\n'
p2025
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p2026
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040445d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404464\nJMP 0x00404497\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404497\nTEST BPL,BPL\nJZ 0x00404492\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004044b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2027
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 33 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2028
S'.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404427\n.text:0000000000404429\n.text:000000000040442a\n.text:000000000040442b\n.text:0000000000404430\n.text:0000000000404433\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443b\n.text:000000000040443e\n.text:0000000000404443\n.text:0000000000404445\n.text:000000000040444a\n.text:000000000040444e\n.text:0000000000404450\n.text:0000000000404452\n.text:0000000000404455\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445b\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446d\n.text:0000000000404471\n.text:0000000000404475\n.text:000000000040447b\n.text:000000000040447f\n.text:0000000000404482\n.text:0000000000404486\n.text:0000000000404487\n.text:0000000000404489\n.text:000000000040448b\n.text:000000000040448d\n.text:000000000040448f\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404497\n.text:000000000040449b\n.text:000000000040449c\n.text:000000000040449e\n.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a5\n'
p2029
tp2030
sS'strcaseeq4'
p2031
(S'\n__stdcall strcaseeq4()\n'
p2032
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p2033
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004045cc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004045d3\nJMP 0x004045f4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004045f4\nTEST BPL,BPL\nJZ 0x004045ef\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404600\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2034
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 31 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2035
S'.text:00000000004045a0\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a5\n.text:00000000004045a6\n.text:00000000004045a7\n.text:00000000004045aa\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b2\n.text:00000000004045b4\n.text:00000000004045b9\n.text:00000000004045bd\n.text:00000000004045bf\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045ca\n.text:00000000004045cc\n.text:00000000004045ce\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d6\n.text:00000000004045d8\n.text:00000000004045dc\n.text:00000000004045e0\n.text:00000000004045e3\n.text:00000000004045e7\n.text:00000000004045e8\n.text:00000000004045ea\n.text:00000000004045ec\n.text:00000000004045ed\n.text:00000000004045ef\n.text:00000000004045f4\n.text:00000000004045f8\n.text:00000000004045f9\n.text:00000000004045fb\n.text:00000000004045fd\n.text:00000000004045fe\n'
p2036
tp2037
sS'strcaseeq3'
p2038
(S'\n__stdcall strcaseeq3()\n'
p2039
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p2040
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407780\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404560\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404567\nJMP 0x0040458a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040458a\nTEST BPL,BPL\nJZ 0x00404585\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004045a0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2041
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 32 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2042
S'.text:0000000000404530\n.text:0000000000404531\n.text:0000000000404533\n.text:0000000000404535\n.text:0000000000404537\n.text:0000000000404538\n.text:000000000040453b\n.text:000000000040453e\n.text:0000000000404541\n.text:0000000000404543\n.text:0000000000404546\n.text:0000000000404548\n.text:000000000040454d\n.text:0000000000404551\n.text:0000000000404553\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455a\n.text:000000000040455c\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404565\n.text:0000000000404567\n.text:000000000040456a\n.text:000000000040456c\n.text:0000000000404570\n.text:0000000000404574\n.text:0000000000404578\n.text:000000000040457b\n.text:000000000040457c\n.text:000000000040457e\n.text:0000000000404580\n.text:0000000000404582\n.text:0000000000404583\n.text:0000000000404585\n.text:000000000040458a\n.text:000000000040458b\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404591\n.text:0000000000404592\n'
p2043
tp2044
sS'register_tm_clones'
p2045
(S'\n__stdcall register_tm_clones()\n'
p2046
V\u000a/* WARNING: Removing unreachable block (ram,0x00401bc3) */\u000a/* WARNING: Removing unreachable block (ram,0x00401bcd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2047
S'MOV ESI,0x60f2c0\nPUSH RBP\nSUB RSI,0x60f2c0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401bd8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401bd8\nPOP RBP\nMOV EDI,0x60f2c0\nJMP RAX\nPOP RBP\nRET\n'
p2048
S'be c0 f2 60 00\n55\n48 81 ee c0 f2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf c0 f2 60 00\nff e0\n5d\nc3\n'
p2049
S'.text:0000000000401ba0\n.text:0000000000401ba5\n.text:0000000000401ba6\n.text:0000000000401bad\n.text:0000000000401bb1\n.text:0000000000401bb4\n.text:0000000000401bb7\n.text:0000000000401bbb\n.text:0000000000401bbe\n.text:0000000000401bc1\n.text:0000000000401bc3\n.text:0000000000401bc8\n.text:0000000000401bcb\n.text:0000000000401bcd\n.text:0000000000401bce\n.text:0000000000401bd3\n.text:0000000000401bd8\n.text:0000000000401bd9\n'
p2050
tp2051
sS'qsort'
p2052
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p2053
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_0060f060)();\u000a  return;\u000a}\u000a\u000a
p2054
S'JMP qword ptr [0x0060f060]\n'
p2055
S'ff 25 fa d8 20 00\n'
p2056
S'.plt:0000000000401760\n'
p2057
tp2058
sS'c_islower'
p2059
(S'\n__stdcall c_islower()\n'
p2060
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p2061
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p2062
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p2063
S'.text:0000000000407720\n.text:0000000000407723\n.text:0000000000407726\n.text:0000000000407729\n'
p2064
tp2065
sS'getcon'
p2066
(S'\n__stdcall getcon(security_context_t * con)\n'
p2067
V\u000aint getcon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2068
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2069
S'50\ne8 ea ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2070
S'.text:0000000000404810\n.text:0000000000404811\n.text:0000000000404816\n.text:000000000040481c\n.text:0000000000404821\n.text:0000000000404822\n'
p2071
tp2072
sS'fstatat'
p2073
(S'\n__stdcall fstatat(int __fd, char * __file, stat * __buf, int __flag)\n'
p2074
V\u000aint fstatat(int __fd,char *__file,stat *__buf,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstatat_0060f0c8)(1,(ulong)(uint)__fd,__file,__buf,(ulong)(uint)__flag);\u000a  return iVar1;\u000a}\u000a\u000a
p2075
S'MOV R8D,ECX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401830\n'
p2076
S'41 89 c8\n48 89 d1\n48 89 f2\n89 fe\nbf 01 00 00 00\ne9 5b 7f ff ff\n'
p2077
S'.text:00000000004098c0\n.text:00000000004098c3\n.text:00000000004098c6\n.text:00000000004098c9\n.text:00000000004098cb\n.text:00000000004098d0\n'
p2078
tp2079
sS'fwrite'
p2080
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p2081
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060f218)();\u000a  return sVar1;\u000a}\u000a\u000a
p2082
S'JMP qword ptr [0x0060f218]\n'
p2083
S'ff 25 42 d7 20 00\n'
p2084
S'.plt:0000000000401ad0\n'
p2085
tp2086
sS'fgetfilecon'
p2087
(S'\n__stdcall fgetfilecon(security_context_t * con)\n'
p2088
V\u000aint fgetfilecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2089
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2090
S'50\ne8 1a ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2091
S'.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e6\n.text:00000000004048ec\n.text:00000000004048f1\n.text:00000000004048f2\n'
p2092
tp2093
sS'getfilecon'
p2094
(S'\n__stdcall getfilecon(char * file, security_context_t * con)\n'
p2095
V\u000aint getfilecon(char *file,security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2096
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2097
S'50\ne8 5a ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2098
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a6\n.text:00000000004048ac\n.text:00000000004048b1\n.text:00000000004048b2\n'
p2099
tp2100
sS'setexeccon'
p2101
(S'\n__stdcall setexeccon(security_context_t con)\n'
p2102
V\u000aint setexeccon(security_context_t con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2103
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2104
S'50\ne8 5a cd ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2105
S'.text:00000000004049a0\n.text:00000000004049a1\n.text:00000000004049a6\n.text:00000000004049ac\n.text:00000000004049b1\n.text:00000000004049b2\n'
p2106
tp2107
sS'openat_save_fail'
p2108
(S'\n__stdcall openat_save_fail()\n'
p2109
V\u000avoid openat_save_fail(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"unable to record current working directory",5);\u000a  error((ulong)(uint)iVar1,(ulong)uParm1,uVar2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2110
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EBP,dword ptr [0x0060f260]\nXOR EDI,EDI\nMOV ESI,0x40bb95\nMOV EDX,0x5\nCALL 0x004017b0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,EBP\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401a40\nCALL 0x004016f0\n'
p2111
S'55\n53\n50\n89 fb\n8b 2d a5 64 20 00\n31 ff\nbe 95 bb 40 00\nba 05 00 00 00\ne8 e4 89 ff ff\n48 89 c1\n31 c0\n89 ef\n89 de\n48 89 ca\ne8 63 8c ff ff\ne8 0e 89 ff ff\n'
p2112
S'.text:0000000000408db0\n.text:0000000000408db1\n.text:0000000000408db2\n.text:0000000000408db3\n.text:0000000000408db5\n.text:0000000000408dbb\n.text:0000000000408dbd\n.text:0000000000408dc2\n.text:0000000000408dc7\n.text:0000000000408dcc\n.text:0000000000408dcf\n.text:0000000000408dd1\n.text:0000000000408dd3\n.text:0000000000408dd5\n.text:0000000000408dd8\n.text:0000000000408ddd\n'
p2113
tp2114
sS'rotl_sz'
p2115
(S'\n__stdcall rotl_sz(size_t x)\n'
p2116
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p2117
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p2118
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p2119
S'.text:0000000000409740\n.text:0000000000409742\n.text:0000000000409745\n.text:0000000000409748\n'
p2120
tp2121
sS'se_const'
p2122
(S'\n__stdcall se_const(char * sctx)\n'
p2123
V\u000achar * se_const(char *sctx)\u000a\u000a{\u000a  return sctx;\u000a}\u000a\u000a
p2124
S'MOV RAX,RDI\nRET\n'
p2125
S'48 89 f8\nc3\n'
p2126
S'.text:0000000000402410\n.text:0000000000402413\n'
p2127
tp2128
sS'__do_global_dtors_aux'
p2129
(S'\n__stdcall __do_global_dtors_aux()\n'
p2130
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2131
S'CMP byte ptr [0x0060f308],0x0\nJNZ 0x00401bfa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401b60\nPOP RBP\nMOV byte ptr [0x0060f308],0x1\nRET\n'
p2132
S'80 3d 21 d7 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 0e d7 20 00 01\nf3 c3\n'
p2133
S'.text:0000000000401be0\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401bea\n.text:0000000000401bed\n.text:0000000000401bf2\n.text:0000000000401bf3\n.text:0000000000401bfa\n'
p2134
tp2135
sS'c_isprint'
p2136
(S'\n__stdcall c_isprint()\n'
p2137
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p2138
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p2139
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p2140
S'.text:0000000000407730\n.text:0000000000407733\n.text:0000000000407736\n.text:0000000000407739\n'
p2141
tp2142
sS'getfscreatecon'
p2143
(S'\n__stdcall getfscreatecon(security_context_t * con)\n'
p2144
V\u000aint getfscreatecon(security_context_t *con)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return -1;\u000a}\u000a\u000a
p2145
S'PUSH RAX\nCALL 0x00401700\nMOV dword ptr [RAX],0x5f\nMOV EAX,0xffffffff\nPOP RCX\nRET\n'
p2146
S'50\ne8 ba ce ff ff\nc7 00 5f 00 00 00\nb8 ff ff ff ff\n59\nc3\n'
p2147
S'.text:0000000000404840\n.text:0000000000404841\n.text:0000000000404846\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404852\n'
p2148
tp2149
sS'_fini'
p2150
(S'\n__stdcall _fini()\n'
p2151
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2152
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p2153
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p2154
S'.fini:00000000004098d8\n.fini:00000000004098dc\n.fini:00000000004098e0\n'
p2155
tp2156
sS'fd_ring_clear'
p2157
(S'\n__stdcall fd_ring_clear(I_ring * fd_ring)\n'
p2158
V\u000avoid fd_ring_clear(I_ring *fd_ring)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  \u000a  while (_Var1 = i_ring_empty(fd_ring), _Var1 == false) {\u000a    __fd = i_ring_pop(fd_ring);\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p2159
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x00405b07\nMOV EDI,EAX\nCALL 0x004018a0\nMOV RDI,RBX\nCALL 0x004089f0\nTEST AL,AL\nJNZ 0x00405b21\nMOV RDI,RBX\nCALL 0x00408a40\nTEST EAX,EAX\nJNS 0x00405b00\nJMP 0x00405b07\nPOP RBX\nRET\n'
p2160
S'53\n48 89 fb\neb 11\n89 c7\ne8 99 bd ff ff\n48 89 df\ne8 e1 2e 00 00\n84 c0\n75 0e\n48 89 df\ne8 25 2f 00 00\n85 c0\n79 e1\neb e6\n5b\nc3\n'
p2161
S'.text:0000000000405af0\n.text:0000000000405af1\n.text:0000000000405af4\n.text:0000000000405b00\n.text:0000000000405b02\n.text:0000000000405b07\n.text:0000000000405b0a\n.text:0000000000405b0f\n.text:0000000000405b11\n.text:0000000000405b13\n.text:0000000000405b16\n.text:0000000000405b1b\n.text:0000000000405b1d\n.text:0000000000405b1f\n.text:0000000000405b21\n.text:0000000000405b22\n'
p2162
tp2163
sS'rpl_fcntl'
p2164
(S'\n__stdcall rpl_fcntl()\n'
p2165
V\u000a/* WARNING: Removing unreachable block (ram,0x0040942b) */\u000a/* WARNING: Removing unreachable block (ram,0x00409494) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00409439 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p2166
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004093bb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00409416\nCMP EAX,0x28\nJA 0x0040942b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409439\nCMP EAX,0x28\nJA 0x00409494\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004094a2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060f4c8],0x0\nJS 0x004094b3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401770\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409484\nCALL 0x00401700\nCMP dword ptr [RAX],0x16\nJNZ 0x00409484\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409370\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00409516\nMOV dword ptr [0x0060f4c8],R15D\nTEST EBP,EBP\nJNS 0x004094c7\nJMP 0x00409516\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401770\nMOV EBP,EAX\nJMP 0x00409516\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409370\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409516\nCMP dword ptr [0x0060f4c8],-0x1\nJNZ 0x00409516\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401770\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004094fc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401770\nCMP EAX,-0x1\nJNZ 0x00409516\nCALL 0x00401700\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004018a0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2167
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 86 60 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 20 83 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 9f 82 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 3d 60 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 c1 82 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d fa 5f 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 92 82 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 79 82 ff ff\n83 f8 ff\n75 1a\ne8 ff 81 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 92 83 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2168
S'.text:0000000000409370\n.text:0000000000409371\n.text:0000000000409373\n.text:0000000000409375\n.text:0000000000409376\n.text:000000000040937d\n.text:0000000000409380\n.text:0000000000409382\n.text:0000000000409384\n.text:0000000000409389\n.text:000000000040938e\n.text:0000000000409393\n.text:000000000040939b\n.text:00000000004093a3\n.text:00000000004093ab\n.text:00000000004093b3\n.text:00000000004093bb\n.text:00000000004093c0\n.text:00000000004093c5\n.text:00000000004093ca\n.text:00000000004093cf\n.text:00000000004093d4\n.text:00000000004093d9\n.text:00000000004093e1\n.text:00000000004093e6\n.text:00000000004093ee\n.text:00000000004093f5\n.text:00000000004093f9\n.text:00000000004093ff\n.text:0000000000409401\n.text:0000000000409404\n.text:0000000000409406\n.text:000000000040940b\n.text:000000000040940e\n.text:0000000000409411\n.text:0000000000409414\n.text:0000000000409416\n.text:0000000000409419\n.text:000000000040941b\n.text:000000000040941e\n.text:0000000000409423\n.text:0000000000409426\n.text:0000000000409429\n.text:000000000040942b\n.text:0000000000409430\n.text:0000000000409434\n.text:0000000000409439\n.text:000000000040943b\n.text:0000000000409442\n.text:0000000000409444\n.text:0000000000409446\n.text:0000000000409449\n.text:000000000040944b\n.text:0000000000409450\n.text:0000000000409452\n.text:0000000000409458\n.text:000000000040945a\n.text:000000000040945c\n.text:0000000000409461\n.text:0000000000409464\n.text:0000000000409466\n.text:0000000000409468\n.text:000000000040946a\n.text:000000000040946d\n.text:000000000040946f\n.text:0000000000409474\n.text:0000000000409476\n.text:000000000040947c\n.text:000000000040947e\n.text:0000000000409484\n.text:000000000040948b\n.text:000000000040948d\n.text:000000000040948f\n.text:0000000000409494\n.text:0000000000409499\n.text:000000000040949d\n.text:00000000004094a2\n.text:00000000004094a5\n.text:00000000004094a7\n.text:00000000004094aa\n.text:00000000004094af\n.text:00000000004094b1\n.text:00000000004094b3\n.text:00000000004094b5\n.text:00000000004094b7\n.text:00000000004094ba\n.text:00000000004094bc\n.text:00000000004094c1\n.text:00000000004094c3\n.text:00000000004094c5\n.text:00000000004094c7\n.text:00000000004094ce\n.text:00000000004094d0\n.text:00000000004094d5\n.text:00000000004094d7\n.text:00000000004094d9\n.text:00000000004094de\n.text:00000000004094e0\n.text:00000000004094e2\n.text:00000000004094e4\n.text:00000000004094e7\n.text:00000000004094ec\n.text:00000000004094ee\n.text:00000000004094f0\n.text:00000000004094f2\n.text:00000000004094f7\n.text:00000000004094fa\n.text:00000000004094fc\n.text:0000000000409501\n.text:0000000000409504\n.text:0000000000409507\n.text:0000000000409509\n.text:000000000040950e\n.text:0000000000409511\n.text:0000000000409516\n.text:0000000000409518\n.text:000000000040951f\n.text:0000000000409520\n.text:0000000000409522\n.text:0000000000409524\n.text:0000000000409525\n'
p2169
tp2170
sS'__fpending'
p2171
(S'\n__stdcall __fpending()\n'
p2172
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060f050)();\u000a  return;\u000a}\u000a\u000a
p2173
S'JMP qword ptr [0x0060f050]\n'
p2174
S'ff 25 0a d9 20 00\n'
p2175
S'.plt:0000000000401740\n'
p2176
tp2177
s.