(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401390\nTEST RBP,RBP\nJZ 0x00405766\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405750\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 e6 36 20 00\n55\n48 8d 2d e6 36 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 4f bc ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405710\n.text:0000000000405712\n.text:0000000000405714\n.text:0000000000405717\n.text:0000000000405719\n.text:000000000040571b\n.text:0000000000405722\n.text:0000000000405723\n.text:000000000040572a\n.text:000000000040572b\n.text:000000000040572e\n.text:0000000000405731\n.text:0000000000405734\n.text:0000000000405738\n.text:000000000040573c\n.text:0000000000405741\n.text:0000000000405744\n.text:0000000000405746\n.text:0000000000405748\n.text:0000000000405750\n.text:0000000000405753\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575d\n.text:0000000000405761\n.text:0000000000405764\n.text:0000000000405766\n.text:000000000040576a\n.text:000000000040576b\n.text:000000000040576c\n.text:000000000040576e\n.text:0000000000405770\n.text:0000000000405772\n.text:0000000000405774\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609150)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609150]\n'
p11
S'ff 25 1a 7b 20 00\n'
p12
S'.plt:0000000000401630\n'
p13
tp14
sS'argmatch_to_argument'
p15
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p16
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00405201\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401570\nTEST EAX,EAX\nJZ 0x00405204\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x004051e0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p18
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 82 c3 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p19
S'.text:00000000004051b0\n.text:00000000004051b2\n.text:00000000004051b4\n.text:00000000004051b6\n.text:00000000004051b8\n.text:00000000004051b9\n.text:00000000004051bc\n.text:00000000004051bf\n.text:00000000004051c2\n.text:00000000004051c5\n.text:00000000004051c8\n.text:00000000004051cb\n.text:00000000004051cd\n.text:00000000004051d1\n.text:00000000004051e0\n.text:00000000004051e3\n.text:00000000004051e6\n.text:00000000004051e9\n.text:00000000004051ee\n.text:00000000004051f0\n.text:00000000004051f2\n.text:00000000004051f5\n.text:00000000004051f9\n.text:00000000004051fc\n.text:00000000004051ff\n.text:0000000000405201\n.text:0000000000405204\n.text:0000000000405207\n.text:0000000000405208\n.text:000000000040520a\n.text:000000000040520c\n.text:000000000040520e\n.text:0000000000405210\n'
p20
tp21
sS'c_isdigit'
p22
(S'\n__stdcall c_isdigit()\n'
p23
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p24
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p25
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p26
S'.text:00000000004052a0\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052a9\n'
p27
tp28
sS'version_etc_arn'
p29
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p30
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004062cb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404527;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4045a8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40463c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p31
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004043b8\nMOV EDX,0x4062b8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401730\nJMP 0x004043cd\nMOV EDX,0x4062c4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401730\nXOR EDI,EDI\nMOV ESI,0x4062cb\nMOV EDX,0x5\nCALL 0x00401490\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4065a0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401730\nXOR EDI,EDI\nMOV ESI,0x4062cf\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401580\nCMP R12,0x9\nJA 0x00404456\nJMP qword ptr [0x406268 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40639a\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x4064d9\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x4063aa\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x4063c1\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x4063dd\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x18\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x4063fd\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x18\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x406421\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x28\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x406449\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x28\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x406475\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nJMP 0x004046c7\nXOR EDI,EDI\nMOV ESI,0x4064a5\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004013e0\n'
p32
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba b8 62 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 7a d3 ff ff\neb 15\nba c4 62 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 63 d3 ff ff\n31 ff\nbe cb 62 40 00\nba 05 00 00 00\ne8 b2 d0 ff ff\n48 89 c1\nbe 01 00 00 00\nba a0 65 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 35 d3 ff ff\n31 ff\nbe cf 62 40 00\nba 05 00 00 00\ne8 84 d0 ff ff\n48 89 c7\n4c 89 f6\ne8 69 d1 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 68 62 40 00\n31 ff\nbe 9a 63 40 00\nba 05 00 00 00\ne8 5a d0 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 da d2 ff ff\n31 ff\nbe d9 64 40 00\nba 05 00 00 00\ne8 29 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 91 d2 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe aa 63 40 00\nba 05 00 00 00\ne8 d7 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 53 d2 ff ff\n31 ff\nbe c1 63 40 00\nba 05 00 00 00\ne8 a2 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a d2 ff ff\n31 ff\nbe dd 63 40 00\nba 05 00 00 00\ne8 69 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 e4 d1 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe fd 63 40 00\nba 05 00 00 00\ne8 2a cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 a2 d1 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 21 64 40 00\nba 05 00 00 00\ne8 e8 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 58 d1 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 49 64 40 00\nba 05 00 00 00\ne8 9e ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0e d1 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 75 64 40 00\nba 05 00 00 00\ne8 54 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 bc d0 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe a5 64 40 00\nba 05 00 00 00\ne8 05 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6d d0 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 0c cd ff ff\n'
p33
S'.text:0000000000404380\n.text:0000000000404382\n.text:0000000000404384\n.text:0000000000404386\n.text:0000000000404387\n.text:0000000000404388\n.text:000000000040438b\n.text:000000000040438e\n.text:0000000000404391\n.text:0000000000404394\n.text:0000000000404397\n.text:000000000040439a\n.text:000000000040439f\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a9\n.text:00000000004043ab\n.text:00000000004043ae\n.text:00000000004043b1\n.text:00000000004043b6\n.text:00000000004043b8\n.text:00000000004043bd\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c5\n.text:00000000004043c8\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043de\n.text:00000000004043e1\n.text:00000000004043e6\n.text:00000000004043eb\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f6\n.text:00000000004043fb\n.text:00000000004043fd\n.text:0000000000404402\n.text:0000000000404407\n.text:000000000040440c\n.text:000000000040440f\n.text:0000000000404412\n.text:0000000000404417\n.text:000000000040441b\n.text:000000000040441d\n.text:0000000000404425\n.text:0000000000404427\n.text:000000000040442c\n.text:0000000000404431\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443c\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404446\n.text:000000000040444a\n.text:000000000040444b\n.text:000000000040444d\n.text:000000000040444f\n.text:0000000000404451\n.text:0000000000404456\n.text:0000000000404458\n.text:000000000040445d\n.text:0000000000404462\n.text:0000000000404467\n.text:000000000040446a\n.text:000000000040446d\n.text:0000000000404471\n.text:0000000000404475\n.text:000000000040447a\n.text:000000000040447f\n.text:0000000000404482\n.text:0000000000404486\n.text:000000000040448a\n.text:000000000040448e\n.text:0000000000404492\n.text:0000000000404496\n.text:000000000040449a\n.text:000000000040449f\n.text:00000000004044a3\n.text:00000000004044a8\n.text:00000000004044aa\n.text:00000000004044af\n.text:00000000004044b4\n.text:00000000004044b9\n.text:00000000004044bc\n.text:00000000004044bf\n.text:00000000004044c3\n.text:00000000004044c8\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044d1\n.text:00000000004044d2\n.text:00000000004044d4\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044dd\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e9\n.text:00000000004044ee\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f8\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404503\n.text:0000000000404506\n.text:000000000040450a\n.text:000000000040450b\n.text:000000000040450d\n.text:000000000040450f\n.text:0000000000404511\n.text:0000000000404516\n.text:0000000000404518\n.text:000000000040451d\n.text:0000000000404522\n.text:0000000000404527\n.text:000000000040452a\n.text:000000000040452d\n.text:0000000000404531\n.text:0000000000404535\n.text:0000000000404539\n.text:000000000040453e\n.text:0000000000404540\n.text:0000000000404543\n.text:0000000000404547\n.text:000000000040454c\n.text:0000000000404550\n.text:0000000000404555\n.text:0000000000404557\n.text:000000000040455c\n.text:0000000000404561\n.text:0000000000404566\n.text:0000000000404569\n.text:000000000040456c\n.text:0000000000404570\n.text:0000000000404574\n.text:0000000000404579\n.text:000000000040457e\n.text:0000000000404581\n.text:0000000000404585\n.text:0000000000404589\n.text:000000000040458e\n.text:0000000000404592\n.text:0000000000404597\n.text:0000000000404599\n.text:000000000040459e\n.text:00000000004045a3\n.text:00000000004045a8\n.text:00000000004045ab\n.text:00000000004045ae\n.text:00000000004045b2\n.text:00000000004045b6\n.text:00000000004045ba\n.text:00000000004045bf\n.text:00000000004045c4\n.text:00000000004045c7\n.text:00000000004045cb\n.text:00000000004045cf\n.text:00000000004045d3\n.text:00000000004045d8\n.text:00000000004045dc\n.text:00000000004045e1\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045f8\n.text:00000000004045fc\n.text:0000000000404600\n.text:0000000000404605\n.text:000000000040460a\n.text:000000000040460d\n.text:0000000000404611\n.text:0000000000404615\n.text:0000000000404619\n.text:000000000040461d\n.text:0000000000404622\n.text:0000000000404626\n.text:000000000040462b\n.text:000000000040462d\n.text:0000000000404632\n.text:0000000000404637\n.text:000000000040463c\n.text:000000000040463f\n.text:0000000000404642\n.text:0000000000404646\n.text:000000000040464a\n.text:000000000040464e\n.text:0000000000404653\n.text:0000000000404658\n.text:000000000040465b\n.text:000000000040465f\n.text:0000000000404663\n.text:0000000000404667\n.text:000000000040466b\n.text:000000000040466f\n.text:0000000000404674\n.text:0000000000404678\n.text:000000000040467a\n.text:000000000040467c\n.text:0000000000404681\n.text:0000000000404686\n.text:000000000040468b\n.text:000000000040468e\n.text:0000000000404691\n.text:0000000000404695\n.text:0000000000404699\n.text:000000000040469e\n.text:00000000004046a3\n.text:00000000004046a6\n.text:00000000004046aa\n.text:00000000004046ae\n.text:00000000004046b2\n.text:00000000004046b6\n.text:00000000004046ba\n.text:00000000004046be\n.text:00000000004046c3\n.text:00000000004046c7\n.text:00000000004046c8\n.text:00000000004046ca\n.text:00000000004046cc\n.text:00000000004046ce\n.text:00000000004046cf\n'
p34
tp35
sS'usage'
p36
(S'\n__stdcall usage()\n'
p37
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Print checksum and block counts for each FILE.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -r              use BSD sum algorithm, use 1K blocks\u005cn  -s, --sysv      use System V sum algorithm, use 512 bytes blocks\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p38
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401946\nXOR EDI,EDI\nMOV ESI,0x4057d4\nMOV EDX,0x5\nCALL 0x00401490\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006092e0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401680\nXOR EDI,EDI\nMOV ESI,0x4057f5\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x00401580\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x405825\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x4058a1\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x4058ce\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x00401580\nCALL 0x004019d0\nMOV EDI,EBX\nCALL 0x00401710\nCALL 0x00401960\nMOV EDI,EBX\nCALL 0x00401710\n'
p39
S'53\n89 fb\n85 db\n0f 85 bb 00 00 00\n31 ff\nbe d4 57 40 00\nba 05 00 00 00\ne8 f4 fb ff ff\n48 89 c1\n48 8b 15 3a 7a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 cb fd ff ff\n31 ff\nbe f5 57 40 00\nba 05 00 00 00\ne8 ca fb ff ff\n48 8b 35 bb 79 20 00\n48 89 c7\ne8 ab fc ff ff\ne8 c6 00 00 00\n31 ff\nbe 25 58 40 00\nba 05 00 00 00\ne8 a5 fb ff ff\n48 8b 35 96 79 20 00\n48 89 c7\ne8 86 fc ff ff\n31 ff\nbe a1 58 40 00\nba 05 00 00 00\ne8 85 fb ff ff\n48 8b 35 76 79 20 00\n48 89 c7\ne8 66 fc ff ff\n31 ff\nbe ce 58 40 00\nba 05 00 00 00\ne8 65 fb ff ff\n48 8b 35 56 79 20 00\n48 89 c7\ne8 46 fc ff ff\ne8 91 00 00 00\n89 df\ne8 ca fd ff ff\ne8 15 00 00 00\n89 df\ne8 be fd ff ff\n'
p40
S'.text:0000000000401880\n.text:0000000000401881\n.text:0000000000401883\n.text:0000000000401885\n.text:000000000040188b\n.text:000000000040188d\n.text:0000000000401892\n.text:0000000000401897\n.text:000000000040189c\n.text:000000000040189f\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018ad\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018b7\n.text:00000000004018bc\n.text:00000000004018c1\n.text:00000000004018c6\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018dc\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018f2\n.text:00000000004018f5\n.text:00000000004018fa\n.text:00000000004018fc\n.text:0000000000401901\n.text:0000000000401906\n.text:000000000040190b\n.text:0000000000401912\n.text:0000000000401915\n.text:000000000040191a\n.text:000000000040191c\n.text:0000000000401921\n.text:0000000000401926\n.text:000000000040192b\n.text:0000000000401932\n.text:0000000000401935\n.text:000000000040193a\n.text:000000000040193f\n.text:0000000000401941\n.text:0000000000401946\n.text:000000000040194b\n.text:000000000040194d\n'
p41
tp42
sS'quoting_options_from_style'
p43
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p44
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p45
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403c6d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004013e0\n'
p46
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 6e d7 ff ff\n'
p47
S'.text:0000000000403c20\n.text:0000000000403c24\n.text:0000000000403c27\n.text:0000000000403c2c\n.text:0000000000403c31\n.text:0000000000403c35\n.text:0000000000403c3d\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c44\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c4f\n.text:0000000000403c54\n.text:0000000000403c59\n.text:0000000000403c5d\n.text:0000000000403c61\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6c\n.text:0000000000403c6d\n'
p48
tp49
sS'strchr'
p50
(S'\n__stdcall strchr(char * __s, int __c)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x006090a8]\n'
p53
S'ff 25 c2 7b 20 00\n'
p54
S'.plt:00000000004014e0\n'
p55
tp56
sS'rpl_fclose'
p57
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p58
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00404df9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00404df9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004015e0\nTEST EAX,EAX\nJS 0x00404df9\nMOV RDI,RBX\nCALL 0x00401640\nTEST EAX,EAX\nJZ 0x00404dc7\nMOV RDI,RBX\nCALL 0x004015e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401500\nCMP RAX,-0x1\nJZ 0x00404df9\nMOV RDI,RBX\nCALL 0x00404e10\nTEST EAX,EAX\nJZ 0x00404df9\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401470\nTEST EBP,EBP\nJZ 0x00404df2\nCALL 0x004013f0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401470\n'
p60
S'55\n53\n50\n48 89 fb\ne8 45 c8 ff ff\n85 c0\n78 5a\n48 89 df\ne8 99 c8 ff ff\n85 c0\n74 1c\n48 89 df\ne8 2d c8 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 3f c7 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 18 c6 ff ff\n8b 28\n48 89 df\ne8 8e c6 ff ff\n85 ed\n74 0c\ne8 05 c6 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 69 c6 ff ff\n'
p61
S'.text:0000000000404d90\n.text:0000000000404d91\n.text:0000000000404d92\n.text:0000000000404d93\n.text:0000000000404d96\n.text:0000000000404d9b\n.text:0000000000404d9d\n.text:0000000000404d9f\n.text:0000000000404da2\n.text:0000000000404da7\n.text:0000000000404da9\n.text:0000000000404dab\n.text:0000000000404dae\n.text:0000000000404db3\n.text:0000000000404db5\n.text:0000000000404dba\n.text:0000000000404dbc\n.text:0000000000404dc1\n.text:0000000000404dc5\n.text:0000000000404dc7\n.text:0000000000404dca\n.text:0000000000404dcf\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd8\n.text:0000000000404dda\n.text:0000000000404ddd\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de6\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404df2\n.text:0000000000404df6\n.text:0000000000404df7\n.text:0000000000404df8\n.text:0000000000404df9\n.text:0000000000404dfc\n.text:0000000000404e00\n.text:0000000000404e01\n.text:0000000000404e02\n'
p62
tp63
sS'strcpy'
p64
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00609048]\n'
p67
S'ff 25 22 7c 20 00\n'
p68
S'.plt:0000000000401420\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609038)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00609038]\n'
p74
S'ff 25 32 7c 20 00\n'
p75
S'.plt:0000000000401400\n'
p76
tp77
sS'xnrealloc'
p78
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p79
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p80
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x004048d4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x004048e0\nPUSH RAX\nCALL 0x00404a30\n'
p81
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p82
S'.text:00000000004048c0\n.text:00000000004048c3\n.text:00000000004048c6\n.text:00000000004048c9\n.text:00000000004048cb\n.text:00000000004048cf\n.text:00000000004048d2\n.text:00000000004048d4\n.text:00000000004048d5\n'
p83
tp84
sS'quote'
p85
(S'\n__stdcall quote(char * arg)\n'
p86
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403ed0\n'
p88
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p89
S'.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403ee8\n'
p90
tp91
sS'emit_bug_reporting_address'
p92
(S'\n__stdcall emit_bug_reporting_address()\n'
p93
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406515\nMOV EDX,0x5\nCALL 0x00401490\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40652a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401680\nXOR EDI,EDI\nMOV ESI,0x406540\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40591f\nMOV ECX,0x405a24\nXOR EAX,EAX\nCALL 0x00401680\nXOR EDI,EDI\nMOV ESI,0x406554\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401580\n'
p95
S'50\n31 ff\nbe 15 65 40 00\nba 05 00 00 00\ne8 7e cc ff ff\n48 89 c1\nbf 01 00 00 00\nba 2a 65 40 00\n31 c0\n48 89 ce\ne8 57 ce ff ff\n31 ff\nbe 40 65 40 00\nba 05 00 00 00\ne8 56 cc ff ff\n48 89 c6\nbf 01 00 00 00\nba 1f 59 40 00\nb9 24 5a 40 00\n31 c0\ne8 2d ce ff ff\n31 ff\nbe 54 65 40 00\nba 05 00 00 00\ne8 2c cc ff ff\n48 8b 35 1d 4a 20 00\n48 89 c7\n58\ne9 0c cd ff ff\n'
p96
S'.text:0000000000404800\n.text:0000000000404801\n.text:0000000000404803\n.text:0000000000404808\n.text:000000000040480d\n.text:0000000000404812\n.text:0000000000404815\n.text:000000000040481a\n.text:000000000040481f\n.text:0000000000404821\n.text:0000000000404824\n.text:0000000000404829\n.text:000000000040482b\n.text:0000000000404830\n.text:0000000000404835\n.text:000000000040483a\n.text:000000000040483d\n.text:0000000000404842\n.text:0000000000404847\n.text:000000000040484c\n.text:000000000040484e\n.text:0000000000404853\n.text:0000000000404855\n.text:000000000040485a\n.text:000000000040485f\n.text:0000000000404864\n.text:000000000040486b\n.text:000000000040486e\n.text:000000000040486f\n'
p97
tp98
sS'clone_quoting_options'
p99
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p100
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004013f0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6092f0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x004049e0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 89 fb\ne8 44 e9 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 f0 92 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 15 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000402aa0\n.text:0000000000402aa1\n.text:0000000000402aa3\n.text:0000000000402aa4\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402aaf\n.text:0000000000402ab2\n.text:0000000000402ab5\n.text:0000000000402aba\n.text:0000000000402abe\n.text:0000000000402ac3\n.text:0000000000402ac6\n.text:0000000000402acb\n.text:0000000000402ace\n.text:0000000000402acf\n.text:0000000000402ad1\n.text:0000000000402ad2\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401600\nTEST RBX,RBX\nJZ 0x004048b3\nTEST RAX,RAX\nJZ 0x004048b5\nPOP RBX\nRET\nCALL 0x00404a30\n'
p109
S'53\n48 89 fb\ne8 57 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a4\n.text:00000000004048a9\n.text:00000000004048ac\n.text:00000000004048ae\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b4\n.text:00000000004048b5\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609320]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402b00\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 08 56 20 00\n48 89 4c 24 30\n0f 10 05 ec 55 20 00\n0f 29 44 24 20\n0f 10 05 d0 55 20 00\n0f 29 44 24 10\n0f 10 05 b4 55 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d04\n.text:0000000000403d05\n.text:0000000000403d09\n.text:0000000000403d0b\n.text:0000000000403d0e\n.text:0000000000403d11\n.text:0000000000403d18\n.text:0000000000403d1d\n.text:0000000000403d24\n.text:0000000000403d29\n.text:0000000000403d30\n.text:0000000000403d35\n.text:0000000000403d3c\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d48\n.text:0000000000403d4b\n.text:0000000000403d4d\n.text:0000000000403d52\n.text:0000000000403d54\n.text:0000000000403d57\n.text:0000000000403d5a\n.text:0000000000403d5d\n.text:0000000000403d62\n.text:0000000000403d66\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6b\n'
p118
tp119
sS'c_isgraph'
p120
(S'\n__stdcall c_isgraph()\n'
p121
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p122
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p123
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p124
S'.text:00000000004052b0\n.text:00000000004052b3\n.text:00000000004052b6\n.text:00000000004052b9\n'
p125
tp126
sS'frame_dummy'
p127
(S'\n__stdcall frame_dummy()\n'
p128
V\u000a/* WARNING: Removing unreachable block (ram,0x0040186a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p129
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401860\nJMP 0x004017f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040185b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004017f0\n'
p130
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p131
S'.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401859\n.text:000000000040185b\n.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401868\n.text:000000000040186a\n.text:000000000040186b\n.text:000000000040186e\n.text:0000000000401870\n.text:0000000000401871\n'
p132
tp133
sS'quotearg_buffer_restyled'
p134
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p135
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402c9c_caseD_7;\u000a  case 2:\u000a    goto switchD_00402c9c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402c9c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402c9c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402c9c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402c9c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402c9c_caseD_7;\u000aswitchD_00402c9c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402c9c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402c9c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403760;\u000aLAB_00402e80:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403769:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403778:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402e8b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402ecf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402ecf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403778;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004036a5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004035b0;\u000a    }\u000a    goto LAB_00403778;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004036da;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403778;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403709;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004031c8;\u000a  case '\u005ca':\u000a    goto joined_r0x004030b8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004030b8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402ee6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004030b8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004030b8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402ee6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004030b8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040361e;\u000a    }\u000a    goto LAB_00403778;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403778;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403778;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403778;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403778;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403778;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402ee6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403676;\u000a      goto joined_r0x00403668;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403171:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403668;\u000a      goto LAB_00403676;\u000a    }\u000a    goto LAB_00403778;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403778;\u000a  }\u000a  goto joined_r0x004035b0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004036da:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403709;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403709:\u000a  if (1 < uVar10) {\u000aLAB_004031e6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004032a2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403171;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004032a2:\u000a        if (bVar6 != 0) goto LAB_00403778;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004031c8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_004031e6;\u000ajoined_r0x004035b0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004035b0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004035d7;\u000aLAB_00403610:\u000a    if (bVar22) goto LAB_00403615;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403610;\u000aLAB_004035d7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403615:\u000a      if (bVar6 != 0) goto LAB_00403778;\u000aLAB_0040361e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403668;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403676:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403668:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004036a5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402e80;\u000aLAB_00403760:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403769;\u000a  goto LAB_00402e8b;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004014a0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403845\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405d20 + RAX*0x8]\nMOV EDI,0x406246\nMOV ESI,R15D\nCALL 0x00403ef0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406248\nMOV ESI,R15D\nCALL 0x00403ef0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402cfd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402d00\nNOP\nCMP R12,RSI\nJNC 0x00402cee\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402ce0\nJMP 0x00402d00\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004014b0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402dcc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402dcc\nMOV ECX,0x406244\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402dc6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402d67\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402d94\nTEST RSI,RSI\nJZ 0x00402d81\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406248\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402da2\nMOV ECX,0x406248\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402dcc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040381c\nMOV ECX,0x406244\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403760\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403769\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402ecf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402eca\nCMP R11,-0x1\nJNZ 0x00402eca\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004014b0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402f20\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040317c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405d78 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403778\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004035d0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004035d7\nJMP 0x00403610\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401570\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402f6d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402ed1\nJMP 0x00403778\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402ed1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402efb\nCMP EBX,0x2\nJNZ 0x00402efb\nTEST R13,R13\nJNZ 0x00402efb\nJMP 0x00403778\nCMP R11,-0x1\nJZ 0x00403353\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403373\nJMP 0x00402efb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403384\nTEST R8B,R8B\nJNZ 0x00403778\nCMP EBX,0x2\nJNZ 0x00403028\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403028\nCMP R12,RSI\nJNC 0x00403003\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403012\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403021\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403032\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004034f8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004034f8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004034f8\nCMP RCX,RSI\nJNC 0x0040306c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040307b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nJMP 0x004035d0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ef9\nJMP 0x004030da\nMOV DL,0x74\nJMP 0x004030c2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ef9\nJMP 0x004030da\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ef9\nJMP 0x004030da\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403778\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ef9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040361e\nJMP 0x00403778\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402ef9\nTEST R8B,R8B\nJNZ 0x00403778\nCMP R12,RSI\nJNC 0x0040310a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403119\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403128\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402ef9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040350b\nCMP EBX,0x2\nJNZ 0x00402ef9\nTEST R8B,R8B\nJZ 0x00402ef9\nJMP 0x00403778\nCMP EBX,0x2\nJNZ 0x004033a4\nTEST R8B,R8B\nJNZ 0x00403778\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403676\nJMP 0x00403699\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004033c5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401760\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004035b8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004035b8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004032a2\nJMP 0x00403270\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403259\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403256\nCMP R12,RSI\nJNC 0x0040323b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040324a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403290\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403290\nTEST BPL,0x1\nJZ 0x00403333\nCMP R12,RSI\nJNC 0x00403284\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403333\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403270\nTEST R8B,R8B\nJNZ 0x00403778\nCMP EBX,0x2\nJNZ 0x004032ea\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004032ea\nCMP R12,RSI\nJNC 0x004032c2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004032d1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004032e0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004032f4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040330b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403325\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403220\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403676\nJMP 0x00403699\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402efb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402efb\nJMP 0x00403778\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004036a5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nJMP 0x004035d0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004030c2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403676\nJMP 0x00403699\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004033e7\nMOV RDI,R10\nCALL 0x004014b0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004014d0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004036bf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004036b7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004036c6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004034ae\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004034a6\nBT RDI,RDX\nJC 0x00403812\nINC RCX\nCMP RCX,R14\nJC 0x00403490\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401750\nTEST EAX,EAX\nJNZ 0x004034c3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401740\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403405\nJMP 0x00403709\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nJMP 0x004035d0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402ef9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402ef9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402ef9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402efb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403742\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403778\nCMP R12,RSI\nJNC 0x0040356e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403581\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403590\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040359f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nJMP 0x004035d0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403610\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403615\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403670\nJMP 0x00403615\nTEST BPL,BPL\nJZ 0x00403670\nTEST R8B,R8B\nJNZ 0x00403778\nCMP EBX,0x2\nJNZ 0x00403658\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403658\nCMP R12,RSI\nJNC 0x00403633\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403642\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403651\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403662\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004036a2\nJMP 0x0040369e\nTEST DIL,0x1\nJZ 0x00403699\nAND AL,0x1\nJNZ 0x00403699\nCMP R12,RSI\nJNC 0x00403684\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403693\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004036a2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403760\nJMP 0x00402e80\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403704\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004036fc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403738\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004036da\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403709\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004031c8\nJMP 0x004031e6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403709\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f06\nJMP 0x004035d0\nCMP R13,R11\nJNZ 0x00402e8b\nTEST R8B,R8B\nJZ 0x004037d2\nCMP EBX,0x2\nJNZ 0x004037d2\nTEST R12,R12\nJNZ 0x004037d2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402c10\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403806\nTEST R8B,R8B\nJNZ 0x00403806\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403806\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004037f9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004037f0\nCMP R12,RSI\nJNC 0x004037bd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004037bd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403778\nTEST RSI,RSI\nJZ 0x00403829\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406244\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402dcc\nCALL 0x004013e0\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 62 e8 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 20 5d 40 00\nbf 46 62 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 48 62 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 a3 e7 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 44 62 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 48 62 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 48 62 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 44 62 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 03 e6 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 78 5d 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 37 e6 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 c7 e5 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 d1 e0 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 a3 e0 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 99 e2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 62 e2 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 44 62 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 96 db ff ff\n'
p138
S'.text:0000000000402c10\n.text:0000000000402c11\n.text:0000000000402c13\n.text:0000000000402c15\n.text:0000000000402c17\n.text:0000000000402c19\n.text:0000000000402c1a\n.text:0000000000402c21\n.text:0000000000402c24\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2f\n.text:0000000000402c34\n.text:0000000000402c39\n.text:0000000000402c3e\n.text:0000000000402c46\n.text:0000000000402c4a\n.text:0000000000402c50\n.text:0000000000402c58\n.text:0000000000402c5d\n.text:0000000000402c65\n.text:0000000000402c6a\n.text:0000000000402c6e\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c7e\n.text:0000000000402c81\n.text:0000000000402c84\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8c\n.text:0000000000402c8f\n.text:0000000000402c94\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402ca3\n.text:0000000000402ca8\n.text:0000000000402cab\n.text:0000000000402cb0\n.text:0000000000402cb5\n.text:0000000000402cba\n.text:0000000000402cbd\n.text:0000000000402cc2\n.text:0000000000402cc7\n.text:0000000000402ccc\n.text:0000000000402cce\n.text:0000000000402cd0\n.text:0000000000402cd5\n.text:0000000000402cd7\n.text:0000000000402cda\n.text:0000000000402cdc\n.text:0000000000402cde\n.text:0000000000402ce0\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402cea\n.text:0000000000402cee\n.text:0000000000402cf4\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfb\n.text:0000000000402cfd\n.text:0000000000402d00\n.text:0000000000402d05\n.text:0000000000402d08\n.text:0000000000402d0d\n.text:0000000000402d12\n.text:0000000000402d15\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d23\n.text:0000000000402d26\n.text:0000000000402d29\n.text:0000000000402d2e\n.text:0000000000402d31\n.text:0000000000402d33\n.text:0000000000402d36\n.text:0000000000402d38\n.text:0000000000402d3a\n.text:0000000000402d3d\n.text:0000000000402d42\n.text:0000000000402d47\n.text:0000000000402d4c\n.text:0000000000402d4f\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d5a\n.text:0000000000402d5d\n.text:0000000000402d60\n.text:0000000000402d62\n.text:0000000000402d64\n.text:0000000000402d67\n.text:0000000000402d6a\n.text:0000000000402d6f\n.text:0000000000402d72\n.text:0000000000402d74\n.text:0000000000402d77\n.text:0000000000402d79\n.text:0000000000402d7e\n.text:0000000000402d81\n.text:0000000000402d86\n.text:0000000000402d8c\n.text:0000000000402d92\n.text:0000000000402d94\n.text:0000000000402d99\n.text:0000000000402d9f\n.text:0000000000402da2\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402daa\n.text:0000000000402daf\n.text:0000000000402db2\n.text:0000000000402db8\n.text:0000000000402dbd\n.text:0000000000402dc3\n.text:0000000000402dc6\n.text:0000000000402dc9\n.text:0000000000402dcc\n.text:0000000000402dd4\n.text:0000000000402dd6\n.text:0000000000402dd8\n.text:0000000000402ddb\n.text:0000000000402ddf\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de8\n.text:0000000000402dea\n.text:0000000000402ded\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df5\n.text:0000000000402df9\n.text:0000000000402dfb\n.text:0000000000402dff\n.text:0000000000402e02\n.text:0000000000402e05\n.text:0000000000402e08\n.text:0000000000402e0a\n.text:0000000000402e0e\n.text:0000000000402e17\n.text:0000000000402e1a\n.text:0000000000402e1c\n.text:0000000000402e20\n.text:0000000000402e22\n.text:0000000000402e26\n.text:0000000000402e28\n.text:0000000000402e2b\n.text:0000000000402e2f\n.text:0000000000402e31\n.text:0000000000402e34\n.text:0000000000402e38\n.text:0000000000402e3d\n.text:0000000000402e40\n.text:0000000000402e44\n.text:0000000000402e4c\n.text:0000000000402e4f\n.text:0000000000402e52\n.text:0000000000402e54\n.text:0000000000402e58\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e62\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e70\n.text:0000000000402e74\n.text:0000000000402e7a\n.text:0000000000402e80\n.text:0000000000402e85\n.text:0000000000402e8b\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e97\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402ea1\n.text:0000000000402ea3\n.text:0000000000402ea5\n.text:0000000000402ea8\n.text:0000000000402ead\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb9\n.text:0000000000402ebd\n.text:0000000000402ec2\n.text:0000000000402ec7\n.text:0000000000402eca\n.text:0000000000402ecd\n.text:0000000000402ecf\n.text:0000000000402ed1\n.text:0000000000402ed6\n.text:0000000000402eda\n.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402eee\n.text:0000000000402ef3\n.text:0000000000402ef9\n.text:0000000000402efb\n.text:0000000000402f00\n.text:0000000000402f06\n.text:0000000000402f0f\n.text:0000000000402f15\n.text:0000000000402f20\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f29\n.text:0000000000402f31\n.text:0000000000402f34\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f3e\n.text:0000000000402f40\n.text:0000000000402f45\n.text:0000000000402f48\n.text:0000000000402f4d\n.text:0000000000402f50\n.text:0000000000402f55\n.text:0000000000402f59\n.text:0000000000402f5e\n.text:0000000000402f60\n.text:0000000000402f62\n.text:0000000000402f68\n.text:0000000000402f6d\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f7a\n.text:0000000000402f7e\n.text:0000000000402f83\n.text:0000000000402f88\n.text:0000000000402f8a\n.text:0000000000402f8c\n.text:0000000000402f91\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f9c\n.text:0000000000402f9f\n.text:0000000000402fa5\n.text:0000000000402fa8\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb7\n.text:0000000000402fbd\n.text:0000000000402fc0\n.text:0000000000402fc3\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fcc\n.text:0000000000402fcf\n.text:0000000000402fd5\n.text:0000000000402fda\n.text:0000000000402fdf\n.text:0000000000402fe5\n.text:0000000000402fe8\n.text:0000000000402fee\n.text:0000000000402ff1\n.text:0000000000402ff3\n.text:0000000000402ff5\n.text:0000000000402ff7\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000402ffe\n.text:0000000000403003\n.text:0000000000403008\n.text:000000000040300b\n.text:000000000040300d\n.text:0000000000403012\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301c\n.text:0000000000403021\n.text:0000000000403025\n.text:0000000000403028\n.text:000000000040302b\n.text:000000000040302d\n.text:0000000000403032\n.text:0000000000403037\n.text:0000000000403039\n.text:000000000040303c\n.text:000000000040303f\n.text:0000000000403045\n.text:0000000000403049\n.text:000000000040304c\n.text:0000000000403052\n.text:0000000000403056\n.text:0000000000403059\n.text:000000000040305c\n.text:0000000000403062\n.text:0000000000403065\n.text:0000000000403067\n.text:000000000040306c\n.text:0000000000403071\n.text:0000000000403074\n.text:0000000000403076\n.text:000000000040307b\n.text:000000000040307f\n.text:0000000000403084\n.text:000000000040308a\n.text:000000000040308f\n.text:0000000000403091\n.text:0000000000403096\n.text:000000000040309c\n.text:000000000040309e\n.text:00000000004030a0\n.text:00000000004030a2\n.text:00000000004030a4\n.text:00000000004030a9\n.text:00000000004030af\n.text:00000000004030b1\n.text:00000000004030b3\n.text:00000000004030b8\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c2\n.text:00000000004030c7\n.text:00000000004030c9\n.text:00000000004030cf\n.text:00000000004030d4\n.text:00000000004030da\n.text:00000000004030dd\n.text:00000000004030e0\n.text:00000000004030e6\n.text:00000000004030eb\n.text:00000000004030ee\n.text:00000000004030f1\n.text:00000000004030f7\n.text:00000000004030fa\n.text:0000000000403100\n.text:0000000000403103\n.text:0000000000403105\n.text:000000000040310a\n.text:000000000040310f\n.text:0000000000403112\n.text:0000000000403114\n.text:0000000000403119\n.text:000000000040311e\n.text:0000000000403121\n.text:0000000000403123\n.text:0000000000403128\n.text:000000000040312c\n.text:000000000040312e\n.text:0000000000403133\n.text:0000000000403136\n.text:0000000000403139\n.text:000000000040313f\n.text:0000000000403142\n.text:0000000000403148\n.text:000000000040314b\n.text:0000000000403151\n.text:0000000000403156\n.text:0000000000403159\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403168\n.text:000000000040316b\n.text:000000000040316d\n.text:0000000000403171\n.text:0000000000403177\n.text:000000000040317c\n.text:0000000000403180\n.text:0000000000403189\n.text:000000000040318f\n.text:0000000000403194\n.text:0000000000403199\n.text:000000000040319e\n.text:00000000004031a1\n.text:00000000004031a6\n.text:00000000004031a9\n.text:00000000004031ac\n.text:00000000004031b1\n.text:00000000004031b6\n.text:00000000004031ba\n.text:00000000004031bf\n.text:00000000004031c4\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cf\n.text:00000000004031d5\n.text:00000000004031d8\n.text:00000000004031da\n.text:00000000004031dd\n.text:00000000004031e0\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031ee\n.text:00000000004031f1\n.text:00000000004031f4\n.text:00000000004031f7\n.text:00000000004031f9\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403204\n.text:0000000000403209\n.text:000000000040320f\n.text:0000000000403220\n.text:0000000000403225\n.text:0000000000403227\n.text:000000000040322a\n.text:000000000040322c\n.text:000000000040322f\n.text:0000000000403231\n.text:0000000000403234\n.text:0000000000403236\n.text:000000000040323b\n.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403245\n.text:000000000040324a\n.text:000000000040324e\n.text:0000000000403256\n.text:0000000000403259\n.text:000000000040325c\n.text:000000000040325e\n.text:0000000000403262\n.text:0000000000403270\n.text:0000000000403274\n.text:000000000040327a\n.text:000000000040327d\n.text:000000000040327f\n.text:0000000000403284\n.text:0000000000403287\n.text:0000000000403289\n.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403298\n.text:000000000040329b\n.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a5\n.text:00000000004032ab\n.text:00000000004032ae\n.text:00000000004032b0\n.text:00000000004032b4\n.text:00000000004032b6\n.text:00000000004032b8\n.text:00000000004032bb\n.text:00000000004032bd\n.text:00000000004032c2\n.text:00000000004032c7\n.text:00000000004032ca\n.text:00000000004032cc\n.text:00000000004032d1\n.text:00000000004032d6\n.text:00000000004032d9\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e4\n.text:00000000004032e6\n.text:00000000004032ea\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f9\n.text:00000000004032fc\n.text:00000000004032fe\n.text:0000000000403301\n.text:0000000000403304\n.text:0000000000403307\n.text:000000000040330b\n.text:0000000000403310\n.text:0000000000403313\n.text:0000000000403315\n.text:0000000000403318\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403325\n.text:0000000000403329\n.text:000000000040332d\n.text:0000000000403331\n.text:0000000000403333\n.text:0000000000403337\n.text:000000000040333a\n.text:0000000000403340\n.text:0000000000403344\n.text:0000000000403348\n.text:000000000040334e\n.text:0000000000403353\n.text:0000000000403356\n.text:0000000000403359\n.text:000000000040335e\n.text:0000000000403361\n.text:0000000000403363\n.text:0000000000403366\n.text:000000000040336d\n.text:0000000000403373\n.text:0000000000403375\n.text:0000000000403379\n.text:000000000040337f\n.text:0000000000403384\n.text:0000000000403389\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403394\n.text:0000000000403399\n.text:000000000040339f\n.text:00000000004033a4\n.text:00000000004033a6\n.text:00000000004033ab\n.text:00000000004033b1\n.text:00000000004033b3\n.text:00000000004033b6\n.text:00000000004033ba\n.text:00000000004033c0\n.text:00000000004033c5\n.text:00000000004033d1\n.text:00000000004033d5\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033df\n.text:00000000004033e4\n.text:00000000004033e7\n.text:00000000004033eb\n.text:00000000004033f0\n.text:00000000004033f2\n.text:00000000004033f6\n.text:00000000004033f8\n.text:0000000000403400\n.text:0000000000403405\n.text:000000000040340a\n.text:000000000040340e\n.text:0000000000403412\n.text:000000000040341a\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342d\n.text:0000000000403430\n.text:0000000000403433\n.text:0000000000403439\n.text:000000000040343d\n.text:0000000000403447\n.text:000000000040344d\n.text:0000000000403451\n.text:0000000000403456\n.text:000000000040345c\n.text:0000000000403460\n.text:0000000000403463\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346e\n.text:0000000000403473\n.text:0000000000403477\n.text:0000000000403479\n.text:000000000040347e\n.text:0000000000403483\n.text:0000000000403487\n.text:000000000040348c\n.text:0000000000403490\n.text:0000000000403494\n.text:0000000000403497\n.text:000000000040349a\n.text:000000000040349c\n.text:00000000004034a0\n.text:00000000004034a6\n.text:00000000004034a9\n.text:00000000004034ac\n.text:00000000004034ae\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034b9\n.text:00000000004034bb\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034cb\n.text:00000000004034d3\n.text:00000000004034d6\n.text:00000000004034d9\n.text:00000000004034de\n.text:00000000004034e1\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034f3\n.text:00000000004034f8\n.text:00000000004034fb\n.text:0000000000403500\n.text:0000000000403506\n.text:000000000040350b\n.text:0000000000403510\n.text:0000000000403516\n.text:000000000040351a\n.text:000000000040351d\n.text:0000000000403523\n.text:0000000000403529\n.text:000000000040352f\n.text:0000000000403534\n.text:0000000000403536\n.text:0000000000403539\n.text:000000000040353f\n.text:0000000000403543\n.text:0000000000403545\n.text:000000000040354f\n.text:0000000000403553\n.text:0000000000403559\n.text:000000000040355c\n.text:000000000040355e\n.text:0000000000403564\n.text:0000000000403567\n.text:0000000000403569\n.text:000000000040356e\n.text:0000000000403573\n.text:0000000000403576\n.text:000000000040357a\n.text:000000000040357c\n.text:0000000000403581\n.text:0000000000403586\n.text:0000000000403589\n.text:000000000040358b\n.text:0000000000403590\n.text:0000000000403595\n.text:0000000000403598\n.text:000000000040359a\n.text:000000000040359f\n.text:00000000004035a3\n.text:00000000004035a5\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035b0\n.text:00000000004035b6\n.text:00000000004035b8\n.text:00000000004035bd\n.text:00000000004035c2\n.text:00000000004035c8\n.text:00000000004035d0\n.text:00000000004035d5\n.text:00000000004035d7\n.text:00000000004035dc\n.text:00000000004035df\n.text:00000000004035e1\n.text:00000000004035e4\n.text:00000000004035e6\n.text:00000000004035e9\n.text:00000000004035ec\n.text:00000000004035ef\n.text:00000000004035f1\n.text:00000000004035f9\n.text:00000000004035fc\n.text:00000000004035fe\n.text:0000000000403600\n.text:0000000000403610\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361e\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403627\n.text:0000000000403629\n.text:000000000040362c\n.text:000000000040362e\n.text:0000000000403633\n.text:0000000000403638\n.text:000000000040363b\n.text:000000000040363d\n.text:0000000000403642\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364c\n.text:0000000000403651\n.text:0000000000403655\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365d\n.text:0000000000403662\n.text:0000000000403665\n.text:0000000000403668\n.text:000000000040366a\n.text:0000000000403670\n.text:0000000000403674\n.text:0000000000403676\n.text:0000000000403678\n.text:000000000040367a\n.text:000000000040367d\n.text:000000000040367f\n.text:0000000000403684\n.text:0000000000403689\n.text:000000000040368c\n.text:000000000040368e\n.text:0000000000403693\n.text:0000000000403697\n.text:0000000000403699\n.text:000000000040369c\n.text:000000000040369e\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036a8\n.text:00000000004036ac\n.text:00000000004036b2\n.text:00000000004036b7\n.text:00000000004036bf\n.text:00000000004036c4\n.text:00000000004036c6\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d5\n.text:00000000004036da\n.text:00000000004036df\n.text:00000000004036e3\n.text:00000000004036e5\n.text:00000000004036ea\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f2\n.text:00000000004036fa\n.text:00000000004036fc\n.text:0000000000403704\n.text:0000000000403709\n.text:000000000040370d\n.text:0000000000403712\n.text:0000000000403717\n.text:000000000040371b\n.text:0000000000403720\n.text:0000000000403725\n.text:0000000000403729\n.text:000000000040372d\n.text:0000000000403733\n.text:0000000000403738\n.text:0000000000403740\n.text:0000000000403742\n.text:0000000000403744\n.text:0000000000403748\n.text:000000000040374d\n.text:0000000000403753\n.text:0000000000403760\n.text:0000000000403763\n.text:0000000000403769\n.text:000000000040376c\n.text:000000000040376e\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403776\n.text:0000000000403778\n.text:0000000000403780\n.text:0000000000403786\n.text:000000000040378a\n.text:000000000040378d\n.text:0000000000403791\n.text:0000000000403796\n.text:000000000040379a\n.text:000000000040379e\n.text:00000000004037a1\n.text:00000000004037a4\n.text:00000000004037a7\n.text:00000000004037ab\n.text:00000000004037af\n.text:00000000004037b1\n.text:00000000004037b6\n.text:00000000004037ba\n.text:00000000004037bd\n.text:00000000004037c0\n.text:00000000004037c7\n.text:00000000004037c8\n.text:00000000004037ca\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d0\n.text:00000000004037d1\n.text:00000000004037d2\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037e6\n.text:00000000004037e8\n.text:00000000004037ea\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f5\n.text:00000000004037f9\n.text:00000000004037fc\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403804\n.text:0000000000403806\n.text:0000000000403809\n.text:000000000040380b\n.text:0000000000403810\n.text:0000000000403812\n.text:0000000000403817\n.text:000000000040381c\n.text:000000000040381f\n.text:0000000000403821\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403831\n.text:0000000000403837\n.text:000000000040383d\n.text:0000000000403840\n.text:0000000000403845\n'
p139
tp140
sS'set_quoting_style'
p141
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p142
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p143
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p144
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\n89 30\nc3\n'
p145
S'.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afc\n.text:0000000000402afe\n'
p146
tp147
sS'quotearg_n_style_colon'
p148
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p149
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403c20\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402b00\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004039f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p151
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p152
S'.text:0000000000403da0\n.text:0000000000403da1\n.text:0000000000403da3\n.text:0000000000403da4\n.text:0000000000403da8\n.text:0000000000403dab\n.text:0000000000403dad\n.text:0000000000403db2\n.text:0000000000403db5\n.text:0000000000403dba\n.text:0000000000403dbf\n.text:0000000000403dc4\n.text:0000000000403dc7\n.text:0000000000403dcc\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403ddb\n.text:0000000000403de0\n.text:0000000000403de4\n.text:0000000000403de5\n.text:0000000000403de7\n.text:0000000000403de8\n'
p153
tp154
sS'textdomain'
p155
(S'\n__stdcall textdomain()\n'
p156
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609068)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00609068]\n'
p158
S'ff 25 02 7c 20 00\n'
p159
S'.plt:0000000000401460\n'
p160
tp161
sS'xmemdup'
p162
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p163
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p164
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004048a0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004015c0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p165
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 bc cb ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p166
S'.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e4\n.text:00000000004049e5\n.text:00000000004049e8\n.text:00000000004049eb\n.text:00000000004049ee\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049f9\n.text:00000000004049fc\n.text:00000000004049ff\n.text:0000000000404a04\n.text:0000000000404a07\n.text:0000000000404a08\n.text:0000000000404a0a\n.text:0000000000404a0c\n'
p167
tp168
sS'FUN_004013b0'
p169
(S'\n__stdcall FUN_004013b0()\n'
p170
V\u000avoid FUN_004013b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p171
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p172
S'ff 35 52 7c 20 00\nff 25 54 7c 20 00\n'
p173
S'.plt:00000000004013b0\n.plt:00000000004013b6\n'
p174
tp175
sS'get_quoting_style'
p176
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p177
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p179
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p180
S'.text:0000000000402ae0\n.text:0000000000402ae3\n.text:0000000000402ae8\n.text:0000000000402aec\n.text:0000000000402aee\n'
p181
tp182
sS'ferror_unlocked'
p183
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00609100]\n'
p186
S'ff 25 6a 7b 20 00\n'
p187
S'.plt:0000000000401590\n'
p188
tp189
sS'exit'
p190
(S'\n__stdcall exit(int __status)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091c0)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x006091c0]\n'
p193
S'ff 25 aa 7a 20 00\n'
p194
S'.plt:0000000000401710\n'
p195
tp196
sS'quote_mem'
p197
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403eb0\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p201
S'.text:0000000000403ec0\n.text:0000000000403ec3\n.text:0000000000403ec6\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ece\n'
p202
tp203
sS'locale_charset'
p204
(S'\n__stdcall locale_charset()\n'
p205
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040545d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040545d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401620\nTEST RAX,RAX\nMOV R14D,0x406399\nCMOVNZ R14,RAX\nCALL 0x00405470\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405435\nJMP 0x0040545d\nMOV RDI,RBX\nCALL 0x004014b0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004014b0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040545d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004015b0\nTEST EAX,EAX\nJZ 0x00405450\nCMP BPL,0x2a\nJNZ 0x00405410\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405410\nMOV RDI,RBX\nCALL 0x004014b0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406c88\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p207
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 c2 ff ff\n48 85 c0\n41 be 99 63 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 98 c0 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 8a c0 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 70 c1 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 58 c0 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 88 6c 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p208
S'.text:00000000004053e0\n.text:00000000004053e1\n.text:00000000004053e3\n.text:00000000004053e4\n.text:00000000004053e9\n.text:00000000004053ee\n.text:00000000004053f1\n.text:00000000004053f7\n.text:00000000004053fb\n.text:0000000000405400\n.text:0000000000405403\n.text:0000000000405406\n.text:0000000000405409\n.text:000000000040540b\n.text:0000000000405410\n.text:0000000000405413\n.text:0000000000405418\n.text:000000000040541c\n.text:0000000000405421\n.text:0000000000405426\n.text:000000000040542b\n.text:0000000000405430\n.text:0000000000405433\n.text:0000000000405435\n.text:0000000000405438\n.text:000000000040543b\n.text:0000000000405440\n.text:0000000000405442\n.text:0000000000405444\n.text:0000000000405448\n.text:000000000040544a\n.text:000000000040544e\n.text:0000000000405450\n.text:0000000000405453\n.text:0000000000405458\n.text:000000000040545d\n.text:0000000000405461\n.text:0000000000405466\n.text:000000000040546a\n.text:000000000040546b\n.text:000000000040546d\n.text:000000000040546e\n'
p209
tp210
sS'fadvise'
p211
(S'\n__stdcall fadvise(FILE * fp)\n'
p212
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00402118\nCALL 0x004015e0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x004020f0\nPOP RBX\nRET\n'
p214
S'53\n89 f3\n48 85 ff\n74 10\ne8 d3 f4 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p215
S'.text:0000000000402100\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402106\n.text:0000000000402108\n.text:000000000040210d\n.text:000000000040210f\n.text:0000000000402111\n.text:0000000000402113\n.text:0000000000402115\n.text:0000000000402116\n.text:0000000000402118\n.text:0000000000402119\n'
p216
tp217
sS'set_program_name'
p218
(S'\n__stdcall set_program_name(char * argv0)\n'
p219
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402a71\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004014f0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402a5b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405d08\nMOV EDX,0x7\nCALL 0x00401400\nTEST EAX,EAX\nJNZ 0x00402a5b\nMOV ESI,0x405d10\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401400\nTEST EAX,EAX\nJNZ 0x00402a58\nADD R14,0x3\nMOV qword ptr [0x00609280],R14\nMOV RBX,R14\nMOV qword ptr [0x006092e0],RBX\nMOV qword ptr [0x006092a0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092c0]\nMOV EDI,0x405cd0\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401720\nCALL 0x004013e0\n'
p221
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 ea ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 08 5d 40 00\nba 07 00 00 00\ne8 cd e9 ff ff\n85 c0\n75 24\nbe 10 5d 40 00\nba 03 00 00 00\n4c 89 f7\ne8 b7 e9 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 28 68 20 00\n4c 89 f3\n48 89 1d 7e 68 20 00\n48 89 1d 37 68 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 48 68 20 00\nbf d0 5c 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 94 ec ff ff\ne8 4f e9 ff ff\n'
p222
S'.text:00000000004029f0\n.text:00000000004029f2\n.text:00000000004029f3\n.text:00000000004029f4\n.text:00000000004029f7\n.text:00000000004029fa\n.text:00000000004029fc\n.text:0000000000402a01\n.text:0000000000402a04\n.text:0000000000402a09\n.text:0000000000402a0c\n.text:0000000000402a10\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a1a\n.text:0000000000402a1e\n.text:0000000000402a20\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2e\n.text:0000000000402a33\n.text:0000000000402a35\n.text:0000000000402a37\n.text:0000000000402a3c\n.text:0000000000402a41\n.text:0000000000402a44\n.text:0000000000402a49\n.text:0000000000402a4b\n.text:0000000000402a4d\n.text:0000000000402a51\n.text:0000000000402a58\n.text:0000000000402a5b\n.text:0000000000402a62\n.text:0000000000402a69\n.text:0000000000402a6d\n.text:0000000000402a6e\n.text:0000000000402a70\n.text:0000000000402a71\n.text:0000000000402a78\n.text:0000000000402a7d\n.text:0000000000402a82\n.text:0000000000402a87\n.text:0000000000402a8c\n'
p223
tp224
sS'fileno'
p225
(S'\n__stdcall fileno(FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609128)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00609128]\n'
p228
S'ff 25 42 7b 20 00\n'
p229
S'.plt:00000000004015e0\n'
p230
tp231
sS'quotearg_buffer'
p232
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p233
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6092f0\nCMOVNZ RBP,R8\nCALL 0x004013f0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402c10\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd f0 92 60 00\n49 0f 45 e8\ne8 38 e8 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:0000000000402b90\n.text:0000000000402b91\n.text:0000000000402b93\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b99\n.text:0000000000402b9a\n.text:0000000000402b9b\n.text:0000000000402b9e\n.text:0000000000402ba1\n.text:0000000000402ba4\n.text:0000000000402ba7\n.text:0000000000402baa\n.text:0000000000402baf\n.text:0000000000402bb3\n.text:0000000000402bb8\n.text:0000000000402bbb\n.text:0000000000402bbd\n.text:0000000000402bc1\n.text:0000000000402bc5\n.text:0000000000402bc9\n.text:0000000000402bcd\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bd6\n.text:0000000000402bd9\n.text:0000000000402bdc\n.text:0000000000402bdf\n.text:0000000000402be3\n.text:0000000000402be4\n.text:0000000000402be9\n.text:0000000000402bed\n.text:0000000000402bf1\n.text:0000000000402bf3\n.text:0000000000402bf7\n.text:0000000000402bf8\n.text:0000000000402bfa\n.text:0000000000402bfc\n.text:0000000000402bfe\n.text:0000000000402c00\n.text:0000000000402c01\n'
p237
tp238
sS'quotearg_colon'
p239
(S'\n__stdcall quotearg_colon(char * arg)\n'
p240
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV ESI,0x3a\nJMP 0x00403d70\n'
p242
S'be 3a 00 00 00\neb e9\n'
p243
S'.text:0000000000403d80\n.text:0000000000403d85\n'
p244
tp245
sS'mbrtowc'
p246
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x006090a0]\n'
p249
S'ff 25 ca 7b 20 00\n'
p250
S'.plt:00000000004014d0\n'
p251
tp252
sS'xstrtoumax'
p253
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p254
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404c96;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404c96;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00404bc5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00404ba3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00404ba3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404c77;\u000a  default:\u000aswitchD_00404bc5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404c77;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404c77:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404c96:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404cb3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004013f0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401760\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00404ab0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404ca2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x004016f0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00404b10\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00404b41\nCMP EAX,0x22\nJNZ 0x00404ca2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00404b4c\nJMP 0x00404c96\nTEST R12,R12\nJZ 0x00404ca2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404ca2\nMOV RDI,R12\nCALL 0x004014e0\nTEST RAX,RAX\nJZ 0x00404ca2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00404b4c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404c96\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404c96\nMOV RDI,R12\nCALL 0x004014e0\nTEST RAX,RAX\nJZ 0x00404bde\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004014e0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00404ba3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00404baa\nCMP EAX,0x44\nJZ 0x00404baa\nCMP EAX,0x69\nJNZ 0x00404ba3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00404bb4\nMOV EBP,0x1\nJMP 0x00404bb4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00404bde\nXOR EAX,EAX\nJMP qword ptr [0x4065e0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404ca2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404c77\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00404d00\nJMP 0x00404c7c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404c77\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00404cd0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x406790\nMOV ESI,0x4067b6\nMOV EDX,0x60\nMOV ECX,0x4067c6\nCALL 0x00401510\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 62 c9 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 c3 cc ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 0c cc ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 b4 c9 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 7c c9 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 6a c9 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd e0 65 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 90 67 40 00\nbe b6 67 40 00\nba 60 00 00 00\nb9 c6 67 40 00\ne8 44 c8 ff ff\n'
p257
S'.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a67\n.text:0000000000404a69\n.text:0000000000404a6a\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a74\n.text:0000000000404a77\n.text:0000000000404a7a\n.text:0000000000404a7e\n.text:0000000000404a84\n.text:0000000000404a89\n.text:0000000000404a8e\n.text:0000000000404a91\n.text:0000000000404a98\n.text:0000000000404a9d\n.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404ab0\n.text:0000000000404ab3\n.text:0000000000404ab6\n.text:0000000000404abb\n.text:0000000000404abd\n.text:0000000000404ac0\n.text:0000000000404ac5\n.text:0000000000404ac9\n.text:0000000000404ace\n.text:0000000000404ad0\n.text:0000000000404ad6\n.text:0000000000404ad9\n.text:0000000000404adc\n.text:0000000000404adf\n.text:0000000000404ae4\n.text:0000000000404ae8\n.text:0000000000404aec\n.text:0000000000404aef\n.text:0000000000404af1\n.text:0000000000404af4\n.text:0000000000404af6\n.text:0000000000404af8\n.text:0000000000404afb\n.text:0000000000404b01\n.text:0000000000404b06\n.text:0000000000404b09\n.text:0000000000404b0b\n.text:0000000000404b10\n.text:0000000000404b13\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b2c\n.text:0000000000404b2f\n.text:0000000000404b35\n.text:0000000000404b3d\n.text:0000000000404b3f\n.text:0000000000404b41\n.text:0000000000404b43\n.text:0000000000404b46\n.text:0000000000404b4c\n.text:0000000000404b50\n.text:0000000000404b54\n.text:0000000000404b56\n.text:0000000000404b5c\n.text:0000000000404b5f\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6e\n.text:0000000000404b71\n.text:0000000000404b76\n.text:0000000000404b7b\n.text:0000000000404b7e\n.text:0000000000404b80\n.text:0000000000404b84\n.text:0000000000404b87\n.text:0000000000404b89\n.text:0000000000404b8c\n.text:0000000000404b8e\n.text:0000000000404b91\n.text:0000000000404b93\n.text:0000000000404b95\n.text:0000000000404b99\n.text:0000000000404b9c\n.text:0000000000404ba1\n.text:0000000000404ba3\n.text:0000000000404ba8\n.text:0000000000404baa\n.text:0000000000404baf\n.text:0000000000404bb4\n.text:0000000000404bb8\n.text:0000000000404bbb\n.text:0000000000404bbe\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc5\n.text:0000000000404bcc\n.text:0000000000404bcf\n.text:0000000000404bd4\n.text:0000000000404bd9\n.text:0000000000404bde\n.text:0000000000404be2\n.text:0000000000404be7\n.text:0000000000404bea\n.text:0000000000404bed\n.text:0000000000404bf2\n.text:0000000000404bf5\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c01\n.text:0000000000404c04\n.text:0000000000404c09\n.text:0000000000404c0e\n.text:0000000000404c10\n.text:0000000000404c13\n.text:0000000000404c18\n.text:0000000000404c1d\n.text:0000000000404c1f\n.text:0000000000404c22\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c2c\n.text:0000000000404c31\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c40\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c4a\n.text:0000000000404c4f\n.text:0000000000404c54\n.text:0000000000404c56\n.text:0000000000404c59\n.text:0000000000404c5e\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6d\n.text:0000000000404c6f\n.text:0000000000404c72\n.text:0000000000404c77\n.text:0000000000404c7c\n.text:0000000000404c7e\n.text:0000000000404c82\n.text:0000000000404c86\n.text:0000000000404c8a\n.text:0000000000404c8c\n.text:0000000000404c8f\n.text:0000000000404c93\n.text:0000000000404c96\n.text:0000000000404c9a\n.text:0000000000404c9f\n.text:0000000000404ca2\n.text:0000000000404ca4\n.text:0000000000404ca8\n.text:0000000000404ca9\n.text:0000000000404cab\n.text:0000000000404cad\n.text:0000000000404caf\n.text:0000000000404cb1\n.text:0000000000404cb2\n.text:0000000000404cb3\n.text:0000000000404cb8\n.text:0000000000404cbd\n.text:0000000000404cc2\n.text:0000000000404cc7\n'
p258
tp259
sS'rpl_fflush'
p260
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p261
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609140)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404e2d\nMOV RDI,RBX\nCALL 0x00401640\nTEST EAX,EAX\nJZ 0x00404e2d\nMOV RDI,RBX\nCALL 0x00404e40\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401610\n'
p263
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 1f c8 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 da c7 ff ff\n'
p264
S'.text:0000000000404e10\n.text:0000000000404e11\n.text:0000000000404e14\n.text:0000000000404e17\n.text:0000000000404e19\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e25\n.text:0000000000404e28\n.text:0000000000404e2d\n.text:0000000000404e30\n.text:0000000000404e31\n'
p265
tp266
sS'__assert_fail'
p267
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090c0)();\u000a  return;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006090c0]\n'
p270
S'ff 25 aa 7b 20 00\n'
p271
S'.plt:0000000000401510\n'
p272
tp273
sS'setlocale'
p274
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609170]\n'
p277
S'ff 25 fa 7a 20 00\n'
p278
S'.plt:0000000000401670\n'
p279
tp280
sS'c_toupper'
p281
(S'\n__stdcall c_toupper()\n'
p282
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p284
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p285
S'.text:0000000000405360\n.text:0000000000405363\n.text:0000000000405366\n.text:0000000000405369\n.text:000000000040536c\n'
p286
tp287
sS'bindtextdomain'
p288
(S'\n__stdcall bindtextdomain()\n'
p289
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609078)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609078]\n'
p291
S'ff 25 f2 7b 20 00\n'
p292
S'.plt:0000000000401480\n'
p293
tp294
sS'set_char_quoting'
p295
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p296
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p297
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6092f0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p298
S'89 f1\n48 85 ff\nbe f0 92 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p299
S'.text:0000000000402b00\n.text:0000000000402b02\n.text:0000000000402b05\n.text:0000000000402b0a\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b13\n.text:0000000000402b17\n.text:0000000000402b1c\n.text:0000000000402b1f\n.text:0000000000402b21\n.text:0000000000402b23\n.text:0000000000402b26\n.text:0000000000402b28\n.text:0000000000402b2b\n.text:0000000000402b2d\n.text:0000000000402b30\n.text:0000000000402b35\n'
p300
tp301
sS'quotearg_n'
p302
(S'\n__stdcall quotearg_n(char * arg)\n'
p303
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RDX,-0x1\nMOV ECX,0x6092f0\nJMP 0x004039f0\n'
p305
S'48 c7 c2 ff ff ff ff\nb9 f0 92 60 00\neb 02\n'
p306
S'.text:00000000004039e0\n.text:00000000004039e7\n.text:00000000004039ec\n'
p307
tp308
sS'mbsinit'
p309
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x006091d8]\n'
p312
S'ff 25 92 7a 20 00\n'
p313
S'.plt:0000000000401740\n'
p314
tp315
sS'dcgettext'
p316
(S'\n__stdcall dcgettext()\n'
p317
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609080)();\u000a  return;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00609080]\n'
p319
S'ff 25 ea 7b 20 00\n'
p320
S'.plt:0000000000401490\n'
p321
tp322
sS'close_stream'
p323
(S'\n__stdcall close_stream(FILE * stream)\n'
p324
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401430\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401590\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404d90\nTEST EBP,EBP\nJZ 0x004053ab\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004053cf\nCALL 0x004013f0\nMOV dword ptr [RAX],0x0\nJMP 0x004053cf\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004053cf\nTEST CL,CL\nJNZ 0x004053cf\nCALL 0x004013f0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p326
S'55\n41 56\n53\n48 89 fb\ne8 b4 c0 ff ff\n49 89 c6\n48 89 df\ne8 09 c2 ff ff\n89 c5\n48 89 df\ne8 ff f9 ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 4d c0 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 2e c0 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p327
S'.text:0000000000405370\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405374\n.text:0000000000405377\n.text:000000000040537c\n.text:000000000040537f\n.text:0000000000405382\n.text:0000000000405387\n.text:0000000000405389\n.text:000000000040538c\n.text:0000000000405391\n.text:0000000000405393\n.text:0000000000405395\n.text:000000000040539a\n.text:000000000040539c\n.text:000000000040539e\n.text:00000000004053a3\n.text:00000000004053a9\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b7\n.text:00000000004053b9\n.text:00000000004053bb\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053cc\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053d2\n.text:00000000004053d4\n.text:00000000004053d5\n'
p328
tp329
sS'quotearg_colon_mem'
p330
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p331
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'MOV EDX,0x3a\nJMP 0x00403d00\n'
p333
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p334
S'.text:0000000000403d90\n.text:0000000000403d95\n'
p335
tp336
sS'human_readable'
p337
(S'\n__stdcall human_readable(uintmax_t n, char * buf, uintmax_t from_block_size, uintmax_t to_block_size)\n'
p338
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000achar * human_readable(uintmax_t n,char *buf,uintmax_t from_block_size,uintmax_t to_block_size)\u000a\u000a{\u000a  uint uVar1;\u000a  char *grouping;\u000a  undefined auVar2 [16];\u000a  undefined auVar3 [16];\u000a  float fVar4;\u000a  uint uVar5;\u000a  lconv *plVar6;\u000a  size_t __n;\u000a  char *__src;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  char cVar9;\u000a  uint uVar10;\u000a  uint uVar11;\u000a  size_t __n_00;\u000a  char *thousands_sep;\u000a  ulong uVar12;\u000a  uint uVar13;\u000a  uint uVar14;\u000a  char *number;\u000a  uint uVar15;\u000a  ulong in_R8;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  char *__s;\u000a  long lVar18;\u000a  char *pcVar19;\u000a  bool bVar20;\u000a  longdouble damt;\u000a  \u000a  uVar13 = (uint)from_block_size;\u000a  uVar5 = 1000;\u000a  if ((from_block_size & 0x20) != 0) {\u000a    uVar5 = 0x400;\u000a  }\u000a  plVar6 = localeconv();\u000a  __s = plVar6->decimal_point;\u000a  __n = strlen(__s);\u000a  bVar20 = __n - 1 < 0x10;\u000a  __n_00 = 1;\u000a  if (bVar20) {\u000a    __n_00 = __n;\u000a  }\u000a  __src = ".";\u000a  if (bVar20) {\u000a    __src = __s;\u000a  }\u000a  __s = plVar6->thousands_sep;\u000a  grouping = plVar6->grouping;\u000a  __n = strlen(__s);\u000a  thousands_sep =\u000a              \u000a       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a       + 0xca;\u000a  if (__n < 0x11) {\u000a    thousands_sep = __s;\u000a  }\u000a  __s = buf + 0x287;\u000a  if (to_block_size < in_R8) {\u000a    if ((to_block_size != 0) && (in_R8 % to_block_size == 0)) {\u000a      auVar3 = ZEXT816(in_R8) / ZEXT816(to_block_size);\u000a      uVar7 = SUB168(ZEXT816(n) / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      auVar2 = ZEXT816((ulong)(SUB168(ZEXT816(n) % (auVar3 & (undefined  [16])0xffffffffffffffff),0)\u000a                              * 10));\u000a      uVar8 = SUB168(auVar2 / (auVar3 & (undefined  [16])0xffffffffffffffff),0);\u000a      uVar16 = SUB168(auVar2 % (auVar3 & (undefined  [16])0xffffffffffffffff),0) * 2;\u000a      uVar12 = (ulong)(uVar16 != 0);\u000a      if (SUB168(auVar3,0) <= uVar16) {\u000a        uVar12 = (ulong)(-(uint)(SUB168(auVar3,0) < uVar16) & 1 | 2);\u000a      }\u000aLAB_00402275:\u000a      uVar11 = (uint)uVar8;\u000a      uVar10 = (uint)uVar12;\u000a      uVar15 = 0xffffffff;\u000a      number = __s;\u000a      if ((from_block_size & 0x10) != 0) {\u000a        uVar16 = (ulong)uVar5;\u000a        uVar15 = 0;\u000a        number = __s;\u000a        if (uVar16 <= uVar7) {\u000a          uVar15 = 0;\u000a          uVar17 = uVar7;\u000a          do {\u000a            uVar7 = uVar17 / uVar16;\u000a            uVar10 = (int)uVar8 + (int)(uVar17 % uVar16) * 10;\u000a            uVar11 = uVar10 / uVar5;\u000a            uVar1 = ((int)uVar12 >> 1) + (uVar10 % uVar5) * 2;\u000a            uVar14 = (int)uVar12 + uVar1;\u000a            uVar10 = (uint)(uVar14 != 0);\u000a            if (uVar5 <= uVar1) {\u000a              uVar10 = -(uint)(uVar5 < uVar14) & 1 | 2;\u000a            }\u000a            uVar12 = (ulong)uVar10;\u000a            uVar15 = uVar15 + 1;\u000a            uVar8 = (ulong)uVar11;\u000a          } while (((int)uVar15 < 8) && (uVar17 = uVar7, uVar16 <= uVar7));\u000a          number = __s;\u000a          if (uVar7 < 10) {\u000a            if ((uVar13 & 3) == 1) {\u000a              if ((uVar11 & 1) + uVar10 < 3) goto LAB_00402506;\u000aLAB_004024f0:\u000a              uVar11 = uVar11 + 1;\u000a              uVar10 = 0;\u000a              if (uVar11 != 10) goto LAB_00402506;\u000a              uVar7 = uVar7 + 1;\u000a              uVar10 = 0;\u000a              if (uVar7 < 10) {\u000a                uVar11 = 0;\u000a                goto LAB_00402506;\u000a              }\u000a              uVar7 = 10;\u000a              number = __s;\u000a            }\u000a            else {\u000a              if (((from_block_size & 3) == 0) && (uVar10 != 0)) goto LAB_004024f0;\u000aLAB_00402506:\u000a              if (((from_block_size & 8) != 0) && (number = __s, uVar11 == 0)) goto LAB_00402557;\u000a              buf[0x286] = (char)uVar11 + '0';\u000a              memcpy(buf + (0x286 - __n_00),__src,__n_00);\u000a              number = buf + (0x286 - __n_00);\u000a            }\u000a            uVar10 = 0;\u000a            uVar11 = 0;\u000a          }\u000a        }\u000a      }\u000aLAB_00402557:\u000a      if ((from_block_size & 3) == 0) {\u000a        pcVar19 = number;\u000a        if (uVar11 + uVar10 != 0 && SCARRY4(uVar11,uVar10) == (int)(uVar11 + uVar10) < 0)\u000a        goto LAB_00402581;\u000a      }\u000a      else {\u000a        pcVar19 = number;\u000a        if ((((byte)from_block_size & 3) == 1) &&\u000a           (pcVar19 = number, 5 < (int)((uint)(((uint)uVar7 & 1) + uVar10 != 0) + uVar11))) {\u000aLAB_00402581:\u000a          uVar7 = uVar7 + 1;\u000a          pcVar19 = number;\u000a          if (((int)uVar15 < 8) &&\u000a             ((pcVar19 = number, (from_block_size & 0x10) != 0 &&\u000a              (pcVar19 = number, uVar7 == (ulong)uVar5)))) {\u000a            uVar15 = uVar15 + 1;\u000a            if ((from_block_size & 8) == 0) {\u000a              number[-1] = '0';\u000a              number = number + (-1 - __n_00);\u000a              memcpy(number,__src,__n_00);\u000a            }\u000a            uVar7 = 1;\u000a            pcVar19 = number;\u000a          }\u000a        }\u000a      }\u000a      do {\u000a        number[-1] = (char)uVar7 +\u000a                     ((byte)((SUB168(ZEXT816(uVar7) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                             0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a        number = number + -1;\u000a        bVar20 = 9 < uVar7;\u000a        uVar7 = uVar7 / 10;\u000a      } while (bVar20);\u000a      goto joined_r0x00402462;\u000a    }\u000a  }\u000a  else {\u000a    if (to_block_size % in_R8 == 0) {\u000a      uVar12 = 0;\u000a      uVar7 = SUB168(ZEXT816(to_block_size) / ZEXT816(in_R8),0) * n;\u000a      uVar8 = 0;\u000a      if (SUB168(ZEXT816(uVar7) /\u000a                 (ZEXT816(to_block_size) / ZEXT816(in_R8) & (undefined  [16])0xffffffffffffffff),0)\u000a          == n) goto LAB_00402275;\u000a    }\u000a  }\u000a  if ((from_block_size & 0x10) == 0) {\u000a    adjust_value();\u000a    lVar18 = 0;\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    uVar15 = 0xffffffff;\u000a  }\u000a  else {\u000a    fVar4 = 1.00000000;\u000a    uVar15 = 0;\u000a    do {\u000a      fVar4 = fVar4 * (float)(ulong)uVar5;\u000a      uVar15 = uVar15 + 1;\u000a      if (7 < (int)uVar15) break;\u000a    } while ((float)(ulong)uVar5 * fVar4 <=\u000a             ((float)n + *(float *)(&DAT_00405c18 + (ulong)(-1 < (long)n) * 4)) *\u000a             (((float)in_R8 + *(float *)(&DAT_00405c18 + (ulong)(-1 < (long)in_R8) * 4)) /\u000a             ((float)to_block_size +\u000a             *(float *)(&DAT_00405c18 + (ulong)(-1 < (long)to_block_size) * 4))));\u000a    adjust_value();\u000a    __sprintf_chk(buf,1,0xffffffffffffffff);\u000a    __n = strlen(buf);\u000a    if ((((ulong)((uVar13 & 0x20) >> 5) ^ 3) + __n_00 < __n) ||\u000a       ((lVar18 = __n_00 + 1, (from_block_size & 8) != 0 && (buf[__n - 1] == '0')))) {\u000a      adjust_value();\u000a      lVar18 = 0;\u000a      __sprintf_chk(buf,1,0xffffffffffffffff);\u000a      __n = strlen(buf);\u000a    }\u000a  }\u000a  number = __s + -__n;\u000a  memmove(number,buf,__n);\u000a  pcVar19 = __s + -lVar18;\u000ajoined_r0x00402462:\u000a  if ((from_block_size & 4) != 0) {\u000a    number = group_number(number,(size_t)(pcVar19 + -(long)number),grouping,thousands_sep);\u000a  }\u000a  if ((char)(byte)from_block_size < 0) {\u000a    if (((int)uVar15 < 0) && (uVar15 = 0, 1 < in_R8)) {\u000a      uVar15 = 0;\u000a      uVar12 = 1;\u000a      do {\u000a        if (uVar15 == 7) {\u000a          uVar15 = 8;\u000a          break;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar12 = uVar12 * (ulong)uVar5;\u000a      } while (uVar12 < in_R8);\u000a    }\u000a    if (((from_block_size & 0x40) != 0) && ((uVar15 | uVar13 & 0x100) != 0)) {\u000a      buf[0x287] = ' ';\u000a      __s = buf + 0x288;\u000a    }\u000a    if (uVar15 != 0) {\u000a      if (((from_block_size & 0x20) != 0) || (cVar9 = 'k', uVar15 != 1)) {\u000a        cVar9 = ""[(long)(int)uVar15];\u000a      }\u000a      *__s = cVar9;\u000a      __s = __s + 1;\u000a    }\u000a    if ((from_block_size & 0x100) != 0) {\u000a      if (((from_block_size & 0x20) != 0) && (uVar15 != 0)) {\u000a        *__s = 'i';\u000a        __s = __s + 1;\u000a      }\u000a      *__s = 'B';\u000a      __s = __s + 1;\u000a    }\u000a  }\u000a  *__s = 0;\u000a  return number;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RSI\nMOV R13,RDI\nMOV EAX,EDX\nAND EAX,0x3\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x18],EDX\nMOV EAX,EDX\nAND EAX,0x20\nMOV dword ptr [RSP + 0x20],EAX\nMOV EAX,0x400\nMOV ECX,0x3e8\nCMOVNZ ECX,EAX\nMOV dword ptr [RSP + 0x1c],ECX\nCALL 0x00401450\nMOV RBX,RAX\nMOV RBP,qword ptr [RBX]\nMOV RDI,RBP\nCALL 0x004014b0\nLEA RCX,[RAX + -0x1]\nCMP RCX,0x10\nMOV ECX,0x1\nCMOVC RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV EAX,0x405c40\nCMOVC RAX,RBP\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RBX,qword ptr [RBX + 0x10]\nMOV RDI,RBP\nCALL 0x004014b0\nCMP RAX,0x11\nMOV ECX,0x406399\nCMOVC RCX,RBP\nLEA RAX,[0x287 + R12]\nMOV qword ptr [RSP + 0x10],RAX\nCMP R14,R15\nMOV qword ptr [RSP + 0x50],R14\nMOV qword ptr [RSP + 0x28],R12\nMOV qword ptr [RSP + 0x60],RBX\nMOV qword ptr [RSP + 0x58],RCX\nJBE 0x0040223d\nTEST R15,R15\nMOV R8D,dword ptr [RSP + 0x18]\nJZ 0x004022a3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nTEST RDX,RDX\nJNZ 0x004022a3\nXOR EDX,EDX\nMOV RAX,R14\nDIV R15\nMOV RSI,RAX\nXOR EDX,EDX\nMOV RAX,R13\nDIV RSI\nMOV R12,RAX\nADD RDX,RDX\nLEA RAX,[RDX + RDX*0x4]\nXOR EDX,EDX\nDIV RSI\nMOV RCX,RAX\nXOR EBX,EBX\nADD RDX,RDX\nSETNZ BL\nCMP RSI,RDX\nSBB EAX,EAX\nAND EAX,0x1\nOR EAX,0x2\nCMP RDX,RSI\nCMOVNC EBX,EAX\nJMP 0x00402275\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nTEST RDX,RDX\nMOV R8D,dword ptr [RSP + 0x18]\nJNZ 0x004022a3\nXOR EBX,EBX\nXOR EDX,EDX\nMOV RAX,R15\nDIV R14\nMOV RCX,RAX\nMOV R12,RCX\nIMUL R12,R13\nXOR EDX,EDX\nMOV RAX,R12\nDIV RCX\nCMP RAX,R13\nMOV ECX,0x0\nJNZ 0x004022a3\nMOV R13D,R8D\nAND R13D,0x10\nMOV EBP,0xffffffff\nJZ 0x0040246d\nMOV ESI,dword ptr [RSP + 0x1c]\nMOV R9D,ESI\nXOR EBP,EBP\nCMP R9,R12\nJBE 0x00402477\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00402557\nMOV qword ptr [RSP + 0x70],R14\nXOR EAX,EAX\nTEST R14,R14\nSETNS AL\nFILD qword ptr [RSP + 0x70]\nFADD dword ptr [0x405c18 + RAX*0x4]\nMOV qword ptr [RSP + 0x78],R13\nXOR EAX,EAX\nTEST R13,R13\nSETNS AL\nFILD qword ptr [RSP + 0x78]\nFADD dword ptr [0x405c18 + RAX*0x4]\nMOV qword ptr [0x80 + RSP],R15\nXOR EAX,EAX\nTEST R15,R15\nSETNS AL\nFILD qword ptr [0x80 + RSP]\nFADD dword ptr [0x405c18 + RAX*0x4]\nFDIVRP ST2,ST0\nFMULP\nTEST R8B,0x10\nJNZ 0x00402344\nFSTP tword ptr [RSP]\nMOV EDI,dword ptr [RSP + 0x24]\nCALL 0x00402710\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x405c42\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401770\nMOV RDI,R12\nCALL 0x004014b0\nMOV EBP,0xffffffff\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0040243f\nMOV EAX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x68],RAX\nFLD1\nXOR EBP,EBP\nFILD qword ptr [RSP + 0x68]\nFLDZ\nNOP word ptr [RAX + RAX*0x1]\nFSTP ST0\nFMUL ST1\nINC EBP\nFLD ST0\nFMUL ST2\nCMP EBP,0x7\nJG 0x00402379\nFXCH ST3\nFUCOMI ST0,ST3\nFSTP ST3\nFLDZ\nJNC 0x00402360\nFSTP ST1\nFSTP ST0\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFSTP tword ptr [RSP]\nMOV EBX,dword ptr [RSP + 0x24]\nMOV EDI,EBX\nCALL 0x00402710\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x405c48\nXOR EAX,EAX\nMOV R12,qword ptr [RSP + 0x28]\nMOV RDI,R12\nCALL 0x00401770\nMOV RDI,R12\nCALL 0x004014b0\nMOV ECX,dword ptr [RSP + 0x20]\nSHR RCX,0x5\nXOR RCX,0x3\nMOV R14,qword ptr [RSP + 0x40]\nADD RCX,R14\nCMP RCX,RAX\nMOV R13,qword ptr [RSP + 0x10]\nJC 0x004023f4\nFLD tword ptr [RSP + 0x30]\nFSTP ST0\nINC R14\nTEST byte ptr [RSP + 0x18],0x8\nJZ 0x0040243f\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x30\nJNZ 0x0040243f\nFLD dword ptr [0x00405c20]\nFLD ST0\nFSTP tword ptr [RSP + 0x40]\nFLD tword ptr [RSP + 0x30]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00402710\nFLD tword ptr [RSP + 0x40]\nFDIVP\nFSTP tword ptr [RSP]\nXOR R14D,R14D\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x405c42\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401770\nMOV RDI,R12\nCALL 0x004014b0\nMOV RBX,R13\nSUB RBX,RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,RAX\nCALL 0x004016a0\nMOV R15,R13\nSUB R15,R14\nMOV R8D,dword ptr [RSP + 0x18]\nTEST R8B,0x4\nJNZ 0x0040261b\nJMP 0x0040263b\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00402557\nXOR EBP,EBP\nNOP dword ptr [RAX]\nXOR EDX,EDX\nMOV RAX,R12\nDIV R9\nLEA EDX,[RDX + RDX*0x4]\nLEA ECX,[RCX + RDX*0x2]\nMOV EDI,EBX\nSAR EDI,1\nXOR EDX,EDX\nMOV R12,RAX\nMOV EAX,ECX\nDIV ESI\nLEA ECX,[RDI + RDX*0x2]\nXOR EDX,EDX\nADD EBX,ECX\nSETNZ DL\nCMP ESI,EBX\nSBB EDI,EDI\nAND EDI,0x1\nOR EDI,0x2\nCMP ECX,ESI\nMOV EBX,EDX\nCMOVNC EBX,EDI\nINC EBP\nCMP EBP,0x7\nMOV ECX,EAX\nJG 0x004024c4\nCMP R9,R12\nJBE 0x00402480\nCMP R12,0x9\nMOV EAX,dword ptr [RSP + 0x24]\nJA 0x004024e1\nCMP EAX,0x1\nJNZ 0x004024e8\nMOV EAX,ECX\nAND EAX,0x1\nADD EAX,EBX\nCMP EAX,0x2\nJA 0x004024f0\nJMP 0x00402506\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00402557\nTEST EAX,EAX\nJNZ 0x00402506\nTEST EBX,EBX\nJZ 0x00402506\nINC ECX\nXOR EBX,EBX\nCMP ECX,0xa\nJNZ 0x00402506\nINC R12\nXOR EBX,EBX\nCMP R12,0x9\nJA 0x0040254a\nXOR ECX,ECX\nTEST R8B,0x8\nJZ 0x00402517\nTEST ECX,ECX\nJNZ 0x00402517\nMOV R15,qword ptr [RSP + 0x10]\nJMP 0x00402557\nADD ECX,0x30\nMOV RAX,qword ptr [RSP + 0x28]\nLEA R15,[0x286 + RAX]\nMOV byte ptr [0x286 + RAX],CL\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x004015c0\nMOV R8D,dword ptr [RSP + 0x18]\nXOR EBX,EBX\nJMP 0x00402555\nMOV R12D,0xa\nMOV R15,qword ptr [RSP + 0x10]\nXOR ECX,ECX\nMOV EAX,R8D\nAND AL,0x3\nJZ 0x0040257d\nCMP AL,0x1\nJNZ 0x004025c7\nMOVSXD RAX,EBX\nMOV EDX,R12D\nAND EDX,0x1\nXOR ESI,ESI\nADD RDX,RAX\nSETNZ SIL\nADD ESI,ECX\nCMP ESI,0x5\nJG 0x00402581\nJMP 0x004025c7\nADD ECX,EBX\nJLE 0x004025c7\nINC R12\nCMP EBP,0x7\nJG 0x004025c7\nTEST R13D,R13D\nJZ 0x004025c7\nMOV EAX,dword ptr [RSP + 0x1c]\nCMP R12,RAX\nJNZ 0x004025c7\nINC EBP\nTEST R8B,0x8\nJNZ 0x004025c1\nMOV byte ptr [R15 + -0x1],0x30\nDEC R15\nMOV RDX,qword ptr [RSP + 0x40]\nSUB R15,RDX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x004015c0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV R12D,0x1\nMOV R13,qword ptr [RSP + 0x10]\nMOV RCX,-0x3333333333333333\nMOV RBX,R15\nNOP dword ptr [RAX]\nMOV RAX,R12\nMUL RCX\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV ESI,R12D\nSUB ESI,EAX\nOR SIL,0x30\nMOV byte ptr [RBX + -0x1],SIL\nDEC RBX\nSHR RDX,0x3\nCMP R12,0x9\nMOV R12,RDX\nJA 0x004025e0\nMOV R12,qword ptr [RSP + 0x28]\nTEST R8B,0x4\nJZ 0x0040263b\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x60]\nMOV RCX,qword ptr [RSP + 0x58]\nCALL 0x004027e0\nMOV R8D,dword ptr [RSP + 0x18]\nMOV RBX,RAX\nMOV R14,qword ptr [RSP + 0x50]\nMOV EAX,dword ptr [RSP + 0x1c]\nTEST R8B,R8B\nJNS 0x004026ef\nTEST EBP,EBP\nJNS 0x00402687\nXOR EBP,EBP\nCMP R14,0x2\nJC 0x00402687\nMOV EAX,EAX\nXOR EBP,EBP\nMOV ECX,0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP EBP,0x7\nJZ 0x00402682\nINC EBP\nIMUL RCX,RAX\nCMP RCX,R14\nJC 0x00402670\nJMP 0x00402687\nMOV EBP,0x8\nMOV EAX,R8D\nAND EAX,0x100\nTEST R8B,0x40\nJZ 0x004026ae\nMOV ECX,EBP\nOR ECX,EAX\nJZ 0x004026ae\nMOV byte ptr [0x287 + R12],0x20\nADD R12,0x288\nMOV R13,R12\nTEST EBP,EBP\nJZ 0x004026d0\nCMP dword ptr [RSP + 0x20],0x0\nJNZ 0x004026c0\nMOV CL,0x6b\nCMP EBP,0x1\nJZ 0x004026c9\nMOVSXD RCX,EBP\nMOV CL,byte ptr [0x405ca0 + RCX]\nMOV byte ptr [R13],CL\nINC R13\nTEST EAX,EAX\nJZ 0x004026ef\nCMP dword ptr [RSP + 0x20],0x0\nJZ 0x004026e7\nTEST EBP,EBP\nJZ 0x004026e7\nMOV byte ptr [R13],0x69\nINC R13\nMOV byte ptr [R13],0x42\nINC R13\nMOV byte ptr [R13],0x0\nMOV RAX,RBX\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p340
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n4d 89 c6\n49 89 cf\n49 89 f4\n49 89 fd\n89 d0\n83 e0 03\n89 44 24 24\n89 54 24 18\n89 d0\n83 e0 20\n89 44 24 20\nb8 00 04 00 00\nb9 e8 03 00 00\n0f 45 c8\n89 4c 24 1c\ne8 e7 f2 ff ff\n48 89 c3\n48 8b 2b\n48 89 ef\ne8 39 f3 ff ff\n48 8d 48 ff\n48 83 f9 10\nb9 01 00 00 00\n48 0f 42 c8\n48 89 4c 24 40\nb8 40 5c 40 00\n48 0f 42 c5\n48 89 44 24 30\n48 8b 6b 08\n48 8b 5b 10\n48 89 ef\ne8 05 f3 ff ff\n48 83 f8 11\nb9 99 63 40 00\n48 0f 42 cd\n49 8d 84 24 87 02 00 00\n48 89 44 24 10\n4d 39 fe\n4c 89 74 24 50\n4c 89 64 24 28\n48 89 5c 24 60\n48 89 4c 24 58\n76 5f\n4d 85 ff\n44 8b 44 24 18\n0f 84 b7 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 85 d2\n0f 85 a6 00 00 00\n31 d2\n4c 89 f0\n49 f7 f7\n48 89 c6\n31 d2\n4c 89 e8\n48 f7 f6\n49 89 c4\n48 01 d2\n48 8d 04 92\n31 d2\n48 f7 f6\n48 89 c1\n31 db\n48 01 d2\n0f 95 c3\n48 39 d6\n19 c0\n83 e0 01\n83 c8 02\n48 39 f2\n0f 43 d8\neb 38\n31 d2\n4c 89 f8\n49 f7 f6\n48 85 d2\n44 8b 44 24 18\n75 54\n31 db\n31 d2\n4c 89 f8\n49 f7 f6\n48 89 c1\n49 89 cc\n4d 0f af e5\n31 d2\n4c 89 e0\n48 f7 f1\n4c 39 e8\nb9 00 00 00 00\n75 2e\n45 89 c5\n41 83 e5 10\nbd ff ff ff ff\n0f 84 e6 01 00 00\n8b 74 24 1c\n41 89 f1\n31 ed\n4d 39 e1\n0f 86 de 01 00 00\n4c 8b 7c 24 10\ne9 b4 02 00 00\n4c 89 74 24 70\n31 c0\n4d 85 f6\n0f 99 c0\ndf 6c 24 70\nd8 04 85 18 5c 40 00\n4c 89 6c 24 78\n31 c0\n4d 85 ed\n0f 99 c0\ndf 6c 24 78\nd8 04 85 18 5c 40 00\n4c 89 bc 24 80 00 00 00\n31 c0\n4d 85 ff\n0f 99 c0\ndf ac 24 80 00 00 00\nd8 04 85 18 5c 40 00\nde f2\nde c9\n41 f6 c0 10\n75 49\ndb 3c 24\n8b 7c 24 24\ne8 09 04 00 00\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 42 5c 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 43 f4 ff ff\n4c 89 e7\ne8 7b f1 ff ff\nbd ff ff ff ff\n4c 8b 6c 24 10\ne9 fb 00 00 00\n8b 44 24 1c\n48 89 44 24 68\nd9 e8\n31 ed\ndf 6c 24 68\nd9 ee\n66 0f 1f 84 00 00 00 00 00\ndd d8\ndc c9\nff c5\nd9 c0\nd8 ca\n83 fd 07\n7f 0a\nd9 cb\ndb eb\ndd db\nd9 ee\n73 e7\ndd d9\ndd d8\nde f9\nd9 c0\ndb 7c 24 30\ndb 3c 24\n8b 5c 24 24\n89 df\ne8 7d 03 00 00\ndb 3c 24\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 48 5c 40 00\n31 c0\n4c 8b 64 24 28\n4c 89 e7\ne8 ba f3 ff ff\n4c 89 e7\ne8 f2 f0 ff ff\n8b 4c 24 20\n48 c1 e9 05\n48 83 f1 03\n4c 8b 74 24 40\n4c 01 f1\n48 39 c1\n4c 8b 6c 24 10\n72 18\ndb 6c 24 30\ndd d8\n49 ff c6\nf6 44 24 18 08\n74 53\n41 80 7c 04 ff 30\n75 4b\nd9 05 26 38 00 00\nd9 c0\ndb 7c 24 40\ndb 6c 24 30\nde c9\ndb 3c 24\n89 df\ne8 00 03 00 00\ndb 6c 24 40\nde f9\ndb 3c 24\n45 31 f6\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 42 5c 40 00\n31 c0\n4c 89 e7\ne8 39 f3 ff ff\n4c 89 e7\ne8 71 f0 ff ff\n4c 89 eb\n48 29 c3\n48 89 df\n4c 89 e6\n48 89 c2\ne8 4d f2 ff ff\n4d 89 ef\n4d 29 f7\n44 8b 44 24 18\n41 f6 c0 04\n0f 85 b3 01 00 00\ne9 ce 01 00 00\n4c 8b 7c 24 10\ne9 e0 00 00 00\n31 ed\n0f 1f 80 00 00 00 00\n31 d2\n4c 89 e0\n49 f7 f1\n8d 14 92\n8d 0c 51\n89 df\nd1 ff\n31 d2\n49 89 c4\n89 c8\nf7 f6\n8d 0c 57\n31 d2\n01 cb\n0f 95 c2\n39 de\n19 ff\n83 e7 01\n83 cf 02\n39 f1\n89 d3\n0f 43 df\nff c5\n83 fd 07\n89 c1\n7f 05\n4d 39 e1\n76 bc\n49 83 fc 09\n8b 44 24 24\n77 13\n83 f8 01\n75 15\n89 c8\n83 e0 01\n01 d8\n83 f8 02\n77 11\neb 25\n4c 8b 7c 24 10\neb 6f\n85 c0\n75 1a\n85 db\n74 16\nff c1\n31 db\n83 f9 0a\n75 0d\n49 ff c4\n31 db\n49 83 fc 09\n77 46\n31 c9\n41 f6 c0 08\n74 0b\n85 c9\n75 07\n4c 8b 7c 24 10\neb 40\n83 c1 30\n48 8b 44 24 28\n4c 8d b8 86 02 00 00\n88 88 86 02 00 00\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 7f f0 ff ff\n44 8b 44 24 18\n31 db\neb 0b\n41 bc 0a 00 00 00\n4c 8b 7c 24 10\n31 c9\n44 89 c0\n24 03\n74 1f\n3c 01\n75 65\n48 63 c3\n44 89 e2\n83 e2 01\n31 f6\n48 01 c2\n40 0f 95 c6\n01 ce\n83 fe 05\n7f 06\neb 4a\n01 d9\n7e 46\n49 ff c4\n83 fd 07\n7f 3e\n45 85 ed\n74 39\n8b 44 24 1c\n49 39 c4\n75 30\nff c5\n41 f6 c0 08\n75 22\n41 c6 47 ff 30\n49 ff cf\n48 8b 54 24 40\n49 29 d7\n4c 89 ff\n48 8b 74 24 30\ne8 04 f0 ff ff\n44 8b 44 24 18\n41 bc 01 00 00 00\n4c 8b 6c 24 10\n48 b9 cd cc cc cc cc cc cc cc\n4c 89 fb\n0f 1f 80 00 00 00 00\n4c 89 e0\n48 f7 e1\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n44 89 e6\n29 c6\n40 80 ce 30\n40 88 73 ff\n48 ff cb\n48 c1 ea 03\n49 83 fc 09\n49 89 d4\n77 d0\n4c 8b 64 24 28\n41 f6 c0 04\n74 20\n49 29 df\n48 89 df\n4c 89 fe\n48 8b 54 24 60\n48 8b 4c 24 58\ne8 ad 01 00 00\n44 8b 44 24 18\n48 89 c3\n4c 8b 74 24 50\n8b 44 24 1c\n45 84 c0\n0f 89 a2 00 00 00\n85 ed\n79 36\n31 ed\n49 83 fe 02\n72 2e\n89 c0\n31 ed\nb9 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 fd 07\n74 0d\nff c5\n48 0f af c8\n4c 39 f1\n72 f0\neb 05\nbd 08 00 00 00\n44 89 c0\n25 00 01 00 00\n41 f6 c0 40\n74 19\n89 e9\n09 c1\n74 13\n41 c6 84 24 87 02 00 00 20\n49 81 c4 88 02 00 00\n4d 89 e5\n85 ed\n74 1e\n83 7c 24 20 00\n75 07\nb1 6b\n83 fd 01\n74 09\n48 63 cd\n8a 89 a0 5c 40 00\n41 88 4d 00\n49 ff c5\n85 c0\n74 1b\n83 7c 24 20 00\n74 0c\n85 ed\n74 08\n41 c6 45 00 69\n49 ff c5\n41 c6 45 00 42\n49 ff c5\n41 c6 45 00 00\n48 89 d8\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p341
S'.text:0000000000402120\n.text:0000000000402121\n.text:0000000000402123\n.text:0000000000402125\n.text:0000000000402127\n.text:0000000000402129\n.text:000000000040212a\n.text:0000000000402131\n.text:0000000000402134\n.text:0000000000402137\n.text:000000000040213a\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402142\n.text:0000000000402146\n.text:000000000040214a\n.text:000000000040214c\n.text:000000000040214f\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215d\n.text:0000000000402160\n.text:0000000000402164\n.text:0000000000402169\n.text:000000000040216c\n.text:000000000040216f\n.text:0000000000402172\n.text:0000000000402177\n.text:000000000040217b\n.text:000000000040217f\n.text:0000000000402184\n.text:0000000000402188\n.text:000000000040218d\n.text:0000000000402192\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219f\n.text:00000000004021a3\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b8\n.text:00000000004021c0\n.text:00000000004021c5\n.text:00000000004021c8\n.text:00000000004021cd\n.text:00000000004021d2\n.text:00000000004021d7\n.text:00000000004021dc\n.text:00000000004021de\n.text:00000000004021e1\n.text:00000000004021e6\n.text:00000000004021ec\n.text:00000000004021ee\n.text:00000000004021f1\n.text:00000000004021f4\n.text:00000000004021f7\n.text:00000000004021fd\n.text:00000000004021ff\n.text:0000000000402202\n.text:0000000000402205\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220d\n.text:0000000000402210\n.text:0000000000402213\n.text:0000000000402216\n.text:000000000040221a\n.text:000000000040221c\n.text:000000000040221f\n.text:0000000000402222\n.text:0000000000402224\n.text:0000000000402227\n.text:000000000040222a\n.text:000000000040222d\n.text:000000000040222f\n.text:0000000000402232\n.text:0000000000402235\n.text:0000000000402238\n.text:000000000040223b\n.text:000000000040223d\n.text:000000000040223f\n.text:0000000000402242\n.text:0000000000402245\n.text:0000000000402248\n.text:000000000040224d\n.text:000000000040224f\n.text:0000000000402251\n.text:0000000000402253\n.text:0000000000402256\n.text:0000000000402259\n.text:000000000040225c\n.text:000000000040225f\n.text:0000000000402263\n.text:0000000000402265\n.text:0000000000402268\n.text:000000000040226b\n.text:000000000040226e\n.text:0000000000402273\n.text:0000000000402275\n.text:0000000000402278\n.text:000000000040227c\n.text:0000000000402281\n.text:0000000000402287\n.text:000000000040228b\n.text:000000000040228e\n.text:0000000000402290\n.text:0000000000402293\n.text:0000000000402299\n.text:000000000040229e\n.text:00000000004022a3\n.text:00000000004022a8\n.text:00000000004022aa\n.text:00000000004022ad\n.text:00000000004022b0\n.text:00000000004022b4\n.text:00000000004022bb\n.text:00000000004022c0\n.text:00000000004022c2\n.text:00000000004022c5\n.text:00000000004022c8\n.text:00000000004022cc\n.text:00000000004022d3\n.text:00000000004022db\n.text:00000000004022dd\n.text:00000000004022e0\n.text:00000000004022e3\n.text:00000000004022ea\n.text:00000000004022f1\n.text:00000000004022f3\n.text:00000000004022f5\n.text:00000000004022f9\n.text:00000000004022fb\n.text:00000000004022fe\n.text:0000000000402302\n.text:0000000000402307\n.text:000000000040230a\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402319\n.text:000000000040231e\n.text:0000000000402320\n.text:0000000000402325\n.text:0000000000402328\n.text:000000000040232d\n.text:0000000000402330\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402344\n.text:0000000000402348\n.text:000000000040234d\n.text:000000000040234f\n.text:0000000000402351\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402360\n.text:0000000000402362\n.text:0000000000402364\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236a\n.text:000000000040236d\n.text:000000000040236f\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402375\n.text:0000000000402377\n.text:0000000000402379\n.text:000000000040237b\n.text:000000000040237d\n.text:000000000040237f\n.text:0000000000402381\n.text:0000000000402385\n.text:0000000000402388\n.text:000000000040238c\n.text:000000000040238e\n.text:0000000000402393\n.text:0000000000402396\n.text:000000000040239b\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023a9\n.text:00000000004023ae\n.text:00000000004023b1\n.text:00000000004023b6\n.text:00000000004023b9\n.text:00000000004023be\n.text:00000000004023c2\n.text:00000000004023c6\n.text:00000000004023ca\n.text:00000000004023cf\n.text:00000000004023d2\n.text:00000000004023d5\n.text:00000000004023da\n.text:00000000004023dc\n.text:00000000004023e0\n.text:00000000004023e2\n.text:00000000004023e5\n.text:00000000004023ea\n.text:00000000004023ec\n.text:00000000004023f2\n.text:00000000004023f4\n.text:00000000004023fa\n.text:00000000004023fc\n.text:0000000000402400\n.text:0000000000402404\n.text:0000000000402406\n.text:0000000000402409\n.text:000000000040240b\n.text:0000000000402410\n.text:0000000000402414\n.text:0000000000402416\n.text:0000000000402419\n.text:000000000040241c\n.text:0000000000402421\n.text:0000000000402428\n.text:000000000040242d\n.text:000000000040242f\n.text:0000000000402432\n.text:0000000000402437\n.text:000000000040243a\n.text:000000000040243f\n.text:0000000000402442\n.text:0000000000402445\n.text:0000000000402448\n.text:000000000040244b\n.text:000000000040244e\n.text:0000000000402453\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402462\n.text:0000000000402468\n.text:000000000040246d\n.text:0000000000402472\n.text:0000000000402477\n.text:0000000000402479\n.text:0000000000402480\n.text:0000000000402482\n.text:0000000000402485\n.text:0000000000402488\n.text:000000000040248b\n.text:000000000040248e\n.text:0000000000402490\n.text:0000000000402492\n.text:0000000000402494\n.text:0000000000402497\n.text:0000000000402499\n.text:000000000040249b\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a2\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024a9\n.text:00000000004024ac\n.text:00000000004024af\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b6\n.text:00000000004024b8\n.text:00000000004024bb\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c2\n.text:00000000004024c4\n.text:00000000004024c8\n.text:00000000004024cc\n.text:00000000004024ce\n.text:00000000004024d1\n.text:00000000004024d3\n.text:00000000004024d5\n.text:00000000004024d8\n.text:00000000004024da\n.text:00000000004024dd\n.text:00000000004024df\n.text:00000000004024e1\n.text:00000000004024e6\n.text:00000000004024e8\n.text:00000000004024ea\n.text:00000000004024ec\n.text:00000000004024ee\n.text:00000000004024f0\n.text:00000000004024f2\n.text:00000000004024f4\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fc\n.text:00000000004024fe\n.text:0000000000402502\n.text:0000000000402504\n.text:0000000000402506\n.text:000000000040250a\n.text:000000000040250c\n.text:000000000040250e\n.text:0000000000402510\n.text:0000000000402515\n.text:0000000000402517\n.text:000000000040251a\n.text:000000000040251f\n.text:0000000000402526\n.text:000000000040252c\n.text:0000000000402531\n.text:0000000000402534\n.text:0000000000402537\n.text:000000000040253c\n.text:0000000000402541\n.text:0000000000402546\n.text:0000000000402548\n.text:000000000040254a\n.text:0000000000402550\n.text:0000000000402555\n.text:0000000000402557\n.text:000000000040255a\n.text:000000000040255c\n.text:000000000040255e\n.text:0000000000402560\n.text:0000000000402562\n.text:0000000000402565\n.text:0000000000402568\n.text:000000000040256b\n.text:000000000040256d\n.text:0000000000402570\n.text:0000000000402574\n.text:0000000000402576\n.text:0000000000402579\n.text:000000000040257b\n.text:000000000040257d\n.text:000000000040257f\n.text:0000000000402581\n.text:0000000000402584\n.text:0000000000402587\n.text:0000000000402589\n.text:000000000040258c\n.text:000000000040258e\n.text:0000000000402592\n.text:0000000000402595\n.text:0000000000402597\n.text:0000000000402599\n.text:000000000040259d\n.text:000000000040259f\n.text:00000000004025a4\n.text:00000000004025a7\n.text:00000000004025ac\n.text:00000000004025af\n.text:00000000004025b2\n.text:00000000004025b7\n.text:00000000004025bc\n.text:00000000004025c1\n.text:00000000004025c7\n.text:00000000004025cc\n.text:00000000004025d6\n.text:00000000004025d9\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e6\n.text:00000000004025e8\n.text:00000000004025eb\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f6\n.text:00000000004025f8\n.text:00000000004025fc\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402607\n.text:000000000040260b\n.text:000000000040260e\n.text:0000000000402610\n.text:0000000000402615\n.text:0000000000402619\n.text:000000000040261b\n.text:000000000040261e\n.text:0000000000402621\n.text:0000000000402624\n.text:0000000000402629\n.text:000000000040262e\n.text:0000000000402633\n.text:0000000000402638\n.text:000000000040263b\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402647\n.text:000000000040264d\n.text:000000000040264f\n.text:0000000000402651\n.text:0000000000402653\n.text:0000000000402657\n.text:0000000000402659\n.text:000000000040265b\n.text:000000000040265d\n.text:0000000000402662\n.text:0000000000402670\n.text:0000000000402673\n.text:0000000000402675\n.text:0000000000402677\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402680\n.text:0000000000402682\n.text:0000000000402687\n.text:000000000040268a\n.text:000000000040268f\n.text:0000000000402693\n.text:0000000000402695\n.text:0000000000402697\n.text:0000000000402699\n.text:000000000040269b\n.text:00000000004026a4\n.text:00000000004026ab\n.text:00000000004026ae\n.text:00000000004026b0\n.text:00000000004026b2\n.text:00000000004026b7\n.text:00000000004026b9\n.text:00000000004026bb\n.text:00000000004026be\n.text:00000000004026c0\n.text:00000000004026c3\n.text:00000000004026c9\n.text:00000000004026cd\n.text:00000000004026d0\n.text:00000000004026d2\n.text:00000000004026d4\n.text:00000000004026d9\n.text:00000000004026db\n.text:00000000004026dd\n.text:00000000004026df\n.text:00000000004026e4\n.text:00000000004026e7\n.text:00000000004026ec\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026f7\n.text:00000000004026fe\n.text:00000000004026ff\n.text:0000000000402701\n.text:0000000000402703\n.text:0000000000402705\n.text:0000000000402707\n.text:0000000000402708\n'
p342
tp343
sS'quotearg_free'
p344
(S'\n__stdcall quotearg_free()\n'
p345
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p346
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609218]\nCMP dword ptr [0x00609220],0x2\nJC 0x0040398a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004013d0\nINC RBX\nMOV EAX,dword ptr [0x00609220]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403970\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609330\nCMP RDI,RAX\nJZ 0x004039b3\nCALL 0x004013d0\nMOV qword ptr [0x00609228],0x100\nMOV qword ptr [0x00609230],0x609330\nMOV EAX,0x609228\nCMP R14,RAX\nJZ 0x004039d0\nMOV RDI,R14\nCALL 0x004013d0\nMOV qword ptr [0x00609218],0x609228\nMOV dword ptr [0x00609220],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p347
S'41 57\n41 56\n53\n4c 8b 35 bc 58 20 00\n83 3d bd 58 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 58 da ff ff\n48 ff c3\n8b 05 9f 58 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 30 93 60 00\n48 39 c7\n74 1b\ne8 33 da ff ff\n48 c7 05 80 58 20 00 00 01 00 00\n48 c7 05 7d 58 20 00 30 93 60 00\nb8 28 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 0b da ff ff\n48 c7 05 48 58 20 00 28 92 60 00\nc7 05 46 58 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p348
S'.text:0000000000403950\n.text:0000000000403952\n.text:0000000000403954\n.text:0000000000403955\n.text:000000000040395c\n.text:0000000000403963\n.text:0000000000403965\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403970\n.text:0000000000403973\n.text:0000000000403978\n.text:000000000040397b\n.text:0000000000403981\n.text:0000000000403985\n.text:0000000000403988\n.text:000000000040398a\n.text:000000000040398e\n.text:0000000000403993\n.text:0000000000403996\n.text:0000000000403998\n.text:000000000040399d\n.text:00000000004039a8\n.text:00000000004039b3\n.text:00000000004039b8\n.text:00000000004039bb\n.text:00000000004039bd\n.text:00000000004039c0\n.text:00000000004039c5\n.text:00000000004039d0\n.text:00000000004039da\n.text:00000000004039db\n.text:00000000004039dd\n.text:00000000004039df\n'
p349
tp350
sS'quotearg_mem'
p351
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p352
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p353
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403bb0\n'
p354
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p355
S'.text:0000000000403bd0\n.text:0000000000403bd3\n.text:0000000000403bd6\n.text:0000000000403bd8\n.text:0000000000403bdb\n.text:0000000000403bde\n'
p356
tp357
sS'xcalloc'
p358
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p359
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p360
S'PUSH RAX\nCALL 0x00404d40\nTEST RAX,RAX\nJZ 0x004049cd\nPOP RCX\nRET\nCALL 0x00404a30\n'
p361
S'50\ne8 7a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p362
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049cb\n.text:00000000004049cc\n.text:00000000004049cd\n'
p363
tp364
sS'deregister_tm_clones'
p365
(S'\n__stdcall deregister_tm_clones()\n'
p366
V\u000a/* WARNING: Removing unreachable block (ram,0x004017c5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017cf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p367
S'MOV EAX,0x60927f\nPUSH RBP\nSUB RAX,0x609278\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017e0\nPOP RBP\nMOV EDI,0x609278\nJMP RAX\nPOP RBP\nRET\n'
p368
S'b8 7f 92 60 00\n55\n48 2d 78 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 78 92 60 00\nff e0\n5d\nc3\n'
p369
S'.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b6\n.text:00000000004017bc\n.text:00000000004017c0\n.text:00000000004017c3\n.text:00000000004017c5\n.text:00000000004017ca\n.text:00000000004017cd\n.text:00000000004017cf\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017e0\n.text:00000000004017e1\n'
p370
tp371
sS'clear_ungetc_buffer_preserving_position'
p372
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p373
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p374
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404e47\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404e60\n'
p375
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p376
S'.text:0000000000404e40\n.text:0000000000404e44\n.text:0000000000404e46\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4e\n'
p377
tp378
sS'adjust_value'
p379
(S'\n__stdcall adjust_value()\n'
p380
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble adjust_value(void)\u000a\u000a{\u000a  longdouble in_XMM0;\u000a  \u000a  return in_XMM0;\u000a}\u000a\u000a
p381
S'FLD tword ptr [RSP + 0x8]\nCMP EDI,0x1\nJZ 0x004027dc\nFLD tword ptr [0x00405c30]\nFUCOMIP ST0,ST1\nJBE 0x004027dc\nFLD dword ptr [0x00405c24]\nFLD ST1\nFSUB ST0,ST1\nFNSTCW word ptr [RSP + -0x22]\nMOVZX EAX,word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],0xc7f\nFLDCW word ptr [RSP + -0x22]\nMOV word ptr [RSP + -0x22],AX\nFISTP qword ptr [RSP + -0x18]\nFLDCW word ptr [RSP + -0x22]\nFNSTCW word ptr [RSP + -0x24]\nMOVZX EAX,word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],0xc7f\nFLDCW word ptr [RSP + -0x24]\nMOV word ptr [RSP + -0x24],AX\nFLD ST1\nFISTP qword ptr [RSP + -0x20]\nFLDCW word ptr [RSP + -0x24]\nMOV RAX,-0x8000000000000000\nXOR RAX,qword ptr [RSP + -0x18]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nCMOVC RAX,qword ptr [RSP + -0x20]\nTEST EDI,EDI\nSETZ SIL\nMOV qword ptr [RSP + -0x10],RAX\nXOR EDX,EDX\nTEST RAX,RAX\nSETNS DL\nFILD qword ptr [RSP + -0x10]\nFADD dword ptr [0x405c18 + RDX*0x4]\nFUCOMIP ST0,ST1\nFSTP ST0\nSETP DL\nSETNZ CL\nOR CL,DL\nAND CL,SIL\nMOVZX ECX,CL\nXOR EDX,EDX\nADD RCX,RAX\nMOV qword ptr [RSP + -0x8],RCX\nSETNS DL\nFILD qword ptr [RSP + -0x8]\nFADD dword ptr [0x405c18 + RDX*0x4]\nRET\n'
p382
S'db 6c 24 08\n83 ff 01\n0f 84 bf 00 00 00\ndb 2d 0d 35 00 00\ndf e9\n0f 86 b1 00 00 00\nd9 05 f3 34 00 00\nd9 c1\nd8 e1\nd9 7c 24 de\n0f b7 44 24 de\n66 c7 44 24 de 7f 0c\nd9 6c 24 de\n66 89 44 24 de\ndf 7c 24 e8\nd9 6c 24 de\nd9 7c 24 dc\n0f b7 44 24 dc\n66 c7 44 24 dc 7f 0c\nd9 6c 24 dc\n66 89 44 24 dc\nd9 c1\ndf 7c 24 e0\nd9 6c 24 dc\n48 b8 00 00 00 00 00 00 00 80\n48 33 44 24 e8\nd9 c9\ndb e9\ndd d9\n48 0f 42 44 24 e0\n85 ff\n40 0f 94 c6\n48 89 44 24 f0\n31 d2\n48 85 c0\n0f 99 c2\ndf 6c 24 f0\nd8 04 95 18 5c 40 00\ndf e9\ndd d8\n0f 9a c2\n0f 95 c1\n08 d1\n40 20 f1\n0f b6 c9\n31 d2\n48 01 c1\n48 89 4c 24 f8\n0f 99 c2\ndf 6c 24 f8\nd8 04 95 18 5c 40 00\nc3\n'
p383
S'.text:0000000000402710\n.text:0000000000402714\n.text:0000000000402717\n.text:000000000040271d\n.text:0000000000402723\n.text:0000000000402725\n.text:000000000040272b\n.text:0000000000402731\n.text:0000000000402733\n.text:0000000000402735\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402745\n.text:0000000000402749\n.text:000000000040274e\n.text:0000000000402752\n.text:0000000000402756\n.text:000000000040275a\n.text:000000000040275f\n.text:0000000000402766\n.text:000000000040276a\n.text:000000000040276f\n.text:0000000000402771\n.text:0000000000402775\n.text:0000000000402779\n.text:0000000000402783\n.text:0000000000402788\n.text:000000000040278a\n.text:000000000040278c\n.text:000000000040278e\n.text:0000000000402794\n.text:0000000000402796\n.text:000000000040279a\n.text:000000000040279f\n.text:00000000004027a1\n.text:00000000004027a4\n.text:00000000004027a7\n.text:00000000004027ab\n.text:00000000004027b2\n.text:00000000004027b4\n.text:00000000004027b6\n.text:00000000004027b9\n.text:00000000004027bc\n.text:00000000004027be\n.text:00000000004027c1\n.text:00000000004027c4\n.text:00000000004027c6\n.text:00000000004027c9\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d5\n.text:00000000004027dc\n'
p384
tp385
sS'xnmalloc'
p386
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404891\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004048a0\nPUSH RAX\nCALL 0x00404a30\n'
p389
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p390
S'.text:0000000000404880\n.text:0000000000404883\n.text:0000000000404886\n.text:0000000000404888\n.text:000000000040488c\n.text:000000000040488f\n.text:0000000000404891\n.text:0000000000404892\n'
p391
tp392
sS'quotearg_custom'
p393
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p394
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403df0\n'
p396
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p397
S'.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e79\n.text:0000000000403e7b\n.text:0000000000403e7e\n.text:0000000000403e81\n.text:0000000000403e84\n'
p398
tp399
sS'free'
p400
(S'\n__stdcall free(void * __ptr)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00609020]\n'
p403
S'ff 25 4a 7c 20 00\n'
p404
S'.plt:00000000004013d0\n'
p405
tp406
sS'close'
p407
(S'\n__stdcall close(int __fd)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x006090d8]\n'
p410
S'ff 25 92 7b 20 00\n'
p411
S'.plt:0000000000401540\n'
p412
tp413
sS'getenv'
p414
(S'\n__stdcall getenv(char * __name)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00609018]\n'
p417
S'ff 25 52 7c 20 00\n'
p418
S'.plt:00000000004013c0\n'
p419
tp420
sS'putchar_unlocked'
p421
(S'\n__stdcall putchar_unlocked(int __c)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00609120]\n'
p424
S'ff 25 4a 7b 20 00\n'
p425
S'.plt:00000000004015d0\n'
p426
tp427
sS'quotearg_char'
p428
(S'\n__stdcall quotearg_char(char * arg)\n'
p429
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403d00\n'
p431
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p432
S'.text:0000000000403d70\n.text:0000000000403d72\n.text:0000000000403d79\n.text:0000000000403d7b\n'
p433
tp434
sS'fopen'
p435
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_006091a8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x006091a8]\n'
p438
S'ff 25 c2 7a 20 00\n'
p439
S'.plt:00000000004016e0\n'
p440
tp441
sS'malloc'
p442
(S'\n__stdcall malloc(size_t __size)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00609138]\n'
p445
S'ff 25 32 7b 20 00\n'
p446
S'.plt:0000000000401600\n'
p447
tp448
sS'argmatch_invalid'
p449
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p450
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p451
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x406815\nMOV ESI,0x406830\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401490\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00403be0\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00403ed0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004016b0\n'
p452
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 15 68 40 00\nbe 30 68 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 84 c4 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 c2 eb ff ff\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 a2 ee ff ff\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 60 c6 ff ff\n'
p453
S'.text:0000000000404fe0\n.text:0000000000404fe2\n.text:0000000000404fe4\n.text:0000000000404fe6\n.text:0000000000404fe7\n.text:0000000000404fe8\n.text:0000000000404feb\n.text:0000000000404fee\n.text:0000000000404ff2\n.text:0000000000404ff7\n.text:0000000000404ffc\n.text:0000000000405000\n.text:0000000000405002\n.text:0000000000405007\n.text:000000000040500c\n.text:000000000040500f\n.text:0000000000405011\n.text:0000000000405016\n.text:0000000000405019\n.text:000000000040501e\n.text:0000000000405021\n.text:0000000000405026\n.text:0000000000405029\n.text:000000000040502e\n.text:0000000000405031\n.text:0000000000405033\n.text:0000000000405035\n.text:0000000000405037\n.text:000000000040503a\n.text:000000000040503d\n.text:0000000000405040\n.text:0000000000405044\n.text:0000000000405045\n.text:0000000000405047\n.text:0000000000405049\n.text:000000000040504b\n'
p454
tp455
sS'c_tolower'
p456
(S'\n__stdcall c_tolower()\n'
p457
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p459
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p460
S'.text:0000000000405350\n.text:0000000000405353\n.text:0000000000405356\n.text:0000000000405359\n.text:000000000040535c\n'
p461
tp462
sS'rpl_fseeko'
p463
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p464
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091a0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404e88\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404e88\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00404e9a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004016d0\nMOV RDI,RBX\nCALL 0x004015e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401500\nCMP RAX,-0x1\nJZ 0x00404ec3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404ec8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p466
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 36 c8 ff ff\n48 89 df\ne8 3e c7 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 51 c6 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p467
S'.text:0000000000404e60\n.text:0000000000404e61\n.text:0000000000404e63\n.text:0000000000404e64\n.text:0000000000404e67\n.text:0000000000404e6a\n.text:0000000000404e6d\n.text:0000000000404e71\n.text:0000000000404e75\n.text:0000000000404e77\n.text:0000000000404e7b\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e86\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e8e\n.text:0000000000404e91\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e95\n.text:0000000000404e9a\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404ea7\n.text:0000000000404eaa\n.text:0000000000404eaf\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eb8\n.text:0000000000404ebf\n.text:0000000000404ec1\n.text:0000000000404ec3\n.text:0000000000404ec8\n.text:0000000000404ec9\n.text:0000000000404ecb\n.text:0000000000404ecc\n'
p468
tp469
sS'getopt_long'
p470
(S'\n__stdcall getopt_long()\n'
p471
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00609098)();\u000a  return;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x00609098]\n'
p473
S'ff 25 d2 7b 20 00\n'
p474
S'.plt:00000000004014c0\n'
p475
tp476
sS'quote_n_mem'
p477
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p478
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p479
S'MOV ECX,0x609238\nJMP 0x004039f0\n'
p480
S'b9 38 92 60 00\ne9 36 fb ff ff\n'
p481
S'.text:0000000000403eb0\n.text:0000000000403eb5\n'
p482
tp483
sS'xstrdup'
p484
(S'\n__stdcall xstrdup(char * string)\n'
p485
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p486
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014b0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x004049e0\n'
p487
S'53\n48 89 fb\ne8 97 ca ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p488
S'.text:0000000000404a10\n.text:0000000000404a11\n.text:0000000000404a14\n.text:0000000000404a19\n.text:0000000000404a1d\n.text:0000000000404a20\n.text:0000000000404a21\n'
p489
tp490
sS'c_ispunct'
p491
(S'\n__stdcall c_ispunct()\n'
p492
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p493
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004052f2\nMOV AL,0x1\nJMP qword ptr [0x406870 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p494
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 70 68 40 00\nc3\n31 c0\nc3\n'
p495
S'.text:00000000004052e0\n.text:00000000004052e3\n.text:00000000004052e6\n.text:00000000004052e8\n.text:00000000004052ea\n.text:00000000004052f1\n.text:00000000004052f2\n.text:00000000004052f4\n'
p496
tp497
sS'quotearg_style'
p498
(S'\n__stdcall quotearg_style(char * arg)\n'
p499
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p500
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403be0\n'
p501
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p502
S'.text:0000000000403cc0\n.text:0000000000403cc3\n.text:0000000000403cc5\n.text:0000000000403cc7\n.text:0000000000403cc9\n.text:0000000000403ccc\n'
p503
tp504
sS'__argmatch_die'
p505
(S'\n__stdcall __argmatch_die()\n'
p506
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p507
S'MOV EDI,0x1\nJMP 0x00401880\n'
p508
S'bf 01 00 00 00\ne9 a6 c9 ff ff\n'
p509
S'.text:0000000000404ed0\n.text:0000000000404ed5\n'
p510
tp511
sS'fscanf'
p512
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x006090d0]\n'
p515
S'ff 25 9a 7b 20 00\n'
p516
S'.plt:0000000000401530\n'
p517
tp518
sS'emit_try_help'
p519
(S'\n__stdcall emit_try_help()\n'
p520
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p521
S'PUSH RBX\nMOV RBX,qword ptr [0x006092c0]\nXOR EDI,EDI\nMOV ESI,0x40594f\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006092e0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401730\n'
p522
S'53\n48 8b 1d 58 79 20 00\n31 ff\nbe 4f 59 40 00\nba 05 00 00 00\ne8 17 fb ff ff\n48 89 c2\n48 8b 0d 5d 79 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fd ff ff\n'
p523
S'.text:0000000000401960\n.text:0000000000401961\n.text:0000000000401968\n.text:000000000040196a\n.text:000000000040196f\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197c\n.text:0000000000401983\n.text:0000000000401988\n.text:000000000040198a\n.text:000000000040198d\n.text:000000000040198e\n'
p524
tp525
sS'memcpy'
p526
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x00609118]\n'
p529
S'ff 25 52 7b 20 00\n'
p530
S'.plt:00000000004015c0\n'
p531
tp532
sS'strrchr'
p533
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x006090b0]\n'
p536
S'ff 25 ba 7b 20 00\n'
p537
S'.plt:00000000004014f0\n'
p538
tp539
sS'close_stdout_set_ignore_EPIPE'
p540
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p541
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p542
S'MOV byte ptr [0x006092d8],DIL\nRET\n'
p543
S'40 88 3d b1 72 20 00\nc3\n'
p544
S'.text:0000000000402020\n.text:0000000000402027\n'
p545
tp546
sS'quotearg_alloc_mem'
p547
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p548
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6092f0\nCMOVNZ R12,RCX\nCALL 0x004013f0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402c10\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404970\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402c10\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040393a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc f0 92 60 00\n4c 0f 45 e1\ne8 58 db ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 81 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000403860\n.text:0000000000403861\n.text:0000000000403863\n.text:0000000000403865\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386a\n.text:000000000040386e\n.text:0000000000403871\n.text:0000000000403876\n.text:0000000000403879\n.text:000000000040387e\n.text:0000000000403881\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388f\n.text:0000000000403893\n.text:0000000000403898\n.text:000000000040389d\n.text:000000000040389f\n.text:00000000004038a3\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038ac\n.text:00000000004038b1\n.text:00000000004038b5\n.text:00000000004038ba\n.text:00000000004038be\n.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cb\n.text:00000000004038d0\n.text:00000000004038d5\n.text:00000000004038d7\n.text:00000000004038dc\n.text:00000000004038e0\n.text:00000000004038e3\n.text:00000000004038e7\n.text:00000000004038ea\n.text:00000000004038ef\n.text:00000000004038f2\n.text:00000000004038f6\n.text:00000000004038fa\n.text:00000000004038fd\n.text:0000000000403900\n.text:0000000000403905\n.text:000000000040390a\n.text:000000000040390d\n.text:0000000000403912\n.text:0000000000403917\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403923\n.text:0000000000403927\n.text:000000000040392a\n.text:000000000040392e\n.text:0000000000403933\n.text:0000000000403935\n.text:0000000000403937\n.text:000000000040393a\n.text:000000000040393d\n.text:0000000000403941\n.text:0000000000403942\n.text:0000000000403944\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394b\n'
p552
tp553
sS'iswprint'
p554
(S'\n__stdcall iswprint(wint_t __wc)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x006091e0]\n'
p557
S'ff 25 8a 7a 20 00\n'
p558
S'.plt:0000000000401750\n'
p559
tp560
sS'bkm_scale'
p561
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p562
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p563
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p564
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p565
S'.text:0000000000404cd0\n.text:0000000000404cd3\n.text:0000000000404cda\n.text:0000000000404ce1\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404ced\n.text:0000000000404cf0\n.text:0000000000404cf4\n.text:0000000000404cf6\n.text:0000000000404cf9\n.text:0000000000404cfc\n'
p566
tp567
sS'quotearg_style_mem'
p568
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p569
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403c80\n'
p571
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p572
S'.text:0000000000403ce0\n.text:0000000000403ce3\n.text:0000000000403ce6\n.text:0000000000403ce8\n.text:0000000000403cea\n.text:0000000000403cec\n.text:0000000000403cef\n.text:0000000000403cf2\n'
p573
tp574
sS'xalloc_die'
p575
(S'\n__stdcall xalloc_die()\n'
p576
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040686c,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p577
S'PUSH RBX\nMOV EBX,dword ptr [0x00609210]\nXOR EDI,EDI\nMOV ESI,0x4065cf\nMOV EDX,0x5\nCALL 0x00401490\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004016b0\nCALL 0x004013e0\n'
p578
S'53\n8b 1d d9 47 20 00\n31 ff\nbe cf 65 40 00\nba 05 00 00 00\ne8 48 ca ff ff\n48 89 c1\n31 f6\nba 6c 68 40 00\n31 c0\n89 df\ne8 55 cc ff ff\ne8 80 c9 ff ff\n'
p579
S'.text:0000000000404a30\n.text:0000000000404a31\n.text:0000000000404a37\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a43\n.text:0000000000404a48\n.text:0000000000404a4b\n.text:0000000000404a4d\n.text:0000000000404a52\n.text:0000000000404a54\n.text:0000000000404a56\n.text:0000000000404a5b\n'
p580
tp581
sS'__sprintf_chk'
p582
(S'\n__stdcall __sprintf_chk()\n'
p583
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_006091f0)();\u000a  return;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006091f0]\n'
p585
S'ff 25 7a 7a 20 00\n'
p586
S'.plt:0000000000401770\n'
p587
tp588
sS'c_isspace'
p589
(S'\n__stdcall c_isspace()\n'
p590
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p591
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00405315\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p592
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p593
S'.text:0000000000405300\n.text:0000000000405303\n.text:0000000000405306\n.text:0000000000405308\n.text:000000000040530d\n.text:000000000040530f\n.text:0000000000405311\n.text:0000000000405314\n.text:0000000000405315\n.text:0000000000405317\n'
p594
tp595
sS'quotearg_n_custom'
p596
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p597
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'MOV R8,-0x1\nJMP 0x00403e00\n'
p599
S'49 c7 c0 ff ff ff ff\neb 07\n'
p600
S'.text:0000000000403df0\n.text:0000000000403df7\n'
p601
tp602
sS'open'
p603
(S'\n__stdcall open(char * __file, int __oflag)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00609198)();\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x00609198]\n'
p606
S'ff 25 d2 7a 20 00\n'
p607
S'.plt:00000000004016c0\n'
p608
tp609
sS'quotearg_n_custom_mem'
p610
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p611
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609320]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402b60\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 07 55 20 00\n48 89 44 24 30\n0f 10 05 eb 54 20 00\n0f 29 44 24 20\n0f 10 05 cf 54 20 00\n0f 29 44 24 10\n0f 10 05 b3 54 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000403e00\n.text:0000000000403e01\n.text:0000000000403e03\n.text:0000000000403e05\n.text:0000000000403e06\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e10\n.text:0000000000403e12\n.text:0000000000403e19\n.text:0000000000403e1e\n.text:0000000000403e25\n.text:0000000000403e2a\n.text:0000000000403e31\n.text:0000000000403e36\n.text:0000000000403e3d\n.text:0000000000403e41\n.text:0000000000403e44\n.text:0000000000403e47\n.text:0000000000403e4c\n.text:0000000000403e4e\n.text:0000000000403e51\n.text:0000000000403e54\n.text:0000000000403e57\n.text:0000000000403e5c\n.text:0000000000403e60\n.text:0000000000403e61\n.text:0000000000403e63\n.text:0000000000403e65\n.text:0000000000403e66\n'
p615
tp616
sS'_init'
p617
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p618
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004013a2\nCALL RAX\nADD RSP,0x8\nRET\n'
p620
S'48 83 ec 08\n48 8b 05 5d 7c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p621
S'.init:0000000000401390\n.init:0000000000401394\n.init:000000000040139b\n.init:000000000040139e\n.init:00000000004013a0\n.init:00000000004013a2\n.init:00000000004013a6\n'
p622
tp623
sS'__freading'
p624
(S'\n__stdcall __freading()\n'
p625
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609158)();\u000a  return;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00609158]\n'
p627
S'ff 25 12 7b 20 00\n'
p628
S'.plt:0000000000401640\n'
p629
tp630
sS'set_quoting_flags'
p631
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p632
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'TEST RDI,RDI\nMOV ECX,0x6092f0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p634
S'48 85 ff\nb9 f0 92 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p635
S'.text:0000000000402b40\n.text:0000000000402b43\n.text:0000000000402b48\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b52\n'
p636
tp637
sS'fputs_unlocked'
p638
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x006090f8]\n'
p641
S'ff 25 72 7b 20 00\n'
p642
S'.plt:0000000000401580\n'
p643
tp644
sS'main'
p645
(S'\n__stdcall main(char * * argv)\n'
p646
V\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  byte bVar7;\u000a  ulong uVar8;\u000a  uint uVar9;\u000a  uintmax_t n;\u000a  char **in_RSI;\u000a  char *__filename;\u000a  FILE *fp;\u000a  int iVar10;\u000a  char acStack768 [664];\u000a  code *pcStack96;\u000a  ulong uStack72;\u000a  undefined8 local_38;\u000a  \u000a  uStack72 = (ulong)argv & 0xffffffff;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x405923);\u000a  textdomain(0x405923);\u000a  atexit(close_stdout);\u000a  setvbuf((FILE *)stdout,(char *)0x0,1,0);\u000a  have_read_stdin = 0;\u000a  pcStack96 = bsd_sum_file;\u000a  while( true ) {\u000a    iVar10 = (int)uStack72;\u000a    iVar4 = (int)in_RSI;\u000a    iVar3 = getopt_long(uStack72);\u000a    if (iVar3 < 0x72) break;\u000a    pcStack96 = bsd_sum_file;\u000a    if (iVar3 != 0x72) {\u000a      if (iVar3 != 0x73) goto LAB_00401ca8;\u000a      pcStack96 = sysv_sum_file;\u000a    }\u000a  }\u000a  if (iVar3 == -1) {\u000a    uVar9 = iVar10 - optind;\u000a    if (uVar9 == 0 || iVar10 < optind) {\u000a      bVar7 = (*pcStack96)(&DAT_00405d12,(ulong)uVar9);\u000a    }\u000a    else {\u000a      bVar7 = 1;\u000a      if (optind < iVar10) {\u000a        bVar7 = 1;\u000a        do {\u000a          bVar2 = (*pcStack96)(in_RSI[(long)optind],(ulong)uVar9);\u000a          bVar7 = bVar7 & bVar2;\u000a          optind = optind + 1;\u000a        } while (optind < iVar10);\u000a      }\u000a    }\u000a    if ((have_read_stdin == 1) && (iVar4 = rpl_fclose(stdin), iVar4 == -1)) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar9 = *puVar5;\u000a      __filename = quotearg_n_style_colon((char *)0x0);\u000a      error(1,(ulong)uVar9,&DAT_0040686c,__filename);\u000a    }\u000a    return (int)(uint)(bVar7 ^ 1);\u000a  }\u000a  if (iVar3 == -0x83) {\u000aLAB_00401c6e:\u000a    local_38 = 0;\u000a    version_etc(stdout,"sum","GNU coreutils",Version,"Kayvan Aghaiepour","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  if (iVar3 == -0x82) {\u000a    usage(0);\u000a    goto LAB_00401c6e;\u000a  }\u000aLAB_00401ca8:\u000a  __filename = (char *)0x1;\u000a  usage();\u000a  if ((*__filename == '-') && (__filename[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    bVar1 = true;\u000a    fp = stdin;\u000a  }\u000a  else {\u000a    fp = (FILE *)fopen(__filename,"r");\u000a    if (fp == (FILE *)0x0) goto LAB_00401dc4;\u000a    bVar1 = false;\u000a  }\u000a  fadvise(fp);\u000a  iVar3 = getc_unlocked((FILE *)fp);\u000a  if (iVar3 == -1) {\u000a    n = 0;\u000a    uVar8 = 0;\u000a  }\u000a  else {\u000a    uVar8 = 0;\u000a    n = 0;\u000a    do {\u000a      n = n + 1;\u000a      uVar8 = (ulong)(ushort)(((ushort)((int)uVar8 << 0xf) | (ushort)(uVar8 >> 1)) + (short)iVar3);\u000a      iVar3 = getc_unlocked((FILE *)fp);\u000a    } while (iVar3 != -1);\u000a  }\u000a  iVar3 = ferror_unlocked((FILE *)fp);\u000a  if (iVar3 != 0) {\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar9 = *puVar5;\u000a    __filename = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)uVar9,&DAT_0040686c,__filename);\u000a    if (bVar1) {\u000a      return 0;\u000a    }\u000a    rpl_fclose(fp);\u000a    return 0;\u000a  }\u000a  if ((bVar1) || (iVar3 = rpl_fclose(fp), iVar3 == 0)) {\u000a    pcVar6 = human_readable(n,acStack768,0,1);\u000a    __printf_chk(1,"%05d %5s",uVar8,pcVar6);\u000a    if (1 < iVar4) {\u000a      __printf_chk(1,&DAT_0040686b,__filename);\u000a    }\u000a    putchar_unlocked(10);\u000a    return (int)CONCAT71((int7)(uVar8 >> 8),1);\u000a  }\u000aLAB_00401dc4:\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar9 = *puVar5;\u000a  __filename = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar9,&DAT_0040686c,__filename);\u000a  return 0;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RSI\nMOV R15D,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x004029f0\nMOV EDI,0x6\nMOV ESI,0x406399\nCALL 0x00401670\nMOV EDI,0x405923\nMOV ESI,0x405904\nCALL 0x00401480\nMOV EDI,0x405923\nCALL 0x00401460\nMOV EDI,0x402030\nCALL 0x00405790\nMOV RDI,qword ptr [0x00609288]\nXOR ESI,ESI\nMOV EDX,0x1\nXOR ECX,ECX\nCALL 0x00401690\nMOV byte ptr [0x006092c9],0x0\nMOV R12D,0x401cc0\nJMP 0x00401b76\nMOV R12D,0x401e60\nMOV EDX,0x40591c\nMOV ECX,0x405b10\nXOR R8D,R8D\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x004014c0\nCMP EAX,0x71\nJLE 0x00401ba8\nCMP EAX,0x72\nMOV R12D,0x401cc0\nJZ 0x00401b76\nCMP EAX,0x73\nJZ 0x00401b70\nJMP 0x00401ca8\nCMP EAX,-0x1\nJNZ 0x00401c59\nMOV EBP,R15D\nSUB EBP,dword ptr [0x00609298]\nJLE 0x00401bf2\nMOV EAX,dword ptr [0x00609298]\nMOV BL,0x1\nCMP EAX,R15D\nJGE 0x00401bfe\nMOV BL,0x1\nNOP dword ptr [RAX + RAX*0x1]\nCDQE\nMOV RDI,qword ptr [R14 + RAX*0x8]\nMOV ESI,EBP\nCALL R12\nAND BL,AL\nMOV EAX,dword ptr [0x00609298]\nINC EAX\nMOV dword ptr [0x00609298],EAX\nCMP EAX,R15D\nJL 0x00401bd0\nJMP 0x00401bfe\nMOV EDI,0x405d12\nMOV ESI,EBP\nCALL R12\nMOV EBX,EAX\nCMP byte ptr [0x006092c9],0x1\nJNZ 0x00401c46\nMOV RDI,qword ptr [0x00609290]\nCALL 0x00404d90\nCMP EAX,-0x1\nJNZ 0x00401c46\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV EDX,0x405d12\nCALL 0x00403da0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004016b0\nXOR BL,0x1\nMOVZX EAX,BL\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401c6e\nCMP EAX,0xffffff7e\nJNZ 0x00401ca8\nXOR EDI,EDI\nCALL 0x00401880\nMOV RDI,qword ptr [0x00609288]\nMOV RCX,qword ptr [0x00609208]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x405a09\nMOV EDX,0x40591f\nMOV R8D,0x40592d\nMOV R9D,0x40593f\nXOR EAX,EAX\nCALL 0x00404770\nXOR EDI,EDI\nCALL 0x00401710\nMOV EDI,0x1\nCALL 0x00401880\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p648
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 f6\n41 89 ff\n49 8b 3e\ne8 d6 0e 00 00\nbf 06 00 00 00\nbe 99 63 40 00\ne8 47 fb ff ff\nbf 23 59 40 00\nbe 04 59 40 00\ne8 48 f9 ff ff\nbf 23 59 40 00\ne8 1e f9 ff ff\nbf 30 20 40 00\ne8 44 3c 00 00\n48 8b 3d 35 77 20 00\n31 f6\nba 01 00 00 00\n31 c9\ne8 2f fb ff ff\nc6 05 61 77 20 00 00\n41 bc c0 1c 40 00\neb 06\n41 bc 60 1e 40 00\nba 1c 59 40 00\nb9 10 5b 40 00\n45 31 c0\n44 89 ff\n4c 89 f6\ne8 32 f9 ff ff\n83 f8 71\n7e 15\n83 f8 72\n41 bc c0 1c 40 00\n74 d8\n83 f8 73\n74 cd\ne9 00 01 00 00\n83 f8 ff\n0f 85 a8 00 00 00\n44 89 fd\n2b 2d de 76 20 00\n7e 36\n8b 05 d6 76 20 00\nb3 01\n44 39 f8\n7d 35\nb3 01\n0f 1f 44 00 00\n48 98\n49 8b 3c c6\n89 ee\n41 ff d4\n20 c3\n8b 05 b5 76 20 00\nff c0\n89 05 ad 76 20 00\n44 39 f8\n7c e0\neb 0c\nbf 12 5d 40 00\n89 ee\n41 ff d4\n89 c3\n80 3d c4 76 20 00 01\n75 3f\n48 8b 3d 82 76 20 00\ne8 7d 31 00 00\n83 f8 ff\n75 2e\ne8 d3 f7 ff ff\n8b 28\n31 ff\nbe 03 00 00 00\nba 12 5d 40 00\ne8 70 21 00 00\n48 89 c1\nbf 01 00 00 00\nba 6c 68 40 00\n31 c0\n89 ee\ne8 6a fa ff ff\n80 f3 01\n0f b6 c3\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 41\n31 ff\ne8 12 fc ff ff\n48 8b 3d 13 76 20 00\n48 8b 0d 8c 75 20 00\n48 c7 04 24 00 00 00 00\nbe 09 5a 40 00\nba 1f 59 40 00\n41 b8 2d 59 40 00\n41 b9 3f 59 40 00\n31 c0\ne8 cf 2a 00 00\n31 ff\ne8 68 fa ff ff\nbf 01 00 00 00\ne8 ce fb ff ff\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p649
S'.text:0000000000401b00\n.text:0000000000401b01\n.text:0000000000401b03\n.text:0000000000401b05\n.text:0000000000401b07\n.text:0000000000401b08\n.text:0000000000401b0c\n.text:0000000000401b0f\n.text:0000000000401b12\n.text:0000000000401b15\n.text:0000000000401b1a\n.text:0000000000401b1f\n.text:0000000000401b24\n.text:0000000000401b29\n.text:0000000000401b2e\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b3d\n.text:0000000000401b42\n.text:0000000000401b47\n.text:0000000000401b4c\n.text:0000000000401b53\n.text:0000000000401b55\n.text:0000000000401b5a\n.text:0000000000401b5c\n.text:0000000000401b61\n.text:0000000000401b68\n.text:0000000000401b6e\n.text:0000000000401b70\n.text:0000000000401b76\n.text:0000000000401b7b\n.text:0000000000401b80\n.text:0000000000401b83\n.text:0000000000401b86\n.text:0000000000401b89\n.text:0000000000401b8e\n.text:0000000000401b91\n.text:0000000000401b93\n.text:0000000000401b96\n.text:0000000000401b9c\n.text:0000000000401b9e\n.text:0000000000401ba1\n.text:0000000000401ba3\n.text:0000000000401ba8\n.text:0000000000401bab\n.text:0000000000401bb1\n.text:0000000000401bb4\n.text:0000000000401bba\n.text:0000000000401bbc\n.text:0000000000401bc2\n.text:0000000000401bc4\n.text:0000000000401bc7\n.text:0000000000401bc9\n.text:0000000000401bcb\n.text:0000000000401bd0\n.text:0000000000401bd2\n.text:0000000000401bd6\n.text:0000000000401bd8\n.text:0000000000401bdb\n.text:0000000000401bdd\n.text:0000000000401be3\n.text:0000000000401be5\n.text:0000000000401beb\n.text:0000000000401bee\n.text:0000000000401bf0\n.text:0000000000401bf2\n.text:0000000000401bf7\n.text:0000000000401bf9\n.text:0000000000401bfc\n.text:0000000000401bfe\n.text:0000000000401c05\n.text:0000000000401c07\n.text:0000000000401c0e\n.text:0000000000401c13\n.text:0000000000401c16\n.text:0000000000401c18\n.text:0000000000401c1d\n.text:0000000000401c1f\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c2b\n.text:0000000000401c30\n.text:0000000000401c33\n.text:0000000000401c38\n.text:0000000000401c3d\n.text:0000000000401c3f\n.text:0000000000401c41\n.text:0000000000401c46\n.text:0000000000401c49\n.text:0000000000401c4c\n.text:0000000000401c50\n.text:0000000000401c51\n.text:0000000000401c53\n.text:0000000000401c55\n.text:0000000000401c57\n.text:0000000000401c58\n.text:0000000000401c59\n.text:0000000000401c5e\n.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c67\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c75\n.text:0000000000401c7c\n.text:0000000000401c84\n.text:0000000000401c89\n.text:0000000000401c8e\n.text:0000000000401c94\n.text:0000000000401c9a\n.text:0000000000401c9c\n.text:0000000000401ca1\n.text:0000000000401ca3\n.text:0000000000401ca8\n.text:0000000000401cad\n.text:0000000000401cb2\n'
p650
tp651
sS'realloc'
p652
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609160]\n'
p655
S'ff 25 0a 7b 20 00\n'
p656
S'.plt:0000000000401650\n'
p657
tp658
sS'xcharalloc'
p659
(S'\n__stdcall xcharalloc(size_t n)\n'
p660
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p661
S'JMP 0x004048a0\n'
p662
S'e9 2b ff ff ff\n'
p663
S'.text:0000000000404970\n'
p664
tp665
sS'c_isupper'
p666
(S'\n__stdcall c_isupper()\n'
p667
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p668
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p669
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p670
S'.text:0000000000405320\n.text:0000000000405323\n.text:0000000000405326\n.text:0000000000405329\n'
p671
tp672
sS'localeconv'
p673
(S'\n__stdcall localeconv()\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_00609060)();\u000a  return plVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x00609060]\n'
p676
S'ff 25 0a 7c 20 00\n'
p677
S'.plt:0000000000401450\n'
p678
tp679
sS'__fprintf_chk'
p680
(S'\n__stdcall __fprintf_chk()\n'
p681
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091d0)();\u000a  return;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x006091d0]\n'
p683
S'ff 25 9a 7a 20 00\n'
p684
S'.plt:0000000000401730\n'
p685
tp686
sS'get_charset_aliases'
p687
(S'\n__stdcall get_charset_aliases()\n'
p688
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405684_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405684_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405684_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405684_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405684_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405684_caseD_9;\u000a      case -1:\u000a        goto switchD_00405684_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004056dd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_004056e3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405684_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_004056e3;\u000a  }\u000a  goto LAB_004056dd;\u000a}\u000a\u000a
p689
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609430]\nTEST R15,R15\nJNZ 0x004056f2\nMOV EDI,0x406c9c\nCALL 0x004013c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004054a8\nCMP byte ptr [RBX],0x0\nJNZ 0x004054ad\nMOV EBX,0x406cac\nMOV RDI,RBX\nCALL 0x004014b0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004054c7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004054c9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401600\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040551d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004015c0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405528\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405545\nMOV R15D,0x406399\nJMP 0x004056eb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004016c0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004056dd\nMOV ESI,0x405c0f\nMOV EDI,EBP\nCALL 0x00401660\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004056a4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405670\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401420\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401420\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405670\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401630\nMOV ESI,0x406cbb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401530\nCMP EAX,0x2\nJL 0x004056c4\nMOV RDI,R12\nCALL 0x004014b0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004014b0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040564d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401650\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405594\nJMP 0x004056ad\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401600\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405594\nJMP 0x004056ad\nMOV RDI,RBX\nCALL 0x00401440\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004055d7\nJMP qword ptr [0x406b60 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401440\nCMP EAX,-0x1\nJZ 0x004056c4\nCMP EAX,0xa\nJNZ 0x00405690\nJMP 0x00405670\nMOV EDI,EBP\nCALL 0x00401540\nJMP 0x004056dd\nMOV RDI,R15\nCALL 0x004013d0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404d90\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004056dd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x004056e3\nMOV R15D,0x406399\nMOV RDI,R13\nCALL 0x004013d0\nMOV qword ptr [0x00609430],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p690
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d a8 3f 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 9c 6c 40 00\ne8 25 bf ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb ac 6c 40 00\n48 89 df\ne8 fb bf ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 c1 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 d3 c0 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 99 63 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 6c c1 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 0f 5c 40 00\n89 ef\ne8 f6 c0 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 6b be ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 5b be ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f c0 ff ff\nbe bb 6c 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 3a bf ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 a9 be ff ff\n49 89 c4\n48 89 ef\ne8 9e be ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 c0 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 bf ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 c8 bd ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 60 6b 40 00\n48 89 df\ne8 a8 bd ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 95 be ff ff\neb 30\n4c 89 ff\ne8 1b bd ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 c4 f6 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 99 63 40 00\n4c 89 ef\ne8 e5 bc ff ff\n4c 89 3d 3e 3d 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p691
S'.text:0000000000405470\n.text:0000000000405471\n.text:0000000000405473\n.text:0000000000405475\n.text:0000000000405477\n.text:0000000000405479\n.text:000000000040547a\n.text:0000000000405481\n.text:0000000000405488\n.text:000000000040548b\n.text:0000000000405491\n.text:0000000000405496\n.text:000000000040549b\n.text:000000000040549e\n.text:00000000004054a1\n.text:00000000004054a3\n.text:00000000004054a6\n.text:00000000004054a8\n.text:00000000004054ad\n.text:00000000004054b0\n.text:00000000004054b5\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054bd\n.text:00000000004054c2\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054c9\n.text:00000000004054cd\n.text:00000000004054d2\n.text:00000000004054d7\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054df\n.text:00000000004054e2\n.text:00000000004054e5\n.text:00000000004054e8\n.text:00000000004054ed\n.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f6\n.text:00000000004054f8\n.text:00000000004054fe\n.text:0000000000405508\n.text:000000000040550d\n.text:0000000000405517\n.text:000000000040551b\n.text:000000000040551d\n.text:0000000000405523\n.text:0000000000405528\n.text:0000000000405532\n.text:0000000000405537\n.text:0000000000405541\n.text:0000000000405545\n.text:000000000040554a\n.text:000000000040554c\n.text:000000000040554f\n.text:0000000000405554\n.text:0000000000405556\n.text:0000000000405558\n.text:000000000040555e\n.text:0000000000405563\n.text:0000000000405565\n.text:000000000040556a\n.text:000000000040556d\n.text:0000000000405570\n.text:0000000000405576\n.text:000000000040557b\n.text:0000000000405580\n.text:0000000000405582\n.text:0000000000405587\n.text:000000000040558a\n.text:000000000040558f\n.text:0000000000405594\n.text:0000000000405599\n.text:000000000040559c\n.text:000000000040559f\n.text:00000000004055a2\n.text:00000000004055a5\n.text:00000000004055a8\n.text:00000000004055ad\n.text:00000000004055b0\n.text:00000000004055b5\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055c0\n.text:00000000004055c5\n.text:00000000004055ca\n.text:00000000004055cd\n.text:00000000004055d2\n.text:00000000004055d7\n.text:00000000004055d9\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e6\n.text:00000000004055e8\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f1\n.text:00000000004055f6\n.text:00000000004055f9\n.text:00000000004055ff\n.text:0000000000405602\n.text:0000000000405607\n.text:000000000040560a\n.text:000000000040560d\n.text:0000000000405612\n.text:0000000000405615\n.text:000000000040561a\n.text:000000000040561f\n.text:0000000000405622\n.text:0000000000405624\n.text:0000000000405628\n.text:000000000040562d\n.text:0000000000405632\n.text:0000000000405635\n.text:000000000040563a\n.text:000000000040563d\n.text:0000000000405642\n.text:0000000000405645\n.text:000000000040564b\n.text:000000000040564d\n.text:0000000000405652\n.text:0000000000405656\n.text:000000000040565b\n.text:000000000040565e\n.text:0000000000405661\n.text:0000000000405667\n.text:0000000000405670\n.text:0000000000405673\n.text:0000000000405678\n.text:000000000040567b\n.text:000000000040567e\n.text:0000000000405684\n.text:0000000000405690\n.text:0000000000405693\n.text:0000000000405698\n.text:000000000040569b\n.text:000000000040569d\n.text:00000000004056a0\n.text:00000000004056a2\n.text:00000000004056a4\n.text:00000000004056a6\n.text:00000000004056ab\n.text:00000000004056ad\n.text:00000000004056b0\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056bc\n.text:00000000004056bf\n.text:00000000004056c4\n.text:00000000004056c7\n.text:00000000004056cc\n.text:00000000004056d1\n.text:00000000004056d4\n.text:00000000004056d6\n.text:00000000004056db\n.text:00000000004056dd\n.text:00000000004056e3\n.text:00000000004056e6\n.text:00000000004056eb\n.text:00000000004056f2\n.text:00000000004056f5\n.text:00000000004056fc\n.text:00000000004056fd\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405703\n.text:0000000000405705\n.text:0000000000405706\n'
p692
tp693
sS'nl_langinfo'
p694
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x00609148]\n'
p697
S'ff 25 22 7b 20 00\n'
p698
S'.plt:0000000000401620\n'
p699
tp700
sS'c_isalnum'
p701
(S'\n__stdcall c_isalnum()\n'
p702
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p703
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040523b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040523b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040523a\nXOR EAX,EAX\nRET\n'
p704
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p705
S'.text:0000000000405220\n.text:0000000000405222\n.text:0000000000405225\n.text:0000000000405228\n.text:000000000040522a\n.text:0000000000405234\n.text:0000000000405238\n.text:000000000040523a\n.text:000000000040523b\n.text:000000000040523e\n.text:0000000000405241\n.text:0000000000405243\n.text:0000000000405245\n'
p706
tp707
sS'x2realloc'
p708
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p709
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p710
S'MOV EDX,0x1\nJMP 0x00404910\n'
p711
S'ba 01 00 00 00\neb 89\n'
p712
S'.text:0000000000404980\n.text:0000000000404985\n'
p713
tp714
sS'strlen'
p715
(S'\n__stdcall strlen(char * __s)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00609090)();\u000a  return sVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00609090]\n'
p718
S'ff 25 da 7b 20 00\n'
p719
S'.plt:00000000004014b0\n'
p720
tp721
sS'human_options'
p722
(S'\n__stdcall human_options(char * spec, int * opts, uintmax_t * block_size)\n'
p723
V\u000astrtol_error human_options(char *spec,int *opts,uintmax_t *block_size)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  sVar1 = humblock(spec,block_size,opts);\u000a  if (*block_size == 0) {\u000a    uVar2 = default_block_size();\u000a    *block_size = uVar2;\u000a    sVar1 = LONGINT_INVALID;\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p724
S'PUSH RBX\nMOV RBX,RDX\nMOV RAX,RSI\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x004028c0\nCMP qword ptr [RBX],0x0\nJNZ 0x004028b5\nCALL 0x004029d0\nMOV qword ptr [RBX],RAX\nMOV EAX,0x4\nPOP RBX\nRET\n'
p725
S'53\n48 89 d3\n48 89 f0\n48 89 de\n48 89 c2\ne8 1e 00 00 00\n48 83 3b 00\n75 0d\ne8 23 01 00 00\n48 89 03\nb8 04 00 00 00\n5b\nc3\n'
p726
S'.text:0000000000402890\n.text:0000000000402891\n.text:0000000000402894\n.text:0000000000402897\n.text:000000000040289a\n.text:000000000040289d\n.text:00000000004028a2\n.text:00000000004028a6\n.text:00000000004028a8\n.text:00000000004028ad\n.text:00000000004028b0\n.text:00000000004028b5\n.text:00000000004028b6\n'
p727
tp728
sS'memcmp'
p729
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x006090f0]\n'
p732
S'ff 25 7a 7b 20 00\n'
p733
S'.plt:0000000000401570\n'
p734
tp735
sS'quotearg_n_style_mem'
p736
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p737
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403c20\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p739
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p740
S'.text:0000000000403c80\n.text:0000000000403c81\n.text:0000000000403c83\n.text:0000000000403c85\n.text:0000000000403c86\n.text:0000000000403c8a\n.text:0000000000403c8d\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9d\n.text:0000000000403c9f\n.text:0000000000403ca2\n.text:0000000000403ca5\n.text:0000000000403ca8\n.text:0000000000403cad\n.text:0000000000403cb1\n.text:0000000000403cb2\n.text:0000000000403cb4\n.text:0000000000403cb6\n.text:0000000000403cb7\n'
p741
tp742
sS'_exit'
p743
(S'\n__stdcall _exit(int __status)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609040)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00609040]\n'
p746
S'ff 25 2a 7c 20 00\n'
p747
S'.plt:0000000000401410\n'
p748
tp749
sS'emit_stdin_note'
p750
(S'\n__stdcall emit_stdin_note()\n'
p751
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p752
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405976\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401580\n'
p753
S'50\n31 ff\nbe 76 59 40 00\nba 05 00 00 00\ne8 de fa ff ff\n48 8b 35 cf 78 20 00\n48 89 c7\n58\ne9 be fb ff ff\n'
p754
S'.text:00000000004019a0\n.text:00000000004019a1\n.text:00000000004019a3\n.text:00000000004019a8\n.text:00000000004019ad\n.text:00000000004019b2\n.text:00000000004019b9\n.text:00000000004019bc\n.text:00000000004019bd\n'
p755
tp756
sS'__errno_location'
p757
(S'\n__stdcall __errno_location()\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609030)();\u000a  return piVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x00609030]\n'
p760
S'ff 25 3a 7c 20 00\n'
p761
S'.plt:00000000004013f0\n'
p762
tp763
sS'bkm_scale_by_power'
p764
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p765
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00404d31\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00404cd0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00404d20\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:0000000000404d00\n.text:0000000000404d01\n.text:0000000000404d03\n.text:0000000000404d05\n.text:0000000000404d06\n.text:0000000000404d07\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d0f\n.text:0000000000404d11\n.text:0000000000404d13\n.text:0000000000404d15\n.text:0000000000404d20\n.text:0000000000404d23\n.text:0000000000404d26\n.text:0000000000404d2b\n.text:0000000000404d2d\n.text:0000000000404d2f\n.text:0000000000404d31\n.text:0000000000404d33\n.text:0000000000404d37\n.text:0000000000404d38\n.text:0000000000404d3a\n.text:0000000000404d3c\n.text:0000000000404d3d\n'
p769
tp770
sS'x2nrealloc'
p771
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p772
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p773
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040493c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404969\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040495a\nTEST RCX,RCX\nJNZ 0x0040495a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x004048e0\nPUSH RAX\nCALL 0x00404a30\n'
p774
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p775
S'.text:0000000000404910\n.text:0000000000404913\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491b\n.text:0000000000404925\n.text:0000000000404927\n.text:000000000040492a\n.text:000000000040492d\n.text:000000000040492f\n.text:0000000000404932\n.text:0000000000404935\n.text:000000000040493a\n.text:000000000040493c\n.text:000000000040493f\n.text:0000000000404941\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494b\n.text:000000000040494d\n.text:0000000000404954\n.text:0000000000404957\n.text:000000000040495a\n.text:000000000040495d\n.text:0000000000404961\n.text:0000000000404964\n.text:0000000000404969\n.text:000000000040496a\n'
p776
tp777
sS'argmatch_valid'
p778
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p779
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_004050b7:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_004050b7;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040686a,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_00609130)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40684d\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,qword ptr [0x006092c0]\nMOV RDI,RAX\nCALL 0x00401580\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x006092c0]\nJZ 0x0040511a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x004050b7\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401570\nTEST EAX,EAX\nJZ 0x004050e0\nMOV RDI,RBX\nCALL 0x00403ee0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406862\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401730\nMOV RBP,R13\nJMP 0x004050ff\nMOV RDI,RBX\nCALL 0x00403ee0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40686a\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401730\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x006092c0]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x004050a0\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004015f0\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 4d 68 40 00\nba 05 00 00 00\ne8 1b c4 ff ff\n48 8b 35 44 42 20 00\n48 89 c7\ne8 fc c4 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 2b 42 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 bd c4 ff ff\n85 c0\n74 29\n48 89 df\ne8 21 ee ff ff\n48 89 c1\nbe 01 00 00 00\nba 62 68 40 00\n31 c0\n4c 89 e7\ne8 5a c6 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 f8 ed ff ff\n48 89 c1\nbe 01 00 00 00\nba 6a 68 40 00\n31 c0\n4c 89 e7\ne8 31 c6 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 ae 41 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 bb c4 ff ff\n'
p782
S'.text:0000000000405050\n.text:0000000000405051\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405057\n.text:0000000000405059\n.text:000000000040505a\n.text:000000000040505b\n.text:000000000040505e\n.text:0000000000405061\n.text:0000000000405064\n.text:0000000000405066\n.text:000000000040506b\n.text:0000000000405070\n.text:0000000000405075\n.text:000000000040507c\n.text:000000000040507f\n.text:0000000000405084\n.text:0000000000405088\n.text:000000000040508b\n.text:000000000040508e\n.text:0000000000405095\n.text:000000000040509b\n.text:000000000040509d\n.text:00000000004050a0\n.text:00000000004050a3\n.text:00000000004050a5\n.text:00000000004050a8\n.text:00000000004050ab\n.text:00000000004050ae\n.text:00000000004050b3\n.text:00000000004050b5\n.text:00000000004050b7\n.text:00000000004050ba\n.text:00000000004050bf\n.text:00000000004050c2\n.text:00000000004050c7\n.text:00000000004050cc\n.text:00000000004050ce\n.text:00000000004050d1\n.text:00000000004050d6\n.text:00000000004050d9\n.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e8\n.text:00000000004050eb\n.text:00000000004050f0\n.text:00000000004050f5\n.text:00000000004050f7\n.text:00000000004050fa\n.text:00000000004050ff\n.text:0000000000405103\n.text:0000000000405108\n.text:000000000040510b\n.text:0000000000405112\n.text:0000000000405115\n.text:0000000000405118\n.text:000000000040511a\n.text:000000000040511f\n.text:0000000000405122\n.text:0000000000405126\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512b\n.text:000000000040512d\n.text:000000000040512f\n.text:0000000000405130\n'
p783
tp784
sS'xrealloc'
p785
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p786
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p787
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x004048f7\nTEST RBX,RBX\nJNZ 0x004048f7\nCALL 0x004013d0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401650\nTEST RBX,RBX\nJZ 0x00404909\nTEST RAX,RAX\nJZ 0x0040490b\nPOP RBX\nRET\nCALL 0x00404a30\n'
p788
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 dd ca ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 51 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p789
S'.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e4\n.text:00000000004048e7\n.text:00000000004048e9\n.text:00000000004048ec\n.text:00000000004048ee\n.text:00000000004048f3\n.text:00000000004048f5\n.text:00000000004048f6\n.text:00000000004048f7\n.text:00000000004048fa\n.text:00000000004048ff\n.text:0000000000404902\n.text:0000000000404904\n.text:0000000000404907\n.text:0000000000404909\n.text:000000000040490a\n.text:000000000040490b\n'
p790
tp791
sS'safe_read'
p792
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p793
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401560\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x00404364\nCALL 0x004013f0\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00404310\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x00404367\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00404310\nJMP 0x00404367\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 42 d2 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 c5 d0 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p796
S'.text:00000000004042f0\n.text:00000000004042f1\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042f7\n.text:00000000004042f9\n.text:00000000004042fa\n.text:00000000004042fb\n.text:00000000004042fe\n.text:0000000000404301\n.text:0000000000404304\n.text:000000000040430a\n.text:0000000000404310\n.text:0000000000404313\n.text:0000000000404316\n.text:0000000000404319\n.text:000000000040431e\n.text:0000000000404321\n.text:0000000000404324\n.text:0000000000404326\n.text:000000000040432b\n.text:000000000040432d\n.text:0000000000404330\n.text:0000000000404332\n.text:0000000000404335\n.text:0000000000404338\n.text:000000000040433f\n.text:0000000000404342\n.text:0000000000404344\n.text:0000000000404347\n.text:000000000040434b\n.text:000000000040434d\n.text:0000000000404351\n.text:0000000000404358\n.text:000000000040435a\n.text:000000000040435d\n.text:0000000000404360\n.text:0000000000404362\n.text:0000000000404364\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436e\n.text:000000000040436f\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404377\n.text:0000000000404378\n'
p797
tp798
sS'quotearg_n_options'
p799
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p800
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004013f0\nTEST R12D,R12D\nJS 0x00403ba1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609218]\nCMP dword ptr [0x00609220],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403abb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609228\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x004048e0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609218],R15\nJNZ 0x00403a82\nMOVUPS XMM0,xmmword ptr [0x00609228]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609220]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401520\nMOV dword ptr [0x00609220],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402c10\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403b1d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403b8b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609330\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403b48\nCALL 0x004013d0\nMOV RDI,R15\nCALL 0x00404970\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402c10\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004013e0\n'
p802
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 e1 d9 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ee 57 20 00\n44 39 25 ef 57 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 28 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 78 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d a3 57 20 00\n75 0b\n0f 10 05 aa 57 20 00\n41 0f 11 07\n8b 05 98 57 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d da ff ff\n89 1d 77 57 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 30 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 88 d8 ff ff\n4c 89 ff\ne8 20 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 3a d8 ff ff\n'
p803
S'.text:00000000004039f0\n.text:00000000004039f1\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f7\n.text:00000000004039f9\n.text:00000000004039fa\n.text:00000000004039fe\n.text:0000000000403a01\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a0a\n.text:0000000000403a0f\n.text:0000000000403a12\n.text:0000000000403a18\n.text:0000000000403a1d\n.text:0000000000403a1f\n.text:0000000000403a23\n.text:0000000000403a2a\n.text:0000000000403a31\n.text:0000000000403a36\n.text:0000000000403a3b\n.text:0000000000403a40\n.text:0000000000403a42\n.text:0000000000403a47\n.text:0000000000403a4a\n.text:0000000000403a4d\n.text:0000000000403a53\n.text:0000000000403a55\n.text:0000000000403a58\n.text:0000000000403a5c\n.text:0000000000403a5f\n.text:0000000000403a63\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a6e\n.text:0000000000403a75\n.text:0000000000403a77\n.text:0000000000403a7e\n.text:0000000000403a82\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a8f\n.text:0000000000403a92\n.text:0000000000403a95\n.text:0000000000403a99\n.text:0000000000403a9b\n.text:0000000000403a9e\n.text:0000000000403aa3\n.text:0000000000403aa9\n.text:0000000000403aac\n.text:0000000000403ab1\n.text:0000000000403ab6\n.text:0000000000403abb\n.text:0000000000403abe\n.text:0000000000403ac2\n.text:0000000000403ac6\n.text:0000000000403acb\n.text:0000000000403acf\n.text:0000000000403ad3\n.text:0000000000403ad7\n.text:0000000000403adb\n.text:0000000000403adf\n.text:0000000000403ae4\n.text:0000000000403ae7\n.text:0000000000403aea\n.text:0000000000403aed\n.text:0000000000403af2\n.text:0000000000403af5\n.text:0000000000403af8\n.text:0000000000403afb\n.text:0000000000403afc\n.text:0000000000403b01\n.text:0000000000403b05\n.text:0000000000403b08\n.text:0000000000403b0b\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b16\n.text:0000000000403b1b\n.text:0000000000403b1d\n.text:0000000000403b21\n.text:0000000000403b26\n.text:0000000000403b29\n.text:0000000000403b2c\n.text:0000000000403b31\n.text:0000000000403b36\n.text:0000000000403b39\n.text:0000000000403b3e\n.text:0000000000403b41\n.text:0000000000403b43\n.text:0000000000403b48\n.text:0000000000403b4b\n.text:0000000000403b50\n.text:0000000000403b53\n.text:0000000000403b56\n.text:0000000000403b5b\n.text:0000000000403b5e\n.text:0000000000403b62\n.text:0000000000403b65\n.text:0000000000403b68\n.text:0000000000403b6d\n.text:0000000000403b72\n.text:0000000000403b77\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b7e\n.text:0000000000403b83\n.text:0000000000403b87\n.text:0000000000403b8b\n.text:0000000000403b8f\n.text:0000000000403b92\n.text:0000000000403b96\n.text:0000000000403b97\n.text:0000000000403b99\n.text:0000000000403b9b\n.text:0000000000403b9d\n.text:0000000000403b9f\n.text:0000000000403ba0\n.text:0000000000403ba1\n'
p804
tp805
sS'strcmp'
p806
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x00609110]\n'
p809
S'ff 25 5a 7b 20 00\n'
p810
S'.plt:00000000004015b0\n'
p811
tp812
sS'read'
p813
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_006090e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x006090e8]\n'
p816
S'ff 25 82 7b 20 00\n'
p817
S'.plt:0000000000401560\n'
p818
tp819
sS'set_custom_quoting'
p820
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p821
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402b85\nTEST RDX,RDX\nJZ 0x00402b85\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004013e0\n'
p823
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 55 e8 ff ff\n'
p824
S'.text:0000000000402b60\n.text:0000000000402b63\n.text:0000000000402b68\n.text:0000000000402b6c\n.text:0000000000402b72\n.text:0000000000402b75\n.text:0000000000402b77\n.text:0000000000402b7a\n.text:0000000000402b7c\n.text:0000000000402b80\n.text:0000000000402b84\n.text:0000000000402b85\n.text:0000000000402b86\n'
p825
tp826
sS'c_isalpha'
p827
(S'\n__stdcall c_isalpha()\n'
p828
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p829
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040526b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p830
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p831
S'.text:0000000000405250\n.text:0000000000405253\n.text:0000000000405256\n.text:0000000000405258\n.text:0000000000405262\n.text:0000000000405264\n.text:0000000000405267\n.text:000000000040526a\n.text:000000000040526b\n.text:000000000040526d\n'
p832
tp833
sS'quotearg_custom_mem'
p834
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p835
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403e00\n'
p837
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p838
S'.text:0000000000403e90\n.text:0000000000403e93\n.text:0000000000403e96\n.text:0000000000403e99\n.text:0000000000403e9c\n.text:0000000000403e9e\n.text:0000000000403ea1\n'
p839
tp840
sS'close_stdout'
p841
(S'\n__stdcall close_stdout()\n'
p842
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402057;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040686c,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402057:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609288]\nCALL 0x00405370\nTEST EAX,EAX\nJZ 0x00402057\nCMP byte ptr [0x006092d8],0x0\nJZ 0x0040206c\nCALL 0x004013f0\nCMP dword ptr [RAX],0x20\nJNZ 0x0040206c\nMOV RDI,qword ptr [0x006092c0]\nCALL 0x00405370\nTEST EAX,EAX\nJNZ 0x004020b1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405c05\nMOV EDX,0x5\nCALL 0x00401490\nMOV R14,RAX\nMOV RBX,qword ptr [0x006092d0]\nCALL 0x004013f0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004020bc\nXOR EDI,EDI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004016b0\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401410\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401410\nMOV RDI,RBX\nCALL 0x00403d80\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405c11\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004016b0\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401410\n'
p844
S'55\n41 56\n53\n48 8b 3d 4d 72 20 00\ne8 30 33 00 00\n85 c0\n74 13\n80 3d 8d 72 20 00 00\n74 1f\ne8 9e f3 ff ff\n83 38 20\n75 15\n48 8b 3d 62 72 20 00\ne8 0d 33 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 05 5c 40 00\nba 05 00 00 00\ne8 13 f4 ff ff\n49 89 c6\n48 8b 1d 49 72 20 00\ne8 64 f3 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 6c 68 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 0a f6 ff ff\n8b 3d 64 71 20 00\ne8 5f f3 ff ff\n8b 3d 59 71 20 00\ne8 54 f3 ff ff\n48 89 df\ne8 bc 1c 00 00\n48 89 c1\n31 ff\nba 11 5c 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 d6 f5 ff ff\n8b 3d 30 71 20 00\ne8 2b f3 ff ff\n'
p845
S'.text:0000000000402030\n.text:0000000000402031\n.text:0000000000402033\n.text:0000000000402034\n.text:000000000040203b\n.text:0000000000402040\n.text:0000000000402042\n.text:0000000000402044\n.text:000000000040204b\n.text:000000000040204d\n.text:0000000000402052\n.text:0000000000402055\n.text:0000000000402057\n.text:000000000040205e\n.text:0000000000402063\n.text:0000000000402065\n.text:0000000000402067\n.text:0000000000402068\n.text:000000000040206a\n.text:000000000040206b\n.text:000000000040206c\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402078\n.text:000000000040207d\n.text:0000000000402080\n.text:0000000000402087\n.text:000000000040208c\n.text:000000000040208f\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402095\n.text:000000000040209a\n.text:000000000040209c\n.text:000000000040209e\n.text:00000000004020a1\n.text:00000000004020a6\n.text:00000000004020ac\n.text:00000000004020b1\n.text:00000000004020b7\n.text:00000000004020bc\n.text:00000000004020bf\n.text:00000000004020c4\n.text:00000000004020c7\n.text:00000000004020c9\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d2\n.text:00000000004020d5\n.text:00000000004020da\n.text:00000000004020e0\n'
p846
tp847
sS'version_etc_ar'
p848
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p849
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p850
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004046f0\nJMP 0x00404380\n'
p851
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p852
S'.text:00000000004046e0\n.text:00000000004046e7\n.text:00000000004046f0\n.text:00000000004046f6\n.text:00000000004046fa\n.text:00000000004046fc\n'
p853
tp854
sS'strtoumax'
p855
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_006091b0)();\u000a  return uVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006091b0]\n'
p858
S'ff 25 ba 7a 20 00\n'
p859
S'.plt:00000000004016f0\n'
p860
tp861
sS'rpl_calloc'
p862
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p863
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609108)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p864
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404d7b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404d80\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404d80\nPUSH RAX\nCALL 0x004013f0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004015a0\n'
p865
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 7f c6 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 15 c8 ff ff\n'
p866
S'.text:0000000000404d40\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d52\n.text:0000000000404d54\n.text:0000000000404d57\n.text:0000000000404d5b\n.text:0000000000404d5d\n.text:0000000000404d60\n.text:0000000000404d63\n.text:0000000000404d66\n.text:0000000000404d69\n.text:0000000000404d6b\n.text:0000000000404d6c\n.text:0000000000404d71\n.text:0000000000404d77\n.text:0000000000404d79\n.text:0000000000404d7a\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d86\n'
p867
tp868
sS'memset'
p869
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x006090c8]\n'
p872
S'ff 25 a2 7b 20 00\n'
p873
S'.plt:0000000000401520\n'
p874
tp875
sS'c_isxdigit'
p876
(S'\n__stdcall c_isxdigit()\n'
p877
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p878
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040534b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p879
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p880
S'.text:0000000000405330\n.text:0000000000405333\n.text:0000000000405336\n.text:0000000000405338\n.text:0000000000405342\n.text:0000000000405344\n.text:0000000000405347\n.text:000000000040534a\n.text:000000000040534b\n.text:000000000040534d\n'
p881
tp882
sS'__libc_csu_fini'
p883
(S'\n__stdcall __libc_csu_fini()\n'
p884
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p885
S'RET\n'
p886
S'f3 c3\n'
p887
S'.text:0000000000405780\n'
p888
tp889
sS'getc_unlocked'
p890
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00609058]\n'
p893
S'ff 25 12 7c 20 00\n'
p894
S'.plt:0000000000401440\n'
p895
tp896
sS'abort'
p897
(S'\n__stdcall abort()\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609028)();\u000a  return;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x00609028]\n'
p900
S'ff 25 42 7c 20 00\n'
p901
S'.plt:00000000004013e0\n'
p902
tp903
sS'memmove'
p904
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_00609188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x00609188]\n'
p907
S'ff 25 e2 7a 20 00\n'
p908
S'.plt:00000000004016a0\n'
p909
tp910
sS'group_number'
p911
(S'\n__stdcall group_number(char * number, size_t numberlen, char * grouping, char * thousands_sep)\n'
p912
V\u000achar * group_number(char *number,size_t numberlen,char *grouping,char *thousands_sep)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t __n;\u000a  ulong __n_00;\u000a  char buf [41];\u000a  undefined local_68 [56];\u000a  \u000a  __n = strlen(thousands_sep);\u000a  memcpy(local_68,number,numberlen);\u000a  number = number + numberlen;\u000a  __n_00 = 0xffffffffffffffff;\u000a  while( true ) {\u000a    bVar1 = *grouping;\u000a    if (bVar1 != 0) {\u000a      __n_00 = (ulong)bVar1;\u000a      if (0x7e < bVar1) {\u000a        __n_00 = numberlen;\u000a      }\u000a      grouping = (char *)((byte *)grouping + 1);\u000a    }\u000a    if (numberlen < __n_00) {\u000a      __n_00 = numberlen;\u000a    }\u000a    number = number + -__n_00;\u000a    memcpy(number,local_68 + (numberlen - __n_00),__n_00);\u000a    numberlen = numberlen - __n_00;\u000a    if (numberlen == 0) break;\u000a    number = number + -__n;\u000a    memcpy(number,thousands_sep,__n);\u000a  }\u000a  return number;\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x004014b0\nMOV R14,RAX\nLEA RDI,[RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x004015c0\nADD RBX,R12\nMOV R13,R14\nNEG R13\nMOV RBP,-0x1\nJMP 0x00402843\nADD RBX,R13\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nCALL 0x004015c0\nMOVZX EAX,byte ptr [R15]\nTEST RAX,RAX\nJZ 0x00402858\nCMP AL,0x7f\nCMOVNC RAX,R12\nINC R15\nMOV RBP,RAX\nCMP R12,RBP\nCMOVC RBP,R12\nSUB RBX,RBP\nMOV RAX,R12\nSUB RAX,RBP\nLEA RSI,[RSP + RAX*0x1 + 0x10]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x004015c0\nSUB R12,RBP\nJNZ 0x00402830\nMOV RAX,RBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p914
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n49 89 d7\n49 89 f4\n48 89 fb\n48 89 4c 24 08\n48 89 cf\ne8 ac ec ff ff\n49 89 c6\n48 8d 7c 24 10\n48 89 de\n4c 89 e2\ne8 a9 ed ff ff\n4c 01 e3\n4d 89 f5\n49 f7 dd\n48 c7 c5 ff ff ff ff\neb 1a\n4c 01 eb\n48 89 df\n48 8b 74 24 08\n4c 89 f2\ne8 7d ed ff ff\n41 0f b6 07\n48 85 c0\n74 0c\n3c 7f\n49 0f 43 c4\n49 ff c7\n48 89 c5\n49 39 ec\n49 0f 42 ec\n48 29 eb\n4c 89 e0\n48 29 e8\n48 8d 74 04 10\n48 89 df\n48 89 ea\ne8 48 ed ff ff\n49 29 ec\n75 b3\n48 89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p915
S'.text:00000000004027e0\n.text:00000000004027e1\n.text:00000000004027e3\n.text:00000000004027e5\n.text:00000000004027e7\n.text:00000000004027e9\n.text:00000000004027ea\n.text:00000000004027ee\n.text:00000000004027f1\n.text:00000000004027f4\n.text:00000000004027f7\n.text:00000000004027fc\n.text:00000000004027ff\n.text:0000000000402804\n.text:0000000000402807\n.text:000000000040280c\n.text:000000000040280f\n.text:0000000000402812\n.text:0000000000402817\n.text:000000000040281a\n.text:000000000040281d\n.text:0000000000402820\n.text:0000000000402827\n.text:0000000000402830\n.text:0000000000402833\n.text:0000000000402836\n.text:000000000040283b\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402847\n.text:000000000040284a\n.text:000000000040284c\n.text:000000000040284e\n.text:0000000000402852\n.text:0000000000402855\n.text:0000000000402858\n.text:000000000040285b\n.text:000000000040285f\n.text:0000000000402862\n.text:0000000000402865\n.text:0000000000402868\n.text:000000000040286d\n.text:0000000000402870\n.text:0000000000402873\n.text:0000000000402878\n.text:000000000040287b\n.text:000000000040287d\n.text:0000000000402880\n.text:0000000000402884\n.text:0000000000402885\n.text:0000000000402887\n.text:0000000000402889\n.text:000000000040288b\n.text:000000000040288d\n.text:000000000040288e\n'
p916
tp917
sS'c_isascii'
p918
(S'\n__stdcall c_isascii()\n'
p919
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p920
S'CMP EDI,0x80\nSETC AL\nRET\n'
p921
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p922
S'.text:0000000000405270\n.text:0000000000405276\n.text:0000000000405279\n'
p923
tp924
sS'__xargmatch_internal'
p925
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p926
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00404ee0\nTEST RAX,RAX\nJNS 0x00405199\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00404fe0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00405050\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p928
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p929
S'.text:0000000000405140\n.text:0000000000405141\n.text:0000000000405143\n.text:0000000000405145\n.text:0000000000405147\n.text:0000000000405149\n.text:000000000040514a\n.text:000000000040514b\n.text:000000000040514e\n.text:0000000000405151\n.text:0000000000405154\n.text:0000000000405157\n.text:000000000040515a\n.text:000000000040515d\n.text:0000000000405160\n.text:0000000000405163\n.text:0000000000405166\n.text:0000000000405169\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405173\n.text:0000000000405176\n.text:0000000000405179\n.text:000000000040517c\n.text:0000000000405181\n.text:0000000000405184\n.text:0000000000405187\n.text:000000000040518a\n.text:000000000040518f\n.text:0000000000405192\n.text:0000000000405199\n.text:000000000040519d\n.text:000000000040519e\n.text:00000000004051a0\n.text:00000000004051a2\n.text:00000000004051a4\n.text:00000000004051a6\n.text:00000000004051a7\n'
p930
tp931
sS'version_etc'
p932
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p933
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p934
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004047b2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404710\nADD RSP,0xd8\nRET\n'
p935
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p936
S'.text:0000000000404770\n.text:0000000000404777\n.text:0000000000404779\n.text:000000000040477b\n.text:0000000000404780\n.text:0000000000404785\n.text:000000000040478a\n.text:0000000000404792\n.text:000000000040479a\n.text:00000000004047a2\n.text:00000000004047aa\n.text:00000000004047b2\n.text:00000000004047b7\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c6\n.text:00000000004047ce\n.text:00000000004047d3\n.text:00000000004047db\n.text:00000000004047e2\n.text:00000000004047e5\n.text:00000000004047ea\n.text:00000000004047f1\n'
p937
tp938
sS'sysv_sum_file'
p939
(S'\n__stdcall sysv_sum_file(char * file)\n'
p940
V\u000a_Bool sysv_sum_file(char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  uint __fd;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  size_t sVar7;\u000a  byte *pbVar8;\u000a  uintmax_t n;\u000a  int in_ESI;\u000a  ulong uVar9;\u000a  char hbuf [652];\u000a  uchar buf [8192];\u000a  char local_22c8 [656];\u000a  byte local_2038 [8200];\u000a  \u000a  if ((*file == '-') && (file[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    __fd = 0;\u000a    bVar2 = true;\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a    __fd = open(file,0);\u000a    if (__fd == 0xffffffff) goto LAB_00401f54;\u000a  }\u000a  uVar9 = 0;\u000a  n = 0;\u000a  while( true ) {\u000a    sVar4 = safe_read((void *)(ulong)__fd,(size_t)local_2038);\u000a    if (sVar4 == 0xffffffffffffffff) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar1,&DAT_0040686c,pcVar6);\u000a      if (!bVar2) {\u000a        close(__fd);\u000a      }\u000a      return false;\u000a    }\u000a    sVar7 = sVar4;\u000a    pbVar8 = local_2038;\u000a    if (sVar4 == 0) break;\u000a    do {\u000a      uVar9 = (ulong)((int)uVar9 + (uint)*pbVar8);\u000a      sVar7 = sVar7 - 1;\u000a      pbVar8 = pbVar8 + 1;\u000a    } while (sVar7 != 0);\u000a    n = n + sVar4;\u000a  }\u000a  if ((bVar2) || (iVar3 = close(__fd), iVar3 == 0)) {\u000a    iVar3 = (int)(uVar9 >> 0x10);\u000a    pcVar6 = human_readable(n,local_22c8,0,1);\u000a    __printf_chk(1,"%d %s",\u000a                 (ulong)((((uint)uVar9 & 0xffff) + iVar3 >> 0x10) + (iVar3 + (uint)uVar9 & 0xffff)),\u000a                 pcVar6);\u000a    if (in_ESI != 0) {\u000a      __printf_chk(1,&DAT_0040686b,file);\u000a    }\u000a    putchar_unlocked(10);\u000a    return true;\u000a  }\u000aLAB_00401f54:\u000a  puVar5 = (uint *)__errno_location();\u000a  __fd = *puVar5;\u000a  pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)__fd,&DAT_0040686c,pcVar6);\u000a  return false;\u000a}\u000a\u000a
p941
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x22a8\nMOV EBX,ESI\nMOV R15,RDI\nCMP byte ptr [R15],0x2d\nJNZ 0x00401e83\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x00401ea0\nXOR R13D,R13D\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDI,R15\nCALL 0x004016c0\nMOV R12D,EAX\nCMP R12D,-0x1\nJNZ 0x00401ead\nJMP 0x00401f54\nMOV byte ptr [0x006092c9],0x1\nXOR R12D,R12D\nMOV R13B,0x1\nMOV dword ptr [RSP + 0xc],EBX\nXOR R14D,R14D\nLEA RBP,[0x2a0 + RSP]\nXOR EBX,EBX\nJMP 0x00401ec3\nADD RBX,RAX\nMOV EDX,0x2000\nMOV EDI,R12D\nMOV RSI,RBP\nCALL 0x004042f0\nCMP RAX,-0x1\nJZ 0x00401f00\nTEST RAX,RAX\nJZ 0x00401f43\nMOV RCX,RAX\nMOV RDX,RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ESI,byte ptr [RDX]\nADD R14D,ESI\nINC RDX\nDEC RCX\nJNZ 0x00401ef0\nJMP 0x00401ec0\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403da0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004016b0\nTEST R13B,R13B\nJNZ 0x00401fef\nMOV EDI,R12D\nCALL 0x00401540\nXOR EBX,EBX\nJMP 0x00401fef\nTEST R13B,R13B\nJNZ 0x00401f81\nMOV EDI,R12D\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x00401f81\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403da0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004016b0\nJMP 0x00401fef\nMOVZX EBP,R14W\nMOV EAX,R14D\nSHR EAX,0x10\nADD EBP,EAX\nADD EAX,R14D\nMOVZX EAX,AX\nSHR EBP,0x10\nADD EBP,EAX\nLEA RSI,[RSP + 0x10]\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x200\nMOV RDI,RBX\nCALL 0x00402120\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405b01\nXOR EAX,EAX\nMOV EDX,EBP\nCALL 0x00401680\nCMP dword ptr [RSP + 0xc],0x0\nJZ 0x00401fe3\nMOV EDI,0x1\nMOV ESI,0x40686b\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401680\nMOV EDI,0xa\nCALL 0x004015d0\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x22a8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p942
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 22 00 00\n89 f3\n49 89 ff\n41 80 3f 2d\n75 07\n41 80 7f 01 00\n74 1d\n45 31 ed\n31 f6\n31 c0\n4c 89 ff\ne8 2e f8 ff ff\n41 89 c4\n41 83 fc ff\n75 12\ne9 b4 00 00 00\nc6 05 22 74 20 00 01\n45 31 e4\n41 b5 01\n89 5c 24 0c\n45 31 f6\n48 8d ac 24 a0 02 00 00\n31 db\neb 03\n48 01 c3\nba 00 20 00 00\n44 89 e7\n48 89 ee\ne8 1d 24 00 00\n48 83 f8 ff\n74 27\n48 85 c0\n74 65\n48 89 c1\n48 89 ea\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 32\n41 01 f6\n48 ff c2\n48 ff c9\n75 f2\neb c0\ne8 eb f4 ff ff\n8b 28\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 88 1e 00 00\n48 89 c1\n31 ff\nba 6c 68 40 00\n31 c0\n89 ee\ne8 85 f7 ff ff\n45 84 ed\n0f 85 bb 00 00 00\n44 89 e7\ne8 04 f6 ff ff\n31 db\ne9 ac 00 00 00\n45 84 ed\n75 39\n44 89 e7\ne8 f0 f5 ff ff\n85 c0\n74 2d\ne8 97 f4 ff ff\n8b 28\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 34 1e 00 00\n48 89 c1\n31 ff\nba 6c 68 40 00\n31 c0\n89 ee\ne8 31 f7 ff ff\neb 6e\n41 0f b7 ee\n44 89 f0\nc1 e8 10\n01 c5\n44 01 f0\n0f b7 c0\nc1 ed 10\n01 c5\n48 8d 74 24 10\n31 d2\nb9 01 00 00 00\n41 b8 00 02 00 00\n48 89 df\ne8 6e 01 00 00\n48 89 c1\nbf 01 00 00 00\nbe 01 5b 40 00\n31 c0\n89 ea\ne8 b8 f6 ff ff\n83 7c 24 0c 00\n74 14\nbf 01 00 00 00\nbe 6b 68 40 00\n31 c0\n4c 89 fa\ne8 9d f6 ff ff\nbf 0a 00 00 00\ne8 e3 f5 ff ff\nb3 01\n89 d8\n48 81 c4 a8 22 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p943
S'.text:0000000000401e60\n.text:0000000000401e61\n.text:0000000000401e63\n.text:0000000000401e65\n.text:0000000000401e67\n.text:0000000000401e69\n.text:0000000000401e6a\n.text:0000000000401e71\n.text:0000000000401e73\n.text:0000000000401e76\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e81\n.text:0000000000401e83\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8d\n.text:0000000000401e92\n.text:0000000000401e95\n.text:0000000000401e99\n.text:0000000000401e9b\n.text:0000000000401ea0\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401ead\n.text:0000000000401eb1\n.text:0000000000401eb4\n.text:0000000000401ebc\n.text:0000000000401ebe\n.text:0000000000401ec0\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401ecb\n.text:0000000000401ece\n.text:0000000000401ed3\n.text:0000000000401ed7\n.text:0000000000401ed9\n.text:0000000000401edc\n.text:0000000000401ede\n.text:0000000000401ee1\n.text:0000000000401ee4\n.text:0000000000401ef0\n.text:0000000000401ef3\n.text:0000000000401ef6\n.text:0000000000401ef9\n.text:0000000000401efc\n.text:0000000000401efe\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f07\n.text:0000000000401f09\n.text:0000000000401f0b\n.text:0000000000401f10\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f22\n.text:0000000000401f24\n.text:0000000000401f26\n.text:0000000000401f2b\n.text:0000000000401f2e\n.text:0000000000401f34\n.text:0000000000401f37\n.text:0000000000401f3c\n.text:0000000000401f3e\n.text:0000000000401f43\n.text:0000000000401f46\n.text:0000000000401f48\n.text:0000000000401f4b\n.text:0000000000401f50\n.text:0000000000401f52\n.text:0000000000401f54\n.text:0000000000401f59\n.text:0000000000401f5b\n.text:0000000000401f5d\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f67\n.text:0000000000401f6c\n.text:0000000000401f6f\n.text:0000000000401f71\n.text:0000000000401f76\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f81\n.text:0000000000401f85\n.text:0000000000401f88\n.text:0000000000401f8b\n.text:0000000000401f8d\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f96\n.text:0000000000401f98\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401faa\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbf\n.text:0000000000401fc1\n.text:0000000000401fc3\n.text:0000000000401fc8\n.text:0000000000401fcd\n.text:0000000000401fcf\n.text:0000000000401fd4\n.text:0000000000401fd9\n.text:0000000000401fdb\n.text:0000000000401fde\n.text:0000000000401fe3\n.text:0000000000401fe8\n.text:0000000000401fed\n.text:0000000000401fef\n.text:0000000000401ff1\n.text:0000000000401ff8\n.text:0000000000401ff9\n.text:0000000000401ffb\n.text:0000000000401ffd\n.text:0000000000401fff\n.text:0000000000402001\n.text:0000000000402002\n'
p944
tp945
sS'setvbuf'
p946
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_00609180)();\u000a  return iVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x00609180]\n'
p949
S'ff 25 ea 7a 20 00\n'
p950
S'.plt:0000000000401690\n'
p951
tp952
sS'posix_fadvise'
p953
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006090e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x006090e0]\n'
p956
S'ff 25 8a 7b 20 00\n'
p957
S'.plt:0000000000401550\n'
p958
tp959
sS'__ctype_b_loc'
p960
(S'\n__stdcall __ctype_b_loc()\n'
p961
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091e8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x006091e8]\n'
p963
S'ff 25 82 7a 20 00\n'
p964
S'.plt:0000000000401760\n'
p965
tp966
sS'lseek'
p967
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x006090b8]\n'
p970
S'ff 25 b2 7b 20 00\n'
p971
S'.plt:0000000000401500\n'
p972
tp973
sS'fdadvise'
p974
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006090e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'JMP 0x00401550\n'
p977
S'e9 5b f4 ff ff\n'
p978
S'.text:00000000004020f0\n'
p979
tp980
sS'default_block_size'
p981
(S'\n__stdcall default_block_size()\n'
p982
V\u000auintmax_t default_block_size(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uintmax_t uVar2;\u000a  \u000a  pcVar1 = getenv("POSIXLY_CORRECT");\u000a  uVar2 = 0x400;\u000a  if (pcVar1 != (char *)0x0) {\u000a    uVar2 = 0x200;\u000a  }\u000a  return uVar2;\u000a}\u000a\u000a
p983
S'PUSH RAX\nMOV EDI,0x405c87\nCALL 0x004013c0\nTEST RAX,RAX\nMOV ECX,0x200\nMOV EAX,0x400\nCMOVNZ RAX,RCX\nPOP RCX\nRET\n'
p984
S'50\nbf 87 5c 40 00\ne8 e5 e9 ff ff\n48 85 c0\nb9 00 02 00 00\nb8 00 04 00 00\n48 0f 45 c1\n59\nc3\n'
p985
S'.text:00000000004029d0\n.text:00000000004029d1\n.text:00000000004029d6\n.text:00000000004029db\n.text:00000000004029de\n.text:00000000004029e3\n.text:00000000004029e8\n.text:00000000004029ec\n.text:00000000004029ed\n'
p986
tp987
sS'quotearg'
p988
(S'\n__stdcall quotearg(char * arg)\n'
p989
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004039e0\n'
p991
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p992
S'.text:0000000000403bc0\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc8\n'
p993
tp994
sS'_start'
p995
(S'\n__stdcall _start()\n'
p996
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p997
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405780\nMOV RCX,0x405710\nMOV RDI,0x401b00\nCALL qword ptr [0x00608ff0]\nHLT\n'
p998
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 80 57 40 00\n48 c7 c1 10 57 40 00\n48 c7 c7 00 1b 40 00\nff 15 46 78 20 00\nf4\n'
p999
S'.text:0000000000401780\n.text:0000000000401782\n.text:0000000000401785\n.text:0000000000401786\n.text:0000000000401789\n.text:000000000040178d\n.text:000000000040178e\n.text:000000000040178f\n.text:0000000000401796\n.text:000000000040179d\n.text:00000000004017a4\n.text:00000000004017aa\n'
p1000
tp1001
sS'c_iscntrl'
p1002
(S'\n__stdcall c_iscntrl()\n'
p1003
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1004
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405298\nRET\nCMP EDI,0x7f\nJZ 0x00405297\nXOR EAX,EAX\nRET\n'
p1005
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1006
S'.text:0000000000405290\n.text:0000000000405292\n.text:0000000000405295\n.text:0000000000405297\n.text:0000000000405298\n.text:000000000040529b\n.text:000000000040529d\n.text:000000000040529f\n'
p1007
tp1008
sS'humblock'
p1009
(S'\n__stdcall humblock(char * spec, uintmax_t * block_size, int * options)\n'
p1010
V\u000astrtol_error humblock(char *spec,uintmax_t *block_size,int *options)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  char *in_RAX;\u000a  ptrdiff_t pVar3;\u000a  uintmax_t uVar4;\u000a  uint uVar5;\u000a  char *arg;\u000a  uint uVar6;\u000a  char *local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (((spec == (char *)0x0) &&\u000a      (local_28 = in_RAX, spec = getenv("BLOCK_SIZE"), spec == (char *)0x0)) &&\u000a     (spec = getenv("BLOCKSIZE"), spec == (char *)0x0)) {\u000a    uVar6 = 0;\u000a    uVar4 = default_block_size();\u000a  }\u000a  else {\u000a    arg = spec + 1;\u000a    if (*spec != '\u005c'') {\u000a      arg = spec;\u000a    }\u000a    uVar6 = (uint)(*spec == '\u005c'') << 2;\u000a    pVar3 = argmatch(arg,block_size_args,(char *)block_size_opts,4);\u000a    if ((int)pVar3 < 0) {\u000a      sVar2 = xstrtoumax(arg,&local_28,(uintmax_t *)0x0,(char *)block_size);\u000a      if (sVar2 != LONGINT_OK) {\u000a        *options = 0;\u000a        return sVar2;\u000a      }\u000a      cVar1 = *arg;\u000a      while (9 < (byte)(cVar1 - 0x30U)) {\u000a        if (local_28 == arg) {\u000a          uVar5 = uVar6 | 0x80;\u000a          uVar6 = uVar6 | 0x180;\u000a          if ((local_28[-1] != 'B') || (uVar5 = uVar6, local_28[-2] == 'i')) {\u000a            uVar6 = uVar5 | 0x20;\u000a          }\u000a          break;\u000a        }\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a      }\u000a      goto LAB_0040293a;\u000a    }\u000a    uVar6 = uVar6 | block_size_opts[(long)(int)pVar3];\u000a    uVar4 = 1;\u000a  }\u000a  *block_size = uVar4;\u000aLAB_0040293a:\u000a  *options = uVar6;\u000a  return LONGINT_OK;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nTEST RDI,RDI\nJNZ 0x004028fa\nMOV EDI,0x405c4e\nCALL 0x004013c0\nMOV RDI,RAX\nTEST RDI,RDI\nJNZ 0x004028fa\nMOV EDI,0x405c59\nCALL 0x004013c0\nMOV RDI,RAX\nTEST RDI,RDI\nJZ 0x00402996\nXOR EBP,EBP\nCMP byte ptr [RDI],0x27\nLEA RBX,[RDI + 0x1]\nSETZ BPL\nCMOVNZ RBX,RDI\nSHL EBP,0x2\nMOV ESI,0x405cb0\nMOV EDX,0x405cc8\nMOV ECX,0x4\nMOV RDI,RBX\nCALL 0x00404ee0\nTEST EAX,EAX\nJS 0x00402941\nCDQE\nOR EBP,dword ptr [0x405cc8 + RAX*0x4]\nMOV EAX,0x1\nMOV qword ptr [R15],RAX\nMOV dword ptr [R14],EBP\nXOR EAX,EAX\nJMP 0x00402962\nMOV RSI,RSP\nXOR EDX,EDX\nMOV R8D,0x405c63\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x00404a60\nTEST EAX,EAX\nJZ 0x0040296d\nMOV dword ptr [R14],0x0\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV AL,byte ptr [RBX]\nADD AL,0xd0\nCMP AL,0xa\nJC 0x0040293a\nMOV RAX,qword ptr [RSP]\nNOP dword ptr [RAX]\nCMP RAX,RBX\nJZ 0x0040299f\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nADD CL,0xd0\nCMP CL,0xa\nJNC 0x00402980\nJMP 0x0040293a\nXOR EBP,EBP\nCALL 0x004029d0\nJMP 0x00402937\nMOV ECX,EBP\nOR ECX,0x80\nOR EBP,0x180\nCMP byte ptr [RAX + -0x1],0x42\nCMOVZ ECX,EBP\nJNZ 0x004029c0\nCMP byte ptr [RAX + -0x2],0x69\nJNZ 0x0040293a\nOR ECX,0x20\nMOV EBP,ECX\nJMP 0x0040293a\n'
p1012
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 85 ff\n75 28\nbf 4e 5c 40 00\ne8 e4 ea ff ff\n48 89 c7\n48 85 ff\n75 16\nbf 59 5c 40 00\ne8 d2 ea ff ff\n48 89 c7\n48 85 ff\n0f 84 9c 00 00 00\n31 ed\n80 3f 27\n48 8d 5f 01\n40 0f 94 c5\n48 0f 45 df\nc1 e5 02\nbe b0 5c 40 00\nba c8 5c 40 00\nb9 04 00 00 00\n48 89 df\ne8 bb 25 00 00\n85 c0\n78 18\n48 98\n0b 2c 85 c8 5c 40 00\nb8 01 00 00 00\n49 89 07\n41 89 2e\n31 c0\neb 21\n48 89 e6\n31 d2\n41 b8 63 5c 40 00\n48 89 df\n4c 89 f9\ne8 09 21 00 00\n85 c0\n74 12\n41 c7 06 00 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8a 03\n04 d0\n3c 0a\n72 c5\n48 8b 04 24\n0f 1f 80 00 00 00 00\n48 39 d8\n74 1a\n0f b6 4b 01\n48 ff c3\n80 c1 d0\n80 f9 0a\n73 ec\neb a4\n31 ed\ne8 33 00 00 00\neb 98\n89 e9\n81 c9 80 00 00 00\n81 cd 80 01 00 00\n80 78 ff 42\n0f 44 cd\n75 0a\n80 78 fe 69\n0f 85 7a ff ff ff\n83 c9 20\n89 cd\ne9 70 ff ff ff\n'
p1013
S'.text:00000000004028c0\n.text:00000000004028c1\n.text:00000000004028c3\n.text:00000000004028c5\n.text:00000000004028c6\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028cd\n.text:00000000004028d0\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028dc\n.text:00000000004028df\n.text:00000000004028e2\n.text:00000000004028e4\n.text:00000000004028e9\n.text:00000000004028ee\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028fa\n.text:00000000004028fc\n.text:00000000004028ff\n.text:0000000000402903\n.text:0000000000402907\n.text:000000000040290b\n.text:000000000040290e\n.text:0000000000402913\n.text:0000000000402918\n.text:000000000040291d\n.text:0000000000402920\n.text:0000000000402925\n.text:0000000000402927\n.text:0000000000402929\n.text:000000000040292b\n.text:0000000000402932\n.text:0000000000402937\n.text:000000000040293a\n.text:000000000040293d\n.text:000000000040293f\n.text:0000000000402941\n.text:0000000000402944\n.text:0000000000402946\n.text:000000000040294c\n.text:000000000040294f\n.text:0000000000402952\n.text:0000000000402957\n.text:0000000000402959\n.text:000000000040295b\n.text:0000000000402962\n.text:0000000000402966\n.text:0000000000402967\n.text:0000000000402969\n.text:000000000040296b\n.text:000000000040296c\n.text:000000000040296d\n.text:000000000040296f\n.text:0000000000402971\n.text:0000000000402973\n.text:0000000000402975\n.text:0000000000402979\n.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402985\n.text:0000000000402989\n.text:000000000040298c\n.text:000000000040298f\n.text:0000000000402992\n.text:0000000000402994\n.text:0000000000402996\n.text:0000000000402998\n.text:000000000040299d\n.text:000000000040299f\n.text:00000000004029a1\n.text:00000000004029a7\n.text:00000000004029ad\n.text:00000000004029b1\n.text:00000000004029b4\n.text:00000000004029b6\n.text:00000000004029ba\n.text:00000000004029c0\n.text:00000000004029c3\n.text:00000000004029c5\n'
p1014
tp1015
sS'c_isblank'
p1016
(S'\n__stdcall c_isblank()\n'
p1017
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1018
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1019
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1020
S'.text:0000000000405280\n.text:0000000000405283\n.text:0000000000405286\n.text:0000000000405289\n.text:000000000040528c\n.text:000000000040528e\n'
p1021
tp1022
sS'quotearg_n_mem'
p1023
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1024
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV ECX,0x6092f0\nJMP 0x004039f0\n'
p1026
S'b9 f0 92 60 00\ne9 36 fe ff ff\n'
p1027
S'.text:0000000000403bb0\n.text:0000000000403bb5\n'
p1028
tp1029
sS'atexit'
p1030
(S'\n__stdcall atexit(__func * __func)\n'
p1031
V\u000a/* WARNING: Removing unreachable block (ram,0x004057b0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091b8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1032
S'MOV RAX,0x609200\nTEST RAX,RAX\nJZ 0x004057b0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401700\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401700\n'
p1033
S'48 c7 c0 00 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 5a bf ff ff\n31 d2\n31 f6\ne9 47 bf ff ff\n'
p1034
S'.text:0000000000405790\n.text:0000000000405797\n.text:000000000040579a\n.text:000000000040579c\n.text:000000000040579f\n.text:00000000004057a1\n.text:00000000004057b0\n.text:00000000004057b2\n.text:00000000004057b4\n'
p1035
tp1036
sS'__printf_chk'
p1037
(S'\n__stdcall __printf_chk()\n'
p1038
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609178)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x00609178]\n'
p1040
S'ff 25 f2 7a 20 00\n'
p1041
S'.plt:0000000000401680\n'
p1042
tp1043
sS'fdopen'
p1044
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609168)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x00609168]\n'
p1047
S'ff 25 02 7b 20 00\n'
p1048
S'.plt:0000000000401660\n'
p1049
tp1050
sS'error'
p1051
(S'\n__stdcall error()\n'
p1052
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609190)();\u000a  return;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x00609190]\n'
p1054
S'ff 25 da 7a 20 00\n'
p1055
S'.plt:00000000004016b0\n'
p1056
tp1057
sS'strcaseeq6'
p1058
(S'\n__stdcall strcaseeq6()\n'
p1059
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404282\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404289\nJMP 0x0040429e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040429e\nTEST BPL,BPL\nJZ 0x00404299\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004042b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1061
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 b1 10 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1062
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404262\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404268\n.text:000000000040426a\n.text:000000000040426f\n.text:0000000000404273\n.text:0000000000404275\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404280\n.text:0000000000404282\n.text:0000000000404284\n.text:0000000000404287\n.text:0000000000404289\n.text:000000000040428c\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404295\n.text:0000000000404296\n.text:0000000000404297\n.text:0000000000404299\n.text:000000000040429e\n.text:00000000004042a2\n.text:00000000004042a3\n.text:00000000004042a4\n'
p1063
tp1064
sS'strcaseeq5'
p1065
(S'\n__stdcall strcaseeq5()\n'
p1066
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404236\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040423d\nJMP 0x00404254\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404254\nTEST BPL,BPL\nJZ 0x0040424f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404260\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1068
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 fd 10 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1069
S'.text:0000000000404210\n.text:0000000000404211\n.text:0000000000404213\n.text:0000000000404214\n.text:0000000000404217\n.text:0000000000404219\n.text:000000000040421c\n.text:000000000040421e\n.text:0000000000404223\n.text:0000000000404227\n.text:0000000000404229\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404232\n.text:0000000000404234\n.text:0000000000404236\n.text:0000000000404238\n.text:000000000040423b\n.text:000000000040423d\n.text:0000000000404240\n.text:0000000000404242\n.text:0000000000404246\n.text:0000000000404249\n.text:000000000040424a\n.text:000000000040424c\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404254\n.text:0000000000404255\n.text:0000000000404257\n.text:0000000000404258\n'
p1070
tp1071
sS'emit_ancillary_info'
p1072
(S'\n__stdcall emit_ancillary_info()\n'
p1073
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405b90;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("sum",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "sum";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00405a09,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00405a09);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406399;\u000a  if (__s2 == "sum") {\u000a    uVar3 = 0x4059ca;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1074
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405b90\nMOV ESI,0x4059ae\nNOP\nMOV EDI,0x405a09\nCALL 0x004015b0\nTEST EAX,EAX\nJZ 0x004019fb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x004019e0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405a09\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405a0d\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40591f\nMOV ECX,0x405a24\nXOR EAX,EAX\nCALL 0x00401680\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401670\nTEST RAX,RAX\nJZ 0x00401a84\nMOV ESI,0x405a4b\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401400\nTEST EAX,EAX\nJZ 0x00401a84\nXOR EDI,EDI\nMOV ESI,0x405a4f\nMOV EDX,0x5\nCALL 0x00401490\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405a09\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401680\nXOR EDI,EDI\nMOV ESI,0x405a94\nMOV EDX,0x5\nCALL 0x00401490\nMOV RSI,RAX\nMOV R14D,0x405a09\nMOV EDI,0x1\nMOV EDX,0x405a24\nMOV ECX,0x405a09\nXOR EAX,EAX\nCALL 0x00401680\nXOR EDI,EDI\nMOV ESI,0x405ab3\nMOV EDX,0x5\nCALL 0x00401490\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4059ca\nMOV ECX,0x406399\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401680\n'
p1075
S'41 56\n53\n50\nbb 90 5b 40 00\nbe ae 59 40 00\n66 90\nbf 09 5a 40 00\ne8 c6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 09 5a 40 00\n48 0f 45 d8\n31 ff\nbe 0d 5a 40 00\nba 05 00 00 00\ne8 74 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 1f 59 40 00\nb9 24 5a 40 00\n31 c0\ne8 4b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 2f fc ff ff\n48 85 c0\n74 3e\nbe 4b 5a 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 4f 5a 40 00\nba 05 00 00 00\ne8 23 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 09 5a 40 00\n31 c0\n48 89 ce\ne8 fc fb ff ff\n31 ff\nbe 94 5a 40 00\nba 05 00 00 00\ne8 fb f9 ff ff\n48 89 c6\n41 be 09 5a 40 00\nbf 01 00 00 00\nba 24 5a 40 00\nb9 09 5a 40 00\n31 c0\ne8 cc fb ff ff\n31 ff\nbe b3 5a 40 00\nba 05 00 00 00\ne8 cb f9 ff ff\n48 89 c2\n4c 39 f3\nb8 ca 59 40 00\nb9 99 63 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 8e fb ff ff\n'
p1076
S'.text:00000000004019d0\n.text:00000000004019d2\n.text:00000000004019d3\n.text:00000000004019d4\n.text:00000000004019d9\n.text:00000000004019de\n.text:00000000004019e0\n.text:00000000004019e5\n.text:00000000004019ea\n.text:00000000004019ec\n.text:00000000004019ee\n.text:00000000004019f2\n.text:00000000004019f6\n.text:00000000004019f9\n.text:00000000004019fb\n.text:00000000004019ff\n.text:0000000000401a02\n.text:0000000000401a07\n.text:0000000000401a0b\n.text:0000000000401a0d\n.text:0000000000401a12\n.text:0000000000401a17\n.text:0000000000401a1c\n.text:0000000000401a1f\n.text:0000000000401a24\n.text:0000000000401a29\n.text:0000000000401a2e\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a41\n.text:0000000000401a44\n.text:0000000000401a46\n.text:0000000000401a4b\n.text:0000000000401a50\n.text:0000000000401a53\n.text:0000000000401a58\n.text:0000000000401a5a\n.text:0000000000401a5c\n.text:0000000000401a5e\n.text:0000000000401a63\n.text:0000000000401a68\n.text:0000000000401a6d\n.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a7a\n.text:0000000000401a7c\n.text:0000000000401a7f\n.text:0000000000401a84\n.text:0000000000401a86\n.text:0000000000401a8b\n.text:0000000000401a90\n.text:0000000000401a95\n.text:0000000000401a98\n.text:0000000000401a9e\n.text:0000000000401aa3\n.text:0000000000401aa8\n.text:0000000000401aad\n.text:0000000000401aaf\n.text:0000000000401ab4\n.text:0000000000401ab6\n.text:0000000000401abb\n.text:0000000000401ac0\n.text:0000000000401ac5\n.text:0000000000401ac8\n.text:0000000000401acb\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ad9\n.text:0000000000401ade\n.text:0000000000401ae0\n.text:0000000000401ae3\n.text:0000000000401ae6\n.text:0000000000401aea\n.text:0000000000401aeb\n.text:0000000000401aed\n'
p1077
tp1078
sS'strcaseeq7'
p1079
(S'\n__stdcall strcaseeq7()\n'
p1080
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1081
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004042d2\nTEST ECX,0xffffffdf\nJNZ 0x004042d6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004042da\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1082
S'53\n48 89 fb\n31 ff\ne8 65 10 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1083
S'.text:00000000004042b0\n.text:00000000004042b1\n.text:00000000004042b4\n.text:00000000004042b6\n.text:00000000004042bb\n.text:00000000004042bf\n.text:00000000004042c1\n.text:00000000004042c3\n.text:00000000004042c9\n.text:00000000004042cb\n.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d2\n.text:00000000004042d4\n.text:00000000004042d6\n.text:00000000004042d8\n.text:00000000004042d9\n.text:00000000004042da\n.text:00000000004042df\n.text:00000000004042e0\n'
p1084
tp1085
sS'version_etc_va'
p1086
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1087
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1088
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404740\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040474c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404761\nINC R9\nCMP R9,0xa\nJC 0x00404720\nMOV R8,RSP\nCALL 0x00404380\nADD RSP,0x58\nRET\n'
p1089
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1090
S'.text:0000000000404710\n.text:0000000000404714\n.text:0000000000404717\n.text:0000000000404720\n.text:0000000000404723\n.text:0000000000404727\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404730\n.text:0000000000404734\n.text:0000000000404737\n.text:0000000000404740\n.text:0000000000404744\n.text:0000000000404748\n.text:000000000040474c\n.text:000000000040474f\n.text:0000000000404753\n.text:0000000000404756\n.text:0000000000404758\n.text:000000000040475b\n.text:000000000040475f\n.text:0000000000404761\n.text:0000000000404764\n.text:0000000000404769\n.text:000000000040476d\n'
p1091
tp1092
sS'xzalloc'
p1093
(S'\n__stdcall xzalloc(size_t s)\n'
p1094
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1095
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004048a0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401520\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1096
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 74 cb ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1097
S'.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404993\n.text:0000000000404994\n.text:0000000000404997\n.text:000000000040499c\n.text:000000000040499f\n.text:00000000004049a1\n.text:00000000004049a4\n.text:00000000004049a7\n.text:00000000004049ac\n.text:00000000004049af\n.text:00000000004049b3\n.text:00000000004049b4\n.text:00000000004049b6\n'
p1098
tp1099
sS'strcaseeq0'
p1100
(S'\n__stdcall strcaseeq0()\n'
p1101
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403fe5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403fec\nJMP 0x00404020\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404020\nTEST BPL,BPL\nJZ 0x0040401b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404030\nJMP 0x00404020\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d 13 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1104
S'.text:0000000000403fb0\n.text:0000000000403fb1\n.text:0000000000403fb3\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fb9\n.text:0000000000403fba\n.text:0000000000403fbb\n.text:0000000000403fbe\n.text:0000000000403fc1\n.text:0000000000403fc4\n.text:0000000000403fc7\n.text:0000000000403fc9\n.text:0000000000403fcc\n.text:0000000000403fce\n.text:0000000000403fd3\n.text:0000000000403fd6\n.text:0000000000403fd8\n.text:0000000000403fda\n.text:0000000000403fdd\n.text:0000000000403fdf\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fe7\n.text:0000000000403fea\n.text:0000000000403fec\n.text:0000000000403fef\n.text:0000000000403ff1\n.text:0000000000403ff5\n.text:0000000000403ffa\n.text:0000000000403ffd\n.text:0000000000404001\n.text:0000000000404005\n.text:0000000000404009\n.text:000000000040400d\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404024\n.text:0000000000404025\n.text:0000000000404027\n.text:0000000000404029\n.text:000000000040402b\n.text:000000000040402d\n.text:000000000040402e\n'
p1105
tp1106
sS'strcaseeq2'
p1107
(S'\n__stdcall strcaseeq2()\n'
p1108
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004040f6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004040fd\nJMP 0x0040412a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040412a\nTEST BPL,BPL\nJZ 0x00404125\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404140\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 3d 12 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:00000000004040c0\n.text:00000000004040c1\n.text:00000000004040c3\n.text:00000000004040c5\n.text:00000000004040c7\n.text:00000000004040c9\n.text:00000000004040ca\n.text:00000000004040cb\n.text:00000000004040ce\n.text:00000000004040d1\n.text:00000000004040d4\n.text:00000000004040d7\n.text:00000000004040d9\n.text:00000000004040dc\n.text:00000000004040de\n.text:00000000004040e3\n.text:00000000004040e7\n.text:00000000004040e9\n.text:00000000004040eb\n.text:00000000004040ee\n.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040f8\n.text:00000000004040fb\n.text:00000000004040fd\n.text:0000000000404100\n.text:0000000000404102\n.text:0000000000404106\n.text:000000000040410a\n.text:000000000040410e\n.text:0000000000404112\n.text:0000000000404115\n.text:0000000000404119\n.text:000000000040411a\n.text:000000000040411c\n.text:000000000040411e\n.text:0000000000404120\n.text:0000000000404122\n.text:0000000000404123\n.text:0000000000404125\n.text:000000000040412a\n.text:000000000040412e\n.text:000000000040412f\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404135\n.text:0000000000404137\n.text:0000000000404138\n'
p1112
tp1113
sS'strcaseeq1'
p1114
(S'\n__stdcall strcaseeq1()\n'
p1115
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040406d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404074\nJMP 0x004040a7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004040a7\nTEST BPL,BPL\nJZ 0x004040a2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004040c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1117
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 c6 12 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1118
S'.text:0000000000404030\n.text:0000000000404031\n.text:0000000000404033\n.text:0000000000404035\n.text:0000000000404037\n.text:0000000000404039\n.text:000000000040403a\n.text:000000000040403b\n.text:0000000000404040\n.text:0000000000404043\n.text:0000000000404046\n.text:0000000000404049\n.text:000000000040404b\n.text:000000000040404e\n.text:0000000000404053\n.text:0000000000404055\n.text:000000000040405a\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404062\n.text:0000000000404065\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406b\n.text:000000000040406d\n.text:000000000040406f\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404077\n.text:0000000000404079\n.text:000000000040407d\n.text:0000000000404081\n.text:0000000000404085\n.text:000000000040408b\n.text:000000000040408f\n.text:0000000000404092\n.text:0000000000404096\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409b\n.text:000000000040409d\n.text:000000000040409f\n.text:00000000004040a0\n.text:00000000004040a2\n.text:00000000004040a7\n.text:00000000004040ab\n.text:00000000004040ac\n.text:00000000004040ae\n.text:00000000004040b0\n.text:00000000004040b2\n.text:00000000004040b4\n.text:00000000004040b5\n'
p1119
tp1120
sS'strcaseeq4'
p1121
(S'\n__stdcall strcaseeq4()\n'
p1122
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004041dc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004041e3\nJMP 0x00404204\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404204\nTEST BPL,BPL\nJZ 0x004041ff\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404210\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 57 11 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:00000000004041b0\n.text:00000000004041b1\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041b6\n.text:00000000004041b7\n.text:00000000004041ba\n.text:00000000004041bd\n.text:00000000004041bf\n.text:00000000004041c2\n.text:00000000004041c4\n.text:00000000004041c9\n.text:00000000004041cd\n.text:00000000004041cf\n.text:00000000004041d1\n.text:00000000004041d4\n.text:00000000004041d6\n.text:00000000004041d8\n.text:00000000004041da\n.text:00000000004041dc\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e6\n.text:00000000004041e8\n.text:00000000004041ec\n.text:00000000004041f0\n.text:00000000004041f3\n.text:00000000004041f7\n.text:00000000004041f8\n.text:00000000004041fa\n.text:00000000004041fc\n.text:00000000004041fd\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404208\n.text:0000000000404209\n.text:000000000040420b\n.text:000000000040420d\n.text:000000000040420e\n'
p1126
tp1127
sS'strcaseeq3'
p1128
(S'\n__stdcall strcaseeq3()\n'
p1129
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405320\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404170\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404177\nJMP 0x0040419a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040419a\nTEST BPL,BPL\nJZ 0x00404195\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004041b0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1131
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 c3 11 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1132
S'.text:0000000000404140\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404145\n.text:0000000000404147\n.text:0000000000404148\n.text:000000000040414b\n.text:000000000040414e\n.text:0000000000404151\n.text:0000000000404153\n.text:0000000000404156\n.text:0000000000404158\n.text:000000000040415d\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404168\n.text:000000000040416a\n.text:000000000040416c\n.text:000000000040416e\n.text:0000000000404170\n.text:0000000000404172\n.text:0000000000404175\n.text:0000000000404177\n.text:000000000040417a\n.text:000000000040417c\n.text:0000000000404180\n.text:0000000000404184\n.text:0000000000404188\n.text:000000000040418b\n.text:000000000040418c\n.text:000000000040418e\n.text:0000000000404190\n.text:0000000000404192\n.text:0000000000404193\n.text:0000000000404195\n.text:000000000040419a\n.text:000000000040419b\n.text:000000000040419d\n.text:000000000040419f\n.text:00000000004041a1\n.text:00000000004041a2\n'
p1133
tp1134
sS'register_tm_clones'
p1135
(S'\n__stdcall register_tm_clones()\n'
p1136
V\u000a/* WARNING: Removing unreachable block (ram,0x00401813) */\u000a/* WARNING: Removing unreachable block (ram,0x0040181d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1137
S'MOV ESI,0x609278\nPUSH RBP\nSUB RSI,0x609278\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401828\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401828\nPOP RBP\nMOV EDI,0x609278\nJMP RAX\nPOP RBP\nRET\n'
p1138
S'be 78 92 60 00\n55\n48 81 ee 78 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 78 92 60 00\nff e0\n5d\nc3\n'
p1139
S'.text:00000000004017f0\n.text:00000000004017f5\n.text:00000000004017f6\n.text:00000000004017fd\n.text:0000000000401801\n.text:0000000000401804\n.text:0000000000401807\n.text:000000000040180b\n.text:000000000040180e\n.text:0000000000401811\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181b\n.text:000000000040181d\n.text:000000000040181e\n.text:0000000000401823\n.text:0000000000401828\n.text:0000000000401829\n'
p1140
tp1141
sS'gettext_quote'
p1142
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1143
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406260;\u000a        pcVar2 = &DAT_00406264;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401490\nCMP RAX,RBX\nJNZ 0x00403fa8\nCALL 0x004053e0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403fb0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403f58\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406250\nMOV EAX,0x406254\nJMP 0x00403fa4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403fb0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403f96\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406260\nMOV EAX,0x406264\nJMP 0x00403fa4\nCMP R14D,0x9\nMOV ECX,0x406244\nMOV EAX,0x406248\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1145
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 87 d5 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 c9 14 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 50 62 40 00\nb8 54 62 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 60 62 40 00\nb8 64 62 40 00\neb 0e\n41 83 fe 09\nb9 44 62 40 00\nb8 48 62 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1146
S'.text:0000000000403ef0\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef4\n.text:0000000000403ef7\n.text:0000000000403efa\n.text:0000000000403efc\n.text:0000000000403f01\n.text:0000000000403f04\n.text:0000000000403f09\n.text:0000000000403f0c\n.text:0000000000403f12\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1f\n.text:0000000000403f24\n.text:0000000000403f29\n.text:0000000000403f2f\n.text:0000000000403f35\n.text:0000000000403f38\n.text:0000000000403f3a\n.text:0000000000403f3c\n.text:0000000000403f41\n.text:0000000000403f45\n.text:0000000000403f47\n.text:0000000000403f49\n.text:0000000000403f4c\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f58\n.text:0000000000403f5d\n.text:0000000000403f62\n.text:0000000000403f67\n.text:0000000000403f6d\n.text:0000000000403f73\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7a\n.text:0000000000403f7f\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f87\n.text:0000000000403f8a\n.text:0000000000403f8f\n.text:0000000000403f94\n.text:0000000000403f96\n.text:0000000000403f9a\n.text:0000000000403f9f\n.text:0000000000403fa4\n.text:0000000000403fa8\n.text:0000000000403fa9\n.text:0000000000403fab\n.text:0000000000403fac\n'
p1147
tp1148
sS'bsd_sum_file'
p1149
(S'\n__stdcall bsd_sum_file(char * file)\n'
p1150
V\u000a_Bool bsd_sum_file(char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  char *pcVar5;\u000a  ulong uVar6;\u000a  uintmax_t n;\u000a  int in_ESI;\u000a  FILE *fp;\u000a  char hbuf [652];\u000a  char acStack712 [664];\u000a  \u000a  if ((*file == '-') && (file[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    bVar2 = true;\u000a    fp = stdin;\u000a  }\u000a  else {\u000a    fp = (FILE *)fopen(file,"r");\u000a    if (fp == (FILE *)0x0) goto LAB_00401dc4;\u000a    bVar2 = false;\u000a  }\u000a  fadvise(fp);\u000a  iVar3 = getc_unlocked((FILE *)fp);\u000a  if (iVar3 == -1) {\u000a    n = 0;\u000a    uVar6 = 0;\u000a  }\u000a  else {\u000a    uVar6 = 0;\u000a    n = 0;\u000a    do {\u000a      n = n + 1;\u000a      uVar6 = (ulong)(ushort)(((ushort)((int)uVar6 << 0xf) | (ushort)(uVar6 >> 1)) + (short)iVar3);\u000a      iVar3 = getc_unlocked((FILE *)fp);\u000a    } while (iVar3 != -1);\u000a  }\u000a  iVar3 = ferror_unlocked((FILE *)fp);\u000a  if (iVar3 != 0) {\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)uVar1,&DAT_0040686c,pcVar5);\u000a    if (bVar2) {\u000a      return false;\u000a    }\u000a    rpl_fclose(fp);\u000a    return false;\u000a  }\u000a  if ((bVar2) || (iVar3 = rpl_fclose(fp), iVar3 == 0)) {\u000a    pcVar5 = human_readable(n,acStack712,0,1);\u000a    __printf_chk(1,"%05d %5s",uVar6,pcVar5);\u000a    if (1 < in_ESI) {\u000a      __printf_chk(1,&DAT_0040686b,file);\u000a    }\u000a    putchar_unlocked(10);\u000a    return true;\u000a  }\u000aLAB_00401dc4:\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar1 = *puVar4;\u000a  pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,&DAT_0040686c,pcVar5);\u000a  return false;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x298\nMOV R14D,ESI\nMOV R15,RDI\nCMP byte ptr [R15],0x2d\nJNZ 0x00401ce4\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x00401d02\nMOV ESI,0x405c0f\nMOV RDI,R15\nCALL 0x004016e0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00401dc4\nXOR R13D,R13D\nJMP 0x00401d13\nMOV R12,qword ptr [0x00609290]\nMOV byte ptr [0x006092c9],0x1\nMOV R13B,0x1\nMOV ESI,0x2\nMOV RDI,R12\nCALL 0x00402100\nMOV RDI,R12\nCALL 0x00401440\nCMP EAX,-0x1\nJZ 0x00401d60\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC RBP\nMOV ECX,EBX\nSHR ECX,1\nSHL EBX,0xf\nOR EBX,ECX\nADD EBX,EAX\nMOVZX EBX,BX\nMOV RDI,R12\nCALL 0x00401440\nCMP EAX,-0x1\nJNZ 0x00401d40\nJMP 0x00401d64\nXOR EBP,EBP\nXOR EBX,EBX\nMOV RDI,R12\nCALL 0x00401590\nTEST EAX,EAX\nJZ 0x00401db3\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403da0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004016b0\nTEST R13B,R13B\nJNZ 0x00401e45\nMOV RDI,R12\nCALL 0x00404d90\nXOR EBX,EBX\nJMP 0x00401e45\nTEST R13B,R13B\nJNZ 0x00401df1\nMOV RDI,R12\nCALL 0x00404d90\nTEST EAX,EAX\nJZ 0x00401df1\nCALL 0x004013f0\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403da0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40686c\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004016b0\nJMP 0x00401e45\nMOV RSI,RSP\nXOR EDX,EDX\nMOV ECX,0x1\nMOV R8D,0x400\nMOV RDI,RBP\nCALL 0x00402120\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405ae6\nXOR EAX,EAX\nMOV EDX,EBX\nCALL 0x00401680\nCMP R14D,0x2\nJL 0x00401e39\nMOV EDI,0x1\nMOV ESI,0x40686b\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401680\nMOV EDI,0xa\nCALL 0x004015d0\nMOV BL,0x1\nMOV EAX,EBX\nADD RSP,0x298\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1152
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 02 00 00\n41 89 f6\n49 89 ff\n41 80 3f 2d\n75 07\n41 80 7f 01 00\n74 1e\nbe 0f 5c 40 00\n4c 89 ff\ne8 ef f9 ff ff\n49 89 c4\n4d 85 e4\n0f 84 c7 00 00 00\n45 31 ed\neb 11\n4c 8b 25 87 75 20 00\nc6 05 b9 75 20 00 01\n41 b5 01\nbe 02 00 00 00\n4c 89 e7\ne8 e0 03 00 00\n4c 89 e7\ne8 18 f7 ff ff\n83 f8 ff\n74 33\n31 db\n31 ed\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c5\n89 d9\nd1 e9\nc1 e3 0f\n09 cb\n01 c3\n0f b7 db\n4c 89 e7\ne8 e7 f6 ff ff\n83 f8 ff\n75 e2\neb 04\n31 ed\n31 db\n4c 89 e7\ne8 24 f8 ff ff\n85 c0\n74 43\ne8 7b f6 ff ff\n8b 28\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 18 20 00 00\n48 89 c1\n31 ff\nba 6c 68 40 00\n31 c0\n89 ee\ne8 15 f9 ff ff\n45 84 ed\n0f 85 a1 00 00 00\n4c 89 e7\ne8 e4 2f 00 00\n31 db\ne9 92 00 00 00\n45 84 ed\n75 39\n4c 89 e7\ne8 d0 2f 00 00\n85 c0\n74 2d\ne8 27 f6 ff ff\n8b 28\n31 db\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 c4 1f 00 00\n48 89 c1\n31 ff\nba 6c 68 40 00\n31 c0\n89 ee\ne8 c1 f8 ff ff\neb 54\n48 89 e6\n31 d2\nb9 01 00 00 00\n41 b8 00 04 00 00\n48 89 ef\ne8 17 03 00 00\n48 89 c1\nbf 01 00 00 00\nbe e6 5a 40 00\n31 c0\n89 da\ne8 61 f8 ff ff\n41 83 fe 02\n7c 14\nbf 01 00 00 00\nbe 6b 68 40 00\n31 c0\n4c 89 fa\ne8 47 f8 ff ff\nbf 0a 00 00 00\ne8 8d f7 ff ff\nb3 01\n89 d8\n48 81 c4 98 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1153
S'.text:0000000000401cc0\n.text:0000000000401cc1\n.text:0000000000401cc3\n.text:0000000000401cc5\n.text:0000000000401cc7\n.text:0000000000401cc9\n.text:0000000000401cca\n.text:0000000000401cd1\n.text:0000000000401cd4\n.text:0000000000401cd7\n.text:0000000000401cdb\n.text:0000000000401cdd\n.text:0000000000401ce2\n.text:0000000000401ce4\n.text:0000000000401ce9\n.text:0000000000401cec\n.text:0000000000401cf1\n.text:0000000000401cf4\n.text:0000000000401cf7\n.text:0000000000401cfd\n.text:0000000000401d00\n.text:0000000000401d02\n.text:0000000000401d09\n.text:0000000000401d10\n.text:0000000000401d13\n.text:0000000000401d18\n.text:0000000000401d1b\n.text:0000000000401d20\n.text:0000000000401d23\n.text:0000000000401d28\n.text:0000000000401d2b\n.text:0000000000401d2d\n.text:0000000000401d2f\n.text:0000000000401d31\n.text:0000000000401d40\n.text:0000000000401d43\n.text:0000000000401d45\n.text:0000000000401d47\n.text:0000000000401d4a\n.text:0000000000401d4c\n.text:0000000000401d4e\n.text:0000000000401d51\n.text:0000000000401d54\n.text:0000000000401d59\n.text:0000000000401d5c\n.text:0000000000401d5e\n.text:0000000000401d60\n.text:0000000000401d62\n.text:0000000000401d64\n.text:0000000000401d67\n.text:0000000000401d6c\n.text:0000000000401d6e\n.text:0000000000401d70\n.text:0000000000401d75\n.text:0000000000401d77\n.text:0000000000401d79\n.text:0000000000401d7b\n.text:0000000000401d80\n.text:0000000000401d83\n.text:0000000000401d88\n.text:0000000000401d8b\n.text:0000000000401d8d\n.text:0000000000401d92\n.text:0000000000401d94\n.text:0000000000401d96\n.text:0000000000401d9b\n.text:0000000000401d9e\n.text:0000000000401da4\n.text:0000000000401da7\n.text:0000000000401dac\n.text:0000000000401dae\n.text:0000000000401db3\n.text:0000000000401db6\n.text:0000000000401db8\n.text:0000000000401dbb\n.text:0000000000401dc0\n.text:0000000000401dc2\n.text:0000000000401dc4\n.text:0000000000401dc9\n.text:0000000000401dcb\n.text:0000000000401dcd\n.text:0000000000401dcf\n.text:0000000000401dd4\n.text:0000000000401dd7\n.text:0000000000401ddc\n.text:0000000000401ddf\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401de8\n.text:0000000000401dea\n.text:0000000000401def\n.text:0000000000401df1\n.text:0000000000401df4\n.text:0000000000401df6\n.text:0000000000401dfb\n.text:0000000000401e01\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e0c\n.text:0000000000401e11\n.text:0000000000401e16\n.text:0000000000401e18\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e23\n.text:0000000000401e25\n.text:0000000000401e2a\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e34\n.text:0000000000401e39\n.text:0000000000401e3e\n.text:0000000000401e43\n.text:0000000000401e45\n.text:0000000000401e47\n.text:0000000000401e4e\n.text:0000000000401e4f\n.text:0000000000401e51\n.text:0000000000401e53\n.text:0000000000401e55\n.text:0000000000401e57\n.text:0000000000401e58\n'
p1154
tp1155
sS'c_islower'
p1156
(S'\n__stdcall c_islower()\n'
p1157
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1158
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1159
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1160
S'.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c6\n.text:00000000004052c9\n'
p1161
tp1162
sS'fclose'
p1163
(S'\n__stdcall fclose(FILE * __stream)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x00609070]\n'
p1166
S'ff 25 fa 7b 20 00\n'
p1167
S'.plt:0000000000401470\n'
p1168
tp1169
sS'argmatch'
p1170
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1171
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x004014b0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00404fa7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401400\nTEST EAX,EAX\nJNZ 0x00404f90\nMOV RDI,R15\nCALL 0x004014b0\nCMP RAX,RBX\nJZ 0x00404fc9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00404f85\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00404f7c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401570\nTEST EAX,EAX\nJZ 0x00404f90\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00404f90\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00404f30\nJMP 0x00404fb7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1173
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 b1 c5 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 c2 c4 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 66 c5 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 f8 c5 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1174
S'.text:0000000000404ee0\n.text:0000000000404ee1\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee7\n.text:0000000000404ee9\n.text:0000000000404eea\n.text:0000000000404eee\n.text:0000000000404ef1\n.text:0000000000404ef4\n.text:0000000000404ef7\n.text:0000000000404efa\n.text:0000000000404eff\n.text:0000000000404f02\n.text:0000000000404f07\n.text:0000000000404f0b\n.text:0000000000404f0e\n.text:0000000000404f14\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f24\n.text:0000000000404f29\n.text:0000000000404f2b\n.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f39\n.text:0000000000404f3e\n.text:0000000000404f40\n.text:0000000000404f42\n.text:0000000000404f45\n.text:0000000000404f4a\n.text:0000000000404f4d\n.text:0000000000404f4f\n.text:0000000000404f55\n.text:0000000000404f57\n.text:0000000000404f5c\n.text:0000000000404f5f\n.text:0000000000404f61\n.text:0000000000404f66\n.text:0000000000404f6a\n.text:0000000000404f6d\n.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f78\n.text:0000000000404f7a\n.text:0000000000404f7c\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f85\n.text:0000000000404f8a\n.text:0000000000404f90\n.text:0000000000404f95\n.text:0000000000404f9a\n.text:0000000000404f9d\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa5\n.text:0000000000404fa7\n.text:0000000000404fb0\n.text:0000000000404fb2\n.text:0000000000404fb7\n.text:0000000000404fbc\n.text:0000000000404fc3\n.text:0000000000404fc9\n.text:0000000000404fcc\n.text:0000000000404fd0\n.text:0000000000404fd1\n.text:0000000000404fd3\n.text:0000000000404fd5\n.text:0000000000404fd7\n.text:0000000000404fd9\n.text:0000000000404fda\n'
p1175
tp1176
sS'__ctype_get_mb_cur_max'
p1177
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x00609088]\n'
p1180
S'ff 25 e2 7b 20 00\n'
p1181
S'.plt:00000000004014a0\n'
p1182
tp1183
sS'quotearg_n_style'
p1184
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1185
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403c20\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004039f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:0000000000403be0\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403be4\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bfa\n.text:0000000000403c01\n.text:0000000000403c03\n.text:0000000000403c06\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c12\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c16\n'
p1189
tp1190
sS'fwrite'
p1191
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091c8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x006091c8]\n'
p1194
S'ff 25 a2 7a 20 00\n'
p1195
S'.plt:0000000000401720\n'
p1196
tp1197
sS'quote_n'
p1198
(S'\n__stdcall quote_n(char * arg)\n'
p1199
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'MOV RDX,-0x1\nJMP 0x00403eb0\n'
p1201
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1202
S'.text:0000000000403ed0\n.text:0000000000403ed7\n'
p1203
tp1204
sS'quotearg_alloc'
p1205
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1206
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1207
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403860\n'
p1208
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1209
S'.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403855\n.text:0000000000403858\n'
p1210
tp1211
sS'__do_global_dtors_aux'
p1212
(S'\n__stdcall __do_global_dtors_aux()\n'
p1213
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1214
S'CMP byte ptr [0x006092c8],0x0\nJNZ 0x0040184a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017b0\nPOP RBP\nMOV byte ptr [0x006092c8],0x1\nRET\n'
p1215
S'80 3d 91 7a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 7e 7a 20 00 01\nf3 c3\n'
p1216
S'.text:0000000000401830\n.text:0000000000401837\n.text:0000000000401839\n.text:000000000040183a\n.text:000000000040183d\n.text:0000000000401842\n.text:0000000000401843\n.text:000000000040184a\n'
p1217
tp1218
sS'close_stdout_set_file_name'
p1219
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1220
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1221
S'MOV qword ptr [0x006092d0],RDI\nRET\n'
p1222
S'48 89 3d b9 72 20 00\nc3\n'
p1223
S'.text:0000000000402010\n.text:0000000000402017\n'
p1224
tp1225
sS'c_isprint'
p1226
(S'\n__stdcall c_isprint()\n'
p1227
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1228
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1229
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1230
S'.text:00000000004052d0\n.text:00000000004052d3\n.text:00000000004052d6\n.text:00000000004052d9\n'
p1231
tp1232
sS'_fini'
p1233
(S'\n__stdcall _fini()\n'
p1234
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1235
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1236
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1237
S'.fini:00000000004057bc\n.fini:00000000004057c0\n.fini:00000000004057c4\n'
p1238
tp1239
sS'__fpending'
p1240
(S'\n__stdcall __fpending()\n'
p1241
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609050)();\u000a  return;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x00609050]\n'
p1243
S'ff 25 1a 7c 20 00\n'
p1244
S'.plt:0000000000401430\n'
p1245
tp1246
s.