(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004015e0\nTEST RBP,RBP\nJZ 0x004055c6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004055b0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 86 38 20 00\n55\n48 8d 2d 86 38 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 3f c0 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405574\n.text:0000000000405577\n.text:0000000000405579\n.text:000000000040557b\n.text:0000000000405582\n.text:0000000000405583\n.text:000000000040558a\n.text:000000000040558b\n.text:000000000040558e\n.text:0000000000405591\n.text:0000000000405594\n.text:0000000000405598\n.text:000000000040559c\n.text:00000000004055a1\n.text:00000000004055a4\n.text:00000000004055a6\n.text:00000000004055a8\n.text:00000000004055b0\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055b9\n.text:00000000004055bd\n.text:00000000004055c1\n.text:00000000004055c4\n.text:00000000004055c6\n.text:00000000004055ca\n.text:00000000004055cb\n.text:00000000004055cc\n.text:00000000004055ce\n.text:00000000004055d0\n.text:00000000004055d2\n.text:00000000004055d4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609198)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609198]\n'
p11
S'ff 25 82 78 20 00\n'
p12
S'.plt:0000000000401910\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000405100\n.text:0000000000405103\n.text:0000000000405106\n.text:0000000000405109\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00406473,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404857;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4048d8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40496c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004046e8\nMOV EDX,0x406460\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401a10\nJMP 0x004046fd\nMOV EDX,0x40646c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401a10\nXOR EDI,EDI\nMOV ESI,0x406473\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406740\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401a10\nXOR EDI,EDI\nMOV ESI,0x406477\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401820\nCMP R12,0x9\nJA 0x00404786\nJMP qword ptr [0x406410 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406542\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a10\nXOR EDI,EDI\nMOV ESI,0x406681\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x38\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x406552\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a10\nXOR EDI,EDI\nMOV ESI,0x406569\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401a10\nXOR EDI,EDI\nMOV ESI,0x406585\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x18\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x4065a5\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x18\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x4065c9\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x28\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x4065f1\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x28\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x40661d\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x38\nJMP 0x004049f7\nXOR EDI,EDI\nMOV ESI,0x40664d\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401a10\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401660\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 60 64 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 2a d3 ff ff\neb 15\nba 6c 64 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 13 d3 ff ff\n31 ff\nbe 73 64 40 00\nba 05 00 00 00\ne8 32 d0 ff ff\n48 89 c1\nbe 01 00 00 00\nba 40 67 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 e5 d2 ff ff\n31 ff\nbe 77 64 40 00\nba 05 00 00 00\ne8 04 d0 ff ff\n48 89 c7\n4c 89 f6\ne8 d9 d0 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 10 64 40 00\n31 ff\nbe 42 65 40 00\nba 05 00 00 00\ne8 da cf ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 8a d2 ff ff\n31 ff\nbe 81 66 40 00\nba 05 00 00 00\ne8 a9 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 41 d2 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 52 65 40 00\nba 05 00 00 00\ne8 57 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 03 d2 ff ff\n31 ff\nbe 69 65 40 00\nba 05 00 00 00\ne8 22 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ca d1 ff ff\n31 ff\nbe 85 65 40 00\nba 05 00 00 00\ne8 e9 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 94 d1 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe a5 65 40 00\nba 05 00 00 00\ne8 aa ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 52 d1 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe c9 65 40 00\nba 05 00 00 00\ne8 68 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 08 d1 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe f1 65 40 00\nba 05 00 00 00\ne8 1e ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 be d0 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 1d 66 40 00\nba 05 00 00 00\ne8 d4 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6c d0 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 4d 66 40 00\nba 05 00 00 00\ne8 85 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1d d0 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c cc ff ff\n'
p26
S'.text:00000000004046b0\n.text:00000000004046b2\n.text:00000000004046b4\n.text:00000000004046b6\n.text:00000000004046b7\n.text:00000000004046b8\n.text:00000000004046bb\n.text:00000000004046be\n.text:00000000004046c1\n.text:00000000004046c4\n.text:00000000004046c7\n.text:00000000004046ca\n.text:00000000004046cf\n.text:00000000004046d2\n.text:00000000004046d4\n.text:00000000004046d9\n.text:00000000004046db\n.text:00000000004046de\n.text:00000000004046e1\n.text:00000000004046e6\n.text:00000000004046e8\n.text:00000000004046ed\n.text:00000000004046ef\n.text:00000000004046f2\n.text:00000000004046f5\n.text:00000000004046f8\n.text:00000000004046fd\n.text:00000000004046ff\n.text:0000000000404704\n.text:0000000000404709\n.text:000000000040470e\n.text:0000000000404711\n.text:0000000000404716\n.text:000000000040471b\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404726\n.text:000000000040472b\n.text:000000000040472d\n.text:0000000000404732\n.text:0000000000404737\n.text:000000000040473c\n.text:000000000040473f\n.text:0000000000404742\n.text:0000000000404747\n.text:000000000040474b\n.text:000000000040474d\n.text:0000000000404755\n.text:0000000000404757\n.text:000000000040475c\n.text:0000000000404761\n.text:0000000000404766\n.text:0000000000404769\n.text:000000000040476c\n.text:0000000000404771\n.text:0000000000404773\n.text:0000000000404776\n.text:000000000040477a\n.text:000000000040477b\n.text:000000000040477d\n.text:000000000040477f\n.text:0000000000404781\n.text:0000000000404786\n.text:0000000000404788\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404797\n.text:000000000040479a\n.text:000000000040479d\n.text:00000000004047a1\n.text:00000000004047a5\n.text:00000000004047aa\n.text:00000000004047af\n.text:00000000004047b2\n.text:00000000004047b6\n.text:00000000004047ba\n.text:00000000004047be\n.text:00000000004047c2\n.text:00000000004047c6\n.text:00000000004047ca\n.text:00000000004047cf\n.text:00000000004047d3\n.text:00000000004047d8\n.text:00000000004047da\n.text:00000000004047df\n.text:00000000004047e4\n.text:00000000004047e9\n.text:00000000004047ec\n.text:00000000004047ef\n.text:00000000004047f3\n.text:00000000004047f8\n.text:00000000004047fa\n.text:00000000004047fd\n.text:0000000000404801\n.text:0000000000404802\n.text:0000000000404804\n.text:0000000000404806\n.text:0000000000404808\n.text:000000000040480d\n.text:000000000040480f\n.text:0000000000404814\n.text:0000000000404819\n.text:000000000040481e\n.text:0000000000404821\n.text:0000000000404824\n.text:0000000000404828\n.text:000000000040482c\n.text:0000000000404831\n.text:0000000000404833\n.text:0000000000404836\n.text:000000000040483a\n.text:000000000040483b\n.text:000000000040483d\n.text:000000000040483f\n.text:0000000000404841\n.text:0000000000404846\n.text:0000000000404848\n.text:000000000040484d\n.text:0000000000404852\n.text:0000000000404857\n.text:000000000040485a\n.text:000000000040485d\n.text:0000000000404861\n.text:0000000000404865\n.text:0000000000404869\n.text:000000000040486e\n.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404877\n.text:000000000040487c\n.text:0000000000404880\n.text:0000000000404885\n.text:0000000000404887\n.text:000000000040488c\n.text:0000000000404891\n.text:0000000000404896\n.text:0000000000404899\n.text:000000000040489c\n.text:00000000004048a0\n.text:00000000004048a4\n.text:00000000004048a9\n.text:00000000004048ae\n.text:00000000004048b1\n.text:00000000004048b5\n.text:00000000004048b9\n.text:00000000004048be\n.text:00000000004048c2\n.text:00000000004048c7\n.text:00000000004048c9\n.text:00000000004048ce\n.text:00000000004048d3\n.text:00000000004048d8\n.text:00000000004048db\n.text:00000000004048de\n.text:00000000004048e2\n.text:00000000004048e6\n.text:00000000004048ea\n.text:00000000004048ef\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048fb\n.text:00000000004048ff\n.text:0000000000404903\n.text:0000000000404908\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404913\n.text:0000000000404918\n.text:000000000040491d\n.text:0000000000404922\n.text:0000000000404925\n.text:0000000000404928\n.text:000000000040492c\n.text:0000000000404930\n.text:0000000000404935\n.text:000000000040493a\n.text:000000000040493d\n.text:0000000000404941\n.text:0000000000404945\n.text:0000000000404949\n.text:000000000040494d\n.text:0000000000404952\n.text:0000000000404956\n.text:000000000040495b\n.text:000000000040495d\n.text:0000000000404962\n.text:0000000000404967\n.text:000000000040496c\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404976\n.text:000000000040497a\n.text:000000000040497e\n.text:0000000000404983\n.text:0000000000404988\n.text:000000000040498b\n.text:000000000040498f\n.text:0000000000404993\n.text:0000000000404997\n.text:000000000040499b\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a8\n.text:00000000004049aa\n.text:00000000004049ac\n.text:00000000004049b1\n.text:00000000004049b6\n.text:00000000004049bb\n.text:00000000004049be\n.text:00000000004049c1\n.text:00000000004049c5\n.text:00000000004049c9\n.text:00000000004049ce\n.text:00000000004049d3\n.text:00000000004049d6\n.text:00000000004049da\n.text:00000000004049de\n.text:00000000004049e2\n.text:00000000004049e6\n.text:00000000004049ea\n.text:00000000004049ee\n.text:00000000004049f3\n.text:00000000004049f7\n.text:00000000004049f8\n.text:00000000004049fa\n.text:00000000004049fc\n.text:00000000004049fe\n.text:00000000004049ff\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [USER]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -l              produce long format output for the specified USERs\u005cn  -b              omit the user\u005c's home directory and shell in long format\u005cn  -h              omit the user\u005c's project file in long format\u005cn  -p              omit the user\u005c's plan file in long format\u005cn  -s              do short format output, this is the default\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f              omit the line of column headings in short format\u005cn  -w              omit the user\u005c's full name in short format\u005cn  -i              omit the user\u005c's full name and remote host in short format\u005cn  -q              omit the user\u005c's full name, remote host and idle time\u005cn                  in short format\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnA lightweight \u005c'finger\u005c' program;  print user information.\u005cnThe utmp file will be %s.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,"/var/run/utmp",uVar1);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401c69\nXOR EDI,EDI\nMOV ESI,0x4057d0\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006093c0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x4057f1\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,qword ptr [0x006092e8]\nMOV RDI,RAX\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x405939\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,qword ptr [0x006092e8]\nMOV RDI,RAX\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x405a6e\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,qword ptr [0x006092e8]\nMOV RDI,RAX\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x405a9b\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,qword ptr [0x006092e8]\nMOV RDI,RAX\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x405ad1\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405b26\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nCALL 0x00401cc0\nMOV EDI,EBX\nCALL 0x004019f0\nCALL 0x00401c80\nMOV EDI,EBX\nCALL 0x004019f0\n'
p32
S'53\n89 fb\n85 db\n0f 85 de 00 00 00\n31 ff\nbe d0 57 40 00\nba 05 00 00 00\ne8 a4 fb ff ff\n48 89 c1\n48 8b 15 1a 78 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 bb fd ff ff\n31 ff\nbe f1 57 40 00\nba 05 00 00 00\ne8 7a fb ff ff\n48 8b 35 1b 77 20 00\n48 89 c7\ne8 4b fc ff ff\n31 ff\nbe 39 59 40 00\nba 05 00 00 00\ne8 5a fb ff ff\n48 8b 35 fb 76 20 00\n48 89 c7\ne8 2b fc ff ff\n31 ff\nbe 6e 5a 40 00\nba 05 00 00 00\ne8 3a fb ff ff\n48 8b 35 db 76 20 00\n48 89 c7\ne8 0b fc ff ff\n31 ff\nbe 9b 5a 40 00\nba 05 00 00 00\ne8 1a fb ff ff\n48 8b 35 bb 76 20 00\n48 89 c7\ne8 eb fb ff ff\n31 ff\nbe d1 5a 40 00\nba 05 00 00 00\ne8 fa fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 26 5b 40 00\n31 c0\n48 89 ce\ne8 13 fd ff ff\ne8 5e 00 00 00\n89 df\ne8 87 fd ff ff\ne8 12 00 00 00\n89 df\ne8 7b fd ff ff\n'
p33
S'.text:0000000000401b80\n.text:0000000000401b81\n.text:0000000000401b83\n.text:0000000000401b85\n.text:0000000000401b8b\n.text:0000000000401b8d\n.text:0000000000401b92\n.text:0000000000401b97\n.text:0000000000401b9c\n.text:0000000000401b9f\n.text:0000000000401ba6\n.text:0000000000401bab\n.text:0000000000401bad\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcd\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bd7\n.text:0000000000401bdc\n.text:0000000000401be1\n.text:0000000000401be6\n.text:0000000000401bed\n.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bf7\n.text:0000000000401bfc\n.text:0000000000401c01\n.text:0000000000401c06\n.text:0000000000401c0d\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c17\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c2d\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c37\n.text:0000000000401c3c\n.text:0000000000401c41\n.text:0000000000401c46\n.text:0000000000401c49\n.text:0000000000401c4e\n.text:0000000000401c53\n.text:0000000000401c55\n.text:0000000000401c58\n.text:0000000000401c5d\n.text:0000000000401c62\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c70\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040402d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401660\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e d6 ff ff\n'
p40
S'.text:0000000000403fe0\n.text:0000000000403fe4\n.text:0000000000403fe7\n.text:0000000000403fec\n.text:0000000000403ff1\n.text:0000000000403ff5\n.text:0000000000403ffd\n.text:0000000000404000\n.text:0000000000404002\n.text:0000000000404004\n.text:0000000000404008\n.text:000000000040400b\n.text:000000000040400f\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401d\n.text:0000000000404021\n.text:0000000000404025\n.text:0000000000404028\n.text:000000000040402c\n.text:000000000040402d\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006090d8]\n'
p46
S'ff 25 42 79 20 00\n'
p47
S'.plt:0000000000401790\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00404e49;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00404e49:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004018c0\nTEST EAX,EAX\nJS 0x00404e49\nMOV RDI,RBX\nCALL 0x00401920\nTEST EAX,EAX\nJZ 0x00404e17\nMOV RDI,RBX\nCALL 0x004018c0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004017c0\nCMP RAX,-0x1\nJZ 0x00404e49\nMOV RDI,RBX\nCALL 0x00404e60\nTEST EAX,EAX\nJZ 0x00404e49\nCALL 0x00401670\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401710\nTEST EBP,EBP\nJZ 0x00404e42\nCALL 0x00401670\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401710\n'
p53
S'55\n53\n50\n48 89 fb\ne8 d5 ca ff ff\n85 c0\n78 5a\n48 89 df\ne8 29 cb ff ff\n85 c0\n74 1c\n48 89 df\ne8 bd ca ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 af c9 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 48 c8 ff ff\n8b 28\n48 89 df\ne8 de c8 ff ff\n85 ed\n74 0c\ne8 35 c8 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 b9 c8 ff ff\n'
p54
S'.text:0000000000404de0\n.text:0000000000404de1\n.text:0000000000404de2\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404def\n.text:0000000000404df2\n.text:0000000000404df7\n.text:0000000000404df9\n.text:0000000000404dfb\n.text:0000000000404dfe\n.text:0000000000404e03\n.text:0000000000404e05\n.text:0000000000404e0a\n.text:0000000000404e0c\n.text:0000000000404e11\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e1a\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e28\n.text:0000000000404e2a\n.text:0000000000404e2d\n.text:0000000000404e32\n.text:0000000000404e34\n.text:0000000000404e36\n.text:0000000000404e3b\n.text:0000000000404e3d\n.text:0000000000404e42\n.text:0000000000404e46\n.text:0000000000404e47\n.text:0000000000404e48\n.text:0000000000404e49\n.text:0000000000404e4c\n.text:0000000000404e50\n.text:0000000000404e51\n.text:0000000000404e52\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609068)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00609068]\n'
p60
S'ff 25 b2 79 20 00\n'
p61
S'.plt:00000000004016b0\n'
p62
tp63
sS'fwrite_unlocked'
p64
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_006091a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x006091a8]\n'
p67
S'ff 25 72 78 20 00\n'
p68
S'.plt:0000000000401930\n'
p69
tp70
sS'short_pinky'
p71
(S'\n__stdcall short_pinky()\n'
p72
V\u000avoid short_pinky(uint uParm1)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  STRUCT_UTMP *local_28;\u000a  size_t local_20;\u000a  \u000a  local_28 = (STRUCT_UTMP *)0x0;\u000a  iVar2 = read_utmp("/var/run/utmp",&local_20,&local_28);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar1,0x405e66,pcVar4);\u000a  }\u000a  scan_entries(local_20,local_28,(char **)(ulong)uParm1);\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RSI\nMOV EBP,EDI\nMOV qword ptr [RSP],0x0\nLEA RSI,[RSP + 0x8]\nMOV RDX,RSP\nMOV EDI,0x405b26\nXOR ECX,ECX\nCALL 0x00404f80\nTEST EAX,EAX\nJZ 0x00401ffb\nCALL 0x00401670\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV EDX,0x405b26\nCALL 0x00404160\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405e66\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x004019a0\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RSP]\nMOV EDX,EBP\nMOV RCX,R14\nCALL 0x00402050\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 83 ec 10\n49 89 f6\n89 fd\n48 c7 04 24 00 00 00 00\n48 8d 74 24 08\n48 89 e2\nbf 26 5b 40 00\n31 c9\ne8 b7 2f 00 00\n85 c0\n74 2e\ne8 9e f6 ff ff\n8b 18\n31 ff\nbe 03 00 00 00\nba 26 5b 40 00\ne8 7b 21 00 00\n48 89 c1\nbf 01 00 00 00\nba 66 5e 40 00\n31 c0\n89 de\ne8 a5 f9 ff ff\n48 8b 7c 24 08\n48 8b 34 24\n89 ea\n4c 89 f1\ne8 42 00 00 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000401fa0\n.text:0000000000401fa1\n.text:0000000000401fa3\n.text:0000000000401fa4\n.text:0000000000401fa8\n.text:0000000000401fab\n.text:0000000000401fad\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbd\n.text:0000000000401fc2\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fcb\n.text:0000000000401fcd\n.text:0000000000401fd2\n.text:0000000000401fd4\n.text:0000000000401fd6\n.text:0000000000401fdb\n.text:0000000000401fe0\n.text:0000000000401fe5\n.text:0000000000401fe8\n.text:0000000000401fed\n.text:0000000000401ff2\n.text:0000000000401ff4\n.text:0000000000401ff6\n.text:0000000000401ffb\n.text:0000000000402000\n.text:0000000000402004\n.text:0000000000402006\n.text:0000000000402009\n.text:000000000040200e\n.text:0000000000402012\n.text:0000000000402013\n.text:0000000000402015\n.text:0000000000402016\n'
p76
tp77
sS'to_uchar'
p78
(S'\n__stdcall to_uchar()\n'
p79
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p80
S'MOV EAX,EDI\nRET\n'
p81
S'89 f8\nc3\n'
p82
S'.text:00000000004027b0\n.text:00000000004027b2\n'
p83
tp84
sS'strncmp'
p85
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00609058]\n'
p88
S'ff 25 c2 79 20 00\n'
p89
S'.plt:0000000000401690\n'
p90
tp91
sS'xnrealloc'
p92
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p93
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p94
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404c04\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404c10\nPUSH RAX\nCALL 0x00404d60\n'
p95
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p96
S'.text:0000000000404bf0\n.text:0000000000404bf3\n.text:0000000000404bf6\n.text:0000000000404bf9\n.text:0000000000404bfb\n.text:0000000000404bff\n.text:0000000000404c02\n.text:0000000000404c04\n.text:0000000000404c05\n'
p97
tp98
sS'quote'
p99
(S'\n__stdcall quote(char * arg)\n'
p100
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404290\n'
p102
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p103
S'.text:00000000004042a0\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a8\n'
p104
tp105
sS'emit_bug_reporting_address'
p106
(S'\n__stdcall emit_bug_reporting_address()\n'
p107
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p108
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4066bd\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4066d2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x4066e8\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405b5c\nMOV ECX,0x405c78\nXOR EAX,EAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x4066fc\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,qword ptr [0x006092e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401820\n'
p109
S'50\n31 ff\nbe bd 66 40 00\nba 05 00 00 00\ne8 fe cb ff ff\n48 89 c1\nbf 01 00 00 00\nba d2 66 40 00\n31 c0\n48 89 ce\ne8 17 ce ff ff\n31 ff\nbe e8 66 40 00\nba 05 00 00 00\ne8 d6 cb ff ff\n48 89 c6\nbf 01 00 00 00\nba 5c 5b 40 00\nb9 78 5c 40 00\n31 c0\ne8 ed cd ff ff\n31 ff\nbe fc 66 40 00\nba 05 00 00 00\ne8 ac cb ff ff\n48 8b 35 4d 47 20 00\n48 89 c7\n58\ne9 7c cc ff ff\n'
p110
S'.text:0000000000404b30\n.text:0000000000404b31\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3d\n.text:0000000000404b42\n.text:0000000000404b45\n.text:0000000000404b4a\n.text:0000000000404b4f\n.text:0000000000404b51\n.text:0000000000404b54\n.text:0000000000404b59\n.text:0000000000404b5b\n.text:0000000000404b60\n.text:0000000000404b65\n.text:0000000000404b6a\n.text:0000000000404b6d\n.text:0000000000404b72\n.text:0000000000404b77\n.text:0000000000404b7c\n.text:0000000000404b7e\n.text:0000000000404b83\n.text:0000000000404b85\n.text:0000000000404b8a\n.text:0000000000404b8f\n.text:0000000000404b94\n.text:0000000000404b9b\n.text:0000000000404b9e\n.text:0000000000404b9f\n'
p111
tp112
sS'clone_quoting_options'
p113
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p114
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401670\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6093d0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404d10\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p116
S'55\n41 56\n53\n48 89 fb\ne8 04 e8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 d0 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p117
S'.text:0000000000402e60\n.text:0000000000402e61\n.text:0000000000402e63\n.text:0000000000402e64\n.text:0000000000402e67\n.text:0000000000402e6c\n.text:0000000000402e6f\n.text:0000000000402e72\n.text:0000000000402e75\n.text:0000000000402e7a\n.text:0000000000402e7e\n.text:0000000000402e83\n.text:0000000000402e86\n.text:0000000000402e8b\n.text:0000000000402e8e\n.text:0000000000402e8f\n.text:0000000000402e91\n.text:0000000000402e92\n'
p118
tp119
sS'xmalloc'
p120
(S'\n__stdcall xmalloc(size_t n)\n'
p121
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p122
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004018e0\nTEST RBX,RBX\nJZ 0x00404be3\nTEST RAX,RAX\nJZ 0x00404be5\nPOP RBX\nRET\nCALL 0x00404d60\n'
p123
S'53\n48 89 fb\ne8 07 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p124
S'.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be4\n.text:0000000000404be5\n'
p125
tp126
sS'quotearg_char_mem'
p127
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p128
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p129
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609400]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006093f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402ec0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403db0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p130
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 28 53 20 00\n48 89 4c 24 30\n0f 10 05 0c 53 20 00\n0f 29 44 24 20\n0f 10 05 f0 52 20 00\n0f 29 44 24 10\n0f 10 05 d4 52 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p131
S'.text:00000000004040c0\n.text:00000000004040c2\n.text:00000000004040c4\n.text:00000000004040c5\n.text:00000000004040c9\n.text:00000000004040cb\n.text:00000000004040ce\n.text:00000000004040d1\n.text:00000000004040d8\n.text:00000000004040dd\n.text:00000000004040e4\n.text:00000000004040e9\n.text:00000000004040f0\n.text:00000000004040f5\n.text:00000000004040fc\n.text:0000000000404100\n.text:0000000000404103\n.text:0000000000404108\n.text:000000000040410b\n.text:000000000040410d\n.text:0000000000404112\n.text:0000000000404114\n.text:0000000000404117\n.text:000000000040411a\n.text:000000000040411d\n.text:0000000000404122\n.text:0000000000404126\n.text:0000000000404127\n.text:0000000000404129\n.text:000000000040412b\n'
p132
tp133
sS'c_isgraph'
p134
(S'\n__stdcall c_isgraph()\n'
p135
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p136
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p137
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p138
S'.text:0000000000405110\n.text:0000000000405113\n.text:0000000000405116\n.text:0000000000405119\n'
p139
tp140
sS'frame_dummy'
p141
(S'\n__stdcall frame_dummy()\n'
p142
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b6a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p143
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401b60\nJMP 0x00401af0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b5b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401af0\n'
p144
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p145
S'.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b59\n.text:0000000000401b5b\n.text:0000000000401b60\n.text:0000000000401b65\n.text:0000000000401b68\n.text:0000000000401b6a\n.text:0000000000401b6b\n.text:0000000000401b6e\n.text:0000000000401b70\n.text:0000000000401b71\n'
p146
tp147
sS'hard_locale'
p148
(S'\n__stdcall hard_locale()\n'
p149
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p150
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401960\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00402cdd\nCMP byte ptr [RAX],0x43\nJNZ 0x00402cca\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402cdb\nMOV ESI,0x405e6b\nMOV RDI,RAX\nCALL 0x00401850\nTEST EAX,EAX\nJNZ 0x00402cdd\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p151
S'53\n31 f6\ne8 a8 ec ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 6b 5e 40 00\n48 89 c7\ne8 79 eb ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p152
S'.text:0000000000402cb0\n.text:0000000000402cb1\n.text:0000000000402cb3\n.text:0000000000402cb8\n.text:0000000000402cba\n.text:0000000000402cbd\n.text:0000000000402cbf\n.text:0000000000402cc2\n.text:0000000000402cc4\n.text:0000000000402cc8\n.text:0000000000402cca\n.text:0000000000402ccf\n.text:0000000000402cd2\n.text:0000000000402cd7\n.text:0000000000402cd9\n.text:0000000000402cdb\n.text:0000000000402cdd\n.text:0000000000402cdf\n.text:0000000000402ce0\n'
p153
tp154
sS'quotearg_buffer_restyled'
p155
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p156
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040305c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040305c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040305c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040305c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040305c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040305c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040305c_caseD_7;\u000aswitchD_0040305c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040305c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040305c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403b20;\u000aLAB_00403240:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403b29:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403b38:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040324b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040328f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040328f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403b38;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403a65;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403970;\u000a    }\u000a    goto LAB_00403b38;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403a9a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403b38;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403ac9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403588;\u000a  case '\u005ca':\u000a    goto joined_r0x00403478;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403478;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004032a6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403478;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403478;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004032a6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403478:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004039de;\u000a    }\u000a    goto LAB_00403b38;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403b38;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403b38;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403b38;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403b38;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403b38;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004032a6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403a36;\u000a      goto joined_r0x00403a28;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403531:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403a28;\u000a      goto LAB_00403a36;\u000a    }\u000a    goto LAB_00403b38;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403b38;\u000a  }\u000a  goto joined_r0x00403970;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403a9a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403ac9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403ac9:\u000a  if (1 < uVar10) {\u000aLAB_004035a6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403662;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403531;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403662:\u000a        if (bVar6 != 0) goto LAB_00403b38;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403588:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_004035a6;\u000ajoined_r0x00403970:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403970:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403997;\u000aLAB_004039d0:\u000a    if (bVar22) goto LAB_004039d5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004039d0;\u000aLAB_00403997:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004039d5:\u000a      if (bVar6 != 0) goto LAB_00403b38;\u000aLAB_004039de:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403a28;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403a36:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403a28:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403a65:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403240;\u000aLAB_00403b20:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403b29;\u000a  goto LAB_0040324b;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401750\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403c05\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405ec0 + RAX*0x8]\nMOV EDI,0x4063e8\nMOV ESI,R15D\nCALL 0x004042b0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4063ea\nMOV ESI,R15D\nCALL 0x004042b0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004030bd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004030c0\nNOP\nCMP R12,RSI\nJNC 0x004030ae\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004030a0\nJMP 0x004030c0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401760\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040318c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040318c\nMOV ECX,0x4063e6\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403186\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403127\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403154\nTEST RSI,RSI\nJZ 0x00403141\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4063ea\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403162\nMOV ECX,0x4063ea\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040318c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403bdc\nMOV ECX,0x4063e6\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403b20\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403b29\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040328f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040328a\nCMP R11,-0x1\nJNZ 0x0040328a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401760\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004032e0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040353c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405f18 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403b38\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403990\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403997\nJMP 0x004039d0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401810\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040332d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403291\nJMP 0x00403b38\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403291\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004032bb\nCMP EBX,0x2\nJNZ 0x004032bb\nTEST R13,R13\nJNZ 0x004032bb\nJMP 0x00403b38\nCMP R11,-0x1\nJZ 0x00403713\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403733\nJMP 0x004032bb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403744\nTEST R8B,R8B\nJNZ 0x00403b38\nCMP EBX,0x2\nJNZ 0x004033e8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004033e8\nCMP R12,RSI\nJNC 0x004033c3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004033d2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004033e1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004033f2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004038b8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004038b8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004038b8\nCMP RCX,RSI\nJNC 0x0040342c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040343b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nJMP 0x00403990\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032b9\nJMP 0x0040349a\nMOV DL,0x74\nJMP 0x00403482\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032b9\nJMP 0x0040349a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032b9\nJMP 0x0040349a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403b38\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032b9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004039de\nJMP 0x00403b38\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004032b9\nTEST R8B,R8B\nJNZ 0x00403b38\nCMP R12,RSI\nJNC 0x004034ca\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004034d9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004034e8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004032b9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004038cb\nCMP EBX,0x2\nJNZ 0x004032b9\nTEST R8B,R8B\nJZ 0x004032b9\nJMP 0x00403b38\nCMP EBX,0x2\nJNZ 0x00403764\nTEST R8B,R8B\nJNZ 0x00403b38\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403a36\nJMP 0x00403a59\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403785\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401a50\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403978\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403978\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403662\nJMP 0x00403630\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403619\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403616\nCMP R12,RSI\nJNC 0x004035fb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040360a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403650\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403650\nTEST BPL,0x1\nJZ 0x004036f3\nCMP R12,RSI\nJNC 0x00403644\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004036f3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403630\nTEST R8B,R8B\nJNZ 0x00403b38\nCMP EBX,0x2\nJNZ 0x004036aa\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004036aa\nCMP R12,RSI\nJNC 0x00403682\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403691\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036a0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004036b4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036cb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036e5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004035e0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403a36\nJMP 0x00403a59\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004032bb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004032bb\nJMP 0x00403b38\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403a65\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nJMP 0x00403990\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403482\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403a36\nJMP 0x00403a59\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004037a7\nMOV RDI,R10\nCALL 0x00401760\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401780\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403a7f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403a77\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403a86\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040386e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403866\nBT RDI,RDX\nJC 0x00403bd2\nINC RCX\nCMP RCX,R14\nJC 0x00403850\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401a40\nTEST EAX,EAX\nJNZ 0x00403883\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401a30\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004037c5\nJMP 0x00403ac9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nJMP 0x00403990\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004032b9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004032b9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004032b9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004032bb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403b02\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403b38\nCMP R12,RSI\nJNC 0x0040392e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403941\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403950\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040395f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nJMP 0x00403990\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004039d0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004039d5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403a30\nJMP 0x004039d5\nTEST BPL,BPL\nJZ 0x00403a30\nTEST R8B,R8B\nJNZ 0x00403b38\nCMP EBX,0x2\nJNZ 0x00403a18\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403a18\nCMP R12,RSI\nJNC 0x004039f3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a02\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a11\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403a22\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403a62\nJMP 0x00403a5e\nTEST DIL,0x1\nJZ 0x00403a59\nAND AL,0x1\nJNZ 0x00403a59\nCMP R12,RSI\nJNC 0x00403a44\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a53\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403a62\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403b20\nJMP 0x00403240\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403ac4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403abc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403af8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403a9a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ac9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403588\nJMP 0x004035a6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ac9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032c6\nJMP 0x00403990\nCMP R13,R11\nJNZ 0x0040324b\nTEST R8B,R8B\nJZ 0x00403b92\nCMP EBX,0x2\nJNZ 0x00403b92\nTEST R12,R12\nJNZ 0x00403b92\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402fd0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403bc6\nTEST R8B,R8B\nJNZ 0x00403bc6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403bc6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403bb9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403bb0\nCMP R12,RSI\nJNC 0x00403b7d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403b7d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403b38\nTEST RSI,RSI\nJZ 0x00403be9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x4063e6\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040318c\nCALL 0x00401660\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 52 e7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 c0 5e 40 00\nbf e8 63 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf ea 63 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 93 e6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 e6 63 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 ea 63 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 ea 63 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 e6 63 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 f3 e4 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 18 5f 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 17 e5 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 f7 e4 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 c1 df ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 93 df ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 c9 e1 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 92 e1 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 e6 63 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 da ff ff\n'
p159
S'.text:0000000000402fd0\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd5\n.text:0000000000402fd7\n.text:0000000000402fd9\n.text:0000000000402fda\n.text:0000000000402fe1\n.text:0000000000402fe4\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fef\n.text:0000000000402ff4\n.text:0000000000402ff9\n.text:0000000000402ffe\n.text:0000000000403006\n.text:000000000040300a\n.text:0000000000403010\n.text:0000000000403018\n.text:000000000040301d\n.text:0000000000403025\n.text:000000000040302a\n.text:000000000040302e\n.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403036\n.text:0000000000403039\n.text:000000000040303e\n.text:0000000000403041\n.text:0000000000403044\n.text:0000000000403047\n.text:000000000040304a\n.text:000000000040304c\n.text:000000000040304f\n.text:0000000000403054\n.text:0000000000403057\n.text:000000000040305c\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306b\n.text:0000000000403070\n.text:0000000000403075\n.text:000000000040307a\n.text:000000000040307d\n.text:0000000000403082\n.text:0000000000403087\n.text:000000000040308c\n.text:000000000040308e\n.text:0000000000403090\n.text:0000000000403095\n.text:0000000000403097\n.text:000000000040309a\n.text:000000000040309c\n.text:000000000040309e\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030aa\n.text:00000000004030ae\n.text:00000000004030b4\n.text:00000000004030b7\n.text:00000000004030b9\n.text:00000000004030bb\n.text:00000000004030bd\n.text:00000000004030c0\n.text:00000000004030c5\n.text:00000000004030c8\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d5\n.text:00000000004030d8\n.text:00000000004030db\n.text:00000000004030de\n.text:00000000004030e3\n.text:00000000004030e6\n.text:00000000004030e9\n.text:00000000004030ee\n.text:00000000004030f1\n.text:00000000004030f3\n.text:00000000004030f6\n.text:00000000004030f8\n.text:00000000004030fa\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310c\n.text:000000000040310f\n.text:0000000000403115\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311d\n.text:0000000000403120\n.text:0000000000403122\n.text:0000000000403124\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403132\n.text:0000000000403134\n.text:0000000000403137\n.text:0000000000403139\n.text:000000000040313e\n.text:0000000000403141\n.text:0000000000403146\n.text:000000000040314c\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403159\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403165\n.text:0000000000403168\n.text:000000000040316a\n.text:000000000040316f\n.text:0000000000403172\n.text:0000000000403178\n.text:000000000040317d\n.text:0000000000403183\n.text:0000000000403186\n.text:0000000000403189\n.text:000000000040318c\n.text:0000000000403194\n.text:0000000000403196\n.text:0000000000403198\n.text:000000000040319b\n.text:000000000040319f\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031a8\n.text:00000000004031aa\n.text:00000000004031ad\n.text:00000000004031b0\n.text:00000000004031b3\n.text:00000000004031b5\n.text:00000000004031b9\n.text:00000000004031bb\n.text:00000000004031bf\n.text:00000000004031c2\n.text:00000000004031c5\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031ce\n.text:00000000004031d7\n.text:00000000004031da\n.text:00000000004031dc\n.text:00000000004031e0\n.text:00000000004031e2\n.text:00000000004031e6\n.text:00000000004031e8\n.text:00000000004031eb\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f4\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403200\n.text:0000000000403204\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403212\n.text:0000000000403214\n.text:0000000000403218\n.text:000000000040321b\n.text:000000000040321d\n.text:0000000000403222\n.text:0000000000403226\n.text:000000000040322b\n.text:0000000000403230\n.text:0000000000403234\n.text:000000000040323a\n.text:0000000000403240\n.text:0000000000403245\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403252\n.text:0000000000403257\n.text:000000000040325b\n.text:000000000040325d\n.text:0000000000403261\n.text:0000000000403263\n.text:0000000000403265\n.text:0000000000403268\n.text:000000000040326d\n.text:000000000040326f\n.text:0000000000403274\n.text:0000000000403279\n.text:000000000040327d\n.text:0000000000403282\n.text:0000000000403287\n.text:000000000040328a\n.text:000000000040328d\n.text:000000000040328f\n.text:0000000000403291\n.text:0000000000403296\n.text:000000000040329a\n.text:00000000004032a0\n.text:00000000004032a2\n.text:00000000004032a4\n.text:00000000004032a6\n.text:00000000004032ae\n.text:00000000004032b3\n.text:00000000004032b9\n.text:00000000004032bb\n.text:00000000004032c0\n.text:00000000004032c6\n.text:00000000004032cf\n.text:00000000004032d5\n.text:00000000004032e0\n.text:00000000004032e2\n.text:00000000004032e5\n.text:00000000004032e9\n.text:00000000004032f1\n.text:00000000004032f4\n.text:00000000004032f9\n.text:00000000004032fb\n.text:00000000004032fe\n.text:0000000000403300\n.text:0000000000403305\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403310\n.text:0000000000403315\n.text:0000000000403319\n.text:000000000040331e\n.text:0000000000403320\n.text:0000000000403322\n.text:0000000000403328\n.text:000000000040332d\n.text:0000000000403332\n.text:0000000000403335\n.text:000000000040333a\n.text:000000000040333e\n.text:0000000000403343\n.text:0000000000403348\n.text:000000000040334a\n.text:000000000040334c\n.text:0000000000403351\n.text:0000000000403353\n.text:0000000000403356\n.text:000000000040335c\n.text:000000000040335f\n.text:0000000000403365\n.text:0000000000403368\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403377\n.text:000000000040337d\n.text:0000000000403380\n.text:0000000000403383\n.text:0000000000403387\n.text:000000000040338a\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403395\n.text:000000000040339a\n.text:000000000040339f\n.text:00000000004033a5\n.text:00000000004033a8\n.text:00000000004033ae\n.text:00000000004033b1\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b7\n.text:00000000004033b9\n.text:00000000004033bc\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c8\n.text:00000000004033cb\n.text:00000000004033cd\n.text:00000000004033d2\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033dc\n.text:00000000004033e1\n.text:00000000004033e5\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ed\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033f9\n.text:00000000004033fc\n.text:00000000004033ff\n.text:0000000000403405\n.text:0000000000403409\n.text:000000000040340c\n.text:0000000000403412\n.text:0000000000403416\n.text:0000000000403419\n.text:000000000040341c\n.text:0000000000403422\n.text:0000000000403425\n.text:0000000000403427\n.text:000000000040342c\n.text:0000000000403431\n.text:0000000000403434\n.text:0000000000403436\n.text:000000000040343b\n.text:000000000040343f\n.text:0000000000403444\n.text:000000000040344a\n.text:000000000040344f\n.text:0000000000403451\n.text:0000000000403456\n.text:000000000040345c\n.text:000000000040345e\n.text:0000000000403460\n.text:0000000000403462\n.text:0000000000403464\n.text:0000000000403469\n.text:000000000040346f\n.text:0000000000403471\n.text:0000000000403473\n.text:0000000000403478\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403482\n.text:0000000000403487\n.text:0000000000403489\n.text:000000000040348f\n.text:0000000000403494\n.text:000000000040349a\n.text:000000000040349d\n.text:00000000004034a0\n.text:00000000004034a6\n.text:00000000004034ab\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b7\n.text:00000000004034ba\n.text:00000000004034c0\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034ca\n.text:00000000004034cf\n.text:00000000004034d2\n.text:00000000004034d4\n.text:00000000004034d9\n.text:00000000004034de\n.text:00000000004034e1\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034ec\n.text:00000000004034ee\n.text:00000000004034f3\n.text:00000000004034f6\n.text:00000000004034f9\n.text:00000000004034ff\n.text:0000000000403502\n.text:0000000000403508\n.text:000000000040350b\n.text:0000000000403511\n.text:0000000000403516\n.text:0000000000403519\n.text:000000000040351f\n.text:0000000000403522\n.text:0000000000403528\n.text:000000000040352b\n.text:000000000040352d\n.text:0000000000403531\n.text:0000000000403537\n.text:000000000040353c\n.text:0000000000403540\n.text:0000000000403549\n.text:000000000040354f\n.text:0000000000403554\n.text:0000000000403559\n.text:000000000040355e\n.text:0000000000403561\n.text:0000000000403566\n.text:0000000000403569\n.text:000000000040356c\n.text:0000000000403571\n.text:0000000000403576\n.text:000000000040357a\n.text:000000000040357f\n.text:0000000000403584\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358f\n.text:0000000000403595\n.text:0000000000403598\n.text:000000000040359a\n.text:000000000040359d\n.text:00000000004035a0\n.text:00000000004035a6\n.text:00000000004035ab\n.text:00000000004035ae\n.text:00000000004035b1\n.text:00000000004035b4\n.text:00000000004035b7\n.text:00000000004035b9\n.text:00000000004035bd\n.text:00000000004035bf\n.text:00000000004035c4\n.text:00000000004035c9\n.text:00000000004035cf\n.text:00000000004035e0\n.text:00000000004035e5\n.text:00000000004035e7\n.text:00000000004035ea\n.text:00000000004035ec\n.text:00000000004035ef\n.text:00000000004035f1\n.text:00000000004035f4\n.text:00000000004035f6\n.text:00000000004035fb\n.text:0000000000403600\n.text:0000000000403603\n.text:0000000000403605\n.text:000000000040360a\n.text:000000000040360e\n.text:0000000000403616\n.text:0000000000403619\n.text:000000000040361c\n.text:000000000040361e\n.text:0000000000403622\n.text:0000000000403630\n.text:0000000000403634\n.text:000000000040363a\n.text:000000000040363d\n.text:000000000040363f\n.text:0000000000403644\n.text:0000000000403647\n.text:0000000000403649\n.text:0000000000403650\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365b\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403665\n.text:000000000040366b\n.text:000000000040366e\n.text:0000000000403670\n.text:0000000000403674\n.text:0000000000403676\n.text:0000000000403678\n.text:000000000040367b\n.text:000000000040367d\n.text:0000000000403682\n.text:0000000000403687\n.text:000000000040368a\n.text:000000000040368c\n.text:0000000000403691\n.text:0000000000403696\n.text:0000000000403699\n.text:000000000040369b\n.text:00000000004036a0\n.text:00000000004036a4\n.text:00000000004036a6\n.text:00000000004036aa\n.text:00000000004036ad\n.text:00000000004036af\n.text:00000000004036b4\n.text:00000000004036b9\n.text:00000000004036bc\n.text:00000000004036be\n.text:00000000004036c1\n.text:00000000004036c4\n.text:00000000004036c7\n.text:00000000004036cb\n.text:00000000004036d0\n.text:00000000004036d3\n.text:00000000004036d5\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036de\n.text:00000000004036e1\n.text:00000000004036e5\n.text:00000000004036e9\n.text:00000000004036ed\n.text:00000000004036f1\n.text:00000000004036f3\n.text:00000000004036f7\n.text:00000000004036fa\n.text:0000000000403700\n.text:0000000000403704\n.text:0000000000403708\n.text:000000000040370e\n.text:0000000000403713\n.text:0000000000403716\n.text:0000000000403719\n.text:000000000040371e\n.text:0000000000403721\n.text:0000000000403723\n.text:0000000000403726\n.text:000000000040372d\n.text:0000000000403733\n.text:0000000000403735\n.text:0000000000403739\n.text:000000000040373f\n.text:0000000000403744\n.text:0000000000403749\n.text:000000000040374f\n.text:0000000000403752\n.text:0000000000403754\n.text:0000000000403759\n.text:000000000040375f\n.text:0000000000403764\n.text:0000000000403766\n.text:000000000040376b\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403776\n.text:000000000040377a\n.text:0000000000403780\n.text:0000000000403785\n.text:0000000000403791\n.text:0000000000403795\n.text:0000000000403797\n.text:000000000040379a\n.text:000000000040379f\n.text:00000000004037a4\n.text:00000000004037a7\n.text:00000000004037ab\n.text:00000000004037b0\n.text:00000000004037b2\n.text:00000000004037b6\n.text:00000000004037b8\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037ca\n.text:00000000004037ce\n.text:00000000004037d2\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037e2\n.text:00000000004037e5\n.text:00000000004037e8\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f9\n.text:00000000004037fd\n.text:0000000000403807\n.text:000000000040380d\n.text:0000000000403811\n.text:0000000000403816\n.text:000000000040381c\n.text:0000000000403820\n.text:0000000000403823\n.text:0000000000403827\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403833\n.text:0000000000403837\n.text:0000000000403839\n.text:000000000040383e\n.text:0000000000403843\n.text:0000000000403847\n.text:000000000040384c\n.text:0000000000403850\n.text:0000000000403854\n.text:0000000000403857\n.text:000000000040385a\n.text:000000000040385c\n.text:0000000000403860\n.text:0000000000403866\n.text:0000000000403869\n.text:000000000040386c\n.text:000000000040386e\n.text:0000000000403872\n.text:0000000000403877\n.text:0000000000403879\n.text:000000000040387b\n.text:0000000000403883\n.text:0000000000403888\n.text:000000000040388b\n.text:0000000000403893\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ad\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bb\n.text:00000000004038c0\n.text:00000000004038c6\n.text:00000000004038cb\n.text:00000000004038d0\n.text:00000000004038d6\n.text:00000000004038da\n.text:00000000004038dd\n.text:00000000004038e3\n.text:00000000004038e9\n.text:00000000004038ef\n.text:00000000004038f4\n.text:00000000004038f6\n.text:00000000004038f9\n.text:00000000004038ff\n.text:0000000000403903\n.text:0000000000403905\n.text:000000000040390f\n.text:0000000000403913\n.text:0000000000403919\n.text:000000000040391c\n.text:000000000040391e\n.text:0000000000403924\n.text:0000000000403927\n.text:0000000000403929\n.text:000000000040392e\n.text:0000000000403933\n.text:0000000000403936\n.text:000000000040393a\n.text:000000000040393c\n.text:0000000000403941\n.text:0000000000403946\n.text:0000000000403949\n.text:000000000040394b\n.text:0000000000403950\n.text:0000000000403955\n.text:0000000000403958\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403963\n.text:0000000000403965\n.text:0000000000403968\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403976\n.text:0000000000403978\n.text:000000000040397d\n.text:0000000000403982\n.text:0000000000403988\n.text:0000000000403990\n.text:0000000000403995\n.text:0000000000403997\n.text:000000000040399c\n.text:000000000040399f\n.text:00000000004039a1\n.text:00000000004039a4\n.text:00000000004039a6\n.text:00000000004039a9\n.text:00000000004039ac\n.text:00000000004039af\n.text:00000000004039b1\n.text:00000000004039b9\n.text:00000000004039bc\n.text:00000000004039be\n.text:00000000004039c0\n.text:00000000004039d0\n.text:00000000004039d3\n.text:00000000004039d5\n.text:00000000004039d8\n.text:00000000004039de\n.text:00000000004039e1\n.text:00000000004039e3\n.text:00000000004039e5\n.text:00000000004039e7\n.text:00000000004039e9\n.text:00000000004039ec\n.text:00000000004039ee\n.text:00000000004039f3\n.text:00000000004039f8\n.text:00000000004039fb\n.text:00000000004039fd\n.text:0000000000403a02\n.text:0000000000403a07\n.text:0000000000403a0a\n.text:0000000000403a0c\n.text:0000000000403a11\n.text:0000000000403a15\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a1d\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2a\n.text:0000000000403a30\n.text:0000000000403a34\n.text:0000000000403a36\n.text:0000000000403a38\n.text:0000000000403a3a\n.text:0000000000403a3d\n.text:0000000000403a3f\n.text:0000000000403a44\n.text:0000000000403a49\n.text:0000000000403a4c\n.text:0000000000403a4e\n.text:0000000000403a53\n.text:0000000000403a57\n.text:0000000000403a59\n.text:0000000000403a5c\n.text:0000000000403a5e\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6c\n.text:0000000000403a72\n.text:0000000000403a77\n.text:0000000000403a7f\n.text:0000000000403a84\n.text:0000000000403a86\n.text:0000000000403a8e\n.text:0000000000403a93\n.text:0000000000403a95\n.text:0000000000403a9a\n.text:0000000000403a9f\n.text:0000000000403aa3\n.text:0000000000403aa5\n.text:0000000000403aaa\n.text:0000000000403aad\n.text:0000000000403ab0\n.text:0000000000403ab2\n.text:0000000000403aba\n.text:0000000000403abc\n.text:0000000000403ac4\n.text:0000000000403ac9\n.text:0000000000403acd\n.text:0000000000403ad2\n.text:0000000000403ad7\n.text:0000000000403adb\n.text:0000000000403ae0\n.text:0000000000403ae5\n.text:0000000000403ae9\n.text:0000000000403aed\n.text:0000000000403af3\n.text:0000000000403af8\n.text:0000000000403b00\n.text:0000000000403b02\n.text:0000000000403b04\n.text:0000000000403b08\n.text:0000000000403b0d\n.text:0000000000403b13\n.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b29\n.text:0000000000403b2c\n.text:0000000000403b2e\n.text:0000000000403b31\n.text:0000000000403b33\n.text:0000000000403b36\n.text:0000000000403b38\n.text:0000000000403b40\n.text:0000000000403b46\n.text:0000000000403b4a\n.text:0000000000403b4d\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b5a\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b64\n.text:0000000000403b67\n.text:0000000000403b6b\n.text:0000000000403b6f\n.text:0000000000403b71\n.text:0000000000403b76\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b80\n.text:0000000000403b87\n.text:0000000000403b88\n.text:0000000000403b8a\n.text:0000000000403b8c\n.text:0000000000403b8e\n.text:0000000000403b90\n.text:0000000000403b91\n.text:0000000000403b92\n.text:0000000000403b9a\n.text:0000000000403b9d\n.text:0000000000403b9f\n.text:0000000000403ba2\n.text:0000000000403ba4\n.text:0000000000403ba6\n.text:0000000000403ba8\n.text:0000000000403baa\n.text:0000000000403bad\n.text:0000000000403bb0\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb9\n.text:0000000000403bbc\n.text:0000000000403bbf\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc6\n.text:0000000000403bc9\n.text:0000000000403bcb\n.text:0000000000403bd0\n.text:0000000000403bd2\n.text:0000000000403bd7\n.text:0000000000403bdc\n.text:0000000000403bdf\n.text:0000000000403be1\n.text:0000000000403be6\n.text:0000000000403be9\n.text:0000000000403bee\n.text:0000000000403bf1\n.text:0000000000403bf7\n.text:0000000000403bfd\n.text:0000000000403c00\n.text:0000000000403c05\n'
p160
tp161
sS'count_ampersands'
p162
(S'\n__stdcall count_ampersands(char * str)\n'
p163
V\u000asize_t count_ampersands(char *str)\u000a\u000a{\u000a  char cVar1;\u000a  size_t sVar2;\u000a  \u000a  sVar2 = 0;\u000a  do {\u000a    cVar1 = *str;\u000a    sVar2 = sVar2 + (ulong)(cVar1 == '&');\u000a    str = str + 1;\u000a  } while (cVar1 != 0);\u000a  return sVar2;\u000a}\u000a\u000a
p164
S'XOR EAX,EAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RDI]\nXOR EDX,EDX\nCMP CL,0x26\nSETZ DL\nADD RAX,RDX\nINC RDI\nTEST CL,CL\nJNZ 0x00402790\nRET\n'
p165
S'31 c0\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 0f\n31 d2\n80 f9 26\n0f 94 c2\n48 01 d0\n48 ff c7\n84 c9\n75 eb\nc3\n'
p166
S'.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402795\n.text:0000000000402798\n.text:000000000040279b\n.text:000000000040279e\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a5\n'
p167
tp168
sS'set_quoting_style'
p169
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p170
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nMOV EAX,0x6093d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p172
S'48 85 ff\nb8 d0 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p173
S'.text:0000000000402eb0\n.text:0000000000402eb3\n.text:0000000000402eb8\n.text:0000000000402ebc\n.text:0000000000402ebe\n'
p174
tp175
sS'getaddrinfo'
p176
(S'\n__stdcall getaddrinfo(char * __name, char * __service, addrinfo * __req, addrinfo * * __pai)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getaddrinfo(char *__name,char *__service,addrinfo *__req,addrinfo **__pai)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getaddrinfo_00609220)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x00609220]\n'
p179
S'ff 25 fa 77 20 00\n'
p180
S'.plt:0000000000401a20\n'
p181
tp182
sS'extract_trimmed_name'
p183
(S'\n__stdcall extract_trimmed_name(STRUCT_UTMP * ut)\n'
p184
V\u000achar * extract_trimmed_name(STRUCT_UTMP *ut)\u000a\u000a{\u000a  char *__dest;\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  __dest = (char *)xmalloc(0x21);\u000a  strncpy(__dest,ut->ut_user,0x20);\u000a  __dest[0x20] = 0;\u000a  sVar1 = strlen(__dest);\u000a  if (0 < (long)sVar1) {\u000a    pcVar2 = __dest + sVar1;\u000a    do {\u000a      if (pcVar2[-1] != ' ') {\u000a        return __dest;\u000a      }\u000a      pcVar2[-1] = 0;\u000a      pcVar2 = pcVar2 + -1;\u000a    } while (__dest < pcVar2);\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p185
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x21\nCALL 0x00404bd0\nMOV RBX,RAX\nLEA RSI,[R14 + 0x2c]\nMOV EDX,0x20\nMOV RDI,RBX\nCALL 0x00401680\nMOV byte ptr [RBX + 0x20],0x0\nMOV RDI,RBX\nCALL 0x00401760\nTEST RAX,RAX\nJLE 0x00404f72\nADD RAX,RBX\nNOP dword ptr [RAX]\nCMP byte ptr [RAX + -0x1],0x20\nJNZ 0x00404f72\nMOV byte ptr [RAX + -0x1],0x0\nDEC RAX\nCMP RBX,RAX\nJC 0x00404f60\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p186
S'41 56\n53\n50\n49 89 fe\nbf 21 00 00 00\ne8 9f fc ff ff\n48 89 c3\n49 8d 76 2c\nba 20 00 00 00\n48 89 df\ne8 3b c7 ff ff\nc6 43 20 00\n48 89 df\ne8 0f c8 ff ff\n48 85 c0\n7e 1c\n48 01 d8\n0f 1f 80 00 00 00 00\n80 78 ff 20\n75 0c\nc6 40 ff 00\n48 ff c8\n48 39 c3\n72 ee\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p187
S'.text:0000000000404f20\n.text:0000000000404f22\n.text:0000000000404f23\n.text:0000000000404f24\n.text:0000000000404f27\n.text:0000000000404f2c\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f38\n.text:0000000000404f3d\n.text:0000000000404f40\n.text:0000000000404f45\n.text:0000000000404f49\n.text:0000000000404f4c\n.text:0000000000404f51\n.text:0000000000404f54\n.text:0000000000404f56\n.text:0000000000404f59\n.text:0000000000404f60\n.text:0000000000404f64\n.text:0000000000404f66\n.text:0000000000404f6a\n.text:0000000000404f6d\n.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f75\n.text:0000000000404f79\n.text:0000000000404f7a\n.text:0000000000404f7c\n'
p188
tp189
sS'quotearg_n_style_colon'
p190
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p191
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p192
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403fe0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402ec0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403db0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p193
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p194
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404164\n.text:0000000000404168\n.text:000000000040416b\n.text:000000000040416d\n.text:0000000000404172\n.text:0000000000404175\n.text:000000000040417a\n.text:000000000040417f\n.text:0000000000404184\n.text:0000000000404187\n.text:000000000040418c\n.text:0000000000404193\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419b\n.text:00000000004041a0\n.text:00000000004041a4\n.text:00000000004041a5\n.text:00000000004041a7\n.text:00000000004041a8\n'
p195
tp196
sS'read_utmp'
p197
(S'\n__stdcall read_utmp(char * file, size_t * n_entries, STRUCT_UTMP * * utmp_buf)\n'
p198
V\u000aint read_utmp(char *file,size_t *n_entries,STRUCT_UTMP **utmp_buf)\u000a\u000a{\u000a  _Bool _Var1;\u000a  utmpx *__src;\u000a  size_t sVar2;\u000a  STRUCT_UTMP *p;\u000a  size_t local_38;\u000a  \u000a  local_38 = 0;\u000a  utmpxname(file);\u000a  setutxent();\u000a  p = (STRUCT_UTMP *)0x0;\u000a  sVar2 = 0;\u000a  while( true ) {\u000a    __src = getutxent();\u000a    if (__src == (utmpx *)0x0) break;\u000a    _Var1 = desirable_utmp_entry((STRUCT_UTMP *)__src);\u000a    if (_Var1 != false) {\u000a      if (sVar2 == local_38) {\u000a        p = (STRUCT_UTMP *)x2nrealloc(p,&local_38,0x180);\u000a      }\u000a      memcpy(p + sVar2,__src,0x180);\u000a      sVar2 = sVar2 + 1;\u000a    }\u000a  }\u000a  endutxent();\u000a  *n_entries = sVar2;\u000a  *utmp_buf = p;\u000a  return 0;\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBP,ECX\nMOV R14,RDX\nMOV R15,RSI\nMOV qword ptr [RSP],0x0\nCALL 0x00401620\nCALL 0x00401870\nXOR R13D,R13D\nXOR R12D,R12D\nJMP 0x00404fd0\nLEA RDI,[R12 + R12*0x2]\nINC R12\nSHL RDI,0x7\nADD RDI,R13\nMOV EDX,0x180\nMOV RSI,RBX\nCALL 0x00401880\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x00401990\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405006\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00405030\nTEST AL,AL\nJZ 0x00404fd0\nCMP R12,qword ptr [RSP]\nJNZ 0x00404fad\nMOV EDX,0x180\nMOV RDI,R13\nMOV RSI,RSP\nCALL 0x00404c40\nMOV R13,RAX\nJMP 0x00404fad\nCALL 0x00401700\nMOV qword ptr [R15],R12\nMOV qword ptr [R14],R13\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p200
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 cd\n49 89 d6\n49 89 f7\n48 c7 04 24 00 00 00 00\ne8 80 c6 ff ff\ne8 cb c8 ff ff\n45 31 ed\n45 31 e4\neb 23\n4b 8d 3c 64\n49 ff c4\n48 c1 e7 07\n4c 01 ef\nba 80 01 00 00\n48 89 de\ne8 b8 c8 ff ff\n0f 1f 84 00 00 00 00 00\ne8 bb c9 ff ff\n48 89 c3\n48 85 db\n74 29\n48 89 df\n89 ee\ne8 49 00 00 00\n84 c0\n74 e5\n4c 3b 24 24\n75 bc\nba 80 01 00 00\n4c 89 ef\n48 89 e6\ne8 3f fc ff ff\n49 89 c5\neb a7\ne8 f5 c6 ff ff\n4d 89 27\n4d 89 2e\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p201
S'.text:0000000000404f80\n.text:0000000000404f81\n.text:0000000000404f83\n.text:0000000000404f85\n.text:0000000000404f87\n.text:0000000000404f89\n.text:0000000000404f8a\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f9b\n.text:0000000000404fa0\n.text:0000000000404fa5\n.text:0000000000404fa8\n.text:0000000000404fab\n.text:0000000000404fad\n.text:0000000000404fb1\n.text:0000000000404fb4\n.text:0000000000404fb8\n.text:0000000000404fbb\n.text:0000000000404fc0\n.text:0000000000404fc3\n.text:0000000000404fc8\n.text:0000000000404fd0\n.text:0000000000404fd5\n.text:0000000000404fd8\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe0\n.text:0000000000404fe2\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404feb\n.text:0000000000404fef\n.text:0000000000404ff1\n.text:0000000000404ff6\n.text:0000000000404ff9\n.text:0000000000404ffc\n.text:0000000000405001\n.text:0000000000405004\n.text:0000000000405006\n.text:000000000040500b\n.text:000000000040500e\n.text:0000000000405011\n.text:0000000000405013\n.text:0000000000405017\n.text:0000000000405018\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501e\n.text:0000000000405020\n.text:0000000000405021\n'
p202
tp203
sS'textdomain'
p204
(S'\n__stdcall textdomain()\n'
p205
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609088)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x00609088]\n'
p207
S'ff 25 92 79 20 00\n'
p208
S'.plt:00000000004016f0\n'
p209
tp210
sS'xmemdup'
p211
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p212
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p213
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404bd0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401880\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p214
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c cb ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p215
S'.text:0000000000404d10\n.text:0000000000404d12\n.text:0000000000404d14\n.text:0000000000404d15\n.text:0000000000404d18\n.text:0000000000404d1b\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d26\n.text:0000000000404d29\n.text:0000000000404d2c\n.text:0000000000404d2f\n.text:0000000000404d34\n.text:0000000000404d37\n.text:0000000000404d38\n.text:0000000000404d3a\n.text:0000000000404d3c\n'
p216
tp217
sS'get_quoting_style'
p218
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p219
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p220
S'TEST RDI,RDI\nMOV EAX,0x6093d0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p221
S'48 85 ff\nb8 d0 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p222
S'.text:0000000000402ea0\n.text:0000000000402ea3\n.text:0000000000402ea8\n.text:0000000000402eac\n.text:0000000000402eae\n'
p223
tp224
sS'fread_unlocked'
p225
(S'\n__stdcall fread_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_unlocked_00609080)();\u000a  return sVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00609080]\n'
p228
S'ff 25 9a 79 20 00\n'
p229
S'.plt:00000000004016e0\n'
p230
tp231
sS'ferror_unlocked'
p232
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609128)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00609128]\n'
p235
S'ff 25 f2 78 20 00\n'
p236
S'.plt:0000000000401830\n'
p237
tp238
sS'exit'
p239
(S'\n__stdcall exit(int __status)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00609208)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x00609208]\n'
p242
S'ff 25 12 78 20 00\n'
p243
S'.plt:00000000004019f0\n'
p244
tp245
sS'canon_host'
p246
(S'\n__stdcall canon_host(char * host)\n'
p247
V\u000achar * canon_host(char *host)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = canon_host_r(host,&last_cherror);\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'MOV ESI,0x609378\nJMP 0x00402b40\n'
p249
S'be 78 93 60 00\neb 09\n'
p250
S'.text:0000000000402b30\n.text:0000000000402b35\n'
p251
tp252
sS'quote_mem'
p253
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p254
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404270\n'
p256
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p257
S'.text:0000000000404280\n.text:0000000000404283\n.text:0000000000404286\n.text:0000000000404288\n.text:000000000040428b\n.text:000000000040428e\n'
p258
tp259
sS'locale_charset'
p260
(S'\n__stdcall locale_charset()\n'
p261
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004052bd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004052bd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401900\nTEST RAX,RAX\nMOV R14D,0x406541\nCMOVNZ R14,RAX\nCALL 0x004052d0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405295\nJMP 0x004052bd\nMOV RDI,RBX\nCALL 0x00401760\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401760\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004052bd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401850\nTEST EAX,EAX\nJZ 0x004052b0\nCMP BPL,0x2a\nJNZ 0x00405270\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405270\nMOV RDI,RBX\nCALL 0x00401760\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406b98\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p263
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 b2 c6 ff ff\n48 85 c0\n41 be 41 65 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 e8 c4 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 da c4 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 b0 c5 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 a8 c4 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 98 6b 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p264
S'.text:0000000000405240\n.text:0000000000405241\n.text:0000000000405243\n.text:0000000000405244\n.text:0000000000405249\n.text:000000000040524e\n.text:0000000000405251\n.text:0000000000405257\n.text:000000000040525b\n.text:0000000000405260\n.text:0000000000405263\n.text:0000000000405266\n.text:0000000000405269\n.text:000000000040526b\n.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405278\n.text:000000000040527c\n.text:0000000000405281\n.text:0000000000405286\n.text:000000000040528b\n.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405295\n.text:0000000000405298\n.text:000000000040529b\n.text:00000000004052a0\n.text:00000000004052a2\n.text:00000000004052a4\n.text:00000000004052a8\n.text:00000000004052aa\n.text:00000000004052ae\n.text:00000000004052b0\n.text:00000000004052b3\n.text:00000000004052b8\n.text:00000000004052bd\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052ca\n.text:00000000004052cb\n.text:00000000004052cd\n.text:00000000004052ce\n'
p265
tp266
sS'set_program_name'
p267
(S'\n__stdcall set_program_name(char * argv0)\n'
p268
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402e31\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004017b0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402e1b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405ea9\nMOV EDX,0x7\nCALL 0x00401690\nTEST EAX,EAX\nJNZ 0x00402e1b\nMOV ESI,0x405eb1\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401690\nTEST EAX,EAX\nJNZ 0x00402e18\nADD R14,0x3\nMOV qword ptr [0x006092e0],R14\nMOV RBX,R14\nMOV qword ptr [0x006093c0],RBX\nMOV qword ptr [0x006092f8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00609300]\nMOV EDI,0x405e71\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401a00\nCALL 0x00401660\n'
p270
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 e9 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe a9 5e 40 00\nba 07 00 00 00\ne8 9d e8 ff ff\n85 c0\n75 24\nbe b1 5e 40 00\nba 03 00 00 00\n4c 89 f7\ne8 87 e8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 c8 64 20 00\n4c 89 f3\n48 89 1d 9e 65 20 00\n48 89 1d cf 64 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d c8 64 20 00\nbf 71 5e 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 b4 eb ff ff\ne8 0f e8 ff ff\n'
p271
S'.text:0000000000402db0\n.text:0000000000402db2\n.text:0000000000402db3\n.text:0000000000402db4\n.text:0000000000402db7\n.text:0000000000402dba\n.text:0000000000402dbc\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcc\n.text:0000000000402dd0\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dda\n.text:0000000000402dde\n.text:0000000000402de0\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df3\n.text:0000000000402df5\n.text:0000000000402df7\n.text:0000000000402dfc\n.text:0000000000402e01\n.text:0000000000402e04\n.text:0000000000402e09\n.text:0000000000402e0b\n.text:0000000000402e0d\n.text:0000000000402e11\n.text:0000000000402e18\n.text:0000000000402e1b\n.text:0000000000402e22\n.text:0000000000402e29\n.text:0000000000402e2d\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e31\n.text:0000000000402e38\n.text:0000000000402e3d\n.text:0000000000402e42\n.text:0000000000402e47\n.text:0000000000402e4c\n'
p272
tp273
sS'fileno'
p274
(S'\n__stdcall fileno(FILE * __stream)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609170)();\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609170]\n'
p277
S'ff 25 aa 78 20 00\n'
p278
S'.plt:00000000004018c0\n'
p279
tp280
sS'quotearg_buffer'
p281
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p282
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6093d0\nCMOVNZ RBP,R8\nCALL 0x00401670\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402fd0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd d0 93 60 00\n49 0f 45 e8\ne8 f8 e6 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000402f50\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f57\n.text:0000000000402f59\n.text:0000000000402f5a\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f61\n.text:0000000000402f64\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6f\n.text:0000000000402f73\n.text:0000000000402f78\n.text:0000000000402f7b\n.text:0000000000402f7d\n.text:0000000000402f81\n.text:0000000000402f85\n.text:0000000000402f89\n.text:0000000000402f8d\n.text:0000000000402f90\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9f\n.text:0000000000402fa3\n.text:0000000000402fa4\n.text:0000000000402fa9\n.text:0000000000402fad\n.text:0000000000402fb1\n.text:0000000000402fb3\n.text:0000000000402fb7\n.text:0000000000402fb8\n.text:0000000000402fba\n.text:0000000000402fbc\n.text:0000000000402fbe\n.text:0000000000402fc0\n.text:0000000000402fc1\n'
p286
tp287
sS'quotearg_colon'
p288
(S'\n__stdcall quotearg_colon(char * arg)\n'
p289
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV ESI,0x3a\nJMP 0x00404130\n'
p291
S'be 3a 00 00 00\neb e9\n'
p292
S'.text:0000000000404140\n.text:0000000000404145\n'
p293
tp294
sS'mbrtowc'
p295
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x006090d0]\n'
p298
S'ff 25 4a 79 20 00\n'
p299
S'.plt:0000000000401780\n'
p300
tp301
sS'time_string'
p302
(S'\n__stdcall time_string(STRUCT_UTMP * utmp_ent)\n'
p303
V\u000achar * time_string(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char buf [33];\u000a  tm *__tp;\u000a  char *pcVar1;\u000a  long local_10;\u000a  \u000a  local_10 = (long)(utmp_ent->ut_tv).tv_sec;\u000a  __tp = localtime(&local_10);\u000a  if (__tp == (tm *)0x0) {\u000a    pcVar1 = timetostr();\u000a  }\u000a  else {\u000a    pcVar1 = &ram0x00609350;\u000a    strftime((char *)0x609350,0x21,time_format,__tp);\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'PUSH RBX\nSUB RSP,0x10\nMOVSXD RAX,dword ptr [0x154 + RDI]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x00401650\nTEST RAX,RAX\nJZ 0x00402760\nMOV RDX,qword ptr [0x00609318]\nMOV EBX,0x609350\nMOV EDI,0x609350\nMOV ESI,0x21\nMOV RCX,RAX\nCALL 0x00401980\nJMP 0x0040276d\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004027c0\nMOV RBX,RAX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p305
S'53\n48 83 ec 10\n48 63 87 54 01 00 00\n48 89 44 24 08\n48 8d 7c 24 08\ne8 15 ef ff ff\n48 85 c0\n74 20\n48 8b 15 d1 6b 20 00\nbb 50 93 60 00\nbf 50 93 60 00\nbe 21 00 00 00\n48 89 c1\ne8 22 f2 ff ff\neb 0d\n48 8b 7c 24 08\ne8 56 00 00 00\n48 89 c3\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p306
S'.text:0000000000402720\n.text:0000000000402721\n.text:0000000000402725\n.text:000000000040272c\n.text:0000000000402731\n.text:0000000000402736\n.text:000000000040273b\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402747\n.text:000000000040274c\n.text:0000000000402751\n.text:0000000000402756\n.text:0000000000402759\n.text:000000000040275e\n.text:0000000000402760\n.text:0000000000402765\n.text:000000000040276a\n.text:000000000040276d\n.text:0000000000402770\n.text:0000000000402774\n.text:0000000000402775\n'
p307
tp308
sS'rpl_fflush'
p309
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p310
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609188)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404e7d\nMOV RDI,RBX\nCALL 0x00401920\nTEST EAX,EAX\nJZ 0x00404e7d\nMOV RDI,RBX\nCALL 0x00404e90\nMOV RDI,RBX\nPOP RBX\nJMP 0x004018f0\n'
p312
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 af ca ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 6a ca ff ff\n'
p313
S'.text:0000000000404e60\n.text:0000000000404e61\n.text:0000000000404e64\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6c\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e78\n.text:0000000000404e7d\n.text:0000000000404e80\n.text:0000000000404e81\n'
p314
tp315
sS'setlocale'
p316
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006091c0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x006091c0]\n'
p319
S'ff 25 5a 78 20 00\n'
p320
S'.plt:0000000000401960\n'
p321
tp322
sS'c_toupper'
p323
(S'\n__stdcall c_toupper()\n'
p324
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p326
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p327
S'.text:00000000004051c0\n.text:00000000004051c3\n.text:00000000004051c6\n.text:00000000004051c9\n.text:00000000004051cc\n'
p328
tp329
sS'bindtextdomain'
p330
(S'\n__stdcall bindtextdomain()\n'
p331
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_006090a0)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x006090a0]\n'
p333
S'ff 25 7a 79 20 00\n'
p334
S'.plt:0000000000401720\n'
p335
tp336
sS'set_char_quoting'
p337
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p338
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p339
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6093d0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p340
S'89 f1\n48 85 ff\nbe d0 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p341
S'.text:0000000000402ec0\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ece\n.text:0000000000402ed0\n.text:0000000000402ed3\n.text:0000000000402ed7\n.text:0000000000402edc\n.text:0000000000402edf\n.text:0000000000402ee1\n.text:0000000000402ee3\n.text:0000000000402ee6\n.text:0000000000402ee8\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402ef0\n.text:0000000000402ef5\n'
p342
tp343
sS'quotearg_n'
p344
(S'\n__stdcall quotearg_n(char * arg)\n'
p345
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RDX,-0x1\nMOV ECX,0x6093d0\nJMP 0x00403db0\n'
p347
S'48 c7 c2 ff ff ff ff\nb9 d0 93 60 00\neb 02\n'
p348
S'.text:0000000000403da0\n.text:0000000000403da7\n.text:0000000000403dac\n'
p349
tp350
sS'mbsinit'
p351
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00609228)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00609228]\n'
p354
S'ff 25 f2 77 20 00\n'
p355
S'.plt:0000000000401a30\n'
p356
tp357
sS'dcgettext'
p358
(S'\n__stdcall dcgettext()\n'
p359
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_006090b0)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x006090b0]\n'
p361
S'ff 25 6a 79 20 00\n'
p362
S'.plt:0000000000401740\n'
p363
tp364
sS'close_stream'
p365
(S'\n__stdcall close_stream(FILE * stream)\n'
p366
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004016c0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401830\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404de0\nTEST EBP,EBP\nJZ 0x0040520b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040522f\nCALL 0x00401670\nMOV dword ptr [RAX],0x0\nJMP 0x0040522f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040522f\nTEST CL,CL\nJNZ 0x0040522f\nCALL 0x00401670\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p368
S'55\n41 56\n53\n48 89 fb\ne8 e4 c4 ff ff\n49 89 c6\n48 89 df\ne8 49 c6 ff ff\n89 c5\n48 89 df\ne8 ef fb ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d c4 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e c4 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p369
S'.text:00000000004051d0\n.text:00000000004051d1\n.text:00000000004051d3\n.text:00000000004051d4\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e2\n.text:00000000004051e7\n.text:00000000004051e9\n.text:00000000004051ec\n.text:00000000004051f1\n.text:00000000004051f3\n.text:00000000004051f5\n.text:00000000004051fa\n.text:00000000004051fc\n.text:00000000004051fe\n.text:0000000000405203\n.text:0000000000405209\n.text:000000000040520b\n.text:000000000040520d\n.text:0000000000405210\n.text:0000000000405212\n.text:0000000000405214\n.text:0000000000405217\n.text:0000000000405219\n.text:000000000040521b\n.text:000000000040521d\n.text:0000000000405222\n.text:0000000000405224\n.text:0000000000405227\n.text:000000000040522c\n.text:000000000040522f\n.text:0000000000405231\n.text:0000000000405232\n.text:0000000000405234\n.text:0000000000405235\n'
p370
tp371
sS'quotearg_colon_mem'
p372
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p373
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'MOV EDX,0x3a\nJMP 0x004040c0\n'
p375
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p376
S'.text:0000000000404150\n.text:0000000000404155\n'
p377
tp378
sS'__ctype_toupper_loc'
p379
(S'\n__stdcall __ctype_toupper_loc()\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_00609018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x00609018]\n'
p382
S'ff 25 02 7a 20 00\n'
p383
S'.plt:0000000000401610\n'
p384
tp385
sS'quotearg_free'
p386
(S'\n__stdcall quotearg_free()\n'
p387
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609270]\nCMP dword ptr [0x00609278],0x2\nJC 0x00403d4a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401640\nINC RBX\nMOV EAX,dword ptr [0x00609278]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403d30\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609410\nCMP RDI,RAX\nJZ 0x00403d73\nCALL 0x00401640\nMOV qword ptr [0x00609280],0x100\nMOV qword ptr [0x00609288],0x609410\nMOV EAX,0x609280\nCMP R14,RAX\nJZ 0x00403d90\nMOV RDI,R14\nCALL 0x00401640\nMOV qword ptr [0x00609270],0x609280\nMOV dword ptr [0x00609278],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p389
S'41 57\n41 56\n53\n4c 8b 35 54 55 20 00\n83 3d 55 55 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 08 d9 ff ff\n48 ff c3\n8b 05 37 55 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 10 94 60 00\n48 39 c7\n74 1b\ne8 e3 d8 ff ff\n48 c7 05 18 55 20 00 00 01 00 00\n48 c7 05 15 55 20 00 10 94 60 00\nb8 80 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 bb d8 ff ff\n48 c7 05 e0 54 20 00 80 92 60 00\nc7 05 de 54 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p390
S'.text:0000000000403d10\n.text:0000000000403d12\n.text:0000000000403d14\n.text:0000000000403d15\n.text:0000000000403d1c\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d29\n.text:0000000000403d2e\n.text:0000000000403d30\n.text:0000000000403d33\n.text:0000000000403d38\n.text:0000000000403d3b\n.text:0000000000403d41\n.text:0000000000403d45\n.text:0000000000403d48\n.text:0000000000403d4a\n.text:0000000000403d4e\n.text:0000000000403d53\n.text:0000000000403d56\n.text:0000000000403d58\n.text:0000000000403d5d\n.text:0000000000403d68\n.text:0000000000403d73\n.text:0000000000403d78\n.text:0000000000403d7b\n.text:0000000000403d7d\n.text:0000000000403d80\n.text:0000000000403d85\n.text:0000000000403d90\n.text:0000000000403d9a\n.text:0000000000403d9b\n.text:0000000000403d9d\n.text:0000000000403d9f\n'
p391
tp392
sS'quotearg_mem'
p393
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403f70\n'
p396
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p397
S'.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f96\n.text:0000000000403f98\n.text:0000000000403f9b\n.text:0000000000403f9e\n'
p398
tp399
sS'xcalloc'
p400
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p401
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p402
S'PUSH RAX\nCALL 0x00404d90\nTEST RAX,RAX\nJZ 0x00404cfd\nPOP RCX\nRET\nCALL 0x00404d60\n'
p403
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p404
S'.text:0000000000404cf0\n.text:0000000000404cf1\n.text:0000000000404cf6\n.text:0000000000404cf9\n.text:0000000000404cfb\n.text:0000000000404cfc\n.text:0000000000404cfd\n'
p405
tp406
sS'deregister_tm_clones'
p407
(S'\n__stdcall deregister_tm_clones()\n'
p408
V\u000a/* WARNING: Removing unreachable block (ram,0x00401ac5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401acf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p409
S'MOV EAX,0x6092cf\nPUSH RBP\nSUB RAX,0x6092c8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401ae0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401ae0\nPOP RBP\nMOV EDI,0x6092c8\nJMP RAX\nPOP RBP\nRET\n'
p410
S'b8 cf 92 60 00\n55\n48 2d c8 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf c8 92 60 00\nff e0\n5d\nc3\n'
p411
S'.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401ab6\n.text:0000000000401abc\n.text:0000000000401ac0\n.text:0000000000401ac3\n.text:0000000000401ac5\n.text:0000000000401aca\n.text:0000000000401acd\n.text:0000000000401acf\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ae0\n.text:0000000000401ae1\n'
p412
tp413
sS'clear_ungetc_buffer_preserving_position'
p414
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p415
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p416
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404e97\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404eb0\n'
p417
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p418
S'.text:0000000000404e90\n.text:0000000000404e94\n.text:0000000000404e96\n.text:0000000000404e97\n.text:0000000000404e99\n.text:0000000000404e9e\n'
p419
tp420
sS'xnmalloc'
p421
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p422
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p423
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404bc1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404bd0\nPUSH RAX\nCALL 0x00404d60\n'
p424
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p425
S'.text:0000000000404bb0\n.text:0000000000404bb3\n.text:0000000000404bb6\n.text:0000000000404bb8\n.text:0000000000404bbc\n.text:0000000000404bbf\n.text:0000000000404bc1\n.text:0000000000404bc2\n'
p426
tp427
sS'quotearg_custom'
p428
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p429
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004041b0\n'
p431
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p432
S'.text:0000000000404230\n.text:0000000000404233\n.text:0000000000404236\n.text:0000000000404239\n.text:000000000040423b\n.text:000000000040423e\n.text:0000000000404241\n.text:0000000000404244\n'
p433
tp434
sS'free'
p435
(S'\n__stdcall free(void * __ptr)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609030)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609030]\n'
p438
S'ff 25 ea 79 20 00\n'
p439
S'.plt:0000000000401640\n'
p440
tp441
sS'close'
p442
(S'\n__stdcall close(int __fd)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00609108]\n'
p445
S'ff 25 12 79 20 00\n'
p446
S'.plt:00000000004017f0\n'
p447
tp448
sS'setutxent'
p449
(S'\n__stdcall setutxent()\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid setutxent(void)\u000a\u000a{\u000a  (*(code *)PTR_setutxent_00609148)();\u000a  return;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x00609148]\n'
p452
S'ff 25 d2 78 20 00\n'
p453
S'.plt:0000000000401870\n'
p454
tp455
sS'getenv'
p456
(S'\n__stdcall getenv(char * __name)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609028)();\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609028]\n'
p459
S'ff 25 f2 79 20 00\n'
p460
S'.plt:0000000000401630\n'
p461
tp462
sS'putchar_unlocked'
p463
(S'\n__stdcall putchar_unlocked(int __c)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609158)();\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x00609158]\n'
p466
S'ff 25 c2 78 20 00\n'
p467
S'.plt:0000000000401890\n'
p468
tp469
sS'quotearg_char'
p470
(S'\n__stdcall quotearg_char(char * arg)\n'
p471
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p472
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004040c0\n'
p473
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p474
S'.text:0000000000404130\n.text:0000000000404132\n.text:0000000000404139\n.text:000000000040413b\n'
p475
tp476
sS'fopen'
p477
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_006091f8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006091f8]\n'
p480
S'ff 25 22 78 20 00\n'
p481
S'.plt:00000000004019d0\n'
p482
tp483
sS'malloc'
p484
(S'\n__stdcall malloc(size_t __size)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609180)();\u000a  return pvVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x00609180]\n'
p487
S'ff 25 9a 78 20 00\n'
p488
S'.plt:00000000004018e0\n'
p489
tp490
sS'FUN_00401600'
p491
(S'\n__stdcall FUN_00401600()\n'
p492
V\u000avoid FUN_00401600(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p493
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p494
S'ff 35 02 7a 20 00\nff 25 04 7a 20 00\n'
p495
S'.plt:0000000000401600\n.plt:0000000000401606\n'
p496
tp497
sS'ch_strerror'
p498
(S'\n__stdcall ch_strerror()\n'
p499
V\u000achar * ch_strerror(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_gai_strerror_006090e0)((ulong)(uint)last_cherror);\u000a  return pcVar1;\u000a}\u000a\u000a
p500
S'MOV EDI,dword ptr [0x00609378]\nJMP 0x004017a0\n'
p501
S'8b 3d b2 67 20 00\ne9 d5 eb ff ff\n'
p502
S'.text:0000000000402bc0\n.text:0000000000402bc6\n'
p503
tp504
sS'stat'
p505
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p506
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00609178)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004018d0\n'
p508
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 a0 c2 ff ff\n'
p509
S'.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405626\n.text:000000000040562b\n'
p510
tp511
sS'c_tolower'
p512
(S'\n__stdcall c_tolower()\n'
p513
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p515
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p516
S'.text:00000000004051b0\n.text:00000000004051b3\n.text:00000000004051b6\n.text:00000000004051b9\n.text:00000000004051bc\n'
p517
tp518
sS'rpl_fseeko'
p519
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p520
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091f0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404ed8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404ed8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00404eea\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004019c0\nMOV RDI,RBX\nCALL 0x004018c0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004017c0\nCMP RAX,-0x1\nJZ 0x00404f13\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404f18\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p522
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 ca ff ff\n48 89 df\ne8 ce c9 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 c1 c8 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p523
S'.text:0000000000404eb0\n.text:0000000000404eb1\n.text:0000000000404eb3\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404eba\n.text:0000000000404ebd\n.text:0000000000404ec1\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ecb\n.text:0000000000404ecf\n.text:0000000000404ed1\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404edb\n.text:0000000000404ede\n.text:0000000000404ee1\n.text:0000000000404ee2\n.text:0000000000404ee4\n.text:0000000000404ee5\n.text:0000000000404eea\n.text:0000000000404eed\n.text:0000000000404ef2\n.text:0000000000404ef4\n.text:0000000000404ef7\n.text:0000000000404efa\n.text:0000000000404eff\n.text:0000000000404f03\n.text:0000000000404f05\n.text:0000000000404f08\n.text:0000000000404f0f\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f18\n.text:0000000000404f19\n.text:0000000000404f1b\n.text:0000000000404f1c\n'
p524
tp525
sS'getopt_long'
p526
(S'\n__stdcall getopt_long()\n'
p527
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090c8)();\u000a  return;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006090c8]\n'
p529
S'ff 25 52 79 20 00\n'
p530
S'.plt:0000000000401770\n'
p531
tp532
sS'quote_n_mem'
p533
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p534
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p535
S'MOV ECX,0x609290\nJMP 0x00403db0\n'
p536
S'b9 90 92 60 00\ne9 36 fb ff ff\n'
p537
S'.text:0000000000404270\n.text:0000000000404275\n'
p538
tp539
sS'xstrdup'
p540
(S'\n__stdcall xstrdup(char * string)\n'
p541
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p542
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401760\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404d10\n'
p543
S'53\n48 89 fb\ne8 17 ca ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p544
S'.text:0000000000404d40\n.text:0000000000404d41\n.text:0000000000404d44\n.text:0000000000404d49\n.text:0000000000404d4d\n.text:0000000000404d50\n.text:0000000000404d51\n'
p545
tp546
sS'c_ispunct'
p547
(S'\n__stdcall c_ispunct()\n'
p548
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p549
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405152\nMOV AL,0x1\nJMP qword ptr [0x406780 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p550
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 80 67 40 00\nc3\n31 c0\nc3\n'
p551
S'.text:0000000000405140\n.text:0000000000405143\n.text:0000000000405146\n.text:0000000000405148\n.text:000000000040514a\n.text:0000000000405151\n.text:0000000000405152\n.text:0000000000405154\n'
p552
tp553
sS'quotearg_style'
p554
(S'\n__stdcall quotearg_style(char * arg)\n'
p555
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403fa0\n'
p557
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p558
S'.text:0000000000404080\n.text:0000000000404083\n.text:0000000000404085\n.text:0000000000404087\n.text:0000000000404089\n.text:000000000040408c\n'
p559
tp560
sS'kill'
p561
(S'\n__stdcall kill(__pid_t __pid, int __sig)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint kill(__pid_t __pid,int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_kill_00609160)();\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x00609160]\n'
p564
S'ff 25 ba 78 20 00\n'
p565
S'.plt:00000000004018a0\n'
p566
tp567
sS'fscanf'
p568
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x00609100]\n'
p571
S'ff 25 1a 79 20 00\n'
p572
S'.plt:00000000004017e0\n'
p573
tp574
sS'emit_try_help'
p575
(S'\n__stdcall emit_try_help()\n'
p576
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p577
S'PUSH RBX\nMOV RBX,qword ptr [0x00609300]\nXOR EDI,EDI\nMOV ESI,0x405bdb\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006093c0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a10\n'
p578
S'53\n48 8b 1d 78 76 20 00\n31 ff\nbe db 5b 40 00\nba 05 00 00 00\ne8 a7 fa ff ff\n48 89 c2\n48 8b 0d 1d 77 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 5d fd ff ff\n'
p579
S'.text:0000000000401c80\n.text:0000000000401c81\n.text:0000000000401c88\n.text:0000000000401c8a\n.text:0000000000401c8f\n.text:0000000000401c94\n.text:0000000000401c99\n.text:0000000000401c9c\n.text:0000000000401ca3\n.text:0000000000401ca8\n.text:0000000000401caa\n.text:0000000000401cad\n.text:0000000000401cae\n'
p580
tp581
sS'strftime'
p582
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_006091d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006091d0]\n'
p585
S'ff 25 4a 78 20 00\n'
p586
S'.plt:0000000000401980\n'
p587
tp588
sS'memcpy'
p589
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609150)();\u000a  return pvVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x00609150]\n'
p592
S'ff 25 ca 78 20 00\n'
p593
S'.plt:0000000000401880\n'
p594
tp595
sS'strrchr'
p596
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090e8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006090e8]\n'
p599
S'ff 25 32 79 20 00\n'
p600
S'.plt:00000000004017b0\n'
p601
tp602
sS'close_stdout_set_ignore_EPIPE'
p603
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p604
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p605
S'MOV byte ptr [0x006093b8],DIL\nRET\n'
p606
S'40 88 3d d1 67 20 00\nc3\n'
p607
S'.text:0000000000402be0\n.text:0000000000402be7\n'
p608
tp609
sS'quotearg_alloc_mem'
p610
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p611
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6093d0\nCMOVNZ R12,RCX\nCALL 0x00401670\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402fd0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404ca0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402fd0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403cfa\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc d0 93 60 00\n4c 0f 45 e1\ne8 18 da ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000403c20\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c29\n.text:0000000000403c2a\n.text:0000000000403c2e\n.text:0000000000403c31\n.text:0000000000403c36\n.text:0000000000403c39\n.text:0000000000403c3e\n.text:0000000000403c41\n.text:0000000000403c46\n.text:0000000000403c49\n.text:0000000000403c4f\n.text:0000000000403c53\n.text:0000000000403c58\n.text:0000000000403c5d\n.text:0000000000403c5f\n.text:0000000000403c63\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6c\n.text:0000000000403c71\n.text:0000000000403c75\n.text:0000000000403c7a\n.text:0000000000403c7e\n.text:0000000000403c80\n.text:0000000000403c82\n.text:0000000000403c85\n.text:0000000000403c88\n.text:0000000000403c8b\n.text:0000000000403c90\n.text:0000000000403c95\n.text:0000000000403c97\n.text:0000000000403c9c\n.text:0000000000403ca0\n.text:0000000000403ca3\n.text:0000000000403ca7\n.text:0000000000403caa\n.text:0000000000403caf\n.text:0000000000403cb2\n.text:0000000000403cb6\n.text:0000000000403cba\n.text:0000000000403cbd\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cca\n.text:0000000000403ccd\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cd9\n.text:0000000000403cde\n.text:0000000000403ce3\n.text:0000000000403ce7\n.text:0000000000403cea\n.text:0000000000403cee\n.text:0000000000403cf3\n.text:0000000000403cf5\n.text:0000000000403cf7\n.text:0000000000403cfa\n.text:0000000000403cfd\n.text:0000000000403d01\n.text:0000000000403d02\n.text:0000000000403d04\n.text:0000000000403d06\n.text:0000000000403d08\n.text:0000000000403d0a\n.text:0000000000403d0b\n'
p615
tp616
sS'iswprint'
p617
(S'\n__stdcall iswprint(wint_t __wc)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00609230)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x00609230]\n'
p620
S'ff 25 ea 77 20 00\n'
p621
S'.plt:0000000000401a40\n'
p622
tp623
sS'quotearg_style_mem'
p624
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p625
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404040\n'
p627
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p628
S'.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040a6\n.text:00000000004040a8\n.text:00000000004040aa\n.text:00000000004040ac\n.text:00000000004040af\n.text:00000000004040b2\n'
p629
tp630
sS'xalloc_die'
p631
(S'\n__stdcall xalloc_die()\n'
p632
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405e66,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p633
S'PUSH RBX\nMOV EBX,dword ptr [0x00609268]\nXOR EDI,EDI\nMOV ESI,0x40676f\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405e66\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004019a0\nCALL 0x00401660\n'
p634
S'53\n8b 1d 01 45 20 00\n31 ff\nbe 6f 67 40 00\nba 05 00 00 00\ne8 c8 c9 ff ff\n48 89 c1\n31 f6\nba 66 5e 40 00\n31 c0\n89 df\ne8 15 cc ff ff\ne8 d0 c8 ff ff\n'
p635
S'.text:0000000000404d60\n.text:0000000000404d61\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6e\n.text:0000000000404d73\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d86\n.text:0000000000404d8b\n'
p636
tp637
sS'__sprintf_chk'
p638
(S'\n__stdcall __sprintf_chk()\n'
p639
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_00609248)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00609248]\n'
p641
S'ff 25 d2 77 20 00\n'
p642
S'.plt:0000000000401a70\n'
p643
tp644
sS'c_isspace'
p645
(S'\n__stdcall c_isspace()\n'
p646
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p647
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00405175\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p648
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p649
S'.text:0000000000405160\n.text:0000000000405163\n.text:0000000000405166\n.text:0000000000405168\n.text:000000000040516d\n.text:000000000040516f\n.text:0000000000405171\n.text:0000000000405174\n.text:0000000000405175\n.text:0000000000405177\n'
p650
tp651
sS'timetostr'
p652
(S'\n__stdcall timetostr()\n'
p653
V\u000achar * timetostr(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  intmax_t i;\u000a  \u000a  pcVar1 = imaxtostr(i,buf);\u000a  return pcVar1;\u000a}\u000a\u000a
p654
S'MOV ESI,0x609350\nJMP 0x00402cf0\n'
p655
S'be 50 93 60 00\ne9 26 05 00 00\n'
p656
S'.text:00000000004027c0\n.text:00000000004027c5\n'
p657
tp658
sS'freeaddrinfo'
p659
(S'\n__stdcall freeaddrinfo(addrinfo * __ai)\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid freeaddrinfo(addrinfo *__ai)\u000a\u000a{\u000a  (*(code *)PTR_freeaddrinfo_00609240)();\u000a  return;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x00609240]\n'
p662
S'ff 25 da 77 20 00\n'
p663
S'.plt:0000000000401a60\n'
p664
tp665
sS'create_fullname'
p666
(S'\n__stdcall create_fullname(char * gecos_name, char * user_name)\n'
p667
V\u000achar * create_fullname(char *gecos_name,char *user_name)\u000a\u000a{\u000a  char cVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  size_t sVar4;\u000a  size_t sVar5;\u000a  char *pcVar6;\u000a  ushort **ppuVar7;\u000a  __int32_t **pp_Var8;\u000a  char *pcVar9;\u000a  char *pcVar10;\u000a  size_t n;\u000a  \u000a  sVar4 = strlen(gecos_name);\u000a  n = sVar4 + 1;\u000a  sVar5 = count_ampersands(gecos_name);\u000a  if ((sVar5 != 0) &&\u000a     ((sVar4 = strlen(user_name), SUB168(ZEXT816(sVar4) * ZEXT816(sVar5) >> 0x40,0) != 0 ||\u000a      (n = n + (sVar4 * sVar5 - sVar5), n < sVar4 * sVar5)))) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  pcVar6 = (char *)xmalloc(n);\u000a  pcVar10 = pcVar6;\u000a  while( true ) {\u000a    while (cVar1 = *gecos_name, cVar1 == '&') {\u000a      ppuVar7 = __ctype_b_loc();\u000a      puVar2 = *ppuVar7;\u000a      bVar3 = to_uchar();\u000a      pcVar9 = user_name;\u000a      if ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 2) != 0) {\u000a        pp_Var8 = __ctype_toupper_loc();\u000a        *pcVar10 = *(char *)(*pp_Var8 + (ulong)bVar3);\u000a        pcVar10 = pcVar10 + 1;\u000a        pcVar9 = user_name + 1;\u000a      }\u000a      cVar1 = *pcVar9;\u000a      while (cVar1 != 0) {\u000a        pcVar9 = pcVar9 + 1;\u000a        *pcVar10 = cVar1;\u000a        pcVar10 = pcVar10 + 1;\u000a        cVar1 = *pcVar9;\u000a      }\u000a      gecos_name = gecos_name + 1;\u000a    }\u000a    if (cVar1 == 0) break;\u000a    *pcVar10 = cVar1;\u000a    pcVar10 = pcVar10 + 1;\u000a    gecos_name = gecos_name + 1;\u000a  }\u000a  *pcVar10 = 0;\u000a  return pcVar6;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R13,RDI\nCALL 0x00401760\nMOV R15,RAX\nINC R15\nMOV RDI,R13\nCALL 0x00402780\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00402586\nMOV RDI,R14\nCALL 0x00401760\nMOV RCX,RAX\nMUL R12\nJO 0x0040263a\nIMUL RCX,R12\nMOV RAX,RCX\nSUB RAX,R12\nADD R15,RAX\nCMP R15,RCX\nJC 0x0040263a\nMOV RDI,R15\nCALL 0x00404bd0\nLEA R12,[R14 + 0x1]\nMOV qword ptr [RSP],RAX\nMOV RBX,RAX\nJMP 0x004025a3\nINC R13\nMOV AL,byte ptr [R13]\nCMP AL,0x26\nJZ 0x004025c0\nTEST AL,AL\nJZ 0x00402624\nMOV byte ptr [RBX],AL\nINC RBX\nINC R13\nJMP 0x004025a3\nCALL 0x00401a50\nMOV R15,qword ptr [RAX]\nMOVSX EDI,byte ptr [R14]\nCALL 0x004027b0\nMOVZX EBP,AL\nTEST byte ptr [R15 + RBP*0x2 + 0x1],0x2\nJNZ 0x004025f0\nMOV RAX,R14\nJMP 0x00402603\nCALL 0x00401610\nMOV RAX,qword ptr [RAX]\nMOV AL,byte ptr [RAX + RBP*0x4]\nMOV byte ptr [RBX],AL\nINC RBX\nMOV RAX,R12\nMOV CL,byte ptr [RAX]\nTEST CL,CL\nJZ 0x004025a0\nINC RAX\nNOP dword ptr [RAX]\nMOV byte ptr [RBX],CL\nINC RBX\nMOVZX ECX,byte ptr [RAX]\nINC RAX\nTEST CL,CL\nJNZ 0x00402610\nJMP 0x004025a0\nMOV byte ptr [RBX],0x0\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00404d60\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n49 89 fd\ne8 1a f2 ff ff\n49 89 c7\n49 ff c7\n4c 89 ef\ne8 2c 02 00 00\n49 89 c4\n4d 85 e4\n74 2a\n4c 89 f7\ne8 fc f1 ff ff\n48 89 c1\n49 f7 e4\n0f 80 ca 00 00 00\n49 0f af cc\n48 89 c8\n4c 29 e0\n49 01 c7\n49 39 cf\n0f 82 b4 00 00 00\n4c 89 ff\ne8 42 26 00 00\n4d 8d 66 01\n48 89 04 24\n48 89 c3\neb 08\n49 ff c5\n41 8a 45 00\n3c 26\n74 15\n84 c0\n74 75\n88 03\n48 ff c3\n49 ff c5\neb ea\ne8 8b f4 ff ff\n4c 8b 38\n41 0f be 3e\ne8 df 01 00 00\n0f b6 e8\n41 f6 44 6f 01 02\n75 14\n4c 89 f0\neb 22\ne8 1b f0 ff ff\n48 8b 00\n8a 04 a8\n88 03\n48 ff c3\n4c 89 e0\n8a 08\n84 c9\n74 97\n48 ff c0\n0f 1f 40 00\n88 0b\n48 ff c3\n0f b6 08\n48 ff c0\n84 c9\n75 f1\ne9 7c ff ff ff\nc6 03 00\n48 8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 21 27 00 00\n'
p670
S'.text:0000000000402530\n.text:0000000000402531\n.text:0000000000402533\n.text:0000000000402535\n.text:0000000000402537\n.text:0000000000402539\n.text:000000000040253a\n.text:000000000040253b\n.text:000000000040253e\n.text:0000000000402541\n.text:0000000000402546\n.text:0000000000402549\n.text:000000000040254c\n.text:000000000040254f\n.text:0000000000402554\n.text:0000000000402557\n.text:000000000040255a\n.text:000000000040255c\n.text:000000000040255f\n.text:0000000000402564\n.text:0000000000402567\n.text:000000000040256a\n.text:0000000000402570\n.text:0000000000402574\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257d\n.text:0000000000402580\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258e\n.text:0000000000402592\n.text:0000000000402596\n.text:0000000000402599\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a7\n.text:00000000004025a9\n.text:00000000004025ab\n.text:00000000004025ad\n.text:00000000004025af\n.text:00000000004025b1\n.text:00000000004025b4\n.text:00000000004025b7\n.text:00000000004025c0\n.text:00000000004025c5\n.text:00000000004025c8\n.text:00000000004025cc\n.text:00000000004025d1\n.text:00000000004025d4\n.text:00000000004025da\n.text:00000000004025dc\n.text:00000000004025df\n.text:00000000004025f0\n.text:00000000004025f5\n.text:00000000004025f8\n.text:00000000004025fb\n.text:00000000004025fd\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402605\n.text:0000000000402607\n.text:0000000000402609\n.text:000000000040260c\n.text:0000000000402610\n.text:0000000000402612\n.text:0000000000402615\n.text:0000000000402618\n.text:000000000040261b\n.text:000000000040261d\n.text:000000000040261f\n.text:0000000000402624\n.text:0000000000402627\n.text:000000000040262b\n.text:000000000040262f\n.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402634\n.text:0000000000402636\n.text:0000000000402638\n.text:0000000000402639\n.text:000000000040263a\n'
p671
tp672
sS'quotearg_n_custom'
p673
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p674
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV R8,-0x1\nJMP 0x004041c0\n'
p676
S'49 c7 c0 ff ff ff ff\neb 07\n'
p677
S'.text:00000000004041b0\n.text:00000000004041b7\n'
p678
tp679
sS'open'
p680
(S'\n__stdcall open(char * __file, int __oflag)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x006091e8]\n'
p683
S'ff 25 32 78 20 00\n'
p684
S'.plt:00000000004019b0\n'
p685
tp686
sS'stzncpy'
p687
(S'\n__stdcall stzncpy(char * dest, char * src)\n'
p688
V\u000achar * stzncpy(char *dest,char *src)\u000a\u000a{\u000a  byte bVar1;\u000a  char *in_RAX;\u000a  long in_RDX;\u000a  byte *pbVar2;\u000a  \u000a  if (0 < in_RDX) {\u000a    pbVar2 = (byte *)(src + in_RDX);\u000a    do {\u000a      bVar1 = *src;\u000a      in_RAX = (char *)(ulong)bVar1;\u000a      if (bVar1 == 0) break;\u000a      src = (char *)((byte *)src + 1);\u000a      *dest = bVar1;\u000a      dest = (char *)((byte *)dest + 1);\u000a    } while (src < pbVar2);\u000a  }\u000a  *dest = 0;\u000a  return in_RAX;\u000a}\u000a\u000a
p689
S'TEST RDX,RDX\nJLE 0x00402524\nADD RDX,RSI\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RSI]\nTEST AL,AL\nJZ 0x00402524\nINC RSI\nMOV byte ptr [RDI],AL\nINC RDI\nCMP RSI,RDX\nJC 0x00402510\nMOV byte ptr [RDI],0x0\nRET\n'
p690
S'48 85 d2\n7e 1f\n48 01 f2\n0f 1f 84 00 00 00 00 00\n0f b6 06\n84 c0\n74 0d\n48 ff c6\n88 07\n48 ff c7\n48 39 d6\n72 ec\nc6 07 00\nc3\n'
p691
S'.text:0000000000402500\n.text:0000000000402503\n.text:0000000000402505\n.text:0000000000402508\n.text:0000000000402510\n.text:0000000000402513\n.text:0000000000402515\n.text:0000000000402517\n.text:000000000040251a\n.text:000000000040251c\n.text:000000000040251f\n.text:0000000000402522\n.text:0000000000402524\n.text:0000000000402527\n'
p692
tp693
sS'quotearg_n_custom_mem'
p694
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p695
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p696
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609400]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006093f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402f20\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403db0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p697
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 27 52 20 00\n48 89 44 24 30\n0f 10 05 0b 52 20 00\n0f 29 44 24 20\n0f 10 05 ef 51 20 00\n0f 29 44 24 10\n0f 10 05 d3 51 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p698
S'.text:00000000004041c0\n.text:00000000004041c1\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041c6\n.text:00000000004041ca\n.text:00000000004041cd\n.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d9\n.text:00000000004041de\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041f1\n.text:00000000004041f6\n.text:00000000004041fd\n.text:0000000000404201\n.text:0000000000404204\n.text:0000000000404207\n.text:000000000040420c\n.text:000000000040420e\n.text:0000000000404211\n.text:0000000000404214\n.text:0000000000404217\n.text:000000000040421c\n.text:0000000000404220\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404226\n'
p699
tp700
sS'localtime'
p701
(S'\n__stdcall localtime(time_t * __timer)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_00609038)();\u000a  return ptVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00609038]\n'
p704
S'ff 25 e2 79 20 00\n'
p705
S'.plt:0000000000401650\n'
p706
tp707
sS'utmpxname'
p708
(S'\n__stdcall utmpxname(char * __file)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint utmpxname(char *__file)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_utmpxname_00609020)();\u000a  return iVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x00609020]\n'
p711
S'ff 25 fa 79 20 00\n'
p712
S'.plt:0000000000401620\n'
p713
tp714
sS'_init'
p715
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p716
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004015f2\nCALL RAX\nADD RSP,0x8\nRET\n'
p718
S'48 83 ec 08\n48 8b 05 0d 7a 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p719
S'.init:00000000004015e0\n.init:00000000004015e4\n.init:00000000004015eb\n.init:00000000004015ee\n.init:00000000004015f0\n.init:00000000004015f2\n.init:00000000004015f6\n'
p720
tp721
sS'__freading'
p722
(S'\n__stdcall __freading()\n'
p723
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_006091a0)();\u000a  return;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x006091a0]\n'
p725
S'ff 25 7a 78 20 00\n'
p726
S'.plt:0000000000401920\n'
p727
tp728
sS'set_quoting_flags'
p729
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p730
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'TEST RDI,RDI\nMOV ECX,0x6093d0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p732
S'48 85 ff\nb9 d0 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p733
S'.text:0000000000402f00\n.text:0000000000402f03\n.text:0000000000402f08\n.text:0000000000402f0c\n.text:0000000000402f0f\n.text:0000000000402f12\n'
p734
tp735
sS'fputs_unlocked'
p736
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00609120]\n'
p739
S'ff 25 fa 78 20 00\n'
p740
S'.plt:0000000000401820\n'
p741
tp742
sS'main'
p743
(S'\n__stdcall main(char * * argv)\n'
p744
V\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  int extraout_EAX;\u000a  undefined8 uVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  uint uVar5;\u000a  char **in_RSI;\u000a  ulong uVar6;\u000a  STRUCT_UTMP *pSStack64;\u000a  size_t sStack56;\u000a  ulong uStack48;\u000a  char *pcStack40;\u000a  \u000a  uStack48 = (ulong)argv & 0xffffffff;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x405b60,"/usr/local/share/locale");\u000a  textdomain(0x405b60);\u000a  atexit(close_stdout);\u000a  while( true ) {\u000a    iVar1 = getopt_long();\u000a    if (iVar1 < 0x62) break;\u000a    switch(iVar1) {\u000a    case 0x62:\u000a      include_home_and_shell = 1;\u000a      break;\u000a    default:\u000a      goto switchD_00401e68_caseD_63;\u000a    case 0x66:\u000a      include_heading = 1;\u000a      break;\u000a    case 0x68:\u000a      include_project = 1;\u000a      break;\u000a    case 0x69:\u000a      include_fullname = 1;\u000a      include_where = 1;\u000a      break;\u000a    case 0x6c:\u000a      do_short_format = 1;\u000a      break;\u000a    case 0x70:\u000a      include_plan = 1;\u000a      break;\u000a    case 0x71:\u000a      include_fullname = 1;\u000a      include_where = 1;\u000a      include_idle = 1;\u000a      break;\u000a    case 0x73:\u000a      do_short_format = 0;\u000a      break;\u000a    case 0x77:\u000a      include_fullname = 1;\u000a    }\u000a  }\u000a  if (iVar1 == -1) {\u000a    uVar5 = (int)uStack48 - optind;\u000a    uStack48 = (ulong)uVar5;\u000a    if ((do_short_format != 1) || (uVar5 != 0)) {\u000a      if (do_short_format == 0) {\u000a        short_pinky((char **)(ulong)uVar5,in_RSI + (long)optind);\u000a      }\u000a      else {\u000a        long_pinky((char **)(ulong)uVar5);\u000a      }\u000a      return 0;\u000a    }\u000aLAB_00401f6e:\u000a    uVar2 = dcgettext(0,"no username specified; at least one must be specified when using -l",5);\u000a    error(0,0,uVar2,uVar2);\u000a    uVar6 = 1;\u000a    usage();\u000a    pSStack64 = (STRUCT_UTMP *)0x0;\u000a    iVar1 = read_utmp("/var/run/utmp",&sStack56,&pSStack64);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar5 = *puVar3;\u000a      pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a      error(1,(ulong)uVar5,0x405e66,pcVar4);\u000a    }\u000a    scan_entries(sStack56,pSStack64,(char **)(uVar6 & 0xffffffff));\u000a    return extraout_EAX;\u000a  }\u000a  if (iVar1 != -0x83) {\u000a    if (iVar1 != -0x82) {\u000aswitchD_00401e68_caseD_63:\u000a      usage(1);\u000a      goto LAB_00401f6e;\u000a    }\u000a    usage(0);\u000a  }\u000a  pcStack40 = "Kaveh Ghazi";\u000a  uStack48 = 0x401f59;\u000a  version_etc(stdout,"pinky","GNU coreutils",Version,"Joseph Arceneaux","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p745
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV EBX,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00402db0\nMOV EDI,0x6\nMOV ESI,0x406541\nCALL 0x00401960\nMOV EDI,0x405b60\nMOV ESI,0x405b3a\nCALL 0x00401720\nMOV EDI,0x405b60\nCALL 0x004016f0\nMOV EDI,0x402bf0\nCALL 0x004055f0\nJMP 0x00401e40\nMOV byte ptr [0x00609317],0x1\nNOP dword ptr [RAX]\nMOV EDX,0x405b52\nMOV ECX,0x405700\nXOR R8D,R8D\nMOV EDI,EBX\nMOV RSI,R14\nCALL 0x00401770\nCMP EAX,0x61\nJLE 0x00401ed2\nADD EAX,-0x62\nCMP EAX,0x15\nJA 0x00401f64\nJMP qword ptr [0x405650 + RAX*0x8]\nMOV byte ptr [0x00609311],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609315],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609312],0x1\nMOV byte ptr [0x00609313],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609310],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609316],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609312],0x1\nMOV byte ptr [0x00609313],0x1\nMOV byte ptr [0x00609314],0x1\nJMP 0x00401e40\nMOV byte ptr [0x00609310],0x0\nJMP 0x00401e40\nMOV byte ptr [0x00609312],0x1\nJMP 0x00401e40\nCMP EAX,-0x1\nJNZ 0x00401f0f\nMOVSXD RAX,dword ptr [0x006092f0]\nSUB EBX,EAX\nMOV CL,byte ptr [0x00609310]\nCMP CL,0x1\nJNZ 0x00401eef\nTEST EBX,EBX\nJZ 0x00401f6e\nLEA RSI,[R14 + RAX*0x8]\nMOV EDI,EBX\nTEST CL,CL\nJZ 0x00401f00\nCALL 0x00402020\nJMP 0x00401f05\nCALL 0x00401fa0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401f24\nCMP EAX,0xffffff7e\nJNZ 0x00401f64\nXOR EDI,EDI\nCALL 0x00401b80\nMOV RDI,qword ptr [0x006092e8]\nMOV RCX,qword ptr [0x00609260]\nMOV ESI,0x405b34\nMOV EDX,0x405b5c\nMOV R8D,0x405b6a\nMOV R9D,0x405b7b\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x405b8b\nCALL 0x00404aa0\nADD RSP,0x10\nXOR EDI,EDI\nCALL 0x004019f0\nMOV EDI,0x1\nCALL 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x405b97\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004019a0\nMOV EDI,0x1\nCALL 0x00401b80\nNOP word ptr [RAX + RAX*0x1]\n'
p746
S'41 56\n53\n50\n49 89 f6\n89 fb\n49 8b 3e\ne8 af 0f 00 00\nbf 06 00 00 00\nbe 41 65 40 00\ne8 50 fb ff ff\nbf 60 5b 40 00\nbe 3a 5b 40 00\ne8 01 f9 ff ff\nbf 60 5b 40 00\ne8 c7 f8 ff ff\nbf f0 2b 40 00\ne8 bd 37 00 00\neb 0b\nc6 05 db 74 20 00 01\n0f 1f 40 00\nba 52 5b 40 00\nb9 00 57 40 00\n45 31 c0\n89 df\n4c 89 f6\ne8 19 f9 ff ff\n83 f8 61\n7e 76\n83 c0 9e\n83 f8 15\n0f 87 fc 00 00 00\nff 24 c5 50 56 40 00\nc6 05 9b 74 20 00 01\neb c8\nc6 05 96 74 20 00 01\neb bf\nc6 05 8a 74 20 00 01\nc6 05 84 74 20 00 01\neb af\nc6 05 78 74 20 00 01\neb a6\nc6 05 75 74 20 00 01\neb 9d\nc6 05 68 74 20 00 01\nc6 05 62 74 20 00 01\nc6 05 5c 74 20 00 01\neb 86\nc6 05 4f 74 20 00 00\ne9 7a ff ff ff\nc6 05 45 74 20 00 01\ne9 6e ff ff ff\n83 f8 ff\n75 38\n48 63 05 12 74 20 00\n29 c3\n8a 0d 2a 74 20 00\n80 f9 01\n75 04\n85 db\n74 7f\n49 8d 34 c6\n89 df\n84 c9\n74 07\ne8 22 01 00 00\neb 05\ne8 9b 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 47\n31 ff\ne8 5c fc ff ff\n48 8b 3d bd 73 20 00\n48 8b 0d 2e 73 20 00\nbe 34 5b 40 00\nba 5c 5b 40 00\n41 b8 6a 5b 40 00\n41 b9 7b 5b 40 00\nb8 00 00 00 00\n6a 00\n68 8b 5b 40 00\ne8 47 2b 00 00\n48 83 c4 10\n31 ff\ne8 8c fa ff ff\nbf 01 00 00 00\ne8 12 fc ff ff\n31 ff\nbe 97 5b 40 00\nba 05 00 00 00\ne8 c1 f7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 10 fa ff ff\nbf 01 00 00 00\ne8 e6 fb ff ff\n66 0f 1f 44 00 00\n'
p747
S'.text:0000000000401df0\n.text:0000000000401df2\n.text:0000000000401df3\n.text:0000000000401df4\n.text:0000000000401df7\n.text:0000000000401df9\n.text:0000000000401dfc\n.text:0000000000401e01\n.text:0000000000401e06\n.text:0000000000401e0b\n.text:0000000000401e10\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e24\n.text:0000000000401e29\n.text:0000000000401e2e\n.text:0000000000401e33\n.text:0000000000401e35\n.text:0000000000401e3c\n.text:0000000000401e40\n.text:0000000000401e45\n.text:0000000000401e4a\n.text:0000000000401e4d\n.text:0000000000401e4f\n.text:0000000000401e52\n.text:0000000000401e57\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e5f\n.text:0000000000401e62\n.text:0000000000401e68\n.text:0000000000401e6f\n.text:0000000000401e76\n.text:0000000000401e78\n.text:0000000000401e7f\n.text:0000000000401e81\n.text:0000000000401e88\n.text:0000000000401e8f\n.text:0000000000401e91\n.text:0000000000401e98\n.text:0000000000401e9a\n.text:0000000000401ea1\n.text:0000000000401ea3\n.text:0000000000401eaa\n.text:0000000000401eb1\n.text:0000000000401eb8\n.text:0000000000401eba\n.text:0000000000401ec1\n.text:0000000000401ec6\n.text:0000000000401ecd\n.text:0000000000401ed2\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401ede\n.text:0000000000401ee0\n.text:0000000000401ee6\n.text:0000000000401ee9\n.text:0000000000401eeb\n.text:0000000000401eed\n.text:0000000000401eef\n.text:0000000000401ef3\n.text:0000000000401ef5\n.text:0000000000401ef7\n.text:0000000000401ef9\n.text:0000000000401efe\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f07\n.text:0000000000401f0b\n.text:0000000000401f0c\n.text:0000000000401f0e\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f16\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f1f\n.text:0000000000401f24\n.text:0000000000401f2b\n.text:0000000000401f32\n.text:0000000000401f37\n.text:0000000000401f3c\n.text:0000000000401f42\n.text:0000000000401f48\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f54\n.text:0000000000401f59\n.text:0000000000401f5d\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f69\n.text:0000000000401f6e\n.text:0000000000401f70\n.text:0000000000401f75\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f82\n.text:0000000000401f84\n.text:0000000000401f86\n.text:0000000000401f88\n.text:0000000000401f8b\n.text:0000000000401f90\n.text:0000000000401f95\n.text:0000000000401f9a\n'
p748
tp749
sS'realloc'
p750
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_006091b0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x006091b0]\n'
p753
S'ff 25 6a 78 20 00\n'
p754
S'.plt:0000000000401940\n'
p755
tp756
sS'xcharalloc'
p757
(S'\n__stdcall xcharalloc(size_t n)\n'
p758
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p759
S'JMP 0x00404bd0\n'
p760
S'e9 2b ff ff ff\n'
p761
S'.text:0000000000404ca0\n'
p762
tp763
sS'c_isupper'
p764
(S'\n__stdcall c_isupper()\n'
p765
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p766
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p767
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p768
S'.text:0000000000405180\n.text:0000000000405183\n.text:0000000000405186\n.text:0000000000405189\n'
p769
tp770
sS'__fprintf_chk'
p771
(S'\n__stdcall __fprintf_chk()\n'
p772
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00609218)();\u000a  return;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x00609218]\n'
p774
S'ff 25 02 78 20 00\n'
p775
S'.plt:0000000000401a10\n'
p776
tp777
sS'get_charset_aliases'
p778
(S'\n__stdcall get_charset_aliases()\n'
p779
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004054e4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004054e4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004054e4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004054e4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004054e4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004054e4_caseD_9;\u000a      case -1:\u000a        goto switchD_004054e4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040553d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405543:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004054e4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405543;\u000a  }\u000a  goto LAB_0040553d;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609510]\nTEST R15,R15\nJNZ 0x00405552\nMOV EDI,0x406bac\nCALL 0x00401630\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405308\nCMP byte ptr [RBX],0x0\nJNZ 0x0040530d\nMOV EBX,0x406bbc\nMOV RDI,RBX\nCALL 0x00401760\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405327\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405329\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004018e0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040537d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401880\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405388\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004053a5\nMOV R15D,0x406541\nJMP 0x0040554b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004019b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040553d\nMOV ESI,0x405e60\nMOV EDI,EBP\nCALL 0x00401950\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405504\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004054d0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004016b0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004016b0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004054d0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401910\nMOV ESI,0x406bcb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004017e0\nCMP EAX,0x2\nJL 0x00405524\nMOV RDI,R12\nCALL 0x00401760\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401760\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004054ad\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401940\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004053f4\nJMP 0x0040550d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004018e0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004053f4\nJMP 0x0040550d\nMOV RDI,RBX\nCALL 0x004016d0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405437\nJMP qword ptr [0x406a70 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004016d0\nCMP EAX,-0x1\nJZ 0x00405524\nCMP EAX,0xa\nJNZ 0x004054f0\nJMP 0x004054d0\nMOV EDI,EBP\nCALL 0x004017f0\nJMP 0x0040553d\nMOV RDI,R15\nCALL 0x00401640\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404de0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040553d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405543\nMOV R15D,0x406541\nMOV RDI,R13\nCALL 0x00401640\nMOV qword ptr [0x00609510],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 28 42 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf ac 6b 40 00\ne8 35 c3 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb bc 6b 40 00\n48 89 df\ne8 4b c4 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 a9 c5 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 c5 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 41 65 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 fc c5 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 60 5e 40 00\n89 ef\ne8 86 c5 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 9b c2 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 8b c2 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 cf c4 ff ff\nbe cb 6b 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 8a c3 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 f9 c2 ff ff\n49 89 c4\n48 89 ef\ne8 ee c2 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 a6 c4 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 25 c4 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 f8 c1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 70 6a 40 00\n48 89 df\ne8 d8 c1 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 e5 c2 ff ff\neb 30\n4c 89 ff\ne8 2b c1 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 b4 f8 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 41 65 40 00\n4c 89 ef\ne8 f5 c0 ff ff\n4c 89 3d be 3f 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p782
S'.text:00000000004052d0\n.text:00000000004052d1\n.text:00000000004052d3\n.text:00000000004052d5\n.text:00000000004052d7\n.text:00000000004052d9\n.text:00000000004052da\n.text:00000000004052e1\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052f1\n.text:00000000004052f6\n.text:00000000004052fb\n.text:00000000004052fe\n.text:0000000000405301\n.text:0000000000405303\n.text:0000000000405306\n.text:0000000000405308\n.text:000000000040530d\n.text:0000000000405310\n.text:0000000000405315\n.text:0000000000405318\n.text:000000000040531b\n.text:000000000040531d\n.text:0000000000405322\n.text:0000000000405325\n.text:0000000000405327\n.text:0000000000405329\n.text:000000000040532d\n.text:0000000000405332\n.text:0000000000405337\n.text:000000000040533a\n.text:000000000040533d\n.text:000000000040533f\n.text:0000000000405342\n.text:0000000000405345\n.text:0000000000405348\n.text:000000000040534d\n.text:0000000000405350\n.text:0000000000405353\n.text:0000000000405356\n.text:0000000000405358\n.text:000000000040535e\n.text:0000000000405368\n.text:000000000040536d\n.text:0000000000405377\n.text:000000000040537b\n.text:000000000040537d\n.text:0000000000405383\n.text:0000000000405388\n.text:0000000000405392\n.text:0000000000405397\n.text:00000000004053a1\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053ac\n.text:00000000004053af\n.text:00000000004053b4\n.text:00000000004053b6\n.text:00000000004053b8\n.text:00000000004053be\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053ca\n.text:00000000004053cd\n.text:00000000004053d0\n.text:00000000004053d6\n.text:00000000004053db\n.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e7\n.text:00000000004053ea\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f9\n.text:00000000004053fc\n.text:00000000004053ff\n.text:0000000000405402\n.text:0000000000405405\n.text:0000000000405408\n.text:000000000040540d\n.text:0000000000405410\n.text:0000000000405415\n.text:0000000000405418\n.text:000000000040541d\n.text:0000000000405420\n.text:0000000000405425\n.text:000000000040542a\n.text:000000000040542d\n.text:0000000000405432\n.text:0000000000405437\n.text:0000000000405439\n.text:000000000040543c\n.text:0000000000405441\n.text:0000000000405446\n.text:0000000000405448\n.text:000000000040544b\n.text:000000000040544e\n.text:0000000000405451\n.text:0000000000405456\n.text:0000000000405459\n.text:000000000040545f\n.text:0000000000405462\n.text:0000000000405467\n.text:000000000040546a\n.text:000000000040546d\n.text:0000000000405472\n.text:0000000000405475\n.text:000000000040547a\n.text:000000000040547f\n.text:0000000000405482\n.text:0000000000405484\n.text:0000000000405488\n.text:000000000040548d\n.text:0000000000405492\n.text:0000000000405495\n.text:000000000040549a\n.text:000000000040549d\n.text:00000000004054a2\n.text:00000000004054a5\n.text:00000000004054ab\n.text:00000000004054ad\n.text:00000000004054b2\n.text:00000000004054b6\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c1\n.text:00000000004054c7\n.text:00000000004054d0\n.text:00000000004054d3\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e4\n.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f8\n.text:00000000004054fb\n.text:00000000004054fd\n.text:0000000000405500\n.text:0000000000405502\n.text:0000000000405504\n.text:0000000000405506\n.text:000000000040550b\n.text:000000000040550d\n.text:0000000000405510\n.text:0000000000405515\n.text:0000000000405517\n.text:000000000040551c\n.text:000000000040551f\n.text:0000000000405524\n.text:0000000000405527\n.text:000000000040552c\n.text:0000000000405531\n.text:0000000000405534\n.text:0000000000405536\n.text:000000000040553b\n.text:000000000040553d\n.text:0000000000405543\n.text:0000000000405546\n.text:000000000040554b\n.text:0000000000405552\n.text:0000000000405555\n.text:000000000040555c\n.text:000000000040555d\n.text:000000000040555f\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405565\n.text:0000000000405566\n'
p783
tp784
sS'nl_langinfo'
p785
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609190)();\u000a  return pcVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00609190]\n'
p788
S'ff 25 8a 78 20 00\n'
p789
S'.plt:0000000000401900\n'
p790
tp791
sS'c_isalnum'
p792
(S'\n__stdcall c_isalnum()\n'
p793
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p794
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040509b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040509b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040509a\nXOR EAX,EAX\nRET\n'
p795
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p796
S'.text:0000000000405080\n.text:0000000000405082\n.text:0000000000405085\n.text:0000000000405088\n.text:000000000040508a\n.text:0000000000405094\n.text:0000000000405098\n.text:000000000040509a\n.text:000000000040509b\n.text:000000000040509e\n.text:00000000004050a1\n.text:00000000004050a3\n.text:00000000004050a5\n'
p797
tp798
sS'x2realloc'
p799
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p800
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p801
S'MOV EDX,0x1\nJMP 0x00404c40\n'
p802
S'ba 01 00 00 00\neb 89\n'
p803
S'.text:0000000000404cb0\n.text:0000000000404cb5\n'
p804
tp805
sS'strlen'
p806
(S'\n__stdcall strlen(char * __s)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x006090c0]\n'
p809
S'ff 25 5a 79 20 00\n'
p810
S'.plt:0000000000401760\n'
p811
tp812
sS'memcmp'
p813
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x00609118]\n'
p816
S'ff 25 02 79 20 00\n'
p817
S'.plt:0000000000401810\n'
p818
tp819
sS'quotearg_n_style_mem'
p820
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p821
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403fe0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403db0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:0000000000404040\n.text:0000000000404041\n.text:0000000000404043\n.text:0000000000404045\n.text:0000000000404046\n.text:000000000040404a\n.text:000000000040404d\n.text:0000000000404050\n.text:0000000000404052\n.text:0000000000404055\n.text:0000000000404058\n.text:000000000040405d\n.text:000000000040405f\n.text:0000000000404062\n.text:0000000000404065\n.text:0000000000404068\n.text:000000000040406d\n.text:0000000000404071\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404076\n.text:0000000000404077\n'
p825
tp826
sS'_exit'
p827
(S'\n__stdcall _exit(int __status)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609060)();\u000a  return;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x00609060]\n'
p830
S'ff 25 ba 79 20 00\n'
p831
S'.plt:00000000004016a0\n'
p832
tp833
sS'__errno_location'
p834
(S'\n__stdcall __errno_location()\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609048)();\u000a  return piVar1;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x00609048]\n'
p837
S'ff 25 d2 79 20 00\n'
p838
S'.plt:0000000000401670\n'
p839
tp840
sS'getutxent'
p841
(S'\n__stdcall getutxent()\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000autmpx * getutxent(void)\u000a\u000a{\u000a  utmpx *puVar1;\u000a  \u000a  puVar1 = (utmpx *)(*(code *)PTR_getutxent_006091d8)();\u000a  return puVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x006091d8]\n'
p844
S'ff 25 42 78 20 00\n'
p845
S'.plt:0000000000401990\n'
p846
tp847
sS'x2nrealloc'
p848
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p849
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p850
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404c6c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404c99\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404c8a\nTEST RCX,RCX\nJNZ 0x00404c8a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404c10\nPUSH RAX\nCALL 0x00404d60\n'
p851
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p852
S'.text:0000000000404c40\n.text:0000000000404c43\n.text:0000000000404c46\n.text:0000000000404c49\n.text:0000000000404c4b\n.text:0000000000404c55\n.text:0000000000404c57\n.text:0000000000404c5a\n.text:0000000000404c5d\n.text:0000000000404c5f\n.text:0000000000404c62\n.text:0000000000404c65\n.text:0000000000404c6a\n.text:0000000000404c6c\n.text:0000000000404c6f\n.text:0000000000404c71\n.text:0000000000404c76\n.text:0000000000404c78\n.text:0000000000404c7b\n.text:0000000000404c7d\n.text:0000000000404c84\n.text:0000000000404c87\n.text:0000000000404c8a\n.text:0000000000404c8d\n.text:0000000000404c91\n.text:0000000000404c94\n.text:0000000000404c99\n.text:0000000000404c9a\n'
p853
tp854
sS'xrealloc'
p855
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p856
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p857
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404c27\nTEST RBX,RBX\nJNZ 0x00404c27\nCALL 0x00401640\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401940\nTEST RBX,RBX\nJZ 0x00404c39\nTEST RAX,RAX\nJZ 0x00404c3b\nPOP RBX\nRET\nCALL 0x00404d60\n'
p858
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d ca ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p859
S'.text:0000000000404c10\n.text:0000000000404c11\n.text:0000000000404c14\n.text:0000000000404c17\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c1e\n.text:0000000000404c23\n.text:0000000000404c25\n.text:0000000000404c26\n.text:0000000000404c27\n.text:0000000000404c2a\n.text:0000000000404c2f\n.text:0000000000404c32\n.text:0000000000404c34\n.text:0000000000404c37\n.text:0000000000404c39\n.text:0000000000404c3a\n.text:0000000000404c3b\n'
p860
tp861
sS'quotearg_n_options'
p862
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p863
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401670\nTEST R12D,R12D\nJS 0x00403f61\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609270]\nCMP dword ptr [0x00609278],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403e7b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609280\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404c10\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609270],R15\nJNZ 0x00403e42\nMOVUPS XMM0,xmmword ptr [0x00609280]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609278]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004017d0\nMOV dword ptr [0x00609278],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402fd0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403edd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403f4b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609410\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403f08\nCALL 0x00401640\nMOV RDI,R15\nCALL 0x00404ca0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402fd0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401660\n'
p865
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 a1 d8 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 86 54 20 00\n44 39 25 87 54 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 80 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 3b 54 20 00\n75 0b\n0f 10 05 42 54 20 00\n41 0f 11 07\n8b 05 30 54 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 6d d9 ff ff\n89 1d 0f 54 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 10 94 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 38 d7 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa d6 ff ff\n'
p866
S'.text:0000000000403db0\n.text:0000000000403db1\n.text:0000000000403db3\n.text:0000000000403db5\n.text:0000000000403db7\n.text:0000000000403db9\n.text:0000000000403dba\n.text:0000000000403dbe\n.text:0000000000403dc1\n.text:0000000000403dc4\n.text:0000000000403dc7\n.text:0000000000403dca\n.text:0000000000403dcf\n.text:0000000000403dd2\n.text:0000000000403dd8\n.text:0000000000403ddd\n.text:0000000000403ddf\n.text:0000000000403de3\n.text:0000000000403dea\n.text:0000000000403df1\n.text:0000000000403df6\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e02\n.text:0000000000403e07\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e18\n.text:0000000000403e1c\n.text:0000000000403e1f\n.text:0000000000403e23\n.text:0000000000403e28\n.text:0000000000403e2b\n.text:0000000000403e2e\n.text:0000000000403e35\n.text:0000000000403e37\n.text:0000000000403e3e\n.text:0000000000403e42\n.text:0000000000403e48\n.text:0000000000403e4b\n.text:0000000000403e4f\n.text:0000000000403e52\n.text:0000000000403e55\n.text:0000000000403e59\n.text:0000000000403e5b\n.text:0000000000403e5e\n.text:0000000000403e63\n.text:0000000000403e69\n.text:0000000000403e6c\n.text:0000000000403e71\n.text:0000000000403e76\n.text:0000000000403e7b\n.text:0000000000403e7e\n.text:0000000000403e82\n.text:0000000000403e86\n.text:0000000000403e8b\n.text:0000000000403e8f\n.text:0000000000403e93\n.text:0000000000403e97\n.text:0000000000403e9b\n.text:0000000000403e9f\n.text:0000000000403ea4\n.text:0000000000403ea7\n.text:0000000000403eaa\n.text:0000000000403ead\n.text:0000000000403eb2\n.text:0000000000403eb5\n.text:0000000000403eb8\n.text:0000000000403ebb\n.text:0000000000403ebc\n.text:0000000000403ec1\n.text:0000000000403ec5\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ecd\n.text:0000000000403ed2\n.text:0000000000403ed6\n.text:0000000000403edb\n.text:0000000000403edd\n.text:0000000000403ee1\n.text:0000000000403ee6\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403ef1\n.text:0000000000403ef6\n.text:0000000000403ef9\n.text:0000000000403efe\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f1b\n.text:0000000000403f1e\n.text:0000000000403f22\n.text:0000000000403f25\n.text:0000000000403f28\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3d\n.text:0000000000403f3e\n.text:0000000000403f43\n.text:0000000000403f47\n.text:0000000000403f4b\n.text:0000000000403f4f\n.text:0000000000403f52\n.text:0000000000403f56\n.text:0000000000403f57\n.text:0000000000403f59\n.text:0000000000403f5b\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f60\n.text:0000000000403f61\n'
p867
tp868
sS'strcmp'
p869
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609138)();\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x00609138]\n'
p872
S'ff 25 e2 78 20 00\n'
p873
S'.plt:0000000000401850\n'
p874
tp875
sS'set_custom_quoting'
p876
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p877
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p878
S'TEST RDI,RDI\nMOV EAX,0x6093d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402f45\nTEST RDX,RDX\nJZ 0x00402f45\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401660\n'
p879
S'48 85 ff\nb8 d0 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 e7 ff ff\n'
p880
S'.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f28\n.text:0000000000402f2c\n.text:0000000000402f32\n.text:0000000000402f35\n.text:0000000000402f37\n.text:0000000000402f3a\n.text:0000000000402f3c\n.text:0000000000402f40\n.text:0000000000402f44\n.text:0000000000402f45\n.text:0000000000402f46\n'
p881
tp882
sS'c_isalpha'
p883
(S'\n__stdcall c_isalpha()\n'
p884
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p885
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004050cb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p886
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p887
S'.text:00000000004050b0\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b8\n.text:00000000004050c2\n.text:00000000004050c4\n.text:00000000004050c7\n.text:00000000004050ca\n.text:00000000004050cb\n.text:00000000004050cd\n'
p888
tp889
sS'idle_string'
p890
(S'\n__stdcall idle_string(time_t when)\n'
p891
V\u000achar * idle_string(time_t when)\u000a\u000a{\u000a  time_t now;\u000a  char buf [22];\u000a  ulong uVar1;\u000a  char *pcVar2;\u000a  ulong uVar3;\u000a  \u000a  if (now == 0) {\u000a    time((time_t *)0x609328);\u000a  }\u000a  uVar1 = now - when;\u000a  if ((long)uVar1 < 0x3c) {\u000a    pcVar2 = "     ";\u000a  }\u000a  else {\u000a    if ((long)uVar1 < 0x15180) {\u000a      uVar3 = (uVar1 >> 4) / 0xe1;\u000a      pcVar2 = &ram0x00609330;\u000a      __sprintf_chk(0x609330,1,0x16,"%02d:%02d",uVar3,(uVar1 + uVar3 * -0xe10) / 0x3c);\u000a    }\u000a    else {\u000a      pcVar2 = (char *)0x609330;\u000a      __sprintf_chk(0x609330,1,0x16,&DAT_00405de9,uVar1 / 0x15180);\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p892
S'PUSH RBX\nMOV RBX,RDI\nCMP qword ptr [0x00609328],0x0\nJNZ 0x00402658\nMOV EDI,0x609328\nCALL 0x004018b0\nMOV RCX,qword ptr [0x00609328]\nSUB RCX,RBX\nCMP RCX,0x3c\nJGE 0x00402672\nMOV EBX,0x405dd9\nJMP 0x00402710\nCMP RCX,0x1517f\nJG 0x004026d9\nMOV RAX,RCX\nSHR RAX,0x4\nMOV RDX,0x91a2b3c4d5e6f81\nMUL RDX\nMOV R8,RDX\nSHR R8,0x3\nIMUL RAX,R8,0xe10\nSUB RCX,RAX\nMOV RDX,-0x7777777777777777\nMOV RAX,RCX\nMUL RDX\nMOV R9,RDX\nSHR R9,0x5\nMOV EBX,0x609330\nMOV EDI,0x609330\nMOV ESI,0x1\nMOV EDX,0x16\nMOV ECX,0x405ddf\nXOR EAX,EAX\nCALL 0x00401a70\nJMP 0x00402710\nMOV RDX,-0x3dd1baf98d76b549\nMOV RAX,RCX\nMUL RDX\nMOV R8,RDX\nSHR R8,0x10\nMOV EBX,0x609330\nMOV EDI,0x609330\nMOV ESI,0x1\nMOV EDX,0x16\nMOV ECX,0x405de9\nXOR EAX,EAX\nCALL 0x00401a70\nMOV RAX,RBX\nPOP RBX\nRET\n'
p893
S'53\n48 89 fb\n48 83 3d dc 6c 20 00 00\n75 0a\nbf 28 93 60 00\ne8 58 f2 ff ff\n48 8b 0d c9 6c 20 00\n48 29 d9\n48 83 f9 3c\n7d 0a\nbb d9 5d 40 00\ne9 9e 00 00 00\n48 81 f9 7f 51 01 00\n7f 5e\n48 89 c8\n48 c1 e8 04\n48 ba 81 6f 5e 4d 3c 2b 1a 09\n48 f7 e2\n49 89 d0\n49 c1 e8 03\n49 69 c0 10 0e 00 00\n48 29 c1\n48 ba 89 88 88 88 88 88 88 88\n48 89 c8\n48 f7 e2\n49 89 d1\n49 c1 e9 05\nbb 30 93 60 00\nbf 30 93 60 00\nbe 01 00 00 00\nba 16 00 00 00\nb9 df 5d 40 00\n31 c0\ne8 99 f3 ff ff\neb 37\n48 ba b7 4a 89 72 06 45 2e c2\n48 89 c8\n48 f7 e2\n49 89 d0\n49 c1 e8 10\nbb 30 93 60 00\nbf 30 93 60 00\nbe 01 00 00 00\nba 16 00 00 00\nb9 e9 5d 40 00\n31 c0\ne8 60 f3 ff ff\n48 89 d8\n5b\nc3\n'
p894
S'.text:0000000000402640\n.text:0000000000402641\n.text:0000000000402644\n.text:000000000040264c\n.text:000000000040264e\n.text:0000000000402653\n.text:0000000000402658\n.text:000000000040265f\n.text:0000000000402662\n.text:0000000000402666\n.text:0000000000402668\n.text:000000000040266d\n.text:0000000000402672\n.text:0000000000402679\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402682\n.text:000000000040268c\n.text:000000000040268f\n.text:0000000000402692\n.text:0000000000402696\n.text:000000000040269d\n.text:00000000004026a0\n.text:00000000004026aa\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b3\n.text:00000000004026b7\n.text:00000000004026bc\n.text:00000000004026c1\n.text:00000000004026c6\n.text:00000000004026cb\n.text:00000000004026d0\n.text:00000000004026d2\n.text:00000000004026d7\n.text:00000000004026d9\n.text:00000000004026e3\n.text:00000000004026e6\n.text:00000000004026e9\n.text:00000000004026ec\n.text:00000000004026f0\n.text:00000000004026f5\n.text:00000000004026fa\n.text:00000000004026ff\n.text:0000000000402704\n.text:0000000000402709\n.text:000000000040270b\n.text:0000000000402710\n.text:0000000000402713\n.text:0000000000402714\n'
p895
tp896
sS'quotearg_custom_mem'
p897
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p898
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004041c0\n'
p900
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p901
S'.text:0000000000404250\n.text:0000000000404253\n.text:0000000000404256\n.text:0000000000404259\n.text:000000000040425c\n.text:000000000040425e\n.text:0000000000404261\n'
p902
tp903
sS'print_entry'
p904
(S'\n__stdcall print_entry(STRUCT_UTMP * utmp_ent)\n'
p905
V\u000avoid print_entry(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  passwd *ppVar3;\u000a  char *__ptr;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  undefined4 *dest;\u000a  char line [38];\u000a  stat stats;\u000a  char name [33];\u000a  undefined4 local_1f8;\u000a  undefined2 local_1f4 [22];\u000a  undefined local_1c8 [24];\u000a  byte local_1b0;\u000a  long local_180;\u000a  char local_138 [264];\u000a  \u000a  dest = &local_1f8;\u000a  if (utmp_ent->ut_line[0] != '/') {\u000a    dest = (undefined4 *)((long)local_1f4 + 1);\u000a    local_1f4[0] = 0x2f;\u000a    local_1f8 = 0x7665642f;\u000a  }\u000a  stzncpy((char *)dest,utmp_ent->ut_line);\u000a  iVar1 = stat((char *)&local_1f8,(stat *)local_1c8);\u000a  if (iVar1 == 0) {\u000a    uVar2 = 0x2a;\u000a    if ((local_1b0 & 0x10) != 0) {\u000a      uVar2 = 0x20;\u000a    }\u000a  }\u000a  else {\u000a    uVar2 = 0x3f;\u000a    local_180 = 0;\u000a  }\u000a  __printf_chk(1,"%-8.*s",0x20,utmp_ent->ut_user);\u000a  if (include_fullname == 0) {\u000a    stzncpy(local_138,utmp_ent->ut_user);\u000a    ppVar3 = getpwnam(local_138);\u000a    if (ppVar3 == (passwd *)0x0) {\u000a      uVar4 = dcgettext(0,"        ???",5);\u000a      __printf_chk(1," %19s",uVar4,uVar4);\u000a    }\u000a    else {\u000a      __ptr = strchr(ppVar3->pw_gecos,0x2c);\u000a      if (__ptr != (char *)0x0) {\u000a        *__ptr = 0;\u000a      }\u000a      __ptr = create_fullname(ppVar3->pw_gecos,ppVar3->pw_name);\u000a      __printf_chk(1," %-19.19s",__ptr);\u000a      free(__ptr);\u000a    }\u000a  }\u000a  __printf_chk(1,&DAT_00405dc2,(ulong)uVar2,0x20,utmp_ent->ut_line);\u000a  if (include_idle == 0) {\u000a    if (local_180 == 0) {\u000a      __ptr = (char *)dcgettext(0,"?????",5);\u000a    }\u000a    else {\u000a      __ptr = idle_string(local_180);\u000a    }\u000a    __printf_chk(1," %-6s",__ptr,__ptr);\u000a  }\u000a  __ptr = time_string(utmp_ent);\u000a  __printf_chk(1,0x405e65,__ptr,__ptr);\u000a  if ((include_where != 0) || (utmp_ent->ut_host[0] == 0)) goto LAB_004024d6;\u000a  stzncpy(local_138,utmp_ent->ut_host);\u000a  __ptr = strchr(local_138,0x3a);\u000a  if (__ptr == (char *)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a    if (local_138[0] != 0) goto LAB_0040247c;\u000aLAB_0040248e:\u000a    __ptr = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar5 = __ptr + 1;\u000a    *__ptr = 0;\u000a    if (local_138[0] == 0) goto LAB_0040248e;\u000aLAB_0040247c:\u000a    __ptr = canon_host(local_138);\u000a  }\u000a  if (__ptr == (char *)0x0) {\u000a    __ptr = local_138;\u000a  }\u000a  if (pcVar5 == (char *)0x0) {\u000a    __printf_chk(1,0x405e65,__ptr);\u000a  }\u000a  else {\u000a    __printf_chk(1," %s:%s",__ptr,pcVar5);\u000a  }\u000a  if (__ptr != local_138) {\u000a    free(__ptr);\u000a  }\u000aLAB_004024d6:\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1c8\nMOV R13,RDI\nLEA R14,[R13 + 0x8]\nCMP byte ptr [R13 + 0x8],0x2f\nJNZ 0x00402284\nMOV RDI,RSP\nJMP 0x00402297\nLEA RDI,[RSP + 0x5]\nMOV word ptr [RSP + 0x4],0x2f\nMOV dword ptr [RSP],0x7665642f\nMOV EDX,0x20\nMOV RSI,R14\nCALL 0x00402500\nMOV RDI,RSP\nLEA RSI,[RSP + 0x30]\nCALL 0x00405620\nTEST EAX,EAX\nJZ 0x004022c0\nMOV R12D,0x3f\nXOR R15D,R15D\nJMP 0x004022d9\nTEST byte ptr [RSP + 0x48],0x10\nMOV EAX,0x20\nMOV R12D,0x2a\nCMOVNZ R12D,EAX\nMOV R15,qword ptr [RSP + 0x78]\nLEA RBP,[R13 + 0x2c]\nMOV EDI,0x1\nMOV ESI,0x405dc5\nMOV EDX,0x20\nXOR EAX,EAX\nMOV RCX,RBP\nCALL 0x00401970\nMOV AL,byte ptr [0x00609312]\nTEST AL,AL\nJNZ 0x00402398\nLEA RBX,[0xc0 + RSP]\nMOV EDX,0x20\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x00402500\nMOV RDI,RBX\nCALL 0x00401860\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402370\nMOV RDI,qword ptr [RBP + 0x18]\nMOV ESI,0x2c\nCALL 0x00401790\nTEST RAX,RAX\nJZ 0x00402342\nMOV byte ptr [RAX],0x0\nMOV RSI,qword ptr [RBP]\nMOV RDI,qword ptr [RBP + 0x18]\nCALL 0x00402530\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x405db8\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401970\nMOV RDI,RBX\nCALL 0x00401640\nJMP 0x00402398\nXOR EDI,EDI\nMOV ESI,0x405dac\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405da6\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV EDI,0x1\nMOV ESI,0x405dc2\nMOV ECX,0x20\nXOR EAX,EAX\nMOV EDX,R12D\nMOV R8,R14\nCALL 0x00401970\nMOV AL,byte ptr [0x00609314]\nTEST AL,AL\nJNZ 0x004023f5\nTEST R15,R15\nJZ 0x004023cd\nMOV RDI,R15\nCALL 0x00402640\nJMP 0x004023de\nXOR EDI,EDI\nMOV ESI,0x405dcc\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d84\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV RDI,R13\nCALL 0x00402720\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405e65\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV AL,byte ptr [0x00609313]\nTEST AL,AL\nJNZ 0x004024d6\nCMP byte ptr [R13 + 0x4c],0x0\nJZ 0x004024d6\nADD R13,0x4c\nLEA R14,[0xc0 + RSP]\nMOV EDX,0x100\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00402500\nMOV ESI,0x3a\nMOV RDI,R14\nCALL 0x00401790\nTEST RAX,RAX\nJZ 0x00402470\nMOV RBP,RAX\nINC RBP\nMOV byte ptr [RAX],0x0\nCMP byte ptr [0xc0 + RSP],0x0\nJNZ 0x0040247c\nJMP 0x0040248e\nXOR EBP,EBP\nCMP byte ptr [0xc0 + RSP],0x0\nJZ 0x0040248e\nLEA RDI,[0xc0 + RSP]\nCALL 0x00402b30\nMOV RBX,RAX\nJMP 0x00402490\nXOR EBX,EBX\nTEST RBX,RBX\nCMOVZ RBX,R14\nMOV EDI,0x1\nTEST RBP,RBP\nJZ 0x004024ba\nMOV ESI,0x405dd2\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RCX,RBP\nCALL 0x00401970\nCMP RBX,R14\nJNZ 0x004024ce\nJMP 0x004024d6\nMOV ESI,0x405e65\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401970\nCMP RBX,R14\nJZ 0x004024d6\nMOV RDI,RBX\nCALL 0x00401640\nMOV EDI,0xa\nCALL 0x00401890\nADD RSP,0x1c8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p907
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 01 00 00\n49 89 fd\n4d 8d 75 08\n41 80 7d 08 2f\n75 05\n48 89 e7\neb 13\n48 8d 7c 24 05\n66 c7 44 24 04 2f 00\nc7 04 24 2f 64 65 76\nba 20 00 00 00\n4c 89 f6\ne8 5c 02 00 00\n48 89 e7\n48 8d 74 24 30\ne8 6f 33 00 00\n85 c0\n74 0b\n41 bc 3f 00 00 00\n45 31 ff\neb 19\nf6 44 24 48 10\nb8 20 00 00 00\n41 bc 2a 00 00 00\n44 0f 45 e0\n4c 8b 7c 24 78\n49 8d 6d 2c\nbf 01 00 00 00\nbe c5 5d 40 00\nba 20 00 00 00\n31 c0\n48 89 e9\ne8 7a f6 ff ff\n8a 05 16 70 20 00\n84 c0\n0f 85 94 00 00 00\n48 8d 9c 24 c0 00 00 00\nba 20 00 00 00\n48 89 df\n48 89 ee\ne8 e4 01 00 00\n48 89 df\ne8 3c f5 ff ff\n48 89 c5\n48 85 ed\n74 44\n48 8b 7d 18\nbe 2c 00 00 00\ne8 56 f4 ff ff\n48 85 c0\n74 03\nc6 00 00\n48 8b 75 00\n48 8b 7d 18\ne8 e1 01 00 00\n48 89 c3\nbf 01 00 00 00\nbe b8 5d 40 00\n31 c0\n48 89 da\ne8 0a f6 ff ff\n48 89 df\ne8 d2 f2 ff ff\neb 28\n31 ff\nbe ac 5d 40 00\nba 05 00 00 00\ne8 bf f3 ff ff\n48 89 c1\nbf 01 00 00 00\nbe a6 5d 40 00\n31 c0\n48 89 ca\ne8 d8 f5 ff ff\nbf 01 00 00 00\nbe c2 5d 40 00\nb9 20 00 00 00\n31 c0\n44 89 e2\n4d 89 f0\ne8 bc f5 ff ff\n8a 05 5a 6f 20 00\n84 c0\n75 37\n4d 85 ff\n74 0a\n4c 89 ff\ne8 75 02 00 00\neb 11\n31 ff\nbe cc 5d 40 00\nba 05 00 00 00\ne8 62 f3 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 84 5d 40 00\n31 c0\n48 89 ca\ne8 7b f5 ff ff\n4c 89 ef\ne8 23 03 00 00\n48 89 c1\nbf 01 00 00 00\nbe 65 5e 40 00\n31 c0\n48 89 ca\ne8 5c f5 ff ff\n8a 05 f9 6e 20 00\n84 c0\n0f 85 b4 00 00 00\n41 80 7d 4c 00\n0f 84 a9 00 00 00\n49 83 c5 4c\n4c 8d b4 24 c0 00 00 00\nba 00 01 00 00\n4c 89 f7\n4c 89 ee\ne8 b7 00 00 00\nbe 3a 00 00 00\n4c 89 f7\ne8 3a f3 ff ff\n48 85 c0\n74 15\n48 89 c5\n48 ff c5\nc6 00 00\n80 bc 24 c0 00 00 00 00\n75 0e\neb 1e\n31 ed\n80 bc 24 c0 00 00 00 00\n74 12\n48 8d bc 24 c0 00 00 00\ne8 a7 06 00 00\n48 89 c3\neb 02\n31 db\n48 85 db\n49 0f 44 de\nbf 01 00 00 00\n48 85 ed\n74 19\nbe d2 5d 40 00\n31 c0\n48 89 da\n48 89 e9\ne8 bd f4 ff ff\n4c 39 f3\n75 16\neb 1c\nbe 65 5e 40 00\n31 c0\n48 89 da\ne8 a7 f4 ff ff\n4c 39 f3\n74 08\n48 89 df\ne8 6a f1 ff ff\nbf 0a 00 00 00\ne8 b0 f3 ff ff\n48 81 c4 c8 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p908
S'.text:0000000000402260\n.text:0000000000402261\n.text:0000000000402263\n.text:0000000000402265\n.text:0000000000402267\n.text:0000000000402269\n.text:000000000040226a\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402278\n.text:000000000040227d\n.text:000000000040227f\n.text:0000000000402282\n.text:0000000000402284\n.text:0000000000402289\n.text:0000000000402290\n.text:0000000000402297\n.text:000000000040229c\n.text:000000000040229f\n.text:00000000004022a4\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022b1\n.text:00000000004022b3\n.text:00000000004022b5\n.text:00000000004022bb\n.text:00000000004022be\n.text:00000000004022c0\n.text:00000000004022c5\n.text:00000000004022ca\n.text:00000000004022d0\n.text:00000000004022d4\n.text:00000000004022d9\n.text:00000000004022dd\n.text:00000000004022e2\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022ee\n.text:00000000004022f1\n.text:00000000004022f6\n.text:00000000004022fc\n.text:00000000004022fe\n.text:0000000000402304\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402314\n.text:0000000000402317\n.text:000000000040231c\n.text:000000000040231f\n.text:0000000000402324\n.text:0000000000402327\n.text:000000000040232a\n.text:000000000040232c\n.text:0000000000402330\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233d\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402346\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402352\n.text:0000000000402357\n.text:000000000040235c\n.text:000000000040235e\n.text:0000000000402361\n.text:0000000000402366\n.text:0000000000402369\n.text:000000000040236e\n.text:0000000000402370\n.text:0000000000402372\n.text:0000000000402377\n.text:000000000040237c\n.text:0000000000402381\n.text:0000000000402384\n.text:0000000000402389\n.text:000000000040238e\n.text:0000000000402390\n.text:0000000000402393\n.text:0000000000402398\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023a9\n.text:00000000004023ac\n.text:00000000004023af\n.text:00000000004023b4\n.text:00000000004023ba\n.text:00000000004023bc\n.text:00000000004023be\n.text:00000000004023c1\n.text:00000000004023c3\n.text:00000000004023c6\n.text:00000000004023cb\n.text:00000000004023cd\n.text:00000000004023cf\n.text:00000000004023d4\n.text:00000000004023d9\n.text:00000000004023de\n.text:00000000004023e1\n.text:00000000004023e6\n.text:00000000004023eb\n.text:00000000004023ed\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402405\n.text:000000000040240a\n.text:000000000040240c\n.text:000000000040240f\n.text:0000000000402414\n.text:000000000040241a\n.text:000000000040241c\n.text:0000000000402422\n.text:0000000000402427\n.text:000000000040242d\n.text:0000000000402431\n.text:0000000000402439\n.text:000000000040243e\n.text:0000000000402441\n.text:0000000000402444\n.text:0000000000402449\n.text:000000000040244e\n.text:0000000000402451\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245b\n.text:000000000040245e\n.text:0000000000402461\n.text:0000000000402464\n.text:000000000040246c\n.text:000000000040246e\n.text:0000000000402470\n.text:0000000000402472\n.text:000000000040247a\n.text:000000000040247c\n.text:0000000000402484\n.text:0000000000402489\n.text:000000000040248c\n.text:000000000040248e\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402497\n.text:000000000040249c\n.text:000000000040249f\n.text:00000000004024a1\n.text:00000000004024a6\n.text:00000000004024a8\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b6\n.text:00000000004024b8\n.text:00000000004024ba\n.text:00000000004024bf\n.text:00000000004024c1\n.text:00000000004024c4\n.text:00000000004024c9\n.text:00000000004024cc\n.text:00000000004024ce\n.text:00000000004024d1\n.text:00000000004024d6\n.text:00000000004024db\n.text:00000000004024e0\n.text:00000000004024e7\n.text:00000000004024e8\n.text:00000000004024ea\n.text:00000000004024ec\n.text:00000000004024ee\n.text:00000000004024f0\n.text:00000000004024f1\n'
p909
tp910
sS'close_stdout'
p911
(S'\n__stdcall close_stdout()\n'
p912
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402c17;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405e66,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402c17:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092e8]\nCALL 0x004051d0\nTEST EAX,EAX\nJZ 0x00402c17\nCMP byte ptr [0x006093b8],0x0\nJZ 0x00402c2c\nCALL 0x00401670\nCMP dword ptr [RAX],0x20\nJNZ 0x00402c2c\nMOV RDI,qword ptr [0x00609300]\nCALL 0x004051d0\nTEST EAX,EAX\nJNZ 0x00402c71\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405e56\nMOV EDX,0x5\nCALL 0x00401740\nMOV R14,RAX\nMOV RBX,qword ptr [0x006093b0]\nCALL 0x00401670\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402c7c\nXOR EDI,EDI\nMOV EDX,0x405e66\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004019a0\nMOV EDI,dword ptr [0x00609268]\nCALL 0x004016a0\nMOV EDI,dword ptr [0x00609268]\nCALL 0x004016a0\nMOV RDI,RBX\nCALL 0x00404140\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405e62\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004019a0\nMOV EDI,dword ptr [0x00609268]\nCALL 0x004016a0\n'
p914
S'55\n41 56\n53\n48 8b 3d ed 66 20 00\ne8 d0 25 00 00\n85 c0\n74 13\n80 3d ad 67 20 00 00\n74 1f\ne8 5e ea ff ff\n83 38 20\n75 15\n48 8b 3d e2 66 20 00\ne8 ad 25 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 56 5e 40 00\nba 05 00 00 00\ne8 03 eb ff ff\n49 89 c6\n48 8b 1d 69 67 20 00\ne8 24 ea ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 66 5e 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 3a ed ff ff\n8b 3d fc 65 20 00\ne8 2f ea ff ff\n8b 3d f1 65 20 00\ne8 24 ea ff ff\n48 89 df\ne8 bc 14 00 00\n48 89 c1\n31 ff\nba 62 5e 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 06 ed ff ff\n8b 3d c8 65 20 00\ne8 fb e9 ff ff\n'
p915
S'.text:0000000000402bf0\n.text:0000000000402bf1\n.text:0000000000402bf3\n.text:0000000000402bf4\n.text:0000000000402bfb\n.text:0000000000402c00\n.text:0000000000402c02\n.text:0000000000402c04\n.text:0000000000402c0b\n.text:0000000000402c0d\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c17\n.text:0000000000402c1e\n.text:0000000000402c23\n.text:0000000000402c25\n.text:0000000000402c27\n.text:0000000000402c28\n.text:0000000000402c2a\n.text:0000000000402c2b\n.text:0000000000402c2c\n.text:0000000000402c2e\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3d\n.text:0000000000402c40\n.text:0000000000402c47\n.text:0000000000402c4c\n.text:0000000000402c4f\n.text:0000000000402c51\n.text:0000000000402c53\n.text:0000000000402c55\n.text:0000000000402c5a\n.text:0000000000402c5c\n.text:0000000000402c5e\n.text:0000000000402c61\n.text:0000000000402c66\n.text:0000000000402c6c\n.text:0000000000402c71\n.text:0000000000402c77\n.text:0000000000402c7c\n.text:0000000000402c7f\n.text:0000000000402c84\n.text:0000000000402c87\n.text:0000000000402c89\n.text:0000000000402c8e\n.text:0000000000402c90\n.text:0000000000402c92\n.text:0000000000402c95\n.text:0000000000402c9a\n.text:0000000000402ca0\n'
p916
tp917
sS'version_etc_ar'
p918
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p919
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p920
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404a20\nJMP 0x004046b0\n'
p921
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p922
S'.text:0000000000404a10\n.text:0000000000404a17\n.text:0000000000404a20\n.text:0000000000404a26\n.text:0000000000404a2a\n.text:0000000000404a2c\n'
p923
tp924
sS'rpl_calloc'
p925
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p926
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609130)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p927
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404dcb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404dd0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404dd0\nPUSH RAX\nCALL 0x00401670\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401840\n'
p928
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af c8 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 65 ca ff ff\n'
p929
S'.text:0000000000404d90\n.text:0000000000404d93\n.text:0000000000404d98\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404da2\n.text:0000000000404da4\n.text:0000000000404da7\n.text:0000000000404dab\n.text:0000000000404dad\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db9\n.text:0000000000404dbb\n.text:0000000000404dbc\n.text:0000000000404dc1\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dca\n.text:0000000000404dcb\n.text:0000000000404dd0\n.text:0000000000404dd3\n.text:0000000000404dd6\n'
p930
tp931
sS'memset'
p932
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x006090f8]\n'
p935
S'ff 25 22 79 20 00\n'
p936
S'.plt:00000000004017d0\n'
p937
tp938
sS'c_isxdigit'
p939
(S'\n__stdcall c_isxdigit()\n'
p940
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p941
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004051ab\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p942
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p943
S'.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405196\n.text:0000000000405198\n.text:00000000004051a2\n.text:00000000004051a4\n.text:00000000004051a7\n.text:00000000004051aa\n.text:00000000004051ab\n.text:00000000004051ad\n'
p944
tp945
sS'__libc_csu_fini'
p946
(S'\n__stdcall __libc_csu_fini()\n'
p947
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p948
S'RET\n'
p949
S'f3 c3\n'
p950
S'.text:00000000004055e0\n'
p951
tp952
sS'getc_unlocked'
p953
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00609078]\n'
p956
S'ff 25 a2 79 20 00\n'
p957
S'.plt:00000000004016d0\n'
p958
tp959
sS'print_heading'
p960
(S'\n__stdcall print_heading()\n'
p961
V\u000avoid print_heading(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar2 = dcgettext(0,"Login",5);\u000a  __printf_chk(1,&DAT_00405d62,uVar2,uVar2);\u000a  if (include_fullname == 0) {\u000a    uVar2 = dcgettext(0,&DAT_00405d74,5);\u000a    __printf_chk(1," %-19s",uVar2,uVar2);\u000a  }\u000a  uVar2 = dcgettext(0,&DAT_00405d7f,5);\u000a  __printf_chk(1," %-9s",uVar2,uVar2);\u000a  if (include_idle == 0) {\u000a    uVar2 = dcgettext(0,&DAT_00405d8a,5);\u000a    __printf_chk(1," %-6s",uVar2,uVar2);\u000a  }\u000a  iVar1 = time_format_width;\u000a  uVar2 = dcgettext(0,&DAT_00405d95,5);\u000a  __printf_chk(1," %-*s",(ulong)(uint)iVar1,uVar2);\u000a  if (include_where == 0) {\u000a    uVar2 = dcgettext(0,"Where",5);\u000a    __printf_chk(1,0x405e65,uVar2,uVar2);\u000a  }\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p962
S'PUSH RBX\nXOR EDI,EDI\nMOV ESI,0x405d67\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d62\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV AL,byte ptr [0x00609312]\nTEST AL,AL\nJNZ 0x0040219b\nXOR EDI,EDI\nMOV ESI,0x405d74\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d6d\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x405d7f\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d79\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV AL,byte ptr [0x00609314]\nTEST AL,AL\nJNZ 0x004021f5\nXOR EDI,EDI\nMOV ESI,0x405d8a\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d84\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV EBX,dword ptr [0x00609320]\nXOR EDI,EDI\nMOV ESI,0x405d95\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405d8f\nXOR EAX,EAX\nMOV EDX,EBX\nCALL 0x00401970\nMOV AL,byte ptr [0x00609313]\nTEST AL,AL\nJNZ 0x00402254\nXOR EDI,EDI\nMOV ESI,0x405d9a\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405e65\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401970\nMOV EDI,0xa\nPOP RBX\nJMP 0x00401890\n'
p963
S'53\n31 ff\nbe 67 5d 40 00\nba 05 00 00 00\ne8 ee f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 62 5d 40 00\n31 c0\n48 89 ca\ne8 07 f8 ff ff\n8a 05 a3 71 20 00\n84 c0\n75 28\n31 ff\nbe 74 5d 40 00\nba 05 00 00 00\ne8 bc f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 6d 5d 40 00\n31 c0\n48 89 ca\ne8 d5 f7 ff ff\n31 ff\nbe 7f 5d 40 00\nba 05 00 00 00\ne8 94 f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 79 5d 40 00\n31 c0\n48 89 ca\ne8 ad f7 ff ff\n8a 05 4b 71 20 00\n84 c0\n75 28\n31 ff\nbe 8a 5d 40 00\nba 05 00 00 00\ne8 62 f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 84 5d 40 00\n31 c0\n48 89 ca\ne8 7b f7 ff ff\n8b 1d 25 71 20 00\n31 ff\nbe 95 5d 40 00\nba 05 00 00 00\ne8 34 f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 8f 5d 40 00\n31 c0\n89 da\ne8 4e f7 ff ff\n8a 05 eb 70 20 00\n84 c0\n75 28\n31 ff\nbe 9a 5d 40 00\nba 05 00 00 00\ne8 03 f5 ff ff\n48 89 c1\nbf 01 00 00 00\nbe 65 5e 40 00\n31 c0\n48 89 ca\ne8 1c f7 ff ff\nbf 0a 00 00 00\n5b\ne9 31 f6 ff ff\n'
p964
S'.text:0000000000402140\n.text:0000000000402141\n.text:0000000000402143\n.text:0000000000402148\n.text:000000000040214d\n.text:0000000000402152\n.text:0000000000402155\n.text:000000000040215a\n.text:000000000040215f\n.text:0000000000402161\n.text:0000000000402164\n.text:0000000000402169\n.text:000000000040216f\n.text:0000000000402171\n.text:0000000000402173\n.text:0000000000402175\n.text:000000000040217a\n.text:000000000040217f\n.text:0000000000402184\n.text:0000000000402187\n.text:000000000040218c\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219d\n.text:00000000004021a2\n.text:00000000004021a7\n.text:00000000004021ac\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b9\n.text:00000000004021bb\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c9\n.text:00000000004021cb\n.text:00000000004021cd\n.text:00000000004021cf\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e1\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021ed\n.text:00000000004021f0\n.text:00000000004021f5\n.text:00000000004021fb\n.text:00000000004021fd\n.text:0000000000402202\n.text:0000000000402207\n.text:000000000040220c\n.text:000000000040220f\n.text:0000000000402214\n.text:0000000000402219\n.text:000000000040221b\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402228\n.text:000000000040222a\n.text:000000000040222c\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402240\n.text:0000000000402245\n.text:000000000040224a\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402254\n.text:0000000000402259\n.text:000000000040225a\n'
p965
tp966
sS'desirable_utmp_entry'
p967
(S'\n__stdcall desirable_utmp_entry(STRUCT_UTMP * u)\n'
p968
V\u000a_Bool desirable_utmp_entry(STRUCT_UTMP *u)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  ulong in_RSI;\u000a  bool bVar4;\u000a  \u000a  if (u->ut_user[0] == 0) {\u000a    bVar4 = false;\u000a  }\u000a  else {\u000a    bVar4 = u->ut_type == 7;\u000a  }\u000a  if (((in_RSI & 2) == 0) || (bVar4)) {\u000a    if ((((in_RSI & 1) != 0) &&\u000a        (((bVar4 && (0 < u->ut_pid)) && (iVar2 = kill(u->ut_pid,0), iVar2 < 0)))) &&\u000a       (piVar3 = __errno_location(), *piVar3 == 3)) {\u000a      return false;\u000a    }\u000a    uVar1 = 1;\u000a  }\u000a  else {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p969
S'CMP byte ptr [RDI + 0x2c],0x0\nJZ 0x00405041\nMOVZX EAX,word ptr [RDI]\nCMP EAX,0x7\nSETZ AL\nJMP 0x00405043\nXOR EAX,EAX\nPUSH RAX\nTEST SIL,0x2\nJZ 0x00405052\nTEST AL,AL\nJNZ 0x00405052\nXOR EAX,EAX\nJMP 0x0040507e\nTEST SIL,0x1\nJZ 0x0040507c\nXOR AL,0x1\nJNZ 0x0040507c\nMOV EDI,dword ptr [RDI + 0x4]\nTEST EDI,EDI\nJLE 0x0040507c\nXOR ESI,ESI\nCALL 0x004018a0\nTEST EAX,EAX\nJNS 0x0040507c\nCALL 0x00401670\nCMP dword ptr [RAX],0x3\nJNZ 0x0040507c\nXOR EAX,EAX\nJMP 0x0040507e\nMOV AL,0x1\nPOP RCX\nRET\n'
p970
S'80 7f 2c 00\n74 0b\n0f b7 07\n83 f8 07\n0f 94 c0\neb 02\n31 c0\n50\n40 f6 c6 02\n74 08\n84 c0\n75 04\n31 c0\neb 2c\n40 f6 c6 01\n74 24\n34 01\n75 20\n8b 7f 04\n85 ff\n7e 19\n31 f6\ne8 36 c8 ff ff\n85 c0\n79 0e\ne8 fd c5 ff ff\n83 38 03\n75 04\n31 c0\neb 02\nb0 01\n59\nc3\n'
p971
S'.text:0000000000405030\n.text:0000000000405034\n.text:0000000000405036\n.text:0000000000405039\n.text:000000000040503c\n.text:000000000040503f\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405044\n.text:0000000000405048\n.text:000000000040504a\n.text:000000000040504c\n.text:000000000040504e\n.text:0000000000405050\n.text:0000000000405052\n.text:0000000000405056\n.text:0000000000405058\n.text:000000000040505a\n.text:000000000040505c\n.text:000000000040505f\n.text:0000000000405061\n.text:0000000000405063\n.text:0000000000405065\n.text:000000000040506a\n.text:000000000040506c\n.text:000000000040506e\n.text:0000000000405073\n.text:0000000000405076\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507c\n.text:000000000040507e\n.text:000000000040507f\n'
p972
tp973
sS'abort'
p974
(S'\n__stdcall abort()\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609040)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x00609040]\n'
p977
S'ff 25 da 79 20 00\n'
p978
S'.plt:0000000000401660\n'
p979
tp980
sS'c_isascii'
p981
(S'\n__stdcall c_isascii()\n'
p982
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p983
S'CMP EDI,0x80\nSETC AL\nRET\n'
p984
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p985
S'.text:00000000004050d0\n.text:00000000004050d6\n.text:00000000004050d9\n'
p986
tp987
sS'version_etc'
p988
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p989
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p990
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404ae2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404a40\nADD RSP,0xd8\nRET\n'
p991
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p992
S'.text:0000000000404aa0\n.text:0000000000404aa7\n.text:0000000000404aa9\n.text:0000000000404aab\n.text:0000000000404ab0\n.text:0000000000404ab5\n.text:0000000000404aba\n.text:0000000000404ac2\n.text:0000000000404aca\n.text:0000000000404ad2\n.text:0000000000404ada\n.text:0000000000404ae2\n.text:0000000000404ae7\n.text:0000000000404aec\n.text:0000000000404af1\n.text:0000000000404af6\n.text:0000000000404afe\n.text:0000000000404b03\n.text:0000000000404b0b\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b1a\n.text:0000000000404b21\n'
p993
tp994
sS'canon_host_r'
p995
(S'\n__stdcall canon_host_r(char * host, int * cherror)\n'
p996
V\u000achar * canon_host_r(char *host,int *cherror)\u000a\u000a{\u000a  addrinfo hints;\u000a  int iVar1;\u000a  char *pcVar2;\u000a  addrinfo *local_18;\u000a  \u000a  local_18 = (addrinfo *)0x0;\u000a  hints.ai_flags = 2;\u000a  iVar1 = getaddrinfo(host,(char *)0x0,(addrinfo *)0x609380,&local_18);\u000a  if (iVar1 == 0) {\u000a    if (local_18->ai_canonname != (char *)0x0) {\u000a      host = local_18->ai_canonname;\u000a    }\u000a    pcVar2 = (char *)__strdup(host);\u000a    if ((cherror != (int *)0x0) && (pcVar2 == (char *)0x0)) {\u000a      *cherror = -10;\u000a    }\u000a    freeaddrinfo(local_18);\u000a  }\u000a  else {\u000a    if (cherror != (int *)0x0) {\u000a      *cherror = iVar1;\u000a    }\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p997
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP],0x0\nMOV dword ptr [0x00609380],0x2\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,0x609380\nCALL 0x00401a20\nTEST EAX,EAX\nJZ 0x00402b7b\nTEST R14,R14\nJZ 0x00402b77\nMOV dword ptr [R14],EAX\nXOR EBX,EBX\nJMP 0x00402baf\nMOV RAX,qword ptr [RSP]\nMOV RAX,qword ptr [RAX + 0x20]\nTEST RAX,RAX\nCMOVNZ RBX,RAX\nMOV RDI,RBX\nCALL 0x00401800\nMOV RBX,RAX\nTEST R14,R14\nJZ 0x00402ba6\nTEST RBX,RBX\nJNZ 0x00402ba6\nMOV dword ptr [R14],0xfffffff6\nMOV RDI,qword ptr [RSP]\nCALL 0x00401a60\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p998
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 c7 04 24 00 00 00 00\nc7 05 24 68 20 00 02 00 00 00\n48 89 e1\n31 f6\nba 80 93 60 00\ne8 b5 ee ff ff\n85 c0\n74 0c\n4d 85 f6\n74 03\n41 89 06\n31 db\neb 34\n48 8b 04 24\n48 8b 40 20\n48 85 c0\n48 0f 45 d8\n48 89 df\ne8 6e ec ff ff\n48 89 c3\n4d 85 f6\n74 0c\n48 85 db\n75 07\n41 c7 06 f6 ff ff ff\n48 8b 3c 24\ne8 b1 ee ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p999
S'.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b43\n.text:0000000000402b44\n.text:0000000000402b47\n.text:0000000000402b4a\n.text:0000000000402b52\n.text:0000000000402b5c\n.text:0000000000402b5f\n.text:0000000000402b61\n.text:0000000000402b66\n.text:0000000000402b6b\n.text:0000000000402b6d\n.text:0000000000402b6f\n.text:0000000000402b72\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b79\n.text:0000000000402b7b\n.text:0000000000402b7f\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b8a\n.text:0000000000402b8d\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b98\n.text:0000000000402b9a\n.text:0000000000402b9d\n.text:0000000000402b9f\n.text:0000000000402ba6\n.text:0000000000402baa\n.text:0000000000402baf\n.text:0000000000402bb2\n.text:0000000000402bb6\n.text:0000000000402bb7\n.text:0000000000402bb9\n'
p1000
tp1001
sS'__ctype_b_loc'
p1002
(S'\n__stdcall __ctype_b_loc()\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609238)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00609238]\n'
p1005
S'ff 25 e2 77 20 00\n'
p1006
S'.plt:0000000000401a50\n'
p1007
tp1008
sS'lseek'
p1009
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090f0)();\u000a  return _Var1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x006090f0]\n'
p1012
S'ff 25 2a 79 20 00\n'
p1013
S'.plt:00000000004017c0\n'
p1014
tp1015
sS'long_pinky'
p1016
(S'\n__stdcall long_pinky(char * * argv_names)\n'
p1017
V\u000avoid long_pinky(char **argv_names)\u000a\u000a{\u000a  char **in_RSI;\u000a  ulong uVar1;\u000a  \u000a  if (0 < (int)argv_names) {\u000a    uVar1 = (ulong)argv_names & 0xffffffff;\u000a    do {\u000a      print_long_entry(*in_RSI);\u000a      in_RSI = in_RSI + 1;\u000a      uVar1 = uVar1 - 1;\u000a    } while (uVar1 != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nTEST EDI,EDI\nJLE 0x00402041\nMOV R14D,EDI\nNOP\nMOV RDI,qword ptr [RBX]\nCALL 0x004027d0\nADD RBX,0x8\nDEC R14\nJNZ 0x00402030\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1019
S'41 56\n53\n50\n48 89 f3\n85 ff\n7e 16\n41 89 fe\n66 90\n48 8b 3b\ne8 98 07 00 00\n48 83 c3 08\n49 ff ce\n75 ef\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1020
S'.text:0000000000402020\n.text:0000000000402022\n.text:0000000000402023\n.text:0000000000402024\n.text:0000000000402027\n.text:0000000000402029\n.text:000000000040202b\n.text:000000000040202e\n.text:0000000000402030\n.text:0000000000402033\n.text:0000000000402038\n.text:000000000040203c\n.text:000000000040203f\n.text:0000000000402041\n.text:0000000000402045\n.text:0000000000402046\n.text:0000000000402048\n'
p1021
tp1022
sS'quotearg'
p1023
(S'\n__stdcall quotearg(char * arg)\n'
p1024
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403da0\n'
p1026
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1027
S'.text:0000000000403f80\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f88\n'
p1028
tp1029
sS'_start'
p1030
(S'\n__stdcall _start()\n'
p1031
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1032
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4055e0\nMOV RCX,0x405570\nMOV RDI,0x401df0\nCALL qword ptr [0x00608ff0]\nHLT\n'
p1033
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 e0 55 40 00\n48 c7 c1 70 55 40 00\n48 c7 c7 f0 1d 40 00\nff 15 46 75 20 00\nf4\n'
p1034
S'.text:0000000000401a80\n.text:0000000000401a82\n.text:0000000000401a85\n.text:0000000000401a86\n.text:0000000000401a89\n.text:0000000000401a8d\n.text:0000000000401a8e\n.text:0000000000401a8f\n.text:0000000000401a96\n.text:0000000000401a9d\n.text:0000000000401aa4\n.text:0000000000401aaa\n'
p1035
tp1036
sS'c_iscntrl'
p1037
(S'\n__stdcall c_iscntrl()\n'
p1038
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1039
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004050f8\nRET\nCMP EDI,0x7f\nJZ 0x004050f7\nXOR EAX,EAX\nRET\n'
p1040
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1041
S'.text:00000000004050f0\n.text:00000000004050f2\n.text:00000000004050f5\n.text:00000000004050f7\n.text:00000000004050f8\n.text:00000000004050fb\n.text:00000000004050fd\n.text:00000000004050ff\n'
p1042
tp1043
sS'c_isblank'
p1044
(S'\n__stdcall c_isblank()\n'
p1045
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1046
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1047
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1048
S'.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e6\n.text:00000000004050e9\n.text:00000000004050ec\n.text:00000000004050ee\n'
p1049
tp1050
sS'stpcpy'
p1051
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_006090a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x006090a8]\n'
p1054
S'ff 25 72 79 20 00\n'
p1055
S'.plt:0000000000401730\n'
p1056
tp1057
sS'quotearg_n_mem'
p1058
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1059
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'MOV ECX,0x6093d0\nJMP 0x00403db0\n'
p1061
S'b9 d0 93 60 00\ne9 36 fe ff ff\n'
p1062
S'.text:0000000000403f70\n.text:0000000000403f75\n'
p1063
tp1064
sS'atexit'
p1065
(S'\n__stdcall atexit(__func * __func)\n'
p1066
V\u000a/* WARNING: Removing unreachable block (ram,0x00405610) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00609200)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1067
S'MOV RAX,0x609258\nTEST RAX,RAX\nJZ 0x00405610\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004019e0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004019e0\n'
p1068
S'48 c7 c0 58 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 da c3 ff ff\n31 d2\n31 f6\ne9 c7 c3 ff ff\n'
p1069
S'.text:00000000004055f0\n.text:00000000004055f7\n.text:00000000004055fa\n.text:00000000004055fc\n.text:00000000004055ff\n.text:0000000000405601\n.text:0000000000405610\n.text:0000000000405612\n.text:0000000000405614\n'
p1070
tp1071
sS'__printf_chk'
p1072
(S'\n__stdcall __printf_chk()\n'
p1073
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091c8)();\u000a  return;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x006091c8]\n'
p1075
S'ff 25 52 78 20 00\n'
p1076
S'.plt:0000000000401970\n'
p1077
tp1078
sS'fdopen'
p1079
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006091b8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x006091b8]\n'
p1082
S'ff 25 62 78 20 00\n'
p1083
S'.plt:0000000000401950\n'
p1084
tp1085
sS'error'
p1086
(S'\n__stdcall error()\n'
p1087
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091e0)();\u000a  return;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x006091e0]\n'
p1089
S'ff 25 3a 78 20 00\n'
p1090
S'.plt:00000000004019a0\n'
p1091
tp1092
sS'strcaseeq6'
p1093
(S'\n__stdcall strcaseeq6()\n'
p1094
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404642\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404649\nJMP 0x0040465e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040465e\nTEST BPL,BPL\nJZ 0x00404659\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404670\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1096
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 51 0b 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1097
S'.text:0000000000404620\n.text:0000000000404621\n.text:0000000000404622\n.text:0000000000404623\n.text:0000000000404625\n.text:0000000000404628\n.text:000000000040462a\n.text:000000000040462f\n.text:0000000000404633\n.text:0000000000404635\n.text:0000000000404637\n.text:000000000040463a\n.text:000000000040463c\n.text:000000000040463e\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464c\n.text:000000000040464e\n.text:0000000000404651\n.text:0000000000404655\n.text:0000000000404656\n.text:0000000000404657\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404662\n.text:0000000000404663\n.text:0000000000404664\n'
p1098
tp1099
sS'imaxtostr'
p1100
(S'\n__stdcall imaxtostr(intmax_t i, char * buf)\n'
p1101
V\u000achar * imaxtostr(intmax_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p1102
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x00402d4b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00402d10\nJMP 0x00402d9f\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00402d60\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p1103
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p1104
S'.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf7\n.text:0000000000402cfa\n.text:0000000000402cfc\n.text:0000000000402d00\n.text:0000000000402d0a\n.text:0000000000402d10\n.text:0000000000402d13\n.text:0000000000402d16\n.text:0000000000402d19\n.text:0000000000402d1d\n.text:0000000000402d21\n.text:0000000000402d24\n.text:0000000000402d26\n.text:0000000000402d2a\n.text:0000000000402d2c\n.text:0000000000402d2f\n.text:0000000000402d32\n.text:0000000000402d36\n.text:0000000000402d39\n.text:0000000000402d3c\n.text:0000000000402d40\n.text:0000000000402d44\n.text:0000000000402d47\n.text:0000000000402d49\n.text:0000000000402d4b\n.text:0000000000402d4f\n.text:0000000000402d59\n.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d66\n.text:0000000000402d69\n.text:0000000000402d6d\n.text:0000000000402d71\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d7b\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d85\n.text:0000000000402d87\n.text:0000000000402d89\n.text:0000000000402d8c\n.text:0000000000402d90\n.text:0000000000402d93\n.text:0000000000402d97\n.text:0000000000402d9a\n.text:0000000000402d9c\n.text:0000000000402d9f\n.text:0000000000402da2\n'
p1105
tp1106
sS'strcaseeq5'
p1107
(S'\n__stdcall strcaseeq5()\n'
p1108
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004045f6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004045fd\nJMP 0x00404614\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404614\nTEST BPL,BPL\nJZ 0x0040460f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404620\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1110
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 9d 0b 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1111
S'.text:00000000004045d0\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d4\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045dc\n.text:00000000004045de\n.text:00000000004045e3\n.text:00000000004045e7\n.text:00000000004045e9\n.text:00000000004045eb\n.text:00000000004045ee\n.text:00000000004045f0\n.text:00000000004045f2\n.text:00000000004045f4\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045fb\n.text:00000000004045fd\n.text:0000000000404600\n.text:0000000000404602\n.text:0000000000404606\n.text:0000000000404609\n.text:000000000040460a\n.text:000000000040460c\n.text:000000000040460d\n.text:000000000040460f\n.text:0000000000404614\n.text:0000000000404615\n.text:0000000000404617\n.text:0000000000404618\n'
p1112
tp1113
sS'emit_ancillary_info'
p1114
(S'\n__stdcall emit_ancillary_info()\n'
p1115
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405760;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("pinky",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "pinky";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"pinky",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","pinky");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406541;\u000a  if (__s2 == "pinky") {\u000a    uVar3 = 0x405c1e;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1116
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405760\nMOV ESI,0x405c02\nNOP\nMOV EDI,0x405b34\nCALL 0x00401850\nTEST EAX,EAX\nJZ 0x00401ceb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401cd0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405b34\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405c61\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405b5c\nMOV ECX,0x405c78\nXOR EAX,EAX\nCALL 0x00401970\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401960\nTEST RAX,RAX\nJZ 0x00401d74\nMOV ESI,0x405c9f\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401690\nTEST EAX,EAX\nJZ 0x00401d74\nXOR EDI,EDI\nMOV ESI,0x405ca3\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405b34\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x405ce8\nMOV EDX,0x5\nCALL 0x00401740\nMOV RSI,RAX\nMOV R14D,0x405b34\nMOV EDI,0x1\nMOV EDX,0x405c78\nMOV ECX,0x405b34\nXOR EAX,EAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x405d07\nMOV EDX,0x5\nCALL 0x00401740\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x405c1e\nMOV ECX,0x406541\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401970\n'
p1117
S'41 56\n53\n50\nbb 60 57 40 00\nbe 02 5c 40 00\n66 90\nbf 34 5b 40 00\ne8 76 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 34 5b 40 00\n48 0f 45 d8\n31 ff\nbe 61 5c 40 00\nba 05 00 00 00\ne8 34 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 5c 5b 40 00\nb9 78 5c 40 00\n31 c0\ne8 4b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 2f fc ff ff\n48 85 c0\n74 3e\nbe 9f 5c 40 00\nba 03 00 00 00\n48 89 c7\ne8 48 f9 ff ff\n85 c0\n74 28\n31 ff\nbe a3 5c 40 00\nba 05 00 00 00\ne8 e3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 34 5b 40 00\n31 c0\n48 89 ce\ne8 fc fb ff ff\n31 ff\nbe e8 5c 40 00\nba 05 00 00 00\ne8 bb f9 ff ff\n48 89 c6\n41 be 34 5b 40 00\nbf 01 00 00 00\nba 78 5c 40 00\nb9 34 5b 40 00\n31 c0\ne8 cc fb ff ff\n31 ff\nbe 07 5d 40 00\nba 05 00 00 00\ne8 8b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 1e 5c 40 00\nb9 41 65 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 8e fb ff ff\n'
p1118
S'.text:0000000000401cc0\n.text:0000000000401cc2\n.text:0000000000401cc3\n.text:0000000000401cc4\n.text:0000000000401cc9\n.text:0000000000401cce\n.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdc\n.text:0000000000401cde\n.text:0000000000401ce2\n.text:0000000000401ce6\n.text:0000000000401ce9\n.text:0000000000401ceb\n.text:0000000000401cef\n.text:0000000000401cf2\n.text:0000000000401cf7\n.text:0000000000401cfb\n.text:0000000000401cfd\n.text:0000000000401d02\n.text:0000000000401d07\n.text:0000000000401d0c\n.text:0000000000401d0f\n.text:0000000000401d14\n.text:0000000000401d19\n.text:0000000000401d1e\n.text:0000000000401d20\n.text:0000000000401d25\n.text:0000000000401d2a\n.text:0000000000401d2c\n.text:0000000000401d31\n.text:0000000000401d34\n.text:0000000000401d36\n.text:0000000000401d3b\n.text:0000000000401d40\n.text:0000000000401d43\n.text:0000000000401d48\n.text:0000000000401d4a\n.text:0000000000401d4c\n.text:0000000000401d4e\n.text:0000000000401d53\n.text:0000000000401d58\n.text:0000000000401d5d\n.text:0000000000401d60\n.text:0000000000401d65\n.text:0000000000401d6a\n.text:0000000000401d6c\n.text:0000000000401d6f\n.text:0000000000401d74\n.text:0000000000401d76\n.text:0000000000401d7b\n.text:0000000000401d80\n.text:0000000000401d85\n.text:0000000000401d88\n.text:0000000000401d8e\n.text:0000000000401d93\n.text:0000000000401d98\n.text:0000000000401d9d\n.text:0000000000401d9f\n.text:0000000000401da4\n.text:0000000000401da6\n.text:0000000000401dab\n.text:0000000000401db0\n.text:0000000000401db5\n.text:0000000000401db8\n.text:0000000000401dbb\n.text:0000000000401dc0\n.text:0000000000401dc5\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd0\n.text:0000000000401dd3\n.text:0000000000401dd6\n.text:0000000000401dda\n.text:0000000000401ddb\n.text:0000000000401ddd\n'
p1119
tp1120
sS'print_long_entry'
p1121
(S'\n__stdcall print_long_entry(char * name)\n'
p1122
V\u000avoid print_long_entry(char *name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  char *__dest;\u000a  size_t __n;\u000a  undefined8 *puVar2;\u000a  FILE *fp;\u000a  undefined4 *puVar3;\u000a  undefined8 uVar4;\u000a  undefined auVar5 [16];\u000a  char buf [1024];\u000a  undefined auStack1064 [1032];\u000a  \u000a  ppVar1 = getpwnam(name);\u000a  auVar5 = dcgettext(0,"Login name: ",5);\u000a  __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a  __printf_chk(1,"%-28s",name);\u000a  auVar5 = dcgettext(0,"In real life: ",5);\u000a  __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a  if (ppVar1 != (passwd *)0x0) {\u000a    __dest = strchr(ppVar1->pw_gecos,0x2c);\u000a    if (__dest != (char *)0x0) {\u000a      *__dest = 0;\u000a    }\u000a    __dest = create_fullname(ppVar1->pw_gecos,ppVar1->pw_name);\u000a    __printf_chk(1,0x405e65,__dest);\u000a    free(__dest);\u000a    putchar_unlocked(10);\u000a    if (include_home_and_shell == 0) {\u000a      auVar5 = dcgettext(0,"Directory: ",5);\u000a      __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a      __printf_chk(1,"%-29s",ppVar1->pw_dir);\u000a      auVar5 = dcgettext(0,"Shell: ",5);\u000a      __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a      __printf_chk(1,0x405e65,ppVar1->pw_shell);\u000a      putchar_unlocked(10);\u000a    }\u000a    if (include_project == 0) {\u000a      __n = strlen(ppVar1->pw_dir);\u000a      __dest = (char *)xmalloc(__n + 10);\u000a      puVar2 = (undefined8 *)stpcpy(__dest,ppVar1->pw_dir);\u000a      *puVar2 = 0x63656a6f72702e2f;\u000a      *(undefined2 *)(puVar2 + 1) = 0x74;\u000a      fp = (FILE *)fopen(__dest,"r");\u000a      if (fp != (FILE *)0x0) {\u000a        auVar5 = dcgettext(0,"Project: ",5);\u000a        __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a        __n = fread_unlocked(auStack1064,1,0x400,(FILE *)fp);\u000a        while (__n != 0) {\u000a          fwrite_unlocked(auStack1064,1,__n,stdout);\u000a          __n = fread_unlocked(auStack1064,1,0x400,(FILE *)fp);\u000a        }\u000a        rpl_fclose(fp);\u000a      }\u000a      free(__dest);\u000a    }\u000a    if (include_plan == 0) {\u000a      __n = strlen(ppVar1->pw_dir);\u000a      __dest = (char *)xmalloc(__n + 7);\u000a      puVar3 = (undefined4 *)stpcpy(__dest,ppVar1->pw_dir);\u000a      *(undefined *)((long)puVar3 + 6) = 0;\u000a      *(undefined2 *)(puVar3 + 1) = 0x6e61;\u000a      *puVar3 = 0x6c702e2f;\u000a      fp = (FILE *)fopen(__dest,"r");\u000a      if (fp != (FILE *)0x0) {\u000a        auVar5 = dcgettext(0,"Plan:\u005cn",5);\u000a        __printf_chk(1,SUB168(auVar5,0),SUB168(auVar5 >> 0x40,0),SUB168(auVar5,0));\u000a        __n = fread_unlocked(auStack1064,1,0x400,(FILE *)fp);\u000a        while (__n != 0) {\u000a          fwrite_unlocked(auStack1064,1,__n,stdout);\u000a          __n = fread_unlocked(auStack1064,1,0x400,(FILE *)fp);\u000a        }\u000a        rpl_fclose(fp);\u000a      }\u000a      free(__dest);\u000a    }\u000a    putchar_unlocked(10);\u000a    return;\u000a  }\u000a  uVar4 = dcgettext(0,&DAT_00405e10,5);\u000a  __printf_chk(1,0x405e65,uVar4,uVar4);\u000a  return;\u000a}\u000a\u000a
p1123
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x408\nMOV RBX,RDI\nCALL 0x00401860\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x405dee\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nMOV EDI,0x1\nMOV ESI,0x405dfb\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x405e01\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nTEST R15,R15\nJZ 0x00402afa\nMOV RDI,qword ptr [R15 + 0x18]\nMOV ESI,0x2c\nCALL 0x00401790\nTEST RAX,RAX\nJZ 0x00402862\nMOV byte ptr [RAX],0x0\nMOV RSI,qword ptr [R15]\nMOV RDI,qword ptr [R15 + 0x18]\nCALL 0x00402530\nMOV RBX,RAX\nMOV EDI,0x1\nMOV ESI,0x405e65\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401970\nMOV RDI,RBX\nCALL 0x00401640\nMOV EDI,0xa\nCALL 0x00401890\nMOV AL,byte ptr [0x00609317]\nTEST AL,AL\nJNZ 0x0040291b\nXOR EDI,EDI\nMOV ESI,0x405e15\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nMOV RDX,qword ptr [R15 + 0x20]\nMOV EDI,0x1\nMOV ESI,0x405e21\nXOR EAX,EAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x405e27\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nMOV RDX,qword ptr [R15 + 0x28]\nMOV EDI,0x1\nMOV ESI,0x405e65\nXOR EAX,EAX\nCALL 0x00401970\nMOV EDI,0xa\nCALL 0x00401890\nMOV AL,byte ptr [0x00609315]\nTEST AL,AL\nJNZ 0x00402a01\nMOV RDI,qword ptr [R15 + 0x20]\nCALL 0x00401760\nLEA RDI,[RAX + 0xa]\nCALL 0x00404bd0\nMOV R14,RAX\nMOV RSI,qword ptr [R15 + 0x20]\nMOV RDI,R14\nCALL 0x00401730\nMOV RCX,0x63656a6f72702e2f\nMOV qword ptr [RAX],RCX\nMOV word ptr [RAX + 0x8],0x74\nMOV ESI,0x405e60\nMOV RDI,R14\nCALL 0x004019d0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004029f9\nXOR EDI,EDI\nMOV ESI,0x405e39\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nMOV RDI,RSP\nMOV ESI,0x1\nMOV EDX,0x400\nMOV RCX,R12\nCALL 0x004016e0\nTEST RAX,RAX\nJZ 0x004029f1\nMOV RBX,RSP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [0x006092e8]\nMOV ESI,0x1\nMOV RDI,RBX\nMOV RDX,RAX\nCALL 0x00401930\nMOV ESI,0x1\nMOV EDX,0x400\nMOV RDI,RBX\nMOV RCX,R12\nCALL 0x004016e0\nTEST RAX,RAX\nJNZ 0x004029c0\nMOV RDI,R12\nCALL 0x00404de0\nMOV RDI,R14\nCALL 0x00401640\nMOV AL,byte ptr [0x00609316]\nTEST AL,AL\nJNZ 0x00402ae1\nMOV RDI,qword ptr [R15 + 0x20]\nCALL 0x00401760\nLEA RDI,[RAX + 0x7]\nCALL 0x00404bd0\nMOV R14,RAX\nMOV RSI,qword ptr [R15 + 0x20]\nMOV RDI,R14\nCALL 0x00401730\nMOV byte ptr [RAX + 0x6],0x0\nMOV word ptr [RAX + 0x4],0x6e61\nMOV dword ptr [RAX],0x6c702e2f\nMOV ESI,0x405e60\nMOV RDI,R14\nCALL 0x004019d0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00402ad9\nXOR EDI,EDI\nMOV ESI,0x405e4a\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401970\nMOV RDI,RSP\nMOV ESI,0x1\nMOV EDX,0x400\nMOV RCX,R15\nCALL 0x004016e0\nTEST RAX,RAX\nJZ 0x00402ad1\nMOV RBX,RSP\nNOP dword ptr [RAX]\nMOV RCX,qword ptr [0x006092e8]\nMOV ESI,0x1\nMOV RDI,RBX\nMOV RDX,RAX\nCALL 0x00401930\nMOV ESI,0x1\nMOV EDX,0x400\nMOV RDI,RBX\nMOV RCX,R15\nCALL 0x004016e0\nTEST RAX,RAX\nJNZ 0x00402aa0\nMOV RDI,R15\nCALL 0x00404de0\nMOV RDI,R14\nCALL 0x00401640\nMOV EDI,0xa\nCALL 0x00401890\nADD RSP,0x408\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x405e10\nMOV EDX,0x5\nCALL 0x00401740\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x405e65\nXOR EAX,EAX\nMOV RDX,RCX\nADD RSP,0x408\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401970\n'
p1124
S'41 57\n41 56\n41 54\n53\n48 81 ec 08 04 00 00\n48 89 fb\ne8 7a f0 ff ff\n49 89 c7\n31 ff\nbe ee 5d 40 00\nba 05 00 00 00\ne8 46 ef ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 64 f1 ff ff\nbf 01 00 00 00\nbe fb 5d 40 00\n31 c0\n48 89 da\ne8 50 f1 ff ff\n31 ff\nbe 01 5e 40 00\nba 05 00 00 00\ne8 0f ef ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 2d f1 ff ff\n4d 85 ff\n0f 84 ae 02 00 00\n49 8b 7f 18\nbe 2c 00 00 00\ne8 36 ef ff ff\n48 85 c0\n74 03\nc6 00 00\n49 8b 37\n49 8b 7f 18\ne8 c2 fc ff ff\n48 89 c3\nbf 01 00 00 00\nbe 65 5e 40 00\n31 c0\n48 89 da\ne8 eb f0 ff ff\n48 89 df\ne8 b3 ed ff ff\nbf 0a 00 00 00\ne8 f9 ef ff ff\n8a 05 7a 6a 20 00\n84 c0\n75 7a\n31 ff\nbe 15 5e 40 00\nba 05 00 00 00\ne8 8e ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 ac f0 ff ff\n49 8b 57 20\nbf 01 00 00 00\nbe 21 5e 40 00\n31 c0\ne8 97 f0 ff ff\n31 ff\nbe 27 5e 40 00\nba 05 00 00 00\ne8 56 ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 74 f0 ff ff\n49 8b 57 28\nbf 01 00 00 00\nbe 65 5e 40 00\n31 c0\ne8 5f f0 ff ff\nbf 0a 00 00 00\ne8 75 ef ff ff\n8a 05 f4 69 20 00\n84 c0\n0f 85 d8 00 00 00\n49 8b 7f 20\ne8 2e ee ff ff\n48 8d 78 0a\ne8 95 22 00 00\n49 89 c6\n49 8b 77 20\n4c 89 f7\ne8 e6 ed ff ff\n48 b9 2f 2e 70 72 6f 6a 65 63\n48 89 08\n66 c7 40 08 74 00\nbe 60 5e 40 00\n4c 89 f7\ne8 66 f0 ff ff\n49 89 c4\n4d 85 e4\n0f 84 83 00 00 00\n31 ff\nbe 39 5e 40 00\nba 05 00 00 00\ne8 b9 ed ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 d7 ef ff ff\n48 89 e7\nbe 01 00 00 00\nba 00 04 00 00\n4c 89 e1\ne8 32 ed ff ff\n48 85 c0\n74 3e\n48 89 e3\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 0d 21 69 20 00\nbe 01 00 00 00\n48 89 df\n48 89 c2\ne8 59 ef ff ff\nbe 01 00 00 00\nba 00 04 00 00\n48 89 df\n4c 89 e1\ne8 f4 ec ff ff\n48 85 c0\n75 cf\n4c 89 e7\ne8 e7 23 00 00\n4c 89 f7\ne8 3f ec ff ff\n8a 05 0f 69 20 00\n84 c0\n0f 85 d2 00 00 00\n49 8b 7f 20\ne8 48 ed ff ff\n48 8d 78 07\ne8 af 21 00 00\n49 89 c6\n49 8b 77 20\n4c 89 f7\ne8 00 ed ff ff\nc6 40 06 00\n66 c7 40 04 61 6e\nc7 00 2f 2e 70 6c\nbe 60 5e 40 00\n4c 89 f7\ne8 83 ef ff ff\n49 89 c7\n4d 85 ff\n0f 84 80 00 00 00\n31 ff\nbe 4a 5e 40 00\nba 05 00 00 00\ne8 d6 ec ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 f4 ee ff ff\n48 89 e7\nbe 01 00 00 00\nba 00 04 00 00\n4c 89 f9\ne8 4f ec ff ff\n48 85 c0\n74 3b\n48 89 e3\n0f 1f 80 00 00 00 00\n48 8b 0d 41 68 20 00\nbe 01 00 00 00\n48 89 df\n48 89 c2\ne8 79 ee ff ff\nbe 01 00 00 00\nba 00 04 00 00\n48 89 df\n4c 89 f9\ne8 14 ec ff ff\n48 85 c0\n75 cf\n4c 89 ff\ne8 07 23 00 00\n4c 89 f7\ne8 5f eb ff ff\nbf 0a 00 00 00\ne8 a5 ed ff ff\n48 81 c4 08 04 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n31 ff\nbe 10 5e 40 00\nba 05 00 00 00\ne8 35 ec ff ff\n48 89 c1\nbf 01 00 00 00\nbe 65 5e 40 00\n31 c0\n48 89 ca\n48 81 c4 08 04 00 00\n5b\n41 5c\n41 5e\n41 5f\ne9 40 ee ff ff\n'
p1125
S'.text:00000000004027d0\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d6\n.text:00000000004027d7\n.text:00000000004027de\n.text:00000000004027e1\n.text:00000000004027e6\n.text:00000000004027e9\n.text:00000000004027eb\n.text:00000000004027f0\n.text:00000000004027f5\n.text:00000000004027fa\n.text:00000000004027fd\n.text:0000000000402802\n.text:0000000000402804\n.text:0000000000402807\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402816\n.text:0000000000402818\n.text:000000000040281b\n.text:0000000000402820\n.text:0000000000402822\n.text:0000000000402827\n.text:000000000040282c\n.text:0000000000402831\n.text:0000000000402834\n.text:0000000000402839\n.text:000000000040283b\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402846\n.text:000000000040284c\n.text:0000000000402850\n.text:0000000000402855\n.text:000000000040285a\n.text:000000000040285d\n.text:000000000040285f\n.text:0000000000402862\n.text:0000000000402865\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402871\n.text:0000000000402876\n.text:000000000040287b\n.text:000000000040287d\n.text:0000000000402880\n.text:0000000000402885\n.text:0000000000402888\n.text:000000000040288d\n.text:0000000000402892\n.text:0000000000402897\n.text:000000000040289d\n.text:000000000040289f\n.text:00000000004028a1\n.text:00000000004028a3\n.text:00000000004028a8\n.text:00000000004028ad\n.text:00000000004028b2\n.text:00000000004028b5\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028bf\n.text:00000000004028c4\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d4\n.text:00000000004028d9\n.text:00000000004028db\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028ea\n.text:00000000004028ed\n.text:00000000004028f2\n.text:00000000004028f4\n.text:00000000004028f7\n.text:00000000004028fc\n.text:0000000000402900\n.text:0000000000402905\n.text:000000000040290a\n.text:000000000040290c\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291b\n.text:0000000000402921\n.text:0000000000402923\n.text:0000000000402929\n.text:000000000040292d\n.text:0000000000402932\n.text:0000000000402936\n.text:000000000040293b\n.text:000000000040293e\n.text:0000000000402942\n.text:0000000000402945\n.text:000000000040294a\n.text:0000000000402954\n.text:0000000000402957\n.text:000000000040295d\n.text:0000000000402962\n.text:0000000000402965\n.text:000000000040296a\n.text:000000000040296d\n.text:0000000000402970\n.text:0000000000402976\n.text:0000000000402978\n.text:000000000040297d\n.text:0000000000402982\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298f\n.text:0000000000402991\n.text:0000000000402994\n.text:0000000000402999\n.text:000000000040299c\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b6\n.text:00000000004029c0\n.text:00000000004029c7\n.text:00000000004029cc\n.text:00000000004029cf\n.text:00000000004029d2\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029e1\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029ec\n.text:00000000004029ef\n.text:00000000004029f1\n.text:00000000004029f4\n.text:00000000004029f9\n.text:00000000004029fc\n.text:0000000000402a01\n.text:0000000000402a07\n.text:0000000000402a09\n.text:0000000000402a0f\n.text:0000000000402a13\n.text:0000000000402a18\n.text:0000000000402a1c\n.text:0000000000402a21\n.text:0000000000402a24\n.text:0000000000402a28\n.text:0000000000402a2b\n.text:0000000000402a30\n.text:0000000000402a34\n.text:0000000000402a3a\n.text:0000000000402a40\n.text:0000000000402a45\n.text:0000000000402a48\n.text:0000000000402a4d\n.text:0000000000402a50\n.text:0000000000402a53\n.text:0000000000402a59\n.text:0000000000402a5b\n.text:0000000000402a60\n.text:0000000000402a65\n.text:0000000000402a6a\n.text:0000000000402a6d\n.text:0000000000402a72\n.text:0000000000402a74\n.text:0000000000402a77\n.text:0000000000402a7c\n.text:0000000000402a7f\n.text:0000000000402a84\n.text:0000000000402a89\n.text:0000000000402a8c\n.text:0000000000402a91\n.text:0000000000402a94\n.text:0000000000402a96\n.text:0000000000402a99\n.text:0000000000402aa0\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402aaf\n.text:0000000000402ab2\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402ac1\n.text:0000000000402ac4\n.text:0000000000402ac7\n.text:0000000000402acc\n.text:0000000000402acf\n.text:0000000000402ad1\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402af2\n.text:0000000000402af3\n.text:0000000000402af5\n.text:0000000000402af7\n.text:0000000000402af9\n.text:0000000000402afa\n.text:0000000000402afc\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b0b\n.text:0000000000402b0e\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b24\n.text:0000000000402b25\n.text:0000000000402b27\n.text:0000000000402b29\n.text:0000000000402b2b\n'
p1126
tp1127
sS'strcaseeq7'
p1128
(S'\n__stdcall strcaseeq7()\n'
p1129
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1130
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404692\nTEST ECX,0xffffffdf\nJNZ 0x00404696\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040469a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1131
S'53\n48 89 fb\n31 ff\ne8 05 0b 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1132
S'.text:0000000000404670\n.text:0000000000404671\n.text:0000000000404674\n.text:0000000000404676\n.text:000000000040467b\n.text:000000000040467f\n.text:0000000000404681\n.text:0000000000404683\n.text:0000000000404689\n.text:000000000040468b\n.text:0000000000404690\n.text:0000000000404691\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404696\n.text:0000000000404698\n.text:0000000000404699\n.text:000000000040469a\n.text:000000000040469f\n.text:00000000004046a0\n'
p1133
tp1134
sS'version_etc_va'
p1135
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1136
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1137
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404a70\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404a7c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404a91\nINC R9\nCMP R9,0xa\nJC 0x00404a50\nMOV R8,RSP\nCALL 0x004046b0\nADD RSP,0x58\nRET\n'
p1138
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1139
S'.text:0000000000404a40\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a50\n.text:0000000000404a53\n.text:0000000000404a57\n.text:0000000000404a59\n.text:0000000000404a5c\n.text:0000000000404a60\n.text:0000000000404a64\n.text:0000000000404a67\n.text:0000000000404a70\n.text:0000000000404a74\n.text:0000000000404a78\n.text:0000000000404a7c\n.text:0000000000404a7f\n.text:0000000000404a83\n.text:0000000000404a86\n.text:0000000000404a88\n.text:0000000000404a8b\n.text:0000000000404a8f\n.text:0000000000404a91\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9d\n'
p1140
tp1141
sS'xzalloc'
p1142
(S'\n__stdcall xzalloc(size_t s)\n'
p1143
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1144
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404bd0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004017d0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1145
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 f4 ca ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1146
S'.text:0000000000404cc0\n.text:0000000000404cc2\n.text:0000000000404cc3\n.text:0000000000404cc4\n.text:0000000000404cc7\n.text:0000000000404ccc\n.text:0000000000404ccf\n.text:0000000000404cd1\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce3\n.text:0000000000404ce4\n.text:0000000000404ce6\n'
p1147
tp1148
sS'__strdup'
p1149
(S'\n__stdcall __strdup()\n'
p1150
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_00609110)();\u000a  return;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x00609110]\n'
p1152
S'ff 25 0a 79 20 00\n'
p1153
S'.plt:0000000000401800\n'
p1154
tp1155
sS'strcaseeq0'
p1156
(S'\n__stdcall strcaseeq0()\n'
p1157
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004043a5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004043ac\nJMP 0x004043e0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004043e0\nTEST BPL,BPL\nJZ 0x004043db\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004043f0\nJMP 0x004043e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ed 0d 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1160
S'.text:0000000000404370\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404377\n.text:0000000000404379\n.text:000000000040437a\n.text:000000000040437b\n.text:000000000040437e\n.text:0000000000404381\n.text:0000000000404384\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438c\n.text:000000000040438e\n.text:0000000000404393\n.text:0000000000404396\n.text:0000000000404398\n.text:000000000040439a\n.text:000000000040439d\n.text:000000000040439f\n.text:00000000004043a1\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043a7\n.text:00000000004043aa\n.text:00000000004043ac\n.text:00000000004043af\n.text:00000000004043b1\n.text:00000000004043b5\n.text:00000000004043ba\n.text:00000000004043bd\n.text:00000000004043c1\n.text:00000000004043c5\n.text:00000000004043c9\n.text:00000000004043cd\n.text:00000000004043d1\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043db\n.text:00000000004043e0\n.text:00000000004043e4\n.text:00000000004043e5\n.text:00000000004043e7\n.text:00000000004043e9\n.text:00000000004043eb\n.text:00000000004043ed\n.text:00000000004043ee\n'
p1161
tp1162
sS'endutxent'
p1163
(S'\n__stdcall endutxent()\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endutxent(void)\u000a\u000a{\u000a  (*(code *)PTR_endutxent_00609090)();\u000a  return;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x00609090]\n'
p1166
S'ff 25 8a 79 20 00\n'
p1167
S'.plt:0000000000401700\n'
p1168
tp1169
sS'strcaseeq2'
p1170
(S'\n__stdcall strcaseeq2()\n'
p1171
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004044b6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044bd\nJMP 0x004044ea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004044ea\nTEST BPL,BPL\nJZ 0x004044e5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404500\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1173
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 0c 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1174
S'.text:0000000000404480\n.text:0000000000404481\n.text:0000000000404483\n.text:0000000000404485\n.text:0000000000404487\n.text:0000000000404489\n.text:000000000040448a\n.text:000000000040448b\n.text:000000000040448e\n.text:0000000000404491\n.text:0000000000404494\n.text:0000000000404497\n.text:0000000000404499\n.text:000000000040449c\n.text:000000000040449e\n.text:00000000004044a3\n.text:00000000004044a7\n.text:00000000004044a9\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b0\n.text:00000000004044b2\n.text:00000000004044b4\n.text:00000000004044b6\n.text:00000000004044b8\n.text:00000000004044bb\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c6\n.text:00000000004044ca\n.text:00000000004044ce\n.text:00000000004044d2\n.text:00000000004044d5\n.text:00000000004044d9\n.text:00000000004044da\n.text:00000000004044dc\n.text:00000000004044de\n.text:00000000004044e0\n.text:00000000004044e2\n.text:00000000004044e3\n.text:00000000004044e5\n.text:00000000004044ea\n.text:00000000004044ee\n.text:00000000004044ef\n.text:00000000004044f1\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044f7\n.text:00000000004044f8\n'
p1175
tp1176
sS'strcaseeq1'
p1177
(S'\n__stdcall strcaseeq1()\n'
p1178
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040442d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404434\nJMP 0x00404467\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404467\nTEST BPL,BPL\nJZ 0x00404462\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404480\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 66 0d 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1181
S'.text:00000000004043f0\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f7\n.text:00000000004043f9\n.text:00000000004043fa\n.text:00000000004043fb\n.text:0000000000404400\n.text:0000000000404403\n.text:0000000000404406\n.text:0000000000404409\n.text:000000000040440b\n.text:000000000040440e\n.text:0000000000404413\n.text:0000000000404415\n.text:000000000040441a\n.text:000000000040441e\n.text:0000000000404420\n.text:0000000000404422\n.text:0000000000404425\n.text:0000000000404427\n.text:0000000000404429\n.text:000000000040442b\n.text:000000000040442d\n.text:000000000040442f\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404437\n.text:0000000000404439\n.text:000000000040443d\n.text:0000000000404441\n.text:0000000000404445\n.text:000000000040444b\n.text:000000000040444f\n.text:0000000000404452\n.text:0000000000404456\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445b\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404460\n.text:0000000000404462\n.text:0000000000404467\n.text:000000000040446b\n.text:000000000040446c\n.text:000000000040446e\n.text:0000000000404470\n.text:0000000000404472\n.text:0000000000404474\n.text:0000000000404475\n'
p1182
tp1183
sS'strcaseeq4'
p1184
(S'\n__stdcall strcaseeq4()\n'
p1185
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040459c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004045a3\nJMP 0x004045c4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004045c4\nTEST BPL,BPL\nJZ 0x004045bf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004045d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1187
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 f7 0b 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1188
S'.text:0000000000404570\n.text:0000000000404571\n.text:0000000000404573\n.text:0000000000404575\n.text:0000000000404576\n.text:0000000000404577\n.text:000000000040457a\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404582\n.text:0000000000404584\n.text:0000000000404589\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404591\n.text:0000000000404594\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459a\n.text:000000000040459c\n.text:000000000040459e\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a6\n.text:00000000004045a8\n.text:00000000004045ac\n.text:00000000004045b0\n.text:00000000004045b3\n.text:00000000004045b7\n.text:00000000004045b8\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045bd\n.text:00000000004045bf\n.text:00000000004045c4\n.text:00000000004045c8\n.text:00000000004045c9\n.text:00000000004045cb\n.text:00000000004045cd\n.text:00000000004045ce\n'
p1189
tp1190
sS'getpwnam'
p1191
(S'\n__stdcall getpwnam(char * __name)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_00609140)();\u000a  return ppVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x00609140]\n'
p1194
S'ff 25 da 78 20 00\n'
p1195
S'.plt:0000000000401860\n'
p1196
tp1197
sS'strcaseeq3'
p1198
(S'\n__stdcall strcaseeq3()\n'
p1199
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405180\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404530\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404537\nJMP 0x0040455a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040455a\nTEST BPL,BPL\nJZ 0x00404555\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404570\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1201
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 63 0c 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1202
S'.text:0000000000404500\n.text:0000000000404501\n.text:0000000000404503\n.text:0000000000404505\n.text:0000000000404507\n.text:0000000000404508\n.text:000000000040450b\n.text:000000000040450e\n.text:0000000000404511\n.text:0000000000404513\n.text:0000000000404516\n.text:0000000000404518\n.text:000000000040451d\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404525\n.text:0000000000404528\n.text:000000000040452a\n.text:000000000040452c\n.text:000000000040452e\n.text:0000000000404530\n.text:0000000000404532\n.text:0000000000404535\n.text:0000000000404537\n.text:000000000040453a\n.text:000000000040453c\n.text:0000000000404540\n.text:0000000000404544\n.text:0000000000404548\n.text:000000000040454b\n.text:000000000040454c\n.text:000000000040454e\n.text:0000000000404550\n.text:0000000000404552\n.text:0000000000404553\n.text:0000000000404555\n.text:000000000040455a\n.text:000000000040455b\n.text:000000000040455d\n.text:000000000040455f\n.text:0000000000404561\n.text:0000000000404562\n'
p1203
tp1204
sS'register_tm_clones'
p1205
(S'\n__stdcall register_tm_clones()\n'
p1206
V\u000a/* WARNING: Removing unreachable block (ram,0x00401b13) */\u000a/* WARNING: Removing unreachable block (ram,0x00401b1d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1207
S'MOV ESI,0x6092c8\nPUSH RBP\nSUB RSI,0x6092c8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401b28\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401b28\nPOP RBP\nMOV EDI,0x6092c8\nJMP RAX\nPOP RBP\nRET\n'
p1208
S'be c8 92 60 00\n55\n48 81 ee c8 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf c8 92 60 00\nff e0\n5d\nc3\n'
p1209
S'.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401af6\n.text:0000000000401afd\n.text:0000000000401b01\n.text:0000000000401b04\n.text:0000000000401b07\n.text:0000000000401b0b\n.text:0000000000401b0e\n.text:0000000000401b11\n.text:0000000000401b13\n.text:0000000000401b18\n.text:0000000000401b1b\n.text:0000000000401b1d\n.text:0000000000401b1e\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b29\n'
p1210
tp1211
sS'gettext_quote'
p1212
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1213
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406402;\u000a        pcVar2 = &DAT_00406406;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401740\nCMP RAX,RBX\nJNZ 0x00404368\nCALL 0x00405240\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404370\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404318\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4063f2\nMOV EAX,0x4063f6\nJMP 0x00404364\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404370\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404356\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406402\nMOV EAX,0x406406\nJMP 0x00404364\nCMP R14D,0x9\nMOV ECX,0x4063e6\nMOV EAX,0x4063ea\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1215
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 77 d4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 69 0f 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 f2 63 40 00\nb8 f6 63 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 02 64 40 00\nb8 06 64 40 00\neb 0e\n41 83 fe 09\nb9 e6 63 40 00\nb8 ea 63 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1216
S'.text:00000000004042b0\n.text:00000000004042b1\n.text:00000000004042b3\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042ba\n.text:00000000004042bc\n.text:00000000004042c1\n.text:00000000004042c4\n.text:00000000004042c9\n.text:00000000004042cc\n.text:00000000004042d2\n.text:00000000004042d7\n.text:00000000004042da\n.text:00000000004042df\n.text:00000000004042e4\n.text:00000000004042e9\n.text:00000000004042ef\n.text:00000000004042f5\n.text:00000000004042f8\n.text:00000000004042fa\n.text:00000000004042fc\n.text:0000000000404301\n.text:0000000000404305\n.text:0000000000404307\n.text:0000000000404309\n.text:000000000040430c\n.text:0000000000404311\n.text:0000000000404316\n.text:0000000000404318\n.text:000000000040431d\n.text:0000000000404322\n.text:0000000000404327\n.text:000000000040432d\n.text:0000000000404333\n.text:0000000000404336\n.text:0000000000404338\n.text:000000000040433a\n.text:000000000040433f\n.text:0000000000404343\n.text:0000000000404345\n.text:0000000000404347\n.text:000000000040434a\n.text:000000000040434f\n.text:0000000000404354\n.text:0000000000404356\n.text:000000000040435a\n.text:000000000040435f\n.text:0000000000404364\n.text:0000000000404368\n.text:0000000000404369\n.text:000000000040436b\n.text:000000000040436c\n'
p1217
tp1218
sS'scan_entries'
p1219
(S'\n__stdcall scan_entries(size_t n, STRUCT_UTMP * utmp_buf, char * * argv_names)\n'
p1220
V\u000avoid scan_entries(size_t n,STRUCT_UTMP *utmp_buf,char **argv_names)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  long in_RCX;\u000a  int iVar3;\u000a  long lVar4;\u000a  \u000a  iVar3 = (int)argv_names;\u000a  _Var1 = hard_locale();\u000a  time_format = "%b %e %H:%M";\u000a  if (_Var1 != false) {\u000a    time_format = "%Y-%m-%d %H:%M";\u000a  }\u000a  time_format_width = (uint)_Var1 * 4 + 0xc;\u000a  if (include_heading == 0) {\u000a    print_heading();\u000a  }\u000a  if (n != 0) {\u000a    do {\u000a      n = n - 1;\u000a      if ((utmp_buf->ut_user[0] != 0) && (utmp_buf->ut_type == 7)) {\u000a        if (iVar3 == 0) {\u000aLAB_0040210f:\u000a          print_entry(utmp_buf);\u000a        }\u000a        else {\u000a          if (0 < iVar3) {\u000a            lVar4 = 0;\u000a            do {\u000a              iVar2 = strncmp(utmp_buf->ut_user,*(char **)(in_RCX + lVar4 * 8),0x20);\u000a              if (iVar2 == 0) goto LAB_0040210f;\u000a              lVar4 = lVar4 + 1;\u000a            } while (lVar4 < (long)iVar3);\u000a          }\u000a        }\u000a      }\u000a      utmp_buf = utmp_buf + 1;\u000a    } while (n != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV dword ptr [RSP + 0x4],EDX\nMOV RBP,RSI\nMOV R12,RDI\nMOV EDI,0x2\nCALL 0x00402cb0\nMOV ECX,0x405d47\nMOV EDX,0x405d56\nTEST AL,AL\nCMOVNZ RDX,RCX\nMOVZX EAX,AL\nLEA EAX,[0xc + RAX*0x4]\nMOV qword ptr [0x00609318],RDX\nMOV dword ptr [0x00609320],EAX\nMOV AL,byte ptr [0x00609311]\nTEST AL,AL\nJNZ 0x004020a8\nCALL 0x00402140\nTEST R12,R12\nJZ 0x0040212c\nMOVSXD R13,dword ptr [RSP + 0x4]\nNOP word ptr CS:[RAX + RAX*0x1]\nDEC R12\nCMP byte ptr [RBP + 0x2c],0x0\nJZ 0x00402120\nMOVZX EAX,word ptr [RBP]\nCMP EAX,0x7\nJNZ 0x00402120\nLEA RBX,[RBP + 0x2c]\nCMP dword ptr [RSP + 0x4],0x0\nJZ 0x0040210f\nJLE 0x00402120\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15 + R14*0x8]\nMOV EDX,0x20\nMOV RDI,RBX\nCALL 0x00401690\nTEST EAX,EAX\nJZ 0x0040210f\nINC R14\nCMP R14,R13\nJL 0x004020f0\nJMP 0x00402120\nMOV RDI,RBP\nCALL 0x00402260\nNOP word ptr [RAX + RAX*0x1]\nADD RBP,0x180\nTEST R12,R12\nJNZ 0x004020c0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1222
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n89 54 24 04\n48 89 f5\n49 89 fc\nbf 02 00 00 00\ne8 3e 0c 00 00\nb9 47 5d 40 00\nba 56 5d 40 00\n84 c0\n48 0f 45 d1\n0f b6 c0\n8d 04 85 0c 00 00 00\n48 89 15 85 72 20 00\n89 05 87 72 20 00\n8a 05 72 72 20 00\n84 c0\n75 05\ne8 98 00 00 00\n4d 85 e4\n74 7f\n4c 63 6c 24 04\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff cc\n80 7d 2c 00\n74 57\n0f b7 45 00\n83 f8 07\n75 4e\n48 8d 5d 2c\n83 7c 24 04 00\n74 32\n7e 41\n45 31 f6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8b 34 f7\nba 20 00 00 00\n48 89 df\ne8 8f f5 ff ff\n85 c0\n74 0a\n49 ff c6\n4d 39 ee\n7c e3\neb 11\n48 89 ef\ne8 49 01 00 00\n66 0f 1f 84 00 00 00 00 00\n48 81 c5 80 01 00 00\n4d 85 e4\n75 94\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1223
S'.text:0000000000402050\n.text:0000000000402051\n.text:0000000000402053\n.text:0000000000402055\n.text:0000000000402057\n.text:0000000000402059\n.text:000000000040205a\n.text:000000000040205b\n.text:000000000040205e\n.text:0000000000402062\n.text:0000000000402065\n.text:0000000000402068\n.text:000000000040206d\n.text:0000000000402072\n.text:0000000000402077\n.text:000000000040207c\n.text:000000000040207e\n.text:0000000000402082\n.text:0000000000402085\n.text:000000000040208c\n.text:0000000000402093\n.text:0000000000402099\n.text:000000000040209f\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a8\n.text:00000000004020ab\n.text:00000000004020ad\n.text:00000000004020b2\n.text:00000000004020c0\n.text:00000000004020c3\n.text:00000000004020c7\n.text:00000000004020c9\n.text:00000000004020cd\n.text:00000000004020d0\n.text:00000000004020d2\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020df\n.text:00000000004020e2\n.text:00000000004020f0\n.text:00000000004020f4\n.text:00000000004020f9\n.text:00000000004020fc\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402105\n.text:0000000000402108\n.text:000000000040210b\n.text:000000000040210d\n.text:000000000040210f\n.text:0000000000402112\n.text:0000000000402117\n.text:0000000000402120\n.text:0000000000402127\n.text:000000000040212a\n.text:000000000040212c\n.text:0000000000402130\n.text:0000000000402131\n.text:0000000000402133\n.text:0000000000402135\n.text:0000000000402137\n.text:0000000000402139\n.text:000000000040213a\n'
p1224
tp1225
sS'c_islower'
p1226
(S'\n__stdcall c_islower()\n'
p1227
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1228
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1229
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1230
S'.text:0000000000405120\n.text:0000000000405123\n.text:0000000000405126\n.text:0000000000405129\n'
p1231
tp1232
sS'fclose'
p1233
(S'\n__stdcall fclose(FILE * __stream)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609098)();\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x00609098]\n'
p1236
S'ff 25 82 79 20 00\n'
p1237
S'.plt:0000000000401710\n'
p1238
tp1239
sS'__ctype_get_mb_cur_max'
p1240
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x006090b8]\n'
p1243
S'ff 25 62 79 20 00\n'
p1244
S'.plt:0000000000401750\n'
p1245
tp1246
sS'quotearg_n_style'
p1247
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1248
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403fe0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403db0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1250
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1251
S'.text:0000000000403fa0\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa4\n.text:0000000000403fa8\n.text:0000000000403fab\n.text:0000000000403fad\n.text:0000000000403fb2\n.text:0000000000403fb5\n.text:0000000000403fba\n.text:0000000000403fc1\n.text:0000000000403fc3\n.text:0000000000403fc6\n.text:0000000000403fc9\n.text:0000000000403fce\n.text:0000000000403fd2\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fd6\n'
p1252
tp1253
sS'fwrite'
p1254
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00609210)();\u000a  return sVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x00609210]\n'
p1257
S'ff 25 0a 78 20 00\n'
p1258
S'.plt:0000000000401a00\n'
p1259
tp1260
sS'quote_n'
p1261
(S'\n__stdcall quote_n(char * arg)\n'
p1262
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1263
S'MOV RDX,-0x1\nJMP 0x00404270\n'
p1264
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1265
S'.text:0000000000404290\n.text:0000000000404297\n'
p1266
tp1267
sS'quotearg_alloc'
p1268
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1269
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1270
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403c20\n'
p1271
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1272
S'.text:0000000000403c10\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c18\n'
p1273
tp1274
sS'__do_global_dtors_aux'
p1275
(S'\n__stdcall __do_global_dtors_aux()\n'
p1276
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1277
S'CMP byte ptr [0x00609308],0x0\nJNZ 0x00401b4a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401ab0\nPOP RBP\nMOV byte ptr [0x00609308],0x1\nRET\n'
p1278
S'80 3d d1 77 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 be 77 20 00 01\nf3 c3\n'
p1279
S'.text:0000000000401b30\n.text:0000000000401b37\n.text:0000000000401b39\n.text:0000000000401b3a\n.text:0000000000401b3d\n.text:0000000000401b42\n.text:0000000000401b43\n.text:0000000000401b4a\n'
p1280
tp1281
sS'close_stdout_set_file_name'
p1282
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1283
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1284
S'MOV qword ptr [0x006093b0],RDI\nRET\n'
p1285
S'48 89 3d d9 67 20 00\nc3\n'
p1286
S'.text:0000000000402bd0\n.text:0000000000402bd7\n'
p1287
tp1288
sS'c_isprint'
p1289
(S'\n__stdcall c_isprint()\n'
p1290
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1291
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1292
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1293
S'.text:0000000000405130\n.text:0000000000405133\n.text:0000000000405136\n.text:0000000000405139\n'
p1294
tp1295
sS'strncpy'
p1296
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p1297
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_00609050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1298
S'JMP qword ptr [0x00609050]\n'
p1299
S'ff 25 ca 79 20 00\n'
p1300
S'.plt:0000000000401680\n'
p1301
tp1302
sS'_fini'
p1303
(S'\n__stdcall _fini()\n'
p1304
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1305
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1306
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1307
S'.fini:0000000000405630\n.fini:0000000000405634\n.fini:0000000000405638\n'
p1308
tp1309
sS'time'
p1310
(S'\n__stdcall time(time_t * __timer)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atime_t time(time_t *__timer)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = (*(code *)PTR_time_00609168)();\u000a  return tVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x00609168]\n'
p1313
S'ff 25 b2 78 20 00\n'
p1314
S'.plt:00000000004018b0\n'
p1315
tp1316
sS'__fpending'
p1317
(S'\n__stdcall __fpending()\n'
p1318
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609070)();\u000a  return;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x00609070]\n'
p1320
S'ff 25 aa 79 20 00\n'
p1321
S'.plt:00000000004016c0\n'
p1322
tp1323
s.