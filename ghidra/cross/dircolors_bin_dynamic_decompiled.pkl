(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004013e8\nTEST RBP,RBP\nJZ 0x00405396\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405380\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 b6 4a 20 00\n55\n48 8d 2d b6 4a 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 77 c0 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405340\n.text:0000000000405342\n.text:0000000000405344\n.text:0000000000405347\n.text:0000000000405349\n.text:000000000040534b\n.text:0000000000405352\n.text:0000000000405353\n.text:000000000040535a\n.text:000000000040535b\n.text:000000000040535e\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405368\n.text:000000000040536c\n.text:0000000000405371\n.text:0000000000405374\n.text:0000000000405376\n.text:0000000000405378\n.text:0000000000405380\n.text:0000000000405383\n.text:0000000000405386\n.text:0000000000405389\n.text:000000000040538d\n.text:0000000000405391\n.text:0000000000405394\n.text:0000000000405396\n.text:000000000040539a\n.text:000000000040539b\n.text:000000000040539c\n.text:000000000040539e\n.text:00000000004053a0\n.text:00000000004053a2\n.text:00000000004053a4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a140)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060a140]\n'
p11
S'ff 25 da 8a 20 00\n'
p12
S'.plt:0000000000401660\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000404ed0\n.text:0000000000404ed3\n.text:0000000000404ed6\n.text:0000000000404ed9\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004076b3,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404447;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4044c8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40455c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004042d8\nMOV EDX,0x4076a0\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401740\nJMP 0x004042ed\nMOV EDX,0x4076ac\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4076b3\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x407980\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4076b7\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004015c0\nCMP R12,0x9\nJA 0x00404376\nJMP qword ptr [0x407650 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x407782\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4078c1\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x38\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x407792\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4077a9\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4077c5\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x18\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x4077e5\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x18\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x407809\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x28\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x407831\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x28\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x40785d\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x38\nJMP 0x004045e7\nXOR EDI,EDI\nMOV ESI,0x40788d\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401740\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401430\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba a0 76 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 6a d4 ff ff\neb 15\nba ac 76 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 53 d4 ff ff\n31 ff\nbe b3 76 40 00\nba 05 00 00 00\ne8 e2 d1 ff ff\n48 89 c1\nbe 01 00 00 00\nba 80 79 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 25 d4 ff ff\n31 ff\nbe b7 76 40 00\nba 05 00 00 00\ne8 b4 d1 ff ff\n48 89 c7\n4c 89 f6\ne8 89 d2 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 50 76 40 00\n31 ff\nbe 82 77 40 00\nba 05 00 00 00\ne8 8a d1 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ca d3 ff ff\n31 ff\nbe c1 78 40 00\nba 05 00 00 00\ne8 59 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 81 d3 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 92 77 40 00\nba 05 00 00 00\ne8 07 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 43 d3 ff ff\n31 ff\nbe a9 77 40 00\nba 05 00 00 00\ne8 d2 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 0a d3 ff ff\n31 ff\nbe c5 77 40 00\nba 05 00 00 00\ne8 99 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 d4 d2 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe e5 77 40 00\nba 05 00 00 00\ne8 5a d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 92 d2 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 09 78 40 00\nba 05 00 00 00\ne8 18 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 48 d2 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 31 78 40 00\nba 05 00 00 00\ne8 ce cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fe d1 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 5d 78 40 00\nba 05 00 00 00\ne8 84 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ac d1 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 8d 78 40 00\nba 05 00 00 00\ne8 35 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 5d d1 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 3c ce ff ff\n'
p26
S'.text:00000000004042a0\n.text:00000000004042a2\n.text:00000000004042a4\n.text:00000000004042a6\n.text:00000000004042a7\n.text:00000000004042a8\n.text:00000000004042ab\n.text:00000000004042ae\n.text:00000000004042b1\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042ba\n.text:00000000004042bf\n.text:00000000004042c2\n.text:00000000004042c4\n.text:00000000004042c9\n.text:00000000004042cb\n.text:00000000004042ce\n.text:00000000004042d1\n.text:00000000004042d6\n.text:00000000004042d8\n.text:00000000004042dd\n.text:00000000004042df\n.text:00000000004042e2\n.text:00000000004042e5\n.text:00000000004042e8\n.text:00000000004042ed\n.text:00000000004042ef\n.text:00000000004042f4\n.text:00000000004042f9\n.text:00000000004042fe\n.text:0000000000404301\n.text:0000000000404306\n.text:000000000040430b\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404316\n.text:000000000040431b\n.text:000000000040431d\n.text:0000000000404322\n.text:0000000000404327\n.text:000000000040432c\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404337\n.text:000000000040433b\n.text:000000000040433d\n.text:0000000000404345\n.text:0000000000404347\n.text:000000000040434c\n.text:0000000000404351\n.text:0000000000404356\n.text:0000000000404359\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404366\n.text:000000000040436a\n.text:000000000040436b\n.text:000000000040436d\n.text:000000000040436f\n.text:0000000000404371\n.text:0000000000404376\n.text:0000000000404378\n.text:000000000040437d\n.text:0000000000404382\n.text:0000000000404387\n.text:000000000040438a\n.text:000000000040438d\n.text:0000000000404391\n.text:0000000000404395\n.text:000000000040439a\n.text:000000000040439f\n.text:00000000004043a2\n.text:00000000004043a6\n.text:00000000004043aa\n.text:00000000004043ae\n.text:00000000004043b2\n.text:00000000004043b6\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c3\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043dc\n.text:00000000004043df\n.text:00000000004043e3\n.text:00000000004043e8\n.text:00000000004043ea\n.text:00000000004043ed\n.text:00000000004043f1\n.text:00000000004043f2\n.text:00000000004043f4\n.text:00000000004043f6\n.text:00000000004043f8\n.text:00000000004043fd\n.text:00000000004043ff\n.text:0000000000404404\n.text:0000000000404409\n.text:000000000040440e\n.text:0000000000404411\n.text:0000000000404414\n.text:0000000000404418\n.text:000000000040441c\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404426\n.text:000000000040442a\n.text:000000000040442b\n.text:000000000040442d\n.text:000000000040442f\n.text:0000000000404431\n.text:0000000000404436\n.text:0000000000404438\n.text:000000000040443d\n.text:0000000000404442\n.text:0000000000404447\n.text:000000000040444a\n.text:000000000040444d\n.text:0000000000404451\n.text:0000000000404455\n.text:0000000000404459\n.text:000000000040445e\n.text:0000000000404460\n.text:0000000000404463\n.text:0000000000404467\n.text:000000000040446c\n.text:0000000000404470\n.text:0000000000404475\n.text:0000000000404477\n.text:000000000040447c\n.text:0000000000404481\n.text:0000000000404486\n.text:0000000000404489\n.text:000000000040448c\n.text:0000000000404490\n.text:0000000000404494\n.text:0000000000404499\n.text:000000000040449e\n.text:00000000004044a1\n.text:00000000004044a5\n.text:00000000004044a9\n.text:00000000004044ae\n.text:00000000004044b2\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044be\n.text:00000000004044c3\n.text:00000000004044c8\n.text:00000000004044cb\n.text:00000000004044ce\n.text:00000000004044d2\n.text:00000000004044d6\n.text:00000000004044da\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e7\n.text:00000000004044eb\n.text:00000000004044ef\n.text:00000000004044f3\n.text:00000000004044f8\n.text:00000000004044fc\n.text:0000000000404501\n.text:0000000000404503\n.text:0000000000404508\n.text:000000000040450d\n.text:0000000000404512\n.text:0000000000404515\n.text:0000000000404518\n.text:000000000040451c\n.text:0000000000404520\n.text:0000000000404525\n.text:000000000040452a\n.text:000000000040452d\n.text:0000000000404531\n.text:0000000000404535\n.text:0000000000404539\n.text:000000000040453d\n.text:0000000000404542\n.text:0000000000404546\n.text:000000000040454b\n.text:000000000040454d\n.text:0000000000404552\n.text:0000000000404557\n.text:000000000040455c\n.text:000000000040455f\n.text:0000000000404562\n.text:0000000000404566\n.text:000000000040456a\n.text:000000000040456e\n.text:0000000000404573\n.text:0000000000404578\n.text:000000000040457b\n.text:000000000040457f\n.text:0000000000404583\n.text:0000000000404587\n.text:000000000040458b\n.text:000000000040458f\n.text:0000000000404594\n.text:0000000000404598\n.text:000000000040459a\n.text:000000000040459c\n.text:00000000004045a1\n.text:00000000004045a6\n.text:00000000004045ab\n.text:00000000004045ae\n.text:00000000004045b1\n.text:00000000004045b5\n.text:00000000004045b9\n.text:00000000004045be\n.text:00000000004045c3\n.text:00000000004045c6\n.text:00000000004045ca\n.text:00000000004045ce\n.text:00000000004045d2\n.text:00000000004045d6\n.text:00000000004045da\n.text:00000000004045de\n.text:00000000004045e3\n.text:00000000004045e7\n.text:00000000004045e8\n.text:00000000004045ea\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045ef\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Output commands to set the LS_COLORS environment variable.\u005cn\u005cnDetermine format of output:\u005cn  -b, --sh, --bourne-shell    output Bourne shell code to set LS_COLORS\u005cn  -c, --csh, --c-shell        output C shell code to set LS_COLORS\u005cn  -p, --print-database        output defaults\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnIf FILE is specified, read it to determine which colors to use for which\u005cnfile types and extensions.  Otherwise, a precompiled database is used.\u005cnFor details on the format of these files, run \u005c'dircolors --print-database\u005c'.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401941\nXOR EDI,EDI\nMOV ESI,0x406990\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a318]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016c0\nXOR EDI,EDI\nMOV ESI,0x4069ae\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406ac0\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406aed\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406b23\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x004015c0\nCALL 0x00401990\nMOV EDI,EBX\nCALL 0x00401720\nCALL 0x00401950\nMOV EDI,EBX\nCALL 0x00401720\n'
p32
S'53\n89 fb\n85 db\n0f 85 b6 00 00 00\n31 ff\nbe 90 69 40 00\nba 05 00 00 00\ne8 44 fc ff ff\n48 89 c1\n48 8b 15 72 8a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 0b fe ff ff\n31 ff\nbe ae 69 40 00\nba 05 00 00 00\ne8 1a fc ff ff\n48 8b 35 9b 89 20 00\n48 89 c7\ne8 eb fc ff ff\n31 ff\nbe c0 6a 40 00\nba 05 00 00 00\ne8 fa fb ff ff\n48 8b 35 7b 89 20 00\n48 89 c7\ne8 cb fc ff ff\n31 ff\nbe ed 6a 40 00\nba 05 00 00 00\ne8 da fb ff ff\n48 8b 35 5b 89 20 00\n48 89 c7\ne8 ab fc ff ff\n31 ff\nbe 23 6b 40 00\nba 05 00 00 00\ne8 ba fb ff ff\n48 8b 35 3b 89 20 00\n48 89 c7\ne8 8b fc ff ff\ne8 56 00 00 00\n89 df\ne8 df fd ff ff\ne8 0a 00 00 00\n89 df\ne8 d3 fd ff ff\n'
p33
S'.text:0000000000401880\n.text:0000000000401881\n.text:0000000000401883\n.text:0000000000401885\n.text:000000000040188b\n.text:000000000040188d\n.text:0000000000401892\n.text:0000000000401897\n.text:000000000040189c\n.text:000000000040189f\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018ad\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018b7\n.text:00000000004018bc\n.text:00000000004018c1\n.text:00000000004018c6\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018d7\n.text:00000000004018dc\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018ed\n.text:00000000004018f0\n.text:00000000004018f5\n.text:00000000004018f7\n.text:00000000004018fc\n.text:0000000000401901\n.text:0000000000401906\n.text:000000000040190d\n.text:0000000000401910\n.text:0000000000401915\n.text:0000000000401917\n.text:000000000040191c\n.text:0000000000401921\n.text:0000000000401926\n.text:000000000040192d\n.text:0000000000401930\n.text:0000000000401935\n.text:000000000040193a\n.text:000000000040193c\n.text:0000000000401941\n.text:0000000000401946\n.text:0000000000401948\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403c1d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401430\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 0e d8 ff ff\n'
p40
S'.text:0000000000403bd0\n.text:0000000000403bd4\n.text:0000000000403bd7\n.text:0000000000403bdc\n.text:0000000000403be1\n.text:0000000000403be5\n.text:0000000000403bed\n.text:0000000000403bf0\n.text:0000000000403bf2\n.text:0000000000403bf4\n.text:0000000000403bf8\n.text:0000000000403bfb\n.text:0000000000403bff\n.text:0000000000403c04\n.text:0000000000403c09\n.text:0000000000403c0d\n.text:0000000000403c11\n.text:0000000000403c15\n.text:0000000000403c18\n.text:0000000000403c1c\n.text:0000000000403c1d\n'
p41
tp42
sS'rpl_fclose'
p43
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p44
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00404a59;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00404a59:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401620\nTEST EAX,EAX\nJS 0x00404a59\nMOV RDI,RBX\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00404a27\nMOV RDI,RBX\nCALL 0x00401620\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401550\nCMP RAX,-0x1\nJZ 0x00404a59\nMOV RDI,RBX\nCALL 0x00404a70\nTEST EAX,EAX\nJZ 0x00404a59\nCALL 0x00401440\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004014c0\nTEST EBP,EBP\nJZ 0x00404a52\nCALL 0x00401440\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004014c0\n'
p46
S'55\n53\n50\n48 89 fb\ne8 25 cc ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 cc ff ff\n85 c0\n74 1c\n48 89 df\ne8 0d cc ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 2f cb ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 08 ca ff ff\n8b 28\n48 89 df\ne8 7e ca ff ff\n85 ed\n74 0c\ne8 f5 c9 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 59 ca ff ff\n'
p47
S'.text:00000000004049f0\n.text:00000000004049f1\n.text:00000000004049f2\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049fb\n.text:00000000004049fd\n.text:00000000004049ff\n.text:0000000000404a02\n.text:0000000000404a07\n.text:0000000000404a09\n.text:0000000000404a0b\n.text:0000000000404a0e\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a1a\n.text:0000000000404a1c\n.text:0000000000404a21\n.text:0000000000404a25\n.text:0000000000404a27\n.text:0000000000404a2a\n.text:0000000000404a2f\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a38\n.text:0000000000404a3a\n.text:0000000000404a3d\n.text:0000000000404a42\n.text:0000000000404a44\n.text:0000000000404a46\n.text:0000000000404a4b\n.text:0000000000404a4d\n.text:0000000000404a52\n.text:0000000000404a56\n.text:0000000000404a57\n.text:0000000000404a58\n.text:0000000000404a59\n.text:0000000000404a5c\n.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a62\n'
p48
tp49
sS'strcpy'
p50
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0060a048]\n'
p53
S'ff 25 d2 8b 20 00\n'
p54
S'.plt:0000000000401470\n'
p55
tp56
sS'fwrite_unlocked'
p57
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060a150)();\u000a  return sVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060a150]\n'
p60
S'ff 25 ca 8a 20 00\n'
p61
S'.plt:0000000000401680\n'
p62
tp63
sS'dc_parse_file'
p64
(S'\n__stdcall dc_parse_file(char * filename)\n'
p65
V\u000a_Bool dc_parse_file(char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  FILE *pFVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  \u000a  if (((*filename == '-') && (filename[1] == 0)) ||\u000a     (pFVar4 = freopen_safer(filename,"r",stdin), pFVar4 != (FILE *)0x0)) {\u000a    _Var2 = dc_parse_stream(stdin,filename);\u000a    iVar3 = rpl_fclose(stdin);\u000a    if (iVar3 == 0) {\u000a      return _Var2;\u000a    }\u000a  }\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,0x4070bb,pcVar6);\u000a  return false;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RBX],0x2d\nJNZ 0x004022f2\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x0040230b\nMOV RDX,qword ptr [0x0060a270]\nMOV ESI,0x4070b5\nMOV RDI,RBX\nCALL 0x00402830\nTEST RAX,RAX\nJZ 0x0040232d\nMOV RDI,qword ptr [0x0060a270]\nMOV RSI,RBX\nCALL 0x00401e60\nMOV BPL,AL\nMOV RDI,qword ptr [0x0060a270]\nCALL 0x004049f0\nTEST EAX,EAX\nJZ 0x0040235a\nCALL 0x00401440\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00403d50\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4070bb\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004016d0\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 fb\n80 3b 2d\n75 06\n80 7b 01 00\n74 19\n48 8b 15 77 7f 20 00\nbe b5 70 40 00\n48 89 df\ne8 2a 05 00 00\n48 85 c0\n74 22\n48 8b 3d 5e 7f 20 00\n48 89 de\ne8 46 fb ff ff\n40 88 c5\n48 8b 3d 4c 7f 20 00\ne8 c7 26 00 00\n85 c0\n74 2d\ne8 0e f1 ff ff\n44 8b 30\n31 ed\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 0a 1a 00 00\n48 89 c1\n31 ff\nba bb 70 40 00\n31 c0\n44 89 f6\ne8 76 f3 ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:00000000004022e0\n.text:00000000004022e1\n.text:00000000004022e3\n.text:00000000004022e4\n.text:00000000004022e7\n.text:00000000004022ea\n.text:00000000004022ec\n.text:00000000004022f0\n.text:00000000004022f2\n.text:00000000004022f9\n.text:00000000004022fe\n.text:0000000000402301\n.text:0000000000402306\n.text:0000000000402309\n.text:000000000040230b\n.text:0000000000402312\n.text:0000000000402315\n.text:000000000040231a\n.text:000000000040231d\n.text:0000000000402324\n.text:0000000000402329\n.text:000000000040232b\n.text:000000000040232d\n.text:0000000000402332\n.text:0000000000402335\n.text:0000000000402337\n.text:0000000000402339\n.text:000000000040233e\n.text:0000000000402341\n.text:0000000000402346\n.text:0000000000402349\n.text:000000000040234b\n.text:0000000000402350\n.text:0000000000402352\n.text:0000000000402355\n.text:000000000040235a\n.text:000000000040235c\n.text:000000000040235d\n.text:000000000040235f\n.text:0000000000402360\n'
p69
tp70
sS'to_uchar'
p71
(S'\n__stdcall to_uchar()\n'
p72
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p73
S'MOV EAX,EDI\nRET\n'
p74
S'89 f8\nc3\n'
p75
S'.text:0000000000402660\n.text:0000000000402662\n'
p76
tp77
sS'strncmp'
p78
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a038)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x0060a038]\n'
p81
S'ff 25 e2 8b 20 00\n'
p82
S'.plt:0000000000401450\n'
p83
tp84
sS'xnrealloc'
p85
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p86
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p87
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x004047f4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404800\nPUSH RAX\nCALL 0x00404950\n'
p88
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p89
S'.text:00000000004047e0\n.text:00000000004047e3\n.text:00000000004047e6\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ef\n.text:00000000004047f2\n.text:00000000004047f4\n.text:00000000004047f5\n'
p90
tp91
sS'quote'
p92
(S'\n__stdcall quote(char * arg)\n'
p93
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403e80\n'
p95
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p96
S'.text:0000000000403e90\n.text:0000000000403e93\n.text:0000000000403e95\n.text:0000000000403e98\n'
p97
tp98
sS'emit_bug_reporting_address'
p99
(S'\n__stdcall emit_bug_reporting_address()\n'
p100
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4078fd\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x407912\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016c0\nXOR EDI,EDI\nMOV ESI,0x407928\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406c27\nMOV ECX,0x406e07\nXOR EAX,EAX\nCALL 0x004016c0\nXOR EDI,EDI\nMOV ESI,0x40793c\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004015c0\n'
p102
S'50\n31 ff\nbe fd 78 40 00\nba 05 00 00 00\ne8 ae cd ff ff\n48 89 c1\nbf 01 00 00 00\nba 12 79 40 00\n31 c0\n48 89 ce\ne8 77 cf ff ff\n31 ff\nbe 28 79 40 00\nba 05 00 00 00\ne8 86 cd ff ff\n48 89 c6\nbf 01 00 00 00\nba 27 6c 40 00\nb9 07 6e 40 00\n31 c0\ne8 4d cf ff ff\n31 ff\nbe 3c 79 40 00\nba 05 00 00 00\ne8 5c cd ff ff\n48 8b 35 dd 5a 20 00\n48 89 c7\n58\ne9 2c ce ff ff\n'
p103
S'.text:0000000000404720\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404728\n.text:000000000040472d\n.text:0000000000404732\n.text:0000000000404735\n.text:000000000040473a\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404749\n.text:000000000040474b\n.text:0000000000404750\n.text:0000000000404755\n.text:000000000040475a\n.text:000000000040475d\n.text:0000000000404762\n.text:0000000000404767\n.text:000000000040476c\n.text:000000000040476e\n.text:0000000000404773\n.text:0000000000404775\n.text:000000000040477a\n.text:000000000040477f\n.text:0000000000404784\n.text:000000000040478b\n.text:000000000040478e\n.text:000000000040478f\n'
p104
tp105
sS'clone_quoting_options'
p106
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p107
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401440\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a320\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404900\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 89 fb\ne8 e4 e9 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 20 a3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:0000000000402a50\n.text:0000000000402a51\n.text:0000000000402a53\n.text:0000000000402a54\n.text:0000000000402a57\n.text:0000000000402a5c\n.text:0000000000402a5f\n.text:0000000000402a62\n.text:0000000000402a65\n.text:0000000000402a6a\n.text:0000000000402a6e\n.text:0000000000402a73\n.text:0000000000402a76\n.text:0000000000402a7b\n.text:0000000000402a7e\n.text:0000000000402a7f\n.text:0000000000402a81\n.text:0000000000402a82\n'
p111
tp112
sS'xmalloc'
p113
(S'\n__stdcall xmalloc(size_t n)\n'
p114
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p115
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401630\nTEST RBX,RBX\nJZ 0x004047d3\nTEST RAX,RAX\nJZ 0x004047d5\nPOP RBX\nRET\nCALL 0x00404950\n'
p116
S'53\n48 89 fb\ne8 67 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p117
S'.text:00000000004047c0\n.text:00000000004047c1\n.text:00000000004047c4\n.text:00000000004047c9\n.text:00000000004047cc\n.text:00000000004047ce\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d4\n.text:00000000004047d5\n'
p118
tp119
sS'quotearg_char_mem'
p120
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a350]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402ab0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p123
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 88 66 20 00\n48 89 4c 24 30\n0f 10 05 6c 66 20 00\n0f 29 44 24 20\n0f 10 05 50 66 20 00\n0f 29 44 24 10\n0f 10 05 34 66 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p124
S'.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb4\n.text:0000000000403cb5\n.text:0000000000403cb9\n.text:0000000000403cbb\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc8\n.text:0000000000403ccd\n.text:0000000000403cd4\n.text:0000000000403cd9\n.text:0000000000403ce0\n.text:0000000000403ce5\n.text:0000000000403cec\n.text:0000000000403cf0\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403cfd\n.text:0000000000403d02\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d0a\n.text:0000000000403d0d\n.text:0000000000403d12\n.text:0000000000403d16\n.text:0000000000403d17\n.text:0000000000403d19\n.text:0000000000403d1b\n'
p125
tp126
sS'c_isgraph'
p127
(S'\n__stdcall c_isgraph()\n'
p128
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p129
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p130
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p131
S'.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee9\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x0040186a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401860\nJMP 0x004017f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040185b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004017f0\n'
p137
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401859\n.text:000000000040185b\n.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401868\n.text:000000000040186a\n.text:000000000040186b\n.text:000000000040186e\n.text:0000000000401870\n.text:0000000000401871\n'
p139
tp140
sS'quotearg_buffer_restyled'
p141
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p142
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402c4c_caseD_7;\u000a  case 2:\u000a    goto switchD_00402c4c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402c4c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402c4c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402c4c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402c4c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402c4c_caseD_7;\u000aswitchD_00402c4c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402c4c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402c4c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403710;\u000aLAB_00402e30:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403719:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403728:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402e3b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402e7f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402e7f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403728;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403655;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403560;\u000a    }\u000a    goto LAB_00403728;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040368a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403728;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004036b9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403178;\u000a  case '\u005ca':\u000a    goto joined_r0x00403068;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403068;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402e96_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403068;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403068;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402e96_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403068:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004035ce;\u000a    }\u000a    goto LAB_00403728;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403728;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403728;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403728;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403728;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403728;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402e96_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403626;\u000a      goto joined_r0x00403618;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403121:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403618;\u000a      goto LAB_00403626;\u000a    }\u000a    goto LAB_00403728;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403728;\u000a  }\u000a  goto joined_r0x00403560;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040368a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004036b9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004036b9:\u000a  if (1 < uVar10) {\u000aLAB_00403196:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403252;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403121;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403252:\u000a        if (bVar6 != 0) goto LAB_00403728;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403178:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403196;\u000ajoined_r0x00403560:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403560:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403587;\u000aLAB_004035c0:\u000a    if (bVar22) goto LAB_004035c5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004035c0;\u000aLAB_00403587:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004035c5:\u000a      if (bVar6 != 0) goto LAB_00403728;\u000aLAB_004035ce:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403618;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403626:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403618:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403655:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402e30;\u000aLAB_00403710:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403719;\u000a  goto LAB_00402e3b;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004014f0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004037f5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x407110 + RAX*0x8]\nMOV EDI,0x407630\nMOV ESI,R15D\nCALL 0x00403ea0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406d68\nMOV ESI,R15D\nCALL 0x00403ea0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402cad\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402cb0\nNOP\nCMP R12,RSI\nJNC 0x00402c9e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402c90\nJMP 0x00402cb0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401500\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402d7c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402d7c\nMOV ECX,0x40762e\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402d76\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402d17\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402d44\nTEST RSI,RSI\nJZ 0x00402d31\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406d68\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402d52\nMOV ECX,0x406d68\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402d7c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004037cc\nMOV ECX,0x40762e\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403710\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403719\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402e7f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402e7a\nCMP R11,-0x1\nJNZ 0x00402e7a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401500\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402ed0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040312c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x407168 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403728\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403580\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403587\nJMP 0x004035c0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004015b0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402f1d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402e81\nJMP 0x00403728\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402e81\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402eab\nCMP EBX,0x2\nJNZ 0x00402eab\nTEST R13,R13\nJNZ 0x00402eab\nJMP 0x00403728\nCMP R11,-0x1\nJZ 0x00403303\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403323\nJMP 0x00402eab\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403334\nTEST R8B,R8B\nJNZ 0x00403728\nCMP EBX,0x2\nJNZ 0x00402fd8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402fd8\nCMP R12,RSI\nJNC 0x00402fb3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402fc2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402fd1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402fe2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004034a8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004034a8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004034a8\nCMP RCX,RSI\nJNC 0x0040301c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040302b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nJMP 0x00403580\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ea9\nJMP 0x0040308a\nMOV DL,0x74\nJMP 0x00403072\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ea9\nJMP 0x0040308a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ea9\nJMP 0x0040308a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403728\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ea9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004035ce\nJMP 0x00403728\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402ea9\nTEST R8B,R8B\nJNZ 0x00403728\nCMP R12,RSI\nJNC 0x004030ba\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004030c9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004030d8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402ea9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004034bb\nCMP EBX,0x2\nJNZ 0x00402ea9\nTEST R8B,R8B\nJZ 0x00402ea9\nJMP 0x00403728\nCMP EBX,0x2\nJNZ 0x00403354\nTEST R8B,R8B\nJNZ 0x00403728\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403626\nJMP 0x00403649\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403375\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401770\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403568\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403568\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403252\nJMP 0x00403220\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403209\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403206\nCMP R12,RSI\nJNC 0x004031eb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004031fa\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403240\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403240\nTEST BPL,0x1\nJZ 0x004032e3\nCMP R12,RSI\nJNC 0x00403234\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004032e3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403220\nTEST R8B,R8B\nJNZ 0x00403728\nCMP EBX,0x2\nJNZ 0x0040329a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040329a\nCMP R12,RSI\nJNC 0x00403272\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403281\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403290\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004032a4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004032bb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004032d5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004031d0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403626\nJMP 0x00403649\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402eab\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402eab\nJMP 0x00403728\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403655\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nJMP 0x00403580\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403072\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403626\nJMP 0x00403649\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403397\nMOV RDI,R10\nCALL 0x00401500\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401520\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040366f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403667\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403676\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040345e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403456\nBT RDI,RDX\nJC 0x004037c2\nINC RCX\nCMP RCX,R14\nJC 0x00403440\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401760\nTEST EAX,EAX\nJNZ 0x00403473\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401750\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004033b5\nJMP 0x004036b9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nJMP 0x00403580\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402ea9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402ea9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402ea9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402eab\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004036f2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403728\nCMP R12,RSI\nJNC 0x0040351e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403531\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403540\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040354f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nJMP 0x00403580\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004035c0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004035c5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403620\nJMP 0x004035c5\nTEST BPL,BPL\nJZ 0x00403620\nTEST R8B,R8B\nJNZ 0x00403728\nCMP EBX,0x2\nJNZ 0x00403608\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403608\nCMP R12,RSI\nJNC 0x004035e3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004035f2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403601\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403612\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403652\nJMP 0x0040364e\nTEST DIL,0x1\nJZ 0x00403649\nAND AL,0x1\nJNZ 0x00403649\nCMP R12,RSI\nJNC 0x00403634\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403643\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403652\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403710\nJMP 0x00402e30\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004036b4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004036ac\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004036e8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040368a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004036b9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403178\nJMP 0x00403196\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004036b9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402eb6\nJMP 0x00403580\nCMP R13,R11\nJNZ 0x00402e3b\nTEST R8B,R8B\nJZ 0x00403782\nCMP EBX,0x2\nJNZ 0x00403782\nTEST R12,R12\nJNZ 0x00403782\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402bc0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004037b6\nTEST R8B,R8B\nJNZ 0x004037b6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004037b6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004037a9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004037a0\nCMP R12,RSI\nJNC 0x0040376d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040376d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403728\nTEST RSI,RSI\nJZ 0x004037d9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40762e\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402d7c\nCALL 0x00401430\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 02 e9 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 10 71 40 00\nbf 30 76 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 68 6d 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 43 e8 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 2e 76 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 68 6d 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 68 6d 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 2e 76 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 a3 e6 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 68 71 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 c7 e6 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 27 e6 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 71 e1 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 43 e1 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 f9 e2 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 c2 e2 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 2e 76 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 36 dc ff ff\n'
p145
S'.text:0000000000402bc0\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bc7\n.text:0000000000402bc9\n.text:0000000000402bca\n.text:0000000000402bd1\n.text:0000000000402bd4\n.text:0000000000402bd7\n.text:0000000000402bda\n.text:0000000000402bdf\n.text:0000000000402be4\n.text:0000000000402be9\n.text:0000000000402bee\n.text:0000000000402bf6\n.text:0000000000402bfa\n.text:0000000000402c00\n.text:0000000000402c08\n.text:0000000000402c0d\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c29\n.text:0000000000402c2e\n.text:0000000000402c31\n.text:0000000000402c34\n.text:0000000000402c37\n.text:0000000000402c3a\n.text:0000000000402c3c\n.text:0000000000402c3f\n.text:0000000000402c44\n.text:0000000000402c47\n.text:0000000000402c4c\n.text:0000000000402c53\n.text:0000000000402c58\n.text:0000000000402c5b\n.text:0000000000402c60\n.text:0000000000402c65\n.text:0000000000402c6a\n.text:0000000000402c6d\n.text:0000000000402c72\n.text:0000000000402c77\n.text:0000000000402c7c\n.text:0000000000402c7e\n.text:0000000000402c80\n.text:0000000000402c85\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8c\n.text:0000000000402c8e\n.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c95\n.text:0000000000402c9a\n.text:0000000000402c9e\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402ca9\n.text:0000000000402cab\n.text:0000000000402cad\n.text:0000000000402cb0\n.text:0000000000402cb5\n.text:0000000000402cb8\n.text:0000000000402cbd\n.text:0000000000402cc2\n.text:0000000000402cc5\n.text:0000000000402cc8\n.text:0000000000402ccb\n.text:0000000000402cce\n.text:0000000000402cd3\n.text:0000000000402cd6\n.text:0000000000402cd9\n.text:0000000000402cde\n.text:0000000000402ce1\n.text:0000000000402ce3\n.text:0000000000402ce6\n.text:0000000000402ce8\n.text:0000000000402cea\n.text:0000000000402ced\n.text:0000000000402cf2\n.text:0000000000402cf7\n.text:0000000000402cfc\n.text:0000000000402cff\n.text:0000000000402d05\n.text:0000000000402d07\n.text:0000000000402d0a\n.text:0000000000402d0d\n.text:0000000000402d10\n.text:0000000000402d12\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d1a\n.text:0000000000402d1f\n.text:0000000000402d22\n.text:0000000000402d24\n.text:0000000000402d27\n.text:0000000000402d29\n.text:0000000000402d2e\n.text:0000000000402d31\n.text:0000000000402d36\n.text:0000000000402d3c\n.text:0000000000402d42\n.text:0000000000402d44\n.text:0000000000402d49\n.text:0000000000402d4f\n.text:0000000000402d52\n.text:0000000000402d55\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5f\n.text:0000000000402d62\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d73\n.text:0000000000402d76\n.text:0000000000402d79\n.text:0000000000402d7c\n.text:0000000000402d84\n.text:0000000000402d86\n.text:0000000000402d88\n.text:0000000000402d8b\n.text:0000000000402d8f\n.text:0000000000402d91\n.text:0000000000402d94\n.text:0000000000402d98\n.text:0000000000402d9a\n.text:0000000000402d9d\n.text:0000000000402da0\n.text:0000000000402da3\n.text:0000000000402da5\n.text:0000000000402da9\n.text:0000000000402dab\n.text:0000000000402daf\n.text:0000000000402db2\n.text:0000000000402db5\n.text:0000000000402db8\n.text:0000000000402dba\n.text:0000000000402dbe\n.text:0000000000402dc7\n.text:0000000000402dca\n.text:0000000000402dcc\n.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd6\n.text:0000000000402dd8\n.text:0000000000402ddb\n.text:0000000000402ddf\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de8\n.text:0000000000402ded\n.text:0000000000402df0\n.text:0000000000402df4\n.text:0000000000402dfc\n.text:0000000000402dff\n.text:0000000000402e02\n.text:0000000000402e04\n.text:0000000000402e08\n.text:0000000000402e0b\n.text:0000000000402e0d\n.text:0000000000402e12\n.text:0000000000402e16\n.text:0000000000402e1b\n.text:0000000000402e20\n.text:0000000000402e24\n.text:0000000000402e2a\n.text:0000000000402e30\n.text:0000000000402e35\n.text:0000000000402e3b\n.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e47\n.text:0000000000402e4b\n.text:0000000000402e4d\n.text:0000000000402e51\n.text:0000000000402e53\n.text:0000000000402e55\n.text:0000000000402e58\n.text:0000000000402e5d\n.text:0000000000402e5f\n.text:0000000000402e64\n.text:0000000000402e69\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e77\n.text:0000000000402e7a\n.text:0000000000402e7d\n.text:0000000000402e7f\n.text:0000000000402e81\n.text:0000000000402e86\n.text:0000000000402e8a\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e96\n.text:0000000000402e9e\n.text:0000000000402ea3\n.text:0000000000402ea9\n.text:0000000000402eab\n.text:0000000000402eb0\n.text:0000000000402eb6\n.text:0000000000402ebf\n.text:0000000000402ec5\n.text:0000000000402ed0\n.text:0000000000402ed2\n.text:0000000000402ed5\n.text:0000000000402ed9\n.text:0000000000402ee1\n.text:0000000000402ee4\n.text:0000000000402ee9\n.text:0000000000402eeb\n.text:0000000000402eee\n.text:0000000000402ef0\n.text:0000000000402ef5\n.text:0000000000402ef8\n.text:0000000000402efd\n.text:0000000000402f00\n.text:0000000000402f05\n.text:0000000000402f09\n.text:0000000000402f0e\n.text:0000000000402f10\n.text:0000000000402f12\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f2a\n.text:0000000000402f2e\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3a\n.text:0000000000402f3c\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f46\n.text:0000000000402f4c\n.text:0000000000402f4f\n.text:0000000000402f55\n.text:0000000000402f58\n.text:0000000000402f5e\n.text:0000000000402f63\n.text:0000000000402f67\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f73\n.text:0000000000402f77\n.text:0000000000402f7a\n.text:0000000000402f7c\n.text:0000000000402f7f\n.text:0000000000402f85\n.text:0000000000402f8a\n.text:0000000000402f8f\n.text:0000000000402f95\n.text:0000000000402f98\n.text:0000000000402f9e\n.text:0000000000402fa1\n.text:0000000000402fa3\n.text:0000000000402fa5\n.text:0000000000402fa7\n.text:0000000000402fa9\n.text:0000000000402fac\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb8\n.text:0000000000402fbb\n.text:0000000000402fbd\n.text:0000000000402fc2\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fcc\n.text:0000000000402fd1\n.text:0000000000402fd5\n.text:0000000000402fd8\n.text:0000000000402fdb\n.text:0000000000402fdd\n.text:0000000000402fe2\n.text:0000000000402fe7\n.text:0000000000402fe9\n.text:0000000000402fec\n.text:0000000000402fef\n.text:0000000000402ff5\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000403002\n.text:0000000000403006\n.text:0000000000403009\n.text:000000000040300c\n.text:0000000000403012\n.text:0000000000403015\n.text:0000000000403017\n.text:000000000040301c\n.text:0000000000403021\n.text:0000000000403024\n.text:0000000000403026\n.text:000000000040302b\n.text:000000000040302f\n.text:0000000000403034\n.text:000000000040303a\n.text:000000000040303f\n.text:0000000000403041\n.text:0000000000403046\n.text:000000000040304c\n.text:000000000040304e\n.text:0000000000403050\n.text:0000000000403052\n.text:0000000000403054\n.text:0000000000403059\n.text:000000000040305f\n.text:0000000000403061\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306e\n.text:0000000000403070\n.text:0000000000403072\n.text:0000000000403077\n.text:0000000000403079\n.text:000000000040307f\n.text:0000000000403084\n.text:000000000040308a\n.text:000000000040308d\n.text:0000000000403090\n.text:0000000000403096\n.text:000000000040309b\n.text:000000000040309e\n.text:00000000004030a1\n.text:00000000004030a7\n.text:00000000004030aa\n.text:00000000004030b0\n.text:00000000004030b3\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c2\n.text:00000000004030c4\n.text:00000000004030c9\n.text:00000000004030ce\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030dc\n.text:00000000004030de\n.text:00000000004030e3\n.text:00000000004030e6\n.text:00000000004030e9\n.text:00000000004030ef\n.text:00000000004030f2\n.text:00000000004030f8\n.text:00000000004030fb\n.text:0000000000403101\n.text:0000000000403106\n.text:0000000000403109\n.text:000000000040310f\n.text:0000000000403112\n.text:0000000000403118\n.text:000000000040311b\n.text:000000000040311d\n.text:0000000000403121\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403130\n.text:0000000000403139\n.text:000000000040313f\n.text:0000000000403144\n.text:0000000000403149\n.text:000000000040314e\n.text:0000000000403151\n.text:0000000000403156\n.text:0000000000403159\n.text:000000000040315c\n.text:0000000000403161\n.text:0000000000403166\n.text:000000000040316a\n.text:000000000040316f\n.text:0000000000403174\n.text:0000000000403178\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403185\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403190\n.text:0000000000403196\n.text:000000000040319b\n.text:000000000040319e\n.text:00000000004031a1\n.text:00000000004031a4\n.text:00000000004031a7\n.text:00000000004031a9\n.text:00000000004031ad\n.text:00000000004031af\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031bf\n.text:00000000004031d0\n.text:00000000004031d5\n.text:00000000004031d7\n.text:00000000004031da\n.text:00000000004031dc\n.text:00000000004031df\n.text:00000000004031e1\n.text:00000000004031e4\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f5\n.text:00000000004031fa\n.text:00000000004031fe\n.text:0000000000403206\n.text:0000000000403209\n.text:000000000040320c\n.text:000000000040320e\n.text:0000000000403212\n.text:0000000000403220\n.text:0000000000403224\n.text:000000000040322a\n.text:000000000040322d\n.text:000000000040322f\n.text:0000000000403234\n.text:0000000000403237\n.text:0000000000403239\n.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403248\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403252\n.text:0000000000403255\n.text:000000000040325b\n.text:000000000040325e\n.text:0000000000403260\n.text:0000000000403264\n.text:0000000000403266\n.text:0000000000403268\n.text:000000000040326b\n.text:000000000040326d\n.text:0000000000403272\n.text:0000000000403277\n.text:000000000040327a\n.text:000000000040327c\n.text:0000000000403281\n.text:0000000000403286\n.text:0000000000403289\n.text:000000000040328b\n.text:0000000000403290\n.text:0000000000403294\n.text:0000000000403296\n.text:000000000040329a\n.text:000000000040329d\n.text:000000000040329f\n.text:00000000004032a4\n.text:00000000004032a9\n.text:00000000004032ac\n.text:00000000004032ae\n.text:00000000004032b1\n.text:00000000004032b4\n.text:00000000004032b7\n.text:00000000004032bb\n.text:00000000004032c0\n.text:00000000004032c3\n.text:00000000004032c5\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032ce\n.text:00000000004032d1\n.text:00000000004032d5\n.text:00000000004032d9\n.text:00000000004032dd\n.text:00000000004032e1\n.text:00000000004032e3\n.text:00000000004032e7\n.text:00000000004032ea\n.text:00000000004032f0\n.text:00000000004032f4\n.text:00000000004032f8\n.text:00000000004032fe\n.text:0000000000403303\n.text:0000000000403306\n.text:0000000000403309\n.text:000000000040330e\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403316\n.text:000000000040331d\n.text:0000000000403323\n.text:0000000000403325\n.text:0000000000403329\n.text:000000000040332f\n.text:0000000000403334\n.text:0000000000403339\n.text:000000000040333f\n.text:0000000000403342\n.text:0000000000403344\n.text:0000000000403349\n.text:000000000040334f\n.text:0000000000403354\n.text:0000000000403356\n.text:000000000040335b\n.text:0000000000403361\n.text:0000000000403363\n.text:0000000000403366\n.text:000000000040336a\n.text:0000000000403370\n.text:0000000000403375\n.text:0000000000403381\n.text:0000000000403385\n.text:0000000000403387\n.text:000000000040338a\n.text:000000000040338f\n.text:0000000000403394\n.text:0000000000403397\n.text:000000000040339b\n.text:00000000004033a0\n.text:00000000004033a2\n.text:00000000004033a6\n.text:00000000004033a8\n.text:00000000004033b0\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033c2\n.text:00000000004033ca\n.text:00000000004033cd\n.text:00000000004033d2\n.text:00000000004033d5\n.text:00000000004033d8\n.text:00000000004033dd\n.text:00000000004033e0\n.text:00000000004033e3\n.text:00000000004033e9\n.text:00000000004033ed\n.text:00000000004033f7\n.text:00000000004033fd\n.text:0000000000403401\n.text:0000000000403406\n.text:000000000040340c\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403417\n.text:0000000000403419\n.text:000000000040341e\n.text:0000000000403423\n.text:0000000000403427\n.text:0000000000403429\n.text:000000000040342e\n.text:0000000000403433\n.text:0000000000403437\n.text:000000000040343c\n.text:0000000000403440\n.text:0000000000403444\n.text:0000000000403447\n.text:000000000040344a\n.text:000000000040344c\n.text:0000000000403450\n.text:0000000000403456\n.text:0000000000403459\n.text:000000000040345c\n.text:000000000040345e\n.text:0000000000403462\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346b\n.text:0000000000403473\n.text:0000000000403478\n.text:000000000040347b\n.text:0000000000403483\n.text:0000000000403486\n.text:0000000000403489\n.text:000000000040348e\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403498\n.text:000000000040349d\n.text:00000000004034a3\n.text:00000000004034a8\n.text:00000000004034ab\n.text:00000000004034b0\n.text:00000000004034b6\n.text:00000000004034bb\n.text:00000000004034c0\n.text:00000000004034c6\n.text:00000000004034ca\n.text:00000000004034cd\n.text:00000000004034d3\n.text:00000000004034d9\n.text:00000000004034df\n.text:00000000004034e4\n.text:00000000004034e6\n.text:00000000004034e9\n.text:00000000004034ef\n.text:00000000004034f3\n.text:00000000004034f5\n.text:00000000004034ff\n.text:0000000000403503\n.text:0000000000403509\n.text:000000000040350c\n.text:000000000040350e\n.text:0000000000403514\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351e\n.text:0000000000403523\n.text:0000000000403526\n.text:000000000040352a\n.text:000000000040352c\n.text:0000000000403531\n.text:0000000000403536\n.text:0000000000403539\n.text:000000000040353b\n.text:0000000000403540\n.text:0000000000403545\n.text:0000000000403548\n.text:000000000040354a\n.text:000000000040354f\n.text:0000000000403553\n.text:0000000000403555\n.text:0000000000403558\n.text:000000000040355b\n.text:0000000000403560\n.text:0000000000403566\n.text:0000000000403568\n.text:000000000040356d\n.text:0000000000403572\n.text:0000000000403578\n.text:0000000000403580\n.text:0000000000403585\n.text:0000000000403587\n.text:000000000040358c\n.text:000000000040358f\n.text:0000000000403591\n.text:0000000000403594\n.text:0000000000403596\n.text:0000000000403599\n.text:000000000040359c\n.text:000000000040359f\n.text:00000000004035a1\n.text:00000000004035a9\n.text:00000000004035ac\n.text:00000000004035ae\n.text:00000000004035b0\n.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035ce\n.text:00000000004035d1\n.text:00000000004035d3\n.text:00000000004035d5\n.text:00000000004035d7\n.text:00000000004035d9\n.text:00000000004035dc\n.text:00000000004035de\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035eb\n.text:00000000004035ed\n.text:00000000004035f2\n.text:00000000004035f7\n.text:00000000004035fa\n.text:00000000004035fc\n.text:0000000000403601\n.text:0000000000403605\n.text:0000000000403608\n.text:000000000040360b\n.text:000000000040360d\n.text:0000000000403612\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361a\n.text:0000000000403620\n.text:0000000000403624\n.text:0000000000403626\n.text:0000000000403628\n.text:000000000040362a\n.text:000000000040362d\n.text:000000000040362f\n.text:0000000000403634\n.text:0000000000403639\n.text:000000000040363c\n.text:000000000040363e\n.text:0000000000403643\n.text:0000000000403647\n.text:0000000000403649\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403652\n.text:0000000000403655\n.text:0000000000403658\n.text:000000000040365c\n.text:0000000000403662\n.text:0000000000403667\n.text:000000000040366f\n.text:0000000000403674\n.text:0000000000403676\n.text:000000000040367e\n.text:0000000000403683\n.text:0000000000403685\n.text:000000000040368a\n.text:000000000040368f\n.text:0000000000403693\n.text:0000000000403695\n.text:000000000040369a\n.text:000000000040369d\n.text:00000000004036a0\n.text:00000000004036a2\n.text:00000000004036aa\n.text:00000000004036ac\n.text:00000000004036b4\n.text:00000000004036b9\n.text:00000000004036bd\n.text:00000000004036c2\n.text:00000000004036c7\n.text:00000000004036cb\n.text:00000000004036d0\n.text:00000000004036d5\n.text:00000000004036d9\n.text:00000000004036dd\n.text:00000000004036e3\n.text:00000000004036e8\n.text:00000000004036f0\n.text:00000000004036f2\n.text:00000000004036f4\n.text:00000000004036f8\n.text:00000000004036fd\n.text:0000000000403703\n.text:0000000000403710\n.text:0000000000403713\n.text:0000000000403719\n.text:000000000040371c\n.text:000000000040371e\n.text:0000000000403721\n.text:0000000000403723\n.text:0000000000403726\n.text:0000000000403728\n.text:0000000000403730\n.text:0000000000403736\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403741\n.text:0000000000403746\n.text:000000000040374a\n.text:000000000040374e\n.text:0000000000403751\n.text:0000000000403754\n.text:0000000000403757\n.text:000000000040375b\n.text:000000000040375f\n.text:0000000000403761\n.text:0000000000403766\n.text:000000000040376a\n.text:000000000040376d\n.text:0000000000403770\n.text:0000000000403777\n.text:0000000000403778\n.text:000000000040377a\n.text:000000000040377c\n.text:000000000040377e\n.text:0000000000403780\n.text:0000000000403781\n.text:0000000000403782\n.text:000000000040378a\n.text:000000000040378d\n.text:000000000040378f\n.text:0000000000403792\n.text:0000000000403794\n.text:0000000000403796\n.text:0000000000403798\n.text:000000000040379a\n.text:000000000040379d\n.text:00000000004037a0\n.text:00000000004037a3\n.text:00000000004037a5\n.text:00000000004037a9\n.text:00000000004037ac\n.text:00000000004037af\n.text:00000000004037b2\n.text:00000000004037b4\n.text:00000000004037b6\n.text:00000000004037b9\n.text:00000000004037bb\n.text:00000000004037c0\n.text:00000000004037c2\n.text:00000000004037c7\n.text:00000000004037cc\n.text:00000000004037cf\n.text:00000000004037d1\n.text:00000000004037d6\n.text:00000000004037d9\n.text:00000000004037de\n.text:00000000004037e1\n.text:00000000004037e7\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f5\n'
p146
tp147
sS'_obstack_begin_1'
p148
(S'\n__stdcall _obstack_begin_1(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr_void_ptr * freefun, void * arg)\n'
p149
V\u000aint _obstack_begin_1(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(void *,size_t),\u000a                    void (*freefun)(void *,void *),void *arg)\u000a\u000a{\u000a  *(void *(**)(void *,size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *,void *))&h->freefun = freefun;\u000a  h->extra_arg = arg;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 1;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p150
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nMOV qword ptr [RDI + 0x48],R9\nOR byte ptr [RDI + 0x50],0x1\nCALL 0x00404b50\nMOV EAX,0x1\nPOP RCX\nRET\n'
p151
S'50\n48 89 4f 38\n4c 89 47 40\n4c 89 4f 48\n80 4f 50 01\ne8 5a ff ff ff\nb8 01 00 00 00\n59\nc3\n'
p152
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be5\n.text:0000000000404be9\n.text:0000000000404bed\n.text:0000000000404bf1\n.text:0000000000404bf6\n.text:0000000000404bfb\n.text:0000000000404bfc\n'
p153
tp154
sS'set_quoting_style'
p155
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p156
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p157
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p158
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p159
S'.text:0000000000402aa0\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aac\n.text:0000000000402aae\n'
p160
tp161
sS'quotearg_n_style_colon'
p162
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p163
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403bd0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402ab0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004039a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p165
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p166
S'.text:0000000000403d50\n.text:0000000000403d51\n.text:0000000000403d53\n.text:0000000000403d54\n.text:0000000000403d58\n.text:0000000000403d5b\n.text:0000000000403d5d\n.text:0000000000403d62\n.text:0000000000403d65\n.text:0000000000403d6a\n.text:0000000000403d6f\n.text:0000000000403d74\n.text:0000000000403d77\n.text:0000000000403d7c\n.text:0000000000403d83\n.text:0000000000403d85\n.text:0000000000403d88\n.text:0000000000403d8b\n.text:0000000000403d90\n.text:0000000000403d94\n.text:0000000000403d95\n.text:0000000000403d97\n.text:0000000000403d98\n'
p167
tp168
sS'textdomain'
p169
(S'\n__stdcall textdomain()\n'
p170
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a068)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060a068]\n'
p172
S'ff 25 b2 8b 20 00\n'
p173
S'.plt:00000000004014b0\n'
p174
tp175
sS'xmemdup'
p176
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p177
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004047c0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401610\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ec cc ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:0000000000404900\n.text:0000000000404902\n.text:0000000000404904\n.text:0000000000404905\n.text:0000000000404908\n.text:000000000040490b\n.text:000000000040490e\n.text:0000000000404913\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491c\n.text:000000000040491f\n.text:0000000000404924\n.text:0000000000404927\n.text:0000000000404928\n.text:000000000040492a\n.text:000000000040492c\n'
p181
tp182
sS'get_quoting_style'
p183
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p184
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p185
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p186
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p187
S'.text:0000000000402a90\n.text:0000000000402a93\n.text:0000000000402a98\n.text:0000000000402a9c\n.text:0000000000402a9e\n'
p188
tp189
sS'ferror_unlocked'
p190
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060a0f8]\n'
p193
S'ff 25 22 8b 20 00\n'
p194
S'.plt:00000000004015d0\n'
p195
tp196
sS'exit'
p197
(S'\n__stdcall exit(int __status)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a1a0)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060a1a0]\n'
p200
S'ff 25 7a 8a 20 00\n'
p201
S'.plt:0000000000401720\n'
p202
tp203
sS'quote_mem'
p204
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p205
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403e60\n'
p207
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p208
S'.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e78\n.text:0000000000403e7b\n.text:0000000000403e7e\n'
p209
tp210
sS'locale_charset'
p211
(S'\n__stdcall locale_charset()\n'
p212
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040508d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040508d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401650\nTEST RAX,RAX\nMOV R14D,0x407781\nCMOVNZ R14,RAX\nCALL 0x004050a0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405065\nJMP 0x0040508d\nMOV RDI,RBX\nCALL 0x00401500\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401500\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040508d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004015f0\nTEST EAX,EAX\nJZ 0x00405080\nCMP BPL,0x2a\nJNZ 0x00405040\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405040\nMOV RDI,RBX\nCALL 0x00401500\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407dd8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p214
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 c6 ff ff\n48 85 c0\n41 be 81 77 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 b8 c4 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 aa c4 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 80 c5 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 78 c4 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 d8 7d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p215
S'.text:0000000000405010\n.text:0000000000405011\n.text:0000000000405013\n.text:0000000000405014\n.text:0000000000405019\n.text:000000000040501e\n.text:0000000000405021\n.text:0000000000405027\n.text:000000000040502b\n.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405036\n.text:0000000000405039\n.text:000000000040503b\n.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405048\n.text:000000000040504c\n.text:0000000000405051\n.text:0000000000405056\n.text:000000000040505b\n.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405065\n.text:0000000000405068\n.text:000000000040506b\n.text:0000000000405070\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507e\n.text:0000000000405080\n.text:0000000000405083\n.text:0000000000405088\n.text:000000000040508d\n.text:0000000000405091\n.text:0000000000405096\n.text:000000000040509a\n.text:000000000040509b\n.text:000000000040509d\n.text:000000000040509e\n'
p216
tp217
sS'set_program_name'
p218
(S'\n__stdcall set_program_name(char * argv0)\n'
p219
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402a21\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401540\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402a0b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x407100\nMOV EDX,0x7\nCALL 0x00401450\nTEST EAX,EAX\nJNZ 0x00402a0b\nMOV ESI,0x407108\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401450\nTEST EAX,EAX\nJNZ 0x00402a08\nADD R14,0x3\nMOV qword ptr [0x0060a260],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a318],RBX\nMOV qword ptr [0x0060a280],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a2a0]\nMOV EDI,0x4070c8\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401730\nCALL 0x00401430\n'
p221
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 87 eb ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 00 71 40 00\nba 07 00 00 00\ne8 6d ea ff ff\n85 c0\n75 24\nbe 08 71 40 00\nba 03 00 00 00\n4c 89 f7\ne8 57 ea ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 58 78 20 00\n4c 89 f3\n48 89 1d 06 79 20 00\n48 89 1d 67 78 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 78 78 20 00\nbf c8 70 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 f4 ec ff ff\ne8 ef e9 ff ff\n'
p222
S'.text:00000000004029a0\n.text:00000000004029a2\n.text:00000000004029a3\n.text:00000000004029a4\n.text:00000000004029a7\n.text:00000000004029aa\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b4\n.text:00000000004029b9\n.text:00000000004029bc\n.text:00000000004029c0\n.text:00000000004029c4\n.text:00000000004029c7\n.text:00000000004029ca\n.text:00000000004029ce\n.text:00000000004029d0\n.text:00000000004029d4\n.text:00000000004029d9\n.text:00000000004029de\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029ec\n.text:00000000004029f1\n.text:00000000004029f4\n.text:00000000004029f9\n.text:00000000004029fb\n.text:00000000004029fd\n.text:0000000000402a01\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a12\n.text:0000000000402a19\n.text:0000000000402a1d\n.text:0000000000402a1e\n.text:0000000000402a20\n.text:0000000000402a21\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a32\n.text:0000000000402a37\n.text:0000000000402a3c\n'
p223
tp224
sS'fileno'
p225
(S'\n__stdcall fileno(FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a120)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060a120]\n'
p228
S'ff 25 fa 8a 20 00\n'
p229
S'.plt:0000000000401620\n'
p230
tp231
sS'quotearg_buffer'
p232
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p233
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a320\nCMOVNZ RBP,R8\nCALL 0x00401440\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402bc0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 20 a3 60 00\n49 0f 45 e8\ne8 d8 e8 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:0000000000402b40\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b49\n.text:0000000000402b4a\n.text:0000000000402b4b\n.text:0000000000402b4e\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b57\n.text:0000000000402b5a\n.text:0000000000402b5f\n.text:0000000000402b63\n.text:0000000000402b68\n.text:0000000000402b6b\n.text:0000000000402b6d\n.text:0000000000402b71\n.text:0000000000402b75\n.text:0000000000402b79\n.text:0000000000402b7d\n.text:0000000000402b80\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b8f\n.text:0000000000402b93\n.text:0000000000402b94\n.text:0000000000402b99\n.text:0000000000402b9d\n.text:0000000000402ba1\n.text:0000000000402ba3\n.text:0000000000402ba7\n.text:0000000000402ba8\n.text:0000000000402baa\n.text:0000000000402bac\n.text:0000000000402bae\n.text:0000000000402bb0\n.text:0000000000402bb1\n'
p237
tp238
sS'quotearg_colon'
p239
(S'\n__stdcall quotearg_colon(char * arg)\n'
p240
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV ESI,0x3a\nJMP 0x00403d20\n'
p242
S'be 3a 00 00 00\neb e9\n'
p243
S'.text:0000000000403d30\n.text:0000000000403d35\n'
p244
tp245
sS'mbrtowc'
p246
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060a0a0]\n'
p249
S'ff 25 7a 8b 20 00\n'
p250
S'.plt:0000000000401520\n'
p251
tp252
sS'_obstack_free'
p253
(S'\n__stdcall _obstack_free(obstack * h, void * obj)\n'
p254
V\u000avoid _obstack_free(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  _obstack_chunk *old_chunk;\u000a  \u000a  old_chunk = h->chunk;\u000a  while( true ) {\u000a    if (old_chunk == (_obstack_chunk *)0x0) {\u000a      if (obj == (void *)0x0) {\u000a        return;\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    if ((old_chunk < obj) && (obj <= old_chunk->limit)) break;\u000a    p_Var1 = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a    *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 2;\u000a    old_chunk = p_Var1;\u000a  }\u000a  h->next_free = obj;\u000a  h->object_base = obj;\u000a  h->chunk_limit = old_chunk->limit;\u000a  h->chunk = old_chunk;\u000a  return;\u000a}\u000a\u000a
p255
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [R15 + 0x8]\nTEST RSI,RSI\nJZ 0x00404dc3\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RSI,R14\nJNC 0x00404daa\nCMP qword ptr [RSI],R14\nJNC 0x00404dcd\nMOV RBX,qword ptr [RSI + 0x8]\nMOV RDI,R15\nCALL 0x00404d30\nOR byte ptr [R15 + 0x50],0x2\nTEST RBX,RBX\nMOV RSI,RBX\nJNZ 0x00404da0\nTEST R14,R14\nJZ 0x00404de0\nCALL 0x00401430\nMOV qword ptr [R15 + 0x18],R14\nMOV qword ptr [R15 + 0x10],R14\nMOV RAX,qword ptr [RSI]\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R15 + 0x8],RSI\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p256
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8b 77 08\n48 85 f6\n74 2f\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 f6\n73 05\n4c 39 36\n73 23\n48 8b 5e 08\n4c 89 ff\ne8 7a ff ff ff\n41 80 4f 50 02\n48 85 db\n48 89 de\n75 dd\n4d 85 f6\n74 18\ne8 63 c6 ff ff\n4d 89 77 18\n4d 89 77 10\n48 8b 06\n49 89 47 20\n49 89 77 08\n5b\n41 5e\n41 5f\nc3\n'
p257
S'.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d85\n.text:0000000000404d88\n.text:0000000000404d8b\n.text:0000000000404d8f\n.text:0000000000404d92\n.text:0000000000404d94\n.text:0000000000404da0\n.text:0000000000404da3\n.text:0000000000404da5\n.text:0000000000404da8\n.text:0000000000404daa\n.text:0000000000404dae\n.text:0000000000404db1\n.text:0000000000404db6\n.text:0000000000404dbb\n.text:0000000000404dbe\n.text:0000000000404dc1\n.text:0000000000404dc3\n.text:0000000000404dc6\n.text:0000000000404dc8\n.text:0000000000404dcd\n.text:0000000000404dd1\n.text:0000000000404dd5\n.text:0000000000404dd8\n.text:0000000000404ddc\n.text:0000000000404de0\n.text:0000000000404de1\n.text:0000000000404de3\n.text:0000000000404de5\n'
p258
tp259
sS'dup2'
p260
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0060a0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060a0a8]\n'
p263
S'ff 25 72 8b 20 00\n'
p264
S'.plt:0000000000401530\n'
p265
tp266
sS'rpl_fflush'
p267
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p268
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a130)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404a8d\nMOV RDI,RBX\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00404a8d\nMOV RDI,RBX\nCALL 0x00404aa0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401640\n'
p270
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef cb ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 aa cb ff ff\n'
p271
S'.text:0000000000404a70\n.text:0000000000404a71\n.text:0000000000404a74\n.text:0000000000404a77\n.text:0000000000404a79\n.text:0000000000404a7c\n.text:0000000000404a81\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a88\n.text:0000000000404a8d\n.text:0000000000404a90\n.text:0000000000404a91\n'
p272
tp273
sS'print_and_abort'
p274
(S'\n__stdcall print_and_abort()\n'
p275
V\u000avoid print_and_abort(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  __fprintf_chk(uVar1,1,0x4076a8,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p276
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a2a0]\nXOR EDI,EDI\nMOV ESI,0x4079af\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4076a8\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401740\nMOV EDI,dword ptr [0x0060a1e8]\nCALL 0x00401720\n'
p277
S'53\n48 8b 1d 88 54 20 00\n31 ff\nbe af 79 40 00\nba 05 00 00 00\ne8 b7 c6 ff ff\n48 89 c1\nbe 01 00 00 00\nba a8 76 40 00\n31 c0\n48 89 df\ne8 00 c9 ff ff\n8b 3d a2 53 20 00\ne8 d5 c8 ff ff\n'
p278
S'.text:0000000000404e10\n.text:0000000000404e11\n.text:0000000000404e18\n.text:0000000000404e1a\n.text:0000000000404e1f\n.text:0000000000404e24\n.text:0000000000404e29\n.text:0000000000404e2c\n.text:0000000000404e31\n.text:0000000000404e36\n.text:0000000000404e38\n.text:0000000000404e3b\n.text:0000000000404e40\n.text:0000000000404e46\n'
p279
tp280
sS'setlocale'
p281
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a168)();\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x0060a168]\n'
p284
S'ff 25 b2 8a 20 00\n'
p285
S'.plt:00000000004016b0\n'
p286
tp287
sS'c_toupper'
p288
(S'\n__stdcall c_toupper()\n'
p289
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p291
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p292
S'.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f99\n.text:0000000000404f9c\n'
p293
tp294
sS'bindtextdomain'
p295
(S'\n__stdcall bindtextdomain()\n'
p296
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a078)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x0060a078]\n'
p298
S'ff 25 a2 8b 20 00\n'
p299
S'.plt:00000000004014d0\n'
p300
tp301
sS'dc_parse_stream'
p302
(S'\n__stdcall dc_parse_stream(FILE * fp, char * filename)\n'
p303
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool dc_parse_stream(FILE *fp,char *filename)\u000a\u000a{\u000a  char *__pattern;\u000a  int iVar1;\u000a  int iVar2;\u000a  undefined8 uVar3;\u000a  char *__s;\u000a  __ssize_t _Var4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  char *pcVar7;\u000a  long lVar8;\u000a  char *local_60;\u000a  char *local_58;\u000a  undefined8 local_50;\u000a  char *local_48;\u000a  char *local_40;\u000a  size_t local_38;\u000a  \u000a  local_48 = (char *)0x0;\u000a  local_38 = 0;\u000a  local_40 = getenv("TERM");\u000a  if ((local_40 == (char *)0x0) || (*local_40 == 0)) {\u000a    local_40 = "none";\u000a  }\u000a  __s = "# Configuration file for dircolors, a utility to help you set the";\u000a  local_50 = CONCAT71((int7)((ulong)local_40 >> 8),1);\u000a  iVar2 = 3;\u000a  lVar8 = 0;\u000a  pcVar7 = __s;\u000a  if (fp != (FILE *)0x0) goto LAB_00402039;\u000aLAB_00402060:\u000a  if (__s == "") {\u000aLAB_004022c7:\u000a    return (_Bool)((byte)local_50 & 1);\u000a  }\u000a  sVar5 = strlen(__s);\u000a  pcVar7 = __s + sVar5 + 1;\u000a  do {\u000a    lVar8 = lVar8 + 1;\u000a    parse_line(__s,&local_60,&local_58);\u000a    __pattern = local_58;\u000a    __s = local_60;\u000a    if (local_60 != (char *)0x0) {\u000a      if (local_58 == (char *)0x0) {\u000a        local_50 = 0;\u000a        uVar3 = dcgettext(0,"%s:%lu: invalid line;  missing second token",5);\u000a        __s = quotearg_n_style_colon((char *)0x0);\u000a        error(0,0,uVar3,__s,lVar8);\u000a        free(local_60);\u000a      }\u000a      else {\u000a        iVar1 = c_strcasecmp(local_60,"TERM");\u000a        if (iVar1 == 0) {\u000a          iVar1 = fnmatch(__pattern,local_40,0);\u000a          if (iVar1 == 0) {\u000a            iVar2 = 2;\u000a          }\u000a          else {\u000a            iVar2 = (uint)(iVar2 == 2) * 2;\u000a          }\u000a        }\u000a        else {\u000a          if (iVar2 == 2) {\u000a            iVar2 = 1;\u000a          }\u000a          if (iVar2 == 0) {\u000a            iVar2 = 0;\u000a          }\u000a          else {\u000a            if (*__s != '*') {\u000a              if (*__s != '.') {\u000a                iVar1 = c_strcasecmp(__s,"OPTIONS");\u000a                if (((iVar1 != 0) && (iVar1 = c_strcasecmp(__s,"COLOR"), iVar1 != 0)) &&\u000a                   (iVar1 = c_strcasecmp(__s,"EIGHTBIT"), __s = local_60, iVar1 != 0)) {\u000a                  lVar6 = -0x128;\u000a                  do {\u000a                    iVar1 = c_strcasecmp(__s,*(char **)((long)slack_codes + lVar6 + 0x128));\u000a                    if (iVar1 == 0) {\u000a                      if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a                        _obstack_newchunk(&lsc_obstack,1);\u000a                      }\u000a                      __s = *(char **)((long)ls_codes + lVar6 + 0x128);\u000a                      __pattern = lsc_obstack.next_free + 1;\u000a                      *lsc_obstack.next_free = *__s;\u000a                      lsc_obstack.next_free = __pattern;\u000a                      if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a                        _obstack_newchunk(&lsc_obstack,1);\u000a                      }\u000a                      __pattern = lsc_obstack.next_free + 1;\u000a                      *lsc_obstack.next_free = __s[1];\u000a                      lsc_obstack.next_free = __pattern;\u000a                      if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a                        _obstack_newchunk(&lsc_obstack,1);\u000a                      }\u000a                      __s = lsc_obstack.next_free + 1;\u000a                      *lsc_obstack.next_free = '=';\u000a                      lsc_obstack.next_free = __s;\u000a                      append_quoted(local_58);\u000a                      if (lsc_obstack.chunk_limit != lsc_obstack.next_free) goto LAB_0040222b;\u000a                      goto LAB_0040221c;\u000a                    }\u000a                    lVar6 = lVar6 + 8;\u000a                  } while (lVar6 != 0);\u000a                  if (iVar2 - 1U < 2) {\u000a                    uVar3 = dcgettext(0,"%s:%lu: unrecognized keyword %s",5);\u000a                    if (filename == (char *)0x0) {\u000a                      __s = (char *)dcgettext(0,"<internal>",5);\u000a                    }\u000a                    else {\u000a                      __s = quotearg_n_style_colon((char *)0x0);\u000a                    }\u000a                    local_50 = 0;\u000a                    error(0,0,uVar3,__s,lVar8,local_60);\u000a                  }\u000a                }\u000a                goto LAB_00402020;\u000a              }\u000a              if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a                _obstack_newchunk(&lsc_obstack,1);\u000a              }\u000a              __s = lsc_obstack.next_free + 1;\u000a              *lsc_obstack.next_free = '*';\u000a              lsc_obstack.next_free = __s;\u000a              __s = local_60;\u000a            }\u000a            append_quoted(__s);\u000a            if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a              _obstack_newchunk(&lsc_obstack,1);\u000a            }\u000a            __s = lsc_obstack.next_free + 1;\u000a            *lsc_obstack.next_free = '=';\u000a            lsc_obstack.next_free = __s;\u000a            append_quoted(local_58);\u000a            if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000aLAB_0040221c:\u000a              _obstack_newchunk(&lsc_obstack,1);\u000a            }\u000aLAB_0040222b:\u000a            __s = lsc_obstack.next_free + 1;\u000a            *lsc_obstack.next_free = ':';\u000a            lsc_obstack.next_free = __s;\u000a          }\u000a        }\u000aLAB_00402020:\u000a        free(local_60);\u000a        free(local_58);\u000a      }\u000a    }\u000a    __s = pcVar7;\u000a    if (fp == (FILE *)0x0) goto LAB_00402060;\u000aLAB_00402039:\u000a    _Var4 = getline(&local_48,&local_38,(FILE *)fp);\u000a    __s = local_48;\u000a    if (_Var4 < 1) {\u000a      free(local_48);\u000a      goto LAB_004022c7;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p304
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RSI\nMOV R12,RDI\nMOV qword ptr [RSP + 0x20],0x0\nMOV qword ptr [RSP + 0x30],0x0\nMOV EDI,0x406f05\nCALL 0x00401410\nTEST RAX,RAX\nJZ 0x00401e9a\nCMP byte ptr [RAX],0x0\nJNZ 0x00401e9f\nMOV EAX,0x406f0a\nMOV qword ptr [RSP + 0x28],RAX\nMOV R13D,0x405640\nMOV AL,0x1\nMOV qword ptr [RSP + 0x18],RAX\nMOV EAX,0x3\nMOV qword ptr [RSP],RAX\nXOR R15D,R15D\nTEST R12,R12\nJNZ 0x00402039\nJMP 0x00402060\nMOV RAX,qword ptr [RSP]\nLEA EAX,[RAX + -0x1]\nCMP EAX,0x1\nJA 0x00401fdb\nXOR EDI,EDI\nMOV ESI,0x406f52\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RBP,RAX\nMOV RBX,R14\nTEST RBX,RBX\nJZ 0x00401fe0\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00403d50\nJMP 0x00401ff1\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x00401f2e\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RBX,qword ptr [0x406988 + RBX]\nMOV AL,byte ptr [RBX]\nMOV RCX,qword ptr [0x0060a2c8]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [0x0060a2c8],RDX\nMOV byte ptr [RCX],AL\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x00401f6a\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV AL,byte ptr [RBX + 0x1]\nMOV RCX,qword ptr [0x0060a2c8]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [0x0060a2c8],RDX\nMOV byte ptr [RCX],AL\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x00401fa0\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x3d\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004024d0\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nMOV RBX,R14\nJZ 0x0040221c\nJMP 0x0040222b\nMOV RBX,R14\nJMP 0x00402020\nXOR EDI,EDI\nMOV ESI,0x406f72\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV R9,qword ptr [RSP + 0x8]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV R8,R15\nCALL 0x004016d0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00401420\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401420\nTEST R12,R12\nJZ 0x00402060\nLEA RDI,[RSP + 0x20]\nLEA RSI,[RSP + 0x30]\nMOV RDX,R12\nCALL 0x00401710\nMOV RDI,qword ptr [RSP + 0x20]\nTEST RAX,RAX\nJG 0x0040207e\nJMP 0x004022c2\nMOV EAX,0x4066b5\nCMP R13,RAX\nJZ 0x004022c7\nMOV RDI,R13\nCALL 0x00401500\nMOV RDI,R13\nLEA R13,[R13 + RAX*0x1 + 0x1]\nINC R15\nLEA RSI,[RSP + 0x8]\nLEA RDX,[RSP + 0x10]\nCALL 0x00402370\nMOV R14,qword ptr [RSP + 0x8]\nTEST R14,R14\nJZ 0x00402034\nMOV RBP,qword ptr [RSP + 0x10]\nTEST RBP,RBP\nJZ 0x00402130\nMOV ESI,0x406f05\nMOV RDI,R14\nCALL 0x00402670\nTEST EAX,EAX\nJZ 0x00402186\nMOV RAX,qword ptr [RSP]\nCMP EAX,0x2\nMOV ECX,0x1\nCMOVZ EAX,ECX\nMOV qword ptr [RSP],RAX\nTEST EAX,EAX\nJZ 0x004021ad\nMOV AL,byte ptr [R14]\nCMP AL,0x2a\nJZ 0x004021c6\nCMP AL,0x2e\nJNZ 0x00402245\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x0040210a\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x2a\nMOV RDI,qword ptr [RSP + 0x8]\nJMP 0x004021c9\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR EDI,EDI\nMOV ESI,0x406f0f\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00403d50\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV R8,R15\nCALL 0x004016d0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00401420\nTEST R12,R12\nJNZ 0x00402039\nJMP 0x00402060\nXOR EDX,EDX\nMOV RDI,RBP\nMOV RSI,qword ptr [RSP + 0x28]\nCALL 0x00401560\nTEST EAX,EAX\nJZ 0x004021b8\nXOR EAX,EAX\nCMP dword ptr [RSP],0x2\nSETZ AL\nADD EAX,EAX\nMOV qword ptr [RSP],RAX\nJMP 0x00402020\nXOR EAX,EAX\nMOV qword ptr [RSP],RAX\nJMP 0x00402020\nMOV EAX,0x2\nMOV qword ptr [RSP],RAX\nJMP 0x00402020\nMOV RDI,R14\nCALL 0x004024d0\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x004021ed\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x3d\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004024d0\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x0040222b\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x3a\nJMP 0x00402020\nMOV ESI,0x406f3b\nMOV RDI,R14\nCALL 0x00402670\nTEST EAX,EAX\nJZ 0x00402020\nMOV ESI,0x406f43\nMOV RDI,R14\nCALL 0x00402670\nTEST EAX,EAX\nJZ 0x00402020\nMOV ESI,0x406f49\nMOV RDI,R14\nCALL 0x00402670\nTEST EAX,EAX\nJZ 0x00402020\nMOV R14,RBX\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RBX,-0x128\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [0x406858 + RBX]\nMOV RDI,RBP\nCALL 0x00402670\nTEST EAX,EAX\nJZ 0x00401f0f\nADD RBX,0x8\nJNZ 0x004022a0\nJMP 0x00401ecb\nCALL 0x00401420\nMOV RAX,qword ptr [RSP + 0x18]\nAND AL,0x1\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p305
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 f3\n49 89 fc\n48 c7 44 24 20 00 00 00 00\n48 c7 44 24 30 00 00 00 00\nbf 05 6f 40 00\ne8 80 f5 ff ff\n48 85 c0\n74 05\n80 38 00\n75 05\nb8 0a 6f 40 00\n48 89 44 24 28\n41 bd 40 56 40 00\nb0 01\n48 89 44 24 18\nb8 03 00 00 00\n48 89 04 24\n45 31 ff\n4d 85 e4\n0f 85 73 01 00 00\ne9 95 01 00 00\n48 8b 04 24\n8d 40 ff\n83 f8 01\n0f 87 00 01 00 00\n31 ff\nbe 52 6f 40 00\nba 05 00 00 00\ne8 f4 f5 ff ff\n48 89 c5\n4c 89 f3\n48 85 db\n0f 84 e5 00 00 00\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 46 1e 00 00\ne9 e2 00 00 00\n48 8b 05 ba 83 20 00\n48 3b 05 ab 83 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 d2 2c 00 00\n48 8b 9b 88 69 40 00\n8a 03\n48 8b 0d 8a 83 20 00\n48 8d 51 01\n48 89 15 7f 83 20 00\n88 01\n48 8b 05 7e 83 20 00\n48 3b 05 6f 83 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 96 2c 00 00\n8a 43 01\n48 8b 0d 54 83 20 00\n48 8d 51 01\n48 89 15 49 83 20 00\n88 01\n48 8b 05 48 83 20 00\n48 3b 05 39 83 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 60 2c 00 00\n48 8b 05 21 83 20 00\n48 8d 48 01\n48 89 0d 16 83 20 00\nc6 00 3d\n48 8b 7c 24 10\ne8 11 05 00 00\n48 8b 05 0a 83 20 00\n48 3b 05 fb 82 20 00\n4c 89 f3\n0f 84 46 02 00 00\ne9 50 02 00 00\n4c 89 f3\neb 40\n31 ff\nbe 72 6f 40 00\nba 05 00 00 00\ne8 ef f4 ff ff\n48 89 c1\n4c 8b 4c 24 08\n31 c0\n48 89 44 24 18\n31 ff\n31 f6\n31 c0\n48 89 ea\n4d 89 f8\ne8 bf f6 ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 7c 24 08\ne8 f6 f3 ff ff\n48 8b 7c 24 10\ne8 ec f3 ff ff\n4d 85 e4\n74 27\n48 8d 7c 24 20\n48 8d 74 24 30\n4c 89 e2\ne8 c5 f6 ff ff\n48 8b 7c 24 20\n48 85 c0\n7f 29\ne9 68 02 00 00\nb8 b5 66 40 00\n49 39 c5\n0f 84 59 02 00 00\n4c 89 ef\ne8 8a f4 ff ff\n4c 89 ef\n4d 8d 6c 05 01\n49 ff c7\n48 8d 74 24 08\n48 8d 54 24 10\ne8 e0 02 00 00\n4c 8b 74 24 08\n4d 85 f6\n74 9a\n48 8b 6c 24 10\n48 85 ed\n0f 84 88 00 00 00\nbe 05 6f 40 00\n4c 89 f7\ne8 bb 05 00 00\n85 c0\n0f 84 c9 00 00 00\n48 8b 04 24\n83 f8 02\nb9 01 00 00 00\n0f 44 c1\n48 89 04 24\n85 c0\n0f 84 d5 00 00 00\n41 8a 06\n3c 2a\n0f 84 e3 00 00 00\n3c 2e\n0f 85 5a 01 00 00\n48 8b 05 de 81 20 00\n48 3b 05 cf 81 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 f6 2a 00 00\n48 8b 05 b7 81 20 00\n48 8d 48 01\n48 89 0d ac 81 20 00\nc6 00 2a\n48 8b 7c 24 08\ne9 a0 00 00 00\n31 c0\n48 89 44 24 18\n31 ff\nbe 0f 6f 40 00\nba 05 00 00 00\ne8 98 f3 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 f6 1b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\n4d 89 f8\ne8 62 f5 ff ff\n48 8b 7c 24 08\ne8 a8 f2 ff ff\n4d 85 e4\n0f 85 b8 fe ff ff\ne9 da fe ff ff\n31 d2\n48 89 ef\n48 8b 74 24 28\ne8 cb f3 ff ff\n85 c0\n74 1f\n31 c0\n83 3c 24 02\n0f 94 c0\n01 c0\n48 89 04 24\ne9 73 fe ff ff\n31 c0\n48 89 04 24\ne9 68 fe ff ff\nb8 02 00 00 00\n48 89 04 24\ne9 5a fe ff ff\n4c 89 f7\ne8 02 03 00 00\n48 8b 05 fb 80 20 00\n48 3b 05 ec 80 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 13 2a 00 00\n48 8b 05 d4 80 20 00\n48 8d 48 01\n48 89 0d c9 80 20 00\nc6 00 3d\n48 8b 7c 24 10\ne8 c4 02 00 00\n48 8b 05 bd 80 20 00\n48 3b 05 ae 80 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 d5 29 00 00\n48 8b 05 96 80 20 00\n48 8d 48 01\n48 89 0d 8b 80 20 00\nc6 00 3a\ne9 db fd ff ff\nbe 3b 6f 40 00\n4c 89 f7\ne8 1e 04 00 00\n85 c0\n0f 84 c6 fd ff ff\nbe 43 6f 40 00\n4c 89 f7\ne8 09 04 00 00\n85 c0\n0f 84 b1 fd ff ff\nbe 49 6f 40 00\n4c 89 f7\ne8 f4 03 00 00\n85 c0\n0f 84 9c fd ff ff\n49 89 de\n48 8b 6c 24 08\n48 c7 c3 d8 fe ff ff\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b b3 58 68 40 00\n48 89 ef\ne8 c1 03 00 00\n85 c0\n0f 84 58 fc ff ff\n48 83 c3 08\n75 e3\ne9 09 fc ff ff\ne8 59 f1 ff ff\n48 8b 44 24 18\n24 01\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p306
S'.text:0000000000401e60\n.text:0000000000401e61\n.text:0000000000401e63\n.text:0000000000401e65\n.text:0000000000401e67\n.text:0000000000401e69\n.text:0000000000401e6a\n.text:0000000000401e6e\n.text:0000000000401e71\n.text:0000000000401e74\n.text:0000000000401e7d\n.text:0000000000401e86\n.text:0000000000401e8b\n.text:0000000000401e90\n.text:0000000000401e93\n.text:0000000000401e95\n.text:0000000000401e98\n.text:0000000000401e9a\n.text:0000000000401e9f\n.text:0000000000401ea4\n.text:0000000000401eaa\n.text:0000000000401eac\n.text:0000000000401eb1\n.text:0000000000401eb6\n.text:0000000000401eba\n.text:0000000000401ebd\n.text:0000000000401ec0\n.text:0000000000401ec6\n.text:0000000000401ecb\n.text:0000000000401ecf\n.text:0000000000401ed2\n.text:0000000000401ed5\n.text:0000000000401edb\n.text:0000000000401edd\n.text:0000000000401ee2\n.text:0000000000401ee7\n.text:0000000000401eec\n.text:0000000000401eef\n.text:0000000000401ef2\n.text:0000000000401ef5\n.text:0000000000401efb\n.text:0000000000401efd\n.text:0000000000401f02\n.text:0000000000401f05\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f16\n.text:0000000000401f1d\n.text:0000000000401f1f\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f2e\n.text:0000000000401f35\n.text:0000000000401f37\n.text:0000000000401f3e\n.text:0000000000401f42\n.text:0000000000401f49\n.text:0000000000401f4b\n.text:0000000000401f52\n.text:0000000000401f59\n.text:0000000000401f5b\n.text:0000000000401f60\n.text:0000000000401f65\n.text:0000000000401f6a\n.text:0000000000401f6d\n.text:0000000000401f74\n.text:0000000000401f78\n.text:0000000000401f7f\n.text:0000000000401f81\n.text:0000000000401f88\n.text:0000000000401f8f\n.text:0000000000401f91\n.text:0000000000401f96\n.text:0000000000401f9b\n.text:0000000000401fa0\n.text:0000000000401fa7\n.text:0000000000401fab\n.text:0000000000401fb2\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbf\n.text:0000000000401fc6\n.text:0000000000401fcd\n.text:0000000000401fd0\n.text:0000000000401fd6\n.text:0000000000401fdb\n.text:0000000000401fde\n.text:0000000000401fe0\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401ff1\n.text:0000000000401ff4\n.text:0000000000401ff9\n.text:0000000000401ffb\n.text:0000000000402000\n.text:0000000000402002\n.text:0000000000402004\n.text:0000000000402006\n.text:0000000000402009\n.text:000000000040200c\n.text:0000000000402011\n.text:0000000000402020\n.text:0000000000402025\n.text:000000000040202a\n.text:000000000040202f\n.text:0000000000402034\n.text:0000000000402037\n.text:0000000000402039\n.text:000000000040203e\n.text:0000000000402043\n.text:0000000000402046\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402053\n.text:0000000000402055\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402068\n.text:000000000040206e\n.text:0000000000402071\n.text:0000000000402076\n.text:0000000000402079\n.text:000000000040207e\n.text:0000000000402081\n.text:0000000000402086\n.text:000000000040208b\n.text:0000000000402090\n.text:0000000000402095\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209f\n.text:00000000004020a2\n.text:00000000004020a8\n.text:00000000004020ad\n.text:00000000004020b0\n.text:00000000004020b5\n.text:00000000004020b7\n.text:00000000004020bd\n.text:00000000004020c1\n.text:00000000004020c4\n.text:00000000004020c9\n.text:00000000004020cc\n.text:00000000004020d0\n.text:00000000004020d2\n.text:00000000004020d8\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020e3\n.text:00000000004020e5\n.text:00000000004020eb\n.text:00000000004020f2\n.text:00000000004020f9\n.text:00000000004020fb\n.text:0000000000402100\n.text:0000000000402105\n.text:000000000040210a\n.text:0000000000402111\n.text:0000000000402115\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402130\n.text:0000000000402132\n.text:0000000000402137\n.text:0000000000402139\n.text:000000000040213e\n.text:0000000000402143\n.text:0000000000402148\n.text:000000000040214b\n.text:000000000040214d\n.text:0000000000402152\n.text:0000000000402155\n.text:000000000040215a\n.text:000000000040215d\n.text:000000000040215f\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402166\n.text:0000000000402169\n.text:000000000040216e\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217b\n.text:0000000000402181\n.text:0000000000402186\n.text:0000000000402188\n.text:000000000040218b\n.text:0000000000402190\n.text:0000000000402195\n.text:0000000000402197\n.text:0000000000402199\n.text:000000000040219b\n.text:000000000040219f\n.text:00000000004021a2\n.text:00000000004021a4\n.text:00000000004021a8\n.text:00000000004021ad\n.text:00000000004021af\n.text:00000000004021b3\n.text:00000000004021b8\n.text:00000000004021bd\n.text:00000000004021c1\n.text:00000000004021c6\n.text:00000000004021c9\n.text:00000000004021ce\n.text:00000000004021d5\n.text:00000000004021dc\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021ed\n.text:00000000004021f4\n.text:00000000004021f8\n.text:00000000004021ff\n.text:0000000000402202\n.text:0000000000402207\n.text:000000000040220c\n.text:0000000000402213\n.text:000000000040221a\n.text:000000000040221c\n.text:0000000000402221\n.text:0000000000402226\n.text:000000000040222b\n.text:0000000000402232\n.text:0000000000402236\n.text:000000000040223d\n.text:0000000000402240\n.text:0000000000402245\n.text:000000000040224a\n.text:000000000040224d\n.text:0000000000402252\n.text:0000000000402254\n.text:000000000040225a\n.text:000000000040225f\n.text:0000000000402262\n.text:0000000000402267\n.text:0000000000402269\n.text:000000000040226f\n.text:0000000000402274\n.text:0000000000402277\n.text:000000000040227c\n.text:000000000040227e\n.text:0000000000402284\n.text:0000000000402287\n.text:000000000040228c\n.text:0000000000402293\n.text:00000000004022a0\n.text:00000000004022a7\n.text:00000000004022aa\n.text:00000000004022af\n.text:00000000004022b1\n.text:00000000004022b7\n.text:00000000004022bb\n.text:00000000004022bd\n.text:00000000004022c2\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022d2\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022dc\n'
p307
tp308
sS'set_char_quoting'
p309
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p310
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p311
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a320\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p312
S'89 f1\n48 85 ff\nbe 20 a3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p313
S'.text:0000000000402ab0\n.text:0000000000402ab2\n.text:0000000000402ab5\n.text:0000000000402aba\n.text:0000000000402abe\n.text:0000000000402ac0\n.text:0000000000402ac3\n.text:0000000000402ac7\n.text:0000000000402acc\n.text:0000000000402acf\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad6\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402add\n.text:0000000000402ae0\n.text:0000000000402ae5\n'
p314
tp315
sS'quotearg_n'
p316
(S'\n__stdcall quotearg_n(char * arg)\n'
p317
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV RDX,-0x1\nMOV ECX,0x60a320\nJMP 0x004039a0\n'
p319
S'48 c7 c2 ff ff ff ff\nb9 20 a3 60 00\neb 02\n'
p320
S'.text:0000000000403990\n.text:0000000000403997\n.text:000000000040399c\n'
p321
tp322
sS'mbsinit'
p323
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x0060a1b8]\n'
p326
S'ff 25 62 8a 20 00\n'
p327
S'.plt:0000000000401750\n'
p328
tp329
sS'dcgettext'
p330
(S'\n__stdcall dcgettext()\n'
p331
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a080)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060a080]\n'
p333
S'ff 25 9a 8b 20 00\n'
p334
S'.plt:00000000004014e0\n'
p335
tp336
sS'close_stream'
p337
(S'\n__stdcall close_stream(FILE * stream)\n'
p338
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401480\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004015d0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004049f0\nTEST EBP,EBP\nJZ 0x00404fdb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00404fff\nCALL 0x00401440\nMOV dword ptr [RAX],0x0\nJMP 0x00404fff\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00404fff\nTEST CL,CL\nJNZ 0x00404fff\nCALL 0x00401440\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n48 89 fb\ne8 d4 c4 ff ff\n49 89 c6\n48 89 df\ne8 19 c6 ff ff\n89 c5\n48 89 df\ne8 2f fa ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d c4 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e c4 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:0000000000404fa0\n.text:0000000000404fa1\n.text:0000000000404fa3\n.text:0000000000404fa4\n.text:0000000000404fa7\n.text:0000000000404fac\n.text:0000000000404faf\n.text:0000000000404fb2\n.text:0000000000404fb7\n.text:0000000000404fb9\n.text:0000000000404fbc\n.text:0000000000404fc1\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fca\n.text:0000000000404fcc\n.text:0000000000404fce\n.text:0000000000404fd3\n.text:0000000000404fd9\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe0\n.text:0000000000404fe2\n.text:0000000000404fe4\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404feb\n.text:0000000000404fed\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffc\n.text:0000000000404fff\n.text:0000000000405001\n.text:0000000000405002\n.text:0000000000405004\n.text:0000000000405005\n'
p342
tp343
sS'quotearg_colon_mem'
p344
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV EDX,0x3a\nJMP 0x00403cb0\n'
p347
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p348
S'.text:0000000000403d40\n.text:0000000000403d45\n'
p349
tp350
sS'quotearg_free'
p351
(S'\n__stdcall quotearg_free()\n'
p352
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p353
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a1f0]\nCMP dword ptr [0x0060a1f8],0x2\nJC 0x0040393a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401420\nINC RBX\nMOV EAX,dword ptr [0x0060a1f8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403920\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a360\nCMP RDI,RAX\nJZ 0x00403963\nCALL 0x00401420\nMOV qword ptr [0x0060a200],0x100\nMOV qword ptr [0x0060a208],0x60a360\nMOV EAX,0x60a200\nCMP R14,RAX\nJZ 0x00403980\nMOV RDI,R14\nCALL 0x00401420\nMOV qword ptr [0x0060a1f0],0x60a200\nMOV dword ptr [0x0060a1f8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p354
S'41 57\n41 56\n53\n4c 8b 35 e4 68 20 00\n83 3d e5 68 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 f8 da ff ff\n48 ff c3\n8b 05 c7 68 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 60 a3 60 00\n48 39 c7\n74 1b\ne8 d3 da ff ff\n48 c7 05 a8 68 20 00 00 01 00 00\n48 c7 05 a5 68 20 00 60 a3 60 00\nb8 00 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 ab da ff ff\n48 c7 05 70 68 20 00 00 a2 60 00\nc7 05 6e 68 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p355
S'.text:0000000000403900\n.text:0000000000403902\n.text:0000000000403904\n.text:0000000000403905\n.text:000000000040390c\n.text:0000000000403913\n.text:0000000000403915\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403920\n.text:0000000000403923\n.text:0000000000403928\n.text:000000000040392b\n.text:0000000000403931\n.text:0000000000403935\n.text:0000000000403938\n.text:000000000040393a\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394d\n.text:0000000000403958\n.text:0000000000403963\n.text:0000000000403968\n.text:000000000040396b\n.text:000000000040396d\n.text:0000000000403970\n.text:0000000000403975\n.text:0000000000403980\n.text:000000000040398a\n.text:000000000040398b\n.text:000000000040398d\n.text:000000000040398f\n'
p356
tp357
sS'quotearg_mem'
p358
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403b60\n'
p361
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p362
S'.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b86\n.text:0000000000403b88\n.text:0000000000403b8b\n.text:0000000000403b8e\n'
p363
tp364
sS'xcalloc'
p365
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p366
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p367
S'PUSH RAX\nCALL 0x004049a0\nTEST RAX,RAX\nJZ 0x004048ed\nPOP RCX\nRET\nCALL 0x00404950\n'
p368
S'50\ne8 ba 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p369
S'.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e6\n.text:00000000004048e9\n.text:00000000004048eb\n.text:00000000004048ec\n.text:00000000004048ed\n'
p370
tp371
sS'deregister_tm_clones'
p372
(S'\n__stdcall deregister_tm_clones()\n'
p373
V\u000a/* WARNING: Removing unreachable block (ram,0x004017c5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017cf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p374
S'MOV EAX,0x60a257\nPUSH RBP\nSUB RAX,0x60a250\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017e0\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p375
S'b8 57 a2 60 00\n55\n48 2d 50 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p376
S'.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b6\n.text:00000000004017bc\n.text:00000000004017c0\n.text:00000000004017c3\n.text:00000000004017c5\n.text:00000000004017ca\n.text:00000000004017cd\n.text:00000000004017cf\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017e0\n.text:00000000004017e1\n'
p377
tp378
sS'clear_ungetc_buffer_preserving_position'
p379
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p380
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p381
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404aa7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404ac0\n'
p382
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p383
S'.text:0000000000404aa0\n.text:0000000000404aa4\n.text:0000000000404aa6\n.text:0000000000404aa7\n.text:0000000000404aa9\n.text:0000000000404aae\n'
p384
tp385
sS'xnmalloc'
p386
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'MOV RAX,RDI\nMUL RSI\nJO 0x004047b1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004047c0\nPUSH RAX\nCALL 0x00404950\n'
p389
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p390
S'.text:00000000004047a0\n.text:00000000004047a3\n.text:00000000004047a6\n.text:00000000004047a8\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b1\n.text:00000000004047b2\n'
p391
tp392
sS'quotearg_custom'
p393
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p394
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403da0\n'
p396
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p397
S'.text:0000000000403e20\n.text:0000000000403e23\n.text:0000000000403e26\n.text:0000000000403e29\n.text:0000000000403e2b\n.text:0000000000403e2e\n.text:0000000000403e31\n.text:0000000000403e34\n'
p398
tp399
sS'free'
p400
(S'\n__stdcall free(void * __ptr)\n'
p401
V\u000a/* WARNING: Switch with 1 destination removed at 0x00401420 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060a020]\n'
p403
S'ff 25 fa 8b 20 00\n'
p404
S'.plt:0000000000401420\n'
p405
tp406
sS'close'
p407
(S'\n__stdcall close(int __fd)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060a0e0]\n'
p410
S'ff 25 3a 8b 20 00\n'
p411
S'.plt:00000000004015a0\n'
p412
tp413
sS'getenv'
p414
(S'\n__stdcall getenv(char * __name)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060a018]\n'
p417
S'ff 25 02 8c 20 00\n'
p418
S'.plt:0000000000401410\n'
p419
tp420
sS'quotearg_char'
p421
(S'\n__stdcall quotearg_char(char * arg)\n'
p422
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403cb0\n'
p424
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p425
S'.text:0000000000403d20\n.text:0000000000403d22\n.text:0000000000403d29\n.text:0000000000403d2b\n'
p426
tp427
sS'malloc'
p428
(S'\n__stdcall malloc(size_t __size)\n'
p429
V\u000a/* WARNING: Switch with 1 destination removed at 0x00401630 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060a128]\n'
p431
S'ff 25 f2 8a 20 00\n'
p432
S'.plt:0000000000401630\n'
p433
tp434
sS'fnmatch'
p435
(S'\n__stdcall fnmatch(char * __pattern, char * __name, int __flags)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fnmatch(char *__pattern,char *__name,int __flags)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fnmatch_0060a0c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060a0c0]\n'
p438
S'ff 25 5a 8b 20 00\n'
p439
S'.plt:0000000000401560\n'
p440
tp441
sS'c_tolower'
p442
(S'\n__stdcall c_tolower()\n'
p443
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p445
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p446
S'.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8c\n'
p447
tp448
sS'rpl_fseeko'
p449
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p450
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a188)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404ae8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404ae8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00404afa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004016f0\nMOV RDI,RBX\nCALL 0x00401620\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401550\nCMP RAX,-0x1\nJZ 0x00404b23\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404b28\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p452
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 f6 cb ff ff\n48 89 df\ne8 1e cb ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 41 ca ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p453
S'.text:0000000000404ac0\n.text:0000000000404ac1\n.text:0000000000404ac3\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404aca\n.text:0000000000404acd\n.text:0000000000404ad1\n.text:0000000000404ad5\n.text:0000000000404ad7\n.text:0000000000404adb\n.text:0000000000404adf\n.text:0000000000404ae1\n.text:0000000000404ae6\n.text:0000000000404ae8\n.text:0000000000404aeb\n.text:0000000000404aee\n.text:0000000000404af1\n.text:0000000000404af2\n.text:0000000000404af4\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b07\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b13\n.text:0000000000404b15\n.text:0000000000404b18\n.text:0000000000404b1f\n.text:0000000000404b21\n.text:0000000000404b23\n.text:0000000000404b28\n.text:0000000000404b29\n.text:0000000000404b2b\n.text:0000000000404b2c\n'
p454
tp455
sS'getopt_long'
p456
(S'\n__stdcall getopt_long()\n'
p457
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060a098)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060a098]\n'
p459
S'ff 25 82 8b 20 00\n'
p460
S'.plt:0000000000401510\n'
p461
tp462
sS'quote_n_mem'
p463
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p464
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV ECX,0x60a210\nJMP 0x004039a0\n'
p466
S'b9 10 a2 60 00\ne9 36 fb ff ff\n'
p467
S'.text:0000000000403e60\n.text:0000000000403e65\n'
p468
tp469
sS'xstrdup'
p470
(S'\n__stdcall xstrdup(char * string)\n'
p471
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401500\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404900\n'
p473
S'53\n48 89 fb\ne8 c7 cb ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p474
S'.text:0000000000404930\n.text:0000000000404931\n.text:0000000000404934\n.text:0000000000404939\n.text:000000000040493d\n.text:0000000000404940\n.text:0000000000404941\n'
p475
tp476
sS'c_ispunct'
p477
(S'\n__stdcall c_ispunct()\n'
p478
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p479
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404f22\nMOV AL,0x1\nJMP qword ptr [0x4079c0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd c0 79 40 00\nc3\n31 c0\nc3\n'
p481
S'.text:0000000000404f10\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1a\n.text:0000000000404f21\n.text:0000000000404f22\n.text:0000000000404f24\n'
p482
tp483
sS'quotearg_style'
p484
(S'\n__stdcall quotearg_style(char * arg)\n'
p485
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403b90\n'
p487
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p488
S'.text:0000000000403c70\n.text:0000000000403c73\n.text:0000000000403c75\n.text:0000000000403c77\n.text:0000000000403c79\n.text:0000000000403c7c\n'
p489
tp490
sS'__strndup'
p491
(S'\n__stdcall __strndup()\n'
p492
V\u000avoid __strndup(void)\u000a\u000a{\u000a  (*(code *)PTR___strndup_0060a110)();\u000a  return;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060a110]\n'
p494
S'ff 25 0a 8b 20 00\n'
p495
S'.plt:0000000000401600\n'
p496
tp497
sS'xstrndup'
p498
(S'\n__stdcall xstrndup(char * string, size_t n)\n'
p499
V\u000achar * xstrndup(char *string,size_t n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)__strndup();\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p500
S'PUSH RAX\nCALL 0x00401600\nTEST RAX,RAX\nJZ 0x0040498d\nPOP RCX\nRET\nCALL 0x00404950\n'
p501
S'50\ne8 7a cc ff ff\n48 85 c0\n74 02\n59\nc3\ne8 be ff ff ff\n'
p502
S'.text:0000000000404980\n.text:0000000000404981\n.text:0000000000404986\n.text:0000000000404989\n.text:000000000040498b\n.text:000000000040498c\n.text:000000000040498d\n'
p503
tp504
sS'puts'
p505
(S'\n__stdcall puts(char * __s)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_0060a058)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060a058]\n'
p508
S'ff 25 c2 8b 20 00\n'
p509
S'.plt:0000000000401490\n'
p510
tp511
sS'fscanf'
p512
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060a0d8]\n'
p515
S'ff 25 42 8b 20 00\n'
p516
S'.plt:0000000000401590\n'
p517
tp518
sS'emit_try_help'
p519
(S'\n__stdcall emit_try_help()\n'
p520
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p521
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a2a0]\nXOR EDI,EDI\nMOV ESI,0x406d6a\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a318]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401740\n'
p522
S'53\n48 8b 1d 48 89 20 00\n31 ff\nbe 6a 6d 40 00\nba 05 00 00 00\ne8 77 fb ff ff\n48 89 c2\n48 8b 0d a5 89 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 bd fd ff ff\n'
p523
S'.text:0000000000401950\n.text:0000000000401951\n.text:0000000000401958\n.text:000000000040195a\n.text:000000000040195f\n.text:0000000000401964\n.text:0000000000401969\n.text:000000000040196c\n.text:0000000000401973\n.text:0000000000401978\n.text:000000000040197a\n.text:000000000040197d\n.text:000000000040197e\n'
p524
tp525
sS'memcpy'
p526
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x0060a118]\n'
p529
S'ff 25 02 8b 20 00\n'
p530
S'.plt:0000000000401610\n'
p531
tp532
sS'call_freefun'
p533
(S'\n__stdcall call_freefun(obstack * h, void * old_chunk)\n'
p534
V\u000avoid call_freefun(obstack *h,void *old_chunk)\u000a\u000a{\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00404d3c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    (*(code *)h->freefun)(old_chunk);\u000a    return;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00404d47. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)h->freefun)(h->extra_arg,old_chunk,in_RDX,(code *)h->freefun);\u000a  return;\u000a}\u000a\u000a
p535
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00404d3f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x40]\nMOV RCX,qword ptr [RAX + 0x40]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p536
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 40\n48 8b 48 40\n48 8b 78 48\nff e1\n'
p537
S'.text:0000000000404d30\n.text:0000000000404d33\n.text:0000000000404d37\n.text:0000000000404d39\n.text:0000000000404d3c\n.text:0000000000404d3f\n.text:0000000000404d43\n.text:0000000000404d47\n'
p538
tp539
sS'strrchr'
p540
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060a0b0]\n'
p543
S'ff 25 6a 8b 20 00\n'
p544
S'.plt:0000000000401540\n'
p545
tp546
sS'close_stdout_set_ignore_EPIPE'
p547
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p548
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p549
S'MOV byte ptr [0x0060a310],DIL\nRET\n'
p550
S'40 88 3d 39 7c 20 00\nc3\n'
p551
S'.text:00000000004026d0\n.text:00000000004026d7\n'
p552
tp553
sS'quotearg_alloc_mem'
p554
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p555
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p556
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a320\nCMOVNZ R12,RCX\nCALL 0x00401440\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402bc0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404890\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402bc0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004038ea\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p557
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 20 a3 60 00\n4c 0f 45 e1\ne8 f8 db ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p558
S'.text:0000000000403810\n.text:0000000000403811\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403817\n.text:0000000000403819\n.text:000000000040381a\n.text:000000000040381e\n.text:0000000000403821\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403831\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383f\n.text:0000000000403843\n.text:0000000000403848\n.text:000000000040384d\n.text:000000000040384f\n.text:0000000000403853\n.text:0000000000403855\n.text:0000000000403858\n.text:000000000040385c\n.text:0000000000403861\n.text:0000000000403865\n.text:000000000040386a\n.text:000000000040386e\n.text:0000000000403870\n.text:0000000000403872\n.text:0000000000403875\n.text:0000000000403878\n.text:000000000040387b\n.text:0000000000403880\n.text:0000000000403885\n.text:0000000000403887\n.text:000000000040388c\n.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403897\n.text:000000000040389a\n.text:000000000040389f\n.text:00000000004038a2\n.text:00000000004038a6\n.text:00000000004038aa\n.text:00000000004038ad\n.text:00000000004038b0\n.text:00000000004038b5\n.text:00000000004038ba\n.text:00000000004038bd\n.text:00000000004038c2\n.text:00000000004038c7\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d3\n.text:00000000004038d7\n.text:00000000004038da\n.text:00000000004038de\n.text:00000000004038e3\n.text:00000000004038e5\n.text:00000000004038e7\n.text:00000000004038ea\n.text:00000000004038ed\n.text:00000000004038f1\n.text:00000000004038f2\n.text:00000000004038f4\n.text:00000000004038f6\n.text:00000000004038f8\n.text:00000000004038fa\n.text:00000000004038fb\n'
p559
tp560
sS'iswprint'
p561
(S'\n__stdcall iswprint(wint_t __wc)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060a1c0]\n'
p564
S'ff 25 5a 8a 20 00\n'
p565
S'.plt:0000000000401760\n'
p566
tp567
sS'quotearg_style_mem'
p568
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p569
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403c30\n'
p571
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p572
S'.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c96\n.text:0000000000403c98\n.text:0000000000403c9a\n.text:0000000000403c9c\n.text:0000000000403c9f\n.text:0000000000403ca2\n'
p573
tp574
sS'xalloc_die'
p575
(S'\n__stdcall xalloc_die()\n'
p576
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x4070bb,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p577
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a1e8]\nXOR EDI,EDI\nMOV ESI,0x4079af\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4070bb\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004016d0\nCALL 0x00401430\n'
p578
S'53\n8b 1d 91 58 20 00\n31 ff\nbe af 79 40 00\nba 05 00 00 00\ne8 78 cb ff ff\n48 89 c1\n31 f6\nba bb 70 40 00\n31 c0\n89 df\ne8 55 cd ff ff\ne8 b0 ca ff ff\n'
p579
S'.text:0000000000404950\n.text:0000000000404951\n.text:0000000000404957\n.text:0000000000404959\n.text:000000000040495e\n.text:0000000000404963\n.text:0000000000404968\n.text:000000000040496b\n.text:000000000040496d\n.text:0000000000404972\n.text:0000000000404974\n.text:0000000000404976\n.text:000000000040497b\n'
p580
tp581
sS'c_isspace'
p582
(S'\n__stdcall c_isspace()\n'
p583
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p584
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404f45\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p585
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p586
S'.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3d\n.text:0000000000404f3f\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f45\n.text:0000000000404f47\n'
p587
tp588
sS'quotearg_n_custom'
p589
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p590
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV R8,-0x1\nJMP 0x00403db0\n'
p592
S'49 c7 c0 ff ff ff ff\neb 07\n'
p593
S'.text:0000000000403da0\n.text:0000000000403da7\n'
p594
tp595
sS'open'
p596
(S'\n__stdcall open(char * __file, int __oflag)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a180)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060a180]\n'
p599
S'ff 25 9a 8a 20 00\n'
p600
S'.plt:00000000004016e0\n'
p601
tp602
sS'quotearg_n_custom_mem'
p603
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p604
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a350]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402b10\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p606
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 87 65 20 00\n48 89 44 24 30\n0f 10 05 6b 65 20 00\n0f 29 44 24 20\n0f 10 05 4f 65 20 00\n0f 29 44 24 10\n0f 10 05 33 65 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p607
S'.text:0000000000403db0\n.text:0000000000403db1\n.text:0000000000403db3\n.text:0000000000403db5\n.text:0000000000403db6\n.text:0000000000403dba\n.text:0000000000403dbd\n.text:0000000000403dc0\n.text:0000000000403dc2\n.text:0000000000403dc9\n.text:0000000000403dce\n.text:0000000000403dd5\n.text:0000000000403dda\n.text:0000000000403de1\n.text:0000000000403de6\n.text:0000000000403ded\n.text:0000000000403df1\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403dfc\n.text:0000000000403dfe\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e07\n.text:0000000000403e0c\n.text:0000000000403e10\n.text:0000000000403e11\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e16\n'
p608
tp609
sS'_init'
p610
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p611
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x004013fa\nCALL RAX\nADD RSP,0x8\nRET\n'
p613
S'48 83 ec 08\n48 8b 05 05 8c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p614
S'.init:00000000004013e8\n.init:00000000004013ec\n.init:00000000004013f3\n.init:00000000004013f6\n.init:00000000004013f8\n.init:00000000004013fa\n.init:00000000004013fe\n'
p615
tp616
sS'_obstack_allocated_p'
p617
(S'\n__stdcall _obstack_allocated_p(obstack * h, void * obj)\n'
p618
V\u000aint _obstack_allocated_p(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  \u000a  p_Var1 = h->chunk;\u000a  while( true ) {\u000a    if (p_Var1 == (_obstack_chunk *)0x0) {\u000a      return 0;\u000a    }\u000a    if ((p_Var1 < obj) && (obj <= p_Var1->limit)) break;\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p619
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJNZ 0x00404d69\nJMP 0x00404d78\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJZ 0x00404d78\nCMP RCX,RSI\nJNC 0x00404d60\nCMP qword ptr [RCX],RSI\nJC 0x00404d60\nMOV EAX,0x1\nRET\n'
p620
S'48 8b 4f 08\n31 c0\n48 85 c9\n75 0e\neb 1b\n48 8b 49 08\n48 85 c9\n74 0f\n48 39 f1\n73 f2\n48 39 31\n72 ed\nb8 01 00 00 00\nc3\n'
p621
S'.text:0000000000404d50\n.text:0000000000404d54\n.text:0000000000404d56\n.text:0000000000404d59\n.text:0000000000404d5b\n.text:0000000000404d60\n.text:0000000000404d64\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6c\n.text:0000000000404d6e\n.text:0000000000404d71\n.text:0000000000404d73\n.text:0000000000404d78\n'
p622
tp623
sS'__freading'
p624
(S'\n__stdcall __freading()\n'
p625
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a148)();\u000a  return;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060a148]\n'
p627
S'ff 25 d2 8a 20 00\n'
p628
S'.plt:0000000000401670\n'
p629
tp630
sS'append_quoted'
p631
(S'\n__stdcall append_quoted(char * str)\n'
p632
V\u000avoid append_quoted(char *str)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  char cVar4;\u000a  int iVar5;\u000a  \u000a  cVar4 = *str;\u000a  if (cVar4 != 0) {\u000a    str = str + 1;\u000a    bVar1 = true;\u000a    do {\u000a      iVar5 = (int)cVar4;\u000a      if (iVar5 - 0x3aU < 0x25) {\u000a        bVar2 = true;\u000a        switch(iVar5) {\u000a        case 0x3a:\u000a        case 0x3d:\u000a          bVar2 = true;\u000a          if (bVar1) {\u000a            if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a              _obstack_newchunk(&lsc_obstack,1);\u000a            }\u000a            pcVar3 = lsc_obstack.next_free + 1;\u000a            *lsc_obstack.next_free = '\u005c\u005c';\u000a            lsc_obstack.next_free = pcVar3;\u000a            goto LAB_00402608;\u000a          }\u000a          break;\u000a        case 0x5c:\u000a        case 0x5e:\u000a          bVar2 = (bool)(~bVar1 & 1);\u000a        }\u000a      }\u000a      else {\u000a        bVar2 = true;\u000a        if (iVar5 == 0x27) {\u000a          if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a            _obstack_newchunk(&lsc_obstack,1);\u000a          }\u000a          pcVar3 = lsc_obstack.next_free + 1;\u000a          *lsc_obstack.next_free = '\u005c'';\u000a          lsc_obstack.next_free = pcVar3;\u000a          if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a            _obstack_newchunk(&lsc_obstack,1);\u000a          }\u000a          pcVar3 = lsc_obstack.next_free + 1;\u000a          *lsc_obstack.next_free = '\u005c\u005c';\u000a          lsc_obstack.next_free = pcVar3;\u000a          if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a            _obstack_newchunk(&lsc_obstack,1);\u000a          }\u000a          pcVar3 = lsc_obstack.next_free + 1;\u000a          *lsc_obstack.next_free = '\u005c'';\u000a          lsc_obstack.next_free = pcVar3;\u000aLAB_00402608:\u000a          bVar2 = true;\u000a        }\u000a      }\u000a      bVar1 = bVar2;\u000a      if (lsc_obstack.chunk_limit == lsc_obstack.next_free) {\u000a        _obstack_newchunk(&lsc_obstack,1);\u000a      }\u000a      pcVar3 = lsc_obstack.next_free + 1;\u000a      *lsc_obstack.next_free = str[-1];\u000a      lsc_obstack.next_free = pcVar3;\u000a      cVar4 = *str;\u000a      str = str + 1;\u000a    } while (cVar4 != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV CL,byte ptr [RBX]\nTEST CL,CL\nJZ 0x00402652\nINC RBX\nMOV AL,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EDX,CL\nLEA ECX,[RDX + -0x3a]\nCMP ECX,0x24\nJA 0x00402560\nMOV BPL,0x1\nJMP qword ptr [0x405410 + RCX*0x8]\nTEST AL,0x1\nMOV BPL,0x1\nJZ 0x0040260b\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x0040252f\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x5c\nJMP 0x00402608\nNOT AL\nAND AL,0x1\nMOV EBP,EAX\nJMP 0x0040260b\nCMP EDX,0x27\nMOV BPL,0x1\nJNZ 0x0040260b\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x0040258b\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x27\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x004025bf\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x5c\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x004025f3\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOV RAX,qword ptr [0x0060a2c8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [0x0060a2c8],RCX\nMOV byte ptr [RAX],0x27\nMOV BPL,0x1\nMOV RAX,qword ptr [0x0060a2d0]\nCMP RAX,qword ptr [0x0060a2c8]\nJNZ 0x0040262a\nMOV EDI,0x60a2b0\nMOV ESI,0x1\nCALL 0x00404c00\nMOVZX EAX,byte ptr [RBX + -0x1]\nMOV RCX,qword ptr [0x0060a2c8]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [0x0060a2c8],RDX\nMOV byte ptr [RCX],AL\nMOVZX ECX,byte ptr [RBX]\nINC RBX\nTEST CL,CL\nMOV EAX,EBP\nJNZ 0x004024f0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p634
S'55\n53\n50\n48 89 fb\n8a 0b\n84 c9\n0f 84 72 01 00 00\n48 ff c3\nb0 01\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f be d1\n8d 4a c6\n83 f9 24\n77 65\n40 b5 01\nff 24 cd 10 54 40 00\na8 01\n40 b5 01\n0f 84 fb 00 00 00\n48 8b 05 b9 7d 20 00\n48 3b 05 aa 7d 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 d1 26 00 00\n48 8b 05 92 7d 20 00\n48 8d 48 01\n48 89 0d 87 7d 20 00\nc6 00 5c\ne9 bf 00 00 00\nf6 d0\n24 01\n89 c5\ne9 b0 00 00 00\n83 fa 27\n40 b5 01\n0f 85 9f 00 00 00\n48 8b 05 5d 7d 20 00\n48 3b 05 4e 7d 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 75 26 00 00\n48 8b 05 36 7d 20 00\n48 8d 48 01\n48 89 0d 2b 7d 20 00\nc6 00 27\n48 8b 05 29 7d 20 00\n48 3b 05 1a 7d 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 41 26 00 00\n48 8b 05 02 7d 20 00\n48 8d 48 01\n48 89 0d f7 7c 20 00\nc6 00 5c\n48 8b 05 f5 7c 20 00\n48 3b 05 e6 7c 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 0d 26 00 00\n48 8b 05 ce 7c 20 00\n48 8d 48 01\n48 89 0d c3 7c 20 00\nc6 00 27\n40 b5 01\n48 8b 05 be 7c 20 00\n48 3b 05 af 7c 20 00\n75 0f\nbf b0 a2 60 00\nbe 01 00 00 00\ne8 d6 25 00 00\n0f b6 43 ff\n48 8b 0d 93 7c 20 00\n48 8d 51 01\n48 89 15 88 7c 20 00\n88 01\n0f b6 0b\n48 ff c3\n84 c9\n89 e8\n0f 85 9e fe ff ff\n48 83 c4 08\n5b\n5d\nc3\n'
p635
S'.text:00000000004024d0\n.text:00000000004024d1\n.text:00000000004024d2\n.text:00000000004024d3\n.text:00000000004024d6\n.text:00000000004024d8\n.text:00000000004024da\n.text:00000000004024e0\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024f0\n.text:00000000004024f3\n.text:00000000004024f6\n.text:00000000004024f9\n.text:00000000004024fb\n.text:00000000004024fe\n.text:0000000000402505\n.text:0000000000402507\n.text:000000000040250a\n.text:0000000000402510\n.text:0000000000402517\n.text:000000000040251e\n.text:0000000000402520\n.text:0000000000402525\n.text:000000000040252a\n.text:000000000040252f\n.text:0000000000402536\n.text:000000000040253a\n.text:0000000000402541\n.text:0000000000402544\n.text:0000000000402550\n.text:0000000000402552\n.text:0000000000402554\n.text:0000000000402556\n.text:0000000000402560\n.text:0000000000402563\n.text:0000000000402566\n.text:000000000040256c\n.text:0000000000402573\n.text:000000000040257a\n.text:000000000040257c\n.text:0000000000402581\n.text:0000000000402586\n.text:000000000040258b\n.text:0000000000402592\n.text:0000000000402596\n.text:000000000040259d\n.text:00000000004025a0\n.text:00000000004025a7\n.text:00000000004025ae\n.text:00000000004025b0\n.text:00000000004025b5\n.text:00000000004025ba\n.text:00000000004025bf\n.text:00000000004025c6\n.text:00000000004025ca\n.text:00000000004025d1\n.text:00000000004025d4\n.text:00000000004025db\n.text:00000000004025e2\n.text:00000000004025e4\n.text:00000000004025e9\n.text:00000000004025ee\n.text:00000000004025f3\n.text:00000000004025fa\n.text:00000000004025fe\n.text:0000000000402605\n.text:0000000000402608\n.text:000000000040260b\n.text:0000000000402612\n.text:0000000000402619\n.text:000000000040261b\n.text:0000000000402620\n.text:0000000000402625\n.text:000000000040262a\n.text:000000000040262e\n.text:0000000000402635\n.text:0000000000402639\n.text:0000000000402640\n.text:0000000000402642\n.text:0000000000402645\n.text:0000000000402648\n.text:000000000040264a\n.text:000000000040264c\n.text:0000000000402652\n.text:0000000000402656\n.text:0000000000402657\n.text:0000000000402658\n'
p636
tp637
sS'parse_line'
p638
(S'\n__stdcall parse_line(char * line, char * * keyword, char * * arg)\n'
p639
V\u000avoid parse_line(char *line,char **keyword,char **arg)\u000a\u000a{\u000a  char cVar1;\u000a  ushort *puVar2;\u000a  byte bVar3;\u000a  ushort **ppuVar4;\u000a  char *pcVar5;\u000a  char *string;\u000a  \u000a  *keyword = (char *)0x0;\u000a  *arg = (char *)0x0;\u000a  ppuVar4 = __ctype_b_loc();\u000a  puVar2 = *ppuVar4;\u000a  line = line + -1;\u000a  do {\u000a    cVar1 = line[1];\u000a    line = line + 1;\u000a    bVar3 = to_uchar();\u000a  } while ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x20) != 0);\u000a  if ((cVar1 != 0) && (cVar1 != '#')) {\u000a    puVar2 = *ppuVar4;\u000a    pcVar5 = line;\u000a    do {\u000a      string = pcVar5;\u000a      cVar1 = *string;\u000a      bVar3 = to_uchar();\u000a      if (cVar1 == 0) break;\u000a      pcVar5 = string + 1;\u000a    } while ((puVar2[(ulong)bVar3] & 0x2000) == 0);\u000a    pcVar5 = xstrndup(line,(size_t)(string + -(long)line));\u000a    *keyword = pcVar5;\u000a    if (*string != 0) {\u000a      puVar2 = *ppuVar4;\u000a      pcVar5 = string + 1;\u000a      do {\u000a        string = pcVar5;\u000a        cVar1 = *string;\u000a        bVar3 = to_uchar();\u000a        pcVar5 = string + 1;\u000a      } while ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x20) != 0);\u000a      if ((cVar1 != 0) && (cVar1 != '#')) {\u000a        while ((pcVar5[-1] != '#' && (pcVar5[-1] != 0))) {\u000a          pcVar5 = pcVar5 + 1;\u000a        }\u000a        puVar2 = *ppuVar4;\u000a        do {\u000a          bVar3 = to_uchar();\u000a          pcVar5 = pcVar5 + -1;\u000a        } while ((*(byte *)((long)puVar2 + (ulong)bVar3 * 2 + 1) & 0x20) != 0);\u000a        pcVar5 = xstrndup(string,(size_t)(pcVar5 + -(long)string));\u000a        *arg = pcVar5;\u000a      }\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R12,RSI\nMOV R15,RDI\nMOV qword ptr [R12],0x0\nMOV qword ptr [R14],0x0\nCALL 0x00401770\nMOV qword ptr [RSP],RAX\nMOV RBP,qword ptr [RAX]\nDEC R15\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EBX,byte ptr [R15 + 0x1]\nINC R15\nMOVSX EDI,BL\nCALL 0x00402660\nMOVZX EAX,AL\nTEST byte ptr [RBP + RAX*0x2 + 0x1],0x20\nJNZ 0x004023b0\nTEST BL,BL\nJZ 0x004024b8\nCMP BL,0x23\nJZ 0x004024b8\nMOV RBX,R14\nMOV RAX,qword ptr [RSP]\nMOV R14,qword ptr [RAX]\nMOV R13,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EBP,byte ptr [R13]\nMOV EDI,EBP\nCALL 0x00402660\nINC R13\nTEST EBP,EBP\nJZ 0x00402415\nMOVZX EAX,AL\nMOVZX EAX,word ptr [R14 + RAX*0x2]\nAND EAX,0x2000\nTEST AX,AX\nJZ 0x004023f0\nLEA RSI,[R13 + -0x1]\nSUB RSI,R15\nMOV RDI,R15\nCALL 0x00404980\nMOV qword ptr [R12],RAX\nCMP byte ptr [R13 + -0x1],0x0\nMOV R14,RBX\nJZ 0x004024b8\nMOV RAX,qword ptr [RSP]\nMOV RBP,qword ptr [RAX]\nNOP dword ptr [RAX]\nMOVZX EBX,byte ptr [R13]\nMOVSX EDI,BL\nCALL 0x00402660\nMOVZX EAX,AL\nINC R13\nTEST byte ptr [RBP + RAX*0x2 + 0x1],0x20\nJNZ 0x00402440\nTEST BL,BL\nJZ 0x004024b8\nCMP BL,0x23\nJZ 0x004024b8\nLEA RBX,[R13 + -0x1]\nJMP 0x00402473\nINC R13\nMOVZX EAX,byte ptr [R13 + -0x1]\nCMP AL,0x23\nJZ 0x00402480\nTEST AL,AL\nJNZ 0x00402470\nMOV RAX,qword ptr [RSP]\nMOV RBP,qword ptr [RAX]\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [R13 + -0x2]\nCALL 0x00402660\nMOVZX EAX,AL\nDEC R13\nTEST byte ptr [RBP + RAX*0x2 + 0x1],0x20\nJNZ 0x00402490\nSUB R13,RBX\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x00404980\nMOV qword ptr [R14],RAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p641
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f4\n49 89 ff\n49 c7 04 24 00 00 00 00\n49 c7 06 00 00 00 00\ne8 d8 f3 ff ff\n48 89 04 24\n48 8b 28\n49 ff cf\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 5f 01\n49 ff c7\n0f be fb\ne8 a0 02 00 00\n0f b6 c0\nf6 44 45 01 20\n75 e6\n84 db\n0f 84 e6 00 00 00\n80 fb 23\n0f 84 dd 00 00 00\n4c 89 f3\n48 8b 04 24\n4c 8b 30\n4d 89 fd\n0f 1f 84 00 00 00 00 00\n41 0f be 6d 00\n89 ef\ne8 64 02 00 00\n49 ff c5\n85 ed\n74 12\n0f b6 c0\n41 0f b7 04 46\n25 00 20 00 00\n66 85 c0\n74 db\n49 8d 75 ff\n4c 29 fe\n4c 89 ff\ne8 5c 25 00 00\n49 89 04 24\n41 80 7d ff 00\n49 89 de\n0f 84 82 00 00 00\n48 8b 04 24\n48 8b 28\n0f 1f 00\n41 0f b6 5d 00\n0f be fb\ne8 13 02 00 00\n0f b6 c0\n49 ff c5\nf6 44 45 01 20\n75 e6\n84 db\n74 5a\n80 fb 23\n74 55\n49 8d 5d ff\neb 0a\n49 ff c5\n41 0f b6 45 ff\n3c 23\n74 04\n84 c0\n75 f0\n48 8b 04 24\n48 8b 28\n66 0f 1f 84 00 00 00 00 00\n41 0f be 7d fe\ne8 c6 01 00 00\n0f b6 c0\n49 ff cd\nf6 44 45 01 20\n75 e9\n49 29 dd\n48 89 df\n4c 89 ee\ne8 cb 24 00 00\n49 89 06\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p642
S'.text:0000000000402370\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402375\n.text:0000000000402377\n.text:0000000000402379\n.text:000000000040237a\n.text:000000000040237b\n.text:000000000040237e\n.text:0000000000402381\n.text:0000000000402384\n.text:000000000040238c\n.text:0000000000402393\n.text:0000000000402398\n.text:000000000040239c\n.text:000000000040239f\n.text:00000000004023a2\n.text:00000000004023b0\n.text:00000000004023b5\n.text:00000000004023b8\n.text:00000000004023bb\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023ca\n.text:00000000004023cc\n.text:00000000004023d2\n.text:00000000004023d5\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e2\n.text:00000000004023e5\n.text:00000000004023e8\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023f7\n.text:00000000004023fc\n.text:00000000004023ff\n.text:0000000000402401\n.text:0000000000402403\n.text:0000000000402406\n.text:000000000040240b\n.text:0000000000402410\n.text:0000000000402413\n.text:0000000000402415\n.text:0000000000402419\n.text:000000000040241c\n.text:000000000040241f\n.text:0000000000402424\n.text:0000000000402428\n.text:000000000040242d\n.text:0000000000402430\n.text:0000000000402436\n.text:000000000040243a\n.text:000000000040243d\n.text:0000000000402440\n.text:0000000000402445\n.text:0000000000402448\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402453\n.text:0000000000402458\n.text:000000000040245a\n.text:000000000040245c\n.text:000000000040245e\n.text:0000000000402461\n.text:0000000000402463\n.text:0000000000402467\n.text:0000000000402470\n.text:0000000000402473\n.text:0000000000402478\n.text:000000000040247a\n.text:000000000040247c\n.text:000000000040247e\n.text:0000000000402480\n.text:0000000000402484\n.text:0000000000402487\n.text:0000000000402490\n.text:0000000000402495\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a0\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024aa\n.text:00000000004024ad\n.text:00000000004024b0\n.text:00000000004024b5\n.text:00000000004024b8\n.text:00000000004024bc\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c1\n.text:00000000004024c3\n.text:00000000004024c5\n.text:00000000004024c6\n'
p643
tp644
sS'set_quoting_flags'
p645
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p646
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'TEST RDI,RDI\nMOV ECX,0x60a320\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p648
S'48 85 ff\nb9 20 a3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p649
S'.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af8\n.text:0000000000402afc\n.text:0000000000402aff\n.text:0000000000402b02\n'
p650
tp651
sS'fputs_unlocked'
p652
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060a0f0]\n'
p655
S'ff 25 2a 8b 20 00\n'
p656
S'.plt:00000000004015c0\n'
p657
tp658
sS'main'
p659
(S'\n__stdcall main(char * * argv)\n'
p660
V\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  Shell_syntax SVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  size_t sVar7;\u000a  undefined8 uVar8;\u000a  undefined8 uVar9;\u000a  char *__s;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  char *__n;\u000a  char *__s_00;\u000a  char **in_RSI;\u000a  char *__s_01;\u000a  int iVar12;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x406c2b,"/usr/local/share/locale");\u000a  textdomain(0x406c2b);\u000a  atexit(close_stdout);\u000a  bVar1 = false;\u000a  uVar11 = 2;\u000a  while( true ) {\u000a    uVar10 = uVar11;\u000a    SVar4 = (Shell_syntax)uVar10;\u000a    uVar11 = 0;\u000a    iVar12 = (int)((ulong)argv & 0xffffffff);\u000a    iVar3 = getopt_long((ulong)argv & 0xffffffff);\u000a    iVar6 = optind;\u000a    if (iVar3 < 0x62) break;\u000a    if (iVar3 != 0x62) {\u000a      if (iVar3 == 0x70) {\u000a        bVar1 = true;\u000a        uVar11 = uVar10;\u000a      }\u000a      else {\u000a        if (iVar3 != 99) goto LAB_00401deb;\u000a        uVar11 = 1;\u000a      }\u000a    }\u000a  }\u000a  if (iVar3 == -1) {\u000a    if ((bVar1) && (SVar4 != SHELL_SYNTAX_UNKNOWN)) {\u000a      uVar8 = dcgettext(0,\u000a                        "the options to output dircolors\u005c' internal database and\u005cnto select a shell syntax are mutually exclusive"\u000a                        ,5);\u000a      error(0,0,uVar8,uVar8);\u000a      usage(1);\u000a    }\u000a    else {\u000a      in_RSI = in_RSI + (long)optind;\u000a      uVar11 = (ulong)!bVar1;\u000a      if (iVar12 - optind <= (int)(uint)!bVar1) {\u000a        if (bVar1) {\u000a          __s = "# Configuration file for dircolors, a utility to help you set the";\u000a          do {\u000a            puts(__s);\u000a            sVar7 = strlen(__s);\u000a            __s = __s + sVar7 + 1;\u000a          } while (__s + -0x405640 < (char *)0x1075);\u000a        }\u000a        else {\u000a          if ((SVar4 == SHELL_SYNTAX_UNKNOWN) &&\u000a             (SVar4 = guess_shell_syntax(), SVar4 == SHELL_SYNTAX_UNKNOWN)) {\u000a            uVar8 = dcgettext(0,"no SHELL environment variable, and no shell type option given",5);\u000a            error(1,0,uVar8,uVar8);\u000a            SVar4 = SHELL_SYNTAX_UNKNOWN;\u000a          }\u000a          _obstack_begin(&lsc_obstack,0,0,malloc,free);\u000a          if (iVar12 == iVar6) {\u000a            _Var2 = dc_parse_stream((FILE *)0x0,(char *)0x0);\u000a          }\u000a          else {\u000a            _Var2 = dc_parse_file(*in_RSI);\u000a          }\u000a          __s = lsc_obstack.object_base;\u000a          if (_Var2 == false) {\u000a            return 1;\u000a          }\u000a          __n = lsc_obstack.next_free + -(long)lsc_obstack.object_base;\u000a          if (__n == (char *)0x0) {\u000a            lsc_obstack.use_extra_arg_bitfield._0_1_ = (byte)lsc_obstack.use_extra_arg_bitfield | 2;\u000a          }\u000a          lsc_obstack.object_base =\u000a               (char *)(~lsc_obstack.alignment_mask &\u000a                       (ulong)(lsc_obstack.next_free + lsc_obstack.alignment_mask));\u000a          if (lsc_obstack.chunk_limit + -(long)lsc_obstack.chunk <\u000a              (char *)(~lsc_obstack.alignment_mask &\u000a                      (ulong)(lsc_obstack.next_free + lsc_obstack.alignment_mask)) +\u000a              -(long)lsc_obstack.chunk) {\u000a            lsc_obstack.object_base = lsc_obstack.chunk_limit;\u000a          }\u000a          __s_01 = "setenv LS_COLORS \u005c'";\u000a          if (SVar4 == SHELL_SYNTAX_BOURNE) {\u000a            __s_01 = "LS_COLORS=\u005c'";\u000a          }\u000a          __s_00 = "\u005c'\u005cn";\u000a          if (SVar4 == SHELL_SYNTAX_BOURNE) {\u000a            __s_00 = "\u005c';\u005cnexport LS_COLORS\u005cn";\u000a          }\u000a          lsc_obstack.next_free = lsc_obstack.object_base;\u000a          fputs_unlocked(__s_01,(FILE *)stdout);\u000a          fwrite_unlocked(__s,1,(size_t)__n,(FILE *)stdout);\u000a          fputs_unlocked(__s_00,(FILE *)stdout);\u000a        }\u000a        return 0;\u000a      }\u000a    }\u000a    uVar8 = dcgettext(0,"extra operand %s",5);\u000a    __s = quote(in_RSI[uVar11]);\u000a    error(0,0,uVar8,__s);\u000a    uVar8 = stderr;\u000a    if (bVar1) {\u000a      uVar9 = dcgettext(0,"file operands cannot be combined with --print-database (-p)",5);\u000a      __fprintf_chk(uVar8,1,0x4076a8,uVar9);\u000a    }\u000a    usage(1);\u000aLAB_00401deb:\u000a    usage(1);\u000a    __s = getenv("SHELL");\u000a    uVar5 = 2;\u000a    if ((__s != (char *)0x0) && (*__s != 0)) {\u000a      __s = last_component(__s);\u000a      if ((*__s == 'c') && (((__s[1] == 's' && (__s[2] == 'h')) && (__s[3] == 0)))) {\u000a        return 1;\u000a      }\u000a      iVar6 = strcmp(__s,"tcsh");\u000a      uVar5 = (uint)(iVar6 == 0);\u000a    }\u000a    return (int)uVar5;\u000a  }\u000a  if (iVar3 != -0x83) {\u000a    if (iVar3 != -0x82) goto LAB_00401deb;\u000a    usage(0);\u000a  }\u000a  version_etc(stdout,"dircolors","GNU coreutils",Version,"H. Peter Anvin",0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14D,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x004029a0\nMOV EDI,0x6\nMOV ESI,0x407781\nCALL 0x004016b0\nMOV EDI,0x406c2b\nMOV ESI,0x406c0b\nCALL 0x004014d0\nMOV EDI,0x406c2b\nCALL 0x004014b0\nMOV EDI,0x4026e0\nCALL 0x004053c0\nMOV EBP,0x2\nXOR R15D,R15D\nJMP 0x00401b23\nMOV R15B,0x1\nMOV EBX,EBP\nJMP 0x00401b30\nMOV EBX,0x1\nNOP dword ptr [RAX]\nMOV EBP,EBX\nXOR EBX,EBX\nMOV EDX,0x406c23\nMOV ECX,0x405540\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,R12\nCALL 0x00401510\nCMP EAX,0x61\nJLE 0x00401b65\nCMP EAX,0x62\nJZ 0x00401b30\nCMP EAX,0x70\nJZ 0x00401b20\nCMP EAX,0x63\nJZ 0x00401b27\nJMP 0x00401deb\nCMP EAX,-0x1\nJNZ 0x00401d0b\nMOVSXD RAX,dword ptr [0x0060a278]\nTEST R15B,R15B\nJZ 0x00401b83\nCMP EBP,0x2\nJNZ 0x00401d53\nSUB R14D,EAX\nLEA R12,[R12 + RAX*0x8]\nXOR EBX,EBX\nTEST R15B,R15B\nSETZ BL\nCMP EBX,R14D\nJL 0x00401d7f\nTEST R15B,R15B\nJZ 0x00401bd8\nMOV EBP,0x405640\nMOV EBX,0x405640\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00401490\nMOV RDI,RBX\nCALL 0x00401500\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nMOV RAX,RBX\nSUB RAX,RBP\nCMP RAX,0x1075\nJC 0x00401bb0\nJMP 0x00401d00\nCMP EBP,0x2\nJNZ 0x00401c13\nCALL 0x00401e00\nMOV EBP,EAX\nCMP EBP,0x2\nJNZ 0x00401c13\nXOR EDI,EDI\nMOV ESI,0x406cf8\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016d0\nMOV EBP,0x2\nMOV EDI,0x60a2b0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x401630\nMOV R8D,0x401420\nCALL 0x00404b30\nTEST R14D,R14D\nJZ 0x00401c3c\nMOV RDI,qword ptr [R12]\nCALL 0x004022e0\nJMP 0x00401c45\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401e60\nMOV ECX,EAX\nMOV EAX,0x1\nTEST CL,CL\nJZ 0x00401d02\nMOV RAX,qword ptr [0x0060a2c8]\nMOV R14,qword ptr [0x0060a2c0]\nMOV RBX,RAX\nSUB RBX,R14\nJNZ 0x00401c71\nOR byte ptr [0x0060a300],0x2\nMOV RCX,qword ptr [0x0060a2e0]\nADD RAX,RCX\nNOT RCX\nAND RCX,RAX\nMOV RAX,qword ptr [0x0060a2b8]\nMOV RDX,RCX\nSUB RDX,RAX\nMOV RSI,qword ptr [0x0060a2d0]\nMOV RDI,RSI\nSUB RDI,RAX\nCMP RDX,RDI\nCMOVA RCX,RSI\nMOV qword ptr [0x0060a2c8],RCX\nMOV qword ptr [0x0060a2c0],RCX\nTEST EBP,EBP\nMOV EAX,0x406d36\nMOV EDI,0x406d57\nCMOVZ RDI,RAX\nMOV EAX,0x406d42\nMOV EBP,0x406ec6\nCMOVZ RBP,RAX\nMOV RSI,qword ptr [0x0060a268]\nCALL 0x004015c0\nMOV RCX,qword ptr [0x0060a268]\nMOV ESI,0x1\nMOV RDI,R14\nMOV RDX,RBX\nCALL 0x00401680\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RBP\nCALL 0x004015c0\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401d24\nCMP EAX,0xffffff7e\nJNZ 0x00401deb\nXOR EDI,EDI\nCALL 0x00401880\nMOV RDI,qword ptr [0x0060a268]\nMOV RCX,qword ptr [0x0060a1e0]\nMOV ESI,0x406c01\nMOV EDX,0x406c27\nMOV R8D,0x406c35\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404690\nXOR EDI,EDI\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406c44\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016d0\nMOV EDI,0x1\nCALL 0x00401880\nXOR EDI,EDI\nMOV ESI,0x406cab\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RBP,RAX\nMOV RDI,qword ptr [R12 + RBX*0x8]\nCALL 0x00403e90\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004016d0\nTEST R15B,R15B\nJZ 0x00401de1\nMOV RBX,qword ptr [0x0060a2a0]\nXOR EDI,EDI\nMOV ESI,0x406cbc\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4076a8\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401740\nMOV EDI,0x1\nCALL 0x00401880\nMOV EDI,0x1\nCALL 0x00401880\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p662
S'55\n41 57\n41 56\n41 54\n53\n49 89 f4\n41 89 fe\n49 8b 3c 24\ne8 c9 0e 00 00\nbf 06 00 00 00\nbe 81 77 40 00\ne8 ca fb ff ff\nbf 2b 6c 40 00\nbe 0b 6c 40 00\ne8 db f9 ff ff\nbf 2b 6c 40 00\ne8 b1 f9 ff ff\nbf e0 26 40 00\ne8 b7 38 00 00\nbd 02 00 00 00\n45 31 ff\neb 10\n41 b7 01\n89 eb\neb 09\nbb 01 00 00 00\n0f 1f 40 00\n89 dd\n31 db\nba 23 6c 40 00\nb9 40 55 40 00\n45 31 c0\n44 89 f7\n4c 89 e6\ne8 c4 f9 ff ff\n83 f8 61\n7e 14\n83 f8 62\n74 da\n83 f8 70\n74 c5\n83 f8 63\n74 c7\ne9 86 02 00 00\n83 f8 ff\n0f 85 9d 01 00 00\n48 63 05 03 87 20 00\n45 84 ff\n74 09\n83 fd 02\n0f 85 d0 01 00 00\n41 29 c6\n4d 8d 24 c4\n31 db\n45 84 ff\n0f 94 c3\n44 39 f3\n0f 8c e4 01 00 00\n45 84 ff\n74 38\nbd 40 56 40 00\nbb 40 56 40 00\n66 0f 1f 44 00 00\n48 89 df\ne8 d8 f8 ff ff\n48 89 df\ne8 40 f9 ff ff\n48 8d 5c 03 01\n48 89 d8\n48 29 e8\n48 3d 75 10 00 00\n72 dd\ne9 28 01 00 00\n83 fd 02\n75 36\ne8 1e 02 00 00\n89 c5\n83 fd 02\n75 2a\n31 ff\nbe f8 6c 40 00\nba 05 00 00 00\ne8 e6 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 c2 fa ff ff\nbd 02 00 00 00\nbf b0 a2 60 00\n31 f6\n31 d2\nb9 30 16 40 00\n41 b8 20 14 40 00\ne8 04 2f 00 00\n45 85 f6\n74 0b\n49 8b 3c 24\ne8 a6 06 00 00\neb 09\n31 ff\n31 f6\ne8 1b 02 00 00\n89 c1\nb8 01 00 00 00\n84 c9\n0f 84 ae 00 00 00\n48 8b 05 6d 86 20 00\n4c 8b 35 5e 86 20 00\n48 89 c3\n4c 29 f3\n75 07\n80 0d 8f 86 20 00 02\n48 8b 0d 68 86 20 00\n48 01 c8\n48 f7 d1\n48 21 c1\n48 8b 05 30 86 20 00\n48 89 ca\n48 29 c2\n48 8b 35 3b 86 20 00\n48 89 f7\n48 29 c7\n48 39 fa\n48 0f 47 ce\n48 89 0d 1f 86 20 00\n48 89 0d 10 86 20 00\n85 ed\nb8 36 6d 40 00\nbf 57 6d 40 00\n48 0f 44 f8\nb8 42 6d 40 00\nbd c6 6e 40 00\n48 0f 44 e8\n48 8b 35 93 85 20 00\ne8 e6 f8 ff ff\n48 8b 0d 87 85 20 00\nbe 01 00 00 00\n4c 89 f7\n48 89 da\ne8 8f f9 ff ff\n48 8b 35 70 85 20 00\n48 89 ef\ne8 c0 f8 ff ff\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 12\n3d 7e ff ff ff\n0f 85 ce 00 00 00\n31 ff\ne8 5c fb ff ff\n48 8b 3d 3d 85 20 00\n48 8b 0d ae 84 20 00\nbe 01 6c 40 00\nba 27 6c 40 00\n41 b8 35 6c 40 00\n45 31 c9\n31 c0\ne8 44 29 00 00\n31 ff\ne8 cd f9 ff ff\n31 ff\nbe 44 6c 40 00\nba 05 00 00 00\ne8 7c f7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 5b f9 ff ff\nbf 01 00 00 00\ne8 01 fb ff ff\n31 ff\nbe ab 6c 40 00\nba 05 00 00 00\ne8 50 f7 ff ff\n48 89 c5\n49 8b 3c dc\ne8 f4 20 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 23 f9 ff ff\n45 84 ff\n74 2f\n48 8b 1d e7 84 20 00\n31 ff\nbe bc 6c 40 00\nba 05 00 00 00\ne8 16 f7 ff ff\n48 89 c1\nbe 01 00 00 00\nba a8 76 40 00\n31 c0\n48 89 df\ne8 5f f9 ff ff\nbf 01 00 00 00\ne8 95 fa ff ff\nbf 01 00 00 00\ne8 8b fa ff ff\n66 66 2e 0f 1f 84 00 00 00 00 00\n'
p663
S'.text:0000000000401ac0\n.text:0000000000401ac1\n.text:0000000000401ac3\n.text:0000000000401ac5\n.text:0000000000401ac7\n.text:0000000000401ac8\n.text:0000000000401acb\n.text:0000000000401ace\n.text:0000000000401ad2\n.text:0000000000401ad7\n.text:0000000000401adc\n.text:0000000000401ae1\n.text:0000000000401ae6\n.text:0000000000401aeb\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401afa\n.text:0000000000401aff\n.text:0000000000401b04\n.text:0000000000401b09\n.text:0000000000401b0e\n.text:0000000000401b11\n.text:0000000000401b20\n.text:0000000000401b23\n.text:0000000000401b25\n.text:0000000000401b27\n.text:0000000000401b2c\n.text:0000000000401b30\n.text:0000000000401b32\n.text:0000000000401b34\n.text:0000000000401b39\n.text:0000000000401b3e\n.text:0000000000401b41\n.text:0000000000401b44\n.text:0000000000401b47\n.text:0000000000401b4c\n.text:0000000000401b4f\n.text:0000000000401b51\n.text:0000000000401b54\n.text:0000000000401b56\n.text:0000000000401b59\n.text:0000000000401b5b\n.text:0000000000401b5e\n.text:0000000000401b60\n.text:0000000000401b65\n.text:0000000000401b68\n.text:0000000000401b6e\n.text:0000000000401b75\n.text:0000000000401b78\n.text:0000000000401b7a\n.text:0000000000401b7d\n.text:0000000000401b83\n.text:0000000000401b86\n.text:0000000000401b8a\n.text:0000000000401b8c\n.text:0000000000401b8f\n.text:0000000000401b92\n.text:0000000000401b95\n.text:0000000000401b9b\n.text:0000000000401b9e\n.text:0000000000401ba0\n.text:0000000000401ba5\n.text:0000000000401baa\n.text:0000000000401bb0\n.text:0000000000401bb3\n.text:0000000000401bb8\n.text:0000000000401bbb\n.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bc8\n.text:0000000000401bcb\n.text:0000000000401bd1\n.text:0000000000401bd3\n.text:0000000000401bd8\n.text:0000000000401bdb\n.text:0000000000401bdd\n.text:0000000000401be2\n.text:0000000000401be4\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401beb\n.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bfd\n.text:0000000000401c02\n.text:0000000000401c04\n.text:0000000000401c06\n.text:0000000000401c09\n.text:0000000000401c0e\n.text:0000000000401c13\n.text:0000000000401c18\n.text:0000000000401c1a\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c27\n.text:0000000000401c2c\n.text:0000000000401c2f\n.text:0000000000401c31\n.text:0000000000401c35\n.text:0000000000401c3a\n.text:0000000000401c3c\n.text:0000000000401c3e\n.text:0000000000401c40\n.text:0000000000401c45\n.text:0000000000401c47\n.text:0000000000401c4c\n.text:0000000000401c4e\n.text:0000000000401c54\n.text:0000000000401c5b\n.text:0000000000401c62\n.text:0000000000401c65\n.text:0000000000401c68\n.text:0000000000401c6a\n.text:0000000000401c71\n.text:0000000000401c78\n.text:0000000000401c7b\n.text:0000000000401c7e\n.text:0000000000401c81\n.text:0000000000401c88\n.text:0000000000401c8b\n.text:0000000000401c8e\n.text:0000000000401c95\n.text:0000000000401c98\n.text:0000000000401c9b\n.text:0000000000401c9e\n.text:0000000000401ca2\n.text:0000000000401ca9\n.text:0000000000401cb0\n.text:0000000000401cb2\n.text:0000000000401cb7\n.text:0000000000401cbc\n.text:0000000000401cc0\n.text:0000000000401cc5\n.text:0000000000401cca\n.text:0000000000401cce\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ce9\n.text:0000000000401cec\n.text:0000000000401cf1\n.text:0000000000401cf8\n.text:0000000000401cfb\n.text:0000000000401d00\n.text:0000000000401d02\n.text:0000000000401d03\n.text:0000000000401d05\n.text:0000000000401d07\n.text:0000000000401d09\n.text:0000000000401d0a\n.text:0000000000401d0b\n.text:0000000000401d10\n.text:0000000000401d12\n.text:0000000000401d17\n.text:0000000000401d1d\n.text:0000000000401d1f\n.text:0000000000401d24\n.text:0000000000401d2b\n.text:0000000000401d32\n.text:0000000000401d37\n.text:0000000000401d3c\n.text:0000000000401d42\n.text:0000000000401d45\n.text:0000000000401d47\n.text:0000000000401d4c\n.text:0000000000401d4e\n.text:0000000000401d53\n.text:0000000000401d55\n.text:0000000000401d5a\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d67\n.text:0000000000401d69\n.text:0000000000401d6b\n.text:0000000000401d6d\n.text:0000000000401d70\n.text:0000000000401d75\n.text:0000000000401d7a\n.text:0000000000401d7f\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d8b\n.text:0000000000401d90\n.text:0000000000401d93\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401d9f\n.text:0000000000401da1\n.text:0000000000401da3\n.text:0000000000401da5\n.text:0000000000401da8\n.text:0000000000401dad\n.text:0000000000401db0\n.text:0000000000401db2\n.text:0000000000401db9\n.text:0000000000401dbb\n.text:0000000000401dc0\n.text:0000000000401dc5\n.text:0000000000401dca\n.text:0000000000401dcd\n.text:0000000000401dd2\n.text:0000000000401dd7\n.text:0000000000401dd9\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401deb\n.text:0000000000401df0\n.text:0000000000401df5\n'
p664
tp665
sS'_obstack_memory_used'
p666
(S'\n__stdcall _obstack_memory_used(obstack * h)\n'
p667
V\u000asize_t _obstack_memory_used(obstack *h)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  char *pcVar2;\u000a  \u000a  p_Var1 = h->chunk;\u000a  pcVar2 = (char *)0x0;\u000a  while (p_Var1 != (_obstack_chunk *)0x0) {\u000a    pcVar2 = p_Var1->limit + (long)(pcVar2 + -(long)p_Var1);\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return (size_t)pcVar2;\u000a}\u000a\u000a
p668
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJZ 0x00404e0f\nNOP dword ptr [RAX + RAX*0x1]\nSUB RAX,RCX\nADD RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJNZ 0x00404e00\nRET\n'
p669
S'48 8b 4f 08\n31 c0\n48 85 c9\n74 14\n0f 1f 44 00 00\n48 29 c8\n48 03 01\n48 8b 49 08\n48 85 c9\n75 f1\nc3\n'
p670
S'.text:0000000000404df0\n.text:0000000000404df4\n.text:0000000000404df6\n.text:0000000000404df9\n.text:0000000000404dfb\n.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e06\n.text:0000000000404e0a\n.text:0000000000404e0d\n.text:0000000000404e0f\n'
p671
tp672
sS'realloc'
p673
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x0060a158]\n'
p676
S'ff 25 c2 8a 20 00\n'
p677
S'.plt:0000000000401690\n'
p678
tp679
sS'xcharalloc'
p680
(S'\n__stdcall xcharalloc(size_t n)\n'
p681
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p682
S'JMP 0x004047c0\n'
p683
S'e9 2b ff ff ff\n'
p684
S'.text:0000000000404890\n'
p685
tp686
sS'c_isupper'
p687
(S'\n__stdcall c_isupper()\n'
p688
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p689
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p690
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p691
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f59\n'
p692
tp693
sS'__fprintf_chk'
p694
(S'\n__stdcall __fprintf_chk()\n'
p695
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a1b0)();\u000a  return;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0060a1b0]\n'
p697
S'ff 25 6a 8a 20 00\n'
p698
S'.plt:0000000000401740\n'
p699
tp700
sS'get_charset_aliases'
p701
(S'\n__stdcall get_charset_aliases()\n'
p702
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004052b4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004052b4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004052b4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004052b4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004052b4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004052b4_caseD_9;\u000a      case -1:\u000a        goto switchD_004052b4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040530d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405313:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004052b4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405313;\u000a  }\u000a  goto LAB_0040530d;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a460]\nTEST R15,R15\nJNZ 0x00405322\nMOV EDI,0x407dec\nCALL 0x00401410\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004050d8\nCMP byte ptr [RBX],0x0\nJNZ 0x004050dd\nMOV EBX,0x407dfc\nMOV RDI,RBX\nCALL 0x00401500\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004050f7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004050f9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401630\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040514d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401610\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405158\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405175\nMOV R15D,0x407781\nJMP 0x0040531b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004016e0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040530d\nMOV ESI,0x4070b5\nMOV EDI,EBP\nCALL 0x004016a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004052d4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004052a0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401470\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401470\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004052a0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401660\nMOV ESI,0x407e0b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401590\nCMP EAX,0x2\nJL 0x004052f4\nMOV RDI,R12\nCALL 0x00401500\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401500\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040527d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401690\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004051c4\nJMP 0x004052dd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401630\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004051c4\nJMP 0x004052dd\nMOV RDI,RBX\nCALL 0x004014a0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405207\nJMP qword ptr [0x407cb0 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004014a0\nCMP EAX,-0x1\nJZ 0x004052f4\nCMP EAX,0xa\nJNZ 0x004052c0\nJMP 0x004052a0\nMOV EDI,EBP\nCALL 0x004015a0\nJMP 0x0040530d\nMOV RDI,R15\nCALL 0x00401420\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004049f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040530d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405313\nMOV R15D,0x407781\nMOV RDI,R13\nCALL 0x00401420\nMOV qword ptr [0x0060a460],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p704
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d a8 53 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf ec 7d 40 00\ne8 45 c3 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb fc 7d 40 00\n48 89 df\ne8 1b c4 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 c5 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 f3 c4 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 81 77 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c c5 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe b5 70 40 00\n89 ef\ne8 06 c5 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 8b c2 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 7b c2 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f c4 ff ff\nbe 0b 7e 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a c3 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 c9 c2 ff ff\n49 89 c4\n48 89 ef\ne8 be c2 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 26 c4 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 c3 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 f8 c1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd b0 7c 40 00\n48 89 df\ne8 d8 c1 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 c2 ff ff\neb 30\n4c 89 ff\ne8 3b c1 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 f4 f6 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 81 77 40 00\n4c 89 ef\ne8 05 c1 ff ff\n4c 89 3d 3e 51 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p705
S'.text:00000000004050a0\n.text:00000000004050a1\n.text:00000000004050a3\n.text:00000000004050a5\n.text:00000000004050a7\n.text:00000000004050a9\n.text:00000000004050aa\n.text:00000000004050b1\n.text:00000000004050b8\n.text:00000000004050bb\n.text:00000000004050c1\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050ce\n.text:00000000004050d1\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050d8\n.text:00000000004050dd\n.text:00000000004050e0\n.text:00000000004050e5\n.text:00000000004050e8\n.text:00000000004050eb\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f5\n.text:00000000004050f7\n.text:00000000004050f9\n.text:00000000004050fd\n.text:0000000000405102\n.text:0000000000405107\n.text:000000000040510a\n.text:000000000040510d\n.text:000000000040510f\n.text:0000000000405112\n.text:0000000000405115\n.text:0000000000405118\n.text:000000000040511d\n.text:0000000000405120\n.text:0000000000405123\n.text:0000000000405126\n.text:0000000000405128\n.text:000000000040512e\n.text:0000000000405138\n.text:000000000040513d\n.text:0000000000405147\n.text:000000000040514b\n.text:000000000040514d\n.text:0000000000405153\n.text:0000000000405158\n.text:0000000000405162\n.text:0000000000405167\n.text:0000000000405171\n.text:0000000000405175\n.text:000000000040517a\n.text:000000000040517c\n.text:000000000040517f\n.text:0000000000405184\n.text:0000000000405186\n.text:0000000000405188\n.text:000000000040518e\n.text:0000000000405193\n.text:0000000000405195\n.text:000000000040519a\n.text:000000000040519d\n.text:00000000004051a0\n.text:00000000004051a6\n.text:00000000004051ab\n.text:00000000004051b0\n.text:00000000004051b2\n.text:00000000004051b7\n.text:00000000004051ba\n.text:00000000004051bf\n.text:00000000004051c4\n.text:00000000004051c9\n.text:00000000004051cc\n.text:00000000004051cf\n.text:00000000004051d2\n.text:00000000004051d5\n.text:00000000004051d8\n.text:00000000004051dd\n.text:00000000004051e0\n.text:00000000004051e5\n.text:00000000004051e8\n.text:00000000004051ed\n.text:00000000004051f0\n.text:00000000004051f5\n.text:00000000004051fa\n.text:00000000004051fd\n.text:0000000000405202\n.text:0000000000405207\n.text:0000000000405209\n.text:000000000040520c\n.text:0000000000405211\n.text:0000000000405216\n.text:0000000000405218\n.text:000000000040521b\n.text:000000000040521e\n.text:0000000000405221\n.text:0000000000405226\n.text:0000000000405229\n.text:000000000040522f\n.text:0000000000405232\n.text:0000000000405237\n.text:000000000040523a\n.text:000000000040523d\n.text:0000000000405242\n.text:0000000000405245\n.text:000000000040524a\n.text:000000000040524f\n.text:0000000000405252\n.text:0000000000405254\n.text:0000000000405258\n.text:000000000040525d\n.text:0000000000405262\n.text:0000000000405265\n.text:000000000040526a\n.text:000000000040526d\n.text:0000000000405272\n.text:0000000000405275\n.text:000000000040527b\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405286\n.text:000000000040528b\n.text:000000000040528e\n.text:0000000000405291\n.text:0000000000405297\n.text:00000000004052a0\n.text:00000000004052a3\n.text:00000000004052a8\n.text:00000000004052ab\n.text:00000000004052ae\n.text:00000000004052b4\n.text:00000000004052c0\n.text:00000000004052c3\n.text:00000000004052c8\n.text:00000000004052cb\n.text:00000000004052cd\n.text:00000000004052d0\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052dd\n.text:00000000004052e0\n.text:00000000004052e5\n.text:00000000004052e7\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f4\n.text:00000000004052f7\n.text:00000000004052fc\n.text:0000000000405301\n.text:0000000000405304\n.text:0000000000405306\n.text:000000000040530b\n.text:000000000040530d\n.text:0000000000405313\n.text:0000000000405316\n.text:000000000040531b\n.text:0000000000405322\n.text:0000000000405325\n.text:000000000040532c\n.text:000000000040532d\n.text:000000000040532f\n.text:0000000000405331\n.text:0000000000405333\n.text:0000000000405335\n.text:0000000000405336\n'
p706
tp707
sS'nl_langinfo'
p708
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060a138]\n'
p711
S'ff 25 e2 8a 20 00\n'
p712
S'.plt:0000000000401650\n'
p713
tp714
sS'c_isalnum'
p715
(S'\n__stdcall c_isalnum()\n'
p716
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p717
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404e6b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404e6b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404e6a\nXOR EAX,EAX\nRET\n'
p718
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p719
S'.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e55\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e64\n.text:0000000000404e68\n.text:0000000000404e6a\n.text:0000000000404e6b\n.text:0000000000404e6e\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n'
p720
tp721
sS'x2realloc'
p722
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p723
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p724
S'MOV EDX,0x1\nJMP 0x00404830\n'
p725
S'ba 01 00 00 00\neb 89\n'
p726
S'.text:00000000004048a0\n.text:00000000004048a5\n'
p727
tp728
sS'_obstack_begin'
p729
(S'\n__stdcall _obstack_begin(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr * freefun)\n'
p730
V\u000aint _obstack_begin(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(size_t),\u000a                  void (*freefun)(void *))\u000a\u000a{\u000a  *(void *(**)(size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *))&h->freefun = freefun;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfe;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p731
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nAND byte ptr [RDI + 0x50],0xfe\nCALL 0x00404b50\nMOV EAX,0x1\nPOP RCX\nRET\n'
p732
S'50\n48 89 4f 38\n4c 89 47 40\n80 67 50 fe\ne8 0e 00 00 00\nb8 01 00 00 00\n59\nc3\n'
p733
S'.text:0000000000404b30\n.text:0000000000404b31\n.text:0000000000404b35\n.text:0000000000404b39\n.text:0000000000404b3d\n.text:0000000000404b42\n.text:0000000000404b47\n.text:0000000000404b48\n'
p734
tp735
sS'strlen'
p736
(S'\n__stdcall strlen(char * __s)\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x0060a090]\n'
p739
S'ff 25 8a 8b 20 00\n'
p740
S'.plt:0000000000401500\n'
p741
tp742
sS'memcmp'
p743
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x0060a0e8]\n'
p746
S'ff 25 32 8b 20 00\n'
p747
S'.plt:00000000004015b0\n'
p748
tp749
sS'quotearg_n_style_mem'
p750
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p751
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403bd0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004039a0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p753
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p754
S'.text:0000000000403c30\n.text:0000000000403c31\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c36\n.text:0000000000403c3a\n.text:0000000000403c3d\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c45\n.text:0000000000403c48\n.text:0000000000403c4d\n.text:0000000000403c4f\n.text:0000000000403c52\n.text:0000000000403c55\n.text:0000000000403c58\n.text:0000000000403c5d\n.text:0000000000403c61\n.text:0000000000403c62\n.text:0000000000403c64\n.text:0000000000403c66\n.text:0000000000403c67\n'
p755
tp756
sS'_obstack_begin_worker'
p757
(S'\n__stdcall _obstack_begin_worker()\n'
p758
V\u000aint _obstack_begin_worker(void)\u000a\u000a{\u000a  size_t size;\u000a  _obstack_chunk *p_Var1;\u000a  long in_RDX;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  size_t in_RSI;\u000a  obstack *h;\u000a  \u000a  lVar2 = 0x10;\u000a  if (in_RDX != 0) {\u000a    lVar2 = in_RDX;\u000a  }\u000a  size = 0xfe0;\u000a  if (in_RSI != 0) {\u000a    size = in_RSI;\u000a  }\u000a  h->chunk_size = size;\u000a  h->alignment_mask = lVar2 - 1;\u000a  p_Var1 = (_obstack_chunk *)call_chunkfun(h,size);\u000a  h->chunk = p_Var1;\u000a  if (p_Var1 == (_obstack_chunk *)0x0) {\u000a    (*obstack_alloc_failed_handler)();\u000a  }\u000a  pcVar3 = (char *)(-lVar2 & (long)&p_Var1->prev + lVar2 + 7);\u000a  h->object_base = pcVar3;\u000a  h->next_free = pcVar3;\u000a  pcVar3 = (char *)((long)&p_Var1->limit + h->chunk_size);\u000a  p_Var1->limit = pcVar3;\u000a  h->chunk_limit = pcVar3;\u000a  p_Var1->prev = (_obstack_chunk *)0x0;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xf9;\u000a  return (int)pcVar3;\u000a}\u000a\u000a
p759
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBX,0x10\nCMOVNZ RBX,RDX\nTEST RSI,RSI\nMOV EAX,0xfe0\nCMOVNZ RAX,RSI\nMOV qword ptr [R15],RAX\nLEA R12,[RBX + -0x1]\nMOV qword ptr [R15 + 0x30],R12\nMOV RSI,RAX\nCALL 0x00404d10\nMOV R14,RAX\nMOV qword ptr [R15 + 0x8],R14\nTEST R14,R14\nJNZ 0x00404b98\nCALL qword ptr [0x0060a248]\nLEA RAX,[R14 + R12*0x1 + 0x10]\nNEG RBX\nAND RBX,RAX\nMOV qword ptr [R15 + 0x10],RBX\nMOV qword ptr [R15 + 0x18],RBX\nMOV RAX,qword ptr [R15]\nADD RAX,R14\nMOV qword ptr [R14],RAX\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R14 + 0x8],0x0\nAND byte ptr [R15 + 0x50],0xf9\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p760
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\n48 85 d2\nbb 10 00 00 00\n48 0f 45 da\n48 85 f6\nb8 e0 0f 00 00\n48 0f 45 c6\n49 89 07\n4c 8d 63 ff\n4d 89 67 30\n48 89 c6\ne8 8a 01 00 00\n49 89 c6\n4d 89 77 08\n4d 85 f6\n75 06\nff 15 b0 56 20 00\n4b 8d 44 26 10\n48 f7 db\n48 21 c3\n49 89 5f 10\n49 89 5f 18\n49 8b 07\n4c 01 f0\n49 89 06\n49 89 47 20\n49 c7 46 08 00 00 00 00\n41 80 67 50 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p761
S'.text:0000000000404b50\n.text:0000000000404b52\n.text:0000000000404b54\n.text:0000000000404b56\n.text:0000000000404b57\n.text:0000000000404b58\n.text:0000000000404b5b\n.text:0000000000404b5e\n.text:0000000000404b63\n.text:0000000000404b67\n.text:0000000000404b6a\n.text:0000000000404b6f\n.text:0000000000404b73\n.text:0000000000404b76\n.text:0000000000404b7a\n.text:0000000000404b7e\n.text:0000000000404b81\n.text:0000000000404b86\n.text:0000000000404b89\n.text:0000000000404b8d\n.text:0000000000404b90\n.text:0000000000404b92\n.text:0000000000404b98\n.text:0000000000404b9d\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba7\n.text:0000000000404bab\n.text:0000000000404bae\n.text:0000000000404bb1\n.text:0000000000404bb4\n.text:0000000000404bb8\n.text:0000000000404bc0\n.text:0000000000404bc5\n.text:0000000000404bc9\n.text:0000000000404bca\n.text:0000000000404bcc\n.text:0000000000404bce\n.text:0000000000404bd0\n'
p762
tp763
sS'_exit'
p764
(S'\n__stdcall _exit(int __status)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a040)();\u000a  return;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0060a040]\n'
p767
S'ff 25 da 8b 20 00\n'
p768
S'.plt:0000000000401460\n'
p769
tp770
sS'__errno_location'
p771
(S'\n__stdcall __errno_location()\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a030)();\u000a  return piVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x0060a030]\n'
p774
S'ff 25 ea 8b 20 00\n'
p775
S'.plt:0000000000401440\n'
p776
tp777
sS'x2nrealloc'
p778
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p779
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p780
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040485c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404889\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040487a\nTEST RCX,RCX\nJNZ 0x0040487a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404800\nPUSH RAX\nCALL 0x00404950\n'
p781
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p782
S'.text:0000000000404830\n.text:0000000000404833\n.text:0000000000404836\n.text:0000000000404839\n.text:000000000040483b\n.text:0000000000404845\n.text:0000000000404847\n.text:000000000040484a\n.text:000000000040484d\n.text:000000000040484f\n.text:0000000000404852\n.text:0000000000404855\n.text:000000000040485a\n.text:000000000040485c\n.text:000000000040485f\n.text:0000000000404861\n.text:0000000000404866\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486d\n.text:0000000000404874\n.text:0000000000404877\n.text:000000000040487a\n.text:000000000040487d\n.text:0000000000404881\n.text:0000000000404884\n.text:0000000000404889\n.text:000000000040488a\n'
p783
tp784
sS'FUN_00401400'
p785
(S'\n__stdcall FUN_00401400()\n'
p786
V\u000avoid FUN_00401400(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p787
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p788
S'ff 35 02 8c 20 00\nff 25 04 8c 20 00\n'
p789
S'.plt:0000000000401400\n.plt:0000000000401406\n'
p790
tp791
sS'xrealloc'
p792
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p793
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p794
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404817\nTEST RBX,RBX\nJNZ 0x00404817\nCALL 0x00401420\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401690\nTEST RBX,RBX\nJZ 0x00404829\nTEST RAX,RAX\nJZ 0x0040482b\nPOP RBX\nRET\nCALL 0x00404950\n'
p795
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 0d cc ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 71 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p796
S'.text:0000000000404800\n.text:0000000000404801\n.text:0000000000404804\n.text:0000000000404807\n.text:0000000000404809\n.text:000000000040480c\n.text:000000000040480e\n.text:0000000000404813\n.text:0000000000404815\n.text:0000000000404816\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481f\n.text:0000000000404822\n.text:0000000000404824\n.text:0000000000404827\n.text:0000000000404829\n.text:000000000040482a\n.text:000000000040482b\n'
p797
tp798
sS'freopen_safer'
p799
(S'\n__stdcall freopen_safer(char * name, char * mode, FILE * f)\n'
p800
V\u000aFILE * freopen_safer(char *name,char *mode,FILE *f)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  FILE *pFVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  \u000a  iVar4 = fileno((FILE *)f);\u000a  bVar7 = false;\u000a  bVar8 = false;\u000a  if (iVar4 == 0) {\u000a    bVar1 = false;\u000a    bVar2 = false;\u000aLAB_004028f4:\u000a    pFVar6 = (FILE *)freopen(name,mode,(FILE *)f);\u000a    bVar8 = bVar7;\u000a  }\u000a  else {\u000a    if (iVar4 == 1) {\u000a      bVar1 = false;\u000a    }\u000a    else {\u000a      if (iVar4 != 2) {\u000a        iVar4 = dup2(2,2);\u000a        bVar7 = iVar4 != 2;\u000a      }\u000a      iVar4 = dup2(1,1);\u000a      bVar8 = iVar4 != 1;\u000a      bVar1 = bVar7;\u000a    }\u000a    bVar2 = false;\u000a    iVar4 = dup2(0,0);\u000a    if (iVar4 != 0) {\u000a      pFVar6 = (FILE *)0x0;\u000a      _Var3 = protect_fd();\u000a      bVar2 = true;\u000a      if (_Var3 == false) {\u000a        bVar2 = true;\u000a        goto LAB_00402912;\u000a      }\u000a    }\u000a    if ((bVar8) && (_Var3 = protect_fd(), _Var3 == false)) {\u000a      bVar8 = true;\u000a    }\u000a    else {\u000a      bVar7 = bVar8;\u000a      if ((!bVar1) || (_Var3 = protect_fd(), bVar7 = bVar8, _Var3 != false)) goto LAB_004028f4;\u000a    }\u000a    pFVar6 = (FILE *)0x0;\u000a  }\u000aLAB_00402912:\u000a  piVar5 = __errno_location();\u000a  iVar4 = *piVar5;\u000a  if (bVar1) {\u000a    close(2);\u000a  }\u000a  if (bVar8) {\u000a    close(1);\u000a  }\u000a  if (bVar2) {\u000a    close(0);\u000a  }\u000a  if (pFVar6 == (FILE *)0x0) {\u000a    *piVar5 = iVar4;\u000a  }\u000a  return pFVar6;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV RBX,RDI\nMOV RDI,RBP\nCALL 0x00401620\nXOR R14D,R14D\nTEST EAX,EAX\nJZ 0x0040288e\nCMP EAX,0x1\nJZ 0x00402896\nCMP EAX,0x2\nJZ 0x00402873\nMOV EDI,0x2\nMOV ESI,0x2\nCALL 0x00401530\nCMP EAX,0x2\nSETNZ R14B\nMOV R15B,R14B\nMOV EDI,0x1\nMOV ESI,0x1\nCALL 0x00401530\nCMP EAX,0x1\nSETNZ R14B\nJMP 0x00402899\nXOR R15D,R15D\nXOR R12D,R12D\nJMP 0x004028f4\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401530\nTEST EAX,EAX\nJZ 0x004028ce\nMOV qword ptr [RSP],RBP\nMOV RBP,RBX\nMOV RBX,R13\nXOR R13D,R13D\nXOR EDI,EDI\nCALL 0x00402960\nMOV R12B,0x1\nTEST AL,AL\nJZ 0x00402907\nMOV R13,RBX\nMOV RBX,RBP\nMOV RBP,qword ptr [RSP]\nTEST R14B,R14B\nJZ 0x004028e1\nMOV EDI,0x1\nCALL 0x00402960\nTEST AL,AL\nJZ 0x0040290c\nTEST R15B,R15B\nJZ 0x004028f4\nMOV EDI,0x2\nCALL 0x00402960\nTEST AL,AL\nJZ 0x0040290f\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x00401580\nMOV R13,RAX\nJMP 0x00402912\nMOV R12B,0x1\nJMP 0x00402912\nMOV R14B,0x1\nXOR R13D,R13D\nCALL 0x00401440\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nTEST R15B,R15B\nJZ 0x0040292b\nMOV EDI,0x2\nCALL 0x004015a0\nTEST R14B,R14B\nJZ 0x0040293a\nMOV EDI,0x1\nCALL 0x004015a0\nTEST R12B,R12B\nJZ 0x00402946\nXOR EDI,EDI\nCALL 0x004015a0\nTEST R13,R13\nJNZ 0x0040294d\nMOV dword ptr [RBX],EBP\nMOV RAX,R13\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p802
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n48 89 fb\n48 89 ef\ne8 d4 ed ff ff\n45 31 f6\n85 c0\n74 3b\n83 f8 01\n74 3e\n83 f8 02\n74 16\nbf 02 00 00 00\nbe 02 00 00 00\ne8 c4 ec ff ff\n83 f8 02\n41 0f 95 c6\n45 88 f7\nbf 01 00 00 00\nbe 01 00 00 00\ne8 ab ec ff ff\n83 f8 01\n41 0f 95 c6\neb 0b\n45 31 ff\n45 31 e4\neb 5e\n45 31 ff\n45 31 e4\n31 ff\n31 f6\ne8 8b ec ff ff\n85 c0\n74 25\n48 89 2c 24\n48 89 dd\n4c 89 eb\n45 31 ed\n31 ff\ne8 a3 00 00 00\n41 b4 01\n84 c0\n74 43\n49 89 dd\n48 89 eb\n48 8b 2c 24\n45 84 f6\n74 0e\nbf 01 00 00 00\ne8 83 00 00 00\n84 c0\n74 2b\n45 84 ff\n74 0e\nbf 02 00 00 00\ne8 70 00 00 00\n84 c0\n74 1b\n48 89 df\n4c 89 ee\n48 89 ea\ne8 7e ec ff ff\n49 89 c5\neb 0b\n41 b4 01\neb 06\n41 b6 01\n45 31 ed\ne8 29 eb ff ff\n48 89 c3\n8b 2b\n45 84 ff\n74 0a\nbf 02 00 00 00\ne8 75 ec ff ff\n45 84 f6\n74 0a\nbf 01 00 00 00\ne8 66 ec ff ff\n45 84 e4\n74 07\n31 ff\ne8 5a ec ff ff\n4d 85 ed\n75 02\n89 2b\n4c 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p803
S'.text:0000000000402830\n.text:0000000000402831\n.text:0000000000402833\n.text:0000000000402835\n.text:0000000000402837\n.text:0000000000402839\n.text:000000000040283a\n.text:000000000040283b\n.text:000000000040283e\n.text:0000000000402841\n.text:0000000000402844\n.text:0000000000402847\n.text:000000000040284c\n.text:000000000040284f\n.text:0000000000402851\n.text:0000000000402853\n.text:0000000000402856\n.text:0000000000402858\n.text:000000000040285b\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402867\n.text:000000000040286c\n.text:000000000040286f\n.text:0000000000402873\n.text:0000000000402876\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402885\n.text:0000000000402888\n.text:000000000040288c\n.text:000000000040288e\n.text:0000000000402891\n.text:0000000000402894\n.text:0000000000402896\n.text:0000000000402899\n.text:000000000040289c\n.text:000000000040289e\n.text:00000000004028a0\n.text:00000000004028a5\n.text:00000000004028a7\n.text:00000000004028a9\n.text:00000000004028ad\n.text:00000000004028b0\n.text:00000000004028b3\n.text:00000000004028b6\n.text:00000000004028b8\n.text:00000000004028bd\n.text:00000000004028c0\n.text:00000000004028c2\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028ce\n.text:00000000004028d1\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028dd\n.text:00000000004028df\n.text:00000000004028e1\n.text:00000000004028e4\n.text:00000000004028e6\n.text:00000000004028eb\n.text:00000000004028f0\n.text:00000000004028f2\n.text:00000000004028f4\n.text:00000000004028f7\n.text:00000000004028fa\n.text:00000000004028fd\n.text:0000000000402902\n.text:0000000000402905\n.text:0000000000402907\n.text:000000000040290a\n.text:000000000040290c\n.text:000000000040290f\n.text:0000000000402912\n.text:0000000000402917\n.text:000000000040291a\n.text:000000000040291c\n.text:000000000040291f\n.text:0000000000402921\n.text:0000000000402926\n.text:000000000040292b\n.text:000000000040292e\n.text:0000000000402930\n.text:0000000000402935\n.text:000000000040293a\n.text:000000000040293d\n.text:000000000040293f\n.text:0000000000402941\n.text:0000000000402946\n.text:0000000000402949\n.text:000000000040294b\n.text:000000000040294d\n.text:0000000000402950\n.text:0000000000402954\n.text:0000000000402955\n.text:0000000000402957\n.text:0000000000402959\n.text:000000000040295b\n.text:000000000040295d\n.text:000000000040295e\n'
p804
tp805
sS'quotearg_n_options'
p806
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p807
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401440\nTEST R12D,R12D\nJS 0x00403b51\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a1f0]\nCMP dword ptr [0x0060a1f8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403a6b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a200\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404800\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a1f0],R15\nJNZ 0x00403a32\nMOVUPS XMM0,xmmword ptr [0x0060a200]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a1f8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401570\nMOV dword ptr [0x0060a1f8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402bc0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403acd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403b3b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a360\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403af8\nCALL 0x00401420\nMOV RDI,R15\nCALL 0x00404890\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402bc0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401430\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 81 da ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 16 68 20 00\n44 39 25 17 68 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 00 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d cb 67 20 00\n75 0b\n0f 10 05 d2 67 20 00\n41 0f 11 07\n8b 05 c0 67 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 1d db ff ff\n89 1d 9f 67 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 60 a3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 28 d9 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 da d8 ff ff\n'
p810
S'.text:00000000004039a0\n.text:00000000004039a1\n.text:00000000004039a3\n.text:00000000004039a5\n.text:00000000004039a7\n.text:00000000004039a9\n.text:00000000004039aa\n.text:00000000004039ae\n.text:00000000004039b1\n.text:00000000004039b4\n.text:00000000004039b7\n.text:00000000004039ba\n.text:00000000004039bf\n.text:00000000004039c2\n.text:00000000004039c8\n.text:00000000004039cd\n.text:00000000004039cf\n.text:00000000004039d3\n.text:00000000004039da\n.text:00000000004039e1\n.text:00000000004039e6\n.text:00000000004039eb\n.text:00000000004039f0\n.text:00000000004039f2\n.text:00000000004039f7\n.text:00000000004039fa\n.text:00000000004039fd\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0c\n.text:0000000000403a0f\n.text:0000000000403a13\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a1e\n.text:0000000000403a25\n.text:0000000000403a27\n.text:0000000000403a2e\n.text:0000000000403a32\n.text:0000000000403a38\n.text:0000000000403a3b\n.text:0000000000403a3f\n.text:0000000000403a42\n.text:0000000000403a45\n.text:0000000000403a49\n.text:0000000000403a4b\n.text:0000000000403a4e\n.text:0000000000403a53\n.text:0000000000403a59\n.text:0000000000403a5c\n.text:0000000000403a61\n.text:0000000000403a66\n.text:0000000000403a6b\n.text:0000000000403a6e\n.text:0000000000403a72\n.text:0000000000403a76\n.text:0000000000403a7b\n.text:0000000000403a7f\n.text:0000000000403a83\n.text:0000000000403a87\n.text:0000000000403a8b\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a97\n.text:0000000000403a9a\n.text:0000000000403a9d\n.text:0000000000403aa2\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aab\n.text:0000000000403aac\n.text:0000000000403ab1\n.text:0000000000403ab5\n.text:0000000000403ab8\n.text:0000000000403abb\n.text:0000000000403abd\n.text:0000000000403ac2\n.text:0000000000403ac6\n.text:0000000000403acb\n.text:0000000000403acd\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403ad9\n.text:0000000000403adc\n.text:0000000000403ae1\n.text:0000000000403ae6\n.text:0000000000403ae9\n.text:0000000000403aee\n.text:0000000000403af1\n.text:0000000000403af3\n.text:0000000000403af8\n.text:0000000000403afb\n.text:0000000000403b00\n.text:0000000000403b03\n.text:0000000000403b06\n.text:0000000000403b0b\n.text:0000000000403b0e\n.text:0000000000403b12\n.text:0000000000403b15\n.text:0000000000403b18\n.text:0000000000403b1d\n.text:0000000000403b22\n.text:0000000000403b27\n.text:0000000000403b2a\n.text:0000000000403b2d\n.text:0000000000403b2e\n.text:0000000000403b33\n.text:0000000000403b37\n.text:0000000000403b3b\n.text:0000000000403b3f\n.text:0000000000403b42\n.text:0000000000403b46\n.text:0000000000403b47\n.text:0000000000403b49\n.text:0000000000403b4b\n.text:0000000000403b4d\n.text:0000000000403b4f\n.text:0000000000403b50\n.text:0000000000403b51\n'
p811
tp812
sS'strcmp'
p813
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a108)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060a108]\n'
p816
S'ff 25 12 8b 20 00\n'
p817
S'.plt:00000000004015f0\n'
p818
tp819
sS'set_custom_quoting'
p820
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p821
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402b35\nTEST RDX,RDX\nJZ 0x00402b35\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401430\n'
p823
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 f5 e8 ff ff\n'
p824
S'.text:0000000000402b10\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b1c\n.text:0000000000402b22\n.text:0000000000402b25\n.text:0000000000402b27\n.text:0000000000402b2a\n.text:0000000000402b2c\n.text:0000000000402b30\n.text:0000000000402b34\n.text:0000000000402b35\n.text:0000000000402b36\n'
p825
tp826
sS'c_isalpha'
p827
(S'\n__stdcall c_isalpha()\n'
p828
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p829
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404e9b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p830
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p831
S'.text:0000000000404e80\n.text:0000000000404e83\n.text:0000000000404e86\n.text:0000000000404e88\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e9a\n.text:0000000000404e9b\n.text:0000000000404e9d\n'
p832
tp833
sS'quotearg_custom_mem'
p834
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p835
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403db0\n'
p837
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p838
S'.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e46\n.text:0000000000403e49\n.text:0000000000403e4c\n.text:0000000000403e4e\n.text:0000000000403e51\n'
p839
tp840
sS'close_stdout'
p841
(S'\n__stdcall close_stdout()\n'
p842
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402707;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x4070bb,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402707:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a268]\nCALL 0x00404fa0\nTEST EAX,EAX\nJZ 0x00402707\nCMP byte ptr [0x0060a310],0x0\nJZ 0x0040271c\nCALL 0x00401440\nCMP dword ptr [RAX],0x20\nJNZ 0x0040271c\nMOV RDI,qword ptr [0x0060a2a0]\nCALL 0x00404fa0\nTEST EAX,EAX\nJNZ 0x00402761\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4070ab\nMOV EDX,0x5\nCALL 0x004014e0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a308]\nCALL 0x00401440\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040276c\nXOR EDI,EDI\nMOV EDX,0x4070bb\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004016d0\nMOV EDI,dword ptr [0x0060a1e8]\nCALL 0x00401460\nMOV EDI,dword ptr [0x0060a1e8]\nCALL 0x00401460\nMOV RDI,RBX\nCALL 0x00403d30\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4070b7\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004016d0\nMOV EDI,dword ptr [0x0060a1e8]\nCALL 0x00401460\n'
p844
S'55\n41 56\n53\n48 8b 3d 7d 7b 20 00\ne8 b0 28 00 00\n85 c0\n74 13\n80 3d 15 7c 20 00 00\n74 1f\ne8 3e ed ff ff\n83 38 20\n75 15\n48 8b 3d 92 7b 20 00\ne8 8d 28 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe ab 70 40 00\nba 05 00 00 00\ne8 b3 ed ff ff\n49 89 c6\n48 8b 1d d1 7b 20 00\ne8 04 ed ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba bb 70 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 7a ef ff ff\n8b 3d 8c 7a 20 00\ne8 ff ec ff ff\n8b 3d 81 7a 20 00\ne8 f4 ec ff ff\n48 89 df\ne8 bc 15 00 00\n48 89 c1\n31 ff\nba b7 70 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 46 ef ff ff\n8b 3d 58 7a 20 00\ne8 cb ec ff ff\n'
p845
S'.text:00000000004026e0\n.text:00000000004026e1\n.text:00000000004026e3\n.text:00000000004026e4\n.text:00000000004026eb\n.text:00000000004026f0\n.text:00000000004026f2\n.text:00000000004026f4\n.text:00000000004026fb\n.text:00000000004026fd\n.text:0000000000402702\n.text:0000000000402705\n.text:0000000000402707\n.text:000000000040270e\n.text:0000000000402713\n.text:0000000000402715\n.text:0000000000402717\n.text:0000000000402718\n.text:000000000040271a\n.text:000000000040271b\n.text:000000000040271c\n.text:000000000040271e\n.text:0000000000402723\n.text:0000000000402728\n.text:000000000040272d\n.text:0000000000402730\n.text:0000000000402737\n.text:000000000040273c\n.text:000000000040273f\n.text:0000000000402741\n.text:0000000000402743\n.text:0000000000402745\n.text:000000000040274a\n.text:000000000040274c\n.text:000000000040274e\n.text:0000000000402751\n.text:0000000000402756\n.text:000000000040275c\n.text:0000000000402761\n.text:0000000000402767\n.text:000000000040276c\n.text:000000000040276f\n.text:0000000000402774\n.text:0000000000402777\n.text:0000000000402779\n.text:000000000040277e\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402785\n.text:000000000040278a\n.text:0000000000402790\n'
p846
tp847
sS'version_etc_ar'
p848
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p849
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p850
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404610\nJMP 0x004042a0\n'
p851
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p852
S'.text:0000000000404600\n.text:0000000000404607\n.text:0000000000404610\n.text:0000000000404616\n.text:000000000040461a\n.text:000000000040461c\n'
p853
tp854
sS'rpl_calloc'
p855
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p856
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a100)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p857
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004049db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004049e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004049e0\nPUSH RAX\nCALL 0x00401440\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004015e0\n'
p858
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 6f ca ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 f5 cb ff ff\n'
p859
S'.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a8\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049b2\n.text:00000000004049b4\n.text:00000000004049b7\n.text:00000000004049bb\n.text:00000000004049bd\n.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049cb\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d7\n.text:00000000004049d9\n.text:00000000004049da\n.text:00000000004049db\n.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e6\n'
p860
tp861
sS'memset'
p862
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060a0c8]\n'
p865
S'ff 25 52 8b 20 00\n'
p866
S'.plt:0000000000401570\n'
p867
tp868
sS'c_isxdigit'
p869
(S'\n__stdcall c_isxdigit()\n'
p870
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p871
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404f7b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p872
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p873
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f68\n.text:0000000000404f72\n.text:0000000000404f74\n.text:0000000000404f77\n.text:0000000000404f7a\n.text:0000000000404f7b\n.text:0000000000404f7d\n'
p874
tp875
sS'__libc_csu_fini'
p876
(S'\n__stdcall __libc_csu_fini()\n'
p877
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p878
S'RET\n'
p879
S'f3 c3\n'
p880
S'.text:00000000004053b0\n'
p881
tp882
sS'getc_unlocked'
p883
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a060)();\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x0060a060]\n'
p886
S'ff 25 ba 8b 20 00\n'
p887
S'.plt:00000000004014a0\n'
p888
tp889
sS'abort'
p890
(S'\n__stdcall abort()\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a028)();\u000a  return;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060a028]\n'
p893
S'ff 25 f2 8b 20 00\n'
p894
S'.plt:0000000000401430\n'
p895
tp896
sS'c_isascii'
p897
(S'\n__stdcall c_isascii()\n'
p898
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p899
S'CMP EDI,0x80\nSETC AL\nRET\n'
p900
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p901
S'.text:0000000000404ea0\n.text:0000000000404ea6\n.text:0000000000404ea9\n'
p902
tp903
sS'version_etc'
p904
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p905
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p906
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004046d2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404630\nADD RSP,0xd8\nRET\n'
p907
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p908
S'.text:0000000000404690\n.text:0000000000404697\n.text:0000000000404699\n.text:000000000040469b\n.text:00000000004046a0\n.text:00000000004046a5\n.text:00000000004046aa\n.text:00000000004046b2\n.text:00000000004046ba\n.text:00000000004046c2\n.text:00000000004046ca\n.text:00000000004046d2\n.text:00000000004046d7\n.text:00000000004046dc\n.text:00000000004046e1\n.text:00000000004046e6\n.text:00000000004046ee\n.text:00000000004046f3\n.text:00000000004046fb\n.text:0000000000404702\n.text:0000000000404705\n.text:000000000040470a\n.text:0000000000404711\n'
p909
tp910
sS'protect_fd'
p911
(S'\n__stdcall protect_fd()\n'
p912
V\u000a_Bool protect_fd(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int __fd;\u000a  int *piVar2;\u000a  int in_EDI;\u000a  \u000a  __fd = open("/dev/null",0);\u000a  uVar1 = 1;\u000a  if (__fd != in_EDI) {\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 9;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p913
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x4070be\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x004016e0\nMOV ECX,EAX\nMOV AL,0x1\nCMP ECX,EBX\nJZ 0x00402991\nTEST ECX,ECX\nJS 0x0040298f\nMOV EDI,ECX\nCALL 0x004015a0\nCALL 0x00401440\nMOV dword ptr [RAX],0x9\nXOR EAX,EAX\nPOP RBX\nRET\n'
p914
S'53\n89 fb\nbf be 70 40 00\n31 f6\n31 c0\ne8 6f ed ff ff\n89 c1\nb0 01\n39 d9\n74 18\n85 c9\n78 12\n89 cf\ne8 1c ec ff ff\ne8 b7 ea ff ff\nc7 00 09 00 00 00\n31 c0\n5b\nc3\n'
p915
S'.text:0000000000402960\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402968\n.text:000000000040296a\n.text:000000000040296c\n.text:0000000000402971\n.text:0000000000402973\n.text:0000000000402975\n.text:0000000000402977\n.text:0000000000402979\n.text:000000000040297b\n.text:000000000040297d\n.text:000000000040297f\n.text:0000000000402984\n.text:0000000000402989\n.text:000000000040298f\n.text:0000000000402991\n.text:0000000000402992\n'
p916
tp917
sS'__ctype_b_loc'
p918
(S'\n__stdcall __ctype_b_loc()\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a1c8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x0060a1c8]\n'
p921
S'ff 25 52 8a 20 00\n'
p922
S'.plt:0000000000401770\n'
p923
tp924
sS'lseek'
p925
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060a0b8]\n'
p928
S'ff 25 62 8b 20 00\n'
p929
S'.plt:0000000000401550\n'
p930
tp931
sS'quotearg'
p932
(S'\n__stdcall quotearg(char * arg)\n'
p933
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p934
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403990\n'
p935
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p936
S'.text:0000000000403b70\n.text:0000000000403b73\n.text:0000000000403b75\n.text:0000000000403b78\n'
p937
tp938
sS'_start'
p939
(S'\n__stdcall _start()\n'
p940
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p941
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4053b0\nMOV RCX,0x405340\nMOV RDI,0x401ac0\nCALL qword ptr [0x00609ff0]\nHLT\n'
p942
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 b0 53 40 00\n48 c7 c1 40 53 40 00\n48 c7 c7 c0 1a 40 00\nff 15 46 88 20 00\nf4\n'
p943
S'.text:0000000000401780\n.text:0000000000401782\n.text:0000000000401785\n.text:0000000000401786\n.text:0000000000401789\n.text:000000000040178d\n.text:000000000040178e\n.text:000000000040178f\n.text:0000000000401796\n.text:000000000040179d\n.text:00000000004017a4\n.text:00000000004017aa\n'
p944
tp945
sS'c_iscntrl'
p946
(S'\n__stdcall c_iscntrl()\n'
p947
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p948
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404ec8\nRET\nCMP EDI,0x7f\nJZ 0x00404ec7\nXOR EAX,EAX\nRET\n'
p949
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p950
S'.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ecd\n.text:0000000000404ecf\n'
p951
tp952
sS'c_isblank'
p953
(S'\n__stdcall c_isblank()\n'
p954
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p955
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p956
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p957
S'.text:0000000000404eb0\n.text:0000000000404eb3\n.text:0000000000404eb6\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ebe\n'
p958
tp959
sS'quotearg_n_mem'
p960
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p961
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV ECX,0x60a320\nJMP 0x004039a0\n'
p963
S'b9 20 a3 60 00\ne9 36 fe ff ff\n'
p964
S'.text:0000000000403b60\n.text:0000000000403b65\n'
p965
tp966
sS'atexit'
p967
(S'\n__stdcall atexit(__func * __func)\n'
p968
V\u000a/* WARNING: Removing unreachable block (ram,0x004053e0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a190)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p969
S'MOV RAX,0x60a1d8\nTEST RAX,RAX\nJZ 0x004053e0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401700\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401700\n'
p970
S'48 c7 c0 d8 a1 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a c3 ff ff\n31 d2\n31 f6\ne9 17 c3 ff ff\n'
p971
S'.text:00000000004053c0\n.text:00000000004053c7\n.text:00000000004053ca\n.text:00000000004053cc\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e4\n'
p972
tp973
sS'__printf_chk'
p974
(S'\n__stdcall __printf_chk()\n'
p975
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a170)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x0060a170]\n'
p977
S'ff 25 aa 8a 20 00\n'
p978
S'.plt:00000000004016c0\n'
p979
tp980
sS'fdopen'
p981
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a160)();\u000a  return pFVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060a160]\n'
p984
S'ff 25 ba 8a 20 00\n'
p985
S'.plt:00000000004016a0\n'
p986
tp987
sS'c_strcasecmp'
p988
(S'\n__stdcall c_strcasecmp(char * s1, char * s2)\n'
p989
V\u000aint c_strcasecmp(char *s1,char *s2)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  \u000a  if (s1 == s2) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    do {\u000a      uVar1 = c_tolower();\u000a      uVar2 = c_tolower();\u000a      uVar1 = uVar1 & 0xff;\u000a      if (uVar1 == 0) break;\u000a    } while (uVar1 == (uVar2 & 0xff));\u000a    iVar3 = uVar1 - (uVar2 & 0xff);\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nCMP RBX,R14\nJZ 0x004026ac\nNOP\nMOVZX EDI,byte ptr [RBX]\nCALL 0x00404f80\nMOV EBP,EAX\nMOVZX EDI,byte ptr [R14]\nCALL 0x00404f80\nAND EBP,0xff\nMOVZX EAX,AL\nJZ 0x004026a8\nINC RBX\nINC R14\nCMP EBP,EAX\nJZ 0x00402680\nSUB EBP,EAX\nJMP 0x004026ae\nXOR EBP,EBP\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p991
S'55\n41 56\n53\n49 89 f6\n48 89 fb\n4c 39 f3\n74 2d\n90\n0f b6 3b\ne8 f8 28 00 00\n89 c5\n41 0f b6 3e\ne8 ed 28 00 00\n81 e5 ff 00 00 00\n0f b6 c0\n74 0a\n48 ff c3\n49 ff c6\n39 c5\n74 d8\n29 c5\neb 02\n31 ed\n89 e8\n5b\n41 5e\n5d\nc3\n'
p992
S'.text:0000000000402670\n.text:0000000000402671\n.text:0000000000402673\n.text:0000000000402674\n.text:0000000000402677\n.text:000000000040267a\n.text:000000000040267d\n.text:000000000040267f\n.text:0000000000402680\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268a\n.text:000000000040268e\n.text:0000000000402693\n.text:0000000000402699\n.text:000000000040269c\n.text:000000000040269e\n.text:00000000004026a1\n.text:00000000004026a4\n.text:00000000004026a6\n.text:00000000004026a8\n.text:00000000004026aa\n.text:00000000004026ac\n.text:00000000004026ae\n.text:00000000004026b0\n.text:00000000004026b1\n.text:00000000004026b3\n.text:00000000004026b4\n'
p993
tp994
sS'error'
p995
(S'\n__stdcall error()\n'
p996
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a178)();\u000a  return;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x0060a178]\n'
p998
S'ff 25 a2 8a 20 00\n'
p999
S'.plt:00000000004016d0\n'
p1000
tp1001
sS'base_len'
p1002
(S'\n__stdcall base_len(char * name)\n'
p1003
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p1004
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401500\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00402824\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00402810\nPOP RBX\nRET\n'
p1005
S'53\n48 89 fb\ne8 f7 ec ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p1006
S'.text:0000000000402800\n.text:0000000000402801\n.text:0000000000402804\n.text:0000000000402809\n.text:000000000040280c\n.text:0000000000402810\n.text:0000000000402813\n.text:0000000000402817\n.text:0000000000402819\n.text:000000000040281d\n.text:0000000000402822\n.text:0000000000402824\n.text:0000000000402825\n'
p1007
tp1008
sS'strcaseeq6'
p1009
(S'\n__stdcall strcaseeq6()\n'
p1010
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404232\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404239\nJMP 0x0040424e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040424e\nTEST BPL,BPL\nJZ 0x00404249\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404260\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1012
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 31 0d 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1013
S'.text:0000000000404210\n.text:0000000000404211\n.text:0000000000404212\n.text:0000000000404213\n.text:0000000000404215\n.text:0000000000404218\n.text:000000000040421a\n.text:000000000040421f\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404227\n.text:000000000040422a\n.text:000000000040422c\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404232\n.text:0000000000404234\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404241\n.text:0000000000404245\n.text:0000000000404246\n.text:0000000000404247\n.text:0000000000404249\n.text:000000000040424e\n.text:0000000000404252\n.text:0000000000404253\n.text:0000000000404254\n'
p1014
tp1015
sS'strcaseeq5'
p1016
(S'\n__stdcall strcaseeq5()\n'
p1017
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004041e6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004041ed\nJMP 0x00404204\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404204\nTEST BPL,BPL\nJZ 0x004041ff\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404210\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1019
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 7d 0d 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1020
S'.text:00000000004041c0\n.text:00000000004041c1\n.text:00000000004041c3\n.text:00000000004041c4\n.text:00000000004041c7\n.text:00000000004041c9\n.text:00000000004041cc\n.text:00000000004041ce\n.text:00000000004041d3\n.text:00000000004041d7\n.text:00000000004041d9\n.text:00000000004041db\n.text:00000000004041de\n.text:00000000004041e0\n.text:00000000004041e2\n.text:00000000004041e4\n.text:00000000004041e6\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f2\n.text:00000000004041f6\n.text:00000000004041f9\n.text:00000000004041fa\n.text:00000000004041fc\n.text:00000000004041fd\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404205\n.text:0000000000404207\n.text:0000000000404208\n'
p1021
tp1022
sS'emit_ancillary_info'
p1023
(S'\n__stdcall emit_ancillary_info()\n'
p1024
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004066c0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("dircolors",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "dircolors";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"dircolors",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","dircolors");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x407781;\u000a  if (__s2 == "dircolors") {\u000a    uVar3 = 0x406dad;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1025
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4066c0\nMOV ESI,0x406d91\nNOP\nMOV EDI,0x406c01\nCALL 0x004015f0\nTEST EAX,EAX\nJZ 0x004019bb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x004019a0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406c01\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406df0\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406c27\nMOV ECX,0x406e07\nXOR EAX,EAX\nCALL 0x004016c0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004016b0\nTEST RAX,RAX\nJZ 0x00401a44\nMOV ESI,0x406e2e\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401450\nTEST EAX,EAX\nJZ 0x00401a44\nXOR EDI,EDI\nMOV ESI,0x406e32\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406c01\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016c0\nXOR EDI,EDI\nMOV ESI,0x406e77\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RSI,RAX\nMOV R14D,0x406c01\nMOV EDI,0x1\nMOV EDX,0x406e07\nMOV ECX,0x406c01\nXOR EAX,EAX\nCALL 0x004016c0\nXOR EDI,EDI\nMOV ESI,0x406e96\nMOV EDX,0x5\nCALL 0x004014e0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406dad\nMOV ECX,0x407781\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004016c0\n'
p1026
S'41 56\n53\n50\nbb c0 66 40 00\nbe 91 6d 40 00\n66 90\nbf 01 6c 40 00\ne8 46 fc ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 01 6c 40 00\n48 0f 45 d8\n31 ff\nbe f0 6d 40 00\nba 05 00 00 00\ne8 04 fb ff ff\n48 89 c6\nbf 01 00 00 00\nba 27 6c 40 00\nb9 07 6e 40 00\n31 c0\ne8 cb fc ff ff\nbf 05 00 00 00\n31 f6\ne8 af fc ff ff\n48 85 c0\n74 3e\nbe 2e 6e 40 00\nba 03 00 00 00\n48 89 c7\ne8 38 fa ff ff\n85 c0\n74 28\n31 ff\nbe 32 6e 40 00\nba 05 00 00 00\ne8 b3 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 01 6c 40 00\n31 c0\n48 89 ce\ne8 7c fc ff ff\n31 ff\nbe 77 6e 40 00\nba 05 00 00 00\ne8 8b fa ff ff\n48 89 c6\n41 be 01 6c 40 00\nbf 01 00 00 00\nba 07 6e 40 00\nb9 01 6c 40 00\n31 c0\ne8 4c fc ff ff\n31 ff\nbe 96 6e 40 00\nba 05 00 00 00\ne8 5b fa ff ff\n48 89 c2\n4c 39 f3\nb8 ad 6d 40 00\nb9 81 77 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 0e fc ff ff\n'
p1027
S'.text:0000000000401990\n.text:0000000000401992\n.text:0000000000401993\n.text:0000000000401994\n.text:0000000000401999\n.text:000000000040199e\n.text:00000000004019a0\n.text:00000000004019a5\n.text:00000000004019aa\n.text:00000000004019ac\n.text:00000000004019ae\n.text:00000000004019b2\n.text:00000000004019b6\n.text:00000000004019b9\n.text:00000000004019bb\n.text:00000000004019bf\n.text:00000000004019c2\n.text:00000000004019c7\n.text:00000000004019cb\n.text:00000000004019cd\n.text:00000000004019d2\n.text:00000000004019d7\n.text:00000000004019dc\n.text:00000000004019df\n.text:00000000004019e4\n.text:00000000004019e9\n.text:00000000004019ee\n.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019fa\n.text:00000000004019fc\n.text:0000000000401a01\n.text:0000000000401a04\n.text:0000000000401a06\n.text:0000000000401a0b\n.text:0000000000401a10\n.text:0000000000401a13\n.text:0000000000401a18\n.text:0000000000401a1a\n.text:0000000000401a1c\n.text:0000000000401a1e\n.text:0000000000401a23\n.text:0000000000401a28\n.text:0000000000401a2d\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a3f\n.text:0000000000401a44\n.text:0000000000401a46\n.text:0000000000401a4b\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a58\n.text:0000000000401a5e\n.text:0000000000401a63\n.text:0000000000401a68\n.text:0000000000401a6d\n.text:0000000000401a6f\n.text:0000000000401a74\n.text:0000000000401a76\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a85\n.text:0000000000401a88\n.text:0000000000401a8b\n.text:0000000000401a90\n.text:0000000000401a95\n.text:0000000000401a99\n.text:0000000000401a9e\n.text:0000000000401aa0\n.text:0000000000401aa3\n.text:0000000000401aa6\n.text:0000000000401aaa\n.text:0000000000401aab\n.text:0000000000401aad\n'
p1028
tp1029
sS'strcaseeq7'
p1030
(S'\n__stdcall strcaseeq7()\n'
p1031
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1032
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404282\nTEST ECX,0xffffffdf\nJNZ 0x00404286\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040428a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1033
S'53\n48 89 fb\n31 ff\ne8 e5 0c 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1034
S'.text:0000000000404260\n.text:0000000000404261\n.text:0000000000404264\n.text:0000000000404266\n.text:000000000040426b\n.text:000000000040426f\n.text:0000000000404271\n.text:0000000000404273\n.text:0000000000404279\n.text:000000000040427b\n.text:0000000000404280\n.text:0000000000404281\n.text:0000000000404282\n.text:0000000000404284\n.text:0000000000404286\n.text:0000000000404288\n.text:0000000000404289\n.text:000000000040428a\n.text:000000000040428f\n.text:0000000000404290\n'
p1035
tp1036
sS'version_etc_va'
p1037
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1038
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1039
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404660\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040466c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404681\nINC R9\nCMP R9,0xa\nJC 0x00404640\nMOV R8,RSP\nCALL 0x004042a0\nADD RSP,0x58\nRET\n'
p1040
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1041
S'.text:0000000000404630\n.text:0000000000404634\n.text:0000000000404637\n.text:0000000000404640\n.text:0000000000404643\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464c\n.text:0000000000404650\n.text:0000000000404654\n.text:0000000000404657\n.text:0000000000404660\n.text:0000000000404664\n.text:0000000000404668\n.text:000000000040466c\n.text:000000000040466f\n.text:0000000000404673\n.text:0000000000404676\n.text:0000000000404678\n.text:000000000040467b\n.text:000000000040467f\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404689\n.text:000000000040468d\n'
p1042
tp1043
sS'xzalloc'
p1044
(S'\n__stdcall xzalloc(size_t s)\n'
p1045
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1046
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004047c0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401570\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1047
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 a4 cc ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1048
S'.text:00000000004048b0\n.text:00000000004048b2\n.text:00000000004048b3\n.text:00000000004048b4\n.text:00000000004048b7\n.text:00000000004048bc\n.text:00000000004048bf\n.text:00000000004048c1\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048cc\n.text:00000000004048cf\n.text:00000000004048d3\n.text:00000000004048d4\n.text:00000000004048d6\n'
p1049
tp1050
sS'getline'
p1051
(S'\n__stdcall getline(char * * __lineptr, size_t * __n, FILE * __stream)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getline(char **__lineptr,size_t *__n,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getline_0060a198)();\u000a  return _Var1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060a198]\n'
p1054
S'ff 25 82 8a 20 00\n'
p1055
S'.plt:0000000000401710\n'
p1056
tp1057
sS'strcaseeq0'
p1058
(S'\n__stdcall strcaseeq0()\n'
p1059
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403f95\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403f9c\nJMP 0x00403fd0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403fd0\nTEST BPL,BPL\nJZ 0x00403fcb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403fe0\nJMP 0x00403fd0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 0f 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000403f60\n.text:0000000000403f61\n.text:0000000000403f63\n.text:0000000000403f65\n.text:0000000000403f67\n.text:0000000000403f69\n.text:0000000000403f6a\n.text:0000000000403f6b\n.text:0000000000403f6e\n.text:0000000000403f71\n.text:0000000000403f74\n.text:0000000000403f77\n.text:0000000000403f79\n.text:0000000000403f7c\n.text:0000000000403f7e\n.text:0000000000403f83\n.text:0000000000403f86\n.text:0000000000403f88\n.text:0000000000403f8a\n.text:0000000000403f8d\n.text:0000000000403f8f\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403f9f\n.text:0000000000403fa1\n.text:0000000000403fa5\n.text:0000000000403faa\n.text:0000000000403fad\n.text:0000000000403fb1\n.text:0000000000403fb5\n.text:0000000000403fb9\n.text:0000000000403fbd\n.text:0000000000403fc1\n.text:0000000000403fc4\n.text:0000000000403fc9\n.text:0000000000403fcb\n.text:0000000000403fd0\n.text:0000000000403fd4\n.text:0000000000403fd5\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fde\n'
p1063
tp1064
sS'strcaseeq2'
p1065
(S'\n__stdcall strcaseeq2()\n'
p1066
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004040a6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004040ad\nJMP 0x004040da\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004040da\nTEST BPL,BPL\nJZ 0x004040d5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004040f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1068
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 0e 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1069
S'.text:0000000000404070\n.text:0000000000404071\n.text:0000000000404073\n.text:0000000000404075\n.text:0000000000404077\n.text:0000000000404079\n.text:000000000040407a\n.text:000000000040407b\n.text:000000000040407e\n.text:0000000000404081\n.text:0000000000404084\n.text:0000000000404087\n.text:0000000000404089\n.text:000000000040408c\n.text:000000000040408e\n.text:0000000000404093\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409b\n.text:000000000040409e\n.text:00000000004040a0\n.text:00000000004040a2\n.text:00000000004040a4\n.text:00000000004040a6\n.text:00000000004040a8\n.text:00000000004040ab\n.text:00000000004040ad\n.text:00000000004040b0\n.text:00000000004040b2\n.text:00000000004040b6\n.text:00000000004040ba\n.text:00000000004040be\n.text:00000000004040c2\n.text:00000000004040c5\n.text:00000000004040c9\n.text:00000000004040ca\n.text:00000000004040cc\n.text:00000000004040ce\n.text:00000000004040d0\n.text:00000000004040d2\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040da\n.text:00000000004040de\n.text:00000000004040df\n.text:00000000004040e1\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040e7\n.text:00000000004040e8\n'
p1070
tp1071
sS'strcaseeq1'
p1072
(S'\n__stdcall strcaseeq1()\n'
p1073
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040401d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404024\nJMP 0x00404057\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404057\nTEST BPL,BPL\nJZ 0x00404052\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404070\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 46 0f 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000403fe0\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403fea\n.text:0000000000403feb\n.text:0000000000403ff0\n.text:0000000000403ff3\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffb\n.text:0000000000403ffe\n.text:0000000000404003\n.text:0000000000404005\n.text:000000000040400a\n.text:000000000040400e\n.text:0000000000404010\n.text:0000000000404012\n.text:0000000000404015\n.text:0000000000404017\n.text:0000000000404019\n.text:000000000040401b\n.text:000000000040401d\n.text:000000000040401f\n.text:0000000000404022\n.text:0000000000404024\n.text:0000000000404027\n.text:0000000000404029\n.text:000000000040402d\n.text:0000000000404031\n.text:0000000000404035\n.text:000000000040403b\n.text:000000000040403f\n.text:0000000000404042\n.text:0000000000404046\n.text:0000000000404047\n.text:0000000000404049\n.text:000000000040404b\n.text:000000000040404d\n.text:000000000040404f\n.text:0000000000404050\n.text:0000000000404052\n.text:0000000000404057\n.text:000000000040405b\n.text:000000000040405c\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404062\n.text:0000000000404064\n.text:0000000000404065\n'
p1077
tp1078
sS'strcaseeq4'
p1079
(S'\n__stdcall strcaseeq4()\n'
p1080
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040418c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404193\nJMP 0x004041b4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004041b4\nTEST BPL,BPL\nJZ 0x004041af\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004041c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 d7 0d 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404166\n.text:0000000000404167\n.text:000000000040416a\n.text:000000000040416d\n.text:000000000040416f\n.text:0000000000404172\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417d\n.text:000000000040417f\n.text:0000000000404181\n.text:0000000000404184\n.text:0000000000404186\n.text:0000000000404188\n.text:000000000040418a\n.text:000000000040418c\n.text:000000000040418e\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404196\n.text:0000000000404198\n.text:000000000040419c\n.text:00000000004041a0\n.text:00000000004041a3\n.text:00000000004041a7\n.text:00000000004041a8\n.text:00000000004041aa\n.text:00000000004041ac\n.text:00000000004041ad\n.text:00000000004041af\n.text:00000000004041b4\n.text:00000000004041b8\n.text:00000000004041b9\n.text:00000000004041bb\n.text:00000000004041bd\n.text:00000000004041be\n'
p1084
tp1085
sS'strcaseeq3'
p1086
(S'\n__stdcall strcaseeq3()\n'
p1087
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404120\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404127\nJMP 0x0040414a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040414a\nTEST BPL,BPL\nJZ 0x00404145\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404160\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 43 0e 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:00000000004040f0\n.text:00000000004040f1\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040f7\n.text:00000000004040f8\n.text:00000000004040fb\n.text:00000000004040fe\n.text:0000000000404101\n.text:0000000000404103\n.text:0000000000404106\n.text:0000000000404108\n.text:000000000040410d\n.text:0000000000404111\n.text:0000000000404113\n.text:0000000000404115\n.text:0000000000404118\n.text:000000000040411a\n.text:000000000040411c\n.text:000000000040411e\n.text:0000000000404120\n.text:0000000000404122\n.text:0000000000404125\n.text:0000000000404127\n.text:000000000040412a\n.text:000000000040412c\n.text:0000000000404130\n.text:0000000000404134\n.text:0000000000404138\n.text:000000000040413b\n.text:000000000040413c\n.text:000000000040413e\n.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404143\n.text:0000000000404145\n.text:000000000040414a\n.text:000000000040414b\n.text:000000000040414d\n.text:000000000040414f\n.text:0000000000404151\n.text:0000000000404152\n'
p1091
tp1092
sS'last_component'
p1093
(S'\n__stdcall last_component(char * name)\n'
p1094
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1095
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004027b0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x004027d6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x004027d0\nTEST CL,CL\nJZ 0x004027f7\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x004027ed\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x004027d0\nMOV RAX,RDI\nRET\n'
p1096
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1097
S'.text:00000000004027a0\n.text:00000000004027a3\n.text:00000000004027b0\n.text:00000000004027b4\n.text:00000000004027b8\n.text:00000000004027ba\n.text:00000000004027bc\n.text:00000000004027bf\n.text:00000000004027d0\n.text:00000000004027d3\n.text:00000000004027d6\n.text:00000000004027d9\n.text:00000000004027db\n.text:00000000004027de\n.text:00000000004027e0\n.text:00000000004027e2\n.text:00000000004027e4\n.text:00000000004027e6\n.text:00000000004027e9\n.text:00000000004027eb\n.text:00000000004027ed\n.text:00000000004027ef\n.text:00000000004027f3\n.text:00000000004027f5\n.text:00000000004027f7\n.text:00000000004027fa\n'
p1098
tp1099
sS'register_tm_clones'
p1100
(S'\n__stdcall register_tm_clones()\n'
p1101
V\u000a/* WARNING: Removing unreachable block (ram,0x00401813) */\u000a/* WARNING: Removing unreachable block (ram,0x0040181d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1102
S'MOV ESI,0x60a250\nPUSH RBP\nSUB RSI,0x60a250\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401828\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401828\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p1103
S'be 50 a2 60 00\n55\n48 81 ee 50 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p1104
S'.text:00000000004017f0\n.text:00000000004017f5\n.text:00000000004017f6\n.text:00000000004017fd\n.text:0000000000401801\n.text:0000000000401804\n.text:0000000000401807\n.text:000000000040180b\n.text:000000000040180e\n.text:0000000000401811\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181b\n.text:000000000040181d\n.text:000000000040181e\n.text:0000000000401823\n.text:0000000000401828\n.text:0000000000401829\n'
p1105
tp1106
sS'gettext_quote'
p1107
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1108
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407648;\u000a        pcVar2 = &DAT_0040764c;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004014e0\nCMP RAX,RBX\nJNZ 0x00403f58\nCALL 0x00405010\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403f60\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403f08\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407638\nMOV EAX,0x40763c\nJMP 0x00403f54\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403f60\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403f46\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407648\nMOV EAX,0x40764c\nJMP 0x00403f54\nCMP R14D,0x9\nMOV ECX,0x40762e\nMOV EAX,0x406d68\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1110
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 27 d6 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 49 11 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 38 76 40 00\nb8 3c 76 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 48 76 40 00\nb8 4c 76 40 00\neb 0e\n41 83 fe 09\nb9 2e 76 40 00\nb8 68 6d 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1111
S'.text:0000000000403ea0\n.text:0000000000403ea1\n.text:0000000000403ea3\n.text:0000000000403ea4\n.text:0000000000403ea7\n.text:0000000000403eaa\n.text:0000000000403eac\n.text:0000000000403eb1\n.text:0000000000403eb4\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ec2\n.text:0000000000403ec7\n.text:0000000000403eca\n.text:0000000000403ecf\n.text:0000000000403ed4\n.text:0000000000403ed9\n.text:0000000000403edf\n.text:0000000000403ee5\n.text:0000000000403ee8\n.text:0000000000403eea\n.text:0000000000403eec\n.text:0000000000403ef1\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403ef9\n.text:0000000000403efc\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f0d\n.text:0000000000403f12\n.text:0000000000403f17\n.text:0000000000403f1d\n.text:0000000000403f23\n.text:0000000000403f26\n.text:0000000000403f28\n.text:0000000000403f2a\n.text:0000000000403f2f\n.text:0000000000403f33\n.text:0000000000403f35\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f44\n.text:0000000000403f46\n.text:0000000000403f4a\n.text:0000000000403f4f\n.text:0000000000403f54\n.text:0000000000403f58\n.text:0000000000403f59\n.text:0000000000403f5b\n.text:0000000000403f5c\n'
p1112
tp1113
sS'c_islower'
p1114
(S'\n__stdcall c_islower()\n'
p1115
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1116
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1117
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1118
S'.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404ef6\n.text:0000000000404ef9\n'
p1119
tp1120
sS'freopen'
p1121
(S'\n__stdcall freopen(char * __filename, char * __modes, FILE * __stream)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * freopen(char *__filename,char *__modes,FILE *__stream)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_freopen_0060a0d0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0060a0d0]\n'
p1124
S'ff 25 4a 8b 20 00\n'
p1125
S'.plt:0000000000401580\n'
p1126
tp1127
sS'fclose'
p1128
(S'\n__stdcall fclose(FILE * __stream)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x0060a070]\n'
p1131
S'ff 25 aa 8b 20 00\n'
p1132
S'.plt:00000000004014c0\n'
p1133
tp1134
sS'__ctype_get_mb_cur_max'
p1135
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060a088]\n'
p1138
S'ff 25 92 8b 20 00\n'
p1139
S'.plt:00000000004014f0\n'
p1140
tp1141
sS'quotearg_n_style'
p1142
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1143
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403bd0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004039a0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1145
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1146
S'.text:0000000000403b90\n.text:0000000000403b91\n.text:0000000000403b93\n.text:0000000000403b94\n.text:0000000000403b98\n.text:0000000000403b9b\n.text:0000000000403b9d\n.text:0000000000403ba2\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bb1\n.text:0000000000403bb3\n.text:0000000000403bb6\n.text:0000000000403bb9\n.text:0000000000403bbe\n.text:0000000000403bc2\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc6\n'
p1147
tp1148
sS'call_chunkfun'
p1149
(S'\n__stdcall call_chunkfun(obstack * h, size_t size)\n'
p1150
V\u000avoid * call_chunkfun(obstack *h,size_t size)\u000a\u000a{\u000a  void *pvVar1;\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00404d1c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    pvVar1 = (void *)(*(code *)h->chunkfun)(size);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00404d27. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  pvVar1 = (void *)(*(code *)h->chunkfun)(h->extra_arg,size,in_RDX,(code *)h->chunkfun);\u000a  return pvVar1;\u000a}\u000a\u000a
p1151
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00404d1f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x38]\nMOV RCX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p1152
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 38\n48 8b 48 38\n48 8b 78 48\nff e1\n'
p1153
S'.text:0000000000404d10\n.text:0000000000404d13\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d1f\n.text:0000000000404d23\n.text:0000000000404d27\n'
p1154
tp1155
sS'fwrite'
p1156
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a1a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x0060a1a8]\n'
p1159
S'ff 25 72 8a 20 00\n'
p1160
S'.plt:0000000000401730\n'
p1161
tp1162
sS'guess_shell_syntax'
p1163
(S'\n__stdcall guess_shell_syntax()\n'
p1164
V\u000aShell_syntax guess_shell_syntax(void)\u000a\u000a{\u000a  Shell_syntax SVar1;\u000a  int iVar2;\u000a  char *name;\u000a  \u000a  name = getenv("SHELL");\u000a  SVar1 = SHELL_SYNTAX_UNKNOWN;\u000a  if ((name != (char *)0x0) && (*name != 0)) {\u000a    name = last_component(name);\u000a    if ((*name == 'c') && (((name[1] == 's' && (name[2] == 'h')) && (name[3] == 0)))) {\u000a      return SHELL_SYNTAX_C;\u000a    }\u000a    iVar2 = strcmp(name,"tcsh");\u000a    SVar1 = (Shell_syntax)(iVar2 == 0);\u000a  }\u000a  return SVar1;\u000a}\u000a\u000a
p1165
S'PUSH RAX\nMOV EDI,0x406efa\nCALL 0x00401410\nMOV RCX,RAX\nMOV EAX,0x2\nTEST RCX,RCX\nJZ 0x00401e52\nCMP byte ptr [RCX],0x0\nJZ 0x00401e52\nMOV RDI,RCX\nCALL 0x004027a0\nCMP byte ptr [RAX],0x63\nJNZ 0x00401e3c\nCMP byte ptr [RAX + 0x1],0x73\nJNZ 0x00401e3c\nCMP byte ptr [RAX + 0x2],0x68\nJNZ 0x00401e3c\nCMP byte ptr [RAX + 0x3],0x0\nJZ 0x00401e54\nMOV ESI,0x406f00\nMOV RDI,RAX\nCALL 0x004015f0\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nMOV EAX,ECX\nPOP RCX\nRET\nMOV EAX,0x1\nPOP RCX\nRET\n'
p1166
S'50\nbf fa 6e 40 00\ne8 05 f6 ff ff\n48 89 c1\nb8 02 00 00 00\n48 85 c9\n74 3a\n80 39 00\n74 35\n48 89 cf\ne8 7b 09 00 00\n80 38 63\n75 12\n80 78 01 73\n75 0c\n80 78 02 68\n75 06\n80 78 03 00\n74 18\nbe 00 6f 40 00\n48 89 c7\ne8 a7 f7 ff ff\n31 c9\n85 c0\n0f 94 c1\n89 c8\n59\nc3\nb8 01 00 00 00\n59\nc3\n'
p1167
S'.text:0000000000401e00\n.text:0000000000401e01\n.text:0000000000401e06\n.text:0000000000401e0b\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e16\n.text:0000000000401e18\n.text:0000000000401e1b\n.text:0000000000401e1d\n.text:0000000000401e20\n.text:0000000000401e25\n.text:0000000000401e28\n.text:0000000000401e2a\n.text:0000000000401e2e\n.text:0000000000401e30\n.text:0000000000401e34\n.text:0000000000401e36\n.text:0000000000401e3a\n.text:0000000000401e3c\n.text:0000000000401e41\n.text:0000000000401e44\n.text:0000000000401e49\n.text:0000000000401e4b\n.text:0000000000401e4d\n.text:0000000000401e50\n.text:0000000000401e52\n.text:0000000000401e53\n.text:0000000000401e54\n.text:0000000000401e59\n.text:0000000000401e5a\n'
p1168
tp1169
sS'quote_n'
p1170
(S'\n__stdcall quote_n(char * arg)\n'
p1171
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1172
S'MOV RDX,-0x1\nJMP 0x00403e60\n'
p1173
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1174
S'.text:0000000000403e80\n.text:0000000000403e87\n'
p1175
tp1176
sS'quotearg_alloc'
p1177
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1178
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1179
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403810\n'
p1180
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1181
S'.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403805\n.text:0000000000403808\n'
p1182
tp1183
sS'__do_global_dtors_aux'
p1184
(S'\n__stdcall __do_global_dtors_aux()\n'
p1185
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1186
S'CMP byte ptr [0x0060a2a8],0x0\nJNZ 0x0040184a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017b0\nPOP RBP\nMOV byte ptr [0x0060a2a8],0x1\nRET\n'
p1187
S'80 3d 71 8a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 5e 8a 20 00 01\nf3 c3\n'
p1188
S'.text:0000000000401830\n.text:0000000000401837\n.text:0000000000401839\n.text:000000000040183a\n.text:000000000040183d\n.text:0000000000401842\n.text:0000000000401843\n.text:000000000040184a\n'
p1189
tp1190
sS'close_stdout_set_file_name'
p1191
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1192
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1193
S'MOV qword ptr [0x0060a308],RDI\nRET\n'
p1194
S'48 89 3d 41 7c 20 00\nc3\n'
p1195
S'.text:00000000004026c0\n.text:00000000004026c7\n'
p1196
tp1197
sS'c_isprint'
p1198
(S'\n__stdcall c_isprint()\n'
p1199
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1200
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1201
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1202
S'.text:0000000000404f00\n.text:0000000000404f03\n.text:0000000000404f06\n.text:0000000000404f09\n'
p1203
tp1204
sS'_fini'
p1205
(S'\n__stdcall _fini()\n'
p1206
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1207
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1208
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1209
S'.fini:00000000004053ec\n.fini:00000000004053f0\n.fini:00000000004053f4\n'
p1210
tp1211
sS'_obstack_newchunk'
p1212
(S'\n__stdcall _obstack_newchunk(obstack * h, size_t length)\n'
p1213
V\u000avoid _obstack_newchunk(obstack *h,size_t length)\u000a\u000a{\u000a  _obstack_chunk *old_chunk;\u000a  char *__dest;\u000a  ulong uVar1;\u000a  char *__src;\u000a  _obstack_chunk *p_Var2;\u000a  char *__n;\u000a  \u000a  old_chunk = h->chunk;\u000a  __n = h->next_free + -(long)h->object_base;\u000a  __dest = __n + length + h->alignment_mask;\u000a  uVar1 = ((ulong)__n >> 3) + 100;\u000a  __src = __dest + uVar1;\u000a  if (CARRY8(uVar1,(ulong)__dest)) {\u000a    __src = __dest;\u000a  }\u000a  if (__src < (char *)h->chunk_size) {\u000a    __src = (char *)h->chunk_size;\u000a  }\u000a  if ((!CARRY8(length,(ulong)__n)) && (CARRY8((ulong)(__n + length),h->alignment_mask) == false)) {\u000a    p_Var2 = (_obstack_chunk *)call_chunkfun(h,(size_t)__src);\u000a    if (p_Var2 != (_obstack_chunk *)0x0) goto LAB_00404c6e;\u000a  }\u000a  (*obstack_alloc_failed_handler)();\u000a  p_Var2 = (_obstack_chunk *)0x0;\u000aLAB_00404c6e:\u000a  h->chunk = p_Var2;\u000a  p_Var2->prev = old_chunk;\u000a  __src = (char *)((long)&p_Var2->limit + (long)__src);\u000a  h->chunk_limit = __src;\u000a  p_Var2->limit = __src;\u000a  __src = h->object_base;\u000a  uVar1 = h->alignment_mask;\u000a  __dest = (char *)((ulong)(p_Var2->contents + uVar1) & ~uVar1);\u000a  memcpy(__dest,__src,(size_t)__n);\u000a  if (((*(byte *)&h->use_extra_arg_bitfield & 2) == 0) &&\u000a     (__src == (char *)((ulong)(old_chunk->contents + uVar1) & ~uVar1))) {\u000a    p_Var2->prev = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a  }\u000a  h->object_base = __dest;\u000a  h->next_free = __n + (long)__dest;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfd;\u000a  return;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nMOV RCX,qword ptr [R12]\nMOV R15,qword ptr [R12 + 0x8]\nMOV R14,qword ptr [R12 + 0x18]\nSUB R14,qword ptr [R12 + 0x10]\nLEA RDX,[R14 + RSI*0x1]\nADD RDX,qword ptr [R12 + 0x30]\nSETC AL\nMOV RBX,R14\nSHR RBX,0x3\nADD RBX,0x64\nADD RBX,RDX\nCMOVC RBX,RDX\nCMP RBX,RCX\nCMOVC RBX,RCX\nADD RSI,R14\nJC 0x00404c65\nTEST AL,AL\nJNZ 0x00404c65\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00404d10\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00404c6e\nCALL qword ptr [0x0060a248]\nXOR R13D,R13D\nMOV qword ptr [R12 + 0x8],R13\nMOV qword ptr [R13 + 0x8],R15\nADD RBX,R13\nMOV qword ptr [R12 + 0x20],RBX\nMOV qword ptr [R13],RBX\nMOV RSI,qword ptr [R12 + 0x10]\nMOV RBP,qword ptr [R12 + 0x30]\nLEA RBX,[RBP + R13*0x1 + 0x10]\nMOV qword ptr [RSP + 0x8],R15\nMOV R15,RBP\nNOT R15\nAND RBX,R15\nMOV RDI,RBX\nMOV qword ptr [RSP + 0x10],RSI\nMOV RDX,R14\nCALL 0x00401610\nTEST byte ptr [R12 + 0x50],0x2\nJNZ 0x00404ce1\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RAX,[RBP + RAX*0x1 + 0x10]\nAND RAX,R15\nCMP qword ptr [RSP + 0x10],RAX\nJNZ 0x00404ce1\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [R13 + 0x8],RAX\nMOV RDI,R12\nCALL 0x00404d30\nMOV qword ptr [R12 + 0x10],RBX\nADD R14,RBX\nMOV qword ptr [R12 + 0x18],R14\nAND byte ptr [R12 + 0x50],0xfd\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1215
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fc\n49 8b 0c 24\n4d 8b 7c 24 08\n4d 8b 74 24 18\n4d 2b 74 24 10\n49 8d 14 36\n49 03 54 24 30\n0f 92 c0\n4c 89 f3\n48 c1 eb 03\n48 83 c3 64\n48 01 d3\n48 0f 42 da\n48 39 cb\n48 0f 42 d9\n4c 01 f6\n72 17\n84 c0\n75 13\n4c 89 e7\n48 89 de\ne8 b3 00 00 00\n49 89 c5\n4d 85 ed\n75 09\nff 15 dd 55 20 00\n45 31 ed\n4d 89 6c 24 08\n4d 89 7d 08\n4c 01 eb\n49 89 5c 24 20\n49 89 5d 00\n49 8b 74 24 10\n49 8b 6c 24 30\n4a 8d 5c 2d 10\n4c 89 7c 24 08\n49 89 ef\n49 f7 d7\n4c 21 fb\n48 89 df\n48 89 74 24 10\n4c 89 f2\ne8 60 c9 ff ff\n41 f6 44 24 50 02\n75 29\n48 8b 44 24 08\n48 8d 44 05 10\n4c 21 f8\n48 39 44 24 10\n75 15\n48 8b 74 24 08\n48 8b 46 08\n49 89 45 08\n4c 89 e7\ne8 4f 00 00 00\n49 89 5c 24 10\n49 01 de\n4d 89 74 24 18\n41 80 64 24 50 fd\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1216
S'.text:0000000000404c00\n.text:0000000000404c01\n.text:0000000000404c03\n.text:0000000000404c05\n.text:0000000000404c07\n.text:0000000000404c09\n.text:0000000000404c0a\n.text:0000000000404c0e\n.text:0000000000404c11\n.text:0000000000404c15\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c37\n.text:0000000000404c3b\n.text:0000000000404c3e\n.text:0000000000404c42\n.text:0000000000404c45\n.text:0000000000404c49\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c50\n.text:0000000000404c52\n.text:0000000000404c55\n.text:0000000000404c58\n.text:0000000000404c5d\n.text:0000000000404c60\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c6b\n.text:0000000000404c6e\n.text:0000000000404c73\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7f\n.text:0000000000404c83\n.text:0000000000404c88\n.text:0000000000404c8d\n.text:0000000000404c92\n.text:0000000000404c97\n.text:0000000000404c9a\n.text:0000000000404c9d\n.text:0000000000404ca0\n.text:0000000000404ca3\n.text:0000000000404ca8\n.text:0000000000404cab\n.text:0000000000404cb0\n.text:0000000000404cb6\n.text:0000000000404cb8\n.text:0000000000404cbd\n.text:0000000000404cc2\n.text:0000000000404cc5\n.text:0000000000404cca\n.text:0000000000404ccc\n.text:0000000000404cd1\n.text:0000000000404cd5\n.text:0000000000404cd9\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404cee\n.text:0000000000404cf4\n.text:0000000000404cf8\n.text:0000000000404cf9\n.text:0000000000404cfb\n.text:0000000000404cfd\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d02\n'
p1217
tp1218
sS'__fpending'
p1219
(S'\n__stdcall __fpending()\n'
p1220
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a050)();\u000a  return;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060a050]\n'
p1222
S'ff 25 ca 8b 20 00\n'
p1223
S'.plt:0000000000401480\n'
p1224
tp1225
s.