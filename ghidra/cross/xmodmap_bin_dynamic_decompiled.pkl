(dp0
S'do_add'
p1
(S'\n__stdcall do_add(char * line)\n'
p2
V\u000avoid do_add(char *line)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  long lVar4;\u000a  op *p;\u000a  int in_ESI;\u000a  size_t __size;\u000a  char *__format;\u000a  FILE *__stream;\u000a  int iVar5;\u000a  KeySym *kslist;\u000a  int local_2c;\u000a  undefined8 local_28;\u000a  \u000a  if (((line == (char *)0x0) || (in_ESI < 6)) || (*line == 0)) {\u000a    badheader();\u000a    __format = "add modifier input line";\u000a    __size = 0x17;\u000a    goto LAB_00402a8a;\u000a  }\u000a  local_2c = skip_chars(line);\u000a  if (local_2c < 1) {\u000a    badheader();\u000a    __format = "add modifier name %s";\u000a    __stream = stderr;\u000a  }\u000a  else {\u000a    iVar1 = parse_modifier(line);\u000a    if (-1 < iVar1) {\u000a      lVar4 = (long)local_2c;\u000a      iVar5 = in_ESI - local_2c;\u000a      iVar2 = skip_until_char();\u000a      if (iVar2 < 0) {\u000a        local_2c = iVar2;\u000a        badheader();\u000a        __format = "add modifier = keysym";\u000a        __size = 0x15;\u000a      }\u000a      else {\u000a        local_2c = iVar2;\u000a        iVar3 = skip_space(line + lVar4 + (long)iVar2 + 1);\u000a        local_2c = iVar3 + 1 + iVar2;\u000a        iVar5 = get_keysym_list(line + lVar4 + (long)local_2c,(int *)(ulong)(uint)(iVar5 - local_2c)\u000a                                ,(KeySym **)&local_2c);\u000a        iVar2 = local_2c;\u000a        if (iVar5 < 0) {\u000a          return;\u000a        }\u000a        if (local_2c != 0) {\u000a          p = (op *)malloc(0x118);\u000a          if (p != (op *)0x0) {\u000a            *(undefined4 *)*p = 1;\u000a            *(int *)(*p + 0x10) = iVar1;\u000a            *(int *)(*p + 0x14) = iVar2;\u000a            *(undefined8 *)(*p + 0x18) = local_28;\u000a            add_to_work_queue(p);\u000a            return;\u000a          }\u000a          badheader();\u000a          __format = "attempt to allocate %ld byte addmodifier opcode";\u000a          line = (char *)0x20;\u000a          __stream = stderr;\u000a          goto LAB_00402aae;\u000a        }\u000a        badheader();\u000a        __format = "add modifier keysym list (empty)";\u000a        __size = 0x20;\u000a      }\u000aLAB_00402a8a:\u000a      fwrite(__format,__size,1,stderr);\u000a      goto LAB_00402ab3;\u000a    }\u000a    badheader();\u000a    __stream = stderr;\u000a    line = copy_to_scratch(line);\u000a    __format = "add modifier name \u005c'%s\u005c', not allowed";\u000a  }\u000aLAB_00402aae:\u000a  fprintf(__stream,__format,line);\u000aLAB_00402ab3:\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R15D,ESI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402a02\nCMP R15D,0x6\nJL 0x00402a02\nCMP byte ptr [RBX],0x0\nJZ 0x00402a02\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00401e20\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJLE 0x00402a1a\nMOV RDI,RBX\nMOV ESI,EAX\nCALL 0x00403860\nMOV R14D,EAX\nTEST R14D,R14D\nJS 0x00402a32\nMOVSXD RAX,dword ptr [RSP + 0xc]\nADD RBX,RAX\nSUB R15D,EAX\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00403390\nMOV EBP,EAX\nMOV dword ptr [RSP + 0xc],EBP\nTEST EBP,EBP\nJS 0x00402a5c\nMOVSXD RAX,EBP\nMOV ECX,EBP\nINC ECX\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nMOV ESI,R15D\nSUB ESI,ECX\nCALL 0x00401eb0\nLEA EAX,[RAX + RBP*0x1 + 0x1]\nMOV dword ptr [RSP + 0xc],EAX\nCDQE\nADD RBX,RAX\nSUB R15D,EAX\nLEA RDX,[RSP + 0xc]\nLEA RCX,[RSP + 0x10]\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x004033c0\nTEST EAX,EAX\nJS 0x00402ac4\nMOV EBX,dword ptr [RSP + 0xc]\nTEST EBX,EBX\nJZ 0x00402a74\nMOV EDI,0x118\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x00402a96\nMOV dword ptr [RAX],0x1\nMOV dword ptr [RAX + 0x10],R14D\nMOV dword ptr [RAX + 0x14],EBX\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX + 0x18],RCX\nMOV RDI,RAX\nCALL 0x004035c0\nJMP 0x00402ac4\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404a22\nMOV ESI,0x17\nJMP 0x00402a8a\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404a3a\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x00402aae\nCALL 0x00401e70\nMOV RBP,qword ptr [0x00607280]\nMOV ESI,dword ptr [RSP + 0xc]\nMOV RDI,RBX\nCALL 0x00403680\nMOV RCX,RAX\nMOV ESI,0x404a4f\nXOR EAX,EAX\nMOV RDI,RBP\nMOV RDX,RCX\nJMP 0x00402aae\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404a73\nMOV ESI,0x15\nJMP 0x00402a8a\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404a89\nMOV ESI,0x20\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x00402ab3\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404aaa\nMOV EDX,0x20\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p4
S'55\n41 57\n41 56\n53\n48 83 ec 18\n41 89 f7\n48 89 fb\n48 85 db\n0f 84 e9 00 00 00\n41 83 ff 06\n0f 8c df 00 00 00\n80 3b 00\n0f 84 d6 00 00 00\n48 89 df\n44 89 fe\ne8 e9 f4 ff ff\n89 44 24 0c\n85 c0\n0f 8e d7 00 00 00\n48 89 df\n89 c6\ne8 13 0f 00 00\n41 89 c6\n45 85 f6\n0f 88 d9 00 00 00\n48 63 44 24 0c\n48 01 c3\n41 29 c7\n48 89 df\n44 89 fe\ne8 21 0a 00 00\n89 c5\n89 6c 24 0c\n85 ed\n0f 88 df 00 00 00\n48 63 c5\n89 e9\nff c1\n48 8d 7c 03 01\n44 89 fe\n29 ce\ne8 1d f5 ff ff\n8d 44 28 01\n89 44 24 0c\n48 98\n48 01 c3\n41 29 c7\n48 8d 54 24 0c\n48 8d 4c 24 10\n48 89 df\n44 89 fe\ne8 08 0a 00 00\n85 c0\n0f 88 04 01 00 00\n8b 5c 24 0c\n85 db\n0f 84 a8 00 00 00\nbf 18 01 00 00\ne8 8a e8 ff ff\n48 85 c0\n0f 84 b7 00 00 00\nc7 00 01 00 00 00\n44 89 70 10\n89 58 14\n48 8b 4c 24 10\n48 89 48 18\n48 89 c7\ne8 c3 0b 00 00\ne9 c2 00 00 00\ne8 69 f4 ff ff\n48 8b 0d 72 48 20 00\nbf 22 4a 40 00\nbe 17 00 00 00\neb 70\ne8 51 f4 ff ff\n48 8b 3d 5a 48 20 00\nbe 3a 4a 40 00\n31 c0\n48 89 da\neb 7c\ne8 39 f4 ff ff\n48 8b 2d 42 48 20 00\n8b 74 24 0c\n48 89 df\ne8 36 0c 00 00\n48 89 c1\nbe 4f 4a 40 00\n31 c0\n48 89 ef\n48 89 ca\neb 52\ne8 0f f4 ff ff\n48 8b 0d 18 48 20 00\nbf 73 4a 40 00\nbe 15 00 00 00\neb 16\ne8 f7 f3 ff ff\n48 8b 0d 00 48 20 00\nbf 89 4a 40 00\nbe 20 00 00 00\nba 01 00 00 00\ne8 dc e8 ff ff\neb 1d\ne8 d5 f3 ff ff\n48 8b 3d de 47 20 00\nbe aa 4a 40 00\nba 20 00 00 00\n31 c0\ne8 5d e7 ff ff\n48 8b 35 c6 47 20 00\nbf 0a 00 00 00\ne8 dc e6 ff ff\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p5
S'.text:0000000000402900\n.text:0000000000402901\n.text:0000000000402903\n.text:0000000000402905\n.text:0000000000402906\n.text:000000000040290a\n.text:000000000040290d\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402919\n.text:000000000040291d\n.text:0000000000402923\n.text:0000000000402926\n.text:000000000040292c\n.text:000000000040292f\n.text:0000000000402932\n.text:0000000000402937\n.text:000000000040293b\n.text:000000000040293d\n.text:0000000000402943\n.text:0000000000402946\n.text:0000000000402948\n.text:000000000040294d\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402959\n.text:000000000040295e\n.text:0000000000402961\n.text:0000000000402964\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402971\n.text:0000000000402975\n.text:0000000000402977\n.text:000000000040297d\n.text:0000000000402980\n.text:0000000000402982\n.text:0000000000402984\n.text:0000000000402989\n.text:000000000040298c\n.text:000000000040298e\n.text:0000000000402993\n.text:0000000000402997\n.text:000000000040299b\n.text:000000000040299d\n.text:00000000004029a0\n.text:00000000004029a3\n.text:00000000004029a8\n.text:00000000004029ad\n.text:00000000004029b0\n.text:00000000004029b3\n.text:00000000004029b8\n.text:00000000004029ba\n.text:00000000004029c0\n.text:00000000004029c4\n.text:00000000004029c6\n.text:00000000004029cc\n.text:00000000004029d1\n.text:00000000004029d6\n.text:00000000004029d9\n.text:00000000004029df\n.text:00000000004029e5\n.text:00000000004029e9\n.text:00000000004029ec\n.text:00000000004029f1\n.text:00000000004029f5\n.text:00000000004029f8\n.text:00000000004029fd\n.text:0000000000402a02\n.text:0000000000402a07\n.text:0000000000402a0e\n.text:0000000000402a13\n.text:0000000000402a18\n.text:0000000000402a1a\n.text:0000000000402a1f\n.text:0000000000402a26\n.text:0000000000402a2b\n.text:0000000000402a2d\n.text:0000000000402a30\n.text:0000000000402a32\n.text:0000000000402a37\n.text:0000000000402a3e\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a4a\n.text:0000000000402a4d\n.text:0000000000402a52\n.text:0000000000402a54\n.text:0000000000402a57\n.text:0000000000402a5a\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a68\n.text:0000000000402a6d\n.text:0000000000402a72\n.text:0000000000402a74\n.text:0000000000402a79\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a8a\n.text:0000000000402a8f\n.text:0000000000402a94\n.text:0000000000402a96\n.text:0000000000402a9b\n.text:0000000000402aa2\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402aae\n.text:0000000000402ab3\n.text:0000000000402aba\n.text:0000000000402abf\n.text:0000000000402ac4\n.text:0000000000402ac8\n.text:0000000000402ac9\n.text:0000000000402acb\n.text:0000000000402acd\n.text:0000000000402ace\n'
p6
tp7
sS'UpdateModifierMapping'
p8
(S'\n__stdcall UpdateModifierMapping(XModifierKeymap * map)\n'
p9
V\u000aint UpdateModifierMapping(XModifierKeymap *map)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  char *__format;\u000a  \u000a  uVar3 = 2;\u000a  iVar2 = 6;\u000a  while( true ) {\u000a    iVar1 = XSetModifierMapping(dpy,map);\u000a    if (iVar1 == 0) {\u000a      return 0;\u000a    }\u000a    if (iVar1 != 1) break;\u000a    mapping_busy_key((ulong)uVar3);\u000a    uVar3 = uVar3 * 2;\u000a    iVar2 = iVar2 + -1;\u000a    if (iVar2 < 2) {\u000a      __format = "%s:  unable to set modifier mapping, keyboard problem\u005cn";\u000aLAB_0040154f:\u000a      fprintf(stderr,__format,ProgramName);\u000a      return -1;\u000a    }\u000a  }\u000a  if (iVar1 != 2) {\u000a    fprintf(stderr,"%s:  bad return %d from XSetModifierMapping\u005cn",ProgramName);\u000a    return -1;\u000a  }\u000a  __format = "%s: bad set modifier mapping.\u005cn";\u000a  goto LAB_0040154f;\u000a}\u000a\u000a
p10
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV EBP,0x2\nMOV EBX,0x6\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,R14\nCALL 0x004011b0\nMOV ECX,EAX\nTEST ECX,ECX\nJZ 0x00401530\nCMP ECX,0x1\nJNZ 0x00401537\nMOV EDI,EBP\nCALL 0x00401580\nADD EBP,EBP\nDEC EBX\nCMP EBX,0x1\nJG 0x004014f1\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4042e0\nJMP 0x0040154f\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCMP ECX,0x2\nJNZ 0x0040155d\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404294\nXOR EAX,EAX\nCALL 0x00401210\nMOV EAX,0xffffffff\nJMP 0x00401532\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4042b3\nXOR EAX,EAX\nCALL 0x00401210\nMOV EAX,0xffffffff\nJMP 0x00401532\n'
p11
S'55\n41 56\n53\n49 89 fe\nbd 02 00 00 00\nbb 06 00 00 00\n48 8b 3d c0 5d 20 00\n4c 89 f6\ne8 b0 fc ff ff\n89 c1\n85 c9\n74 2a\n83 f9 01\n75 2c\n89 ef\ne8 6e 00 00 00\n01 ed\nff cb\n83 fb 01\n7f d6\n48 8b 3d 5e 5d 20 00\n48 8b 15 af 5d 20 00\nbe e0 42 40 00\neb 1f\n31 c0\n5b\n41 5e\n5d\nc3\n83 f9 02\n75 21\n48 8b 3d 3d 5d 20 00\n48 8b 15 8e 5d 20 00\nbe 94 42 40 00\n31 c0\ne8 ba fc ff ff\nb8 ff ff ff ff\neb d5\n48 8b 3d 1c 5d 20 00\n48 8b 15 6d 5d 20 00\nbe b3 42 40 00\n31 c0\ne8 99 fc ff ff\nb8 ff ff ff ff\neb b4\n'
p12
S'.text:00000000004014e0\n.text:00000000004014e1\n.text:00000000004014e3\n.text:00000000004014e4\n.text:00000000004014e7\n.text:00000000004014ec\n.text:00000000004014f1\n.text:00000000004014f8\n.text:00000000004014fb\n.text:0000000000401500\n.text:0000000000401502\n.text:0000000000401504\n.text:0000000000401506\n.text:0000000000401509\n.text:000000000040150b\n.text:000000000040150d\n.text:0000000000401512\n.text:0000000000401514\n.text:0000000000401516\n.text:0000000000401519\n.text:000000000040151b\n.text:0000000000401522\n.text:0000000000401529\n.text:000000000040152e\n.text:0000000000401530\n.text:0000000000401532\n.text:0000000000401533\n.text:0000000000401535\n.text:0000000000401536\n.text:0000000000401537\n.text:000000000040153a\n.text:000000000040153c\n.text:0000000000401543\n.text:000000000040154a\n.text:000000000040154f\n.text:0000000000401551\n.text:0000000000401556\n.text:000000000040155b\n.text:000000000040155d\n.text:0000000000401564\n.text:000000000040156b\n.text:0000000000401570\n.text:0000000000401572\n.text:0000000000401577\n.text:000000000040157c\n'
p13
tp14
sS'__libc_csu_init'
p15
(S'\n__stdcall __libc_csu_init()\n'
p16
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x606df8]\nPUSH RBP\nLEA RBP,[0x606e00]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004010b0\nTEST RBP,RBP\nJZ 0x00404266\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00404250\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p18
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 2b 20 00\n55\n48 8d 2d d6 2b 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 6f ce ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p19
S'.text:0000000000404210\n.text:0000000000404212\n.text:0000000000404214\n.text:0000000000404217\n.text:0000000000404219\n.text:000000000040421b\n.text:0000000000404222\n.text:0000000000404223\n.text:000000000040422a\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404238\n.text:000000000040423c\n.text:0000000000404241\n.text:0000000000404244\n.text:0000000000404246\n.text:0000000000404248\n.text:0000000000404250\n.text:0000000000404253\n.text:0000000000404256\n.text:0000000000404259\n.text:000000000040425d\n.text:0000000000404261\n.text:0000000000404264\n.text:0000000000404266\n.text:000000000040426a\n.text:000000000040426b\n.text:000000000040426c\n.text:000000000040426e\n.text:0000000000404270\n.text:0000000000404272\n.text:0000000000404274\n'
p20
tp21
sS'KeysymToKeycodes'
p22
(S'\n__stdcall KeysymToKeycodes(Display * dpy, KeySym keysym, int * pnum_kcs)\n'
p23
V\u000aKeyCode * KeysymToKeycodes(Display *dpy,KeySym keysym,int *pnum_kcs)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  KeySym KVar3;\u000a  KeyCode *__ptr;\u000a  int iVar4;\u000a  uint uVar5;\u000a  ulong uVar6;\u000a  \u000a  *pnum_kcs = 0;\u000a  if (max_keycode < min_keycode) {\u000a    __ptr = (KeyCode *)0x0;\u000a  }\u000a  else {\u000a    __ptr = (KeyCode *)0x0;\u000a    iVar4 = min_keycode;\u000a    do {\u000a      uVar6 = 0;\u000a      do {\u000a        KVar3 = XKeycodeToKeysym(dpy,(ulong)(byte)iVar4,uVar6);\u000a        if (KVar3 == keysym) {\u000a          if (__ptr == (KeyCode *)0x0) {\u000a            __ptr = (KeyCode *)malloc(1);\u000a          }\u000a          else {\u000a            __ptr = (KeyCode *)realloc(__ptr,(long)*pnum_kcs + 1);\u000a          }\u000a          iVar1 = *pnum_kcs;\u000a          __ptr[(long)iVar1] = (byte)iVar4;\u000a          *pnum_kcs = iVar1 + 1;\u000a          break;\u000a        }\u000a        uVar5 = (int)uVar6 + 1;\u000a        uVar6 = (ulong)uVar5;\u000a      } while ((int)uVar5 < 8);\u000a      bVar2 = iVar4 < max_keycode;\u000a      iVar4 = iVar4 + 1;\u000a    } while (bVar2);\u000a  }\u000a  return __ptr;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R13,RDI\nMOV dword ptr [R14],0x0\nMOV EBX,dword ptr [0x006072d4]\nCMP EBX,dword ptr [0x006072d0]\nJLE 0x004037ce\nXOR R12D,R12D\nJMP 0x0040384c\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ESI,BL\nMOV RDI,R13\nMOV EDX,EBP\nCALL 0x00401300\nCMP RAX,R15\nJZ 0x00403810\nINC EBP\nCMP EBP,0x7\nJLE 0x004037f0\nJMP 0x0040383f\nTEST R12,R12\nJZ 0x00403825\nMOVSXD RSI,dword ptr [R14]\nINC RSI\nMOV RDI,R12\nCALL 0x004012e0\nJMP 0x0040382f\nMOV EDI,0x1\nCALL 0x00401260\nMOV R12,RAX\nMOVSXD RAX,dword ptr [R14]\nMOV byte ptr [R12 + RAX*0x1],BL\nLEA EAX,[RAX + 0x1]\nMOV dword ptr [R14],EAX\nCMP EBX,dword ptr [0x006072d0]\nLEA EAX,[RBX + 0x1]\nMOV EBX,EAX\nJL 0x004037e0\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fd\n41 c7 06 00 00 00 00\n8b 1d 13 3b 20 00\n3b 1d 09 3b 20 00\n7e 05\n45 31 e4\neb 7e\n45 31 e4\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 f3\n4c 89 ef\n89 ea\ne8 03 db ff ff\n4c 39 f8\n74 0e\nff c5\n83 fd 07\n7e e7\neb 34\n4d 85 e4\n74 10\n49 63 36\n48 ff c6\n4c 89 e7\ne8 bd da ff ff\neb 0a\nbf 01 00 00 00\ne8 31 da ff ff\n49 89 c4\n49 63 06\n41 88 1c 04\n8d 40 01\n41 89 06\n3b 1d 8b 3a 20 00\n8d 43 01\n89 c3\n7c 94\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p26
S'.text:00000000004037a0\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a5\n.text:00000000004037a7\n.text:00000000004037a9\n.text:00000000004037aa\n.text:00000000004037ab\n.text:00000000004037ae\n.text:00000000004037b1\n.text:00000000004037b4\n.text:00000000004037bb\n.text:00000000004037c1\n.text:00000000004037c7\n.text:00000000004037c9\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d1\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f6\n.text:00000000004037f8\n.text:00000000004037fd\n.text:0000000000403800\n.text:0000000000403802\n.text:0000000000403804\n.text:0000000000403807\n.text:0000000000403809\n.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381b\n.text:000000000040381e\n.text:0000000000403823\n.text:0000000000403825\n.text:000000000040382a\n.text:000000000040382f\n.text:0000000000403832\n.text:0000000000403835\n.text:0000000000403839\n.text:000000000040383c\n.text:000000000040383f\n.text:0000000000403845\n.text:0000000000403848\n.text:000000000040384a\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403853\n.text:0000000000403854\n.text:0000000000403856\n.text:0000000000403858\n.text:000000000040385a\n.text:000000000040385c\n.text:000000000040385d\n'
p27
tp28
sS'initialize_map'
p29
(S'\n__stdcall initialize_map()\n'
p30
V\u000aundefined8 initialize_map(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  map = (XModifierKeymap *)XGetModifierMapping(dpy);\u000a  return in_RAX;\u000a}\u000a\u000a
p31
S'PUSH RAX\nMOV RDI,qword ptr [0x006072b8]\nCALL 0x00401220\nMOV qword ptr [0x006072a0],RAX\nPOP RAX\nRET\n'
p32
S'50\n48 8b 3d b0 55 20 00\ne8 13 f5 ff ff\n48 89 05 8c 55 20 00\n58\nc3\n'
p33
S'.text:0000000000401d00\n.text:0000000000401d01\n.text:0000000000401d08\n.text:0000000000401d0d\n.text:0000000000401d14\n.text:0000000000401d15\n'
p34
tp35
sS'usage'
p36
(S'\n__stdcall usage()\n'
p37
V\u000avoid usage(uint uParm1)\u000a\u000a{\u000a  fprintf(stderr,"usage:  %s [-options ...] [filename]\u005cn",ProgramName);\u000a  fprintf(stderr,"%s\u005cn",\u000a                    \u000a          "\u005cnwhere options include:\u005cn    -display host:dpy            X server to use\u005cn    -verbose, -quiet             turn logging on or off\u005cn    -n                           don\u005c't execute changes, just show like make\u005cn    -e expression                execute string\u005cn    -pm                          print modifier map\u005cn    -pk                          print keymap table\u005cn    -pke                         print keymap table as expressions\u005cn    -pp                          print pointer map\u005cn    -help                        print this usage message\u005cn    -grammar                     print out short help on allowable input\u005cn    -version                     print program version\u005cn    -                            read standard input\u005cn\u005cn"\u000a         );\u000a                    /* WARNING: Subroutine does not return */\u000a  Exit((ulong)uParm1);\u000a}\u000a\u000a
p38
S'PUSH RBX\nMOV EBX,EDI\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x405d72\nXOR EAX,EAX\nCALL 0x00401210\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404edc\nMOV EDX,0x405950\nXOR EAX,EAX\nCALL 0x00401210\nMOV EDI,EBX\nCALL 0x00403be0\n'
p39
S'53\n89 fb\n48 8b 3d d6 30 20 00\n48 8b 15 27 31 20 00\nbe 72 5d 40 00\n31 c0\ne8 53 d0 ff ff\n48 8b 3d bc 30 20 00\nbe dc 4e 40 00\nba 50 59 40 00\n31 c0\ne8 3b d0 ff ff\n89 df\ne8 04 fa ff ff\n'
p40
S'.text:00000000004041a0\n.text:00000000004041a1\n.text:00000000004041a3\n.text:00000000004041aa\n.text:00000000004041b1\n.text:00000000004041b6\n.text:00000000004041b8\n.text:00000000004041bd\n.text:00000000004041c4\n.text:00000000004041c9\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d5\n.text:00000000004041d7\n'
p41
tp42
sS'process_line'
p43
(S'\n__stdcall process_line(char * line)\n'
p44
V\u000avoid process_line(char *line)\u000a\u000a{\u000a  char *line_00;\u000a  int iVar1;\u000a  size_t sVar2;\u000a  void *__ptr;\u000a  ushort **ppuVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  int iVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  \u000a  sVar2 = strlen(line);\u000a  __ptr = (void *)__strdup(line);\u000a  iVar6 = (int)sVar2;\u000a  if (__ptr == (void *)0x0) {\u000a    fprintf(stderr,"%s: Could not allocate %d bytes\u005cn",ProgramName,sVar2 & 0xffffffff);\u000a                    /* WARNING: Subroutine does not return */\u000a    Exit(0xffffffff);\u000a  }\u000a  if (iVar6 < 1) {\u000a    iVar1 = 0;\u000a  }\u000a  else {\u000a    ppuVar3 = __ctype_b_loc();\u000a    lVar4 = 0;\u000a    do {\u000a      iVar1 = (int)lVar4;\u000a      if (((long)*(char *)((long)__ptr + lVar4) != 10) &&\u000a         (((*ppuVar3)[(long)*(char *)((long)__ptr + lVar4)] & 0x2000) == 0)) break;\u000a      lVar4 = lVar4 + 1;\u000a      iVar1 = (int)lVar4;\u000a    } while (lVar4 < (long)iVar6);\u000a  }\u000a  if ((iVar1 != iVar6) && (lVar4 = (long)iVar1, *(char *)((long)__ptr + lVar4) != '!')) {\u000a    line_00 = (char *)((long)__ptr + lVar4);\u000a    lVar5 = (long)(int)(sVar2 - lVar4);\u000a    lVar7 = (sVar2 - lVar4 << 0x20) + 0x100000000;\u000a    do {\u000a      if (lVar5 < 1) {\u000a        if (verbose == 0) goto LAB_00403b95;\u000a        goto LAB_00403b7e;\u000a      }\u000a      lVar8 = (long)*(char *)((long)__ptr + lVar5 + lVar4 + -1);\u000a      lVar5 = lVar5 + -1;\u000a      ppuVar3 = __ctype_b_loc();\u000a      lVar7 = lVar7 + -0x100000000;\u000a    } while ((lVar8 == 10) || (((*ppuVar3)[lVar8] & 0x2000) != 0));\u000a    line_00[lVar7 >> 0x20] = 0;\u000a    if (verbose != 0) {\u000aLAB_00403b7e:\u000a      printf("! %d:  %s\u005cn",(ulong)(lineno + 1),line_00);\u000a    }\u000aLAB_00403b95:\u000a    handle_line(line_00);\u000a  }\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDI\nCALL 0x00401170\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004011d0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00403bb5\nTEST EBP,EBP\nJLE 0x00403ac4\nCALL 0x004013d0\nMOV RCX,qword ptr [RAX]\nMOVSXD RDX,EBP\nXOR EAX,EAX\nNOP\nMOVSX RSI,byte ptr [R12 + RAX*0x1]\nCMP RSI,0xa\nJZ 0x00403aba\nMOVZX ESI,word ptr [RCX + RSI*0x2]\nAND ESI,0x2000\nTEST SI,SI\nJZ 0x00403ac6\nINC RAX\nCMP RAX,RDX\nJL 0x00403aa0\nJMP 0x00403ac6\nXOR EAX,EAX\nCMP EAX,EBP\nJZ 0x00403b9f\nCDQE\nCMP byte ptr [R12 + RAX*0x1],0x21\nJZ 0x00403b9f\nLEA RCX,[R12 + RAX*0x1]\nMOV qword ptr [RSP + 0x8],RCX\nSUB RBP,RAX\nMOV RCX,RBP\nSHL RCX,0x20\nMOV qword ptr [RSP + 0x10],RBP\nMOVSXD RBX,EBP\nMOV R13,0x100000000\nADD R13,RCX\nLEA RBP,[R12 + RAX*0x1 + -0x1]\nMOV R15,-0x100000000\nNOP word ptr CS:[RAX + RAX*0x1]\nTEST RBX,RBX\nJLE 0x00403b6b\nMOVSX R14,byte ptr [RBP + RBX*0x1]\nDEC RBX\nCALL 0x004013d0\nADD R13,R15\nCMP R14,0xa\nJZ 0x00403b20\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + R14*0x2]\nAND EAX,0x2000\nTEST AX,AX\nJNZ 0x00403b20\nSAR R13,0x20\nMOV RBP,qword ptr [RSP + 0x8]\nMOV byte ptr [RBP + R13*0x1],0x0\nINC RBX\nCMP dword ptr [0x006072c0],0x0\nJNZ 0x00403b7e\nJMP 0x00403b95\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RBP,qword ptr [RSP + 0x8]\nCMP dword ptr [0x006072c0],0x0\nJZ 0x00403b95\nMOV ESI,dword ptr [0x006072b4]\nINC ESI\nMOV EDI,0x404ed5\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401180\nMOV RDI,RBP\nMOV ESI,EBX\nCALL 0x00401d20\nMOV RDI,R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004010e0\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404eb4\nXOR EAX,EAX\nMOV ECX,EBP\nCALL 0x00401210\nMOV EDI,0xffffffff\nCALL 0x00403be0\n'
p46
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 fb\ne8 fa d6 ff ff\n48 89 c5\n48 89 df\ne8 4f d7 ff ff\n49 89 c4\n4d 85 e4\n0f 84 28 01 00 00\n85 ed\n7e 33\ne8 3a d9 ff ff\n48 8b 08\n48 63 d5\n31 c0\n66 90\n49 0f be 34 04\n48 83 fe 0a\n74 0f\n0f b7 34 71\n81 e6 00 20 00 00\n66 85 f6\n74 0c\n48 ff c0\n48 39 d0\n7c de\neb 02\n31 c0\n39 e8\n0f 84 d1 00 00 00\n48 98\n41 80 3c 04 21\n0f 84 c4 00 00 00\n49 8d 0c 04\n48 89 4c 24 08\n48 29 c5\n48 89 e9\n48 c1 e1 20\n48 89 6c 24 10\n48 63 dd\n49 bd 00 00 00 00 01 00 00 00\n49 01 cd\n49 8d 6c 04 ff\n49 bf 00 00 00 00 ff ff ff ff\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 85 db\n7e 46\n4c 0f be 74 1d 00\n48 ff cb\ne8 9d d8 ff ff\n4d 01 fd\n49 83 fe 0a\n74 e4\n48 8b 00\n42 0f b7 04 70\n25 00 20 00 00\n66 85 c0\n75 d2\n49 c1 fd 20\n48 8b 6c 24 08\n42 c6 44 2d 00 00\n48 ff c3\n83 3d 59 37 20 00 00\n75 15\neb 2a\n48 8b 5c 24 10\n48 8b 6c 24 08\n83 3d 44 37 20 00 00\n74 17\n8b 35 30 37 20 00\nff c6\nbf d5 4e 40 00\n31 c0\n48 89 ea\ne8 eb d5 ff ff\n48 89 ef\n89 de\ne8 81 e1 ff ff\n4c 89 e7\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 2b d5 ff ff\n48 8b 3d c4 36 20 00\n48 8b 15 15 37 20 00\nbe b4 4e 40 00\n31 c0\n89 e9\ne8 3f d6 ff ff\nbf ff ff ff ff\ne8 05 00 00 00\n'
p47
S'.text:0000000000403a60\n.text:0000000000403a61\n.text:0000000000403a63\n.text:0000000000403a65\n.text:0000000000403a67\n.text:0000000000403a69\n.text:0000000000403a6a\n.text:0000000000403a6e\n.text:0000000000403a71\n.text:0000000000403a76\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a81\n.text:0000000000403a84\n.text:0000000000403a87\n.text:0000000000403a8d\n.text:0000000000403a8f\n.text:0000000000403a91\n.text:0000000000403a96\n.text:0000000000403a99\n.text:0000000000403a9c\n.text:0000000000403a9e\n.text:0000000000403aa0\n.text:0000000000403aa5\n.text:0000000000403aa9\n.text:0000000000403aab\n.text:0000000000403aaf\n.text:0000000000403ab5\n.text:0000000000403ab8\n.text:0000000000403aba\n.text:0000000000403abd\n.text:0000000000403ac0\n.text:0000000000403ac2\n.text:0000000000403ac4\n.text:0000000000403ac6\n.text:0000000000403ac8\n.text:0000000000403ace\n.text:0000000000403ad0\n.text:0000000000403ad5\n.text:0000000000403adb\n.text:0000000000403adf\n.text:0000000000403ae4\n.text:0000000000403ae7\n.text:0000000000403aea\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403b00\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b12\n.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b25\n.text:0000000000403b2b\n.text:0000000000403b2e\n.text:0000000000403b33\n.text:0000000000403b36\n.text:0000000000403b3a\n.text:0000000000403b3c\n.text:0000000000403b3f\n.text:0000000000403b44\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b4e\n.text:0000000000403b52\n.text:0000000000403b57\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b67\n.text:0000000000403b69\n.text:0000000000403b6b\n.text:0000000000403b70\n.text:0000000000403b75\n.text:0000000000403b7c\n.text:0000000000403b7e\n.text:0000000000403b84\n.text:0000000000403b86\n.text:0000000000403b8b\n.text:0000000000403b8d\n.text:0000000000403b90\n.text:0000000000403b95\n.text:0000000000403b98\n.text:0000000000403b9a\n.text:0000000000403b9f\n.text:0000000000403ba2\n.text:0000000000403ba6\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403bab\n.text:0000000000403bad\n.text:0000000000403baf\n.text:0000000000403bb0\n.text:0000000000403bb5\n.text:0000000000403bbc\n.text:0000000000403bc3\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcc\n.text:0000000000403bd1\n.text:0000000000403bd6\n'
p48
tp49
sS'SetPointerMap'
p50
(S'\n__stdcall SetPointerMap(uchar * map)\n'
p51
V\u000aint SetPointerMap(uchar *map)\u000a\u000a{\u000a  ulong uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  int iVar5;\u000a  ulong in_RSI;\u000a  char *__format;\u000a  ulong uVar6;\u000a  uchar defmap [256];\u000a  uchar local_128 [264];\u000a  \u000a  uVar4 = in_RSI & 0xffffffff;\u000a  if ((int)uVar4 == 0) {\u000a    uVar2 = XGetPointerMapping(dpy,local_128,0x100);\u000a    uVar4 = (ulong)uVar2;\u000a    map = local_128;\u000a    if (0 < (int)uVar2) {\u000a      uVar6 = 0;\u000a      do {\u000a        uVar1 = uVar6 + 1;\u000a        local_128[uVar6] = (uchar)uVar1;\u000a        uVar6 = uVar1;\u000a        map = local_128;\u000a      } while (uVar4 != uVar1);\u000a    }\u000a  }\u000a  uVar6 = 2;\u000a  iVar5 = 6;\u000a  while( true ) {\u000a    iVar3 = XSetPointerMapping(dpy,map,uVar4);\u000a    if (iVar3 == 0) {\u000a      return 0;\u000a    }\u000a    if (iVar3 != 1) break;\u000a    mapping_busy_pointer(uVar6);\u000a    uVar6 = (ulong)(uint)((int)uVar6 * 2);\u000a    iVar5 = iVar5 + -1;\u000a    if (iVar5 < 2) {\u000a      __format = "%s:  unable to set pointer mapping\u005cn";\u000aLAB_00401bf5:\u000a      fprintf(stderr,__format,ProgramName);\u000a      return -1;\u000a    }\u000a  }\u000a  if (iVar3 != 2) {\u000a    fprintf(stderr,"%s:  bad return %d from XSetPointerMapping\u005cn",ProgramName);\u000a    return -1;\u000a  }\u000a  __format = "%s:  bad pointer mapping\u005cn";\u000a  goto LAB_00401bf5;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x108\nMOV EBX,ESI\nMOV R14,RDI\nTEST EBX,EBX\nJNZ 0x00401b7f\nMOV RDI,qword ptr [0x006072b8]\nMOV R14,RSP\nMOV EDX,0x100\nMOV RSI,R14\nCALL 0x00401240\nMOV EBX,EAX\nTEST EAX,EAX\nJLE 0x00401b7f\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RCX,[RAX + 0x1]\nMOV byte ptr [RSP + RAX*0x1],CL\nCMP RBX,RCX\nMOV RAX,RCX\nJNZ 0x00401b70\nMOV R15D,0x2\nMOV EBP,0x6\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,R14\nMOV EDX,EBX\nCALL 0x004012b0\nMOV ECX,EAX\nTEST ECX,ECX\nJZ 0x00401bcd\nCMP ECX,0x1\nJNZ 0x00401bdd\nMOV EDI,R15D\nCALL 0x00401c30\nADD R15D,R15D\nDEC EBP\nCMP EBP,0x1\nJG 0x00401b8a\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404522\nJMP 0x00401bf5\nXOR EAX,EAX\nADD RSP,0x108\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP ECX,0x2\nJNZ 0x00401c03\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4044dc\nXOR EAX,EAX\nCALL 0x00401210\nMOV EAX,0xffffffff\nJMP 0x00401bcf\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4044f6\nXOR EAX,EAX\nCALL 0x00401210\nMOV EAX,0xffffffff\nJMP 0x00401bcf\n'
p53
S'55\n41 57\n41 56\n53\n48 81 ec 08 01 00 00\n89 f3\n49 89 fe\n85 db\n75 39\n48 8b 3d 6b 57 20 00\n49 89 e6\nba 00 01 00 00\n4c 89 f6\ne8 e3 f6 ff ff\n89 c3\n85 c0\n7e 1c\n31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 48 01\n88 0c 04\n48 39 cb\n48 89 c8\n75 f1\n41 bf 02 00 00 00\nbd 06 00 00 00\n48 8b 3d 27 57 20 00\n4c 89 f6\n89 da\ne8 15 f7 ff ff\n89 c1\n85 c9\n74 2c\n83 f9 01\n75 37\n44 89 ff\ne8 82 00 00 00\n45 01 ff\nff cd\n83 fd 01\n7f d2\n48 8b 3d c1 56 20 00\n48 8b 15 12 57 20 00\nbe 22 45 40 00\neb 28\n31 c0\n48 81 c4 08 01 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n83 f9 02\n75 21\n48 8b 3d 97 56 20 00\n48 8b 15 e8 56 20 00\nbe dc 44 40 00\n31 c0\ne8 14 f6 ff ff\nb8 ff ff ff ff\neb cc\n48 8b 3d 76 56 20 00\n48 8b 15 c7 56 20 00\nbe f6 44 40 00\n31 c0\ne8 f3 f5 ff ff\nb8 ff ff ff ff\neb ab\n'
p54
S'.text:0000000000401b30\n.text:0000000000401b31\n.text:0000000000401b33\n.text:0000000000401b35\n.text:0000000000401b36\n.text:0000000000401b3d\n.text:0000000000401b3f\n.text:0000000000401b42\n.text:0000000000401b44\n.text:0000000000401b46\n.text:0000000000401b4d\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b58\n.text:0000000000401b5d\n.text:0000000000401b5f\n.text:0000000000401b61\n.text:0000000000401b63\n.text:0000000000401b65\n.text:0000000000401b70\n.text:0000000000401b74\n.text:0000000000401b77\n.text:0000000000401b7a\n.text:0000000000401b7d\n.text:0000000000401b7f\n.text:0000000000401b85\n.text:0000000000401b8a\n.text:0000000000401b91\n.text:0000000000401b94\n.text:0000000000401b96\n.text:0000000000401b9b\n.text:0000000000401b9d\n.text:0000000000401b9f\n.text:0000000000401ba1\n.text:0000000000401ba4\n.text:0000000000401ba6\n.text:0000000000401ba9\n.text:0000000000401bae\n.text:0000000000401bb1\n.text:0000000000401bb3\n.text:0000000000401bb6\n.text:0000000000401bb8\n.text:0000000000401bbf\n.text:0000000000401bc6\n.text:0000000000401bcb\n.text:0000000000401bcd\n.text:0000000000401bcf\n.text:0000000000401bd6\n.text:0000000000401bd7\n.text:0000000000401bd9\n.text:0000000000401bdb\n.text:0000000000401bdc\n.text:0000000000401bdd\n.text:0000000000401be0\n.text:0000000000401be2\n.text:0000000000401be9\n.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bf7\n.text:0000000000401bfc\n.text:0000000000401c01\n.text:0000000000401c03\n.text:0000000000401c0a\n.text:0000000000401c11\n.text:0000000000401c16\n.text:0000000000401c18\n.text:0000000000401c1d\n.text:0000000000401c22\n'
p55
tp56
sS'do_keysym'
p57
(S'\n__stdcall do_keysym(char * line)\n'
p58
V\u000avoid do_keysym(char *line)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  ulong in_RSI;\u000a  size_t __size;\u000a  char *__format;\u000a  uint local_3c;\u000a  KeySym local_38;\u000a  KeySym local_30;\u000a  \u000a  if (((line == (char *)0x0) || ((int)(KeyCode *)(in_RSI & 0xffffffff) < 3)) || (*line == 0)) {\u000a    badheader();\u000a    __format = "keysym input line";\u000a    __size = 0x11;\u000a  }\u000a  else {\u000a    local_3c = skip_chars(line);\u000a    if (0 < (int)local_3c) {\u000a      iVar1 = parse_keysym(line,(char **)(ulong)local_3c,&local_38);\u000a      if (iVar1 == 0) {\u000a        badheader();\u000a        __format = "keysym target key symbol \u005c'%s\u005c'";\u000a      }\u000a      else {\u000a        KeysymToKeycodes(dpy,local_30,(int *)&local_3c);\u000a        if (local_3c != 0) {\u000a          if (verbose != 0) {\u000a            printf("! Keysym %s (0x%lx) corresponds to keycode(s)",local_38,local_30);\u000a            if (0 < (int)local_3c) {\u000a              lVar2 = (long)(int)local_3c;\u000a              lVar3 = 0;\u000a              do {\u000a                printf(" 0x%x");\u000a                lVar3 = lVar3 + 1;\u000a              } while (lVar3 < lVar2);\u000a            }\u000a            putchar(10);\u000a          }\u000a          finish_keycodes(line,(KeyCode *)(in_RSI & 0xffffffff));\u000a          return;\u000a        }\u000a        badheader();\u000a        __format = "keysym target keysym \u005c'%s\u005c', no corresponding keycodes";\u000a      }\u000a      fprintf(stderr,__format,local_38);\u000a      goto LAB_004028d9;\u000a    }\u000a    badheader();\u000a    __format = "target keysym name";\u000a    __size = 0x12;\u000a  }\u000a  fwrite(__format,__size,1,stderr);\u000aLAB_004028d9:\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14D,ESI\nMOV R15,RDI\nTEST R15,R15\nJZ 0x0040286a\nCMP R14D,0x3\nJL 0x0040286a\nCMP byte ptr [R15],0x0\nJZ 0x0040286a\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00401e20\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJLE 0x00402882\nLEA RDX,[RSP + 0x10]\nLEA RCX,[RSP + 0x18]\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403610\nTEST EAX,EAX\nJZ 0x004028a4\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,qword ptr [RSP + 0x18]\nLEA RDX,[RSP + 0xc]\nCALL 0x004037a0\nMOV R12,RAX\nCMP dword ptr [RSP + 0xc],0x0\nJZ 0x004028bc\nCMP dword ptr [0x006072c0],0x0\nJZ 0x00402853\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV EDI,0x4049ee\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [RSP + 0xc],0x0\nJLE 0x00402849\nMOVSXD RBX,dword ptr [RSP + 0xc]\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX ESI,byte ptr [R12 + RBP*0x1]\nMOV EDI,0x404a1c\nXOR EAX,EAX\nCALL 0x00401180\nINC RBP\nCMP RBP,RBX\nJL 0x00402830\nMOV EDI,0xa\nCALL 0x004010f0\nMOV ECX,dword ptr [RSP + 0xc]\nMOV RDI,R15\nMOV ESI,R14D\nMOV RDX,R12\nCALL 0x00403260\nJMP 0x004028ea\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404976\nMOV ESI,0x11\nJMP 0x00402898\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404988\nMOV ESI,0x12\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x004028d9\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV ESI,0x40499b\nJMP 0x004028d2\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV ESI,0x4049b9\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p60
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n41 89 f6\n49 89 ff\n4d 85 ff\n0f 84 df 00 00 00\n41 83 fe 03\n0f 8c d5 00 00 00\n41 80 3f 00\n0f 84 cb 00 00 00\n4c 89 ff\n44 89 f6\ne8 76 f6 ff ff\n89 44 24 0c\n85 c0\n0f 8e cc 00 00 00\n48 8d 54 24 10\n48 8d 4c 24 18\n4c 89 ff\n89 c6\ne8 46 0e 00 00\n85 c0\n0f 84 d2 00 00 00\n48 8b 3d df 4a 20 00\n48 8b 74 24 18\n48 8d 54 24 0c\ne8 b8 0f 00 00\n49 89 c4\n83 7c 24 0c 00\n0f 84 c6 00 00 00\n83 3d c3 4a 20 00 00\n74 54\n48 8b 74 24 10\n48 8b 54 24 18\nbf ee 49 40 00\n31 c0\ne8 6b e9 ff ff\n83 7c 24 0c 00\n7e 2d\n48 63 5c 24 0c\n31 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 34 2c\nbf 1c 4a 40 00\n31 c0\ne8 3f e9 ff ff\n48 ff c5\n48 39 dd\n7c e7\nbf 0a 00 00 00\ne8 9d e8 ff ff\n8b 4c 24 0c\n4c 89 ff\n44 89 f6\n4c 89 e2\ne8 fb 09 00 00\ne9 80 00 00 00\ne8 01 f6 ff ff\n48 8b 0d 0a 4a 20 00\nbf 76 49 40 00\nbe 11 00 00 00\neb 16\ne8 e9 f5 ff ff\n48 8b 0d f2 49 20 00\nbf 88 49 40 00\nbe 12 00 00 00\nba 01 00 00 00\ne8 ce ea ff ff\neb 35\ne8 c7 f5 ff ff\n48 8b 3d d0 49 20 00\n48 8b 54 24 10\nbe 9b 49 40 00\neb 16\ne8 af f5 ff ff\n48 8b 3d b8 49 20 00\n48 8b 54 24 10\nbe b9 49 40 00\n31 c0\ne8 37 e9 ff ff\n48 8b 35 a0 49 20 00\nbf 0a 00 00 00\ne8 b6 e8 ff ff\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p61
S'.text:0000000000402770\n.text:0000000000402771\n.text:0000000000402773\n.text:0000000000402775\n.text:0000000000402777\n.text:0000000000402778\n.text:000000000040277c\n.text:000000000040277f\n.text:0000000000402782\n.text:0000000000402785\n.text:000000000040278b\n.text:000000000040278f\n.text:0000000000402795\n.text:0000000000402799\n.text:000000000040279f\n.text:00000000004027a2\n.text:00000000004027a5\n.text:00000000004027aa\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b6\n.text:00000000004027bb\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c5\n.text:00000000004027ca\n.text:00000000004027cc\n.text:00000000004027d2\n.text:00000000004027d9\n.text:00000000004027de\n.text:00000000004027e3\n.text:00000000004027e8\n.text:00000000004027eb\n.text:00000000004027f0\n.text:00000000004027f6\n.text:00000000004027fd\n.text:00000000004027ff\n.text:0000000000402804\n.text:0000000000402809\n.text:000000000040280e\n.text:0000000000402810\n.text:0000000000402815\n.text:000000000040281a\n.text:000000000040281c\n.text:0000000000402821\n.text:0000000000402823\n.text:0000000000402830\n.text:0000000000402835\n.text:000000000040283a\n.text:000000000040283c\n.text:0000000000402841\n.text:0000000000402844\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284e\n.text:0000000000402853\n.text:0000000000402857\n.text:000000000040285a\n.text:000000000040285d\n.text:0000000000402860\n.text:0000000000402865\n.text:000000000040286a\n.text:000000000040286f\n.text:0000000000402876\n.text:000000000040287b\n.text:0000000000402880\n.text:0000000000402882\n.text:0000000000402887\n.text:000000000040288e\n.text:0000000000402893\n.text:0000000000402898\n.text:000000000040289d\n.text:00000000004028a2\n.text:00000000004028a4\n.text:00000000004028a9\n.text:00000000004028b0\n.text:00000000004028b5\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028c1\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d4\n.text:00000000004028d9\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028ea\n.text:00000000004028ee\n.text:00000000004028ef\n.text:00000000004028f1\n.text:00000000004028f3\n.text:00000000004028f5\n.text:00000000004028f6\n'
p62
tp63
sS'strncmp'
p64
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00607030)();\u000a  return iVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00607030]\n'
p67
S'ff 25 1a 5f 20 00\n'
p68
S'.plt:0000000000401110\n'
p69
tp70
sS'skip_word'
p71
(S'\n__stdcall skip_word(char * s)\n'
p72
V\u000aint skip_word(char *s)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  iVar1 = skip_chars(s);\u000a  iVar2 = skip_space(s + (long)iVar1);\u000a  return iVar2 + iVar1;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00401e20\nMOVSXD R14,EAX\nADD RBX,R14\nSUB EBP,R14D\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401eb0\nADD EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n89 f5\n48 89 fb\ne8 f2 e4 ff ff\n4c 63 f0\n4c 01 f3\n44 29 f5\n48 89 df\n89 ee\ne8 6f e5 ff ff\n44 01 f0\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000403920\n.text:0000000000403921\n.text:0000000000403923\n.text:0000000000403924\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392e\n.text:0000000000403931\n.text:0000000000403934\n.text:0000000000403937\n.text:000000000040393a\n.text:000000000040393c\n.text:0000000000403941\n.text:0000000000403944\n.text:0000000000403945\n.text:0000000000403947\n.text:0000000000403948\n'
p76
tp77
sS'FatalError'
p78
(S'\n__stdcall FatalError(char * message)\n'
p79
V\u000avoid FatalError(char *message)\u000a\u000a{\u000a  fprintf(stderr,"%s: %s\u005cn",ProgramName,message);\u000a                    /* WARNING: Subroutine does not return */\u000a  Exit(0xffffffff);\u000a}\u000a\u000a
p80
S'PUSH RAX\nMOV RCX,RDI\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x405db7\nXOR EAX,EAX\nCALL 0x00401210\nMOV EDI,0xffffffff\nCALL 0x00403be0\n'
p81
S'50\n48 89 f9\n48 8b 3d 25 31 20 00\n48 8b 15 76 31 20 00\nbe b7 5d 40 00\n31 c0\ne8 a2 d0 ff ff\nbf ff ff ff ff\ne8 68 fa ff ff\n'
p82
S'.text:0000000000404150\n.text:0000000000404151\n.text:0000000000404154\n.text:000000000040415b\n.text:0000000000404162\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416e\n.text:0000000000404173\n'
p83
tp84
sS'do_clear'
p85
(S'\n__stdcall do_clear(char * line)\n'
p86
V\u000avoid do_clear(char *line)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  op *p;\u000a  char *__format;\u000a  char *pcVar4;\u000a  int in_ESI;\u000a  FILE *__stream;\u000a  \u000a  if (((line == (char *)0x0) || (in_ESI < 4)) || (*line == 0)) {\u000a    badheader();\u000a    fwrite("clear modifier input line",0x19,1,stderr);\u000a  }\u000a  else {\u000a    iVar1 = skip_chars(line);\u000a    iVar2 = parse_modifier(line);\u000a    if (iVar2 < 0) {\u000a      badheader();\u000a      __stream = stderr;\u000a      pcVar4 = copy_to_scratch(line);\u000a      __format = "clear modifier name \u005c'%s\u005c'";\u000a    }\u000a    else {\u000a      iVar3 = skip_space(line + (long)iVar1);\u000a      if (iVar3 + iVar1 != in_ESI) {\u000a        badheader();\u000a        __stream = stderr;\u000a        __format = copy_to_scratch(line + (long)(iVar3 + iVar1));\u000a        fprintf(__stream,"extra argument \u005c'%s\u005c' to clear modifier",__format,__format);\u000a        _IO_putc(10,(_IO_FILE *)stderr);\u000a      }\u000a      p = (op *)malloc(0x118);\u000a      if (p != (op *)0x0) {\u000a        *(undefined4 *)*p = 3;\u000a        *(int *)(*p + 0x10) = iVar2;\u000a        add_to_work_queue(p);\u000a        return;\u000a      }\u000a      badheader();\u000a      __format = "attempt to allocate %ld byte clearmodifier opcode";\u000a      pcVar4 = (char *)0x18;\u000a      __stream = stderr;\u000a    }\u000a    fprintf(__stream,__format,pcVar4);\u000a  }\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402f64\nCMP EBP,0x4\nJL 0x00402f64\nCMP byte ptr [RBX],0x0\nJZ 0x00402f64\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401e20\nMOV R15D,EAX\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00403860\nMOV R14D,EAX\nTEST R14D,R14D\nJS 0x00402f86\nMOVSXD RDI,R15D\nADD RDI,RBX\nMOV ESI,EBP\nSUB ESI,R15D\nCALL 0x00401eb0\nMOV R12D,EAX\nADD R12D,R15D\nCMP R12D,EBP\nJNZ 0x00402fe5\nMOV EDI,0x118\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x00402faf\nMOV dword ptr [RAX],0x3\nMOV dword ptr [RAX + 0x10],R14D\nMOV RDI,RAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004035c0\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404c0f\nMOV ESI,0x19\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x00402fcc\nCALL 0x00401e70\nMOV RBP,qword ptr [0x00607280]\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00403680\nMOV RCX,RAX\nMOV ESI,0x404c29\nXOR EAX,EAX\nMOV RDI,RBP\nMOV RDX,RCX\nJMP 0x00402fc7\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404c68\nMOV EDX,0x18\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004011a0\nCALL 0x00401e70\nMOV R15,qword ptr [0x00607280]\nMOVSXD RAX,R12D\nADD RBX,RAX\nSUB EBP,R12D\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00403680\nMOV RCX,RAX\nMOV ESI,0x404c42\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,RCX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nJMP 0x00402f3b\n'
p88
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\n48 85 db\n74 72\n83 fd 04\n7c 6d\n80 3b 00\n74 68\n48 89 df\n89 ee\ne8 1a ef ff ff\n41 89 c7\n48 89 df\n44 89 fe\ne8 4c 09 00 00\n41 89 c6\n45 85 f6\n78 6a\n49 63 ff\n48 01 df\n89 ee\n44 29 fe\ne8 84 ef ff ff\n41 89 c4\n45 01 fc\n41 39 ec\n0f 85 aa 00 00 00\nbf 18 01 00 00\ne8 1b e3 ff ff\n48 85 c0\n74 65\nc7 00 03 00 00 00\n44 89 70 10\n48 89 c7\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 5c 06 00 00\ne8 07 ef ff ff\n48 8b 0d 10 43 20 00\nbf 0f 4c 40 00\nbe 19 00 00 00\nba 01 00 00 00\ne8 ec e3 ff ff\neb 46\ne8 e5 ee ff ff\n48 8b 2d ee 42 20 00\n48 89 df\n44 89 fe\ne8 e3 06 00 00\n48 89 c1\nbe 29 4c 40 00\n31 c0\n48 89 ef\n48 89 ca\neb 18\ne8 bc ee ff ff\n48 8b 3d c5 42 20 00\nbe 68 4c 40 00\nba 18 00 00 00\n31 c0\ne8 44 e2 ff ff\n48 8b 35 ad 42 20 00\nbf 0a 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 bb e1 ff ff\ne8 86 ee ff ff\n4c 8b 3d 8f 42 20 00\n49 63 c4\n48 01 c3\n44 29 e5\n48 89 df\n89 ee\ne8 7c 06 00 00\n48 89 c1\nbe 42 4c 40 00\n31 c0\n4c 89 ff\n48 89 ca\ne8 f7 e1 ff ff\n48 8b 35 60 42 20 00\nbf 0a 00 00 00\ne8 76 e1 ff ff\ne9 0c ff ff ff\n'
p89
S'.text:0000000000402ee0\n.text:0000000000402ee1\n.text:0000000000402ee3\n.text:0000000000402ee5\n.text:0000000000402ee7\n.text:0000000000402ee8\n.text:0000000000402eea\n.text:0000000000402eed\n.text:0000000000402ef0\n.text:0000000000402ef2\n.text:0000000000402ef5\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f01\n.text:0000000000402f06\n.text:0000000000402f09\n.text:0000000000402f0c\n.text:0000000000402f0f\n.text:0000000000402f14\n.text:0000000000402f17\n.text:0000000000402f1a\n.text:0000000000402f1c\n.text:0000000000402f1f\n.text:0000000000402f22\n.text:0000000000402f24\n.text:0000000000402f27\n.text:0000000000402f2c\n.text:0000000000402f2f\n.text:0000000000402f32\n.text:0000000000402f35\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f45\n.text:0000000000402f48\n.text:0000000000402f4a\n.text:0000000000402f50\n.text:0000000000402f54\n.text:0000000000402f57\n.text:0000000000402f58\n.text:0000000000402f5a\n.text:0000000000402f5c\n.text:0000000000402f5e\n.text:0000000000402f5f\n.text:0000000000402f64\n.text:0000000000402f69\n.text:0000000000402f70\n.text:0000000000402f75\n.text:0000000000402f7a\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f8b\n.text:0000000000402f92\n.text:0000000000402f95\n.text:0000000000402f98\n.text:0000000000402f9d\n.text:0000000000402fa0\n.text:0000000000402fa5\n.text:0000000000402fa7\n.text:0000000000402faa\n.text:0000000000402fad\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fbb\n.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fc7\n.text:0000000000402fcc\n.text:0000000000402fd3\n.text:0000000000402fd8\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fdd\n.text:0000000000402fdf\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fea\n.text:0000000000402ff1\n.text:0000000000402ff4\n.text:0000000000402ff7\n.text:0000000000402ffa\n.text:0000000000402ffd\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403007\n.text:000000000040300c\n.text:000000000040300e\n.text:0000000000403011\n.text:0000000000403014\n.text:0000000000403019\n.text:0000000000403020\n.text:0000000000403025\n.text:000000000040302a\n'
p90
tp91
sS'skip_space'
p92
(S'\n__stdcall skip_space(char * s)\n'
p93
V\u000aint skip_space(char *s)\u000a\u000a{\u000a  char cVar1;\u000a  ushort **ppuVar2;\u000a  int in_ESI;\u000a  int iVar3;\u000a  \u000a  iVar3 = 0;\u000a  if (((s != (char *)0x0) && (iVar3 = 0, 0 < in_ESI)) && (iVar3 = 0, *s != 0)) {\u000a    _iVar3 = 0;\u000a    do {\u000a      cVar1 = s[_iVar3];\u000a      if ((long)cVar1 == 0) {\u000a        return (int)_iVar3;\u000a      }\u000a      ppuVar2 = __ctype_b_loc();\u000a      if ((*(byte *)((long)*ppuVar2 + (long)cVar1 * 2 + 1) & 0x20) == 0) {\u000a        return (int)_iVar3;\u000a      }\u000a      _iVar3 = _iVar3 + 1;\u000a      iVar3 = (int)_iVar3;\u000a    } while (_iVar3 < (long)in_ESI);\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p94
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nXOR R12D,R12D\nTEST R14,R14\nJZ 0x00401f01\nTEST ESI,ESI\nJLE 0x00401f01\nCMP byte ptr [R14],0x0\nJZ 0x00401f01\nMOVSXD R15,ESI\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX RBX,byte ptr [R14 + R12*0x1]\nTEST RBX,RBX\nJZ 0x00401f01\nCALL 0x004013d0\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x20\nJZ 0x00401f01\nINC R12\nCMP R12,R15\nJL 0x00401ee0\nMOV EAX,R12D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p95
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n45 31 e4\n4d 85 f6\n74 3e\n85 f6\n7e 3a\n41 80 3e 00\n74 34\n4c 63 fe\n45 31 e4\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 0f be 1c 26\n48 85 db\n74 17\ne8 e1 f4 ff ff\n48 8b 00\nf6 44 58 01 20\n74 08\n49 ff c4\n4d 39 fc\n7c df\n44 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p96
S'.text:0000000000401eb0\n.text:0000000000401eb2\n.text:0000000000401eb4\n.text:0000000000401eb6\n.text:0000000000401eb7\n.text:0000000000401eb8\n.text:0000000000401ebb\n.text:0000000000401ebe\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec5\n.text:0000000000401ec7\n.text:0000000000401ecb\n.text:0000000000401ecd\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ee0\n.text:0000000000401ee5\n.text:0000000000401ee8\n.text:0000000000401eea\n.text:0000000000401eef\n.text:0000000000401ef2\n.text:0000000000401ef7\n.text:0000000000401ef9\n.text:0000000000401efc\n.text:0000000000401eff\n.text:0000000000401f01\n.text:0000000000401f04\n.text:0000000000401f08\n.text:0000000000401f09\n.text:0000000000401f0b\n.text:0000000000401f0d\n.text:0000000000401f0f\n'
p97
tp98
sS'RemoveModifier'
p99
(S'\n__stdcall RemoveModifier(XModifierKeymap * * mapp)\n'
p100
V\u000aint RemoveModifier(XModifierKeymap **mapp)\u000a\u000a{\u000a  XModifierKeymap *pXVar1;\u000a  byte in_SIL;\u000a  \u000a  if (in_SIL != 0) {\u000a    pXVar1 = (XModifierKeymap *)XDeleteModifiermapEntry(*mapp,(ulong)in_SIL);\u000a    *mapp = pXVar1;\u000a    return 0;\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p101
S'PUSH RBX\nMOV RBX,RDI\nTEST SIL,SIL\nJZ 0x0040169c\nMOV RDI,qword ptr [RBX]\nMOVZX ESI,SIL\nCALL 0x00401320\nMOV qword ptr [RBX],RAX\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0xffffffff\nPOP RBX\nRET\n'
p102
S'53\n48 89 fb\n40 84 f6\n74 13\n48 8b 3b\n40 0f b6 f6\ne8 8b fc ff ff\n48 89 03\n31 c0\n5b\nc3\nb8 ff ff ff ff\n5b\nc3\n'
p103
S'.text:0000000000401680\n.text:0000000000401681\n.text:0000000000401684\n.text:0000000000401687\n.text:0000000000401689\n.text:000000000040168c\n.text:0000000000401690\n.text:0000000000401695\n.text:0000000000401698\n.text:000000000040169a\n.text:000000000040169b\n.text:000000000040169c\n.text:00000000004016a1\n.text:00000000004016a2\n'
p104
tp105
sS'putchar'
p106
(S'\n__stdcall putchar(int __c)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_00607020)();\u000a  return iVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x00607020]\n'
p109
S'ff 25 2a 5f 20 00\n'
p110
S'.plt:00000000004010f0\n'
p111
tp112
sS'XCheckTypedEvent'
p113
(S'\n__stdcall XCheckTypedEvent()\n'
p114
V\u000avoid XCheckTypedEvent(void)\u000a\u000a{\u000a  (*(code *)PTR_XCheckTypedEvent_00607150)();\u000a  return;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00607150]\n'
p116
S'ff 25 fa 5d 20 00\n'
p117
S'.plt:0000000000401350\n'
p118
tp119
sS'_IO_putc'
p120
(S'\n__stdcall _IO_putc(int __c, _IO_FILE * __fp)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint _IO_putc(int __c,_IO_FILE *__fp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR__IO_putc_00607078)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x00607078]\n'
p123
S'ff 25 d2 5e 20 00\n'
p124
S'.plt:00000000004011a0\n'
p125
tp126
sS'XFree'
p127
(S'\n__stdcall XFree()\n'
p128
V\u000avoid XFree(void)\u000a\u000a{\u000a  (*(code *)PTR_XFree_00607070)();\u000a  return;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x00607070]\n'
p130
S'ff 25 da 5e 20 00\n'
p131
S'.plt:0000000000401190\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x004014ca) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x606e08\nCMP qword ptr [RDI],0x0\nJNZ 0x004014c0\nJMP 0x00401450\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004014bb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401450\n'
p137
S'bf 08 6e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:00000000004014b0\n.text:00000000004014b5\n.text:00000000004014b9\n.text:00000000004014bb\n.text:00000000004014c0\n.text:00000000004014c5\n.text:00000000004014c8\n.text:00000000004014ca\n.text:00000000004014cb\n.text:00000000004014ce\n.text:00000000004014d0\n.text:00000000004014d1\n'
p139
tp140
sS'XDisplayKeycodes'
p141
(S'\n__stdcall XDisplayKeycodes()\n'
p142
V\u000avoid XDisplayKeycodes(void)\u000a\u000a{\u000a  (*(code *)PTR_XDisplayKeycodes_00607130)();\u000a  return;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x00607130]\n'
p144
S'ff 25 1a 5e 20 00\n'
p145
S'.plt:0000000000401310\n'
p146
tp147
sS'Exit'
p148
(S'\n__stdcall Exit()\n'
p149
V\u000avoid Exit(int iParm1)\u000a\u000a{\u000a  if (dpy != (Display *)0x0) {\u000a    XCloseDisplay();\u000a    dpy = (Display *)0x0;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p150
S'PUSH RBX\nMOV EBX,EDI\nMOV RDI,qword ptr [0x006072b8]\nTEST RDI,RDI\nJZ 0x00403bff\nCALL 0x00401390\nMOV qword ptr [0x006072b8],0x0\nMOV EDI,EBX\nCALL 0x00401360\n'
p151
S'53\n89 fb\n48 8b 3d ce 36 20 00\n48 85 ff\n74 10\ne8 9c d7 ff ff\n48 c7 05 b9 36 20 00 00 00 00 00\n89 df\ne8 5a d7 ff ff\n'
p152
S'.text:0000000000403be0\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403bea\n.text:0000000000403bed\n.text:0000000000403bef\n.text:0000000000403bf4\n.text:0000000000403bff\n.text:0000000000403c01\n'
p153
tp154
sS'XStringToKeysym'
p155
(S'\n__stdcall XStringToKeysym()\n'
p156
V\u000avoid XStringToKeysym(void)\u000a\u000a{\u000a  (*(code *)PTR_XStringToKeysym_00607168)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00607168]\n'
p158
S'ff 25 e2 5d 20 00\n'
p159
S'.plt:0000000000401380\n'
p160
tp161
sS'FUN_004010d0'
p162
(S'\n__stdcall FUN_004010d0()\n'
p163
V\u000avoid FUN_004010d0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00607010)();\u000a  return;\u000a}\u000a\u000a
p164
S'PUSH qword ptr [0x00607008]\nJMP qword ptr [0x00607010]\n'
p165
S'ff 35 32 5f 20 00\nff 25 34 5f 20 00\n'
p166
S'.plt:00000000004010d0\n.plt:00000000004010d6\n'
p167
tp168
sS'parse_number'
p169
(S'\n__stdcall parse_number(char * str, ulong * val)\n'
p170
V\u000aint parse_number(char *str,ulong *val)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  ushort **ppuVar3;\u000a  char *pcVar4;\u000a  char *__format;\u000a  \u000a  if (*str == '0') {\u000a    ppuVar3 = __ctype_b_loc();\u000a    str = str + 1;\u000a    do {\u000a      pcVar4 = str;\u000a      cVar1 = *pcVar4;\u000a      str = pcVar4 + 1;\u000a    } while ((*(byte *)((long)*ppuVar3 + (long)cVar1 * 2 + 1) & 0x20) != 0);\u000a    if (cVar1 == 0) {\u000a      *val = 0;\u000a      return 1;\u000a    }\u000a    __format = "%lx";\u000a    if ((cVar1 != 'X') && (cVar1 != 'x')) {\u000a      __format = "%lo";\u000a      str = pcVar4;\u000a    }\u000a  }\u000a  else {\u000a    __format = "%ld";\u000a  }\u000a  iVar2 = sscanf(str,__format,val);\u000a  return (int)(uint)(iVar2 == 1);\u000a}\u000a\u000a
p171
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCMP byte ptr [RBX],0x30\nJNZ 0x00403769\nCALL 0x004013d0\nMOV RCX,qword ptr [RAX]\nINC RBX\nNOP word ptr [RAX + RAX*0x1]\nMOVSX RAX,byte ptr [RBX]\nINC RBX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00403740\nTEST AL,AL\nJZ 0x0040378d\nMOV ESI,0x404dc9\nCMP AL,0x58\nJZ 0x0040376e\nCMP AL,0x78\nJZ 0x0040376e\nDEC RBX\nMOV ESI,0x404972\nJMP 0x0040376e\nMOV ESI,0x40496e\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401290\nMOV ECX,EAX\nXOR EAX,EAX\nCMP ECX,0x1\nSETZ AL\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV qword ptr [R14],0x0\nMOV EAX,0x1\nJMP 0x00403785\n'
p172
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n80 3b 30\n75 3a\ne8 9c dc ff ff\n48 8b 08\n48 ff c3\n66 0f 1f 44 00 00\n48 0f be 03\n48 ff c3\nf6 44 41 01 20\n75 f2\n84 c0\n74 3b\nbe c9 4d 40 00\n3c 58\n74 13\n3c 78\n74 0f\n48 ff cb\nbe 72 49 40 00\neb 05\nbe 6e 49 40 00\n31 c0\n48 89 df\n4c 89 f2\ne8 15 db ff ff\n89 c1\n31 c0\n83 f9 01\n0f 94 c0\n48 83 c4 08\n5b\n41 5e\nc3\n49 c7 06 00 00 00 00\nb8 01 00 00 00\neb ea\n'
p173
S'.text:0000000000403720\n.text:0000000000403722\n.text:0000000000403723\n.text:0000000000403724\n.text:0000000000403727\n.text:000000000040372a\n.text:000000000040372d\n.text:000000000040372f\n.text:0000000000403734\n.text:0000000000403737\n.text:000000000040373a\n.text:0000000000403740\n.text:0000000000403744\n.text:0000000000403747\n.text:000000000040374c\n.text:000000000040374e\n.text:0000000000403750\n.text:0000000000403752\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375b\n.text:000000000040375d\n.text:000000000040375f\n.text:0000000000403762\n.text:0000000000403767\n.text:0000000000403769\n.text:000000000040376e\n.text:0000000000403770\n.text:0000000000403773\n.text:0000000000403776\n.text:000000000040377b\n.text:000000000040377d\n.text:000000000040377f\n.text:0000000000403782\n.text:0000000000403785\n.text:0000000000403789\n.text:000000000040378a\n.text:000000000040378c\n.text:000000000040378d\n.text:0000000000403794\n.text:0000000000403799\n'
p174
tp175
sS'exit'
p176
(S'\n__stdcall exit(int __status)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00607158)();\u000a  return;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x00607158]\n'
p179
S'ff 25 f2 5d 20 00\n'
p180
S'.plt:0000000000401360\n'
p181
tp182
sS'print_work_queue'
p183
(S'\n__stdcall print_work_queue()\n'
p184
V\u000avoid print_work_queue(void)\u000a\u000a{\u000a  op *op;\u000a  \u000a  puts("! dump of work queue");\u000a  op = work_queue.head;\u000a  while (op != (op *)0x0) {\u000a    print_opcode(op);\u000a    op = *(op **)(*op + 8);\u000a  }\u000a  return;\u000a}\u000a\u000a
p185
S'PUSH RBX\nMOV EDI,0x404e30\nCALL 0x00401130\nMOV RBX,qword ptr [0x00607290]\nTEST RBX,RBX\nJZ 0x00401f41\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00401f50\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00401f30\nPOP RBX\nRET\n'
p186
S'53\nbf 30 4e 40 00\ne8 15 f2 ff ff\n48 8b 1d 6e 53 20 00\n48 85 db\n74 1a\n66 0f 1f 84 00 00 00 00 00\n48 89 df\ne8 18 00 00 00\n48 8b 5b 08\n48 85 db\n75 ef\n5b\nc3\n'
p187
S'.text:0000000000401f10\n.text:0000000000401f11\n.text:0000000000401f16\n.text:0000000000401f1b\n.text:0000000000401f22\n.text:0000000000401f25\n.text:0000000000401f27\n.text:0000000000401f30\n.text:0000000000401f33\n.text:0000000000401f38\n.text:0000000000401f3c\n.text:0000000000401f3f\n.text:0000000000401f41\n.text:0000000000401f42\n'
p188
tp189
sS'XQueryPointer'
p190
(S'\n__stdcall XQueryPointer()\n'
p191
V\u000avoid XQueryPointer(void)\u000a\u000a{\u000a  (*(code *)PTR_XQueryPointer_006070c0)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x006070c0]\n'
p193
S'ff 25 8a 5e 20 00\n'
p194
S'.plt:0000000000401230\n'
p195
tp196
sS'sscanf'
p197
(S'\n__stdcall sscanf(char * __s, char * __format)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sscanf(char *__s,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sscanf_006070f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x006070f0]\n'
p200
S'ff 25 5a 5e 20 00\n'
p201
S'.plt:0000000000401290\n'
p202
tp203
sS'XKeycodeToKeysym'
p204
(S'\n__stdcall XKeycodeToKeysym()\n'
p205
V\u000avoid XKeycodeToKeysym(void)\u000a\u000a{\u000a  (*(code *)PTR_XKeycodeToKeysym_00607128)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x00607128]\n'
p207
S'ff 25 22 5e 20 00\n'
p208
S'.plt:0000000000401300\n'
p209
tp210
sS'XGetModifierMapping'
p211
(S'\n__stdcall XGetModifierMapping()\n'
p212
V\u000avoid XGetModifierMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetModifierMapping_006070b8)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x006070b8]\n'
p214
S'ff 25 92 5e 20 00\n'
p215
S'.plt:0000000000401220\n'
p216
tp217
sS'XNextEvent'
p218
(S'\n__stdcall XNextEvent()\n'
p219
V\u000avoid XNextEvent(void)\u000a\u000a{\u000a  (*(code *)PTR_XNextEvent_006070d0)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006070d0]\n'
p221
S'ff 25 7a 5e 20 00\n'
p222
S'.plt:0000000000401250\n'
p223
tp224
sS'XGetKeyboardMapping'
p225
(S'\n__stdcall XGetKeyboardMapping()\n'
p226
V\u000avoid XGetKeyboardMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetKeyboardMapping_00607140)();\u000a  return;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00607140]\n'
p228
S'ff 25 0a 5e 20 00\n'
p229
S'.plt:0000000000401330\n'
p230
tp231
sS'mapping_busy_key'
p232
(S'\n__stdcall mapping_busy_key()\n'
p233
V\u000avoid mapping_busy_key(uint uParm1)\u000a\u000a{\u000a  uint masktable [8];\u000a  ulong uVar1;\u000a  char *pcVar2;\u000a  uint uVar3;\u000a  ulong uVar4;\u000a  uchar keymap [32];\u000a  byte local_48 [40];\u000a  \u000a  XQueryKeymap(dpy,local_48);\u000a  fprintf(stderr,"%s:  please release the following keys within %d seconds:\u005cn",ProgramName);\u000a  uVar4 = 0;\u000a  do {\u000a    uVar3 = (uint)uVar4;\u000a    if ((((uint *)&ram0x00404600)[(ulong)(uVar3 & 7)] & (uint)local_48[(long)((int)uVar3 >> 3)]) !=\u000a        0) {\u000a      uVar1 = XKeycodeToKeysym(dpy,uVar4 & 0xff,0);\u000a      pcVar2 = (char *)XKeysymToString(uVar1);\u000a      if (pcVar2 == (char *)0x0) {\u000a        pcVar2 = "UNNAMED";\u000a      }\u000a      fprintf(stderr,"    %s (keysym 0x%x, keycode %d)\u005cn",pcVar2,uVar1 & 0xffffffff,uVar4);\u000a    }\u000a    uVar4 = (ulong)(uVar3 + 1);\u000a  } while (uVar3 + 1 != 0x100);\u000a  sleep(uParm1);\u000a  return;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV R14D,EDI\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,RSP\nCALL 0x00401280\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404546\nXOR EAX,EAX\nMOV ECX,R14D\nCALL 0x00401210\nMOV R15D,0x4045a3\nXOR EBP,EBP\nJMP 0x00401610\nMOV RDI,qword ptr [0x006072b8]\nMOVZX ESI,BPL\nXOR EDX,EDX\nCALL 0x00401300\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x004013a0\nMOV RCX,RAX\nMOV RDI,qword ptr [0x00607280]\nTEST RCX,RCX\nCMOVZ RCX,R15\nMOV ESI,0x404581\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,EBX\nMOV R8D,EBP\nCALL 0x00401210\nJMP 0x00401629\nMOV EAX,EBP\nSAR EAX,0x3\nCDQE\nMOVZX EAX,byte ptr [RSP + RAX*0x1]\nMOV ECX,EBP\nAND ECX,0x7\nTEST dword ptr [0x404600 + RCX*0x4],EAX\nJNZ 0x004015c3\nINC EBP\nCMP EBP,0x100\nJNZ 0x00401610\nMOV EDI,R14D\nCALL 0x004013b0\nADD RSP,0x28\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n53\n48 83 ec 28\n41 89 fe\n48 8b 3d 24 5d 20 00\n48 89 e6\ne8 e4 fc ff ff\n48 8b 3d dd 5c 20 00\n48 8b 15 2e 5d 20 00\nbe 46 45 40 00\n31 c0\n44 89 f1\ne8 57 fc ff ff\n41 bf a3 45 40 00\n31 ed\neb 4d\n48 8b 3d ee 5c 20 00\n40 0f b6 f5\n31 d2\ne8 2b fd ff ff\n48 89 c3\n48 89 df\ne8 c0 fd ff ff\n48 89 c1\n48 8b 3d 96 5c 20 00\n48 85 c9\n49 0f 44 cf\nbe 81 45 40 00\n31 c0\n48 89 ca\n89 d9\n41 89 e8\ne8 0b fc ff ff\neb 22\n89 e8\nc1 f8 03\n48 98\n0f b6 04 04\n89 e9\n83 e1 07\n85 04 8d 00 46 40 00\n75 9a\nff c5\n81 fd 00 01 00 00\n75 dd\n44 89 f7\ne8 75 fd ff ff\n48 83 c4 28\n5b\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:0000000000401580\n.text:0000000000401581\n.text:0000000000401583\n.text:0000000000401585\n.text:0000000000401586\n.text:000000000040158a\n.text:000000000040158d\n.text:0000000000401594\n.text:0000000000401597\n.text:000000000040159c\n.text:00000000004015a3\n.text:00000000004015aa\n.text:00000000004015af\n.text:00000000004015b1\n.text:00000000004015b4\n.text:00000000004015b9\n.text:00000000004015bf\n.text:00000000004015c1\n.text:00000000004015c3\n.text:00000000004015ca\n.text:00000000004015ce\n.text:00000000004015d0\n.text:00000000004015d5\n.text:00000000004015d8\n.text:00000000004015db\n.text:00000000004015e0\n.text:00000000004015e3\n.text:00000000004015ea\n.text:00000000004015ed\n.text:00000000004015f1\n.text:00000000004015f6\n.text:00000000004015f8\n.text:00000000004015fb\n.text:00000000004015fd\n.text:0000000000401600\n.text:0000000000401605\n.text:0000000000401610\n.text:0000000000401612\n.text:0000000000401615\n.text:0000000000401617\n.text:000000000040161b\n.text:000000000040161d\n.text:0000000000401620\n.text:0000000000401627\n.text:0000000000401629\n.text:000000000040162b\n.text:0000000000401631\n.text:0000000000401633\n.text:0000000000401636\n.text:000000000040163b\n.text:000000000040163f\n.text:0000000000401640\n.text:0000000000401642\n.text:0000000000401644\n.text:0000000000401645\n'
p237
tp238
sS'fputc'
p239
(S'\n__stdcall fputc(int __c, FILE * __stream)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_00607088)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x00607088]\n'
p242
S'ff 25 c2 5e 20 00\n'
p243
S'.plt:00000000004011c0\n'
p244
tp245
sS'strncasecmp'
p246
(S'\n__stdcall strncasecmp(char * __s1, char * __s2, size_t __n)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncasecmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncasecmp_006070e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x006070e0]\n'
p249
S'ff 25 6a 5e 20 00\n'
p250
S'.plt:0000000000401270\n'
p251
tp252
sS'exec_add'
p253
(S'\n__stdcall exec_add(op_addmodifier * opam)\n'
p254
V\u000aint exec_add(op_addmodifier *opam)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  uint uVar2;\u000a  long lVar3;\u000a  undefined8 uStack56;\u000a  \u000a  if (opam->count < 1) {\u000a    uVar2 = 0;\u000a  }\u000a  else {\u000a    lVar3 = 0;\u000a    uVar2 = 0;\u000a    uStack56 = in_RAX;\u000a    do {\u000a      KeysymToKeycodes(dpy,opam->keysyms[lVar3],(int *)((long)&uStack56 + 4));\u000a      uVar2 = -(uint)(uStack56._4_4_ == 0) | uVar2;\u000a      while (uStack56 = uStack56 & 0xffffffff | (ulong)(uStack56._4_4_ - 1) << 0x20,\u000a            0 < uStack56._4_4_) {\u000a        iVar1 = AddModifier(&map);\u000a        if (iVar1 < 0) {\u000a          uVar2 = 0xffffffff;\u000a        }\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a    } while (lVar3 < (long)opam->count);\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nCMP dword ptr [R15 + 0x14],0x0\nJLE 0x0040255a\nXOR R12D,R12D\nMOV R13D,0xffffffff\nXOR R14D,R14D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x006072b8]\nMOV RAX,qword ptr [R15 + 0x18]\nMOV RSI,qword ptr [RAX + R12*0x8]\nLEA RDX,[RSP + 0x4]\nCALL 0x004037a0\nMOV RBX,RAX\nMOV EAX,dword ptr [RSP + 0x4]\nCMP EAX,0x1\nSBB EBP,EBP\nOR EBP,R14D\nJMP 0x0040253e\nMOV EDX,dword ptr [R15 + 0x10]\nMOVZX ESI,byte ptr [RBX]\nINC RBX\nMOV EDI,0x6072a0\nCALL 0x00401650\nTEST EAX,EAX\nCMOVS EBP,R13D\nMOV EAX,dword ptr [RSP + 0x4]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0x4],ECX\nTEST EAX,EAX\nJG 0x00402520\nINC R12\nMOVSXD RAX,dword ptr [R15 + 0x14]\nCMP R12,RAX\nMOV R14D,EBP\nJL 0x004024f0\nJMP 0x0040255c\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ff\n41 83 7f 14 00\n0f 8e 81 00 00 00\n45 31 e4\n41 bd ff ff ff ff\n45 31 f6\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d c1 4d 20 00\n49 8b 47 18\n4a 8b 34 e0\n48 8d 54 24 04\ne8 97 12 00 00\n48 89 c3\n8b 44 24 04\n83 f8 01\n19 ed\n44 09 f5\neb 24\n41 8b 57 10\n0f b6 33\n48 ff c3\nbf a0 72 60 00\ne8 1c f1 ff ff\n85 c0\n41 0f 48 ed\n8b 44 24 04\n8d 48 ff\n89 4c 24 04\n85 c0\n7f d7\n49 ff c4\n49 63 47 14\n49 39 c4\n41 89 ee\n7c 98\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p257
S'.text:00000000004024c0\n.text:00000000004024c1\n.text:00000000004024c3\n.text:00000000004024c5\n.text:00000000004024c7\n.text:00000000004024c9\n.text:00000000004024ca\n.text:00000000004024cb\n.text:00000000004024ce\n.text:00000000004024d3\n.text:00000000004024d9\n.text:00000000004024dc\n.text:00000000004024e2\n.text:00000000004024e5\n.text:00000000004024f0\n.text:00000000004024f7\n.text:00000000004024fb\n.text:00000000004024ff\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250c\n.text:0000000000402510\n.text:0000000000402513\n.text:0000000000402515\n.text:0000000000402518\n.text:0000000000402520\n.text:0000000000402524\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252f\n.text:0000000000402534\n.text:0000000000402536\n.text:000000000040253a\n.text:000000000040253e\n.text:0000000000402541\n.text:0000000000402545\n.text:0000000000402547\n.text:0000000000402549\n.text:000000000040254c\n.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402556\n.text:0000000000402558\n.text:000000000040255a\n.text:000000000040255c\n.text:000000000040255e\n.text:0000000000402562\n.text:0000000000402563\n.text:0000000000402565\n.text:0000000000402567\n.text:0000000000402569\n.text:000000000040256b\n.text:000000000040256c\n'
p258
tp259
sS'execute_work_queue'
p260
(S'\n__stdcall execute_work_queue()\n'
p261
V\u000aint execute_work_queue(void)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  op_pointer *opp;\u000a  int iVar4;\u000a  int local_f0 [48];\u000a  \u000a  if (verbose != 0) {\u000a    puts("!");\u000a    puts("! executing work queue");\u000a    puts("!");\u000a  }\u000a  iVar4 = 0;\u000a  if (work_queue.head != (op *)0x0) {\u000a    uVar3 = 0;\u000a    bVar1 = false;\u000a    iVar4 = 0;\u000a    opp = (op_pointer *)work_queue.head;\u000a    do {\u000a      if (verbose != 0) {\u000a        print_opcode((op *)opp);\u000a      }\u000a      if ((uVar3 != 0) &&\u000a         ((((int)uVar3 < 0 || (opp->type != doKeycode)) || (*(char *)&opp->count == 0)))) {\u000a        XSync(dpy,0);\u000a        while (iVar2 = XEventsQueued(dpy), 0 < iVar2) {\u000a          XNextEvent(dpy,local_f0);\u000a          if (local_f0[0] == 0x22) {\u000a            do {\u000a              iVar2 = XCheckTypedEvent(dpy,0x22,local_f0);\u000a            } while (iVar2 != 0);\u000a            XRefreshKeyboardMapping(local_f0);\u000a          }\u000a          else {\u000a            fprintf(stderr,"%s:  unknown event %ld\u005cn",ProgramName);\u000a          }\u000a        }\u000a      }\u000a      switch(opp->type) {\u000a      case doKeycode:\u000a        uVar3 = exec_keycode((op_keycode *)opp);\u000a        iVar4 = iVar4 + (uVar3 >> 0x1f);\u000a        uVar3 = -(uint)(*(char *)&opp->count == 0) | 1;\u000a        break;\u000a      case doAddModifier:\u000a        uVar3 = exec_add((op_addmodifier *)opp);\u000a        goto LAB_004022b6;\u000a      case doRemoveModifier:\u000a        uVar3 = exec_remove((op_removemodifier *)opp);\u000a        goto LAB_004022b6;\u000a      case doClearModifier:\u000a        uVar3 = exec_clear((op_clearmodifier *)opp);\u000aLAB_004022b6:\u000a        iVar4 = iVar4 + (uVar3 >> 0x1f);\u000a        if (-1 < (int)uVar3) {\u000a          bVar1 = true;\u000a        }\u000a        uVar3 = 0;\u000a        break;\u000a      case doPointer:\u000a        uVar3 = exec_pointer(opp);\u000a        iVar4 = iVar4 + (uVar3 >> 0x1f);\u000a        uVar3 = 0;\u000a        break;\u000a      default:\u000a        uVar3 = 0;\u000a        fprintf(stderr,"%s:  unknown opcode %d\u005cn",ProgramName);\u000a      }\u000a      opp = (op_pointer *)opp->next;\u000a    } while (opp != (op_pointer *)0x0);\u000a    if (bVar1) {\u000a      uVar3 = UpdateModifierMapping(map);\u000a      iVar4 = iVar4 + (uVar3 >> 0x1f);\u000a    }\u000a  }\u000a  iVar2 = 0;\u000a  if (0 < iVar4) {\u000a    iVar2 = -1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xc8\nCMP dword ptr [0x006072c0],0x0\nJZ 0x00402178\nMOV EDI,0x404e2d\nCALL 0x00401130\nMOV EDI,0x404e50\nCALL 0x00401130\nMOV EDI,0x404e2d\nCALL 0x00401130\nMOV RBX,qword ptr [0x00607290]\nXOR EAX,EAX\nTEST RBX,RBX\nMOV R15D,0x0\nJZ 0x00402326\nMOV R12D,0x1\nLEA RBP,[RSP + 0x8]\nXOR R14D,R14D\nXOR R13D,R13D\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [0x006072c0],0x0\nJZ 0x004021c1\nMOV RDI,RBX\nCALL 0x00401f50\nTEST R14D,R14D\nJZ 0x00402270\nJS 0x004021d5\nCMP dword ptr [RBX],0x0\nJZ 0x00402266\nMOV RDI,qword ptr [0x006072b8]\nXOR ESI,ESI\nCALL 0x004012d0\nJMP 0x004021f8\nMOV RDI,RBP\nCALL 0x004012c0\nMOV RDI,qword ptr [0x006072b8]\nXOR ESI,ESI\nCALL 0x00401140\nTEST EAX,EAX\nJLE 0x00402270\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,RBP\nCALL 0x00401250\nMOVSXD RCX,dword ptr [RSP + 0x8]\nCMP RCX,0x22\nJNZ 0x0040224a\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x006072b8]\nMOV ESI,0x22\nMOV RDX,RBP\nCALL 0x00401350\nTEST EAX,EAX\nJNZ 0x00402230\nJMP 0x004021f0\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4047bb\nXOR EAX,EAX\nCALL 0x00401210\nJMP 0x004021f8\nCMP byte ptr [RBX + 0x10],0x0\nJZ 0x004021d5\nMOV ECX,dword ptr [RBX]\nCMP RCX,0x4\nJA 0x004022dc\nJMP qword ptr [0x404668 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00402350\nSHR EAX,0x1f\nADD R15D,EAX\nCMP byte ptr [RBX + 0x10],0x1\nSBB R14D,R14D\nOR R14D,0x1\nJMP 0x00402300\nMOV RDI,RBX\nCALL 0x004024c0\nJMP 0x004022b6\nMOV RDI,RBX\nCALL 0x00402570\nJMP 0x004022b6\nMOV RDI,RBX\nCALL 0x004025d0\nMOV ECX,EAX\nSHR ECX,0x1f\nADD R15D,ECX\nTEST EAX,EAX\nCMOVNS R13D,R12D\nXOR R14D,R14D\nJMP 0x00402300\nMOV RDI,RBX\nCALL 0x004025e0\nSHR EAX,0x1f\nADD R15D,EAX\nXOR R14D,R14D\nJMP 0x00402300\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nXOR R14D,R14D\nMOV ESI,0x4047d3\nXOR EAX,EAX\nCALL 0x00401210\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x004021b0\nTEST R13D,R13D\nJZ 0x00402324\nMOV RDI,qword ptr [0x006072a0]\nCALL 0x004014e0\nSHR EAX,0x1f\nADD R15D,EAX\nXOR EAX,EAX\nTEST R15D,R15D\nMOV ECX,0xffffffff\nCMOVG EAX,ECX\nADD RSP,0xc8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p263
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 00 00 00\n83 3d 68 51 20 00 00\n74 1e\nbf 2d 4e 40 00\ne8 cc ef ff ff\nbf 50 4e 40 00\ne8 c2 ef ff ff\nbf 2d 4e 40 00\ne8 b8 ef ff ff\n48 8b 1d 11 51 20 00\n31 c0\n48 85 db\n41 bf 00 00 00 00\n0f 84 96 01 00 00\n41 bc 01 00 00 00\n48 8d 6c 24 08\n45 31 f6\n45 31 ed\n45 31 ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n83 3d 09 51 20 00 00\n74 08\n48 89 df\ne8 8f fd ff ff\n45 85 f6\n0f 84 a6 00 00 00\n78 09\n83 3b 00\n0f 84 91 00 00 00\n48 8b 3d dc 50 20 00\n31 f6\ne8 ed f0 ff ff\neb 13\n48 89 ef\ne8 c8 f0 ff ff\n48 8b 3d b9 50 20 00\n31 f6\ne8 3a ef ff ff\n85 c0\n7e 66\n48 8b 3d a7 50 20 00\n48 89 ee\ne8 37 f0 ff ff\n48 63 4c 24 08\n48 83 f9 22\n75 26\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 81 50 20 00\nbe 22 00 00 00\n48 89 ea\ne8 0c f1 ff ff\n85 c0\n75 e8\neb a6\n48 8b 3d 2f 50 20 00\n48 8b 15 80 50 20 00\nbe bb 47 40 00\n31 c0\ne8 ac ef ff ff\neb 92\n80 7b 10 00\n0f 84 65 ff ff ff\n8b 0b\n48 83 f9 04\n77 64\nff 24 cd 68 46 40 00\n48 89 df\ne8 c9 00 00 00\nc1 e8 1f\n41 01 c7\n80 7b 10 01\n45 19 f6\n41 83 ce 01\neb 66\n48 89 df\ne8 1e 02 00 00\neb 12\n48 89 df\ne8 c4 02 00 00\neb 08\n48 89 df\ne8 1a 03 00 00\n89 c1\nc1 e9 1f\n41 01 cf\n85 c0\n45 0f 49 ec\n45 31 f6\neb 37\n48 89 df\ne8 0f 03 00 00\nc1 e8 1f\n41 01 c7\n45 31 f6\neb 24\n48 8b 3d 9d 4f 20 00\n48 8b 15 ee 4f 20 00\n45 31 f6\nbe d3 47 40 00\n31 c0\ne8 17 ef ff ff\n0f 1f 80 00 00 00 00\n48 8b 5b 08\n48 85 db\n0f 85 a3 fe ff ff\n45 85 ed\n74 12\n48 8b 3d 87 4f 20 00\ne8 c2 f1 ff ff\nc1 e8 1f\n41 01 c7\n31 c0\n45 85 ff\nb9 ff ff ff ff\n0f 4f c1\n48 81 c4 c8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p264
S'.text:0000000000402140\n.text:0000000000402141\n.text:0000000000402143\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214a\n.text:0000000000402151\n.text:0000000000402158\n.text:000000000040215a\n.text:000000000040215f\n.text:0000000000402164\n.text:0000000000402169\n.text:000000000040216e\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217f\n.text:0000000000402181\n.text:0000000000402184\n.text:000000000040218a\n.text:0000000000402190\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219e\n.text:00000000004021a1\n.text:00000000004021a4\n.text:00000000004021b0\n.text:00000000004021b7\n.text:00000000004021b9\n.text:00000000004021bc\n.text:00000000004021c1\n.text:00000000004021c4\n.text:00000000004021ca\n.text:00000000004021cc\n.text:00000000004021cf\n.text:00000000004021d5\n.text:00000000004021dc\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021f0\n.text:00000000004021f3\n.text:00000000004021f8\n.text:00000000004021ff\n.text:0000000000402201\n.text:0000000000402206\n.text:0000000000402208\n.text:000000000040220a\n.text:0000000000402211\n.text:0000000000402214\n.text:0000000000402219\n.text:000000000040221e\n.text:0000000000402222\n.text:0000000000402224\n.text:0000000000402230\n.text:0000000000402237\n.text:000000000040223c\n.text:000000000040223f\n.text:0000000000402244\n.text:0000000000402246\n.text:0000000000402248\n.text:000000000040224a\n.text:0000000000402251\n.text:0000000000402258\n.text:000000000040225d\n.text:000000000040225f\n.text:0000000000402264\n.text:0000000000402266\n.text:000000000040226a\n.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402276\n.text:0000000000402278\n.text:000000000040227f\n.text:0000000000402282\n.text:0000000000402287\n.text:000000000040228a\n.text:000000000040228d\n.text:0000000000402291\n.text:0000000000402294\n.text:0000000000402298\n.text:000000000040229a\n.text:000000000040229d\n.text:00000000004022a2\n.text:00000000004022a4\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b6\n.text:00000000004022b8\n.text:00000000004022bb\n.text:00000000004022be\n.text:00000000004022c0\n.text:00000000004022c4\n.text:00000000004022c7\n.text:00000000004022c9\n.text:00000000004022cc\n.text:00000000004022d1\n.text:00000000004022d4\n.text:00000000004022d7\n.text:00000000004022da\n.text:00000000004022dc\n.text:00000000004022e3\n.text:00000000004022ea\n.text:00000000004022ed\n.text:00000000004022f2\n.text:00000000004022f4\n.text:00000000004022f9\n.text:0000000000402300\n.text:0000000000402304\n.text:0000000000402307\n.text:000000000040230d\n.text:0000000000402310\n.text:0000000000402312\n.text:0000000000402319\n.text:000000000040231e\n.text:0000000000402321\n.text:0000000000402324\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232e\n.text:0000000000402331\n.text:0000000000402338\n.text:0000000000402339\n.text:000000000040233b\n.text:000000000040233d\n.text:000000000040233f\n.text:0000000000402341\n.text:0000000000402342\n'
p265
tp266
sS'do_keycode'
p267
(S'\n__stdcall do_keycode(char * line)\n'
p268
V\u000avoid do_keycode(char *line)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  char *__format;\u000a  size_t __size;\u000a  bool bVar3;\u000a  uint local_1c;\u000a  \u000a  if (((line == (char *)0x0) || ((int)in_ESI < 3)) || (cVar1 = *line, cVar1 == 0)) {\u000a    badheader();\u000a    __format = "keycode input line";\u000a    __size = 0x12;\u000a  }\u000a  else {\u000a    iVar2 = strncmp("any",line,3);\u000a    if (iVar2 == 0) {\u000aLAB_00402700:\u000a      finish_keycodes(line,(KeyCode *)(ulong)in_ESI);\u000a      return;\u000a    }\u000a    bVar3 = cVar1 == '0';\u000a    if (bVar3) {\u000a      line = line + 1;\u000a    }\u000a    __format = "%d";\u000a    if (bVar3) {\u000a      __format = "%o";\u000a    }\u000a    in_ESI = in_ESI - (uint)bVar3;\u000a    if ((byte)(*line | 0x20U) == 0x78) {\u000a      line = (char *)((byte *)line + 1);\u000a      in_ESI = in_ESI - 1;\u000a      __format = "%x";\u000a    }\u000a    local_1c = 0;\u000a    iVar2 = sscanf(line,__format,&local_1c);\u000a    if ((iVar2 == 1) && (local_1c != 0)) {\u000a      if ((min_keycode <= (int)(local_1c & 0xff)) && ((int)(local_1c & 0xff) <= max_keycode))\u000a      goto LAB_00402700;\u000a      badheader();\u000a      __format = "keycode value (out of range)";\u000a      __size = 0x1c;\u000a    }\u000a    else {\u000a      badheader();\u000a      __format = "keycode value";\u000a      __size = 0xd;\u000a    }\u000a  }\u000a  fwrite(__format,__size,1,stderr);\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV EBP,ESI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040271d\nCMP EBP,0x3\nJL 0x0040271d\nMOV R14B,byte ptr [RBX]\nTEST R14B,R14B\nJZ 0x0040271d\nMOV EDI,0x404831\nMOV EDX,0x3\nMOV RSI,RBX\nCALL 0x00401110\nTEST EAX,EAX\nJZ 0x004026fb\nLEA RAX,[RBX + 0x1]\nXOR ECX,ECX\nCMP R14B,0x30\nSETZ CL\nCMOVZ RBX,RAX\nMOV EAX,0x404835\nMOV ESI,0x404dec\nCMOVZ RSI,RAX\nSUB EBP,ECX\nMOV AL,byte ptr [RBX]\nOR AL,0x20\nCMP AL,0x78\nJNZ 0x004026a8\nINC RBX\nDEC EBP\nMOV ESI,0x404a1f\nMOV dword ptr [RSP + 0xc],0x0\nLEA RDX,[RSP + 0xc]\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401290\nCMP EAX,0x1\nJNZ 0x00402735\nMOV EAX,dword ptr [RSP + 0xc]\nTEST EAX,EAX\nJZ 0x00402735\nMOV byte ptr [RSP + 0xb],AL\nMOVZX EAX,AL\nCMP EAX,dword ptr [0x006072d4]\nJL 0x004026e3\nCMP EAX,dword ptr [0x006072d0]\nJLE 0x00402700\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404846\nMOV ESI,0x1c\nJMP 0x0040274b\nMOV byte ptr [RSP + 0xb],0x0\nLEA RDX,[RSP + 0xb]\nMOV ECX,0x1\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00403260\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x40481e\nMOV ESI,0x12\nJMP 0x0040274b\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404838\nMOV ESI,0xd\nMOV EDX,0x1\nCALL 0x00401370\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nJMP 0x00402714\n'
p270
S'55\n41 56\n53\n48 83 ec 10\n89 f5\n48 89 fb\n48 85 db\n0f 84 d7 00 00 00\n83 fd 03\n0f 8c ce 00 00 00\n44 8a 33\n45 84 f6\n0f 84 c2 00 00 00\nbf 31 48 40 00\nba 03 00 00 00\n48 89 de\ne8 a3 ea ff ff\n85 c0\n0f 84 86 00 00 00\n48 8d 43 01\n31 c9\n41 80 fe 30\n0f 94 c1\n48 0f 44 d8\nb8 35 48 40 00\nbe ec 4d 40 00\n48 0f 44 f0\n29 cd\n8a 03\n0c 20\n3c 78\n75 0a\n48 ff c3\nff cd\nbe 1f 4a 40 00\nc7 44 24 0c 00 00 00 00\n48 8d 54 24 0c\n31 c0\n48 89 df\ne8 d1 eb ff ff\n83 f8 01\n75 71\n8b 44 24 0c\n85 c0\n74 69\n88 44 24 0b\n0f b6 c0\n3b 05 fb 4b 20 00\n7c 08\n3b 05 ef 4b 20 00\n7e 1d\ne8 88 f7 ff ff\n48 8b 0d 91 4b 20 00\nbf 46 48 40 00\nbe 1c 00 00 00\neb 50\nc6 44 24 0b 00\n48 8d 54 24 0b\nb9 01 00 00 00\n48 89 df\n89 ee\ne8 4c 0b 00 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\ne8 4e f7 ff ff\n48 8b 0d 57 4b 20 00\nbf 1e 48 40 00\nbe 12 00 00 00\neb 16\ne8 36 f7 ff ff\n48 8b 0d 3f 4b 20 00\nbf 38 48 40 00\nbe 0d 00 00 00\nba 01 00 00 00\ne8 1b ec ff ff\n48 8b 35 24 4b 20 00\nbf 0a 00 00 00\ne8 3a ea ff ff\neb ac\n'
p271
S'.text:0000000000402630\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402634\n.text:0000000000402638\n.text:000000000040263a\n.text:000000000040263d\n.text:0000000000402640\n.text:0000000000402646\n.text:0000000000402649\n.text:000000000040264f\n.text:0000000000402652\n.text:0000000000402655\n.text:000000000040265b\n.text:0000000000402660\n.text:0000000000402665\n.text:0000000000402668\n.text:000000000040266d\n.text:000000000040266f\n.text:0000000000402675\n.text:0000000000402679\n.text:000000000040267b\n.text:000000000040267f\n.text:0000000000402682\n.text:0000000000402686\n.text:000000000040268b\n.text:0000000000402690\n.text:0000000000402694\n.text:0000000000402696\n.text:0000000000402698\n.text:000000000040269a\n.text:000000000040269c\n.text:000000000040269e\n.text:00000000004026a1\n.text:00000000004026a3\n.text:00000000004026a8\n.text:00000000004026b0\n.text:00000000004026b5\n.text:00000000004026b7\n.text:00000000004026ba\n.text:00000000004026bf\n.text:00000000004026c2\n.text:00000000004026c4\n.text:00000000004026c8\n.text:00000000004026ca\n.text:00000000004026cc\n.text:00000000004026d0\n.text:00000000004026d3\n.text:00000000004026d9\n.text:00000000004026db\n.text:00000000004026e1\n.text:00000000004026e3\n.text:00000000004026e8\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026f9\n.text:00000000004026fb\n.text:0000000000402700\n.text:0000000000402705\n.text:000000000040270a\n.text:000000000040270d\n.text:000000000040270f\n.text:0000000000402714\n.text:0000000000402718\n.text:0000000000402719\n.text:000000000040271b\n.text:000000000040271c\n.text:000000000040271d\n.text:0000000000402722\n.text:0000000000402729\n.text:000000000040272e\n.text:0000000000402733\n.text:0000000000402735\n.text:000000000040273a\n.text:0000000000402741\n.text:0000000000402746\n.text:000000000040274b\n.text:0000000000402750\n.text:0000000000402755\n.text:000000000040275c\n.text:0000000000402761\n.text:0000000000402766\n'
p272
tp273
sS'sleep'
p274
(S'\n__stdcall sleep(uint __seconds)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auint sleep(uint __seconds)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_sleep_00607180)();\u000a  return uVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00607180]\n'
p277
S'ff 25 ca 5d 20 00\n'
p278
S'.plt:00000000004013b0\n'
p279
tp280
sS'deregister_tm_clones'
p281
(S'\n__stdcall deregister_tm_clones()\n'
p282
V\u000a/* WARNING: Removing unreachable block (ram,0x00401425) */\u000a/* WARNING: Removing unreachable block (ram,0x0040142f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p283
S'MOV EAX,0x60725f\nPUSH RBP\nSUB RAX,0x607258\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401440\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401440\nPOP RBP\nMOV EDI,0x607258\nJMP RAX\nPOP RBP\nRET\n'
p284
S'b8 5f 72 60 00\n55\n48 2d 58 72 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 58 72 60 00\nff e0\n5d\nc3\n'
p285
S'.text:0000000000401410\n.text:0000000000401415\n.text:0000000000401416\n.text:000000000040141c\n.text:0000000000401420\n.text:0000000000401423\n.text:0000000000401425\n.text:000000000040142a\n.text:000000000040142d\n.text:000000000040142f\n.text:0000000000401430\n.text:0000000000401435\n.text:0000000000401440\n.text:0000000000401441\n'
p286
tp287
sS'XDisplayName'
p288
(S'\n__stdcall XDisplayName()\n'
p289
V\u000avoid XDisplayName(void)\u000a\u000a{\u000a  (*(code *)PTR_XDisplayName_006070f8)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x006070f8]\n'
p291
S'ff 25 52 5e 20 00\n'
p292
S'.plt:00000000004012a0\n'
p293
tp294
sS'free'
p295
(S'\n__stdcall free(void * __ptr)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00607018)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x00607018]\n'
p298
S'ff 25 32 5f 20 00\n'
p299
S'.plt:00000000004010e0\n'
p300
tp301
sS'asprintf'
p302
(S'\n__stdcall asprintf(char * * __ptr, char * __fmt)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint asprintf(char **__ptr,char *__fmt,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_asprintf_00607120)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00607120]\n'
p305
S'ff 25 2a 5e 20 00\n'
p306
S'.plt:00000000004012f0\n'
p307
tp308
sS'XEventsQueued'
p309
(S'\n__stdcall XEventsQueued()\n'
p310
V\u000avoid XEventsQueued(void)\u000a\u000a{\u000a  (*(code *)PTR_XEventsQueued_00607048)();\u000a  return;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00607048]\n'
p312
S'ff 25 02 5f 20 00\n'
p313
S'.plt:0000000000401140\n'
p314
tp315
sS'malloc'
p316
(S'\n__stdcall malloc(size_t __size)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_006070d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x006070d8]\n'
p319
S'ff 25 72 5e 20 00\n'
p320
S'.plt:0000000000401260\n'
p321
tp322
sS'fopen'
p323
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_00607148)();\u000a  return pFVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x00607148]\n'
p326
S'ff 25 02 5e 20 00\n'
p327
S'.plt:0000000000401340\n'
p328
tp329
sS'XGetPointerMapping'
p330
(S'\n__stdcall XGetPointerMapping()\n'
p331
V\u000avoid XGetPointerMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetPointerMapping_006070c8)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x006070c8]\n'
p333
S'ff 25 82 5e 20 00\n'
p334
S'.plt:0000000000401240\n'
p335
tp336
sS'parse_keysym'
p337
(S'\n__stdcall parse_keysym(char * line, char * * name, KeySym * keysym)\n'
p338
V\u000aint parse_keysym(char *line,char **name,KeySym *keysym)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  char *__s1;\u000a  ulong uVar3;\u000a  ulong *val;\u000a  \u000a  __s1 = copy_to_scratch(line);\u000a  *(char **)keysym = __s1;\u000a  iVar1 = strcmp(__s1,"NoSymbol");\u000a  if (iVar1 == 0) {\u000a    *val = 0;\u000a    uVar2 = 1;\u000a  }\u000a  else {\u000a    uVar3 = XStringToKeysym(__s1);\u000a    *val = uVar3;\u000a    if ((uVar3 == 0) && ((byte)(*(char *)*keysym - 0x30U) < 10)) {\u000a      iVar1 = parse_number((char *)*keysym,val);\u000a      return iVar1;\u000a    }\u000a    uVar2 = (uint)(*val != 0);\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p339
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nMOV R15,RDX\nCALL 0x00403680\nMOV RBX,RAX\nMOV qword ptr [R15],RBX\nMOV ESI,0x40443d\nMOV RDI,RBX\nCALL 0x004011f0\nTEST EAX,EAX\nJZ 0x0040366a\nMOV RDI,RBX\nCALL 0x00401380\nMOV qword ptr [R14],RAX\nTEST RAX,RAX\nJNZ 0x0040365f\nMOV RDI,qword ptr [R15]\nMOV AL,byte ptr [RDI]\nADD AL,0xd0\nCMP AL,0x9\nJA 0x0040365f\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00403720\nXOR EAX,EAX\nCMP qword ptr [R14],0x0\nSETNZ AL\nJMP 0x00403676\nMOV qword ptr [R14],0x0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p340
S'41 57\n41 56\n53\n49 89 ce\n49 89 d7\ne8 60 00 00 00\n48 89 c3\n49 89 1f\nbe 3d 44 40 00\n48 89 df\ne8 bd db ff ff\n85 c0\n74 33\n48 89 df\ne8 41 dd ff ff\n49 89 06\n48 85 c0\n75 18\n49 8b 3f\n8a 07\n04 d0\n3c 09\n77 0d\n4c 89 f6\n5b\n41 5e\n41 5f\ne9 c1 00 00 00\n31 c0\n49 83 3e 00\n0f 95 c0\neb 0c\n49 c7 06 00 00 00 00\nb8 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p341
S'.text:0000000000403610\n.text:0000000000403612\n.text:0000000000403614\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361b\n.text:0000000000403620\n.text:0000000000403623\n.text:0000000000403626\n.text:000000000040362b\n.text:000000000040362e\n.text:0000000000403633\n.text:0000000000403635\n.text:0000000000403637\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403642\n.text:0000000000403645\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403650\n.text:0000000000403652\n.text:0000000000403655\n.text:0000000000403656\n.text:0000000000403658\n.text:000000000040365a\n.text:000000000040365f\n.text:0000000000403661\n.text:0000000000403665\n.text:0000000000403668\n.text:000000000040366a\n.text:0000000000403671\n.text:0000000000403676\n.text:0000000000403677\n.text:0000000000403679\n.text:000000000040367b\n'
p342
tp343
sS'XCloseDisplay'
p344
(S'\n__stdcall XCloseDisplay()\n'
p345
V\u000avoid XCloseDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XCloseDisplay_00607170)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x00607170]\n'
p347
S'ff 25 da 5d 20 00\n'
p348
S'.plt:0000000000401390\n'
p349
tp350
sS'fprintf'
p351
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_006070b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x006070b0]\n'
p354
S'ff 25 9a 5e 20 00\n'
p355
S'.plt:0000000000401210\n'
p356
tp357
sS'unknown_arg'
p358
(S'\n__stdcall unknown_arg(char * arg)\n'
p359
V\u000avoid unknown_arg(char *arg)\u000a\u000a{\u000a  undefined8 extraout_RDX;\u000a  long lVar1;\u000a  char *pcVar2;\u000a  EVP_PKEY_CTX *ctx;\u000a  \u000a  pcVar2 = "%s: unrecognized argument %s\u005cn\u005cn";\u000a  fprintf(stderr,"%s: unrecognized argument %s\u005cn\u005cn",ProgramName,arg);\u000a  ctx = (EVP_PKEY_CTX *)0x1;\u000a  usage();\u000a  _init(ctx);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)ctx & 0xffffffff,pcVar2,extraout_RDX)\u000a    ;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p360
S'PUSH RAX\nMOV RCX,RDI\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x405d98\nXOR EAX,EAX\nCALL 0x00401210\nMOV EDI,0x1\nCALL 0x004041a0\nNOP word ptr CS:[RAX + RAX*0x1]\nNOP\n'
p361
S'50\n48 89 f9\n48 8b 3d 99 30 20 00\n48 8b 15 ea 30 20 00\nbe 98 5d 40 00\n31 c0\ne8 16 d0 ff ff\nbf 01 00 00 00\ne8 9c ff ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n66 90\n'
p362
S'.text:00000000004041dc\n.text:00000000004041dd\n.text:00000000004041e0\n.text:00000000004041e7\n.text:00000000004041ee\n.text:00000000004041f3\n.text:00000000004041f5\n.text:00000000004041fa\n.text:00000000004041ff\n.text:0000000000404204\n.text:000000000040420e\n'
p363
tp364
sS'get_keysym_list'
p365
(S'\n__stdcall get_keysym_list(char * line, int * np, KeySym * * kslistp)\n'
p366
V\u000aint get_keysym_list(char *line,int *np,KeySym **kslistp)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  void *__ptr;\u000a  void *pvVar4;\u000a  void **in_RCX;\u000a  long lVar5;\u000a  int iVar6;\u000a  ulong uVar7;\u000a  void *pvVar8;\u000a  int local_54;\u000a  KeySym local_40;\u000a  undefined8 local_38;\u000a  \u000a  uVar7 = (ulong)np & 0xffffffff;\u000a  *(undefined4 *)kslistp = 0;\u000a  *in_RCX = (void *)0x0;\u000a  if ((int)uVar7 != 0) {\u000a    __ptr = malloc(0x20);\u000a    if (__ptr == (void *)0x0) {\u000a      badheader();\u000a      fprintf(stderr,"attempt to allocate %ld byte initial keysymlist",0x20);\u000a      _IO_putc(10,(_IO_FILE *)stderr);\u000a      return -1;\u000a    }\u000a    if ((int)uVar7 < 1) {\u000a      iVar6 = 0;\u000a    }\u000a    else {\u000a      local_54 = 4;\u000a      iVar6 = 0;\u000a      pvVar8 = __ptr;\u000a      do {\u000a        iVar2 = skip_space(line);\u000a        line = line + (long)iVar2;\u000a        uVar3 = skip_chars(line);\u000a        if ((int)uVar3 < 0) {\u000a          badheader();\u000a          fwrite("keysym name list",0x10,1,stderr);\u000a          __ptr = pvVar8;\u000aLAB_0040355c:\u000a          _IO_putc(10,(_IO_FILE *)stderr);\u000a          free(__ptr);\u000a          return -1;\u000a        }\u000a        iVar1 = parse_keysym(line,(char **)(ulong)uVar3,&local_40);\u000a        if (iVar1 == 0) {\u000a          badheader();\u000a          fprintf(stderr,"keysym name \u005c'%s\u005c' in keysym list",local_40);\u000a          _IO_putc(10,(_IO_FILE *)stderr);\u000a        }\u000a        else {\u000a          pvVar4 = __ptr;\u000a          if (local_54 <= iVar6) {\u000a            local_54 = local_54 * 2;\u000a            pvVar4 = realloc(__ptr,(long)local_54 << 3);\u000a            pvVar8 = pvVar4;\u000a            if (pvVar4 == (void *)0x0) {\u000a              badheader();\u000a              fprintf(stderr,"attempt to grow keysym list to %ld bytes",(long)local_54 << 3);\u000a              goto LAB_0040355c;\u000a            }\u000a          }\u000a          lVar5 = (long)iVar6;\u000a          iVar6 = iVar6 + 1;\u000a          *(undefined8 *)((long)pvVar8 + lVar5 * 8) = local_38;\u000a          __ptr = pvVar4;\u000a        }\u000a        line = line + (long)(int)uVar3;\u000a        uVar3 = ((int)uVar7 - iVar2) - uVar3;\u000a        uVar7 = (ulong)uVar3;\u000a      } while (0 < (int)uVar3);\u000a    }\u000a    *in_RCX = __ptr;\u000a    *(int *)kslistp = iVar6;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15,RCX\nMOV R14,RDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV dword ptr [R14],0x0\nMOV qword ptr [R15],0x0\nTEST EBP,EBP\nJZ 0x0040353d\nMOV EDI,0x20\nCALL 0x00401260\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00403589\nTEST EBP,EBP\nMOV qword ptr [RSP + 0x10],R14\nMOV qword ptr [RSP + 0x8],R15\nJLE 0x0040352c\nMOV dword ptr [RSP + 0x4],0x4\nMOV R14,R12\nXOR EDX,EDX\nJMP 0x004034e0\nMOV RDI,RBX\nMOV ESI,R15D\nLEA RDX,[RSP + 0x18]\nLEA RCX,[RSP + 0x20]\nCALL 0x00403610\nTEST EAX,EAX\nJZ 0x004034a1\nMOV EDX,R13D\nMOV EAX,dword ptr [RSP + 0x4]\nCMP EDX,EAX\nJL 0x00403481\nADD EAX,EAX\nMOV R14,R12\nMOV dword ptr [RSP + 0x4],EAX\nMOVSXD R12,EAX\nSHL R12,0x3\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x004012e0\nTEST RAX,RAX\nJZ 0x00403541\nMOV R12,RAX\nMOV R14,RAX\nMOV EDX,R13D\nMOV RAX,qword ptr [RSP + 0x20]\nMOVSXD RCX,EDX\nINC EDX\nMOV qword ptr [R14 + RCX*0x8],RAX\nMOVSXD RAX,R15D\nADD RBX,RAX\nSUB EBP,R15D\nTEST EBP,EBP\nJG 0x004034e0\nJMP 0x0040352e\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [RSP + 0x18]\nMOV ESI,0x4048f9\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nMOV EDX,R13D\nJMP 0x0040348f\nMOV R13D,EDX\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401eb0\nCDQE\nADD RBX,RAX\nSUB EBP,EAX\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401e20\nMOV R15D,EAX\nTEST R15D,R15D\nJNS 0x00403430\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x4048e8\nMOV ESI,0x10\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x0040355c\nXOR EDX,EDX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX],R12\nMOV RAX,qword ptr [RSP + 0x10]\nMOV dword ptr [RAX],EDX\nXOR EAX,EAX\nJMP 0x0040357a\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404919\nXOR EAX,EAX\nMOV RDX,R12\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nMOV RDI,R14\nCALL 0x004010e0\nMOV EAX,0xffffffff\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x4048b8\nMOV EDX,0x20\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nJMP 0x00403575\n'
p368
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cf\n49 89 d6\n89 f5\n48 89 fb\n41 c7 06 00 00 00 00\n49 c7 07 00 00 00 00\n85 ed\n0f 84 4e 01 00 00\nbf 20 00 00 00\ne8 67 de ff ff\n49 89 c4\n4d 85 e4\n0f 84 84 01 00 00\n85 ed\n4c 89 74 24 10\n4c 89 7c 24 08\n0f 8e 15 01 00 00\nc7 44 24 04 04 00 00 00\n4d 89 e6\n31 d2\ne9 b7 00 00 00\n48 89 df\n44 89 fe\n48 8d 54 24 18\n48 8d 4c 24 20\ne8 cb 01 00 00\n85 c0\n74 58\n44 89 ea\n8b 44 24 04\n39 c2\n7c 2d\n01 c0\n4d 89 e6\n89 44 24 04\n4c 63 e0\n49 c1 e4 03\n4c 89 f7\n4c 89 e6\ne8 71 de ff ff\n48 85 c0\n0f 84 c9 00 00 00\n49 89 c4\n49 89 c6\n44 89 ea\n48 8b 44 24 20\n48 63 ca\nff c2\n49 89 04 ce\n49 63 c7\n48 01 c3\n44 29 fd\n85 ed\n7f 44\ne9 8d 00 00 00\ne8 ca e9 ff ff\n48 8b 3d d3 3d 20 00\n48 8b 54 24 18\nbe f9 48 40 00\n31 c0\ne8 52 dd ff ff\n48 8b 35 bb 3d 20 00\nbf 0a 00 00 00\ne8 d1 dc ff ff\n44 89 ea\neb bb\n41 89 d5\n48 89 df\n89 ee\ne8 c3 e9 ff ff\n48 98\n48 01 c3\n29 c5\n48 89 df\n89 ee\ne8 22 e9 ff ff\n41 89 c7\n45 85 ff\n0f 89 26 ff ff ff\ne8 61 e9 ff ff\n48 8b 0d 6a 3d 20 00\nbf e8 48 40 00\nbe 10 00 00 00\nba 01 00 00 00\ne8 46 de ff ff\neb 30\n31 d2\n48 8b 44 24 08\n4c 89 20\n48 8b 44 24 10\n89 10\n31 c0\neb 39\ne8 2a e9 ff ff\n48 8b 3d 33 3d 20 00\nbe 19 49 40 00\n31 c0\n4c 89 e2\ne8 b4 dc ff ff\n48 8b 35 1d 3d 20 00\nbf 0a 00 00 00\ne8 33 dc ff ff\n4c 89 f7\ne8 6b db ff ff\nb8 ff ff ff ff\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 e2 e8 ff ff\n48 8b 3d eb 3c 20 00\nbe b8 48 40 00\nba 20 00 00 00\n31 c0\ne8 6a dc ff ff\n48 8b 35 d3 3c 20 00\nbf 0a 00 00 00\ne8 e9 db ff ff\neb bc\n'
p369
S'.text:00000000004033c0\n.text:00000000004033c1\n.text:00000000004033c3\n.text:00000000004033c5\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033ca\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d4\n.text:00000000004033d6\n.text:00000000004033d9\n.text:00000000004033e0\n.text:00000000004033e7\n.text:00000000004033e9\n.text:00000000004033ef\n.text:00000000004033f4\n.text:00000000004033f9\n.text:00000000004033fc\n.text:00000000004033ff\n.text:0000000000403405\n.text:0000000000403407\n.text:000000000040340c\n.text:0000000000403411\n.text:0000000000403417\n.text:000000000040341f\n.text:0000000000403422\n.text:0000000000403424\n.text:0000000000403430\n.text:0000000000403433\n.text:0000000000403436\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403445\n.text:0000000000403447\n.text:0000000000403449\n.text:000000000040344c\n.text:0000000000403450\n.text:0000000000403452\n.text:0000000000403454\n.text:0000000000403456\n.text:0000000000403459\n.text:000000000040345d\n.text:0000000000403460\n.text:0000000000403464\n.text:0000000000403467\n.text:000000000040346a\n.text:000000000040346f\n.text:0000000000403472\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347e\n.text:0000000000403481\n.text:0000000000403486\n.text:0000000000403489\n.text:000000000040348b\n.text:000000000040348f\n.text:0000000000403492\n.text:0000000000403495\n.text:0000000000403498\n.text:000000000040349a\n.text:000000000040349c\n.text:00000000004034a1\n.text:00000000004034a6\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034b9\n.text:00000000004034be\n.text:00000000004034c5\n.text:00000000004034ca\n.text:00000000004034cf\n.text:00000000004034d2\n.text:00000000004034e0\n.text:00000000004034e3\n.text:00000000004034e6\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034ef\n.text:00000000004034f2\n.text:00000000004034f4\n.text:00000000004034f7\n.text:00000000004034f9\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403504\n.text:000000000040350a\n.text:000000000040350f\n.text:0000000000403516\n.text:000000000040351b\n.text:0000000000403520\n.text:0000000000403525\n.text:000000000040352a\n.text:000000000040352c\n.text:000000000040352e\n.text:0000000000403533\n.text:0000000000403536\n.text:000000000040353b\n.text:000000000040353d\n.text:000000000040353f\n.text:0000000000403541\n.text:0000000000403546\n.text:000000000040354d\n.text:0000000000403552\n.text:0000000000403554\n.text:0000000000403557\n.text:000000000040355c\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356d\n.text:0000000000403570\n.text:0000000000403575\n.text:000000000040357a\n.text:000000000040357e\n.text:000000000040357f\n.text:0000000000403581\n.text:0000000000403583\n.text:0000000000403585\n.text:0000000000403587\n.text:0000000000403588\n.text:0000000000403589\n.text:000000000040358e\n.text:0000000000403595\n.text:000000000040359a\n.text:000000000040359f\n.text:00000000004035a1\n.text:00000000004035a6\n.text:00000000004035ad\n.text:00000000004035b2\n.text:00000000004035b7\n'
p370
tp371
sS'puts'
p372
(S'\n__stdcall puts(char * __s)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_00607040)();\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x00607040]\n'
p375
S'ff 25 0a 5f 20 00\n'
p376
S'.plt:0000000000401130\n'
p377
tp378
sS'skip_chars'
p379
(S'\n__stdcall skip_chars(char * s)\n'
p380
V\u000aint skip_chars(char *s)\u000a\u000a{\u000a  int iVar1;\u000a  ushort **ppuVar2;\u000a  long lVar3;\u000a  int in_ESI;\u000a  \u000a  iVar1 = 0;\u000a  if (((s != (char *)0x0) && (0 < in_ESI)) && (*s != 0)) {\u000a    ppuVar2 = __ctype_b_loc();\u000a    lVar3 = 0;\u000a    do {\u000a      if ((*(byte *)((long)*ppuVar2 + (long)s[lVar3] * 2 + 1) & 0x20) != 0) {\u000a        return (int)lVar3;\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a      iVar1 = (int)lVar3;\u000a    } while (lVar3 < (long)in_ESI);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nXOR EAX,EAX\nTEST RBX,RBX\nJZ 0x00401e64\nTEST EBP,EBP\nJLE 0x00401e64\nCMP byte ptr [RBX],0x0\nJZ 0x00401e64\nCALL 0x004013d0\nMOV RCX,qword ptr [RAX]\nMOVSXD RDX,EBP\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX RSI,byte ptr [RBX + RAX*0x1]\nTEST byte ptr [RCX + RSI*0x2 + 0x1],0x20\nJNZ 0x00401e64\nINC RAX\nCMP RAX,RDX\nJL 0x00401e50\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p382
S'55\n53\n50\n89 f5\n48 89 fb\n31 c0\n48 85 db\n74 35\n85 ed\n7e 31\n80 3b 00\n74 2c\ne8 93 f5 ff ff\n48 8b 08\n48 63 d5\n31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 0f be 34 03\nf6 44 71 01 20\n75 08\n48 ff c0\n48 39 d0\n7c ec\n48 83 c4 08\n5b\n5d\nc3\n'
p383
S'.text:0000000000401e20\n.text:0000000000401e21\n.text:0000000000401e22\n.text:0000000000401e23\n.text:0000000000401e25\n.text:0000000000401e28\n.text:0000000000401e2a\n.text:0000000000401e2d\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e33\n.text:0000000000401e36\n.text:0000000000401e38\n.text:0000000000401e3d\n.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e45\n.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e5f\n.text:0000000000401e62\n.text:0000000000401e64\n.text:0000000000401e68\n.text:0000000000401e69\n.text:0000000000401e6a\n'
p384
tp385
sS'print_opcode'
p386
(S'\n__stdcall print_opcode(op * op)\n'
p387
V\u000avoid print_opcode(op *op)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  long lVar3;\u000a  undefined auVar4 [16];\u000a  \u000a  printf("        ");\u000a  switch(*(undefined4 *)*op) {\u000a  case 0:\u000a    if ((*op)[0x10] == 0) {\u000a      printf("keycode any =");\u000a      iVar1 = *(int *)(*op + 0x14);\u000a    }\u000a    else {\u000a      printf("keycode 0x%lx =");\u000a      iVar1 = *(int *)(*op + 0x14);\u000a    }\u000a    if (0 < iVar1) {\u000a      lVar3 = 0;\u000a      do {\u000a        auVar4 = XKeysymToString(*(undefined8 *)(*(long *)(*op + 0x18) + lVar3 * 8));\u000a        pcVar2 = SUB168(auVar4,0);\u000a        if (pcVar2 == (char *)0x0) {\u000a          pcVar2 = "BADKEYSYM";\u000a        }\u000a        printf(" %s",pcVar2,SUB168(auVar4 >> 0x40,0),pcVar2);\u000a        lVar3 = lVar3 + 1;\u000a      } while (lVar3 < (long)*(int *)(*op + 0x14));\u000a    }\u000a    break;\u000a  case 1:\u000a    printf("add %s =",modifier_table[(long)*(int *)(*op + 0x10)].name);\u000a    if (0 < *(int *)(*op + 0x14)) {\u000a      lVar3 = 0;\u000a      do {\u000a        auVar4 = XKeysymToString(*(undefined8 *)(*(long *)(*op + 0x18) + lVar3 * 8));\u000a        pcVar2 = SUB168(auVar4,0);\u000a        if (pcVar2 == (char *)0x0) {\u000a          pcVar2 = "BADKEYSYM";\u000a        }\u000a        printf(" %s",pcVar2,SUB168(auVar4 >> 0x40,0),pcVar2);\u000a        lVar3 = lVar3 + 1;\u000a      } while (lVar3 < (long)*(int *)(*op + 0x14));\u000a    }\u000a    break;\u000a  case 2:\u000a    printf("remove %s = ",modifier_table[(long)*(int *)(*op + 0x10)].name);\u000a    if (0 < *(int *)(*op + 0x14)) {\u000a      lVar3 = 0;\u000a      do {\u000a        printf(" 0x%lx",(ulong)*(byte *)(*(long *)(*op + 0x18) + lVar3));\u000a        lVar3 = lVar3 + 1;\u000a      } while (lVar3 < (long)*(int *)(*op + 0x14));\u000a    }\u000a    break;\u000a  case 3:\u000a    printf("clear %s\u005cn",modifier_table[(long)*(int *)(*op + 0x10)].name);\u000a    return;\u000a  case 4:\u000a    printf("pointer = ");\u000a    if (*(int *)(*op + 0x10) == 0) {\u000a      printf(" default");\u000a    }\u000a    else {\u000a      if (0 < *(int *)(*op + 0x10)) {\u000a        lVar3 = 0;\u000a        do {\u000a          printf(" %d",(ulong)(*op)[lVar3 + 0x14]);\u000a          lVar3 = lVar3 + 1;\u000a        } while (lVar3 < (long)*(int *)(*op + 0x10));\u000a      }\u000a    }\u000a    break;\u000a  default:\u000a    printf("! unknown opcode %d\u005cn");\u000a    return;\u000a  }\u000a  putchar(10);\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV EDI,0x404d7f\nXOR EAX,EAX\nCALL 0x00401180\nMOV ESI,dword ptr [R15]\nCMP RSI,0x4\nJA 0x00401f9e\nJMP qword ptr [0x404640 + RSI*0x8]\nMOVZX ESI,byte ptr [R15 + 0x10]\nTEST RSI,RSI\nJZ 0x004020d0\nMOV EDI,0x404d88\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [R15 + 0x14],0x0\nJG 0x004020e3\nJMP 0x00402130\nMOV EDI,0x404def\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401180\nMOVSXD RAX,dword ptr [R15 + 0x10]\nSHL RAX,0x4\nMOV RSI,qword ptr [0x6071b0 + RAX]\nMOV EDI,0x404db0\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [R15 + 0x14],0x0\nJLE 0x00402130\nMOV R14D,0x404da6\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [R15 + 0x18]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x004013a0\nMOV RCX,RAX\nTEST RCX,RCX\nCMOVZ RCX,R14\nMOV EDI,0x404cf9\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401180\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x14]\nCMP RBX,RAX\nJL 0x00401fe0\nJMP 0x00402130\nMOVSXD RAX,dword ptr [R15 + 0x10]\nSHL RAX,0x4\nMOV RSI,qword ptr [0x6071b0 + RAX]\nMOV EDI,0x404db9\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [R15 + 0x14],0x0\nJLE 0x00402130\nXOR EBX,EBX\nNOP\nMOV RAX,qword ptr [R15 + 0x18]\nMOVZX ESI,byte ptr [RAX + RBX*0x1]\nMOV EDI,0x404dc6\nXOR EAX,EAX\nCALL 0x00401180\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x14]\nCMP RBX,RAX\nJL 0x00402040\nJMP 0x00402130\nMOVSXD RAX,dword ptr [R15 + 0x10]\nSHL RAX,0x4\nMOV RSI,qword ptr [0x6071b0 + RAX]\nMOV EDI,0x404dcd\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401180\nMOV EDI,0x404dd7\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [R15 + 0x10],0x0\nJZ 0x00402124\nCMP dword ptr [R15 + 0x10],0x0\nJLE 0x00402130\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOVZX ESI,byte ptr [R15 + RBX*0x1 + 0x14]\nMOV EDI,0x404deb\nXOR EAX,EAX\nCALL 0x00401180\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x10]\nCMP RBX,RAX\nJL 0x004020b0\nJMP 0x00402130\nMOV EDI,0x404d98\nXOR EAX,EAX\nCALL 0x00401180\nCMP dword ptr [R15 + 0x14],0x0\nJLE 0x00402130\nMOV R14D,0x404da6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [R15 + 0x18]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x004013a0\nMOV RCX,RAX\nTEST RCX,RCX\nCMOVZ RCX,R14\nMOV EDI,0x404cf9\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401180\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x14]\nCMP RBX,RAX\nJL 0x004020f0\nJMP 0x00402130\nMOV EDI,0x404de2\nXOR EAX,EAX\nCALL 0x00401180\nMOV EDI,0xa\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004010f0\n'
p389
S'41 57\n41 56\n53\n49 89 ff\nbf 7f 4d 40 00\n31 c0\ne8 1c f2 ff ff\n41 8b 37\n48 83 fe 04\n77 31\nff 24 f5 40 46 40 00\n41 0f b6 77 10\n48 85 f6\n0f 84 4e 01 00 00\nbf 88 4d 40 00\n31 c0\ne8 f2 f1 ff ff\n41 83 7f 14 00\n0f 8f 4a 01 00 00\ne9 92 01 00 00\nbf ef 4d 40 00\n31 c0\n5b\n41 5e\n41 5f\ne9 d1 f1 ff ff\n49 63 47 10\n48 c1 e0 04\n48 8b b0 b0 71 60 00\nbf b0 4d 40 00\n31 c0\ne8 b6 f1 ff ff\n41 83 7f 14 00\n0f 8e 5b 01 00 00\n41 be a6 4d 40 00\n31 db\n0f 1f 00\n49 8b 47 18\n48 8b 3c d8\ne8 b3 f3 ff ff\n48 89 c1\n48 85 c9\n49 0f 44 ce\nbf f9 4c 40 00\n31 c0\n48 89 ce\ne8 7a f1 ff ff\n48 ff c3\n49 63 47 14\n48 39 c3\n7c ce\ne9 19 01 00 00\n49 63 47 10\n48 c1 e0 04\n48 8b b0 b0 71 60 00\nbf b9 4d 40 00\n31 c0\ne8 4e f1 ff ff\n41 83 7f 14 00\n0f 8e f3 00 00 00\n31 db\n90\n49 8b 47 18\n0f b6 34 18\nbf c6 4d 40 00\n31 c0\ne8 2c f1 ff ff\n48 ff c3\n49 63 47 14\n48 39 c3\n7c e0\ne9 cb 00 00 00\n49 63 47 10\n48 c1 e0 04\n48 8b b0 b0 71 60 00\nbf cd 4d 40 00\n31 c0\n5b\n41 5e\n41 5f\ne9 fb f0 ff ff\nbf d7 4d 40 00\n31 c0\ne8 ef f0 ff ff\n41 83 7f 10 00\n0f 84 88 00 00 00\n41 83 7f 10 00\n0f 8e 89 00 00 00\n31 db\n0f 1f 80 00 00 00 00\n41 0f b6 74 1f 14\nbf eb 4d 40 00\n31 c0\ne8 be f0 ff ff\n48 ff c3\n49 63 47 10\n48 39 c3\n7c e2\neb 60\nbf 98 4d 40 00\n31 c0\ne8 a4 f0 ff ff\n41 83 7f 14 00\n7e 4d\n41 be a6 4d 40 00\n31 db\n0f 1f 44 00 00\n49 8b 47 18\n48 8b 3c d8\ne8 a3 f2 ff ff\n48 89 c1\n48 85 c9\n49 0f 44 ce\nbf f9 4c 40 00\n31 c0\n48 89 ce\ne8 6a f0 ff ff\n48 ff c3\n49 63 47 14\n48 39 c3\n7c ce\neb 0c\nbf e2 4d 40 00\n31 c0\ne8 50 f0 ff ff\nbf 0a 00 00 00\n5b\n41 5e\n41 5f\ne9 b1 ef ff ff\n'
p390
S'.text:0000000000401f50\n.text:0000000000401f52\n.text:0000000000401f54\n.text:0000000000401f55\n.text:0000000000401f58\n.text:0000000000401f5d\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f67\n.text:0000000000401f6b\n.text:0000000000401f6d\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7c\n.text:0000000000401f82\n.text:0000000000401f87\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f93\n.text:0000000000401f99\n.text:0000000000401f9e\n.text:0000000000401fa3\n.text:0000000000401fa5\n.text:0000000000401fa6\n.text:0000000000401fa8\n.text:0000000000401faa\n.text:0000000000401faf\n.text:0000000000401fb3\n.text:0000000000401fb7\n.text:0000000000401fbe\n.text:0000000000401fc3\n.text:0000000000401fc5\n.text:0000000000401fca\n.text:0000000000401fcf\n.text:0000000000401fd5\n.text:0000000000401fdb\n.text:0000000000401fdd\n.text:0000000000401fe0\n.text:0000000000401fe4\n.text:0000000000401fe8\n.text:0000000000401fed\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff7\n.text:0000000000401ffc\n.text:0000000000401ffe\n.text:0000000000402001\n.text:0000000000402006\n.text:0000000000402009\n.text:000000000040200d\n.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402017\n.text:000000000040201b\n.text:000000000040201f\n.text:0000000000402026\n.text:000000000040202b\n.text:000000000040202d\n.text:0000000000402032\n.text:0000000000402037\n.text:000000000040203d\n.text:000000000040203f\n.text:0000000000402040\n.text:0000000000402044\n.text:0000000000402048\n.text:000000000040204d\n.text:000000000040204f\n.text:0000000000402054\n.text:0000000000402057\n.text:000000000040205b\n.text:000000000040205e\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402069\n.text:000000000040206d\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207b\n.text:000000000040207c\n.text:000000000040207e\n.text:0000000000402080\n.text:0000000000402085\n.text:000000000040208a\n.text:000000000040208c\n.text:0000000000402091\n.text:0000000000402096\n.text:000000000040209c\n.text:00000000004020a1\n.text:00000000004020a7\n.text:00000000004020a9\n.text:00000000004020b0\n.text:00000000004020b6\n.text:00000000004020bb\n.text:00000000004020bd\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020c9\n.text:00000000004020cc\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d5\n.text:00000000004020d7\n.text:00000000004020dc\n.text:00000000004020e1\n.text:00000000004020e3\n.text:00000000004020e9\n.text:00000000004020eb\n.text:00000000004020f0\n.text:00000000004020f4\n.text:00000000004020f8\n.text:00000000004020fd\n.text:0000000000402100\n.text:0000000000402103\n.text:0000000000402107\n.text:000000000040210c\n.text:000000000040210e\n.text:0000000000402111\n.text:0000000000402116\n.text:0000000000402119\n.text:000000000040211d\n.text:0000000000402120\n.text:0000000000402122\n.text:0000000000402124\n.text:0000000000402129\n.text:000000000040212b\n.text:0000000000402130\n.text:0000000000402135\n.text:0000000000402136\n.text:0000000000402138\n.text:000000000040213a\n'
p391
tp392
sS'XSetModifierMapping'
p393
(S'\n__stdcall XSetModifierMapping()\n'
p394
V\u000avoid XSetModifierMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XSetModifierMapping_00607080)();\u000a  return;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x00607080]\n'
p396
S'ff 25 ca 5e 20 00\n'
p397
S'.plt:00000000004011b0\n'
p398
tp399
sS'print_modifier_map'
p400
(S'\n__stdcall print_modifier_map()\n'
p401
V\u000avoid print_modifier_map(void)\u000a\u000a{\u000a  PrintModifierMapping(map,stdout);\u000a  return;\u000a}\u000a\u000a
p402
S'MOV RDI,qword ptr [0x006072a0]\nMOV RSI,qword ptr [0x00607260]\nJMP 0x004016e0\n'
p403
S'48 8b 3d a9 4c 20 00\n48 8b 35 62 4c 20 00\ne9 dd f0 ff ff\n'
p404
S'.text:00000000004025f0\n.text:00000000004025f7\n.text:00000000004025fe\n'
p405
tp406
sS'grammar_usage'
p407
(S'\n__stdcall grammar_usage()\n'
p408
V\u000avoid grammar_usage(void)\u000a\u000a{\u000a  fprintf(stderr,"%s accepts the following input expressions:\u005cn\u005cn",ProgramName);\u000a  fprintf(stderr,"%s\u005cn",\u000a                    \u000a          "    pointer = default              reset pointer buttons to default\u005cn    pointer = NUMBER ...           set pointer button codes\u005cn    keycode NUMBER = [KEYSYM ...]  map keycode to given keysyms\u005cn    keysym KEYSYM = [KEYSYM ...]   look up keysym and do a keycode operation\u005cn    clear MODIFIER                 remove all keys for this modifier\u005cn    add MODIFIER = KEYSYM ...      add the keysyms to the modifier\u005cn    remove MODIFIER = KEYSYM ...   remove the keysyms from the modifier\u005cn\u005cnwhere NUMBER is a decimal, octal, or hex constant; KEYSYM is a valid\u005cnKey Symbol name; and MODIFIER is one of the eight modifier names:  Shift,\u005cnLock, Control, Mod1, Mod2, Mod3, Mod4, or Mod5.  Lines beginning with\u005cnan exclamation mark (!) are taken as comments.  Case is significant except\u005cnfor MODIFIER names.\u005cn\u005cnKeysyms on the left hand side of the = sign are looked up before any changes\u005cnare made; keysyms on the right are looked up after all of those on the left\u005cnhave been resolved.  This makes it possible to swap modifier keys.\u005cn\u005cn"\u000a         );\u000a                    /* WARNING: Subroutine does not return */\u000a  Exit(0);\u000a}\u000a\u000a
p409
S'PUSH RAX\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x405d44\nXOR EAX,EAX\nCALL 0x00401210\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404edc\nMOV EDX,0x405550\nXOR EAX,EAX\nCALL 0x00401210\nXOR EDI,EDI\nCALL 0x00403be0\n'
p410
S'50\n48 8b 3d 68 31 20 00\n48 8b 15 b9 31 20 00\nbe 44 5d 40 00\n31 c0\ne8 e5 d0 ff ff\n48 8b 3d 4e 31 20 00\nbe dc 4e 40 00\nba 50 55 40 00\n31 c0\ne8 cd d0 ff ff\n31 ff\ne8 96 fa ff ff\n'
p411
S'.text:0000000000404110\n.text:0000000000404111\n.text:0000000000404118\n.text:000000000040411f\n.text:0000000000404124\n.text:0000000000404126\n.text:000000000040412b\n.text:0000000000404132\n.text:0000000000404137\n.text:000000000040413c\n.text:000000000040413e\n.text:0000000000404143\n.text:0000000000404145\n'
p412
tp413
sS'XSetPointerMapping'
p414
(S'\n__stdcall XSetPointerMapping()\n'
p415
V\u000avoid XSetPointerMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XSetPointerMapping_00607100)();\u000a  return;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00607100]\n'
p417
S'ff 25 4a 5e 20 00\n'
p418
S'.plt:00000000004012b0\n'
p419
tp420
sS'badheader'
p421
(S'\n__stdcall badheader()\n'
p422
V\u000aundefined8 badheader(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  fprintf(stderr,"%s:  %s:%d:  bad ",ProgramName,inputFilename,(ulong)(lineno + 1));\u000a  parse_errors = parse_errors + 1;\u000a  return in_RAX;\u000a}\u000a\u000a
p423
S'PUSH RAX\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV RCX,qword ptr [0x00607250]\nMOV R8D,dword ptr [0x006072b4]\nINC R8D\nMOV ESI,0x4047eb\nXOR EAX,EAX\nCALL 0x00401210\nINC dword ptr [0x006072c8]\nPOP RAX\nRET\n'
p424
S'50\n48 8b 3d 08 54 20 00\n48 8b 15 59 54 20 00\n48 8b 0d ca 53 20 00\n44 8b 05 27 54 20 00\n41 ff c0\nbe eb 47 40 00\n31 c0\ne8 74 f3 ff ff\nff 05 26 54 20 00\n58\nc3\n'
p425
S'.text:0000000000401e70\n.text:0000000000401e71\n.text:0000000000401e78\n.text:0000000000401e7f\n.text:0000000000401e86\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e95\n.text:0000000000401e97\n.text:0000000000401e9c\n.text:0000000000401ea2\n.text:0000000000401ea3\n'
p426
tp427
sS'print_key_table'
p428
(S'\n__stdcall print_key_table()\n'
p429
V\u000avoid print_key_table(FILE *pFParm1)\u000a\u000a{\u000a  PrintKeyTable(pFParm1);\u000a  return;\u000a}\u000a\u000a
p430
S'MOV RSI,qword ptr [0x00607260]\nJMP 0x00401860\n'
p431
S'48 8b 35 49 4c 20 00\ne9 44 f2 ff ff\n'
p432
S'.text:0000000000402610\n.text:0000000000402617\n'
p433
tp434
sS'print_pointer_map'
p435
(S'\n__stdcall print_pointer_map()\n'
p436
V\u000avoid print_pointer_map(void)\u000a\u000a{\u000a  PrintPointerMap(stdout);\u000a  return;\u000a}\u000a\u000a
p437
S'MOV RDI,qword ptr [0x00607260]\nJMP 0x00401a80\n'
p438
S'48 8b 3d 39 4c 20 00\ne9 54 f4 ff ff\n'
p439
S'.text:0000000000402620\n.text:0000000000402627\n'
p440
tp441
sS'do_pointer'
p442
(S'\n__stdcall do_pointer(char * line)\n'
p443
V\u000avoid do_pointer(char *line)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  char *str;\u000a  op *p;\u000a  long lVar6;\u000a  char *__s1;\u000a  int in_ESI;\u000a  size_t __size;\u000a  char *__format;\u000a  uint uVar7;\u000a  uchar buttons [256];\u000a  ulong local_140;\u000a  byte local_138 [264];\u000a  \u000a  if (((line == (char *)0x0) || (in_ESI < 2)) || (*line == 0)) {\u000a    badheader();\u000a    __s1 = "buttons input line";\u000a    __size = 0x12;\u000a  }\u000a  else {\u000a    uVar1 = XGetPointerMapping(dpy,local_138,0x100);\u000a    iVar2 = skip_space(line);\u000a    if (line[(long)iVar2] == '=') {\u000a      iVar3 = skip_space(line + (long)iVar2 + 1);\u000a      __s1 = line + (long)iVar2 + (long)iVar3 + 1;\u000a      iVar3 = ((in_ESI - iVar2) + -1) - iVar3;\u000a      uVar7 = 0;\u000a      if (iVar3 < 7) goto LAB_00403111;\u000a      iVar2 = strncasecmp(__s1,"default",7);\u000a      uVar7 = 0;\u000a      if (iVar2 != 0) {\u000a        do {\u000a          iVar2 = skip_space(__s1);\u000a          if (__s1[(long)iVar2] == 0) break;\u000a          __s1 = __s1 + (long)iVar2;\u000a          iVar4 = skip_word(__s1);\u000a          if (iVar4 < 1) {\u000a            badheader();\u000a            __format = "skip of word in buttons line:  %s";\u000a            goto LAB_0040322d;\u000a          }\u000a          str = copy_to_scratch(__s1);\u000a          if (str == (char *)0x0) {\u000a            return;\u000a          }\u000a          iVar5 = parse_number(str,&local_140);\u000a          if ((iVar5 == 0) || (0xff < local_140)) {\u000a            badheader();\u000a            __format = "value %s given for buttons list";\u000a            __s1 = str;\u000a            goto LAB_0040322d;\u000a          }\u000a          lVar6 = (long)(int)uVar7;\u000a          uVar7 = uVar7 + 1;\u000a          local_138[lVar6] = (byte)local_140;\u000a          __s1 = __s1 + (long)iVar4;\u000a          iVar3 = (iVar3 - iVar2) - iVar4;\u000aLAB_00403111:\u000a        } while (0 < iVar3);\u000a        if ((0 < (int)uVar7) && (uVar7 != uVar1)) {\u000a          fprintf(stderr,"Warning: Only changing the first %d of %d buttons.\u005cn",(ulong)uVar7);\u000a          uVar7 = uVar1;\u000a        }\u000a      }\u000a      p = (op *)malloc(0x118);\u000a      if (p != (op *)0x0) {\u000a        *(undefined4 *)*p = 4;\u000a        *(uint *)(*p + 0x10) = uVar7;\u000a        if (0 < (int)uVar7) {\u000a          lVar6 = 0;\u000a          do {\u000a            (*p)[lVar6 + 0x14] = local_138[lVar6];\u000a            lVar6 = lVar6 + 1;\u000a          } while (lVar6 < (long)*(int *)(*p + 0x10));\u000a        }\u000a        add_to_work_queue(p);\u000a        return;\u000a      }\u000a      badheader();\u000a      __format = "attempt to allocate a %ld byte pointer opcode";\u000a      __s1 = (char *)0x118;\u000aLAB_0040322d:\u000a      fprintf(stderr,__format,__s1);\u000a      goto LAB_00403232;\u000a    }\u000a    badheader();\u000a    __s1 = "buttons pointer code list, missing equal sign";\u000a    __size = 0x2d;\u000a  }\u000a  fwrite(__s1,__size,1,stderr);\u000aLAB_00403232:\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p444
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x118\nMOV EBP,ESI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004030c1\nCMP EBP,0x2\nJL 0x004030c1\nCMP byte ptr [RBX],0x0\nJZ 0x004030c1\nMOV RDI,qword ptr [0x006072b8]\nLEA RSI,[RSP + 0x10]\nMOV EDX,0x100\nCALL 0x00401240\nMOV R14D,EAX\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401eb0\nCDQE\nCMP byte ptr [RBX + RAX*0x1],0x3d\nJNZ 0x004030d9\nADD RBX,RAX\nSUB EBP,EAX\nLEA RDI,[RBX + 0x1]\nDEC EBP\nMOV ESI,EBP\nCALL 0x00401eb0\nCDQE\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nSUB EBP,EAX\nXOR R15D,R15D\nCMP EBP,0x7\nJL 0x00403111\nMOV ESI,0x404de3\nMOV EDX,0x7\nMOV RDI,RBX\nCALL 0x00401270\nXOR R15D,R15D\nTEST EAX,EAX\nJNZ 0x00403115\nJMP 0x0040319c\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404c9a\nMOV ESI,0x12\nJMP 0x004030ef\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404cad\nMOV ESI,0x2d\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x00403232\nMOVSXD RCX,R15D\nINC R15D\nMOV byte ptr [RSP + RCX*0x1 + 0x10],AL\nMOVSXD RAX,R12D\nADD RBX,RAX\nSUB EBP,R12D\nTEST EBP,EBP\nJLE 0x00403192\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00401eb0\nCDQE\nCMP byte ptr [RBX + RAX*0x1],0x0\nJZ 0x00403192\nADD RBX,RAX\nSUB EBP,EAX\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00403920\nMOV R12D,EAX\nTEST R12D,R12D\nJLE 0x00403217\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00403680\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00403243\nLEA RSI,[RSP + 0x8]\nMOV RDI,R13\nCALL 0x00403720\nTEST EAX,EAX\nJZ 0x00403177\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,0x100\nJC 0x004030fe\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404cfd\nXOR EAX,EAX\nMOV RDX,R13\nJMP 0x0040322d\nTEST R15D,R15D\nJLE 0x0040319c\nCMP R15D,R14D\nJNZ 0x004031f9\nMOV EDI,0x118\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x004031df\nMOV dword ptr [RAX],0x4\nMOV dword ptr [RAX + 0x10],R15D\nTEST R15D,R15D\nJLE 0x004031d5\nXOR ECX,ECX\nNOP dword ptr [RAX]\nMOVZX EDX,byte ptr [RSP + RCX*0x1 + 0x10]\nMOV byte ptr [RAX + RCX*0x1 + 0x14],DL\nINC RCX\nMOVSXD RDX,dword ptr [RAX + 0x10]\nCMP RCX,RDX\nJL 0x004031c0\nMOV RDI,RAX\nCALL 0x004035c0\nJMP 0x00403243\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404d51\nMOV EDX,0x118\nXOR EAX,EAX\nJMP 0x0040322d\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404d1d\nXOR EAX,EAX\nMOV EDX,R15D\nMOV ECX,R14D\nCALL 0x00401210\nMOV R15D,R14D\nJMP 0x0040319c\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404cdb\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nADD RSP,0x118\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p445
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 01 00 00\n89 f5\n48 89 fb\n48 85 db\n74 76\n83 fd 02\n7c 71\n80 3b 00\n74 6c\n48 8b 3d 5c 42 20 00\n48 8d 74 24 10\nba 00 01 00 00\ne8 d5 e1 ff ff\n41 89 c6\n48 89 df\n89 ee\ne8 38 ee ff ff\n48 98\n80 3c 03 3d\n75 59\n48 01 c3\n29 c5\n48 8d 7b 01\nff cd\n89 ee\ne8 1e ee ff ff\n48 98\n48 8d 5c 03 01\n29 c5\n45 31 ff\n83 fd 07\n7c 6e\nbe e3 4d 40 00\nba 07 00 00 00\n48 89 df\ne8 bb e1 ff ff\n45 31 ff\n85 c0\n75 59\ne9 db 00 00 00\ne8 aa ed ff ff\n48 8b 0d b3 41 20 00\nbf 9a 4c 40 00\nbe 12 00 00 00\neb 16\ne8 92 ed ff ff\n48 8b 0d 9b 41 20 00\nbf ad 4c 40 00\nbe 2d 00 00 00\nba 01 00 00 00\ne8 77 e2 ff ff\ne9 34 01 00 00\n49 63 cf\n41 ff c7\n88 44 0c 10\n49 63 c4\n48 01 c3\n44 29 e5\n85 ed\n7e 7d\n48 89 df\n89 ee\ne8 91 ed ff ff\n48 98\n80 3c 03 00\n74 6b\n48 01 c3\n29 c5\n48 89 df\n89 ee\ne8 ea 07 00 00\n41 89 c4\n45 85 e4\n0f 8e d5 00 00 00\n48 89 df\n44 89 e6\ne8 33 05 00 00\n49 89 c5\n4d 85 ed\n0f 84 ea 00 00 00\n48 8d 74 24 08\n4c 89 ef\ne8 ba 05 00 00\n85 c0\n74 0d\n48 8b 44 24 08\n48 3d 00 01 00 00\n72 87\ne8 f4 ec ff ff\n48 8b 3d fd 40 20 00\nbe fd 4c 40 00\n31 c0\n4c 89 ea\ne9 9b 00 00 00\n45 85 ff\n7e 05\n45 39 f7\n75 5d\nbf 18 01 00 00\ne8 ba e0 ff ff\n48 85 c0\n74 34\nc7 00 04 00 00 00\n44 89 78 10\n45 85 ff\n7e 1b\n31 c9\n0f 1f 40 00\n0f b6 54 0c 10\n88 54 08 14\n48 ff c1\n48 63 50 10\n48 39 d1\n7c eb\n48 89 c7\ne8 e3 03 00 00\neb 64\ne8 8c ec ff ff\n48 8b 3d 95 40 20 00\nbe 51 4d 40 00\nba 18 01 00 00\n31 c0\neb 34\n48 8b 3d 80 40 20 00\nbe 1d 4d 40 00\n31 c0\n44 89 fa\n44 89 f1\ne8 fe df ff ff\n45 89 f7\neb 85\ne8 54 ec ff ff\n48 8b 3d 5d 40 20 00\nbe db 4c 40 00\n31 c0\n48 89 da\ne8 de df ff ff\n48 8b 35 47 40 20 00\nbf 0a 00 00 00\ne8 5d df ff ff\n48 81 c4 18 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p446
S'.text:0000000000403030\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403035\n.text:0000000000403037\n.text:0000000000403039\n.text:000000000040303a\n.text:0000000000403041\n.text:0000000000403043\n.text:0000000000403046\n.text:0000000000403049\n.text:000000000040304b\n.text:000000000040304e\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403055\n.text:000000000040305c\n.text:0000000000403061\n.text:0000000000403066\n.text:000000000040306b\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403073\n.text:0000000000403078\n.text:000000000040307a\n.text:000000000040307e\n.text:0000000000403080\n.text:0000000000403083\n.text:0000000000403085\n.text:0000000000403089\n.text:000000000040308b\n.text:000000000040308d\n.text:0000000000403092\n.text:0000000000403094\n.text:0000000000403099\n.text:000000000040309b\n.text:000000000040309e\n.text:00000000004030a1\n.text:00000000004030a3\n.text:00000000004030a8\n.text:00000000004030ad\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030b8\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030c1\n.text:00000000004030c6\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d7\n.text:00000000004030d9\n.text:00000000004030de\n.text:00000000004030e5\n.text:00000000004030ea\n.text:00000000004030ef\n.text:00000000004030f4\n.text:00000000004030f9\n.text:00000000004030fe\n.text:0000000000403101\n.text:0000000000403104\n.text:0000000000403108\n.text:000000000040310b\n.text:000000000040310e\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311a\n.text:000000000040311f\n.text:0000000000403121\n.text:0000000000403125\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403131\n.text:0000000000403136\n.text:0000000000403139\n.text:000000000040313c\n.text:0000000000403142\n.text:0000000000403145\n.text:0000000000403148\n.text:000000000040314d\n.text:0000000000403150\n.text:0000000000403153\n.text:0000000000403159\n.text:000000000040315e\n.text:0000000000403161\n.text:0000000000403166\n.text:0000000000403168\n.text:000000000040316a\n.text:000000000040316f\n.text:0000000000403175\n.text:0000000000403177\n.text:000000000040317c\n.text:0000000000403183\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319c\n.text:00000000004031a1\n.text:00000000004031a6\n.text:00000000004031a9\n.text:00000000004031ab\n.text:00000000004031b1\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031ba\n.text:00000000004031bc\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031d0\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031d8\n.text:00000000004031dd\n.text:00000000004031df\n.text:00000000004031e4\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f5\n.text:00000000004031f7\n.text:00000000004031f9\n.text:0000000000403200\n.text:0000000000403205\n.text:0000000000403207\n.text:000000000040320a\n.text:000000000040320d\n.text:0000000000403212\n.text:0000000000403215\n.text:0000000000403217\n.text:000000000040321c\n.text:0000000000403223\n.text:0000000000403228\n.text:000000000040322a\n.text:000000000040322d\n.text:0000000000403232\n.text:0000000000403239\n.text:000000000040323e\n.text:0000000000403243\n.text:000000000040324a\n.text:000000000040324b\n.text:000000000040324d\n.text:000000000040324f\n.text:0000000000403251\n.text:0000000000403253\n.text:0000000000403254\n'
p447
tp448
sS'_init'
p449
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p450
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00606ff8;\u000a  if (PTR___gmon_start___00606ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00606ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00606ff8]\nTEST RAX,RAX\nJZ 0x004010c2\nCALL RAX\nADD RSP,0x8\nRET\n'
p452
S'48 83 ec 08\n48 8b 05 3d 5f 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p453
S'.init:00000000004010b0\n.init:00000000004010b4\n.init:00000000004010bb\n.init:00000000004010be\n.init:00000000004010c0\n.init:00000000004010c2\n.init:00000000004010c6\n'
p454
tp455
sS'exec_remove'
p456
(S'\n__stdcall exec_remove(op_removemodifier * oprm)\n'
p457
V\u000aint exec_remove(op_removemodifier *oprm)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  \u000a  if (oprm->count < 1) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    lVar2 = 0;\u000a    iVar3 = 0;\u000a    do {\u000a      iVar1 = RemoveModifier(&map);\u000a      if (iVar1 < 0) {\u000a        iVar3 = -1;\u000a      }\u000a      lVar2 = lVar2 + 1;\u000a    } while (lVar2 < (long)oprm->count);\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP dword ptr [R14 + 0x14],0x0\nJLE 0x004025ba\nXOR EBX,EBX\nMOV R15D,0xffffffff\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [R14 + 0x18]\nMOV EDX,dword ptr [R14 + 0x10]\nMOVZX ESI,byte ptr [RAX + RBX*0x1]\nMOV EDI,0x6072a0\nCALL 0x00401680\nTEST EAX,EAX\nCMOVS EBP,R15D\nINC RBX\nMOVSXD RAX,dword ptr [R14 + 0x14]\nCMP RBX,RAX\nJL 0x00402590\nJMP 0x004025bc\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n41 83 7e 14 00\n7e 39\n31 db\n41 bf ff ff ff ff\n31 ed\n0f 1f 44 00 00\n49 8b 46 18\n41 8b 56 10\n0f b6 34 18\nbf a0 72 60 00\ne8 da f0 ff ff\n85 c0\n41 0f 48 ef\n48 ff c3\n49 63 46 14\n48 39 c3\n7c d8\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000402570\n.text:0000000000402571\n.text:0000000000402573\n.text:0000000000402575\n.text:0000000000402576\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257f\n.text:0000000000402581\n.text:0000000000402583\n.text:0000000000402589\n.text:000000000040258b\n.text:0000000000402590\n.text:0000000000402594\n.text:0000000000402598\n.text:000000000040259c\n.text:00000000004025a1\n.text:00000000004025a6\n.text:00000000004025a8\n.text:00000000004025ac\n.text:00000000004025af\n.text:00000000004025b3\n.text:00000000004025b6\n.text:00000000004025b8\n.text:00000000004025ba\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c2\n.text:00000000004025c3\n.text:00000000004025c5\n.text:00000000004025c7\n.text:00000000004025c8\n'
p461
tp462
sS'process_file'
p463
(S'\n__stdcall process_file(char * filename)\n'
p464
V\u000avoid process_file(char *filename)\u000a\u000a{\u000a  FILE *__stream;\u000a  char *pcVar1;\u000a  char buffer [8192];\u000a  char local_2018 [8192];\u000a  \u000a  if (filename == (char *)0x0) {\u000a    filename = "stdin";\u000a    __stream = stdin;\u000a  }\u000a  else {\u000a    __stream = fopen(filename,"r");\u000a    if (__stream == (FILE *)0x0) {\u000a      fprintf(stderr,"%s:  unable to open file \u005c'%s\u005c' for reading\u005cn",ProgramName,filename);\u000a      parse_errors = parse_errors + 1;\u000a      return;\u000a    }\u000a  }\u000a  inputFilename = filename;\u000a  if (verbose != 0) {\u000a    inputFilename = filename;\u000a    printf("! %s:\u005cn",filename);\u000a  }\u000a  lineno = 0;\u000a  local_2018[0] = 0;\u000a  pcVar1 = fgets(local_2018,0x2000,__stream);\u000a  while (pcVar1 != (char *)0x0) {\u000a    process_line(local_2018);\u000a    lineno = lineno + 1;\u000a    local_2018[0] = 0;\u000a    pcVar1 = fgets(local_2018,0x2000,__stream);\u000a  }\u000a  inputFilename = "commandline";\u000a  lineno = 0;\u000a  fclose(__stream);\u000a  return;\u000a}\u000a\u000a
p465
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x2000\nMOV R14,RDI\nTEST R14,R14\nJZ 0x004039a1\nMOV ESI,0x404814\nMOV RDI,R14\nCALL 0x00401340\nMOV R15,RAX\nTEST R15,R15\nJNZ 0x004039ae\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404e82\nXOR EAX,EAX\nMOV RCX,R14\nCALL 0x00401210\nINC dword ptr [0x006072c8]\nJMP 0x00403a44\nMOV R15,qword ptr [0x00607270]\nMOV R14D,0x404e7c\nMOV qword ptr [0x00607250],R14\nCMP dword ptr [0x006072c0],0x0\nJZ 0x004039cd\nMOV EDI,0x404ead\nXOR EAX,EAX\nMOV RSI,R14\nCALL 0x00401180\nMOV dword ptr [0x006072b4],0x0\nMOV byte ptr [RSP],0x0\nMOV RDI,RSP\nMOV ESI,0x2000\nMOV RDX,R15\nCALL 0x004011e0\nTEST RAX,RAX\nJZ 0x00403a27\nMOV RBX,RSP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,RBX\nCALL 0x00403a60\nINC dword ptr [0x006072b4]\nMOV byte ptr [RSP],0x0\nMOV ESI,0x2000\nMOV RDI,RBX\nMOV RDX,R15\nCALL 0x004011e0\nTEST RAX,RAX\nJNZ 0x00403a00\nMOV qword ptr [0x00607250],0x404e70\nMOV dword ptr [0x006072b4],0x0\nMOV RDI,R15\nCALL 0x00401160\nADD RSP,0x2000\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p466
S'41 57\n41 56\n53\n48 81 ec 00 20 00 00\n49 89 fe\n4d 85 f6\n74 3d\nbe 14 48 40 00\n4c 89 f7\ne8 cf d9 ff ff\n49 89 c7\n4d 85 ff\n75 35\n48 8b 3d 00 39 20 00\n48 8b 15 51 39 20 00\nbe 82 4e 40 00\n31 c0\n4c 89 f1\ne8 7a d8 ff ff\nff 05 2c 39 20 00\ne9 a3 00 00 00\n4c 8b 3d c8 38 20 00\n41 be 7c 4e 40 00\n4c 89 35 9b 38 20 00\n83 3d 04 39 20 00 00\n74 0f\nbf ad 4e 40 00\n31 c0\n4c 89 f6\ne8 b3 d7 ff ff\nc7 05 dd 38 20 00 00 00 00 00\nc6 04 24 00\n48 89 e7\nbe 00 20 00 00\n4c 89 fa\ne8 f5 d7 ff ff\n48 85 c0\n74 37\n48 89 e3\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 df\ne8 58 00 00 00\nff 05 a6 38 20 00\nc6 04 24 00\nbe 00 20 00 00\n48 89 df\n4c 89 fa\ne8 be d7 ff ff\n48 85 c0\n75 d9\n48 c7 05 1e 38 20 00 70 4e 40 00\nc7 05 78 38 20 00 00 00 00 00\n4c 89 ff\ne8 1c d7 ff ff\n48 81 c4 00 20 00 00\n5b\n41 5e\n41 5f\nc3\n'
p467
S'.text:0000000000403950\n.text:0000000000403952\n.text:0000000000403954\n.text:0000000000403955\n.text:000000000040395c\n.text:000000000040395f\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403969\n.text:000000000040396c\n.text:0000000000403971\n.text:0000000000403974\n.text:0000000000403977\n.text:0000000000403979\n.text:0000000000403980\n.text:0000000000403987\n.text:000000000040398c\n.text:000000000040398e\n.text:0000000000403991\n.text:0000000000403996\n.text:000000000040399c\n.text:00000000004039a1\n.text:00000000004039a8\n.text:00000000004039ae\n.text:00000000004039b5\n.text:00000000004039bc\n.text:00000000004039be\n.text:00000000004039c3\n.text:00000000004039c5\n.text:00000000004039c8\n.text:00000000004039cd\n.text:00000000004039d7\n.text:00000000004039db\n.text:00000000004039de\n.text:00000000004039e3\n.text:00000000004039e6\n.text:00000000004039eb\n.text:00000000004039ee\n.text:00000000004039f0\n.text:00000000004039f3\n.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a08\n.text:0000000000403a0e\n.text:0000000000403a12\n.text:0000000000403a17\n.text:0000000000403a1a\n.text:0000000000403a1d\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a27\n.text:0000000000403a32\n.text:0000000000403a3c\n.text:0000000000403a3f\n.text:0000000000403a44\n.text:0000000000403a4b\n.text:0000000000403a4c\n.text:0000000000403a4e\n.text:0000000000403a50\n'
p468
tp469
sS'main'
p470
(S'\n__stdcall main(char * * argv)\n'
p471
V\u000aint main(char **argv)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  bool bVar3;\u000a  bool bVar4;\u000a  bool bVar5;\u000a  bool bVar6;\u000a  FILE *__stream;\u000a  int iVar7;\u000a  uint uVar8;\u000a  __int32_t **pp_Var9;\u000a  undefined8 uVar10;\u000a  undefined8 uVar11;\u000a  char *arg;\u000a  int iVar12;\u000a  uint uVar13;\u000a  char **in_RSI;\u000a  char *__s1;\u000a  char cmd [11];\u000a  char *local_40;\u000a  undefined2 local_38;\u000a  undefined local_36;\u000a  \u000a  iVar2 = (int)argv;\u000a  ProgramName = *in_RSI;\u000a  if (iVar2 < 2) {\u000a    arg = (char *)0x0;\u000a  }\u000a  else {\u000a    iVar12 = 1;\u000a    arg = (char *)0x0;\u000a    do {\u000a      __s1 = in_RSI[(long)iVar12];\u000a      if (*__s1 == '-') {\u000a        switch((int)__s1[1]) {\u000a        case 100:\u000a          iVar12 = iVar12 + 1;\u000a          if (iVar2 <= iVar12) goto LAB_0040407b;\u000a          arg = in_RSI[(long)iVar12];\u000a          break;\u000a        case 0x65:\u000a        case 0x66:\u000a        case 0x69:\u000a        case 0x6a:\u000a        case 0x6b:\u000a        case 0x6c:\u000a        case 0x6d:\u000a        case 0x6e:\u000a        case 0x6f:\u000a        case 0x70:\u000a        case 0x71:\u000a        case 0x72:\u000a        case 0x73:\u000a        case 0x74:\u000a        case 0x75:\u000a          break;\u000a        case 0x67:\u000a          goto switchD_00403c58_caseD_67;\u000a        case 0x68:\u000a          goto switchD_00403c58_caseD_68;\u000a        case 0x76:\u000a          iVar7 = strcmp(__s1,"-version");\u000a          if (iVar7 == 0) goto LAB_00404080;\u000a          break;\u000a        default:\u000a          if ((int)__s1[1] == 0x3f) goto switchD_00403c58_caseD_68;\u000a        }\u000a      }\u000a      iVar12 = iVar12 + 1;\u000a    } while (iVar12 < iVar2);\u000a  }\u000a  dpy = (Display *)XOpenDisplay(arg);\u000a  __s1 = ProgramName;\u000a  __stream = stderr;\u000a  if (dpy == (Display *)0x0) {\u000a    uVar10 = XDisplayName(arg);\u000a    fprintf(__stream,"%s:  unable to open display \u005c'%s\u005c'\u005cn",__s1,uVar10);\u000a                    /* WARNING: Subroutine does not return */\u000a    Exit(1);\u000a  }\u000a  XDisplayKeycodes(dpy,&min_keycode,&max_keycode);\u000a  initialize_map();\u000a  if (iVar2 < 2) {\u000a    uVar13 = 0;\u000a    bVar6 = false;\u000a    bVar5 = false;\u000a    bVar4 = false;\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    iVar12 = 1;\u000a    bVar3 = false;\u000a    bVar4 = false;\u000a    bVar5 = false;\u000a    bVar6 = false;\u000a    uVar13 = 0;\u000a    do {\u000a      arg = in_RSI[(long)iVar12];\u000a      if (*arg == '+') {\u000a        uVar13 = SEXT14(arg[1]);\u000a        switch(uVar13) {\u000a        case 0x31:\u000a        case 0x32:\u000a        case 0x33:\u000a        case 0x34:\u000a        case 0x35:\u000a          if (iVar2 <= iVar12 + 1) goto LAB_00403fa8;\u000a          iVar7 = asprintf(&local_40,"add mod%c = %s",(ulong)uVar13);\u000a          if (iVar7 != -1) goto LAB_00403f60;\u000a          goto LAB_00404043;\u000a        default:\u000a          unknown_arg(arg);\u000a          goto LAB_00403fa8;\u000a        case 0x43:\u000a        case 0x4c:\u000a        case 0x53:\u000a          pp_Var9 = __ctype_tolower_loc();\u000a          arg[1] = *(char *)(*pp_Var9 + (long)(int)uVar13);\u000a          break;\u000a        case 99:\u000a        case 0x6c:\u000a        case 0x73:\u000a          break;\u000a        }\u000a        if (iVar12 + 1 < iVar2) {\u000a          uVar10 = 0x405c72;\u000a          if (arg[1] == 'l') {\u000a            uVar10 = 0x405c67;\u000a          }\u000a          if (arg[1] == 's') {\u000a            uVar10 = 0x405c5b;\u000a          }\u000a          iVar7 = asprintf(&local_40,"add %s = %s",uVar10);\u000a          if (iVar7 == -1) {\u000a            FatalError("Could not allocate memory for remove cmd");\u000aswitchD_00403e23_caseD_67:\u000a            grammar_usage();\u000a            goto switchD_00403e23_caseD_1;\u000a          }\u000aLAB_00403f60:\u000a          iVar12 = iVar12 + 1;\u000a          arg = local_40;\u000a          goto LAB_00403f65;\u000a        }\u000aLAB_00403fa8:\u000a        missing_arg(arg);\u000a        goto LAB_00403fb0;\u000a      }\u000a      if (*arg != '-') {\u000aLAB_00403eb3:\u000a        process_file(arg);\u000a        goto LAB_00403f6a;\u000a      }\u000a      cVar1 = arg[1];\u000a      switch(cVar1) {\u000a      case 0:\u000a        arg = (char *)0x0;\u000a        goto LAB_00403eb3;\u000a      default:\u000a        goto switchD_00403e23_caseD_1;\u000a      case '1':\u000a      case '2':\u000a      case '3':\u000a      case '4':\u000a      case '5':\u000a        local_40 = (char *)0x6f6d207261656c63;\u000a        local_36 = 0;\u000a        local_38 = CONCAT11(arg[1],100);\u000a        process_line((char *)&local_40);\u000a        break;\u000a      case 'C':\u000a        arg = "clear control";\u000a        goto LAB_00403f65;\u000a      case 'L':\u000a        arg = "clear lock";\u000a        goto LAB_00403f65;\u000a      case 'S':\u000a        arg = "clear shift";\u000a        goto LAB_00403f65;\u000a      case 'c':\u000a      case 'l':\u000a      case 's':\u000a        if (iVar2 <= iVar12 + 1) goto LAB_0040404d;\u000a        uVar10 = 0x405c72;\u000a        if (cVar1 == 'l') {\u000a          uVar10 = 0x405c67;\u000a        }\u000a        uVar11 = 0x405c5b;\u000a        if (cVar1 != 's') {\u000a          uVar11 = uVar10;\u000a        }\u000a        iVar7 = asprintf(&local_40,"remove %s = %s",uVar11);\u000a        if (iVar7 != -1) goto LAB_00403f60;\u000a        goto LAB_00404055;\u000a      case 'd':\u000a        iVar12 = iVar12 + 1;\u000a        break;\u000a      case 'e':\u000a        iVar12 = iVar12 + 1;\u000a        if (iVar2 <= iVar12) goto LAB_0040404d;\u000a        arg = in_RSI[(long)iVar12];\u000aLAB_00403f65:\u000a        process_line(arg);\u000aLAB_00403f6a:\u000a        uVar13 = 1;\u000a        break;\u000a      case 'g':\u000a        goto switchD_00403e23_caseD_67;\u000a      case 'n':\u000a        dontExecute = 1;\u000a        break;\u000a      case 'p':\u000a        cVar1 = arg[2];\u000a        uVar13 = 1;\u000a        if ('l' < cVar1) {\u000a          if (cVar1 == 'm') goto LAB_00403de3;\u000a          if (cVar1 != 'p') goto LAB_0040405f;\u000a          uVar13 = 1;\u000a          bVar6 = true;\u000a          break;\u000a        }\u000a        if (cVar1 == 0) {\u000aLAB_00403de3:\u000a          bVar3 = true;\u000a          break;\u000a        }\u000a        if (cVar1 == 'k') {\u000a          uVar13 = 1;\u000a          if (arg[3] == 0) {\u000a            bVar4 = true;\u000a          }\u000a          else {\u000a            if (arg[3] != 'e') goto LAB_00404067;\u000a            uVar13 = 1;\u000a            bVar5 = true;\u000a          }\u000a          break;\u000a        }\u000a        goto LAB_0040405f;\u000a      case 'q':\u000a        verbose = 0;\u000a        break;\u000a      case 'v':\u000a        verbose = 1;\u000a      }\u000a      iVar12 = iVar12 + 1;\u000a    } while (iVar12 < iVar2);\u000a  }\u000a  if (dontExecute != 0) {\u000a    print_work_queue();\u000a                    /* WARNING: Subroutine does not return */\u000a    Exit(0);\u000a  }\u000a  if (parse_errors == 0) {\u000a    uVar8 = execute_work_queue();\u000a    uVar8 = uVar8 >> 0x1f;\u000a  }\u000a  else {\u000aLAB_00403fb0:\u000a    fprintf(stderr,"%s:  %d error%s encountered, aborting.\u005cn",ProgramName);\u000a    uVar8 = 1;\u000a  }\u000a  if ((uVar13 == 0) || (bVar3)) {\u000a    print_modifier_map();\u000a  }\u000a  if (bVar4) {\u000a    print_key_table(0);\u000a  }\u000a  if (bVar5) {\u000a    print_key_table(1);\u000a  }\u000a  if (bVar6) {\u000a    print_pointer_map();\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  Exit((ulong)uVar8);\u000aswitchD_00403e23_caseD_1:\u000a  unknown_arg(arg);\u000aLAB_00404043:\u000a  FatalError("Could not allocate memory for add cmd");\u000aLAB_0040404d:\u000a  missing_arg(arg);\u000aLAB_00404055:\u000a  FatalError("Could not allocate memory for remove cmd");\u000aLAB_0040405f:\u000a  unknown_arg(arg);\u000aLAB_00404067:\u000a  unknown_arg(arg);\u000aswitchD_00403c58_caseD_68:\u000a  __s1 = (char *)0x0;\u000a  usage();\u000aswitchD_00403c58_caseD_67:\u000a  grammar_usage();\u000aLAB_0040407b:\u000a  missing_arg(__s1);\u000aLAB_00404080:\u000a  puts("xmodmap 1.0.9");\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15,RSI\nMOV R12D,EDI\nMOV RAX,qword ptr [R15]\nMOV qword ptr [0x006072d8],RAX\nCMP R12D,0x2\nJL 0x00403c99\nMOV EBP,0x1\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [R15 + RAX*0x8]\nCMP byte ptr [RDI],0x2d\nJNZ 0x00403c90\nMOVSX ECX,byte ptr [RDI + 0x1]\nLEA EAX,[RCX + -0x64]\nCMP EAX,0x12\nJA 0x00403c86\nJMP qword ptr [0x404ee0 + RAX*0x8]\nINC EBP\nCMP EBP,R12D\nJGE 0x0040407b\nMOVSXD RAX,EBP\nMOV RBX,qword ptr [R15 + RAX*0x8]\nJMP 0x00403c90\nMOV ESI,0x405c1c\nCALL 0x004011f0\nTEST EAX,EAX\nJNZ 0x00403c90\nJMP 0x00404080\nCMP ECX,0x3f\nJZ 0x0040406f\nNOP\nINC EBP\nCMP EBP,R12D\nJL 0x00403c40\nJMP 0x00403c9b\nXOR EBX,EBX\nMOV RDI,RBX\nCALL 0x00401200\nMOV qword ptr [0x006072b8],RAX\nTEST RAX,RAX\nJZ 0x00404091\nMOV ESI,0x6072d4\nMOV EDX,0x6072d0\nMOV RDI,RAX\nCALL 0x00401310\nCALL 0x00401d00\nCMP R12D,0x2\nJL 0x004040c6\nMOV R13D,0x1\nLEA R14,[RSP + 0x18]\nMOV dword ptr [RSP + 0x14],0x0\nMOV dword ptr [RSP + 0x8],0x0\nMOV dword ptr [RSP + 0xc],0x0\nMOV dword ptr [RSP + 0x10],0x0\nXOR EBP,EBP\nJMP 0x00403e00\nMOV dword ptr [0x006072c4],0x1\nJMP 0x00403f6f\nMOV dword ptr [0x006072c0],0x1\nJMP 0x00403f6f\nMOV dword ptr [0x006072c0],0x0\nJMP 0x00403f6f\nMOV EDI,0x405c61\nJMP 0x00403f65\nMOVSX EAX,byte ptr [RBX + 0x2]\nMOV EBP,0x1\nCMP EAX,0x6c\nJG 0x00403dc3\nTEST EAX,EAX\nJZ 0x00403de3\nCMP EAX,0x6b\nJNZ 0x0040405f\nMOVSX EAX,byte ptr [RBX + 0x3]\nMOV EBP,0x1\nTEST EAX,EAX\nJZ 0x00403df0\nCMP EAX,0x65\nJNZ 0x00404067\nMOV EBP,0x1\nMOV dword ptr [RSP + 0xc],0x1\nJMP 0x00403f6f\nMOV EDI,0x405c6c\nJMP 0x00403f65\nXOR EDI,EDI\nJMP 0x00403eb3\nINC R13D\nCMP R13D,R12D\nJGE 0x0040404d\nMOVSXD RAX,R13D\nMOV RDI,qword ptr [R15 + RAX*0x8]\nJMP 0x00403f65\nMOV EDI,0x405c55\nJMP 0x00403f65\nINC R13D\nJMP 0x00403f6f\nCMP EAX,0x6d\nJZ 0x00403de3\nCMP EAX,0x70\nJNZ 0x0040405f\nMOV EBP,0x1\nMOV dword ptr [RSP + 0x10],0x1\nJMP 0x00403f6f\nMOV dword ptr [RSP + 0x14],0x1\nJMP 0x00403f6f\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403f6f\nMOVSXD RAX,R13D\nMOV RBX,qword ptr [R15 + RAX*0x8]\nMOVZX EAX,byte ptr [RBX]\nCMP AL,0x2b\nJZ 0x00403e60\nCMP AL,0x2d\nJNZ 0x00403eb0\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x76\nJA 0x0040403b\nJMP qword ptr [0x405190 + RAX*0x8]\nMOV RAX,0x6f6d207261656c63\nMOV qword ptr [RSP + 0x18],RAX\nMOV byte ptr [RSP + 0x22],0x0\nMOV word ptr [RSP + 0x20],0x5864\nMOVZX EAX,byte ptr [RBX + 0x1]\nMOV byte ptr [RSP + 0x21],AL\nMOV RDI,R14\nCALL 0x00403a60\nJMP 0x00403f6f\nMOVSX EBP,byte ptr [RBX + 0x1]\nLEA EAX,[RBP + -0x31]\nCMP EAX,0x42\nJA 0x00403fa0\nJMP qword ptr [0x404f78 + RAX*0x8]\nINC R13D\nCMP R13D,R12D\nJGE 0x00403fa8\nMOVSXD RAX,R13D\nMOV RCX,qword ptr [R15 + RAX*0x8]\nMOV ESI,0x405cbd\nXOR EAX,EAX\nMOV RDI,R14\nMOV EDX,EBP\nCALL 0x004012f0\nCMP EAX,-0x1\nJNZ 0x00403f60\nJMP 0x00404043\nMOV RDI,RBX\nCALL 0x00403950\nJMP 0x00403f6a\nCALL 0x004013c0\nMOV RAX,qword ptr [RAX]\nMOVSXD RCX,EBP\nMOVZX EAX,byte ptr [RAX + RCX*0x4]\nMOV byte ptr [RBX + 0x1],AL\nINC R13D\nCMP R13D,R12D\nJGE 0x00403fa8\nMOVZX EAX,byte ptr [RBX + 0x1]\nCMP AL,0x6c\nMOV EDX,0x405c72\nMOV ECX,0x405c67\nCMOVZ RDX,RCX\nCMP AL,0x73\nMOV EAX,0x405c5b\nCMOVZ RDX,RAX\nMOVSXD RAX,R13D\nMOV RCX,qword ptr [R15 + RAX*0x8]\nMOV ESI,0x405cf2\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004012f0\nCMP EAX,-0x1\nJNZ 0x00403f60\nJMP 0x0040402c\nINC R13D\nCMP R13D,R12D\nJGE 0x0040404d\nCMP AL,0x6c\nMOV ECX,0x405c72\nMOV EDX,0x405c67\nCMOVZ RCX,RDX\nCMP AL,0x73\nMOV EDX,0x405c5b\nCMOVNZ RDX,RCX\nMOVSXD RAX,R13D\nMOV RCX,qword ptr [R15 + RAX*0x8]\nMOV ESI,0x405c85\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004012f0\nCMP EAX,-0x1\nJZ 0x00404055\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00403a60\nMOV EBP,0x1\nINC R13D\nCMP R13D,R12D\nJL 0x00403e00\nCMP dword ptr [0x006072c4],0x0\nJNZ 0x004040f5\nMOV ECX,dword ptr [0x006072c8]\nTEST ECX,ECX\nJNZ 0x00403fb0\nCALL 0x00402140\nMOV R12D,EAX\nSHR R12D,0x1f\nJMP 0x00403fe2\nMOV RDI,RBX\nCALL 0x004041dc\nMOV RDI,RBX\nCALL 0x00404178\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nCMP ECX,0x1\nMOV EAX,0x40443c\nMOV R8D,0x404cfb\nCMOVZ R8,RAX\nMOV ESI,0x405cfe\nXOR EAX,EAX\nCALL 0x00401210\nMOV R12D,0x1\nMOV R14D,dword ptr [RSP + 0x10]\nMOV R15D,dword ptr [RSP + 0xc]\nMOV EBX,dword ptr [RSP + 0x8]\nTEST EBP,EBP\nJZ 0x00403ffb\nCMP dword ptr [RSP + 0x14],0x0\nJZ 0x00404000\nCALL 0x004025f0\nTEST EBX,EBX\nJZ 0x0040400b\nXOR EDI,EDI\nCALL 0x00402610\nTEST R15D,R15D\nJZ 0x0040401a\nMOV EDI,0x1\nCALL 0x00402610\nTEST R14D,R14D\nJZ 0x00404024\nCALL 0x00402620\nMOV EDI,R12D\nCALL 0x00403be0\nMOV EDI,0x405c94\nCALL 0x00404150\nCALL 0x00404110\nMOV RDI,RBX\nCALL 0x004041dc\nMOV EDI,0x405ccc\nCALL 0x00404150\nMOV RDI,RBX\nCALL 0x00404178\nMOV EDI,0x405c94\nCALL 0x00404150\nMOV RDI,RBX\nCALL 0x004041dc\nMOV RDI,RBX\nCALL 0x004041dc\nXOR EDI,EDI\nCALL 0x004041a0\nCALL 0x00404110\nCALL 0x00404178\nMOV EDI,0x405c25\nCALL 0x00401130\nXOR EDI,EDI\nCALL 0x00401360\nMOV R14,qword ptr [0x00607280]\nMOV RBP,qword ptr [0x006072d8]\nMOV RDI,RBX\nCALL 0x004012a0\nMOV RCX,RAX\nMOV ESI,0x405c33\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RBP\nCALL 0x00401210\nMOV EDI,0x1\nCALL 0x00403be0\nXOR EBP,EBP\nMOV dword ptr [RSP + 0x10],0x0\nMOV dword ptr [RSP + 0xc],0x0\nMOV dword ptr [RSP + 0x8],0x0\nMOV dword ptr [RSP + 0x14],0x0\nCMP dword ptr [0x006072c4],0x0\nJZ 0x00403f88\nCALL 0x00401f10\nXOR EDI,EDI\nCALL 0x00403be0\n'
p473
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f7\n41 89 fc\n49 8b 07\n48 89 05 aa 36 20 00\n41 83 fc 02\n7c 65\nbd 01 00 00 00\n31 db\n0f 1f 44 00 00\n48 63 c5\n49 8b 3c c7\n80 3f 2d\n75 44\n0f be 4f 01\n8d 41 9c\n83 f8 12\n77 2e\nff 24 c5 e0 4e 40 00\nff c5\n44 39 e5\n0f 8d 11 04 00 00\n48 63 c5\n49 8b 1c c7\neb 1d\nbe 1c 5c 40 00\ne8 73 d5 ff ff\n85 c0\n75 0f\ne9 fa 03 00 00\n83 f9 3f\n0f 84 e0 03 00 00\n90\nff c5\n44 39 e5\n7c a9\neb 02\n31 db\n48 89 df\ne8 5d d5 ff ff\n48 89 05 0e 36 20 00\n48 85 c0\n0f 84 de 03 00 00\nbe d4 72 60 00\nba d0 72 60 00\n48 89 c7\ne8 4b d6 ff ff\ne8 36 e0 ff ff\n41 83 fc 02\n0f 8c f2 03 00 00\n41 bd 01 00 00 00\n4c 8d 74 24 18\nc7 44 24 14 00 00 00 00\nc7 44 24 08 00 00 00 00\nc7 44 24 0c 00 00 00 00\nc7 44 24 10 00 00 00 00\n31 ed\ne9 fa 00 00 00\nc7 05 b4 35 20 00 01 00 00 00\ne9 5a 02 00 00\nc7 05 a1 35 20 00 01 00 00 00\ne9 4b 02 00 00\nc7 05 92 35 20 00 00 00 00 00\ne9 3c 02 00 00\nbf 61 5c 40 00\ne9 28 02 00 00\n0f be 43 02\nbd 01 00 00 00\n83 f8 6c\n7f 78\n85 c0\n0f 84 90 00 00 00\n83 f8 6b\n0f 85 03 03 00 00\n0f be 43 03\nbd 01 00 00 00\n85 c0\n0f 84 83 00 00 00\n83 f8 65\n0f 85 f1 02 00 00\nbd 01 00 00 00\nc7 44 24 0c 01 00 00 00\ne9 e7 01 00 00\nbf 6c 5c 40 00\ne9 d3 01 00 00\n31 ff\ne9 1a 01 00 00\n41 ff c5\n45 39 e5\n0f 8d a8 02 00 00\n49 63 c5\n49 8b 3c c7\ne9 b4 01 00 00\nbf 55 5c 40 00\ne9 aa 01 00 00\n41 ff c5\ne9 ac 01 00 00\n83 f8 6d\n74 1b\n83 f8 70\n0f 85 8e 02 00 00\nbd 01 00 00 00\nc7 44 24 10 01 00 00 00\ne9 8c 01 00 00\nc7 44 24 14 01 00 00 00\ne9 7f 01 00 00\nc7 44 24 08 01 00 00 00\ne9 72 01 00 00\n49 63 c5\n49 8b 1c c7\n0f b6 03\n3c 2b\n74 52\n3c 2d\n0f 85 9a 00 00 00\n0f be 43 01\n83 f8 76\n0f 87 18 02 00 00\nff 24 c5 90 51 40 00\n48 b8 63 6c 65 61 72 20 6d 6f\n48 89 44 24 18\nc6 44 24 22 00\n66 c7 44 24 20 64 58\n0f b6 43 01\n88 44 24 21\n4c 89 f7\ne8 0b fc ff ff\ne9 15 01 00 00\n0f be 6b 01\n8d 45 cf\n83 f8 42\n0f 87 30 01 00 00\nff 24 c5 78 4f 40 00\n41 ff c5\n45 39 e5\n0f 8d 25 01 00 00\n49 63 c5\n49 8b 0c c7\nbe bd 5c 40 00\n31 c0\n4c 89 f7\n89 ea\ne8 55 d4 ff ff\n83 f8 ff\n0f 85 bc 00 00 00\ne9 9a 01 00 00\n48 89 df\ne8 98 fa ff ff\ne9 ad 00 00 00\ne8 fe d4 ff ff\n48 8b 00\n48 63 cd\n0f b6 04 88\n88 43 01\n41 ff c5\n45 39 e5\n0f 8d cd 00 00 00\n0f b6 43 01\n3c 6c\nba 72 5c 40 00\nb9 67 5c 40 00\n48 0f 44 d1\n3c 73\nb8 5b 5c 40 00\n48 0f 44 d0\n49 63 c5\n49 8b 0c c7\nbe f2 5c 40 00\n31 c0\n4c 89 f7\ne8 e0 d3 ff ff\n83 f8 ff\n75 4b\ne9 12 01 00 00\n41 ff c5\n45 39 e5\n0f 8d 27 01 00 00\n3c 6c\nb9 72 5c 40 00\nba 67 5c 40 00\n48 0f 44 ca\n3c 73\nba 5b 5c 40 00\n48 0f 45 d1\n49 63 c5\n49 8b 0c c7\nbe 85 5c 40 00\n31 c0\n4c 89 f7\ne8 99 d3 ff ff\n83 f8 ff\n0f 84 f5 00 00 00\n48 8b 7c 24 18\ne8 f6 fa ff ff\nbd 01 00 00 00\n41 ff c5\n45 39 e5\n0f 8c 85 fe ff ff\n83 3d 42 33 20 00 00\n0f 85 6d 01 00 00\n8b 0d 3a 33 20 00\n85 c9\n75 1e\ne8 a9 e1 ff ff\n41 89 c4\n41 c1 ec 1f\neb 42\n48 89 df\ne8 34 02 00 00\n48 89 df\ne8 c8 01 00 00\n48 8b 3d c9 32 20 00\n48 8b 15 1a 33 20 00\n83 f9 01\nb8 3c 44 40 00\n41 b8 fb 4c 40 00\n4c 0f 44 c0\nbe fe 5c 40 00\n31 c0\ne8 34 d2 ff ff\n41 bc 01 00 00 00\n44 8b 74 24 10\n44 8b 7c 24 0c\n8b 5c 24 08\n85 ed\n74 07\n83 7c 24 14 00\n74 05\ne8 f0 e5 ff ff\n85 db\n74 07\n31 ff\ne8 05 e6 ff ff\n45 85 ff\n74 0a\nbf 01 00 00 00\ne8 f6 e5 ff ff\n45 85 f6\n74 05\ne8 fc e5 ff ff\n44 89 e7\ne8 b4 fb ff ff\nbf 94 5c 40 00\ne8 1a 01 00 00\ne8 d5 00 00 00\n48 89 df\ne8 99 01 00 00\nbf cc 5c 40 00\ne8 03 01 00 00\n48 89 df\ne8 23 01 00 00\nbf 94 5c 40 00\ne8 f1 00 00 00\n48 89 df\ne8 75 01 00 00\n48 89 df\ne8 6d 01 00 00\n31 ff\ne8 2a 01 00 00\ne8 95 00 00 00\ne8 f8 00 00 00\nbf 25 5c 40 00\ne8 a6 d0 ff ff\n31 ff\ne8 cf d2 ff ff\n4c 8b 35 e8 31 20 00\n48 8b 2d 39 32 20 00\n48 89 df\ne8 f9 d1 ff ff\n48 89 c1\nbe 33 5c 40 00\n31 c0\n4c 89 f7\n48 89 ea\ne8 54 d1 ff ff\nbf 01 00 00 00\ne8 1a fb ff ff\n31 ed\nc7 44 24 10 00 00 00 00\nc7 44 24 0c 00 00 00 00\nc7 44 24 08 00 00 00 00\nc7 44 24 14 00 00 00 00\n83 3d d5 31 20 00 00\n0f 84 93 fe ff ff\ne8 16 de ff ff\n31 ff\ne8 df fa ff ff\n'
p474
S'.text:0000000000403c10\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c19\n.text:0000000000403c1a\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c24\n.text:0000000000403c27\n.text:0000000000403c2e\n.text:0000000000403c32\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c47\n.text:0000000000403c4a\n.text:0000000000403c4c\n.text:0000000000403c50\n.text:0000000000403c53\n.text:0000000000403c56\n.text:0000000000403c58\n.text:0000000000403c5f\n.text:0000000000403c61\n.text:0000000000403c64\n.text:0000000000403c6a\n.text:0000000000403c6d\n.text:0000000000403c71\n.text:0000000000403c73\n.text:0000000000403c78\n.text:0000000000403c7d\n.text:0000000000403c7f\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c89\n.text:0000000000403c8f\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c95\n.text:0000000000403c97\n.text:0000000000403c99\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca3\n.text:0000000000403caa\n.text:0000000000403cad\n.text:0000000000403cb3\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cca\n.text:0000000000403cce\n.text:0000000000403cd4\n.text:0000000000403cda\n.text:0000000000403cdf\n.text:0000000000403ce7\n.text:0000000000403cef\n.text:0000000000403cf7\n.text:0000000000403cff\n.text:0000000000403d01\n.text:0000000000403d06\n.text:0000000000403d10\n.text:0000000000403d15\n.text:0000000000403d1f\n.text:0000000000403d24\n.text:0000000000403d2e\n.text:0000000000403d33\n.text:0000000000403d38\n.text:0000000000403d3d\n.text:0000000000403d41\n.text:0000000000403d46\n.text:0000000000403d49\n.text:0000000000403d4b\n.text:0000000000403d4d\n.text:0000000000403d53\n.text:0000000000403d56\n.text:0000000000403d5c\n.text:0000000000403d60\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d6d\n.text:0000000000403d70\n.text:0000000000403d76\n.text:0000000000403d7b\n.text:0000000000403d83\n.text:0000000000403d88\n.text:0000000000403d8d\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d99\n.text:0000000000403d9c\n.text:0000000000403d9f\n.text:0000000000403da5\n.text:0000000000403da8\n.text:0000000000403dac\n.text:0000000000403db1\n.text:0000000000403db6\n.text:0000000000403dbb\n.text:0000000000403dbe\n.text:0000000000403dc3\n.text:0000000000403dc6\n.text:0000000000403dc8\n.text:0000000000403dcb\n.text:0000000000403dd1\n.text:0000000000403dd6\n.text:0000000000403dde\n.text:0000000000403de3\n.text:0000000000403deb\n.text:0000000000403df0\n.text:0000000000403df8\n.text:0000000000403e00\n.text:0000000000403e03\n.text:0000000000403e07\n.text:0000000000403e0a\n.text:0000000000403e0c\n.text:0000000000403e0e\n.text:0000000000403e10\n.text:0000000000403e16\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e23\n.text:0000000000403e2a\n.text:0000000000403e34\n.text:0000000000403e39\n.text:0000000000403e3e\n.text:0000000000403e45\n.text:0000000000403e49\n.text:0000000000403e4d\n.text:0000000000403e50\n.text:0000000000403e55\n.text:0000000000403e60\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6a\n.text:0000000000403e70\n.text:0000000000403e77\n.text:0000000000403e7a\n.text:0000000000403e7d\n.text:0000000000403e83\n.text:0000000000403e86\n.text:0000000000403e8a\n.text:0000000000403e8f\n.text:0000000000403e91\n.text:0000000000403e94\n.text:0000000000403e96\n.text:0000000000403e9b\n.text:0000000000403e9e\n.text:0000000000403ea4\n.text:0000000000403eb0\n.text:0000000000403eb3\n.text:0000000000403eb8\n.text:0000000000403ebd\n.text:0000000000403ec2\n.text:0000000000403ec5\n.text:0000000000403ec8\n.text:0000000000403ecc\n.text:0000000000403ecf\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403edb\n.text:0000000000403edf\n.text:0000000000403ee1\n.text:0000000000403ee6\n.text:0000000000403eeb\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef6\n.text:0000000000403efa\n.text:0000000000403efd\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f15\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f20\n.text:0000000000403f26\n.text:0000000000403f28\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f36\n.text:0000000000403f38\n.text:0000000000403f3d\n.text:0000000000403f41\n.text:0000000000403f44\n.text:0000000000403f48\n.text:0000000000403f4d\n.text:0000000000403f4f\n.text:0000000000403f52\n.text:0000000000403f57\n.text:0000000000403f5a\n.text:0000000000403f60\n.text:0000000000403f65\n.text:0000000000403f6a\n.text:0000000000403f6f\n.text:0000000000403f72\n.text:0000000000403f75\n.text:0000000000403f7b\n.text:0000000000403f82\n.text:0000000000403f88\n.text:0000000000403f8e\n.text:0000000000403f90\n.text:0000000000403f92\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9e\n.text:0000000000403fa0\n.text:0000000000403fa3\n.text:0000000000403fa8\n.text:0000000000403fab\n.text:0000000000403fb0\n.text:0000000000403fb7\n.text:0000000000403fbe\n.text:0000000000403fc1\n.text:0000000000403fc6\n.text:0000000000403fcc\n.text:0000000000403fd0\n.text:0000000000403fd5\n.text:0000000000403fd7\n.text:0000000000403fdc\n.text:0000000000403fe2\n.text:0000000000403fe7\n.text:0000000000403fec\n.text:0000000000403ff0\n.text:0000000000403ff2\n.text:0000000000403ff4\n.text:0000000000403ff9\n.text:0000000000403ffb\n.text:0000000000404000\n.text:0000000000404002\n.text:0000000000404004\n.text:0000000000404006\n.text:000000000040400b\n.text:000000000040400e\n.text:0000000000404010\n.text:0000000000404015\n.text:000000000040401a\n.text:000000000040401d\n.text:000000000040401f\n.text:0000000000404024\n.text:0000000000404027\n.text:000000000040402c\n.text:0000000000404031\n.text:0000000000404036\n.text:000000000040403b\n.text:000000000040403e\n.text:0000000000404043\n.text:0000000000404048\n.text:000000000040404d\n.text:0000000000404050\n.text:0000000000404055\n.text:000000000040405a\n.text:000000000040405f\n.text:0000000000404062\n.text:0000000000404067\n.text:000000000040406a\n.text:000000000040406f\n.text:0000000000404071\n.text:0000000000404076\n.text:000000000040407b\n.text:0000000000404080\n.text:0000000000404085\n.text:000000000040408a\n.text:000000000040408c\n.text:0000000000404091\n.text:0000000000404098\n.text:000000000040409f\n.text:00000000004040a2\n.text:00000000004040a7\n.text:00000000004040aa\n.text:00000000004040af\n.text:00000000004040b1\n.text:00000000004040b4\n.text:00000000004040b7\n.text:00000000004040bc\n.text:00000000004040c1\n.text:00000000004040c6\n.text:00000000004040c8\n.text:00000000004040d0\n.text:00000000004040d8\n.text:00000000004040e0\n.text:00000000004040e8\n.text:00000000004040ef\n.text:00000000004040f5\n.text:00000000004040fa\n.text:00000000004040fc\n'
p475
tp476
sS'realloc'
p477
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00607118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x00607118]\n'
p480
S'ff 25 32 5e 20 00\n'
p481
S'.plt:00000000004012e0\n'
p482
tp483
sS'fgets'
p484
(S'\n__stdcall fgets(char * __s, int __n, FILE * __stream)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * fgets(char *__s,int __n,FILE *__stream)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_fgets_00607098)();\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x00607098]\n'
p487
S'ff 25 b2 5e 20 00\n'
p488
S'.plt:00000000004011e0\n'
p489
tp490
sS'strlen'
p491
(S'\n__stdcall strlen(char * __s)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00607060)();\u000a  return sVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x00607060]\n'
p494
S'ff 25 ea 5e 20 00\n'
p495
S'.plt:0000000000401170\n'
p496
tp497
sS'PrintModifierMapping'
p498
(S'\n__stdcall PrintModifierMapping(XModifierKeymap * map, FILE * fp)\n'
p499
V\u000avoid PrintModifierMapping(XModifierKeymap *map,FILE *fp)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  undefined *puVar4;\u000a  long lVar5;\u000a  int iVar6;\u000a  long lVar7;\u000a  int iVar8;\u000a  int max_keycode;\u000a  int local_38;\u000a  int local_34;\u000a  \u000a  XDisplayKeycodes(dpy,&local_34,&local_38);\u000a  XGetKeyboardMapping(dpy,(ulong)(byte)local_34,(ulong)(uint)((1 - local_34) + local_38));\u000a  fprintf((FILE *)fp,"%s:  up to %d keys per modifier, (keycodes in parentheses):\u005cn\u005cn",ProgramName);\u000a  lVar7 = 0;\u000a  lVar5 = 0;\u000a  do {\u000a    fprintf((FILE *)fp,"%-10s",modifier_table[lVar7].name);\u000a    if (0 < map->max_keypermod) {\u000a      lVar5 = (long)(int)lVar5;\u000a      iVar8 = 0;\u000a      do {\u000a        if (map->modifiermap[lVar5] != 0) {\u000a          iVar6 = 1;\u000a          do {\u000a            lVar2 = XKeycodeToKeysym(dpy,(ulong)map->modifiermap[lVar5],(ulong)(iVar6 - 1));\u000a            if (lVar2 != 0) break;\u000a            bVar1 = iVar6 < 0;\u000a            iVar6 = iVar6 + 1;\u000a          } while (bVar1);\u000a          pcVar3 = (char *)XKeysymToString(lVar2);\u000a          puVar4 = &DAT_0040443c;\u000a          if (0 < iVar8) {\u000a            puVar4 = (undefined *)0x404888;\u000a          }\u000a          if (pcVar3 == (char *)0x0) {\u000a            pcVar3 = "BadKey";\u000a          }\u000a          fprintf((FILE *)fp,"%s  %s (0x%0x)",puVar4,pcVar3,(ulong)map->modifiermap[lVar5]);\u000a        }\u000a        lVar5 = lVar5 + 1;\u000a        iVar8 = iVar8 + 1;\u000a      } while (iVar8 < map->max_keypermod);\u000a    }\u000a    fputc(10,(FILE *)fp);\u000a    lVar7 = lVar7 + 1;\u000a    if (lVar7 == 8) {\u000a      fputc(10,(FILE *)fp);\u000a      return;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSI\nMOV RBX,RDI\nMOV dword ptr [RSP + 0xc],0x0\nMOV RDI,qword ptr [0x006072b8]\nLEA RSI,[RSP + 0x14]\nLEA RDX,[RSP + 0x10]\nCALL 0x00401310\nMOV RDI,qword ptr [0x006072b8]\nMOV EAX,dword ptr [RSP + 0x14]\nMOV EDX,0x1\nSUB EDX,EAX\nADD EDX,dword ptr [RSP + 0x10]\nMOVZX ESI,AL\nLEA RCX,[RSP + 0xc]\nCALL 0x00401330\nMOV RDX,qword ptr [0x006072d8]\nMOV ECX,dword ptr [RBX]\nMOV ESI,0x404317\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401210\nXOR R13D,R13D\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,R13\nSHL RAX,0x4\nMOV RDX,qword ptr [0x6071b0 + RAX]\nMOV ESI,0x404355\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401210\nCMP dword ptr [RBX],0x0\nJLE 0x0040181c\nMOVSXD RBP,EBP\nXOR R15D,R15D\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RBX + 0x8]\nCMP byte ptr [RAX + RBP*0x1],0x0\nJZ 0x0040180d\nMOV R12D,0x1\nLEA EDX,[R12 + -0x1]\nMOV RDI,qword ptr [0x006072b8]\nMOV RAX,qword ptr [RBX + 0x8]\nMOVZX ESI,byte ptr [RAX + RBP*0x1]\nCALL 0x00401300\nTEST RAX,RAX\nJNZ 0x004017cd\nCMP R12D,dword ptr [RSP + 0xc]\nLEA ECX,[R12 + 0x1]\nMOV R12D,ECX\nJL 0x004017a0\nMOV RDI,RAX\nCALL 0x004013a0\nMOV RCX,RAX\nTEST R15D,R15D\nMOV EDX,0x40443c\nMOV EAX,0x404888\nCMOVG RDX,RAX\nTEST RCX,RCX\nMOV EAX,0x40436a\nCMOVZ RCX,RAX\nMOV RAX,qword ptr [RBX + 0x8]\nMOVZX R8D,byte ptr [RAX + RBP*0x1]\nMOV ESI,0x40435b\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401210\nINC RBP\nINC R15D\nCMP R15D,dword ptr [RBX]\nJL 0x00401790\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x004011c0\nINC R13\nCMP R13,0x8\nJNZ 0x00401760\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x004011c0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f6\n48 89 fb\nc7 44 24 0c 00 00 00 00\n48 8b 3d b5 5b 20 00\n48 8d 74 24 14\n48 8d 54 24 10\ne8 fe fb ff ff\n48 8b 3d 9f 5b 20 00\n8b 44 24 14\nba 01 00 00 00\n29 c2\n03 54 24 10\n0f b6 f0\n48 8d 4c 24 0c\ne8 fb fb ff ff\n48 8b 15 9c 5b 20 00\n8b 0b\nbe 17 43 40 00\n31 c0\n4c 89 f7\ne8 c3 fa ff ff\n45 31 ed\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 e8\n48 c1 e0 04\n48 8b 90 b0 71 60 00\nbe 55 43 40 00\n31 c0\n4c 89 f7\ne8 93 fa ff ff\n83 3b 00\n0f 8e 96 00 00 00\n48 63 ed\n45 31 ff\n0f 1f 40 00\n48 8b 43 08\n80 3c 28 00\n74 73\n41 bc 01 00 00 00\n41 8d 54 24 ff\n48 8b 3d 0c 5b 20 00\n48 8b 43 08\n0f b6 34 28\ne8 47 fb ff ff\n48 85 c0\n75 0f\n44 3b 64 24 0c\n41 8d 4c 24 01\n41 89 cc\n7c d3\n48 89 c7\ne8 cb fb ff ff\n48 89 c1\n45 85 ff\nba 3c 44 40 00\nb8 88 48 40 00\n48 0f 4f d0\n48 85 c9\nb8 6a 43 40 00\n48 0f 44 c8\n48 8b 43 08\n44 0f b6 04 28\nbe 5b 43 40 00\n31 c0\n4c 89 f7\ne8 03 fa ff ff\n48 ff c5\n41 ff c7\n44 3b 3b\n0f 8c 74 ff ff ff\nbf 0a 00 00 00\n4c 89 f6\ne8 97 f9 ff ff\n49 ff c5\n49 83 fd 08\n0f 85 2a ff ff ff\nbf 0a 00 00 00\n4c 89 f6\ne8 7d f9 ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:00000000004016e0\n.text:00000000004016e1\n.text:00000000004016e3\n.text:00000000004016e5\n.text:00000000004016e7\n.text:00000000004016e9\n.text:00000000004016ea\n.text:00000000004016ee\n.text:00000000004016f1\n.text:00000000004016f4\n.text:00000000004016fc\n.text:0000000000401703\n.text:0000000000401708\n.text:000000000040170d\n.text:0000000000401712\n.text:0000000000401719\n.text:000000000040171d\n.text:0000000000401722\n.text:0000000000401724\n.text:0000000000401728\n.text:000000000040172b\n.text:0000000000401730\n.text:0000000000401735\n.text:000000000040173c\n.text:000000000040173e\n.text:0000000000401743\n.text:0000000000401745\n.text:0000000000401748\n.text:000000000040174d\n.text:0000000000401750\n.text:0000000000401752\n.text:0000000000401760\n.text:0000000000401763\n.text:0000000000401767\n.text:000000000040176e\n.text:0000000000401773\n.text:0000000000401775\n.text:0000000000401778\n.text:000000000040177d\n.text:0000000000401780\n.text:0000000000401786\n.text:0000000000401789\n.text:000000000040178c\n.text:0000000000401790\n.text:0000000000401794\n.text:0000000000401798\n.text:000000000040179a\n.text:00000000004017a0\n.text:00000000004017a5\n.text:00000000004017ac\n.text:00000000004017b0\n.text:00000000004017b4\n.text:00000000004017b9\n.text:00000000004017bc\n.text:00000000004017be\n.text:00000000004017c3\n.text:00000000004017c8\n.text:00000000004017cb\n.text:00000000004017cd\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017d8\n.text:00000000004017db\n.text:00000000004017e0\n.text:00000000004017e5\n.text:00000000004017e9\n.text:00000000004017ec\n.text:00000000004017f1\n.text:00000000004017f5\n.text:00000000004017f9\n.text:00000000004017fe\n.text:0000000000401803\n.text:0000000000401805\n.text:0000000000401808\n.text:000000000040180d\n.text:0000000000401810\n.text:0000000000401813\n.text:0000000000401816\n.text:000000000040181c\n.text:0000000000401821\n.text:0000000000401824\n.text:0000000000401829\n.text:000000000040182c\n.text:0000000000401830\n.text:0000000000401836\n.text:000000000040183b\n.text:000000000040183e\n.text:0000000000401843\n.text:0000000000401847\n.text:0000000000401848\n.text:000000000040184a\n.text:000000000040184c\n.text:000000000040184e\n.text:0000000000401850\n.text:0000000000401851\n'
p503
tp504
sS'XKeysymToString'
p505
(S'\n__stdcall XKeysymToString()\n'
p506
V\u000avoid XKeysymToString(void)\u000a\u000a{\u000a  (*(code *)PTR_XKeysymToString_00607178)();\u000a  return;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00607178]\n'
p508
S'ff 25 d2 5d 20 00\n'
p509
S'.plt:00000000004013a0\n'
p510
tp511
sS'missing_arg'
p512
(S'\n__stdcall missing_arg(char * arg)\n'
p513
V\u000avoid missing_arg(char *arg)\u000a\u000a{\u000a  fprintf(stderr,"%s: %s requires an argument\u005cn\u005cn",ProgramName,arg);\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p514
S'PUSH RAX\nMOV RCX,RDI\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x405d26\nXOR EAX,EAX\nCALL 0x00401210\nMOV EDI,0x1\nCALL 0x004041a0\n'
p515
S'50\n48 89 f9\n48 8b 3d fd 30 20 00\n48 8b 15 4e 31 20 00\nbe 26 5d 40 00\n31 c0\ne8 7a d0 ff ff\nbf 01 00 00 00\ne8 00 00 00 00\n'
p516
S'.text:0000000000404178\n.text:0000000000404179\n.text:000000000040417c\n.text:0000000000404183\n.text:000000000040418a\n.text:000000000040418f\n.text:0000000000404191\n.text:0000000000404196\n.text:000000000040419b\n'
p517
tp518
sS'strcmp'
p519
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_006070a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x006070a0]\n'
p522
S'ff 25 aa 5e 20 00\n'
p523
S'.plt:00000000004011f0\n'
p524
tp525
sS'XDeleteModifiermapEntry'
p526
(S'\n__stdcall XDeleteModifiermapEntry()\n'
p527
V\u000avoid XDeleteModifiermapEntry(void)\u000a\u000a{\u000a  (*(code *)PTR_XDeleteModifiermapEntry_00607138)();\u000a  return;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x00607138]\n'
p529
S'ff 25 12 5e 20 00\n'
p530
S'.plt:0000000000401320\n'
p531
tp532
sS'do_remove'
p533
(S'\n__stdcall do_remove(char * line)\n'
p534
V\u000avoid do_remove(char *line)\u000a\u000a{\u000a  uint uVar1;\u000a  KeyCode KVar2;\u000a  void *pvVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  long lVar7;\u000a  void *__ptr;\u000a  KeyCode *pKVar8;\u000a  op *p;\u000a  undefined *puVar9;\u000a  uint uVar10;\u000a  size_t __size;\u000a  long lVar11;\u000a  size_t __size_00;\u000a  long lVar12;\u000a  int in_ESI;\u000a  char *__format;\u000a  FILE *__stream;\u000a  int iVar13;\u000a  int local_50;\u000a  int local_4c;\u000a  void *local_48;\u000a  int local_3c;\u000a  size_t local_38;\u000a  \u000a  if (((line == (char *)0x0) || (in_ESI < 6)) || (*line == 0)) {\u000a    badheader();\u000a    __format = "remove modifier input line";\u000a    __size = 0x1a;\u000a    goto LAB_00402e6b;\u000a  }\u000a  local_50 = skip_chars(line);\u000a  if (local_50 < 1) {\u000a    badheader();\u000a    __format = "remove modifier name %s";\u000a    __stream = stderr;\u000a  }\u000a  else {\u000a    iVar4 = parse_modifier(line);\u000a    if (-1 < iVar4) {\u000a      lVar7 = (long)local_50;\u000a      iVar13 = in_ESI - local_50;\u000a      iVar5 = skip_until_char();\u000a      if (iVar5 < 0) {\u000a        local_50 = iVar5;\u000a        badheader();\u000a        __format = "remove modifier = keysym";\u000a        __size = 0x18;\u000a      }\u000a      else {\u000a        local_50 = iVar5;\u000a        iVar6 = skip_space(line + lVar7 + (long)iVar5 + 1);\u000a        local_50 = iVar6 + 1 + iVar5;\u000a        iVar5 = get_keysym_list(line + lVar7 + (long)local_50,\u000a                                (int *)(ulong)(uint)(iVar13 - local_50),(KeySym **)&local_50);\u000a        if (iVar5 < 0) {\u000a          return;\u000a        }\u000a        __size = SEXT48(local_50);\u000a        if (__size != 0) {\u000a          __ptr = malloc(__size);\u000a          if (__ptr == (void *)0x0) {\u000a            badheader();\u000a            __size_00 = SEXT48(local_50);\u000aLAB_00402dbb:\u000a            fprintf(stderr,"attempt to allocate %ld byte keycode list",__size_00);\u000a            _IO_putc(10,(_IO_FILE *)stderr);\u000a            free(local_48);\u000a            return;\u000a          }\u000a          if (local_50 < 1) {\u000a            iVar5 = 0;\u000a            local_3c = iVar4;\u000a          }\u000a          else {\u000a            lVar7 = 0;\u000a            iVar5 = 0;\u000a            local_3c = iVar4;\u000a            do {\u000a              uVar10 = (uint)__size;\u000a              pKVar8 = KeysymToKeycodes(dpy,*(KeySym *)((long)local_48 + lVar7 * 8),&local_4c);\u000a              pvVar3 = local_48;\u000a              if (local_4c == 0) {\u000a                puVar9 = (undefined *)XKeysymToString(*(undefined8 *)((long)local_48 + lVar7 * 8));\u000a                badheader();\u000a                if (puVar9 == (undefined *)0x0) {\u000a                  puVar9 = &DAT_00404bda;\u000a                }\u000a                fprintf(stderr,"keysym in remove modifier list \u005c'%s\u005c', no corresponding keycodes",\u000a                        puVar9);\u000a                _IO_putc(10,(_IO_FILE *)stderr);\u000a              }\u000a              else {\u000a                if (verbose != 0) {\u000a                  local_38 = __size;\u000a                  puVar9 = (undefined *)XKeysymToString(*(undefined8 *)((long)local_48 + lVar7 * 8))\u000a                  ;\u000a                  if (puVar9 == (undefined *)0x0) {\u000a                    puVar9 = &DAT_00404bda;\u000a                  }\u000a                  printf("! Keysym %s (0x%lx) corresponds to keycode(s)",puVar9,\u000a                         *(undefined8 *)((long)pvVar3 + lVar7 * 8));\u000a                  if (0 < local_4c) {\u000a                    lVar11 = (long)local_4c;\u000a                    lVar12 = 0;\u000a                    do {\u000a                      printf(" 0x%x",(ulong)pKVar8[lVar12]);\u000a                      lVar12 = lVar12 + 1;\u000a                    } while (lVar12 < lVar11);\u000a                  }\u000a                  putchar(10);\u000a                  uVar10 = (uint)local_38;\u000a                }\u000a                uVar1 = local_4c + iVar5;\u000a                __size = (size_t)uVar1;\u000a                if ((int)uVar10 < (int)uVar1) {\u000a                  __size_00 = SEXT48((int)uVar1);\u000a                  __ptr = realloc(__ptr,__size_00);\u000a                  iVar4 = local_4c;\u000a                  if (__ptr == (void *)0x0) {\u000a                    badheader();\u000a                    goto LAB_00402dbb;\u000a                  }\u000a                }\u000a                else {\u000a                  __size = (size_t)uVar10;\u000a                  iVar4 = local_4c;\u000a                }\u000a                while (local_4c = iVar4 + -1, 0 < iVar4) {\u000a                  KVar2 = *pKVar8;\u000a                  pKVar8 = pKVar8 + 1;\u000a                  lVar11 = (long)iVar5;\u000a                  iVar5 = iVar5 + 1;\u000a                  *(KeyCode *)((long)__ptr + lVar11) = KVar2;\u000a                  iVar4 = local_4c;\u000a                }\u000a              }\u000a              lVar7 = lVar7 + 1;\u000a            } while (lVar7 < (long)local_50);\u000a          }\u000a          free(local_48);\u000a          p = (op *)malloc(0x118);\u000a          if (p != (op *)0x0) {\u000a            *(undefined4 *)*p = 2;\u000a            *(int *)(*p + 0x10) = local_3c;\u000a            *(int *)(*p + 0x14) = iVar5;\u000a            *(void **)(*p + 0x18) = __ptr;\u000a            add_to_work_queue(p);\u000a            return;\u000a          }\u000a          badheader();\u000a          __format = "attempt to allocate %ld byte removemodifier opcode";\u000a          line = (char *)0x20;\u000a          __stream = stderr;\u000a          goto LAB_00402eac;\u000a        }\u000a        badheader();\u000a        __format = "remove modifier keysym list (empty)";\u000a        __size = 0x23;\u000a      }\u000aLAB_00402e6b:\u000a      fwrite(__format,__size,1,stderr);\u000a      goto LAB_00402eb1;\u000a    }\u000a    badheader();\u000a    __stream = stderr;\u000a    line = copy_to_scratch(line);\u000a    __format = "remove modifier name \u005c'%s\u005c', not allowed";\u000a  }\u000aLAB_00402eac:\u000a  fprintf(__stream,__format,line);\u000aLAB_00402eb1:\u000a  _IO_putc(10,(_IO_FILE *)stderr);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R15D,ESI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402de0\nCMP R15D,0x6\nJL 0x00402de0\nCMP byte ptr [RBX],0x0\nJZ 0x00402de0\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00401e20\nMOV dword ptr [RSP + 0x8],EAX\nTEST EAX,EAX\nJLE 0x00402df8\nMOV RDI,RBX\nMOV ESI,EAX\nCALL 0x00403860\nMOV R14D,EAX\nTEST R14D,R14D\nJS 0x00402e13\nMOVSXD RAX,dword ptr [RSP + 0x8]\nADD RBX,RAX\nSUB R15D,EAX\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00403390\nMOV EBP,EAX\nMOV dword ptr [RSP + 0x8],EBP\nTEST EBP,EBP\nJS 0x00402e3d\nMOVSXD RAX,EBP\nMOV ECX,EBP\nINC ECX\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nMOV ESI,R15D\nSUB ESI,ECX\nCALL 0x00401eb0\nLEA EAX,[RAX + RBP*0x1 + 0x1]\nMOV dword ptr [RSP + 0x8],EAX\nCDQE\nADD RBX,RAX\nSUB R15D,EAX\nLEA RDX,[RSP + 0x8]\nLEA RCX,[RSP + 0x10]\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x004033c0\nTEST EAX,EAX\nJS 0x00402ec2\nMOVSXD RBX,dword ptr [RSP + 0x8]\nTEST RBX,RBX\nJZ 0x00402e55\nMOV RDI,RBX\nCALL 0x00401260\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402e77\nMOV dword ptr [RSP + 0x1c],R14D\nCMP dword ptr [RSP + 0x8],0x0\nJLE 0x00402d63\nXOR R15D,R15D\nXOR R14D,R14D\nJMP 0x00402c10\nMOV EAX,dword ptr [RSP + 0xc]\nLEA ECX,[RAX + -0x1]\nMOV dword ptr [RSP + 0xc],ECX\nTEST EAX,EAX\nJLE 0x00402c00\nMOV AL,byte ptr [R13]\nINC R13\nMOVSXD RCX,R14D\nINC R14D\nMOV byte ptr [RBP + RCX*0x1],AL\nJMP 0x00402bd0\nMOV EBX,R12D\nJMP 0x00402d50\nMOV RDI,qword ptr [0x006072b8]\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RAX + R15*0x8]\nLEA RDX,[RSP + 0xc]\nCALL 0x004037a0\nMOV R13,RAX\nCMP dword ptr [RSP + 0xc],0x0\nJZ 0x00402cf8\nCMP dword ptr [0x006072c0],0x0\nJZ 0x00402cbc\nMOV qword ptr [RSP + 0x20],RBX\nMOV R12,RBP\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RBX + R15*0x8]\nCALL 0x004013a0\nMOV RCX,RAX\nTEST RCX,RCX\nMOV EAX,0x404bda\nCMOVZ RCX,RAX\nMOV RDX,qword ptr [RBX + R15*0x8]\nMOV EDI,0x4049ee\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401180\nCMP dword ptr [RSP + 0xc],0x0\nJLE 0x00402caa\nMOVSXD RBX,dword ptr [RSP + 0xc]\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOVZX ESI,byte ptr [R13 + RBP*0x1]\nMOV EDI,0x404a1c\nXOR EAX,EAX\nCALL 0x00401180\nINC RBP\nCMP RBP,RBX\nJL 0x00402c90\nMOV EDI,0xa\nCALL 0x004010f0\nMOV RBP,R12\nMOV RBX,qword ptr [RSP + 0x20]\nMOV EAX,dword ptr [RSP + 0xc]\nLEA R12D,[RAX + R14*0x1]\nCMP R12D,EBX\nJLE 0x00402cf0\nMOVSXD RBX,R12D\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004012e0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00402bd0\nJMP 0x00402da5\nMOV R12D,EBX\nJMP 0x00402bd4\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RAX + R15*0x8]\nCALL 0x004013a0\nMOV R12,RBX\nMOV RBX,RBP\nMOV RBP,RAX\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nTEST RBP,RBP\nMOV EAX,0x404bda\nCMOVZ RBP,RAX\nMOV ESI,0x404b9b\nXOR EAX,EAX\nMOV RDX,RBP\nMOV RBP,RBX\nMOV RBX,R12\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nNOP dword ptr [RAX]\nINC R15\nMOVSXD RAX,dword ptr [RSP + 0x8]\nCMP R15,RAX\nJL 0x00402c10\nJMP 0x00402d66\nXOR R14D,R14D\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004010e0\nMOV EDI,0x118\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x00402e94\nMOV dword ptr [RAX],0x2\nMOV ECX,dword ptr [RSP + 0x1c]\nMOV dword ptr [RAX + 0x10],ECX\nMOV dword ptr [RAX + 0x14],R14D\nMOV qword ptr [RAX + 0x18],RBP\nMOV RDI,RAX\nCALL 0x004035c0\nJMP 0x00402ec2\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404b71\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004010e0\nJMP 0x00402ec2\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404ada\nMOV ESI,0x1a\nJMP 0x00402e6b\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404af5\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x00402eac\nCALL 0x00401e70\nMOV RBP,qword ptr [0x00607280]\nMOV ESI,dword ptr [RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403680\nMOV RCX,RAX\nMOV ESI,0x404b0d\nXOR EAX,EAX\nMOV RDI,RBP\nMOV RDX,RCX\nJMP 0x00402eac\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404b34\nMOV ESI,0x18\nJMP 0x00402e6b\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404b4d\nMOV ESI,0x23\nMOV EDX,0x1\nCALL 0x00401370\nJMP 0x00402eb1\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOVSXD RDX,dword ptr [RSP + 0x8]\nMOV ESI,0x404b71\nXOR EAX,EAX\nJMP 0x00402dbb\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404bdc\nMOV EDX,0x20\nXOR EAX,EAX\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n41 89 f7\n48 89 fb\n48 85 db\n0f 84 f3 02 00 00\n41 83 ff 06\n0f 8c e9 02 00 00\n80 3b 00\n0f 84 e0 02 00 00\n48 89 df\n44 89 fe\ne8 15 f3 ff ff\n89 44 24 08\n85 c0\n0f 8e e1 02 00 00\n48 89 df\n89 c6\ne8 3f 0d 00 00\n41 89 c6\n45 85 f6\n0f 88 e6 02 00 00\n48 63 44 24 08\n48 01 c3\n41 29 c7\n48 89 df\n44 89 fe\ne8 4d 08 00 00\n89 c5\n89 6c 24 08\n85 ed\n0f 88 ec 02 00 00\n48 63 c5\n89 e9\nff c1\n48 8d 7c 03 01\n44 89 fe\n29 ce\ne8 49 f3 ff ff\n8d 44 28 01\n89 44 24 08\n48 98\n48 01 c3\n41 29 c7\n48 8d 54 24 08\n48 8d 4c 24 10\n48 89 df\n44 89 fe\ne8 34 08 00 00\n85 c0\n0f 88 2e 03 00 00\n48 63 5c 24 08\n48 85 db\n0f 84 b3 02 00 00\n48 89 df\ne8 b6 e6 ff ff\n48 89 c5\n48 85 ed\n0f 84 c1 02 00 00\n44 89 74 24 1c\n83 7c 24 08 00\n0f 8e 9d 01 00 00\n45 31 ff\n45 31 f6\neb 42\n8b 44 24 0c\n8d 48 ff\n89 4c 24 0c\n85 c0\n7e 21\n41 8a 45 00\n49 ff c5\n49 63 ce\n41 ff c6\n88 44 0d 00\neb de\n44 89 e3\ne9 48 01 00 00\n48 8b 3d a1 46 20 00\n48 8b 44 24 10\n4a 8b 34 f8\n48 8d 54 24 0c\ne8 76 0b 00 00\n49 89 c5\n83 7c 24 0c 00\n0f 84 c0 00 00 00\n83 3d 81 46 20 00 00\n74 7b\n48 89 5c 24 20\n49 89 ec\n48 8b 5c 24 10\n4a 8b 3c fb\ne8 49 e7 ff ff\n48 89 c1\n48 85 c9\nb8 da 4b 40 00\n48 0f 44 c8\n4a 8b 14 fb\nbf ee 49 40 00\n31 c0\n48 89 ce\ne8 07 e5 ff ff\n83 7c 24 0c 00\n7e 2a\n48 63 5c 24 0c\n31 ed\n66 0f 1f 84 00 00 00 00 00\n41 0f b6 74 2d 00\nbf 1c 4a 40 00\n31 c0\ne8 de e4 ff ff\n48 ff c5\n48 39 dd\n7c e6\nbf 0a 00 00 00\ne8 3c e4 ff ff\n4c 89 e5\n48 8b 5c 24 20\n8b 44 24 0c\n46 8d 24 30\n41 39 dc\n7e 27\n49 63 dc\n48 89 ef\n48 89 de\ne8 09 e6 ff ff\n48 89 c5\n48 85 ed\n0f 85 ed fe ff ff\ne9 bd 00 00 00\n41 89 dc\ne9 dc fe ff ff\n48 8b 44 24 10\n4a 8b 3c f8\ne8 9a e6 ff ff\n49 89 dc\n48 89 eb\n48 89 c5\ne8 5c f1 ff ff\n48 8b 3d 65 45 20 00\n48 85 ed\nb8 da 4b 40 00\n48 0f 44 e8\nbe 9b 4b 40 00\n31 c0\n48 89 ea\n48 89 dd\n4c 89 e3\ne8 d4 e4 ff ff\n48 8b 35 3d 45 20 00\nbf 0a 00 00 00\ne8 53 e4 ff ff\n0f 1f 00\n49 ff c7\n48 63 44 24 08\n49 39 c7\n0f 8c af fe ff ff\neb 03\n45 31 f6\n48 8b 7c 24 10\ne8 70 e3 ff ff\nbf 18 01 00 00\ne8 e6 e4 ff ff\n48 85 c0\n0f 84 11 01 00 00\nc7 00 02 00 00 00\n8b 4c 24 1c\n89 48 10\n44 89 70 14\n48 89 68 18\n48 89 c7\ne8 20 08 00 00\ne9 1d 01 00 00\ne8 c6 f0 ff ff\n48 8b 3d cf 44 20 00\nbe 71 4b 40 00\n31 c0\n48 89 da\ne8 50 e4 ff ff\n48 8b 35 b9 44 20 00\nbf 0a 00 00 00\ne8 cf e3 ff ff\n48 8b 7c 24 10\ne8 05 e3 ff ff\ne9 e2 00 00 00\ne8 8b f0 ff ff\n48 8b 0d 94 44 20 00\nbf da 4a 40 00\nbe 1a 00 00 00\neb 73\ne8 73 f0 ff ff\n48 8b 3d 7c 44 20 00\nbe f5 4a 40 00\n31 c0\n48 89 da\ne9 99 00 00 00\ne8 58 f0 ff ff\n48 8b 2d 61 44 20 00\n8b 74 24 08\n48 89 df\ne8 55 08 00 00\n48 89 c1\nbe 0d 4b 40 00\n31 c0\n48 89 ef\n48 89 ca\neb 6f\ne8 2e f0 ff ff\n48 8b 0d 37 44 20 00\nbf 34 4b 40 00\nbe 18 00 00 00\neb 16\ne8 16 f0 ff ff\n48 8b 0d 1f 44 20 00\nbf 4d 4b 40 00\nbe 23 00 00 00\nba 01 00 00 00\ne8 fb e4 ff ff\neb 3a\ne8 f4 ef ff ff\n48 8b 3d fd 43 20 00\n48 63 54 24 08\nbe 71 4b 40 00\n31 c0\ne9 27 ff ff ff\ne8 d7 ef ff ff\n48 8b 3d e0 43 20 00\nbe dc 4b 40 00\nba 20 00 00 00\n31 c0\ne8 5f e3 ff ff\n48 8b 35 c8 43 20 00\nbf 0a 00 00 00\ne8 de e2 ff ff\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p537
S'.text:0000000000402ad0\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad7\n.text:0000000000402ad9\n.text:0000000000402ada\n.text:0000000000402ade\n.text:0000000000402ae1\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aed\n.text:0000000000402af1\n.text:0000000000402af7\n.text:0000000000402afa\n.text:0000000000402b00\n.text:0000000000402b03\n.text:0000000000402b06\n.text:0000000000402b0b\n.text:0000000000402b0f\n.text:0000000000402b11\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b21\n.text:0000000000402b24\n.text:0000000000402b27\n.text:0000000000402b2d\n.text:0000000000402b32\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3b\n.text:0000000000402b3e\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b49\n.text:0000000000402b4b\n.text:0000000000402b51\n.text:0000000000402b54\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b5d\n.text:0000000000402b60\n.text:0000000000402b62\n.text:0000000000402b67\n.text:0000000000402b6b\n.text:0000000000402b6f\n.text:0000000000402b71\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b81\n.text:0000000000402b84\n.text:0000000000402b87\n.text:0000000000402b8c\n.text:0000000000402b8e\n.text:0000000000402b94\n.text:0000000000402b99\n.text:0000000000402b9c\n.text:0000000000402ba2\n.text:0000000000402ba5\n.text:0000000000402baa\n.text:0000000000402bad\n.text:0000000000402bb0\n.text:0000000000402bb6\n.text:0000000000402bbb\n.text:0000000000402bc0\n.text:0000000000402bc6\n.text:0000000000402bc9\n.text:0000000000402bcc\n.text:0000000000402bd0\n.text:0000000000402bd4\n.text:0000000000402bd7\n.text:0000000000402bdb\n.text:0000000000402bdd\n.text:0000000000402bdf\n.text:0000000000402be3\n.text:0000000000402be6\n.text:0000000000402be9\n.text:0000000000402bec\n.text:0000000000402bf0\n.text:0000000000402c00\n.text:0000000000402c03\n.text:0000000000402c10\n.text:0000000000402c17\n.text:0000000000402c1c\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c2a\n.text:0000000000402c2d\n.text:0000000000402c32\n.text:0000000000402c38\n.text:0000000000402c3f\n.text:0000000000402c41\n.text:0000000000402c46\n.text:0000000000402c49\n.text:0000000000402c4e\n.text:0000000000402c52\n.text:0000000000402c57\n.text:0000000000402c5a\n.text:0000000000402c5d\n.text:0000000000402c62\n.text:0000000000402c66\n.text:0000000000402c6a\n.text:0000000000402c6f\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c79\n.text:0000000000402c7e\n.text:0000000000402c80\n.text:0000000000402c85\n.text:0000000000402c87\n.text:0000000000402c90\n.text:0000000000402c96\n.text:0000000000402c9b\n.text:0000000000402c9d\n.text:0000000000402ca2\n.text:0000000000402ca5\n.text:0000000000402ca8\n.text:0000000000402caa\n.text:0000000000402caf\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cbc\n.text:0000000000402cc0\n.text:0000000000402cc4\n.text:0000000000402cc7\n.text:0000000000402cc9\n.text:0000000000402ccc\n.text:0000000000402ccf\n.text:0000000000402cd2\n.text:0000000000402cd7\n.text:0000000000402cda\n.text:0000000000402cdd\n.text:0000000000402ce3\n.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf8\n.text:0000000000402cfd\n.text:0000000000402d01\n.text:0000000000402d06\n.text:0000000000402d09\n.text:0000000000402d0c\n.text:0000000000402d0f\n.text:0000000000402d14\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d23\n.text:0000000000402d27\n.text:0000000000402d2c\n.text:0000000000402d2e\n.text:0000000000402d31\n.text:0000000000402d34\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d43\n.text:0000000000402d48\n.text:0000000000402d4d\n.text:0000000000402d50\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5b\n.text:0000000000402d61\n.text:0000000000402d63\n.text:0000000000402d66\n.text:0000000000402d6b\n.text:0000000000402d70\n.text:0000000000402d75\n.text:0000000000402d7a\n.text:0000000000402d7d\n.text:0000000000402d83\n.text:0000000000402d89\n.text:0000000000402d8d\n.text:0000000000402d90\n.text:0000000000402d94\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402da0\n.text:0000000000402da5\n.text:0000000000402daa\n.text:0000000000402db1\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dc0\n.text:0000000000402dc7\n.text:0000000000402dcc\n.text:0000000000402dd1\n.text:0000000000402dd6\n.text:0000000000402ddb\n.text:0000000000402de0\n.text:0000000000402de5\n.text:0000000000402dec\n.text:0000000000402df1\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfd\n.text:0000000000402e04\n.text:0000000000402e09\n.text:0000000000402e0b\n.text:0000000000402e0e\n.text:0000000000402e13\n.text:0000000000402e18\n.text:0000000000402e1f\n.text:0000000000402e23\n.text:0000000000402e26\n.text:0000000000402e2b\n.text:0000000000402e2e\n.text:0000000000402e33\n.text:0000000000402e35\n.text:0000000000402e38\n.text:0000000000402e3b\n.text:0000000000402e3d\n.text:0000000000402e42\n.text:0000000000402e49\n.text:0000000000402e4e\n.text:0000000000402e53\n.text:0000000000402e55\n.text:0000000000402e5a\n.text:0000000000402e61\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e70\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e7c\n.text:0000000000402e83\n.text:0000000000402e88\n.text:0000000000402e8d\n.text:0000000000402e8f\n.text:0000000000402e94\n.text:0000000000402e99\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402eac\n.text:0000000000402eb1\n.text:0000000000402eb8\n.text:0000000000402ebd\n.text:0000000000402ec2\n.text:0000000000402ec6\n.text:0000000000402ec7\n.text:0000000000402ec9\n.text:0000000000402ecb\n.text:0000000000402ecd\n.text:0000000000402ecf\n.text:0000000000402ed0\n'
p538
tp539
sS'exec_keycode'
p540
(S'\n__stdcall exec_keycode(op_keycode * opk)\n'
p541
V\u000aint exec_keycode(op_keycode *opk)\u000a\u000a{\u000a  bool bVar1;\u000a  byte bVar2;\u000a  KeySym KVar3;\u000a  long lVar4;\u000a  KeySym *pKVar5;\u000a  ulong uVar6;\u000a  uint uVar7;\u000a  int iVar8;\u000a  uint uVar9;\u000a  byte bVar10;\u000a  KeySym local_30;\u000a  \u000a  bVar10 = opk->target_keycode;\u000a  uVar7 = opk->count;\u000a  uVar6 = (ulong)uVar7;\u000a  if (bVar10 == 0) {\u000a    if (uVar7 != 0) {\u000a      if (min_keycode <= max_keycode) {\u000a        bVar10 = 0;\u000a        uVar7 = min_keycode;\u000a        do {\u000a          iVar8 = 0;\u000a          if (0 < opk->count) {\u000a            uVar6 = 0;\u000a            do {\u000a              iVar8 = (int)uVar6;\u000a              KVar3 = XKeycodeToKeysym(dpy,(ulong)uVar7 & 0xff,uVar6 & 0xffffffff);\u000a              if (KVar3 != opk->keysyms[uVar6]) break;\u000a              uVar6 = uVar6 + 1;\u000a              iVar8 = (int)uVar6;\u000a            } while ((long)uVar6 < (long)opk->count);\u000a          }\u000a          if (opk->count <= iVar8) {\u000a            return 0;\u000a          }\u000a          bVar2 = bVar10;\u000a          if (bVar10 == 0) {\u000a            uVar6 = 0;\u000a            do {\u000a              uVar9 = (uint)uVar6;\u000a              lVar4 = XKeycodeToKeysym(dpy,(ulong)uVar7 & 0xff,uVar6);\u000a              if (lVar4 != 0) break;\u000a              uVar9 = uVar9 + 1;\u000a              uVar6 = (ulong)uVar9;\u000a            } while ((int)uVar9 < 8);\u000a            bVar2 = (byte)uVar7;\u000a            if ((int)uVar9 < 8) {\u000a              bVar2 = bVar10;\u000a            }\u000a          }\u000a          bVar10 = bVar2;\u000a          bVar1 = (int)uVar7 < max_keycode;\u000a          uVar7 = uVar7 + 1;\u000a        } while (bVar1);\u000a        if (bVar10 != 0) {\u000a          XChangeKeyboardMapping(dpy,(ulong)bVar10,(ulong)(uint)opk->count,opk->keysyms,1);\u000a          return 0;\u000a        }\u000a      }\u000a      fprintf(stderr,"%s: no available keycode for assignment\u005cn",ProgramName);\u000a      return -1;\u000a    }\u000a  }\u000a  else {\u000a    if (uVar7 == 0) {\u000a      local_30 = 0;\u000a      bVar10 = opk->target_keycode;\u000a      pKVar5 = &local_30;\u000a      uVar6 = 1;\u000a    }\u000a    else {\u000a      pKVar5 = opk->keysyms;\u000a    }\u000a    XChangeKeyboardMapping(dpy,(ulong)bVar10,uVar6,pKVar5,1);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nMOVZX ESI,byte ptr [R15 + 0x10]\nTEST ESI,ESI\nMOV EDX,dword ptr [R15 + 0x14]\nJZ 0x00402384\nTEST EDX,EDX\nJZ 0x00402460\nMOV RDI,qword ptr [0x006072b8]\nMOV RCX,qword ptr [R15 + 0x18]\nJMP 0x0040247f\nTEST EDX,EDX\nJZ 0x0040248a\nMOV EBX,dword ptr [0x006072d4]\nCMP EBX,dword ptr [0x006072d0]\nJG 0x0040249d\nXOR R12D,R12D\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [R15 + 0x14],0x0\nMOV EBP,0x0\nJLE 0x004023e7\nXOR EBP,EBP\nNOP\nMOV RDI,qword ptr [0x006072b8]\nMOVZX ESI,BL\nMOV EDX,EBP\nCALL 0x00401300\nMOV RCX,qword ptr [R15 + 0x18]\nCMP RAX,qword ptr [RCX + RBP*0x8]\nJNZ 0x004023e7\nINC RBP\nMOVSXD RAX,dword ptr [R15 + 0x14]\nCMP RBP,RAX\nJL 0x004023c0\nCMP EBP,dword ptr [R15 + 0x14]\nJGE 0x0040248d\nTEST R12B,R12B\nJNZ 0x0040242a\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x006072b8]\nMOVZX ESI,BL\nMOV EDX,EBP\nCALL 0x00401300\nTEST RAX,RAX\nJNZ 0x0040241d\nINC EBP\nCMP EBP,0x8\nJL 0x00402400\nCMP EBP,0x7\nMOV EAX,EBX\nJG 0x00402427\nMOV EAX,R12D\nMOV R12B,AL\nCMP EBX,dword ptr [0x006072d0]\nLEA EAX,[RBX + 0x1]\nMOV EBX,EAX\nJL 0x004023b0\nTEST R12B,R12B\nJZ 0x0040249d\nMOV RDI,qword ptr [0x006072b8]\nMOVZX ESI,R12B\nMOV EDX,dword ptr [R15 + 0x14]\nMOV RCX,qword ptr [R15 + 0x18]\nMOV R8D,0x1\nCALL 0x00401120\nJMP 0x0040248d\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDI,qword ptr [0x006072b8]\nMOVZX ESI,byte ptr [R15 + 0x10]\nLEA RCX,[RSP + 0x8]\nMOV EDX,0x1\nMOV R8D,0x1\nCALL 0x00401120\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404e04\nXOR EAX,EAX\nCALL 0x00401210\nMOV R14D,0xffffffff\nJMP 0x0040248d\n'
p543
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 ff\n41 0f b6 77 10\n85 f6\n41 8b 57 14\n74 18\n85 d2\n0f 84 ec 00 00 00\n48 8b 3d 3d 4f 20 00\n49 8b 4f 18\ne9 fb 00 00 00\n85 d2\n0f 84 fe 00 00 00\n8b 1d 42 4f 20 00\n3b 1d 38 4f 20 00\n0f 8f ff 00 00 00\n45 31 e4\n45 31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 83 7f 14 00\nbd 00 00 00 00\n7e 2b\n31 ed\n66 90\n48 8b 3d f1 4e 20 00\n0f b6 f3\n89 ea\ne8 2f ef ff ff\n49 8b 4f 18\n48 3b 04 e9\n75 0c\n48 ff c5\n49 63 47 14\n48 39 c5\n7c d9\n41 3b 6f 14\n0f 8d 9c 00 00 00\n45 84 e4\n75 34\n31 ed\n0f 1f 84 00 00 00 00 00\n48 8b 3d b1 4e 20 00\n0f b6 f3\n89 ea\ne8 ef ee ff ff\n48 85 c0\n75 07\nff c5\n83 fd 08\n7c e3\n83 fd 07\n89 d8\n7f 03\n44 89 e0\n41 88 c4\n3b 1d a0 4e 20 00\n8d 43 01\n89 c3\n0f 8c 75 ff ff ff\n45 84 e4\n74 5d\n48 8b 3d 71 4e 20 00\n41 0f b6 f4\n41 8b 57 14\n49 8b 4f 18\n41 b8 01 00 00 00\ne8 c2 ec ff ff\neb 2d\n48 c7 44 24 08 00 00 00 00\n48 8b 3d 48 4e 20 00\n41 0f b6 77 10\n48 8d 4c 24 08\nba 01 00 00 00\n41 b8 01 00 00 00\ne8 96 ec ff ff\n45 31 f6\n44 89 f0\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 3d dc 4d 20 00\n48 8b 15 2d 4e 20 00\nbe 04 4e 40 00\n31 c0\ne8 59 ed ff ff\n41 be ff ff ff ff\neb ce\n'
p544
S'.text:0000000000402350\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402358\n.text:000000000040235c\n.text:000000000040235f\n.text:0000000000402364\n.text:0000000000402366\n.text:000000000040236a\n.text:000000000040236c\n.text:000000000040236e\n.text:0000000000402374\n.text:000000000040237b\n.text:000000000040237f\n.text:0000000000402384\n.text:0000000000402386\n.text:000000000040238c\n.text:0000000000402392\n.text:0000000000402398\n.text:000000000040239e\n.text:00000000004023a1\n.text:00000000004023a4\n.text:00000000004023b0\n.text:00000000004023b5\n.text:00000000004023ba\n.text:00000000004023bc\n.text:00000000004023be\n.text:00000000004023c0\n.text:00000000004023c7\n.text:00000000004023ca\n.text:00000000004023cc\n.text:00000000004023d1\n.text:00000000004023d5\n.text:00000000004023d9\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e2\n.text:00000000004023e5\n.text:00000000004023e7\n.text:00000000004023eb\n.text:00000000004023f1\n.text:00000000004023f4\n.text:00000000004023f6\n.text:00000000004023f8\n.text:0000000000402400\n.text:0000000000402407\n.text:000000000040240a\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402414\n.text:0000000000402416\n.text:0000000000402418\n.text:000000000040241b\n.text:000000000040241d\n.text:0000000000402420\n.text:0000000000402422\n.text:0000000000402424\n.text:0000000000402427\n.text:000000000040242a\n.text:0000000000402430\n.text:0000000000402433\n.text:0000000000402435\n.text:000000000040243b\n.text:000000000040243e\n.text:0000000000402440\n.text:0000000000402447\n.text:000000000040244b\n.text:000000000040244f\n.text:0000000000402453\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402460\n.text:0000000000402469\n.text:0000000000402470\n.text:0000000000402475\n.text:000000000040247a\n.text:000000000040247f\n.text:0000000000402485\n.text:000000000040248a\n.text:000000000040248d\n.text:0000000000402490\n.text:0000000000402494\n.text:0000000000402495\n.text:0000000000402497\n.text:0000000000402499\n.text:000000000040249b\n.text:000000000040249c\n.text:000000000040249d\n.text:00000000004024a4\n.text:00000000004024ab\n.text:00000000004024b0\n.text:00000000004024b2\n.text:00000000004024b7\n.text:00000000004024bd\n'
p545
tp546
sS'handle_line'
p547
(S'\n__stdcall handle_line(char * line)\n'
p548
V\u000avoid handle_line(char *line)\u000a\u000a{\u000a  dt *pdVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  dt *pdVar4;\u000a  int in_ESI;\u000a  char *__s2;\u000a  \u000a  iVar2 = skip_chars(line);\u000a  if (iVar2 < 0) {\u000a    badheader();\u000a    fprintf(stderr,"input line \u005c'%s\u005c'",line);\u000a    _IO_putc(10,(_IO_FILE *)stderr);\u000a    return;\u000a  }\u000a  __s2 = "keycode";\u000a  pdVar1 = dispatch_table;\u000a  do {\u000a    pdVar4 = pdVar1 + 1;\u000a                    /* WARNING: ptrarith problems */\u000a    if (iVar2 == pdVar1->length) {\u000a      iVar3 = strncmp(line,__s2,(long)pdVar1->length);\u000a      if (iVar3 == 0) {\u000a        iVar3 = skip_space(line + (long)iVar2);\u000a                    /* WARNING: Could not recover jumptable at 0x00401e10. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a        (**(code **)&pdVar4->length)\u000a                  (line + (long)(iVar3 + iVar2),(ulong)(uint)(in_ESI - (iVar3 + iVar2)));\u000a        return;\u000a      }\u000a    }\u000a    __s2 = pdVar4->command;\u000a    pdVar1 = pdVar4;\u000a  } while (__s2 != (char *)0x0);\u000a  fprintf(stderr,"%s:  unknown command on line %s:%d\u005cn",ProgramName,inputFilename,\u000a          (ulong)(lineno + 1));\u000a  parse_errors = parse_errors + 1;\u000a  return;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ESI\nMOV R15,RDI\nCALL 0x00401e20\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00401dac\nMOV ESI,0x4047fd\nMOV EBX,0x4046a8\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSXD RDX,dword ptr [RBX + -0x10]\nCMP EBP,EDX\nJNZ 0x00401d64\nMOV RDI,R15\nCALL 0x00401110\nTEST EAX,EAX\nJZ 0x00401de2\nMOV RSI,qword ptr [RBX]\nADD RBX,0x18\nTEST RSI,RSI\nJNZ 0x00401d50\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV RCX,qword ptr [0x00607250]\nMOV R8D,dword ptr [0x006072b4]\nINC R8D\nMOV ESI,0x404748\nXOR EAX,EAX\nCALL 0x00401210\nINC dword ptr [0x006072c8]\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x404738\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401210\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004011a0\nMOVSXD RDI,EBP\nADD RDI,R15\nMOV ESI,R14D\nSUB ESI,EBP\nCALL 0x00401eb0\nADD EAX,EBP\nCDQE\nADD R15,RAX\nSUB R14D,EAX\nMOV RAX,qword ptr [RBX + -0x8]\nMOV RDI,R15\nMOV ESI,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP RAX\n'
p550
S'55\n41 57\n41 56\n53\n50\n41 89 f6\n49 89 ff\ne8 ee 00 00 00\n89 c5\n85 ed\n78 74\nbe fd 47 40 00\nbb a8 46 40 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 63 53 f0\n39 d5\n75 0c\n4c 89 ff\ne8 b0 f3 ff ff\n85 c0\n74 7e\n48 8b 33\n48 83 c3 18\n48 85 f6\n75 e0\n48 8b 3d 09 55 20 00\n48 8b 15 5a 55 20 00\n48 8b 0d cb 54 20 00\n44 8b 05 28 55 20 00\n41 ff c0\nbe 48 47 40 00\n31 c0\ne8 75 f4 ff ff\nff 05 27 55 20 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 bf 00 00 00\n48 8b 3d c8 54 20 00\nbe 38 47 40 00\n31 c0\n4c 89 fa\ne8 49 f4 ff ff\n48 8b 35 b2 54 20 00\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\ne9 be f3 ff ff\n48 63 fd\n4c 01 ff\n44 89 f6\n29 ee\ne8 be 00 00 00\n01 e8\n48 98\n49 01 c7\n41 29 c6\n48 8b 43 f8\n4c 89 ff\n44 89 f6\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nff e0\n'
p551
S'.text:0000000000401d20\n.text:0000000000401d21\n.text:0000000000401d23\n.text:0000000000401d25\n.text:0000000000401d26\n.text:0000000000401d27\n.text:0000000000401d2a\n.text:0000000000401d2d\n.text:0000000000401d32\n.text:0000000000401d34\n.text:0000000000401d36\n.text:0000000000401d38\n.text:0000000000401d3d\n.text:0000000000401d42\n.text:0000000000401d50\n.text:0000000000401d54\n.text:0000000000401d56\n.text:0000000000401d58\n.text:0000000000401d5b\n.text:0000000000401d60\n.text:0000000000401d62\n.text:0000000000401d64\n.text:0000000000401d67\n.text:0000000000401d6b\n.text:0000000000401d6e\n.text:0000000000401d70\n.text:0000000000401d77\n.text:0000000000401d7e\n.text:0000000000401d85\n.text:0000000000401d8c\n.text:0000000000401d8f\n.text:0000000000401d94\n.text:0000000000401d96\n.text:0000000000401d9b\n.text:0000000000401da1\n.text:0000000000401da5\n.text:0000000000401da6\n.text:0000000000401da8\n.text:0000000000401daa\n.text:0000000000401dab\n.text:0000000000401dac\n.text:0000000000401db1\n.text:0000000000401db8\n.text:0000000000401dbd\n.text:0000000000401dbf\n.text:0000000000401dc2\n.text:0000000000401dc7\n.text:0000000000401dce\n.text:0000000000401dd3\n.text:0000000000401dd7\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddc\n.text:0000000000401ddd\n.text:0000000000401de2\n.text:0000000000401de5\n.text:0000000000401de8\n.text:0000000000401deb\n.text:0000000000401ded\n.text:0000000000401df2\n.text:0000000000401df4\n.text:0000000000401df6\n.text:0000000000401df9\n.text:0000000000401dfc\n.text:0000000000401e00\n.text:0000000000401e03\n.text:0000000000401e06\n.text:0000000000401e0a\n.text:0000000000401e0b\n.text:0000000000401e0d\n.text:0000000000401e0f\n.text:0000000000401e10\n'
p552
tp553
sS'__ctype_tolower_loc'
p554
(S'\n__stdcall __ctype_tolower_loc()\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_tolower_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_tolower_loc_00607188)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x00607188]\n'
p557
S'ff 25 c2 5d 20 00\n'
p558
S'.plt:00000000004013c0\n'
p559
tp560
sS'exec_clear'
p561
(S'\n__stdcall exec_clear(op_clearmodifier * opcm)\n'
p562
V\u000aint exec_clear(op_clearmodifier *opcm)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = ClearModifier(&map);\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'MOV ESI,dword ptr [RDI + 0x10]\nMOV EDI,0x6072a0\nJMP 0x004016b0\n'
p564
S'8b 77 10\nbf a0 72 60 00\ne9 d3 f0 ff ff\n'
p565
S'.text:00000000004025d0\n.text:00000000004025d3\n.text:00000000004025d8\n'
p566
tp567
sS'__libc_csu_fini'
p568
(S'\n__stdcall __libc_csu_fini()\n'
p569
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p570
S'RET\n'
p571
S'f3 c3\n'
p572
S'.text:0000000000404280\n'
p573
tp574
sS'XChangeKeyboardMapping'
p575
(S'\n__stdcall XChangeKeyboardMapping()\n'
p576
V\u000avoid XChangeKeyboardMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XChangeKeyboardMapping_00607038)();\u000a  return;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00607038]\n'
p578
S'ff 25 12 5f 20 00\n'
p579
S'.plt:0000000000401120\n'
p580
tp581
sS'copy_to_scratch'
p582
(S'\n__stdcall copy_to_scratch(char * s)\n'
p583
V\u000achar * copy_to_scratch(char *s)\u000a\u000a{\u000a  char *buf;\u000a  int buflen;\u000a  int iVar1;\u000a  size_t __n;\u000a  uint in_ESI;\u000a  \u000a  __n = 0;\u000a  if (-1 < (int)in_ESI) {\u000a    __n = (size_t)in_ESI;\u000a  }\u000a  iVar1 = (int)__n;\u000a  if (buflen <= iVar1) {\u000a    if (buf != (char *)0x0) {\u000a      free(buf);\u000a    }\u000a    buflen = 0x50;\u000a    if (0x27 < iVar1) {\u000a      buflen = iVar1 * 2;\u000a    }\u000a    buf = (char *)malloc((ulong)(buflen | 1));\u000a    if (buf == (char *)0x0) {\u000a      fprintf(stderr,"attempt to allocate %d byte scratch buffer\u005cn",(ulong)(buflen + 1));\u000a      return (char *)0x0;\u000a    }\u000a  }\u000a  strncpy(buf,s,__n);\u000a  buf[__n] = 0;\u000a  return buf;\u000a}\u000a\u000a
p584
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nXOR EBX,EBX\nTEST ESI,ESI\nCMOVNS EBX,ESI\nCMP EBX,dword ptr [0x006072b0]\nJL 0x004036cf\nMOV RDI,qword ptr [0x006072a8]\nTEST RDI,RDI\nJZ 0x004036a7\nCALL 0x004010e0\nLEA EAX,[RBX + RBX*0x1]\nCMP EBX,0x28\nMOV EDI,0x50\nCMOVGE EDI,EAX\nMOV dword ptr [0x006072b0],EDI\nOR EDI,0x1\nCALL 0x00401260\nMOV qword ptr [0x006072a8],RAX\nTEST RAX,RAX\nJZ 0x004036fa\nMOV RDI,qword ptr [0x006072a8]\nMOV EBX,EBX\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00401100\nMOV R14,qword ptr [0x006072a8]\nMOV byte ptr [R14 + RBX*0x1],0x0\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RDI,qword ptr [0x00607280]\nMOV EDX,dword ptr [0x006072b0]\nINC EDX\nXOR R14D,R14D\nMOV ESI,0x404942\nXOR EAX,EAX\nCALL 0x00401210\nJMP 0x004036ef\n'
p585
S'41 56\n53\n50\n49 89 fe\n31 db\n85 f6\n0f 49 de\n3b 1d 1c 3c 20 00\n7c 39\n48 8b 3d 0b 3c 20 00\n48 85 ff\n74 05\ne8 39 da ff ff\n8d 04 1b\n83 fb 28\nbf 50 00 00 00\n0f 4d f8\n89 3d f5 3b 20 00\n83 cf 01\ne8 9d db ff ff\n48 89 05 de 3b 20 00\n48 85 c0\n74 2b\n48 8b 3d d2 3b 20 00\n89 db\n4c 89 f6\n48 89 da\ne8 1d da ff ff\n4c 8b 35 be 3b 20 00\n41 c6 04 1e 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 3d 7f 3b 20 00\n8b 15 a9 3b 20 00\nff c2\n45 31 f6\nbe 42 49 40 00\n31 c0\ne8 f8 da ff ff\neb d5\n'
p586
S'.text:0000000000403680\n.text:0000000000403682\n.text:0000000000403683\n.text:0000000000403684\n.text:0000000000403687\n.text:0000000000403689\n.text:000000000040368b\n.text:000000000040368e\n.text:0000000000403694\n.text:0000000000403696\n.text:000000000040369d\n.text:00000000004036a0\n.text:00000000004036a2\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036ad\n.text:00000000004036b2\n.text:00000000004036b5\n.text:00000000004036bb\n.text:00000000004036be\n.text:00000000004036c3\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036cf\n.text:00000000004036d6\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036ea\n.text:00000000004036ef\n.text:00000000004036f2\n.text:00000000004036f6\n.text:00000000004036f7\n.text:00000000004036f9\n.text:00000000004036fa\n.text:0000000000403701\n.text:0000000000403707\n.text:0000000000403709\n.text:000000000040370c\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403718\n'
p587
tp588
sS'__ctype_b_loc'
p589
(S'\n__stdcall __ctype_b_loc()\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00607190)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x00607190]\n'
p592
S'ff 25 ba 5d 20 00\n'
p593
S'.plt:00000000004013d0\n'
p594
tp595
sS'XOpenDisplay'
p596
(S'\n__stdcall XOpenDisplay()\n'
p597
V\u000avoid XOpenDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XOpenDisplay_006070a8)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006070a8]\n'
p599
S'ff 25 a2 5e 20 00\n'
p600
S'.plt:0000000000401200\n'
p601
tp602
sS'_start'
p603
(S'\n__stdcall _start()\n'
p604
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00606ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p605
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x404280\nMOV RCX,0x404210\nMOV RDI,0x403c10\nCALL qword ptr [0x00606ff0]\nHLT\n'
p606
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 80 42 40 00\n48 c7 c1 10 42 40 00\n48 c7 c7 10 3c 40 00\nff 15 e6 5b 20 00\nf4\n'
p607
S'.text:00000000004013e0\n.text:00000000004013e2\n.text:00000000004013e5\n.text:00000000004013e6\n.text:00000000004013e9\n.text:00000000004013ed\n.text:00000000004013ee\n.text:00000000004013ef\n.text:00000000004013f6\n.text:00000000004013fd\n.text:0000000000401404\n.text:000000000040140a\n'
p608
tp609
sS'ClearModifier'
p610
(S'\n__stdcall ClearModifier(XModifierKeymap * * mapp)\n'
p611
V\u000aint ClearModifier(XModifierKeymap **mapp)\u000a\u000a{\u000a  int iVar1;\u000a  XModifierKeymap *pXVar2;\u000a  KeyCode *pKVar3;\u000a  ulong uVar4;\u000a  ulong uVar5;\u000a  int in_ESI;\u000a  \u000a  pXVar2 = *mapp;\u000a  iVar1 = pXVar2->max_keypermod;\u000a  if (0 < iVar1) {\u000a    pKVar3 = pXVar2->modifiermap;\u000a    uVar5 = 0;\u000a    do {\u000a      pKVar3[uVar5 + (long)(iVar1 * in_ESI)] = 0;\u000a      uVar4 = uVar5 + 1;\u000a      uVar5 = uVar4 & 0xffffffff;\u000a    } while ((int)uVar4 < pXVar2->max_keypermod);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p612
S'MOV RAX,qword ptr [RDI]\nMOV ECX,dword ptr [RAX]\nTEST ECX,ECX\nJLE 0x004016db\nIMUL ECX,ESI\nMOVSXD RCX,ECX\nADD RCX,qword ptr [RAX + 0x8]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV byte ptr [RCX + RDX*0x1],0x0\nINC RDX\nCMP EDX,dword ptr [RAX]\nJL 0x004016d0\nXOR EAX,EAX\nRET\n'
p613
S'48 8b 07\n8b 08\n85 c9\n7e 22\n0f af ce\n48 63 c9\n48 03 48 08\n31 d2\n66 66 2e 0f 1f 84 00 00 00 00 00\nc6 04 11 00\n48 ff c2\n3b 10\n7c f5\n31 c0\nc3\n'
p614
S'.text:00000000004016b0\n.text:00000000004016b3\n.text:00000000004016b5\n.text:00000000004016b7\n.text:00000000004016b9\n.text:00000000004016bc\n.text:00000000004016bf\n.text:00000000004016c3\n.text:00000000004016c5\n.text:00000000004016d0\n.text:00000000004016d4\n.text:00000000004016d7\n.text:00000000004016d9\n.text:00000000004016db\n.text:00000000004016dd\n'
p615
tp616
sS'finish_keycodes'
p617
(S'\n__stdcall finish_keycodes(char * line, KeyCode * keycodes)\n'
p618
V\u000avoid finish_keycodes(char *line,KeyCode *keycodes)\u000a\u000a{\u000a  int iVar1;\u000a  op *p;\u000a  int in_ECX;\u000a  long in_RDX;\u000a  long lVar2;\u000a  int iVar3;\u000a  KeySym *kslist;\u000a  int local_34;\u000a  undefined8 local_30;\u000a  \u000a  local_34 = skip_until_char();\u000a  iVar3 = (int)keycodes - local_34;\u000a  if ((iVar3 == 0 || (int)keycodes < local_34) || (line = line + (long)local_34, *line != '=')) {\u000a    badheader();\u000a    fwrite("keycode command (missing keysym list),",0x26,1,stderr);\u000aLAB_00403368:\u000a    _IO_putc(10,(_IO_FILE *)stderr);\u000a  }\u000a  else {\u000a    local_34 = skip_space(line + 1);\u000a    iVar1 = get_keysym_list(line + (long)local_34 + 1,(int *)(ulong)(uint)((iVar3 + -1) - local_34),\u000a                            (KeySym **)&local_34);\u000a    iVar3 = local_34;\u000a    if ((-1 < iVar1) && (0 < in_ECX)) {\u000a      lVar2 = (long)in_ECX + 1;\u000a      do {\u000a        p = (op *)malloc(0x118);\u000a        if (p == (op *)0x0) {\u000a          badheader();\u000a          fprintf(stderr,"attempt to allocate a %ld byte keycode opcode",0x20);\u000a          goto LAB_00403368;\u000a        }\u000a        *(undefined4 *)*p = 0;\u000a        (*p)[0x10] = *(byte *)(in_RDX + -2 + lVar2);\u000a        *(int *)(*p + 0x14) = iVar3;\u000a        *(undefined8 *)(*p + 0x18) = local_30;\u000a        add_to_work_queue(p);\u000a        lVar2 = lVar2 + -1;\u000a      } while (1 < lVar2);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14D,ECX\nMOV R15,RDX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00403390\nMOV dword ptr [RSP + 0x4],EAX\nSUB EBP,EAX\nJLE 0x00403348\nCDQE\nADD RBX,RAX\nCMP byte ptr [RBX],0x3d\nJNZ 0x00403348\nLEA RDI,[RBX + 0x1]\nDEC EBP\nMOV ESI,EBP\nCALL 0x00401eb0\nMOV dword ptr [RSP + 0x4],EAX\nCDQE\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nSUB EBP,EAX\nLEA RDX,[RSP + 0x4]\nLEA RCX,[RSP + 0x8]\nMOV ESI,EBP\nCALL 0x004033c0\nTEST EAX,EAX\nJS 0x00403379\nTEST R14D,R14D\nJLE 0x00403379\nMOV R12D,dword ptr [RSP + 0x4]\nMOV RBP,qword ptr [RSP + 0x8]\nMOVSXD RBX,R14D\nINC RBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x118\nCALL 0x00401260\nTEST RAX,RAX\nJZ 0x00403329\nMOV dword ptr [RAX],0x0\nMOVZX ECX,byte ptr [R15 + RBX*0x1 + -0x2]\nMOV byte ptr [RAX + 0x10],CL\nMOV dword ptr [RAX + 0x14],R12D\nMOV qword ptr [RAX + 0x18],RBP\nMOV RDI,RAX\nCALL 0x004035c0\nDEC RBX\nCMP RBX,0x1\nJG 0x004032f0\nJMP 0x00403379\nCALL 0x00401e70\nMOV RDI,qword ptr [0x00607280]\nMOV ESI,0x40488a\nMOV EDX,0x20\nXOR EAX,EAX\nCALL 0x00401210\nJMP 0x00403368\nCALL 0x00401e70\nMOV RCX,qword ptr [0x00607280]\nMOV EDI,0x404863\nMOV ESI,0x26\nMOV EDX,0x1\nCALL 0x00401370\nMOV RSI,qword ptr [0x00607280]\nMOV EDI,0xa\nCALL 0x004011a0\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p620
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n41 89 ce\n49 89 d7\n89 f5\n48 89 fb\ne8 14 01 00 00\n89 44 24 04\n29 c5\n0f 8e c0 00 00 00\n48 98\n48 01 c3\n80 3b 3d\n0f 85 b2 00 00 00\n48 8d 7b 01\nff cd\n89 ee\ne8 0d ec ff ff\n89 44 24 04\n48 98\n48 8d 7c 03 01\n29 c5\n48 8d 54 24 04\n48 8d 4c 24 08\n89 ee\ne8 ff 00 00 00\n85 c0\n0f 88 b0 00 00 00\n45 85 f6\n0f 8e a7 00 00 00\n44 8b 64 24 04\n48 8b 6c 24 08\n49 63 de\n48 ff c3\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nbf 18 01 00 00\ne8 66 df ff ff\n48 85 c0\n74 2a\nc7 00 00 00 00 00\n41 0f b6 4c 1f fe\n88 48 10\n44 89 60 14\n48 89 68 18\n48 89 c7\ne8 a2 02 00 00\n48 ff cb\n48 83 fb 01\n7f c9\neb 50\ne8 42 eb ff ff\n48 8b 3d 4b 3f 20 00\nbe 8a 48 40 00\nba 20 00 00 00\n31 c0\ne8 ca de ff ff\neb 20\ne8 23 eb ff ff\n48 8b 0d 2c 3f 20 00\nbf 63 48 40 00\nbe 26 00 00 00\nba 01 00 00 00\ne8 08 e0 ff ff\n48 8b 35 11 3f 20 00\nbf 0a 00 00 00\ne8 27 de ff ff\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p621
S'.text:0000000000403260\n.text:0000000000403261\n.text:0000000000403263\n.text:0000000000403265\n.text:0000000000403267\n.text:0000000000403268\n.text:000000000040326c\n.text:000000000040326f\n.text:0000000000403272\n.text:0000000000403274\n.text:0000000000403277\n.text:000000000040327c\n.text:0000000000403280\n.text:0000000000403282\n.text:0000000000403288\n.text:000000000040328a\n.text:000000000040328d\n.text:0000000000403290\n.text:0000000000403296\n.text:000000000040329a\n.text:000000000040329c\n.text:000000000040329e\n.text:00000000004032a3\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032ae\n.text:00000000004032b0\n.text:00000000004032b5\n.text:00000000004032ba\n.text:00000000004032bc\n.text:00000000004032c1\n.text:00000000004032c3\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032d2\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032df\n.text:00000000004032e2\n.text:00000000004032f0\n.text:00000000004032f5\n.text:00000000004032fa\n.text:00000000004032fd\n.text:00000000004032ff\n.text:0000000000403305\n.text:000000000040330b\n.text:000000000040330e\n.text:0000000000403312\n.text:0000000000403316\n.text:0000000000403319\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403325\n.text:0000000000403327\n.text:0000000000403329\n.text:000000000040332e\n.text:0000000000403335\n.text:000000000040333a\n.text:000000000040333f\n.text:0000000000403341\n.text:0000000000403346\n.text:0000000000403348\n.text:000000000040334d\n.text:0000000000403354\n.text:0000000000403359\n.text:000000000040335e\n.text:0000000000403363\n.text:0000000000403368\n.text:000000000040336f\n.text:0000000000403374\n.text:0000000000403379\n.text:000000000040337d\n.text:000000000040337e\n.text:0000000000403380\n.text:0000000000403382\n.text:0000000000403384\n.text:0000000000403385\n'
p622
tp623
sS'printf'
p624
(S'\n__stdcall printf(char * __format)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_00607068)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00607068]\n'
p627
S'ff 25 e2 5e 20 00\n'
p628
S'.plt:0000000000401180\n'
p629
tp630
sS'XQueryKeymap'
p631
(S'\n__stdcall XQueryKeymap()\n'
p632
V\u000avoid XQueryKeymap(void)\u000a\u000a{\u000a  (*(code *)PTR_XQueryKeymap_006070e8)();\u000a  return;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x006070e8]\n'
p634
S'ff 25 62 5e 20 00\n'
p635
S'.plt:0000000000401280\n'
p636
tp637
sS'mapping_busy_pointer'
p638
(S'\n__stdcall mapping_busy_pointer()\n'
p639
V\u000avoid mapping_busy_pointer(uint uParm1)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  int wy;\u000a  int wx;\u000a  int ry;\u000a  int rx;\u000a  Window child;\u000a  Window root;\u000a  uint local_34;\u000a  undefined local_30 [4];\u000a  undefined local_2c [4];\u000a  undefined local_28 [4];\u000a  undefined local_24 [4];\u000a  undefined local_20 [8];\u000a  undefined local_18 [8];\u000a  \u000a  iVar1 = XQueryPointer(dpy,*(undefined8 *)\u000a                             (*(long *)(dpy + 0xe8) + 0x10 + (long)*(int *)(dpy + 0xe0) * 0x80),\u000a                        local_18,local_20,local_24,local_28,local_2c,local_30,&local_34);\u000a  if (iVar1 == 0) {\u000a    local_34 = 0;\u000a  }\u000a  fprintf(stderr,"%s:  please release the following buttons within %d seconds:\u005cn",ProgramName,\u000a          (ulong)uParm1);\u000a  lVar2 = -5;\u000a  do {\u000a    while ((local_34 & *(uint *)(&UNK_00404634 + lVar2 * 4)) == 0) {\u000a      lVar2 = lVar2 + 1;\u000a      if (lVar2 == 0) goto LAB_00401cef;\u000a    }\u000a    fprintf(stderr,"    Button%d\u005cn",(ulong)((int)lVar2 + 6));\u000a    lVar2 = lVar2 + 1;\u000a  } while (lVar2 != 0);\u000aLAB_00401cef:\u000a  sleep(uParm1);\u000a  return;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x28\nMOV EBP,EDI\nMOV RDI,qword ptr [0x006072b8]\nMOV RAX,qword ptr [0xe8 + RDI]\nMOVSXD RCX,dword ptr [0xe0 + RDI]\nSHL RCX,0x7\nMOV RSI,qword ptr [RAX + RCX*0x1 + 0x10]\nSUB RSP,0x8\nLEA RAX,[RSP + 0xc]\nLEA RBX,[RSP + 0x10]\nLEA R10,[RSP + 0x14]\nLEA RDX,[RSP + 0x28]\nLEA RCX,[RSP + 0x20]\nLEA R8,[RSP + 0x1c]\nLEA R9,[RSP + 0x18]\nPUSH RAX\nPUSH RBX\nPUSH R10\nCALL 0x00401230\nADD RSP,0x20\nTEST EAX,EAX\nJNZ 0x00401c96\nMOV dword ptr [RSP + 0x4],0x0\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x4045ab\nXOR EAX,EAX\nMOV ECX,EBP\nCALL 0x00401210\nMOV RBX,-0x5\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [0x404634 + RBX*0x4]\nTEST dword ptr [RSP + 0x4],EAX\nJNZ 0x00401cd4\nINC RBX\nJNZ 0x00401cc0\nJMP 0x00401cef\nMOV RDI,qword ptr [0x00607280]\nLEA EDX,[RBX + 0x6]\nMOV ESI,0x4045e9\nXOR EAX,EAX\nCALL 0x00401210\nINC RBX\nJNZ 0x00401cc0\nMOV EDI,EBP\nCALL 0x004013b0\nADD RSP,0x28\nPOP RBX\nPOP RBP\nRET\n'
p641
S'55\n53\n48 83 ec 28\n89 fd\n48 8b 3d 79 56 20 00\n48 8b 87 e8 00 00 00\n48 63 8f e0 00 00 00\n48 c1 e1 07\n48 8b 74 08 10\n48 83 ec 08\n48 8d 44 24 0c\n48 8d 5c 24 10\n4c 8d 54 24 14\n48 8d 54 24 28\n48 8d 4c 24 20\n4c 8d 44 24 1c\n4c 8d 4c 24 18\n50\n53\n41 52\ne8 aa f5 ff ff\n48 83 c4 20\n85 c0\n75 08\nc7 44 24 04 00 00 00 00\n48 8b 3d e3 55 20 00\n48 8b 15 34 56 20 00\nbe ab 45 40 00\n31 c0\n89 e9\ne8 5e f5 ff ff\n48 c7 c3 fb ff ff ff\n0f 1f 80 00 00 00 00\n8b 04 9d 34 46 40 00\n85 44 24 04\n75 07\n48 ff c3\n75 ee\neb 1b\n48 8b 3d a5 55 20 00\n8d 53 06\nbe e9 45 40 00\n31 c0\ne8 26 f5 ff ff\n48 ff c3\n75 d1\n89 ef\ne8 ba f6 ff ff\n48 83 c4 28\n5b\n5d\nc3\n'
p642
S'.text:0000000000401c30\n.text:0000000000401c31\n.text:0000000000401c32\n.text:0000000000401c36\n.text:0000000000401c38\n.text:0000000000401c3f\n.text:0000000000401c46\n.text:0000000000401c4d\n.text:0000000000401c51\n.text:0000000000401c56\n.text:0000000000401c5a\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c73\n.text:0000000000401c78\n.text:0000000000401c7d\n.text:0000000000401c7e\n.text:0000000000401c7f\n.text:0000000000401c81\n.text:0000000000401c86\n.text:0000000000401c8a\n.text:0000000000401c8c\n.text:0000000000401c8e\n.text:0000000000401c96\n.text:0000000000401c9d\n.text:0000000000401ca4\n.text:0000000000401ca9\n.text:0000000000401cab\n.text:0000000000401cad\n.text:0000000000401cb2\n.text:0000000000401cb9\n.text:0000000000401cc0\n.text:0000000000401cc7\n.text:0000000000401ccb\n.text:0000000000401ccd\n.text:0000000000401cd0\n.text:0000000000401cd2\n.text:0000000000401cd4\n.text:0000000000401cdb\n.text:0000000000401cde\n.text:0000000000401ce3\n.text:0000000000401ce5\n.text:0000000000401cea\n.text:0000000000401ced\n.text:0000000000401cef\n.text:0000000000401cf1\n.text:0000000000401cf6\n.text:0000000000401cfa\n.text:0000000000401cfb\n.text:0000000000401cfc\n'
p643
tp644
sS'parse_modifier'
p645
(S'\n__stdcall parse_modifier(char * line)\n'
p646
V\u000aint parse_modifier(char *line)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  ushort **ppuVar3;\u000a  __int32_t **pp_Var4;\u000a  ulong uVar5;\u000a  char *__s2;\u000a  modtab *pmVar6;\u000a  uint in_ESI;\u000a  \u000a  if (0 < (int)in_ESI) {\u000a    ppuVar3 = __ctype_b_loc();\u000a    uVar5 = (ulong)in_ESI;\u000a    __s2 = line;\u000a    do {\u000a      cVar1 = *__s2;\u000a      if ((*(byte *)((long)*ppuVar3 + (long)cVar1 * 2 + 1) & 1) != 0) {\u000a        pp_Var4 = __ctype_tolower_loc();\u000a        *__s2 = *(char *)(*pp_Var4 + (long)cVar1);\u000a      }\u000a      __s2 = __s2 + 1;\u000a      uVar5 = uVar5 - 1;\u000a    } while (uVar5 != 0);\u000a  }\u000a  if (modifier_table[0].name != (char *)0x0) {\u000a    pmVar6 = modifier_table;\u000a    __s2 = modifier_table[0].name;\u000a    do {\u000a      pmVar6 = pmVar6 + 1;\u000a      if ((pmVar6[-1].length == in_ESI) &&\u000a         (iVar2 = strncmp(line,__s2,(long)(int)in_ESI), iVar2 == 0)) {\u000a        return pmVar6[-1].value;\u000a      }\u000a      __s2 = pmVar6->name;\u000a    } while (__s2 != (char *)0x0);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13D,ESI\nMOV R14,RDI\nTEST R13D,R13D\nJLE 0x004038b8\nCALL 0x004013d0\nMOV R15,RAX\nMOV EBX,R13D\nMOV RBP,R14\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R15]\nMOVSX R12,byte ptr [RBP]\nTEST byte ptr [RAX + R12*0x2 + 0x1],0x1\nJZ 0x004038b0\nCALL 0x004013c0\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,byte ptr [RAX + R12*0x4]\nMOV byte ptr [RBP],AL\nINC RBP\nDEC RBX\nJNZ 0x00403890\nMOV RSI,qword ptr [0x006071b0]\nMOV R15D,0xffffffff\nTEST RSI,RSI\nJZ 0x00403908\nMOVSXD R12,R13D\nMOV EBP,0x6071c0\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP dword ptr [RBP + -0x8],R13D\nJNZ 0x004038f5\nMOV RDI,R14\nMOV RDX,R12\nCALL 0x00401110\nTEST EAX,EAX\nJZ 0x00403904\nMOV RSI,qword ptr [RBP]\nADD RBP,0x10\nTEST RSI,RSI\nJNZ 0x004038e0\nJMP 0x00403908\nMOV R15D,dword ptr [RBP + -0x4]\nMOV EAX,R15D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f5\n49 89 fe\n45 85 ed\n7e 42\ne8 55 db ff ff\n49 89 c7\n44 89 eb\n4c 89 f5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 07\n4c 0f be 65 00\n42 f6 44 60 01 01\n74 10\ne8 1b db ff ff\n48 8b 00\n42 0f b6 04 a0\n88 45 00\n48 ff c5\n48 ff cb\n75 d8\n48 8b 35 f1 38 20 00\n41 bf ff ff ff ff\n48 85 f6\n74 3e\n4d 63 e5\nbd c0 71 60 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n44 39 6d f8\n75 0f\n4c 89 f7\n4c 89 e2\ne8 1f d8 ff ff\n85 c0\n74 0f\n48 8b 75 00\n48 83 c5 10\n48 85 f6\n75 de\neb 04\n44 8b 7d fc\n44 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000403860\n.text:0000000000403861\n.text:0000000000403863\n.text:0000000000403865\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386a\n.text:000000000040386b\n.text:000000000040386e\n.text:0000000000403871\n.text:0000000000403874\n.text:0000000000403876\n.text:000000000040387b\n.text:000000000040387e\n.text:0000000000403881\n.text:0000000000403884\n.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403898\n.text:000000000040389e\n.text:00000000004038a0\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038ad\n.text:00000000004038b0\n.text:00000000004038b3\n.text:00000000004038b6\n.text:00000000004038b8\n.text:00000000004038bf\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038ca\n.text:00000000004038cd\n.text:00000000004038d2\n.text:00000000004038e0\n.text:00000000004038e4\n.text:00000000004038e6\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038f1\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f9\n.text:00000000004038fd\n.text:0000000000403900\n.text:0000000000403902\n.text:0000000000403904\n.text:0000000000403908\n.text:000000000040390b\n.text:000000000040390f\n.text:0000000000403910\n.text:0000000000403912\n.text:0000000000403914\n.text:0000000000403916\n.text:0000000000403918\n.text:0000000000403919\n'
p650
tp651
sS'__strdup'
p652
(S'\n__stdcall __strdup()\n'
p653
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_00607090)();\u000a  return;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00607090]\n'
p655
S'ff 25 ba 5e 20 00\n'
p656
S'.plt:00000000004011d0\n'
p657
tp658
sS'PrintKeyTable'
p659
(S'\n__stdcall PrintKeyTable(FILE * fp)\n'
p660
V\u000avoid PrintKeyTable(FILE *fp)\u000a\u000a{\u000a  ulong uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  long lVar4;\u000a  char *__format;\u000a  uint uVar5;\u000a  FILE *__stream;\u000a  long lVar6;\u000a  ulong uVar7;\u000a  ulong *puVar8;\u000a  ulong *puVar9;\u000a  uint local_4c;\u000a  uint local_48;\u000a  uint local_44;\u000a  ulong *local_40;\u000a  ulong local_38;\u000a  \u000a  iVar2 = (int)fp;\u000a  XDisplayKeycodes(dpy,&local_44,&local_4c);\u000a  local_40 = (ulong *)XGetKeyboardMapping(dpy,(ulong)(byte)local_44,\u000a                                          (ulong)((1 - local_44) + local_4c));\u000a  if (local_40 == (ulong *)0x0) {\u000a    fprintf(stderr,"%s:  unable to get keyboard mapping table.\u005cn",ProgramName);\u000a  }\u000a  else {\u000a    if (iVar2 == 0) {\u000a      fprintf(__stream,"There are %d KeySyms per KeyCode; KeyCodes range from %d to %d.\u005cn\u005cn",\u000a              (ulong)local_48,(ulong)local_44,(ulong)local_4c);\u000a      fwrite("    KeyCode\u005ctKeysym (Keysym)\u005ct...\u005cn",0x20,1,__stream);\u000a      fwrite("    Value  \u005ctValue   (Name) \u005ct...\u005cn\u005cn",0x21,1,__stream);\u000a    }\u000a    puVar9 = local_40;\u000a    if ((int)local_44 <= (int)local_4c) {\u000a      do {\u000a        local_38 = (ulong)local_44;\u000a        if (iVar2 == 0) {\u000a          __format = "    %3d    \u005ct";\u000a        }\u000a        else {\u000a          __format = "keycode %3d =";\u000a        }\u000a        fprintf(__stream,__format,local_38);\u000a        lVar4 = (long)(int)local_48;\u000a        uVar3 = local_48;\u000a        do {\u000a          uVar5 = uVar3;\u000a          lVar6 = lVar4;\u000a          if (lVar6 < 1) break;\u000a          lVar4 = lVar6 + -1;\u000a          uVar3 = uVar5 - 1;\u000a        } while (puVar9[lVar6 + -1] == 0);\u000a        if (0 < (int)lVar6) {\u000a          uVar7 = (ulong)uVar5;\u000a          puVar8 = puVar9;\u000a          do {\u000a            uVar1 = *puVar8;\u000a            if (uVar1 == 0) {\u000a              __format = "NoSymbol";\u000a              if (iVar2 != 0) goto LAB_004019ba;\u000aLAB_004019e0:\u000a              fprintf(__stream,"0x%04x (%s)\u005ct",uVar1 & 0xffffffff);\u000a            }\u000a            else {\u000a              __format = (char *)XKeysymToString(uVar1);\u000a              if (iVar2 == 0) goto LAB_004019e0;\u000aLAB_004019ba:\u000a              if (__format == (char *)0x0) {\u000a                fprintf(__stream," 0x%04x",uVar1 & 0xffffffff);\u000a              }\u000a              else {\u000a                fprintf(__stream," %s",__format);\u000a              }\u000a            }\u000a            puVar8 = puVar8 + 1;\u000a            uVar7 = uVar7 - 1;\u000a          } while (uVar7 != 0);\u000a        }\u000a        lVar4 = (long)(int)local_48;\u000a        fputc(10,__stream);\u000a        local_44 = (int)local_38 + 1;\u000a        puVar9 = puVar9 + lVar4;\u000a      } while ((int)local_38 < (int)local_4c);\u000a    }\u000a    XFree(local_40);\u000a  }\u000a  return;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RSI\nMOV R12D,EDI\nMOV RDI,qword ptr [0x006072b8]\nLEA RSI,[RSP + 0x14]\nLEA RDX,[RSP + 0xc]\nCALL 0x00401310\nMOV RDI,qword ptr [0x006072b8]\nMOV EAX,dword ptr [RSP + 0x14]\nMOV EDX,0x1\nSUB EDX,EAX\nADD EDX,dword ptr [RSP + 0xc]\nMOVZX ESI,AL\nLEA RCX,[RSP + 0x10]\nCALL 0x00401330\nMOV qword ptr [RSP + 0x18],RAX\nTEST RAX,RAX\nJZ 0x00401a61\nTEST R12D,R12D\nJNZ 0x0040190a\nMOV EDX,dword ptr [RSP + 0x10]\nMOV ECX,dword ptr [RSP + 0x14]\nMOV R8D,dword ptr [RSP + 0xc]\nMOV ESI,0x40439d\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401210\nMOV EDI,0x4043df\nMOV ESI,0x20\nMOV EDX,0x1\nMOV RCX,RBX\nCALL 0x00401370\nMOV EDI,0x404400\nMOV ESI,0x21\nMOV EDX,0x1\nMOV RCX,RBX\nCALL 0x00401370\nMOV ECX,dword ptr [RSP + 0x14]\nCMP ECX,dword ptr [RSP + 0xc]\nJG 0x00401a48\nMOV R15,qword ptr [RSP + 0x18]\nNOP dword ptr [RAX]\nTEST R12D,R12D\nMOV qword ptr [RSP + 0x20],RCX\nJZ 0x00401940\nMOV ESI,0x404422\nJMP 0x00401945\nMOV ESI,0x404430\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,RCX\nCALL 0x00401210\nMOV EDX,dword ptr [RSP + 0x10]\nMOVSXD RSI,EDX\nNOP dword ptr [RAX]\nMOV RCX,RSI\nMOV EAX,EDX\nTEST RCX,RCX\nJLE 0x00401979\nLEA RSI,[RCX + -0x1]\nLEA EDX,[RAX + -0x1]\nCMP qword ptr [R15 + RCX*0x8 + -0x8],0x0\nJZ 0x00401960\nTEST ECX,ECX\nJLE 0x00401a1e\nMOV R13D,EAX\nMOV R14,R15\nNOP word ptr [RAX + RAX*0x1]\nMOV RBP,qword ptr [R14]\nTEST RBP,RBP\nJZ 0x004019b0\nMOV RDI,RBP\nCALL 0x004013a0\nMOV RCX,RAX\nTEST R12D,R12D\nJNZ 0x004019ba\nJMP 0x004019e0\nMOV ECX,0x40443d\nTEST R12D,R12D\nJZ 0x004019e0\nTEST RCX,RCX\nJZ 0x00401a00\nMOV ESI,0x404cf9\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,RCX\nCALL 0x00401210\nJMP 0x00401a11\nTEST RCX,RCX\nMOV EAX,0x404453\nCMOVZ RCX,RAX\nMOV ESI,0x404446\nXOR EAX,EAX\nMOV RDI,RBX\nMOV EDX,EBP\nCALL 0x00401210\nJMP 0x00401a11\nMOV ESI,0x40445b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV EDX,EBP\nCALL 0x00401210\nADD R14,0x8\nDEC R13\nJNZ 0x00401990\nMOVSXD RAX,dword ptr [RSP + 0x10]\nLEA R15,[R15 + RAX*0x8]\nMOV EDI,0xa\nMOV RSI,RBX\nCALL 0x004011c0\nMOV RAX,qword ptr [RSP + 0x20]\nCMP EAX,dword ptr [RSP + 0xc]\nLEA EAX,[RAX + 0x1]\nMOV ECX,EAX\nJL 0x00401920\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00401190\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x00607280]\nMOV RDX,qword ptr [0x006072d8]\nMOV ESI,0x404371\nXOR EAX,EAX\nCALL 0x00401210\nJMP 0x00401a52\n'
p662
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 f3\n41 89 fc\n48 8b 3d 3d 5a 20 00\n48 8d 74 24 14\n48 8d 54 24 0c\ne8 86 fa ff ff\n48 8b 3d 27 5a 20 00\n8b 44 24 14\nba 01 00 00 00\n29 c2\n03 54 24 0c\n0f b6 f0\n48 8d 4c 24 10\ne8 83 fa ff ff\n48 89 44 24 18\n48 85 c0\n0f 84 a6 01 00 00\n45 85 e4\n75 4a\n8b 54 24 10\n8b 4c 24 14\n44 8b 44 24 0c\nbe 9d 43 40 00\n31 c0\n48 89 df\ne8 34 f9 ff ff\nbf df 43 40 00\nbe 20 00 00 00\nba 01 00 00 00\n48 89 d9\ne8 7d fa ff ff\nbf 00 44 40 00\nbe 21 00 00 00\nba 01 00 00 00\n48 89 d9\ne8 66 fa ff ff\n8b 4c 24 14\n3b 4c 24 0c\n0f 8f 30 01 00 00\n4c 8b 7c 24 18\n0f 1f 00\n45 85 e4\n48 89 4c 24 20\n74 16\nbe 22 44 40 00\neb 14\nbe 30 44 40 00\n31 c0\n48 89 df\n48 89 ca\ne8 be f8 ff ff\n8b 54 24 10\n48 63 f2\n0f 1f 80 00 00 00 00\n48 89 f1\n89 d0\n48 85 c9\n7e 0f\n48 8d 71 ff\n8d 50 ff\n49 83 7c cf f8 00\n74 e7\n85 c9\n0f 8e 9d 00 00 00\n41 89 c5\n4d 89 fe\n66 0f 1f 84 00 00 00 00 00\n49 8b 2e\n48 85 ed\n74 18\n48 89 ef\ne8 00 fa ff ff\n48 89 c1\n45 85 e4\n75 12\neb 36\nb9 3d 44 40 00\n45 85 e4\n74 26\n48 85 c9\n74 41\nbe f9 4c 40 00\n31 c0\n48 89 df\n48 89 ca\ne8 3f f8 ff ff\neb 3e\n48 85 c9\nb8 53 44 40 00\n48 0f 44 c8\nbe 46 44 40 00\n31 c0\n48 89 df\n89 ea\ne8 13 f8 ff ff\neb 12\nbe 5b 44 40 00\n31 c0\n48 89 df\n89 ea\ne8 ff f7 ff ff\n49 83 c6 08\n49 ff cd\n0f 85 72 ff ff ff\n48 63 44 24 10\n4d 8d 3c c7\nbf 0a 00 00 00\n48 89 de\ne8 8c f7 ff ff\n48 8b 44 24 20\n3b 44 24 0c\n8d 40 01\n89 c1\n0f 8c d8 fe ff ff\n48 8b 7c 24 18\ne8 3e f7 ff ff\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 18 58 20 00\n48 8b 15 69 58 20 00\nbe 71 43 40 00\n31 c0\ne8 95 f7 ff ff\neb d5\n'
p663
S'.text:0000000000401860\n.text:0000000000401861\n.text:0000000000401863\n.text:0000000000401865\n.text:0000000000401867\n.text:0000000000401869\n.text:000000000040186a\n.text:000000000040186e\n.text:0000000000401871\n.text:0000000000401874\n.text:000000000040187b\n.text:0000000000401880\n.text:0000000000401885\n.text:000000000040188a\n.text:0000000000401891\n.text:0000000000401895\n.text:000000000040189a\n.text:000000000040189c\n.text:00000000004018a0\n.text:00000000004018a3\n.text:00000000004018a8\n.text:00000000004018ad\n.text:00000000004018b2\n.text:00000000004018b5\n.text:00000000004018bb\n.text:00000000004018be\n.text:00000000004018c0\n.text:00000000004018c4\n.text:00000000004018c8\n.text:00000000004018cd\n.text:00000000004018d2\n.text:00000000004018d4\n.text:00000000004018d7\n.text:00000000004018dc\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018ee\n.text:00000000004018f3\n.text:00000000004018f8\n.text:00000000004018fd\n.text:0000000000401902\n.text:0000000000401905\n.text:000000000040190a\n.text:000000000040190e\n.text:0000000000401912\n.text:0000000000401918\n.text:000000000040191d\n.text:0000000000401920\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192a\n.text:000000000040192f\n.text:0000000000401940\n.text:0000000000401945\n.text:0000000000401947\n.text:000000000040194a\n.text:000000000040194d\n.text:0000000000401952\n.text:0000000000401956\n.text:0000000000401959\n.text:0000000000401960\n.text:0000000000401963\n.text:0000000000401965\n.text:0000000000401968\n.text:000000000040196a\n.text:000000000040196e\n.text:0000000000401971\n.text:0000000000401977\n.text:0000000000401979\n.text:000000000040197b\n.text:0000000000401981\n.text:0000000000401984\n.text:0000000000401987\n.text:0000000000401990\n.text:0000000000401993\n.text:0000000000401996\n.text:0000000000401998\n.text:000000000040199b\n.text:00000000004019a0\n.text:00000000004019a3\n.text:00000000004019a6\n.text:00000000004019a8\n.text:00000000004019b0\n.text:00000000004019b5\n.text:00000000004019b8\n.text:00000000004019ba\n.text:00000000004019bd\n.text:00000000004019bf\n.text:00000000004019c4\n.text:00000000004019c6\n.text:00000000004019c9\n.text:00000000004019cc\n.text:00000000004019d1\n.text:00000000004019e0\n.text:00000000004019e3\n.text:00000000004019e8\n.text:00000000004019ec\n.text:00000000004019f1\n.text:00000000004019f3\n.text:00000000004019f6\n.text:00000000004019f8\n.text:00000000004019fd\n.text:0000000000401a00\n.text:0000000000401a05\n.text:0000000000401a07\n.text:0000000000401a0a\n.text:0000000000401a0c\n.text:0000000000401a11\n.text:0000000000401a15\n.text:0000000000401a18\n.text:0000000000401a1e\n.text:0000000000401a23\n.text:0000000000401a27\n.text:0000000000401a2c\n.text:0000000000401a2f\n.text:0000000000401a34\n.text:0000000000401a39\n.text:0000000000401a3d\n.text:0000000000401a40\n.text:0000000000401a42\n.text:0000000000401a48\n.text:0000000000401a4d\n.text:0000000000401a52\n.text:0000000000401a56\n.text:0000000000401a57\n.text:0000000000401a59\n.text:0000000000401a5b\n.text:0000000000401a5d\n.text:0000000000401a5f\n.text:0000000000401a60\n.text:0000000000401a61\n.text:0000000000401a68\n.text:0000000000401a6f\n.text:0000000000401a74\n.text:0000000000401a76\n.text:0000000000401a7b\n'
p664
tp665
sS'AddModifier'
p666
(S'\n__stdcall AddModifier(XModifierKeymap * * mapp)\n'
p667
V\u000aint AddModifier(XModifierKeymap **mapp)\u000a\u000a{\u000a  XModifierKeymap *pXVar1;\u000a  byte in_SIL;\u000a  \u000a  if (in_SIL != 0) {\u000a    pXVar1 = (XModifierKeymap *)XInsertModifiermapEntry(*mapp,(ulong)in_SIL);\u000a    *mapp = pXVar1;\u000a    return 0;\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p668
S'PUSH RBX\nMOV RBX,RDI\nTEST SIL,SIL\nJZ 0x0040166c\nMOV RDI,qword ptr [RBX]\nMOVZX ESI,SIL\nCALL 0x00401150\nMOV qword ptr [RBX],RAX\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0xffffffff\nPOP RBX\nRET\n'
p669
S'53\n48 89 fb\n40 84 f6\n74 13\n48 8b 3b\n40 0f b6 f6\ne8 eb fa ff ff\n48 89 03\n31 c0\n5b\nc3\nb8 ff ff ff ff\n5b\nc3\n'
p670
S'.text:0000000000401650\n.text:0000000000401651\n.text:0000000000401654\n.text:0000000000401657\n.text:0000000000401659\n.text:000000000040165c\n.text:0000000000401660\n.text:0000000000401665\n.text:0000000000401668\n.text:000000000040166a\n.text:000000000040166b\n.text:000000000040166c\n.text:0000000000401671\n.text:0000000000401672\n'
p671
tp672
sS'register_tm_clones'
p673
(S'\n__stdcall register_tm_clones()\n'
p674
V\u000a/* WARNING: Removing unreachable block (ram,0x00401473) */\u000a/* WARNING: Removing unreachable block (ram,0x0040147d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p675
S'MOV ESI,0x607258\nPUSH RBP\nSUB RSI,0x607258\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401488\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401488\nPOP RBP\nMOV EDI,0x607258\nJMP RAX\nPOP RBP\nRET\n'
p676
S'be 58 72 60 00\n55\n48 81 ee 58 72 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 58 72 60 00\nff e0\n5d\nc3\n'
p677
S'.text:0000000000401450\n.text:0000000000401455\n.text:0000000000401456\n.text:000000000040145d\n.text:0000000000401461\n.text:0000000000401464\n.text:0000000000401467\n.text:000000000040146b\n.text:000000000040146e\n.text:0000000000401471\n.text:0000000000401473\n.text:0000000000401478\n.text:000000000040147b\n.text:000000000040147d\n.text:000000000040147e\n.text:0000000000401483\n.text:0000000000401488\n.text:0000000000401489\n'
p678
tp679
sS'fclose'
p680
(S'\n__stdcall fclose(FILE * __stream)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00607058)();\u000a  return iVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x00607058]\n'
p683
S'ff 25 f2 5e 20 00\n'
p684
S'.plt:0000000000401160\n'
p685
tp686
sS'exec_pointer'
p687
(S'\n__stdcall exec_pointer(op_pointer * opp)\n'
p688
V\u000aint exec_pointer(op_pointer *opp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = SetPointerMap(opp->button_codes);\u000a  return iVar1;\u000a}\u000a\u000a
p689
S'MOV ESI,dword ptr [RDI + 0x10]\nADD RDI,0x14\nJMP 0x00401b30\n'
p690
S'8b 77 10\n48 83 c7 14\ne9 44 f5 ff ff\n'
p691
S'.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e7\n'
p692
tp693
sS'fwrite'
p694
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00607160)();\u000a  return sVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x00607160]\n'
p697
S'ff 25 ea 5d 20 00\n'
p698
S'.plt:0000000000401370\n'
p699
tp700
sS'PrintPointerMap'
p701
(S'\n__stdcall PrintPointerMap(FILE * fp)\n'
p702
V\u000avoid PrintPointerMap(FILE *fp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  ulong uVar3;\u000a  uchar pmap [256];\u000a  byte local_118 [256];\u000a  \u000a  uVar2 = XGetPointerMapping(dpy,local_118,0x100);\u000a  fprintf((FILE *)fp,"There are %d pointer buttons defined.\u005cn\u005cn",(ulong)uVar2);\u000a  fwrite("    Physical        Button\u005cn",0x1b,1,(FILE *)fp);\u000a  fwrite("     Button          Code\u005cn",0x1a,1,(FILE *)fp);\u000a  if (0 < (int)uVar2) {\u000a    uVar3 = 0;\u000a    do {\u000a      pbVar1 = local_118 + uVar3;\u000a      uVar3 = uVar3 + 1;\u000a      fprintf((FILE *)fp,"      %3u            %3u\u005cn",uVar3 & 0xffffffff,(ulong)*pbVar1);\u000a    } while ((ulong)uVar2 != uVar3);\u000a  }\u000a  fputc(10,(FILE *)fp);\u000a  return;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x100\nMOV R14,RDI\nMOV RDI,qword ptr [0x006072b8]\nMOV RSI,RSP\nMOV EDX,0x100\nCALL 0x00401240\nMOV EBP,EAX\nMOV ESI,0x404463\nXOR EAX,EAX\nMOV RDI,R14\nMOV EDX,EBP\nCALL 0x00401210\nMOV EDI,0x40448b\nMOV ESI,0x1b\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00401370\nMOV EDI,0x4044a7\nMOV ESI,0x1a\nMOV EDX,0x1\nMOV RCX,R14\nCALL 0x00401370\nTEST EBP,EBP\nJLE 0x00401b0d\nMOV EBX,EBP\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RSP + RBP*0x1]\nINC RBP\nMOV ESI,0x4044c2\nXOR EAX,EAX\nMOV RDI,R14\nMOV EDX,EBP\nCALL 0x00401210\nCMP RBX,RBP\nJNZ 0x00401af0\nMOV EDI,0xa\nMOV RSI,R14\nCALL 0x004011c0\nADD RSP,0x100\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p704
S'55\n41 56\n53\n48 81 ec 00 01 00 00\n49 89 fe\n48 8b 3d 23 58 20 00\n48 89 e6\nba 00 01 00 00\ne8 9e f7 ff ff\n89 c5\nbe 63 44 40 00\n31 c0\n4c 89 f7\n89 ea\ne8 5b f7 ff ff\nbf 8b 44 40 00\nbe 1b 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 a4 f8 ff ff\nbf a7 44 40 00\nbe 1a 00 00 00\nba 01 00 00 00\n4c 89 f1\ne8 8d f8 ff ff\n85 ed\n7e 26\n89 eb\n31 ed\n0f 1f 44 00 00\n0f b6 0c 2c\n48 ff c5\nbe c2 44 40 00\n31 c0\n4c 89 f7\n89 ea\ne8 08 f7 ff ff\n48 39 eb\n75 e3\nbf 0a 00 00 00\n4c 89 f6\ne8 a6 f6 ff ff\n48 81 c4 00 01 00 00\n5b\n41 5e\n5d\nc3\n'
p705
S'.text:0000000000401a80\n.text:0000000000401a81\n.text:0000000000401a83\n.text:0000000000401a84\n.text:0000000000401a8b\n.text:0000000000401a8e\n.text:0000000000401a95\n.text:0000000000401a98\n.text:0000000000401a9d\n.text:0000000000401aa2\n.text:0000000000401aa4\n.text:0000000000401aa9\n.text:0000000000401aab\n.text:0000000000401aae\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abf\n.text:0000000000401ac4\n.text:0000000000401ac7\n.text:0000000000401acc\n.text:0000000000401ad1\n.text:0000000000401ad6\n.text:0000000000401adb\n.text:0000000000401ade\n.text:0000000000401ae3\n.text:0000000000401ae5\n.text:0000000000401ae7\n.text:0000000000401ae9\n.text:0000000000401aeb\n.text:0000000000401af0\n.text:0000000000401af4\n.text:0000000000401af7\n.text:0000000000401afc\n.text:0000000000401afe\n.text:0000000000401b01\n.text:0000000000401b03\n.text:0000000000401b08\n.text:0000000000401b0b\n.text:0000000000401b0d\n.text:0000000000401b12\n.text:0000000000401b15\n.text:0000000000401b1a\n.text:0000000000401b21\n.text:0000000000401b22\n.text:0000000000401b24\n.text:0000000000401b25\n'
p706
tp707
sS'skip_until_char'
p708
(S'\n__stdcall skip_until_char()\n'
p709
V\u000aint skip_until_char(void)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  long in_RDI;\u000a  \u000a  if (in_ESI < 1) {\u000a    return 0;\u000a  }\u000a  lVar1 = 0;\u000a  do {\u000a    if (*(char *)(in_RDI + lVar1) == '=') {\u000a      return (int)lVar1;\u000a    }\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 < (long)in_ESI);\u000a  return (int)lVar1;\u000a}\u000a\u000a
p710
S'TEST ESI,ESI\nJLE 0x004033af\nMOVSXD RCX,ESI\nXOR EAX,EAX\nNOP dword ptr [RAX]\nCMP byte ptr [RDI + RAX*0x1],0x3d\nJZ 0x004033ae\nINC RAX\nCMP RAX,RCX\nJL 0x004033a0\nRET\nXOR EAX,EAX\nRET\n'
p711
S'85 f6\n7e 1b\n48 63 ce\n31 c0\n0f 1f 80 00 00 00 00\n80 3c 07 3d\n74 08\n48 ff c0\n48 39 c8\n7c f2\nc3\n31 c0\nc3\n'
p712
S'.text:0000000000403390\n.text:0000000000403392\n.text:0000000000403394\n.text:0000000000403397\n.text:0000000000403399\n.text:00000000004033a0\n.text:00000000004033a4\n.text:00000000004033a6\n.text:00000000004033a9\n.text:00000000004033ac\n.text:00000000004033ae\n.text:00000000004033af\n.text:00000000004033b1\n'
p713
tp714
sS'XSync'
p715
(S'\n__stdcall XSync()\n'
p716
V\u000avoid XSync(void)\u000a\u000a{\u000a  (*(code *)PTR_XSync_00607110)();\u000a  return;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00607110]\n'
p718
S'ff 25 3a 5e 20 00\n'
p719
S'.plt:00000000004012d0\n'
p720
tp721
sS'add_to_work_queue'
p722
(S'\n__stdcall add_to_work_queue(op * p)\n'
p723
V\u000avoid add_to_work_queue(op *p)\u000a\u000a{\u000a  wq *pwVar1;\u000a  op **ppabVar2;\u000a  \u000a  pwVar1 = &work_queue;\u000a  ppabVar2 = (op **)(*work_queue.tail + 8);\u000a  if (work_queue.head == (op *)0x0) {\u000a    ppabVar2 = &work_queue.tail;\u000a  }\u000a  else {\u000a    pwVar1 = (wq *)&work_queue.tail;\u000a  }\u000a  *ppabVar2 = p;\u000a  pwVar1->head = p;\u000a  *(undefined8 *)(*p + 8) = 0;\u000a  if (verbose == 0) {\u000a    return;\u000a  }\u000a  print_opcode(p);\u000a  return;\u000a}\u000a\u000a
p724
S'MOV EAX,0x607290\nMOV RCX,qword ptr [0x00607298]\nADD RCX,0x8\nCMP qword ptr [0x00607290],0x0\nMOV EDX,0x607298\nCMOVZ RCX,RDX\nCMOVNZ RAX,RDX\nMOV qword ptr [RCX],RDI\nMOV qword ptr [RAX],RDI\nMOV qword ptr [RDI + 0x8],0x0\nCMP dword ptr [0x006072c0],0x0\nJZ 0x00403601\nJMP 0x00401f50\nRET\n'
p725
S'b8 90 72 60 00\n48 8b 0d cc 3c 20 00\n48 83 c1 08\n48 83 3d b8 3c 20 00 00\nba 98 72 60 00\n48 0f 44 ca\n48 0f 45 c2\n48 89 39\n48 89 38\n48 c7 47 08 00 00 00 00\n83 3d c6 3c 20 00 00\n74 05\ne9 4f e9 ff ff\nc3\n'
p726
S'.text:00000000004035c0\n.text:00000000004035c5\n.text:00000000004035cc\n.text:00000000004035d0\n.text:00000000004035d8\n.text:00000000004035dd\n.text:00000000004035e1\n.text:00000000004035e5\n.text:00000000004035e8\n.text:00000000004035eb\n.text:00000000004035f3\n.text:00000000004035fa\n.text:00000000004035fc\n.text:0000000000403601\n'
p727
tp728
sS'XInsertModifiermapEntry'
p729
(S'\n__stdcall XInsertModifiermapEntry()\n'
p730
V\u000avoid XInsertModifiermapEntry(void)\u000a\u000a{\u000a  (*(code *)PTR_XInsertModifiermapEntry_00607050)();\u000a  return;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00607050]\n'
p732
S'ff 25 fa 5e 20 00\n'
p733
S'.plt:0000000000401150\n'
p734
tp735
sS'__do_global_dtors_aux'
p736
(S'\n__stdcall __do_global_dtors_aux()\n'
p737
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p738
S'CMP byte ptr [0x00607288],0x0\nJNZ 0x004014aa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401410\nPOP RBP\nMOV byte ptr [0x00607288],0x1\nRET\n'
p739
S'80 3d f1 5d 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 de 5d 20 00 01\nf3 c3\n'
p740
S'.text:0000000000401490\n.text:0000000000401497\n.text:0000000000401499\n.text:000000000040149a\n.text:000000000040149d\n.text:00000000004014a2\n.text:00000000004014a3\n.text:00000000004014aa\n'
p741
tp742
sS'strncpy'
p743
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_00607028)();\u000a  return pcVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00607028]\n'
p746
S'ff 25 22 5f 20 00\n'
p747
S'.plt:0000000000401100\n'
p748
tp749
sS'_fini'
p750
(S'\n__stdcall _fini()\n'
p751
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p752
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p753
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p754
S'.fini:0000000000404284\n.fini:0000000000404288\n.fini:000000000040428c\n'
p755
tp756
sS'XRefreshKeyboardMapping'
p757
(S'\n__stdcall XRefreshKeyboardMapping()\n'
p758
V\u000avoid XRefreshKeyboardMapping(void)\u000a\u000a{\u000a  (*(code *)PTR_XRefreshKeyboardMapping_00607108)();\u000a  return;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x00607108]\n'
p760
S'ff 25 42 5e 20 00\n'
p761
S'.plt:00000000004012c0\n'
p762
tp763
s.